void CA::WindowServer::IOMFBServer::set_edr_enabled(CA::WindowServer::IOMFBServer *this, uint64_t a2, float a3)
{
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  unsigned int v10;
  uint64_t v11;
  pthread_mutex_t *v12;
  pthread_mutex_t *v13;
  int v14;
  NSObject *sig;
  pthread_mutex_t *v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  int v23;
  float v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (CADeviceHasBacklight::once != -1)
    dispatch_once(&CADeviceHasBacklight::once, &__block_literal_global_85);
  if (CADeviceHasBacklight::has_backlight == 1
    && (*(_BYTE *)(*((_QWORD *)this + 12) + 746) & 2) != 0
    && CA::WindowServer::IOMFBServer::edr_client(this))
  {
    v6 = *((_QWORD *)this + 12);
    if ((*((_BYTE *)this + 1006) & 4) == 0 && (_DWORD)a2 && !*(_BYTE *)(v6 + 28123))
    {
      CA::WindowServer::IOMFBServer::register_libedr_callbacks(this);
      v6 = *((_QWORD *)this + 12);
    }
    if (*(_BYTE *)(v6 + 28123))
    {
      v7 = 1.0;
      if ((_DWORD)a2)
      {
        v8 = *(_QWORD *)(v6 + 688);
        v9 = 1.0;
        if (v8)
        {
          *(float *)&v10 = COERCE_FLOAT(atomic_load((unsigned int *)(v8 + 4)));
          v9 = *(float *)&v10;
        }
        if (a3 <= 1.0)
          v7 = v9;
        else
          v7 = a3;
        if (v7 >= v9)
          v7 = v9;
      }
      if (v7 != *((float *)this + 210))
      {
        *((float *)this + 210) = v7;
        v11 = *((_QWORD *)this + 31);
        if (v11)
          (*(void (**)(uint64_t, uint64_t, _QWORD))(v11 + 16))(v11, a2, (*(_DWORD *)(*((_QWORD *)this + 12) + 745) >> 14) & 1);
      }
      return;
    }
    v12 = (pthread_mutex_t *)CA::WindowServer::IOMFBServer::edr_client(this);
    v13 = v12;
    if (a3 > 1.0)
    {
      pthread_mutex_lock(v12 + 1);
      if (*(float *)&v13[2].__opaque[12] != a3)
      {
        *(float *)&v13[2].__opaque[12] = a3;
        v13[2].__opaque[9] = 1;
        v14 = CA::EDRClient::client(v13);
        if (v14)
        {
          sig = v13[2].__sig;
          v19 = MEMORY[0x1E0C809B0];
          v20 = 0x40000000;
          v21 = ___ZN2CA9EDRClient20set_edr_max_headroomEf_block_invoke;
          v22 = &__block_descriptor_tmp_9_14821;
          v23 = v14;
          v24 = a3;
          dispatch_async(sig, &v19);
        }
      }
      v16 = v13 + 1;
LABEL_35:
      pthread_mutex_unlock(v16);
      return;
    }
    if (CADeviceHasBacklight::once != -1)
      dispatch_once(&CADeviceHasBacklight::once, &__block_literal_global_85);
    if (CADeviceHasBacklight::has_backlight == 1)
    {
      pthread_mutex_lock(v13 + 1);
      if (v13[2].__opaque[9] != (_DWORD)a2 || *(float *)&v13[2].__opaque[12] != 0.0)
      {
        v13[2].__opaque[9] = a2;
        *(_DWORD *)&v13[2].__opaque[12] = 0;
        v17 = CA::EDRClient::client(v13);
        if (v17)
        {
          v18 = v13[2].__sig;
          v19 = MEMORY[0x1E0C809B0];
          v20 = 0x40000000;
          v21 = ___ZN2CA9EDRClient15set_edr_enabledEb_block_invoke;
          v22 = &__block_descriptor_tmp_8_14814;
          LOBYTE(v24) = a2;
          v23 = v17;
          dispatch_async(v18, &v19);
        }
      }
      v16 = v13 + 1;
      goto LABEL_35;
    }
  }
}

uint64_t CA::WindowServer::IOMFBServer::edr_client(CA::WindowServer::IOMFBServer *this)
{
  uint64_t v1;
  int v3;
  _opaque_pthread_t *v9;
  int v11;
  sched_param v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 104);
  if (!v1)
  {
    if ((*(_BYTE *)(*((_QWORD *)this + 12) + 746) & 2) != 0)
    {
      v1 = operator new();
      v3 = *(_DWORD *)(*((_QWORD *)this + 12) + 24);
      *(_OWORD *)(v1 + 40) = 0u;
      *(_OWORD *)(v1 + 24) = 0u;
      *(_OWORD *)(v1 + 8) = 0u;
      *(_QWORD *)v1 = 850045863;
      *(_QWORD *)(v1 + 120) = 0;
      *(_QWORD *)(v1 + 128) = 0;
      *(_OWORD *)(v1 + 104) = 0u;
      *(_OWORD *)(v1 + 88) = 0u;
      *(_OWORD *)(v1 + 72) = 0u;
      *(_QWORD *)(v1 + 56) = 0;
      *(_QWORD *)(v1 + 64) = 850045863;
      *(_DWORD *)(v1 + 136) = 0;
      *(_DWORD *)(v1 + 140) = v3;
      *(_DWORD *)(v1 + 144) = 0;
      __asm { FMOV            V0.2S, #1.0 }
      *(_QWORD *)(v1 + 148) = _D0;
      if (CADeviceHasBacklight::once != -1)
        dispatch_once(&CADeviceHasBacklight::once, &__block_literal_global_85);
      if (CADeviceHasBacklight::has_backlight == 1)
      {
        v12 = 0;
        v11 = 0;
        v9 = pthread_self();
        pthread_getschedparam(v9, &v11, &v12);
        *(_QWORD *)(v1 + 128) = CACreateQueueWithWorkloop("com.apple.coreanimation.edr_client");
        if (init_libedr(void)::once[0] != -1)
          dispatch_once(init_libedr(void)::once, &__block_literal_global_14798);
      }
      *((_QWORD *)this + 104) = v1;
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

void CA::WindowServer::IOMFBServer::add_vsync_source(CA::WindowServer::IOMFBServer *this, float *a2)
{
  double v3;
  _DWORD *v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  __CFRunLoopSource *VSyncRunLoopSource;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 1006) & 2) != 0)
  {
    if (*((_QWORD *)this + 98))
      return;
    if ((CA::WindowServer::Display::benchmark_mode(0, a2) & 1) != 0)
      return;
    VSyncRunLoopSource = (__CFRunLoopSource *)IOMobileFramebufferGetVSyncRunLoopSource();
    *((_QWORD *)this + 98) = VSyncRunLoopSource;
    if (!VSyncRunLoopSource)
      return;
    CA::WindowServer::IOMFBServer::add_runloop_source(this, VSyncRunLoopSource, 0);
  }
  else
  {
    if (*((_QWORD *)this + 100) || (CA::WindowServer::Display::benchmark_mode(0, a2) & 1) != 0)
      return;
    CA::WindowServer::IOMFBServer::add_runloop_source(this, 0, 0);
    v12 = 0;
    v13 = 0;
    v11 = (unint64_t)this;
    (*(void (**)(_QWORD))(**((_QWORD **)this + 12) + 744))(*((_QWORD *)this + 12));
    v4 = (_DWORD *)*((_QWORD *)this + 12);
    if ((v4[156] & 0x100) != 0)
      v3 = (*(double (**)(_DWORD *))(*(_QWORD *)v4 + 760))(v4);
    v5 = v3;
    v6 = mach_absolute_time();
    v7 = CATimeWithHostTime(v6);
    v8 = CADisplayTimerCreate((uint64_t)CA::WindowServer::IOMFBServer::timer_callback, &v11, 0, v7, v5);
    *((_QWORD *)this + 100) = v8;
    pthread_mutex_lock((pthread_mutex_t *)(v8 + 16));
    *(_BYTE *)(v8 + 201) = 1;
    pthread_mutex_unlock((pthread_mutex_t *)(v8 + 16));
    CA::WindowServer::IOMFBServer::refresh_timer_interval(this);
  }
  if (*((_DWORD *)this + 250))
    CA::WindowServer::IOMFBServer::set_vsync_enabled(this);
  v10 = *((_QWORD *)this + 12);
  if (*(_BYTE *)(v10 + 28123))
  {
    if ((*(_WORD *)(v10 + 656) & 0x1C00) != 0)
      IOMobileFramebufferSetBrightnessControlCallback();
  }
}

void CA::WindowServer::IOMFBDisplay::set_enabled(CA::WindowServer::IOMFBDisplay *this, int a2)
{
  char *v4;
  BOOL v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  float v11;
  float v12;
  _QWORD *i;
  _QWORD **v14;
  uint8_t buf[4];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (char *)this + 26136;
  if (*((unsigned __int8 *)this + 28044) == a2 && !*((_BYTE *)this + 28049))
  {
    if ((a2 & 1) != 0)
      return;
    if (!*((_BYTE *)this + 28048))
      goto LABEL_30;
  }
  else
  {
    if (*((_BYTE *)this + 28044))
      v5 = 1;
    else
      v5 = a2 == 0;
    if (!v5)
    {
      v6 = mach_absolute_time();
      atomic_store(COERCE_UNSIGNED_INT64(CATimeWithHostTime(v6)), (unint64_t *)this + 3437);
    }
  }
  v4[1908] = a2;
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v7 = x_log_category_display_state;
    if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v16 = a2;
      _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_DEFAULT, "IOMFBDisplay::set_enabled=%u", buf, 8u);
    }
  }
  if (a2)
  {
    if (v4[1913])
    {
      v8 = v4[1923];
      if (v8 == (*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 848))(this))
      {
        v9 = 0;
      }
      else
      {
        v4[1923] = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 848))(this);
        v9 = 16;
      }
      v11 = *(float *)v4;
      if (v11 != (*(float (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 904))(this))
      {
        *(float *)v4 = (*(float (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 904))(this);
        v9 |= 0x20u;
      }
      v12 = *((float *)v4 + 19);
      if (v12 != (*(float (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1000))(this))
      {
        *((float *)v4 + 19) = (*(float (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1000))(this);
        v9 |= 0x100u;
      }
      v4[1927] = 1;
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 560));
      CA::WindowServer::IOMFBDisplay::update_framebuffer_locked(this, v9);
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 560));
    }
    else
    {
      v10 = *((_DWORD *)v4 + 77);
      if (v10)
      {
        pthread_mutex_lock((pthread_mutex_t *)((char *)this + 560));
        CA::WindowServer::IOMFBDisplay::update_framebuffer_locked(this, v10);
        pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 560));
        *((_DWORD *)v4 + 77) = 0;
      }
    }
  }
  if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 696))(this) & 1) == 0)
  {
    v4[1913] = 0;
    CA::WindowServer::IOMFBDisplay::set_enabled_(this, a2);
  }
  if ((a2 & 1) == 0)
  {
LABEL_30:
    for (i = (_QWORD *)*((_QWORD *)this + 5); i; i = (_QWORD *)i[1])
    {
      v14 = (_QWORD **)*i;
      if ((*((_BYTE *)this + 56) & 0x20) != 0)
      {
        ((void (*)(_QWORD **, _QWORD))(*v14)[24])(v14, 0);
      }
      else if ((*(unsigned int (**)(_QWORD *))(*v14[12] + 696))(v14[12]))
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(*i + 96) + 704))(*(_QWORD *)(*i + 96));
      }
    }
    CA::WindowServer::Display::update_clone_flags(this, 0);
  }
}

void CA::WindowServer::IOMFBServer::add_power_log_timer(CFRunLoopRef *this)
{
  CFAbsoluteTime Current;
  CFRunLoopTimerContext v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (!this[101])
  {
    v3.version = 0;
    memset(&v3.retain, 0, 24);
    v3.info = this;
    Current = CFAbsoluteTimeGetCurrent();
    this[101] = CFRunLoopTimerCreate(0, Current + 300.0, 300.0, 0, 0, (CFRunLoopTimerCallBack)CA::WindowServer::IOMFBServer::add_power_log_timer(void)::$_0::__invoke, &v3);
    CA::WindowServer::IOMFBServer::add_runloop_source((CA::WindowServer::IOMFBServer *)this, 0, 0);
    CFRunLoopAddTimer(this[96], this[101], (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
  }
}

void CA::OGL::Shape::FillRenderer::render_mask(CA::OGL::Shape::FillRenderer *this, unsigned __int8 *a2, uint64_t a3, const CA::Bounds *a4)
{
  CA::ScanConverter::render_mask(*((_QWORD *)this + 1), *((unsigned int *)this + 4), (uint64_t)a2, a3, *(unsigned int *)a4, *((unsigned int *)a4 + 1), (*((_DWORD *)a4 + 2) + *(_DWORD *)a4), (*((_DWORD *)a4 + 3) + *((_DWORD *)a4 + 1)), *((_BYTE *)this + 20));
}

void CA::ScanConverter::render_mask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  char *v31;
  int *v32;
  int v33;
  char *v34;
  float32x2_t v35;
  int32x2_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  char *v41;
  float *v42;
  float v43;
  int v44;
  float v45;
  float *v46;
  float *v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float *v57;
  char v58;
  float **v59;
  float **v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  float v64;
  float *v65;
  float v66;
  float v67;
  uint64_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  float *v79;
  uint64_t v80;
  _BYTE *v81;
  float v82;
  int i;
  float j;
  float v85;
  float *v86;
  float v87;
  float v88;
  uint64_t v89;
  uint64_t *v90;
  float v91;
  int v92;
  float v93;
  float v94;
  uint64_t v95;
  float v96;
  float v97;
  float v98;
  float *v99;
  float *v100;
  float v101;
  float v102;
  int v103;
  float v104;
  float v105;
  float v107;
  int v108;
  signed int v109;
  uint64_t v110;
  unint64_t v111;
  _WORD *v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  signed int v116;
  signed int v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  int *v121;
  char *v122;
  int *v123;
  int v124;
  char *v125;
  float32x2_t v126;
  int32x2_t v127;
  int v128;
  int v129;
  int v130;
  uint64_t v131;
  __int128 *v132;
  char *v133;
  float *v134;
  float v135;
  int v136;
  float v137;
  float *v138;
  float *v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float *v149;
  char v150;
  float **v151;
  float **v152;
  char v153;
  unint64_t v154;
  uint64_t v155;
  float v156;
  float *v157;
  float v158;
  float v159;
  uint64_t v160;
  uint64_t v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  uint64_t v169;
  float *v170;
  float *v171;
  uint64_t v172;
  float *v173;
  uint64_t v174;
  _BYTE *v175;
  float v176;
  int k;
  float m;
  float v179;
  float *v180;
  float v181;
  float v182;
  uint64_t v183;
  uint64_t *v184;
  float v185;
  int v186;
  float v187;
  int v188;
  float v189;
  unint64_t v190;
  uint64_t v191;
  float v192;
  float v193;
  uint64_t v194;
  float v195;
  float v196;
  float v197;
  float *v198;
  float *v199;
  float v200;
  int v201;
  float v202;
  _BOOL4 v203;
  float v204;
  float v205;
  _WORD *v207;
  char v208;
  signed int v209;
  signed int v210;
  uint64_t v211;
  char *v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  float *v220;
  uint64_t *v221;
  uint64_t v222;
  _QWORD *v223;
  __int128 v224;
  _QWORD v225[1022];

  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v20 = v9;
  v225[1020] = *MEMORY[0x1E0C80C00];
  v215 = v22;
  v218 = v21 - v16 - v14 * v22;
  v23 = *(_QWORD *)(v9 + 24);
  v24 = 32 * v23;
  if (a9)
  {
    if ((unint64_t)(32 * v23) > 0x1000)
    {
      v25 = (char *)malloc_type_malloc(32 * v23, 0x145CA901uLL);
      if (!v25)
        return;
    }
    else
    {
      MEMORY[0x1E0C80A78](v9);
      v25 = (char *)&v211 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v25, 32 * v23);
    }
    v213 = 32 * v23;
    v27 = *(_QWORD **)(v20 + 8);
    if (v27)
    {
      v28 = 0;
      do
      {
        v29 = v27[1];
        if (v29)
        {
          v30 = (int *)(v27 + 3);
          v31 = &v25[16 * v28 + 8];
          v28 += v29;
          v32 = (int *)(v27 + 3);
          do
          {
            v33 = *v32;
            v32 += 6;
            *((_DWORD *)v31 - 2) = ((v33 >> 31) | 0x80000000) ^ v33;
            *(_QWORD *)v31 = v30;
            v31 += 16;
            v30 = v32;
            --v29;
          }
          while (v29);
        }
        v27 = (_QWORD *)*v27;
      }
      while (v27);
    }
    v34 = &v25[16 * v23];
    v212 = v25;
    CA::radix_sort(v23);
    if (v17 <= -16777216)
      v37 = -16777216;
    else
      v37 = v17;
    v216 = v37;
    if (v13 >= 0x1000000)
      v13 = 0x1000000;
    if (v15 <= -16777216)
      v38 = -16777216;
    else
      v38 = v15;
    v222 = 0;
    v223 = v225;
    if (v11 >= 0x1000000)
      v39 = 0x1000000;
    else
      v39 = v11;
    v224 = xmmword_18474E1F0;
    v220 = 0;
    v221 = &v222;
    v217 = v39;
    if (v38 < v39)
    {
      v40 = 0;
      v41 = v212;
      v214 = v218 + v216;
      while (1)
      {
        v42 = v220;
        if (v220)
        {
          v43 = (float)v38;
          v44 = v38 + 1;
          v45 = (float)(v38 + 1);
          v46 = (float *)&v220;
          do
          {
            v47 = (float *)*((_QWORD *)v42 + 2);
            v48 = v47[1];
            if (v48 <= v43)
            {
              *(_QWORD *)v46 = *(_QWORD *)v42;
              *(_QWORD *)v42 = v40;
              v40 = (uint64_t)v42;
              v42 = v46;
            }
            else
            {
              v49 = *v47;
              if (*v47 >= v43)
                v50 = *v47;
              else
                v50 = (float)v38;
              if (v48 > v45)
                v48 = (float)v44;
              v51 = v47[2];
              v52 = v47[3];
              v53 = v47[4];
              v54 = v53 + (float)((float)(v52 + (float)((float)(v50 - v49) * v51)) * (float)(v50 - v49));
              v55 = v53 + (float)((float)(v52 + (float)((float)(v48 - v49) * v51)) * (float)(v48 - v49));
              if (v54 >= v55)
                v56 = v55;
              else
                v56 = v54;
              if (v54 > v55)
                v55 = v54;
              *(float *)v36.i32 = fmaxf(v55 - v56, 0.000001);
              v36 = (int32x2_t)vrecpe_f32((float32x2_t)vdup_lane_s32(v36, 0));
              v42[7] = v56;
              v42[8] = v55;
              v42[6] = v47[5] * (float)(v48 - v50);
              v42[9] = *(float *)v36.i32;
              v46 = v42;
            }
            v42 = *(float **)v42;
          }
          while (v42);
          v57 = v220;
          if (v220)
          {
            v58 = 0;
            v59 = &v220;
            do
            {
              while (1)
              {
                v60 = v59;
                v59 = (float **)v57;
                v57 = *(float **)v57;
                if (!v57)
                  break;
                if (*((float *)v59 + 7) > v57[7])
                {
                  *v60 = v57;
                  *v59 = *(float **)v57;
                  *(_QWORD *)v57 = v59;
                  v58 = 1;
                }
              }
              v57 = v220;
              v61 = v58 & (v220 != 0);
              v59 = &v220;
              v58 = 0;
            }
            while ((v61 & 1) != 0);
          }
        }
        else
        {
          v44 = v38 + 1;
          v45 = (float)(v38 + 1);
        }
        LODWORD(v218) = v44;
        if (v41 >= v34)
          goto LABEL_81;
        v62 = 0;
        v63 = 0;
        v64 = (float)v38;
        do
        {
          v65 = (float *)*((_QWORD *)v41 + 1);
          v66 = *v65;
          if (*v65 >= v45)
            break;
          v67 = v65[1];
          if (v67 > v64)
          {
            if (v40)
            {
              v68 = *(_QWORD *)v40;
            }
            else
            {
              v40 = x_heap_malloc_small_(v221, 0x28uLL);
              v68 = 0;
              v65 = (float *)*((_QWORD *)v41 + 1);
              v66 = *v65;
              v67 = v65[1];
            }
            *(_QWORD *)(v40 + 16) = v65;
            if (v66 >= v64)
              v69 = v66;
            else
              v69 = (float)v38;
            if (v67 > v45)
              v67 = v45;
            v70 = v65[2];
            v71 = v65[3];
            v72 = v65[4];
            v73 = v72 + (float)((float)(v71 + (float)((float)(v69 - v66) * v70)) * (float)(v69 - v66));
            v74 = v72 + (float)((float)(v71 + (float)((float)(v67 - v66) * v70)) * (float)(v67 - v66));
            if (v73 >= v74)
              v75 = v74;
            else
              v75 = v73;
            if (v73 > v74)
              v74 = v73;
            v35.f32[0] = fmaxf(v74 - v75, 0.000001);
            v35 = (float32x2_t)vdup_lane_s32((int32x2_t)v35, 0);
            *(float *)(v40 + 28) = v75;
            *(float *)(v40 + 32) = v74;
            *(float *)(v40 + 24) = v65[5] * (float)(v67 - v69);
            *(_DWORD *)(v40 + 36) = vrecpe_f32(v35).u32[0];
            *(_QWORD *)v40 = v63;
            ++v62;
            v63 = v40;
            v40 = v68;
          }
          v41 += 16;
        }
        while (v41 < v34);
        if (!v62)
          goto LABEL_81;
        if (v62 != 1)
          v63 = CA::ScanConverter::RendererImpl::Edge::sort_xmin((uint64_t *)v63, v62);
        v76 = (uint64_t *)&v220;
        if (v63)
          break;
LABEL_78:
        if (!*v76)
        {
          v63 = 0;
LABEL_80:
          *v76 = v63;
        }
LABEL_81:
        v79 = v220;
        if (v220)
        {
          if (v216 < v13)
          {
            v80 = 0;
            v81 = (_BYTE *)(v214 + v38 * v215);
            v82 = 0.0;
            for (i = v216; ; i = v92)
            {
              for (j = (float)i; v80; v80 = *(_QWORD *)(v80 + 8))
              {
                if (*(float *)(v80 + 32) > j)
                  break;
                v82 = *(float *)(v80 + 24) + v82;
              }
              v85 = j + 1.0;
              v219 = v80;
              if (v79)
                break;
LABEL_105:
              v79 = 0;
              v92 = v13;
              if (!v80)
                goto LABEL_139;
LABEL_108:
              v93 = 1.0;
              v94 = v82;
              do
              {
                v95 = v80;
                v96 = *(float *)(v80 + 28);
                if (v96 >= j)
                  v97 = *(float *)(v80 + 28);
                else
                  v97 = (float)i;
                v98 = *(float *)(v80 + 32);
                if (v98 > v85)
                  v98 = j + 1.0;
                v94 = v94
                    + (float)((float)(*(float *)(v80 + 24) * v93)
                            * (float)((float)(v85 - v98)
                                    + (float)((float)((float)(v97 - v98) * *(float *)(v80 + 36))
                                            * (float)(v96 + (float)((float)(v98 + v97) * -0.5)))));
                v80 = *(_QWORD *)(v80 + 8);
                if (v19 == 1)
                {
                  if (!v80)
                  {
                    v101 = fabsf(v94);
                    goto LABEL_124;
                  }
                  v99 = *(float **)(v95 + 16);
                  v100 = *(float **)(v80 + 16);
                  if (v99[5] == v100[5] && *v99 != v100[1] && v99[1] != *v100)
                    v93 = -v93;
                }
              }
              while (v80);
              v101 = fabsf(v94);
              if (!v19)
              {
                v102 = fminf(v101, 1.0);
                goto LABEL_126;
              }
LABEL_124:
              v103 = (int)v101;
              v102 = v101 - truncf(v101);
              if ((v103 & 1) != 0)
                v102 = 1.0 - v102;
LABEL_126:
              v92 = i + 1;
              *v81++ = (int)(float)(v102 * 255.99);
LABEL_166:
              if (v92 >= v13)
                goto LABEL_168;
              v80 = v219;
            }
            while (1)
            {
LABEL_88:
              v86 = v79;
              v87 = v79[7];
              if (v85 <= v87)
              {
                v80 = v219;
                if (v219)
                  goto LABEL_108;
                v104 = floorf(v87);
                if (v104 < -16777000.0)
                  v104 = -16777000.0;
                v105 = 16777000.0;
                if (v87 <= 16777000.0)
                  v105 = v79[7];
                if (v87 >= 0.0)
                  v104 = v105;
                if (v13 >= (int)v104 && (LODWORD(v87) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
                  v92 = (int)v104;
                else
                  v92 = v13;
LABEL_139:
                v107 = fabsf(v82);
                if (v19)
                {
                  v108 = (int)v107;
                  v107 = v107 - truncf(v107);
                  if ((v108 & 1) != 0)
                    v107 = 1.0 - v107;
LABEL_144:
                  v109 = v92 - i;
                  if (v107 == 0.0)
                  {
LABEL_165:
                    v81 += v109;
                    goto LABEL_166;
                  }
                }
                else
                {
                  if (v107 < 1.0)
                    goto LABEL_144;
                  v109 = v92 - i;
                  v107 = 1.0;
                }
                v110 = (int)(float)(v107 * 255.99);
                v111 = v109;
                if (v109 <= 8)
                {
                  if (v109)
                    memset(v81, v110, v109);
                  goto LABEL_165;
                }
                v112 = v81;
                if ((v81 & 1) != 0)
                {
                  *v81 = v110;
                  v112 = v81 + 1;
                  v111 = v109 - 1;
                }
                v113 = v110 | (v110 << 8);
                if ((v112 & 2) != 0)
                {
                  *v112++ = v113;
                  v111 -= 2;
                }
                v114 = v113 | (v113 << 16);
                if ((v112 & 4) != 0)
                {
                  *(_DWORD *)v112 = v114;
                  v112 += 2;
                  v111 -= 4;
                }
                if (v111 >= 8)
                {
                  do
                  {
                    *(_QWORD *)v112 = v114 | (v114 << 32);
                    v112 += 4;
                    v111 -= 8;
                  }
                  while (v111 > 7);
                }
                v115 = v111 - 4;
                if (v111 >= 4)
                {
                  *(_DWORD *)v112 = v114;
                  v112 += 2;
                  LODWORD(v111) = v111 - 4;
                  if ((v115 & 2) == 0)
                    goto LABEL_158;
                }
                else if ((v111 & 2) == 0)
                {
LABEL_158:
                  if ((v111 & 1) == 0)
                    goto LABEL_165;
LABEL_164:
                  *(_BYTE *)v112 = v110;
                  goto LABEL_165;
                }
                *v112++ = v113;
                if ((((_DWORD)v111 - 2) & 1) == 0)
                  goto LABEL_165;
                goto LABEL_164;
              }
              v79 = *(float **)v79;
              v88 = v86[8];
              if (v88 <= j)
              {
                v82 = v86[6] + v82;
                if (v79)
                  continue;
LABEL_104:
                v80 = v219;
                goto LABEL_105;
              }
              v89 = v219;
              if (v219)
                break;
              v90 = &v219;
LABEL_101:
              *v90 = (uint64_t)v86;
              *((_QWORD *)v86 + 1) = 0;
              if (!v79)
                goto LABEL_104;
            }
            v90 = &v219;
            while (1)
            {
              v91 = *(float *)(v89 + 32);
              if (SLODWORD(v88) == SLODWORD(v91))
              {
                if (v87 < *(float *)(v89 + 28))
                  goto LABEL_103;
              }
              else if (v88 < v91)
              {
LABEL_103:
                *((_QWORD *)v86 + 1) = v89;
                *v90 = (uint64_t)v86;
                if (!v79)
                  goto LABEL_104;
                goto LABEL_88;
              }
              v90 = (uint64_t *)(v89 + 8);
              v89 = *(_QWORD *)(v89 + 8);
              if (!v89)
                goto LABEL_101;
            }
          }
LABEL_168:
          v116 = v218;
        }
        else
        {
          if (v41 == v34)
            goto LABEL_343;
          v117 = vcvtms_s32_f32(**((float **)v41 + 1));
          if (v38 <= v117)
            v116 = v117;
          else
            v116 = v38;
        }
        v38 = v116;
        if (v116 >= v217)
          goto LABEL_343;
      }
      while (1)
      {
        v77 = (uint64_t *)*v76;
        if (!*v76)
          goto LABEL_80;
        if (*(float *)(v63 + 28) >= *((float *)v77 + 7))
        {
          v76 = (uint64_t *)*v76;
          if (!v63)
            goto LABEL_78;
        }
        else
        {
          v78 = *(_QWORD *)v63;
          *v76 = v63;
          *(_QWORD *)v63 = v77;
          v63 = v78;
          if (!v78)
            goto LABEL_78;
        }
      }
    }
    goto LABEL_343;
  }
  if ((unint64_t)(32 * v23) > 0x1000)
  {
    v26 = (char *)malloc_type_malloc(32 * v23, 0x145CA901uLL);
    if (!v26)
      return;
  }
  else
  {
    MEMORY[0x1E0C80A78](v9);
    v26 = (char *)&v211 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v26, 32 * v23);
  }
  v213 = 32 * v23;
  v118 = *(_QWORD **)(v20 + 8);
  if (v118)
  {
    v119 = 0;
    do
    {
      v120 = v118[1];
      if (v120)
      {
        v121 = (int *)(v118 + 3);
        v122 = &v26[16 * v119 + 8];
        v119 += v120;
        v123 = (int *)(v118 + 3);
        do
        {
          v124 = *v123;
          v123 += 6;
          *((_DWORD *)v122 - 2) = ((v124 >> 31) | 0x80000000) ^ v124;
          *(_QWORD *)v122 = v121;
          v122 += 16;
          v121 = v123;
          --v120;
        }
        while (v120);
      }
      v118 = (_QWORD *)*v118;
    }
    while (v118);
  }
  v125 = &v26[16 * v23];
  v212 = v26;
  CA::radix_sort(v23);
  if (v17 <= -16777216)
    v128 = -16777216;
  else
    v128 = v17;
  v216 = v128;
  if (v13 >= 0x1000000)
    v13 = 0x1000000;
  if (v15 <= -16777216)
    v129 = -16777216;
  else
    v129 = v15;
  v222 = 0;
  v223 = v225;
  if (v11 >= 0x1000000)
    v130 = 0x1000000;
  else
    v130 = v11;
  v224 = xmmword_18474E1F0;
  v220 = 0;
  v221 = &v222;
  v217 = v130;
  if (v129 < v130)
  {
    v131 = 0;
    v132 = &xmmword_18474E000;
    v133 = v212;
    v214 = v218 + v216;
    while (1)
    {
      v134 = v220;
      if (v220)
      {
        v135 = (float)v129;
        v136 = v129 + 1;
        v137 = (float)(v129 + 1);
        v138 = (float *)&v220;
        do
        {
          v139 = (float *)*((_QWORD *)v134 + 2);
          v140 = v139[1];
          if (v140 <= v135)
          {
            *(_QWORD *)v138 = *(_QWORD *)v134;
            *(_QWORD *)v134 = v131;
            v131 = (uint64_t)v134;
            v134 = v138;
          }
          else
          {
            v141 = *v139;
            if (*v139 >= v135)
              v142 = *v139;
            else
              v142 = (float)v129;
            if (v140 > v137)
              v140 = (float)v136;
            v143 = v139[2];
            v144 = v139[3];
            v145 = v139[4];
            v146 = v145 + (float)((float)(v144 + (float)((float)(v142 - v141) * v143)) * (float)(v142 - v141));
            v147 = v145 + (float)((float)(v144 + (float)((float)(v140 - v141) * v143)) * (float)(v140 - v141));
            if (v146 >= v147)
              v148 = v147;
            else
              v148 = v146;
            if (v146 > v147)
              v147 = v146;
            *(float *)v127.i32 = fmaxf(v147 - v148, 0.000001);
            v127 = (int32x2_t)vrecpe_f32((float32x2_t)vdup_lane_s32(v127, 0));
            v134[7] = v148;
            v134[8] = v147;
            v134[6] = v139[5] * (float)(v140 - v142);
            v134[9] = *(float *)v127.i32;
            v138 = v134;
          }
          v134 = *(float **)v134;
        }
        while (v134);
        v149 = v220;
        if (v220)
        {
          v150 = 0;
          v151 = &v220;
          do
          {
            while (1)
            {
              v152 = v151;
              v151 = (float **)v149;
              v149 = *(float **)v149;
              if (!v149)
                break;
              if (*((float *)v151 + 7) > v149[7])
              {
                *v152 = v149;
                *v151 = *(float **)v149;
                *(_QWORD *)v149 = v151;
                v150 = 1;
              }
            }
            v149 = v220;
            v153 = v150 & (v220 != 0);
            v151 = &v220;
            v150 = 0;
          }
          while ((v153 & 1) != 0);
        }
      }
      else
      {
        v136 = v129 + 1;
        v137 = (float)(v129 + 1);
      }
      LODWORD(v218) = v136;
      if (v133 >= v125)
        goto LABEL_250;
      v154 = 0;
      v155 = 0;
      v156 = (float)v129;
      do
      {
        v157 = (float *)*((_QWORD *)v133 + 1);
        v158 = *v157;
        if (*v157 >= v137)
          break;
        v159 = v157[1];
        if (v159 > v156)
        {
          if (v131)
          {
            v160 = *(_QWORD *)v131;
          }
          else
          {
            v161 = x_heap_malloc_small_(v221, 0x28uLL);
            v132 = &xmmword_18474E000;
            v131 = v161;
            v160 = 0;
            v157 = (float *)*((_QWORD *)v133 + 1);
            v158 = *v157;
            v159 = v157[1];
          }
          *(_QWORD *)(v131 + 16) = v157;
          if (v158 >= v156)
            v162 = v158;
          else
            v162 = (float)v129;
          if (v159 > v137)
            v159 = v137;
          v163 = v157[2];
          v164 = v157[3];
          v165 = v157[4];
          v166 = v165 + (float)((float)(v164 + (float)((float)(v162 - v158) * v163)) * (float)(v162 - v158));
          v167 = v165 + (float)((float)(v164 + (float)((float)(v159 - v158) * v163)) * (float)(v159 - v158));
          if (v166 >= v167)
            v168 = v167;
          else
            v168 = v166;
          if (v166 > v167)
            v167 = v166;
          v126.f32[0] = fmaxf(v167 - v168, 0.000001);
          v126 = (float32x2_t)vdup_lane_s32((int32x2_t)v126, 0);
          *(float *)(v131 + 28) = v168;
          *(float *)(v131 + 32) = v167;
          *(float *)(v131 + 24) = v157[5] * (float)(v159 - v162);
          *(_DWORD *)(v131 + 36) = vrecpe_f32(v126).u32[0];
          *(_QWORD *)v131 = v155;
          ++v154;
          v155 = v131;
          v131 = v160;
        }
        v133 += 16;
      }
      while (v133 < v125);
      if (!v154)
        goto LABEL_250;
      if (v154 != 1)
      {
        v169 = CA::ScanConverter::RendererImpl::Edge::sort_xmin((uint64_t *)v155, v154);
        v132 = &xmmword_18474E000;
        v155 = v169;
      }
      v170 = (float *)&v220;
      if (v155)
        break;
LABEL_247:
      if (!*(_QWORD *)v170)
      {
        v155 = 0;
LABEL_249:
        *(_QWORD *)v170 = v155;
      }
LABEL_250:
      v173 = v220;
      if (v220)
      {
        if (v216 < v13)
        {
          v174 = 0;
          v175 = (_BYTE *)(v214 + v129 * v215);
          v176 = 0.0;
          for (k = v216; ; k = v186)
          {
            for (m = (float)k; v174; v174 = *(_QWORD *)(v174 + 8))
            {
              if (*(float *)(v174 + 32) > m)
                break;
              v176 = *(float *)(v174 + 24) + v176;
            }
            v179 = m + 1.0;
            v219 = v174;
            if (!v173)
            {
LABEL_274:
              v173 = 0;
              v186 = v13;
              if (v174)
              {
LABEL_281:
                v192 = 1.0;
                v193 = v176;
                do
                {
                  v194 = v174;
                  v195 = *(float *)(v174 + 28);
                  if (v195 >= m)
                    v196 = *(float *)(v174 + 28);
                  else
                    v196 = (float)k;
                  v197 = *(float *)(v174 + 32);
                  if (v197 > v179)
                    v197 = m + 1.0;
                  v193 = v193
                       + (float)((float)(*(float *)(v174 + 24) * v192)
                               * (float)((float)(v179 - v197)
                                       + (float)((float)((float)(v196 - v197) * *(float *)(v174 + 36))
                                               * (float)(v195 + (float)((float)(v197 + v196) * -0.5)))));
                  v174 = *(_QWORD *)(v174 + 8);
                  if (v19 == 1)
                  {
                    if (!v174)
                      goto LABEL_295;
                    v198 = *(float **)(v194 + 16);
                    v199 = *(float **)(v174 + 16);
                    if (v198[5] == v199[5] && *v198 != v199[1] && v198[1] != *v199)
                      v192 = -v192;
                  }
                }
                while (v174);
                if (v19)
                {
LABEL_295:
                  v200 = fabsf(v193);
                  v201 = (int)v200;
                  v202 = v200 - truncf(v200);
                  if ((v201 & 1) != 0)
                    v202 = 1.0 - v202;
                  v203 = v202 > 0.0;
                  goto LABEL_300;
                }
                v203 = v193 < 0.0;
                if (v193 > 0.0)
                  v203 = 1;
LABEL_300:
                v186 = k + 1;
                *v175++ = (int)(float)((float)v203 * *((float *)v132 + 709));
                goto LABEL_335;
              }
              if (!v19)
                goto LABEL_314;
LABEL_276:
              v187 = fabsf(v176);
              v188 = (int)v187;
              v189 = v187 - truncf(v187);
              if ((v188 & 1) != 0)
                v189 = 1.0 - v189;
              LODWORD(v190) = v186 - k;
              if (v189 <= 0.0)
                goto LABEL_279;
LABEL_315:
              v191 = (int)v190;
              if (v190 <= 8)
              {
                if (v186 != k)
                {
                  memset(v175, 255, (int)v190);
                  v132 = &xmmword_18474E000;
                }
                goto LABEL_334;
              }
              v207 = v175;
              v190 = (int)v190;
              if ((v175 & 1) == 0)
              {
                if ((v175 & 2) == 0)
                  goto LABEL_318;
LABEL_329:
                *v207++ = -1;
                v190 -= 2;
                if ((v207 & 4) == 0)
                  goto LABEL_320;
LABEL_319:
                *(_DWORD *)v207 = -1;
                v207 += 2;
                v190 -= 4;
                goto LABEL_320;
              }
              *v175 = -1;
              v207 = v175 + 1;
              v190 = (int)v190 - 1;
              if ((((_DWORD)v175 + 1) & 2) != 0)
                goto LABEL_329;
LABEL_318:
              if ((v207 & 4) != 0)
                goto LABEL_319;
LABEL_320:
              if (v190 >= 8)
              {
                do
                {
                  *(_QWORD *)v207 = -1;
                  v207 += 4;
                  v190 -= 8;
                }
                while (v190 > 7);
              }
              v208 = v190 - 4;
              if (v190 >= 4)
              {
                *(_DWORD *)v207 = -1;
                v207 += 2;
                LODWORD(v190) = v190 - 4;
                if ((v208 & 2) == 0)
                  goto LABEL_324;
              }
              else if ((v190 & 2) == 0)
              {
LABEL_324:
                if ((v190 & 1) == 0)
                  goto LABEL_334;
LABEL_333:
                *(_BYTE *)v207 = -1;
                goto LABEL_334;
              }
              *v207++ = -1;
              if ((((_DWORD)v190 - 2) & 1) == 0)
                goto LABEL_334;
              goto LABEL_333;
            }
LABEL_257:
            while (1)
            {
              v180 = v173;
              v181 = v173[7];
              if (v179 <= v181)
                break;
              v173 = *(float **)v173;
              v182 = v180[8];
              if (v182 <= m)
              {
                v176 = v180[6] + v176;
                if (v173)
                  continue;
LABEL_273:
                v174 = v219;
                goto LABEL_274;
              }
              v183 = v219;
              if (v219)
              {
                v184 = &v219;
                while (1)
                {
                  v185 = *(float *)(v183 + 32);
                  if (SLODWORD(v182) == SLODWORD(v185))
                  {
                    if (v181 < *(float *)(v183 + 28))
                      goto LABEL_272;
                  }
                  else if (v182 < v185)
                  {
LABEL_272:
                    *((_QWORD *)v180 + 1) = v183;
                    *v184 = (uint64_t)v180;
                    if (!v173)
                      goto LABEL_273;
                    goto LABEL_257;
                  }
                  v184 = (uint64_t *)(v183 + 8);
                  v183 = *(_QWORD *)(v183 + 8);
                  if (!v183)
                    goto LABEL_270;
                }
              }
              v184 = &v219;
LABEL_270:
              *v184 = (uint64_t)v180;
              *((_QWORD *)v180 + 1) = 0;
              if (!v173)
                goto LABEL_273;
            }
            v174 = v219;
            if (v219)
              goto LABEL_281;
            v204 = floorf(v181);
            if (v204 < -16777000.0)
              v204 = -16777000.0;
            v205 = 16777000.0;
            if (v181 <= 16777000.0)
              v205 = v173[7];
            if (v181 >= 0.0)
              v204 = v205;
            if (v13 >= (int)v204 && (LODWORD(v181) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
              v186 = (int)v204;
            else
              v186 = v13;
            if (v19)
              goto LABEL_276;
LABEL_314:
            LODWORD(v190) = v186 - k;
            if (v176 != 0.0)
              goto LABEL_315;
LABEL_279:
            v191 = (int)v190;
LABEL_334:
            v175 += v191;
LABEL_335:
            if (v186 >= v13)
              break;
            v174 = v219;
          }
        }
        v209 = v218;
      }
      else
      {
        if (v133 == v125)
          goto LABEL_343;
        v210 = vcvtms_s32_f32(**((float **)v133 + 1));
        if (v129 <= v210)
          v209 = v210;
        else
          v209 = v129;
      }
      v129 = v209;
      if (v209 >= v217)
        goto LABEL_343;
    }
    while (1)
    {
      v171 = *(float **)v170;
      if (!*(_QWORD *)v170)
        goto LABEL_249;
      if (*(float *)(v155 + 28) >= v171[7])
      {
        v170 = *(float **)v170;
        if (!v155)
          goto LABEL_247;
      }
      else
      {
        v172 = *(_QWORD *)v155;
        *(_QWORD *)v170 = v155;
        *(_QWORD *)v155 = v171;
        v155 = v172;
        if (!v172)
          goto LABEL_247;
      }
    }
  }
LABEL_343:
  if (v213 > 0x1000)
    free(v212);
  x_heap_free((void ***)v221);
}

void CA::OGL::Shape::fill_sc_path(uint64_t a1, float64x2_t *a2, int a3, char a4, unsigned __int8 a5, int32x2_t a6, int32x2_t a7)
{
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  int64x2_t v11;
  int8x16_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x2_t v15;
  uint32x2_t v16;
  unsigned __int32 v17;
  uint32x2_t v18;
  uint32x2_t v19;
  const CA::Bounds *v20;
  uint32x2_t v21;
  int32x2_t v22;
  int32x4_t v23;
  int32x2_t v24;
  uint32x2_t v25;
  _QWORD v26[2];
  int32x4_t v27;
  uint64_t (**v28)();
  float64x2_t *v29;
  int v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v9 = a2[8];
  v8 = a2[9];
  v10 = vsubq_f64(v8, v9);
  v11 = vceqzq_f64(v10);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v11, 1), (int8x16_t)v11).u64[0] & 0x8000000000000000) != 0
    || (v12 = vorrq_s8((int8x16_t)vcltzq_f64(v10), (int8x16_t)vcgezq_f64(v10)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v12), 1), v12).u64[0] & 0x8000000000000000) != 0))
  {
    v27 = 0uLL;
    v14.i64[0] = 0;
    v15 = 0;
  }
  else
  {
    v13 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v9, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    v14 = vuzp1q_s32(v13, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(v8, (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v13));
    v27 = v14;
    v15 = (int32x2_t)v14.u64[1];
  }
  v29 = a2;
  v28 = &off_1E1595488;
  v30 = a3;
  v31 = a5;
  v16 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v15);
  v17 = vpmax_u32(v16, v16).u32[0];
  if ((a4 & 1) != 0)
  {
    if ((v17 & 0x80000000) != 0
      || (v18 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, a7), (vpmax_u32(v18, v18).u32[0] & 0x80000000) != 0)
      || (v19 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v14.i8, v15), vadd_s32(a6, a7)), vmax_s32(*(int32x2_t *)v14.i8, a6))), (vpmax_u32(v19, v19).u32[0] & 0x80000000) != 0))
    {
      v26[0] = 0;
      v26[1] = 0;
      v20 = (const CA::Bounds *)v26;
    }
    else
    {
      CA::OGL::Shape::render_path(a1);
      v20 = (const CA::Bounds *)&v27;
    }
    CA::OGL::emit_bounds_surround(a1, v20);
  }
  else if ((v17 & 0x80000000) == 0)
  {
    v21 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, a7);
    if ((vpmax_u32(v21, v21).u32[0] & 0x80000000) == 0)
    {
      v22 = vadd_s32(a6, a7);
      *(int32x2_t *)v23.i8 = vmax_s32(*(int32x2_t *)v14.i8, a6);
      v24 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v14.i8, v15), v22), *(int32x2_t *)v23.i8);
      v25 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v24);
      if ((vpmax_u32(v25, v25).u32[0] & 0x80000000) == 0)
      {
        v23.u64[1] = (unint64_t)v24;
        v27 = v23;
        CA::OGL::Shape::render_path(a1);
      }
    }
  }
}

int *CA::OGL::Shape::render_path(uint64_t a1)
{
  int *result;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int32x2_t *v6;
  int32x2_t *v7;
  int *v8;
  signed int v9;
  unint64_t v10;
  unint64_t v11;
  CGColorSpace *v12;
  void (*v13)(const void *, void *);
  CA::Render::Texture *v14;
  void *v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int *v20;
  int v21;
  int v22;
  __int32 v23;
  int v24;
  int v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t v33;
  __int16 v34;
  uint64_t v43;
  uint64_t v44;
  uint32x2_t v45;
  int32x2_t v46;
  uint32x2_t v47;
  __int128 v48;
  int32x2_t v49;
  uint32x2_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  void *v54;
  uint64_t v55;
  void (*v56)(const void *, void *);
  __int128 i;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  float32x4_t v63;
  __int128 v64;
  __int128 v65;
  int64x2_t v66;
  uint64_t v67;
  double v68;
  double v69;
  _BYTE v70[24];
  _BYTE v71[24];
  double v72;
  double v73;
  __int128 v74;
  double v75;
  double v76;
  __int128 v77;
  _QWORD v78[1538];

  result = (int *)MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = result;
  v78[1537] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(*((_QWORD *)result + 29) + 16))
  {
    result = (int *)(*(uint64_t (**)(int *, uint64_t))(*(_QWORD *)result + 184))(result, 10);
    if ((_DWORD)result)
    {
      *(_BYTE *)(*((_QWORD *)v8 + 2) + 16) = 13;
      v33.i32[1] = 0;
      v66 = 0u;
      v65 = 0u;
      v64 = 0u;
      v63.i64[0] = (uint64_t)v8;
      v67 = v3;
      v31 = *((_QWORD *)v8 + 2);
      _H1 = *(_WORD *)(v31 + 8);
      v33.i32[0] = *(_DWORD *)(v31 + 10);
      v34 = *(_WORD *)(v31 + 14);
      _H2 = v34;
      __asm { FCVT            S8, H2 }
      if (_S8 != 0.0 && _S8 != 1.0)
      {
        __asm { FCVT            S1, H1 }
        _S1 = (float)(1.0 / _S8) * _S1;
        v33 = vcvtq_f32_f16(*(float16x4_t *)v33.f32);
        *(float32x2_t *)v33.f32 = vmul_n_f32(*(float32x2_t *)v33.f32, 1.0 / _S8);
        __asm { FCVT            H1, S1 }
        v33.i32[0] = vcvt_f16_f32(v33).u32[0];
      }
      v63.i16[4] = _H1;
      *(__int32 *)((char *)&v63.i32[2] + 2) = v33.i32[0];
      v63.i16[7] = v34;
      if (!(*(unsigned int (**)(int *, uint64_t))(*(_QWORD *)v8 + 184))(v8, 26))
        goto LABEL_29;
      v43 = *((_QWORD *)v8 + 2);
      if ((*(_BYTE *)(v43 + 481) & 1) == 0)
      {
        BYTE1(v67) = 1;
LABEL_28:
        v66 = vdupq_n_s64(0x300uLL);
        *(_QWORD *)&v64 = &v68;
        *((_QWORD *)&v64 + 1) = v78;
LABEL_31:
        v65 = 0u;
        v62 = 0u;
        v44 = *(_QWORD *)(*((_QWORD *)v8 + 29) + 8);
        v58 = v8;
        v59 = v44;
        v61 = 0u;
        v60 = 0;
        BYTE8(v61) = 1;
        CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v58);
        for (i = 0uLL; ; *((_QWORD *)&i + 1) = 0)
        {
          do
          {
            while (1)
            {
              if (!CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v58, (int32x2_t *)&i))
              {
                if ((_QWORD)v65)
                {
                  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v63.i64[0] + 296))(v63.i64[0], 0, v65, v64);
                  *(_QWORD *)&v65 = 0;
                }
                result = (int *)CA::OGL::Shape::Lines::flush(&v63, 1);
                *(_BYTE *)(*((_QWORD *)v8 + 2) + 16) = 0;
                return result;
              }
              if (!(_BYTE)v67)
                break;
LABEL_34:
              (**(void (***)(uint64_t, float32x4_t *, __int128 *))v5)(v5, &v63, &i);
            }
            v45 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&i + 8));
          }
          while ((vpmax_u32(v45, v45).u32[0] & 0x80000000) != 0);
          v46 = v7[1];
          v47 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v46);
          if ((vpmax_u32(v47, v47).u32[0] & 0x80000000) == 0)
          {
            *(int32x2_t *)&v48 = vmax_s32(*(int32x2_t *)&i, *v7);
            v49 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&i, *(int32x2_t *)((char *)&i + 8)), vadd_s32(*v7, v46)), *(int32x2_t *)&v48);
            v50 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v49);
            if ((vpmax_u32(v50, v50).u32[0] & 0x80000000) == 0)
            {
              *((int32x2_t *)&v48 + 1) = v49;
              i = v48;
              goto LABEL_34;
            }
          }
        }
      }
      if (*(_BYTE *)(v43 + 480) == 3)
      {
        BYTE1(v67) = _S8 == 1.0;
        if (_S8 == 1.0)
          goto LABEL_28;
      }
      else
      {
LABEL_29:
        BYTE1(v67) = 0;
      }
      v66.i64[0] = 1536;
      *(_QWORD *)&v64 = &v68;
      goto LABEL_31;
    }
  }
  v9 = v7[1].i32[0];
  if (v9 <= 3072 && v7[1].i32[1] <= 3072)
  {
    v10 = CA::Render::format_rowbytes((CA::Render *)9, v9);
    v11 = v10;
    *(_QWORD *)&i = v10;
    result = is_mul_ok(v10, v7[1].u32[1]) ? (int *)(v10 * v7[1].u32[1]) : 0;
    if ((unint64_t)result <= 0x900000)
    {
      v56 = 0;
      result = (int *)CA::Render::aligned_malloc((CA::Render *)result, (unint64_t *)&v56, 0);
      if (result)
      {
        v12 = (CGColorSpace *)result;
        (*(void (**)(uint64_t, int *, unint64_t, int32x2_t *))(*(_QWORD *)v5 + 8))(v5, result, v11, v7);
        v13 = v56;
        v14 = CA::Render::Image::new_image((CA::Render::Image *)9, v7[1].u32[0], v7[1].u32[1], 1u, 0, v12, (unint64_t *)&i, (const unint64_t *)CA::Render::aligned_free, v56, v54);
        if (v14)
        {
          v16 = (unsigned int *)v14;
          v17 = *((_QWORD *)v8 + 2);
          v18 = *(_QWORD *)(v17 + 16) & 0xFFFFFF00FF00FF00;
          if (*(_QWORD *)(v17 + 8) == 0x3C003C003C003C00)
            v19 = 1;
          else
            v19 = 3;
          *(_DWORD *)(v17 + 16) = v19 | v18;
          *(_DWORD *)(v17 + 20) = HIDWORD(v18);
          v63 = 0uLL;
          result = (int *)CA::OGL::Context::bind_image((uint64_t)v8, 0, (uint32x2_t *)v14, 0, 0, 0, 0, 0, 0.0, &v63, 0);
          if (result)
          {
            v20 = result;
            v21 = v7->i32[0];
            v22 = v7->i32[1];
            v23 = v7[1].i32[1];
            v24 = v7[1].i32[0] + v7->i32[0];
            v25 = v23 + v22;
            *(_OWORD *)v71 = 0u;
            v26 = *(double *)(*((_QWORD *)v8 + 29) + 8);
            v68 = *(double *)&v8;
            v69 = v26;
            memset(v70, 0, sizeof(v70));
            *(_WORD *)&v70[16] = 256;
            CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v68);
            v58 = 0;
            v59 = 0;
            while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v68, (int32x2_t *)&v58))
            {
              CA::OGL::Context::array_rect(v8, (float)v21, (float)v22, (float)v24, (float)v25);
              v27 = v63.i64[1];
              v28 = v63.i64[0];
              v29 = *((_QWORD *)v8 + 15) + 48 * *((_QWORD *)v8 + 16);
              *(_DWORD *)(v29 - 176) = v63.i32[0];
              *(_DWORD *)(v29 - 172) = HIDWORD(v27);
              *(_QWORD *)(v29 - 128) = v27;
              *(_DWORD *)(v29 - 80) = v27;
              *(_DWORD *)(v29 - 76) = HIDWORD(v28);
              *(_QWORD *)(v29 - 32) = v28;
              v30 = *(_QWORD *)(*((_QWORD *)v8 + 2) + 8);
              *(_QWORD *)(v29 - 160) = v30;
              *(_QWORD *)(v29 - 112) = v30;
              *(_QWORD *)(v29 - 64) = v30;
              *(_QWORD *)(v29 - 16) = v30;
            }
            if (v3)
            {
              v68 = (double)v21;
              v69 = (double)v22;
              *(double *)&v70[16] = (double)v24;
              *(double *)v71 = (double)v22;
              v72 = (double)v24;
              v73 = (double)v25;
              v75 = (double)v21;
              v76 = (double)v25;
              v77 = xmmword_18474DF50;
              v74 = xmmword_18474DF50;
              *(_OWORD *)&v71[8] = xmmword_18474DF50;
              *(_OWORD *)v70 = xmmword_18474DF50;
              v55 = 0;
              CA::OGL::emit_quad_surround((uint64_t)v8, &v68, &v55);
            }
            result = (int *)(*(uint64_t (**)(int *, int *, _QWORD))(*(_QWORD *)v8 + 520))(v8, v20, 0);
          }
          *(_BYTE *)(*((_QWORD *)v8 + 2) + 16) = 0;
          v51 = v16 + 2;
          do
          {
            v52 = __ldaxr(v51);
            v53 = v52 - 1;
          }
          while (__stlxr(v53, v51));
          if (!v53)
            return (int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v16 + 16))(v16);
        }
        else
        {
          return CA::Render::aligned_free(v12, (size_t)v13, v15);
        }
      }
    }
  }
  return result;
}

_QWORD **CA::OGL::Shape::Lines::flush(_QWORD **result, int a2)
{
  _QWORD **v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = &result[a2];
  v4 = v2[4];
  v3 = v2 + 4;
  if (v4)
  {
    v5 = result;
    v6 = *result;
    if (a2 == 1 && (v7 = v6[2], (*(_BYTE *)(v7 + 481) & 1) != 0))
    {
      *(_BYTE *)(v7 + 481) &= ~1u;
      result = (_QWORD **)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v5 + 296))(*v5, 0, *(unsigned int *)v3, v5[3]);
      *v3 = 0;
      *(_BYTE *)(*(_QWORD *)(*v5 + 16) + 481) |= 1u;
    }
    else
    {
      result = (_QWORD **)(*(uint64_t (**)(_QWORD *, _QWORD))(*v6 + 296))(v6, 0);
      *v3 = 0;
    }
  }
  return result;
}

void CA::OGL::MetalContext::draw_lines(CA::OGL::Context *a1, int a2, unsigned int a3, char *a4)
{
  if (*(unsigned __int8 *)(*((_QWORD *)a1 + 2) + 16) - 82 <= 9)
    __assert_rtn("draw_lines", "ogl-metal.mm", 8049, "get_texture_function() < OGL_TEX_PATH_FIRST || get_texture_function() > OGL_TEX_PATH_LAST");
  CA::OGL::MetalContext::draw(a1, 1, a3, 1u, a4, 0x10uLL, 8u, a2, a3, 0, 0, 0);
}

void CA::OGL::Shape::FillRenderer::render_lines(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int *v17;
  char *v18;
  int *v19;
  int v20;
  float32x2_t v21;
  int32x2_t v22;
  int v23;
  int v24;
  uint64_t v25;
  __n128 v26;
  int v27;
  float *v28;
  uint64_t v29;
  char *v30;
  float v31;
  float *v32;
  float *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float *v43;
  unint64_t v44;
  char v45;
  float **v46;
  float **v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  float *v64;
  float *v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  float v69;
  int v70;
  float *v71;
  float j;
  float *v73;
  float v74;
  float v75;
  uint64_t v76;
  uint64_t *v77;
  float v78;
  int v79;
  float v80;
  uint64_t v81;
  float v82;
  uint64_t v83;
  float v84;
  float v85;
  float v86;
  float *v87;
  float *v88;
  float v89;
  _BOOL8 v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  __int16 v98;
  float v106;
  float v107;
  int v109;
  float v110;
  BOOL v111;
  _BOOL8 v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  float v120;
  float v121;
  uint64_t v122;
  uint64_t v123;
  __int16 v124;
  _QWORD *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  int *v132;
  char *v133;
  int *v134;
  int v135;
  float32x2_t v136;
  int32x2_t v137;
  int v138;
  int v139;
  int v140;
  __n128 v141;
  float *v142;
  uint64_t v143;
  float v144;
  char *v145;
  float v146;
  float *v147;
  float *v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float *v158;
  char *v159;
  char v160;
  float **v161;
  float **v162;
  char v163;
  unint64_t v164;
  uint64_t v165;
  float v166;
  uint64_t v167;
  float v168;
  uint64_t v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  float v182;
  float v183;
  int v184;
  float *v185;
  float i;
  float *v187;
  float v188;
  float v189;
  uint64_t v190;
  uint64_t *v191;
  float v192;
  int v193;
  float v194;
  int v195;
  _BOOL4 v196;
  float v197;
  uint64_t v198;
  float v199;
  uint64_t v200;
  float v201;
  float v202;
  float v203;
  float *v204;
  float *v205;
  float v206;
  int v207;
  _BOOL4 v208;
  _BOOL8 v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  __int16 v215;
  float v220;
  _BOOL8 v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  float v229;
  uint64_t v230;
  uint64_t v231;
  __int16 v232;
  float v236;
  uint64_t v237;
  uint64_t v238;
  __int16 v239;
  uint64_t v243;
  uint64_t v244;
  __int16 v245;
  unint64_t v249;
  char *v250;
  float v251;
  float v252;
  int v253;
  char *v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  signed int v258;
  uint64_t v259;
  float *v260;
  void ***v261;
  uint64_t v262;
  _QWORD *v263;
  __int128 v264;
  _QWORD v265[1022];

  MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v265[1020] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_DWORD *)(v1 + 16);
  v8 = *v6;
  v7 = v6[1];
  v9 = v6[2] + *v6;
  LODWORD(v10) = v6[3] + v7;
  v11 = *(_QWORD *)(v4 + 24);
  v12 = 32 * v11;
  if (!*(_BYTE *)(v1 + 20))
  {
    if ((unint64_t)(32 * v11) > 0x1000)
    {
      v250 = (char *)malloc_type_malloc(32 * v11, 0x145CA901uLL);
      if (!v250)
        return;
    }
    else
    {
      MEMORY[0x1E0C80A78](v1);
      v250 = (char *)&v249 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v250, 32 * v11);
    }
    v249 = 32 * v11;
    v128 = *(_QWORD **)(v4 + 8);
    if (v128)
    {
      v129 = 0;
      v130 = v250 + 8;
      do
      {
        v131 = v128[1];
        if (v131)
        {
          v132 = (int *)(v128 + 3);
          v133 = &v130[16 * v129];
          v129 += v131;
          v134 = (int *)(v128 + 3);
          do
          {
            v135 = *v134;
            v134 += 6;
            *((_DWORD *)v133 - 2) = ((v135 >> 31) | 0x80000000) ^ v135;
            *(_QWORD *)v133 = v132;
            v133 += 16;
            v132 = v134;
            --v131;
          }
          while (v131);
        }
        v128 = (_QWORD *)*v128;
      }
      while (v128);
    }
    v254 = &v250[16 * v11];
    CA::radix_sort(v11);
    if (v8 <= -16777216)
      v138 = -16777216;
    else
      v138 = v8;
    v253 = v138;
    if (v9 >= 0x1000000)
      v139 = 0x1000000;
    else
      v139 = v9;
    if (v7 <= -16777216)
      v140 = -16777216;
    else
      v140 = v7;
    v262 = 0;
    v263 = v265;
    v141 = (__n128)xmmword_18474E1F0;
    if (SLODWORD(v10) >= 0x1000000)
      v10 = 2.351e-38;
    v264 = xmmword_18474E1F0;
    v260 = 0;
    v261 = (void ***)&v262;
    if (v140 >= SLODWORD(v10))
    {
LABEL_379:
      if (v249 > 0x1000)
        free(v250);
      x_heap_free(v261);
      return;
    }
    v142 = 0;
    v143 = 0;
    v251 = (float)v253 + 0.5;
    v141.n128_f32[0] = (float)v139;
    v144 = (float)v139 + 0.5;
    v145 = v250;
    LODWORD(v257) = v139;
    v252 = v10;
    while (1)
    {
      if (v142)
      {
        v141.n128_f32[0] = (float)v140;
        v258 = v140 + 1;
        v146 = (float)(v140 + 1);
        v147 = (float *)&v260;
        do
        {
          v148 = (float *)*((_QWORD *)v142 + 2);
          v149 = v148[1];
          if (v149 <= v141.n128_f32[0])
          {
            *(_QWORD *)v147 = *(_QWORD *)v142;
            *(_QWORD *)v142 = v143;
            v143 = (uint64_t)v142;
            v142 = v147;
          }
          else
          {
            v150 = *v148;
            if (*v148 >= v141.n128_f32[0])
              v151 = *v148;
            else
              v151 = (float)v140;
            if (v149 > v146)
              v149 = (float)(v140 + 1);
            v152 = v148[2];
            v153 = v148[3];
            v154 = v148[4];
            v155 = v154 + (float)((float)(v153 + (float)((float)(v151 - v150) * v152)) * (float)(v151 - v150));
            v156 = v154 + (float)((float)(v153 + (float)((float)(v149 - v150) * v152)) * (float)(v149 - v150));
            if (v155 >= v156)
              v157 = v156;
            else
              v157 = v155;
            if (v155 > v156)
              v156 = v155;
            *(float *)v137.i32 = fmaxf(v156 - v157, 0.000001);
            v137 = (int32x2_t)vrecpe_f32((float32x2_t)vdup_lane_s32(v137, 0));
            v142[7] = v157;
            v142[8] = v156;
            v142[6] = v148[5] * (float)(v149 - v151);
            v142[9] = *(float *)v137.i32;
            v147 = v142;
          }
          v142 = *(float **)v142;
        }
        while (v142);
        v158 = v260;
        v159 = v254;
        if (v260)
        {
          v160 = 0;
          v161 = &v260;
          do
          {
            while (1)
            {
              v162 = v161;
              v161 = (float **)v158;
              v158 = *(float **)v158;
              if (!v158)
                break;
              v141.n128_u32[0] = *((_DWORD *)v161 + 7);
              if (v141.n128_f32[0] > v158[7])
              {
                *v162 = v158;
                *v161 = *(float **)v158;
                *(_QWORD *)v158 = v161;
                v160 = 1;
              }
            }
            v158 = v260;
            v163 = v160 & (v260 != 0);
            v161 = &v260;
            v160 = 0;
          }
          while ((v163 & 1) != 0);
        }
      }
      else
      {
        v258 = v140 + 1;
        v146 = (float)(v140 + 1);
        v159 = v254;
      }
      if (v145 < v159)
      {
        v164 = 0;
        v165 = 0;
        v166 = (float)v140;
        do
        {
          v167 = *((_QWORD *)v145 + 1);
          v141.n128_u32[0] = *(_DWORD *)v167;
          if (*(float *)v167 >= v146)
            break;
          v168 = *(float *)(v167 + 4);
          if (v168 > v166)
          {
            if (v143)
            {
              v169 = *(_QWORD *)v143;
            }
            else
            {
              v143 = x_heap_malloc_small_((uint64_t *)v261, 0x28uLL);
              v169 = 0;
              v167 = *((_QWORD *)v145 + 1);
              v141.n128_u32[0] = *(_DWORD *)v167;
              v168 = *(float *)(v167 + 4);
            }
            *(_QWORD *)(v143 + 16) = v167;
            if (v141.n128_f32[0] >= v166)
              v170 = v141.n128_f32[0];
            else
              v170 = (float)v140;
            if (v168 > v146)
              v168 = v146;
            v171 = *(float *)(v167 + 8);
            v172 = *(float *)(v167 + 12);
            v173 = *(float *)(v167 + 16);
            v174 = v173
                 + (float)((float)(v172 + (float)((float)(v170 - v141.n128_f32[0]) * v171))
                         * (float)(v170 - v141.n128_f32[0]));
            v175 = v173
                 + (float)((float)(v172 + (float)((float)(v168 - v141.n128_f32[0]) * v171))
                         * (float)(v168 - v141.n128_f32[0]));
            if (v174 >= v175)
              v176 = v175;
            else
              v176 = v174;
            if (v174 > v175)
              v175 = v174;
            v136.f32[0] = fmaxf(v175 - v176, 0.000001);
            v136 = (float32x2_t)vdup_lane_s32((int32x2_t)v136, 0);
            *(float *)(v143 + 28) = v176;
            *(float *)(v143 + 32) = v175;
            *(float *)(v143 + 24) = *(float *)(v167 + 20) * (float)(v168 - v170);
            v141.n128_u64[0] = (unint64_t)vrecpe_f32(v136);
            *(_DWORD *)(v143 + 36) = v141.n128_u32[0];
            *(_QWORD *)v143 = v165;
            ++v164;
            v165 = v143;
            v143 = v169;
          }
          v145 += 16;
        }
        while (v145 < v159);
        if (v164)
        {
          if (v164 != 1)
          {
            v177 = v143;
            v165 = CA::ScanConverter::RendererImpl::Edge::sort_xmin((uint64_t *)v165, v164);
            v143 = v177;
            v10 = v252;
          }
          v178 = (uint64_t *)&v260;
          if (v165)
          {
            while (1)
            {
              v179 = (uint64_t *)*v178;
              if (!*v178)
                break;
              v141.n128_u32[0] = *(_DWORD *)(v165 + 28);
              if (v141.n128_f32[0] >= *((float *)v179 + 7))
              {
                v178 = (uint64_t *)*v178;
                if (!v165)
                  goto LABEL_261;
              }
              else
              {
                v180 = *(_QWORD *)v165;
                *v178 = v165;
                *(_QWORD *)v165 = v179;
                v165 = v180;
                if (!v180)
                  goto LABEL_261;
              }
            }
          }
          else
          {
LABEL_261:
            if (*v178)
              goto LABEL_264;
            v165 = 0;
          }
          *v178 = v165;
        }
      }
LABEL_264:
      v142 = v260;
      v256 = v143;
      if (v260)
      {
        v255 = v145;
        if (v253 < v139)
        {
          v181 = 0;
          v182 = (float)v140 + 0.5;
          v183 = 0.0;
          v184 = v253;
          v185 = v260;
          while (1)
          {
            for (i = (float)v184; v181; v181 = *(_QWORD *)(v181 + 8))
            {
              if (*(float *)(v181 + 32) > i)
                break;
              v183 = *(float *)(v181 + 24) + v183;
            }
            v141.n128_f32[0] = i + 1.0;
            v259 = v181;
            if (v185)
              break;
LABEL_288:
            v187 = 0;
            v193 = v139;
            if (!v181)
            {
              if (!v5)
                goto LABEL_336;
              goto LABEL_290;
            }
LABEL_295:
            v197 = 1.0;
            v198 = v181;
            v199 = v183;
            do
            {
              v200 = v198;
              v201 = *(float *)(v198 + 28);
              if (v201 >= i)
                v202 = *(float *)(v198 + 28);
              else
                v202 = (float)v184;
              v203 = *(float *)(v198 + 32);
              if (v203 > v141.n128_f32[0])
                v203 = i + 1.0;
              v199 = v199
                   + (float)((float)(*(float *)(v198 + 24) * v197)
                           * (float)((float)(v141.n128_f32[0] - v203)
                                   + (float)((float)((float)(v202 - v203) * *(float *)(v198 + 36))
                                           * (float)(v201 + (float)((float)(v203 + v202) * -0.5)))));
              v198 = *(_QWORD *)(v198 + 8);
              if (v5 == 1)
              {
                if (!v198)
                  goto LABEL_309;
                v204 = *(float **)(v200 + 16);
                v205 = *(float **)(v198 + 16);
                if (v204[5] == v205[5] && *v204 != v205[1] && v204[1] != *v205)
                  v197 = -v197;
              }
            }
            while (v198);
            if (!v5)
            {
              v208 = v199 > 0.0 || v199 < 0.0;
              goto LABEL_315;
            }
LABEL_309:
            v206 = fabsf(v199);
            v207 = (int)v206;
            v141.n128_f32[0] = v206 - truncf(v206);
            if ((v207 & 1) != 0)
              v141.n128_f32[0] = 1.0 - v141.n128_f32[0];
            v208 = v141.n128_f32[0] > 0.0;
LABEL_315:
            v193 = v184 + 1;
            if (v208 || *((_BYTE *)v3 + 64))
            {
              if (*((_BYTE *)v3 + 65))
                v209 = v208;
              else
                v209 = 0;
              v210 = &v3[v209];
              v213 = v210[4];
              v212 = v210 + 4;
              v211 = v213;
              if (v213 + 2 > (unint64_t)v212[2])
              {
                CA::OGL::Shape::Lines::flush((_QWORD **)v3, v209);
                v143 = v256;
                v211 = *v212;
              }
              v214 = v3[v209 + 2] + 16 * v211;
              v215 = *((_WORD *)v3 + 6);
              _H1 = *((_WORD *)v3 + 7);
              __asm { FCVT            S1, H1 }
              _S0 = _S1 * (float)v208;
              __asm { FCVT            H0, S0 }
              *(_DWORD *)(v214 + 24) = *((_DWORD *)v3 + 2);
              goto LABEL_348;
            }
LABEL_349:
            v184 = v193;
            v185 = v187;
            if (v193 >= v139)
              goto LABEL_350;
          }
          while (1)
          {
LABEL_271:
            v187 = v185;
            v188 = v185[7];
            if (v141.n128_f32[0] <= v188)
            {
              v181 = v259;
              if (v259)
                goto LABEL_295;
              v141.n128_f32[0] = floorf(v188);
              if (v141.n128_f32[0] < -16777000.0)
                v141.n128_f32[0] = -16777000.0;
              v220 = 16777000.0;
              if (v188 <= 16777000.0)
                v220 = v185[7];
              if (v188 >= 0.0)
                v141.n128_f32[0] = v220;
              if (v139 >= (int)v141.n128_f32[0] && (LODWORD(v188) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
                v193 = (int)v141.n128_f32[0];
              else
                v193 = v139;
              if (!v5)
              {
LABEL_336:
                v196 = v183 > 0.0 || v183 < 0.0;
                if (!v196)
                  goto LABEL_340;
LABEL_342:
                if (*((_BYTE *)v3 + 65))
                  v222 = v196;
                else
                  v222 = 0;
                v223 = &v3[v222];
                v225 = v223[4];
                v212 = v223 + 4;
                v224 = v225;
                if (v225 + 2 > (unint64_t)v212[2])
                {
                  CA::OGL::Shape::Lines::flush((_QWORD **)v3, v222);
                  v143 = v256;
                  v224 = *v212;
                }
                v181 = 0;
                v214 = v3[v222 + 2] + 16 * v224;
                v215 = *((_WORD *)v3 + 6);
                _H1 = *((_WORD *)v3 + 7);
                *(_DWORD *)(v214 + 24) = *((_DWORD *)v3 + 2);
                __asm { FCVT            S1, H1 }
                _S0 = _S1 * (float)v196;
                __asm { FCVT            H0, S0 }
LABEL_348:
                *(_WORD *)(v214 + 28) = v215;
                *(_WORD *)(v214 + 30) = _H0;
                *(_QWORD *)(v214 + 8) = *(_QWORD *)(v214 + 24);
                *(float *)v214 = i + 0.5;
                v141.n128_f32[0] = (float)v193 + 0.5;
                *(_DWORD *)(v214 + 16) = v141.n128_u32[0];
                *(float *)(v214 + 20) = v182;
                *(float *)(v214 + 4) = v182;
                *v212 += 2;
                v139 = v257;
                goto LABEL_349;
              }
LABEL_290:
              v194 = fabsf(v183);
              v195 = (int)v194;
              v141.n128_f32[0] = v194 - truncf(v194);
              if ((v195 & 1) != 0)
                v141.n128_f32[0] = 1.0 - v141.n128_f32[0];
              v196 = v141.n128_f32[0] > 0.0;
              if (v141.n128_f32[0] > 0.0)
                goto LABEL_342;
LABEL_340:
              if (*((_BYTE *)v3 + 64))
                goto LABEL_342;
              v181 = 0;
              goto LABEL_349;
            }
            v185 = *(float **)v185;
            v189 = v187[8];
            if (v189 <= i)
            {
              v183 = v187[6] + v183;
              if (v185)
                continue;
LABEL_287:
              v181 = v259;
              goto LABEL_288;
            }
            v190 = v259;
            if (v259)
              break;
            v191 = &v259;
LABEL_284:
            *v191 = (uint64_t)v187;
            *((_QWORD *)v187 + 1) = 0;
            if (!v185)
              goto LABEL_287;
          }
          v191 = &v259;
          while (1)
          {
            v192 = *(float *)(v190 + 32);
            if (SLODWORD(v189) == SLODWORD(v192))
            {
              if (v188 < *(float *)(v190 + 28))
                goto LABEL_286;
            }
            else if (v189 < v192)
            {
LABEL_286:
              *((_QWORD *)v187 + 1) = v190;
              *v191 = (uint64_t)v187;
              if (!v185)
                goto LABEL_287;
              goto LABEL_271;
            }
            v191 = (uint64_t *)(v190 + 8);
            v190 = *(_QWORD *)(v190 + 8);
            if (!v190)
              goto LABEL_284;
          }
        }
LABEL_350:
        v10 = v252;
        v145 = v255;
      }
      else
      {
        if (v145 == v159)
        {
          if (v140 < SLODWORD(v10))
          {
            do
            {
              if (*((_BYTE *)v3 + 64))
              {
                v243 = v3[4];
                if ((unint64_t)(v243 + 2) > v3[6] && v243)
                {
                  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, __n128))(*(_QWORD *)*v3 + 296))(*v3, 0, v243, v3[2], v141);
                  v243 = 0;
                  v3[4] = 0;
                }
                v244 = v3[2] + 16 * v243;
                v245 = *((_WORD *)v3 + 6);
                _H0 = *((_WORD *)v3 + 7);
                __asm { FCVT            S0, H0 }
                _S0 = _S0 * 0.0;
                __asm { FCVT            H0, S0 }
                *(_DWORD *)(v244 + 24) = *((_DWORD *)v3 + 2);
                *(_WORD *)(v244 + 28) = v245;
                *(_WORD *)(v244 + 30) = LOWORD(_S0);
                *(_QWORD *)(v244 + 8) = *(_QWORD *)(v244 + 24);
                v141.n128_f32[0] = (float)v140 + 0.5;
                *(float *)(v244 + 16) = v144;
                *(_DWORD *)(v244 + 20) = v141.n128_u32[0];
                *(float *)v244 = v251;
                *(_DWORD *)(v244 + 4) = v141.n128_u32[0];
                v3[4] += 2;
              }
              ++v140;
            }
            while (LODWORD(v10) != v140);
          }
          goto LABEL_379;
        }
        v141.n128_u32[0] = **((_DWORD **)v145 + 1);
        v258 = vcvtms_s32_f32(v141.n128_f32[0]);
        if (v140 >= v258)
        {
          v258 = v140;
        }
        else
        {
          v229 = v251;
          do
          {
            if (*((_BYTE *)v3 + 64))
            {
              v230 = v3[4];
              if ((unint64_t)(v230 + 2) > v3[6] && v230)
              {
                (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 296))(*v3, 0, v230, v3[2]);
                v143 = v256;
                v230 = 0;
                v3[4] = 0;
              }
              v231 = v3[2] + 16 * v230;
              v232 = *((_WORD *)v3 + 6);
              _H0 = *((_WORD *)v3 + 7);
              __asm { FCVT            S0, H0 }
              _S0 = _S0 * 0.0;
              __asm { FCVT            H0, S0 }
              *(_DWORD *)(v231 + 24) = *((_DWORD *)v3 + 2);
              *(_WORD *)(v231 + 28) = v232;
              *(_WORD *)(v231 + 30) = LOWORD(_S0);
              *(_QWORD *)(v231 + 8) = *(_QWORD *)(v231 + 24);
              v141.n128_f32[0] = (float)v140 + 0.5;
              *(float *)(v231 + 16) = v144;
              *(_DWORD *)(v231 + 20) = v141.n128_u32[0];
              *(float *)v231 = v229;
              *(_DWORD *)(v231 + 4) = v141.n128_u32[0];
              v3[4] += 2;
            }
            ++v140;
          }
          while (v258 != v140);
        }
      }
      v140 = v258;
      if (v258 >= SLODWORD(v10))
        goto LABEL_379;
    }
  }
  if ((unint64_t)(32 * v11) <= 0x1000)
  {
    MEMORY[0x1E0C80A78](v1);
    v250 = (char *)&v249 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v250, 32 * v11);
LABEL_7:
    v249 = 32 * v11;
    v13 = *(_QWORD **)(v4 + 8);
    if (v13)
    {
      v14 = 0;
      v15 = v250 + 8;
      do
      {
        v16 = v13[1];
        if (v16)
        {
          v17 = (int *)(v13 + 3);
          v18 = &v15[16 * v14];
          v14 += v16;
          v19 = (int *)(v13 + 3);
          do
          {
            v20 = *v19;
            v19 += 6;
            *((_DWORD *)v18 - 2) = ((v20 >> 31) | 0x80000000) ^ v20;
            *(_QWORD *)v18 = v17;
            v18 += 16;
            v17 = v19;
            --v16;
          }
          while (v16);
        }
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    v255 = &v250[16 * v11];
    CA::radix_sort(v11);
    if (v8 <= -16777216)
      v23 = -16777216;
    else
      v23 = v8;
    LODWORD(v254) = v23;
    if (v9 >= 0x1000000)
      v24 = 0x1000000;
    else
      v24 = v9;
    if (v7 <= -16777216)
      v25 = 4278190080;
    else
      v25 = v7;
    v262 = 0;
    v263 = v265;
    v26 = (__n128)xmmword_18474E1F0;
    if (SLODWORD(v10) >= 0x1000000)
      v27 = 0x1000000;
    else
      v27 = LODWORD(v10);
    v264 = xmmword_18474E1F0;
    v260 = 0;
    v261 = (void ***)&v262;
    if ((int)v25 >= v27)
      goto LABEL_379;
    v28 = 0;
    v29 = 0;
    v26.n128_f32[0] = (float)v24 + 0.5;
    v251 = (float)(int)v254 + 0.5;
    v252 = v26.n128_f32[0];
    v30 = v250;
    v258 = v24;
    v253 = v27;
    while (1)
    {
      if (v28)
      {
        v26.n128_f32[0] = (float)(int)v25;
        v31 = (float)(v25 + 1);
        v32 = (float *)&v260;
        do
        {
          v33 = (float *)*((_QWORD *)v28 + 2);
          v34 = v33[1];
          if (v34 <= v26.n128_f32[0])
          {
            *(_QWORD *)v32 = *(_QWORD *)v28;
            *(_QWORD *)v28 = v29;
            v29 = (uint64_t)v28;
            v28 = v32;
          }
          else
          {
            v35 = *v33;
            if (*v33 >= v26.n128_f32[0])
              v36 = *v33;
            else
              v36 = (float)(int)v25;
            if (v34 > v31)
              v34 = (float)(v25 + 1);
            v37 = v33[2];
            v38 = v33[3];
            v39 = v33[4];
            v40 = v39 + (float)((float)(v38 + (float)((float)(v36 - v35) * v37)) * (float)(v36 - v35));
            v41 = v39 + (float)((float)(v38 + (float)((float)(v34 - v35) * v37)) * (float)(v34 - v35));
            if (v40 >= v41)
              v42 = v41;
            else
              v42 = v40;
            if (v40 > v41)
              v41 = v40;
            *(float *)v22.i32 = fmaxf(v41 - v42, 0.000001);
            v22 = (int32x2_t)vrecpe_f32((float32x2_t)vdup_lane_s32(v22, 0));
            v28[7] = v42;
            v28[8] = v41;
            v28[6] = v33[5] * (float)(v34 - v36);
            v28[9] = *(float *)v22.i32;
            v32 = v28;
          }
          v28 = *(float **)v28;
        }
        while (v28);
        LODWORD(v256) = v25 + 1;
        v43 = v260;
        v44 = (unint64_t)v255;
        if (v260)
        {
          v45 = 0;
          v46 = &v260;
          do
          {
            while (1)
            {
              v47 = v46;
              v46 = (float **)v43;
              v43 = *(float **)v43;
              if (!v43)
                break;
              v26.n128_u32[0] = *((_DWORD *)v46 + 7);
              if (v26.n128_f32[0] > v43[7])
              {
                *v47 = v43;
                *v46 = *(float **)v43;
                *(_QWORD *)v43 = v46;
                v45 = 1;
              }
            }
            v43 = v260;
            v48 = v45 & (v260 != 0);
            v46 = &v260;
            v45 = 0;
          }
          while ((v48 & 1) != 0);
        }
      }
      else
      {
        LODWORD(v256) = v25 + 1;
        v31 = (float)(v25 + 1);
        v44 = (unint64_t)v255;
      }
      if ((unint64_t)v30 < v44)
      {
        v49 = 0;
        v50 = 0;
        v51 = (float)(int)v25;
        do
        {
          v52 = *((_QWORD *)v30 + 1);
          v26.n128_u32[0] = *(_DWORD *)v52;
          if (*(float *)v52 >= v31)
            break;
          v53 = *(float *)(v52 + 4);
          if (v53 > v51)
          {
            if (v29)
            {
              v54 = *(_QWORD *)v29;
            }
            else
            {
              v29 = x_heap_malloc_small_((uint64_t *)v261, 0x28uLL);
              v24 = v258;
              v54 = 0;
              v52 = *((_QWORD *)v30 + 1);
              v26.n128_u32[0] = *(_DWORD *)v52;
              v53 = *(float *)(v52 + 4);
            }
            *(_QWORD *)(v29 + 16) = v52;
            if (v26.n128_f32[0] >= v51)
              v55 = v26.n128_f32[0];
            else
              v55 = (float)(int)v25;
            if (v53 > v31)
              v53 = v31;
            v56 = *(float *)(v52 + 8);
            v57 = *(float *)(v52 + 12);
            v58 = *(float *)(v52 + 16);
            v59 = v58
                + (float)((float)(v57 + (float)((float)(v55 - v26.n128_f32[0]) * v56)) * (float)(v55 - v26.n128_f32[0]));
            v60 = v58
                + (float)((float)(v57 + (float)((float)(v53 - v26.n128_f32[0]) * v56)) * (float)(v53 - v26.n128_f32[0]));
            if (v59 >= v60)
              v61 = v60;
            else
              v61 = v59;
            if (v59 > v60)
              v60 = v59;
            v21.f32[0] = fmaxf(v60 - v61, 0.000001);
            v21 = (float32x2_t)vdup_lane_s32((int32x2_t)v21, 0);
            *(float *)(v29 + 28) = v61;
            *(float *)(v29 + 32) = v60;
            *(float *)(v29 + 24) = *(float *)(v52 + 20) * (float)(v53 - v55);
            v26.n128_u64[0] = (unint64_t)vrecpe_f32(v21);
            *(_DWORD *)(v29 + 36) = v26.n128_u32[0];
            *(_QWORD *)v29 = v50;
            ++v49;
            v50 = v29;
            v29 = v54;
          }
          v30 += 16;
        }
        while ((unint64_t)v30 < v44);
        if (v49)
        {
          if (v49 != 1)
          {
            v62 = v29;
            v63 = CA::ScanConverter::RendererImpl::Edge::sort_xmin((uint64_t *)v50, v49);
            v24 = v258;
            v50 = v63;
            v29 = v62;
          }
          v64 = (float *)&v260;
          if (v50)
          {
            while (1)
            {
              v65 = *(float **)v64;
              if (!*(_QWORD *)v64)
                break;
              v26.n128_u32[0] = *(_DWORD *)(v50 + 28);
              if (v26.n128_f32[0] >= v65[7])
              {
                v64 = *(float **)v64;
                if (!v50)
                  goto LABEL_79;
              }
              else
              {
                v66 = *(_QWORD *)v50;
                *(_QWORD *)v64 = v50;
                *(_QWORD *)v50 = v65;
                v50 = v66;
                if (!v66)
                  goto LABEL_79;
              }
            }
          }
          else
          {
LABEL_79:
            if (*(_QWORD *)v64)
              goto LABEL_82;
            v50 = 0;
          }
          *(_QWORD *)v64 = v50;
        }
      }
LABEL_82:
      v28 = v260;
      v257 = v29;
      if (v260)
      {
        if ((int)v254 >= v24)
          goto LABEL_175;
        v67 = 0;
        v68 = (float)(int)v25 + 0.5;
        v69 = 0.0;
        v70 = (int)v254;
        v71 = v260;
LABEL_85:
        for (j = (float)v70; v67; v67 = *(_QWORD *)(v67 + 8))
        {
          if (*(float *)(v67 + 32) > j)
            break;
          v69 = *(float *)(v67 + 24) + v69;
        }
        v26.n128_f32[0] = j + 1.0;
        v259 = v67;
        if (!v71)
          goto LABEL_106;
LABEL_89:
        while (1)
        {
          v73 = v71;
          v74 = v71[7];
          if (v26.n128_f32[0] <= v74)
            break;
          v71 = *(float **)v71;
          v75 = v73[8];
          if (v75 <= j)
          {
            v69 = v73[6] + v69;
            if (v71)
              continue;
LABEL_105:
            v67 = v259;
LABEL_106:
            v73 = 0;
            v79 = v24;
            if (!v67)
            {
LABEL_154:
              v26.n128_f32[0] = fabsf(v69);
              if (v5)
              {
                v109 = (int)v26.n128_f32[0];
                v26.n128_f32[0] = v26.n128_f32[0] - truncf(v26.n128_f32[0]);
                if ((v109 & 1) != 0)
                  v26.n128_f32[0] = 1.0 - v26.n128_f32[0];
                goto LABEL_159;
              }
              v110 = 1.0;
              if (v26.n128_f32[0] < 1.0)
              {
LABEL_159:
                v111 = v26.n128_f32[0] == 0.0 && *((_BYTE *)v3 + 64) == 0;
                v110 = v26.n128_f32[0];
                if (v111)
                {
                  v67 = 0;
                  goto LABEL_174;
                }
              }
              v113 = v110 == 1.0 && *((_BYTE *)v3 + 65) != 0;
              v114 = &v3[v113];
              v116 = v114[4];
              v95 = v114 + 4;
              v115 = v116;
              if (v116 + 2 > (unint64_t)v95[2])
              {
                CA::OGL::Shape::Lines::flush((_QWORD **)v3, v113);
                v29 = v257;
                v24 = v258;
                v115 = *v95;
              }
              v67 = 0;
              v97 = v3[v113 + 2] + 16 * v115;
              v98 = *((_WORD *)v3 + 6);
              _H0 = *((_WORD *)v3 + 7);
              *(_DWORD *)(v97 + 24) = *((_DWORD *)v3 + 2);
              __asm { FCVT            S0, H0 }
              _S0 = v110 * _S0;
              __asm { FCVT            H0, S0 }
              goto LABEL_172;
            }
LABEL_109:
            v80 = 1.0;
            v81 = v67;
            v82 = v69;
            while (1)
            {
              v83 = v81;
              v84 = *(float *)(v81 + 28);
              if (v84 >= j)
                v85 = *(float *)(v81 + 28);
              else
                v85 = (float)v70;
              v86 = *(float *)(v81 + 32);
              if (v86 > v26.n128_f32[0])
                v86 = j + 1.0;
              v82 = v82
                  + (float)((float)(*(float *)(v81 + 24) * v80)
                          * (float)((float)(v26.n128_f32[0] - v86)
                                  + (float)((float)((float)(v85 - v86) * *(float *)(v81 + 36))
                                          * (float)(v84 + (float)((float)(v86 + v85) * -0.5)))));
              v81 = *(_QWORD *)(v81 + 8);
              if (v5 == 1)
              {
                if (!v81)
                {
                  v89 = fabsf(v82);
                  goto LABEL_126;
                }
                v87 = *(float **)(v83 + 16);
                v88 = *(float **)(v81 + 16);
                if (v87[5] == v88[5] && *v87 != v88[1] && v87[1] != *v88)
                  v80 = -v80;
              }
              if (!v81)
              {
                v89 = fabsf(v82);
                if (!v5)
                {
                  if (v89 >= 1.0)
                  {
                    v79 = v70 + 1;
                    v89 = 1.0;
                    goto LABEL_133;
                  }
LABEL_129:
                  v79 = v70 + 1;
                  if (v89 == 0.0 && *((_BYTE *)v3 + 64) == 0)
                    goto LABEL_174;
LABEL_133:
                  v92 = v89 == 1.0 && *((_BYTE *)v3 + 65) != 0;
                  v93 = &v3[v92];
                  v96 = v93[4];
                  v95 = v93 + 4;
                  v94 = v96;
                  if (v96 + 2 > (unint64_t)v95[2])
                  {
                    CA::OGL::Shape::Lines::flush((_QWORD **)v3, v92);
                    v29 = v257;
                    v24 = v258;
                    v94 = *v95;
                  }
                  v97 = v3[v92 + 2] + 16 * v94;
                  v98 = *((_WORD *)v3 + 6);
                  _H0 = *((_WORD *)v3 + 7);
                  __asm { FCVT            S0, H0 }
                  _S0 = v89 * _S0;
                  __asm { FCVT            H0, S0 }
                  *(_DWORD *)(v97 + 24) = *((_DWORD *)v3 + 2);
LABEL_172:
                  *(_WORD *)(v97 + 28) = v98;
                  *(_WORD *)(v97 + 30) = _H0;
                  *(_QWORD *)(v97 + 8) = *(_QWORD *)(v97 + 24);
                  *(float *)v97 = j + 0.5;
                  v26.n128_f32[0] = (float)v79 + 0.5;
                  *(_DWORD *)(v97 + 16) = v26.n128_u32[0];
                  *(float *)(v97 + 20) = v68;
                  *(float *)(v97 + 4) = v68;
                  *v95 += 2;
LABEL_174:
                  v70 = v79;
                  v71 = v73;
                  if (v79 >= v24)
                  {
LABEL_175:
                    v27 = v253;
                    v44 = v256;
                    goto LABEL_187;
                  }
                  goto LABEL_85;
                }
LABEL_126:
                v26.n128_f32[0] = v89 - truncf(v89);
                if (((int)v89 & 1) != 0)
                  v89 = 1.0 - v26.n128_f32[0];
                else
                  v89 = v26.n128_f32[0];
                goto LABEL_129;
              }
            }
          }
          v76 = v259;
          if (v259)
          {
            v77 = &v259;
            while (1)
            {
              v78 = *(float *)(v76 + 32);
              if (SLODWORD(v75) == SLODWORD(v78))
              {
                if (v74 < *(float *)(v76 + 28))
                  goto LABEL_104;
              }
              else if (v75 < v78)
              {
LABEL_104:
                *((_QWORD *)v73 + 1) = v76;
                *v77 = (uint64_t)v73;
                if (!v71)
                  goto LABEL_105;
                goto LABEL_89;
              }
              v77 = (uint64_t *)(v76 + 8);
              v76 = *(_QWORD *)(v76 + 8);
              if (!v76)
                goto LABEL_102;
            }
          }
          v77 = &v259;
LABEL_102:
          *v77 = (uint64_t)v73;
          *((_QWORD *)v73 + 1) = 0;
          if (!v71)
            goto LABEL_105;
        }
        v67 = v259;
        if (!v259)
        {
          v106 = floorf(v74);
          if (v106 < -16777000.0)
            v106 = -16777000.0;
          v107 = 16777000.0;
          if (v74 <= 16777000.0)
            v107 = v71[7];
          if (v74 >= 0.0)
            v106 = v107;
          if (v24 >= (int)v106 && (LODWORD(v74) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
            v79 = (int)v106;
          else
            v79 = v24;
          goto LABEL_154;
        }
        goto LABEL_109;
      }
      if (v30 == (char *)v44)
      {
        v236 = v252;
        if ((int)v25 < v27)
        {
          do
          {
            if (*((_BYTE *)v3 + 64))
            {
              v237 = v3[4];
              if ((unint64_t)(v237 + 2) > v3[6] && v237)
              {
                (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, __n128))(*(_QWORD *)*v3 + 296))(*v3, 0, v237, v3[2], v26);
                v237 = 0;
                v3[4] = 0;
              }
              v238 = v3[2] + 16 * v237;
              v239 = *((_WORD *)v3 + 6);
              _H0 = *((_WORD *)v3 + 7);
              __asm { FCVT            S0, H0 }
              _S0 = _S0 * 0.0;
              __asm { FCVT            H0, S0 }
              *(_DWORD *)(v238 + 24) = *((_DWORD *)v3 + 2);
              *(_WORD *)(v238 + 28) = v239;
              *(_WORD *)(v238 + 30) = LOWORD(_S0);
              *(_QWORD *)(v238 + 8) = *(_QWORD *)(v238 + 24);
              v26.n128_f32[0] = (float)(int)v25 + 0.5;
              *(float *)(v238 + 16) = v236;
              *(_DWORD *)(v238 + 20) = v26.n128_u32[0];
              *(float *)v238 = v251;
              *(_DWORD *)(v238 + 4) = v26.n128_u32[0];
              v3[4] += 2;
            }
            LODWORD(v25) = v25 + 1;
          }
          while (v27 != (_DWORD)v25);
        }
        goto LABEL_379;
      }
      v26.n128_u32[0] = **((_DWORD **)v30 + 1);
      LODWORD(v44) = vcvtms_s32_f32(v26.n128_f32[0]);
      v120 = v252;
      if ((int)v25 >= (int)v44)
      {
        v44 = v25;
      }
      else
      {
        v121 = v251;
        do
        {
          if (*((_BYTE *)v3 + 64))
          {
            v122 = v3[4];
            if ((unint64_t)(v122 + 2) > v3[6] && v122)
            {
              (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 296))(*v3, 0, v122, v3[2]);
              v29 = v257;
              v24 = v258;
              v122 = 0;
              v3[4] = 0;
            }
            v123 = v3[2] + 16 * v122;
            v124 = *((_WORD *)v3 + 6);
            _H0 = *((_WORD *)v3 + 7);
            __asm { FCVT            S0, H0 }
            _S0 = _S0 * 0.0;
            __asm { FCVT            H0, S0 }
            *(_DWORD *)(v123 + 24) = *((_DWORD *)v3 + 2);
            *(_WORD *)(v123 + 28) = v124;
            *(_WORD *)(v123 + 30) = LOWORD(_S0);
            *(_QWORD *)(v123 + 8) = *(_QWORD *)(v123 + 24);
            v26.n128_f32[0] = (float)(int)v25 + 0.5;
            *(float *)(v123 + 16) = v120;
            *(_DWORD *)(v123 + 20) = v26.n128_u32[0];
            *(float *)v123 = v121;
            *(_DWORD *)(v123 + 4) = v26.n128_u32[0];
            v3[4] += 2;
          }
          LODWORD(v25) = v25 + 1;
        }
        while ((_DWORD)v44 != (_DWORD)v25);
      }
LABEL_187:
      v25 = v44;
      if ((int)v44 >= v27)
        goto LABEL_379;
    }
  }
  v250 = (char *)malloc_type_malloc(32 * v11, 0x145CA901uLL);
  if (v250)
    goto LABEL_7;
}

uint64_t CA::ScanConverter::RendererImpl::Edge::sort_xmin(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v3 = (uint64_t)a1;
  v4 = a2 >> 1;
  v5 = a1;
  v6 = (a2 >> 1) - 1;
  if (a2 >> 1 != 1)
  {
    v5 = a1;
    do
    {
      v5 = (uint64_t *)*v5;
      --v6;
    }
    while (v6);
  }
  v7 = *v5;
  *v5 = 0;
  if (a2 > 3)
    v3 = CA::ScanConverter::RendererImpl::Edge::sort_xmin(a1, a2 >> 1);
  if (a2 - v4 >= 2)
    v7 = CA::ScanConverter::RendererImpl::Edge::sort_xmin(v7, a2 - v4);
  if (*(float *)(v7 + 28) >= *(float *)(v3 + 28))
  {
    v9 = *(_QWORD *)v3;
    v8 = v7;
    v7 = v3;
  }
  else
  {
    v8 = *(_QWORD *)v7;
    v9 = v3;
  }
  v10 = v9 != 0;
  if (v9 && v8)
  {
    v11 = (_QWORD *)v7;
    do
    {
      if (*(float *)(v8 + 28) >= *(float *)(v9 + 28))
      {
        *v11 = v9;
        v13 = *(_QWORD *)v9;
        v12 = v8;
        v11 = (_QWORD *)v9;
        v9 = *(_QWORD *)v9;
      }
      else
      {
        *v11 = v8;
        v12 = *(_QWORD *)v8;
        v13 = v9;
        v11 = (_QWORD *)v8;
        v8 = *(_QWORD *)v8;
      }
      v10 = v13 != 0;
      if (v13)
        v14 = v12 == 0;
      else
        v14 = 1;
    }
    while (!v14);
  }
  else
  {
    v13 = v9;
    v12 = v8;
    v11 = (_QWORD *)v7;
  }
  if (v10)
    v15 = v13;
  else
    v15 = v12;
  *v11 = v15;
  return v7;
}

void CA::radix_sort(uint64_t a1)
{
  unint64_t v1;
  _OWORD *v2;
  _BYTE *v3;
  _OWORD *v4;
  unint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  _OWORD *v13;
  _BYTE *v14;
  unint64_t v15;
  _BYTE *v16;
  unsigned int *v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  int32x4_t v21;
  int32x4_t *v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  BOOL v27;
  _QWORD *v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _QWORD *v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  _OWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  _OWORD *v54;
  _BYTE v55[4104];
  uint64_t v56;

  v1 = MEMORY[0x1E0C80A78](a1);
  v4 = v2;
  v5 = v1;
  v56 = *MEMORY[0x1E0C80C00];
  if (v1 > 0x3F)
  {
    v14 = v3;
    v15 = 16 * v1;
    v16 = v3;
    if (!v3)
    {
      if (v15 > 0x1000)
      {
        v16 = malloc_type_malloc(16 * v1, 0x10800407411B482uLL);
        if (!v16)
          return;
      }
      else
      {
        MEMORY[0x1E0C80A78](v1);
        v16 = &v55[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
        bzero(v16, 16 * v5);
      }
    }
    bzero(v55, 0x1000uLL);
    v17 = (unsigned int *)v4;
    v18 = v5;
    do
    {
      v19 = *v17;
      v17 += 4;
      ++*(_DWORD *)&v55[16 * v19];
      ++*(_DWORD *)&v55[16 * BYTE1(v19) + 4];
      ++*(_DWORD *)&v55[16 * BYTE2(v19) + 8];
      ++*(_DWORD *)&v55[(((unint64_t)v19 >> 20) & 0xFF0) + 12];
      --v18;
    }
    while (v18);
    v20 = 0;
    v21 = 0uLL;
    do
    {
      v22 = (int32x4_t *)&v55[16 * v20];
      v23 = vaddq_s32(*v22, v21);
      v24 = vaddq_s32(v23, v22[1]);
      v25 = vaddq_s32(v24, v22[2]);
      v26 = vaddq_s32(v25, v22[3]);
      *v22 = v21;
      v22[1] = v23;
      v22[2] = v24;
      v22[3] = v25;
      v21 = v26;
      v27 = v20 >= 0xFC;
      v20 += 4;
    }
    while (!v27);
    v28 = (_QWORD *)v4 + 1;
    v29 = v5;
    do
    {
      v30 = *((_DWORD *)v28 - 2);
      v31 = 16 * v30;
      v32 = *(unsigned int *)&v55[v31];
      *(_DWORD *)&v55[v31] = v32 + 1;
      v33 = *v28;
      v28 += 2;
      v34 = &v16[16 * v32];
      *(_DWORD *)v34 = v30;
      *((_QWORD *)v34 + 1) = v33;
      --v29;
    }
    while (v29);
    v35 = v16 + 8;
    v36 = v5;
    do
    {
      v37 = *((_DWORD *)v35 - 2);
      v38 = *v35;
      v35 += 2;
      v39 = &v55[16 * BYTE1(v37)];
      v40 = *((unsigned int *)v39 + 1);
      *((_DWORD *)v39 + 1) = v40 + 1;
      v41 = &v4[v40];
      *(_DWORD *)v41 = v37;
      *((_QWORD *)v41 + 1) = v38;
      --v36;
    }
    while (v36);
    v42 = (_QWORD *)v4 + 1;
    v43 = v5;
    do
    {
      v44 = *((_DWORD *)v42 - 2);
      v45 = *v42;
      v42 += 2;
      v46 = &v55[16 * BYTE2(v44)];
      v47 = *((unsigned int *)v46 + 2);
      *((_DWORD *)v46 + 2) = v47 + 1;
      v48 = &v16[16 * v47];
      *(_DWORD *)v48 = v44;
      *((_QWORD *)v48 + 1) = v45;
      --v43;
    }
    while (v43);
    v49 = (uint64_t *)(v16 + 8);
    do
    {
      v50 = *((unsigned int *)v49 - 2);
      v51 = *v49;
      v49 += 2;
      v52 = &v55[(v50 >> 20) & 0xFF0];
      v53 = *((unsigned int *)v52 + 3);
      *((_DWORD *)v52 + 3) = v53 + 1;
      v54 = &v4[v53];
      *(_DWORD *)v54 = v50;
      *((_QWORD *)v54 + 1) = v51;
      --v5;
    }
    while (v5);
    if (v15 > 0x1000 && !v14)
      free(v16);
  }
  else if (v1 >= 2)
  {
    v6 = 1;
    v7 = v2;
    do
    {
      v8 = (unsigned int *)&v2[v6];
      v9 = *v8;
      v10 = *((_QWORD *)v8 + 1);
      v11 = v7;
      v12 = v6;
      while (*(_DWORD *)v11 > v9)
      {
        --v12;
        v11[1] = *v11;
        --v11;
        if (v12 + 1 <= 1)
        {
          v12 = 0;
          break;
        }
      }
      v13 = &v2[v12];
      *(_DWORD *)v13 = v9;
      *((_QWORD *)v13 + 1) = v10;
      ++v6;
      ++v7;
    }
    while (v6 != v1);
  }
}

void CA::OGL::emit_bounds_surround(uint64_t a1, const CA::Bounds *a2)
{
  unint64_t v3;
  CA::Shape *v4;
  const void *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[3];
  _QWORD __dst[62];

  __dst[61] = *MEMORY[0x1E0C80C00];
  v3 = CA::Shape::subtract(*(CA::Shape **)(*(_QWORD *)(a1 + 232) + 8), a2);
  if (v3)
  {
    v4 = (CA::Shape *)v3;
    if ((v3 & 1) != 0)
    {
      if (v3 == 1)
        return;
    }
    else if (*(_DWORD *)(v3 + 4) == 6)
    {
      return;
    }
    v5 = *(const void **)(a1 + 16);
    memcpy(__dst, v5, 0x1E8uLL);
    __dst[0] = v5;
    *(_QWORD *)(a1 + 16) = __dst;
    LOBYTE(__dst[2]) = 0;
    v6 = *(unsigned __int8 *)(a1 + 64);
    if (*(_BYTE *)(a1 + 64))
      *(_BYTE *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 96) = a1 + 818;
    *(_OWORD *)(a1 + 104) = xmmword_18474E060;
    v12[1] = 0;
    v12[2] = 0;
    v11 = 0;
    v12[0] = (uint64_t)v4;
    v10 = 0;
    while (CA::ShapeIterator::iterate(v12, (int *)&v10))
    {
      if (*(_DWORD *)(a1 + 92))
        v7 = 6;
      else
        v7 = 4;
      if ((unint64_t)(*(_QWORD *)(a1 + 128) + 4) > *(_QWORD *)(a1 + 136)
        || (v8 = *(_QWORD *)(a1 + 112)) != 0 && *(_QWORD *)(a1 + 104) + v7 > v8)
      {
        *(_WORD *)(a1 + 816) |= 0x20u;
        CA::OGL::Context::array_flush(a1);
        *(_QWORD *)(a1 + 128) = 0;
        *(_QWORD *)(a1 + 96) = a1 + 818;
        *(_OWORD *)(a1 + 104) = xmmword_18474E060;
      }
      CA::OGL::Context::array_rect((_QWORD *)a1, (float)(int)v10, (float)SHIDWORD(v10), (float)(v11 + v10), (float)(HIDWORD(v11) + HIDWORD(v10)));
      v9 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
      *(_QWORD *)(v9 - 160) = 0;
      *(_QWORD *)(v9 - 112) = 0;
      *(_QWORD *)(v9 - 64) = 0;
      *(_QWORD *)(v9 - 16) = 0;
    }
    CA::OGL::Context::array_flush(a1);
    if (v6)
      *(_BYTE *)(a1 + 64) = 1;
    *(_QWORD *)(a1 + 16) = __dst[0];
    __dst[0] = 0;
    CA::Shape::unref(v4);
    if (__dst[0])
      __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
  }
}

void CA::shape_subtract(CA::Shape **this, CA::Shape **a2, const CA::Bounds *a3)
{
  CA::Shape *v4;
  unint64_t v5;

  v4 = *this;
  if ((*this & 1) != 0)
  {
    if (v4 == (CA::Shape *)1)
      return;
    goto LABEL_5;
  }
  if (*((_DWORD *)v4 + 1) != 6)
  {
LABEL_5:
    v5 = CA::Shape::subtract(*this, (const CA::Bounds *)a2);
    CA::Shape::unref(v4);
    *this = (CA::Shape *)v5;
  }
}

unint64_t CA::Shape::subtract(CA::Shape *this, const CA::Bounds *a2)
{
  BOOL v3;
  char v4;
  uint64_t v5;
  const int *v6;
  _OWORD v8[3];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if ((this & 1) != 0)
    v3 = this == (CA::Shape *)1;
  else
    v3 = *((_DWORD *)this + 1) == 6;
  v4 = v3;
  if ((v4 & 1) != 0 || !*((_DWORD *)a2 + 2) || !*((_DWORD *)a2 + 3))
    return CA::Shape::ref((unint64_t)this, a2);
  memset(v8, 0, sizeof(v8));
  CA::Shape::operator=((uint64_t)v8, a2);
  return CA::Shape::subtract(this, (const CA::Shape *)v8, v5, v6);
}

BOOL CA::OGL::iosurface_textures_compare(CA::OGL *this, __IOSurface *a2, __IOSurface *a3)
{
  return this != a2;
}

BOOL CA::Render::SpringAnimation::validate(CA::Render::SpringAnimation *this, CA::Render::Layer *a2)
{
  _BOOL8 v3;

  v3 = CA::Render::BasicAnimation0::validate(this, a2);
  if (v3)
    CA::Render::SpringAnimation::State::update((uint64_t)this + 192, *((double *)this + 19), *((double *)this + 20), *((double *)this + 21), *((double *)this + 22), *((unsigned __int8 *)this + 184));
  return v3;
}

double CA::Render::SpringAnimation::State::eval(CA::Render::SpringAnimation::State *this, double a2)
{
  double v4;
  double v5;
  double v6;
  __double2 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v4 = *((double *)this + 1);
  if (v4 < 1.0)
  {
    v5 = exp(-(a2 * v4) * *(double *)this);
    v6 = *((double *)this + 3);
    v7 = __sincos_stret(*((double *)this + 2) * a2);
    v8 = v7.__sinval * *((double *)this + 4) + v7.__cosval * v6;
LABEL_7:
    v14 = v8 * v5;
    return 1.0 - v14;
  }
  if (v4 <= 1.0 || !*((_BYTE *)this + 40))
  {
    v5 = *((double *)this + 3) + *((double *)this + 4) * a2;
    v8 = exp(-(a2 * *(double *)this));
    goto LABEL_7;
  }
  v10 = *((double *)this + 2);
  v9 = *((double *)this + 3);
  v11 = *(double *)this * v4;
  v12 = exp(-(a2 * (v11 + v10)));
  v13 = *((double *)this + 4);
  v14 = exp((v10 - v11) * a2) * v13 + v12 * v9;
  return 1.0 - v14;
}

uint64_t CA::Render::SpringAnimation::State::update(uint64_t this, double a2, double a3, double a4, double a5, int a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v12;
  double v13;

  v6 = sqrt(a3 / a2);
  v7 = sqrt(a3 * a2);
  v8 = a4 / (v7 + v7);
  *(double *)this = v6;
  *(double *)(this + 8) = v8;
  *(_BYTE *)(this + 40) = a6;
  if (v8 >= 1.0)
  {
    if (v8 <= 1.0 || a6 == 0)
    {
      *(_QWORD *)(this + 24) = 0x3FF0000000000000;
      v10 = v6 - a5;
    }
    else
    {
      v12 = sqrt(v8 * v8 + -1.0) * v6;
      v13 = a5 + v8 * v6;
      *(double *)(this + 16) = v12;
      *(double *)(this + 24) = (v13 + v12) / (v12 + v12);
      v10 = (v12 - v13) / (v12 + v12);
    }
  }
  else
  {
    v9 = sqrt(-(v8 * v8 + -1.0)) * v6;
    *(double *)(this + 16) = v9;
    *(_QWORD *)(this + 24) = 0x3FF0000000000000;
    v10 = -(a5 - v8 * v6) / v9;
  }
  *(double *)(this + 32) = v10;
  return this;
}

uint64_t CAGetCurrentImageBytes()
{
  return *(_QWORD *)CAGetStatsStruct(0);
}

uint64_t backingStoreFinalize(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  CGColorSpaceRef *v17;
  _QWORD v19[8];

  v19[7] = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(&buffer_list_mutex);
  v2 = *((_QWORD *)a1 + 22);
  if (v2)
    *(_QWORD *)(v2 + 168) = *((_QWORD *)a1 + 21);
  v3 = *((_QWORD *)a1 + 21);
  if (v3)
    *(_QWORD *)(v3 + 176) = v2;
  if ((char *)buffer_list == a1)
    buffer_list = v3;
  pthread_mutex_unlock(&buffer_list_mutex);
  CGColorSpaceRelease(*((CGColorSpaceRef *)a1 + 20));
  if (pthread_main_np())
  {
    for (i = 0; i != 3; ++i)
    {
      v5 = *(unsigned int **)&a1[72 * i + 208];
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          (**(void (***)(unsigned int *))v5)(v5);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
  }
  else
  {
    v9 = *((_QWORD *)a1 + 26);
    v10 = *((_QWORD *)a1 + 35);
    v11 = *((_QWORD *)a1 + 44);
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 0x40000000;
    v19[2] = ___ZL20backingStoreFinalizePKv_block_invoke;
    v19[3] = &__block_descriptor_tmp_836;
    v19[4] = v9;
    v19[5] = v10;
    v19[6] = v11;
    dispatch_async(MEMORY[0x1E0C80D38], v19);
  }
  for (j = 0; j != 3; ++j)
  {
    v13 = *(unsigned int **)&a1[72 * j + 200];
    if (v13)
    {
      v14 = v13 + 2;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
        (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
    }
    v17 = (CGColorSpaceRef *)&a1[72 * j];
    CGColorSpaceRelease(v17[24]);
    CGSReleaseRegion();
    CGColorRelease(v17[27]);
  }
  if (*((_QWORD *)a1 + 55))
    CGSBoundingShapeRelease();
  CGSReleaseRegion();
  CABackingStoreReleaseImages((CABackingStore *)a1);
  pthread_cond_destroy((pthread_cond_t *)(a1 + 80));
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 16));
}

uint64_t ___ZN2CA5Layer8display_Ev_block_invoke(uint64_t a1)
{
  return CABackingStoreUpdate_(*(_QWORD *)(a1 + 48), *(int *)(a1 + 72), *(int *)(a1 + 76), *(unsigned int *)(a1 + 80), *(_DWORD *)(a1 + 84), *(_DWORD *)(a1 + 88), *(_QWORD *)(a1 + 56), (void (*)(_QWORD, uint64_t))backing_callback, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64), objc_msgSend(*(id *)(a1 + 32), "wantsExtendedDynamicRangeContent"));
}

uint64_t CABackingStoreUpdate_(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unsigned int a5, int a6, uint64_t a7, void (*a8)(_QWORD, uint64_t), uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  pthread_mutex_t *v18;
  _opaque_pthread_t *v19;
  uint64_t v20;
  uint64_t v21;
  CFTypeRef v22;
  uint64_t v23;
  CGColorSpace *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int32 i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  CGContext *v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  CGColorSpaceRef Extended;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  _OWORD v46[2];
  CFTypeRef cf[2];
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  CGColorRef color;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v18 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  v19 = *(_opaque_pthread_t **)(a1 + 480);
  if (v19)
  {
    if (v19 == pthread_self())
      return pthread_mutex_unlock(v18);
    while (*(_QWORD *)(a1 + 480))
      pthread_cond_wait((pthread_cond_t *)(a1 + 80), v18);
  }
  v45 = a7;
  v20 = a9;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  color = 0;
  if ((_DWORD)a4 != 36)
  {
    v22 = 0;
    goto LABEL_9;
  }
  v50 = 0;
  v48 = 0u;
  v49 = 0u;
  *(_OWORD *)cf = 0u;
  memset(v46, 0, sizeof(v46));
  CACGContextEvaluator::CACGContextEvaluator((CACGContextEvaluator *)v46, a2, a3, *(CGColorSpace **)(a1 + 160));
  *(_QWORD *)(a1 + 480) = pthread_self();
  pthread_mutex_unlock(v18);
  a8(*((_QWORD *)&v48 + 1), a9);
  pthread_mutex_lock(v18);
  *(_QWORD *)(a1 + 480) = 0;
  v21 = CACGContextEvaluator::suggested_format((CACGContextEvaluator *)v46, a5 & 1, &color, a11);
  if ((_DWORD)v21 != -1)
  {
    a4 = v21;
    v22 = CFRetain(cf[0]);
    CGContextGetEDRTargetHeadroom();
    CACGContextEvaluator::~CACGContextEvaluator((CGColorSpaceRef *)v46);
LABEL_9:
    v23 = a10;
    *(_QWORD *)(a1 + 128) = a2;
    *(_QWORD *)(a1 + 136) = a3;
    if (a11 && a4 <= 0x1C && ((0x17826000u >> a4) & 1) != 0)
    {
      v24 = *(CGColorSpace **)(a1 + 160);
      Extended = CAColorSpaceCreateExtended(v24);
      CGColorSpaceRelease(v24);
      v23 = a10;
      v20 = a9;
      *(_QWORD *)(a1 + 160) = Extended;
    }
    v25 = v45;
    v42 = v23;
    if (!CABackingStorePrepareUpdates_(a1, a2, a3, a4, a5, a6, v45, v23, (uint64_t)&v52))
      goto LABEL_49;
    v26 = *(_QWORD *)(a1 + 408);
    v27 = *(_QWORD *)(v26 + 16);
    if (v27)
    {
      v28 = *(_DWORD *)(*(_QWORD *)(v27 + 24) + 32);
      if (!v28)
      {
LABEL_41:
        CGColorRelease(*(CGColorRef *)(v26 + 32));
        v38 = *(_QWORD *)(a1 + 408);
        *(_QWORD *)(v38 + 32) = color;
        color = 0;
        if (*(_QWORD *)(a1 + 448))
        {
          CGSReleaseRegion();
          *(_QWORD *)(a1 + 448) = 0;
        }
        if (*(_QWORD *)(a1 + 456))
          CGSReleaseRegion();
        CABackingStoreReleaseImages((CABackingStore *)a1);
        if (v42)
          v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 72))(v42) + 1;
        else
          v39 = 0;
        *(_DWORD *)(v38 + 56) = v39;
        *(_QWORD *)(v38 + 48) = 0;
        *(_QWORD *)(a1 + 472) = 0;
        *(_BYTE *)(a1 + 492) = 6;
        *(_QWORD *)(a1 + 408) = 0;
LABEL_49:
        pthread_cond_broadcast((pthread_cond_t *)(a1 + 80));
        CGDisplayListRelease();
        CGColorRelease(color);
        return pthread_mutex_unlock(v18);
      }
    }
    else
    {
      v28 = 1;
    }
    v43 = v20;
    for (i = 0; i != v28; ++i)
    {
      CABackingStoreBeginUpdate_(a1, a2, a3, (CA *)v53, SHIDWORD(v53), a6, v25, i, &v52);
      if (*(_QWORD *)(a1 + 416))
      {
        if (v22)
        {
          CGContextSetEDRTargetHeadroom();
          CGDisplayListDrawInContext();
        }
        else
        {
          *(_QWORD *)(a1 + 480) = pthread_self();
          pthread_mutex_unlock(v18);
          a8(*(_QWORD *)(a1 + 416), v43);
          pthread_mutex_lock(v18);
          *(_QWORD *)(a1 + 480) = 0;
        }
        if (*(_QWORD *)(a1 + 416))
        {
          v30 = *(_QWORD *)(a1 + 408);
          v32 = *(_QWORD *)(v30 + 16);
          v31 = *(_QWORD *)(v30 + 24);
          if (*(_QWORD *)(a1 + 400))
          {
            CGContextGetEDRTargetHeadroom();
            *(_DWORD *)(*(_QWORD *)(a1 + 400) + 60) = v33;
          }
          if (v32)
          {
            v34 = *(_QWORD *)(v32 + 24);
            v35 = *(CGContext **)(a1 + 416);
            if ((*(_WORD *)(a1 + 492) & 0x1000) != 0)
            {
              if (v35)
                MEMORY[0x186DBD990](v35, 0x10A0C40A7187C27);
            }
            else
            {
              CAReleaseCachedCGContext(v35);
            }
            *(_QWORD *)(a1 + 416) = 0;
            v36 = (unsigned int *)(v34 + 4);
            v25 = v45;
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 + 1, v36));
          }
          else
          {
            v25 = v45;
            if (v31)
            {
              CAReleaseCachedCGContext(*(CGContext **)(a1 + 416));
              *(_QWORD *)(a1 + 416) = 0;
              *(_WORD *)(a1 + 492) |= 0x800u;
            }
          }
        }
      }
    }
    v26 = *(_QWORD *)(a1 + 408);
    goto LABEL_41;
  }
  if ((a5 & 2) != 0 || BYTE9(v49))
  {
    CABackingStoreReleaseImages((CABackingStore *)a1);
    CABackingStoreDeleteBuffer(*(_QWORD **)(a1 + 400));
    *(_BYTE *)(*(_QWORD *)(a1 + 400) + 65) = 1;
  }
  CACGContextEvaluator::~CACGContextEvaluator((CGColorSpaceRef *)v46);
  return pthread_mutex_unlock(v18);
}

void CABackingStoreReleaseImages(CABackingStore *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  CGImage *v6;

  v2 = (unsigned int *)*((_QWORD *)a1 + 53);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    *((_QWORD *)a1 + 53) = 0;
  }
  v6 = (CGImage *)*((_QWORD *)a1 + 54);
  if (v6)
  {
    CGImageRelease(v6);
    *((_QWORD *)a1 + 54) = 0;
  }
}

void CACGContextEvaluator::~CACGContextEvaluator(CGColorSpaceRef *this)
{
  uint64_t i;

  CGColorSpaceRelease(this[3]);
  CGDisplayListRelease();
  CGContextRelease(this[5]);
  CGColorRelease(this[8]);
  CGContextGetDelegate();
  for (i = 0; i != 384; i += 16)
    CGContextDelegateSetCallback();
  CGContextRelease(this[7]);
}

void CACGContextEvaluator::CACGContextEvaluator(CACGContextEvaluator *this, uint64_t a2, uint64_t a3, CGColorSpace *a4)
{
  uint64_t Delegate;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = a4;
  *((_QWORD *)this + 3) = CAColorSpaceCreateExtended(a4);
  *((_QWORD *)this + 4) = CGDisplayListCreateWithRect();
  *((_QWORD *)this + 5) = CGDisplayListContextCreate();
  Delegate = CGContextGetDelegate();
  *((_DWORD *)this + 21) = 0;
  *((_QWORD *)this + 6) = Delegate;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_WORD *)this + 40) = 0;
  CGContextDelegateCreate();
  CGContextDelegateSetCallbacks();
  *((_QWORD *)this + 7) = CGContextCreateWithDelegate();
  CGContextDelegateRelease();
}

void CAReleaseCachedCGContext(CGContext *a1)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  __IOSurface *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  os_unfair_lock_lock((os_unfair_lock_t)&context_lock);
  v2 = &context_list;
  do
  {
    v2 = (uint64_t *)*v2;
    if (!v2)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&context_lock);
      CGContextRelease(a1);
      return;
    }
  }
  while ((CGContext *)v2[2] != a1);
  os_unfair_lock_unlock((os_unfair_lock_t)&context_lock);
  v3 = v2[7];
  if (v3)
  {
    v4 = *(unsigned int **)(v3 + 336);
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        (**(void (***)(unsigned int *))v4)(v4);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
      }
      *(_QWORD *)(v3 + 336) = 0;
    }
  }
  v8 = (__IOSurface *)v2[6];
  if (v8)
  {
    IOSurfaceUnlock(v8, 0, 0);
    CFRelease((CFTypeRef)v2[6]);
    v2[6] = 0;
  }
  v9 = (unsigned int *)v2[5];
  if (v9)
  {
    v10 = *((_QWORD *)v9 + 9);
    if (v10)
      CA::CG::Queue::flush(v10, 3, 0);
    v11 = v9 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      (**(void (***)(unsigned int *))v9)(v9);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
    }
    v2[5] = 0;
  }
  CGContextResetState();
  os_unfair_lock_lock((os_unfair_lock_t)&context_lock);
  *((_BYTE *)v2 + 64) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)&context_lock);
}

uint64_t CABackingStorePrepareUpdates_(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t this, unsigned int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  __int16 v19;
  __int16 v20;
  BOOL v21;
  __int16 v22;
  uint64_t v23;
  double v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v29;
  unint64_t v30;
  __int16 v31;
  char v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  double v47;
  unsigned int v48;
  double v49;
  uint64_t v50;
  _QWORD *v51;
  CA::Render::Shmem *v52;
  os_unfair_lock_s *v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  int v62;
  _DWORD *v63;
  BOOL v66;
  BOOL v67;
  BOOL v68;
  _BOOL4 v69;
  char v70;
  double v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t v77;
  CGColorSpace *v78;
  unsigned int v79;
  const __CFString *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  __IOSurface *iosurface;
  __IOSurface *v89;
  malloc_zone_t *malloc_zone;
  CA::CG::IOSurfaceDrawable *v91;
  int v92;
  unsigned int v93;
  unint64_t v94;
  CGColorSpace *v95;
  CGColorSpaceRef v96;
  uint64_t v97;
  _QWORD *i;
  unsigned int v99;
  _QWORD *v100;
  int v101;
  uint64_t v103;
  NSObject *v104;
  _QWORD *v106;
  CGColorSpace *v107;
  char v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  CA::Render *v113;
  unint64_t v114;
  CA::Render *v115;
  unint64_t v117;
  __int128 buf;
  double v119;
  __int128 v120;
  double v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  v14 = *(_WORD *)(a1 + 492);
  v16 = *(_QWORD *)(a1 + 144);
  v15 = *(_QWORD *)(a1 + 152);
  v17 = v16 == a2 && v15 == a3;
  v117 = a2;
  if (v17)
  {
    v23 = 1;
    if ((a5 & 0x10) == 0 && (*(_WORD *)(a1 + 492) & 0x400) == 0)
    {
      if ((*(_WORD *)(a1 + 492) & 0x200) != 0 || !*(_QWORD *)(a1 + 440))
        return 0;
      CGSBoundingShapeGetRegion();
      if ((a5 & 0x80) != 0)
      {
        v119 = 0.0;
        buf = 0x3FF0000000000000uLL;
        v120 = xmmword_18474DFF0;
        v24 = (double)a3;
        v121 = (double)a3;
        CGSTransformRegion();
        CGSReleaseRegion();
      }
      else
      {
        v24 = (double)a3;
      }
      buf = 0uLL;
      v119 = (double)v117;
      *(double *)&v120 = v24;
      v23 = CGSRectInRegion();
      if ((v23 & 1) == 0)
      {
        CGSIntersectRegionWithRect();
        if (CGSRegionIsEmpty())
          CGSReleaseRegion();
      }
      CGSReleaseRegion();
      a2 = v117;
      if ((v23 & 1) == 0)
        return 0;
    }
  }
  else
  {
    v18 = v16 == a2 || v16 == 0;
    v19 = v14 & 0x2000;
    if (!v18)
      v19 = 0x2000;
    v20 = v19 | v14 & 0x9FFF;
    v21 = v15 == a3 || v15 == 0;
    v22 = v14 & 0x4000;
    if (!v21)
      v22 = 0x4000;
    *(_WORD *)(a1 + 492) = v22 | v20;
    *(_QWORD *)(a1 + 144) = a2;
    *(_QWORD *)(a1 + 152) = a3;
    v23 = 1;
  }
  if ((a5 & 0x100) != 0)
  {
    if (a6)
      v26 = 0;
    else
      v26 = a7 == 0;
    v25 = !v26;
  }
  else
  {
    v25 = 0;
  }
  if ((a5 & 0x204) != 0)
    v27 = 0;
  else
    v27 = v25;
  v29 = a2 >> 6 < 0x7F && a3 >> 6 < 0x7F;
  {
    LODWORD(a2) = v117;
  }
    && CA::Render::format_rowbytes((CA::Render *)this, a2) > v30)
  {
    v29 = 0;
  }
  v111 = v30;
  v31 = *(_WORD *)(a1 + 492);
  v32 = !v29;
  if ((v32 & 1) != 0)
  {
    v33 = v117;
  }
  else
  {
    v33 = v117;
    if ((*(_WORD *)(a1 + 492) & 0x2000) != 0)
    {
      if (this > 0x25)
        v34 = 0;
      else
        v34 = dword_184750480[this];
      v35 = v34;
      v36 = CA::Render::format_rowbytes((CA::Render *)this, (v117 + ((a1 >> 4) & 0x1F) + 31) & 0xFFFFFFE0);
      if (v36 / v35 >= v117 + 0x7FFF)
        v33 = v117 + 0x7FFF;
      else
        v33 = v36 / v35;
      v31 = *(_WORD *)(a1 + 492);
    }
  }
  if ((v31 & 0x4000) != 0)
    v37 = v32;
  else
    v37 = 1;
  v114 = a3;
  if ((v37 & 1) == 0)
    v114 = (a3 + ((a1 >> 4) & 0x1F) + 31) & 0xFFFFFFFFFFFFFFE0;
  v113 = (CA::Render *)v33;
  if (v27 && CAIOSurfaceIsAcceleratable(a7, v33, v114, this))
  {
    v38 = 1;
  }
  else
  {
    v38 = 0;
    if (this <= 0x23 && ((0x1FFFFFF2FuLL >> this) & 1) == 0)
    {
      v38 = 0;
      if (((0xC99B4EB03uLL >> this) & 1) != 0)
        this = 13;
      else
        this = 17;
    }
  }
  v39 = *(_QWORD *)(a1 + 160);
  if ((this - 8) > 0x16)
    v40 = 3;
  else
    v40 = dword_1847505A8[(this - 8)];
  if (CGColorSpaceGetNumberOfComponents(*(CGColorSpaceRef *)(a1 + 160)) != v40)
    v39 = CA::Render::format_default_colorspace((CA::Render *)this);
  v115 = (CA::Render *)this;
  if (((this < 0x1D) & (0x17826000u >> this)) != 0 || (this - 33) <= 2)
  {
    v42 = CAGetColorSpace(0x1Du);
    v41 = v117;
    if (v39 == v42)
    {
      v43 = CAGetColorSpace(0x1Cu);
      v41 = v117;
      v39 = v43;
    }
  }
  else
  {
    v41 = v117;
  }
  v107 = (CGColorSpace *)v39;
  v108 = 0;
  v109 = a5;
  v44 = a1 + 400;
  v110 = a1;
  v45 = *(_QWORD *)(a1 + 400);
  v46 = (v38 ^ 1) & (a5 >> 2);
  v47 = (double)v41;
  v48 = a3;
  v49 = (double)a3 * (double)v41;
  v112 = v45;
  v50 = v45;
  v106 = (_QWORD *)v44;
  do
  {
    while (1)
    {
      v51 = (_QWORD *)v44;
      v44 = v50;
      v52 = *(CA::Render::Shmem **)(v50 + 16);
      if (v52)
      {
        if ((CA::Render::Shmem::set_volatile(v52, 0, 0) & 1) == 0)
        {
          LOBYTE(v23) = (v44 == v112) | v23;
          goto LABEL_151;
        }
      }
      else
      {
        v53 = *(os_unfair_lock_s **)(v50 + 24);
        if (!v53)
          goto LABEL_152;
        if ((CA::CG::AccelDrawable::set_volatile(v53, 0) & 1) == 0)
        {
          if (*(_QWORD *)(v44 + 40))
          {
            CGSReleaseRegion();
            *(_QWORD *)(v44 + 40) = 0;
          }
          v23 = (v44 == v112) | v23;
          v108 = 1;
        }
      }
      v54 = *(_QWORD *)(v44 + 16);
      if (v54)
      {
        v55 = v23;
        v56 = *(_DWORD **)(v54 + 24);
        v57 = v56[3];
        v58 = v56[4];
        v59 = v56[5];
        if (v58 <= 1)
          v60 = 1;
        else
          v60 = v56[4];
        v61 = CA::Render::format_rowbytes((CA::Render *)v56[3], v60);
        v62 = *(_DWORD *)(*(_QWORD *)(v54 + 24) + 32) > 1u;
      }
      else
      {
        v63 = *(_DWORD **)(v44 + 24);
        if (!v63)
          goto LABEL_152;
        v55 = v23;
        v61 = 0;
        v62 = 0;
        v57 = v63[4];
        v58 = v63[11];
        v59 = v63[12];
      }
      v17 = v57 == (_DWORD)v115;
      v48 = a3;
      v66 = v17 && v58 >= v117 && v59 >= a3 && v62 == v46;
      if (!v66 || (!((v58 - v117) >> 15) ? (v67 = (v59 - a3) >> 15 == 0) : (v67 = 0), !v67))
      {
LABEL_150:
        LOBYTE(v23) = (v44 == v112) | v55;
LABEL_151:
        CABackingStoreDeleteBuffer((_QWORD *)v44);
LABEL_152:
        v73 = v44;
        goto LABEL_153;
      }
      v68 = v113 == (CA::Render *)v58 && v114 == v59;
      v69 = v68;
      v70 = v68 ? 1 : v32;
      if ((v70 & 1) != 0)
      {
        if (!v69)
          goto LABEL_150;
      }
      else
      {
        if (v111 && v61 > v111)
          goto LABEL_150;
        if (initialized[0] != -1)
          dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
        if ((double)*(float *)&xmmword_1ECDC69B8 * -0.01 + 1.0 > 1.0
          || (v71 = 0.0, (double)*(float *)&xmmword_1ECDC69B8 * -0.01 + 1.0 >= 0.0))
        {
          v71 = 1.0;
          if ((double)*(float *)&xmmword_1ECDC69B8 * -0.01 + 1.0 <= 1.0)
            v71 = (double)*(float *)&xmmword_1ECDC69B8 * -0.01 + 1.0;
        }
        if (v49 < (double)v59 * (double)v58 * v71)
          goto LABEL_150;
      }
      v72 = *(_QWORD *)(v44 + 16) ? v38 : 0;
      v23 = v55;
      if ((v72 & 1) != 0 || ((*(_QWORD *)(v44 + 24) != 0) & ~v38) != 0)
        break;
      {
        if (v44 == v112)
        {
          v73 = v112;
          goto LABEL_153;
        }
        if (!*(_QWORD *)v44 || (CABackingStoreSynchronize(v110, a8, *(unsigned int *)(v44 + 56), 0) & 1) != 0)
          goto LABEL_152;
        break;
      }
      v50 = *(_QWORD *)v44;
      if (!*(_QWORD *)v44)
      {
        CABackingStoreSynchronize(v110, a8, (*(_DWORD *)(v44 + 56) + 1), 30);
          goto LABEL_152;
        break;
      }
    }
    v50 = *(_QWORD *)v44;
  }
  while (*(_QWORD *)v44);
  LOBYTE(v23) = (v44 == v112) | v55;
  CABackingStoreDeleteBuffer((_QWORD *)v44);
  if (!BYTE13(ca_debug_options))
    goto LABEL_152;
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v104 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v110;
      _os_log_impl(&dword_184457000, v104, OS_LOG_TYPE_DEFAULT, "CoreAnimation: triple buffered backing store %p\n", (uint8_t *)&buf, 0xCu);
    }
  }
  v73 = v44;
  v48 = a3;
LABEL_153:
  if (v73 != *v106)
  {
    *v51 = *(_QWORD *)v73;
    *(_QWORD *)v73 = *v106;
    *v106 = v73;
  }
  if (v38)
    v74 = *(_QWORD *)(v44 + 16);
  else
    v74 = *(_QWORD *)(v73 + 24);
  v75 = v109;
  if (v74)
  {
    LOBYTE(v23) = (v73 == v112) | v23;
    CABackingStoreDeleteBuffer((_QWORD *)v73);
  }
  v76 = *(_QWORD *)(v44 + 16);
  v77 = *(_QWORD *)(v73 + 24);
  *(_BYTE *)(v73 + 64) = (v109 & 0x80) != 0;
  *(_BYTE *)(v73 + 65) = 0;
  if (!(v76 | v77))
  {
    CABackingStoreDeleteBuffer((_QWORD *)v73);
    if ((v109 & 4) != 0 && ((v81 = v114, v113 > 8) || v114 >= 9))
    {
      v82 = 1;
      v83 = v113;
      do
      {
        do
        {
          v84 = v83;
          v85 = v81;
          ++v82;
          v83 >>= 1;
          v81 >>= 1;
        }
        while (v84 > 0x11);
      }
      while (v85 > 0x11);
    }
    else
    {
      v82 = 1;
    }
    LOBYTE(v23) = (v73 == v112) | v23;
    if (v38)
    {
      v86 = v114;
      v87 = v113;
      iosurface = CA::Render::create_iosurface(v115, v113, v114, CFSTR("CA Whippet Drawable"), v79, v80);
      if (iosurface)
      {
        v89 = iosurface;
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        v91 = (CA::CG::IOSurfaceDrawable *)malloc_type_zone_malloc(malloc_zone, 0x70uLL, 0x8BB15036uLL);
        v78 = v107;
        if (v91)
        {
          if (v115 > 0x23)
            v92 = 0;
          else
            v92 = dword_184750360[v115];
          v91 = CA::CG::IOSurfaceDrawable::IOSurfaceDrawable(v91, v89, (int)v115, v92, v107, 0, 0, v117, a3);
        }
        *(_QWORD *)(v73 + 24) = v91;
        CFRelease(v89);
        v76 = 0;
        v77 = *(_QWORD *)(v73 + 24);
        v108 = 1;
        v48 = a3;
LABEL_191:
        if (v76 | v77)
          goto LABEL_192;
        return 0;
      }
      if (((0xC99B4EB03uLL >> (char)v115) & 1) != 0)
        v93 = 13;
      else
        v93 = 17;
      if (((0x1FFFFFF2FuLL >> (char)v115) & 1) != 0)
        v93 = v115;
      if (v115 <= 0x23)
        v94 = v93;
      else
        v94 = v115;
      v115 = (CA::Render *)v94;
      v48 = a3;
    }
    else
    {
      v87 = v113;
      v86 = v114;
    }
    v76 = (unint64_t)CA::Render::Shmem::new_bitmap(v115, v87, v86, v117, v48, v82);
    v77 = 0;
    *(_QWORD *)(v44 + 16) = v76;
    v75 = v109 & 0xFFFFFFFD;
    v78 = v107;
    goto LABEL_191;
  }
  v78 = v107;
LABEL_192:
  v95 = *(CGColorSpace **)(v73 + 8);
  if (v95 != v78)
  {
    CGColorSpaceRelease(v95);
    v96 = CGColorSpaceRetain(v78);
    *(_QWORD *)(v73 + 8) = v96;
    if (v96 != *(CGColorSpaceRef *)(v112 + 8))
    {
      if (*(_QWORD *)(v73 + 40))
      {
        CGSReleaseRegion();
        *(_QWORD *)(v73 + 40) = 0;
      }
    }
  }
  if (*(_QWORD *)(v110 + 440))
    CGSBoundingShapeReset();
  *(_WORD *)(v110 + 492) = *(_WORD *)(v110 + 492) & 0xF8FF | 0x200;
  v97 = *(_QWORD *)(v73 + 40);
  for (i = *(_QWORD **)(v110 + 400); i; i = (_QWORD *)*i)
  {
    if (i == (_QWORD *)v73)
    {
      CGSNewEmptyRegion();
    }
    else if (i[5])
    {
      if ((v23 & 1) != 0)
      {
        CGSReleaseRegion();
        i[5] = 0;
      }
      else
      {
        *(_QWORD *)&buf = 0;
        CGSUnionRegion();
        CGSReleaseRegion();
        i[5] = buf;
      }
    }
  }
  v99 = v75;
  if ((v75 & 0x10) != 0)
  {
    buf = 0uLL;
    v119 = v47;
    *(double *)&v120 = (double)a3;
    CGSNewRegionWithRect();
    v100 = (_QWORD *)v110;
    v101 = (int)v115;
  }
  else
  {
    v100 = (_QWORD *)v110;
    v101 = (int)v115;
    if (!(v23 & 1 | (v73 == v112)))
    {
      if (v97)
      {
        CGSDiffRegion();
      }
      else
      {
        buf = 0uLL;
        v119 = v47;
        *(double *)&v120 = (double)a3;
        CGSNewRegionWithRect();
        CGSDiffRegion();
        CGSReleaseRegion();
      }
      if (CGSRegionIsEmpty())
        CGSReleaseRegion();
    }
  }
  if (v97)
    CGSReleaseRegion();
  if (v76)
  {
    v103 = *(_QWORD *)(v76 + 24);
    *(_DWORD *)(v103 + 24) = v117;
    *(_DWORD *)(v103 + 28) = v48;
    if ((v99 & 2) == 0)
      goto LABEL_222;
    CA::Render::ShmemBitmap::fill_pixels(v103, 0, 0);
    v99 &= ~2u;
    if ((v23 & 1) == 0)
      goto LABEL_225;
LABEL_223:
    v100[56] = 0;
    CGSReleaseRegion();
    v100[58] = 0;
  }
  else
  {
    if (v77)
    {
      *(_DWORD *)(v77 + 52) = v117;
      *(_DWORD *)(v77 + 56) = v48;
    }
LABEL_222:
    if ((v23 & 1) != 0)
      goto LABEL_223;
LABEL_225:
    v100[56] = 0;
    if (!v100[58])
      CGSNewEmptyRegion();
    if ((v99 & 0x80) != 0)
    {
      v119 = 0.0;
      buf = 0x3FF0000000000000uLL;
      v120 = xmmword_18474DFF0;
      v121 = (double)a3;
      CGSTransformRegion();
      CGSUnionRegion();
      CGSReleaseRegion();
    }
    else
    {
      CGSUnionRegion();
    }
    CGSReleaseRegion();
    v100[58] = 0;
  }
  *(_QWORD *)a9 = v112;
  *(_DWORD *)(a9 + 8) = v101;
  *(_DWORD *)(a9 + 12) = v99;
  *(_BYTE *)(a9 + 16) = v108 & 1;
  v100[57] = 0;
  v100[51] = v73;
  return 1;
}

CA::Render::Texture *CA::Render::Image::decode(CA::Render::Image *this, CA::Render::Decoder *a2)
{
  int v3;
  CA::Render::Image *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  double v8;
  CA::Render::Texture *v9;
  unsigned int v11;
  uint64_t i;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  const unint64_t *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  CGColorSpace *v29;
  CGColorSpace *v30;
  void (*v31)(const void *, void *);
  void *v32;
  NSObject *v33;
  NSObject *v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  void *v39;
  void (*v40)(const void *, void *);
  void *v41;
  unint64_t v42;
  uint8_t buf[32];
  __int128 v44;
  CGColorSpaceRef space[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  unint64_t v53[36];

  v53[33] = *MEMORY[0x1E0C80C00];
  v3 = CA::Render::Decoder::decode_int32(this);
  v4 = (CA::Render::Image *)CA::Render::Decoder::decode_int8(this);
  v5 = CA::Render::Decoder::decode_int8(this);
  v6 = CA::Render::Decoder::decode_int32(this);
  v7 = CA::Render::Decoder::decode_int32(this);
  v42 = 0;
  memset(v53, 0, 256);
  if (v5 > 0x20)
    goto LABEL_2;
  v11 = v7;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
      v53[i] = CA::Render::Decoder::decode_size_t(this);
    v13 = v53[0];
    if (!is_mul_ok(v53[0], v11) || (v14 = v53[0] * v11) == 0)
    {
LABEL_21:
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v33 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = v13;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v5;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v11;
          _os_log_impl(&dword_184457000, v33, OS_LOG_TYPE_ERROR, "Failed to validate rowbytes: %zu, levels: %u height: %u", buf, 0x18u);
        }
      }
      goto LABEL_2;
    }
    v15 = 1;
    LODWORD(v16) = v11;
    while (v5 != v15)
    {
      v17 = v15;
      if (v16 <= 1)
        v16 = 1;
      else
        v16 = v16 >> 1;
      v18 = v53[v15];
      if (is_mul_ok(v18, v16))
      {
        v19 = v18 * v16;
        if (v18 * v16)
        {
          v15 = v17 + 1;
          v20 = __CFADD__(v14, v19);
          v14 += v19;
          if (!v20)
            continue;
        }
      }
      if (v17 >= v5)
        break;
      goto LABEL_21;
    }
  }
  if (!CA::Render::Decoder::decode_int8(this))
  {
    v40 = 0;
    v41 = 0;
    v29 = (CGColorSpace *)CA::Render::Decoder::decode_data_async(this, &v42, (void (__cdecl **)(void *))&v40, &v41);
    if (v29)
    {
      v30 = v29;
      v31 = v40;
      v32 = v41;
      v9 = CA::Render::Image::new_image(v4, v6, v11, v5, 0, v29, v53, (const unint64_t *)v40, (void (*)(const void *, void *))v41, v39);
      if (v9 || !v31)
        goto LABEL_45;
      v31(v30, v32);
    }
    else if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v34 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v42;
        _os_log_impl(&dword_184457000, v34, OS_LOG_TYPE_ERROR, "Failed to decode_data_async, size: %zu", buf, 0xCu);
      }
    }
    v9 = 0;
    goto LABEL_45;
  }
  v21 = CA::Render::Decoder::decode_object(this, 47);
  if (!v21)
  {
    CA::Render::Decoder::set_fatal_error(this, "Failed to decode shmem.");
    goto LABEL_2;
  }
  v23 = v21;
  v42 = *(_QWORD *)(v21 + 16);
  v9 = CA::Render::Image::new_image(v4, v6, v11, v5, 0, (CGColorSpace **)v21, (CA::Render::Shmem *)v53, v22);
  if ((*(_BYTE *)(v23 + 13) & 8) != 0 && *(_QWORD *)(v23 + 16) >= 0x24uLL)
  {
    v24 = *(unsigned int **)(v23 + 24);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
  }
  v26 = (unsigned int *)(v23 + 8);
  do
  {
    v27 = __ldaxr(v26);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, v26));
  if (!v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
LABEL_45:
  if (v9)
  {
    v35 = CA::Render::Image::data_size(v9);
    if (v35 <= v42)
    {
      *((_DWORD *)v9 + 3) |= (v3 << 8) & 0xFEFFFFFF;
      CA::Render::Texture::decode(v9, this);
      return v9;
    }
    CA::Render::Decoder::set_fatal_error(this, "Failed to re-create data_size, encoded: %zu,calculated: %zu", v42, v35);
    v36 = (unsigned int *)((char *)v9 + 8);
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
      (*(void (**)(CA::Render::Texture *))(*(_QWORD *)v9 + 16))(v9);
  }
LABEL_2:
  v52 = 0;
  v50 = 0u;
  v51 = 0u;
  v49 = 0u;
  v47 = 0u;
  v48 = 0u;
  *(_OWORD *)space = 0u;
  v46 = 0u;
  v44 = 0u;
  memset(buf, 0, sizeof(buf));
  CA::Render::Texture::Texture((CA::Render::Texture *)buf, 0, 0);
  buf[12] = 23;
  ++dword_1ECDC7C84;
  *(_QWORD *)buf = off_1E15988C8;
  DWORD1(v51) = 0;
  WORD4(v51) = 0;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  if (space[0])
  {
    CGColorSpaceRelease(space[0]);
    space[0] = CGColorSpaceRetain(0);
  }
  DWORD1(v51) = 1;
  v8 = CA::Render::Texture::decode((CA::Render::Texture *)buf, this);
  CA::Render::Decoder::set_fatal_error(this, "Image failed to decode!", v8);
  CA::Render::Image::~Image((CA::Render::Image *)buf);
  return 0;
}

CA::Render::Texture *CA::Render::Shmem::copy_image(CA::Render::Shmem *this, CGColorSpace *a2)
{
  unint64_t v2;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  CA::Render *v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  const char *v22;
  NSObject *v23;
  uint32_t v24;
  uint64_t v25;
  CGColorSpace *v26;
  CA::Render::Texture *v27;
  CA::Render::Texture *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v35;
  void *v36;
  char *v37;
  CGColorSpace *v38;
  uint64_t v39;
  uint64_t v40;
  uint8_t buf[4];
  _BYTE v42[10];
  _BYTE v43[10];
  __int16 v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 2);
  if (v2 < 0x24 || (*((_BYTE *)this + 13) & 4) != 0)
    return 0;
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  v5 = v4[8];
  v39 = v4[4];
  v40 = v4[5];
  if (v5 >= 0x21)
  {
    if (x_log_hook_p())
    {
LABEL_5:
      x_log_();
      return 0;
    }
    v21 = x_log_category_render;
    if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)v42 = v39;
    *(_WORD *)&v42[4] = 1024;
    *(_DWORD *)&v42[6] = v40;
    *(_WORD *)v43 = 1024;
    *(_DWORD *)&v43[2] = v5;
    v22 = "Bogus ShmemBitmap : [%u x %u], %u levels";
    v23 = v21;
    v24 = 20;
LABEL_44:
    _os_log_impl(&dword_184457000, v23, OS_LOG_TYPE_ERROR, v22, buf, v24);
    return 0;
  }
  v6 = (int)v4[2];
  v7 = (char *)v4 + v6;
  if ((v6 & 0x80000000) != 0 || (v8 = (char *)v4 + v2, v8 < v7))
  {
    if (x_log_hook_p())
      goto LABEL_5;
    v25 = x_log_category_render;
    if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)v42 = v7;
    *(_WORD *)&v42[8] = 2048;
    *(_QWORD *)v43 = v4;
    v22 = "Bogus ShmemBitmap data pointer: %p, Shmem data pointer: %zu";
    v23 = v25;
    goto LABEL_43;
  }
  v37 = v8;
  v38 = (CGColorSpace *)((char *)v4 + v6);
  v10 = (CA::Render *)v4[3];
  MEMORY[0x1E0C80A78](this);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFF0);
  bzero(v12, v11);
  if ((_DWORD)v5)
  {
    v13 = 0;
    v14 = 0;
    while (1)
    {
      v15 = v39 >> v13 <= 1 ? 1 : v39 >> v13;
      v16 = v40 >> v13 <= 1 ? 1 : v40 >> v13;
      v17 = CA::Render::format_rowbytes(v10, v15);
      v18 = v17;
      *(_QWORD *)&v12[8 * v13] = v17;
      if (!is_mul_ok(v17, v16))
        break;
      v19 = v17 * v16;
      if (!(v17 * v16))
        break;
      v20 = __CFADD__(v14, v19);
      v14 += v19;
      if (v20)
        break;
      if (v5 == ++v13)
        goto LABEL_29;
    }
    if (x_log_hook_p())
      goto LABEL_5;
    v32 = x_log_category_render;
    if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)v42 = v18;
    *(_WORD *)&v42[8] = 1024;
    *(_DWORD *)v43 = v39;
    *(_WORD *)&v43[4] = 1024;
    *(_DWORD *)&v43[6] = v40;
    v44 = 1024;
    v45 = v13;
    v22 = "Bogus ShmemBitmap rowbytes: %zu, width: %u, height: %u, level: %u";
    v23 = v32;
    v24 = 30;
    goto LABEL_44;
  }
  v14 = 0;
LABEL_29:
  v26 = v38;
  if (__CFADD__(v38, v14) || (char *)v38 + v14 > v37)
  {
    if (x_log_hook_p())
      goto LABEL_5;
    v33 = x_log_category_render;
    if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)v42 = v26;
    *(_WORD *)&v42[8] = 2048;
    *(_QWORD *)v43 = v14;
    v22 = "Bogus ShmemBitmap data pointer: %p, total size: %zu";
    v23 = v33;
LABEL_43:
    v24 = 22;
    goto LABEL_44;
  }
  v27 = CA::Render::Image::new_image(v10, v39, v40, v5, a2, v38, (unint64_t *)v12, (const unint64_t *)CA::Render::release_shmem_bitmap, (void (*)(const void *, void *))this, v36);
  v28 = v27;
  if (v27)
  {
    do
      v29 = __ldaxr(v4);
    while (__stlxr(v29 + 1, v4));
    v30 = (unsigned int *)((char *)this + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
    if (!v31)
    {
      do
        v35 = __ldaxr(v30);
      while (__stlxr(v35 - 1, v30));
    }
    CA::Render::Image::set_shmem(v27, this);
    *((_DWORD *)v28 + 9) = v4[1];
  }
  return v28;
}

unint64_t CA::Render::format_rowbytes(CA::Render *this, unsigned int a2)
{
  unsigned int v3;
  unint64_t result;
  unint64_t v5;

  if (this > 0x25)
    v3 = 0;
  else
    v3 = dword_184750480[this];
  result = v3 * (unint64_t)a2;
  {
                                                                       + 1)
                                                                     - 1)) != 0)
      return v5
    else
  }
  return result;
}

CA::Render::Texture *CA::Render::Image::new_image(CA::Render::Image *this, unsigned int a2, unsigned int a3, unsigned int a4, CGColorSpace *a5, CGColorSpace *a6, unint64_t *a7, const unint64_t *a8, void (*a9)(const void *, void *), void *a10)
{
  CA::Render::Texture *v10;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  unsigned int v28;
  malloc_zone_t *malloc_zone;
  CA::Render::Texture *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;

  v10 = 0;
  if (a4 && a3 && a2 && a7)
  {
    v18 = this;
    v19 = a4;
    if (a6)
    {
      v10 = 0;
      v20 = *a7;
      if (!is_mul_ok(*a7, a3))
        return v10;
      v21 = v20 * a3;
      if (!v21)
        return v10;
      v22 = 1;
      LODWORD(v23) = a3;
      do
      {
        if (a4 == v22)
          goto LABEL_18;
        v24 = v22;
        if (v23 <= 1)
          v23 = 1;
        else
          v23 = v23 >> 1;
        v25 = a7[v22];
        if (!is_mul_ok(v25, v23))
          break;
        v26 = v25 * v23;
        if (!(v25 * v23))
          break;
        v22 = v24 + 1;
        v27 = __CFADD__(v21, v26);
        v21 += v26;
      }
      while (!v27);
      if (v24 < a4)
        return 0;
LABEL_18:
      if (this > 0x25)
        v28 = 0;
      else
        v28 = dword_184750480[this];
      if (v28 * (unint64_t)a2 > v20)
        return 0;
    }
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v10 = (CA::Render::Texture *)malloc_type_zone_malloc(malloc_zone, 8 * v19 + 160, 0x8BB15036uLL);
    if (v10)
    {
      if (a5 && CGColorSpaceIsUncalibrated())
        a5 = 0;
      v30 = CA::Render::Texture::Texture(v10, a2, a3);
      *((_BYTE *)v10 + 12) = 23;
      ++dword_1ECDC7C84;
      *(_QWORD *)v10 = off_1E15988C8;
      *((_QWORD *)v10 + 12) = a6;
      *((_QWORD *)v10 + 13) = a8;
      *((_DWORD *)v10 + 37) = 0;
      *((_QWORD *)v10 + 14) = a9;
      *((_QWORD *)v10 + 15) = 0;
      *((_QWORD *)v10 + 16) = 0;
      *((_QWORD *)v10 + 17) = 0;
      *((_BYTE *)v10 + 152) = v18;
      *((_BYTE *)v10 + 153) = a4;
      CA::Render::Texture::set_colorspace(v30, a5);
      if (((v18 < 0x24) & (0xC99B4EB03uLL >> v18)) != 0)
        v31 = 0;
      else
        v31 = 16;
      if (a3 <= 0x1000 && a2 <= 0x1000 && a4 == 1)
      {
        if (*a7 > 0x8000)
          v32 = v31 << 8;
        else
          v32 = ((v31 & 0x1F) << 8) | 0x40000;
        v33 = v32 | *((_DWORD *)v10 + 3);
      }
      else
      {
        v33 = *((_DWORD *)v10 + 3) | (v31 << 8);
      }
      v34 = 0;
      *((_DWORD *)v10 + 37) = 1;
      *((_DWORD *)v10 + 3) = v33;
      do
      {
        *((_QWORD *)v10 + v34 + 20) = a7[v34];
        ++v34;
      }
      while (v19 != v34);
    }
  }
  return v10;
}

CA::Render::Texture *CA::Render::Texture::Texture(CA::Render::Texture *this, int a2, int a3)
{
  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E15990C0;
  *((_DWORD *)this + 3) = *((unsigned __int8 *)this + 12);
  *((_DWORD *)this + 4) = a2;
  *((_DWORD *)this + 5) = a3;
  *((_DWORD *)this + 8) = 1065353216;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_DWORD *)this + 9) = 1;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)((char *)this + 60) = _Q0;
  if (CADeviceSupportsASTC::once[0] != -1)
    dispatch_once(CADeviceSupportsASTC::once, &__block_literal_global_118);
  if (!CADeviceSupportsASTC::supports_astc)
    *((_DWORD *)this + 3) |= 0x80000u;
  return this;
}

CGColorSpace *CA::Render::Texture::set_colorspace(CA::Render::Texture *this, CGColorSpace *a2)
{
  CGColorSpace *result;

  result = (CGColorSpace *)*((_QWORD *)this + 6);
  if (result != a2)
  {
    CGColorSpaceRelease(result);
    result = CGColorSpaceRetain(a2);
    *((_QWORD *)this + 6) = result;
  }
  return result;
}

CA::Render::Shmem *CA::Render::Image::set_shmem(CA::Render::Image *this, CA::Render::Shmem *a2)
{
  CA::Render::Shmem *result;
  CA::Render::Shmem *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  result = (CA::Render::Shmem *)*((_QWORD *)this + 15);
  if (result != a2)
  {
    v4 = a2;
    if (result)
    {
      v5 = (unsigned int *)((char *)result + 8);
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        result = (CA::Render::Shmem *)(*(uint64_t (**)(CA::Render::Shmem *))(*(_QWORD *)result + 16))(result);
    }
    if (v4)
    {
      v8 = (unsigned int *)((char *)v4 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      if (!v9)
      {
        v4 = 0;
        do
          v10 = __ldaxr(v8);
        while (__stlxr(v10 - 1, v8));
      }
    }
    *((_QWORD *)this + 15) = v4;
  }
  return result;
}

double CA::Render::Texture::decode(CA::Render::Texture *this, CA::Render::Decoder *a2)
{
  int v4;
  unsigned int v5;
  unint64_t v6;
  const CA::Bounds *v7;
  CA::Shape *v8;
  double result;
  malloc_zone_t *malloc_zone;
  _DWORD *v11;
  __int128 __dst;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  CGColorSpaceRelease(*((CGColorSpaceRef *)this + 6));
  *((_QWORD *)this + 6) = CA::Render::Decoder::decode_colorspace(a2);
  *((_DWORD *)this + 8) = CA::Render::Decoder::decode_int32(a2);
  *((_WORD *)this + 12) = CA::Render::Decoder::decode_int16(a2);
  *((_WORD *)this + 13) = CA::Render::Decoder::decode_int16(a2);
  *((_WORD *)this + 14) = CA::Render::Decoder::decode_int16(a2);
  *((_WORD *)this + 15) = CA::Render::Decoder::decode_int16(a2);
  if ((*((_BYTE *)a2 + 18) & 1) != 0)
    goto LABEL_9;
  v4 = CA::Render::Decoder::decode_int32(a2);
  if (v4 == -2)
  {
    LODWORD(__dst) = CA::Render::Decoder::decode_int32(a2);
    DWORD1(__dst) = CA::Render::Decoder::decode_int32(a2);
    DWORD2(__dst) = CA::Render::Decoder::decode_int32(a2);
    HIDWORD(__dst) = CA::Render::Decoder::decode_int32(a2);
    v6 = CA::Shape::new_shape((CA::Shape *)&__dst, v7);
    goto LABEL_10;
  }
  v5 = v4;
  if (!v4)
    goto LABEL_9;
  if (v4 == -1)
  {
    v6 = 1;
    goto LABEL_10;
  }
  if ((v4 - 131073) <= 0xFFFE000B)
  {
    CA::Render::Decoder::set_fatal_error(a2, "%s - size = %d", "decode_shape", v4);
LABEL_9:
    v6 = 0;
    goto LABEL_10;
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v11 = malloc_type_zone_malloc(malloc_zone, 4 * v5, 0x8BB15036uLL);
  v6 = (unint64_t)v11;
  if (v11)
  {
    *v11 = 1;
    v11[1] = v5;
    v11[2] = v5;
    CA::Render::Decoder::decode_bytes(a2, v11 + 3, 4 * (v5 - 3));
  }
  else
  {
    CA::Render::Decoder::set_fatal_error(a2, "%s - failed shape allocation for size %d", "decode_shape", v5);
  }
LABEL_10:
  v8 = (CA::Shape *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v6;
  if (v8)
    CA::Shape::unref(v8);
  *((_DWORD *)this + 14) = CA::Render::Decoder::decode_int32(a2);
  if ((*((_BYTE *)this + 14) & 0x10) != 0)
  {
    __dst = 0uLL;
    CA::Render::Decoder::decode_bytes(a2, &__dst, 0x10uLL);
    result = *(double *)&__dst;
    *(_OWORD *)((char *)this + 60) = __dst;
  }
  return result;
}

uint64_t CA::Render::Decoder::decode_int16(CA::Render::Decoder *this)
{
  unsigned __int16 *v1;
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)*((_QWORD *)this + 4);
  v2 = (unsigned __int16 *)*((_QWORD *)this + 5);
  v3 = v1 + 1;
  if (v1 + 1 <= v2)
  {
    v4 = *v1;
    *((_QWORD *)this + 4) = v3;
  }
  else
  {
    CA::Render::Decoder::set_fatal_error(this, "%s - _buffer_point = %p, _buffer_end = %p", "decode_int16", *((const void **)this + 4), v2);
    return 0;
  }
  return v4;
}

CGColorSpaceRef CA::Render::Decoder::decode_colorspace(CA::Render::Decoder *this)
{
  char v2;
  CGColorSpaceRef v3;
  unsigned int v4;
  CGColorSpace *v5;
  __CFArray *v6;
  __CFArray *v7;
  CFTypeID v8;
  CFTypeID v9;
  uint64_t v10;
  __CFArray *v12;
  CGColorSpaceRef v13;
  NSObject *v14;
  uint8_t buf[4];
  CFTypeID v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 18) & 1) != 0)
    return 0;
  if (CA::Render::Decoder::decode_colorspace(void)::once != -1)
    dispatch_once(&CA::Render::Decoder::decode_colorspace(void)::once, &__block_literal_global_45_11153);
  v2 = CA::Render::Decoder::decode_int8(this);
  v3 = 0;
  switch(v2)
  {
    case 0:
      return v3;
    case 1:
      v4 = CA::Render::Decoder::decode_int8(this);
      if (v4 >= 0x20)
      {
        CA::Render::Decoder::set_fatal_error(this, "%s - enum %u out of range of %u", "decode_int8_enum", v4, 32);
        v4 = 0;
      }
      v5 = (CGColorSpace *)CAGetColorSpace(v4);
      v3 = v5;
      if (v5)
        CFRetain(v5);
      return v3;
    case 2:
      v6 = CA::Render::Decoder::decode_cfobject(this);
      if (!v6)
        goto LABEL_24;
      v7 = v6;
      v8 = CFGetTypeID(v6);
      v9 = v8;
      v10 = 0;
      break;
    case 3:
      return CGColorSpaceRetain(*(CGColorSpaceRef *)(*((_QWORD *)this + 9) + 448));
    case 4:
      CFStringGetTypeID();
      v12 = CA::Render::Decoder::decode_cfobject(this);
      v3 = v12;
      if (!v12)
        return v3;
      v13 = CGColorSpaceCreateWithName((CFStringRef)v12);
      CFRelease(v3);
      return v13;
    default:
      CA::Render::Decoder::set_fatal_error(this, "%s - code = %d", "decode_colorspace", v2);
      return 0;
  }
  while (v8 != CA::Render::Decoder::decode_colorspace(void)::types[v10])
  {
    if (++v10 == 3)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v14 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          v16 = v9;
          _os_log_impl(&dword_184457000, v14, OS_LOG_TYPE_ERROR, "decoded cfobject of unexpected type: %lu", buf, 0xCu);
        }
      }
      CFRelease(v7);
LABEL_24:
      v7 = (__CFArray *)*MEMORY[0x1E0C9B0D0];
      break;
    }
  }
  if (!v7)
    return 0;
  v3 = CGColorSpaceCreateWithPropertyList(v7);
  CFRelease(v7);
  return v3;
}

CA::Render::Texture *CA::Render::Image::new_image(CA::Render::Image *this, unsigned int a2, unsigned int a3, unsigned int a4, CGColorSpace *a5, CGColorSpace **a6, CA::Render::Shmem *a7, const unint64_t *a8)
{
  CGColorSpace **v8;
  CA::Render::Texture *v9;
  CA::Render::Texture *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v18;
  void *v19;

  v8 = a6;
  if ((*((_BYTE *)a6 + 13) & 8) != 0)
    return CA::Render::Shmem::copy_image((CA::Render::Shmem *)a6, a5);
  v9 = CA::Render::Image::new_image(this, a2, a3, a4, a5, a6[3], (unint64_t *)a7, 0, 0, v19);
  v10 = v9;
  if (v9)
  {
    v11 = (unsigned int *)*((_QWORD *)v9 + 15);
    if (v11 != (unsigned int *)v8)
    {
      if (v11)
      {
        v12 = v11 + 2;
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
      }
      v15 = (unsigned int *)(v8 + 1);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
      if (!v16)
      {
        v8 = 0;
        do
          v18 = __ldaxr(v15);
        while (__stlxr(v18 - 1, v15));
      }
      *((_QWORD *)v10 + 15) = v8;
    }
  }
  return v10;
}

void CABackingStoreDeleteBuffer(_QWORD *a1)
{
  CGColorSpace *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  CGColor *v11;

  v2 = (CGColorSpace *)a1[1];
  if (v2)
  {
    CGColorSpaceRelease(v2);
    a1[1] = 0;
  }
  v3 = (unsigned int *)a1[2];
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    a1[2] = 0;
  }
  v7 = (unsigned int *)a1[3];
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      (**(void (***)(unsigned int *))v7)(v7);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
    }
    a1[3] = 0;
  }
  a1[7] = 0;
  if (a1[5])
  {
    CGSReleaseRegion();
    a1[5] = 0;
  }
  v11 = (CGColor *)a1[4];
  if (v11)
  {
    CGColorRelease(v11);
    a1[4] = 0;
  }
}

_DWORD *CA::Render::Shmem::new_bitmap(CA::Render::Shmem *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  _DWORD *v23;
  unsigned int v24;
  _DWORD *v25;
  unsigned int v26;
  uint64_t v27;
  int *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  const char *v35;
  NSObject *v36;
  uint32_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint8_t buf[4];
  _BYTE v46[10];
  _BYTE v47[6];
  unsigned int v48;
  __int16 v49;
  unsigned int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  {
    v42 = a2;
    a2 = v42;
  }
  {
    if (this <= 0x25
    {
      v11 = dword_184750480[this];
    }
    v12 = v11 + 35;
    if ((v11 & (v11 - 1)) != 0)
      v13 = v12 / v11 * v11;
    else
      v13 = v12 & -(uint64_t)v11;
  }
  else
  {
    v13 = 36;
  }
  v44 = a2;
  if (!a6)
  {
    v17 = 0;
LABEL_26:
    if (__CFADD__(v13, v17) || (unint64_t)(v13 + v17) >= 0xFFFFFFFF)
    {
      if (x_log_hook_p())
      {
LABEL_40:
        x_log_();
      }
      else
      {
        v33 = a6;
        v34 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218752;
          *(_QWORD *)v46 = v13 + v17;
          *(_WORD *)&v46[8] = 1024;
          *(_DWORD *)v47 = v44;
          *(_WORD *)&v47[4] = 1024;
          v48 = a3;
          v49 = 1024;
          v50 = v33;
          v35 = "Layer backing store allocation too large size:%ld width:%d height:%d levels:%d";
          v36 = v34;
          v37 = 30;
LABEL_45:
          _os_log_impl(&dword_184457000, v36, OS_LOG_TYPE_ERROR, v35, buf, v37);
        }
      }
    }
    else
    {
      v23 = CA::Render::Shmem::new_shmem((CA::Render::Shmem *)(v13 + v17));
      v21 = v23;
      if (!v23)
        return v21;
      v24 = a6;
      v25 = (_DWORD *)*((_QWORD *)v23 + 3);
      if (v25)
      {
        v26 = a3;
        v23[3] |= 0x2800u;
        v27 = *((_QWORD *)v23 + 2);
        v28 = CAGetStatsStruct(0);
        v29 = *((_QWORD *)v28 + 1);
        v30 = *(_QWORD *)v28 + v27;
        *(_QWORD *)v28 = v30;
        if (v30 > v29)
          *((_QWORD *)v28 + 1) = v30;
        if (a4)
          v31 = a4;
        else
          v31 = v44;
        v25[2] = v13;
        v25[3] = (_DWORD)this;
        if (a5)
          v32 = a5;
        else
          v32 = v26;
        v25[4] = v44;
        v25[5] = v26;
        v25[6] = v31;
        v25[7] = v32;
        v25[8] = v24;
        return v21;
      }
      v39 = v23 + 2;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (v40 == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
    }
    return 0;
  }
  v14 = v13;
  v15 = a4;
  v16 = a5;
  v17 = 0;
  v43 = a6;
  v18 = a3;
  v19 = a2;
  while (1)
  {
    v20 = CA::Render::format_rowbytes(this, v19);
    v21 = 0;
    if (!is_mul_ok(v20, a3))
      return v21;
    v22 = v20 * a3;
    if (!v22)
      return v21;
    v17 += v22;
    if (v19 <= 1)
      v19 = 1;
    else
      v19 >>= 1;
    if (a3 <= 1)
      a3 = 1;
    else
      a3 >>= 1;
    if (!--a6)
    {
      a6 = v43;
      a5 = v16;
      a3 = v18;
      a4 = v15;
      v13 = v14;
      if (v43 < 0x21)
        goto LABEL_26;
      if (x_log_hook_p())
        goto LABEL_40;
      v38 = x_log_category_render;
      if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
        return 0;
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)v46 = v44;
      *(_WORD *)&v46[4] = 1024;
      *(_DWORD *)&v46[6] = a3;
      *(_WORD *)v47 = 1024;
      *(_DWORD *)&v47[2] = v43;
      v35 = "Invalid bitmap: [%u x %u], %u levels";
      v36 = v38;
      v37 = 20;
      goto LABEL_45;
    }
  }
}

void CARecordFrame(int a1, int a2, int a3, char a4, double a5, double a6, double a7)
{
  int *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  double v18;
  double v19;
  double v20;
  double v21;

  v13 = CAGetStatsStruct(a4);
  v14 = v13[8];
  v15 = v13[7] + a1;
  v16 = v13[6] + a2;
  v17 = v13[5] + 1;
  v18 = *((double *)v13 + 6) + a7;
  *((double *)v13 + 5) = *((double *)v13 + 5) + a6;
  *((double *)v13 + 6) = v18;
  v13[5] = v17;
  v13[6] = v16;
  v13[7] = v15;
  v13[8] = v14 + a3;
  v19 = *((double *)v13 + 8);
  v20 = *((double *)v13 + 9);
  if (v19 <= 0.0)
    v19 = a5;
  v21 = a5 - v19;
  *((double *)v13 + 8) = a5;
  if (v21 > v20)
    *((double *)v13 + 9) = v21;
  CAMarkStatistic((uint64_t)v13, a5);
}

int *CAGetStatsStruct(char a1)
{
  unsigned int v2;
  int *v3;
  int v4;
  int *v5;
  int *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int *v24;

  v2 = CARecordCurrentDisplayGet();
  if ((a1 & 1) != 0)
    return (int *)&CAGetStatsStruct(BOOL)::iosurface_renderer_stats;
  v4 = v2;
  if (!v2)
    return (int *)&CAGetStatsStruct(BOOL)::ogl_renderer_stats_unknown;
  if (v2 == 1)
    return (int *)&CAGetStatsStruct(BOOL)::ogl_renderer_stats_main;
  os_unfair_lock_lock((os_unfair_lock_t)&CAGetStatsStruct(BOOL)::_ogl_renderer_stats_list_lock);
  v6 = CAGetStatsStruct(BOOL)::_ogl_renderer_stats_list[0];
  v5 = off_1EDD10810[0];
  if (CAGetStatsStruct(BOOL)::_ogl_renderer_stats_list[0] == off_1EDD10810[0])
  {
LABEL_11:
    v8 = 0x4EC4EC4EC4EC4EC5
       * (((char *)off_1EDD10810[0] - (char *)CAGetStatsStruct(BOOL)::_ogl_renderer_stats_list[0]) >> 3);
    if (qword_1EDD10820 < (unint64_t)(v8 + 1))
    {
      v9 = off_1EDD10818;
      v10 = (qword_1EDD10820 + 1) | ((unint64_t)(qword_1EDD10820 + 1) >> 1) | (((qword_1EDD10820 + 1) | ((unint64_t)(qword_1EDD10820 + 1) >> 1)) >> 2);
      v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
      v12 = v11 | (v11 >> 16) | ((v11 | (v11 >> 16)) >> 32);
      if (v12 + 1 > v8 + 1)
        v13 = v12 + 1;
      else
        v13 = v8 + 1;
      v14 = (int *)malloc_type_malloc(104 * v13, 0x10000409D46D3AFuLL);
      v15 = v14;
      v16 = CAGetStatsStruct(BOOL)::_ogl_renderer_stats_list[0];
      v17 = off_1EDD10810[0];
      if (CAGetStatsStruct(BOOL)::_ogl_renderer_stats_list[0] != off_1EDD10810[0])
      {
        v18 = v14;
        do
        {
          v19 = *(_OWORD *)v16;
          v20 = *((_OWORD *)v16 + 2);
          *((_OWORD *)v18 + 1) = *((_OWORD *)v16 + 1);
          *((_OWORD *)v18 + 2) = v20;
          *(_OWORD *)v18 = v19;
          v21 = *((_OWORD *)v16 + 3);
          v22 = *((_OWORD *)v16 + 4);
          v23 = *((_OWORD *)v16 + 5);
          *((_QWORD *)v18 + 12) = *((_QWORD *)v16 + 12);
          *((_OWORD *)v18 + 4) = v22;
          *((_OWORD *)v18 + 5) = v23;
          *((_OWORD *)v18 + 3) = v21;
          v18 += 26;
          v16 += 26;
        }
        while (v16 != v17);
      }
      if (v6 != v9)
        free(CAGetStatsStruct(BOOL)::_ogl_renderer_stats_list[0]);
      v5 = &v15[26 * v8];
      CAGetStatsStruct(BOOL)::_ogl_renderer_stats_list[0] = v15;
      off_1EDD10810[0] = v5;
      qword_1EDD10820 = v13;
    }
    *((_QWORD *)v5 + 12) = 0;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 2) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    *(_OWORD *)v5 = 0u;
    *((_OWORD *)v5 + 1) = 0u;
    v7 = off_1EDD10810[0];
    v24 = off_1EDD10810[0];
    *off_1EDD10810[0] = v4;
    off_1EDD10810[0] = v24 + 26;
  }
  else
  {
    v7 = CAGetStatsStruct(BOOL)::_ogl_renderer_stats_list[0];
    while (*v7 != v4)
    {
      v7 += 26;
      if (v7 == off_1EDD10810[0])
        goto LABEL_11;
    }
  }
  v3 = v7 + 2;
  os_unfair_lock_unlock((os_unfair_lock_t)&CAGetStatsStruct(BOOL)::_ogl_renderer_stats_list_lock);
  return v3;
}

_DWORD *CARecordCurrentDisplayGet()
{
  _DWORD *result;
  unsigned int v1;

  result = (_DWORD *)current_display_slot;
  if (current_display_slot)
  {
    result = pthread_getspecific(current_display_slot);
    if (result)
    {
      if (*result)
      {
        v1 = *result - 1;
        if (v1 >= 3)
          v1 = 3;
        return (_DWORD *)result[v1 + 1];
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

_DWORD *CA::Render::Shmem::new_shmem(CA::Render::Shmem *this)
{
  kern_return_t v2;
  vm_address_t v3;
  BOOL v4;
  malloc_zone_t *malloc_zone;
  _DWORD *result;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint8_t *, uint64_t, uint64_t);
  vm_address_t address;
  uint8_t buf[16];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  address = 0;
  v2 = vm_allocate(*MEMORY[0x1E0C83DA0], &address, ((unint64_t)this + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8], 855638019);
  v3 = address;
  if (v2)
    v4 = 1;
  else
    v4 = address == 0;
  if (v4)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = this;
        _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_ERROR, "CoreAnimation: failed to allocate %ld bytes\n", buf, 0xCu);
      }
    }
    return 0;
  }
  else
  {
    if (*MEMORY[0x1E0C9A980])
    {
      v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 592);
      if (v8)
      {
        v10 = *(unsigned int (**)(uint8_t *, uint64_t, uint64_t))v8;
        v9 = *(_QWORD *)(v8 + 8);
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        v20 = 0u;
        v21 = 0u;
        v18 = 0u;
        v19 = 0u;
        v16 = 0u;
        v17 = 0u;
        v14 = 0u;
        v15 = 0u;
        *(_OWORD *)buf = 0u;
        v13 = 0u;
        if (v10(buf, 256, v9))
          __CFSetLastAllocationEventName();
      }
    }
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    result = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x38uLL, 0x743898A5uLL);
    if (result)
    {
      result[2] = 1;
      result[3] = 4399;
      ++dword_1ECDC7CE4;
      *(_QWORD *)result = off_1E1598AD0;
      *((_QWORD *)result + 2) = this;
      *((_QWORD *)result + 3) = v3;
      result[8] = 0;
      *((_QWORD *)result + 5) = CA::Render::release_deallocate;
      *((_QWORD *)result + 6) = result;
      result[9] = 0;
    }
  }
  return result;
}

void CABackingStoreBeginUpdate_(uint64_t a1, unsigned int a2, unsigned int a3, CA *a4, int a5, int a6, uint64_t a7, unsigned __int32 a8, _BYTE *a9)
{
  _BYTE *v9;
  int v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int32x2_t *v18;
  CA *v19;
  unsigned __int32 v20;
  int v21;
  int v22;
  CA::Render *v23;
  uint64_t v24;
  int32x2_t v25;
  unsigned __int32 v26;
  int8x8_t v27;
  uint64_t v28;
  CGContext *v29;
  CGContext *v30;
  unsigned int v31;
  uint64_t v32;
  CA::CG::IOSurfaceDrawable *v33;
  CGImageRef v34;
  unsigned int v35;
  size_t v36;
  unsigned int v37;
  _BYTE *v38;
  CGContext *v39;
  unsigned __int32 v40;
  CA::Render *v41;
  char v42;
  unsigned int v43;
  size_t v44;
  size_t v45;
  uint64_t v46;
  int32x2_t v47;
  unsigned __int32 v48;
  int8x8_t v49;
  uint64_t v50;
  unsigned int v51;
  size_t v52;
  CA::Render::Shmem *v53;
  CGImage *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v59;
  char *v60;
  unsigned int v61;
  unsigned int v62;
  uint32x2_t v63;
  uint32x2_t v64;
  CGRect v65;
  CGRect v66;

  v9 = a9;
  if (*(_QWORD *)(a1 + 416))
    __assert_rtn("CABackingStoreBeginUpdate_", "CABackingStore.cpp", 1030, "!b->update_ctx");
  v10 = a5;
  v14 = *(_QWORD *)(a1 + 408);
  v15 = *(_QWORD *)(v14 + 16);
  v16 = *(_QWORD *)(a1 + 448);
  if (!v15)
  {
    v28 = *(_QWORD *)(v14 + 24);
    if (!v28)
      goto LABEL_74;
    *(_BYTE *)(v28 + 69) = (a5 & 0x400) != 0;
    v29 = (CGContext *)CAGetCachedCGIOSurfaceContext(v28, a6, a7);
    if (!v29)
      goto LABEL_74;
    v30 = v29;
    if (a9[16])
      CGContextClearRect(v29, *MEMORY[0x1E0C9D5E0]);
    if (!*(_QWORD *)(a1 + 456))
      goto LABEL_67;
    v31 = a3;
    v32 = *(_QWORD *)a9;
    v33 = *(CA::CG::IOSurfaceDrawable **)(*(_QWORD *)a9 + 24);
    if (v33)
    {
      v34 = CA::CG::IOSurfaceDrawable::copy_cgimage_iosurface(v33);
    }
    else
    {
      v53 = *(CA::Render::Shmem **)(v32 + 16);
      if (!v53)
        goto LABEL_56;
      v34 = CA::Render::Shmem::copy_cgimage(v53, *(CGColorSpace **)(v32 + 8), 0, 0);
    }
    v54 = v34;
    if (v34)
    {
      CGContextSaveGState(v30);
      CGContextReplacePathWithShapePath();
      CGContextClip(v30);
      if (CGImageIsMask(v54))
      {
        CGContextSetCompositeOperation();
        v65.origin.x = 0.0;
        v65.origin.y = 0.0;
        v65.size.width = (double)a2;
        v65.size.height = (double)v31;
        CGContextFillRect(v30, v65);
      }
      CGContextSetCompositeOperation();
      v66.origin.x = 0.0;
      v66.origin.y = 0.0;
      v66.size.width = (double)a2;
      v66.size.height = (double)v31;
      CGContextDrawImage(v30, v66, v54);
      CGContextRestoreGState(v30);
      CGImageRelease(v54);
LABEL_67:
      if (v16)
      {
        CGContextReplacePathWithShapePath();
        CGContextClip(v30);
      }
LABEL_69:
      if ((v10 & 2) != 0)
      {
        if (!a9[16])
          CGContextClearRect(v30, *MEMORY[0x1E0C9D5E0]);
        v10 &= ~2u;
      }
      *(_QWORD *)(a1 + 416) = v30;
      goto LABEL_74;
    }
LABEL_56:
    if (*(_QWORD *)(a1 + 448))
    {
      CGSReleaseRegion();
      *(_QWORD *)(a1 + 448) = 0;
    }
    goto LABEL_69;
  }
  v18 = *(int32x2_t **)(v15 + 24);
  if (v18[4].i32[0] <= a8)
  {
LABEL_63:
    v55 = (unsigned int *)v18 + 1;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 + 1, v55));
LABEL_74:
    *((_DWORD *)v9 + 3) = v10;
    return;
  }
  v19 = a4;
  v20 = v18[3].u32[1];
  if ((unsigned __int32)v18[3].i32[0] >> a8 <= 1)
    v21 = 1;
  else
    v21 = (unsigned __int32)v18[3].i32[0] >> a8;
  v22 = v20 >> a8;
  if (v20 >> a8 <= 1)
    v22 = 1;
  v61 = v22;
  v62 = v21;
  v23 = (CA::Render *)v18[1].u32[1];
  if (a8)
  {
    v59 = a4;
    v24 = 0;
    v25 = v18[2];
    v26 = a8;
    do
    {
      v63 = (uint32x2_t)v25;
      v24 += CA::Render::format_rowbytes(v23, v25.u32[0]) * v25.u32[1];
      v27 = (int8x8_t)vcgt_u32(v63, (uint32x2_t)0x100000001);
      v25 = vsub_s32((int32x2_t)vand_s8((int8x8_t)vshr_n_u32(v63, 1uLL), v27), (int32x2_t)vmvn_s8(v27));
      --v26;
    }
    while (v26);
    v23 = (CA::Render *)v18[1].u32[1];
    v9 = a9;
    v19 = (CA *)v59;
  }
  else
  {
    v24 = 0;
  }
  v60 = (char *)v18 + v18[1].i32[0] + v24;
  if ((unsigned __int32)v18[2].i32[0] >> a8 <= 1)
    v35 = 1;
  else
    v35 = (unsigned __int32)v18[2].i32[0] >> a8;
  v36 = CA::Render::format_rowbytes(v23, v35);
  if (!a8)
    goto LABEL_29;
  v37 = v62;
  if (v62 <= v61)
    v37 = v61;
  if ((v10 & 0x208) == 0 && v37 >= 8)
  {
LABEL_29:
    if ((v10 & 0x200) != 0)
      abort();
    v38 = CAGetCachedCGBitmapContext_(v60, v62, v61, v19, v36, *(CGColorSpaceRef *)(v14 + 8));
    if (v38)
    {
      v39 = (CGContext *)*((_QWORD *)v38 + 2);
      if (v39)
      {
        if (a8)
        {
          if (v16)
          {
            CGSTransformRegion();
            CGContextReplacePathWithShapePath();
            CGSReleaseRegion();
            CGContextClip(v39);
          }
          CGContextScaleCTM(v39, (double)v62 / (double)a2, (double)v61 / (double)a3);
        }
        else if (v16)
        {
          CGContextReplacePathWithShapePath();
          CGContextClip(v39);
        }
        if ((v10 & 2) != 0)
        {
          CGContextClearRect(v39, *MEMORY[0x1E0C9D5E0]);
          v10 &= ~2u;
        }
      }
    }
    else
    {
      v39 = 0;
    }
    *(_QWORD *)(a1 + 416) = v39;
    *(_WORD *)(a1 + 492) &= ~0x1000u;
    goto LABEL_63;
  }
  v40 = v18[3].u32[1];
  v41 = (CA::Render *)v18[1].u32[1];
  v42 = a8 - 1;
  v43 = (unsigned __int32)v18[3].i32[0] >> (a8 - 1);
  if (v43 <= 1)
    v44 = 1;
  else
    v44 = v43;
  if (v40 >> v42 <= 1)
    v45 = 1;
  else
    v45 = v40 >> v42;
  v46 = 0;
  if (a8 != 1)
  {
    v47 = v18[2];
    v48 = a8 - 1;
    do
    {
      v64 = (uint32x2_t)v47;
      v46 += CA::Render::format_rowbytes(v41, v47.u32[0]) * v47.u32[1];
      v49 = (int8x8_t)vcgt_u32(v64, (uint32x2_t)0x100000001);
      v47 = vsub_s32((int32x2_t)vand_s8((int8x8_t)vshr_n_u32(v64, 1uLL), v49), (int32x2_t)vmvn_s8(v49));
      --v48;
    }
    while (v48);
    v41 = (CA::Render *)v18[1].u32[1];
  }
  v50 = v18[1].i32[0];
  if ((unsigned __int32)v18[2].i32[0] >> v42 <= 1)
    v51 = 1;
  else
    v51 = (unsigned __int32)v18[2].i32[0] >> v42;
  v52 = CA::Render::format_rowbytes(v41, v51);
  CA::downsample_image(v19, (char *)v18 + v50 + v46, v52, v44, v45, (unsigned __int16 *)v60, v36, 0, 0.0, 0.0, (double)v62, (double)v61, a9);
}

_BYTE *CAGetCachedCGBitmapContext_(void *a1, unsigned int a2, unsigned int a3, unsigned int a4, size_t a5, CGColorSpaceRef space)
{
  CGColorSpace *v6;
  uint32_t v12;
  size_t v13;
  uint64_t v14;
  _BYTE *v15;
  CGContextRef v16;
  CGContextRef v17;
  malloc_zone_t *malloc_zone;
  NSObject *v20;
  uint8_t buf[4];
  size_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint32_t v26;
  uint64_t v27;

  v6 = space;
  v27 = *MEMORY[0x1E0C80C00];
  if (a4 <= 0x23 && ((0x1FFFFFF2FuLL >> a4) & 1) == 0)
    return 0;
  if (a4 > 0x23)
  {
    v14 = 0;
    v12 = 0;
    v13 = 0;
  }
  else
  {
    v12 = dword_184750360[a4];
    v13 = dword_184750518[a4];
    v14 = dword_1847503F0[a4];
    if (((0x7FFD9FFFuLL >> a4) & 1) == 0)
      goto LABEL_9;
  }
  if (CGColorSpaceUsesExtendedRange(space))
    v6 = (CGColorSpace *)CAGetColorSpace(0x1Du);
LABEL_9:
  if (a4 == 9)
    v6 = 0;
  os_unfair_lock_lock((os_unfair_lock_t)&context_lock);
  v15 = (_BYTE *)context_list;
  if (context_list)
  {
    while (v15[64]
         || *((_DWORD *)v15 + 2)
         || *((_DWORD *)v15 + 8) != v12
         || *((CGColorSpace **)v15 + 3) != v6 && !CGColorSpaceEqualToColorSpace())
    {
      v15 = *(_BYTE **)v15;
      if (!v15)
        goto LABEL_18;
    }
    if (CGBitmapContextSetData())
    {
      v15[64] = 1;
    }
    else
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v20 = x_log_category_utilities;
        if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218496;
          v22 = v13;
          v23 = 2048;
          v24 = v14;
          v25 = 1024;
          v26 = v12;
          _os_log_impl(&dword_184457000, v20, OS_LOG_TYPE_ERROR, "CGBitmapContextSetData failed, bpc %zu, bpp %zu, info %u\n", buf, 0x1Cu);
        }
      }
      v15 = 0;
    }
    goto LABEL_20;
  }
LABEL_18:
  os_unfair_lock_unlock((os_unfair_lock_t)&context_lock);
  v16 = CGBitmapContextCreate(a1, a2, a3, v13, a5, v6, v12);
  if (!v16)
    return 0;
  v17 = v16;
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v15 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x48uLL, 0x743898A5uLL);
  *((_DWORD *)v15 + 2) = 0;
  *((_QWORD *)v15 + 2) = v17;
  *((_QWORD *)v15 + 3) = CGColorSpaceRetain(v6);
  *((_DWORD *)v15 + 8) = v12;
  v15[64] = 1;
  os_unfair_lock_lock((os_unfair_lock_t)&context_lock);
  *(_QWORD *)v15 = context_list;
  context_list = (uint64_t)v15;
LABEL_20:
  os_unfair_lock_unlock((os_unfair_lock_t)&context_lock);
  return v15;
}

uint64_t CA::Context::Generic::commit_seed(CA::Context::Generic *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 128);
}

BOOL `anonymous namespace'::buffer_is_unused(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  __IOSurface *v4;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    return **(_DWORD **)(v1 + 24) == 0;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (!v3)
      return 1;
    v4 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    return IOSurfaceIsInUse(v4) == 0;
  }
}

uint64_t CA::Render::ShmemBitmap::fill_pixels(uint64_t result, uint64_t a2, uint64_t a3)
{
  int32x2_t *v4;
  __int32 v5;
  int i;
  CA::Render *v7;
  uint64_t v8;
  int32x2_t v9;
  int v10;
  int8x8_t v11;
  unsigned int v12;
  uint32x2_t v13;

  v4 = (int32x2_t *)result;
  if (!a3 || (result = CGSRegionIsEmpty(), (result & 1) == 0))
  {
    v5 = v4[4].i32[0];
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v7 = (CA::Render *)v4[1].u32[1];
        v8 = 0;
        if (i)
        {
          v9 = v4[2];
          v10 = i;
          do
          {
            v13 = (uint32x2_t)v9;
            v8 += CA::Render::format_rowbytes(v7, v9.u32[0]) * v9.u32[1];
            v11 = (int8x8_t)vcgt_u32(v13, (uint32x2_t)0x100000001);
            v9 = vsub_s32((int32x2_t)vand_s8((int8x8_t)vshr_n_u32(v13, 1uLL), v11), (int32x2_t)vmvn_s8(v11));
            --v10;
          }
          while (v10);
          v7 = (CA::Render *)v4[1].u32[1];
        }
        if ((unsigned __int32)v4[2].i32[0] >> i <= 1)
          v12 = 1;
        else
          v12 = (unsigned __int32)v4[2].i32[0] >> i;
        CA::Render::format_rowbytes(v7, v12);
        if (a3)
        {
          CGSRegionEnumerator();
          while (CGSNextRect())
            CGBlt_fillBytes();
          result = CGSReleaseRegionEnumerator();
        }
        else
        {
          result = CGBlt_fillBytes();
        }
      }
    }
  }
  return result;
}

void sub_18453A210(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = v1 + 2;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (!v5)
    (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

unsigned int *CA::Render::String::new_string(const __CFString *this, const __CFString *a2)
{
  const char *v3;
  unsigned int *v4;
  char *v5;
  unsigned int *v6;
  unsigned int v7;
  CFIndex usedBufLen[2];
  CFRange v10;

  usedBufLen[1] = *MEMORY[0x1E0C80C00];
  if (!this)
    return 0;
  usedBufLen[0] = 0;
  v10.length = CFStringGetLength(this);
  v10.location = 0;
  CFStringGetBytes(this, v10, 0x8000100u, 0, 0, 0, 0, usedBufLen);
  v4 = 0;
  if ((unint64_t)(usedBufLen[0] - 0x100000000) >= 0xFFFFFFFF00000001)
  {
    v5 = (char *)CA::Render::String::new_string((CA::Render::String *)usedBufLen[0], 0, v3);
    v4 = (unsigned int *)v5;
    if (v5)
    {
      if (!CFStringGetCString(this, v5 + 28, usedBufLen[0] + 1, 0x8000100u))
      {
        v6 = v4 + 2;
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (v7 == 1)
          (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
        return 0;
      }
    }
  }
  return v4;
}

_DWORD *CA::Render::String::new_string(CA::Render::String *this, const void *a2, const char *a3)
{
  malloc_zone_t *malloc_zone;
  _DWORD *v6;
  _DWORD *v7;
  NSObject *v8;
  uint8_t buf[4];
  CA::Render::String *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)this <= 0x10000)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v6 = malloc_type_zone_malloc(malloc_zone, (size_t)this + 32, 0x8BB15036uLL);
    v7 = v6;
    if (v6)
    {
      v6[2] = 1;
      v6[3] = 49;
      ++dword_1ECDC7CEC;
      *(_QWORD *)v6 = off_1E1598CE0;
      *((_QWORD *)v6 + 2) = 0;
      v6[6] = (_DWORD)this;
      if (a2)
        memcpy(v6 + 7, a2, (size_t)this);
      *((_BYTE *)this + (_QWORD)v7 + 28) = 0;
    }
  }
  else
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v8 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        v11 = this;
        _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_ERROR, "suspiciously long string: %zu", buf, 0xCu);
      }
    }
    return 0;
  }
  return v7;
}

__n128 CAColorMatrixConcat@<Q0>(CA::ColorMatrix *a1@<X0>, CA::ColorMatrix *a2@<X1>, const CA::ColorMatrix *a3@<X3>, uint64_t a4@<X8>)
{
  __int128 v5;
  __n128 result;
  __int128 v7;
  __n128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  CA::concat((CA *)&v7, a1, a2, a3);
  v5 = v10;
  *(_OWORD *)(a4 + 32) = v9;
  *(_OWORD *)(a4 + 48) = v5;
  *(_OWORD *)(a4 + 64) = v11;
  result = v8;
  *(_OWORD *)a4 = v7;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

float CA::concat(CA *this, CA::ColorMatrix *a2, const CA::ColorMatrix *a3, const CA::ColorMatrix *a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float result;

  v5 = *((float *)a2 + 2);
  v4 = *((float *)a2 + 3);
  v7 = *((float *)a3 + 14);
  v6 = *((float *)a3 + 15);
  v8 = *((float *)a3 + 10);
  v9 = *((float *)a3 + 11);
  v10 = *((float *)a2 + 1);
  v12 = *((float *)a3 + 4);
  v11 = *((float *)a3 + 5);
  v13 = *((float *)a3 + 1);
  *(float *)this = (float)((float)((float)(v6 * v4) + (float)(v8 * v5)) + (float)(v11 * v10))
                 + (float)(*(float *)a3 * *(float *)a2);
  v15 = *((float *)a2 + 7);
  v14 = *((float *)a2 + 8);
  v17 = *((float *)a2 + 5);
  v16 = *((float *)a2 + 6);
  v18 = *((float *)a3 + 16);
  v19 = *((float *)a3 + 17);
  v20 = *((float *)a3 + 6);
  v21 = *((float *)a3 + 7);
  v22 = *(float *)a2;
  *((float *)this + 1) = (float)((float)((float)(v18 * v4) + (float)(v9 * v5)) + (float)(v20 * v10))
                       + (float)(v13 * *(float *)a2);
  v23 = *(float *)a3;
  v24 = *((float *)a3 + 1);
  v25 = (float)((float)((float)(v14 * v6) + (float)(v15 * v8)) + (float)(v16 * v11)) + (float)(*(float *)a3 * v17);
  v27 = *((float *)a2 + 12);
  v26 = *((float *)a2 + 13);
  v28 = *((float *)a3 + 12);
  v29 = *((float *)a3 + 13);
  v30 = *((float *)a2 + 1);
  v31 = *((float *)a3 + 3);
  *((float *)this + 2) = (float)((float)((float)(v19 * v4) + (float)(v28 * v5)) + (float)(v21 * v30))
                       + (float)(*((float *)a3 + 2) * v22);
  v32 = *((float *)a3 + 18);
  v33 = *((float *)a3 + 19);
  v34 = *((float *)a2 + 2);
  v35 = *((float *)a3 + 8);
  v36 = *((float *)a3 + 9);
  *((float *)this + 3) = (float)((float)((float)(v32 * v4) + (float)(v29 * v34)) + (float)(v35 * v30))
                       + (float)(v31 * v22);
  v37 = (float)((float)((float)(*((float *)a2 + 4) + (float)(v33 * *((float *)a2 + 3))) + (float)(v7 * v34))
              + (float)(v36 * v30))
      + (float)(v12 * v22);
  v39 = *((float *)a2 + 10);
  v38 = *((float *)a2 + 11);
  *((float *)this + 4) = v37;
  *((float *)this + 5) = v25;
  v41 = *((float *)a3 + 4);
  v40 = *((float *)a3 + 5);
  v42 = (float)((float)((float)(v26 * v6) + (float)(v27 * v8)) + (float)(v40 * v38)) + (float)(v39 * v23);
  v43 = *((float *)a2 + 5);
  *((float *)this + 6) = (float)((float)((float)(v18 * v14) + (float)(v9 * v15)) + (float)(v20 * v16))
                       + (float)(v24 * v43);
  v44 = *((float *)a2 + 6);
  v45 = (float)((float)(v19 * v14) + (float)(v28 * v15)) + (float)(v44 * v21);
  v46 = *((float *)a3 + 2);
  v47 = *((float *)a3 + 3);
  *((float *)this + 7) = v45 + (float)(v46 * v43);
  v48 = *((float *)a2 + 7);
  *((float *)this + 8) = (float)((float)((float)(v32 * v14) + (float)(v35 * v44)) + (float)(v48 * v29))
                       + (float)(v47 * v43);
  v49 = (float)((float)((float)(*((float *)a2 + 9) + (float)(v7 * v48)) + (float)(v36 * v44))
              + (float)(*((float *)a2 + 8) * v33))
      + (float)(v41 * v43);
  *((float *)this + 10) = v42;
  v51 = *((float *)a2 + 17);
  v50 = *((float *)a2 + 18);
  v52 = *((float *)a3 + 6);
  v53 = *((float *)a3 + 7);
  v54 = (float)((float)(v18 * v26) + (float)(v9 * v27)) + (float)(v52 * v38);
  v55 = *((float *)a2 + 10);
  *((float *)this + 11) = v54 + (float)(v55 * v24);
  v56 = *((float *)a3 + 11);
  v57 = *((float *)a2 + 16);
  v58 = (float)((float)((float)(v50 * v6) + (float)(*((float *)a3 + 10) * v51)) + (float)(v57 * v40))
      + (float)(*((float *)a2 + 15) * v23);
  v59 = *((float *)a2 + 11);
  *((float *)this + 12) = (float)((float)((float)(v19 * v26) + (float)(v28 * v27)) + (float)(v46 * v55))
                        + (float)(v53 * v59);
  v60 = v32 * v26;
  v61 = *((float *)a2 + 12);
  *((float *)this + 9) = v49;
  v62 = *((float *)a3 + 8);
  v63 = *((float *)a3 + 9);
  *((float *)this + 13) = (float)((float)(v60 + (float)(v47 * v55)) + (float)(v61 * v29)) + (float)(v62 * v59);
  v64 = (float)((float)((float)(*((float *)a2 + 14) + (float)(v7 * v61)) + (float)(v41 * v55))
              + (float)(*((float *)a2 + 13) * v33))
      + (float)(v63 * v59);
  *((float *)this + 15) = v58;
  v65 = *((float *)a2 + 15);
  *((float *)this + 16) = (float)((float)((float)(v18 * v50) + (float)(v52 * v57)) + (float)(v56 * v51))
                        + (float)(v65 * v24);
  v66 = *((float *)a2 + 16);
  v67 = *((float *)a3 + 13);
  *((float *)this + 17) = (float)((float)((float)(v19 * v50) + (float)(v46 * v65)) + (float)(*((float *)a3 + 12) * v51))
                        + (float)(v66 * v53);
  v68 = v32 * v50;
  v69 = *((float *)a2 + 17);
  *((float *)this + 18) = (float)((float)(v68 + (float)(v47 * v65)) + (float)(v62 * v66)) + (float)(v67 * v69);
  *((float *)this + 14) = v64;
  result = (float)((float)((float)(*((float *)a2 + 19) + (float)(v41 * v65)) + (float)(v63 * v66))
                 + (float)(*((float *)a2 + 18) * v33))
         + (float)(*((float *)a3 + 14) * v69);
  *((float *)this + 19) = result;
  return result;
}

CA::Display::DisplayLink *CA::Display::DisplayLinkItem::set_reasons(CA::Display::DisplayLinkItem *this, const unsigned int *a2, unsigned int a3)
{
  uint64_t v4;
  size_t v5;
  unsigned int v6;
  int v7;
  int v8;
  _QWORD __s2[3];

  __s2[2] = *MEMORY[0x1E0C80C00];
  if (a3 >= 4)
    v4 = 4;
  else
    v4 = a3;
  v5 = (4 * v4);
  __s2[0] = 0;
  __s2[1] = 0;
  if ((_DWORD)v4)
  {
    v6 = 0;
    do
    {
      v8 = *a2++;
      v7 = v8;
      if (v8)
        *((_DWORD *)__s2 + v6++) = v7;
      --v4;
    }
    while (v4);
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 136));
  if (!memcmp((char *)this + 88, __s2, v5))
    return (CA::Display::DisplayLink *)pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 136));
  memcpy((char *)this + 88, __s2, v5);
  if ((*((_BYTE *)this + 316) & 1) != 0)
    return (CA::Display::DisplayLink *)pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 136));
  os_unfair_lock_lock((os_unfair_lock_t)this + 2);
  CA::Display::DisplayTimingsControl::register_frame_interval_reasons((CA::Display::DisplayTimingsControl *)(*((_QWORD *)this + 2) + 464), (uint64_t)this, (const unsigned int *)this + 22, 4u);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 2);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 136));
  return CA::Display::DisplayLinkItem::set_preferred_fps_range((CA::Display::DisplayLink **)this, *(CAFrameRateRange *)((char *)this + 76), 1, 1);
}

void sub_18453B128(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

CA::Display::DisplayLink *CA::Display::DisplayLinkItem::set_paused(CA::Display::DisplayLinkItem *this, int a2)
{
  char v4;
  CA::Display::DisplayLink *result;

  if (BYTE9(xmmword_1ECDC6A90))
    kdebug_trace();
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 136));
  v4 = *((_BYTE *)this + 316);
  if (((((v4 & 1) == 0) ^ a2) & 1) != 0)
    return (CA::Display::DisplayLink *)pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 136));
  *((_BYTE *)this + 316) = v4 & 0xFE | a2;
  if ((a2 & 1) != 0)
    CA::Display::DisplayLinkItem::unregister_frame_interval_range(this);
  else
    CA::Display::DisplayLinkItem::set_preferred_fps_range_locked(this, *(CAFrameRateRange *)((char *)this + 76), 1);
  if ((*((_BYTE *)this + 316) & 0x10) != 0)
  {
    objc_msgSend(*((id *)this + 32), "willChangeValueForKey:", CFSTR("active"));
    *((_BYTE *)this + 316) = ((8 * (*((_BYTE *)this + 316) & 1)) | *((_BYTE *)this + 316) & 0xF7) ^ 8;
    objc_msgSend(*((id *)this + 32), "didChangeValueForKey:", CFSTR("active"));
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 136));
  result = (CA::Display::DisplayLink *)*((_QWORD *)this + 33);
  if (result)
    return (CA::Display::DisplayLink *)CA::Display::DisplayLink::item_properties_changed(result);
  return result;
}

void CA::Display::DisplayLinkItem::unregister_frame_interval_range(CA::Display::DisplayLinkItem *this)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  uint8_t buf[4];
  int v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 316) & 4) != 0 && *((_QWORD *)this + 33))
  {
    if (*((_BYTE *)this + 129))
      __assert_rtn("unregister_frame_interval_range", "CADisplay.mm", 6399, "!_has_deferred_unregister_frame_interval_range");
    if (byte_1ECDC6AC5)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v2 = x_log_category_frame_rate;
        if (os_log_type_enabled((os_log_t)x_log_category_frame_rate, OS_LOG_TYPE_DEFAULT))
        {
          v3 = *((_DWORD *)this + 16);
          v4 = *((_DWORD *)this + 17);
          v5 = *((_DWORD *)this + 18);
          *(_DWORD *)buf = 67109632;
          v7 = v3;
          v8 = 1024;
          v9 = v4;
          v10 = 1024;
          v11 = v5;
          _os_log_impl(&dword_184457000, v2, OS_LOG_TYPE_DEFAULT, "CAFrameRateClient: unregister %u %u %u", buf, 0x14u);
        }
      }
    }
    if (*((_QWORD *)this + 31))
    {
      *((_BYTE *)this + 129) = 1;
      *(_QWORD *)((char *)this + 116) = *((_QWORD *)this + 8);
      *((_DWORD *)this + 31) = *((_DWORD *)this + 18);
    }
    else
    {
      CA::Display::DisplayTimingsControl::unregister_frame_interval_range((os_unfair_lock_s *)(*((_QWORD *)this + 2) + 464), *(CAFrameIntervalRange *)((char *)this + 64));
      CA::Display::DisplayTimingsControl::register_frame_interval_reasons((CA::Display::DisplayTimingsControl *)(*((_QWORD *)this + 2) + 464), (uint64_t)this, 0, 0);
    }
    *((_BYTE *)this + 316) &= ~4u;
  }
}

void CA::Display::DisplayTimingsControl::register_frame_interval_reasons(CA::Display::DisplayTimingsControl *this, uint64_t a2, const unsigned int *a3, unsigned int a4)
{
  os_unfair_lock_s *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  NSObject *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  char *v29;
  char *v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  mach_port_t ServerPort;
  int v38;
  pid_t v39;
  mach_port_t reply_port;
  mach_msg_return_t v41;
  __int128 v42;
  mach_msg_header_t buf;
  int v44;
  __int128 *v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  pid_t v50;
  int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 233) & 2) != 0)
  {
    v8 = (os_unfair_lock_s *)((char *)this + 136);
    os_unfair_lock_lock((os_unfair_lock_t)this + 34);
    v9 = (char *)*((_QWORD *)this + 20);
    v10 = (char *)*((_QWORD *)this + 21);
    v11 = v9;
    if (v9 != v10)
    {
      v11 = (char *)*((_QWORD *)this + 20);
      while (*(_QWORD *)v11 != a2)
      {
        v11 += 24;
        if (v11 == v10)
          goto LABEL_17;
      }
    }
    if (v11 != v10)
    {
      if (!a4)
        goto LABEL_40;
      goto LABEL_9;
    }
LABEL_17:
    v18 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3);
    if (v18 < 8)
    {
      if (a4 && *a3)
      {
        v19 = *((_QWORD *)this + 22);
        if ((unint64_t)v10 >= v19)
        {
          v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (_QWORD)v9) >> 3);
          if (2 * v22 <= v18 + 1)
            v23 = v18 + 1;
          else
            v23 = 2 * v22;
          if (v22 >= 0x555555555555555)
            v24 = 0xAAAAAAAAAAAAAAALL;
          else
            v24 = v23;
          if (v24 > 0xAAAAAAAAAAAAAAALL)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v25 = (char *)operator new(24 * v24);
          v26 = &v25[8 * ((v10 - v9) >> 3)];
          *((_QWORD *)v26 + 1) = 0;
          *((_QWORD *)v26 + 2) = 0;
          v27 = &v25[24 * v24];
          *(_QWORD *)v26 = a2;
          v20 = v26 + 24;
          if (v9 == v10)
          {
            v29 = &v25[8 * ((v10 - v9) >> 3)];
          }
          else
          {
            do
            {
              v28 = *(_OWORD *)(v10 - 24);
              v29 = v26 - 24;
              *((_QWORD *)v26 - 1) = *((_QWORD *)v10 - 1);
              *(_OWORD *)(v26 - 24) = v28;
              v10 -= 24;
              v26 -= 24;
            }
            while (v10 != v9);
          }
          *((_QWORD *)this + 20) = v29;
          *((_QWORD *)this + 21) = v20;
          *((_QWORD *)this + 22) = v27;
          if (v9)
            operator delete(v9);
        }
        else
        {
          *((_QWORD *)v10 + 1) = 0;
          *((_QWORD *)v10 + 2) = 0;
          v20 = v10 + 24;
          *(_QWORD *)v10 = a2;
        }
        *((_QWORD *)this + 21) = v20;
        v11 = v20 - 24;
        v10 = v20;
LABEL_9:
        if (*a3)
        {
          v12 = 0;
          *((_QWORD *)v11 + 1) = 0;
          *((_QWORD *)v11 + 2) = 0;
          if (a4 >= 4)
            v13 = 4;
          else
            v13 = a4;
          do
          {
            v15 = *a3++;
            v14 = v15;
            if (v15)
            {
              v16 = &v11[4 * v12++];
              *((_DWORD *)v16 + 2) = v14;
            }
            --v13;
          }
          while (v13);
          v17 = (char *)*((_QWORD *)this + 21);
LABEL_43:
          v42 = 0uLL;
          v30 = (char *)*((_QWORD *)this + 20);
          if (v30 == v17)
          {
            v31 = 0;
          }
          else
          {
            v31 = 0;
            do
            {
              v32 = 0;
              v33 = v31;
              do
              {
                v34 = *(_DWORD *)&v30[4 * v32 + 8];
                if (v34)
                  v35 = v31 + (_DWORD)v32 == 4;
                else
                  v35 = 1;
                if (v35)
                  break;
                *((_DWORD *)&v42 + (v31 + v32++)) = v34;
              }
              while (v32 != 4);
              v31 += v32;
              if (v33 + (_DWORD)v32 == 4)
                break;
              v30 += 24;
            }
            while (v30 != v17);
          }
          if (*(_QWORD *)((char *)this + 140) != (_QWORD)v42
            || *(_QWORD *)((char *)this + 148) != *((_QWORD *)&v42 + 1))
          {
            *(_OWORD *)((char *)this + 140) = v42;
            ServerPort = CARenderServerGetServerPort(0);
            v38 = *((_DWORD *)this + 2);
            v39 = getpid();
            v44 = 1;
            v45 = &v42;
            v46 = 16777472;
            v47 = 4 * v31;
            v48 = *MEMORY[0x1E0C804E8];
            v49 = v38;
            v50 = v39;
            v51 = v31;
            reply_port = mig_get_reply_port();
            *(_QWORD *)&buf.msgh_bits = 2147489043;
            buf.msgh_remote_port = ServerPort;
            buf.msgh_local_port = reply_port;
            *(_QWORD *)&buf.msgh_voucher_port = 0x9D5800000000;
            if (MEMORY[0x1E0C85B60])
            {
              voucher_mach_msg_set(&buf);
              reply_port = buf.msgh_local_port;
            }
            v41 = mach_msg(&buf, 3, 0x40u, 0x2Cu, reply_port, 0, 0);
            if ((v41 - 268435458) <= 0xE && ((1 << (v41 - 2)) & 0x4003) != 0)
            {
              mig_put_reply_port(buf.msgh_local_port);
            }
            else if (v41)
            {
              mig_dealloc_reply_port(buf.msgh_local_port);
            }
            else if (buf.msgh_id != 40380
                   || (buf.msgh_bits & 0x80000000) != 0
                   || buf.msgh_size != 36
                   || buf.msgh_remote_port
                   || HIDWORD(v45))
            {
              mach_msg_destroy(&buf);
            }
          }
          goto LABEL_72;
        }
LABEL_40:
        if (v10 != v11 + 24)
          memmove(v11, v11 + 24, v10 - (v11 + 24));
        v17 = v10 - 24;
        *((_QWORD *)this + 21) = v10 - 24;
        goto LABEL_43;
      }
    }
    else if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v21 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.msgh_bits) = 0;
        _os_log_impl(&dword_184457000, v21, OS_LOG_TYPE_DEFAULT, "CADisplayTimingsControl too many reasons.", (uint8_t *)&buf, 2u);
      }
    }
LABEL_72:
    os_unfair_lock_unlock(v8);
  }
}

void sub_18453B8C8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void CA::Display::DisplayTimingsControl::unregister_frame_interval_range(os_unfair_lock_s *this, CAFrameIntervalRange a2)
{
  unsigned int var2;
  uint64_t v3;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CAFrameIntervalRange v13;

  if ((this[58]._os_unfair_lock_opaque & 0x200) != 0)
  {
    var2 = a2.var2;
    v3 = *(_QWORD *)&a2.var0;
    v5 = this + 23;
    os_unfair_lock_lock(this + 23);
    v13.var2 = var2;
    *(_QWORD *)&v13.var0 = v3;
    CA::Display::DisplayTimingsControl::_unregister_frame_interval_range((CA::Display::DisplayTimingsControl *)this, v13);
    CA::Display::DisplayTimingsControl::update_frame_interval_request((CA::Display::DisplayTimingsControl *)this, v6, v7, v8, v9, v10, v11, v12);
    os_unfair_lock_unlock(v5);
  }
}

void sub_18453B94C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void CA::Display::DisplayTimingsControl::_unregister_frame_interval_range(CA::Display::DisplayTimingsControl *this, CAFrameIntervalRange a2)
{
  char *v3;
  _DWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  int64_t v9;
  NSObject *v10;
  __int16 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a2.var0)
  {
    v4 = (_DWORD *)*((_QWORD *)this + 14);
    v3 = (char *)*((_QWORD *)this + 15);
    if (v4 != (_DWORD *)v3)
    {
      v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - (char *)v4) >> 2);
      do
      {
        v6 = v5 >> 1;
        v7 = &v4[3 * (v5 >> 1)];
        if (*v7 < a2.var0
          || *v7 == a2.var0 && ((v8 = v4[3 * v6 + 1], v8 < a2.var1) || v8 == a2.var1 && v4[3 * v6 + 2] < a2.var2))
        {
          v6 = v5 + ~v6;
          v4 = v7 + 3;
        }
        v5 = v6;
      }
      while (v6);
      if (v4 != (_DWORD *)v3 && *v4 == a2.var0 && *(_QWORD *)(v4 + 1) == *(_QWORD *)&a2.var1)
      {
        v9 = v3 - (char *)(v4 + 3);
        if (v3 != (char *)(v4 + 3))
          memmove(v4, v4 + 3, v3 - (char *)(v4 + 3));
        *((_QWORD *)this + 15) = (char *)v4 + v9;
      }
    }
  }
  else if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v10 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
    {
      v11 = 0;
      _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_ERROR, "CAFrameIntervalRange.minimum = 0 should not be unregistered.", (uint8_t *)&v11, 2u);
    }
  }
}

void CA::Display::DisplayLink::refresh_item_properties_locked(CA::Display::DisplayLink *this)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  pthread_mutex_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 15);
  v2 = *((_QWORD *)this + 16);
  v4 = v2 - v3;
  if (v2 == v3)
  {
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 56));
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  }
  else
  {
    if ((unint64_t)v4 > 0x1000)
    {
      v5 = (char *)malloc_type_malloc(v2 - v3, 0x469A812uLL);
    }
    else
    {
      MEMORY[0x1E0C80A78](this);
      v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v5, v4);
    }
    v6 = 0;
    if ((unint64_t)(v4 >> 3) <= 1)
      v7 = 1;
    else
      v7 = v4 >> 3;
    do
    {
      v8 = *(_QWORD *)(*((_QWORD *)this + 15) + 8 * v6);
      *(_QWORD *)&v5[8 * v6] = v8;
      CFRetain(*(CFTypeRef *)(v8 + 256));
      ++v6;
    }
    while (v7 != v6);
    v9 = (pthread_mutex_t *)((char *)this + 56);
    pthread_mutex_unlock(v9);
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)&v5[8 * v10];
      CA::Display::DisplayLinkItem::set_preferred_fps_range((CA::Display::DisplayLink **)v11, *(CAFrameRateRange *)(v11 + 76), 0, 0);
      CFRelease(*(CFTypeRef *)(v11 + 256));
      ++v10;
    }
    while (v7 != v10);
    pthread_mutex_lock(v9);
    if ((unint64_t)v4 > 0x1000)
      free(v5);
  }
}

void sub_18453BC88(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_lock(v1);
  _Unwind_Resume(a1);
}

CA::Display::DisplayLink *CA::Display::DisplayLinkItem::set_preferred_fps_range(CA::Display::DisplayLink **this, CAFrameRateRange a2, int a3, int a4)
{
  float preferred;
  float maximum;
  float minimum;
  pthread_mutex_t *v10;
  _BOOL4 v11;
  CA::Display::DisplayLink *result;
  BOOL v13;
  CAFrameRateRange v14;

  preferred = a2.preferred;
  maximum = a2.maximum;
  minimum = a2.minimum;
  v10 = (pthread_mutex_t *)(this + 17);
  pthread_mutex_lock((pthread_mutex_t *)(this + 17));
  v14.minimum = minimum;
  v14.maximum = maximum;
  v14.preferred = preferred;
  v11 = CA::Display::DisplayLinkItem::set_preferred_fps_range_locked((CA::Display::DisplayLinkItem *)this, v14, a4);
  pthread_mutex_unlock(v10);
  result = this[33];
  if (result)
    v13 = (v11 & a3) == 0;
  else
    v13 = 1;
  if (!v13)
    return (CA::Display::DisplayLink *)CA::Display::DisplayLink::item_properties_changed(result);
  return result;
}

void sub_18453BD40(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void CA::DynamicFrameRateSource::set_preferred_fps_range(CA::DynamicFrameRateSource *this, CAFrameRateRange a2, int a3)
{
  float preferred;
  float maximum;
  float minimum;
  float v8;
  float v9;
  float v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  CAFrameIntervalRange v25;
  CAFrameIntervalRange v26;
  CAFrameIntervalRange v27;
  CAFrameIntervalRange v28;
  CAFrameRateRange v29;
  CAFrameRateRange v30;

  preferred = a2.preferred;
  maximum = a2.maximum;
  minimum = a2.minimum;
  if ((*(_BYTE *)(*((_QWORD *)this + 1) + 233) & 2) != 0)
  {
    if (CAPrefers60HzAPT(void)::once[0] != -1)
      dispatch_once(CAPrefers60HzAPT(void)::once, &__block_literal_global_2);
    v8 = 0.0;
    v9 = 80.0;
    v10 = 48.0;
    if (preferred != 0.0)
    {
      v10 = minimum;
      v9 = maximum;
      v8 = preferred;
    }
    if (maximum != 0.0)
    {
      v10 = minimum;
      v9 = maximum;
      v8 = preferred;
    }
    if (minimum != 0.0)
    {
      v10 = minimum;
      v9 = maximum;
      v8 = preferred;
    }
    if (CAPrefers60HzAPT(void)::enabled)
    {
      minimum = v10;
      maximum = v9;
      preferred = v8;
    }
  }
  v11 = CA::Display::DisplayTimingsControl::server_compat_quanta_mode(*((CA::Display::DisplayTimingsControl **)this + 1), 0);
  v29.minimum = minimum;
  v29.maximum = maximum;
  v29.preferred = preferred;
  v12 = CA::Display::DisplayTimingsControl::fps_range_to_frame_interval_range(*((CA::Display::DisplayTimingsControl **)this + 1), v29, v11);
  v14 = v13;
  v15 = HIDWORD(v12);
  if ((*(_BYTE *)(*((_QWORD *)this + 1) + 233) & 2) == 0)
    goto LABEL_20;
  if (CAHighFrameRateRestrictionEnabled(void)::once != -1)
    dispatch_once(&CAHighFrameRateRestrictionEnabled(void)::once, &__block_literal_global_4_14859);
  if (!CAHighFrameRateRestrictionEnabled(void)::enabled || *((_DWORD *)this + 18))
    goto LABEL_20;
  if (CADeviceDisableMinimumFrameDurationOnPhone::once != -1)
    dispatch_once(&CADeviceDisableMinimumFrameDurationOnPhone::once, &__block_literal_global_103);
  if (!CADeviceDisableMinimumFrameDurationOnPhone::disabled)
  {
    if (v12 <= 3)
      v12 = 3;
    else
      v12 = v12;
    if (v15 <= 4)
      v15 = 4;
    else
      v15 = v15;
    if (v14 <= 4)
      v24 = 4;
    else
      v24 = v14;
    if (v14)
      v16 = v24;
    else
      v16 = 0;
    v17 = v12 | (v15 << 32);
    v14 = v16;
  }
  else
  {
LABEL_20:
    v16 = v14;
    v17 = v12;
    if (!(_DWORD)v12)
      goto LABEL_65;
  }
  if (v12 > v14 || v14 > v15)
  {
    if (v12 <= v15 && v14 == 0)
    {
      v14 = 0;
      goto LABEL_32;
    }
LABEL_65:
    *(_QWORD *)&v25.var0 = v17;
    v25.var2 = v16;
    v30.minimum = minimum;
    v30.maximum = maximum;
    v30.preferred = preferred;
    CAFrameIntervalRangeLogInvalidRange(v25, v30);
    return;
  }
LABEL_32:
  if ((*((_BYTE *)this + 104) & 1) != 0)
  {
LABEL_44:
    *(_QWORD *)((char *)this + 28) = v17;
    *((_DWORD *)this + 9) = v14;
    goto LABEL_45;
  }
  if ((*((_BYTE *)this + 88) & 1) != 0)
  {
    if (*((_DWORD *)this + 7) == (_DWORD)v12 && *((_DWORD *)this + 8) == (_DWORD)v15 && *((_DWORD *)this + 9) == v14)
      goto LABEL_44;
    v20 = *((_QWORD *)this + 1);
    if ((*(_BYTE *)(v20 + 233) & 2) == 0)
      goto LABEL_45;
    if ((*((_BYTE *)this + 88) & 1) != 0)
    {
      *(_QWORD *)&v28.var0 = v17;
      v28.var2 = v16;
      CA::Display::DisplayTimingsControl::update_frame_interval_range((os_unfair_lock_s *)v20, *(CAFrameIntervalRange *)((char *)this + 28), v28);
      goto LABEL_43;
    }
LABEL_41:
    *(_QWORD *)&v26.var0 = v17;
    v26.var2 = v16;
    CA::Display::DisplayTimingsControl::register_frame_interval_range((os_unfair_lock_s *)v20, v26);
LABEL_43:
    *((_BYTE *)this + 88) |= 1u;
    goto LABEL_44;
  }
  v20 = *((_QWORD *)this + 1);
  if ((*(_BYTE *)(v20 + 233) & 2) != 0)
    goto LABEL_41;
LABEL_45:
  *(_QWORD *)&v27.var0 = v17;
  v27.var2 = v16;
  v21 = CA::DynamicFrameRateSource::frame_interval_range_adapt_to_server_interval((CA::Display::DisplayTimingsControl **)this, v27, 0);
  *((_QWORD *)this + 8) = CA::Display::DisplayTimingsControl::server_frame_interval(*((CA::Display::DisplayTimingsControl **)this + 1), 0);
  v22 = mach_absolute_time();
  if (a3
    && (v23 = CA::Display::DisplayTimingsControl::server_timing_expiry(*((os_unfair_lock_s **)this + 1)), v23 > v22))
  {
    *((_QWORD *)this + 7) = v23;
  }
  else
  {
    if (*((_QWORD *)this + 7) - 1 < v22)
      *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 12) = v21;
  }
  *((float *)this + 4) = minimum;
  *((float *)this + 5) = maximum;
  *((float *)this + 6) = preferred;
}

BOOL CA::Display::DisplayLinkItem::set_preferred_fps_range_locked(CA::Display::DisplayLinkItem *this, CAFrameRateRange a2, int a3)
{
  float preferred;
  float maximum;
  float minimum;
  int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  os_unfair_lock_s *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BOOL8 result;
  NSObject *v27;
  int v28;
  int v29;
  int v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  unsigned int v42;
  uint64_t v43;
  CAFrameIntervalRange v44;
  CAFrameIntervalRange v45;
  CAFrameIntervalRange v46;
  CAFrameIntervalRange v47;
  CAFrameRateRange v48;
  CAFrameRateRange v49;

  preferred = a2.preferred;
  maximum = a2.maximum;
  minimum = a2.minimum;
  v43 = *MEMORY[0x1E0C80C00];
  v8 = CA::Display::DisplayTimingsControl::server_compat_quanta_mode((CA::Display::DisplayTimingsControl *)(*((_QWORD *)this + 2) + 464), 0);
  *((_BYTE *)this + 128) = v8;
  v48.minimum = minimum;
  v48.maximum = maximum;
  v48.preferred = preferred;
  v9 = CA::Display::DisplayTimingsControl::fps_range_to_frame_interval_range((CA::Display::DisplayTimingsControl *)(*((_QWORD *)this + 2) + 464), v48, v8);
  v11 = v10;
  v12 = HIDWORD(v9);
  if ((*(_BYTE *)(*((_QWORD *)this + 2) + 697) & 2) != 0)
  {
    if (CAHighFrameRateRestrictionEnabled(void)::once != -1)
      dispatch_once(&CAHighFrameRateRestrictionEnabled(void)::once, &__block_literal_global_4_14859);
    if (CAHighFrameRateRestrictionEnabled(void)::enabled && !*((_DWORD *)this + 22))
    {
      if (CADeviceDisableMinimumFrameDurationOnPhone::once != -1)
        dispatch_once(&CADeviceDisableMinimumFrameDurationOnPhone::once, &__block_literal_global_103);
      if (v9 <= 3)
        v13 = 3;
      else
        v13 = v9;
      if (HIDWORD(v9) <= 4)
        v14 = 4;
      else
        v14 = HIDWORD(v9);
      if (v11 <= 4)
        v15 = 4;
      else
        v15 = v11;
      if (!v11)
        v15 = 0;
      if (CADeviceDisableMinimumFrameDurationOnPhone::disabled)
      {
        v12 = HIDWORD(v9);
      }
      else
      {
        v11 = v15;
        v12 = v14;
      }
      if (!CADeviceDisableMinimumFrameDurationOnPhone::disabled)
        LODWORD(v9) = v13;
    }
  }
  if (byte_1ECDC6AC7)
  {
    v16 = 0x200000002;
    v17 = 2;
    LODWORD(v9) = 2;
    LODWORD(v12) = 2;
    v11 = 2;
  }
  else
  {
    v16 = v9 | (v12 << 32);
    v17 = v11;
    if (!(_DWORD)v9)
    {
LABEL_65:
      *(_QWORD *)&v45.var0 = v16;
      v45.var2 = v17;
      v49.minimum = minimum;
      v49.maximum = maximum;
      v49.preferred = preferred;
      CAFrameIntervalRangeLogInvalidRange(v45, v49);
      return 0;
    }
  }
  if ((v9 > v11 || v11 > v12) && (v9 > v12 || v11))
    goto LABEL_65;
  if (!*((_QWORD *)this + 33) || (*((_BYTE *)this + 316) & 1) != 0)
    goto LABEL_48;
  if ((*((_BYTE *)this + 316) & 4) != 0)
  {
    if (*((_DWORD *)this + 16) != (_DWORD)v9 || *((_DWORD *)this + 17) != (_DWORD)v12 || *((_DWORD *)this + 18) != v11)
    {
      if ((*(_BYTE *)(*((_QWORD *)this + 2) + 697) & 2) == 0)
        goto LABEL_49;
      if ((*((_BYTE *)this + 316) & 4) != 0 && *((_BYTE *)this + 129))
        __assert_rtn("update_frame_interval_range", "CADisplay.mm", 6436, "!_registered || !_has_deferred_unregister_frame_interval_range");
      goto LABEL_41;
    }
LABEL_48:
    *((_QWORD *)this + 8) = v16;
    *((_DWORD *)this + 18) = v11;
    goto LABEL_49;
  }
  if ((*(_BYTE *)(*((_QWORD *)this + 2) + 697) & 2) != 0)
  {
LABEL_41:
    if (byte_1ECDC6AC5)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v27 = x_log_category_frame_rate;
        if (os_log_type_enabled((os_log_t)x_log_category_frame_rate, OS_LOG_TYPE_DEFAULT))
        {
          v28 = *((_DWORD *)this + 16);
          v29 = *((_DWORD *)this + 17);
          v30 = *((_DWORD *)this + 18);
          *(_DWORD *)buf = 67110400;
          v32 = v28;
          v33 = 1024;
          v34 = v29;
          v35 = 1024;
          v36 = v30;
          v37 = 1024;
          v38 = v9;
          v39 = 1024;
          v40 = v12;
          v41 = 1024;
          v42 = v11;
          _os_log_impl(&dword_184457000, v27, OS_LOG_TYPE_DEFAULT, "CAFrameRateClient: update %u %u %u to %u %u %u", buf, 0x26u);
        }
      }
    }
    if (*((_BYTE *)this + 129))
      CA::Display::DisplayLinkItem::run_deferred_unregister_frame_interval_range(this);
    v18 = (os_unfair_lock_s *)(*((_QWORD *)this + 2) + 464);
    if ((*((_BYTE *)this + 316) & 4) != 0)
    {
      *(_QWORD *)&v47.var0 = v16;
      v47.var2 = v17;
      CA::Display::DisplayTimingsControl::update_frame_interval_range(v18, *(CAFrameIntervalRange *)((char *)this + 64), v47);
    }
    else
    {
      *(_QWORD *)&v46.var0 = v16;
      v46.var2 = v17;
      CA::Display::DisplayTimingsControl::register_frame_interval_range(v18, v46);
    }
    *((_BYTE *)this + 316) |= 4u;
    goto LABEL_48;
  }
LABEL_49:
  v19 = *((_DWORD *)this + 14);
  v20 = CA::Display::DisplayTimingsControl::server_frame_interval((CA::Display::DisplayTimingsControl *)(*((_QWORD *)this + 2) + 464), 0);
  *(_QWORD *)&v44.var0 = v16;
  v44.var2 = v17;
  v21 = CAFrameIntervalRangeAdaptToFrameInterval(v44, v20, (*(unsigned __int8 *)(*((_QWORD *)this + 2) + 697) >> 1) & 1);
  *((_DWORD *)this + 28) = v20;
  v22 = mach_absolute_time();
  if (!a3 || v19 == v21)
    goto LABEL_56;
  v23 = CA::Display::DisplayTimingsControl::server_timing_expiry((os_unfair_lock_s *)(*((_QWORD *)this + 2) + 464));
  if (v23 > v22)
  {
    v24 = v23;
    result = 0;
    *((_QWORD *)this + 13) = v24;
    *((float *)this + 19) = minimum;
    *((float *)this + 20) = maximum;
    *((float *)this + 21) = preferred;
    return result;
  }
  if ((*((_BYTE *)this + 316) & 1) != 0 || v19 >= v21)
  {
LABEL_56:
    if (*((_QWORD *)this + 13) - 1 < v22)
      *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 14) = v21;
    *((float *)this + 19) = minimum;
    *((float *)this + 20) = maximum;
    *((float *)this + 21) = preferred;
    return (*((_BYTE *)this + 316) & 1) == 0 && v19 != v21;
  }
  else
  {
    result = 0;
    *((_QWORD *)this + 13) = 1;
    *((float *)this + 19) = minimum;
    *((float *)this + 20) = maximum;
    *((float *)this + 21) = preferred;
    *((_DWORD *)this + 15) = *((_DWORD *)this + 14);
  }
  return result;
}

uint64_t CAFrameIntervalRangeAdaptToFrameInterval(CAFrameIntervalRange a1, uint64_t a2, int a3)
{
  int v3;
  unsigned int var2;
  unsigned int var0;
  unsigned int var1;
  BOOL v7;
  char v8;
  BOOL v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  uint64_t result;
  uint64_t v21;
  const char *v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint8_t buf[4];
  unsigned int v33;
  __int16 v34;
  unsigned int v35;
  __int16 v36;
  unsigned int v37;
  __int16 v38;
  int v39;
  uint64_t v40;

  v3 = a2;
  var2 = a1.var2;
  var0 = a1.var0;
  v40 = *MEMORY[0x1E0C80C00];
  var1 = a1.var1;
  if (!(a1.var1 | a1.var0 | a1.var2))
    return a2;
  if ((_DWORD)a2 && a3 && (!a1.var2 || a1.var2 != (_DWORD)a2))
  {
    if (!a1.var2 && a1.var0 <= a2 && a1.var1 >= a2)
      return a2;
    if (!a1.var0
      || (!a1.var2 ? (v7 = a1.var0 > a1.var1) : (v7 = 1),
          v7 ? (v8 = 0) : (v8 = 1),
          a1.var2 <= a1.var1 ? (v9 = a1.var0 > a1.var2) : (v9 = 1),
          v9 && (v8 & 1) == 0))
    {
      __assert_rtn("CAFrameIntervalRangeAdaptToFrameInterval", "CATimingReference.cpp", 269, "CAFrameIntervalRangeIsValid (range)");
    }
    if (a2 > 5)
      __assert_rtn("CAFrameIntervalRangeAdaptToFrameInterval", "CATimingReference.cpp", 270, "target_interval <= CAFrameIntervalServerIntervalMax");
    v10 = 0;
    while (1)
    {
      v11 = frame_interval_table[v10];
      if (v11 >= a1.var0)
        break;
      if (++v10 == 21)
      {
        LODWORD(v10) = -1;
        goto LABEL_27;
      }
    }
    if (v11 != a1.var0)
      LODWORD(v10) = -1;
LABEL_27:
    v12 = 0;
    while (1)
    {
      v13 = frame_interval_table[v12];
      if (v13 >= a1.var1)
        break;
      if (++v12 == 21)
      {
        LODWORD(v12) = -1;
        goto LABEL_33;
      }
    }
    if (v13 != a1.var1)
      LODWORD(v12) = -1;
LABEL_33:
    v14 = 0;
    while (1)
    {
      v15 = frame_interval_table[v14];
      if (v15 >= a1.var2)
        break;
      if (++v14 == 21)
      {
        LODWORD(v14) = -1;
        goto LABEL_39;
      }
    }
    if (v15 != a1.var2)
      LODWORD(v14) = -1;
LABEL_39:
    v16 = 0;
    while (1)
    {
      v17 = frame_interval_table[v16];
      if (v17 >= a2)
        break;
      if (++v16 == 21)
      {
        LODWORD(v16) = -1;
        goto LABEL_45;
      }
    }
    if (v17 != (_DWORD)a2)
      LODWORD(v16) = -1;
LABEL_45:
    if ((_DWORD)v10 == -1
      || (_DWORD)v12 == -1
      || ((_DWORD)v14 == -1 ? (v18 = a1.var2 == 0) : (v18 = 1), !v18 || (_DWORD)v16 == -1))
    {
      if (x_log_hook_p())
      {
LABEL_90:
        x_log_();
        goto LABEL_95;
      }
      v21 = x_log_category_utilities;
      if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
        goto LABEL_95;
      *(_DWORD *)buf = 67109888;
      v33 = var0;
      v34 = 1024;
      v35 = var1;
      v36 = 1024;
      v37 = var2;
      v38 = 1024;
      v39 = v3;
      v22 = "Invalid frame interval range (%d %d %d) or target interval (%d)";
      v23 = v21;
      v24 = OS_LOG_TYPE_ERROR;
      goto LABEL_94;
    }
    if (a1.var2)
    {
      if ((int)v14 - (int)v10 <= (int)v12 - (int)v14)
        v19 = v12 - v14;
      else
        v19 = v14 - v10;
    }
    else if (a1.var1 <= a2)
    {
      v19 = v12 - v10;
      LODWORD(v14) = v12;
    }
    else if (a1.var0 >= a2)
    {
      v19 = v12 - v10;
      LODWORD(v14) = v10;
    }
    else
    {
      if ((int)v16 - (int)v10 <= (int)v12 - (int)v16)
        v19 = v12 - v16;
      else
        v19 = v16 - v10;
      LODWORD(v14) = v16;
    }
    v25 = 0;
    v26 = 0;
    result = 0;
    if (v19 <= 3)
      v19 = 3;
    do
    {
      if (v25)
        v27 = v26;
      else
        v27 = -v26;
      v28 = v27 + v14;
      if ((v27 + v14) <= 0x13)
      {
        v29 = frame_interval_table[v28];
        v30 = a2 % v29;
        if (v29 > a2)
          v30 = v29 % a2;
        if (!v30)
        {
          if ((int)v10 <= v28 && v28 <= (int)v12)
            return frame_interval_table[v28];
          if (!(_DWORD)result)
          {
            if (v29 >= var0)
              result = v29;
            else
              result = 0;
          }
        }
      }
      v25 ^= 1u;
      v26 += v25;
    }
    while (v26 <= v19);
    if ((_DWORD)result)
      return result;
    if (x_log_hook_p())
      goto LABEL_90;
    v31 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109888;
      v33 = var0;
      v34 = 1024;
      v35 = var1;
      v36 = 1024;
      v37 = var2;
      v38 = 1024;
      v39 = v3;
      v22 = "Unable to adapt interval range (%u %u %u) to %u.";
      v23 = v31;
      v24 = OS_LOG_TYPE_DEFAULT;
LABEL_94:
      _os_log_impl(&dword_184457000, v23, v24, v22, buf, 0x1Au);
    }
  }
LABEL_95:
  if (var2)
    return var2;
  else
    return var0;
}

void CA::Display::DisplayTimingsControl::update_frame_interval_request(CA::Display::DisplayTimingsControl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  int v16;
  char v17;
  int *v18;
  int *v19;
  int v20;
  BOOL v21;
  int v22;
  unsigned int ServerPort;
  int v25;
  pid_t v26;
  mach_port_t reply_port;
  mach_msg_return_t v28;
  NSObject *v29;
  NSObject *v30;
  __int128 msg;
  __int128 msg_16;
  int v33;
  pid_t v34;
  int v35;
  int v36;
  int v37;
  char v38;
  __int16 v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v9 = CA::FrameRateArbitrator::arbitrate((uint64_t)this + 112, (uint64_t)"CAFrameRateClient: ", a3, a4, a5, a6, a7, a8);
  v11 = v10;
  v12 = HIDWORD(v9);
  if (CADeviceSupportsOddQuantaFrameRates())
  {
    v13 = CADevicePrefers60HzAPT();
    v14 = (_DWORD)v9 ? 2 : v11;
    v15 = (_DWORD)v9 ? 2 : HIDWORD(v9);
    v16 = (_DWORD)v9 ? 2 : 0;
    if (v13)
    {
      v12 = HIDWORD(v9);
    }
    else
    {
      v11 = v14;
      v12 = v15;
    }
    if (!v13)
      LODWORD(v9) = v16;
  }
  if (*((_DWORD *)this + 24) != (_DWORD)v9 || *((_DWORD *)this + 25) != (_DWORD)v12 || *((_DWORD *)this + 26) != v11)
  {
    if (byte_1ECDC6AC5)
    {
      if (x_log_hook_p())
      {
        getpid();
        x_log_();
      }
      else
      {
        v30 = x_log_category_frame_rate;
        if (os_log_type_enabled((os_log_t)x_log_category_frame_rate, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)&msg = __PAIR64__(getpid(), 67109888);
          WORD4(msg) = 1024;
          *(_DWORD *)((char *)&msg + 10) = v9;
          HIWORD(msg) = 1024;
          LODWORD(msg_16) = v12;
          WORD2(msg_16) = 1024;
          *(_DWORD *)((char *)&msg_16 + 6) = v11;
          _os_log_impl(&dword_184457000, v30, OS_LOG_TYPE_DEFAULT, "CAFrameRateClient: pid %i register to server %u %u %u", (uint8_t *)&msg, 0x1Au);
        }
      }
    }
    *((_QWORD *)this + 12) = v9 | (v12 << 32);
    *((_DWORD *)this + 26) = v11;
    v17 = CA::Display::DisplayTimingsControl::compat_quanta_mode(this);
    if (CADeviceIsAppleBundle::once[0] != -1)
      dispatch_once(CADeviceIsAppleBundle::once, &__block_literal_global_254_9854);
    if (!CADeviceIsAppleBundle::apple_bundle)
    {
      v18 = (int *)*((_QWORD *)this + 14);
      v19 = (int *)*((_QWORD *)this + 15);
      if (v18 != v19)
      {
        while (1)
        {
          v20 = *v18;
          v21 = *v18 == 8 || v20 == 4;
          if (v21 && v20 == v18[1])
          {
            v22 = v18[2];
            if (v20 == v22 || v22 == 0)
              break;
          }
          v18 += 3;
          if (v18 == v19)
          {
            v18 = (int *)*((_QWORD *)this + 15);
            break;
          }
        }
      }
      if (v18 != v19)
        v17 = 1;
    }
    ServerPort = CARenderServerGetServerPort(0);
    v25 = *((_DWORD *)this + 2);
    v26 = getpid();
    *((_QWORD *)&msg_16 + 1) = *MEMORY[0x1E0C804E8];
    v33 = v25;
    v34 = v26;
    v35 = v9;
    v36 = v12;
    v37 = v11;
    v38 = v17;
    v39 = 0;
    v40 = 0;
    reply_port = mig_get_reply_port();
    *(_QWORD *)&msg = 5395;
    *((_QWORD *)&msg + 1) = __PAIR64__(reply_port, ServerPort);
    *(_QWORD *)&msg_16 = 0x9D5700000000;
    if (MEMORY[0x1E0C85B60])
    {
      voucher_mach_msg_set((mach_msg_header_t *)&msg);
      reply_port = HIDWORD(msg);
    }
    v28 = mach_msg((mach_msg_header_t *)&msg, 3, 0x38u, 0x2Cu, reply_port, 0, 0);
    if ((v28 - 268435458) <= 0xE && ((1 << (v28 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(HIDWORD(msg));
      goto LABEL_50;
    }
    if (v28)
    {
      mig_dealloc_reply_port(HIDWORD(msg));
LABEL_50:
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v29 = x_log_category_frame_rate;
        if (os_log_type_enabled((os_log_t)x_log_category_frame_rate, OS_LOG_TYPE_ERROR))
        {
          LOWORD(msg) = 0;
          _os_log_impl(&dword_184457000, v29, OS_LOG_TYPE_ERROR, "CAFrameRateClient: registration failed", (uint8_t *)&msg, 2u);
        }
      }
      return;
    }
    if (DWORD1(msg_16) != 40379 || (msg & 0x80000000) != 0 || *(_QWORD *)((char *)&msg + 4) != 36 || v33)
    {
      mach_msg_destroy((mach_msg_header_t *)&msg);
      goto LABEL_50;
    }
  }
}

unint64_t CA::Display::DisplayTimingsControl::fps_range_to_frame_interval_range(CA::Display::DisplayTimingsControl *this, CAFrameRateRange a2, int a3)
{
  float preferred;
  float maximum;
  float minimum;
  int v8;
  uint64_t v9;
  unsigned int v10;
  CAFrameRateRange v12;

  preferred = a2.preferred;
  maximum = a2.maximum;
  minimum = a2.minimum;
  v8 = CA::Display::DisplayTimingsControl::compat_quanta_mode(this);
  v9 = 64;
  if ((*((_BYTE *)this + 233) & 8) == 0)
    v9 = 48;
  if ((*((_BYTE *)this + 233) & 1) != 0)
    v10 = 2;
  else
    v10 = 1;
  if (v10 <= *((_DWORD *)this + 14))
    v10 = *((_DWORD *)this + 14);
  if (v10 <= *((_DWORD *)this + 22))
    LOBYTE(v10) = *((_DWORD *)this + 22);
  v12.minimum = minimum;
  v12.maximum = maximum;
  v12.preferred = preferred;
  return CAFrameRateRangeToFrameIntervalRange(v12, *(double *)((char *)this + v9), v10, *((_BYTE *)this + 233) & 1, v8, a3);
}

void sub_18453CD28(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void CA::FrameRateRangeGroup::add(CA::FrameRateRangeGroup *this, CAFrameRateRange a2)
{
  float preferred;
  float maximum;
  float minimum;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  unsigned int v45;
  unint64_t v46;
  char *v47;
  void *v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;

  preferred = a2.preferred;
  maximum = a2.maximum;
  minimum = a2.minimum;
  v51 = *MEMORY[0x1E0C80C00];
  v6 = CA::FrameRateRangeGroup::fps_range_to_frame_interval_range(this, a2);
  v8 = v7;
  v49 = v6;
  v50 = v7;
  v9 = ((uint64_t)(int)maximum << 16) | ((unint64_t)(int)minimum << 32) | (int)preferred;
  v10 = *((_QWORD *)this + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = ((uint64_t)(int)maximum << 16) | ((unint64_t)(int)minimum << 32) | (int)preferred;
      if (v9 >= v10)
        v12 = v9 % v10;
    }
    else
    {
      v12 = v9 & (v10 - 1);
    }
    v13 = *(void ***)(*((_QWORD *)this + 7) + 8 * v12);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v9)
          {
            if (*((float *)v14 + 4) == minimum && *((float *)v14 + 5) == maximum && *((float *)v14 + 6) == preferred)
              goto LABEL_76;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v12)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v14 = (char *)operator new(0x38uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v9;
  *((float *)v14 + 4) = minimum;
  *((float *)v14 + 5) = maximum;
  *((float *)v14 + 6) = preferred;
  *((_QWORD *)v14 + 5) = 0;
  *((_QWORD *)v14 + 6) = 0;
  *((_QWORD *)v14 + 4) = 0;
  v16 = (float)(unint64_t)(*((_QWORD *)this + 10) + 1);
  v17 = *((float *)this + 22);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v10 = *((_QWORD *)this + 8);
    }
    if (*(_QWORD *)&prime > v10)
      goto LABEL_32;
    if (*(_QWORD *)&prime < v10)
    {
      v28 = vcvtps_u32_f32((float)*((unint64_t *)this + 10) / *((float *)this + 22));
      if (v10 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = *((_QWORD *)this + 8);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = (void *)*((_QWORD *)this + 7);
          *((_QWORD *)this + 7) = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          *((int8x8_t *)this + 8) = prime;
          do
            *(_QWORD *)(*((_QWORD *)this + 7) + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*((_QWORD *)this + 9);
          if (v25)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*((_QWORD *)this + 7) + 8 * v26) = (char *)this + 72;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  v33 = *((_QWORD *)this + 7);
                  if (!*(_QWORD *)(v33 + 8 * v32))
                  {
                    *(_QWORD *)(v33 + 8 * v32) = v25;
                    goto LABEL_57;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(*((_QWORD *)this + 7) + 8 * v32);
                  **(_QWORD **)(*((_QWORD *)this + 7) + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_57:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_61;
        }
        v48 = (void *)*((_QWORD *)this + 7);
        *((_QWORD *)this + 7) = 0;
        if (v48)
          operator delete(v48);
        v10 = 0;
        *((_QWORD *)this + 8) = 0;
      }
    }
LABEL_61:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v12 = v9 % v10;
      else
        v12 = ((uint64_t)(int)maximum << 16) | ((unint64_t)(int)minimum << 32) | (int)preferred;
    }
    else
    {
      v12 = (v10 - 1) & v9;
    }
  }
  v34 = *((_QWORD *)this + 7);
  v35 = *(_QWORD **)(v34 + 8 * v12);
  if (v35)
  {
    *(_QWORD *)v14 = *v35;
  }
  else
  {
    *(_QWORD *)v14 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v14;
    *(_QWORD *)(v34 + 8 * v12) = (char *)this + 72;
    if (!*(_QWORD *)v14)
      goto LABEL_75;
    v36 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v36 >= v10)
        v36 %= v10;
    }
    else
    {
      v36 &= v10 - 1;
    }
    v35 = (_QWORD *)(*((_QWORD *)this + 7) + 8 * v36);
  }
  *v35 = v14;
LABEL_75:
  ++*((_QWORD *)this + 10);
LABEL_76:
  v37 = v14 + 32;
  v38 = *((_QWORD *)v14 + 6);
  if (v38)
  {
    if (*v37 != (_DWORD)v6 || *(_QWORD *)(v14 + 36) != __PAIR64__(v8, HIDWORD(v6)))
      __assert_rtn("add", "CAFrameRateRangeGroup.mm", 152, "info.count == 0 || info.range == range");
    goto LABEL_92;
  }
  v40 = (char *)*((_QWORD *)this + 12);
  v39 = (char *)*((_QWORD *)this + 13);
  v41 = (char *)this + 96;
  if (v39 == v40)
    goto LABEL_91;
  v42 = 0xAAAAAAAAAAAAAAABLL * ((v39 - v40) >> 2);
  do
  {
    v43 = v42 >> 1;
    v44 = &v40[12 * (v42 >> 1)];
    if (*(_DWORD *)v44 > v6)
      goto LABEL_89;
    if (*(_DWORD *)v44 != (_DWORD)v6)
      goto LABEL_88;
    v45 = *(_DWORD *)&v40[12 * v43 + 4];
    if (v45 > HIDWORD(v6))
      goto LABEL_89;
    if (v45 == HIDWORD(v6))
    {
      v46 = v42 + ~v43;
      v47 = v44 + 12;
      if (*(_DWORD *)&v40[12 * v43 + 8] <= v8)
      {
        v40 = v47;
        v43 = v46;
      }
    }
    else
    {
LABEL_88:
      v40 = v44 + 12;
      v43 = v42 + ~v43;
    }
LABEL_89:
    v42 = v43;
  }
  while (v43);
  v39 = v40;
LABEL_91:
  std::vector<CAFrameIntervalRange>::insert((uint64_t)v41, v39, (unint64_t)&v49);
  v38 = *((_QWORD *)v14 + 6);
LABEL_92:
  *(_QWORD *)v37 = v49;
  *((_DWORD *)v14 + 10) = v50;
  *((_QWORD *)v14 + 6) = v38 + 1;
}

void sub_18453D2BC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void std::vector<CAFrameIntervalRange>::insert(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v3;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;
  _BYTE *v34;
  uint64_t v35;
  char *v36;

  v3 = a3;
  v6 = *(char **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v12 = *(char **)a1;
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(_QWORD *)a1] >> 2) + 1;
    if (v13 > 0x1555555555555555)
      abort();
    v14 = __src - v12;
    v15 = 0xAAAAAAAAAAAAAAABLL * ((__src - v12) >> 2);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v12) >> 2);
    if (2 * v16 > v13)
      v13 = 2 * v16;
    if (v16 >= 0xAAAAAAAAAAAAAAALL)
      v17 = 0x1555555555555555;
    else
      v17 = v13;
    if (v17)
    {
      v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CAFrameIntervalRange>>(v17);
    }
    else
    {
      v19 = 0;
      v18 = 0;
    }
    v22 = &v19[12 * v15];
    v23 = &v19[12 * v18];
    if (v15 == v18)
    {
      if (v14 < 1)
      {
        if (v12 == __src)
          v25 = 1;
        else
          v25 = 2 * v15;
        v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CAFrameIntervalRange>>(v25);
        v22 = &v26[12 * (v25 >> 2)];
        v23 = &v26[12 * v27];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v24 = v15 + 2;
        if (v15 >= -1)
          v24 = v15 + 1;
        v22 -= 12 * (v24 >> 1);
      }
    }
    v28 = *(_QWORD *)v3;
    *((_DWORD *)v22 + 2) = *(_DWORD *)(v3 + 8);
    *(_QWORD *)v22 = v28;
    v29 = *(char **)a1;
    v30 = v22;
    if (*(char **)a1 != __src)
    {
      v31 = __src;
      v30 = v22;
      do
      {
        v32 = *(_QWORD *)(v31 - 12);
        v31 -= 12;
        v33 = *((_DWORD *)v31 + 2);
        *(_QWORD *)(v30 - 12) = v32;
        v30 -= 12;
        *((_DWORD *)v30 + 2) = v33;
      }
      while (v31 != v29);
    }
    v34 = *(_BYTE **)(a1 + 8);
    v35 = v34 - __src;
    if (v34 != __src)
      memmove(v22 + 12, __src, v34 - __src);
    v36 = *(char **)a1;
    *(_QWORD *)a1 = v30;
    *(_QWORD *)(a1 + 8) = &v22[v35 + 12];
    *(_QWORD *)(a1 + 16) = v23;
    if (v36)
      operator delete(v36);
  }
  else if (__src == v6)
  {
    v21 = *(_QWORD *)a3;
    *((_DWORD *)__src + 2) = *(_DWORD *)(a3 + 8);
    *(_QWORD *)__src = v21;
    *(_QWORD *)(a1 + 8) = __src + 12;
  }
  else
  {
    v8 = __src + 12;
    v9 = v6 - 12;
    v10 = *(_QWORD *)(a1 + 8);
    while (v9 < v6)
    {
      v11 = *(_QWORD *)v9;
      *(_DWORD *)(v10 + 8) = *((_DWORD *)v9 + 2);
      *(_QWORD *)v10 = v11;
      v10 += 12;
      v9 += 12;
    }
    *(_QWORD *)(a1 + 8) = v10;
    if (v6 != v8)
      memmove(__src + 12, __src, v6 - v8);
    if ((unint64_t)__src <= v3)
      v3 += 12 * (*(_QWORD *)(a1 + 8) > v3);
    v20 = *(_QWORD *)v3;
    *((_DWORD *)__src + 2) = *(_DWORD *)(v3 + 8);
    *(_QWORD *)__src = v20;
  }
}

void sub_18453D53C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void CA::FrameRateRangeGroup::arbitrate_ranges(CA::FrameRateRangeGroup *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CAFrameIntervalRange v9;
  uint64_t v10;
  char v11;
  double *v12;
  double *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  BOOL v19;

  *(_QWORD *)&v9.var0 = CA::FrameRateArbitrator::arbitrate((uint64_t)this + 96, (uint64_t)"", a3, a4, a5, a6, a7, a8);
  *(CAFrameIntervalRange *)((char *)this + 32) = v9;
  v10 = *((_QWORD *)this + 1);
  if (v10)
  {
    v11 = *(_BYTE *)(v10 + 233);
    v12 = (double *)(v10 + 64);
    v13 = (double *)(v10 + 48);
    if ((v11 & 8) != 0)
      v13 = v12;
  }
  else
  {
    v13 = (double *)((char *)this + 120);
  }
  v16 = CAFrameIntervalRangeToFrameRateRange(v9, *v13);
  v17 = v14;
  v18 = v15;
  v19 = v16 == *((float *)this + 11) && v14 == *((float *)this + 12);
  if (!v19 || v15 != *((float *)this + 13))
  {
    objc_msgSend(*((id *)this + 2), "willChangeValueForKey:", CFSTR("arbitratedRange"));
    *((float *)this + 11) = v16;
    *((float *)this + 12) = v17;
    *((float *)this + 13) = v18;
    objc_msgSend(*((id *)this + 2), "didChangeValueForKey:", CFSTR("arbitratedRange"));
  }
}

unint64_t CA::FrameRateArbitrator::arbitrate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  dispatch_once_t *v20;
  uint64_t v21;
  void (*v22)(void *);
  uint64_t v23;
  const char *v24;
  _DWORD *v25;
  int *v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  _BYTE *v39;
  unint64_t v40;
  uint64_t *v41;
  _BYTE *v42;
  BOOL v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  _BYTE *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  _BYTE *v57;
  BOOL v58;
  _BOOL4 v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  _BYTE *v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  _BYTE *v70;
  void *v71;
  NSObject *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint8_t buf[4];
  uint64_t v92;
  __int16 v93;
  unint64_t v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  __int16 v101;
  void *v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD **)a1;
  v9 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v9)
  {
    LODWORD(v11) = 0;
    goto LABEL_5;
  }
  v10 = v9 - (_QWORD)v8;
  if (v10 == 12)
  {
    LODWORD(v11) = *v8;
    v12 = v8[1];
    return v11 | (unint64_t)(v12 << 32);
  }
  v13 = (unsigned __int128)(v10 * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v14 = (uint64_t *)&unk_1EDD14000;
  if (initialized[0] != -1)
  {
    v61 = a1;
    v62 = a2;
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
    a1 = v61;
    v14 = (uint64_t *)&unk_1EDD14000;
    a2 = v62;
  }
  v15 = (v13 >> 1) + ((unint64_t)v13 >> 63);
  v16 = &unk_1ECDC6000;
  if (byte_1ECDC6AC5)
  {
    v88 = 0;
    v89 = 0;
    v90 = 0;
  }
  v17 = 0;
  v11 = 0;
  if (v15 <= 1)
    v18 = 1;
  else
    v18 = (v13 >> 1) + ((unint64_t)v13 >> 63);
  v12 = 0xFFFFFFFFLL;
  v19 = -1;
  v20 = initialized;
  v21 = 3;
  v22 = init_debug;
  v23 = v18;
  v24 = "  candidate: %u %u %u\n";
  do
  {
    v25 = *(_DWORD **)a1;
    v26 = (int *)(*(_QWORD *)a1 + v17 * 4);
    v27 = *v26;
    v28 = v26[1];
    if (*v26 < 4 && v28 > 3)
      v29 = 2;
    else
      v29 = *v26;
    if (v29 == 4 && v28 > 5)
      v31 = 3;
    else
      v31 = v29;
    if (v26[2] == 2 && v28 > 3)
      v32 = 3;
    else
      v32 = v26[1];
    if (v19 != -1)
    {
      v76 = a1;
      v82 = a2;
      v74 = v15;
      v75 = v11;
      dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
      v24 = "  candidate: %u %u %u\n";
      v22 = init_debug;
      v21 = 3;
      v20 = initialized;
      v11 = v75;
      a1 = v76;
      v16 = (_BYTE *)&unk_1ECDC6000;
      v14 = (_QWORD *)&unk_1EDD14000;
      v15 = v74;
      a2 = v82;
    }
    if (v16[2757])
    {
      v77 = a1;
      v83 = a2;
      v73 = v25[v17];
      v35 = v11;
      v36 = v15;
      x_stream_printf((uint64_t)&v88, "  candidate: %u %u %u\n", (uint64_t)initialized, 3, (uint64_t)init_debug, (uint64_t)"  candidate: %u %u %u\n", a7, a8, v73);
      v24 = "  candidate: %u %u %u\n";
      v22 = init_debug;
      v21 = 3;
      v20 = initialized;
      a1 = v77;
      a2 = v83;
      v16 = (_BYTE *)&unk_1ECDC6000;
      v14 = (_QWORD *)&unk_1EDD14000;
      v15 = v36;
      v11 = v35;
    }
    if (v11 <= v31)
      v33 = v31;
    else
      v33 = v11;
    if (v12 >= v32)
      v34 = v32;
    else
      v34 = v12;
    if (v33 > v34)
      break;
    if (v14[131] != -1)
    {
      v78 = a1;
      v84 = a2;
      v37 = v15;
      v38 = v14;
      v39 = v16;
      dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
      v24 = "  candidate: %u %u %u\n";
      v22 = init_debug;
      v21 = 3;
      v20 = initialized;
      a1 = v78;
      a2 = v84;
      v16 = v39;
      v14 = v38;
      v15 = v37;
    }
    if (v16[2757])
    {
      v79 = a1;
      v85 = a2;
      v40 = v15;
      v41 = v14;
      v42 = v16;
      x_stream_printf((uint64_t)&v88, "    update result: %u %u\n", (uint64_t)initialized, 3, (uint64_t)init_debug, (uint64_t)"  candidate: %u %u %u\n", a7, a8, v33);
      v24 = "  candidate: %u %u %u\n";
      v22 = init_debug;
      v21 = 3;
      v20 = initialized;
      a1 = v79;
      a2 = v85;
      v16 = v42;
      v14 = v41;
      v15 = v40;
      v19 = v41[131];
    }
    else
    {
      v19 = -1;
    }
    v17 += 3;
    v11 = v33;
    v12 = v34;
    --v23;
  }
  while (v23);
  v44 = v27 == 4 && v28 == 5;
  if ((_DWORD)v12 == -1 && !(_DWORD)v11)
  {
LABEL_5:
    v12 = 0;
    return v11 | (unint64_t)(v12 << 32);
  }
  v45 = 0;
  v46 = 8;
  do
  {
    v47 = *(unsigned int *)(*(_QWORD *)a1 + v46);
    if (v47 >= v11
      && v47 <= v12
      && v45 - 1 >= v47)
    {
      if (v14[131] != -1)
      {
        v80 = a1;
        v86 = a2;
        v50 = v11;
        v51 = v15;
        v52 = v14;
        v53 = v16;
        dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
        a1 = v80;
        a2 = v86;
        v16 = v53;
        v14 = v52;
        v15 = v51;
        v11 = v50;
      }
      if (v16[2757])
      {
        v81 = a1;
        v87 = a2;
        v54 = v11;
        v55 = v15;
        v56 = v14;
        v57 = v16;
        x_stream_printf((uint64_t)&v88, "  explicit preference for %u\n", (uint64_t)v20, v21, (uint64_t)v22, (uint64_t)v24, a7, a8, v47);
        a1 = v81;
        a2 = v87;
        v16 = v57;
        v14 = v56;
        v15 = v55;
        v11 = v54;
      }
      v45 = v47;
    }
    v46 += 12;
    --v18;
  }
  while (v18);
  if (v44)
  {
    v58 = (_DWORD)v11 == 3 && v45 == 0;
    v59 = v58;
    if (v45 == 3 || v59)
    {
      LODWORD(v11) = 2;
      v12 = 2;
      v45 = 2;
    }
  }
  if (v14[131] != -1)
  {
    v63 = a2;
    v64 = v11;
    v65 = v15;
    v66 = v16;
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
    v16 = v66;
    v15 = v65;
    LODWORD(v11) = v64;
    a2 = v63;
  }
  if (v16[2757])
  {
    v67 = v15;
    v68 = v11;
    v69 = a2;
    v70 = x_stream_finish((uint64_t)&v88);
    if (v70)
    {
      v71 = v70;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v72 = x_log_category_frame_rate;
        if (os_log_type_enabled((os_log_t)x_log_category_frame_rate, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136316418;
          v92 = v69;
          v93 = 2048;
          v94 = v67;
          v95 = 1024;
          v96 = v68;
          v97 = 1024;
          v98 = v12;
          v99 = 1024;
          v100 = v45;
          v101 = 2080;
          v102 = v71;
          _os_log_impl(&dword_184457000, v72, OS_LOG_TYPE_DEFAULT, "%sarbitration among %ld clients yields min:%u max:%u preferred:%u\n%s", buf, 0x32u);
        }
      }
      free(v71);
    }
    LODWORD(v11) = v68;
  }
  return v11 | (unint64_t)(v12 << 32);
}

unint64_t CA::FrameRateRangeGroup::fps_range_to_frame_interval_range(CA::FrameRateRangeGroup *this, CAFrameRateRange a2)
{
  if (*((_QWORD *)this + 1))
    return CA::Display::DisplayTimingsControl::fps_range_to_frame_interval_range(*((CA::Display::DisplayTimingsControl **)this + 1), a2, 0);
  else
    return CAFrameRateRangeToFrameIntervalRange(a2, *((double *)this + 15), *((unsigned __int8 *)this + 128), *((_BYTE *)this + 129) & 1, (*((unsigned __int8 *)this + 129) >> 1) & 1, (*((unsigned __int8 *)this + 129) >> 2) & 1);
}

unint64_t CAFrameRateRangeToFrameIntervalRange(CAFrameRateRange a1, double a2, uint64_t a3, int a4, int a5, int a6)
{
  float preferred;
  float maximum;
  float minimum;
  uint64_t v15;
  unsigned int v16;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  preferred = a1.preferred;
  maximum = a1.maximum;
  minimum = a1.minimum;
  if (a1.minimum == 0.0 && a1.maximum == 0.0 && a1.preferred == 0.0 && (_DWORD)a3 != 1)
  {
    if (CAPrefers60HzAPT(void)::once[0] != -1)
      dispatch_once(CAPrefers60HzAPT(void)::once, &__block_literal_global_2);
    if (CAPrefers60HzAPT(void)::enabled)
    {
      minimum = 60.0;
      if (a5)
        maximum = 60.0;
      else
        maximum = 80.0;
      if (a5)
        preferred = 60.0;
      else
        preferred = 0.0;
    }
    else
    {
      minimum = 120.0;
      maximum = 120.0;
      preferred = 120.0;
    }
  }
  v15 = CAFrameRateToFrameInterval((int)maximum, a2, a3, a4, a5, a6);
  v16 = v15;
  v18 = preferred == 0.0 && maximum == 0.0 && minimum == 0.0;
  if (v18 || preferred != 0.0)
  {
    v19 = v15;
    if (maximum != preferred)
      v19 = CAFrameRateToFrameInterval((int)preferred, a2, a3, a4, a5, a6);
  }
  else
  {
    v19 = 0;
  }
  v20 = v19;
  if (preferred != minimum)
    v20 = CAFrameRateToFrameInterval((int)minimum, a2, a3, a4, a5, a6);
  return v16 | (unint64_t)(v20 << 32);
}

uint64_t CAFrameRateToFrameInterval(int a1, double a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6;
  int v7;
  double v8;
  float v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;

  v6 = a3;
  if (a2 == 0.0)
    a2 = 0.0166666667;
  v7 = a5 | a6;
  if (a1)
  {
    v8 = (double)a3;
    if (!v7)
      v8 = 1.0;
    v9 = 1.0 / (v8 * ((double)a1 * a2)) + -0.00100000005;
    v10 = llroundf(v9);
    if (v10 <= 1)
      v10 = 1;
  }
  else if (a4)
  {
    if ((dyld_program_sdk_at_least() & 1) != 0)
      v10 = 1;
    else
      v10 = 2 * v6;
  }
  else
  {
    v10 = 1;
  }
  if (v7)
    v11 = v6;
  else
    v11 = 1;
  v12 = v10 * v11;
  if (v12 <= (int)v6)
    v12 = v6;
  if (!v12)
    __assert_rtn("CAFrameIntervalValidInterval", "CATimingReference.cpp", 111, "frame_interval != 0");
  v13 = 0;
  while (frame_interval_table[v13] <= v12)
  {
    if (++v13 == 21)
      return v6;
  }
  return frame_interval_table[v13 - 1];
}

float CAFrameIntervalRangeToFrameRateRange(CAFrameIntervalRange a1, double a2)
{
  unsigned int var2;
  unsigned int var0;
  float v5;

  var2 = a1.var2;
  var0 = a1.var0;
  v5 = (float)CAFrameIntervalToFrameRate(a1.var1, a2);
  CAFrameIntervalToFrameRate(var0, a2);
  CAFrameIntervalToFrameRate(var2, a2);
  return v5;
}

int CAFrameIntervalToFrameRate(int result, double a2)
{
  float v2;

  if (result < 0)
    __assert_rtn("CAFrameIntervalToFrameRate", "CATimingReference.cpp", 443, "frame_interval >= 0");
  if (result)
  {
    v2 = 1.0 / ((double)result * a2);
    return llroundf(v2);
  }
  return result;
}

uint64_t CARenderServerGetServerPort(char *service_name)
{
  mach_port_t v2;
  uint64_t v3;
  unsigned int *v4;
  ipc_space_t *v5;
  mach_error_t v6;
  mach_port_t *v7;
  kern_return_t v8;
  uint64_t v9;
  mach_port_t v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  uint64_t v14;
  const char *v15;
  mach_error_t v17;
  char *v18;
  mach_port_t sp;
  const char *v20;
  __int16 v21;
  kern_return_t v22;
  __int16 v23;
  const char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (force_local_server(void)::once[0] != -1)
    dispatch_once(force_local_server(void)::once, &__block_literal_global_6260);
  if (!force_local_server(void)::_force_local_server)
  {
    if (service_name)
    {
      v2 = *MEMORY[0x1E0C81720];
      if ((*MEMORY[0x1E0C81720] - 1) > 0xFFFFFFFD)
        return 0;
      sp = 0;
      if (bootstrap_look_up(v2, service_name, &sp))
        return 0;
      else
        return sp;
    }
    os_unfair_lock_lock((os_unfair_lock_t)&_CARenderServerGetCachedDefaultServerPort(void)::default_server_port_lock);
    v4 = (unsigned int *)&unk_1ECDC7000;
    if (_CARenderServerGetCachedDefaultServerPort(void)::default_server_port)
    {
      sp = 0;
      v5 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
      v6 = mach_port_type(*MEMORY[0x1E0C83DA0], _CARenderServerGetCachedDefaultServerPort(void)::default_server_port, &sp);
      if (v6)
      {
        v17 = v6;
        v18 = mach_error_string(v6);
        x_log_crash("Failed to get server port type (%x) - %s", v17, v18);
        abort();
      }
      if ((sp & 0x100000) != 0)
      {
        mach_port_deallocate(*v5, _CARenderServerGetCachedDefaultServerPort(void)::default_server_port);
        _CARenderServerGetCachedDefaultServerPort(void)::default_server_port = 0;
        _CARenderServerGetCachedDefaultServerPort(void)::default_server_port_initialized = 0;
      }
    }
    if ((_CARenderServerGetCachedDefaultServerPort(void)::default_server_port_initialized & 1) != 0)
      goto LABEL_14;
    v7 = (mach_port_t *)MEMORY[0x1E0C81720];
    if ((*MEMORY[0x1E0C81720] - 1) >= 0xFFFFFFFE)
    {
      if (x_log_hook_p())
        goto LABEL_24;
      v9 = x_log_category_render;
      if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
        goto LABEL_30;
      v10 = *v7;
      sp = 67109120;
      LODWORD(v20) = v10;
      v11 = "Invalid bootstrap port (%d)";
      v12 = v9;
      v13 = 8;
    }
    else
    {
      if (CADeviceIsSystemSessionClient::once != -1)
        dispatch_once(&CADeviceIsSystemSessionClient::once, &__block_literal_global_271);
      if (CADeviceIsSystemSessionClient::enabled && xpc_user_sessions_enabled())
      {
        xpc_user_sessions_get_foreground_uid();
        v8 = bootstrap_look_up_per_user();
        v4 = (_DWORD *)&unk_1ECDC7000;
        if (!v8)
          goto LABEL_37;
      }
      else
      {
        v8 = bootstrap_look_up(*v7, "com.apple.CARenderServer", (mach_port_t *)&_CARenderServerGetCachedDefaultServerPort(void)::default_server_port);
        if (!v8)
        {
LABEL_37:
          _CARenderServerGetCachedDefaultServerPort(void)::default_server_port_initialized = 1;
LABEL_14:
          mach_port_mod_refs(*MEMORY[0x1E0C83DA0], v4[861], 0, 1);
          v3 = v4[861];
LABEL_31:
          os_unfair_lock_unlock((os_unfair_lock_t)&_CARenderServerGetCachedDefaultServerPort(void)::default_server_port_lock);
          return v3;
        }
      }
      if (x_log_hook_p())
      {
        bootstrap_strerror(v8);
LABEL_24:
        x_log_();
LABEL_30:
        v3 = 0;
        goto LABEL_31;
      }
      v14 = x_log_category_render;
      if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
        goto LABEL_30;
      v15 = bootstrap_strerror(v8);
      sp = 136315650;
      v20 = "com.apple.CARenderServer";
      v21 = 1024;
      v22 = v8;
      v23 = 2080;
      v24 = v15;
      v11 = "Service \"%s\" failed bootstrap look up (%x) - %s";
      v12 = v14;
      v13 = 28;
    }
    _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&sp, v13);
    goto LABEL_30;
  }
  v3 = CA::Render::Server::server_port((CA::Render::Server *)service_name);
  if ((_DWORD)v3)
    mach_port_mod_refs(*MEMORY[0x1E0C83DA0], v3, 0, 1);
  return v3;
}

uint64_t CA::DynamicFrameRateSource::frame_interval_range_adapt_to_server_interval(CA::Display::DisplayTimingsControl **this, CAFrameIntervalRange a2, uint64_t a3)
{
  unsigned int var2;
  uint64_t v4;
  uint64_t v6;
  CAFrameIntervalRange v8;

  var2 = a2.var2;
  v4 = *(_QWORD *)&a2.var0;
  v6 = CA::Display::DisplayTimingsControl::server_frame_interval(this[1], a3);
  v8.var2 = var2;
  *(_QWORD *)&v8.var0 = v4;
  return CAFrameIntervalRangeAdaptToFrameInterval(v8, v6, (*((unsigned __int8 *)this[1] + 233) >> 1) & 1);
}

void CA::Display::DisplayTimingsControl::register_frame_interval_range(os_unfair_lock_s *this, CAFrameIntervalRange a2)
{
  unsigned int var2;
  uint64_t v3;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CAFrameIntervalRange v13;

  if ((this[58]._os_unfair_lock_opaque & 0x200) != 0)
  {
    var2 = a2.var2;
    v3 = *(_QWORD *)&a2.var0;
    v5 = this + 23;
    os_unfair_lock_lock(this + 23);
    v13.var2 = var2;
    *(_QWORD *)&v13.var0 = v3;
    CA::Display::DisplayTimingsControl::_register_frame_interval_range((CA::Display::DisplayTimingsControl *)this, v13);
    CA::Display::DisplayTimingsControl::update_frame_interval_request((CA::Display::DisplayTimingsControl *)this, v6, v7, v8, v9, v10, v11, v12);
    os_unfair_lock_unlock(v5);
  }
}

void sub_18453E480(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void CA::Display::DisplayTimingsControl::_register_frame_interval_range(CA::Display::DisplayTimingsControl *this, CAFrameIntervalRange a2)
{
  char *v2;
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  CAFrameIntervalRange v16;
  uint8_t buf[8];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v16 = a2;
  if (!a2.var0)
  {
    if (x_log_hook_p())
    {
LABEL_6:
      x_log_();
      return;
    }
    v11 = x_log_category_windowserver;
    if (!os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v12 = "CAFrameIntervalRange.minimum = 0 should not be registered.";
    v13 = v11;
    v14 = OS_LOG_TYPE_ERROR;
LABEL_22:
    _os_log_impl(&dword_184457000, v13, v14, v12, buf, 2u);
    return;
  }
  v4 = (char *)*((_QWORD *)this + 14);
  v3 = (char *)*((_QWORD *)this + 15);
  v2 = (char *)this + 112;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 2);
  if (v5 >= 0x20)
  {
    if (x_log_hook_p())
      goto LABEL_6;
    v15 = x_log_category_windowserver;
    if (!os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v12 = "CADisplayTimingsControl too many requests.";
    v13 = v15;
    v14 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_22;
  }
  if (v3 == v4)
    goto LABEL_17;
  do
  {
    v6 = v5 >> 1;
    v7 = (unsigned int *)&v4[12 * (v5 >> 1)];
    if (*v7 > a2.var0)
      goto LABEL_15;
    if (*v7 != a2.var0)
      goto LABEL_14;
    v8 = *(_DWORD *)&v4[12 * v6 + 4];
    if (v8 > a2.var1)
      goto LABEL_15;
    if (v8 == a2.var1)
    {
      v9 = v5 + ~v6;
      v10 = (char *)(v7 + 3);
      if (*(_DWORD *)&v4[12 * v6 + 8] <= a2.var2)
      {
        v4 = v10;
        v6 = v9;
      }
    }
    else
    {
LABEL_14:
      v4 = (char *)(v7 + 3);
      v6 = v5 + ~v6;
    }
LABEL_15:
    v5 = v6;
  }
  while (v6);
  v3 = v4;
LABEL_17:
  std::vector<CAFrameIntervalRange>::insert((uint64_t)v2, v3, (unint64_t)&v16);
}

void CA::Display::DisplayTimingsControl::update_frame_interval_range(os_unfair_lock_s *this, CAFrameIntervalRange a2, CAFrameIntervalRange a3)
{
  unsigned int var2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CAFrameIntervalRange v16;
  CAFrameIntervalRange v17;

  if ((this[58]._os_unfair_lock_opaque & 0x200) != 0)
  {
    var2 = a3.var2;
    v4 = *(_QWORD *)&a3.var0;
    v5 = a2.var2;
    v6 = *(_QWORD *)&a2.var0;
    v8 = this + 23;
    os_unfair_lock_lock(this + 23);
    v16.var2 = v5;
    *(_QWORD *)&v16.var0 = v6;
    CA::Display::DisplayTimingsControl::_unregister_frame_interval_range((CA::Display::DisplayTimingsControl *)this, v16);
    v17.var2 = var2;
    *(_QWORD *)&v17.var0 = v4;
    CA::Display::DisplayTimingsControl::_register_frame_interval_range((CA::Display::DisplayTimingsControl *)this, v17);
    CA::Display::DisplayTimingsControl::update_frame_interval_request((CA::Display::DisplayTimingsControl *)this, v9, v10, v11, v12, v13, v14, v15);
    os_unfair_lock_unlock(v8);
  }
}

void sub_18453E714(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::Render::Server::server_port(CA::Render::Server *this)
{
  uint64_t result;
  ipc_space_t *v2;
  CA::Render::Server *inserted;
  mach_port_name_t v4;
  int v6;
  ipc_space_t v7;
  mach_port_name_t v8;
  mach_port_name_t v9;
  mach_port_name_t name;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  result = CA::Render::Server::_server_port[0];
  name = CA::Render::Server::_server_port[0];
  if (!CA::Render::Server::_server_port[0])
  {
    v2 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
    mach_port_allocate(*MEMORY[0x1E0C83DA0], 1u, &name);
    CA::Render::Server::port_set_qlimit(name);
    inserted = (CA::Render::Server *)mach_port_insert_right(*v2, name, name, 0x14u);
    v4 = name;
    while (!__ldaxr(CA::Render::Server::_server_port))
    {
      if (!__stlxr(v4, CA::Render::Server::_server_port))
      {
        v6 = 1;
        goto LABEL_7;
      }
    }
    v6 = 0;
    __clrex();
LABEL_7:
    v7 = *v2;
    v8 = name;
    if (v6)
    {
      v9 = CA::Render::Server::port_set(inserted);
      mach_port_move_member(v7, v8, v9);
    }
    else
    {
      mach_port_mod_refs(*v2, name, 1u, -1);
      mach_port_deallocate(*v2, name);
    }
    return CA::Render::Server::_server_port[0];
  }
  return result;
}

uint64_t CA::Render::SecureIndicatorLayer::visit_subclass(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1);
}

BOOL CA::Transform::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  double v5;
  double v6;

  if ((*(_BYTE *)(a1 + 144) & 0x10) == 0 && (*(_BYTE *)(a2 + 144) & 0x10) == 0)
  {
    if (((*(_BYTE *)(a2 + 144) ^ *(_BYTE *)(a1 + 144)) & 7) == 0
      && *(double *)(a1 + 128) == *(double *)(a2 + 128)
      && *(double *)(a1 + 96) == *(double *)(a2 + 96))
    {
      return *(double *)(a1 + 104) == *(double *)(a2 + 104);
    }
    return 0;
  }
  if (*(double *)a1 != *(double *)a2)
    return 0;
  v3 = 1;
  v4 = 15;
  while (v3 != 16)
  {
    v5 = *(double *)(a1 + 8 * v3);
    v6 = *(double *)(a2 + 8 * v3++);
    if (v5 != v6)
    {
      v4 = v3 - 2;
      return v4 > 0xE;
    }
  }
  return v4 > 0xE;
}

void CA::WindowServer::Server::render_for_time(uint64_t a1)
{
  double v1;
  char v2;
  char v3;
  float64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  double v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  int v27;
  size_t v28;
  char *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  double v37;
  double v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  _BOOL4 v42;
  _BOOL4 v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  char *v47;
  int32x4_t v48;
  CA::Shape **v49;
  __int32 v50;
  char *v51;
  __int32 v52;
  uint64_t v53;
  uint64_t v54;
  CA::Shape **v55;
  uint64_t v56;
  os_unfair_lock_s *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  _DWORD *v62;
  _DWORD *v63;
  int v64;
  const CA::Shape *v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  __int32 v70;
  unsigned int v71;
  unsigned int *v72;
  unint64_t v73;
  unsigned __int8 v74;
  int v75;
  uint64_t v76;
  double v77;
  unint64_t v78;
  unsigned int v79;
  int v81;
  const CA::Shape *v82;
  _DWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unsigned __int8 v87;
  uint64_t v88;
  double v89;
  unsigned __int8 v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  unint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  unint64_t v103;
  int v104;
  CA::OGL::Renderer *v105;
  __IOSurface *v106;
  float64_t v107;
  __int128 v108;
  __int128 *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  int v113;
  double v114;
  uint64_t v115;
  double v116;
  uint64_t v117;
  BOOL *v118;
  __int16 v119;
  const CA::Shape *v120;
  int64x2_t v121;
  CA::Render::LayerNode *v122;
  __n128 v123;
  double v124;
  unsigned int v125;
  float v126;
  double v127;
  CAFrameRateRangeGroup *v128;
  __int16 v129;
  unsigned int v130;
  unint64_t v131;
  unsigned __int32 *v132;
  int v133;
  uint64_t v134;
  double v135;
  float v136;
  uint64_t v137;
  _BOOL4 v138;
  int v139;
  double v140;
  _BOOL4 v141;
  int v142;
  __n128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  CA::Shape *v147;
  _DWORD *v148;
  uint64_t v149;
  _DWORD *v150;
  const CA::Shape *v151;
  _DWORD *v152;
  const CA::Shape *v153;
  uint64_t v154;
  const CA::Bounds *v155;
  uint64_t v156;
  int v157;
  const CA::Shape *v158;
  uint64_t v160;
  BOOL v161;
  uint64_t v162;
  int v163;
  int v164;
  uint64_t v165;
  double v166;
  int v167;
  int v168;
  unint64_t v169;
  CA::Shape *v170;
  os_unfair_lock_s *v171;
  double v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  const CA::Bounds *v177;
  CA::Render::LayerNode *v178;
  float *v179;
  _BYTE *v180;
  int v181;
  double v182;
  BOOL v183;
  uint64_t v184;
  uint64_t v185;
  CA::Render::LayerNode *v186;
  int32x4_t v187;
  int v188;
  int v189;
  os_unfair_lock_s *v190;
  BOOL v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  BOOL v196;
  int v197;
  uint64_t v198;
  unsigned __int8 *v199;
  int v200;
  uint64_t v201;
  BOOL v202;
  int v203;
  float v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  double v208;
  NSObject *v209;
  uint64_t v210;
  int v211;
  BOOL v212;
  uint64_t v213;
  uint64_t v214;
  double v215;
  unsigned int *v216;
  unsigned __int32 *v217;
  double v221;
  float v222;
  double v223;
  pthread_mutex_t *stream_and_lock;
  float *v225;
  pthread_mutex_t *v226;
  float v227;
  CA::Shape **v228;
  unsigned int *v229;
  unsigned int *v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  unint64_t v234;
  CA::Render::ContentStream *v235;
  CA::Render::Context **v236;
  CA::Render::Context **v237;
  pthread_mutex_t *v238;
  uint64_t v239;
  float64x2_t *v240;
  uint64_t v241;
  uint64_t v242;
  __IOSurface *v243;
  __IOSurface *v244;
  int v245;
  uint64_t v246;
  float *v247;
  __IOSurface *v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  int v252;
  OpaqueVTPixelTransferSession **v253;
  int v254;
  __IOSurface *v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  int v263;
  CA::Render::ContentStream *v264;
  OpaqueVTPixelTransferSession **v265;
  OpaqueVTPixelTransferSession **v266;
  unint64_t v267;
  __int128 v268;
  CA::Render::ContentStream *v269;
  __IOSurface *v270;
  uint64_t v271;
  __int128 v272;
  CA::Render::Context **v273;
  CA::Render::Context **v274;
  int32x4_t v275;
  uint64_t v276;
  CA::Render::Layer *v277;
  int64x2_t v278;
  int32x2_t v279;
  int8x16_t v281;
  uint32x2_t v282;
  unsigned __int32 v283;
  uint32x2_t v284;
  unsigned __int32 v285;
  int32x2_t v286;
  int v287;
  int32x4_t v288;
  CA::Render::Context **v289;
  uint64_t v290;
  uint64_t v291;
  char v292;
  int v293;
  int64x2_t v294;
  float64x2_t v295;
  int v296;
  float32x2_t v297;
  uint64_t v298;
  float64x2_t v299;
  float32x2_t v300;
  float32x2_t v301;
  BOOL v302;
  uint64_t v304;
  uint64_t v305;
  double v306;
  __int128 *v307;
  char v308;
  float64_t v309;
  uint32x2_t v310;
  uint64_t v311;
  uint64x2_t v312;
  int32x2_t v313;
  uint32x2_t v314;
  int32x2_t v315;
  int32x2_t v316;
  __int128 v317;
  int32x2_t v318;
  uint32x2_t v319;
  unsigned int v320;
  unsigned int v321;
  uint32x2_t v322;
  uint32x2_t v323;
  int32x2_t v324;
  int32x2_t v325;
  int32x2_t v326;
  uint32x2_t v327;
  _DWORD *v328;
  uint64_t v329;
  double *v330;
  unsigned int *v331;
  unint64_t v332;
  unint64_t v333;
  unsigned int v334;
  unsigned int v335;
  BOOL v336;
  int v337;
  float64x2_t v338;
  double v339;
  double v340;
  double v341;
  unsigned int v342;
  unsigned int v343;
  BOOL v344;
  int v345;
  unsigned int v346;
  unsigned int v347;
  double v348;
  double v349;
  unsigned int v350;
  unsigned int v351;
  float *v352;
  float *v353;
  int64x2_t v354;
  int32x2_t v355;
  int64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  int64x2_t v359;
  unsigned int *v360;
  unint64_t v361;
  int v362;
  int v363;
  unint64_t v364;
  _OWORD *v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  CA::Render::LayerNode *v369;
  const CA::Shape *v370;
  unsigned int *v371;
  unsigned int *v372;
  int64x2_t v373;
  uint64_t v374;
  unsigned int v375;
  unsigned int *v376;
  unsigned int *v377;
  int v378;
  uint64_t v379;
  CA::Render::Context *v380;
  pthread_mutex_t *v381;
  const CA::Transform *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  const double *v386;
  uint64_t v387;
  CA::Render::Layer *v388;
  unsigned int *v389;
  unsigned int v390;
  unsigned int v391;
  BOOL v392;
  int v393;
  int v394;
  int v395;
  void *v396;
  CGColorSpace *v397;
  CGColorSpace *v398;
  const CA::Shape *v399;
  CA::OGL::Renderer *v400;
  __n128 v401;
  CA::WindowServer::SharedEvent *v402;
  CA::Shape *v403;
  uint64_t v404;
  _QWORD *v405;
  int v406;
  _QWORD *v407;
  CA::Render::ContentStream *v408;
  CA::Render::LayerNode *v409;
  float *v410;
  CA::Shape **v411;
  unsigned int v412;
  unsigned int v413;
  unsigned int v414;
  unsigned int v415;
  float *v416;
  int v417;
  uint64_t v418;
  char v419;
  _QWORD *v420;
  uint64_t v421;
  uint64_t v422;
  float *v423;
  _QWORD *v424;
  uint64_t v425;
  uint64_t v426;
  __IOSurface *v427;
  __IOSurface *v428;
  __IOSurface *v429;
  __IOSurface *v430;
  int v431;
  float v432;
  float v433;
  int32x4_t v434;
  int64x2_t v435;
  int32x2_t v436;
  uint32x2_t v437;
  uint32x2_t v438;
  int32x2_t v439;
  int32x4_t v440;
  int32x2_t v441;
  uint32x2_t v442;
  CA::Render::Context **v443;
  CA::Shape **v444;
  unsigned int *v445;
  unsigned int *v446;
  unsigned int v447;
  unsigned int v448;
  CA::Shape **v449;
  int v450;
  __IOSurface *v451;
  uint64_t v452;
  unint64_t v453;
  int v454;
  _DWORD *v455;
  double v456;
  unint64_t v457;
  double v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  double *v465;
  __CFDictionary *Mutable;
  __CFDictionary *v467;
  const void *v468;
  CFStringRef v469;
  CFStringRef v470;
  unint64_t v471;
  const CFArrayCallBacks *v472;
  __CFArray *v473;
  const void *v474;
  const void *v475;
  __CFDictionary *v476;
  __CFDictionary *v477;
  const void *v478;
  __CFArray *v479;
  __CFArray *v480;
  uint64_t i;
  const void *v482;
  CA::Render::ContentStream *v483;
  char *v484;
  CA::Render::HitTestTree *v485;
  BOOL v486;
  uint64_t v487;
  double **v488;
  double *v489;
  int v490;
  double *v491;
  uint64_t v492;
  CA::Render::LayerNode *v493;
  uint64_t v494;
  const __CFString *v495;
  int AppIntegerValue;
  int v497;
  int v498;
  uint64_t v499;
  double v500;
  double v501;
  double v502;
  double v503;
  int v504;
  int v505;
  signed int v506;
  NSObject *v507;
  CA::Shape *v508;
  BOOL v509;
  _QWORD *v510;
  uint64_t j;
  unsigned int *v512;
  unsigned int *v513;
  unsigned int v514;
  unsigned int v515;
  uint64_t v516;
  double v517;
  uint64_t v518;
  BOOL v519;
  uint64_t v520;
  double v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v525;
  uint64_t v526;
  double v527;
  uint64_t v528;
  BOOL v529;
  int v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t *v533;
  NSObject *v534;
  int v535;
  int v536;
  int v537;
  int v538;
  int v539;
  int v540;
  int v541;
  int v542;
  int v543;
  const char *v544;
  const char *v545;
  int v546;
  int v547;
  int v548;
  int v549;
  int v550;
  int v551;
  int v552;
  CFStringRef v553;
  _DWORD *v554;
  __CFDictionary *v555;
  uint64_t v556;
  int v557;
  void *v558;
  unsigned int v559;
  BOOL v560;
  uint64_t v561;
  CA::Render *v562;
  void **v563;
  char *v564;
  int v565;
  __int128 v566;
  uint64_t v567;
  char *v568;
  int v569;
  unsigned int v570;
  int v572;
  NSObject *v573;
  const char *v574;
  _BOOL4 v575;
  int v576;
  void *v577;
  unsigned int v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  os_log_t v582;
  uint64_t *v583;
  int v584;
  os_unfair_lock_s *v585;
  char *v586;
  unint64_t v587;
  _BOOL4 v588;
  uint64_t v589;
  int v590;
  pthread_mutex_t *v591;
  uint64_t v592;
  void *v593;
  os_signpost_id_t v594;
  unint64_t v595;
  CA::Shape **v596;
  int v597;
  uint64_t v598;
  int v599;
  __int128 v600;
  _QWORD *v601;
  int32x4_t v602;
  float64_t v603;
  uint64_t v604;
  __int128 *v605;
  double v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  float64x2_t v610;
  CA::OGL::Renderer *v611;
  __IOSurface *v612;
  unsigned __int32 *v613;
  float64x2_t *v614;
  int64x2_t v615;
  _QWORD *v616;
  uint64_t v617;
  _QWORD *v618;
  __int128 v619;
  _DWORD *v620;
  os_unfair_lock_t v621[3];
  uint64_t v622;
  CA::Shape **v623;
  uint64_t v624;
  float64x2_t v625;
  int v626;
  uint64_t v627;
  uint64_t v628;
  int32x4_t v629;
  unsigned int v630;
  int32x4_t v631;
  OpaqueVTPixelTransferSession ***v632;
  __int128 v633;
  _QWORD v634[3];
  unsigned int v635;
  int32x2_t v636[2];
  __int16 v637;
  int v638;
  float16x4_t v639;
  _BYTE v640[128];
  __int128 v641;
  __int128 v642;
  uint64_t v643;
  _QWORD v644[2];
  float64x2_t v645[9];
  void (**v646)(CA::WindowServer::_anonymous_namespace_::RenderDisplayDelegate *__hidden);
  _QWORD v647[5];
  __int128 v648;
  float64x2_t v649;
  float64x2_t v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  float64x2_t v656;
  uint64_t v657;
  _OWORD v658[2];
  __int128 v659;
  _OWORD v660[2];
  __int128 v661;
  __int128 v662;
  __int128 v663;
  unint64_t v664[2];
  CA::Shape *v665;
  double v666;
  double v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  unint64_t v671;
  double v672;
  double v673;
  double v674;
  uint64_t v675;
  uint64_t v676;
  CAFrameRateRangeGroup *v677;
  _QWORD v678[4];
  unsigned int v679;
  int v680;
  int v681;
  int v682;
  unsigned int v683;
  uint64_t v684;
  uint64_t v685;
  int v686;
  double v687;
  double v688;
  int v689;
  unsigned int v690;
  double v691;
  double v692;
  double v693;
  double v694;
  double v695;
  double *v696;
  uint64_t v697;
  float v698;
  uint64_t v699;
  uint64_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  __int128 v708;
  float64x2_t v709;
  uint64_t v710;
  float v711[32];
  float64x2_t v712;
  _BYTE v713[24];
  uint64_t v714;
  uint64_t v715;
  int v716;
  int v717;
  uint64_t v718;
  void (***v719)(CA::WindowServer::_anonymous_namespace_::RenderDisplayDelegate *__hidden);
  int v720;
  uint64_t v721;
  float64x2_t v722[3];
  __int128 v723;
  __int128 v724;
  __int128 v725;
  __int128 v726;
  __int128 v727;
  float64x2_t v728;
  uint64_t v729;
  CA::Render::Context **v730;
  CA::Shape **v731;
  CA::Shape **v732;
  unint64_t v733;
  _QWORD v734[35];

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v624 = v5;
  v625.f64[0] = v4;
  v7 = v6;
  v8 = v1;
  v10 = v9;
  v734[32] = *MEMORY[0x1E0C80C00];
  v11 = (void *)MEMORY[0x186DBE2E4]();
  v638 = 0;
  CARecordCurrentDisplay::CARecordCurrentDisplay((CARecordCurrentDisplay *)&v638, *(_DWORD *)(*(_QWORD *)(v10 + 96) + 24));
  v631.i64[0] = mach_absolute_time();
  v12 = *(_QWORD *)(v10 + 96);
  if (*(_QWORD *)(v12 + 48))
    v13 = (*(unsigned __int8 *)(v12 + 56) >> 5) & 1;
  else
    LOBYTE(v13) = 0;
  if (*(_BYTE *)(v10 + 512) || (v13 & 1) != 0)
    goto LABEL_763;
  v14 = mach_absolute_time();
  v722[0] = 0uLL;
  mach_get_times();
  v603 = v722[0].f64[1];
  *(double *)&v15 = CATimeWithHostTime(*(unint64_t *)&v722[0].f64[0]);
  do
  {
    v16 = __ldaxr(CA::Render::Update::_update_counter);
    v17 = (_QWORD *)(v16 + 1);
  }
  while (__stlxr(v17, CA::Render::Update::_update_counter));
  pthread_mutex_lock((pthread_mutex_t *)(v10 + 24));
  if (*(_BYTE *)(v10 + 513))
  {
    pthread_mutex_unlock((pthread_mutex_t *)(v10 + 24));
    goto LABEL_762;
  }
  v616 = v17;
  v628 = v10;
  v592 = v14;
  v593 = v11;
  v591 = (pthread_mutex_t *)(v10 + 24);
  if (BYTE13(xmmword_1ECDC6AD0))
  {
    if (CA::WindowServer::server_perf_log(void)::once_token[0] != -1)
      dispatch_once(CA::WindowServer::server_perf_log(void)::once_token, &__block_literal_global_181);
    v582 = (os_log_t)CA::WindowServer::server_perf_log(void)::log;
    v594 = os_signpost_id_generate((os_log_t)CA::WindowServer::server_perf_log(void)::log);
    if (v594 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v582))
    {
      v10 = v628;
      v557 = *(_DWORD *)(*(_QWORD *)(v628 + 96) + 24);
      v558 = _MXSignpostMetricsSnapshot();
      LODWORD(v722[0].f64[0]) = 67240706;
      HIDWORD(v722[0].f64[0]) = v557;
      LOWORD(v722[0].f64[1]) = 1026;
      LODWORD(v17) = (_DWORD)v616;
      *(_DWORD *)((char *)&v722[0].f64[1] + 2) = (_DWORD)v616;
      HIWORD(v722[0].f64[1]) = 2114;
      *(_QWORD *)&v722[1].f64[0] = v558;
      _os_signpost_emit_with_name_impl(&dword_184457000, v582, OS_SIGNPOST_INTERVAL_BEGIN, v594, "Rendering", "display=%{public,name=display}u update=0x%{public,name=update}x\n%{public, signpost:metrics}@", (uint8_t *)v722, 0x18u);
    }
    else
    {
      LODWORD(v17) = (_DWORD)v616;
      v10 = v628;
    }
  }
  else
  {
    v594 = 0;
    v582 = 0;
  }
  kdebug_trace();
  v18 = (*(double (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 744))(*(_QWORD *)(v10 + 96));
  v584 = *(_DWORD *)(*(_QWORD *)(v10 + 96) + 24);
  v595 = CAHostTimeWithTime(v18);
  os_unfair_lock_lock((os_unfair_lock_t)(v10 + 152));
  v19 = *(_QWORD **)(v10 + 160);
  *(_QWORD *)(v10 + 160) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 152));
  if (v19)
  {
    v20 = 0;
    do
    {
      v21 = v20;
      v20 = v19;
      v19 = (_QWORD *)v19[1];
      v20[1] = v21;
    }
    while (v19);
    do
    {
      v22 = (_QWORD *)v20[1];
      (*(void (**)(_QWORD *, uint64_t))(*v20 + 16))(v20, v10);
      (*(void (**)(_QWORD *))(*v20 + 8))(v20);
      v20 = v22;
    }
    while (v22);
  }
  v621[0] = (os_unfair_lock_t)(v10 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v10 + 16));
  v24 = *(_QWORD *)(v10 + 128);
  v25 = *(_QWORD *)(v10 + 96);
  v26 = *(_BYTE *)(*(_QWORD *)(v25 + 728) + 1) != 1 || *(_QWORD *)(v25 + 640) == 0;
  if (!*(_QWORD *)(v25 + 48))
  {
    v27 = 0;
    if (!v26)
      goto LABEL_22;
    goto LABEL_21;
  }
  v27 = *(_BYTE *)(v25 + 56) & 1;
  if (v26)
LABEL_21:
    atomic_store(v15, &CA::Render::Context::_begin_time_threshold);
LABEL_22:
  *(_QWORD *)&v600 = v7;
  if (v24)
  {
    v587 = 8 * v24;
    if ((unint64_t)(8 * v24) > 0x1000)
    {
      v29 = (char *)malloc_type_malloc(8 * v24, 0x2109396CuLL);
    }
    else
    {
      MEMORY[0x1E0C80A78](v23);
      v29 = (char *)&v580 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v29, v28);
    }
    v32 = 0;
    v30 = 0;
    v33 = *(_QWORD *)(v10 + 112);
    v31 = 0.0;
    do
    {
      v34 = *(_QWORD *)(v33 + 16 * v32);
      v35 = (unsigned int *)(v34 + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 + 1, v35));
      *(_QWORD *)&v29[8 * v32] = v34;
      v37 = *(double *)(v34 + 624);
      if (v31 >= v37)
        v38 = *(double *)(v34 + 624);
      else
        v38 = v31;
      if (v31 == 0.0)
        v38 = *(double *)(v34 + 624);
      v33 = *(_QWORD *)(v10 + 112);
      if (v37 != 0.0)
        v31 = v38;
      v30 += ((unint64_t)*(unsigned int *)(*(_QWORD *)(v33 + 16 * v32++) + 12) >> 17) & 1;
    }
    while (v32 != v24);
  }
  else
  {
    v587 = 0;
    v30 = 0;
    v29 = 0;
    v31 = 0.0;
  }
  v596 = *(CA::Shape ***)(v10 + 176);
  *(_QWORD *)(v10 + 176) = 0;
  os_unfair_lock_unlock(v621[0]);
  if (CADeviceNeedsISPWorkaround::once[0] != -1)
    dispatch_once(CADeviceNeedsISPWorkaround::once, &__block_literal_global_73);
  if ((CADeviceNeedsISPWorkaround::isp_workaround & 1) != 0)
  {
    v39 = *(unsigned __int8 *)(v10 + 522);
    v40 = *(_QWORD *)(v10 + 96);
    if (*(_BYTE *)(v10 + 522))
      v39 = (*(_WORD *)(v40 + 656) & 0x1C00) == 1024;
  }
  else
  {
    v39 = 0;
    v40 = *(_QWORD *)(v10 + 96);
  }
  v41 = *(_DWORD *)(v40 + 745);
  if ((v41 & 0x2000) != 0)
  {
    v559 = v41;
    if (x_log_hook_p())
    {
      x_log_();
      v629.i32[0] = 0;
      v41 = v559;
    }
    else
    {
      *(_QWORD *)&v633 = x_log_category_flipbook;
      v575 = os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT);
      v629.i32[0] = 0;
      v41 = v559;
      if (v575)
      {
        LOWORD(v722[0].f64[0]) = 0;
        _os_log_impl(&dword_184457000, (os_log_t)v633, OS_LOG_TYPE_DEFAULT, "entering flipbook, disallowing detaching", (uint8_t *)v722, 2u);
        v41 = v559;
        v629.i32[0] = 0;
      }
    }
  }
  else
  {
    v629.i32[0] = v39 ^ 1;
  }
  LODWORD(v583) = v41;
  v599 = (v41 >> 13) & 1;
  v42 = *(_BYTE *)(v10 + 520) != 0;
  if (*(_BYTE *)(v10 + 520))
    *(_BYTE *)(v10 + 520) = 0;
  v598 = 0;
  v627 = 0;
  v604 = 0;
  v617 = 0;
  v626 = 0;
  v589 = v30;
  v43 = v24 == v30;
  v44 = *(unsigned __int8 *)(v10 + 521);
  *(_BYTE *)(v10 + 521) = 0;
  v45 = v24 == v30 || v26;
  v597 = (v45 | v27) ^ 1;
  if (!v29)
    v43 = 1;
  v590 = v27;
  LODWORD(v618) = v43 | v27;
  v630 = v3 & 1;
  v615.i64[0] = v630 << 10;
  v588 = v26;
  v46 = 0x80000;
  if (!(((unint64_t)v600 >> 26) & 1 | v26))
    v46 = 0;
  v614 = (float64x2_t *)v46;
  v611 = (CA::OGL::Renderer *)v660;
  v612 = (__IOSurface *)((char *)&v660[1] + 4);
  *(_QWORD *)&v610.f64[0] = (char *)&v662 + 12;
  v605 = (__int128 *)(v10 + 336);
  v623 = &v665;
  v601 = v678;
  v585 = (os_unfair_lock_s *)(v10 + 324);
  v586 = v29;
  v581 = v10 + 404;
  v47 = v29 - 8;
  LODWORD(v632) = 3;
  v48.i64[0] = -1;
  v48.i64[1] = -1;
  v602 = v48;
  *(_QWORD *)&v619 = 0x7FF0000000000000;
  v609 = xmmword_18474E010;
  v608 = xmmword_18474E020;
  *(_QWORD *)&v607 = 0xBFE999999999999ALL;
  v606 = 0.4;
  v49 = v596;
  v622 = v24;
  v50 = v42;
  v613 = (unsigned __int32 *)&v699;
  while (1)
  {
    if ((v618 & 1) != 0)
    {
      v598 = 0;
      v604 = 0;
      v617 = 0;
      v627 = 248;
      v187.i64[0] = -1;
      v187.i64[1] = -1;
      v602 = v187;
      v182 = INFINITY;
      v65 = (const CA::Shape *)v596;
LABEL_283:
      CA::WindowServer::Server::invalidate((os_unfair_lock_s *)v10, v65);
      v188 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 216))(*(_QWORD *)(v10 + 96));
      if ((v188 | v597) == 1 && (v617 |= 0x1000000uLL, v182 >= v8))
      {
        v632 = 0;
        v191 = v182 <= v8 || v8 == 0.0;
        v192 = v604 | 0x1000000;
        if (!v191)
          v192 = 0x1000000;
        v604 = v192;
        v189 = v627;
        v182 = v8;
      }
      else
      {
        v632 = 0;
        v189 = v627;
      }
      goto LABEL_645;
    }
    v51 = v47;
    v52 = v50;
    v53 = v44;
    v54 = v24;
    v55 = v49;
    v56 = *(_QWORD *)(v10 + 96);
    v57 = v621[0];
    os_unfair_lock_lock(v621[0]);
    v58 = *(double *)(v10 + 280);
    os_unfair_lock_unlock(v57);
    v59 = (*(uint64_t (**)(uint64_t, _QWORD, double, double))(*(_QWORD *)v56 + 352))(v56, v630, v8, v58);
    if ((_DWORD)v59)
    {
      v65 = (const CA::Shape *)v55;
      v627 = v59;
      v182 = *(double *)&v619;
      v24 = v54;
      goto LABEL_283;
    }
    v60 = mach_absolute_time();
    v61 = CATimeWithHostTime(v60);
    v62 = *(_DWORD **)(v10 + 96);
    bzero(v664, 0x430uLL);
    v63 = v62 + 50;
    LODWORD(v62) = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v62 + 360))(v62);
    v64 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 368))(*(_QWORD *)(v10 + 96));
    v578 = *(_DWORD *)(v10 + 184);
    v620 = v63;
    CA::Render::Update::Update((CA::Render::Update *)v664, (const CA::Bounds *)&v700, 0x2000uLL, v8, *(const CVTimeStamp **)&v625.f64[0], v17, (int)v62, v64, (const CA::Bounds *)v63, v578);
    v65 = (const CA::Shape *)v55;
    *(_QWORD *)&v633 = v55;
    if (!v664[0])
      break;
    v66 = *(_DWORD **)(v10 + 96);
    v67 = v54;
    if (v66[178] != v686)
    {
      v682 |= 4u;
      v66[178] = v686;
    }
    v68 = v628;
    (*(void (**)(_DWORD *, uint64_t, _QWORD, _QWORD, double, double))(*(_QWORD *)v66 + 376))(v66, v631.i64[0], v630, *(unsigned int *)(v628 + 288), v8, *(double *)&v15);
    v675 = v624;
    v69 = *(_DWORD **)(v68 + 96);
    v44 = v53;
    if ((v69[156] & 0x100) != 0)
    {
      v71 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v69 + 136))(v69);
      v70 = v52;
      v10 = v628;
      if (!v71)
        v71 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v628 + 96) + 784))(*(_QWORD *)(v628 + 96));
      v683 = vcvtad_u64_f64(1.0/ ((*(double (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 760))(*(_QWORD *)(v10 + 96))* (double)v71));
      v69 = *(_DWORD **)(v10 + 96);
    }
    else
    {
      v70 = v52;
      v10 = v628;
    }
    v47 = v51;
    v72 = v613;
    v73 = *v72 & 0xFFFFFB7F | ((unint64_t)*((unsigned __int16 *)v72 + 2) << 32) | v615.i64[0] | ((unint64_t)*(unsigned __int8 *)(v10 + 514) << 7);
    *v613 = *v613 & 0xFFFFFB7F | v615.i32[0] | (*(unsigned __int8 *)(v10 + 514) << 7);
    if (*(_BYTE *)(v10 + 515))
    {
      v74 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v69 + 1600))(v69);
      v73 = *v72 | ((unint64_t)*((unsigned __int16 *)v72 + 2) << 32);
      v75 = 0x100000;
      if (((v74 ^ 1) & v629.i8[0] & 1) == 0)
        v75 = 0;
      v69 = *(_DWORD **)(v10 + 96);
    }
    else
    {
      v75 = 0;
    }
    *((_WORD *)v72 + 2) = WORD2(v73);
    *v72 = v73 & 0xFFEFFFFF | v75;
    (*(void (**)(_DWORD *))(*(_QWORD *)v69 + 752))(v69);
    v77 = v692;
    if (v692 >= *(double *)&v15)
      v77 = *(double *)&v15;
    v692 = v77;
    v670 = v76;
    v671 = v15;
    v78 = *v72 & 0xFFF7FFFF | ((unint64_t)*((unsigned __int16 *)v72 + 2) << 32);
    *v72 = *v72 & 0xFFF7FFFF | v614;
    *((_WORD *)v72 + 2) = WORD2(v78);
    v672 = (*(double (**)(uint64_t))(*(_QWORD *)v10 + 472))(v10);
    v79 = *v72 & 0xFFFFE7FF | (*(unsigned __int8 *)(v10 + 524) << 11);
    if (byte_1ECDC6B07)
      _ZF = 1;
    else
      _ZF = *(_BYTE *)(v10 + 525) == 0;
    v81 = 4096;
    if (_ZF)
      v81 = 0;
    *((_WORD *)v72 + 2) = *((_WORD *)v72 + 2);
    *v72 = v81 | v79;
    v684 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 1392))(*(_QWORD *)(v10 + 96));
    v83 = *(_DWORD **)(v10 + 96);
    if (!BYTE14(xmmword_1ECDC6A70))
    {
      v84 = *v72;
      v85 = v84 & 0xFFFFFFFFFFDFFFFFLL | ((unint64_t)*((unsigned __int16 *)v72 + 2) << 32);
      *v72 = v84 & 0xFFDFFFFF | (v83[156] << 17) & 0x200000;
      *((_WORD *)v72 + 2) = WORD2(v85);
    }
    if ((v83[156] & 0x100) != 0)
    {
      v86 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v83 + 120))(v83);
      if (v86)
      {
        v87 = atomic_load((unsigned __int8 *)(*(_QWORD *)(v86 + 24) + 32));
        v88 = v87 & 1;
      }
      else
      {
        v88 = 0;
      }
      v89 = (*(double (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 760))(*(_QWORD *)(v10 + 96));
      v90 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 768))(*(_QWORD *)(v10 + 96));
      if (v677)
        __assert_rtn("initialize_frame_rate_range_group", "render-updater.cpp", 11206, "_frame_rate_range_group == nullptr");
      v677 = -[CAFrameRateRangeGroup initWithHeartbeatRate:minimumFrameDuration:supportsVRR:compatQuantaMode:serverCompatQuantaMode:]([CAFrameRateRangeGroup alloc], "initWithHeartbeatRate:minimumFrameDuration:supportsVRR:compatQuantaMode:serverCompatQuantaMode:", v90, 1, 0, v88, v89);
      v91 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 792))(*(_QWORD *)(v10 + 96));
      v92 = 0x1000000000;
      if (!v91)
        v92 = 0;
      v93 = (*v72 | ((unint64_t)*((unsigned __int16 *)v72 + 2) << 32)) & 0xFFFFFFEFFFFFFFFFLL | v92;
      *((_WORD *)v72 + 2) = WORD2(v93);
      v83 = *(_DWORD **)(v10 + 96);
      if ((v83[156] & 0x100) != 0)
      {
        *v72 = v93;
        *((_WORD *)v72 + 2) = (v93 | 0x800000000) >> 32;
      }
      v67 = v622;
    }
    v637 = 0;
    v50 = v629.i32[0] ^ 1 | v70;
    v636[1] = 0;
    v636[0] = 0;
    if ((v50 & 1) != 0)
      *v72 |= 0x20000u;
    if (v55)
    {
      CA::shape_union(v623, v55, v82);
      v83 = *(_DWORD **)(v10 + 96);
    }
    v94 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v83 + 552))(v83);
    v95 = *v72;
    v96 = 0x400000;
    if ((v94 & (v626 ^ 1)) == 0)
      v96 = 0;
    v97 = v95 & 0xFFFFFFFFFF3FFFFFLL | ((unint64_t)*((unsigned __int16 *)v72 + 2) << 32);
    v98 = v95 & 0xFF3FFFFF | v96;
    v99 = 0x800000;
    if ((v94 & (v626 ^ 1)) == 0)
      v99 = 0;
    *((_WORD *)v72 + 2) = WORD2(v97);
    *v72 = v98 | v99;
    if (CADeviceNeedsP3ShapeTracking::once != -1)
      dispatch_once(&CADeviceNeedsP3ShapeTracking::once, &__block_literal_global_42);
    v100 = *v72;
    v101 = v100 & 0xFFFFFFFFFEFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v72 + 2) << 32);
    *v72 = v100 & 0xFEFFFFFF | (CADeviceNeedsP3ShapeTracking::p3_tracking << 24);
    *((_WORD *)v72 + 2) = WORD2(v101);
    v102 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 560))(*(_QWORD *)(v10 + 96));
    v103 = *v72 & 0xF9FFFFFF | ((unint64_t)*((unsigned __int16 *)v72 + 2) << 32);
    v104 = 0x4000000;
    if (v102)
      v104 = 100663296;
    *v72 = v104 | *v72 & 0xF9FFFFFF;
    *((_WORD *)v72 + 2) = WORD2(v103);
    v658[0] = 0u;
    *(_QWORD *)&v662 = 0;
    v661 = 0u;
    memset(v660, 0, sizeof(v660));
    *(_OWORD *)((char *)v658 + 12) = v609;
    HIDWORD(v658[1]) = 1065353216;
    v659 = v608;
    v105 = v611;
    *(_QWORD *)v611 = 0;
    *((_WORD *)v105 + 4) = 0;
    *(_QWORD *)((char *)v660 + 12) = 0x100000001;
    v106 = v612;
    *(_OWORD *)v612 = 0u;
    *((_OWORD *)v106 + 1) = 0u;
    *((_BYTE *)v106 + 32) = 0;
    v107 = v610.f64[0];
    **(_QWORD **)&v610.f64[0] = 0;
    *(_QWORD *)(*(_QWORD *)&v107 + 8) = 0;
    DWORD2(v662) = 1065353216;
    HIDWORD(v663) = -1;
    (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 1072))(*(_QWORD *)(v10 + 96));
    CA::WindowServer::Display::reconciled_display_attributes((CA::WindowServer::Display *)v658, *(_QWORD *)(v10 + 96));
    CA::Render::Update::set_display_attributes((uint64_t)v664, (float *)v658);
    if (*(float *)(v10 + 336) != *(float *)v658
      || *(float *)(v10 + 340) != *((float *)v658 + 1)
      || *(float *)(v10 + 348) != *((float *)v658 + 3)
      || *(float *)(v10 + 352) != *(float *)&v658[1]
      || *(float *)(v10 + 356) != *((float *)&v658[1] + 1)
      || *(float *)(v10 + 360) != *((float *)&v658[1] + 2)
      || *(float *)(v10 + 364) != *((float *)&v658[1] + 3)
      || *(double *)(v10 + 368) != *(double *)&v659
      || *(double *)(v10 + 376) != *((double *)&v659 + 1)
      || *(unsigned __int8 *)(v10 + 384) != LOBYTE(v660[0])
      || *(unsigned __int8 *)(v10 + 385) != BYTE1(v660[0])
      || *(unsigned __int8 *)(v10 + 386) != BYTE2(v660[0])
      || *(unsigned __int8 *)(v10 + 387) != BYTE3(v660[0])
      || *(unsigned __int8 *)(v10 + 388) != BYTE4(v660[0])
      || *(unsigned __int8 *)(v10 + 389) != BYTE5(v660[0])
      || *(unsigned __int8 *)(v10 + 390) != BYTE6(v660[0])
      || *(_QWORD *)(v10 + 396) != *(_QWORD *)((char *)v660 + 12)
      || !CA::Render::Chromaticity::operator==(v581, (uint64_t)v612)
      || *(float *)(v10 + 440) != *((float *)&v662 + 2)
      || *(float *)(v10 + 444) != *((float *)&v662 + 3)
      || *(float *)(v10 + 448) != *(float *)&v663
      || *(float *)(v10 + 452) != *((float *)&v663 + 1)
      || *(float *)(v10 + 456) != *((float *)&v663 + 2)
      || *(_DWORD *)(v10 + 460) != HIDWORD(v663))
    {
      *((_WORD *)v72 + 2) |= 0x400u;
      v108 = v661;
      v109 = v605;
      v605[4] = v660[1];
      v109[5] = v108;
      v110 = v663;
      v109[6] = v662;
      v109[7] = v110;
      v111 = v658[1];
      *v109 = v658[0];
      v109[1] = v111;
      v112 = v660[0];
      v109[2] = v659;
      v109[3] = v112;
    }
    v695 = v31;
    v644[1] = 0;
    v644[0] = 0;
    CA::Render::Fence::BatchWaitLock::BatchWaitLock((CA::Render::Fence::BatchWaitLock *)v644);
    v113 = 0;
    if (v67)
    {
      v114 = INFINITY;
      v115 = v67;
      v116 = INFINITY;
      do
      {
        v117 = *(_QWORD *)&v47[8 * v115];
        pthread_mutex_lock((pthread_mutex_t *)(v117 + 72));
        if ((_DWORD)v44)
          *(_DWORD *)(v117 + 12) |= 0x2000u;
        CA::Render::Update::add_context((CA::Render::Update *)v664, (CA::Render::Context *)v117);
        if (!HIBYTE(v637))
          CA::WindowServer::get_context_logical_bounds((CA::WindowServer *)v117, (CA::Render::Context *)((char *)&v637 + 1), v636, (CA::Bounds *)&v637, v118);
        --v115;
        if (*(double *)(v117 + 456) < v116)
          v116 = *(double *)(v117 + 456);
        *(_QWORD *)(v117 + 456) = 0x7FF0000000000000;
        if (*(double *)(v117 + 512) < v114)
          v114 = *(double *)(v117 + 512);
        *(_QWORD *)(v117 + 512) = 0x7FF0000000000000;
        v119 = *(_WORD *)(v117 + 552);
        v113 |= (v119 & 0x80) >> 7;
        *(_WORD *)(v117 + 552) = v119 & 0xFF7F;
        pthread_mutex_unlock((pthread_mutex_t *)(v117 + 72));
      }
      while (v115);
    }
    else
    {
      v116 = INFINITY;
      v114 = INFINITY;
    }
    CA::Render::Fence::BatchWaitLock::invalidate((uint64_t)v644);
    v122 = (CA::Render::LayerNode *)v633;
    if ((_QWORD)v633)
      CA::Render::Update::invalidate_backdrops((uint64_t)v664, (CA::Shape *)v633, 0, 1);
    CA::Render::Update::added_all_contexts((CA::Render::Update *)v664, v122, v120, v121);
    v125 = *(_DWORD *)(v10 + 288);
    if (v125 <= 1)
      v125 = 1;
    v126 = (float)v690 / (double)v125;
    *(_DWORD *)(v10 + 288) = v690;
    v123.n128_f64[0] = v126 + *(double *)&v607;
    if (v123.n128_f64[0] < 0.0)
      v123.n128_f64[0] = -v123.n128_f64[0];
    HIDWORD(v127) = HIDWORD(v606);
    if (v123.n128_f64[0] >= v606)
      (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 384))(*(_QWORD *)(v10 + 96));
    v128 = v677;
    if (v677)
    {
      v129 = *((_WORD *)v72 + 2);
      v130 = v129 >> 5;
      if (v129 >> 5 && v130 != 5)
      {
        if (initialize_velocity_thresholds(void)::once[0] != -1)
          dispatch_once(initialize_velocity_thresholds(void)::once, &__block_literal_global_14_14871);
        v131 = 4 - v130;
        LODWORD(v127) = 0;
        if (v131 > 3)
        {
          v123.n128_u32[0] = 0;
          LODWORD(v124) = 0;
        }
        else
        {
          v123.n128_u32[0] = 0;
          LODWORD(v124) = 0;
          if (has_velocity_thresholds)
          {
            v132 = (unsigned __int32 *)((char *)&velocity_threshold_frame_rate_ranges + 12 * (int)v131);
            v123.n128_u32[0] = *v132;
            LODWORD(v127) = v132[1];
            LODWORD(v124) = v132[2];
          }
        }
        if ((((unint64_t)*((unsigned __int16 *)v72 + 2) << 32) & 0xE000000000) == 0x2000000000)
          *(float *)&v124 = 0.0;
        -[CAFrameRateRangeGroup addFrameRateRange:](v128, "addFrameRateRange:", v123.n128_f64[0], v127, v124);
      }
      v722[0] = (float64x2_t)xmmword_18474E1C0;
      CA::Render::post_notification(0x3Cu, 0, (uint64_t)v722, 0);
      LODWORD(v712.f64[1]) = 0;
      v712.f64[0] = 0.0;
      *(_QWORD *)&v712.f64[0] = -[CAFrameRateRangeGroup arbitratedIntervalRange](v128, "arbitratedIntervalRange");
      LODWORD(v712.f64[1]) = v133;
      if (*(_QWORD *)&v722[0].f64[0] && !LOBYTE(v722[0].f64[1])
        || -[CAFrameRateRangeGroup hasCompatQuantaIntent](v128, "hasCompatQuantaIntent"))
      {
        v134 = 1;
      }
      else
      {
        v134 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 288))(*(_QWORD *)(v10 + 96));
      }
      v135 = (*(double (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 2064))(*(_QWORD *)(v10 + 96));
      (*(void (**)(_QWORD, float64x2_t *, uint64_t, BOOL))(**(_QWORD **)(v10 + 96) + 1920))(*(_QWORD *)(v10 + 96), &v712, v134, v135 > *(double *)&v15);
    }
    atomic_store(v671, &CA::Render::Context::_begin_time_threshold);
    if (initialized[0] != -1)
      dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
    v136 = *(float *)&dword_1ECDC6974;
    if (*(float *)&dword_1ECDC6974 == 0.0)
    {
      v137 = *(_QWORD *)(v10 + 96);
      if (v698 > 1.0 && (*(_BYTE *)(v137 + 746) & 0x40) == 0)
        v136 = v698;
    }
    else
    {
      v137 = *(_QWORD *)(v10 + 96);
    }
    v123.n128_u32[0] = 1.0;
    if (v136 > 1.0 || (*(_BYTE *)(v137 + 746) & 0x40) != 0)
      v138 = (*(_DWORD *)(v137 + 624) & 4) == 0
          || (*(_BYTE *)(v137 + 746) & 0x40 | byte_1ECDC6AE2) != 0;
    else
      v138 = 0;
    v139 = v682 & 0x18000;
    if (byte_1ECDC6B0F)
    {
      v141 = 0;
      v140 = 0.0;
    }
    else
    {
      if (v139)
      {
        *(double *)(v137 + 696) = v8;
        v140 = v8;
      }
      else
      {
        v140 = *(double *)(v137 + 696);
      }
      v123.n128_f64[0] = v140 + 15.0;
      v141 = v140 + 15.0 >= v8;
    }
    if (v139)
      v142 = 1;
    else
      v142 = v138 || v141;
    if ((*(unsigned int (**)(uint64_t, __n128))(*(_QWORD *)v10 + 136))(v10, v123) && v142)
    {
      v144 = v10;
      v145 = 1;
      v143.n128_f32[0] = v136;
    }
    else
    {
      v143.n128_u32[0] = 0;
      v144 = v10;
      v145 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v10 + 464))(v144, v145, v143);
    v146 = v685;
    v147 = (CA::Shape *)v633;
    if (v685)
    {
      v148 = *(_DWORD **)(v10 + 96);
      if ((v148[156] & 4) == 0)
      {
        v149 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v148 + 1392))(v148);
        v146 = v685;
        if (v149)
        {
          v146 = v685 | v149;
          v685 |= v149;
        }
      }
    }
    if (*(_QWORD *)(v10 + 296) != v146)
    {
      v150 = (_DWORD *)(*(_QWORD *)(v10 + 96) + 168);
      memset(v722, 0, sizeof(v722));
      CA::Shape::operator=((uint64_t)v722, v150);
      CA::shape_union(v623, (CA::Shape **)v722, v151);
      *(_QWORD *)(v10 + 296) = v685;
    }
    if (((*v72 | ((unint64_t)*((unsigned __int16 *)v72 + 2) << 32)) & 0x10000000000) != 0
      && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 616))(*(_QWORD *)(v10 + 96)))
    {
      v152 = (_DWORD *)(*(_QWORD *)(v10 + 96) + 168);
      memset(v722, 0, sizeof(v722));
      CA::Shape::operator=((uint64_t)v722, v152);
      CA::shape_union(v623, (CA::Shape **)v722, v153);
    }
    v154 = mach_absolute_time();
    v687 = CATimeWithHostTime(v154) - v61;
    v156 = *(_QWORD *)(v10 + 96);
    if (HIBYTE(v637))
    {
      if ((CA::WindowServer::Display::set_logical_bounds((CA::WindowServer::Display *)v156, (const CA::Bounds *)v636, v637) & 1) == 0)goto LABEL_210;
    }
    else
    {
      v157 = *(_DWORD *)(v156 + 745);
      if ((v157 & 2) == 0
        || (*(_QWORD *)(v156 + 184) = 0,
            *(_QWORD *)(v156 + 192) = 0,
            *(_DWORD *)(v156 + 745) = v157 & 0xFFFFFFED,
            !CA::WindowServer::Display::update_actual_bounds((CA::WindowServer::Display *)v156)))
      {
LABEL_210:
        if (v681 == CA::Render::LayerHost::_seed)
          goto LABEL_216;
        goto LABEL_211;
      }
    }
    memset(v722, 0, sizeof(v722));
    CA::Shape::operator=((uint64_t)v722, v620);
    CA::shape_union(v623, (CA::Shape **)v722, v158);
    v50 = 1;
LABEL_211:
    _VF = __OFSUB__((_DWORD)v632, 1);
    LODWORD(v632) = (_DWORD)v632 - 1;
    if ((int)v632 < 0 == _VF)
    {
      if (v147)
        CA::Shape::unref(v147);
      LODWORD(v17) = (_DWORD)v616;
      v24 = v622;
      if (v665)
        v49 = (CA::Shape **)CA::Shape::ref((unint64_t)v665, v155);
      else
        v49 = 0;
      v626 |= (v682 & 2) == 0;
      goto LABEL_262;
    }
LABEL_216:
    v160 = 0;
    *(_QWORD *)&v619 = 0x7FF0000000000000;
    if (v139)
    {
      v162 = 0;
      v24 = v622;
    }
    else
    {
      v161 = !v141;
      v162 = 0;
      v24 = v622;
      if (!v161)
      {
        *(double *)&v619 = v140 + 15.0;
        if (v140 + 15.0 <= INFINITY)
        {
          v160 = 0x80000000000;
          v162 = 0x80000000000;
        }
        else
        {
          v160 = 0;
          v162 = 0x80000000000;
          *(_QWORD *)&v619 = 0x7FF0000000000000;
        }
      }
    }
    v617 = v162;
    v604 = v160;
    v163 = v682;
    *(_BYTE *)(v10 + 519) = (v682 & 0x800) != 0;
    if ((v163 & 0x1000104) != 0
      || v665 && CA::Shape::area(v665)
      || (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 336))(*(_QWORD *)(v10 + 96))
      || (CA::WindowServer::Display::benchmark_mode(0, v179) & 1) != 0
      || (v180 = *(_BYTE **)(v10 + 96), (v180[746] & 4) != 0))
    {
      *(_DWORD *)(*(_QWORD *)(v10 + 96) + 745) &= ~0x400u;
      v164 = 1;
    }
    else
    {
      v181 = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v180 + 512))(v180, v679);
      v164 = v181 ^ 1;
      if ((v682 & 0x40000) == 0 && (v181 & 1) != 0)
      {
        v556 = 246;
LABEL_288:
        v627 = v556;
        LODWORD(v17) = (_DWORD)v616;
        v182 = *(double *)&v619;
        v65 = (const CA::Shape *)v633;
        v190 = v585;
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v10 + 96) + 392))(*(_QWORD *)(v10 + 96), 0);
LABEL_602:
        v484 = CA::Render::Update::build_hit_test_tree((CA::Render::Update *)v664, 0, v186, 1.0);
        os_unfair_lock_lock(v190);
        v485 = *(CA::Render::HitTestTree **)(v10 + 328);
        *(_QWORD *)(v10 + 328) = v484;
        os_unfair_lock_unlock(v190);
        if (v485)
          CA::Render::HitTestTree::unref(v485);
        if (BYTE5(ca_debug_options))
          CA::WindowServer::print_layer_trees((uint64_t)v601, 1, v666);
        if (v182 >= v667)
        {
          v486 = v182 <= v667 || v667 == 0.0;
          v487 = v604;
          if (!v486)
            v487 = 0;
          v604 = v668 | v487;
          v182 = v667;
        }
        v617 |= v669;
        if ((unint64_t)(v676 + 1) >= 2)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 360))(v10);
        (*(void (**)(_QWORD, double, double))(**(_QWORD **)(v10 + 96) + 1952))(*(_QWORD *)(v10 + 96), v673, v674);
        CA::Render::Fence::BatchWaitLock::invalidate((uint64_t)v644);
        goto LABEL_616;
      }
    }
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 208))(*(_QWORD *)(v10 + 96))
      || ((*(uint64_t (**)(_QWORD, unint64_t *))(**(_QWORD **)(v10 + 96) + 344))(*(_QWORD *)(v10 + 96), v664) & 1) != 0)
    {
      if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 216))(*(_QWORD *)(v10 + 96)))
      {
        v556 = 255;
        goto LABEL_288;
      }
      v182 = *(double *)&v619;
      v183 = *(double *)&v619 <= v8 || v8 == 0.0;
      v184 = v604;
      v185 = v604 | 0x40000;
      if (!v183)
        v185 = 0x40000;
      v617 |= 0x40000uLL;
      if (*(double *)&v619 >= v8)
      {
        v182 = v8;
        v184 = v185;
      }
      v604 = v184;
      CA::WindowServer::Server::invalidate((os_unfair_lock_s *)v10, v665);
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v10 + 96) + 392))(*(_QWORD *)(v10 + 96), 0);
      v627 = 247;
      LODWORD(v17) = (_DWORD)v616;
      v65 = (const CA::Shape *)v633;
LABEL_601:
      v190 = v585;
      goto LABEL_602;
    }
    v165 = mach_absolute_time();
    v166 = CATimeWithHostTime(v165);
    if (v164)
      v167 = 0;
    else
      v167 = 8;
    v635 = v167;
    (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(v10 + 96) + 408))(*(_QWORD *)(v10 + 96), v664);
    v168 = 32;
    if ((v113 & 1) == 0)
      v168 = 0;
    v169 = *v72 & 0xFFFFFFDF | ((unint64_t)*((unsigned __int16 *)v72 + 2) << 32);
    *v72 = *v72 & 0xFFFFFFDF | v168;
    *((_WORD *)v72 + 2) = WORD2(v169);
    if ((*(_QWORD *)&v116 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v691 = v116;
      CAHostTimeWithTime(v116);
      kdebug_trace();
    }
    LODWORD(v17) = (_DWORD)v616;
    v65 = (const CA::Shape *)v633;
    if ((*(_QWORD *)&v114 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      v693 = v114;
    if ((_QWORD *)v678[1] == v601)
    {
      v627 = 2;
      goto LABEL_296;
    }
    v170 = (CA::Shape *)v633;
    v171 = v621[0];
    os_unfair_lock_lock(v621[0]);
    v172 = *(double *)(v10 + 280);
    *(double *)(v10 + 280) = v8;
    os_unfair_lock_unlock(v171);
    if (v172 != 0.0)
    {
      if (v677)
      {
        LODWORD(v722[0].f64[0]) = 0;
        v173 = -[CAFrameRateRangeGroup reasonsWithCount:](v677, "reasonsWithCount:", v722);
        if (v173)
          (*(void (**)(_QWORD, uint64_t, _QWORD, double, double))(**(_QWORD **)(v10 + 96) + 1928))(*(_QWORD *)(v10 + 96), v173, LODWORD(v722[0].f64[0]), v8, v172);
      }
    }
    if (HIBYTE(ca_debug_options))
    {
      CARecordFrame(0, 0, 0, 0, v8, 0.0, 0.0);
      v65 = v170;
LABEL_296:
      v182 = *(double *)&v619;
      if ((!*(_BYTE *)(v10 + 525) || byte_1ECDC6B07)
        && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 2032))(*(_QWORD *)(v10 + 96)))
      {
        goto LABEL_338;
      }
      v193 = v697;
      v194 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 2032))(*(_QWORD *)(v10 + 96));
      v195 = v194;
      if (!v193 && (_DWORD)v194)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v209 = x_log_category_secure_indicators;
          if (os_log_type_enabled((os_log_t)x_log_category_secure_indicators, OS_LOG_TYPE_INFO))
          {
            LOWORD(v722[0].f64[0]) = 0;
            _os_log_impl(&dword_184457000, v209, OS_LOG_TYPE_INFO, "CASecureIndicator : No indicator in update, hiding sil", (uint8_t *)v722, 2u);
          }
        }
LABEL_327:
        if ((_DWORD)v195)
        {
          v210 = 0;
          v211 = 1;
          do
          {
            v211 &= (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v10 + 96) + 2048))(*(_QWORD *)(v10 + 96), v210);
            v210 = (v210 + 1);
          }
          while ((_DWORD)v210 != 4);
          if ((v211 & 1) != 0)
          {
            if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v10 + 96) + 2024))(*(_QWORD *)(v10 + 96), 0, 1) & 1) == 0)__assert_rtn("update_secure_indicators", "windowserver-server.cpp", 3059, "success");
            (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 2096))(*(_QWORD *)(v10 + 96));
            goto LABEL_333;
          }
LABEL_334:
          v722[0].f64[0] = 0.0;
          *(int64x2_t *)((char *)v722 + 8) = vdupq_n_s64(0x40000000000uLL);
          (*(void (**)(uint64_t, float64x2_t *, double))(*(_QWORD *)v10 + 184))(v10, v722, 0.0);
        }
        else
        {
LABEL_333:
          (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 2080))(*(_QWORD *)(v10 + 96));
        }
LABEL_338:
        if ((*(unsigned int (**)(_QWORD, unint64_t *, _QWORD, _QWORD))(**(_QWORD **)(v10 + 96) + 416))(*(_QWORD *)(v10 + 96), v664, v635, 0))
        {
          v212 = v182 <= v8 || v8 == 0.0;
          v213 = v604;
          v214 = v604 | 0x2000000;
          if (!v212)
            v214 = 0x2000000;
          v617 |= 0x2000000uLL;
          if (v182 >= v8)
          {
            v182 = v8;
            v213 = v214;
          }
          v604 = v213;
          *(_DWORD *)(*(_QWORD *)(v10 + 96) + 745) |= 0x400u;
          v627 = 249;
        }
        else
        {
          v599 = 0;
          if (((unsigned __int16)v583 & 0x2000) != 0)
            *(_DWORD *)(*(_QWORD *)(v10 + 96) + 745) &= ~0x2000u;
        }
        if (*(_QWORD *)(v10 + 480) != *(_QWORD *)(v10 + 488))
        {
          v611 = (CA::OGL::Renderer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 392))(v10);
          if (v611)
          {
            v215 = v666;
            v620 = (_DWORD *)CAHostTimeWithTime(v666);
            v216 = *(unsigned int **)(v10 + 480);
            v217 = *(unsigned __int32 **)(v10 + 488);
            if (v216 != v217)
            {
              v618 = *(_QWORD **)v611;
              v623 = (CA::Shape **)v734;
              *(_QWORD *)&v609 = &v721;
              *(_QWORD *)&v608 = v647;
              v583 = &v643;
              v596 = (CA::Shape **)v713;
              v614 = &v722[1];
              v605 = &v651;
              __asm { FMOV            V0.2D, #1.0 }
              v610 = _Q0;
              v221 = 1.0;
              v222 = 1.0;
              v600 = xmmword_18474DF40;
              v607 = xmmword_18474DF50;
              v223 = 0.5;
              _Q0.f64[0] = NAN;
              _Q0.f64[1] = NAN;
              *(float64x2_t *)v621 = vnegq_f64(_Q0);
              v613 = v217;
              while (1)
              {
                stream_and_lock = (pthread_mutex_t *)CA::Render::ContentStream::get_or_create_stream_and_lock((CA::Render::ContentStream *)*v216, 0, 0);
                if (stream_and_lock)
                  break;
LABEL_569:
                v216 += 50;
                if (v216 == v217)
                  goto LABEL_574;
              }
              v226 = stream_and_lock;
              if (!stream_and_lock[6].__opaque[8])
                goto LABEL_568;
              v227 = *((float *)v216 + 15);
              if (v227 > 0.0 && v215 - *(double *)&stream_and_lock[6].__sig < v227)
                goto LABEL_568;
              v632 = (OpaqueVTPixelTransferSession ***)stream_and_lock;
              v228 = v623;
              *((_OWORD *)v623 + 14) = 0u;
              *((_OWORD *)v228 + 15) = 0u;
              *((_OWORD *)v228 + 12) = 0u;
              *((_OWORD *)v228 + 13) = 0u;
              *((_OWORD *)v228 + 10) = 0u;
              *((_OWORD *)v228 + 11) = 0u;
              *((_OWORD *)v228 + 8) = 0u;
              *((_OWORD *)v228 + 9) = 0u;
              *((_OWORD *)v228 + 6) = 0u;
              *((_OWORD *)v228 + 7) = 0u;
              *((_OWORD *)v228 + 4) = 0u;
              *((_OWORD *)v228 + 5) = 0u;
              *((_OWORD *)v228 + 2) = 0u;
              *((_OWORD *)v228 + 3) = 0u;
              *(_OWORD *)v228 = 0u;
              *((_OWORD *)v228 + 1) = 0u;
              v730 = v228;
              v731 = v228;
              v229 = (unsigned int *)*((_QWORD *)v216 + 9);
              v230 = (unsigned int *)*((_QWORD *)v216 + 10);
              v732 = v228;
              v733 = 32;
              if ((unint64_t)((char *)v230 - (char *)v229) >= 0x81)
              {
                X::small_vector_base<X::Ref<CA::Render::Context>>::grow((uint64_t)&v730, v230 - v229);
                v229 = (unsigned int *)*((_QWORD *)v216 + 9);
                v230 = (unsigned int *)*((_QWORD *)v216 + 10);
              }
              while (v229 != v230)
              {
                v231 = CA::Render::Context::context_by_id((CA::Render::Context *)*v229);
                if (v231)
                {
                  v232 = v231;
                  v233 = v731;
                  v234 = v731 - v730 + 1;
                  if (v733 < v234)
                  {
                    X::small_vector_base<X::Ref<CA::Render::Context>>::grow((uint64_t)&v730, v234);
                    v233 = v731;
                  }
                  *v233 = v232;
                  v731 = (CA::Shape **)(v233 + 1);
                }
                ++v229;
              }
              v235 = (CA::Render::ContentStream *)v632;
              if (*((_DWORD *)v632 + 98))
              {
                v236 = v730;
                v237 = v731;
                while (v236 != v237)
                {
                  v238 = (pthread_mutex_t *)((char *)*v236 + 72);
                  pthread_mutex_lock(v238);
                  v239 = CA::Render::Context::root_layer_handle(*v236);
                  if (v239 && *(_DWORD *)(v239 + 80) >= v679)
                  {
                    pthread_mutex_unlock(v238);
                    v235 = (CA::Render::ContentStream *)v632;
                    goto LABEL_373;
                  }
                  pthread_mutex_unlock(v238);
                  ++v236;
                }
                v240 = v614;
                *v614 = 0u;
                v240[1] = 0u;
                *(_QWORD *)&v722[0].f64[0] = v620;
                LODWORD(v240) = *((_DWORD *)v632 + 99);
                LODWORD(v722[0].f64[1]) = 2;
                HIDWORD(v722[0].f64[1]) = (_DWORD)v240;
                CA::Render::ContentStream::produce_surface((uint64_t)v632, 0, (uint64_t)v722, 0);
                v65 = (const CA::Shape *)v633;
LABEL_558:
                v443 = v730;
                v444 = v731;
                if (v730 != v731)
                {
                  do
                  {
                    v445 = (unsigned int *)*v443;
                    if (*v443)
                    {
                      v446 = v445 + 2;
                      do
                      {
                        v447 = __ldaxr(v446);
                        v448 = v447 - 1;
                      }
                      while (__stlxr(v448, v446));
                      if (!v448)
                        (*(void (**)(unsigned int *))(*(_QWORD *)v445 + 16))(v445);
                    }
                    ++v443;
                  }
                  while (v443 != v444);
                  v443 = v730;
                }
                v226 = (pthread_mutex_t *)v632;
                if (v443 != v732)
                  free(v443);
LABEL_568:
                pthread_mutex_unlock(v226);
                goto LABEL_569;
              }
LABEL_373:
              v241 = *((_QWORD *)v235 + 40);
              if (*((_QWORD *)v235 + 39) == v241)
              {
                LODWORD(v624) = 0;
                v245 = 0;
                v243 = 0;
                v65 = (const CA::Shape *)v633;
              }
              else
              {
                v244 = *(__IOSurface **)(v241 - 24);
                v242 = v241 - 24;
                v243 = v244;
                v245 = *(_DWORD *)(v242 + 8);
                LODWORD(v624) = *(_DWORD *)(v242 + 12);
                v246 = *(_QWORD *)(v242 + 16);
                *((_QWORD *)v235 + 40) = v242;
                v225 = (float *)*((_QWORD *)v235 + 45);
                v247 = (float *)*((_QWORD *)v235 + 46);
                v65 = (const CA::Shape *)v633;
                if (v225 != v247 && ((unint64_t)((char *)v247 - (char *)v225) >> 3))
                {
                  v450 = v245;
                  v451 = v243;
                  (*(void (**)(_QWORD *))(*v618 + 56))(v618);
                  v243 = v451;
                  v245 = v450;
                  v217 = v613;
                  *((_QWORD *)v235 + 46) = *((_QWORD *)v235 + 45);
                }
                if (!v243)
                  __assert_rtn("get_next_surface", "render-content-stream.cpp", 425, "surf.iosurface");
                if (!v246)
                {
                  v248 = v243;
                  v249 = (*(uint64_t (**)(_QWORD *, __IOSurface *))(*v618 + 48))(v618, v243);
                  v243 = v248;
                  v246 = v249;
                }
                v251 = *((_QWORD *)v235 + 43);
                v250 = *((_QWORD *)v235 + 44);
                if (v251 >= v250)
                {
                  v254 = v245;
                  v255 = v243;
                  v256 = *((_QWORD *)v235 + 42);
                  v257 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v251 - v256) >> 3);
                  v258 = v257 + 1;
                  if (v257 + 1 > 0xAAAAAAAAAAAAAAALL)
                    abort();
                  v259 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v250 - v256) >> 3);
                  if (2 * v259 > v258)
                    v258 = 2 * v259;
                  if (v259 >= 0x555555555555555)
                    v260 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v260 = v258;
                  if (v260)
                    v260 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v260);
                  else
                    v261 = 0;
                  v262 = v260 + 24 * v257;
                  *(_QWORD *)v262 = v255;
                  v263 = v624;
                  *(_DWORD *)(v262 + 8) = v254;
                  *(_DWORD *)(v262 + 12) = v263;
                  *(_QWORD *)(v262 + 16) = v246;
                  v264 = (CA::Render::ContentStream *)v632;
                  v266 = v632[42];
                  v265 = v632[43];
                  v267 = v262;
                  if (v265 != v266)
                  {
                    do
                    {
                      v268 = *(_OWORD *)(v265 - 3);
                      *(_QWORD *)(v267 - 8) = *(v265 - 1);
                      *(_OWORD *)(v267 - 24) = v268;
                      v267 -= 24;
                      v265 -= 3;
                    }
                    while (v265 != v266);
                    v265 = (OpaqueVTPixelTransferSession **)*((_QWORD *)v264 + 42);
                  }
                  v253 = (OpaqueVTPixelTransferSession **)(v262 + 24);
                  *((_QWORD *)v264 + 42) = v267;
                  *((_QWORD *)v264 + 43) = v262 + 24;
                  *((_QWORD *)v264 + 44) = v260 + 24 * v261;
                  if (v265)
                    operator delete(v265);
                  v243 = v255;
                  v245 = v254;
                  v217 = v613;
                }
                else
                {
                  *(_QWORD *)v251 = v243;
                  v252 = v624;
                  *(_DWORD *)(v251 + 8) = v245;
                  *(_DWORD *)(v251 + 12) = v252;
                  v253 = (OpaqueVTPixelTransferSession **)(v251 + 24);
                  *(_QWORD *)(v251 + 16) = v246;
                }
                v269 = (CA::Render::ContentStream *)v632;
                v632[43] = v253;
                v235 = v269;
              }
              v642 = 0uLL;
              v643 = 0;
              if (!*((_QWORD *)v235 + 36))
                __assert_rtn("get_intermediate_surface", "render-content-stream.cpp", 438, "_intermediate_surf.iosurface");
              if (!*((_QWORD *)v235 + 38))
              {
                v270 = v243;
                v271 = (*(uint64_t (**)(_QWORD *))(*v618 + 48))(v618);
                v243 = v270;
                *((_QWORD *)v235 + 38) = v271;
              }
              v272 = *((_OWORD *)v235 + 18);
              v642 = v272;
              v643 = *((_QWORD *)v235 + 38);
              if (!v245 || !DWORD2(v642))
              {
                ++*((_DWORD *)v235 + 99);
                goto LABEL_558;
              }
              LODWORD(v606) = v245;
              v612 = v243;
              *(_QWORD *)&v272 = *((_QWORD *)v216 + 2);
              v619 = v272;
              v273 = v730;
              v274 = v731;
              if ((v682 & 0x84002) != 0)
              {
LABEL_403:
                v657 = 0;
                v275 = 0uLL;
                v656 = 0u;
                v655 = 0u;
                v654 = 0u;
                v653 = 0u;
                v652 = 0u;
                v651 = 0u;
                v650 = 0u;
                v649 = 0u;
                v648 = 0u;
                goto LABEL_404;
              }
              if (v730 != v731)
              {
                v289 = v730;
                while (*((_DWORD *)*v289 + 153) == *(_DWORD *)(*(_QWORD *)(v10 + 96) + 24)
                     && (*((_BYTE *)*v289 + 13) & 2) != 0)
                {
                  if (++v289 == v731)
                    goto LABEL_426;
                }
                goto LABEL_403;
              }
LABEL_426:
              v291 = *((_QWORD *)v216 + 17);
              v290 = *((_QWORD *)v216 + 18);
              v657 = 0;
              v275 = 0uLL;
              v656 = 0u;
              v655 = 0u;
              v654 = 0u;
              v653 = 0u;
              v652 = 0u;
              v651 = 0u;
              v650 = 0u;
              v649 = 0u;
              v648 = 0u;
              if (v290 == v291)
              {
                v287 = 1;
                v288.i64[0] = *(_QWORD *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v10 + 96) + 480))(*(_QWORD *)(v10 + 96), 1)+ 56);
                v629 = 0u;
                goto LABEL_429;
              }
LABEL_404:
              if (v730 != v731)
              {
                v629 = v275;
                v631 = v275;
                while (1)
                {
                  v276 = CA::Render::Context::root_layer_handle(*v273);
                  if (!v276)
                    goto LABEL_418;
                  v277 = *(CA::Render::Layer **)(v276 + 16);
                  if (!v277)
                    goto LABEL_418;
                  CA::Render::Layer::frame((CA::Render::Layer *)v722, v277);
                  v278.i64[0] = *(_QWORD *)&v722[1].f64[1];
                  if (v722[1].f64[0] > v722[1].f64[1])
                    *(double *)v278.i64 = v722[1].f64[0];
                  if (*(double *)v278.i64 < 1073741820.0)
                  {
                    __asm { FMOV            V3.2D, #0.5 }
                    v278 = vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8(*(int8x16_t *)v621, _Q3, (int8x16_t)v722[0]), v722[0]));
                    *(int32x2_t *)v278.i8 = vmovn_s64(v278);
                    v281 = (int8x16_t)vaddq_f64(v722[0], v722[1]);
                    v279 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8(*(int8x16_t *)v621, _Q3, v281), (float64x2_t)v281))), *(int32x2_t *)v278.i8);
                  }
                  else
                  {
                    *(int32x2_t *)v278.i8 = vdup_n_s32(0xE0000001);
                    v279 = (int32x2_t)0xC0000000C0000000;
                  }
                  v282 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v631.i8);
                  v283 = vpmax_u32(v282, v282).u32[0];
                  v284 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v279);
                  v285 = vpmax_u32(v284, v284).u32[0];
                  if ((v283 & 0x80000000) != 0)
                  {
                    if ((v285 & 0x80000000) == 0)
                      goto LABEL_417;
                  }
                  else if ((v285 & 0x80000000) == 0)
                  {
                    v286 = vadd_s32(*(int32x2_t *)v278.i8, v279);
                    *(int32x2_t *)v278.i8 = vmin_s32(*(int32x2_t *)v629.i8, *(int32x2_t *)v278.i8);
                    v279 = vsub_s32(vmax_s32(vadd_s32(*(int32x2_t *)v629.i8, *(int32x2_t *)v631.i8), v286), *(int32x2_t *)v278.i8);
LABEL_417:
                    v629 = (int32x4_t)v278;
                    *(int32x2_t *)v278.i8 = v279;
                    v631 = (int32x4_t)v278;
                  }
LABEL_418:
                  if (++v273 == v274)
                  {
                    v287 = 0;
                    v288 = v631;
                    goto LABEL_429;
                  }
                }
              }
              v287 = 0;
              v629 = v275;
              v288 = 0uLL;
LABEL_429:
              v292 = *((_BYTE *)v216 + 64);
              v293 = *((unsigned __int8 *)v216 + 65);
              v294.i64[0] = v288.i32[0];
              v294.i64[1] = v288.i32[1];
              v615 = v294;
              v295 = v610;
              v296 = v292 & 1 | v293;
              v626 = v296 != 0;
              if (v296)
              {
                v631 = v288;
                v297 = vdiv_f32(vcvt_f32_s32(*(int32x2_t *)&v619), vcvt_f32_s32(*(int32x2_t *)v288.i8));
                if (v297.f32[1] < v297.f32[0])
                  v297.f32[0] = v297.f32[1];
                if (v297.f32[0] > v222)
                  v297.f32[0] = v222;
                *(double *)&v298 = v297.f32[0];
                if (!v293)
                  *(double *)&v298 = v221;
                v299 = (float64x2_t)vdupq_lane_s64(v298, 0);
                if ((v292 & 1) != 0)
                {
                  v300 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_s64(v615), *(double *)&v298));
                  if (v300.f32[0] != 0.0)
                  {
                    v301.f32[0] = (float)(int)v619;
                    v302 = v300.f32[1] == 0.0 || v300.f32[0] == v301.f32[0];
                    if (!v302 && v300.f32[1] != (float)SDWORD1(v619))
                    {
                      v301.f32[1] = (float)SDWORD1(v619);
                      v299 = vmulq_n_f64(vcvtq_f64_f32(vdiv_f32(v301, v300)), *(double *)&v298);
                    }
                  }
                  if (v293)
                  {
                    v304 = *(uint64_t *)&v299.f64[1];
                    if (v299.f64[1] >= v299.f64[0])
                      v304 = *(uint64_t *)&v299.f64[0];
                    v299 = (float64x2_t)vdupq_lane_s64(v304, 0);
                  }
                }
                v305 = *((_QWORD *)&v600 + 1);
                v306 = v299.f64[1];
                v648 = v600;
                v649 = 0uLL;
                v650 = (float64x2_t)v607;
                v307 = v605;
                *v605 = 0u;
                v307[1] = 0u;
                if (v299.f64[0] == v299.f64[1])
                {
                  v656.f64[0] = v299.f64[0];
                  v656.f64[1] = v221 / v299.f64[0];
                  v308 = 8 * (v299.f64[0] != v221);
                  v309 = v299.f64[0];
                }
                else
                {
                  v656 = v610;
                  v308 = 16;
                  v309 = v299.f64[1];
                }
                *((_QWORD *)&v653 + 1) = v305;
                v655 = v607;
                *(float64_t *)&v648 = v299.f64[0];
                v650.f64[1] = v309;
                v654 = 0uLL;
                *(_QWORD *)&v653 = 0x3FF0000000000000;
                LOBYTE(v657) = v308;
                v625 = v299;
                CA::Transform::translate((CA::Transform *)&v648, (double)-v629.i32[0], (double)-v629.i32[1], 0.0);
                if (v293)
                  CA::Transform::translate((CA::Transform *)&v648, trunc(((double)(int)v619 - v625.f64[0] * (double)v631.i32[0]) * v223 / v625.f64[0]), trunc(((double)SDWORD1(v619) - v306 * (double)v631.i32[1]) * v223 / v306), 0.0);
                v295 = v625;
              }
              v625 = v295;
              *(_QWORD *)&v641 = 0;
              *((_QWORD *)&v641 + 1) = v619;
              if (v216[8]
                && v216[9]
                && (*(float32x2_t *)&v722[0].f64[0] = vcvt_f32_u32(*(uint32x2_t *)(v216 + 6)),
                    CA::Transform::apply_to_point2((float64x2_t *)&v648, v722[0].f64, v225),
                    v310 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v641 + 8)),
                    (vpmax_u32(v310, v310).u32[0] & 0x80000000) == 0))
              {
                v311 = *((_QWORD *)v216 + 4);
                v312.i64[0] = v311;
                v312.i64[1] = HIDWORD(v311);
                v313 = vmovn_s64(vcvtq_s64_f64(vmulq_f64(v625, vcvtq_f64_u64(v312))));
                v314 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v313);
                if ((vpmax_u32(v314, v314).u32[0] & 0x80000000) != 0
                  || (v315 = vcvt_s32_f32(*(float32x2_t *)&v722[0].f64[0]),
                      v316 = vadd_s32(v313, v315),
                      *(int32x2_t *)&v317 = vmax_s32(v315, 0),
                      v318 = vsub_s32(vmin_s32(*(int32x2_t *)((char *)&v641 + 8), v316), *(int32x2_t *)&v317),
                      v319 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v318),
                      (vpmax_u32(v319, v319).u32[0] & 0x80000000) != 0))
                {
                  *(_QWORD *)&v317 = 0;
                  *((_QWORD *)&v641 + 1) = 0;
                }
                else
                {
                  *((int32x2_t *)&v317 + 1) = v318;
                  v641 = v317;
                }
              }
              else
              {
                *(_QWORD *)&v317 = 0;
              }
              v320 = v216[12];
              if (v320)
              {
                v321 = v216[13];
                if (v321)
                {
                  v322 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v641 + 8));
                  if ((vpmax_u32(v322, v322).u32[0] & 0x80000000) == 0)
                  {
                    v323 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)__PAIR64__(v321, v320));
                    if ((vpmax_u32(v323, v323).u32[0] & 0x80000000) != 0
                      || (v324 = *(int32x2_t *)(v216 + 10),
                          v325 = vadd_s32(*(int32x2_t *)&v317, *(int32x2_t *)((char *)&v641 + 8)),
                          *(int32x2_t *)&v317 = vmax_s32(*(int32x2_t *)&v317, v324),
                          v326 = vsub_s32(vmin_s32(v325, vadd_s32(v324, (int32x2_t)__PAIR64__(v321, v320))), *(int32x2_t *)&v317), v327 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v326), (vpmax_u32(v327, v327).u32[0] & 0x80000000) != 0))
                    {
                      *((_QWORD *)&v641 + 1) = 0;
                    }
                    else
                    {
                      *((int32x2_t *)&v317 + 1) = v326;
                      v641 = v317;
                    }
                  }
                }
              }
              if (v287)
              {
                v328 = (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v10 + 96) + 480))(*(_QWORD *)(v10 + 96), 1);
                v331 = (unsigned int *)CA::WindowServer::IOSurface::wrap_buffer(*(CA::WindowServer::IOSurface **)(v10 + 96), v612, 0, 0);
                v334 = v216[8];
                v335 = v216[9];
                if (v334)
                  v336 = v335 == 0;
                else
                  v336 = 1;
                v337 = !v336;
                LODWORD(v332) = v328[14];
                LODWORD(v333) = v328[15];
                v338.f64[0] = (double)v332;
                v339 = (double)v333;
                v712 = 0uLL;
                *(float64_t *)v713 = v338.f64[0];
                *(double *)&v713[8] = v339;
                v340 = 0.0;
                v341 = 0.0;
                if (!v336)
                {
                  LODWORD(v338.f64[0]) = v216[6];
                  LODWORD(v339) = v216[7];
                  v341 = (double)*(unint64_t *)&v338.f64[0];
                  v340 = (double)*(unint64_t *)&v339;
                  v338.f64[0] = (double)v334;
                  v339 = (double)v335;
                  v712.f64[0] = v341;
                  v712.f64[1] = v340;
                  *(double *)v713 = (double)v334;
                  *(double *)&v713[8] = (double)v335;
                }
                v342 = v216[12];
                v343 = v216[13];
                if (v342)
                  v344 = v343 == 0;
                else
                  v344 = 1;
                v345 = !v344;
                if (v344)
                  goto LABEL_536;
                *(double *)v631.i64 = v215;
                v346 = v216[10];
                v347 = v216[11];
                v348 = (double)v342;
                v349 = (double)v343;
                v722[0] = (float64x2_t)v648;
                v722[1] = v649;
                v722[2] = v650;
                v723 = v651;
                v724 = v652;
                v725 = v653;
                v726 = v654;
                v727 = v655;
                v728 = v656;
                v729 = v657 & 0x1F;
                CA::Transform::invert((int8x16_t *)v722, v329, v330);
                *(float *)v701.f64 = (float)v346;
                *((float *)v701.f64 + 1) = (float)v347;
                *(float *)&v350 = (double)v346 + v348;
                *(float *)&v351 = (double)v347 + v349;
                *(_QWORD *)&v645[0].f64[0] = __PAIR64__(v351, v350);
                CA::Transform::apply_to_point2(v722, v701.f64, v352);
                CA::Transform::apply_to_point2(v722, v645[0].f64, v353);
                v338 = *(float64x2_t *)v713;
                v354 = vclezq_f64(*(float64x2_t *)v713);
                if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v354, 1), (int8x16_t)v354).u64[0] & 0x8000000000000000) != 0)
                {
                  v65 = (const CA::Shape *)v633;
                }
                else
                {
                  v355 = vceqz_f32(vsub_f32(*(float32x2_t *)&v701.f64[0], *(float32x2_t *)&v645[0].f64[0]));
                  v356.i64[0] = v355.i32[0];
                  v356.i64[1] = v355.i32[1];
                  v65 = (const CA::Shape *)v633;
                  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v356, 1), (int8x16_t)v356).u64[0] & 0x8000000000000000) == 0)
                  {
                    v357 = vcvtq_f64_f32(*(float32x2_t *)&v701.f64[0]);
                    v358 = vmaxnmq_f64(v712, v357);
                    v338 = vsubq_f64(vminnmq_f64(vaddq_f64(v712, *(float64x2_t *)v713), vaddq_f64(v357, vcvtq_f64_f32(vabd_f32(*(float32x2_t *)&v701.f64[0], *(float32x2_t *)&v645[0].f64[0])))), v358);
                    v359 = vclezq_f64(v338);
                    v215 = *(double *)v631.i64;
                    v221 = 1.0;
                    v222 = 1.0;
                    v223 = 0.5;
                    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v359, 1), (int8x16_t)v359).u64[0] & 0x8000000000000000) != 0)
                    {
                      v340 = v712.f64[1];
                      v449 = v596;
                      *v596 = 0;
                      v449[1] = 0;
                      v338 = 0uLL;
                    }
                    else
                    {
                      v712 = v358;
                      *(float64x2_t *)v713 = v338;
                      v340 = v358.f64[1];
                    }
LABEL_535:
                    v341 = v712.f64[0];
                    v339 = v338.f64[1];
LABEL_536:
                    v722[0].f64[0] = v341;
                    v722[0].f64[1] = v340;
                    v722[1].f64[0] = v338.f64[0];
                    v722[1].f64[1] = v339;
                    if (v626)
                    {
                      *(float *)&v412 = v341;
                      *(float *)&v413 = v340;
                      *(_QWORD *)&v701.f64[0] = __PAIR64__(v413, v412);
                      *(float *)&v414 = v338.f64[0] + v341;
                      *(float *)&v415 = v339 + v340;
                      *(_QWORD *)&v645[0].f64[0] = __PAIR64__(v415, v414);
                      CA::Transform::apply_to_point2((float64x2_t *)&v648, v701.f64, (float *)v330);
                      CA::Transform::apply_to_point2((float64x2_t *)&v648, v645[0].f64, v416);
                      v722[0] = vcvtq_f64_f32(*(float32x2_t *)&v701.f64[0]);
                      v722[1] = vcvtq_f64_f32(vabd_f32(*(float32x2_t *)&v701.f64[0], *(float32x2_t *)&v645[0].f64[0]));
                      v417 = 1;
                    }
                    else
                    {
                      v417 = v337 | v345;
                    }
                    v418 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 1792))(*(_QWORD *)(v10 + 96));
                    if (!v418)
                      v418 = CAGetColorSpace(0x1Du);
                    if ((*(unsigned int (**)(_QWORD *, _QWORD))(*v618 + 616))(v618, v331[16]))
                    {
                      if ((OpaqueVTPixelTransferSession **)v418 == v632[33])
                        goto LABEL_546;
                      v419 = CGColorSpaceEqualToColorSpaceIgnoringRange();
                      if (!v417 || (v419 & 1) != 0)
                      {
                        if ((v419 & 1) != 0)
                        {
LABEL_546:
                          v420 = v618;
                          v421 = (*(uint64_t (**)(_QWORD *, _DWORD *, _QWORD))(*v618 + 928))(v618, v328, 0);
                          v422 = (*(uint64_t (**)(_QWORD *, unsigned int *, uint64_t))(*v420 + 928))(v420, v331, 1);
                          (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD, float64x2_t *, float64x2_t *))(*v420 + 720))(v420, v422, v421, 1, 0, v722, &v712);
                          (*(void (**)(_QWORD *, _QWORD))(*v420 + 408))(v420, 0);
                          v408 = (CA::Render::ContentStream *)v632;
                          goto LABEL_550;
                        }
LABEL_549:
                        v429 = (__IOSurface *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v328 + 160))(v328);
                        v430 = (__IOSurface *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v331 + 160))(v331);
                        v408 = (CA::Render::ContentStream *)v632;
                        CA::VideoToolbox::copy_surface(v632[34], v429, v430);
LABEL_550:
                        CA::WindowServer::Surface::unref((CA::WindowServer::Surface *)v331);
                        v393 = 1;
                        v24 = v622;
LABEL_551:
                        v714 = 0;
                        *(_QWORD *)&v712.f64[0] = v620;
                        v431 = *((_DWORD *)v408 + 99);
                        LODWORD(v712.f64[1]) = v393 ^ 1;
                        HIDWORD(v712.f64[1]) = v431;
                        LOBYTE(v714) = 1;
                        v432 = v625.f64[0];
                        v433 = v625.f64[1];
                        *(float *)v713 = v432;
                        *(float *)&v713[4] = v433;
                        *(float32x2_t *)&v701.f64[0] = vcvt_f32_s32(*(int32x2_t *)v629.i8);
                        CA::Transform::apply_to_point2((float64x2_t *)&v648, v701.f64, v410);
                        *(int32x2_t *)v434.i8 = vcvt_s32_f32(*(float32x2_t *)&v701.f64[0]);
                        v435 = vcvtq_s64_f64(vmulq_f64(v625, vcvtq_f64_s64(v615)));
                        v436 = vmovn_s64(v435);
                        v437 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v436);
                        if ((vpmax_u32(v437, v437).u32[0] & 0x80000000) != 0)
                        {
                          v434 = vmovn_hight_s64(*(int32x2_t *)v434.i8, v435);
                          v217 = v613;
                        }
                        else
                        {
                          v438 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v641 + 8));
                          v217 = v613;
                          if ((vpmax_u32(v438, v438).u32[0] & 0x80000000) != 0
                            || (v439 = vadd_s32(v436, *(int32x2_t *)v434.i8),
                                *(int32x2_t *)v440.i8 = vmax_s32(*(int32x2_t *)v434.i8, *(int32x2_t *)&v641),
                                v441 = vsub_s32(vmin_s32(v439, vadd_s32(*(int32x2_t *)&v641, *(int32x2_t *)((char *)&v641 + 8))), *(int32x2_t *)v440.i8), v442 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v441), (vpmax_u32(v442, v442).u32[0] & 0x80000000) != 0))
                          {
                            v434.i64[1] = 0;
                          }
                          else
                          {
                            v440.u64[1] = (unint64_t)v441;
                            v434 = v440;
                          }
                        }
                        *(float32x4_t *)&v713[8] = vcvtq_f32_s32(v434);
                        CA::Render::ContentStream::produce_surface((uint64_t)v408, v624, (uint64_t)&v712, v679);
                        goto LABEL_558;
                      }
                    }
                    else if (!v417)
                    {
                      goto LABEL_549;
                    }
                    v423 = CA::WindowServer::IOSurface::wrap_buffer(*(CA::WindowServer::IOSurface **)(v10 + 96), (IOSurfaceRef)v642, 0, 0);
                    v424 = v618;
                    v425 = (*(uint64_t (**)(_QWORD *, _DWORD *, _QWORD))(*v618 + 928))(v618, v328, 0);
                    v426 = (*(uint64_t (**)(_QWORD *, float *, uint64_t))(*v424 + 928))(v424, v423, 1);
                    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD, float64x2_t *, float64x2_t *))(*v424 + 720))(v424, v426, v425, 1, 0, v722, &v712);
                    (*(void (**)(_QWORD *, _QWORD))(*v424 + 408))(v424, 0);
                    v427 = (__IOSurface *)(*(uint64_t (**)(float *))(*(_QWORD *)v423 + 160))(v423);
                    v428 = (__IOSurface *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v331 + 160))(v331);
                    v408 = (CA::Render::ContentStream *)v632;
                    CA::VideoToolbox::copy_surface(v632[34], v427, v428);
                    CA::WindowServer::Surface::unref((CA::WindowServer::Surface *)v423);
                    goto LABEL_550;
                  }
                  v411 = v596;
                  *v596 = 0;
                  v411[1] = 0;
                  v338 = 0uLL;
                }
                v215 = *(double *)v631.i64;
                v221 = 1.0;
                v222 = 1.0;
                v223 = 0.5;
                goto LABEL_535;
              }
              bzero(&v712, 0x430uLL);
              CA::Render::Update::Update((CA::Render::Update *)&v712, (const CA::Bounds *)v722, 0x2000uLL, v215, 0, 0, 0, 0, (const CA::Bounds *)&v641, 0);
              v360 = (unsigned int *)v609;
              v361 = (*v360 | ((unint64_t)*((unsigned __int16 *)v360 + 2) << 32)) & 0xFFFDFFEF7F7BLL | 0x200008004;
              *(_DWORD *)v609 = *(_DWORD *)v609 & 0xFFEF7F7B | 0x8004;
              *((_WORD *)v360 + 2) = WORD2(v361);
              v718 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 1392))(*(_QWORD *)(v10 + 96));
              v362 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 1576))(*(_QWORD *)(v10 + 96));
              v363 = 512;
              if (!v362)
                v363 = 0;
              v364 = *v360 & 0xFFFFFDFF | ((unint64_t)*((unsigned __int16 *)v360 + 2) << 32);
              *v360 = *v360 & 0xFFFFFDFF | v363;
              *((_WORD *)v360 + 2) = WORD2(v364);
              if (CADeviceNeedsP3ShapeTracking::once != -1)
                dispatch_once(&CADeviceNeedsP3ShapeTracking::once, &__block_literal_global_42);
              v365 = (_OWORD *)v608;
              v366 = v609;
              v367 = *(unsigned int *)v609;
              v368 = v367 & 0xFFFFFFFFFEFFFFFFLL | ((unint64_t)*(unsigned __int16 *)(v609 + 4) << 32);
              *(_DWORD *)v609 = v367 & 0xFEFFFFFF | (CADeviceNeedsP3ShapeTracking::p3_tracking << 24);
              *(_WORD *)(v366 + 4) = WORD2(v368);
              memset(v711, 0, sizeof(v711));
              CA::WindowServer::Display::reconciled_display_attributes((CA::WindowServer::Display *)v711, *(_QWORD *)(v10 + 96));
              CA::Render::Update::set_display_attributes((uint64_t)&v712, v711);
              v720 = v686;
              v372 = (unsigned int *)*((_QWORD *)v216 + 17);
              v371 = (unsigned int *)*((_QWORD *)v216 + 18);
              v373 = 0uLL;
              *v365 = 0u;
              v365[1] = 0u;
              v647[4] = 1065353216;
              v646 = &off_1E158D8B0;
              v374 = ((char *)v371 - (char *)v372) & 0x3FFFFFFFCLL;
              if (v374)
              {
                do
                {
                  v375 = *v372++;
                  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v365, v375, v375);
                  v374 -= 4;
                }
                while (v374);
                v372 = (unsigned int *)*((_QWORD *)v216 + 17);
                v371 = (unsigned int *)*((_QWORD *)v216 + 18);
              }
              if (v371 != v372)
                v719 = &v646;
              v377 = (unsigned int *)*((_QWORD *)v216 + 9);
              v376 = (unsigned int *)*((_QWORD *)v216 + 10);
              if (v377 == v376)
              {
                v378 = 0;
              }
              else
              {
                v378 = 0;
                do
                {
                  v379 = CA::Render::Context::context_by_id((CA::Render::Context *)*v377);
                  if (v379)
                  {
                    v380 = (CA::Render::Context *)v379;
                    v381 = (pthread_mutex_t *)(v379 + 72);
                    pthread_mutex_lock((pthread_mutex_t *)(v379 + 72));
                    v382 = 0;
                    v710 = 0;
                    v709 = 0u;
                    v708 = 0u;
                    v707 = 0u;
                    v706 = 0u;
                    v705 = 0u;
                    v704 = 0u;
                    v703 = 0u;
                    v702 = 0u;
                    v701 = 0u;
                    if (v626)
                    {
                      v383 = CA::Render::Context::root_layer_handle(v380);
                      if (v383 && *(_QWORD *)(v383 + 16))
                      {
                        memset(v640, 0, sizeof(v640));
                        v384 = CA::Render::Context::root_layer_handle(v380);
                        if (v384)
                          v384 = *(_QWORD *)(v384 + 16);
                        CA::Render::Layer::compute_frame_transform(v384, 0, (CA::Mat4Impl *)v640, 0);
                        v701 = (float64x2_t)v648;
                        v702 = v649;
                        v703 = v650;
                        v704 = v651;
                        v705 = v652;
                        v706 = v653;
                        v707 = v654;
                        v708 = v655;
                        v709 = v656;
                        LOBYTE(v710) = v710 & 0xE0 | v657 & 0x1F;
                        CA::Transform::set((uint64_t)v645, (CA::Mat4Impl *)v640, 1);
                        v382 = (const CA::Transform *)&v701;
                        CA::Transform::concat_left((CA::Transform *)&v701, v645, v385, v386);
                      }
                      else
                      {
                        v382 = (const CA::Transform *)&v701;
                      }
                    }
                    v387 = CA::Render::Context::root_layer_handle(v380);
                    if (v387)
                      v388 = *(CA::Render::Layer **)(v387 + 16);
                    else
                      v388 = 0;
                    CA::Render::Update::add_context((CA::Render::Update *)&v712, v380, v388, v382);
                    pthread_mutex_unlock(v381);
                    ++v378;
                    v389 = (unsigned int *)((char *)v380 + 8);
                    do
                    {
                      v390 = __ldaxr(v389);
                      v391 = v390 - 1;
                    }
                    while (__stlxr(v391, v389));
                    v24 = v622;
                    if (!v391)
                      (*(void (**)(CA::Render::Context *))(*(_QWORD *)v380 + 16))(v380);
                  }
                  ++v377;
                }
                while (v377 != v376);
              }
              CA::Render::Update::added_all_contexts((CA::Render::Update *)&v712, v369, v370, v373);
              if (v378)
                v392 = v643 == 0;
              else
                v392 = 1;
              v393 = !v392;
              if (v392)
              {
                v408 = (CA::Render::ContentStream *)v632;
                CA::Render::ContentStream::reuse_surface((CA::Render::ContentStream *)v632, SLODWORD(v606));
                LODWORD(v624) = 0;
                LODWORD(v17) = (_DWORD)v616;
              }
              else
              {
                v394 = v619;
                v395 = DWORD1(v619);
                v396 = (void *)MEMORY[0x186DBE2E4]();
                v17 = v618;
                v618[23] = 0;
                *((_DWORD *)v17 + 48) = v394;
                *((_DWORD *)v17 + 49) = v395;
                *((_WORD *)v17 + 408) |= 2u;
                v397 = CGColorSpaceRetain((CGColorSpaceRef)v17[18]);
                v398 = (CGColorSpace *)CAGetColorSpace(0x1Cu);
                CA::OGL::Context::set_colorspace((CA::OGL::Context *)v17, v398);
                CGColorSpaceRelease(v398);
                v703 = 0u;
                v702 = 0u;
                v701 = 0u;
                CA::Shape::operator=((uint64_t)&v701, &v641);
                CA::shape_union(v596, (CA::Shape **)&v701, v399);
                v400 = v611;
                CA::OGL::Renderer::prepare_clip_shape(v611, *(const CA::Render::Update **)v713);
                v401 = ((__n128 (*)(_QWORD *, _QWORD, uint64_t *, uint64_t, _QWORD, _QWORD))*(_QWORD *)(*v17 + 24))(v17, 0, v583, 1, 0, 0);
                v401.n128_u32[0] = v216[14];
                v639 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v401.n128_u64[0]))), (float32x4_t)vdupq_n_s32(0x3B808081u)));
                (*(void (**)(_QWORD *, void *, float16x4_t *))(*v17 + 912))(v17, &CA::Shape::_infinite_shape, &v639);
                CA::OGL::Renderer::render(v400, (const CA::Render::Update *)&v712, 0, v402);
                (*(void (**)(_QWORD *, uint64_t))(*v17 + 408))(v17, 1);
                CA::OGL::Context::set_colorspace((CA::OGL::Context *)v17, v397);
                CGColorSpaceRelease(v397);
                (*(void (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*v17 + 24))(v17, 0, 0, 0, 0, 0);
                *((_WORD *)v17 + 408) &= ~2u;
                v403 = (CA::Shape *)*((_QWORD *)v400 + 2);
                LODWORD(v17) = (_DWORD)v616;
                if (v403)
                {
                  CA::Shape::unref(v403);
                  *((_QWORD *)v400 + 2) = 0;
                }
                v404 = v715;
                v405 = *(_QWORD **)v400;
                v406 = v717;
                *((_DWORD *)v405 + 53) = v716;
                *((_DWORD *)v405 + 54) = v406;
                CA::Render::Update::release_objects((unint64_t *)&v712);
                v407 = *(_QWORD **)v400;
                v407[28] = v404;
                (*(void (**)(_QWORD *, _QWORD))(*v407 + 216))(v407, 0);
                objc_autoreleasePoolPop(v396);
                v408 = (CA::Render::ContentStream *)v632;
                CA::VideoToolbox::copy_surface(v632[34], (__IOSurface *)v642, v612);
                v24 = v622;
                v65 = (const CA::Shape *)v633;
              }
              v646 = &off_1E158D930;
              std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(v608);
              CA::Render::Update::~Update((CA::Render::Update *)&v712, v409);
              goto LABEL_551;
            }
          }
        }
LABEL_574:
        if (v630)
        {
          v452 = mach_absolute_time();
          v453 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10) + v452;
          goto LABEL_580;
        }
        v454 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 1040))(*(_QWORD *)(v10 + 96));
        v455 = *(_DWORD **)(v10 + 96);
        if (v454)
        {
          v456 = (*(double (**)(_DWORD *))(*(_QWORD *)v455 + 760))(v455);
          v457 = CAHostTimeWithTime(v456);
          v453 = CAHostTimeWithTime(v8) - (v457 >> 3);
          goto LABEL_580;
        }
        if ((v455[156] & 0x100) != 0)
        {
          v458 = (*(double (**)(_DWORD *))(*(_QWORD *)v455 + 760))(v455);
          v459 = CAHostTimeWithTime(v458);
          v460 = v459
               * (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 768))(*(_QWORD *)(v10 + 96));
          v461 = CAHostTimeWithTime(v8);
          v462 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
          v463 = v460 + (v459 >> 1);
          v65 = (const CA::Shape *)v633;
          v453 = v461 - v463 + v462;
LABEL_580:
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v10 + 488))(v10, v453);
        }
        v464 = mach_absolute_time();
        v688 = CATimeWithHostTime(v464) - v166;
        if (*(_BYTE *)(v10 + 524))
        {
          v465 = v696;
          if (v696)
          {
            Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            v467 = Mutable;
            v468 = *(const void **)(v10 + 104);
            if (v468)
              CFDictionarySetValue(Mutable, CFSTR("display_name"), v468);
            v723 = 0u;
            memset(v722, 0, sizeof(v722));
            if ((*(unsigned int (**)(_QWORD, _QWORD, float64x2_t *, uint64_t, _QWORD))(**(_QWORD **)(v10 + 96)
                                                                                                + 800))(*(_QWORD *)(v10 + 96), 0, v722, 64, 0))
            {
              v469 = CFStringCreateWithCString(0, (const char *)v722, 0x8000100u);
              if (v469)
              {
                v470 = v469;
                CFDictionarySetValue(v467, CFSTR("display_uuid"), v469);
                CFRelease(v470);
              }
            }
            v471 = CAHostTimeWithTime(v694);
            CA_CFDictionarySetLongLong(v467, CFSTR("presentation_host_time"), v471);
            if (*(double *)&time_scale == 0.0)
            {
              if (time_scale_once != -1)
                dispatch_once_f(&time_scale_once, 0, (dispatch_function_t)initialize_time_scale);
              v10 = v628;
            }
            v632 = (OpaqueVTPixelTransferSession ***)v467;
            CA_CFDictionarySetLongLong(v467, CFSTR("presentation_ntp_time"), (((unint64_t)(v471% (1000000000* (unint64_t)timebase/ timebase)) << 32)/ (1000000000* (unint64_t)timebase/ timebase)) | ((v471/ (1000000000* (unint64_t)timebase/ timebase)) << 32));
            v472 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
            v473 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
            v474 = (const void *)*MEMORY[0x1E0C9AE50];
            v475 = (const void *)*MEMORY[0x1E0C9AE40];
            do
            {
              v476 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              v477 = v476;
              v478 = (const void *)*((_QWORD *)v465 + 1);
              if (v478)
                CFDictionarySetValue(v476, CFSTR("identifier"), v478);
              v479 = CFArrayCreateMutable(0, 0, v472);
              CA_CFArrayAppendDouble(v479, v465[2]);
              CA_CFArrayAppendDouble(v479, v465[3]);
              CA_CFArrayAppendDouble(v479, v465[4]);
              CA_CFArrayAppendDouble(v479, v465[5]);
              CFDictionarySetValue(v477, CFSTR("bounds"), v479);
              CFRelease(v479);
              v480 = CFArrayCreateMutable(0, 0, v472);
              for (i = 6; i != 22; ++i)
                CA_CFArrayAppendDouble(v480, v465[i]);
              CFDictionarySetValue(v477, CFSTR("transform"), v480);
              CFRelease(v480);
              CA_CFDictionarySetDouble(v477, CFSTR("corner_radius"), v465[22]);
              if (*((_BYTE *)v465 + 192))
                v482 = v474;
              else
                v482 = v475;
              CFDictionarySetValue(v477, CFSTR("continuous_corners"), v482);
              CA_CFDictionarySetDouble(v477, CFSTR("opacity"), *((float *)v465 + 47));
              CA_CFDictionarySetDouble(v477, CFSTR("cumulative_opacity"), *((float *)v465 + 46));
              CFArrayAppendValue(v473, v477);
              CFRelease(v477);
              v465 = *(double **)v465;
            }
            while (v465);
            v483 = (CA::Render::ContentStream *)v632;
            CFDictionarySetValue((CFMutableDictionaryRef)v632, CFSTR("regions"), v473);
            CFRelease(v473);
            objc_msgSend(*(id *)(v10 + 472), "sendLayerProperties:", v483);
            CFRelease(v483);
            LODWORD(v17) = (_DWORD)v616;
            v24 = v622;
            v65 = (const CA::Shape *)v633;
          }
        }
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 1608))(*(_QWORD *)(v10 + 96)))
          dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v10 + 88));
        goto LABEL_601;
      }
      if (*(_BYTE *)(v10 + 525))
        v196 = byte_1ECDC6B07 == 0;
      else
        v196 = 0;
      if (v196)
        v197 = 0;
      else
        v197 = v194;
      if (v197 == 1)
        goto LABEL_327;
      if (!v193)
        goto LABEL_338;
      if (!(*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v10 + 96) + 2024))(*(_QWORD *)(v10 + 96), 1, 0))goto LABEL_334;
      v198 = 0;
      v199 = (unsigned __int8 *)(v193 + 26);
      do
      {
        v200 = *v199;
        v199 += 28;
        if (!v200)
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v10 + 96) + 2048))(*(_QWORD *)(v10 + 96), v198);
        ++v198;
      }
      while (v198 != 4);
      v201 = 0;
      v202 = 0;
      v203 = 0;
      if ((_DWORD)v195)
        v204 = 1.0;
      else
        v204 = 0.0;
      v205 = v193 + 20;
      v65 = (const CA::Shape *)v633;
      do
      {
        if (*(_BYTE *)(v205 + 6))
        {
          LOBYTE(v722[0].f64[0]) = 0;
          v203 |= (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, float64x2_t *, float, float, float, float, float, float))(**(_QWORD **)(v10 + 96) + 2040))(*(_QWORD *)(v10 + 96), v201, *(unsigned __int16 *)(v205 + 4), v722, *(float *)(v205 - 20) + (float)(*(float *)(v205 - 12) * 0.5), *(float *)(v205 - 16) + (float)(*(float *)(v205 - 8) * 0.5), *(float *)(v205 - 12), *(float *)(v205 - 8), 0.0, *(float *)v205 * v204) ^ 1;
          v65 = (const CA::Shape *)v633;
          v202 = (LOBYTE(v722[0].f64[0]) | v202) != 0;
        }
        ++v201;
        v205 += 28;
      }
      while (v201 != 4);
      if (v202)
      {
        v206 = *(_QWORD *)(v10 + 96);
        v207 = mach_absolute_time();
        v208 = CATimeWithHostTime(v207);
        (*(void (**)(uint64_t, double))(*(_QWORD *)v206 + 2072))(v206, v208 + 0.05);
        goto LABEL_336;
      }
      if ((v203 & 1) != 0)
      {
LABEL_336:
        v722[0].f64[0] = 0.0;
        *(int64x2_t *)((char *)v722 + 8) = vdupq_n_s64(0x40000000000uLL);
        (*(void (**)(uint64_t, float64x2_t *, double))(*(_QWORD *)v10 + 184))(v10, v722, 0.0);
      }
      (*(void (**)(_QWORD, unint64_t *, uint64_t))(**(_QWORD **)(v10 + 96) + 1944))(*(_QWORD *)(v10 + 96), v664, v195);
      goto LABEL_338;
    }
    v174 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 392))(v10);
    v65 = v170;
    if (v174)
      (*(void (**)(_QWORD, float64_t))(*(_QWORD *)*v174 + 160))(*v174, COERCE_FLOAT64_T(*(_QWORD *)&v603));
    if ((*(_DWORD *)(*(_QWORD *)(v10 + 96) + 624) & 0x100) != 0)
    {
      if (CADeviceSupportsNextSwapAnnouncement::once[0] != -1)
        dispatch_once(CADeviceSupportsNextSwapAnnouncement::once, &__block_literal_global_274);
      if (CADeviceSupportsNextSwapAnnouncement::b)
        (*(void (**)(_QWORD, unint64_t *, double))(**(_QWORD **)(v10 + 96) + 2128))(*(_QWORD *)(v10 + 96), v664, v172);
    }
    (*(void (**)(uint64_t, unint64_t *, unsigned int *))(*(_QWORD *)v10 + 424))(v10, v664, &v635);
    v175 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 392))(v10);
    if (v175)
    {
      v629 = *(int32x4_t *)(*(_QWORD *)v175 + 692);
      v602 = vuzp1q_s32(v629, vrev64q_s32(v629));
      (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 1936))(*(_QWORD *)(v10 + 96));
      if (v629.i32[0])
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v10 + 96) + 384))(*(_QWORD *)(v10 + 96), 0);
      v598 = v600;
    }
    if ((v635 & 3) != 0)
      v176 = v627;
    else
      v176 = 1;
    v627 = v176;
    if (((*(uint64_t (**)(_QWORD, unint64_t *))(**(_QWORD **)(v10 + 96) + 592))(*(_QWORD *)(v10 + 96), v664) & 1) != 0|| (int)v632 < 1)
    {
      goto LABEL_296;
    }
    LODWORD(v632) = (_DWORD)v632 - 1;
    if (v170)
      CA::Shape::unref(v170);
    v49 = (CA::Shape **)CA::Shape::new_shape((CA::Shape *)(*(_QWORD *)(v10 + 96) + 168), v177);
    v629.i32[0] = 0;
LABEL_262:
    *v72 |= 0x40u;
    CA::Render::Fence::BatchWaitLock::invalidate((uint64_t)v644);
    CA::Render::Update::~Update((CA::Render::Update *)v664, v178);
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v10 + 96) + 392))(*(_QWORD *)(v10 + 96), 0);
    v631.i64[0] = mach_absolute_time();
  }
  v627 = 245;
  v182 = *(double *)&v619;
  v24 = v54;
LABEL_616:
  v488 = *(double ***)(v10 + 200);
  if (v488)
  {
    v489 = *v488;
    v490 = v680;
    *((_DWORD *)v489 + 53) = v679;
    *((_DWORD *)v489 + 54) = v490;
    CA::Render::Update::release_objects(v664);
    v491 = *v488;
    v491[28] = v8;
    (*(void (**)(double *, _QWORD))(*(_QWORD *)v491 + 216))(v491, 0);
  }
  v492 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 392))(v10);
  if (v492)
  {
    v494 = v492;
    v632 = *(OpaqueVTPixelTransferSession ****)(*(_QWORD *)v492 + 696);
    if ((CA::WindowServer::Server::check_performance(CA::OGL::Renderer *,CA::Render::Update *)::initialized & 1) == 0)
    {
      CA::WindowServer::Server::check_performance(CA::OGL::Renderer *,CA::Render::Update *)::initialized = 1;
      LOBYTE(v722[0].f64[0]) = 0;
      v495 = (const __CFString *)*MEMORY[0x1E0C9B248];
      CFPreferencesGetAppBooleanValue(CFSTR("PerfWarnings"), (CFStringRef)*MEMORY[0x1E0C9B248], (Boolean *)v722);
      if (LOBYTE(v722[0].f64[0]))
        CA::WindowServer::Server::check_performance(CA::OGL::Renderer *,CA::Render::Update *)::enable_warnings = 1;
      AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("PerfTimeThreshold"), v495, (Boolean *)v722);
      if (LOBYTE(v722[0].f64[0]))
        *(double *)&CA::WindowServer::Server::check_performance(CA::OGL::Renderer *,CA::Render::Update *)::time_threshold = (float)((float)AppIntegerValue * 0.001);
      v497 = CFPreferencesGetAppIntegerValue(CFSTR("PerfInputDelayThreshold"), v495, (Boolean *)v722);
      if (LOBYTE(v722[0].f64[0]))
        *(double *)&CA::WindowServer::Server::check_performance(CA::OGL::Renderer *,CA::Render::Update *)::input_delay_threshold = (float)((float)v497 * 0.001);
      v498 = CFPreferencesGetAppIntegerValue(CFSTR("PerfOffscreenThreshold"), v495, (Boolean *)v722);
      if (LOBYTE(v722[0].f64[0]))
        CA::WindowServer::Server::check_performance(CA::OGL::Renderer *,CA::Render::Update *)::passes_threshold = v498;
      v24 = v622;
      v65 = (const CA::Shape *)v633;
    }
    if ((CA::WindowServer::Server::check_performance(CA::OGL::Renderer *,CA::Render::Update *)::enable_warnings & 1) != 0
      || BYTE9(xmmword_1ECDC6A70))
    {
      v499 = mach_absolute_time();
      v500 = CATimeWithHostTime(v499);
      if (v500 >= *(double *)(v10 + 304) + 5.0)
      {
        v501 = v688;
        v502 = v687;
        if (v691 == 0.0)
          v503 = v691;
        else
          v503 = v666 - v691;
        v504 = *(_DWORD *)(*(_QWORD *)v494 + 692);
        v505 = *(_DWORD *)(*(_QWORD *)v494 + 700);
        if (initialized[0] != -1)
          dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
        if (*(float *)&dword_1ECDC6960)
          *(double *)&CA::WindowServer::Server::check_performance(CA::OGL::Renderer *,CA::Render::Update *)::time_threshold = (float)((float)*(float *)&dword_1ECDC6960 * 0.001);
        if (*(float *)&dword_1ECDC6964)
          *(double *)&CA::WindowServer::Server::check_performance(CA::OGL::Renderer *,CA::Render::Update *)::input_delay_threshold = (float)((float)*(float *)&dword_1ECDC6964 * 0.001);
        v506 = *(float *)&dword_1ECDC6968;
        if (*(float *)&dword_1ECDC6968)
          CA::WindowServer::Server::check_performance(CA::OGL::Renderer *,CA::Render::Update *)::passes_threshold = *(float *)&dword_1ECDC6968;
        else
          v506 = CA::WindowServer::Server::check_performance(CA::OGL::Renderer *,CA::Render::Update *)::passes_threshold;
        if (v501 + v502 > *(double *)&CA::WindowServer::Server::check_performance(CA::OGL::Renderer *,CA::Render::Update *)::time_threshold
          || v503 > *(double *)&CA::WindowServer::Server::check_performance(CA::OGL::Renderer *,CA::Render::Update *)::input_delay_threshold
          || v504 > v506)
        {
          memset(v722, 0, 24);
          x_stream_push((uint64_t)v722);
          CA::WindowServer::print_layer_trees((uint64_t)v601, 0, v666);
          if (*(_QWORD *)&v722[0].f64[0])
            v553 = CFStringCreateWithCString(0, *(const char **)&v722[0].f64[0], 0x8000100u);
          else
            v553 = 0;
          x_stream_pop_((uint64_t)v722);
          if (*(_QWORD *)&v722[0].f64[0])
          {
            free(*(void **)&v722[0].f64[0]);
            memset(v722, 0, 24);
          }
          v555 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          CA_CFDictionarySetDouble(v555, CFSTR("WarningTime"), v500);
          CA_CFDictionarySetDouble(v555, CFSTR("UpdateTime"), v666);
          CA_CFDictionarySetDouble(v555, CFSTR("UpdateInputTime"), v691);
          CA_CFDictionarySetDouble(v555, CFSTR("UpdateInputDelay"), v503);
          CA_CFDictionarySetDouble(v555, CFSTR("UpdateCreationTime"), v687);
          CA_CFDictionarySetDouble(v555, CFSTR("UpdateRenderTime"), v688);
          CA_CFDictionarySetInt(v555, CFSTR("UpdatePrepareLayerCount"), v689);
          CA_CFDictionarySetInt(v555, CFSTR("UpdatePrepareLayer0Count"), v690);
          CA_CFDictionarySetInt(v555, CFSTR("RenderOffscreenPasses"), v504);
          CA_CFDictionarySetInt(v555, CFSTR("RenderShaderCompiles"), v505);
          if (v553)
          {
            CFDictionarySetValue(v555, CFSTR("LayerTree"), v553);
            CFRelease(v553);
          }
          *(double *)(v10 + 304) = v500;
          *(_QWORD *)(v10 + 312) = v555;
          notify_post("com.apple.CoreAnimation.CAWindowServer.Performance");
          LODWORD(v17) = (_DWORD)v616;
          v24 = v622;
        }
        else
        {
          LODWORD(v17) = (_DWORD)v616;
        }
      }
    }
  }
  else
  {
    v632 = 0;
  }
  CA::Render::Update::~Update((CA::Render::Update *)v664, v493);
  v189 = 0;
LABEL_645:
  if (v599 && v627 >= 4u)
  {
    if (x_log_hook_p())
    {
      v579 = v627;
      x_log_();
    }
    else
    {
      v507 = x_log_category_flipbook;
      if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v722[0].f64[0]) = 67109376;
        HIDWORD(v722[0].f64[0]) = v189;
        LOWORD(v722[0].f64[1]) = 1024;
        *(_DWORD *)((char *)&v722[0].f64[1] + 2) = v627;
        _os_log_impl(&dword_184457000, v507, OS_LOG_TYPE_DEFAULT, "non-detached render failed with can_update_status 0x%x, render_status 0x%x", (uint8_t *)v722, 0xEu);
      }
    }
  }
  v508 = v65;
  v509 = v588;
  v510 = v586;
  if (v24)
  {
    for (j = 0; j != v24; ++j)
    {
      v512 = (unsigned int *)v510[j];
      v513 = v512 + 2;
      do
      {
        v514 = __ldaxr(v513);
        v515 = v514 - 1;
      }
      while (__stlxr(v515, v513));
      if (!v515)
        (*(void (**)(unsigned int *))(*(_QWORD *)v512 + 16))(v512);
    }
  }
  if (v587 > 0x1000)
    free(v510);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 192))(v10, v599 | v597);
  if (v508)
    CA::Shape::unref(v508);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 216))(*(_QWORD *)(v10 + 96)) & 1) == 0)
  {
    v516 = *(_QWORD *)(v10 + 96);
    if ((*(_DWORD *)(v516 + 624) & 0x80) == 0 && (**(_BYTE **)(v516 + 728) & 0xFE) != 2)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 448))(v10);
  }
  if (byte_1ECDC6A60)
  {
    v617 |= 0x2000000000000000uLL;
    if (v182 >= v8)
    {
      v560 = v182 <= v8 || v8 == 0.0;
      v561 = v604 | 0x2000000000000000;
      if (!v560)
        v561 = 0x2000000000000000;
      v604 = v561;
      v182 = v8;
    }
  }
  if (v509)
  {
    v517 = v8 + 0.1;
    v518 = v617 | 0x40000;
    v519 = v182 >= v8 + 0.1 || v517 == 0.0;
    v520 = v604 | 0x40000;
    if (!v519)
      v520 = 0x40000;
    v627 = 247;
    if (v182 <= v517)
      v521 = v8 + 0.1;
    else
      v521 = v182;
    if (v182 <= v517)
      v522 = v520;
    else
      v522 = v604;
  }
  else
  {
    v523 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 96) + 336))(*(_QWORD *)(v10 + 96));
    if (v182 <= v8 || v8 == 0.0)
      v525 = v604;
    else
      v525 = 0;
    v526 = v523 | v525;
    if (v182 >= v8)
      v527 = v8;
    else
      v527 = v182;
    if (v182 < v8)
      v526 = v604;
    if (v523)
      v521 = v527;
    else
      v521 = v182;
    if (v523)
      v522 = v526;
    else
      v522 = v604;
    if (v523)
      v518 = v523 | v617;
    else
      v518 = v617;
  }
  v528 = *(_QWORD *)(*(_QWORD *)(v10 + 96) + 48);
  pthread_mutex_unlock(v591);
  *(double *)v634 = v521;
  v634[1] = v522;
  v634[2] = v518;
  (*(void (**)(uint64_t, _QWORD *, double))(*(_QWORD *)v10 + 184))(v10, v634, v8);
  v529 = v24 != v589 || v528 == 0;
  v530 = v590;
  if (!v529)
    v530 = 1;
  if (v530 == 1)
  {
    v722[0].f64[0] = 0.0;
    *(int64x2_t *)((char *)v722 + 8) = vdupq_n_s64(0x80000uLL);
    (*(void (**)(uint64_t, float64x2_t *, double))(*(_QWORD *)v528 + 184))(v528, v722, 0.0);
  }
  v531 = v595;
  if (!BYTE6(ca_debug_options))
    goto LABEL_707;
  v562 = (CA::Render *)x_log_begin();
  CA::Render::show_statistics(v562);
  v563 = (void **)x_stream_pop_(0);
  v564 = x_stream_get(v563);
  v565 = 0;
  *(_QWORD *)&v566 = 136315650;
  v633 = v566;
  while (2)
  {
    v567 = 0;
    v568 = &v564[v565];
    v569 = -1;
    while (1)
    {
      if (v568[v567] == 10)
      {
        v569 = v567;
        goto LABEL_795;
      }
      if (!v568[v567])
        break;
LABEL_795:
      ++v567;
      v570 = 32512;
      if (v567 == 32512)
        goto LABEL_796;
    }
    v570 = v567;
LABEL_796:
    if (v569 <= -1 || v568[v570] == 0)
      v572 = v570;
    else
      v572 = v569 + 1;
    if (v572 > 0)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v573 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v722[0].f64[0]) = v633;
          v574 = "continued...\n";
          if (!v565)
            v574 = "";
          *(_QWORD *)((char *)v722[0].f64 + 4) = v574;
          WORD2(v722[0].f64[1]) = 1040;
          *(_DWORD *)((char *)&v722[0].f64[1] + 6) = v572;
          WORD1(v722[1].f64[0]) = 2080;
          *(_QWORD *)((char *)v722[1].f64 + 4) = &v564[v565];
          _os_log_impl(&dword_184457000, v573, OS_LOG_TYPE_DEFAULT, "%s%.*s", (uint8_t *)v722, 0x1Cu);
        }
      }
      v565 += v572;
      continue;
    }
    break;
  }
  x_log_end_free_(v563);
  LODWORD(v17) = (_DWORD)v616;
  v531 = v595;
LABEL_707:
  CA::Render::collect(0, v8);
  if (v594 + 1 >= 2 && os_signpost_enabled(v582))
  {
    if ((v627 + 22) > 0x19u)
      v576 = -1;
    else
      v576 = dword_18475E830[(v627 + 22)];
    v577 = _MXSignpostMetricsSnapshot();
    LODWORD(v722[0].f64[0]) = 67240450;
    HIDWORD(v722[0].f64[0]) = v576;
    LOWORD(v722[0].f64[1]) = 2114;
    *(_QWORD *)((char *)&v722[0].f64[1] + 2) = v577;
    _os_signpost_emit_with_name_impl(&dword_184457000, v582, OS_SIGNPOST_INTERVAL_END, v594, "Rendering", "reason=%{public,name=reason}d\n%{public, signpost:metrics}@", (uint8_t *)v722, 0x12u);
    LODWORD(v17) = (_DWORD)v616;
    v531 = v595;
  }
  v532 = mach_continuous_time();
  v533 = &x_log_category_windowserver;
  if (v531 && v532 - *(_QWORD *)&v603 > v531)
  {
    if (CA::WindowServer::Server::server_stall_handle(void)::once_token[0] != -1)
      dispatch_once(CA::WindowServer::Server::server_stall_handle(void)::once_token, &__block_literal_global_172);
    v533 = &CA::WindowServer::Server::server_stall_handle(void)::handle;
  }
  v534 = *v533;
  v535 = v602.i32[0];
  if (v602.i32[0] == -1)
  {
    if ((_BYTE)v627)
    {
      if ((_DWORD)v17 && os_signpost_enabled(v534))
      {
        if ((v627 + 22) > 0x19u)
          v545 = "Unknown status";
        else
          v545 = off_1E15A9EA0[(char)(v627 + 22)];
        LODWORD(v722[0].f64[0]) = 134350082;
        *(_QWORD *)((char *)v722[0].f64 + 4) = v531;
        WORD2(v722[0].f64[1]) = 1026;
        *(_DWORD *)((char *)&v722[0].f64[1] + 6) = v584;
        WORD1(v722[1].f64[0]) = 2050;
        *(float64_t *)((char *)v722[1].f64 + 4) = v603;
        WORD2(v722[1].f64[1]) = 2082;
        *(_QWORD *)((char *)&v722[1].f64[1] + 6) = v545;
        HIWORD(v722[2].f64[0]) = 1026;
        LODWORD(v722[2].f64[1]) = v627;
        goto LABEL_760;
      }
    }
    else if ((_DWORD)v17 && os_signpost_enabled(v534))
    {
      LODWORD(v722[0].f64[0]) = 134349568;
      *(_QWORD *)((char *)v722[0].f64 + 4) = v531;
      WORD2(v722[0].f64[1]) = 1026;
      *(_DWORD *)((char *)&v722[0].f64[1] + 6) = v584;
      WORD1(v722[1].f64[0]) = 2050;
      *(float64_t *)((char *)v722[1].f64 + 4) = v603;
      goto LABEL_760;
    }
  }
  else if ((_BYTE)v627)
  {
    if ((_DWORD)v17 && os_signpost_enabled(v534))
    {
      if (v535 >= 0xFFFF)
        v536 = 0xFFFF;
      else
        v536 = v535;
      v537 = v536 & ~(v536 >> 31);
      v538 = v602.i32[1];
      if (v602.i32[1] >= 0xFFFF)
        v538 = 0xFFFF;
      v539 = v602.i32[2];
      v540 = v538 & ~(v538 >> 31);
      if (v602.i32[2] >= 0xFFFF)
        v539 = 0xFFFF;
      v541 = v539 & ~(v539 >> 31);
      if (v602.i32[3] >= 0xFFFF)
        v542 = 0xFFFF;
      else
        v542 = v602.i32[3];
      v543 = v542 & ~(v542 >> 31);
      if ((v627 + 22) > 0x19u)
        v544 = "Unknown status";
      else
        v544 = off_1E15A9EA0[(char)(v627 + 22)];
      LODWORD(v722[0].f64[0]) = 134351362;
      *(_QWORD *)((char *)v722[0].f64 + 4) = v531;
      WORD2(v722[0].f64[1]) = 1026;
      *(_DWORD *)((char *)&v722[0].f64[1] + 6) = v584;
      WORD1(v722[1].f64[0]) = 2050;
      *(float64_t *)((char *)v722[1].f64 + 4) = v603;
      WORD2(v722[1].f64[1]) = 1026;
      *(_DWORD *)((char *)&v722[1].f64[1] + 6) = v537;
      WORD1(v722[2].f64[0]) = 1026;
      LOWORD(v722[2].f64[1]) = 1026;
      *(_DWORD *)((char *)&v722[2].f64[1] + 2) = v541;
      HIWORD(v722[2].f64[1]) = 1026;
      HIDWORD(v722[2].f64[0]) = v540;
      LODWORD(v723) = v543;
      WORD2(v723) = 2050;
      *(_QWORD *)((char *)&v723 + 6) = v598;
      HIWORD(v723) = 2082;
      *(_QWORD *)&v724 = v544;
      WORD4(v724) = 1026;
      *(_DWORD *)((char *)&v724 + 10) = v627;
      goto LABEL_760;
    }
  }
  else if ((_DWORD)v17 && os_signpost_enabled(v534))
  {
    v546 = v602.i32[1];
    v547 = v602.i32[2];
    v548 = v602.i32[3];
    if (v535 >= 0xFFFF)
      v549 = 0xFFFF;
    else
      v549 = v535;
    v550 = v549 & ~(v549 >> 31);
    LODWORD(v722[0].f64[0]) = 134350848;
    if (v602.i32[1] >= 0xFFFF)
      v546 = 0xFFFF;
    *(_QWORD *)((char *)v722[0].f64 + 4) = v531;
    WORD2(v722[0].f64[1]) = 1026;
    v551 = v546 & ~(v546 >> 31);
    *(_DWORD *)((char *)&v722[0].f64[1] + 6) = v584;
    if (v602.i32[2] >= 0xFFFF)
      v547 = 0xFFFF;
    WORD1(v722[1].f64[0]) = 2050;
    v552 = v547 & ~(v547 >> 31);
    *(float64_t *)((char *)v722[1].f64 + 4) = v603;
    if (v602.i32[3] >= 0xFFFF)
      v548 = 0xFFFF;
    WORD2(v722[1].f64[1]) = 1026;
    *(_DWORD *)((char *)&v722[1].f64[1] + 6) = v550;
    WORD1(v722[2].f64[0]) = 1026;
    LOWORD(v722[2].f64[1]) = 1026;
    *(_DWORD *)((char *)&v722[2].f64[1] + 2) = v552;
    HIWORD(v722[2].f64[1]) = 1026;
    HIDWORD(v722[2].f64[0]) = v551;
    LODWORD(v723) = v548 & ~(v548 >> 31);
    WORD2(v723) = 2050;
    *(_QWORD *)((char *)&v723 + 6) = v598;
LABEL_760:
    _os_signpost_emit_unreliably_with_name_impl();
  }
  kdebug_trace();
  v14 = v592;
  v11 = v593;
LABEL_762:
  qword_1EDD12438 += mach_absolute_time() - v14;
LABEL_763:
  v554 = pthread_getspecific(current_display_slot);
  if (v554 && *v554)
    --*v554;
  objc_autoreleasePoolPop(v11);
}

void CA::WindowServer::get_context_logical_bounds(CA::WindowServer *this, CA::Render::Context *a2, int32x2_t *a3, CA::Bounds *a4, BOOL *a5)
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  int32x2_t v12;
  int32x2_t v13;
  float64x2_t v14;
  int8x16_t v15;
  int8x16_t v21;
  int8x16_t v22;
  float64x2_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!BYTE13(xmmword_1ECDC6A70) && (*((_BYTE *)this + 13) & 0x80) != 0)
  {
    v9 = CA::Render::Context::root_layer_handle(this);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 40);
      if (v10)
      {
        CA::Render::Layer::frame((CA::Render::Layer *)&v22, *(CA::Render::Layer **)(v10 + 32));
        v11 = v23.f64[1];
        if (v23.f64[0] > v23.f64[1])
          v11 = v23.f64[0];
        if (v11 < 1073741820.0)
        {
          v14.f64[0] = NAN;
          v14.f64[1] = NAN;
          v15 = (int8x16_t)vnegq_f64(v14);
          __asm { FMOV            V4.2D, #0.5 }
          v12 = vmovn_s64(vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8(v15, _Q4, v22), (float64x2_t)v22)));
          v21 = (int8x16_t)vaddq_f64((float64x2_t)v22, v23);
          v13 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8(v15, _Q4, v21), (float64x2_t)v21))), v12);
        }
        else
        {
          v12 = vdup_n_s32(0xE0000001);
          v13 = (int32x2_t)0xC0000000C0000000;
        }
        *a3 = v12;
        a3[1] = v13;
        *(_BYTE *)a2 = 1;
        if ((*((_BYTE *)this + 14) & 1) != 0)
          *(_BYTE *)a4 = 1;
      }
    }
  }
}

uint64_t CA::Render::Fence::BatchWaitLock::invalidate(uint64_t this)
{
  unint64_t *v1;
  unsigned __int8 *v2;
  unsigned __int8 v3;
  _opaque_pthread_t *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  int8x8_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  __uint64_t v20[2];

  v1 = (unint64_t *)this;
  v20[1] = *MEMORY[0x1E0C80C00];
  v2 = (unsigned __int8 *)(this + 8);
  do
    v3 = __ldxr(v2);
  while (__stxr(1u, v2));
  if ((v3 & 1) == 0)
  {
    pthread_mutex_lock(&CA::Render::Fence::_bwait_mutex);
    v4 = pthread_self();
    v20[0] = 0;
    if (pthread_threadid_np(v4, v20))
      __assert_rtn("invalidate", "render-fence.cpp", 1947, "r == noErr");
    v5 = *v1;
    if (*v1 != v20[0])
      __assert_rtn("invalidate", "render-fence.cpp", 1948, "_tid == tid");
    v6 = CA::Render::Fence::_bwait_readers_by_tid;
    if (!CA::Render::Fence::_bwait_readers_by_tid)
      __assert_rtn("invalidate", "render-fence.cpp", 1950, "_bwait_readers_by_tid != nullptr");
    v7 = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>((_QWORD *)CA::Render::Fence::_bwait_readers_by_tid, *v1);
    if (!v7)
      __assert_rtn("invalidate", "render-fence.cpp", 1952, "ri != _bwait_readers_by_tid->end ()");
    v8 = *((_DWORD *)v7 + 6);
    if (v8 == 1)
    {
      v9 = *(int8x8_t *)(v6 + 8);
      v10 = v7[1];
      v11 = (uint8x8_t)vcnt_s8(v9);
      v11.i16[0] = vaddlv_u8(v11);
      if (v11.u32[0] > 1uLL)
      {
        if (v10 >= *(_QWORD *)&v9)
          v10 %= *(_QWORD *)&v9;
      }
      else
      {
        v10 &= *(_QWORD *)&v9 - 1;
      }
      v12 = *(_QWORD **)(*(_QWORD *)v6 + 8 * v10);
      do
      {
        v13 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12 != v7);
      if (v13 == (_QWORD *)(v6 + 16))
        goto LABEL_28;
      v14 = v13[1];
      if (v11.u32[0] > 1uLL)
      {
        if (v14 >= *(_QWORD *)&v9)
          v14 %= *(_QWORD *)&v9;
      }
      else
      {
        v14 &= *(_QWORD *)&v9 - 1;
      }
      if (v14 != v10)
      {
LABEL_28:
        if (!*v7)
          goto LABEL_29;
        v15 = *(_QWORD *)(*v7 + 8);
        if (v11.u32[0] > 1uLL)
        {
          if (v15 >= *(_QWORD *)&v9)
            v15 %= *(_QWORD *)&v9;
        }
        else
        {
          v15 &= *(_QWORD *)&v9 - 1;
        }
        if (v15 != v10)
LABEL_29:
          *(_QWORD *)(*(_QWORD *)v6 + 8 * v10) = 0;
      }
      v16 = *v7;
      if (*v7)
      {
        v17 = *(_QWORD *)(v16 + 8);
        if (v11.u32[0] > 1uLL)
        {
          if (v17 >= *(_QWORD *)&v9)
            v17 %= *(_QWORD *)&v9;
        }
        else
        {
          v17 &= *(_QWORD *)&v9 - 1;
        }
        if (v17 != v10)
        {
          *(_QWORD *)(*(_QWORD *)v6 + 8 * v17) = v13;
          v16 = *v7;
        }
      }
      *v13 = v16;
      *v7 = 0;
      --*(_QWORD *)(v6 + 24);
      operator delete(v7);
      v18 = CA::Render::Fence::_bwait_readers_by_tid;
      if (*(_QWORD *)(CA::Render::Fence::_bwait_readers_by_tid + 16))
        return pthread_mutex_unlock(&CA::Render::Fence::_bwait_mutex);
      v19 = *(void **)CA::Render::Fence::_bwait_readers_by_tid;
      *(_QWORD *)CA::Render::Fence::_bwait_readers_by_tid = 0;
      if (v19)
        operator delete(v19);
      MEMORY[0x186DBD990](v18, 0x10A0C408EF24B1CLL);
      CA::Render::Fence::_bwait_readers_by_tid = 0;
    }
    else
    {
      *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned long long,unsigned int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned int>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)v6, v5, v1)+ 6) = v8 - 1;
      if (CA::Render::Fence::_bwait_readers_by_tid)
        return pthread_mutex_unlock(&CA::Render::Fence::_bwait_mutex);
    }
    if (CA::Render::Fence::_bwait_writer_pending)
      pthread_cond_signal(&CA::Render::Fence::_bwait_cond_writer);
    return pthread_mutex_unlock(&CA::Render::Fence::_bwait_mutex);
  }
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::update_interval_complexity(uint64_t this, int a2, int a3, int a4, char a5)
{
  unint64_t *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;

  v5 = *(unint64_t **)(this + 25504);
  if (v5)
  {
    v6 = *v5;
    if (a2 >= 4095)
      v7 = 4095;
    else
      v7 = a2;
    v8 = v6 & 0xFFFFFFFFFFFFF000 | v7 & ~(v7 >> 31);
    if ((a5 & 1) == 0)
      v8 = *v5;
    if (a3 >= 4095)
      v9 = 4095;
    else
      v9 = a3;
    v10 = v8 & 0xFFFFFFFFFF000FFFLL | ((unint64_t)(v9 & ~(v9 >> 31)) << 12);
    if ((a5 & 2) != 0)
      v8 = v10;
    if (a4 >= 4095)
      v11 = 4095;
    else
      v11 = a4;
    v12 = v8 & 0xFFFFFFF000FFFFFFLL | ((unint64_t)(v11 & ~(v11 >> 31)) << 24);
    if ((a5 & 4) != 0)
      v13 = v12;
    else
      v13 = v8;
    if (v13 != v6)
    {
      *v5 = v13;
      this = v5[5];
      if (this)
      {
        work_interval_instance_set_complexity();
        return work_interval_instance_update();
      }
    }
  }
  return this;
}

void CARecordCurrentDisplay::CARecordCurrentDisplay(CARecordCurrentDisplay *this, int a2)
{
  _QWORD *v3;
  uint64_t v4;

  *(_DWORD *)this = a2;
  if (CARecordCurrentDisplayPush::once[0] != -1)
    dispatch_once(CARecordCurrentDisplayPush::once, &__block_literal_global_14689);
  v3 = pthread_getspecific(current_display_slot);
  if (!v3)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    v3[1] = 0;
    pthread_setspecific(current_display_slot, v3);
  }
  v4 = *(unsigned int *)v3;
  if (v4 <= 2)
    *((_DWORD *)v3 + v4 + 1) = a2;
  *(_DWORD *)v3 = v4 + 1;
}

double CA::WindowServer::IOMFBDisplay::dynamic_refresh_rate(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v2;
  double result;
  unsigned int v4;

  v2 = *(_QWORD *)this;
  if ((*((_DWORD *)this + 156) & 0x100) != 0)
  {
    v4 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(v2 + 136))(this);
    if (!v4)
      v4 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 784))(this);
    return (*(double (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 760))(this) * (double)v4;
  }
  else
  {
    (*(void (**)(CA::WindowServer::IOMFBDisplay *))(v2 + 744))(this);
  }
  return result;
}

void CA::WindowServer::IOMFBDisplay::update_server_source_frame_interval_range(os_unfair_lock_s *this, const CAFrameIntervalRange *a2, int a3, int a4)
{
  os_unfair_lock_s *v6;
  int v7;
  int os_unfair_lock_opaque_low;
  int v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  unsigned int var0;
  unsigned int var1;
  unsigned int var2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = this + 6846;
  v7 = this[6846]._os_unfair_lock_opaque != a2->var0
    || this[6847]._os_unfair_lock_opaque != a2->var1
    || this[6848]._os_unfair_lock_opaque != a2->var2;
  os_unfair_lock_opaque_low = LOBYTE(this[7032]._os_unfair_lock_opaque);
  v9 = BYTE1(this[7032]._os_unfair_lock_opaque);
  if ((v7 & 1) != 0 || (os_unfair_lock_opaque_low == a3 ? (v10 = v9 == a4) : (v10 = 0), !v10))
  {
    if (((v9 == a4) & ~v7) == 0)
    {
      v11 = *(_QWORD *)&a2->var0;
      this[6848]._os_unfair_lock_opaque = a2->var2;
      *(_QWORD *)&v6->_os_unfair_lock_opaque = v11;
      BYTE1(this[7032]._os_unfair_lock_opaque) = a4;
      v12 = a4 == 0;
      if (a4)
        var0 = 2;
      else
        var0 = a2->var0;
      if (a4)
        var1 = 2;
      else
        var1 = a2->var1;
      if (v12)
        var2 = a2->var2;
      else
        var2 = 2;
      CA::WindowServer::IOMFBDisplay::register_frame_interval_range(this, 0, var0, var1, var2, a3);
    }
    if (os_unfair_lock_opaque_low != a3)
    {
      LOBYTE(v6[186]._os_unfair_lock_opaque) = a3;
      os_unfair_lock_lock(this + 6839);
      CA::WindowServer::IOMFBDisplay::recompute_server_frame_interval_locked((CA::WindowServer::IOMFBDisplay *)this, v16, v17, v18, v19, v20, v21, v22);
      os_unfair_lock_unlock(this + 6839);
    }
  }
}

double CA::WindowServer::IOMFBServer::low_latency_threshold(CA::WindowServer::IOMFBServer *this)
{
  return *((double *)this + 110);
}

uint64_t CA::WindowServer::Display::needs_display_roi_shape_tracking(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::AppleInternalDisplay::tracks_velocity(CA::WindowServer::AppleInternalDisplay *this)
{
  if (byte_1ECDC6ACF)
    return 0;
  else
    return (*((_DWORD *)this + 156) >> 8) & 1;
}

BOOL CA::WindowServer::IOMFBDisplay::needs_visible_shape_tracking(CA::WindowServer::IOMFBDisplay *this)
{
  pthread_mutex_t *v2;
  unsigned int v3;
  _BOOL8 v4;
  uint64_t v5;

  v2 = (pthread_mutex_t *)((char *)this + 25688);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25688));
  v3 = *((_DWORD *)this + 6419);
  if (!*((_QWORD *)this + 6 * v3 + 3221))
    goto LABEL_8;
  if (CADeviceNeedsDisplayWorkarounds::once[0] != -1)
    dispatch_once(CADeviceNeedsDisplayWorkarounds::once, &__block_literal_global_52_9800);
  if (!CADeviceNeedsDisplayWorkarounds::needs_workarounds)
  {
    v5 = *((_QWORD *)this + 6 * v3 + 3220);
    if (v5)
    {
      v4 = (*(_BYTE *)(v5 + 132) & 4) == 0;
      goto LABEL_9;
    }
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v4 = 1;
LABEL_9:
  pthread_mutex_unlock(v2);
  return v4;
}

double CA::WindowServer::IOMFBDisplay::secure_indicator_animating_deadline(CA::WindowServer::IOMFBDisplay *this)
{
  return *((double *)this + 3312);
}

uint64_t CA::WindowServer::IOMFBServer::allows_edr(CA::WindowServer::IOMFBServer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 872))(*((_QWORD *)this + 12));
}

uint64_t CA::WindowServer::IOMFBDisplay::finished_update(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned int *)this + 6474);
}

uint64_t CA::WindowServer::IOMFBDisplay::composited_update(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned int *)this + 6475);
}

BOOL CA::Render::Chromaticity::operator==(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32)
      && *(float *)(a1 + 16) == *(float *)(a2 + 16)
      && *(float *)(a1 + 20) == *(float *)(a2 + 20)
      && *(float *)(a1 + 8) == *(float *)(a2 + 8)
      && *(float *)(a1 + 12) == *(float *)(a2 + 12)
      && *(float *)a1 == *(float *)a2
      && *(float *)(a1 + 4) == *(float *)(a2 + 4)
      && *(float *)(a1 + 24) == *(float *)(a2 + 24)
      && *(float *)(a1 + 28) == *(float *)(a2 + 28);
}

BOOL CA::WindowServer::IOMFBDisplay::secure_indicator_active(CA::WindowServer::IOMFBDisplay *this)
{
  return *((_BYTE *)this + 25608) == 3;
}

BOOL CA::WindowServer::IOMFBDisplay::detached_edr_layers_valid_p(CA::WindowServer::IOMFBDisplay *this, const CA::Render::Update *a2)
{
  uint64_t v2;
  float v5;
  float v6;
  float v7;

  v2 = *((_QWORD *)this + 3251);
  if (!v2
    || !*(_QWORD *)(v2 + 16)
    || ((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, const CA::Render::Update *))(*(_QWORD *)this
                                                                                                + 1528))(this, a2) & 1) != 0)
  {
    return 1;
  }
  v5 = (*(float (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 3251) + 16) + 192))(*(_QWORD *)(*((_QWORD *)this + 3251) + 16));
  v6 = 1.0 / CA::WindowServer::Display::edr_headroom(this);
  if (v5 == 0.0)
    v7 = 1.0;
  else
    v7 = v5;
  if (v6 == 0.0)
    v6 = 1.0;
  return (float)(vabds_f32(v7, v6) / v7) <= 0.05;
}

void CA::WindowServer::IOMFBDisplay::update_render_statistics(os_unfair_lock_s *this, const CA::OGL::Context *a2, unsigned int a3)
{
  unsigned int v3;
  int v6;
  int v7;
  os_unfair_lock_s *v8;
  uint64_t v9;

  v3 = *((_DWORD *)a2 + 173);
  if (((v3 | a3) & 0x80000000) == 0)
  {
    v6 = (int)fmin((double)(v3 / 0xA), 9.0);
    v7 = (int)fmin((double)(a3 / 0xC8), 9.0);
    v8 = this + 6876;
    os_unfair_lock_lock(this + 6876);
    v9 = 0;
    ++this[v6 + 6878]._os_unfair_lock_opaque;
    ++this[v7 + 6888]._os_unfair_lock_opaque;
    do
    {
      this[CA::WindowServer::IOMFBDisplay::offscreen_reason[v9] + 6898]._os_unfair_lock_opaque += *(_DWORD *)((char *)a2 + v9 * 4 + 728);
      ++v9;
    }
    while (v9 != 17);
    LOBYTE(this[6877]._os_unfair_lock_opaque) = 1;
    os_unfair_lock_unlock(v8);
  }
}

BOOL CA::WindowServer::IOMFBDisplay::ignore_update_p(CA::WindowServer::IOMFBDisplay *this, const CA::Render::Update *a2)
{
  _BOOL4 v3;
  int v4;
  _BOOL4 v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 643) & 0x10) == 0)
    return 0;
  v3 = (*((_DWORD *)a2 + 67) & 0xA) != 0;
  v4 = *((unsigned __int8 *)this + 28080);
  v5 = (v4 | *((_DWORD *)a2 + 67) & 0xA) != 0;
  *((_BYTE *)this + 28080) = v4 | v3;
  v6 = *((_QWORD *)this + 91);
  if (*(_BYTE *)(v6 + 3) == 1 && *(_BYTE *)(v6 + 2) == 0)
    v5 = v3;
  return !v5;
}

uint64_t CA::WindowServer::IOMFBDisplay::is_frozen(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28076);
}

uint64_t CA::WindowServer::IOMFBDisplay::needs_low_latency(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28101);
}

unint64_t CA::WindowServer::IOMFBDisplay::needs_update(CA::WindowServer::IOMFBDisplay *this)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  NSObject *v7;
  uint8_t buf[4];
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (CA::WindowServer::IOMFBDisplay::needs_harmony_update(this))
    return 0x10000000;
  if ((!*((_BYTE *)this + 28068)
     || (*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1472))(this))
    && *(unsigned __int8 *)(*((_QWORD *)this + 91) + 2) | *(unsigned __int8 *)(*((_QWORD *)this + 91) + 3)
    && !*((_BYTE *)this + 26932)
    || *((_BYTE *)this + 28091))
  {
    return 0x4000000000000000;
  }
  if (CADeviceNeedsLumaBoost::once[0] != -1)
    dispatch_once(CADeviceNeedsLumaBoost::once, &__block_literal_global_54);
  if (CADeviceNeedsLumaBoost::needs_luma_bost
    && (*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 216))(this)
    && (*((_BYTE *)this + 28108) || *((_DWORD *)this + 6652)))
  {
    return 0x800000000;
  }
  if (*((double *)this + 3311) != 0.0)
  {
    if (!byte_1ECDC6B04)
      return 8;
    if (x_log_hook_p())
    {
LABEL_44:
      x_log_();
      return 8;
    }
    v7 = x_log_category_CADebug;
    if (!os_log_type_enabled((os_log_t)x_log_category_CADebug, OS_LOG_TYPE_INFO))
      return 8;
    *(_DWORD *)buf = 136315138;
    v9 = "brightness_deadline";
LABEL_49:
    _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_INFO, "kUpdateReasonDisplayBrightness %s", buf, 0xCu);
    return 8;
  }
  if ((*((_BYTE *)this + 28123)
     || CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::IOMFBDisplay *)((char *)this + 640)))
    && (*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 960))(this))
  {
    if (!byte_1ECDC6B04)
      return 8;
    if (x_log_hook_p())
      goto LABEL_44;
    v7 = x_log_category_CADebug;
    if (!os_log_type_enabled((os_log_t)x_log_category_CADebug, OS_LOG_TYPE_INFO))
      return 8;
    *(_DWORD *)buf = 136315138;
    v9 = "needs_brightness_update";
    goto LABEL_49;
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25688));
  v3 = *((_QWORD *)this + 6 * *((unsigned int *)this + 6419) + 3220);
  if (v3 && ((*(_BYTE *)(v3 + 132) & 0x10) != 0 || *(_QWORD *)(v3 + 24)))
  {
    v2 = 0x2000000000;
  }
  else if (*((_BYTE *)this + 28048))
  {
    v2 = 0x200000000;
  }
  else
  {
    v4 = (_QWORD *)*((_QWORD *)this + 5);
    if (v4)
    {
      v2 = 0x80000;
      while (!(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v4 + 96) + 336))(*(_QWORD *)(*v4 + 96)))
      {
        v4 = (_QWORD *)v4[1];
        if (!v4)
          goto LABEL_35;
      }
    }
    else
    {
LABEL_35:
      if (*((_BYTE *)this + 28116) || *((_BYTE *)this + 28117) || *((_BYTE *)this + 28118) || *((_BYTE *)this + 28119))
      {
        v2 = 16;
      }
      else
      {
        v6 = mach_absolute_time();
        v2 = (unint64_t)(CATimeWithHostTime(v6) < *((double *)this + 3312)) << 42;
      }
    }
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 25688));
  return v2;
}

uint64_t CA::WindowServer::IOMFBDisplay::needs_brightness_update(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28124);
}

CATimingFramePacingLatency *CA::WindowServer::IOMFBDisplay::set_client_preferred_latency(CATimingFramePacingLatency *this, CATimingFramePacingLatency a2)
{
  if (!BYTE10(xmmword_1ECDC6AF0))
    this[1730] = a2;
  return this;
}

void CA::WindowServer::print_layer_trees(uint64_t a1, int a2, double a3)
{
  char v3;
  uint64_t v6;
  int v7;
  const CA::Render::Object *v8;
  NSObject *v9;
  char *v10;
  int v11;
  uint64_t v12;
  char *v13;
  int v14;
  unsigned int v15;
  int v17;
  NSObject *v18;
  const char *v19;
  void **v20;
  uint8_t buf[4];
  _BYTE v22[14];
  __int16 v23;
  char *v24;
  uint64_t v25;

  v3 = a2;
  v25 = *MEMORY[0x1E0C80C00];
  if (a2)
    x_log_begin();
  v6 = *(_QWORD *)(a1 + 8);
  if (v6 != a1)
  {
    v7 = 0;
    do
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v9 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)v22 = v7;
          *(_WORD *)&v22[4] = 2048;
          *(double *)&v22[6] = a3;
          _os_log_impl(&dword_184457000, v9, OS_LOG_TYPE_DEFAULT, "\n** Render #%d tree at time %f **\n\n", buf, 0x12u);
        }
      }
      CA::Render::show_object(*(CA::Render **)(v6 + 32), v8);
      v6 = *(_QWORD *)(v6 + 8);
      ++v7;
    }
    while (v6 != a1);
  }
  if ((v3 & 1) == 0)
    return;
  v20 = (void **)x_stream_pop_(0);
  v10 = x_stream_get(v20);
  v11 = 0;
  while (2)
  {
    v12 = 0;
    v13 = &v10[v11];
    v14 = -1;
    while (1)
    {
      if (v13[v12] == 10)
      {
        v14 = v12;
        goto LABEL_17;
      }
      if (!v13[v12])
        break;
LABEL_17:
      ++v12;
      v15 = 32512;
      if (v12 == 32512)
        goto LABEL_18;
    }
    v15 = v12;
LABEL_18:
    if (v14 <= -1 || v13[v15] == 0)
      v17 = v15;
    else
      v17 = v14 + 1;
    if (v17 > 0)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v18 = x_log_category_CADebug;
        if (os_log_type_enabled((os_log_t)x_log_category_CADebug, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          if (v11)
            v19 = "continued...\n";
          else
            v19 = "";
          *(_QWORD *)v22 = v19;
          *(_WORD *)&v22[8] = 1040;
          *(_DWORD *)&v22[10] = v17;
          v23 = 2080;
          v24 = &v10[v11];
          _os_log_impl(&dword_184457000, v18, OS_LOG_TYPE_INFO, "%s%.*s", buf, 0x1Cu);
        }
      }
      v11 += v17;
      continue;
    }
    break;
  }
  x_log_end_free_(v20);
}

BOOL CA::WindowServer::IOMFBDisplay::change_update_seed(CA::WindowServer::IOMFBDisplay *this, int a2)
{
  pthread_mutex_t *v4;
  unsigned int v5;
  int *v6;
  int v7;

  v4 = (pthread_mutex_t *)((char *)this + 25688);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25688));
  v5 = *((_DWORD *)this + 6419);
  v6 = (int *)((char *)this + 48 * v5 + 25752);
  v7 = *v6;
  if (*v6)
  {
    if (BYTE9(xmmword_1ECDC6A90))
      kdebug_trace();
    *v6 = a2;
    *((_BYTE *)this + 48 * v5 + 25792) |= 4u;
  }
  pthread_mutex_unlock(v4);
  return v7 != 0;
}

uint64_t CA::Render::GainMapLayer::visit_subclass(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, a1);
}

void async_collect_callback(void *a1)
{
  uint64_t v1;
  double v2;
  void *v3;

  v1 = mach_absolute_time();
  v2 = CATimeWithHostTime(v1);
  marked_volatile = 0;
  CABackingStoreCollect(v2);
  if (marked_volatile == 1 && (*(double *)&next_collect_time == 0.0 || v2 < *(double *)&next_collect_time))
  {
    next_collect_time = *(_QWORD *)&v2;
    CA::call_at_time((CA *)backing_store_callback, 0, v2, v3);
  }
  pending_async_collect = 0;
}

void CABackingStoreCollect(double a1)
{
  void *v2;
  double v3;

  if (buffer_list)
  {
    v3 = CABackingStoreCollect_(a1, 0);
    if (v3 < INFINITY)
    {
      if (v3 <= a1 + 0.5)
        v3 = a1 + 0.5;
      if (*(double *)&next_collect_time == 0.0 || v3 < *(double *)&next_collect_time)
      {
        next_collect_time = *(_QWORD *)&v3;
        CA::call_at_time((CA *)backing_store_callback, 0, v3, v2);
      }
    }
  }
}

double CABackingStoreCollect_(double a1, int a2)
{
  double v4;
  double v5;
  BOOL v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  char v18;
  double v19;
  double v20;
  __int16 v21;
  double v22;

  v4 = a1 + -5.0;
  if (CA::Render::memory_once[0] != -1)
    dispatch_once_f(CA::Render::memory_once, 0, (dispatch_function_t)CA::Render::init_memory_warnings_);
  v5 = *(double *)&CA::Render::last_memory_warning;
  pthread_mutex_lock(&buffer_list_mutex);
  v6 = v5 <= v4;
  v7 = 0.0;
  if (v5 <= v4)
    v8 = 0.35;
  else
    v8 = 0.0;
  if (v6)
    v9 = 10.0;
  else
    v9 = 1.0;
  if (a2)
    v10 = 0.0;
  else
    v10 = v8;
  if (!a2)
    v7 = v9;
  v11 = buffer_list;
  if (!buffer_list)
  {
    v15 = INFINITY;
    goto LABEL_61;
  }
  v12 = a1 - v10;
  v13 = a1 - v7;
  v14 = a1 + 0.5;
  v15 = INFINITY;
  do
  {
    if ((a2 & 1) == 0)
    {
      v16 = *(double *)(v11 + 472);
      if (v16 > a1)
      {
        if (v15 >= v16)
          v15 = *(double *)(v11 + 472);
        goto LABEL_58;
      }
    }
    if (pthread_mutex_trylock((pthread_mutex_t *)(v11 + 16)))
      goto LABEL_58;
    *(_QWORD *)(v11 + 472) = 0x7FF0000000000000;
    v17 = *(_QWORD *)(v11 + 400);
    if (!v17)
    {
      v22 = INFINITY;
      goto LABEL_55;
    }
    v18 = 0;
    do
    {
      v19 = *(double *)(v17 + 48);
      if (v19 == 0.0)
      {
        *(double *)(v17 + 48) = a1;
        v19 = a1;
      }
      if (*(_QWORD *)(v17 + 16) || *(_QWORD *)(v17 + 24))
      {
        if (v17 == *(_QWORD *)(v11 + 400))
        {
          if ((*(_WORD *)(v11 + 492) & 0x100) == 0)
            goto LABEL_46;
          CABackingStoreReleaseImages((CABackingStore *)v11);
          v19 = *(double *)(v17 + 48);
          if (v19 <= v12)
          {
              v18 = 1;
            else
            goto LABEL_46;
          }
        }
        else
        {
          if (v19 <= v13)
          {
            CABackingStoreDeleteBuffer((_QWORD *)v17);
            goto LABEL_46;
          }
          if (v19 <= v12)
          {
              v18 = 1;
            else
            v20 = *(double *)(v17 + 48) + v9;
LABEL_40:
            if (v20 < *(double *)(v11 + 472))
              *(double *)(v11 + 472) = v20;
            goto LABEL_46;
          }
        }
        v20 = v19 + v8;
        goto LABEL_40;
      }
LABEL_46:
      v17 = *(_QWORD *)v17;
    }
    while (v17);
    if ((v18 & 1) != 0)
    {
      v21 = *(_WORD *)(v11 + 492);
      v22 = *(double *)(v11 + 472);
      if ((_BYTE)v21)
      {
        if (v14 < v22)
        {
          *(double *)(v11 + 472) = v14;
          v22 = a1 + 0.5;
        }
        if ((a2 & 1) == 0)
          *(_WORD *)(v11 + 492) = v21 & 0xFF00 | (v21 - 1);
      }
    }
    else
    {
      v22 = *(double *)(v11 + 472);
    }
LABEL_55:
    if (v22 < v15)
      v15 = v22;
    pthread_mutex_unlock((pthread_mutex_t *)(v11 + 16));
LABEL_58:
    v11 = *(_QWORD *)(v11 + 168);
  }
  while (v11);
LABEL_61:
  pthread_mutex_unlock(&buffer_list_mutex);
  return v15;
}

void CA::timer_callback(CA *this, __CFRunLoopTimer *a2, void *a3)
{
  uint64_t v4;
  double v5;
  CA *v6;
  double *v7;
  uint64_t *v8;
  uint64_t v9;
  double *v10;
  malloc_zone_t *malloc_zone;
  uint64_t v12;
  CA *v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = mach_absolute_time();
  v5 = CATimeWithHostTime(v4);
  v13 = this;
  v14 = CA::active_timers;
  CA::active_timers = (uint64_t)&v13;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::callback_lock);
  v7 = (double *)CA::callbacks;
  v12 = CA::callbacks;
  CA::callbacks = 0;
  if (v7)
  {
    if (v7[3] <= v5)
    {
      v9 = (uint64_t)v7;
      while (1)
      {
        v8 = (uint64_t *)v9;
        v9 = *(_QWORD *)v9;
        if (!v9)
          break;
        if (*(double *)(v9 + 24) > v5)
          goto LABEL_8;
      }
    }
    else
    {
      v8 = &v12;
      v9 = (uint64_t)v7;
LABEL_8:
      *v8 = 0;
      CA::callbacks = v9;
      CA::update_timer(v6);
      v7 = (double *)v12;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::callback_lock);
    if (v7)
    {
      do
      {
        (*((void (**)(_QWORD, double))v7 + 1))(*((_QWORD *)v7 + 2), v5);
        v10 = *(double **)v7;
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(malloc_zone, v7);
        v7 = v10;
      }
      while (v10);
    }
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::callback_lock);
  }
  CA::active_timers = v14;
}

void sub_1845453F0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::callback_lock);
  _Unwind_Resume(a1);
}

void CA::call_at_time(CA *this, void (*a2)(double, void *), double a3, void *a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  malloc_zone_t *malloc_zone;
  uint64_t *v11;
  uint64_t *v12;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::callback_lock);
  v7 = CA::callbacks;
  if (CA::callbacks)
  {
    v8 = &CA::callbacks;
    while (1)
    {
      v9 = (uint64_t *)v7;
      if (*(CA **)(v7 + 8) == this && *(void (**)(double, void *))(v7 + 16) == a2)
        break;
      v7 = *(_QWORD *)v7;
      v8 = v9;
      if (!*v9)
        goto LABEL_6;
    }
    *v8 = *(_QWORD *)v7;
  }
  else
  {
LABEL_6:
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v9 = (uint64_t *)malloc_type_zone_malloc(malloc_zone, 0x20uLL, 0x8BB15036uLL);
    v9[1] = (uint64_t)this;
    v9[2] = (uint64_t)a2;
  }
  *((double *)v9 + 3) = a3;
  v11 = &CA::callbacks;
  do
  {
    v12 = v11;
    v11 = (uint64_t *)*v11;
  }
  while (v11 && *((double *)v11 + 3) <= a3);
  *v9 = (uint64_t)v11;
  *v12 = (uint64_t)v9;
  if (v12 == &CA::callbacks)
    CA::update_timer((CA *)v9);
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::callback_lock);
}

void sub_1845454EC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::callback_lock);
  _Unwind_Resume(a1);
}

void CA::update_timer(CA *this)
{
  double v1;
  double v2;
  uint64_t v3;
  double v4;
  int v5;
  __CFRunLoopTimer *v6;
  __CFRunLoop *Current;

  if (CA::callbacks)
  {
    v1 = *(double *)(CA::callbacks + 24);
    v2 = 0.0;
    if (v1 > 0.0)
    {
      v3 = mach_absolute_time();
      v2 = v1 - CATimeWithHostTime(v3);
    }
    v4 = CFAbsoluteTimeGetCurrent() + v2;
    if (CA::callback_timer)
    {
      CFRunLoopTimerSetNextFireDate((CFRunLoopTimerRef)CA::callback_timer, v4);
    }
    else
    {
      CA::callback_timer = (uint64_t)CFRunLoopTimerCreate(0, v4, 3153600000.0, 0, 0, (CFRunLoopTimerCallBack)CA::timer_callback, 0);
      v5 = pthread_main_np();
      v6 = (__CFRunLoopTimer *)CA::callback_timer;
      if (v5)
      {
        Current = CFRunLoopGetCurrent();
        CFRunLoopAddTimer(Current, v6, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
      }
      else
      {
        dispatch_async_f(MEMORY[0x1E0C80D38], (void *)CA::callback_timer, (dispatch_function_t)CA::add_timer);
      }
    }
  }
}

CA::Transaction *CA::Layer::animation_heart_beat(CA::Layer *this, double a2, void *a3)
{
  CA::Transaction *result;

  result = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
  if (!result)
    result = (CA::Transaction *)CA::Transaction::create(0);
  if (!**((_DWORD **)result + 13))
    return (CA::Transaction *)CA::Transaction::ensure_implicit(result, 1);
  return result;
}

void `anonymous namespace'::make_buffer_volatile(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int *v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 13) & 4) == 0
      && CA::Render::Shmem::set_volatile(*(CA::Render::Shmem **)(a2 + 16), 1u, *(_DWORD *)(a1 + 488)))
    {
      if ((*(_DWORD *)(v2 + 12) & 0x80000000) != 0)
      {
        os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Encoder::ObjectCache::_lock);
        v3 = (_QWORD *)CA::Render::Encoder::ObjectCache::_cache_list;
        if (CA::Render::Encoder::ObjectCache::_cache_list)
        {
          do
          {
            v4 = *v3;
            v5 = x_hash_table_remove(*(_QWORD *)(*v3 + 8), v2);
            if (v5)
            {
              v6 = *(int **)(v4 + 24);
              if (!v6)
              {
                v6 = (int *)x_hash_table_new_(0, 0, 0, 0, 0, 0);
                *(_QWORD *)(v4 + 24) = v6;
              }
              hash_table_modify(v6, v2, v5, 0);
              v7 = *(int **)(v4 + 32);
              if (!v7)
              {
                v7 = (int *)x_hash_table_new_(0, 0, 0, 0, 0, 0);
                *(_QWORD *)(v4 + 32) = v7;
              }
              hash_table_modify(v7, v2, v5, 0);
            }
            v3 = (_QWORD *)v3[1];
          }
          while (v3);
        }
        os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Encoder::ObjectCache::_lock);
        marked_volatile = 1;
      }
      CA::Render::post_notification(0xBu, v2, 0, 0);
    }
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (v8 && !*(_BYTE *)(v8 + 68))
      CA::CG::AccelDrawable::set_volatile((os_unfair_lock_s *)v8, 1);
  }
}

uint64_t CA::Render::Shmem::set_volatile(CA::Render::Shmem *this, unsigned int a2, int a3)
{
  int v3;
  unsigned int v4;
  int v8;
  uint64_t v9;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2)
    v3 = 4;
  else
    v3 = 0;
  v4 = *((_DWORD *)this + 3);
  if (((v4 >> 8) & 4) == v3)
    return 1;
  if ((v4 & 0x1000) == 0)
    return a2 ^ 1;
  v13 = a3 & 0xFFFFFFFC | a2;
  if (MEMORY[0x186DBEA88](*MEMORY[0x1E0C83DA0], *((_QWORD *)this + 3) & -*MEMORY[0x1E0C85AD8], 0, &v13))return a2 ^ 1;
  v8 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = v8 ^ 0x400;
  if ((v8 & 0x2000) != 0)
  {
    if (a2)
      v9 = -*((_QWORD *)this + 2);
    else
      v9 = *((_QWORD *)this + 2);
    v10 = CAGetStatsStruct(0);
    v11 = *((_QWORD *)v10 + 1);
    v12 = *(_QWORD *)v10 + v9;
    *(_QWORD *)v10 = v12;
    if (v12 > v11)
      *((_QWORD *)v10 + 1) = v12;
  }
  if (v13 == 2)
    return a2;
  else
    return 1;
}

CA::Transaction *backing_store_callback(double a1, void *a2)
{
  CA::Transaction *result;

  next_collect_time = 0;
  result = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
  if (!result)
    result = (CA::Transaction *)CA::Transaction::create(0);
  if (!**((_DWORD **)result + 13))
    return (CA::Transaction *)CA::Transaction::ensure_implicit(result, 1);
  return result;
}

uint64_t CAIOSurfaceCreate(__IOSurface *a1)
{
  uint64_t Instance;
  malloc_zone_t *malloc_zone;
  uint64_t v4;

  if (!a1)
    return 0;
  if (!CAIOSurfaceGetTypeID::type)
    CAIOSurfaceGetTypeID::type = _CFRuntimeRegisterClass();
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v4 = (uint64_t)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x158uLL, 0x743898A5uLL);
    if (v4)
      v4 = CA::Render::Surface::Surface(v4, a1, -1, 3, 0, 0, 0);
    *(_QWORD *)(Instance + 16) = v4;
  }
  return Instance;
}

float *CA::WindowServer::IOSurface::wrap_buffer(CA::WindowServer::IOSurface *this, IOSurfaceRef buffer, __IOSurface *a3, char a4)
{
  int Width;
  int Height;
  OSType PixelFormat;
  malloc_zone_t *malloc_zone;
  char *v11;
  float *v12;
  unint64_t v13;
  __IOSurface *v14;
  size_t PlaneCount;
  size_t v16;
  uint64_t v17;

  if ((_DWORD)a3)
    CFRetain(buffer);
  Width = IOSurfaceGetWidth(buffer);
  Height = IOSurfaceGetHeight(buffer);
  PixelFormat = IOSurfaceGetPixelFormat(buffer);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v11 = (char *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x130uLL, 0x743898A5uLL);
  v12 = (float *)v11;
  if (v11)
  {
    *((_OWORD *)v11 + 1) = 0u;
    *((_OWORD *)v11 + 2) = 0u;
    *((_QWORD *)v11 + 6) = 0;
    *((_DWORD *)v11 + 14) = Width;
    *((_DWORD *)v11 + 15) = Height;
    *((_DWORD *)v11 + 16) = PixelFormat;
    *((_DWORD *)v11 + 17) = 1065353216;
    *((_QWORD *)v11 + 11) = 0;
    *((_QWORD *)v11 + 12) = 0;
    *((_QWORD *)v11 + 10) = 0;
    *((_DWORD *)v11 + 26) = 0;
    *(_OWORD *)(v11 + 108) = xmmword_18474E010;
    *((_DWORD *)v11 + 31) = 1065353216;
    *((_OWORD *)v11 + 8) = xmmword_18474E020;
    *((_QWORD *)v11 + 18) = 0;
    *((_WORD *)v11 + 76) = 0;
    *(_QWORD *)(v11 + 156) = 0x100000001;
    v11[196] = 0;
    *(_OWORD *)(v11 + 180) = 0u;
    *(_OWORD *)(v11 + 164) = 0u;
    *((_DWORD *)v11 + 50) = 1065353216;
    *(_QWORD *)(v11 + 204) = 0;
    *(_QWORD *)(v11 + 212) = 0;
    *((_DWORD *)v11 + 55) = -1;
    v13 = (*((unsigned int *)v11 + 56) | ((unint64_t)v11[228] << 32)) & 0xC038000000 | 0x140000001;
    *((_DWORD *)v11 + 56) = *((_DWORD *)v11 + 56) & 0x38000000 | 0x40000001;
    *((_WORD *)v11 + 114) = BYTE4(v13);
    *(_QWORD *)v11 = off_1E1590DD0;
    *((_QWORD *)v11 + 1) = this;
    *((_QWORD *)v11 + 29) = 0;
    *((_QWORD *)v11 + 30) = buffer;
    *((_DWORD *)v11 + 62) = IOSurfaceGetID(buffer);
    v12[63] = CA::Render::iosurface_get_edr_factor(buffer, v14);
    *((_OWORD *)v12 + 16) = xmmword_18474E5B0;
    v12[68] = 0.0;
    *((_QWORD *)v12 + 35) = 0;
    *((_WORD *)v12 + 144) = 256;
    *((_BYTE *)v12 + 290) = a4;
    v12[74] = 0.0;
    v12[73] = 0.0;
    PlaneCount = IOSurfaceGetPlaneCount(buffer);
    v16 = 0;
    if (PlaneCount <= 1)
      v17 = 1;
    else
      v17 = PlaneCount;
    do
    {
      *((_DWORD *)v12 + 73) |= IOSurfaceGetBaseAddressOfPlane(buffer, v16);
      *((_DWORD *)v12 + 74) |= IOSurfaceGetBytesPerRowOfPlane(buffer, v16++);
    }
    while (v17 != v16);
    if (!IOSurfaceGetBulkAttachments())
      *((_BYTE *)v12 + 289) = 1;
  }
  return v12;
}

CA::Render::Texture *CA::Render::`anonymous namespace'::create_image_from_iosurface(CA::Render::_anonymous_namespace_ *this, CGImage *a2, IOSurfaceRef buffer, unsigned int a4, __IOSurface *a5)
{
  char v6;
  CA::Render *Width;
  unsigned int Height;
  __IOSurface *v10;
  CGColorSpace *ColorSpace;
  CGColorSpace *v12;
  signed int PixelFormat;
  int HasAlpha;
  CA::Render::Texture *v15;
  int v17;
  BOOL v18;
  int v19;
  _BOOL4 IsPQBased;
  CA::Render::Texture *v21;
  char v22;
  NSObject *v23;
  uint8_t buf[4];
  CA::Render::_anonymous_namespace_ *v25;
  __int16 v26;
  IOSurfaceID ID;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (((unsigned __int16)a2 & 0x800) != 0)
    return 0;
  v6 = (char)a2;
  Width = (CA::Render *)IOSurfaceGetWidth(buffer);
  Height = IOSurfaceGetHeight(buffer);
  if (!CA::Render::iosurface_size_supported(Width, Height))
    return 0;
  if (!CA::Render::is_iosurface_aligned(buffer, v10))
  {
    if (BYTE9(ca_debug_options))
    {
      if (x_log_hook_p())
      {
        IOSurfaceGetID(buffer);
        x_log_();
      }
      else
      {
        v23 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          v25 = this;
          v26 = 1024;
          ID = IOSurfaceGetID(buffer);
          _os_log_impl(&dword_184457000, v23, OS_LOG_TYPE_DEFAULT, "CoreAnimation: copied CGImageRef %p - bad alignment for IOSurface 0x%x\n", buf, 0x12u);
        }
      }
    }
    return 0;
  }
  if (CGImageGetDecode(this))
    return 0;
  if (CGImageGetMask())
    return 0;
  if (CGImageGetMatte())
    return 0;
  if (CGImageGetMaskingColors())
    return 0;
  ColorSpace = CGImageGetColorSpace(this);
  v12 = ColorSpace;
  if (ColorSpace)
  {
    if (CGColorSpaceGetModel(ColorSpace) > kCGColorSpaceModelRGB)
      return 0;
  }
  PixelFormat = IOSurfaceGetPixelFormat(buffer);
  HasAlpha = CGImageHasAlpha();
  if (PixelFormat > 1279342647)
  {
    if (PixelFormat <= 1647534391)
    {
      if (PixelFormat > 1380410944)
      {
        if (PixelFormat != 1380410945)
        {
          if (PixelFormat == 1380411457)
          {
            if (HasAlpha)
              v17 = 13;
            else
              v17 = 17;
            goto LABEL_55;
          }
          goto LABEL_72;
        }
        v17 = 14;
        goto LABEL_55;
      }
      if (PixelFormat == 1279342648)
      {
LABEL_50:
        v18 = HasAlpha == 0;
        v19 = 18;
        goto LABEL_52;
      }
      if (PixelFormat == 1380401729)
      {
        v18 = HasAlpha == 0;
        v19 = 11;
        goto LABEL_52;
      }
    }
    else if (PixelFormat <= 1999843441)
    {
      if (PixelFormat == 1647534392)
      {
        v17 = 35;
        goto LABEL_55;
      }
      if (PixelFormat == 1815491698)
      {
        v18 = HasAlpha == 0;
        v19 = 21;
        goto LABEL_52;
      }
    }
    else
    {
      switch(PixelFormat)
      {
        case 1999843442:
          v17 = 33;
          goto LABEL_55;
        case 1999908961:
          v17 = 34;
          goto LABEL_55;
        case 2037741171:
          v17 = 7;
          goto LABEL_55;
      }
    }
LABEL_72:
    v17 = -1;
    goto LABEL_55;
  }
  if (PixelFormat <= 1093677111)
  {
    if (PixelFormat <= 843264309)
    {
      if (PixelFormat == 32)
      {
        if (HasAlpha)
          v17 = 0;
        else
          v17 = 2;
        goto LABEL_55;
      }
      if (PixelFormat != 843264104)
        goto LABEL_72;
      v17 = 28;
      goto LABEL_55;
    }
    if (PixelFormat == 843264310)
    {
      v17 = 27;
      goto LABEL_55;
    }
    if (PixelFormat == 846624121)
    {
      v17 = 6;
      goto LABEL_55;
    }
    goto LABEL_72;
  }
  if (PixelFormat <= 1278226487)
  {
    if (PixelFormat != 1093677112)
    {
      if (PixelFormat == 1111970369)
      {
        if (HasAlpha)
          v17 = 1;
        else
          v17 = 3;
        goto LABEL_55;
      }
      goto LABEL_72;
    }
    goto LABEL_51;
  }
  if (PixelFormat == 1278226488)
  {
LABEL_51:
    v18 = (v6 & 2) == 0;
    v19 = 9;
LABEL_52:
    if (v18)
      v17 = v19 + 1;
    else
      v17 = v19;
    goto LABEL_55;
  }
  if (PixelFormat != 1278555445)
  {
    if (PixelFormat != 1279340600)
      goto LABEL_72;
    goto LABEL_50;
  }
  v17 = 5;
LABEL_55:
  IsPQBased = CGColorSpaceIsPQBased(v12);
  v21 = (CA::Render::Texture *)x_mem_alloc0(0x158uLL);
  v15 = v21;
  if (v21)
  {
    if (IsPQBased)
      v22 = 3;
    else
      v22 = 1;
    CA::Render::Surface::Surface((uint64_t)v21, buffer, v17, v22, 0x8000, 0, 0);
  }
  if (!*((_QWORD *)v15 + 6) || (CGColorSpaceContainsFlexGTCInfo() & 1) == 0)
    CA::Render::Texture::set_colorspace(v15, v12);
  return v15;
}

uint64_t CA::Render::Surface::Surface(uint64_t a1, IOSurfaceRef buffer, int a3, char a4, int a5, char a6, char a7)
{
  int Width;
  int Height;
  __IOSurface *v16;
  __IOSurface *v17;
  NSObject *v18;
  IOSurfaceID v19;
  int v20;
  int v21;
  unsigned int v22;
  size_t v23;
  size_t v24;
  size_t v25;
  size_t v26;
  unsigned int v27;
  size_t BytesPerRowOfPlane;
  unsigned int v29;
  CA::Render *v30;
  unsigned int v31;
  uint64_t v32;
  size_t WidthOfPlane;
  OSType PixelFormat;
  NSObject *v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  size_t BytesPerRow;
  uint64_t v47;
  size_t v48;
  size_t v49;
  int v50;
  char v51;
  int v52;
  int v54;
  IOSurfaceID ID;
  uint8_t buf[4];
  IOSurfaceID v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  _BYTE v63[10];
  _BYTE v64[10];
  __int16 v65;
  size_t v66;
  __int16 v67;
  size_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  Width = IOSurfaceGetWidth(buffer);
  Height = IOSurfaceGetHeight(buffer);
  CA::Render::Texture::Texture((CA::Render::Texture *)a1, Width, Height);
  *(_BYTE *)(a1 + 12) = 51;
  ++dword_1ECDC7CF4;
  *(_QWORD *)a1 = off_1E1598F88;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = IOSurfaceGetID(buffer);
  *(_DWORD *)(a1 + 108) = a3;
  *(_QWORD *)(a1 + 112) = buffer;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = IOSurfaceGetPixelFormat(buffer);
  *(float *)(a1 + 132) = CA::Render::iosurface_get_edr_factor(buffer, v16);
  *(_QWORD *)(a1 + 136) = IOSurfaceGetProtectionOptions();
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_OWORD *)(a1 + 188) = xmmword_18474E010;
  *(_DWORD *)(a1 + 204) = 1065353216;
  *(_OWORD *)(a1 + 208) = xmmword_18474E020;
  *(_QWORD *)(a1 + 224) = 0;
  *(_WORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 236) = 0x100000001;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_BYTE *)(a1 + 276) = 0;
  *(_DWORD *)(a1 + 280) = 1065353216;
  *(_QWORD *)(a1 + 292) = 0;
  *(_QWORD *)(a1 + 284) = 0;
  *(_DWORD *)(a1 + 300) = -1;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 329) = a6 & 0xF | (16 * (a7 & 7)) | *(_BYTE *)(a1 + 329) & 0x80;
  *(_DWORD *)(a1 + 332) = -1;
  *(_WORD *)(a1 + 336) &= 0xF840u;
  if (!CA::Render::is_iosurface_aligned(buffer, v17))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v18 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v19 = *(_DWORD *)(a1 + 104);
        v21 = *(_DWORD *)(a1 + 16);
        v20 = *(_DWORD *)(a1 + 20);
        *(_DWORD *)buf = 67110144;
        v57 = v19;
        v58 = 1024;
        v59 = v21;
        v60 = 1024;
        v61 = v20;
        v62 = 2048;
        *(_QWORD *)v63 = qword_1ECDC4CD0;
        *(_WORD *)&v63[8] = 2048;
        *(_QWORD *)v64 = qword_1ECDC4CD8;
        _os_log_impl(&dword_184457000, v18, OS_LOG_TYPE_DEFAULT, "CoreAnimation: IOSurface 0x%x [%u x %u] doesn't have the proper data alignment! Expected %zu base address and %zu row byte alignment\n", buf, 0x28u);
      }
    }
  }
  if ((a4 & 1) != 0)
    CFRetain(buffer);
  v22 = *(_DWORD *)(a1 + 108);
  if (v22 != -1
    || (v30 = (CA::Render *)*(unsigned int *)(a1 + 128), (_DWORD)v30)
    && (v22 = CA::Render::fourcc_to_format(v30), *(_DWORD *)(a1 + 108) = v22, v22 != -1))
  {
    if (IOSurfaceGetPlaneCount(buffer) < 2)
    {
      if (IOSurfaceGetPlaneCount(buffer) == 1)
      {
        BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(buffer, 0);
        if (v22 > 0x25)
          v29 = 0;
        else
          v29 = dword_184750480[v22];
        v32 = v29;
        WidthOfPlane = IOSurfaceGetWidthOfPlane(buffer, 0);
      }
      else
      {
        BytesPerRowOfPlane = IOSurfaceGetBytesPerRow(buffer);
        if (v22 > 0x25)
          v31 = 0;
        else
          v31 = dword_184750480[v22];
        v32 = v31;
        WidthOfPlane = IOSurfaceGetWidth(buffer);
      }
      if (BytesPerRowOfPlane >= WidthOfPlane * v32)
      {
LABEL_17:
        v27 = *(_DWORD *)(a1 + 108);
        if (v27 != -1 && (v27 > 0x23 || ((0xC99B4EB03uLL >> v27) & 1) == 0))
          goto LABEL_76;
        goto LABEL_74;
      }
    }
    else
    {
      v23 = IOSurfaceGetBytesPerRowOfPlane(buffer, 0);
      v24 = IOSurfaceGetBytesPerRowOfPlane(buffer, 1uLL);
      v25 = IOSurfaceGetWidthOfPlane(buffer, 0);
      v26 = IOSurfaceGetWidthOfPlane(buffer, 1uLL);
      if (v22 == 35 && v23 >= 4 * v25 && v24 >= v26)
        goto LABEL_17;
    }
    PixelFormat = IOSurfaceGetPixelFormat(buffer);
    if (x_log_hook_p())
    {
      IOSurfaceGetID(buffer);
      if ((PixelFormat & 0x80000000) != 0)
        __maskrune(HIBYTE(PixelFormat), 0x40000uLL);
      if (BYTE2(PixelFormat) > 0x7Fu)
        __maskrune(BYTE2(PixelFormat), 0x40000uLL);
      if (BYTE1(PixelFormat) > 0x7Fu)
        __maskrune(BYTE1(PixelFormat), 0x40000uLL);
      if (PixelFormat > 0x7Fu)
        __maskrune(PixelFormat, 0x40000uLL);
      IOSurfaceGetBytesPerRow(buffer);
      IOSurfaceGetWidth(buffer);
      IOSurfaceGetWidth(buffer);
      x_log_();
    }
    else
    {
      v35 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        ID = IOSurfaceGetID(buffer);
        v36 = HIBYTE(PixelFormat);
        v37 = MEMORY[0x1E0C80978];
        if ((PixelFormat & 0x80000000) != 0)
          v38 = __maskrune(v36, 0x40000uLL);
        else
          v38 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v36 + 60) & 0x40000;
        v39 = (int)PixelFormat >> 24;
        if (!v38)
          v39 = 32;
        v54 = v39;
        if (BYTE2(PixelFormat) <= 0x7Fu)
          v40 = *(_DWORD *)(v37 + 4 * BYTE2(PixelFormat) + 60) & 0x40000;
        else
          v40 = __maskrune(BYTE2(PixelFormat), 0x40000uLL);
        if (v40)
          v41 = SBYTE2(PixelFormat);
        else
          v41 = 32;
        if (BYTE1(PixelFormat) <= 0x7Fu)
          v42 = *(_DWORD *)(v37 + 4 * BYTE1(PixelFormat) + 60) & 0x40000;
        else
          v42 = __maskrune(BYTE1(PixelFormat), 0x40000uLL);
        if (v42)
          v43 = SBYTE1(PixelFormat);
        else
          v43 = 32;
        if (PixelFormat <= 0x7Fu)
          v44 = *(_DWORD *)(v37 + 4 * PixelFormat + 60) & 0x40000;
        else
          v44 = __maskrune(PixelFormat, 0x40000uLL);
        if (v44)
          v45 = (char)PixelFormat;
        else
          v45 = 32;
        BytesPerRow = IOSurfaceGetBytesPerRow(buffer);
        if (v22 > 0x25)
          v47 = 0;
        else
          v47 = dword_184750480[v22];
        v48 = IOSurfaceGetWidth(buffer) * v47;
        v49 = IOSurfaceGetWidth(buffer);
        *(_DWORD *)buf = 67110912;
        v57 = ID;
        v58 = 1024;
        v59 = v54;
        v60 = 1024;
        v61 = v41;
        v62 = 1024;
        *(_DWORD *)v63 = v43;
        *(_WORD *)&v63[4] = 1024;
        *(_DWORD *)&v63[6] = v45;
        *(_WORD *)v64 = 2048;
        *(_QWORD *)&v64[2] = BytesPerRow;
        v65 = 2048;
        v66 = v48;
        v67 = 2048;
        v68 = v49;
        _os_log_impl(&dword_184457000, v35, OS_LOG_TYPE_DEFAULT, "CoreAnimation: IOSurface 0x%x ('%c%c%c%c') has unexpected bytes-per-row value of %zu, expected at least %zu for the width of %zu.", buf, 0x3Eu);
      }
    }
    *(_DWORD *)(a1 + 108) = -1;
  }
LABEL_74:
  if ((CA::Render::fourcc_has_alpha((CA::Render *)*(unsigned int *)(a1 + 128)) & 1) != 0)
  {
    v50 = a5 | 0x400;
    goto LABEL_77;
  }
LABEL_76:
  v50 = a5 | 0x410;
LABEL_77:
  *(_DWORD *)(a1 + 12) |= v50 << 8;
  *(_DWORD *)(a1 + 324) = 1;
  if ((v50 & 0x8000) != 0)
    IOSurfaceIncrementUseCount(buffer);
  CA::Render::iosurface_load_attachments((CA::Render *)a1, (CA::Render::Surface *)(a4 & 0x3E));
  if (*(float *)(a1 + 132) != 1.0)
    *(_WORD *)(a1 + 336) |= 4u;
  if (CA::Render::fourcc_is_rgb((CA::Render *)*(unsigned int *)(a1 + 128)))
  {
    v51 = *(_BYTE *)(a1 + 329);
    v52 = v51 & 0x70;
    if ((v51 & 0x70) == 0)
      v51 = v51 & 0x8F | 0x20;
    if (!v52 || (v51 & 0xF) == 0)
    {
      if ((v51 & 0xF) == 0)
        v51 = v51 & 0xF0 | 1;
      *(_BYTE *)(a1 + 329) = v51;
    }
  }
  return a1;
}

uint64_t CA::OGL::AsynchronousNode::retain_surface(CA::OGL::AsynchronousNode *this, float *a2, CA::Render::LayerNode *a3, float a4, double a5, double a6, double a7, float64x2_t a8)
{
  CA::OGL::Context **v8;
  CA::OGL::Context *v9;
  uint64_t v10;
  float *v11;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t buffer;
  int v18;
  int8x16_t *v19;
  uint64_t v20;
  float v21;
  int8x16_t v22;
  int8x16_t v23;
  double v24;
  int8x16_t v25;
  int8x16_t v26;
  int64x2_t v27;
  int32x4_t v28;
  int8x16_t v29;
  float64x2_t v30;
  float64x2_t v31;
  int32x4_t v32;
  CA::Render::Handle *v33;
  uint64_t v34;
  const CA::Render::LayerNode *v35;
  char *v36;
  malloc_zone_t *malloc_zone;
  char *v38;
  uint64_t v39;
  _OWORD *v40;
  char *v41;
  const CA::Render::LayerNode *v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  unsigned int *v49;
  unsigned int v50;
  __CFRunLoop *v51;
  const void *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  os_unfair_lock_s *v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int *v72;
  unsigned int v73;
  CFTypeRef v74;
  uint64_t v75;
  float *v76;
  int32x4_t v77;
  int v78;
  uint64_t v79;
  _QWORD v80[2];
  __int128 block;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _OWORD v86[2];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v8 = (CA::OGL::Context **)*((_QWORD *)this + 1);
  v9 = *v8;
  v10 = *((_QWORD *)this + 28);
  if (v10)
  {
    v11 = a2;
    v13 = *((_QWORD *)this + 2);
    v14 = *(char **)(v10 + 24);
    v15 = *((_QWORD *)v9 + 31);
    if (v15)
      v16 = (*(_BYTE *)(v15 + 68) & 0x30) != 0;
    else
      v16 = 0;
    v18 = *(unsigned __int8 *)(v10 + 21);
    v79 = *((_QWORD *)this + 2);
    if (v14)
    {
      buffer = 0;
      goto LABEL_52;
    }
    v19 = *(int8x16_t **)(v13 + 24);
    v20 = v19[8].i64[0];
    if (v20)
    {
      v21 = *(float *)(v20 + 284);
    }
    else
    {
      LOBYTE(a4) = v19[2].i8[3];
      v21 = (float)LODWORD(a4);
    }
    v22 = v19[4];
    v23 = v19[5];
    if (v21 != 1.0)
    {
      v24 = v21;
      a8.f64[0] = 1.79769313e308;
      v25 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a8, (float64x2_t)v23).i64[0], 0);
      v26.i64[1] = v19[4].i64[1];
      *(double *)v26.i64 = v21 * *(double *)v22.i64;
      v22 = vbslq_s8(v25, v26, v22);
      v26.i64[1] = v19[5].i64[1];
      *(double *)v26.i64 = v21 * *(double *)v23.i64;
      v23 = vbslq_s8(v25, v26, v23);
      if (*(double *)&v23.i64[1] < 1.79769313e308)
      {
        v22.i64[1] = vmuld_lane_f64(v24, (float64x2_t)v22, 1);
        *(double *)&v23.i64[1] = *(double *)&v23.i64[1] * v24;
      }
    }
    v27 = vceqzq_f64((float64x2_t)v23);
    v28 = 0uLL;
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v27, 1), (int8x16_t)v27).u64[0] & 0x8000000000000000) == 0)
    {
      v29 = vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v23), (int8x16_t)vcgezq_f64((float64x2_t)v23));
      if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v29), 1), v29).u64[0] & 0x8000000000000000) == 0)
      {
        v30 = vmaxnmq_f64((float64x2_t)v22, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000));
        v31 = vminnmq_f64(vaddq_f64((float64x2_t)v22, (float64x2_t)v23), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
        v32 = (int32x4_t)vcvtmq_s64_f64(v30);
        v28 = vuzp1q_s32(v32, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v31), (int64x2_t)v32));
      }
    }
    v33 = *(CA::Render::Handle **)(v10 + 32);
    v34 = *(_QWORD *)(v13 + 16);
    v35 = *(const CA::Render::LayerNode **)(v34 + 104);
    v77 = v28;
    if (v35 == (const CA::Render::LayerNode *)(v34 + 96))
      v36 = 0;
    else
      v36 = CA::Render::Update::build_hit_test_tree(v8[1], v35, a3, 1.0);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v38 = (char *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x220uLL, 0x743898A5uLL);
    v14 = v38;
    v78 = v18;
    if (v38)
    {
      v76 = v11;
      v39 = 0;
      v40 = v38 + 392;
      *((_DWORD *)v38 + 3) = *(_DWORD *)(*((_QWORD *)this + 28) + 16);
      *(_OWORD *)(v38 + 24) = xmmword_18474E4E0;
      *(_OWORD *)(v38 + 40) = xmmword_18474E480;
      *(_OWORD *)(v38 + 56) = xmmword_18474E020;
      *((_QWORD *)v38 + 9) = 0;
      *((_WORD *)v38 + 40) = 0;
      *(_QWORD *)(v38 + 84) = 0x100000001;
      *(_OWORD *)(v38 + 92) = 0u;
      *(_OWORD *)(v38 + 108) = 0u;
      v38[124] = 0;
      *((_DWORD *)v38 + 37) = -1;
      *((_DWORD *)v38 + 32) = 1065353216;
      *(_QWORD *)(v38 + 140) = 0;
      *(_QWORD *)(v38 + 132) = 0;
      *((_WORD *)v38 + 76) = 0;
      *((_QWORD *)v38 + 20) = 0;
      *((_QWORD *)v38 + 21) = 0;
      *((_QWORD *)v38 + 22) = 1065353216;
      *((_QWORD *)v38 + 23) = v36;
      *((_DWORD *)v38 + 2) = 1;
      *(_QWORD *)v38 = off_1E1595118;
      *((_DWORD *)v38 + 52) = 0;
      do
      {
        v41 = &v14[v39];
        *(_QWORD *)&v14[v39 + 224] = 0;
        *((_QWORD *)v41 + 30) = dispatch_semaphore_create(1);
        *((_QWORD *)v41 + 31) = dispatch_semaphore_create(1);
        v39 += 56;
      }
      while (v39 != 112);
      *((int32x4_t *)v14 + 21) = v77;
      *((float *)v14 + 88) = v21;
      *((_DWORD *)v14 + 94) = 0;
      v14[528] = v16;
      v14[529] = v78;
      *v40 = xmmword_18474DF40;
      *(_OWORD *)(v14 + 408) = 0u;
      *(_OWORD *)(v14 + 424) = xmmword_18474DF50;
      *(_OWORD *)(v14 + 440) = 0u;
      *(_OWORD *)(v14 + 456) = 0u;
      *(_OWORD *)(v14 + 472) = xmmword_18474DF40;
      *(_OWORD *)(v14 + 488) = 0u;
      *(_OWORD *)(v14 + 504) = xmmword_18474DF50;
      buffer = CA::OGL::AsynchronousItem::first_buffer((CA::OGL::AsynchronousItem *)v14, v9, v33);
      v11 = v76;
      if (!buffer)
        goto LABEL_32;
    }
    else
    {
      buffer = CA::OGL::AsynchronousItem::first_buffer(0, v9, v33);
      if (!buffer)
      {
LABEL_32:
        *((_QWORD *)v14 + 2) = v33;
        CA::Render::AsynchronousState::set_item(*((_QWORD *)this + 28), (unsigned int *)v14);
        *(_BYTE *)(*((_QWORD *)this + 28) + 20) = 1;
        if (CA::OGL::AsynchronousDispatcher::dispatcher(void)::once != -1)
          dispatch_once(&CA::OGL::AsynchronousDispatcher::dispatcher(void)::once, &__block_literal_global_1592);
        v44 = CA::OGL::AsynchronousDispatcher::dispatcher(void)::dispatcher;
        v45 = *((_QWORD *)v9 + 22);
        if (v45)
        {
          v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
          if (v46)
          {
            v47 = (*(double (**)(uint64_t))(*(_QWORD *)v46 + 744))(v46);
            v48 = 0.0166666667;
            if (v47 > 0.0 && v47 * 0.95 <= 0.0166666667)
              v48 = round(0.0166666667 / v47) * v47;
            if (v48 > v47)
              v47 = v48;
            *(_QWORD *)(v44 + 48) = CAHostTimeWithTime(v47);
          }
        }
        os_unfair_lock_lock((os_unfair_lock_t)(v44 + 4));
        v49 = (unsigned int *)(v14 + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 + 1, v49));
        *((_QWORD *)v14 + 25) = v44;
        *((_QWORD *)v14 + 24) = *(_QWORD *)(v44 + 8);
        *(_QWORD *)(v44 + 8) = v14;
        ++*(_DWORD *)(v44 + 16);
        if (*(_DWORD *)v44)
        {
          v51 = *(__CFRunLoop **)(v44 + 32);
          v52 = (const void *)*MEMORY[0x1E0C9B280];
          *(_QWORD *)&block = MEMORY[0x1E0C809B0];
          *((_QWORD *)&block + 1) = 0x40000000;
          *(_QWORD *)&v82 = ___ZN2CA3OGL22AsynchronousDispatcher13schedule_itemEPNS0_16AsynchronousItemE_block_invoke;
          *((_QWORD *)&v82 + 1) = &__block_descriptor_tmp_1;
          *(_QWORD *)&v83 = v44;
          CFRunLoopPerformBlock(v51, v52, &block);
          CFRunLoopWakeUp(*(CFRunLoopRef *)(v44 + 32));
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(v44 + 4));
        do
          v53 = __ldaxr(v49);
        while (__stlxr(v53 - 1, v49));
        if (v14)
        {
          v18 = v78;
          if (v53 == 1)
            (*(void (**)(char *))(*(_QWORD *)v14 + 8))(v14);
        }
        else
        {
          v18 = v78;
        }
LABEL_52:
        os_unfair_lock_lock((os_unfair_lock_t)v14 + 94);
        v14[528] = v16;
        os_unfair_lock_unlock((os_unfair_lock_t)v14 + 94);
        os_unfair_lock_lock((os_unfair_lock_t)v14 + 94);
        v14[529] = v18;
        os_unfair_lock_unlock((os_unfair_lock_t)v14 + 94);
        v54 = *((_QWORD *)this + 28);
        v55 = v54 + 40;
        v56 = *(double *)(v54 + 64);
        os_unfair_lock_lock((os_unfair_lock_t)v14 + 94);
        *((_QWORD *)v14 + 48) = v55;
        *((_QWORD *)v14 + 65) = CAHostTimeWithTime(v56);
        os_unfair_lock_unlock((os_unfair_lock_t)v14 + 94);
        block = xmmword_18474DF40;
        v82 = 0u;
        v83 = xmmword_18474DF50;
        v84 = 0u;
        v85 = 0u;
        v86[0] = xmmword_18474DF40;
        v86[1] = 0u;
        v87 = xmmword_18474DF50;
        v80[0] = &off_1E15997A0;
        v80[1] = &block;
        CA::Render::LayerNode::MapGeometry::map((uint64_t)v80, 0, *(CA::Render::LayerNode **)(*((_QWORD *)this + 2) + 16));
        os_unfair_lock_lock((os_unfair_lock_t)v14 + 94);
        v57 = v82;
        v58 = v83;
        v59 = v84;
        *(_OWORD *)(v14 + 392) = block;
        *(_OWORD *)(v14 + 408) = v57;
        *(_OWORD *)(v14 + 424) = v58;
        *(_OWORD *)(v14 + 440) = v59;
        v60 = v86[0];
        v61 = v86[1];
        v62 = v87;
        *(_OWORD *)(v14 + 456) = v85;
        *(_OWORD *)(v14 + 472) = v60;
        *(_OWORD *)(v14 + 488) = v61;
        *(_OWORD *)(v14 + 504) = v62;
        os_unfair_lock_unlock((os_unfair_lock_t)v14 + 94);
        v63 = *((_QWORD *)v9 + 22);
        if (v63)
        {
          v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63);
          if (v64)
          {
            v65 = v64;
            v94 = 0u;
            v95 = 0u;
            v92 = 0u;
            v93 = 0u;
            v90 = 0u;
            v91 = 0u;
            v88 = 0u;
            v89 = 0u;
            CA::WindowServer::Display::reconciled_display_attributes((CA::WindowServer::Display *)&v88, v64);
            v66 = v88;
            *(_OWORD *)(v14 + 88) = v92;
            *(_OWORD *)(v14 + 104) = v93;
            *(_OWORD *)(v14 + 120) = v94;
            *(_OWORD *)(v14 + 136) = v95;
            *(_OWORD *)(v14 + 24) = v66;
            *(_OWORD *)(v14 + 40) = v89;
            *(_OWORD *)(v14 + 56) = v90;
            *(_OWORD *)(v14 + 72) = v91;
            *((_QWORD *)v14 + 21) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 1392))(v65);
          }
        }
        *v11 = 1.0;
        if (buffer)
          goto LABEL_56;
        v67 = *(_QWORD *)(*(_QWORD *)(v79 + 16) + 24);
        v68 = (os_unfair_lock_s *)(v14 + 208);
        os_unfair_lock_lock((os_unfair_lock_t)v14 + 52);
        v69 = *((_QWORD *)v14 + 41);
        if (v69
          && *(_QWORD *)v69
          && ((v70 = v67 & 0x4000000) != 0 || !dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v69 + 24), 0)))
        {
          *(_QWORD *)&v88 = MEMORY[0x1E0C809B0];
          *((_QWORD *)&v88 + 1) = 0x40000000;
          *(_QWORD *)&v89 = ___ZN2CA3OGL16AsynchronousItem20retain_latest_bufferERNS0_7ContextEb_block_invoke;
          *((_QWORD *)&v89 + 1) = &__block_descriptor_tmp_8;
          LOBYTE(v91) = v70 >> 26;
          *(_QWORD *)&v90 = v14;
          *((_QWORD *)&v90 + 1) = v69;
          v72 = (unsigned int *)(v14 + 8);
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 + 1, v72));
          if (((*(uint64_t (**)(CA::OGL::Context *, __int128 *))(*(_QWORD *)v9 + 144))(v9, &v88) & 1) == 0)
            ((void (*)(__int128 *))v89)(&v88);
          v74 = CFRetain(*(CFTypeRef *)v69);
          os_unfair_lock_unlock(v68);
          if (v74)
          {
            buffer = (*(uint64_t (**)(CA::OGL::Context *, uint64_t, _QWORD, _QWORD, CFTypeRef))(*(_QWORD *)v9 + 672))(v9, 1, 0, 0, v74);
            CFRelease(v74);
            if (buffer)
            {
LABEL_56:
              *(_WORD *)(buffer + 75) = *(_WORD *)(buffer + 75) & 0xF7FF | ((v18 != 0) << 11);
LABEL_65:
              if (byte_1ECDC6A8C)
              {
                v75 = *(_QWORD *)(*((_QWORD *)this + 2) + 104);
                if (v75)
                  *(_DWORD *)(v75 + 220) = *(_DWORD *)(v75 + 220) & 0xFFF1FFFF | 0x20000;
              }
              return buffer;
            }
          }
        }
        else
        {
          os_unfair_lock_unlock((os_unfair_lock_t)v14 + 52);
        }
        buffer = *((_QWORD *)v9 + 33);
        if (buffer
          || (buffer = (*(uint64_t (**)(CA::OGL::Context *))(*(_QWORD *)v9 + 728))(v9),
              (*((_QWORD *)v9 + 33) = buffer) != 0))
        {
          ++*(_DWORD *)buffer;
        }
        goto LABEL_65;
      }
    }
    v43 = 1.0;
    if (!v16)
      CA::Render::Update::render_edr_factor(v8[1], v42);
    memset(v86, 0, sizeof(v86));
    LODWORD(v87) = 0;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    block = 0u;
    *(int8x8_t *)((char *)v86 + 12) = vand_s8((int8x8_t)(vcvts_n_s32_f32(v43, 0x14uLL) | 0x10000000000000), (int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v43 != 0.0), 0x1FuLL)));
    IOSurfaceSetBulkAttachments2();
    buffer = (*(uint64_t (**)(CA::OGL::Context *, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v9 + 672))(v9, 1, 0, 0, buffer);
    if (buffer)
    {
      CA::OGL::Context::push_surface((uint64_t)v9, buffer, 1u, 0, 0);
      CA::OGL::ImagingNode::render(*((_QWORD *)this + 3), 0, 0);
      CA::OGL::Context::pop_surface(v9);
    }
    goto LABEL_32;
  }
  buffer = *((_QWORD *)v9 + 33);
  if (buffer
    || (buffer = (*(uint64_t (**)(CA::OGL::Context *, float *))(*(_QWORD *)v9 + 728))(*v8, a2),
        (*((_QWORD *)v9 + 33) = buffer) != 0))
  {
    ++*(_DWORD *)buffer;
  }
  return buffer;
}

uint64_t CA::WindowServer::IOMFBDisplay::swap_brightness(CA::WindowServer::IOMFBDisplay *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  _BYTE *v4;
  double v6;
  double v7;
  _BOOL4 v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  int v14;
  double v15;
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  NSObject *v20;
  int v21;
  float v22;
  NSObject *v23;
  int v24;
  float v25;
  int v26;
  NSObject *v27;
  int v28;
  float v29;
  uint64_t v30;
  int v31;
  NSObject *v32;
  int v33;
  float v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int v38;
  CA::WindowServer::SILMgr *v39;
  int v40;
  NSObject *v41;
  int v42;
  int v43;
  NSObject *v44;
  int v45;
  NSObject *v46;
  int v47;
  float v48;
  NSObject *v49;
  int v50;
  NSObject *v52;
  int v53;
  uint8_t buf[4];
  int v55;
  __int16 v56;
  double v57;
  __int16 v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v2 = (os_unfair_lock_s *)((char *)this + 27208);
  os_unfair_lock_lock((os_unfair_lock_t)this + 6802);
  v3 = *((_QWORD *)this + 3402);
  os_unfair_lock_unlock(v2);
  if (!v3)
    return (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, _QWORD))(*(_QWORD *)this + 968))(this, 0);
  v4 = (char *)this + 25608;
  if (!*((_BYTE *)this + 28123) || BYTE14(xmmword_1ECDC6AB0) != 0)
    return (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, _QWORD))(*(_QWORD *)this + 968))(this, 0);
  v6 = (*(float (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 920))(this);
  if (!CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::IOMFBDisplay *)((char *)this + 640)))
    v6 = CA::WindowServer::Display::edr_headroom(this) * v6;
  if (*((_BYTE *)this + 28126))
  {
    *((_BYTE *)this + 28126) = 0;
    *((_QWORD *)this + 3399) = 0x7FF8000000000000;
    *((_QWORD *)this + 3400) = 0x7FF8000000000000;
    *((_DWORD *)this + 6543) = 2143289344;
    *((_DWORD *)this + 6547) = 2143289344;
    *((_DWORD *)this + 6549) = 2143289344;
    *((_DWORD *)this + 6545) = 2143289344;
    *((_DWORD *)this + 6551) = 2143289344;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v52 = x_log_category_brightness;
      if (os_log_type_enabled((os_log_t)x_log_category_brightness, OS_LOG_TYPE_DEFAULT))
      {
        v53 = *((_DWORD *)this + 6);
        *(_DWORD *)buf = 67109120;
        v55 = v53;
        _os_log_impl(&dword_184457000, v52, OS_LOG_TYPE_DEFAULT, "Display %u forcing swap brightness values\n", buf, 8u);
      }
    }
  }
  v7 = *((double *)this + 3399);
  v8 = v6 != v7;
  if (v6 != v7)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v9 = x_log_category_brightness;
      if (os_log_type_enabled((os_log_t)x_log_category_brightness, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *((_DWORD *)this + 6);
        *(_DWORD *)buf = 67109376;
        v55 = v10;
        v56 = 2048;
        v57 = v6;
        _os_log_impl(&dword_184457000, v9, OS_LOG_TYPE_DEFAULT, "Display %u setting nits to %g\n", buf, 0x12u);
      }
    }
    v11 = IOMobileFramebufferSwapSetBrightness();
    if (v11)
    {
      v12 = v11;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v13 = x_log_category_brightness;
        if (os_log_type_enabled((os_log_t)x_log_category_brightness, OS_LOG_TYPE_DEFAULT))
        {
          v14 = *((_DWORD *)this + 6);
          *(_DWORD *)buf = 67109376;
          v55 = v14;
          v56 = 1024;
          LODWORD(v57) = v12;
          _os_log_impl(&dword_184457000, v13, OS_LOG_TYPE_DEFAULT, "Display %u swap brightness failed: 0x%x", buf, 0xEu);
        }
      }
    }
    *((double *)this + 3399) = v6;
  }
  v15 = (*(float (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 936))(this);
  if (*((double *)this + 3400) != v15)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v16 = x_log_category_brightness;
      if (os_log_type_enabled((os_log_t)x_log_category_brightness, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *((_DWORD *)this + 6);
        *(_DWORD *)buf = 67109376;
        v55 = v17;
        v56 = 2048;
        v57 = v15;
        _os_log_impl(&dword_184457000, v16, OS_LOG_TYPE_DEFAULT, "Display %u setting brightness limit to %g\n", buf, 0x12u);
      }
    }
    v18 = IOMobileFramebufferSwapSetBrightnessLimit();
    if (v18)
    {
      v19 = v18;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v20 = x_log_category_brightness;
        if (os_log_type_enabled((os_log_t)x_log_category_brightness, OS_LOG_TYPE_DEFAULT))
        {
          v21 = *((_DWORD *)this + 6);
          *(_DWORD *)buf = 67109376;
          v55 = v21;
          v56 = 1024;
          LODWORD(v57) = v19;
          _os_log_impl(&dword_184457000, v20, OS_LOG_TYPE_DEFAULT, "Display %u swap brightness limit failed: 0x%x\n", buf, 0xEu);
        }
      }
    }
    *((double *)this + 3400) = v15;
    v8 = 1;
  }
  if (CADeviceSupportsRTPLC::once != -1)
    dispatch_once(&CADeviceSupportsRTPLC::once, &__block_literal_global_218);
  if (CADeviceSupportsRTPLC::rtplc)
  {
    v22 = *((float *)this + 6557) * 3.14159265;
    if ((LODWORD(v22) & 0x7FFFFFFFu) <= 0x7F7FFFFF && *((float *)this + 6543) != v22)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v23 = x_log_category_brightness;
        if (os_log_type_enabled((os_log_t)x_log_category_brightness, OS_LOG_TYPE_DEFAULT))
        {
          v24 = *((_DWORD *)this + 6);
          *(_DWORD *)buf = 67109376;
          v55 = v24;
          v56 = 2048;
          v57 = v22;
          _os_log_impl(&dword_184457000, v23, OS_LOG_TYPE_DEFAULT, "Display %u setting ambient lux to %g\n", buf, 0x12u);
        }
      }
      IOMobileFramebufferSwapSetAmbientLux();
      *((float *)this + 6543) = v22;
    }
  }
  if (CADeviceSupportsTwilight::once[0] != -1)
    dispatch_once(CADeviceSupportsTwilight::once, &__block_literal_global_220);
  if (CADeviceSupportsTwilight::twilight)
  {
    if (!byte_1ECDC6AE3)
    {
      v25 = (*(float (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1272))(this);
      if ((LODWORD(v25) & 0x7FFFFFFFu) <= 0x7F7FFFFF && v25 != *((float *)this + 6547))
      {
        v26 = IOMobileFramebufferSetTwilightStrength();
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v27 = x_log_category_brightness;
          if (os_log_type_enabled((os_log_t)x_log_category_brightness, OS_LOG_TYPE_DEFAULT))
          {
            v28 = *((_DWORD *)this + 6);
            *(_DWORD *)buf = 67109632;
            v55 = v28;
            v56 = 2048;
            v57 = v25;
            v58 = 1024;
            v59 = v26;
            _os_log_impl(&dword_184457000, v27, OS_LOG_TYPE_DEFAULT, "Display %u setting twilight strength to %f, return: 0x%x", buf, 0x18u);
          }
        }
        *((float *)this + 6547) = v25;
      }
    }
  }
  if (!byte_1ECDC6AE5)
  {
    v29 = (*(float (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1288))(this);
    if ((LODWORD(v29) & 0x7FFFFFFFu) <= 0x7F7FFFFF && v29 != *((float *)this + 6549))
    {
      v30 = *((_QWORD *)this + 3192);
      if (init_iomfb(void)::once != -1)
        dispatch_once(&init_iomfb(void)::once, &__block_literal_global_10917);
      if (iomfb_swap_set_aml_strength_f)
        v31 = iomfb_swap_set_aml_strength_f(v30, v29);
      else
        v31 = -536870212;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v32 = x_log_category_brightness;
        if (os_log_type_enabled((os_log_t)x_log_category_brightness, OS_LOG_TYPE_DEFAULT))
        {
          v33 = *((_DWORD *)this + 6);
          *(_DWORD *)buf = 67109632;
          v55 = v33;
          v56 = 2048;
          v57 = v29;
          v58 = 1024;
          v59 = v31;
          _os_log_impl(&dword_184457000, v32, OS_LOG_TYPE_DEFAULT, "Display %u setting aml strength to %f, return: 0x%x", buf, 0x18u);
        }
      }
      *((float *)this + 6549) = v29;
    }
  }
  v34 = (*(float (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1304))(this);
  if ((LODWORD(v34) & 0x7FFFFFFFu) >= 0x7F800000 && *v4 == 3)
  {
    v34 = (*(float (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 920))(this);
    v35 = 1;
  }
  else
  {
    v35 = 0;
  }
  if ((LODWORD(v34) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    if (v34 != *((float *)this + 6551))
    {
      if (v35)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v41 = x_log_category_brightness;
          if (os_log_type_enabled((os_log_t)x_log_category_brightness, OS_LOG_TYPE_DEFAULT))
          {
            v42 = *((_DWORD *)this + 6);
            *(_DWORD *)buf = 67109376;
            v55 = v42;
            v56 = 2048;
            v57 = v34;
            _os_log_impl(&dword_184457000, v41, OS_LOG_TYPE_DEFAULT, "Display %u forcing indicator brightness to current sdr value %f", buf, 0x12u);
          }
        }
      }
      v43 = iomfb_swap_set_indicator_brightness(*((_QWORD *)this + 3192), 1, v34);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v44 = x_log_category_brightness;
        if (os_log_type_enabled((os_log_t)x_log_category_brightness, OS_LOG_TYPE_DEFAULT))
        {
          v45 = *((_DWORD *)this + 6);
          *(_DWORD *)buf = 67109632;
          v55 = v45;
          v56 = 2048;
          v57 = v34;
          v58 = 1024;
          v59 = v43;
          _os_log_impl(&dword_184457000, v44, OS_LOG_TYPE_DEFAULT, "Display %u setting indicator brightness to %f, return: 0x%x", buf, 0x18u);
        }
      }
      *((float *)this + 6551) = v34;
    }
    goto LABEL_94;
  }
  v36 = (_QWORD *)*((_QWORD *)this + 3200);
  if (v36)
  {
    if (*v36 || (sil_mgr_instance(0, 0xFFFFFFFFLL), (*v36 = v37) != 0))
    {
      v38 = *v4;
      if ((v38 & 0xFFFFFFFB) == 0)
      {
        v39 = (CA::WindowServer::SILMgr *)*((_QWORD *)this + 3200);
        if (v38 > 1)
        {
LABEL_82:
          CA::WindowServer::SILMgr::turn_off_all_regions(v39, 0);
          *v4 = 2;
          v40 = iomfb_swap_set_indicator_brightness(*((_QWORD *)this + 3192), 0, 0.0);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v46 = x_log_category_brightness;
            if (os_log_type_enabled((os_log_t)x_log_category_brightness, OS_LOG_TYPE_DEFAULT))
            {
              v47 = *((_DWORD *)this + 6);
              *(_DWORD *)buf = 67109376;
              v55 = v47;
              v56 = 1024;
              LODWORD(v57) = v40;
              _os_log_impl(&dword_184457000, v46, OS_LOG_TYPE_DEFAULT, "Display %u disabling indicator brightness return: 0x%x", buf, 0xEu);
            }
          }
          *((_DWORD *)this + 6551) = 2143289344;
          goto LABEL_94;
        }
        if (CA::WindowServer::SILMgr::set_power(v39, 1, 0))
        {
          v39 = (CA::WindowServer::SILMgr *)*((_QWORD *)this + 3200);
          goto LABEL_82;
        }
      }
    }
  }
LABEL_94:
  v48 = (*(float (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1320))(this);
  if ((LODWORD(v48) & 0x7FFFFFFFu) <= 0x7F7FFFFF && v48 != *((float *)this + 6545))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v49 = x_log_category_brightness;
      if (os_log_type_enabled((os_log_t)x_log_category_brightness, OS_LOG_TYPE_DEFAULT))
      {
        v50 = *((_DWORD *)this + 6);
        *(_DWORD *)buf = 67109376;
        v55 = v50;
        v56 = 2048;
        v57 = v48;
        _os_log_impl(&dword_184457000, v49, OS_LOG_TYPE_DEFAULT, "Display %u setting contrast enhancer to %g\n", buf, 0x12u);
      }
    }
    IOMobileFrameBufferSwapSetContrastEnhancerStrength();
    *((float *)this + 6545) = v48;
  }
  if (v8)
    kdebug_trace();
  return (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, _QWORD))(*(_QWORD *)this + 968))(this, 0);
}

uint64_t CA::WindowServer::IOMFBDisplay::set_needs_brightness_update(uint64_t this, char a2)
{
  *(_BYTE *)(this + 28124) = a2;
  return this;
}

uint64_t CA::WindowServer::Display::reconciled_display_attributes(CA::WindowServer::Display *this, uint64_t a2)
{
  uint64_t result;

  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  result = CA::WindowServer::Display::display_attributes(this, a2);
  if ((*(_DWORD *)(a2 + 624) & 4) != 0 && (*(_BYTE *)(a2 + 746) & 0x40) == 0 && !byte_1ECDC6AE2)
  {
    *((_DWORD *)this + 15) = 1;
    *((_BYTE *)this + 50) = 1;
    *((_DWORD *)this + 5) = 1065353216;
  }
  return result;
}

uint64_t CA::WindowServer::Display::display_attributes(CA::WindowServer::Display *this, uint64_t a2)
{
  char *v4;
  int v5;
  _BOOL4 is_hdr;
  float v7;
  float v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  float v12;
  double (*v13)(uint64_t);
  int v14;
  __n128 v15;
  uint64_t v16;
  float v17;
  int v18;
  int v19;
  char v20;
  int v21;
  float v22;
  float v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  float v27;
  float *v28;
  float v29;
  float v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[2];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 12) = xmmword_18474E010;
  *((_DWORD *)this + 7) = 1065353216;
  *((_OWORD *)this + 2) = xmmword_18474E020;
  *((_QWORD *)this + 6) = 0;
  *((_WORD *)this + 28) = 0;
  *(_QWORD *)((char *)this + 60) = 0x100000001;
  *(_OWORD *)((char *)this + 68) = 0u;
  v4 = (char *)this + 68;
  *(_OWORD *)((char *)this + 84) = 0u;
  *((_BYTE *)this + 100) = 0;
  *((_DWORD *)this + 26) = 1065353216;
  *(_QWORD *)((char *)this + 116) = 0;
  *(_QWORD *)((char *)this + 108) = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 1216))(&v36, a2);
  *(_QWORD *)this = v36;
  *((_DWORD *)this + 2) = v38;
  *((_DWORD *)this + 31) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1232))(a2);
  v5 = (*(unsigned __int16 *)(a2 + 656) >> 10) & 7;
  *((_BYTE *)this + 53) = v5 == 2;
  if (v5 == 2)
  {
    is_hdr = CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::Display::Mode *)(a2 + 640));
    v7 = 100.0;
    if (is_hdr)
      v7 = 1000.0;
    *((float *)this + 1) = v7;
  }
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  v8 = *(float *)&dword_1ECDC6970;
  if (*(float *)&dword_1ECDC6970 == 0.0)
  {
    v9 = *(unsigned int **)(a2 + 688);
    if (v9)
    {
      v10 = atomic_load(v9);
      v8 = *(float *)&v10;
    }
    else
    {
      v8 = 1.0;
    }
  }
  *((float *)this + 5) = v8;
  *((float *)this + 7) = (*(float (**)(uint64_t))(*(_QWORD *)a2 + 1096))(a2);
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  v11 = dword_1ECDC6990;
  if (*(float *)&dword_1ECDC6990 != 0.0 || (v11 = v37, *(float *)&v37 > 0.0))
    *((_DWORD *)this + 3) = v11;
  v12 = *(float *)&dword_1ECDC6994;
  v13 = *(double (**)(uint64_t))(*(_QWORD *)a2 + 24);
  if (*(float *)&dword_1ECDC6994 == 0.0)
    v12 = *((float *)&v37 + 1);
  *((float *)this + 4) = v12;
  *((double *)this + 4) = v13(a2);
  *((double *)this + 5) = (*(double (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  *((_BYTE *)this + 48) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1264))(a2);
  *((_BYTE *)this + 49) = (*(float (**)(uint64_t))(*(_QWORD *)a2 + 1272))(a2) > 0.0;
  v14 = (*(_DWORD *)(a2 + 745) >> 9) & 1;
  *((_BYTE *)this + 51) = (*(_DWORD *)(a2 + 745) & 0x200) != 0;
  *((_BYTE *)this + 56) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1840))(a2);
  *((_BYTE *)this + 57) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1896))(a2);
  switch(CA::WindowServer::Display::Mode::hdr_type(*(_QWORD *)(a2 + 640)))
  {
    case 1u:
      v15.n128_u32[1] = 2;
      *(_QWORD *)((char *)this + 60) = 0x200000001;
      goto LABEL_40;
    case 2u:
      v16 = *(_QWORD *)(a2 + 688);
      if (v16)
      {
        v17 = COERCE_FLOAT(atomic_load((unsigned int *)(v16 + 4)));
        LOBYTE(v16) = v5 == 0;
        if (!v5 && v17 > 8.0)
        {
          LOBYTE(v16) = 1;
          v18 = 6;
          goto LABEL_32;
        }
      }
      else
      {
        v16 = v5 == 0;
      }
      v18 = 0;
LABEL_32:
      *((_DWORD *)this + 15) = v18;
      if (CADeviceHasHeadroomDependentGamma::once[0] != -1)
      {
        v35 = v16;
        dispatch_once(CADeviceHasHeadroomDependentGamma::once, &__block_literal_global_97);
        LOBYTE(v16) = v35;
      }
      v20 = v16 ^ 1;
      if (!CADeviceHasHeadroomDependentGamma::supports_hdr_gamma)
        v20 = 1;
      if ((v20 & 1) != 0)
        v21 = 2;
      else
        v21 = 3;
      *((_DWORD *)this + 16) = v21;
LABEL_40:
      if (CADeviceIsVirtualized::once[0] != -1)
        dispatch_once(CADeviceIsVirtualized::once, &__block_literal_global_204);
      if (CADeviceIsVirtualized::is_virtualized
        && CA::WindowServer::Display::Mode::hdr_type(*(_QWORD *)(a2 + 640)) == 3)
      {
        *(_QWORD *)((char *)this + 60) = 0x100000005;
        *(_QWORD *)this = 0x447A000000000000;
        v15 = (__n128)xmmword_18474E290;
        *(_OWORD *)((char *)this + 12) = xmmword_18474E290;
      }
      if (initialized[0] != -1)
        dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
      v15.n128_u32[0] = dword_1ECDC69B0;
      if (*(float *)&dword_1ECDC69B0 != 0.0)
      {
        v22 = *((float *)this + 3);
        v23 = *((float *)this + 5);
        if (*(float *)&dword_1ECDC69B0 >= v23)
          v15.n128_u32[0] = *((_DWORD *)this + 5);
        *((_DWORD *)this + 5) = v15.n128_u32[0];
        v15.n128_f32[0] = (float)(v15.n128_f32[0] * v22) / v23;
        *((_DWORD *)this + 3) = v15.n128_u32[0];
      }
      v24 = *(_DWORD *)(a2 + 745);
      *((_BYTE *)this + 54) = (v24 & 0x4000) != 0;
      if ((v24 & 0x4000) != 0)
        *((_DWORD *)this + 16) = 1;
      (*(void (**)(_OWORD *__return_ptr, uint64_t, __n128))(*(_QWORD *)a2 + 1344))(v39, a2, v15);
      v25 = v39[1];
      *(_OWORD *)v4 = v39[0];
      *((_OWORD *)v4 + 1) = v25;
      v4[32] = v40;
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1240))(a2);
      if (!v26)
        goto LABEL_67;
      v27 = *((float *)this + 3);
      v28 = *(float **)v26;
      v29 = **(float **)v26;
      v30 = 1.0;
      if (v29 >= v27)
        goto LABEL_66;
      v31 = *(_QWORD *)(v26 + 32);
      if (v28[v31 - 1] <= v27)
      {
        v30 = *(float *)(*(_QWORD *)(v26 + 8) + 4 * (v31 - 1));
        goto LABEL_66;
      }
      if (*(float *)(v26 + 44) == v27)
      {
        v30 = *(float *)(v26 + 40);
        goto LABEL_66;
      }
      if (v31 < 2)
        goto LABEL_63;
      v32 = 1;
      break;
    case 3u:
      if (v14)
        v19 = 5;
      else
        v19 = 2;
      goto LABEL_29;
    case 4u:
      v19 = 4;
      goto LABEL_29;
    case 5u:
      v19 = 3;
LABEL_29:
      *((_DWORD *)this + 15) = v19;
      goto LABEL_40;
    default:
      goto LABEL_40;
  }
  while (v28[v32] < v27)
  {
    if (v31 == ++v32)
    {
LABEL_63:
      v33 = 0;
      v32 = 1;
      goto LABEL_65;
    }
  }
  v33 = v32 - 1;
  v29 = v28[v32 - 1];
LABEL_65:
  v30 = (float)((float)((float)(*(float *)(*(_QWORD *)(v26 + 8) + 4 * v32) - *(float *)(*(_QWORD *)(v26 + 8) + 4 * v33))
                      * (float)(v27 - v29))
              / (float)(v28[v32] - v29))
      + *(float *)(*(_QWORD *)(v26 + 8) + 4 * v33);
  *(float *)(v26 + 40) = v30;
  *(float *)(v26 + 44) = v27;
  v29 = *v28;
LABEL_66:
  *((float *)this + 26) = v30;
  *(_QWORD *)((char *)this + 108) = *(_QWORD *)(v26 + 16);
  *((_DWORD *)this + 29) = *(_DWORD *)(v26 + 24);
  *((float *)this + 30) = v29;
LABEL_67:
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
  *((_BYTE *)this + 55) = result;
  return result;
}

float CA::WindowServer::IOMFBDisplay::low_ambient_adaptation_strength(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6546);
}

__n128 CA::WindowServer::IOMFBDisplay::luminance@<Q0>(CA::WindowServer::IOMFBDisplay *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  a2[1].n128_u64[0] = *((_QWORD *)this + 3279);
  result = *(__n128 *)((char *)this + 26216);
  *a2 = result;
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::average_pixel_constraints(CA::WindowServer::IOMFBDisplay *this)
{
  return *((_QWORD *)this + 3403);
}

uint64_t CA::WindowServer::IOMFBDisplay::supports_display_tonemap(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28122);
}

uint64_t CA::WindowServer::IOMFBDisplay::dm_version(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned int *)this + 6560);
}

uint64_t CA::WindowServer::IOMFBDisplay::supports_ambient_adaptation(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28094);
}

__n128 CA::WindowServer::IOMFBDisplay::chromaticity@<Q0>(CA::WindowServer::IOMFBDisplay *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)((char *)this + 26244);
  v3 = *(_OWORD *)((char *)this + 26260);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 6569);
  return result;
}

float CA::WindowServer::IOMFBDisplay::ui_scale_factor(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6535);
}

float CA::WindowServer::IOMFBDisplay::brightness_limit(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6541);
}

float CA::WindowServer::IOMFBDisplay::contrast_enhancer_strength(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6544);
}

float CA::WindowServer::IOMFBDisplay::indicator_brightness(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6550);
}

float CA::WindowServer::IOMFBDisplay::high_ambient_adaptation_strength(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6548);
}

char *CA::OGL::MetalContext::create_surface_from_iosurface(CA::OGL::MetalContext *this, int a2, int a3, int a4, IOSurfaceRef buffer)
{
  int Width;
  int Height;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  malloc_zone_t *malloc_zone;
  __int16 v17;
  __IOSurface *v18;
  float edr_factor;
  float v20;
  _BOOL4 v21;
  CA::Render *PixelFormat;
  uint64_t v23;
  uint64_t v24;
  int v25;
  NSObject *v26;
  void *v27;
  void *v28;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  unsigned int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  Width = IOSurfaceGetWidth(buffer);
  Height = IOSurfaceGetHeight(buffer);
  v12 = 0;
  if (a2 == 1 && Width >= 1)
  {
    v13 = Height;
    if (Height >= 1)
    {
      v14 = Width;
      v15 = *((_QWORD *)this + 331);
      if (Width > v15 || Height > v15)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v26 = x_log_category_ogl_metal;
          if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109376;
            v31 = Width;
            v32 = 1024;
            v33 = v13;
            _os_log_impl(&dword_184457000, v26, OS_LOG_TYPE_DEFAULT, "Surface from iosurface %d x %d is too large\n", buf, 0xEu);
          }
        }
        return 0;
      }
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v12 = (char *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0xF0uLL, 0x743898A5uLL);
      *(_DWORD *)v12 = 1;
      *(_WORD *)(v12 + 75) |= 0x10u;
      *((_DWORD *)v12 + 8) = a3;
      *((_DWORD *)v12 + 9) = a4;
      *((_DWORD *)v12 + 10) = Width;
      *((_DWORD *)v12 + 11) = v13;
      *((_DWORD *)v12 + 6) = Width;
      *((_DWORD *)v12 + 7) = v13;
      *((_QWORD *)v12 + 6) = IOSurfaceGetProtectionOptions();
      *((_DWORD *)v12 + 46) = Width;
      *((_DWORD *)v12 + 47) = v13;
      v12[72] |= 1u;
      v17 = *((_WORD *)v12 + 116);
      *(_WORD *)(v12 + 75) |= 0x180u;
      *((_WORD *)v12 + 116) = v17 & 0xFDC0 | 0x31;
      *((_QWORD *)v12 + 8) = 0xF3F800000;
      edr_factor = CA::Render::iosurface_get_edr_factor(buffer, v18);
      v20 = 1.0;
      if (edr_factor == 0.0)
        edr_factor = 1.0;
      v21 = edr_factor > 1.0 || edr_factor < 0.0;
      if (edr_factor < 0.0 && edr_factor <= 1.0)
        v20 = 0.0;
      if (v21)
        edr_factor = v20;
      *((float *)v12 + 16) = edr_factor;
      PixelFormat = (CA::Render *)IOSurfaceGetPixelFormat(buffer);
      v23 = CA::OGL::four_cc_to_mtl_format(PixelFormat, *((_DWORD *)this + 669));
      v24 = v23;
      if ((unint64_t)(v23 - 550) <= 5)
        *((_DWORD *)v12 + 17) |= 0x100u;
      if (v23 == 115)
      {
        v25 = 16;
      }
      else
      {
        if (v23 != 125)
        {
LABEL_26:
          v27 = (void *)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", v23, v14, v13, 0);
          objc_msgSend(v27, "setUsage:", 5);
          objc_msgSend(v27, "setProtectionOptions:", *((_QWORD *)v12 + 6));
          v28 = (void *)objc_msgSend(*((id *)this + 363), "newTextureWithDescriptor:iosurface:plane:", v27, buffer, 0);
          *((_QWORD *)v12 + 12) = v28;
          objc_msgSend(v28, "setLabel:", CFSTR("com.apple.coreanimation.surface"));
          *((_QWORD *)v12 + 15) = v24;
          if (*((_QWORD *)v12 + 12))
          {
            CA::OGL::MetalContext::add_memoryless_textures((uint64_t)this, (uint64_t)v12);
            return v12;
          }
          CA::OGL::MetalContext::finalize_surface((uint64_t)this, (uint64_t)v12);
          return 0;
        }
        v25 = 32;
      }
      *((_DWORD *)v12 + 17) |= v25;
      goto LABEL_26;
    }
  }
  return v12;
}

float CA::Render::iosurface_get_edr_factor(CA::Render *this, __IOSurface *a2)
{
  if (this)
    IOSurfaceGetBulkAttachments();
  return 1.0;
}

BOOL CA::OGL::MetalContext::add_submitted_callback(_QWORD *a1, void *aBlock)
{
  void *v3;
  void *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  if (!a1[366])
    return 0;
  v3 = _Block_copy(aBlock);
  v4 = v3;
  v5 = (_QWORD *)a1[378];
  v6 = a1[379];
  if ((unint64_t)v5 >= v6)
  {
    v9 = (_QWORD *)a1[377];
    v10 = v5 - v9;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      abort();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v14 = (char *)operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    *(_QWORD *)v15 = v4;
    v7 = v15 + 8;
    if (v5 != v9)
    {
      do
      {
        v16 = *--v5;
        *((_QWORD *)v15 - 1) = v16;
        v15 -= 8;
      }
      while (v5 != v9);
      v5 = (_QWORD *)a1[377];
    }
    a1[377] = v15;
    a1[378] = v7;
    a1[379] = &v14[8 * v13];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = v3;
    v7 = v5 + 1;
  }
  a1[378] = v7;
  return a1[366] != 0;
}

BOOL CA::Render::is_iosurface_aligned(IOSurfaceRef buffer, __IOSurface *a2)
{
  unint64_t v3;
  unint64_t v4;
  size_t PlaneCount;
  size_t v6;
  size_t v7;
  unint64_t BaseAddressOfPlane;
  size_t BytesPerRowOfPlane;
  unint64_t BaseAddress;
  size_t BytesPerRow;

  v3 = qword_1ECDC4CD0;
  v4 = qword_1ECDC4CD8;
  PlaneCount = IOSurfaceGetPlaneCount(buffer);
  if (PlaneCount)
  {
    v6 = PlaneCount;
    v7 = 0;
    while (1)
    {
      BaseAddressOfPlane = (unint64_t)IOSurfaceGetBaseAddressOfPlane(buffer, v7);
      BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(buffer, v7);
      if (BaseAddressOfPlane % v3 || BytesPerRowOfPlane % v4)
        break;
      if (v6 == ++v7)
        return 1;
    }
    return 0;
  }
  BaseAddress = (unint64_t)IOSurfaceGetBaseAddress(buffer);
  BytesPerRow = IOSurfaceGetBytesPerRow(buffer);
  return !(BaseAddress % v3) && !(BytesPerRow % v4);
}

uint64_t CA::Render::fourcc_is_rgb(CA::Render *this)
{
  int v1;
  uint64_t result;
  int v3;
  unsigned __int16 v4;

  v1 = (int)this;
  result = 1;
  if (v1 > 1111970368)
  {
    if (v1 <= 1380410944)
    {
      if (v1 <= 1279340599)
      {
        if (v1 == 1111970369 || v1 == 1278226488)
          return result;
        v3 = 1278555445;
LABEL_45:
        if (v1 != v3)
          return 0;
        return result;
      }
      if (v1 <= 1378955370)
      {
        if (v1 == 1279340600)
          return result;
        v3 = 1279342648;
        goto LABEL_45;
      }
      if (v1 == 1378955371)
        return result;
      v4 = 16961;
    }
    else
    {
      if (v1 > 1815491697)
      {
        if (v1 > 1999908960)
        {
          if (v1 == 1999908961)
            return result;
          v3 = 2084718401;
        }
        else
        {
          if (v1 == 1815491698)
            return result;
          v3 = 1999843442;
        }
        goto LABEL_45;
      }
      if (v1 > 1647534391)
      {
        if (v1 == 1647534392)
          return result;
        v3 = 1815162994;
        goto LABEL_45;
      }
      if (v1 == 1380410945)
        return result;
      v4 = 26689;
    }
    v3 = v4 | 0x52470000;
    goto LABEL_45;
  }
  if (v1 > 645346400)
  {
    if (v1 > 843264309)
    {
      if (v1 > 1093677111)
      {
        if (v1 == 1093677112)
          return result;
        v3 = 1094862674;
      }
      else
      {
        if (v1 == 843264310)
          return result;
        v3 = 892679473;
      }
    }
    else if (v1 > 792872768)
    {
      if (v1 == 792872769)
        return result;
      v3 = 843264104;
    }
    else
    {
      if (v1 == 645346401)
        return result;
      v3 = 759318337;
    }
    goto LABEL_45;
  }
  if (v1 > 642934848)
  {
    if (v1 > 644624753)
    {
      if (v1 == 644624754)
        return result;
      v3 = 645346162;
    }
    else
    {
      if (v1 == 642934849)
        return result;
      v3 = 643969848;
    }
    goto LABEL_45;
  }
  if (v1 != 16 && v1 != 32)
  {
    v3 = 641877825;
    goto LABEL_45;
  }
  return result;
}

BOOL CA::Render::iosurface_size_supported(CA::Render *this, unsigned int a2)
{
  unsigned int v3;

  v3 = this;
  if (this <= 0x800 && a2 < 0x801)
    return 1;
  if (CA::Render::iosurface_max_once[0] != -1)
    dispatch_once_f(CA::Render::iosurface_max_once, 0, (dispatch_function_t)CA::Render::iosurface_max_init);
  return CA::Render::iosurface_max_width >= (unint64_t)v3
      && CA::Render::iosurface_max_height >= (unint64_t)a2;
}

unsigned int *CA::Render::AsynchronousState::set_item(uint64_t a1, unsigned int *a2)
{
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;

  result = *(unsigned int **)(a1 + 24);
  if (result)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)result + 40))(result);
    result = *(unsigned int **)(a1 + 24);
    *((_QWORD *)result + 2) = 0;
    if (result == a2)
      return result;
    v5 = result + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    if (!a2)
      goto LABEL_12;
  }
  else if (!a2)
  {
    return result;
  }
  v8 = a2 + 2;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
LABEL_12:
  *(_QWORD *)(a1 + 24) = a2;
  return result;
}

uint64_t CA::OGL::AsynchronousItem::first_buffer(CA::OGL::AsynchronousItem *this, CA::OGL::Context *a2, CA::Render::Handle *a3)
{
  os_unfair_lock_s *v6;
  CA::OGL *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD v17[2];
  intptr_t (*v18)(uint64_t);
  void *v19;
  CA::OGL::AsynchronousItem *v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = (os_unfair_lock_s *)((char *)this + 208);
  os_unfair_lock_lock((os_unfair_lock_t)this + 52);
  *((_DWORD *)this + 59) = 3;
  v7 = (CA::OGL *)*((int *)this + 86);
  v8 = *((int *)this + 87);
  v9 = (*(uint64_t (**)(CA::OGL::Context *))(*(_QWORD *)a2 + 96))(a2);
  os_unfair_lock_lock((os_unfair_lock_t)this + 94);
  v10 = *((_BYTE *)this + 528);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 94);
  os_unfair_lock_lock((os_unfair_lock_t)this + 94);
  v11 = *((unsigned __int8 *)this + 529);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 94);
  *((_QWORD *)this + 27) = CA::OGL::create_iosurface(v7, v8, v9, v10, v11);
  *((_QWORD *)this + 32) = (*(uint64_t (**)(CA::OGL::Context *))(*(_QWORD *)a2 + 96))(a2);
  *((_DWORD *)this + 58) = *((_DWORD *)a2 + 53);
  v12 = *((_QWORD *)a3 + 12);
  *((_BYTE *)this + 268) = (v12 & 0x1800000000) != 0;
  *((_BYTE *)this + 269) = (v12 & 0x18000000000) != 0;
  os_unfair_lock_lock((os_unfair_lock_t)this + 94);
  LOBYTE(a3) = *((_BYTE *)this + 528);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 94);
  *((_BYTE *)this + 270) = (_BYTE)a3;
  os_unfair_lock_lock((os_unfair_lock_t)this + 94);
  LOBYTE(a3) = *((_BYTE *)this + 529);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 94);
  *((_BYTE *)this + 271) = (_BYTE)a3;
  dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 30), 0xFFFFFFFFFFFFFFFFLL);
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 0x40000000;
  v18 = ___ZN2CA3OGL16AsynchronousItem12first_bufferERNS0_7ContextEPNS_6Render6HandleE_block_invoke;
  v19 = &__block_descriptor_tmp_7;
  v20 = this;
  v21 = (char *)this + 216;
  v13 = (unsigned int *)((char *)this + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  if (((*(uint64_t (**)(CA::OGL::Context *, _QWORD *))(*(_QWORD *)a2 + 144))(a2, v17) & 1) == 0)
    v18((uint64_t)v17);
  v15 = *((_QWORD *)this + 27);
  os_unfair_lock_unlock(v6);
  return v15;
}

void CA::OGL::AsynchronousItem::~AsynchronousItem(CA::OGL::AsynchronousItem *this, __IOSurface *a2)
{
  malloc_zone_t *malloc_zone;

  CA::OGL::AsynchronousItem::~AsynchronousItem(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  CA::OGL **v3;
  CA::OGL **v4;
  CA::OGL *v5;
  __IOSurface *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  CA::Shape *v10;
  uint64_t v11;
  _QWORD v12[6];

  v12[5] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E1595118;
  v3 = (CA::OGL **)((char *)this + 216);
  v4 = (CA::OGL **)((char *)this + 328);
  do
  {
    v5 = *v3;
    if (*v3)
    {
      if (CA::OGL::cache_io_surfaces)
      {
        os_unfair_lock_lock((os_unfair_lock_t)&CA::OGL::surface_cache_lock);
        v7 = 0;
        while (CA::OGL::surface_cache[v7])
        {
          if (++v7 == 2)
          {
            CA::OGL::release_iosurface((CA::OGL *)CA::OGL::surface_cache[0], v6);
            v8 = &qword_1EDD10D98;
            CA::OGL::surface_cache[0] = qword_1EDD10D98;
            goto LABEL_10;
          }
        }
        v8 = &CA::OGL::surface_cache[v7];
LABEL_10:
        *v8 = (uint64_t)v5;
        os_unfair_lock_unlock((os_unfair_lock_t)&CA::OGL::surface_cache_lock);
      }
      else
      {
        CA::OGL::release_iosurface(*v3, a2);
      }
    }
    v3 += 7;
  }
  while (v3 != v4);
  for (i = 0; i != -112; i -= 56)
  {
    dispatch_release(*(dispatch_object_t *)((char *)this + i + 296));
    dispatch_release(*(dispatch_object_t *)((char *)this + i + 304));
    v10 = *(CA::Shape **)((char *)this + i + 280);
    if (v10)
      CA::Shape::unref(v10);
  }
  *(_QWORD *)this = off_1E1597958;
  v11 = *((_QWORD *)this + 23);
  if (v11)
  {
    if (CA::Render::AsynchronousItem::~AsynchronousItem()::once[0] != -1)
      dispatch_once(CA::Render::AsynchronousItem::~AsynchronousItem()::once, &__block_literal_global_4092);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 0x40000000;
    v12[2] = ___ZN2CA6Render16AsynchronousItemD2Ev_block_invoke_2;
    v12[3] = &__block_descriptor_tmp_2_4093;
    v12[4] = v11;
    dispatch_async((dispatch_queue_t)CA::Render::AsynchronousItem::~AsynchronousItem()::queue, v12);
  }
}

void CA::OGL::AsynchronousItem::unschedule(CA::OGL::AsynchronousItem *this)
{
  uint64_t v2;
  CA::OGL::AsynchronousItem *v3;
  _QWORD *v4;
  CA::OGL::AsynchronousItem *v5;
  unsigned int *v6;
  unsigned int v7;
  __CFRunLoop *v8;
  const void *v9;
  _QWORD v10[6];

  v10[5] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 25);
  if (v2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v2 + 4));
    v3 = *(CA::OGL::AsynchronousItem **)(v2 + 8);
    if (v3)
    {
      v4 = (_QWORD *)(v2 + 8);
      if (v3 == this)
      {
LABEL_7:
        *v4 = *((_QWORD *)this + 24);
        --*(_DWORD *)(v2 + 16);
      }
      else
      {
        while (1)
        {
          v5 = v3;
          v3 = (CA::OGL::AsynchronousItem *)*((_QWORD *)v3 + 24);
          if (!v3)
            break;
          if (v3 == this)
          {
            v4 = (_QWORD *)((char *)v5 + 192);
            goto LABEL_7;
          }
        }
      }
    }
    *((_QWORD *)this + 25) = 0;
    v6 = (unsigned int *)((char *)this + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (this && v7 == 1)
      (*(void (**)(CA::OGL::AsynchronousItem *))(*(_QWORD *)this + 8))(this);
    if (!*(_QWORD *)(v2 + 8) && *(_DWORD *)v2)
    {
      v8 = *(__CFRunLoop **)(v2 + 32);
      v9 = (const void *)*MEMORY[0x1E0C9B280];
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 0x40000000;
      v10[2] = ___ZN2CA3OGL22AsynchronousDispatcher15unschedule_itemEPNS0_16AsynchronousItemE_block_invoke;
      v10[3] = &__block_descriptor_tmp_2;
      v10[4] = v2;
      CFRunLoopPerformBlock(v8, v9, v10);
      CFRunLoopWakeUp(*(CFRunLoopRef *)(v2 + 32));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 4));
  }
  os_unfair_lock_lock((os_unfair_lock_t)this + 94);
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 65) = CAHostTimeWithTime(0.0);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 94);
}

void sub_184549238(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::WindowServer::IOMFBServer::post_frame_rate_power_log(CA::WindowServer::IOMFBServer *this, CA::Render::Object *a2, void *a3, void *a4)
{
  pthread_mutex_t *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  __CFDictionary *Mutable;
  __CFArray *v10;
  uint64_t *v11;
  const CFArrayCallBacks *v12;
  __CFArray *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t i;

  v5 = (pthread_mutex_t *)((char *)a2 + 544);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 544));
  v6 = *((_QWORD *)a2 + 12);
  if ((*(_DWORD *)(v6 + 624) & 0x100) != 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v6 + 27440));
    if (*(_QWORD *)(v6 + 27472)
      && (v7 = mach_absolute_time(), v8 = CATimeWithHostTime(v7), v8 - *(double *)(v6 + 27488) >= 1.0))
    {
      *(double *)(v6 + 27488) = v8;
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v10 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      v11 = *(uint64_t **)(v6 + 27464);
      if (v11)
      {
        v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
        do
        {
          v13 = CFArrayCreateMutable(0, 0, v12);
          CA_CFArrayAppendInt(v13, *((_DWORD *)v11 + 4));
          CA_CFArrayAppendInt(v13, *((_DWORD *)v11 + 8));
          CA_CFArrayAppendInt(v13, *((_DWORD *)v11 + 7));
          CA_CFArrayAppendInt(v13, *((_DWORD *)v11 + 6));
          CA_CFArrayAppendInt(v13, *((_DWORD *)v11 + 5));
          CA_CFArrayAppendInt(v13, *((_DWORD *)v11 + 9));
          CFArrayAppendValue(v10, v13);
          if (v13)
            CFRelease(v13);
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      CFDictionarySetValue(Mutable, CFSTR("data"), v10);
      if (*(_QWORD *)(v6 + 27472))
      {
        v14 = *(_QWORD **)(v6 + 27464);
        if (v14)
        {
          do
          {
            v15 = (_QWORD *)*v14;
            operator delete(v14);
            v14 = v15;
          }
          while (v15);
        }
        *(_QWORD *)(v6 + 27464) = 0;
        v16 = *(_QWORD *)(v6 + 27456);
        if (v16)
        {
          for (i = 0; i != v16; ++i)
            *(_QWORD *)(*(_QWORD *)(v6 + 27448) + 8 * i) = 0;
        }
        *(_QWORD *)(v6 + 27472) = 0;
      }
      if (v10)
        CFRelease(v10);
      os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 27440));
      if (CA::WindowServer::IOMFBDisplay::post_frame_rate_power_log(void)::once[0] != -1)
        dispatch_once(CA::WindowServer::IOMFBDisplay::post_frame_rate_power_log(void)::once, &__block_literal_global_330);
      if (CA::WindowServer::IOMFBDisplay::post_frame_rate_power_log(void)::frame_count_id)
        pps_send_telemetry();
      PLLogTimeSensitiveRegisteredEvent();
      if (Mutable)
        CFRelease(Mutable);
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 27440));
    }
  }
  return pthread_mutex_unlock(v5);
}

void CA_CFArrayAppendInt(__CFArray *a1, int a2)
{
  CFNumberRef v3;
  int valuePtr;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  valuePtr = a2;
  v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFArrayAppendValue(a1, v3);
  CFRelease(v3);
}

uint64_t CAImageQueueSetReducedPollingTimeRange(uint64_t result, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(result + 48);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 24);
    *(double *)(v4 + 296) = a2;
    *(double *)(v4 + 304) = a3;
    __dmb(0xBu);
  }
  return result;
}

void CA::CG::GlyphDelegate::~GlyphDelegate(CA::CG::GlyphDelegate *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E1591D18;
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
    free(v2);
  *(_QWORD *)this = off_1E1592170;
  CA::CG::MosaicDelegate::draw_array(*((CA::CG::MosaicDelegate **)this + 2));
}

{
  void *v2;

  *(_QWORD *)this = &off_1E1591D18;
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
    free(v2);
  *(_QWORD *)this = off_1E1592170;
  CA::CG::MosaicDelegate::draw_array(*((CA::CG::MosaicDelegate **)this + 2));
  JUMPOUT(0x186DBD990);
}

uint64_t CA::CG::fill_path_blurred(uint64_t a1)
{
  uint64_t v1;
  const CGPath *v2;
  float64x2_t *v3;
  double *v4;
  float v5;
  char v6;
  char v7;
  int8x16_t *v8;
  uint64_t v9;
  uint64_t v10;
  const CGPath *v11;
  uint64_t v12;
  uint64_t v13;
  float v15;
  uint64_t v16;
  float64x2_t v17;
  unsigned int v18;
  double v19;
  signed int v20;
  int32x4_t v21;
  int64x2_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int v26;
  int v27;
  int8x16_t v29;
  unsigned int v31;
  __int128 v32;
  int32x4_t v33;
  int32x2_t *v34;
  int32x2_t *v35;
  uint32x2_t v36;
  int32x2_t v37;
  uint32x2_t v38;
  uint32x2_t v39;
  const Rect *v40;
  _BOOL4 v41;
  int32x4_t v42;
  int64x2_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int64x2_t v46;
  unsigned __int32 v47;
  int32x4_t v48;
  uint32x2_t v49;
  uint32x2_t v50;
  int32x2_t v51;
  uint32x2_t v52;
  uint32x2_t v53;
  double v54;
  double v55;
  __int32 v56;
  __int32 v57;
  int64x2_t v58;
  int8x16_t v59;
  int32x2_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  int v69;
  int v70;
  int8x16_t v72;
  float64x2_t v73;
  float64x2_t v74;
  int32x4_t v75;
  int32x2_t v76;
  int64x2_t v77;
  float64x2_t v78;
  void (__cdecl *v79)(void *, const CGPathElement *);
  uint64_t v80;
  uint64_t v81;
  double v82;
  double v83;
  double *v84;
  int32x2_t v85;
  int32x2_t v86;
  uint32x2_t v87;
  uint32x2_t v88;
  int32x2_t v89;
  int32x2_t v90;
  uint32x2_t v91;
  __int128 v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unsigned __int8 *v103;
  unint64_t v104;
  CA::_anonymous_namespace_ *v105;
  uint64_t v106;
  CA::_anonymous_namespace_ *v107;
  CA::Render::Texture *v108;
  unsigned int *v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  double *v113;
  _OWORD *v114;
  _OWORD *v115;
  double v116;
  double v117;
  double v118;
  double *v119;
  float v120;
  float v121;
  float v122;
  float v123;
  __int32 v124;
  __int32 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  unint64_t v130;
  CA::_anonymous_namespace_ *v131;
  uint64_t v132;
  unsigned __int8 *v133;
  uint64_t v134;
  unint64_t v135;
  int v136;
  double v137;
  uint64_t v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  void *v142;
  __int128 v143;
  int32x4_t v144;
  int32x4_t v145;
  int8x16_t v146;
  int32x2_t v147[2];
  void (*v148)(const void *, void *);
  unint64_t v149;
  __int128 v150;
  _OWORD v151[3];
  double v152[5];
  __int128 v153;
  __int128 v154;
  _OWORD v155[3];
  uint64_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  int32x4_t v161;
  float64x2_t v162;
  float64x2_t v163;
  void (**v164)(CA::CG::PathDelegate *__hidden);
  double *v165;
  CA::CG::MosaicDelegate *v166;
  __int128 v167;
  __int128 v168;
  float32x4_t v169;
  void ***v170;
  _QWORD v171[2];
  __int128 v172;
  _QWORD v173[511];
  CGRect BoundingBox;

  v1 = MEMORY[0x1E0C80A78](a1);
  v7 = v6;
  v8 = (int8x16_t *)v4;
  v10 = v9;
  v11 = v2;
  v12 = v1;
  v173[508] = *MEMORY[0x1E0C80C00];
  if (v5 != 0.0)
  {
    v15 = sqrt(*v4 * *v4 + v4[1] * v4[1]) * v5;
    v16 = *(_QWORD *)(v1 + 8);
    v162 = 0u;
    v163 = 0u;
    if (v3)
    {
      v17 = v3[1];
      v162 = *v3;
      v163 = v17;
    }
    else
    {
      BoundingBox = CGPathGetBoundingBox(v2);
      v162.f64[0] = BoundingBox.origin.x;
      v162.f64[1] = BoundingBox.origin.y;
      v163.f64[0] = BoundingBox.size.width;
      v163.f64[1] = BoundingBox.size.height;
      if (BoundingBox.size.width < 0.0)
      {
        v162.f64[0] = BoundingBox.size.width + BoundingBox.origin.x;
        v163.f64[0] = -BoundingBox.size.width;
      }
      if (BoundingBox.size.height < 0.0)
      {
        v162.f64[1] = BoundingBox.size.height + BoundingBox.origin.y;
        v163.f64[1] = -BoundingBox.size.height;
      }
    }
    CA::Mat2Impl::mat2_apply_to_rect((uint64_t)v8, v162.f64, v3->f64);
    v18 = vcvtps_s32_f32((float)(v15 * 2.82) + 0.5);
    v19 = v15;
    if (v15 <= 0.6)
      v20 = 0;
    else
      v20 = v18;
    v21.i64[1] = *(_QWORD *)&v163.f64[1];
    v22 = vceqzq_f64(v163);
    v23 = 0uLL;
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v22, 1), (int8x16_t)v22).u64[0] & 0x8000000000000000) == 0)
    {
      v24 = vorrq_s8((int8x16_t)vcltzq_f64(v163), (int8x16_t)vcgezq_f64(v163));
      if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v24), 1), v24).u64[0] & 0x8000000000000000) == 0)
      {
        v25 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v162, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        v21 = (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v162, v163), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v25);
        v23 = (int8x16_t)vuzp1q_s32(v25, v21);
      }
    }
    v26 = v23.i32[2];
    if (v23.i32[2] <= v23.i32[3])
      v27 = v23.i32[3];
    else
      v27 = v23.i32[2];
    if (v23.i32[2] >= v23.i32[3])
      v26 = v23.i32[3];
    if (v27 > 1073741822 || v26 < 1)
    {
      v146 = v23;
    }
    else
    {
      *(int32x2_t *)v21.i8 = vsub_s32(*(int32x2_t *)v23.i8, vdup_n_s32(v20));
      v29.i64[0] = v21.i64[0];
      v29.u64[1] = (unint64_t)vadd_s32(vdup_n_s32(2 * v20), (int32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
      if (v29.i32[3] < 1 || v29.i32[2] < 1)
        v31 = -1;
      else
        v31 = 0;
      v146 = vbslq_s8((int8x16_t)vdupq_n_s32(v31), (int8x16_t)v21, v29);
    }
    v161 = 0uLL;
    CA::Shape::get_bounds(*(_QWORD *)(*(_QWORD *)(v16 + 232) + 8), v161.i32);
    v34 = *(int32x2_t **)(v16 + 248);
    if (v34)
      v35 = v34 + 4;
    else
      v35 = (int32x2_t *)(v16 + 184);
    v36 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v161.u64[1]);
    if ((vpmax_u32(v36, v36).u32[0] & 0x80000000) != 0)
      return 1;
    v37 = v35[1];
    v38 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v37);
    if ((vpmax_u32(v38, v38).u32[0] & 0x80000000) != 0)
      return 1;
    *(int32x2_t *)v33.i8 = vmax_s32(*(int32x2_t *)v161.i8, *v35);
    *(int32x2_t *)&v32 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v161.i8, (int32x2_t)v161.u64[1]), vadd_s32(*v35, v37)), *(int32x2_t *)v33.i8);
    v39 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)&v32);
    if ((vpmax_u32(v39, v39).u32[0] & 0x80000000) != 0)
      return 1;
    v143 = v32;
    v144 = v33;
    v33.i64[1] = v32;
    v145 = v33;
    v161 = v33;
    v41 = CA::OGL::Context::need_transparent_source((CA::OGL::Context *)v16);
    v45 = (int32x4_t)vextq_s8(v146, v146, 8uLL);
    *(int32x2_t *)v46.i8 = vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v145.u64[1]);
    v47 = vpmax_u32(*(uint32x2_t *)v46.i8, *(uint32x2_t *)v46.i8).u32[0];
    if (v41)
    {
      v48.i64[0] = v144.i64[0];
      if ((v47 & 0x80000000) != 0
        || (v49 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v45.i8),
            (vpmax_u32(v49, v49).u32[0] & 0x80000000) != 0)
        || (v50 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v144.i8, (int32x2_t)v145.u64[1]), vadd_s32(*(int32x2_t *)v146.i8, *(int32x2_t *)v45.i8)), vmax_s32(*(int32x2_t *)v144.i8, *(int32x2_t *)v146.i8))), (vpmax_u32(v50, v50).u32[0] & 0x80000000) != 0))
      {
        v170 = 0;
        v171[0] = 0;
        CA::OGL::emit_bounds_surround(v16, (const CA::Bounds *)&v170);
        return 1;
      }
      v51 = (int32x2_t)__PAIR64__(DWORD1(v143), v145.u32[2]);
    }
    else
    {
      if ((v47 & 0x80000000) != 0)
        return 1;
      v52 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v45.i8);
      if ((vpmax_u32(v52, v52).u32[0] & 0x80000000) != 0)
        return 1;
      *(int32x2_t *)v48.i8 = vmax_s32(*(int32x2_t *)v144.i8, *(int32x2_t *)v146.i8);
      v51 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v144.i8, (int32x2_t)v145.u64[1]), vadd_s32(*(int32x2_t *)v146.i8, *(int32x2_t *)v45.i8)), *(int32x2_t *)v48.i8);
      v53 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v51);
      if ((vpmax_u32(v53, v53).u32[0] & 0x80000000) != 0)
        return 1;
      v48.u64[1] = (unint64_t)v51;
      v161 = v48;
    }
    v54 = 4.0;
    if (v15 > 8.0)
      v54 = 8.0;
    if (v15 <= 4.0)
      v54 = 2.0;
    if (v54 >= v19)
    {
      v13 = 0;
      if (v19 <= 0.6)
        return v13;
      v56 = v51.i32[0];
      v57 = v51.i32[1];
      v68 = 1.0;
      v55 = 1.0;
    }
    else
    {
      v55 = 1.0;
      v42.i64[0] = 0.5;
      v44.i64[0] = 1.0;
      do
      {
        v55 = v55 + v55;
        *(double *)v44.i64 = *(double *)v44.i64 * 0.5;
        v15 = v15 * 0.5;
      }
      while (v54 < v15);
      if (v15 <= 0.6)
        return 0;
      v56 = v51.i32[0];
      v57 = v51.i32[1];
      v45.i64[0] = 1.0;
      if (*(double *)v44.i64 == 1.0)
      {
        LODWORD(v13) = 0;
        v68 = 1.0;
      }
      else
      {
        if (v51.i32[0] <= v51.i32[1])
          v56 = v51.i32[1];
        v45.i32[0] = 1073741822;
        v42.i32[0] = v56;
        v58.i64[0] = v48.i32[0];
        v58.i64[1] = v48.i32[1];
        v59 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v42, v45), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v58));
        v58.i64[0] = v51.i32[0];
        v58.i64[1] = v51.i32[1];
        v60 = vdup_n_s32(v56 > 1073741822);
        v61 = (int8x16_t)vcvtq_f64_s64(v58);
        v58.i64[0] = v60.u32[0];
        v58.i64[1] = v60.u32[1];
        v62 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
        v63 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v58, 0x3FuLL)), v62, v61);
        v62.i64[0] = 0x7FEFFFFFFFFFFFFFLL;
        v64 = (int8x16_t)vdupq_lane_s64(vcgtq_f64((float64x2_t)v62, (float64x2_t)v63).i64[0], 0);
        v65.i64[1] = v59.i64[1];
        *(double *)v65.i64 = *(double *)v44.i64 * *(double *)v59.i64;
        v66 = (float64x2_t)vbslq_s8(v64, v65, v59);
        v65.i64[1] = v63.i64[1];
        *(double *)v65.i64 = *(double *)v44.i64 * *(double *)v63.i64;
        v67 = (float64x2_t)vbslq_s8(v64, v65, v63);
        v146 = v44;
        if (v67.f64[1] < 1.79769313e308)
        {
          v66.f64[1] = vmuld_lane_f64(*(double *)v44.i64, v66, 1);
          v67.f64[1] = v67.f64[1] * *(double *)v44.i64;
        }
        CA::Bounds::set_exterior(&v161, v40, v66, v67);
        v68 = *(double *)v146.i64;
        v20 = vcvtpd_s64_f64(*(double *)v146.i64 * (double)v20);
        LODWORD(v13) = 1;
        v56 = v161.i32[2];
        v57 = v161.i32[3];
      }
    }
    if (v56 <= v57)
      v69 = v57;
    else
      v69 = v56;
    if (v56 >= v57)
      v70 = v57;
    else
      v70 = v56;
    if (v69 <= 1073741822 && v70 >= 1)
    {
      *(int32x2_t *)v161.i8 = vsub_s32(*(int32x2_t *)v161.i8, vdup_n_s32(v20));
      v161.i32[2] = v56 + 2 * v20;
      v161.i32[3] = v57 + 2 * v20;
      if (v161.i32[2] < 1 || v57 + 2 * v20 <= 0)
        v161.i64[1] = 0;
    }
    v171[0] = 0;
    v171[1] = v173;
    v172 = xmmword_18474E260;
    v170 = (void ***)v171;
    *(_QWORD *)&v152[0] = v171;
    memset(&v152[1], 0, 24);
    v156 = 0;
    v152[4] = 0.125;
    v153 = 0u;
    v154 = 0u;
    memset(v155, 0, sizeof(v155));
    v46.i64[0] = (uint64_t)v8;
    v43.i64[0] = (uint64_t)v151;
    v72 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vceqq_s64(v43, v46)).i64[0], 0);
    v157 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    v158 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    v73 = (float64x2_t)vandq_s8(v8[2], v72);
    v74 = (float64x2_t)vandq_s8(v8[1], v72);
    v151[0] = vmulq_n_f64((float64x2_t)vandq_s8(*v8, v72), v68);
    v151[1] = vmulq_n_f64(v74, v68);
    v151[2] = vmulq_n_f64(v73, v68);
    v75 = v161;
    v76 = vadd_s32((int32x2_t)v161.u64[1], *(int32x2_t *)v161.i8);
    v77.i64[0] = v76.i32[0];
    v77.i64[1] = v76.i32[1];
    v78 = vcvtq_f64_s64(v77);
    v77.i64[0] = v161.i32[0];
    v77.i64[1] = v161.i32[1];
    v159 = vcvtq_f64_s64(v77);
    v160 = v78;
    if (*(double *)v151 == 1.0)
    {
      v80 = 1;
      while (v80 != 6)
      {
        v81 = v80;
        v82 = *((double *)v151 + v80);
        v83 = CA::Mat2Impl::mat2_identity_double[v80++];
        if (v82 != v83)
        {
          if ((unint64_t)(v81 - 1) < 5)
            goto LABEL_83;
          break;
        }
      }
      v164 = 0;
      v79 = (void (__cdecl *)(void *, const CGPathElement *))CA::CG::PathIterator::Iterator<CA::ScanConverter::Path>::callback_1;
    }
    else
    {
LABEL_83:
      v164 = (void (**)(CA::CG::PathDelegate *__hidden))v151;
      v79 = (void (__cdecl *)(void *, const CGPathElement *))CA::CG::PathIterator::Iterator<CA::ScanConverter::Path>::callback_0;
    }
    v165 = v152;
    CGPathApply(v11, &v164, v79);
    v84 = CA::ScanConverter::Path::closepath(v152);
    v85 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(v157)));
    v86 = vmovn_s64(vcvtq_s64_f64(vrndpq_f64(v158)));
    *(int32x2_t *)&v150 = v85;
    *((int32x2_t *)&v150 + 1) = vsub_s32(v86, v85);
    v87 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v150 + 8));
    if ((vpmax_u32(v87, v87).u32[0] & 0x80000000) != 0)
      goto LABEL_128;
    v88 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v75.u64[1]);
    if ((vpmax_u32(v88, v88).u32[0] & 0x80000000) != 0
      || (v89 = vmax_s32(v85, *(int32x2_t *)v75.i8),
          v90 = vsub_s32(vmin_s32(v86, v76), v89),
          v91 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v90),
          (vpmax_u32(v91, v91).u32[0] & 0x80000000) != 0))
    {
      *((_QWORD *)&v150 + 1) = 0;
LABEL_128:
      v129 = (int)v55;
      if ((int)v55 != 1)
      {
        if (SDWORD2(v150) <= 1073741822)
        {
          LODWORD(v150) = v150 * v129;
          DWORD2(v150) *= v129;
        }
        if (SHIDWORD(v150) <= 1073741822)
        {
          DWORD1(v150) *= v129;
          HIDWORD(v150) *= v129;
        }
      }
      if (v41)
        CA::OGL::emit_bounds_surround(v16, (const CA::Bounds *)&v150);
      v100 = 1;
      goto LABEL_136;
    }
    *(int32x2_t *)&v92 = v89;
    *((int32x2_t *)&v92 + 1) = v90;
    v150 = v92;
    v93 = v90.u32[0];
    v94 = v90.u32[1];
    if (v90.i32[0] <= v90.i32[1])
      v95 = v90.i32[1];
    else
      v95 = v90.i32[0];
    if (v90.i32[0] >= v90.i32[1])
      v96 = v90.i32[1];
    else
      v96 = v90.i32[0];
    v97 = v89.u32[1];
    if (v95 <= 1073741822 && v96 >= 1)
    {
      v97 = (v89.i32[1] - v20);
      LODWORD(v150) = v89.i32[0] - v20;
      DWORD1(v150) = v89.i32[1] - v20;
      v93 = (v90.i32[0] + 2 * v20);
      v94 = (v90.i32[1] + 2 * v20);
      *((_QWORD *)&v150 + 1) = __PAIR64__(v94, v93);
      if ((int)v93 < 1 || (int)v94 <= 0)
      {
        v94 = 0;
        v93 = 0;
        *((_QWORD *)&v150 + 1) = 0;
      }
    }
    v100 = 0;
    if ((int)v93 > 2048 || (int)v94 > 2048)
      goto LABEL_136;
    if ((v94 + *(_DWORD *)(v12 + 1400) - 1)
       / *(_DWORD *)(v12 + 1400)
       * ((v93 + *(_DWORD *)(v12 + 1396) - 1)
        / *(_DWORD *)(v12 + 1396)) <= CA::CG::Renderer::_max_mosaic_cells)
    {
      if (is_mul_ok((int)v93, (int)v94))
      {
        v144.i64[0] = (int)v93;
        v145.i32[0] = v97;
        v130 = (int)v93 * (uint64_t)(int)v94;
        v146.i64[0] = v130;
        if (v130 > 0x1000)
        {
          *(_QWORD *)&v143 = malloc_type_malloc((int)v93 * (uint64_t)(int)v94, 0xED7D0CD7uLL);
          if (!(_QWORD)v143)
            goto LABEL_139;
        }
        else
        {
          MEMORY[0x1E0C80A78](v84);
          *(_QWORD *)&v143 = (char *)&v143 - ((v130 + 15) & 0xFFFFFFFFFFFFFFF0);
          bzero((void *)v143, (int)v93 * (uint64_t)(int)v94);
        }
        v131 = (CA::_anonymous_namespace_ *)v143;
        bzero((void *)v143, v146.u64[0]);
        v132 = v10;
        v133 = (unsigned __int8 *)v144.i64[0];
        CA::ScanConverter::render_mask((uint64_t)v152, v132, (uint64_t)v131, v144.i64[0], v150, v145.u32[0], (v150 + v93), (v94 + v145.i32[0]), v7);
        v134 = *(_QWORD *)(v16 + 16);
        v135 = *(_QWORD *)(v134 + 16) & 0xFFFFFF00FF00FF00;
        if (*(_QWORD *)(v134 + 8) == 0x3C003C003C003C00)
          v136 = 1;
        else
          v136 = 3;
        *(_DWORD *)(v134 + 16) = v136 | v135;
        *(_DWORD *)(v134 + 20) = HIDWORD(v135);
        if ((*(_DWORD *)(v12 + 1536) & 0x80000000) != 0)
        {
          *(_DWORD *)(v12 + 1536) = 0;
          *(_BYTE *)(v12 + 1540) = v13;
          *(_BYTE *)(v12 + 1541) = v13;
          *(_QWORD *)(v16 + 128) = 0;
          *(_QWORD *)(v16 + 96) = v16 + 818;
          *(_OWORD *)(v16 + 104) = xmmword_18474E060;
          v164 = &off_1E15918A8;
          v165 = (double *)v12;
          v166 = (CA::CG::MosaicDelegate *)v16;
          *(_QWORD *)&v167 = v131;
          *((_QWORD *)&v167 + 1) = &v150;
          *(double *)&v168 = v55;
          CA::OGL::Mosaic::draw(v12 + 1392, (uint64_t *)v16, 4, 0, 0, v93, v94, 1, (uint64_t)&v164, 0);
          v164 = (void (**)(CA::CG::PathDelegate *__hidden))off_1E1592170;
          v137 = CA::CG::MosaicDelegate::draw_array(v166);
          v138 = *(_QWORD *)(v12 + 1552);
          if (v138)
          {
            (*(void (**)(uint64_t, uint64_t, _QWORD, double))(*(_QWORD *)v16 + 520))(v16, v138, 0, v137);
            *(_QWORD *)(v12 + 1552) = 0;
            *(_DWORD *)(v12 + 1544) = -1;
          }
          *(_DWORD *)(v12 + 1536) = -1;
          *(_QWORD *)(v12 + 1504) = 0;
        }
        *(_BYTE *)(*(_QWORD *)(v16 + 16) + 16) = 0;
        if (v146.i64[0] > 0x1000uLL)
          free(v131);
        goto LABEL_128;
      }
    }
    else
    {
      v101 = v97;
      v102 = CA::Render::format_rowbytes((CA::Render *)9, v93);
      v103 = (unsigned __int8 *)v102;
      v149 = v102;
      if (is_mul_ok(v102, v94))
        v104 = v102 * v94;
      else
        v104 = 0;
      if (v104 <= 0x100000)
      {
        v148 = 0;
        v105 = (CA::_anonymous_namespace_ *)CA::Render::aligned_malloc((CA::Render *)v104, (unint64_t *)&v148, 0);
        if (v105)
        {
          v106 = v10;
          v107 = v105;
          v144.i32[0] = v150;
          v145.i32[0] = v93 + v150;
          v146.i32[0] = v94 + v101;
          CA::ScanConverter::render_mask((uint64_t)v152, v106, (uint64_t)v105, (uint64_t)v103, v150, v101, (v93 + v150), (v94 + v101), v7);
          v108 = CA::Render::Image::new_image((CA::Render::Image *)9, v93, v94, 1u, 0, v107, &v149, (const unint64_t *)CA::Render::aligned_free, v148, v142);
          if (v108)
          {
            v109 = (unsigned int *)v108;
            v110 = *(_QWORD *)(v16 + 16);
            v111 = *(_QWORD *)(v110 + 16) & 0xFFFFFF00FF00FF00;
            v112 = *(_QWORD *)(v110 + 8) == 0x3C003C003C003C00 ? 1 : 3;
            *(_DWORD *)(v110 + 16) = v112 | v111;
            *(_DWORD *)(v110 + 20) = HIDWORD(v111);
            v113 = (_DWORD)v13 ? (double *)36 : 0;
            v169 = 0uLL;
            v114 = CA::OGL::Context::bind_image(v16, 0, (uint32x2_t *)v108, v113, 1u, 1, 0, 0, 0.0, &v169, 0);
            if (v114)
            {
              v115 = v114;
              v116 = v55 * (double)v145.i32[0];
              v117 = v55;
              v118 = v55 * (double)v146.i32[0];
              v168 = 0u;
              v119 = *(double **)(*(_QWORD *)(v16 + 232) + 8);
              v164 = (void (**)(CA::CG::PathDelegate *__hidden))v16;
              v165 = v119;
              v167 = 0u;
              v166 = 0;
              WORD4(v167) = 256;
              CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v164);
              v147[0] = 0;
              v147[1] = 0;
              v120 = v55 * (double)v144.i32[0];
              v121 = v55 * (double)(int)v101;
              v122 = v116;
              while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v164, v147))
              {
                v123 = v118;
                CA::OGL::Context::array_rect((_QWORD *)v16, v120, v121, v122, v123);
                v124 = v169.i32[3];
                v125 = v169.i32[2];
                v126 = v169.i64[0];
                v127 = *(_QWORD *)(v16 + 120) + 48 * *(_QWORD *)(v16 + 128);
                *(_DWORD *)(v127 - 176) = v169.i32[0];
                *(_DWORD *)(v127 - 172) = v124;
                *(_DWORD *)(v127 - 128) = v125;
                *(_DWORD *)(v127 - 124) = v124;
                *(_DWORD *)(v127 - 80) = v125;
                *(_DWORD *)(v127 - 76) = HIDWORD(v126);
                *(_QWORD *)(v127 - 32) = v126;
                v128 = *(_QWORD *)(*(_QWORD *)(v16 + 16) + 8);
                *(_QWORD *)(v127 - 160) = v128;
                *(_QWORD *)(v127 - 112) = v128;
                *(_QWORD *)(v127 - 64) = v128;
                *(_QWORD *)(v127 - 16) = v128;
              }
              (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v16 + 520))(v16, v115, 0);
              *(_BYTE *)(*(_QWORD *)(v16 + 16) + 16) = 0;
              v55 = v117;
            }
            else
            {
              *(_BYTE *)(*(_QWORD *)(v16 + 16) + 16) = 0;
            }
            v139 = v109 + 2;
            do
            {
              v140 = __ldaxr(v139);
              v141 = v140 - 1;
            }
            while (__stlxr(v141, v139));
            if (!v141)
              (*(void (**)(unsigned int *))(*(_QWORD *)v109 + 16))(v109);
          }
          goto LABEL_128;
        }
      }
    }
LABEL_139:
    v100 = 0;
LABEL_136:
    x_heap_free(v170);
    return v100;
  }
  CA::CG::fill_path(v1);
  return 1;
}

void CA::`anonymous namespace'::gaussian_blur(CA::_anonymous_namespace_ *this, unsigned __int8 *a2, const unsigned __int8 *a3, const unsigned __int8 *a4, unsigned __int8 *a5, float a6)
{
  vImagePixelCount v6;
  double v8;
  int v10;
  size_t v13;
  char *v14;
  vImagePixelCount v15;
  char *v16;
  void *v17;
  unint64_t v18;
  vImage_Error v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  size_t v23;
  char *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int32x2_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t v41;
  int v42;
  int v43;
  unsigned __int8 *v44;
  const unsigned __int8 *v45;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  BOOL v54;
  void *v55;
  size_t v56;
  CA::_anonymous_namespace_ *v57;
  unsigned __int8 *v58;
  int v59;
  vImagePixelCount v60;
  const unsigned __int8 *v61;
  vImage_Buffer v62;
  vImage_Buffer v63;
  vImage_Buffer v64[8];
  uint64_t v65;

  v61 = a4;
  v65 = *MEMORY[0x1E0C80C00];
  v8 = a6;
  if (v8 > 0.6)
  {
    v10 = (int)a3;
    if ((_DWORD)a5 == 1)
    {
      if (a6 <= 8.0)
      {
        return;
      }
      LODWORD(v6) = vcvtms_u32_f32((float)(a6 * 0.93999) + -0.5);
      v57 = this;
      v60 = ((_DWORD)v61 + 2 * v6);
      v13 = ((_DWORD)a3 + 2 * v6);
      v14 = (char *)malloc_type_calloc(v13, v60, 0xDF3B78D3uLL);
      v15 = v10;
      v16 = &v14[v13 * (unint64_t)v6 + v6];
      v17 = v14;
      CGBlt_copyBytes();
      v64[0].data = v17;
      v64[0].height = v60;
      v64[0].width = v13;
      v64[0].rowBytes = v13;
      v63.data = v57;
      v63.height = (int)v61;
      v63.width = v15;
      v63.rowBytes = (size_t)a2;
      v62.data = v16;
      v62.height = (int)v61;
      v62.width = v15;
      v62.rowBytes = v13;
      v18 = vImageBoxConvolve_Planar8(v64, &v63, 0, v6, v6, (2 * v6) | 1, (2 * v6) | 1, 0, 0x84u);
      v19 = vImageBoxConvolve_Planar8(&v63, &v62, 0, 0, 0, (2 * v6) | 1, (2 * v6) | 1, 0, 0x84u);
      if ((v18 & 0x8000000000000000) == 0 && (v19 & 0x8000000000000000) == 0)
      {
        if ((uint64_t)v18 <= v19)
          v18 = v19;
        if (v18 > 0x1000)
        {
          v20 = (char *)malloc_type_malloc(v18, 0xC3EDC26uLL);
        }
        else
        {
          MEMORY[0x1E0C80A78](v19);
          v20 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
          bzero(v20, v18);
        }
        vImageBoxConvolve_Planar8(v64, &v63, v20, v6, v6, (2 * v6) | 1, (2 * v6) | 1, 0, 0x14u);
        vImageBoxConvolve_Planar8(&v63, &v62, v20, 0, 0, (2 * v6) | 1, (2 * v6) | 1, 0, 0x14u);
        vImageBoxConvolve_Planar8(v64, &v63, v20, v6, v6, (2 * v6) | 1, (2 * v6) | 1, 0, 0x14u);
        free(v17);
        if (v18 > 0x1000)
        {
          v55 = v20;
          goto LABEL_53;
        }
      }
    }
    else
    {
      v21 = a2;
      v22 = (int)v61;
      v60 = (vImagePixelCount)a3;
      if ((int)a3 > (int)v61)
        v22 = (int)a3;
      v23 = (v22 * (_DWORD)a5);
      if (v23 > 0x1000)
      {
        v24 = (char *)malloc_type_malloc((v22 * (_DWORD)a5), 0x6E8ADC97uLL);
        v26 = (unsigned __int8 *)malloc_type_malloc(v23, 0x516DEA5EuLL);
      }
      else
      {
        MEMORY[0x1E0C80A78](this);
        v24 = (char *)&v56 - ((v23 + 15) & 0x1FFFFFFF0);
        bzero(v24, v23);
        MEMORY[0x1E0C80A78](v25);
        v26 = (unsigned __int8 *)v24;
        bzero(v24, v23);
      }
      if (v24)
        v28 = v26 == 0;
      else
        v28 = 1;
      if (!v28)
      {
        v57 = this;
        v29 = 0;
        *(float *)v27.i32 = (float)(a6 * 0.93999) + -0.5;
        v30 = ((int)*(float *)v27.i32 + 1);
        *(float *)v27.i32 = *(float *)v27.i32 - truncf(*(float *)v27.i32);
        v31 = (float32x4_t)vdupq_lane_s32(v27, 0);
        v32 = (int32x4_t)xmmword_18474E180;
        v33 = (int32x4_t)xmmword_18474E190;
        v34 = (int32x4_t)xmmword_18474E1A0;
        v35 = (int32x4_t)xmmword_18474E1B0;
        v36.i64[0] = 0x1000000010;
        v36.i64[1] = 0x1000000010;
        do
        {
          v37.i64[0] = 0x3F0000003F000000;
          v37.i64[1] = 0x3F0000003F000000;
          v38.i64[0] = 0x3F0000003F000000;
          v38.i64[1] = 0x3F0000003F000000;
          v39.i64[0] = 0x3F0000003F000000;
          v39.i64[1] = 0x3F0000003F000000;
          v40.i64[0] = 0x3F0000003F000000;
          v40.i64[1] = 0x3F0000003F000000;
          *(int16x4_t *)v41.i8 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v40, vcvtq_f32_s32(v35), v31)));
          v41.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v39, vcvtq_f32_s32(v34), v31)));
          *(int16x4_t *)v40.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v38, vcvtq_f32_s32(v33), v31)));
          *(int16x4_t *)&v40.u32[2] = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v37, vcvtq_f32_s32(v32), v31)));
          *(int8x16_t *)((char *)&v64[0].data + v29) = vuzp1q_s8(v41, (int8x16_t)v40);
          v29 += 16;
          v35 = vaddq_s32(v35, v36);
          v34 = vaddq_s32(v34, v36);
          v33 = vaddq_s32(v33, v36);
          v32 = vaddq_s32(v32, v36);
        }
        while (v29 != 256);
        v56 = v23;
        v42 = (float)((float)(8924200.0 / a6) + 0.5);
        if ((int)v61 >= 1)
        {
          v43 = (int)v61;
          v44 = (unsigned __int8 *)v57;
          v58 = v21;
          do
          {
            v59 = v43;
            v45 = (const unsigned __int8 *)v60;
            for (i = 1; a5 != i; ++i)
            for (j = 1; a5 != j; ++j)
            for (k = 1; a5 != k; ++k)
            v21 = v58;
            v44 = &v58[(_QWORD)v44];
            v43 = v59 - 1;
          }
          while (v59 > 1);
        }
        v49 = (unsigned __int8 *)v57;
        if ((int)v60 >= 1)
        {
          do
          {
            v50 = v49;
            for (m = 1; a5 != m; ++m)
            for (n = 1; a5 != n; ++n)
            for (ii = 1; a5 != ii; ++ii)
            v49 = &v50[a5];
            v54 = __OFSUB__((_DWORD)v60, 1);
            v60 = (v60 - 1);
          }
          while (!(((v60 & 0x80000000) != 0) ^ v54 | ((_DWORD)v60 == 0)));
        }
        LODWORD(v23) = v56;
      }
      if (v23 > 0x1000 && v26)
        free(v26);
      if (v23 > 0x1000 && v24)
      {
        v55 = v24;
LABEL_53:
        free(v55);
      }
    }
  }
}

void CA::`anonymous namespace'::gaussian_vimage_8(CA::_anonymous_namespace_ *this, unsigned __int8 *a2, int a3, uint64_t a4, int a5, double a6)
{
  uint64_t v11;
  size_t v12;
  double *v13;
  double *v14;
  __int128 v15;
  uint64_t v16;
  uint64x2_t v17;
  uint64_t v18;
  double v19;
  int64x2_t v20;
  int32x2_t v21;
  int64x2_t v22;
  __int128 v23;
  __int8 v24;
  float64x2_t v25;
  double v26;
  double *v27;
  double v28;
  double v29;
  char v30;
  signed int v31;
  double v32;
  size_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  _WORD *v39;
  double *v40;
  double v41;
  int v42;
  int v43;
  size_t v44;
  unsigned __int8 *v45;
  char *v46;
  void *v47;
  vImagePixelCount v48;
  size_t v49;
  void *v50;
  CA::_anonymous_namespace_ *v51;
  uint64_t v52;
  void *v53;
  double *v54;
  uint64_t v55;
  double *v56;
  unint64_t v57;
  CA::_anonymous_namespace_ *v58;
  __int128 v59;
  uint64x2_t v60;
  int64x2_t v61;
  float64x2_t v62;
  __int128 v63;
  int64x2_t v64;
  int64x2_t v65;
  vImage_Buffer dest;
  vImage_Buffer src;
  uint64_t v68;

  v58 = this;
  v68 = *MEMORY[0x1E0C80C00];
  v11 = (a5 + 1);
  v57 = 8 * (int)v11;
  if (v57 <= 0x1000)
  {
    MEMORY[0x1E0C80A78](this);
    v13 = (double *)((char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
    bzero(v13, v12);
    if ((a5 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_14:
    v26 = *v13;
    v30 = 1;
    v28 = *v13;
    goto LABEL_16;
  }
  v14 = (double *)malloc_type_malloc(8 * (int)v11, 0x8948E546uLL);
  v13 = v14;
  if (a5 < 0)
    goto LABEL_14;
LABEL_3:
  v16 = 0;
  v17 = (uint64x2_t)xmmword_18474E1C0;
  v61 = vdupq_n_s64(2uLL);
  v18 = v11 - 1;
  v60 = (uint64x2_t)vdupq_n_s64(v11 - 1);
  *(double *)&v15 = -0.5 / (a6 * a6);
  v59 = v15;
  v19 = 1.0 / a6;
  do
  {
    v65 = (int64x2_t)v17;
    v20 = (int64x2_t)vcgeq_u64(v60, v17);
    v21.i32[0] = v16;
    v21.i32[1] = v16 + 1;
    *(int32x2_t *)v20.i8 = vmovn_s64(v20);
    v64 = v20;
    *(int32x2_t *)v20.i8 = vmul_s32(v21, v21);
    v22.i64[0] = v20.i32[0];
    v22.i64[1] = v20.i32[1];
    v62 = vmulq_n_f64(vcvtq_f64_s64(v22), *(double *)&v59);
    *(double *)&v23 = exp(v62.f64[1]);
    v63 = v23;
    v25.f64[0] = exp(v62.f64[0]);
    v24 = v64.i8[4];
    *(_QWORD *)&v25.f64[1] = v63;
    if ((v64.i8[0] & 1) != 0)
      v13[v16] = 0.39894228 * v19 * v25.f64[0];
    if ((v24 & 1) != 0)
      v13[v16 + 1] = vmuld_lane_f64(0.39894228, v25, 1) * v19;
    v16 += 2;
    v17 = (uint64x2_t)vaddq_s64(v65, v61);
  }
  while (((v11 + 1) & 0x1FFFFFFFELL) != v16);
  v26 = *v13;
  if (a5 < 1)
  {
    v30 = 1;
    v28 = *v13;
  }
  else
  {
    v27 = v13 + 1;
    v28 = *v13;
    do
    {
      v29 = *v27++;
      v28 = v28 + v29 * 2.0;
      --v18;
    }
    while (v18);
    v30 = 0;
  }
LABEL_16:
  v31 = (2 * a5) | 1;
  v32 = 16384.0 / v28;
  *(_QWORD *)&v63 = 2 * v31;
  if ((unint64_t)v63 > 0x1000)
  {
    v35 = (char *)malloc_type_malloc(2 * v31, 0x55B2CBDEuLL);
    v34 = v35;
    v26 = *v13;
  }
  else
  {
    MEMORY[0x1E0C80A78](v14);
    v34 = (char *)&v55 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v34, v33);
  }
  *(_WORD *)&v34[2 * a5] = (int)(v26 * v32);
  if ((v30 & 1) == 0)
  {
    v36 = v11 - 1;
    v37 = &v34[2 * a5];
    v38 = v37 - 2;
    v39 = v37 + 2;
    v40 = v13 + 1;
    do
    {
      v41 = *v40++;
      v42 = (int)(v41 * v32);
      *v39++ = v42;
      *(_WORD *)v38 = v42;
      v38 -= 2;
      --v36;
    }
    while (v36);
  }
  v43 = a3;
  v44 = (2 * a5 + a3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v56 = v13;
  v45 = a2;
  if (v44 > 0x1000)
  {
    v46 = (char *)malloc_type_malloc(v44, 0xB91FB5F5uLL);
  }
  else
  {
    MEMORY[0x1E0C80A78](v35);
    v46 = (char *)&v55 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v46, v44);
  }
  v47 = malloc_type_malloc(((int)a4 * v43 + 15) & 0xFFFFFFFFFFFFFFF0, 0x80DF8B17uLL);
  src.data = v46;
  src.height = 1;
  src.width = v44;
  src.rowBytes = v44;
  *(_QWORD *)&v62.f64[0] = v44;
  v61.i64[0] = (uint64_t)v47;
  dest.data = v47;
  dest.height = 1;
  v48 = v43;
  dest.width = v43;
  dest.rowBytes = v43;
  bzero(v46, a5);
  v64.i64[0] = (uint64_t)v46;
  bzero(&v46[v43 + a5], a5);
  v65.i64[0] = a4;
  v49 = (size_t)v45;
  if ((int)a4 >= 1)
  {
    v50 = (void *)(v64.i64[0] + a5);
    v51 = v58;
    v52 = v65.u32[0];
    do
    {
      memcpy(v50, v51, v43);
      vImageConvolve_Planar8(&src, &dest, 0, a5, 0, (const int16_t *)v34, 1u, v31, 0x4000, 0, 0x14u);
      dest.data = (char *)dest.data + v43;
      v51 = (CA::_anonymous_namespace_ *)((char *)v51 + v49);
      --v52;
    }
    while (v52);
  }
  v53 = (void *)v61.i64[0];
  src.data = (void *)v61.i64[0];
  src.height = v65.i32[0];
  src.width = v48;
  src.rowBytes = v48;
  dest.data = v58;
  dest.height = v65.i32[0];
  dest.width = v48;
  dest.rowBytes = v49;
  vImageConvolve_Planar8(&src, &dest, 0, 0, 0, (const int16_t *)v34, v31, 1u, 0x4000, 0, 0x14u);
  free(v53);
  if (*(_QWORD *)&v62.f64[0] > 0x1000uLL)
    free((void *)v64.i64[0]);
  v54 = v56;
  if ((unint64_t)v63 > 0x1000)
    free(v34);
  if (v57 > 0x1000)
    free(v54);
}

void CA::CG::MosaicBitmapDelegate::~MosaicBitmapDelegate(CA::CG::MosaicBitmapDelegate *this)
{
  void *v2;

  *(_QWORD *)this = off_1E1592F88;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2 && v2 != *((void **)this + 4))
    free(v2);
  *(_QWORD *)this = off_1E1592170;
  CA::CG::MosaicDelegate::draw_array(*((CA::CG::MosaicDelegate **)this + 2));
}

double CA::CG::MosaicDelegate::draw_array(CA::CG::MosaicDelegate *this)
{
  uint64_t v2;
  double result;
  __int128 v4;
  _QWORD v5[3];
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 16))
  {
    v4 = 0u;
    v7 = 0u;
    v2 = *(_QWORD *)(*((_QWORD *)this + 29) + 8);
    v5[0] = this;
    v5[1] = v2;
    v6 = 0u;
    v5[2] = 0;
    WORD4(v6) = 0;
    CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v5);
    while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v5, (int32x2_t *)&v4))CA::OGL::Context::array_flush((uint64_t)this);
    *((_QWORD *)this + 16) = 0;
    *((_QWORD *)this + 12) = (char *)this + 818;
    result = 0.0;
    *(_OWORD *)((char *)this + 104) = xmmword_18474E060;
  }
  return result;
}

void CA::CG::ClipPath::draw(CA::CG::ClipPath *this, CA::CG::Renderer *a2)
{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  CA::OGL::Context *v6;
  uint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  unsigned int v13;
  double *v14;
  double *v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  float64x2_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  int32x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  double v40;
  double v41;
  float64x2_t v42;
  float64x2_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  __int128 v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  __int128 v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v3 = *((float64x2_t *)a2 + 2);
  v4 = *((float64x2_t *)a2 + 3);
  v5 = *((float64x2_t *)a2 + 4);
  v6 = (CA::OGL::Context *)*((_QWORD *)a2 + 1);
  v42 = 0u;
  v43 = 0u;
  v40 = 0.0;
  v41 = 0.0;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v37 = v3;
  v38 = v4;
  v39 = v5;
  if (CGPathIsRectWithTransform())
  {
    v35 = v42;
    v36 = v43;
    if (v43.f64[0] < 0.0)
    {
      v35.f64[0] = v43.f64[0] + v42.f64[0];
      v36.f64[0] = -v43.f64[0];
    }
    if (v43.f64[1] < 0.0)
    {
      v35.f64[1] = v43.f64[1] + v42.f64[1];
      v36.f64[1] = -v43.f64[1];
    }
    v32 = v37;
    v57 = v37;
    v58 = v38;
    v33 = v39;
    v34 = v38;
    v59 = v39;
    v7 = CA::CG::mat2_filter_bits((uint64_t)&v57);
    v13 = CA::CG::rect_filter_bits((uint64_t)&v35, v57.f64, v7, v8, v9, v10, v11, v12);
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v56 = 0;
    CA::Transform::set_affine((CA::Transform *)&v44, v32.f64[0], v32.f64[1], v34.f64[0], v34.f64[1], v33.f64[0], v33.f64[1]);
    *((_QWORD *)&v53 + 1) = &v35;
    *(_QWORD *)&v54 = &v44;
    *((_QWORD *)&v54 + 1) = v13 | 0xFF00000000;
    v56 = 0;
    v55 = 0uLL;
    CA::OGL::fill_rect((uint64_t)v6, (uint64_t)&v53 + 8, v14, v15);
    return;
  }
  if (CGPathIsEllipseWithTransform())
  {
    v16 = v37;
    v17 = v38;
    v18 = v39;
    v19 = v42.f64[1];
    v20 = v42.f64[0];
    v57 = v42;
    v58 = v43;
    if (v43.f64[0] < 0.0)
    {
      v20 = v43.f64[0] + v42.f64[0];
      v57.f64[0] = v43.f64[0] + v42.f64[0];
      v58.f64[0] = -v43.f64[0];
    }
    if (v43.f64[1] >= 0.0)
    {
      v21 = v43.f64[1];
    }
    else
    {
      v19 = v43.f64[1] + v42.f64[1];
      v21 = -v43.f64[1];
      v57.f64[1] = v43.f64[1] + v42.f64[1];
      v58.f64[1] = -v43.f64[1];
    }
    v23 = v43.f64[0] * 0.5;
    v22 = v43.f64[1] * 0.5;
LABEL_20:
    v24 = v23 - v22;
    if (v23 - v22 < 0.0)
      v24 = -(v23 - v22);
    if (v24 > 0.001)
    {
      v25 = v22 / v23;
      v26 = vmlaq_n_f64(vmlaq_n_f64(v18, v16, v20), v17, v19);
      v17 = vmulq_n_f64(v17, v25);
      v18 = vmlsq_lane_f64(vmlsq_lane_f64(v26, v16, v20, 0), v17, v19, 0);
      v58.f64[1] = v21 / v25;
    }
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v56 = 0;
    CA::Transform::set_affine((CA::Transform *)&v44, v16.f64[0], v16.f64[1], v17.f64[0], v17.f64[1], v18.f64[0], v18.f64[1]);
    *((_QWORD *)&v53 + 1) = &v57;
    *(_QWORD *)&v54 = &v44;
    *((_QWORD *)&v54 + 1) = 0xFF0020003FLL;
    v56 = 0;
    v55 = 0uLL;
    CA::OGL::fill_round_rect((uint64_t)v6, (float64x2_t **)&v53 + 1, (double *)0xF, 0, v23, v23);
    return;
  }
  if (CGPathIsRoundedRectWithTransform())
  {
    v16 = v37;
    v17 = v38;
    v18 = v39;
    v19 = v42.f64[1];
    v20 = v42.f64[0];
    v57 = v42;
    v21 = v43.f64[1];
    v58 = v43;
    if (v43.f64[0] < 0.0)
    {
      v20 = v43.f64[0] + v42.f64[0];
      v57.f64[0] = v43.f64[0] + v42.f64[0];
      v58.f64[0] = -v43.f64[0];
    }
    if (v43.f64[1] < 0.0)
    {
      v19 = v43.f64[1] + v42.f64[1];
      v21 = -v43.f64[1];
      v57.f64[1] = v43.f64[1] + v42.f64[1];
      v58.f64[1] = -v43.f64[1];
    }
    v23 = v40;
    v22 = v41;
    goto LABEL_20;
  }
  if (CGPathIsUnevenCornersRoundedRectWithTransform()
    && (*(unsigned int (**)(CA::OGL::Context *, uint64_t))(*(_QWORD *)v6 + 184))(v6, 31))
  {
    v35 = v42;
    v36 = v43;
    if (v43.f64[0] < 0.0)
    {
      v35.f64[0] = v43.f64[0] + v42.f64[0];
      v36.f64[0] = -v43.f64[0];
    }
    if (v43.f64[1] < 0.0)
    {
      v35.f64[1] = v43.f64[1] + v42.f64[1];
      v36.f64[1] = -v43.f64[1];
    }
    v57 = v61;
    v58 = v62;
    v59 = v63;
    v60 = v64;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v56 = 0;
    CA::Transform::set_affine((CA::Transform *)&v44, v37.f64[0], v37.f64[1], v38.f64[0], v38.f64[1], v39.f64[0], v39.f64[1]);
    *((_QWORD *)&v53 + 1) = &v35;
    *(_QWORD *)&v54 = &v44;
    *((_QWORD *)&v54 + 1) = 0xFF0020003FLL;
    v56 = 0;
    v55 = 0uLL;
    CA::OGL::fill_uneven_round_rect(v6, (uint64_t)&v53 + 8, v57.f64, 0, COERCE_DOUBLE(0xFF0020003FLL), v27, v28, v29, v30, v31);
  }
  else
  {
    CA::CG::fill_path((uint64_t)a2);
  }
}

void CA::CG::fill_path(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  const CA::Shape *v3;
  uint64_t v4;
  double *v5;
  int v6;
  char v7;
  double *v8;
  uint64_t v9;
  float64x2_t *v10;
  float64x2_t *v11;
  int8x16_t **v12;
  const CGPath *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  float64x2_t v17;
  double v18;
  double v19;
  unsigned int v20;
  CA::OGL::Context *v21;
  CA::Shape *v22;
  double v23;
  double v24;
  double v25;
  float64x2_t v26;
  int64x2_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int32x2_t v40;
  int32x4_t v41;
  __int128 v42;
  uint64_t v43;
  int32x2_t *v44;
  uint32x2_t v45;
  int32x2_t v46;
  uint32x2_t v47;
  uint32x2_t v48;
  _BOOL4 v49;
  const double *v50;
  int32x2_t v51;
  uint32x2_t v52;
  unsigned __int32 v53;
  uint32x2_t v54;
  uint32x2_t v55;
  __int128 v56;
  uint32x2_t v57;
  int32x2_t v58;
  uint32x2_t v59;
  __int128 v60;
  int v61;
  const Rect *v62;
  int32x2_t *v63;
  __int32 v64;
  int v65;
  uint64_t v66;
  float64x2_t v67;
  float64x2_t v68;
  BOOL v69;
  const CA::Bounds *v70;
  _BOOL4 v71;
  int32x2_t v72;
  int64x2_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int8x16_t v76;
  double *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int8x16_t v81;
  double v82;
  double v83;
  double *v84;
  void (__cdecl *v85)(void *, const CGPathElement *);
  uint64_t v86;
  __int32 v87;
  int32x2_t v88;
  int32x2_t v89;
  uint32x2_t v90;
  uint32x2_t v91;
  float64x2_t v92;
  int32x2_t v93;
  uint32x2_t v94;
  int8x16_t v95;
  uint64_t v96;
  size_t v97;
  __int8 *v98;
  float64_t v99;
  _QWORD *v100;
  int32x4_t v101;
  float v102;
  float v103;
  const CGAffineTransform *v104;
  const double *v105;
  _BOOL4 v106;
  float v107;
  void (__cdecl *v108)(void *, const CGPathElement *);
  uint64_t v109;
  uint64_t v110;
  double v111;
  double v112;
  unsigned int v113;
  const double *v114;
  int32x4_t v115;
  int v116;
  int64x2_t v117;
  double v118;
  int8x16_t v119;
  double v120;
  double *v121;
  uint64_t v122;
  double v123;
  double v124;
  double v125;
  int v126;
  int v127;
  double v128;
  double v129;
  float v130;
  float v131;
  float v132;
  double v133;
  float v134;
  uint64_t v135;
  uint64_t v136;
  float v137;
  void (__cdecl *v138)(void *, const CGPathElement *);
  uint64_t v139;
  uint64_t v140;
  double v141;
  double v142;
  double v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  int v148;
  double v149;
  uint64_t v150;
  int8x16_t v151;
  int32x4_t v152;
  __int128 v153;
  __int128 v154;
  float64x2_t v155;
  float64x2_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  __int128 v160;
  _QWORD v161[6];
  int8x16_t v162;
  __int128 v163;
  int32x2_t v164;
  uint64_t v165;
  __int128 v166;
  float64x2_t v167;
  float64x2_t v168;
  int8x16_t v169;
  __int128 v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  float64x2_t *v176;
  int32x4_t *v177;
  uint64_t v178;
  float v179;
  float v180;
  float v181;
  uint64_t v182;
  uint64_t v183;
  BOOL v184;
  BOOL v185;
  char v186;
  char v187;
  _DWORD v188[10];
  _BYTE v189[8036];
  float64x2_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  __int128 v194;
  __int128 v195;
  _OWORD v196[3];
  uint64_t v197;
  float64x2_t v198;
  float64x2_t v199;
  int8x16_t v200;
  int32x4_t v201;
  int32x4_t v202;
  uint64_t *v203;
  __int128 v204;
  uint64_t v205;
  _QWORD v206[10];

  v1 = MEMORY[0x1E0C80A78](a1);
  v7 = v6;
  v8 = v5;
  v9 = v4;
  v11 = v10;
  v12 = (int8x16_t **)v3;
  v13 = (const CGPath *)v2;
  v14 = v1;
  v206[7] = *MEMORY[0x1E0C80C00];
  v15 = *(_QWORD *)(v1 + 8);
  if (!v3)
  {
    v20 = (_DWORD)v4 == 1 ? v6 ^ 1 | 0x10 : v6 ^ 1;
    v21 = CA::Shape::new_shape(v2, v5, v20);
    if (v21)
    {
      v22 = v21;
      CA::OGL::emit_shape((CA::OGL *)v15, v21, v3);
      CA::Shape::unref(v22);
      return;
    }
  }
  v167 = 0u;
  v168 = 0u;
  if (v11)
  {
    v17 = v11[1];
    v167 = *v11;
    v16 = v167.f64[0];
    v168 = v17;
    v18 = v17.f64[1];
    v19 = v167.f64[1];
  }
  else
  {
    *(CGRect *)&v16 = CGPathGetBoundingBox(v13);
    v167.f64[0] = v16;
    v167.f64[1] = v19;
    v168.f64[0] = v17.f64[0];
    v168.f64[1] = v18;
    if (v17.f64[0] < 0.0)
    {
      v16 = v17.f64[0] + v16;
      v17.f64[0] = -v17.f64[0];
      v167.f64[0] = v16;
      v168.f64[0] = v17.f64[0];
    }
    if (v18 < 0.0)
    {
      v19 = v18 + v19;
      v18 = -v18;
      v167.f64[1] = v19;
      v168.f64[1] = v18;
    }
  }
  if (v12)
  {
    v23 = *((double *)v12 + 4) * 0.5;
    if (!*((_DWORD *)v12 + 11))
    {
      v24 = *((double *)v12 + 6);
      if (v24 < 1.0)
        v24 = 1.0;
      v23 = v24 * v23;
    }
    if (v17.f64[0] <= v18)
      v25 = v18;
    else
      v25 = v17.f64[0];
    if (v25 < 1.79769313e308)
    {
      v26 = vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgezq_f64((float64x2_t)(*v12)[1]), (*v12)[1], (int8x16_t)vnegq_f64((float64x2_t)(*v12)[1])), (float64x2_t)vbslq_s8((int8x16_t)vcgezq_f64(*(float64x2_t *)*v12), **v12, (int8x16_t)vnegq_f64(*(float64x2_t *)*v12)));
      if (*((_DWORD *)v12 + 10) == 2)
        v23 = v23 * 1.41421356;
      _Q4 = vmulq_n_f64(v26, v23);
      v167.f64[0] = v16 - _Q4.f64[0];
      v167.f64[1] = v19 - _Q4.f64[1];
      _D0 = -2.0;
      __asm
      {
        FMLS            D2, D0, V4.D[0]
        FMLS            D3, D0, V4.D[1]
      }
      v168.f64[0] = _D2;
      v168.f64[1] = _D3;
      if (_D2 <= 0.0 || _D3 <= 0.0)
        v168 = 0uLL;
    }
  }
  CA::Mat2Impl::mat2_apply_to_rect((uint64_t)v8, v167.f64, (double *)v3);
  v35 = vceqzq_f64(v168);
  v36 = 0uLL;
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v35, 1), (int8x16_t)v35).u64[0] & 0x8000000000000000) == 0)
  {
    v37 = vorrq_s8((int8x16_t)vcltzq_f64(v168), (int8x16_t)vcgezq_f64(v168));
    if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v37), 1), v37).u64[0] & 0x8000000000000000) == 0)
    {
      v38 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v167, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
      v36 = (int8x16_t)vuzp1q_s32(v38, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v167, v168), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v38));
    }
  }
  v39 = vextq_s8(v36, v36, 8uLL);
  v40 = vceq_s32(vrev64_s32(*(int32x2_t *)v39.i8), (int32x2_t)0x100000001);
  if ((v40.i8[4] & 1) != 0 && (v40.i8[0] & 1) != 0 && vmulq_laneq_f64(v168, v168, 1).f64[0] < 0.00392156886)
    return;
  v157 = v36;
  v158 = v39;
  v155 = v167;
  v156 = v168;
  v166 = 0uLL;
  CA::Shape::get_bounds(*(_QWORD *)(*(_QWORD *)(v15 + 232) + 8), (int *)&v166);
  v43 = *(_QWORD *)(v15 + 248);
  v44 = (int32x2_t *)(v43 ? v43 + 32 : v15 + 184);
  v45 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v166 + 8));
  if ((vpmax_u32(v45, v45).u32[0] & 0x80000000) != 0)
    return;
  v46 = v44[1];
  v47 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v46);
  if ((vpmax_u32(v47, v47).u32[0] & 0x80000000) != 0)
    return;
  *(int32x2_t *)&v42 = vmax_s32(*(int32x2_t *)&v166, *v44);
  *(int32x2_t *)v41.i8 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&v166, *(int32x2_t *)((char *)&v166 + 8)), vadd_s32(*v44, v46)), *(int32x2_t *)&v42);
  v48 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v41.i8);
  if ((vpmax_u32(v48, v48).u32[0] & 0x80000000) != 0)
    return;
  v154 = v42;
  *((_QWORD *)&v42 + 1) = v41.i64[0];
  v152 = v41;
  v153 = v42;
  v166 = v42;
  v49 = CA::OGL::Context::need_transparent_source((CA::OGL::Context *)v15);
  v51 = *(int32x2_t *)((char *)&v153 + 8);
  v52 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v153 + 8));
  v53 = vpmax_u32(v52, v52).u32[0];
  if (v49)
  {
    if ((v53 & 0x80000000) != 0
      || (v54 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v158.i8),
          (vpmax_u32(v54, v54).u32[0] & 0x80000000) != 0)
      || (v55 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&v154, *(int32x2_t *)((char *)&v153 + 8)), vadd_s32(*(int32x2_t *)v157.i8, *(int32x2_t *)v158.i8)), vmax_s32(*(int32x2_t *)&v154, *(int32x2_t *)v157.i8))), (vpmax_u32(v55, v55).u32[0] & 0x80000000) != 0))
    {
      v202 = 0uLL;
      v70 = (const CA::Bounds *)&v202;
LABEL_58:
      CA::OGL::emit_bounds_surround(v15, v70);
      return;
    }
    v158.i32[0] = v49;
    v157.i32[0] = v152.i32[1];
    *(_QWORD *)&v153 = *((_QWORD *)&v153 + 1);
    v56 = v154;
  }
  else
  {
    *((_QWORD *)&v56 + 1) = *((_QWORD *)&v154 + 1);
    if ((v53 & 0x80000000) != 0)
      return;
    v57 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v158.i8);
    if ((vpmax_u32(v57, v57).u32[0] & 0x80000000) != 0)
      return;
    *(int32x2_t *)&v56 = vmax_s32(*(int32x2_t *)&v154, *(int32x2_t *)v157.i8);
    v58 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&v154, *(int32x2_t *)((char *)&v153 + 8)), vadd_s32(*(int32x2_t *)v157.i8, *(int32x2_t *)v158.i8)), *(int32x2_t *)&v56);
    v59 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v58);
    if ((vpmax_u32(v59, v59).u32[0] & 0x80000000) != 0)
      return;
    v158.i32[0] = v49;
    *(_QWORD *)&v60 = v56;
    *((int32x2_t *)&v60 + 1) = v58;
    v166 = v60;
    *(int32x2_t *)&v153 = v58;
    v51 = v58;
    v157.i32[0] = v58.i32[1];
  }
  v154 = v56;
  if ((_DWORD)v9 == 1
    || (v61 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 184))(v15, 32),
        *(_QWORD *)&v56 = v154,
        !v61)
    || (v63 = *(int32x2_t **)(v15 + 248)) == 0
    || (v64 = v63[8].i32[1], (v64 & 0x2000) == 0)
    || (v65 = *(unsigned __int8 *)(*(_QWORD *)(v15 + 16) + 480), v65 == 12)
    || (v65 - 1) > 0x18)
  {
    v71 = 0;
    v203 = &v205;
    v204 = xmmword_18474E260;
    v202.i64[1] = 0;
    v202.i64[0] = (uint64_t)&v202.i64[1];
    *(_QWORD *)&v190.f64[0] = &v202.i64[1];
    v190.f64[1] = 0.0;
    v192 = 0;
    v191 = 0;
    v197 = 0;
    v193 = 0x3FC0000000000000;
    v194 = 0u;
    v195 = 0u;
    memset(v196, 0, sizeof(v196));
    v72 = vadd_s32(v51, *(int32x2_t *)&v56);
    v73.i64[0] = v72.i32[0];
    v73.i64[1] = v72.i32[1];
    v75.i64[1] = v72.i32[1];
    v198 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    v199 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    v74 = (int32x4_t)vcvtq_f64_s64(v73);
    v75.i64[0] = 1.0;
    _ZF = *v8 == 1.0;
    v73.i64[0] = (int)v56;
    v73.i64[1] = SDWORD1(v56);
    v76 = (int8x16_t)vcvtq_f64_s64(v73);
    v77 = v8;
    v200 = v76;
    v201 = v74;
    if (_ZF)
    {
      v78 = 1;
      do
      {
        if (v78 == 6)
        {
          v71 = 1;
          goto LABEL_67;
        }
        v79 = v78;
        *(double *)v74.i64 = v8[v78];
        *(double *)v75.i64 = CA::Mat2Impl::mat2_identity_double[v78++];
      }
      while (*(double *)v74.i64 == *(double *)v75.i64);
      v71 = (unint64_t)(v79 - 1) > 4;
      v77 = v8;
      if ((unint64_t)(v79 - 1) < 5)
        goto LABEL_68;
LABEL_67:
      v77 = 0;
    }
LABEL_68:
    if (v12)
    {
      if ((int)v153 <= v157.i32[0])
        v80 = v157.i32[0];
      else
        v80 = v153;
      v74.i32[0] = 1073741822;
      v75.i32[0] = v80;
      v81 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v75, v74), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), v76);
      v82 = 1.79769313e308;
      if (v80 <= 1073741822)
        v83 = (double)(int)v153;
      else
        v83 = 1.79769313e308;
      if (v80 <= 1073741822)
        v82 = (double)v157.i32[0];
      v169 = v81;
      *(double *)&v170 = v83;
      *((double *)&v170 + 1) = v82;
      v173 = 0u;
      v174 = 0u;
      v172 = 0u;
      CA::Mat2Impl::mat2_invert((CA::Mat2Impl *)&v172, v8, v50);
      CA::Mat2Impl::mat2_apply_to_rect((uint64_t)&v172, (double *)v169.i64, v84);
      *(int8x16_t *)v206 = v169;
      *(_OWORD *)&v206[2] = v170;
      v161[0] = v77;
      v161[1] = &v190;
      CGPathApplyStrokedDashedPath();
    }
    else
    {
      *(_QWORD *)&v172 = v77;
      *((_QWORD *)&v172 + 1) = &v190;
      if (v71)
        v85 = (void (__cdecl *)(void *, const CGPathElement *))CA::CG::PathIterator::Iterator<CA::ScanConverter::Path>::callback_1;
      else
        v85 = (void (__cdecl *)(void *, const CGPathElement *))CA::CG::PathIterator::Iterator<CA::ScanConverter::Path>::callback_0;
      CGPathApply(v13, &v172, v85);
    }
    CA::ScanConverter::Path::closepath(v190.f64);
    v86 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 184))(v15, 10);
    v87 = v158.i32[0];
    if ((_DWORD)v86
      || (v157.i32[0] + *(_DWORD *)(v14 + 1400) - 1)
       / *(_DWORD *)(v14 + 1400)
       * ((v153 + *(_DWORD *)(v14 + 1396) - 1)
        / *(_DWORD *)(v14 + 1396)) > CA::CG::Renderer::_max_mosaic_cells)
    {
      CA::OGL::Shape::fill_sc_path(v15, &v190, v9, v158.i8[0], v7, *(int32x2_t *)&v154, v51);
LABEL_85:
      x_heap_free((void ***)v202.i64[0]);
      return;
    }
    v88 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(v198)));
    v89 = vmovn_s64(vcvtq_s64_f64(vrndpq_f64(v199)));
    *(int32x2_t *)v169.i8 = v88;
    v169.u64[1] = (unint64_t)vsub_s32(v89, v88);
    v90 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v169.u64[1]);
    if ((vpmax_u32(v90, v90).u32[0] & 0x80000000) == 0)
    {
      v91 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v51);
      if ((vpmax_u32(v91, v91).u32[0] & 0x80000000) != 0
        || (v92.f64[1] = *((float64_t *)&v154 + 1),
            *(int32x2_t *)&v92.f64[0] = vmax_s32(v88, *(int32x2_t *)&v154),
            v93 = vsub_s32(vmin_s32(v89, v72), *(int32x2_t *)&v92.f64[0]),
            v94 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v93),
            (vpmax_u32(v94, v94).u32[0] & 0x80000000) != 0))
      {
        v169.i64[1] = 0;
      }
      else
      {
        v95.i64[0] = *(_QWORD *)&v92.f64[0];
        v95.u64[1] = (unint64_t)v93;
        v169 = v95;
        v96 = v93.i32[0];
        if (is_mul_ok(v93.i32[0], v93.i32[1]))
        {
          v155 = v92;
          v97 = v93.i32[0] * (uint64_t)v93.i32[1];
          LODWORD(v156.f64[0]) = v93.i32[1];
          v157.i64[0] = v97;
          if (v97 <= 0x1000)
          {
            MEMORY[0x1E0C80A78](v86);
            v98 = &v151.i8[-((v97 + 15) & 0xFFFFFFFFFFFFFFF0)];
            bzero(v98, v97);
            v99 = v155.f64[0];
LABEL_153:
            v144 = LODWORD(v99);
            v145 = HIDWORD(v99);
            bzero(v98, v157.u64[0]);
            CA::ScanConverter::render_mask((uint64_t)&v190, v9, (uint64_t)v98, v96, v144, v145, (v144 + v96), (LODWORD(v156.f64[0]) + v145), v7);
            v146 = *(_QWORD *)(v15 + 16);
            v147 = *(_QWORD *)(v146 + 16) & 0xFFFFFF00FF00FF00;
            if (*(_QWORD *)(v146 + 8) == 0x3C003C003C003C00)
              v148 = 1;
            else
              v148 = 3;
            *(_DWORD *)(v146 + 16) = v148 | v147;
            *(_DWORD *)(v146 + 20) = HIDWORD(v147);
            if ((*(_DWORD *)(v14 + 1536) & 0x80000000) != 0)
            {
              *(_DWORD *)(v14 + 1536) = 0;
              *(_WORD *)(v14 + 1540) = 0;
              *(_QWORD *)(v15 + 128) = 0;
              *(_QWORD *)(v15 + 96) = v15 + 818;
              *(_OWORD *)(v15 + 104) = xmmword_18474E060;
              *((_QWORD *)&v172 + 1) = v14;
              *(_QWORD *)&v172 = &off_1E15918A8;
              *(_QWORD *)&v173 = v15;
              *((_QWORD *)&v173 + 1) = v98;
              *(_QWORD *)&v174 = &v169;
              *((_QWORD *)&v174 + 1) = 0x3FF0000000000000;
              CA::OGL::Mosaic::draw(v14 + 1392, (uint64_t *)v15, 4, 0, 0, v96, SLODWORD(v156.f64[0]), 1, (uint64_t)&v172, 0);
              *(_QWORD *)&v172 = off_1E1592170;
              v149 = CA::CG::MosaicDelegate::draw_array((CA::CG::MosaicDelegate *)v173);
              v150 = *(_QWORD *)(v14 + 1552);
              if (v150)
              {
                (*(void (**)(uint64_t, uint64_t, _QWORD, double))(*(_QWORD *)v15 + 520))(v15, v150, 0, v149);
                *(_QWORD *)(v14 + 1552) = 0;
                *(_DWORD *)(v14 + 1544) = -1;
              }
              *(_DWORD *)(v14 + 1536) = -1;
              *(_QWORD *)(v14 + 1504) = 0;
            }
            *(_BYTE *)(*(_QWORD *)(v15 + 16) + 16) = 0;
            if (v157.i64[0] > 0x1000uLL)
              free(v98);
            goto LABEL_94;
          }
          v98 = (__int8 *)malloc_type_malloc(v93.i32[0] * (uint64_t)v93.i32[1], 0x8AE0FE90uLL);
          v99 = v155.f64[0];
          if (v98)
            goto LABEL_153;
        }
      }
    }
LABEL_94:
    if (v87)
      CA::OGL::emit_bounds_surround(v15, (const CA::Bounds *)&v169);
    goto LABEL_85;
  }
  v66 = *(_QWORD *)(*(_QWORD *)(v15 + 232) + 8);
  if ((v66 & 1) != 0)
  {
    v67 = v155;
    v68 = v156;
    if (v66 == 1)
      goto LABEL_56;
LABEL_97:
    if ((v64 & 0x800) != 0)
      v63 = (int32x2_t *)v63[1];
    v202 = 0uLL;
    CA::Bounds::set_exterior(&v202, v62, v67, v68);
    CA::BoundsImpl::intersect((int32x2_t *)&v202, v63[4], v63[5]);
    v69 = CA::Shape::contains(v66, (const CA::Bounds *)&v202);
    goto LABEL_100;
  }
  v67 = v155;
  v68 = v156;
  if (*(_DWORD *)(v66 + 4) == 12)
    goto LABEL_97;
LABEL_56:
  v69 = 0;
LABEL_100:
  v206[0] = v15;
  v206[1] = v66;
  memset(&v206[2], 0, 40);
  LOBYTE(v206[4]) = v69;
  CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v206);
  v164 = 0;
  v165 = 0;
  *(_QWORD *)&v154 = v188;
  v100 = v189;
  v157.i64[0] = (uint64_t)&v171;
  v101.i32[0] = 1073741822;
  v152 = v101;
  v151 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
  *(_QWORD *)&v153 = v189;
  while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v206, &v164))
  {
    if (v12)
    {
      v102 = *v8 * *v8 + v8[1] * v8[1];
      v103 = v8[2] * v8[2] + v8[3] * v8[3];
      v104 = (const CGAffineTransform *)*v12;
      if (*v12)
      {
        v102 = (v104->a * v104->a + v104->b * v104->b) * v102;
        v103 = (v104->c * v104->c + v104->d * v104->d) * v103;
      }
      if (v102 == v103)
        goto LABEL_106;
      if (v102 < 0.0 == v103 >= 0.0)
        goto LABEL_119;
      v113 = LODWORD(v102) - LODWORD(v103);
      if (LODWORD(v102) - LODWORD(v103) < 0)
        v113 = LODWORD(v103) - LODWORD(v102);
      if (v113 <= 3)
      {
LABEL_106:
        v105 = (const double *)v12[2];
        if (v105)
          v106 = v12[3] != 0;
        else
          v106 = 0;
        v125 = *((double *)v12 + 4) * sqrtf(v102);
        v126 = *((_DWORD *)v12 + 10);
        v127 = *((_DWORD *)v12 + 11);
        v128 = *((double *)v12 + 6);
        *(_QWORD *)&v172 = v15;
        *((_QWORD *)&v172 + 1) = v8;
        *(float *)&v173 = (float)(int)v165;
        *((float *)&v173 + 1) = (float)SHIDWORD(v165);
        *((float *)&v173 + 2) = (float)v164.i32[0];
        *((float *)&v173 + 3) = (float)v164.i32[1];
        *(float *)&v174 = (float)(v164.i32[0] + v165);
        *((float *)&v174 + 1) = (float)(v164.i32[1] + HIDWORD(v165));
        *((_QWORD *)&v174 + 1) = 0;
        v175 = 0;
        v176 = &v190;
        v177 = &v202;
        v178 = 0x10000000200;
        v129 = v125 * 0.5;
        v130 = v125 * 0.5;
        if (v126 == 2)
          v131 = v125 * 0.5;
        else
          v131 = 0.0;
        v132 = v125 * 0.707106781;
        v179 = v131;
        v180 = v132;
        if (v127)
          v133 = 1.0;
        else
          v133 = v128;
        v134 = v133 * v129;
        *(float *)&v135 = (float)v164.i32[0] - v132;
        *((float *)&v135 + 1) = (float)v164.i32[1] - v132;
        *(float *)&v136 = (float)(v164.i32[0] + v165) + v132;
        *((float *)&v136 + 1) = (float)(v164.i32[1] + HIDWORD(v165)) + v132;
        v181 = v134;
        v182 = v135;
        v183 = v136;
        v184 = v127 == 1;
        v185 = v106;
        v186 = v126;
        v187 = 0;
        v137 = v128 * v128;
        if (v127)
          v137 = 0.0;
        *(float *)v188 = v130;
        *(float *)&v188[1] = v129 + 0.5;
        *(float *)&v188[2] = v137;
        v188[3] = 0;
        *v100 = 0;
        v100[1] = 0;
        if (v106)
        {
          CA::OGL::PathStroker::render((CA::OGL::PathStroker *)&v172, v13, v104, *((double *)v12 + 1), v105, (unint64_t)v12[3]);
        }
        else
        {
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 1000))(v15, 0, 4, 1, v154);
          v138 = (void (__cdecl *)(void *, const CGPathElement *))CA::OGL::PathRenderer::cgpath_apply_transform<CA::OGL::PathStroker>;
          if (**((double **)&v172 + 1) == 1.0)
          {
            v139 = 1;
            while (v139 != 6)
            {
              v140 = v139;
              v141 = *(double *)(*((_QWORD *)&v172 + 1) + 8 * v139);
              v142 = CA::Mat2Impl::mat2_identity_double[v139++];
              if (v141 != v142)
              {
                v138 = (void (__cdecl *)(void *, const CGPathElement *))CA::OGL::PathRenderer::cgpath_apply_transform<CA::OGL::PathStroker>;
                if ((unint64_t)(v140 - 1) < 5)
                  goto LABEL_149;
                break;
              }
            }
            v138 = (void (__cdecl *)(void *, const CGPathElement *))CA::OGL::PathRenderer::cgpath_apply<CA::OGL::PathStroker>;
          }
LABEL_149:
          CGPathApply(v13, &v172, v138);
          CA::OGL::PathStroker::finish((CA::OGL::PathStroker *)&v172, v143);
        }
      }
      else
      {
LABEL_119:
        CA::OGL::PathFiller::PathFiller((uint64_t)&v169, v15, (uint64_t)v8, (int *)&v164, (uint64_t)&v202, (uint64_t)&v190, (uint64_t)&v172, v158.i32[0]);
        if ((int)v165 <= SHIDWORD(v165))
          v116 = HIDWORD(v165);
        else
          v116 = v165;
        v115.i32[0] = v116;
        v117.i64[0] = v164.i32[0];
        v117.i64[1] = v164.i32[1];
        v118 = (double)(int)v165;
        v119 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v115, v152), 0), v151, (int8x16_t)vcvtq_f64_s64(v117));
        if (v116 > 1073741822)
          v118 = 1.79769313e308;
        v162 = v119;
        if (v116 <= 1073741822)
          v120 = (double)SHIDWORD(v165);
        else
          v120 = 1.79769313e308;
        *(double *)&v163 = v118;
        *((double *)&v163 + 1) = v120;
        memset(v161, 0, sizeof(v161));
        CA::Mat2Impl::mat2_invert((CA::Mat2Impl *)v161, v8, v114);
        CA::Mat2Impl::mat2_apply_to_rect((uint64_t)v161, (double *)v162.i64, v121);
        v159 = v162;
        v160 = v163;
        *(_QWORD *)&v156.f64[0] = *v12;
        *(_QWORD *)&v155.f64[0] = v12[2];
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v169.i64[0] + 1000))(v169.i64[0], 0, 4, 1, v157.i64[0]);
        if (*(double *)v169.i64[1] == 1.0)
        {
          v122 = 1;
          do
          {
            if (v122 == 6)
              break;
            v123 = *(double *)(v169.i64[1] + 8 * v122);
            v124 = CA::Mat2Impl::mat2_identity_double[v122++];
          }
          while (v123 == v124);
        }
        CGPathApplyStrokedDashedPath();
        CA::OGL::PathFiller::finish((CA::OGL::PathFiller *)&v169);
        v100 = (_QWORD *)v153;
      }
    }
    else
    {
      v107 = CA::OGL::PathFiller::PathFiller((uint64_t)&v169, v15, (uint64_t)v8, (int *)&v164, (uint64_t)&v202, (uint64_t)&v190, (uint64_t)&v172, v158.i32[0]);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)v169.i64[0] + 1000))(v169.i64[0], 0, 4, 1, v157.i64[0], v107);
      v108 = (void (__cdecl *)(void *, const CGPathElement *))CA::OGL::PathRenderer::cgpath_apply_transform<CA::OGL::PathFiller>;
      if (*(double *)v169.i64[1] == 1.0)
      {
        v109 = 1;
        while (v109 != 6)
        {
          v110 = v109;
          v111 = *(double *)(v169.i64[1] + 8 * v109);
          v112 = CA::Mat2Impl::mat2_identity_double[v109++];
          if (v111 != v112)
          {
            v108 = (void (__cdecl *)(void *, const CGPathElement *))CA::OGL::PathRenderer::cgpath_apply_transform<CA::OGL::PathFiller>;
            if ((unint64_t)(v110 - 1) < 5)
              goto LABEL_114;
            break;
          }
        }
        v108 = (void (__cdecl *)(void *, const CGPathElement *))CA::OGL::PathRenderer::cgpath_apply<CA::OGL::PathFiller>;
      }
LABEL_114:
      CGPathApply(v13, &v169, v108);
      CA::OGL::PathFiller::finish((CA::OGL::PathFiller *)&v169);
    }
  }
  if (v158.i32[0])
  {
    v70 = (const CA::Bounds *)&v166;
    goto LABEL_58;
  }
}

uint64_t CA::CG::ClipPath::prepare(CA::CG::ClipPath *this, CA::CG::Renderer *a2, const CA::CG::DrawOp *a3, CA::CG::ClipOp *a4)
{
  int v8;
  unsigned int v9;
  CA::Shape *v10;
  CA::Shape *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  float64x2_t v18;
  double v19;
  int8x16_t v20;
  CGFloat v21;
  float64x2_t v22;
  int8x16_t v23;
  int8x16_t v24;
  float64x2_t v25;
  int8x16_t v26;
  float64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int64x2_t v32;
  float64x2_t v33;
  int64x2_t v34;
  const double *v35;
  double v36;
  uint64_t i;
  double *v38;
  CA::Shape *v39;
  int v40;
  _BOOL8 v41;
  const double *v42;
  double v43;
  double v44;
  double v45;
  double v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  uint64_t v57;
  float64x2_t v58;
  float64x2_t v59;
  int v60;
  char v61;
  float64x2_t v62;
  char v66;
  double v67;
  double v68;
  double v69;
  double v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  const double *v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  int8x16_t v84;
  int8x16_t v85;
  float64x2_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x8_t v90;
  int8x8_t v92;
  double v93;
  double v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  float64x2_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  float64x2x2_t v110;
  float64x2x2_t v111;
  float64x2x2_t v112;
  float64x2x2_t v113;
  CGRect BoundingBox;

  v109 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 17))
    v8 = 8;
  else
    v8 = 1;
  if (*((_BYTE *)this + 16))
    v9 = v8 | 0x10;
  else
    v9 = v8;
  v10 = CA::Shape::new_shape(*((_QWORD *)this + 1), (double *)a2 + 11, v9);
  if (v10)
  {
    v11 = v10;
    v12 = *((_QWORD *)a4 + 2);
    if (v12)
      v13 = CA::Shape::intersect(v12, (uint64_t)v11);
    else
      v13 = CA::Shape::intersect(v11, a4);
    v39 = (CA::Shape *)*((_QWORD *)a4 + 2);
    *((_QWORD *)a4 + 2) = v13;
    if ((v13 & 1) != 0)
    {
      if (v13 != 1)
      {
        *(_DWORD *)a4 = v13 >> 48;
        *((_DWORD *)a4 + 1) = (int)((unint64_t)v13 >> 16) >> 16;
        *((_DWORD *)a4 + 2) = v13 >> 17;
        *((_DWORD *)a4 + 3) = (v13 >> 2) & 0x7FFF;
        if (!v13)
        {
LABEL_42:
          v40 = *((_DWORD *)a4 + 2);
          if (v40 >= *((_DWORD *)a4 + 3))
            v40 = *((_DWORD *)a4 + 3);
          v41 = v40 < 1;
          if (v39)
            CA::Shape::unref(v39);
          CA::Shape::unref(v11);
          return v41;
        }
LABEL_40:
        CA::Shape::unref((CA::Shape *)v13);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_42;
      }
    }
    else if (*(_DWORD *)(v13 + 4) == 12)
    {
      *(_DWORD *)a4 = *(_DWORD *)(v13 + 28);
      *((_DWORD *)a4 + 1) = *(_DWORD *)(v13 + 20);
      *((_DWORD *)a4 + 2) = *(_DWORD *)(v13 + 32) - *(_DWORD *)(v13 + 28);
      *((_DWORD *)a4 + 3) = *(_DWORD *)(v13 + 36) - *(_DWORD *)(v13 + 20);
      goto LABEL_40;
    }
    CA::Shape::get_bounds(v13, (int *)a4);
    goto LABEL_42;
  }
  v14 = *((_DWORD *)a4 + 2);
  v15 = *((_DWORD *)a4 + 3);
  if (v14 <= v15)
    v16 = *((_DWORD *)a4 + 3);
  else
    v16 = *((_DWORD *)a4 + 2);
  v17 = *(_QWORD *)a4;
  if (v16 <= 1073741822)
    v18.f64[0] = (double)v14;
  else
    v18.f64[0] = 1.79769313e308;
  if (v16 <= 1073741822)
    v19 = (double)v15;
  else
    v19 = 1.79769313e308;
  v93 = v18.f64[0];
  v94 = v19;
  v18.f64[1] = v19;
  v95 = v18;
  BoundingBox = CGPathGetBoundingBox((CGPathRef)*((_QWORD *)this + 1));
  v20.i64[0] = *(_QWORD *)&BoundingBox.origin.x;
  v20.i64[1] = *(_QWORD *)&BoundingBox.origin.y;
  v21 = BoundingBox.size.width + BoundingBox.origin.x;
  v22.f64[0] = 0.0;
  v23.i64[0] = *(_QWORD *)&BoundingBox.size.width;
  v23.i64[1] = *(_QWORD *)&BoundingBox.size.height;
  v24 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v22, (float64x2_t)BoundingBox.size).i64[0], 0);
  v22.f64[1] = BoundingBox.size.height;
  v22.f64[0] = -BoundingBox.size.width;
  v25 = (float64x2_t)vbslq_s8(v24, (int8x16_t)v22, v23);
  v26.i64[1] = *(_QWORD *)&BoundingBox.origin.y;
  *(CGFloat *)v26.i64 = v21;
  v27 = (float64x2_t)vbslq_s8(v24, v26, v20);
  if (BoundingBox.size.height < 0.0)
  {
    v27.f64[1] = BoundingBox.size.height + BoundingBox.origin.y;
    v25.f64[1] = -BoundingBox.size.height;
  }
  v28 = vclezq_f64(v95);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v28, 1), (int8x16_t)v28).u64[0] & 0x8000000000000000) != 0)
    return 1;
  v29 = vclezq_f64(v25);
  v30 = (int32x4_t)vdupq_laneq_s64(v29, 1);
  v31 = (int32x4_t)vorrq_s8((int8x16_t)v30, (int8x16_t)v29);
  if (v31.i64[0] < 0)
    return 1;
  v31.i32[0] = 1073741822;
  v30.i32[0] = v16;
  v32.i64[0] = (int)v17;
  v32.i64[1] = SHIDWORD(v17);
  v33 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v30, v31), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v32));
  v34 = vclezq_f64(vsubq_f64(vminnmq_f64(vaddq_f64(v33, v95), vaddq_f64(v27, v25)), vmaxnmq_f64(v33, v27)));
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v34, 1), (int8x16_t)v34).u64[0] & 0x8000000000000000) != 0)
    return 1;
  v96 = v33;
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  v100 = 0u;
  if (CGPathIsRectWithTransform())
  {
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    if ((fabs(*((double *)&v100 + 1)) >= 0.000001 || fabs(*(double *)&v101) >= 0.000001)
      && (fabs(*(double *)&v100) >= 0.000001 || fabs(*((double *)&v101 + 1)) >= 0.000001)
      && (*(unsigned int (**)(const CA::CG::DrawOp *, float64x2_t *))(*(_QWORD *)a3 + 32))(a3, &v105))
    {
      v36 = *((double *)a2 + 10);
      if (v36 != 1.0)
      {
        for (i = 0; i != 8; i += 4)
        {
          v38 = &v105.f64[i];
          v110 = vld2q_f64(v38);
          v111.val[0] = vmulq_n_f64(v110.val[0], v36);
          v111.val[1] = vmulq_n_f64(v110.val[1], v36);
          vst2q_f64(v38, v111);
        }
      }
    }
    else
    {
      v105 = v96;
      *((_QWORD *)&v106 + 1) = *(_QWORD *)&v96.f64[1];
      *(double *)&v106 = v93 + v96.f64[0];
      *(double *)&v107 = v93 + v96.f64[0];
      *((double *)&v107 + 1) = v94 + v96.f64[1];
      *(float64_t *)&v108 = v96.f64[0];
      *((double *)&v108 + 1) = v94 + v96.f64[1];
    }
    v68 = *((double *)&v104 + 1);
    v67 = *(double *)&v104;
    v69 = *(double *)&v103 + fmin(*(double *)&v104, -0.0);
    if (*(double *)&v104 < 0.0)
      v67 = -*(double *)&v104;
    v70 = *((double *)&v103 + 1) + fmin(*((double *)&v104 + 1), -0.0);
    if (*((double *)&v104 + 1) < 0.0)
      v68 = -*((double *)&v104 + 1);
    v71 = *(float64x2_t *)((char *)a2 + 88);
    v72 = *(float64x2_t *)((char *)a2 + 104);
    v73 = vmlaq_n_f64(vmulq_n_f64(v71, *(double *)&v100), v72, *((double *)&v100 + 1));
    v74 = vmlaq_n_f64(vmulq_n_f64(v71, *(double *)&v101), v72, *((double *)&v101 + 1));
    v75 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)((char *)a2 + 120), v71, *(double *)&v102), v72, *((double *)&v102 + 1)), v73, v69), v74, v70);
    v97 = vmulq_n_f64(v73, v67);
    v98 = vmulq_n_f64(v74, v68);
    v99 = v75;
    CA::Mat2Impl::mat2_invert((CA::Mat2Impl *)&v97, v97.f64, v35);
    v76 = (const double *)&v105;
    v112 = vld2q_f64(v76);
    v76 += 4;
    v77 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v99.f64[0], 0);
    v113 = vld2q_f64(v76);
    v78 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v99.f64[1], 0);
    v79 = vmlaq_n_f64(vmlaq_n_f64(v77, v112.val[0], v97.f64[0]), v112.val[1], v98.f64[0]);
    v80 = vmlaq_n_f64(vmlaq_n_f64(v77, v113.val[0], v97.f64[0]), v113.val[1], v98.f64[0]);
    v81 = vmlaq_n_f64(vmlaq_n_f64(v78, v112.val[0], v97.f64[1]), v112.val[1], v98.f64[1]);
    v82 = vmlaq_n_f64(vmlaq_n_f64(v78, v113.val[0], v97.f64[1]), v113.val[1], v98.f64[1]);
    v83 = (float64x2_t)vdupq_n_s64(0xBD3C25C268497682);
    v84.i64[0] = 0x200000002;
    v84.i64[1] = 0x200000002;
    v85 = vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v79, v83), (int32x4_t)vcgtq_f64(v80, v83)), v84);
    v86 = (float64x2_t)vdupq_n_s64(0x3FF00000000001C2uLL);
    *(_QWORD *)&v112.val[0].f64[0] = 0x800000008;
    *(_QWORD *)&v112.val[0].f64[1] = 0x800000008;
    v87 = vorrq_s8(v85, vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v86, v79), (int32x4_t)vcgtq_f64(v86, v80)), (int8x16_t)v112.val[0]));
    v85.i64[0] = 0x400000004;
    v85.i64[1] = 0x400000004;
    v88 = (int8x16_t)vsubq_s32((int32x4_t)vorrq_s8(v87, vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v81, v83), (int32x4_t)vcgtq_f64(v82, v83)), v85)), vuzp1q_s32((int32x4_t)vcgtq_f64(v86, v81), (int32x4_t)vcgtq_f64(v86, v82)));
    v89 = vmvnq_s8(v88);
    v90 = vand_s8(vand_s8(*(int8x8_t *)v89.i8, (int8x8_t)0xFFFFFFFF0000000FLL), (int8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL));
    if ((v90.i32[0] & v90.i32[1]) != 0)
      return 1;
    v92 = vand_s8(*(int8x8_t *)v88.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL));
    if ((v92.i32[0] & v92.i32[1]) == 15)
      return 0;
    return 2;
  }
  if (!CGPathIsEllipseWithTransform())
    return 2;
  v105 = v96;
  *((_QWORD *)&v106 + 1) = *(_QWORD *)&v96.f64[1];
  *(double *)&v106 = v93 + v96.f64[0];
  *(double *)&v107 = v93 + v96.f64[0];
  *((double *)&v107 + 1) = v94 + v96.f64[1];
  *(float64_t *)&v108 = v96.f64[0];
  *((double *)&v108 + 1) = v94 + v96.f64[1];
  v44 = *((double *)&v104 + 1);
  v43 = *(double *)&v104;
  v45 = *(double *)&v103 + fmin(*(double *)&v104, -0.0);
  if (*(double *)&v104 < 0.0)
    v43 = -*(double *)&v104;
  v46 = *((double *)&v103 + 1) + fmin(*((double *)&v104 + 1), -0.0);
  if (*((double *)&v104 + 1) < 0.0)
    v44 = -*((double *)&v104 + 1);
  v47 = *(float64x2_t *)((char *)a2 + 88);
  v48 = *(float64x2_t *)((char *)a2 + 104);
  v49 = vmlaq_n_f64(vmulq_n_f64(v47, *(double *)&v100), v48, *((double *)&v100 + 1));
  v50 = vmlaq_n_f64(vmulq_n_f64(v47, *(double *)&v101), v48, *((double *)&v101 + 1));
  v51 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)((char *)a2 + 120), v47, *(double *)&v102), v48, *((double *)&v102 + 1)), v49, v45), v50, v46);
  v97 = vmulq_n_f64(v49, v43);
  v98 = vmulq_n_f64(v50, v44);
  __asm { FMOV            V1.2D, #0.5 }
  v99 = vmlaq_f64(v51, _Q1, vaddq_f64(v98, v97));
  CA::Mat2Impl::mat2_invert((CA::Mat2Impl *)&v97, v97.f64, v42);
  v57 = 0;
  v58 = v97;
  v59 = v98;
  LOBYTE(v60) = 15;
  v61 = 1;
  v62 = v99;
  do
  {
    _Q6 = vmlaq_n_f64(vmlaq_n_f64(v62, v58, v105.f64[v57]), v59, v105.f64[v57 + 1]);
    *(float64x2_t *)((char *)&v105 + v57 * 8) = _Q6;
    _D7 = _Q6.f64[1];
    v60 = (((8 * (_Q6.f64[0] > 0.5)) | (2 * (_Q6.f64[0] < -0.5)) | (4 * (_Q6.f64[1] < -0.5)) | (_Q6.f64[1] > 0.5)) & v60);
    __asm { FMLA            D16, D7, V6.D[1] }
    v61 &= _D16 < 0.25;
    v57 += 2;
  }
  while (v57 != 8);
  v41 = v60 != 0;
  v66 = v60 ? 1 : v61;
  if ((v66 & 1) == 0)
    return 2;
  return v41;
}

CA::Shape *CA::Shape::new_shape(unint64_t a1, double *a2, unsigned int a3)
{
  unint64_t v3;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  __int128 v10;
  const CA::Bounds *v11;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  __int128 v17;
  CA::Shape *v18[2];
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, int *, const CA::Bounds *);
  void *v25;
  __int128 *v26;
  uint64_t v27;

  v3 = a1;
  v27 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return (CA::Shape *)v3;
  v21 = 0;
  if (!CGPathIsRegion())
  {
LABEL_13:
    v19 = 0u;
    v20 = 0u;
    *(_OWORD *)v18 = 0u;
    *(_QWORD *)&v17 = a3;
    *((_QWORD *)&v17 + 1) = a2;
    v22 = MEMORY[0x1E0C809B0];
    v23 = 0x40000000;
    v24 = ___ZN2CA12_GLOBAL__N_113PathConverter7convertEPK6CGPath_block_invoke;
    v25 = &__block_descriptor_tmp_12781;
    v26 = &v17;
    CGPathApplyWithBlock2();
    if ((LODWORD(v18[1]) - 6) < 2)
    {
    }
    else if (LODWORD(v18[1]))
    {
      if (LODWORD(v18[1]) != 8)
      {
        LODWORD(v18[1]) = 8;
        if (v18[0])
        {
          CA::Shape::unref(v18[0]);
          v18[0] = 0;
        }
      }
    }
    return v18[0];
  }
  if (*a2 != 1.0)
  {
LABEL_4:
    if ((a3 & 1) != 0)
    {
LABEL_10:
      *(_OWORD *)v18 = 0u;
      v19 = 0u;
      v17 = 0u;
      if (&v17 != (__int128 *)a2)
      {
        v10 = *((_OWORD *)a2 + 1);
        v17 = *(_OWORD *)a2;
        *(_OWORD *)v18 = v10;
        v19 = *((_OWORD *)a2 + 2);
      }
      CGSTransformRegion();
      v3 = CA::Shape::new_shape();
      CGSReleaseRegion();
      return (CA::Shape *)v3;
    }
    v6 = trunc(*a2);
    if (vabdd_f64(v6, v6) < 0.000001)
    {
      v7 = 1;
      while (v7 != 6)
      {
        v8 = v7;
        v9 = trunc(a2[v7++]);
        if (vabdd_f64(v9, v9) >= 0.000001)
        {
          if ((unint64_t)(v8 - 1) < 5)
            goto LABEL_13;
          goto LABEL_10;
        }
      }
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  v13 = 1;
  while (v13 != 6)
  {
    v14 = v13;
    v15 = a2[v13];
    v16 = CA::Mat2Impl::mat2_identity_double[v13++];
    if (v15 != v16)
    {
      if ((unint64_t)(v14 - 1) < 5)
        goto LABEL_4;
      return (CA::Shape *)CA::Shape::new_shape();
    }
  }
  return (CA::Shape *)CA::Shape::new_shape();
}

BOOL CA::CG::DrawImage::shape_extent_contains(CA::CG::DrawImage *this, CA::CG::Renderer *a2, const CA::Shape *a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  int64x2_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int32x4_t v12;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = *((double *)this + 16);
  v4 = *((double *)this + 17);
  v13.f64[0] = v5;
  v13.f64[1] = v4;
  v7 = *((double *)this + 18);
  v6 = *((double *)this + 19);
  v14.f64[0] = v7;
  v14.f64[1] = v6;
  if (v7 < 0.0)
  {
    v13.f64[0] = v7 + v5;
    v14.f64[0] = -v7;
  }
  if (v6 < 0.0)
  {
    v13.f64[1] = v6 + v4;
    v14.f64[1] = -v6;
  }
  CA::Mat2Impl::mat2_apply_to_rect_interior((uint64_t)a2 + 32, v13.f64, a3);
  v8 = vceqzq_f64(v14);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v8, 1), (int8x16_t)v8).u64[0] & 0x8000000000000000) != 0
    || (v9 = vorrq_s8((int8x16_t)vcltzq_f64(v14), (int8x16_t)vcgezq_f64(v14)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v9), 1), v9).u64[0] & 0x8000000000000000) != 0))
  {
    v12 = 0uLL;
  }
  else
  {
    v10 = (int32x4_t)vcvtpq_s64_f64(vmaxnmq_f64(v13, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    v12 = vuzp1q_s32(v10, (int32x4_t)vsubq_s64(vcvtmq_s64_f64(vminnmq_f64(vaddq_f64(v13, v14), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v10));
  }
  return CA::Bounds::contains((CA::Bounds *)&v12, (uint64_t)a3);
}

BOOL CA::CG::FillRects::shape_extent_contains(CA::CG::FillRects *this, CA::CG::Renderer *a2, const CA::Shape *a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  char *v8;
  int64x2_t v9;
  int8x16_t v10;
  int32x4_t v11;
  int32x4_t v13;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 14) != 1)
    return 0;
  v5 = *((double *)this + 15);
  v4 = *((double *)this + 16);
  v14.f64[0] = v5;
  v14.f64[1] = v4;
  v7 = *((double *)this + 17);
  v6 = *((double *)this + 18);
  v15.f64[0] = v7;
  v15.f64[1] = v6;
  if (v7 < 0.0)
  {
    v14.f64[0] = v7 + v5;
    v15.f64[0] = -v7;
  }
  if (v6 < 0.0)
  {
    v14.f64[1] = v6 + v4;
    v15.f64[1] = -v6;
  }
  if ((*((_DWORD *)this + 25) & 4) != 0)
    v8 = (char *)a2 + 88;
  else
    v8 = (char *)a2 + 32;
  CA::Mat2Impl::mat2_apply_to_rect_interior((uint64_t)v8, v14.f64, a3);
  v9 = vceqzq_f64(v15);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v9, 1), (int8x16_t)v9).u64[0] & 0x8000000000000000) != 0
    || (v10 = vorrq_s8((int8x16_t)vcltzq_f64(v15), (int8x16_t)vcgezq_f64(v15)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v10), 1), v10).u64[0] & 0x8000000000000000) != 0))
  {
    v13 = 0uLL;
  }
  else
  {
    v11 = (int32x4_t)vcvtpq_s64_f64(vmaxnmq_f64(v14, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    v13 = vuzp1q_s32(v11, (int32x4_t)vsubq_s64(vcvtmq_s64_f64(vminnmq_f64(vaddq_f64(v14, v15), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v11));
  }
  return CA::Bounds::contains((CA::Bounds *)&v13, (uint64_t)a3);
}

BOOL CA::Bounds::contains(CA::Bounds *this, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  _BOOL8 result;
  char *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) != 0)
  {
    if (a2 != 1)
    {
      v16 = a2 >> 48;
      v17 = (int)((unint64_t)a2 >> 16) >> 16;
      v18 = a2 >> 17;
      v5 = (a2 >> 2) & 0x7FFF;
      goto LABEL_7;
    }
    return 0;
  }
  v2 = *(_DWORD *)(a2 + 4);
  if (v2 == 6)
    return 0;
  if (v2 == 12)
  {
    v3 = *(_DWORD *)(a2 + 20);
    v4 = *(_DWORD *)(a2 + 32);
    v16 = *(_DWORD *)(a2 + 28);
    v17 = v3;
    v18 = v4 - v16;
    v5 = *(_DWORD *)(a2 + 36) - v3;
LABEL_7:
    v19 = v5;
    return CA::BoundsImpl::contains(this, &v16);
  }
  v9 = *(_DWORD *)(a2 + 12);
  v7 = (char *)(a2 + 12);
  v8 = v9;
  if (v9 != 0x7FFFFFFF)
  {
    v10 = *(_DWORD *)this;
    v11 = *((_DWORD *)this + 1);
    v12 = *((_DWORD *)this + 2) + *(_DWORD *)this;
    v13 = *((_DWORD *)this + 3) + v11;
    result = 1;
    while (1)
    {
      v14 = *((int *)v7 + 1);
      v15 = &v7[4 * v14];
      if ((_DWORD)v14 == 2)
      {
        v8 = *(_DWORD *)v15;
      }
      else
      {
        if (v8 < v11)
          return 0;
        v8 = *(_DWORD *)v15;
        if (*(_DWORD *)v15 > v13 || *((_DWORD *)v7 + 2) < v10 || *((_DWORD *)v15 - 1) > v12)
          return 0;
      }
      v7 += 4 * v14;
      if (v8 == 0x7FFFFFFF)
        return result;
    }
  }
  return 1;
}

uint64_t CA::Mat2Impl::mat2_apply_to_rect(uint64_t this, double *a2, double *a3)
{
  float64x2_t v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  int8x16_t v11;
  float64x2_t v12;
  float64x2_t v13;
  uint64_t v14;
  double v15;
  const double *v16;
  const double *v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  const double *v22;
  float64x2_t v23;
  float64x2_t v24;
  double *v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  int64x2_t v31;
  float64x2_t v32;
  BOOL v33;
  unsigned int v34;
  int32x2_t v35;
  int64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  int8x16_t v40;
  uint64_t v41;
  float64x2x2_t v42;
  float64x2x2_t v43;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = *(float64x2_t *)(a2 + 2);
  v4 = a2[3];
  if (v3.f64[0] <= v4)
    v5 = a2[3];
  else
    v5 = a2[2];
  if (v5 < 1.79769313e308)
  {
    v6 = *(_QWORD *)(this + 8);
    v7 = *(_QWORD *)(this + 16);
    if (fabs(*(double *)&v6) >= 0.000001 || fabs(*(double *)&v7) >= 0.000001)
    {
      v14 = 0;
      v15 = a2[1];
      v37.f64[0] = *a2;
      v37.f64[1] = v15;
      v38.f64[0] = v3.f64[0] + v37.f64[0];
      v38.f64[1] = v15;
      v39.f64[0] = v3.f64[0] + v37.f64[0];
      v39.f64[1] = v4 + v15;
      v40.i64[0] = *(_QWORD *)&v37.f64[0];
      *(double *)&v40.i64[1] = v4 + v15;
      v16 = (const double *)(this + 40);
      v17 = (const double *)(this + 32);
      v18 = vld1q_dup_f64((const double *)this);
      v19 = (float64x2_t)vdupq_lane_s64(v7, 0);
      v20 = vld1q_dup_f64(v17);
      v21 = (float64x2_t)vdupq_lane_s64(v6, 0);
      v22 = (const double *)(this + 24);
      v23 = vld1q_dup_f64(v22);
      v24 = vld1q_dup_f64(v16);
      do
      {
        v25 = &v37.f64[v14];
        v42 = vld2q_f64(v25);
        v43.val[0] = vmlaq_f64(vmlaq_f64(v20, v42.val[0], v18), v42.val[1], v19);
        v43.val[1] = vmlaq_f64(vmlaq_f64(v24, v42.val[0], v21), v42.val[1], v23);
        vst2q_f64(v25, v43);
        v14 += 4;
      }
      while (v14 != 8);
      v26 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v38, v37), (int8x16_t)v37, (int8x16_t)v38);
      v27 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v37, v38), (int8x16_t)v37, (int8x16_t)v38);
      v28 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v40, v39), (int8x16_t)v39, v40);
      v29 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v39, (float64x2_t)v40), (int8x16_t)v39, v40);
      v30 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v28, v26), (int8x16_t)v26, (int8x16_t)v28);
      v31 = vcgtq_f64(v27, v29);
      v32 = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)v31, (int8x16_t)v27, (int8x16_t)v29), v30);
      v29.f64[0] = vaddvq_f64(v32);
      v33 = (*(_QWORD *)&v29.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      *(_QWORD *)&v29.f64[0] &= ~0x8000000000000000;
      v31.i64[0] = 0x7FF0000000000000;
      v13 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgtq_s64(v31, (int64x2_t)v29).i64[0], 0), (int8x16_t)v32, (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL));
      v34 = v33;
      v35 = vdup_n_s32(v34);
      v36.i64[0] = v35.u32[0];
      v36.i64[1] = v35.u32[1];
      v12 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v36, 0x3FuLL)), (int8x16_t)v30, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL));
    }
    else
    {
      v8.f64[0] = *(float64_t *)this;
      v8.f64[1] = *(float64_t *)(this + 24);
      v9 = vmlaq_f64(*(float64x2_t *)(this + 32), *(float64x2_t *)a2, v8);
      v10 = vmlaq_f64(*(float64x2_t *)(this + 32), vaddq_f64(*(float64x2_t *)a2, v3), v8);
      v11 = (int8x16_t)vcgtq_f64(v9, v10);
      v12 = (float64x2_t)vbslq_s8(v11, (int8x16_t)v10, (int8x16_t)v9);
      v13 = vsubq_f64((float64x2_t)vbslq_s8(v11, (int8x16_t)v9, (int8x16_t)v10), v12);
    }
    *(float64x2_t *)a2 = v12;
    *((float64x2_t *)a2 + 1) = v13;
  }
  return this;
}

uint64_t CA::Mat2Impl::mat2_apply_to_rect_interior(uint64_t this, double *a2, CA::Rect *a3)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  const double *v10;
  const double *v11;
  float64x2_t v12;
  const double *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  const double *v17;
  float64x2_t v18;
  float64x2_t v19;
  double *v20;
  double v21[9];
  float64x2x2_t v22;
  float64x2x2_t v23;

  v21[8] = *(double *)MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(this + 8);
  if (fabs(*(double *)&v3) < 0.000001 && fabs(*(double *)(this + 16)) < 0.000001)
    return CA::Mat2Impl::mat2_apply_to_rect(this, a2, (double *)a3);
  v4 = *(double *)this;
  if (fabs(*(double *)this) < 0.000001 && fabs(*(double *)(this + 24)) < 0.000001)
    return CA::Mat2Impl::mat2_apply_to_rect(this, a2, (double *)a3);
  v6 = a2[2];
  v5 = a2[3];
  if (v6 <= v5)
    v7 = a2[3];
  else
    v7 = a2[2];
  if (v7 < 1.79769313e308)
  {
    v8 = 0;
    v9 = a2[1];
    v21[0] = *a2;
    v21[1] = v9;
    v21[2] = v6 + v21[0];
    v21[3] = v9;
    v21[4] = v6 + v21[0];
    v21[5] = v5 + v9;
    v21[6] = v21[0];
    v21[7] = v5 + v9;
    v10 = (const double *)(this + 40);
    v11 = (const double *)(this + 16);
    v12 = vld1q_dup_f64(v11);
    v13 = (const double *)(this + 32);
    v14 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v4, 0);
    v15 = vld1q_dup_f64(v13);
    v16 = (float64x2_t)vdupq_lane_s64(v3, 0);
    v17 = (const double *)(this + 24);
    v18 = vld1q_dup_f64(v17);
    v19 = vld1q_dup_f64(v10);
    do
    {
      v20 = &v21[v8];
      v22 = vld2q_f64(v20);
      v23.val[0] = vmlaq_f64(vmlaq_f64(v15, v22.val[0], v14), v22.val[1], v12);
      v23.val[1] = vmlaq_f64(vmlaq_f64(v19, v22.val[0], v16), v22.val[1], v18);
      vst2q_f64(v20, v23);
      v8 += 4;
    }
    while (v8 != 8);
    return CA::Rect::set_corners_interior((uint64_t)a2, v21);
  }
  return this;
}

void sub_18454D41C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&_displays_mutex);
  _Unwind_Resume(a1);
}

void sub_18454DAAC(_Unwind_Exception *a1)
{
  void *v1;
  malloc_zone_t *malloc_zone;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, v1);
  _Unwind_Resume(a1);
}

uint64_t CA::OGL::filter_node(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v12;
  unsigned int v13;

  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
    *(_QWORD *)(a1 + 72) = *(_QWORD *)v12;
  else
    v12 = x_heap_malloc_small_(*(uint64_t **)(a1 + 56), 0xF8uLL);
  *(_WORD *)(v12 + 212) = *(_WORD *)(v12 + 212) & 0xC000 | 1;
  v13 = *(_DWORD *)(v12 + 220) & 0xFC000000;
  *(_DWORD *)(v12 + 216) = *(_DWORD *)(v12 + 216) & 0xFFC00000 | 0xF;
  *(_DWORD *)(v12 + 220) = v13;
  *(_QWORD *)(v12 + 48) = 0;
  *(_QWORD *)(v12 + 192) = 0;
  *(_QWORD *)(v12 + 200) = 0;
  *(_DWORD *)(v12 + 208) = 0;
  *(_QWORD *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = a6;
  *(_QWORD *)(v12 + 32) = 0;
  *(_DWORD *)(v12 + 136) = -1;
  *(_QWORD *)v12 = &off_1E1593D88;
  *(_QWORD *)(v12 + 8) = a1;
  *(_BYTE *)(v12 + 224) = *(_BYTE *)(v12 + 224) & 0xFE | a5;
  *(_QWORD *)(v12 + 232) = a3;
  CA::OGL::init_gstate(v12 + 56, a4);
  *(_DWORD *)(v12 + 220) = *(_DWORD *)(v12 + 220) & 0xFFEE0000 | 0x100040;
  return v12;
}

uint64_t CA::OGL::combine_node(uint64_t **a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, CA::OGL::ImagingNode *this, float a7, float a8, float a9, float a10)
{
  CA::OGL::ImagingNode *v10;
  int v19;
  char v20;
  __int16 v21;
  uint64_t v22;
  unsigned int v23;

  v10 = this;
  if (a3 == 6)
  {
    v19 = *((_DWORD *)this + 34);
    if (v19 < 0)
    {
      (*(void (**)(CA::OGL::ImagingNode *, char *))(*(_QWORD *)this + 40))(this, (char *)this + 128);
      v19 = *((_DWORD *)v10 + 34);
    }
    if (v19 >= *((_DWORD *)v10 + 35))
      v19 = *((_DWORD *)v10 + 35);
    if (v19 <= 0)
    {
      v21 = *((_WORD *)v10 + 106) - 1;
      *((_BYTE *)v10 + 212) = *((_WORD *)v10 + 106) - 1;
      if (!(_BYTE)v21)
        CA::OGL::ImagingNode::finalize(v10, (CA::OGL::Renderer *)a1);
      v10 = 0;
      v20 = 3;
    }
    else
    {
      v20 = 6;
    }
  }
  else
  {
    v20 = a3;
  }
  v22 = (uint64_t)a1[9];
  if (v22)
    a1[9] = *(uint64_t **)v22;
  else
    v22 = x_heap_malloc_small_(a1[7], 0xF8uLL);
  *(_WORD *)(v22 + 212) = *(_WORD *)(v22 + 212) & 0xC000 | 1;
  v23 = *(_DWORD *)(v22 + 220) & 0xFC000000;
  *(_DWORD *)(v22 + 216) = *(_DWORD *)(v22 + 216) & 0xFFC00000 | 0xF;
  *(_DWORD *)(v22 + 220) = v23;
  *(_QWORD *)(v22 + 48) = 0;
  *(_QWORD *)(v22 + 192) = 0;
  *(_QWORD *)(v22 + 200) = 0;
  *(_DWORD *)(v22 + 208) = 0;
  *(_QWORD *)(v22 + 16) = a2;
  *(_QWORD *)(v22 + 24) = a5;
  *(_QWORD *)(v22 + 32) = v10;
  *(_DWORD *)(v22 + 136) = -1;
  *(_QWORD *)v22 = &off_1E1593EA0;
  *(_QWORD *)(v22 + 8) = a1;
  *(_BYTE *)(v22 + 224) = v20;
  *(float *)(v22 + 228) = a7;
  *(float *)(v22 + 232) = a8;
  *(float *)(v22 + 236) = a9;
  *(float *)(v22 + 240) = a10;
  CA::OGL::init_gstate(v22 + 56, a4);
  *(_DWORD *)(v22 + 220) |= 0x100000u;
  return v22;
}

uint64_t CA::OGL::init_gstate(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  __int16 v4;

  *(_QWORD *)(result + 32) = 0x3C003C003C003C00;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 40) = 0;
  v2 = (*(unsigned __int8 *)(result + 69) << 8) | 1;
  *(_WORD *)(result + 68) = (*(unsigned __int8 *)(result + 69) << 8) & 0xFDFE | 1;
  *(_QWORD *)result = 0;
  if (a2)
  {
    *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
    v3 = *(_WORD *)(a2 + 68) & 0x100 | v2 & 0xFC01;
    *(_WORD *)(result + 68) = v3;
    v4 = v3 & 0xFBFF | *(_WORD *)(a2 + 68) & 0x400;
  }
  else
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 64) = 1065353216;
    v4 = v2 & 0xF801 | 0x400;
  }
  *(_WORD *)(result + 68) = v4;
  return result;
}

void CA::OGL::MaskNode::compute_dod(CA::OGL::MaskNode *this, int32x2_t *a2, double *a3)
{
  uint64_t v5;
  uint64_t v6;
  int32x2_t *v7;
  __int32 v8;
  float64x2_t *v9;
  float64x2_t v10;
  int64x2_t v11;
  unint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int32x4_t v15;
  int32x2_t v16;
  uint32x2_t v17;
  int32x2_t v18;
  uint32x2_t v19;
  int32x2_t v20;
  int32x2_t v21;
  uint32x2_t v22;
  int32x2_t *v23;
  float64x2_t v24;
  float64x2_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 2);
  *(_OWORD *)a2->i8 = xmmword_18474E240;
  if ((*(_BYTE *)(v5 + 32) & 2) != 0)
  {
    if ((*((_BYTE *)this + 224) & 1) != 0)
    {
      v6 = *((_QWORD *)this + 29);
      if (!v6)
        goto LABEL_10;
    }
    else
    {
      v6 = CA::OGL::prepare_layer(*((_QWORD *)this + 1), *(_QWORD *)(*(_QWORD *)(v5 + 16) + 128), (const CA::Render::TransitionSubclass *)v5, (uint64_t)this + 56, 0x4000000, (*((_DWORD *)this + 55) >> 22) & 1);
      *((_QWORD *)this + 29) = v6;
      *((_BYTE *)this + 224) |= 1u;
      if (!v6)
        goto LABEL_10;
    }
    if ((*(_QWORD *)(*(_QWORD *)(v5 + 24) + 40) & 0x80) == 0)
    {
      v7 = *(int32x2_t **)(v6 + 104);
      v8 = v7[17].i32[0];
      if (v8 < 0)
      {
        (*(void (**)(_QWORD, int32x2_t *))(*(_QWORD *)v7 + 40))(*(_QWORD *)(v6 + 104), v7 + 16);
        v8 = v7[17].i32[0];
      }
      *a2 = v7[16];
      a2[1].i32[0] = v8;
      a2[1].i32[1] = v7[17].i32[1];
    }
  }
LABEL_10:
  if ((*(_BYTE *)(v5 + 32) & 1) != 0)
  {
    v9 = *(float64x2_t **)(v5 + 24);
    v10 = v9[5];
    v24 = v9[4];
    v25 = v10;
    CA::Rect::apply_transform((int8x16_t *)&v24, *((const CA::Transform **)this + 10), a3);
    v11 = vceqzq_f64(v25);
    v12 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v11, 1), (int8x16_t)v11).u64[0];
    v13 = 0uLL;
    if ((v12 & 0x8000000000000000) == 0)
    {
      v14 = vorrq_s8((int8x16_t)vcltzq_f64(v25), (int8x16_t)vcgezq_f64(v25));
      if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v14), 1), v14).u64[0] & 0x8000000000000000) == 0)
      {
        v15 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v24, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        v13 = (int8x16_t)vuzp1q_s32(v15, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v24, v25), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v15));
      }
    }
    v16 = a2[1];
    v17 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v16);
    if ((vpmax_u32(v17, v17).u32[0] & 0x80000000) == 0)
    {
      v18 = (int32x2_t)vextq_s8(v13, v13, 8uLL).u64[0];
      v19 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v18);
      if ((vpmax_u32(v19, v19).u32[0] & 0x80000000) != 0
        || (v20 = vadd_s32(*(int32x2_t *)v13.i8, v18),
            *(int32x2_t *)v13.i8 = vmax_s32(*a2, *(int32x2_t *)v13.i8),
            v21 = vsub_s32(vmin_s32(vadd_s32(*a2, v16), v20), *(int32x2_t *)v13.i8),
            v22 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v21),
            (vpmax_u32(v22, v22).u32[0] & 0x80000000) != 0))
      {
        a2[1] = 0;
      }
      else
      {
        v13.u64[1] = (unint64_t)v21;
        *(int8x16_t *)a2->i8 = v13;
      }
    }
  }
  v23 = (int32x2_t *)*((_QWORD *)this + 3);
  if (v23)
  {
    if (v23[17].i32[0] < 0)
      (*(void (**)(int32x2_t *, int32x2_t *))(*(_QWORD *)v23 + 40))(v23, v23 + 16);
    CA::BoundsImpl::intersect(a2, v23[16], v23[17]);
  }
}

void *allocate_drawable_texture(void *a1, __IOSurface *a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v15;
  CA::Render *PixelFormat;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  v15 = (void *)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", a5, a3, a4, 0);
  PixelFormat = (CA::Render *)IOSurfaceGetPixelFormat(a2);
  v17 = (int)PixelFormat;
  v18 = CA::Render::fourcc_compressed_of_type(PixelFormat, 0, 0);
  if (CADeviceSupportsUniversalCompression::once[0] != -1)
    dispatch_once(CADeviceSupportsUniversalCompression::once, &__block_literal_global_27);
  if (v18 == v17 || !CADeviceSupportsUniversalCompression::universal)
  {
    if (a7 >= 4)
      abort();
    v19 = a7;
  }
  else if ((a7 & 0xFFFFFFFD) == 1)
  {
    v19 = 4;
  }
  else
  {
    v19 = 0;
  }
  objc_msgSend(v15, "setRotation:", v19);
  objc_msgSend(v15, "setIsDrawable:", 1);
  if (a8)
  {
    objc_msgSend(v15, "setFramebufferOnly:", 1);
    v20 = 4;
  }
  else
  {
    v20 = a10;
  }
  objc_msgSend(v15, "setUsage:", v20);
  if (a6)
  {
    objc_msgSend(v15, "setForceResourceIndex:", 1);
    objc_msgSend(v15, "setResourceIndex:", a6);
  }
  v21 = (void *)objc_msgSend(a1, "newTextureWithDescriptor:iosurface:plane:", v15, a2, 0);
  objc_msgSend(v21, "setLabel:", a9);
  return v21;
}

void layer_private_present_impl(_CAMetalLayerPrivate *a1, CAMetalDrawable *a2, double a3, unsigned int a4)
{
  _CAMetalDrawablePrivate *v8;
  int v9;
  double v10;
  __int16 v11;
  int v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  int v16;
  int v17;
  char v18;
  CA::Render *PixelFormat;
  int v20;
  int v21;
  int var16;
  uint64_t v23;
  BOOL v24;
  char v25;
  BOOL v26;
  char v28;
  CAMetalDrawable *v29;
  int v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  float64x2_t v38;
  float64x2_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  float64x2_t v45;
  float64x2_t v46;
  int64x2_t v47;
  int8x16_t v48;
  float64x2_t v49;
  int32x4_t v50;
  uint64_t v51;
  uint64_t var5;
  double v53;
  double var8;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t i;
  CAMetalDrawable *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  char v72;
  BOOL v73;
  int v74;
  unsigned int *v75;
  unsigned int v76;
  int v77;
  unsigned int *v78;
  unsigned int v79;
  CA::Transaction *v80;
  uint64_t v81;
  CA::Transaction *v82;
  int v83;
  float64x2_t v84;
  double v85;
  uint64_t v86;
  uint64_t lock;
  os_unfair_lock_t locka[2];
  CAMetalDrawable *v89;
  os_unfair_lock_s *v90;
  __int128 v91;
  _BYTE v92[128];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v8 = -[CAMetalDrawable priv](a2, "priv");
  v90 = (os_unfair_lock_s *)((char *)a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)a1 + 2);
  if (!*((_QWORD *)a1 + 9))
  {
    NSLog(CFSTR("Cannot present CAMetalDrawable because device is nil."));
    os_unfair_lock_unlock(v90);
    return;
  }
  if (a3 <= 0.0005)
  {
    v12 = 1073741826;
    v11 = *((_WORD *)a1 + 144);
    v10 = 0.0;
    if ((v11 & 0x20) != 0)
    {
      v13 = *((_QWORD *)a1 + 4);
      v24 = v13 == 0;
      v14 = v13 != 0;
      if (v24)
        v12 = 1073741828;
      else
        v12 = 1073741826;
      v9 = v14 & a4;
    }
    else
    {
      v9 = a4 & 1;
    }
  }
  else
  {
    v9 = 0;
    v10 = a3 + -0.0005;
    v11 = *((_WORD *)a1 + 144);
    v12 = 0x40000000;
  }
  v15 = v12 | 1;
  if ((v11 & 4) != 0)
    v16 = v12 | 1;
  else
    v16 = v12;
  if ((v16 & 1) == 0 && !CA::Render::fourcc_has_alpha((CA::Render *)v8->var3))
    v16 = v15;
  v83 = v9;
  if ((v9 & 1) != 0 || -[CAMetalDrawable needsLowLatency](a2, "needsLowLatency"))
    v16 |= 0x20u;
  if ((*((_WORD *)a1 + 144) & 0x2000) != 0)
    v17 = v16 | (a4 << 19) & 0x800000;
  else
    v17 = v16 | (a4 << 19) & 0x800000 | 0x2000000;
  v18 = *((_BYTE *)v8 + 113);
  PixelFormat = (CA::Render *)IOSurfaceGetPixelFormat(v8->var10);
  v20 = (int)PixelFormat;
  v89 = a2;
  v21 = CA::Render::fourcc_compressed_of_type(PixelFormat, 0, 0);
  var16 = v8->var16;
  switch(var16)
  {
    case 3:
      v23 = 7u;
      break;
    case 2:
      if (CADeviceSupportsUniversalCompression::once[0] != -1)
        dispatch_once(CADeviceSupportsUniversalCompression::once, &__block_literal_global_27);
      if (CADeviceSupportsUniversalCompression::universal)
        v24 = v21 == v20;
      else
        v24 = 1;
      v23 = 3;
      if (!v24)
        v23 = 0;
      break;
    case 1:
      v23 = 4u;
      break;
    default:
      v23 = 0;
      break;
  }
  v25 = image_queue_rotation_from_logical_rotation(CAMetalLayerRotation,BOOL)::invert_table[v23];
  if (CADeviceSupportsUniversalCompression::once[0] != -1)
    dispatch_once(CADeviceSupportsUniversalCompression::once, &__block_literal_global_27);
  if (CADeviceSupportsUniversalCompression::universal)
    v26 = (var16 & 0xFFFFFFFD) == 1;
  else
    v26 = 0;
  if (!v26 || v21 == v20)
    v28 = v25;
  else
    v28 = v25 | 8;
  os_unfair_lock_lock((os_unfair_lock_t)a1 + 46);
  v29 = v89;
  if ((objc_msgSend(*((id *)a1 + 24), "containsObject:", v89) & 1) == 0)
    objc_msgSend(*((id *)a1 + 24), "addObject:", v89);
  v30 = a4 & 2;
  v31 = (v30 << 30) | (((a4 >> 3) & 1) << 26) | v17 | ((v18 & 0x10) << 24);
  os_unfair_lock_unlock((os_unfair_lock_t)a1 + 46);
  if (!*((_QWORD *)a1 + 4))
  {
    v32 = objc_msgSend(+[CADisplay mainDisplay](CADisplay, "mainDisplay"), "hasNativeFrameRateRequest");
    v33 = v10 <= 0.00933333333 || v30 == 0;
    v34 = v33 ? v32 : 0;
    if (v34 == 1 && (*((_WORD *)a1 + 144) & 0x100) == 0)
      v31 |= 0x8000000u;
  }
  -[CAMetalDrawable dirtyRect](v89, "dirtyRect");
  v86 = v35;
  lock = v36;
  v84 = v38;
  v85 = v37;
  if (CGRectEqualToRect(*(CGRect *)(&v35 - 1), *MEMORY[0x1E0C9D5E0]))
  {
    v40 = (int32x4_t)xmmword_18474E240;
  }
  else
  {
    *(double *)v41.i64 = v85;
    v41.i64[1] = v86;
    v39.f64[0] = 0.0;
    v42.i64[0] = *(_QWORD *)&v84.f64[0];
    v42.i64[1] = lock;
    v43 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v39, v84).i64[0], 0);
    v44.i64[1] = lock;
    *(double *)v44.i64 = -v84.f64[0];
    v45 = (float64x2_t)vbslq_s8(v43, v44, v42);
    v44.i64[1] = v86;
    *(double *)v44.i64 = v84.f64[0] + v85;
    v46 = (float64x2_t)vbslq_s8(v43, v44, v41);
    if (*(double *)&lock < 0.0)
    {
      v46.f64[1] = *(double *)&lock + *(double *)&v86;
      v45.f64[1] = -*(double *)&lock;
    }
    v47 = vceqzq_f64(v45);
    v40 = 0uLL;
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v47, 1), (int8x16_t)v47).u64[0] & 0x8000000000000000) == 0)
    {
      v48 = vorrq_s8((int8x16_t)vcltzq_f64(v45), (int8x16_t)vcgezq_f64(v45));
      if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v48), 1), v48).u64[0] & 0x8000000000000000) == 0)
      {
        v49 = vminnmq_f64(vaddq_f64(v46, v45), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
        v50 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v46, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        v40 = vuzp1q_s32(v50, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v49), (int64x2_t)v50));
      }
    }
  }
  *(int32x4_t *)locka = v40;
  v51 = *((_QWORD *)a1 + 2);
  var5 = v8->var5;
  v53 = *((double *)a1 + 5);
  var8 = v8->var8;
  -[CAMetalDrawable preferredLatency](v89, "preferredLatency");
  v91 = *(_OWORD *)locka;
  if (CAImageQueueInsertImage_(v51, 3, var5, v31, v28, &v91, (uint64_t)release_sample, (uint64_t)v8, v10, v53, var8, v55, v56))
  {
    v57 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 48) + 24) + 36);
    -[CAMetalDrawable setInsertSeed:](v89, "setInsertSeed:", v57);
    -[CAMetalDrawable setStatus:](v89, "setStatus:", 1);
    v58 = mach_absolute_time();
    v59 = *((_QWORD *)a1 + 28);
    if (v58 <= CAHostTimeWithTime(1.0) + v59)
    {
      os_unfair_lock_lock((os_unfair_lock_t)a1 + 52);
      objc_msgSend(*((id *)a1 + 27), "addObject:", v89);
      os_unfair_lock_unlock((os_unfair_lock_t)a1 + 52);
    }
    else
    {
      v60 = mach_absolute_time();
      v61 = CATimeWithHostTime(v60);
      os_unfair_lock_lock((os_unfair_lock_t)a1 + 52);
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v62 = (void *)*((_QWORD *)a1 + 27);
      v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v93, v92, 16);
      if (v63)
      {
        v64 = *(_QWORD *)v94;
        do
        {
          for (i = 0; i != v63; ++i)
          {
            if (*(_QWORD *)v94 != v64)
              objc_enumerationMutation(v62);
            v66 = *(CAMetalDrawable **)(*((_QWORD *)&v93 + 1) + 8 * i);
            -[CAMetalDrawable setStatus:](v66, "setStatus:", 3);
            -[CAMetalDrawable didPresentAtTime:](v66, "didPresentAtTime:", 0.0);
            mark_drawable_finish(v66, a1, 0, v61);
          }
          v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v93, v92, 16);
        }
        while (v63);
      }
      v67 = (void *)objc_msgSend(*((id *)a1 + 27), "copy");
      objc_msgSend(*((id *)a1 + 27), "removeAllObjects");
      os_unfair_lock_unlock((os_unfair_lock_t)a1 + 52);
      v29 = v89;
      mark_drawable_finish(v89, a1, 0, v61);

    }
    if ((*((_WORD *)a1 + 144) & 8) != 0 && (v70 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 48)) != 0)
    {
      v71 = *(_DWORD *)(*(_QWORD *)(v70 + 24) + 32);
      v72 = *((_BYTE *)v8 + 113);
      if (v71)
        v73 = v57 >= 3;
      else
        v73 = 0;
      if (v73 && (*((_BYTE *)v8 + 113) & 8) == 0 && v8->var12 == (id)*((_QWORD *)a1 + 9))
      {
        os_unfair_lock_lock((os_unfair_lock_t)a1 + 46);
        -[CAMetalDrawable setPresentScheduledInsertSeed:](v29, "setPresentScheduledInsertSeed:", v57);
        -[CAMetalDrawable setPresentScheduledInsertSeedValid:](v29, "setPresentScheduledInsertSeedValid:", 1);
        goto LABEL_91;
      }
    }
    else
    {
      v72 = *((_BYTE *)v8 + 113);
    }
    *((_BYTE *)v8 + 113) = v72 & 0xF7;
    os_unfair_lock_lock((os_unfair_lock_t)a1 + 46);
    -[CAMetalDrawable didScheduledPresent](v29, "didScheduledPresent");
    -[CAMetalDrawable setPresentScheduledInsertSeedValid:](v29, "setPresentScheduledInsertSeedValid:", 1);
LABEL_91:
    os_unfair_lock_unlock((os_unfair_lock_t)a1 + 46);
    if ((v31 & 2) != 0)
    {
      v78 = (unsigned int *)((char *)a1 + 4);
      v74 = v83;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 & 0xFFFFFFFD, v78));
    }
    else
    {
      v74 = v83;
      if ((v31 & 4) != 0)
      {
        v75 = (unsigned int *)((char *)a1 + 4);
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 | 2, v75));
        v77 = 1;
        goto LABEL_99;
      }
    }
    v77 = 0;
LABEL_99:
    if ((*((_WORD *)a1 + 144) & 0x10) != 0)
      layer_collectable_signal(*((_QWORD *)a1 + 2), a1);
    os_unfair_lock_unlock(v90);
    if (v77)
    {
      v80 = (CA::Transaction *)+[CATransaction lock](CATransaction, "lock");
      if (v74)
        v80 = (CA::Transaction *)+[CATransaction setLowLatency:](CATransaction, "setLowLatency:", 1);
      if (*((double *)a1 + 5) != 0.0)
        v80 = (CA::Transaction *)+[CATransaction setInputTime:](CATransaction, "setInputTime:");
      v81 = *((_QWORD *)a1 + 3);
      if (v81)
      {
        v82 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
        if (!v82)
          v82 = (CA::Transaction *)CA::Transaction::create(v80);
        CA::Layer::set_commit_needed(*(CA::Layer **)(v81 + 16), v82, 0);
      }
      +[CATransaction unlock](CATransaction, "unlock");
    }
    goto LABEL_111;
  }
  *((_BYTE *)v8 + 113) &= ~8u;
  os_unfair_lock_lock((os_unfair_lock_t)a1 + 46);
  -[CAMetalDrawable didScheduledPresent](v89, "didScheduledPresent");
  -[CAMetalDrawable setPresentScheduledInsertSeedValid:](v89, "setPresentScheduledInsertSeedValid:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)a1 + 46);
  v68 = pthread_setspecific(collect_slot, a1);
  release_sample(v68, v69, (uint64_t)v8);
  pthread_setspecific(collect_slot, 0);
  os_unfair_lock_unlock(v90);
LABEL_111:
  *((_QWORD *)a1 + 5) = 0;
  -[CAMetalDrawable releasePrivateReferences:](v29, "releasePrivateReferences:", a1);
}

void sub_18454ECB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, os_unfair_lock_t lock)
{
  os_unfair_lock_s *v20;

  os_unfair_lock_unlock(v20);
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

uint64_t CA::Render::ycbcr_fourcc_depth(CA::Render *this)
{
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  unsigned __int16 v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  unsigned __int16 v9;
  unsigned __int16 v10;
  int v11;
  int v12;

  v1 = CA::Render::fourcc_compressed_of_type(this, 0, 0);
  v2 = 8;
  if (v1 > 1949458802)
  {
    if (v1 > 2016567666)
    {
      if (v1 <= 2019963439)
      {
        if (v1 <= 2016687155)
        {
          if (v1 == 2016567667 || v1 == 2016686640)
            return 10;
          v9 = 12850;
        }
        else if (v1 > 2016698679)
        {
          if (v1 == 2016698680)
            return 10;
          v9 = 24947;
        }
        else
        {
          if (v1 == 2016687156)
            return 10;
          v9 = 13424;
        }
        v11 = v9 | 0x78340000;
      }
      else
      {
        if (v1 > 2033463605)
        {
          if (v1 > 2037741157)
          {
            if (v1 == 2037741158)
              return v2;
            v4 = 2037741171;
          }
          else
          {
            if (v1 == 2033463606)
              return 16;
            v4 = 2033463856;
          }
          goto LABEL_93;
        }
        if (v1 > 2019963955)
        {
          if (v1 == 2019963956)
            return 10;
          v5 = 13424;
        }
        else
        {
          if (v1 == 2019963440)
            return 10;
          v5 = 12850;
        }
        v11 = v5 | 0x78660000;
      }
    }
    else
    {
      if (v1 <= 1953903667)
      {
        if (v1 <= 1952854577)
        {
          if (v1 == 1949458803 || v1 == 1949589875)
            return 12;
          v8 = 12848;
        }
        else
        {
          if (v1 > 1953903151)
          {
            if (v1 == 1953903152)
              return 12;
            v12 = 1953903154;
            goto LABEL_97;
          }
          if (v1 == 1952854578)
            return 12;
          v8 = 13364;
        }
        v12 = v8 | 0x74660000;
LABEL_97:
        if (v1 != v12)
          return 0;
        return 12;
      }
      if (v1 <= 1983144247)
      {
        if (v1 > 1983000885)
        {
          if (v1 == 1983000886)
            return 16;
          v4 = 1983013176;
        }
        else
        {
          if (v1 == 1953903668)
            return 12;
          v4 = 1982882104;
        }
        goto LABEL_93;
      }
      if (v1 > 2016436594)
      {
        if (v1 == 2016436595)
          return 10;
        v11 = 2016567608;
      }
      else
      {
        if (v1 == 1983144248)
          return v2;
        v11 = 2016436536;
      }
    }
    goto LABEL_89;
  }
  if (v1 > 1886676527)
  {
    if (v1 <= 1932812658)
    {
      if (v1 <= 1886680623)
      {
        if ((v1 - 1886676528) > 4 || ((1 << (v1 - 48)) & 0x15) == 0)
          return 0;
      }
      else if ((v1 - 1886680624) > 4 || ((1 << (v1 - 48)) & 0x15) == 0)
      {
        if (v1 != 1932550515)
        {
          v3 = 1932681587;
          goto LABEL_77;
        }
        return 16;
      }
      return 12;
    }
    if (v1 <= 1937125935)
    {
      if (v1 > 1936077361)
      {
        if (v1 == 1936077362)
          return 16;
        v7 = 13364;
      }
      else
      {
        if (v1 == 1932812659)
          return 16;
        v7 = 12848;
      }
      v3 = v7 | 0x73660000;
LABEL_77:
      if (v1 == v3)
        return 16;
      return 0;
    }
    if (v1 <= 1937126451)
    {
      if (v1 == 1937125936)
        return 16;
      v3 = 1937125938;
      goto LABEL_77;
    }
    if (v1 == 1937126452)
      return 16;
    v12 = 1949327731;
    goto LABEL_97;
  }
  if (v1 > 1714696751)
  {
    if (v1 <= 1882469427)
    {
      if (v1 == 1714696752)
        return v2;
      if (v1 == 1882468912)
        return 10;
      v11 = 1882468914;
    }
    else
    {
      if (v1 > 1885745713)
      {
        if (v1 == 1885745714)
          return 10;
        v10 = 13364;
      }
      else
      {
        if (v1 == 1882469428)
          return 10;
        v10 = 12848;
      }
      v11 = v10 | 0x70660000;
    }
LABEL_89:
    if (v1 != v11)
      return 0;
    return 10;
  }
  if (v1 > 875704933)
  {
    if (v1 <= 875836517)
    {
      if (v1 != 875704934)
      {
        v6 = 12918;
LABEL_56:
        v4 = v6 | 0x34320000;
        goto LABEL_93;
      }
      return v2;
    }
    if (v1 == 875836518)
      return v2;
    v4 = 875836534;
LABEL_93:
    if (v1 == v4)
      return v2;
    return 0;
  }
  if (v1 != 846624121 && v1 != 875704422)
  {
    v6 = 12406;
    goto LABEL_56;
  }
  return v2;
}

uint64_t CA::WindowServer::IOMFBDisplay::current_page_surface(CA::WindowServer::IOMFBDisplay *this, int a2, int a3, int a4, int a5, uint64_t a6)
{
  char *v11;
  pthread_mutex_t *v12;
  unsigned int v13;
  CA::Shape **v14;
  int v15;
  int v16;
  CA::WindowServer::Surface *v17;
  CA::WindowServer::Surface **v18;
  char v19;
  unsigned int v20;
  CA::Shape **v21;
  uint64_t surface;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  const CA::Bounds *v31;
  CA::Shape **v32;
  CA::Shape *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 is_hdr;
  unint64_t v40;
  uint64_t v41;
  int v43;
  const __CFString *v44;
  unsigned int v45;
  uint64_t v46;
  pthread_mutex_t *v47;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v11 = (char *)this + 25356;
  v12 = (pthread_mutex_t *)((char *)this + 25688);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25688));
  v13 = *((_DWORD *)v11 + 79);
  v14 = (CA::Shape **)*((_QWORD *)this + 6 * v13 + 3220);
  v15 = CA::WindowServer::IOMFBDisplay::use_assembly_surface(this);
  if (!v14)
  {
    surface = 0;
    goto LABEL_65;
  }
  v16 = v15;
  v46 = a6;
  v18 = v14 + 5;
  v17 = v14[5];
  if (v17)
    v19 = v16;
  else
    v19 = 1;
  if ((v19 & 1) == 0)
  {
    CA::WindowServer::Surface::unref(v17);
    *v18 = 0;
  }
  v20 = *((_DWORD *)this + 160);
  v49 = 0;
  v50 = v20 & 0x3FFF;
  v51 = (v20 >> 14) & 0x3FFF;
  v47 = v12;
  if (v16 != a2 || BYTE13(xmmword_1ECDC6A70))
  {
    if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 80))(this)
      && *((_BYTE *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6600, *((_QWORD *)this + 3383), (uint64_t *)this + 3383)+ 40))
    {
      v21 = (CA::Shape **)&v49;
    }
    else
    {
      v21 = (CA::Shape **)((char *)this + 152);
    }
  }
  else
  {
    v21 = (CA::Shape **)((char *)this + 200);
  }
  v43 = a3;
  if (a2)
  {
    v23 = 0;
    v45 = 0;
    surface = (uint64_t)*v18;
    v44 = CFSTR("CA Assembly Buffer");
  }
  else
  {
    v23 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1536))(this);
    if (v23)
      v24 = 5;
    else
      v24 = 1;
    v45 = v24;
    v18 = v14 + 4;
    surface = (uint64_t)v14[4];
    v44 = CFSTR("CA Framebuffer");
    if (v11[1028] == 2)
    {
      v25 = 875704422;
      goto LABEL_23;
    }
  }
  v25 = CA::WindowServer::IOMFBDisplay::framebuffer_pixel_format(this);
LABEL_23:
  if (a5)
    v26 = 1027423537;
  else
    v26 = v25;
  if ((CA::WindowServer::Display::has_hdr_clone(this) & a2) != 0)
    v27 = 1380411457;
  else
    v27 = v26;
  v28 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, uint64_t, _QWORD))(*(_QWORD *)this + 2280))(this, v27, *((int *)v21 + 2));
  if (a4)
    v29 = 1111970369;
  else
    v29 = v28;
  if (!surface)
  {
    if (!v43)
    {
      surface = 0;
      goto LABEL_64;
    }
LABEL_40:
    if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1832))(this))
      v30 = 16;
    else
      v30 = 2;
    surface = CA::WindowServer::Display::allocate_surface((uint64_t)this, *((unsigned int *)v21 + 2), *((unsigned int *)v21 + 3), (CA::Render *)v29, 0, v30, v45, v46, (uint64_t)v44, 0);
    if (surface)
    {
      *((_BYTE *)this + 48 * v13 + 25792) &= ~0x10u;
      if (*v18)
        CA::WindowServer::Surface::unref(*v18);
      *v18 = (CA::WindowServer::Surface *)surface;
      v33 = v14[2];
      v32 = v14 + 2;
      if (v33)
        CA::shape_union(v32, v21, v31);
      v34 = *(unsigned int *)(surface + 224);
      v35 = *(unsigned __int8 *)(surface + 228);
      *(_DWORD *)(surface + 224) = v34;
      *(_BYTE *)(surface + 228) = v35 | 2;
      if ((v45 & 1) != 0 && (a2 & 1) == 0 && (*((_WORD *)this + 328) & 0x1800) == 0 && *(_DWORD *)v11 <= 2u)
      {
        v36 = v34 | (v35 << 32);
        if ((v36 & 0x4000000) == 0)
        {
          v37 = v36 | 0x204000000;
          *(_DWORD *)(surface + 224) = v37;
          *(_BYTE *)(surface + 228) = BYTE4(v37);
          ++*(_DWORD *)v11;
        }
      }
      v11[1652] = 1;
      goto LABEL_55;
    }
LABEL_64:
    v12 = v47;
    goto LABEL_65;
  }
  if (*(_DWORD *)(surface + 56) != *((_DWORD *)v21 + 2)
    || *(_DWORD *)(surface + 60) != *((_DWORD *)v21 + 3)
    || *(_DWORD *)(surface + 64) != (_DWORD)v29
    || v23 != (HIBYTE(*(_DWORD *)(surface + 224)) & 1)
    || (*(uint64_t (**)(uint64_t))(*(_QWORD *)surface + 216))(surface) != v46)
  {
    goto LABEL_40;
  }
LABEL_55:
  if (a2 && CA::WindowServer::Display::has_hdr_clone(this))
  {
    v38 = 0;
  }
  else
  {
    is_hdr = CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::IOMFBDisplay *)((char *)this + 27064));
    v38 = 0x100000000;
    if (is_hdr)
      v38 = 0;
  }
  v40 = (*(unsigned int *)(surface + 224) | ((unint64_t)*(unsigned __int8 *)(surface + 228) << 32)) & 0xFFFFFFFEFFFFFFFFLL | v38;
  *(_DWORD *)(surface + 224) = v40;
  *(_BYTE *)(surface + 228) = BYTE4(v40);
  v12 = v47;
  if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1832))(this))
  {
    v41 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1792))(this);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)surface + 96))(surface, v41, 0);
  }
  *(_OWORD *)(surface + 40) = 0u;
  *(_OWORD *)(surface + 24) = 0u;
LABEL_65:
  pthread_mutex_unlock(v12);
  return surface;
}

uint64_t CA::WindowServer::AppleDisplay::compressed_pixel_format(CA::WindowServer::AppleDisplay *this, CA::Render *a2, unint64_t a3)
{
  unint64_t v5;
  BOOL v6;
  int v8;
  unint64_t v9;
  BOOL v10;
  _BOOL4 v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v19;

  v5 = *((_QWORD *)this + 3528);
  if (a3)
    v6 = v5 == 0;
  else
    v6 = 1;
  v8 = !v6 && v5 < a3;
  v9 = *((_QWORD *)this + 3530);
  if (v9)
    v10 = v9 >= CA::WindowServer::IOMFBDisplay::_compressed_display_count;
  else
    v10 = 1;
  if (v10)
  {
    v11 = 0;
  }
  else
  {
    if (*((_BYTE *)this + 28052))
    {
LABEL_78:
      v12 = CA::Render::fourcc_compressed_of_type(a2, 0, 0);
      goto LABEL_79;
    }
    v11 = (*((_WORD *)this + 328) & 0x1C00) == 4096;
  }
  v12 = 0;
  if (((v8 | v11) & 1) == 0 && (*((_WORD *)this + 14212) & 0x200) != 0)
  {
    if (CADeviceUseCompression::once != -1)
      dispatch_once(&CADeviceUseCompression::once, &__block_literal_global_15);
    if (!CADeviceUseCompression::enable_compression)
    {
      v12 = 0;
      goto LABEL_72;
    }
    if (CADeviceSupportsUniversalCompression::once[0] != -1)
      dispatch_once(CADeviceSupportsUniversalCompression::once, &__block_literal_global_27);
    if (CADeviceSupportsUniversalCompression::universal)
      v13 = 3;
    else
      v13 = 2;
    if (CADeviceSupportsLossyUniversalCompression::once[0] != -1)
    {
      v19 = v13;
      dispatch_once(CADeviceSupportsLossyUniversalCompression::once, &__block_literal_global_33_9776);
      v13 = v19;
    }
    if (!CADeviceSupportsLossyUniversalCompression::lossy)
    {
LABEL_67:
      v12 = CA::Render::fourcc_compressed_of_type(a2, v13, 0);
      if (v12 != (_DWORD)a2)
        goto LABEL_72;
      goto LABEL_68;
    }
    if ((int)a2 > 796161583)
    {
      if ((int)a2 <= 2084718400)
      {
        if ((int)a2 <= 796423727)
        {
          if (((_DWORD)a2 - 796161584) <= 4 && ((1 << ((_BYTE)a2 - 48)) & 0x15) != 0)
            goto LABEL_68;
          v14 = -796419632;
        }
        else
        {
          if (((_DWORD)a2 - 796423728) <= 4 && ((1 << ((_BYTE)a2 - 48)) & 0x15) != 0
            || ((_DWORD)a2 - 2084070960) <= 4 && ((1 << ((_BYTE)a2 - 48)) & 0x15) != 0)
          {
            goto LABEL_68;
          }
          v14 = -2084075056;
        }
        goto LABEL_65;
      }
      if ((int)a2 > 2088265263)
      {
        if (((_DWORD)a2 - 2088265264) <= 4 && ((1 << ((_BYTE)a2 - 48)) & 0x15) != 0)
          goto LABEL_68;
        v14 = -2088269360;
        goto LABEL_65;
      }
      if (((_DWORD)a2 - 2088003120) <= 4 && ((1 << ((_BYTE)a2 - 48)) & 0x15) != 0
        || ((_DWORD)a2 - 2088007216) <= 4 && ((1 << ((_BYTE)a2 - 48)) & 0x15) != 0)
      {
        goto LABEL_68;
      }
      v15 = 2084718401;
    }
    else if ((int)a2 <= 762865199)
    {
      if ((int)a2 <= 759318336)
      {
        if (((_DWORD)a2 - 758670896) <= 4 && ((1 << ((_BYTE)a2 - 48)) & 0x15) != 0)
          goto LABEL_68;
        v14 = -758674992;
        goto LABEL_65;
      }
      if (((_DWORD)a2 - 762603056) <= 4 && ((1 << ((_BYTE)a2 - 48)) & 0x15) != 0
        || ((_DWORD)a2 - 762607152) <= 4 && ((1 << ((_BYTE)a2 - 48)) & 0x15) != 0)
      {
        goto LABEL_68;
      }
      v15 = 759318337;
    }
    else
    {
      if ((int)a2 <= 792229423)
      {
        if (((_DWORD)a2 - 762865200) <= 4 && ((1 << ((_BYTE)a2 - 48)) & 0x15) != 0
          || ((_DWORD)a2 - 762869296) <= 4 && ((1 << ((_BYTE)a2 - 48)) & 0x15) != 0)
        {
          goto LABEL_68;
        }
        v14 = -792225328;
LABEL_65:
        v16 = (_DWORD)a2 + v14;
        if (v16 > 4 || ((1 << v16) & 0x15) == 0)
          goto LABEL_67;
LABEL_68:
        if (CADeviceSupportsUniversalCompression::once[0] != -1)
          dispatch_once(CADeviceSupportsUniversalCompression::once, &__block_literal_global_27);
        v12 = a2;
        if (!CADeviceSupportsUniversalCompression::universal)
          v12 = CA::Render::fourcc_compressed_of_type(a2, 1, 0);
        goto LABEL_72;
      }
      if (((_DWORD)a2 - 792229424) <= 4 && ((1 << ((_BYTE)a2 - 48)) & 0x15) != 0
        || ((_DWORD)a2 - 796157488) <= 4 && ((1 << ((_BYTE)a2 - 48)) & 0x15) != 0)
      {
        goto LABEL_68;
      }
      v15 = 792872769;
    }
    if ((_DWORD)a2 != v15)
      goto LABEL_67;
    goto LABEL_68;
  }
LABEL_72:
  if (BYTE1(xmmword_1ECDC6A90))
    v17 = 1;
  else
    v17 = v8;
  if (((v17 | v11) & 1) != 0
    || (*((_WORD *)this + 328) & 0x1C00) == 0x1000
    || (*(unsigned int (**)(CA::WindowServer::AppleDisplay *))(*(_QWORD *)this + 1600))(this))
  {
    goto LABEL_78;
  }
LABEL_79:
  if (v12)
    return v12;
  else
    return a2;
}

uint64_t CA::Render::fourcc_compressed_of_type(CA::Render *this, int a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned __int16 v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned __int16 v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned __int16 v32;
  unsigned __int16 v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unsigned __int16 v40;
  int v41;
  int v42;
  unsigned __int16 v43;
  int v44;
  int v45;
  unsigned __int16 v46;
  int v47;
  int v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unsigned __int16 v56;
  unsigned __int16 v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;

  switch(a2)
  {
    case 0:
      v3 = 1111970369;
      if ((int)this > 762865203)
      {
        if ((int)this <= 1534354993)
        {
          if ((int)this > 796161585)
          {
            if ((int)this > 796423731)
            {
              if ((int)this > 1530426927)
              {
                if ((int)this > 1530426931)
                {
                  if ((_DWORD)this != 1530426932)
                  {
                    v3 = (uint64_t)this;
                    if ((_DWORD)this == 1534354992)
                      return 1952854576;
                    return v3;
                  }
                  goto LABEL_661;
                }
                if ((_DWORD)this != 1530426928)
                {
                  v6 = 1530426930;
LABEL_372:
                  v3 = (uint64_t)this;
                  if ((_DWORD)this != v6)
                    return v3;
                  return 875704950;
                }
LABEL_654:
                v63 = 875704422;
                return v63 | 0x10u;
              }
              if ((int)this <= 1530422833)
              {
                if ((_DWORD)this != 796423732)
                {
                  v19 = 1530422832;
                  goto LABEL_276;
                }
LABEL_671:
                v60 = 1882468912;
                return (v60 + 516);
              }
              if ((_DWORD)this == 1530422834)
                goto LABEL_618;
              v53 = 1530422836;
LABEL_616:
              v3 = (uint64_t)this;
              if ((_DWORD)this != v53)
                return v3;
              return 875836518;
            }
            if ((int)this <= 796419633)
            {
              if ((_DWORD)this == 796161586)
                goto LABEL_541;
              if ((_DWORD)this == 796161588)
                goto LABEL_543;
              v3 = (uint64_t)this;
              if ((_DWORD)this != 796419632)
                return v3;
              return 1885745712;
            }
            if ((int)this <= 796423727)
            {
              if ((_DWORD)this == 796419634)
                return 1885745714;
              v3 = (uint64_t)this;
              if ((_DWORD)this != 796419636)
                return v3;
              goto LABEL_524;
            }
            if ((_DWORD)this != 796423728)
            {
              v54 = 796423730;
LABEL_631:
              v3 = (uint64_t)this;
              if ((_DWORD)this != v54)
                return v3;
              goto LABEL_672;
            }
          }
          else
          {
            if ((int)this > 792229423)
            {
              if ((int)this <= 796157487)
              {
                if ((int)this > 792229427)
                {
                  if ((_DWORD)this != 792229428)
                  {
                    v22 = 792872769;
                    goto LABEL_636;
                  }
                  goto LABEL_661;
                }
                if ((_DWORD)this != 792229424)
                {
                  v6 = 792229426;
                  goto LABEL_372;
                }
                goto LABEL_654;
              }
              if ((int)this <= 796157491)
              {
                if ((_DWORD)this == 796157488)
                  goto LABEL_384;
                v17 = 796157490;
                goto LABEL_357;
              }
              if ((_DWORD)this != 796157492)
              {
                v61 = 796161584;
                goto LABEL_645;
              }
              goto LABEL_648;
            }
            if ((int)this > 762869299)
            {
              if ((int)this <= 792225329)
              {
                if ((_DWORD)this != 762869300)
                {
                  v19 = 792225328;
LABEL_276:
                  v3 = (uint64_t)this;
                  if ((_DWORD)this != v19)
                    return v3;
                  return 875704422;
                }
                goto LABEL_671;
              }
              if ((_DWORD)this == 792225330)
                goto LABEL_618;
              v53 = 792225332;
              goto LABEL_616;
            }
            if ((_DWORD)this == 762865204)
              goto LABEL_524;
            if ((_DWORD)this != 762869296)
            {
              v54 = 762869298;
              goto LABEL_631;
            }
          }
          return 1882468912;
        }
        if ((int)this > 2084075057)
        {
          if ((int)this > 2088007217)
          {
            if ((int)this > 2088265267)
            {
              if ((int)this <= 2088269361)
              {
                if ((_DWORD)this != 2088265268)
                {
                  v42 = 2088269360;
LABEL_382:
                  v3 = (uint64_t)this;
                  if ((_DWORD)this != v42)
                    return v3;
                  return 1882468912;
                }
LABEL_524:
                v36 = 1885745714;
                return (v36 + 514);
              }
              if ((_DWORD)this != 2088269362)
              {
                v62 = 2088269364;
LABEL_670:
                v3 = (uint64_t)this;
                if ((_DWORD)this != v62)
                  return v3;
                goto LABEL_671;
              }
LABEL_672:
              v23 = 1882468912;
              return v23 | 2u;
            }
            if ((int)this <= 2088265263)
            {
              if ((_DWORD)this != 2088007218)
              {
                v20 = 2088007220;
                goto LABEL_377;
              }
              goto LABEL_541;
            }
            if ((_DWORD)this == 2088265264)
              return 1885745712;
            v59 = 2088265266;
            goto LABEL_665;
          }
          if ((int)this <= 2088003119)
          {
            if ((_DWORD)this == 2084075058)
              return 875704950;
            if ((_DWORD)this != 2084075060)
            {
              v22 = 2084718401;
              goto LABEL_636;
            }
            goto LABEL_661;
          }
          if ((int)this <= 2088003123)
          {
            if ((_DWORD)this == 2088003120)
              goto LABEL_384;
            v17 = 2088003122;
LABEL_357:
            v3 = (uint64_t)this;
            if ((_DWORD)this == v17)
            {
              v23 = 1886676528;
              return v23 | 2u;
            }
            return v3;
          }
          if ((_DWORD)this != 2088003124)
          {
            v61 = 2088007216;
            goto LABEL_645;
          }
LABEL_648:
          v8 = 1886676528;
          return v8 | 4u;
        }
        if ((int)this > 1534617139)
        {
          if ((int)this <= 2084070959)
          {
            if ((int)this > 1534621233)
            {
              if ((_DWORD)this == 1534621234)
              {
                v23 = 2016686640;
                return v23 | 2u;
              }
              v3 = (uint64_t)this;
              if ((_DWORD)this != 1534621236)
                return v3;
              v60 = 2016686640;
              return (v60 + 516);
            }
            if ((_DWORD)this == 1534617140)
            {
              v60 = 2019963440;
              return (v60 + 516);
            }
            v3 = (uint64_t)this;
            if ((_DWORD)this != 1534621232)
              return v3;
            v12 = 12848;
            return v12 | 0x78340000u;
          }
          if ((int)this > 2084070963)
          {
            if ((_DWORD)this == 2084070964)
              return 875836518;
            v3 = (uint64_t)this;
            if ((_DWORD)this != 2084075056)
              return v3;
            goto LABEL_654;
          }
          if ((_DWORD)this == 2084070960)
            return 875704422;
          v3 = (uint64_t)this;
          if ((_DWORD)this != 2084070962)
            return v3;
          goto LABEL_618;
        }
        if ((int)this <= 1534359089)
        {
          if ((_DWORD)this == 1534354994)
          {
            v23 = 1952854576;
            return v23 | 2u;
          }
          if ((_DWORD)this != 1534354996)
          {
            v3 = (uint64_t)this;
            if ((_DWORD)this != 1534359088)
              return v3;
            v55 = 1952854576;
            return v55 | 0x100000u;
          }
          v60 = 1952854576;
          return (v60 + 516);
        }
        if ((int)this <= 1534617135)
        {
          if ((_DWORD)this == 1534359090)
            return 1953903154;
          v3 = (uint64_t)this;
          if ((_DWORD)this != 1534359092)
            return v3;
          v36 = 1953903154;
          return (v36 + 514);
        }
        if ((_DWORD)this == 1534617136)
          return 2019963440;
        v3 = (uint64_t)this;
        if ((_DWORD)this != 1534617138)
          return v3;
        v23 = 2019963440;
        return v23 | 2u;
      }
      if ((int)this > 645280823)
      {
        if ((int)this <= 758670895)
        {
          if ((int)this <= 645411895)
          {
            if ((int)this <= 645410871)
            {
              if ((_DWORD)this == 645280824)
              {
                v41 = 1982882104;
                return v41 | 0x40000u;
              }
              if ((_DWORD)this == 645346162)
                return 1999843442;
              v3 = (uint64_t)this;
              if ((_DWORD)this == 645346401)
                return 1999908961;
              return v3;
            }
            if ((int)this > 645411383)
            {
              if ((_DWORD)this == 645411384)
              {
                v64 = 2016436536;
                return v64 | 0x20000u;
              }
              v3 = (uint64_t)this;
              if ((_DWORD)this == 645411443)
                return 2016567667;
              return v3;
            }
            if ((_DWORD)this == 645410872)
              return 2016436536;
            v3 = (uint64_t)this;
            if ((_DWORD)this != 645410931)
              return v3;
            v11 = 2016436536;
            return (v11 + 59);
          }
          if ((int)this <= 645424691)
          {
            if ((int)this <= 645424687)
            {
              if ((_DWORD)this != 645411896)
              {
                v3 = (uint64_t)this;
                if ((_DWORD)this != 645411955)
                  return v3;
                v11 = 2016698680;
                return (v11 + 59);
              }
              v12 = 24888;
              return v12 | 0x78340000u;
            }
            if ((_DWORD)this != 645424688)
            {
              v59 = 645424690;
              goto LABEL_665;
            }
            return 1885745712;
          }
          if ((int)this <= 645428785)
          {
            if ((_DWORD)this != 645424692)
            {
              v42 = 645428784;
              goto LABEL_382;
            }
            goto LABEL_524;
          }
          if ((_DWORD)this != 645428786)
          {
            v62 = 645428788;
            goto LABEL_670;
          }
          goto LABEL_672;
        }
        if ((int)this > 762603055)
        {
          if ((int)this <= 762607153)
          {
            if ((int)this > 762603059)
            {
              if ((_DWORD)this != 762603060)
              {
                v61 = 762607152;
                goto LABEL_645;
              }
              goto LABEL_648;
            }
            if ((_DWORD)this != 762603056)
            {
              v17 = 762603058;
              goto LABEL_357;
            }
LABEL_384:
            v43 = 26160;
            return v43 | 0x70740000u;
          }
          if ((int)this <= 762865199)
          {
            if ((_DWORD)this != 762607154)
            {
              v20 = 762607156;
LABEL_377:
              v3 = (uint64_t)this;
              if ((_DWORD)this != v20)
                return v3;
LABEL_543:
              v34 = 1886680626;
              return (v34 + 2);
            }
LABEL_541:
            v43 = 30258;
            return v43 | 0x70740000u;
          }
          if ((_DWORD)this == 762865200)
            return 1885745712;
          v59 = 762865202;
LABEL_665:
          v3 = (uint64_t)this;
          if ((_DWORD)this != v59)
            return v3;
          return 1885745714;
        }
        if ((int)this > 758674991)
        {
          if ((int)this > 758674995)
          {
            if ((_DWORD)this != 758674996)
            {
              v22 = 759318337;
LABEL_636:
              if ((_DWORD)this == v22)
                return v3;
              return (uint64_t)this;
            }
LABEL_661:
            v63 = 875836518;
            return v63 | 0x10u;
          }
          if ((_DWORD)this != 758674992)
          {
            v6 = 758674994;
            goto LABEL_372;
          }
          goto LABEL_654;
        }
        if ((_DWORD)this == 758670896)
          return 875704422;
        if ((_DWORD)this != 758670898)
        {
          v53 = 758670900;
          goto LABEL_616;
        }
LABEL_618:
        v52 = 875704422;
        return v52 | 0x200u;
      }
      if ((int)this > 645097011)
      {
        if ((int)this > 645162543)
        {
          if ((int)this <= 645166641)
          {
            if ((int)this <= 645162547)
            {
              if ((_DWORD)this != 645162544)
              {
                v17 = 645162546;
                goto LABEL_357;
              }
              goto LABEL_384;
            }
            if ((_DWORD)this != 645162548)
            {
              v61 = 645166640;
LABEL_645:
              v3 = (uint64_t)this;
              if ((_DWORD)this != v61)
                return v3;
              v39 = 1886676528;
              return v39 | 0x1000u;
            }
            goto LABEL_648;
          }
          if ((int)this > 645279799)
          {
            if ((_DWORD)this == 645279800)
              return 1982882104;
            v3 = (uint64_t)this;
            if ((_DWORD)this == 645280312)
            {
              v64 = 1982882104;
              return v64 | 0x20000u;
            }
            return v3;
          }
          if ((_DWORD)this != 645166642)
          {
            v20 = 645166644;
            goto LABEL_377;
          }
          goto LABEL_541;
        }
        if ((int)this > 645101107)
        {
          if ((int)this > 645149298)
          {
            if ((_DWORD)this != 645149299)
            {
              v3 = (uint64_t)this;
              if ((_DWORD)this != 645149811)
                return v3;
              v41 = 1949327731;
              return v41 | 0x40000u;
            }
            v64 = 1949327731;
            return v64 | 0x20000u;
          }
          if ((_DWORD)this != 645101108)
          {
            v3 = (uint64_t)this;
            if ((_DWORD)this == 645148787)
              return 1949327731;
            return v3;
          }
          v36 = 1937125938;
          return (v36 + 514);
        }
        if ((_DWORD)this != 645097012)
        {
          if ((_DWORD)this != 645101104)
          {
            v3 = (uint64_t)this;
            if ((_DWORD)this == 645101106)
              return 1937125938;
            return v3;
          }
          v55 = 1936077360;
          return v55 | 0x100000u;
        }
        v60 = 1936077360;
        return (v60 + 516);
      }
      if ((int)this <= 642934848)
      {
        if ((int)this > 641234479)
        {
          if ((int)this <= 641234483)
          {
            if ((_DWORD)this != 641234480)
            {
              v6 = 641234482;
              goto LABEL_372;
            }
            goto LABEL_654;
          }
          if ((_DWORD)this != 641234484)
          {
            v22 = 641877825;
            goto LABEL_636;
          }
          goto LABEL_661;
        }
        if ((_DWORD)this != 641230384)
        {
          if ((_DWORD)this != 641230386)
          {
            v53 = 641230388;
            goto LABEL_616;
          }
          goto LABEL_618;
        }
        return 875704422;
      }
      if ((int)this <= 645083762)
      {
        if ((int)this > 644624753)
        {
          if ((_DWORD)this == 644624754)
          {
            return 1815162994;
          }
          else
          {
            v3 = (uint64_t)this;
            if ((_DWORD)this == 645083251)
              return 1932550515;
          }
        }
        else if ((_DWORD)this == 642934849)
        {
          return 1380411457;
        }
        else
        {
          v3 = (uint64_t)this;
          if ((_DWORD)this == 643969848)
            return 1647534392;
        }
        return v3;
      }
      if ((int)this <= 645097007)
      {
        if ((_DWORD)this != 645083763)
        {
          v3 = (uint64_t)this;
          if ((_DWORD)this != 645084275)
            return v3;
          v41 = 1932550515;
          return v41 | 0x40000u;
        }
        v64 = 1932550515;
        return v64 | 0x20000u;
      }
      if ((_DWORD)this == 645097008)
        return 1936077360;
      v3 = (uint64_t)this;
      if ((_DWORD)this == 645097010)
      {
        v23 = 1936077360;
        return v23 | 2u;
      }
      return v3;
    case 1:
      if ((int)this <= 1534617135)
      {
        v3 = 1530426928;
        if ((int)this <= 1530426927)
        {
          if ((int)this > 875836517)
          {
            if ((int)this > 1530422831)
            {
              if ((_DWORD)this != 1530422832)
              {
                if ((_DWORD)this != 1530422834)
                {
                  if ((_DWORD)this != 1530422836)
                    return (uint64_t)this;
                  return 1530422836;
                }
                return 1530422834;
              }
              return 1530422832;
            }
            if ((_DWORD)this == 875836518)
              return 1530422836;
            if ((_DWORD)this != 875836534)
              return (uint64_t)this;
            goto LABEL_343;
          }
          if ((int)this <= 875704933)
          {
            if ((_DWORD)this != 875704422)
            {
              v22 = 875704438;
              goto LABEL_636;
            }
            return 1530422832;
          }
          if ((_DWORD)this == 875704934)
            return 1530422834;
          v24 = 875704950;
LABEL_322:
          if ((_DWORD)this == v24)
            return 1530426930;
          return (uint64_t)this;
        }
        if ((int)this > 1534354993)
        {
          if ((int)this > 1534359087)
          {
            if ((_DWORD)this != 1534359088)
            {
              if ((_DWORD)this != 1534359090)
              {
                if ((_DWORD)this != 1534359092)
                  return (uint64_t)this;
                goto LABEL_344;
              }
              goto LABEL_196;
            }
            goto LABEL_336;
          }
          if ((_DWORD)this != 1534354994)
          {
            v7 = 1534354996;
            goto LABEL_314;
          }
          goto LABEL_338;
        }
        if ((int)this <= 1530426931)
        {
          if ((_DWORD)this == 1530426928)
            return v3;
          v24 = 1530426930;
          goto LABEL_322;
        }
        if ((_DWORD)this == 1530426932)
        {
LABEL_343:
          v34 = 1530426930;
          return (v34 + 2);
        }
        if ((_DWORD)this != 1534354992)
          return (uint64_t)this;
        goto LABEL_328;
      }
      if ((int)this > 1953903151)
      {
        if ((int)this <= 2016686641)
        {
          if ((int)this <= 1953903667)
          {
            if ((_DWORD)this != 1953903152)
            {
              if ((_DWORD)this != 1953903154)
                return (uint64_t)this;
LABEL_196:
              v25 = 30258;
              return v25 | 0x5B740000u;
            }
LABEL_336:
            v39 = 1534354992;
            return v39 | 0x1000u;
          }
          if ((_DWORD)this == 1953903668)
          {
LABEL_344:
            v34 = 1534359090;
            return (v34 + 2);
          }
          v38 = 2016686640;
LABEL_332:
          if ((_DWORD)this == v38)
          {
            v39 = 1534617136;
            return v39 | 0x1000u;
          }
          return (uint64_t)this;
        }
        if ((int)this <= 2019963439)
        {
          if ((_DWORD)this != 2016686642)
          {
            v37 = 2016687156;
            goto LABEL_318;
          }
          goto LABEL_339;
        }
        if ((_DWORD)this == 2019963440)
          goto LABEL_335;
        if ((_DWORD)this == 2019963442)
        {
LABEL_189:
          v23 = 1534617136;
          return v23 | 2u;
        }
        if ((_DWORD)this != 2019963956)
          return (uint64_t)this;
      }
      else
      {
        if ((int)this > 1534621233)
        {
          if ((int)this > 1952854575)
          {
            if ((_DWORD)this != 1952854576)
            {
              if ((_DWORD)this != 1952854578)
              {
                v7 = 1952855092;
LABEL_314:
                if ((_DWORD)this != v7)
                  return (uint64_t)this;
                v8 = 1534354992;
                return v8 | 4u;
              }
LABEL_338:
              v23 = 1534354992;
              return v23 | 2u;
            }
LABEL_328:
            v25 = 26160;
            return v25 | 0x5B740000u;
          }
          if ((_DWORD)this != 1534621234)
          {
            v37 = 1534621236;
LABEL_318:
            if ((_DWORD)this != v37)
              return (uint64_t)this;
            v34 = 1534621234;
            return (v34 + 2);
          }
LABEL_339:
          v40 = 30258;
          return v40 | 0x5B780000u;
        }
        if ((int)this <= 1534617139)
        {
          if ((_DWORD)this != 1534617136)
          {
            if ((_DWORD)this != 1534617138)
              return (uint64_t)this;
            goto LABEL_189;
          }
LABEL_335:
          v40 = 26160;
          return v40 | 0x5B780000u;
        }
        if ((_DWORD)this != 1534617140)
        {
          v38 = 1534621232;
          goto LABEL_332;
        }
      }
      v8 = 1534617136;
      return v8 | 4u;
    case 2:
      return CA::Render::get_compressed_agx_universal_rgb_fourcc(this);
    case 3:
      v3 = 643969848;
      this = (CA::Render *)CA::Render::get_compressed_agx_universal_rgb_fourcc(this);
      if ((int)this > 875704421)
      {
        if ((int)this > 1932681586)
        {
          if ((int)this <= 1949589874)
          {
            if ((int)this <= 1937125935)
            {
              if ((int)this <= 1936077359)
              {
                if ((_DWORD)this != 1932681587)
                {
                  v30 = 1932812659;
                  goto LABEL_481;
                }
                goto LABEL_565;
              }
              if ((_DWORD)this != 1936077360)
              {
                if ((_DWORD)this != 1936077362)
                {
                  if ((_DWORD)this != 1936077876)
                    return (uint64_t)this;
                  goto LABEL_552;
                }
LABEL_485:
                v23 = 645097008;
                return v23 | 2u;
              }
LABEL_566:
              v33 = 26160;
              return v33 | 0x26730000u;
            }
            if ((int)this <= 1937126451)
            {
              if ((_DWORD)this != 1937125936)
              {
                v18 = 1937125938;
                goto LABEL_504;
              }
LABEL_573:
              v39 = 645097008;
              return v39 | 0x1000u;
            }
            if ((_DWORD)this != 1937126452)
            {
              if ((_DWORD)this != 1949327731)
              {
                if ((_DWORD)this != 1949458803)
                  return (uint64_t)this;
LABEL_555:
                v52 = 645148787;
                return v52 | 0x200u;
              }
LABEL_508:
              v32 = 12403;
              return v32 | 0x26740000u;
            }
LABEL_574:
            v34 = 645101106;
            return (v34 + 2);
          }
          if ((int)this <= 2016436594)
          {
            if ((int)this > 1983013175)
            {
              if ((_DWORD)this != 1983013176)
              {
                if ((_DWORD)this != 1983144248)
                {
                  if ((_DWORD)this != 2016436536)
                    return (uint64_t)this;
                  return 645410872;
                }
LABEL_553:
                v35 = 645279800;
                return v35 | 0x400u;
              }
              goto LABEL_501;
            }
            if ((_DWORD)this == 1949589875)
              goto LABEL_569;
            if ((_DWORD)this != 1982882104)
              return (uint64_t)this;
            return 645279800;
          }
          if ((int)this > 2016567666)
          {
            if ((_DWORD)this != 2016567667)
            {
              if ((_DWORD)this != 2016698680)
              {
                if ((_DWORD)this != 2016698739)
                  return (uint64_t)this;
                goto LABEL_267;
              }
              return 645411896;
            }
LABEL_491:
            v52 = 645410931;
            return v52 | 0x200u;
          }
          if ((_DWORD)this == 2016436595)
          {
LABEL_578:
            v57 = 12403;
            return v57 | 0x26780000u;
          }
          if ((_DWORD)this != 2016567608)
            return (uint64_t)this;
          return 645411384;
        }
        if ((int)this <= 1885745711)
        {
          if ((int)this <= 875836533)
          {
            if ((int)this > 875704933)
            {
              if ((_DWORD)this != 875704934)
              {
                if ((_DWORD)this == 875704950)
                {
LABEL_551:
                  v56 = 30258;
                  return v56 | 0x26380000u;
                }
                if ((_DWORD)this != 875836518)
                  return (uint64_t)this;
                goto LABEL_60;
              }
LABEL_472:
              v23 = 641230384;
              return v23 | 2u;
            }
            if ((_DWORD)this != 875704422)
            {
              if ((_DWORD)this != 875704438)
                return (uint64_t)this;
              goto LABEL_475;
            }
LABEL_562:
            v56 = 26160;
            return v56 | 0x26380000u;
          }
          if ((int)this <= 1882468911)
          {
            if ((_DWORD)this != 875836534)
            {
              v22 = 1647534392;
              goto LABEL_636;
            }
            goto LABEL_571;
          }
          if ((_DWORD)this != 1882468912)
          {
            if ((_DWORD)this != 1882468914)
            {
              v31 = 1882469428;
LABEL_261:
              if ((_DWORD)this != v31)
                return (uint64_t)this;
              v34 = 645428786;
              return (v34 + 2);
            }
LABEL_560:
            v57 = 30258;
            return v57 | 0x26780000u;
          }
LABEL_559:
          v39 = 645424688;
          return v39 | 0x1000u;
        }
        if ((int)this > 1886676531)
        {
          if ((int)this > 1886680625)
          {
            if ((_DWORD)this != 1886680626)
            {
              if ((_DWORD)this != 1886680628)
              {
                if ((_DWORD)this != 1932550515)
                  return (uint64_t)this;
LABEL_256:
                v33 = 12403;
                return v33 | 0x26730000u;
              }
LABEL_558:
              v34 = 645166642;
              return (v34 + 2);
            }
LABEL_556:
            v32 = 30258;
            return v32 | 0x26740000u;
          }
          if ((_DWORD)this != 1886676532)
          {
            if ((_DWORD)this != 1886680624)
              return (uint64_t)this;
            goto LABEL_511;
          }
LABEL_576:
          v8 = 645162544;
          return v8 | 4u;
        }
        if ((int)this > 1885746227)
        {
          if ((_DWORD)this != 1885746228)
          {
            if ((_DWORD)this == 1886676528)
            {
LABEL_251:
              v32 = 26160;
              return v32 | 0x26740000u;
            }
            if ((_DWORD)this != 1886676530)
              return (uint64_t)this;
            goto LABEL_564;
          }
LABEL_514:
          v8 = 645424688;
          return v8 | 4u;
        }
        if ((_DWORD)this == 1885745712)
        {
LABEL_568:
          v57 = 26160;
          return v57 | 0x26780000u;
        }
        if ((_DWORD)this != 1885745714)
          return (uint64_t)this;
      }
      else
      {
        if ((int)this <= 645162545)
        {
          if ((int)this <= 645097007)
          {
            if ((int)this <= 641234483)
            {
              if ((int)this > 641230387)
              {
                if ((_DWORD)this != 641230388)
                {
                  if ((_DWORD)this != 641234480)
                  {
                    if ((_DWORD)this != 641234482)
                      return (uint64_t)this;
                    goto LABEL_551;
                  }
LABEL_475:
                  v39 = 641230384;
                  return v39 | 0x1000u;
                }
LABEL_60:
                v8 = 641230384;
                return v8 | 4u;
              }
              if ((_DWORD)this != 641230384)
              {
                if ((_DWORD)this != 641230386)
                  return (uint64_t)this;
                goto LABEL_472;
              }
              goto LABEL_562;
            }
            if ((int)this > 645083250)
            {
              if ((_DWORD)this != 645083251)
              {
                if ((_DWORD)this != 645083763)
                {
                  v30 = 645084275;
LABEL_481:
                  if ((_DWORD)this != v30)
                    return (uint64_t)this;
                  v35 = 645083251;
                  return v35 | 0x400u;
                }
LABEL_565:
                v52 = 645083251;
                return v52 | 0x200u;
              }
              goto LABEL_256;
            }
            if ((_DWORD)this != 641234484)
            {
              v22 = 643969848;
              goto LABEL_636;
            }
LABEL_571:
            v34 = 641234482;
            return (v34 + 2);
          }
          if ((int)this <= 645101107)
          {
            if ((int)this > 645097011)
            {
              if ((_DWORD)this != 645097012)
              {
                if ((_DWORD)this != 645101104)
                {
                  v18 = 645101106;
LABEL_504:
                  if ((_DWORD)this != v18)
                    return (uint64_t)this;
                  v33 = 30258;
                  return v33 | 0x26730000u;
                }
                goto LABEL_573;
              }
LABEL_552:
              v8 = 645097008;
              return v8 | 4u;
            }
            if ((_DWORD)this != 645097008)
            {
              if ((_DWORD)this != 645097010)
                return (uint64_t)this;
              goto LABEL_485;
            }
            goto LABEL_566;
          }
          if ((int)this > 645149298)
          {
            if ((_DWORD)this != 645149299)
            {
              if ((_DWORD)this != 645149811)
              {
                if ((_DWORD)this != 645162544)
                  return (uint64_t)this;
                goto LABEL_251;
              }
LABEL_569:
              v35 = 645148787;
              return v35 | 0x400u;
            }
            goto LABEL_555;
          }
          if ((_DWORD)this != 645101108)
          {
            if ((_DWORD)this != 645148787)
              return (uint64_t)this;
            goto LABEL_508;
          }
          goto LABEL_574;
        }
        if ((int)this <= 645411383)
        {
          if ((int)this <= 645279799)
          {
            if ((int)this > 645166639)
            {
              if ((_DWORD)this != 645166640)
              {
                if ((_DWORD)this != 645166642)
                {
                  if ((_DWORD)this != 645166644)
                    return (uint64_t)this;
                  goto LABEL_558;
                }
                goto LABEL_556;
              }
LABEL_511:
              v39 = 645162544;
              return v39 | 0x1000u;
            }
            if ((_DWORD)this != 645162546)
            {
              if ((_DWORD)this != 645162548)
                return (uint64_t)this;
              goto LABEL_576;
            }
LABEL_564:
            v23 = 645162544;
            return v23 | 2u;
          }
          if ((int)this > 645280823)
          {
            if ((_DWORD)this != 645280824)
            {
              if ((_DWORD)this != 645410872)
              {
                if ((_DWORD)this != 645410931)
                  return (uint64_t)this;
                goto LABEL_578;
              }
              return 645410872;
            }
            goto LABEL_553;
          }
          if ((_DWORD)this != 645279800)
          {
            if ((_DWORD)this != 645280312)
              return (uint64_t)this;
LABEL_501:
            v52 = 645279800;
            return v52 | 0x200u;
          }
          return 645279800;
        }
        if ((int)this <= 645424689)
        {
          if ((int)this > 645411895)
          {
            if ((_DWORD)this != 645411896)
            {
              if ((_DWORD)this != 645411955)
              {
                if ((_DWORD)this != 645424688)
                  return (uint64_t)this;
                goto LABEL_568;
              }
LABEL_267:
              v35 = 645410931;
              return v35 | 0x400u;
            }
            return 645411896;
          }
          if ((_DWORD)this != 645411384)
          {
            if ((_DWORD)this != 645411443)
              return (uint64_t)this;
            goto LABEL_491;
          }
          return 645411384;
        }
        if ((int)this > 645428783)
        {
          if ((_DWORD)this != 645428784)
          {
            if ((_DWORD)this != 645428786)
            {
              v31 = 645428788;
              goto LABEL_261;
            }
            goto LABEL_560;
          }
          goto LABEL_559;
        }
        if ((_DWORD)this != 645424690)
        {
          if ((_DWORD)this != 645424692)
            return (uint64_t)this;
          goto LABEL_514;
        }
      }
      v23 = 645424688;
      return v23 | 2u;
    case 4:
      v5 = 759318337;
      if ((int)this > 796157491)
      {
        if ((int)this <= 1886676529)
        {
          if ((int)this <= 875704933)
          {
            if ((int)this <= 796419635)
            {
              if ((int)this <= 796161587)
              {
                if ((_DWORD)this != 796157492)
                {
                  if ((_DWORD)this != 796161584)
                  {
                    v3 = (uint64_t)this;
                    if ((_DWORD)this != 796161586)
                      return v3;
                    goto LABEL_417;
                  }
                  goto LABEL_422;
                }
                goto LABEL_423;
              }
              if ((_DWORD)this != 796161588)
              {
                if ((_DWORD)this != 796419632)
                {
                  v3 = (uint64_t)this;
                  if ((_DWORD)this != 796419634)
                    return v3;
                  goto LABEL_451;
                }
                goto LABEL_432;
              }
              goto LABEL_416;
            }
            if ((int)this <= 796423731)
            {
              if ((_DWORD)this != 796419636)
              {
                if ((_DWORD)this != 796423728)
                {
                  v3 = (uint64_t)this;
                  if ((_DWORD)this != 796423730)
                    return v3;
                  goto LABEL_468;
                }
LABEL_466:
                v47 = 762865200;
                goto LABEL_467;
              }
LABEL_452:
              v48 = 762865200;
              goto LABEL_453;
            }
            if ((_DWORD)this != 796423732)
            {
              if ((_DWORD)this != 875704422)
              {
                v27 = 875704438;
                goto LABEL_443;
              }
              goto LABEL_584;
            }
LABEL_464:
            v45 = 762869298;
            goto LABEL_465;
          }
          if ((int)this <= 1882468913)
          {
            if ((int)this <= 875836533)
            {
              if ((_DWORD)this != 875704934)
              {
                if ((_DWORD)this != 875704950)
                {
                  v14 = 875836518;
                  goto LABEL_410;
                }
LABEL_438:
                v50 = 30258;
LABEL_585:
                v5 = v50 | 0x2D380000u;
                goto LABEL_586;
              }
LABEL_582:
              v51 = 758670896;
              goto LABEL_583;
            }
            if ((_DWORD)this != 875836534)
            {
              if ((_DWORD)this == 1111970369)
                goto LABEL_586;
              v44 = 1882468912;
              goto LABEL_405;
            }
LABEL_439:
            v45 = 758674994;
            goto LABEL_465;
          }
          if ((int)this <= 1885745713)
          {
            if ((_DWORD)this != 1882468914)
            {
              if ((_DWORD)this == 1882469428)
                goto LABEL_464;
              v13 = 1885745712;
              goto LABEL_218;
            }
LABEL_468:
            v49 = 30258;
            goto LABEL_469;
          }
          if ((_DWORD)this != 1885745714)
          {
            if ((_DWORD)this == 1885746228)
              goto LABEL_452;
            v21 = 1886676528;
LABEL_449:
            v3 = (uint64_t)this;
            if ((_DWORD)this != v21)
              return v3;
            goto LABEL_458;
          }
LABEL_451:
          v51 = 762865200;
LABEL_583:
          v5 = v51 | 2u;
          goto LABEL_586;
        }
        if ((int)this <= 2088003119)
        {
          if ((int)this <= 2084070961)
          {
            if ((int)this <= 1886680625)
            {
              if ((_DWORD)this != 1886676530)
              {
                if ((_DWORD)this != 1886676532)
                {
                  v10 = 1886680624;
                  goto LABEL_421;
                }
                goto LABEL_423;
              }
              goto LABEL_457;
            }
            if ((_DWORD)this != 1886680626)
            {
              if ((_DWORD)this != 1886680628)
              {
                v28 = 2084070960;
LABEL_397:
                v3 = (uint64_t)this;
                if ((_DWORD)this != v28)
                  return v3;
                goto LABEL_584;
              }
LABEL_416:
              v45 = 762607154;
LABEL_465:
              v5 = (v45 + 2);
              goto LABEL_586;
            }
            goto LABEL_417;
          }
          if ((int)this <= 2084075057)
          {
            if ((_DWORD)this == 2084070962)
              goto LABEL_582;
            if ((_DWORD)this != 2084070964)
            {
              v27 = 2084075056;
              goto LABEL_443;
            }
            goto LABEL_445;
          }
          if ((_DWORD)this == 2084075058)
            goto LABEL_438;
          if ((_DWORD)this == 2084075060)
            goto LABEL_439;
          v9 = 2084718401;
LABEL_436:
          v3 = (uint64_t)this;
          if ((_DWORD)this != v9)
            return v3;
          goto LABEL_586;
        }
        if ((int)this <= 2088265263)
        {
          if ((int)this <= 2088007215)
          {
            if ((_DWORD)this != 2088003120)
            {
              if ((_DWORD)this == 2088003122)
                goto LABEL_457;
              v16 = 2088003124;
LABEL_392:
              v3 = (uint64_t)this;
              if ((_DWORD)this != v16)
                return v3;
              goto LABEL_423;
            }
            goto LABEL_458;
          }
          if ((_DWORD)this != 2088007216)
          {
            if ((_DWORD)this == 2088007218)
              goto LABEL_417;
            v26 = 2088007220;
            goto LABEL_415;
          }
          goto LABEL_422;
        }
        if ((int)this <= 2088269359)
        {
          if ((_DWORD)this != 2088265264)
          {
            if ((_DWORD)this == 2088265266)
              goto LABEL_451;
            v29 = 2088265268;
LABEL_430:
            v3 = (uint64_t)this;
            if ((_DWORD)this != v29)
              return v3;
            goto LABEL_452;
          }
          goto LABEL_432;
        }
        if ((_DWORD)this == 2088269360)
          goto LABEL_466;
        if ((_DWORD)this == 2088269362)
          goto LABEL_468;
        v15 = 2088269364;
LABEL_463:
        v3 = (uint64_t)this;
        if ((_DWORD)this != v15)
          return v3;
        goto LABEL_464;
      }
      if ((int)this <= 758674993)
      {
        if ((int)this > 645166641)
        {
          if ((int)this <= 645428785)
          {
            if ((int)this > 645424689)
            {
              if ((_DWORD)this != 645424690)
              {
                if ((_DWORD)this == 645424692)
                  goto LABEL_452;
                v44 = 645428784;
LABEL_405:
                v3 = (uint64_t)this;
                if ((_DWORD)this != v44)
                  return v3;
                goto LABEL_466;
              }
              goto LABEL_451;
            }
            if ((_DWORD)this != 645166642)
            {
              if ((_DWORD)this != 645166644)
              {
                v13 = 645424688;
LABEL_218:
                v3 = (uint64_t)this;
                if ((_DWORD)this != v13)
                  return v3;
                goto LABEL_432;
              }
              goto LABEL_416;
            }
LABEL_417:
            v46 = 30258;
LABEL_459:
            v5 = v46 | 0x2D740000u;
            goto LABEL_586;
          }
          if ((int)this <= 758670897)
          {
            if ((_DWORD)this == 645428786)
              goto LABEL_468;
            if ((_DWORD)this == 645428788)
              goto LABEL_464;
            v28 = 758670896;
            goto LABEL_397;
          }
          if ((_DWORD)this == 758670898)
            goto LABEL_582;
          if ((_DWORD)this != 758670900)
          {
            v27 = 758674992;
LABEL_443:
            v3 = (uint64_t)this;
            if ((_DWORD)this != v27)
              return v3;
            goto LABEL_444;
          }
LABEL_445:
          v48 = 758670896;
          goto LABEL_453;
        }
        if ((int)this > 641234483)
        {
          if ((int)this <= 645162545)
          {
            if ((_DWORD)this == 641234484)
              goto LABEL_439;
            if ((_DWORD)this == 641877825)
              goto LABEL_586;
            v21 = 645162544;
            goto LABEL_449;
          }
          if ((_DWORD)this != 645162546)
          {
            if ((_DWORD)this != 645162548)
            {
              v10 = 645166640;
LABEL_421:
              v3 = (uint64_t)this;
              if ((_DWORD)this != v10)
                return v3;
              goto LABEL_422;
            }
LABEL_423:
            v48 = 762603056;
LABEL_453:
            v5 = v48 | 4u;
            goto LABEL_586;
          }
LABEL_457:
          v51 = 762603056;
          goto LABEL_583;
        }
        if ((int)this <= 641230387)
        {
          if ((_DWORD)this != 641230384)
          {
            v3 = (uint64_t)this;
            if ((_DWORD)this != 641230386)
              return v3;
            goto LABEL_582;
          }
          goto LABEL_584;
        }
        if ((_DWORD)this == 641230388)
          goto LABEL_445;
        if ((_DWORD)this != 641234480)
        {
          v3 = (uint64_t)this;
          if ((_DWORD)this != 641234482)
            return v3;
          goto LABEL_438;
        }
      }
      else
      {
        if ((int)this <= 762869295)
        {
          if ((int)this <= 762607151)
          {
            if ((int)this <= 762603055)
            {
              if ((_DWORD)this == 758674994)
                goto LABEL_438;
              if ((_DWORD)this == 758674996)
                goto LABEL_439;
              v9 = 759318337;
              goto LABEL_436;
            }
            if ((_DWORD)this != 762603056)
            {
              if ((_DWORD)this == 762603058)
                goto LABEL_457;
              v16 = 762603060;
              goto LABEL_392;
            }
LABEL_458:
            v46 = 26160;
            goto LABEL_459;
          }
          if ((int)this <= 762865199)
          {
            if ((_DWORD)this != 762607152)
            {
              if ((_DWORD)this == 762607154)
                goto LABEL_417;
              v26 = 762607156;
LABEL_415:
              v3 = (uint64_t)this;
              if ((_DWORD)this != v26)
                return v3;
              goto LABEL_416;
            }
LABEL_422:
            v47 = 762603056;
LABEL_467:
            v5 = v47 | 0x1000u;
            goto LABEL_586;
          }
          if ((_DWORD)this != 762865200)
          {
            if ((_DWORD)this == 762865202)
              goto LABEL_451;
            v29 = 762865204;
            goto LABEL_430;
          }
LABEL_432:
          v49 = 26160;
LABEL_469:
          v5 = v49 | 0x2D780000u;
          goto LABEL_586;
        }
        if ((int)this <= 792229423)
        {
          if ((int)this <= 792225327)
          {
            if ((_DWORD)this == 762869296)
              goto LABEL_466;
            if ((_DWORD)this == 762869298)
              goto LABEL_468;
            v15 = 762869300;
            goto LABEL_463;
          }
          if ((_DWORD)this != 792225328)
          {
            if ((_DWORD)this != 792225330)
            {
              v14 = 792225332;
LABEL_410:
              v3 = (uint64_t)this;
              if ((_DWORD)this != v14)
                return v3;
              goto LABEL_445;
            }
            goto LABEL_582;
          }
LABEL_584:
          v50 = 26160;
          goto LABEL_585;
        }
        if ((int)this > 792872768)
        {
          if ((_DWORD)this == 792872769)
          {
LABEL_586:
            if (a3)
            {
              if (a3 == 3)
                return v5 & 0x7E7777 | 0x7C000000;
              if (a3 != 2)
                return v5;
              v58 = 788529152;
            }
            else
            {
              LODWORD(v5) = v5 & 0x7E7777;
              v58 = 637534208;
            }
            return v5 | v58;
          }
          if ((_DWORD)this == 796157488)
            goto LABEL_458;
          v3 = (uint64_t)this;
          if ((_DWORD)this != 796157490)
            return v3;
          goto LABEL_457;
        }
        if ((_DWORD)this != 792229424)
        {
          if ((_DWORD)this == 792229426)
            goto LABEL_438;
          v3 = (uint64_t)this;
          if ((_DWORD)this != 792229428)
            return v3;
          goto LABEL_439;
        }
      }
LABEL_444:
      v47 = 758670896;
      goto LABEL_467;
    default:
      return (uint64_t)this;
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::is_freezing(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28075);
}

uint64_t CA::Render::get_compressed_agx_universal_rgb_fourcc(CA::Render *this)
{
  uint64_t v1;
  int v2;

  v1 = 641877825;
  if ((int)this > 1111970368)
  {
    if ((int)this > 1815162993)
    {
      switch((_DWORD)this)
      {
        case 0x6C313072:
          return 644624754;
        case 0x77343061:
          return 645346401;
        case 0x77333072:
          return 645346162;
      }
      return (uint64_t)this;
    }
    if ((_DWORD)this == 1111970369)
      return v1;
    v2 = 1380411457;
LABEL_16:
    if ((_DWORD)this == v2)
      return 642934849;
    return (uint64_t)this;
  }
  if ((int)this <= 644624753)
  {
    if ((_DWORD)this == 641877825)
      return v1;
    v2 = 642934849;
    goto LABEL_16;
  }
  if ((_DWORD)this == 644624754)
    return 644624754;
  if ((_DWORD)this != 645346162)
  {
    if ((_DWORD)this != 645346401)
      return (uint64_t)this;
    return 645346401;
  }
  return 645346162;
}

uint64_t CA::WindowServer::IOMFBDisplay::framebuffer_pixel_format(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v6;

  v2 = 1380411457;
  if (CA::WindowServer::Display::edr_headroom(this) > 1.0)
  {
    v3 = *((_QWORD *)this + 86);
    if (v3)
    {
      v4 = COERCE_FLOAT(atomic_load((unsigned int *)(v3 + 4)));
      if (v4 > 8.0)
        return v2;
    }
  }
  if (byte_1ECDC6AC9
    || byte_1ECDC6AE2
    || *((_BYTE *)this + 26328)
    || *((_BYTE *)this + 28052)
    && CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::IOMFBDisplay *)((char *)this + 27064))
    && *((_BYTE *)this + 28085))
  {
    return v2;
  }
  if (CADeviceIsVirtualized::once[0] != -1)
    dispatch_once(CADeviceIsVirtualized::once, &__block_literal_global_204);
  if (CADeviceIsVirtualized::is_virtualized)
    return v2;
  if (!(*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1832))(this))
    goto LABEL_19;
  if (CADeviceSupportsUniversalCompression::once[0] != -1)
    dispatch_once(CADeviceSupportsUniversalCompression::once, &__block_literal_global_27);
  if (!CADeviceSupportsUniversalCompression::universal)
  {
LABEL_19:
    if ((*((_DWORD *)this + 156) & 8) == 0)
    {
      v6 = 1111970369;
      return (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, uint64_t, _QWORD))(*(_QWORD *)this + 2280))(this, v6, 0);
    }
    if (CADeviceUseFramebufferCompression::once[0] != -1)
      dispatch_once(CADeviceUseFramebufferCompression::once, &__block_literal_global_22_9761);
    v6 = 1647534392;
    if (CADeviceUseFramebufferCompression::enable_compression
      && !*((_BYTE *)this + 28052)
      && (*((_WORD *)this + 328) & 0x1C00) != 0x1000)
    {
      if (CADeviceSupportsUniversalCompression::once[0] != -1)
      {
        dispatch_once(CADeviceSupportsUniversalCompression::once, &__block_literal_global_27);
        v6 = 1647534392;
      }
      if (!CADeviceSupportsUniversalCompression::universal)
      {
        if (*((_BYTE *)this + 28069))
          v6 = 1999908961;
        else
          v6 = 1380411457;
      }
      return (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, uint64_t, _QWORD))(*(_QWORD *)this + 2280))(this, v6, 0);
    }
    return 1647534392;
  }
  v6 = 1647534392;
  return (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, uint64_t, _QWORD))(*(_QWORD *)this + 2280))(this, v6, 0);
}

BOOL CA::WindowServer::Display::has_hdr_clone(CA::WindowServer::Display *this)
{
  _QWORD *v1;
  _BOOL8 result;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  if ((*((_DWORD *)this + 156) & 4) == 0)
    return 0;
  v1 = (_QWORD *)*((_QWORD *)this + 5);
  if (!v1)
    return 0;
  do
  {
    v3[0] = *(_QWORD *)(*(_QWORD *)(*v1 + 96) + 640);
    result = CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::Display::Mode *)v3);
    if (result)
      break;
    v1 = (_QWORD *)v1[1];
  }
  while (v1);
  return result;
}

void layer_private_release(_CAMetalLayerPrivate *this, void *a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  CGColorSpace *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  CGColorSpace *v14;
  const void *v15;

  do
  {
    v3 = __ldaxr((unsigned int *)this);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)this));
  if (!v4)
  {
    CA::Render::remove_every_observer(this, a2);
    os_unfair_lock_lock((os_unfair_lock_t)this + 2);
    if (*((_QWORD *)this + 2))
    {
      pthread_setspecific(collect_slot, this);
      CAImageQueueInvalidate(*((_QWORD *)this + 2));
      pthread_setspecific(collect_slot, 0);
    }
    v5 = (uint64_t *)*((_QWORD *)this + 7);
    if (v5)
    {
      do
      {
        v6 = *v5;
        if (*v5)
        {
          v7 = *((_QWORD *)this + 2);
          if (v7)
          {
            v8 = *(_QWORD *)(v6 + 24);
            if (v8)
              CAImageQueueUnregisterBuffer(v7, v8);
          }
          v9 = *(const void **)(v6 + 64);
          if (v9)
            CFRelease(v9);

          *(_QWORD *)(v6 + 72) = 0;
          v10 = *(CGColorSpace **)(v6 + 88);
          if (v10)
          {
            CGColorSpaceRelease(v10);
            *(_QWORD *)(v6 + 88) = 0;
          }

          free((void *)v6);
        }
        --*((_DWORD *)this + 32);
        v5 = (uint64_t *)v5[1];
      }
      while (v5);
      v11 = (_QWORD *)*((_QWORD *)this + 7);
      if (v11)
      {
        do
        {
          v12 = (_QWORD *)v11[1];
          free(v11);
          v11 = v12;
        }
        while (v12);
      }
    }

    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 10) = 0;
    v13 = *((_QWORD *)this + 18);
    if (v13)
      dispatch_release(v13);
    v14 = (CGColorSpace *)*((_QWORD *)this + 31);
    if (v14)
      CGColorSpaceRelease(v14);
    *((_QWORD *)this + 31) = 0;

    *((_QWORD *)this + 32) = 0;
    v15 = (const void *)*((_QWORD *)this + 2);
    if (v15)
      CFRelease(v15);

    dispatch_release(*((dispatch_object_t *)this + 21));
    dispatch_release(*((dispatch_object_t *)this + 22));
    os_unfair_lock_unlock((os_unfair_lock_t)this + 2);
    os_unfair_lock_lock((os_unfair_lock_t)this + 52);

    *((_QWORD *)this + 27) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)this + 52);
    os_unfair_lock_lock((os_unfair_lock_t)this + 46);

    *((_QWORD *)this + 24) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)this + 46);
    free(this);
  }
}

void sub_184552630(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

CA::Render::ShapeLayer *CA::Render::ShapeLayer::ShapeLayer(CA::Render::ShapeLayer *this, CA::Render::Decoder *a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  __int128 __dst;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E1598C30;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = (CA::Render::Decoder::decode_int32(a2) << 8) | 0x2E;
  ++dword_1ECDC7CE0;
  *(_QWORD *)this = off_1E1596258;
  *((_QWORD *)this + 2) = CA::Render::Decoder::decode_object(a2, 36);
  __dst = 0uLL;
  CA::Render::Decoder::decode_bytes(a2, &__dst, 0x10uLL);
  *(_OWORD *)((char *)this + 24) = __dst;
  *((_QWORD *)this + 5) = CA::Render::Decoder::decode_object(a2, 37);
  __dst = 0uLL;
  CA::Render::Decoder::decode_bytes(a2, &__dst, 0x10uLL);
  *((_OWORD *)this + 3) = __dst;
  *((_QWORD *)this + 8) = CA::Render::Decoder::decode_object(a2, 37);
  *((double *)this + 9) = CA::Render::Decoder::decode_cgfloat(a2);
  *((double *)this + 10) = CA::Render::Decoder::decode_cgfloat(a2);
  *((double *)this + 11) = CA::Render::Decoder::decode_cgfloat(a2);
  *((double *)this + 12) = CA::Render::Decoder::decode_cgfloat(a2);
  *((double *)this + 13) = CA::Render::Decoder::decode_cgfloat(a2);
  *((_QWORD *)this + 14) = CA::Render::Decoder::decode_object(a2, 56);
  v4 = CA::Render::Decoder::decode_int8(a2);
  if (v4 >= 2)
  {
    CA::Render::Decoder::set_fatal_error(a2, "%s - enum %u out of range of %u", "decode_int8_enum", v4, 2);
    LOBYTE(v4) = 0;
  }
  *((_BYTE *)this + 120) = v4;
  v5 = CA::Render::Decoder::decode_int8(a2);
  if (v5 >= 3)
  {
    CA::Render::Decoder::set_fatal_error(a2, "%s - enum %u out of range of %u", "decode_int8_enum", v5, 3);
    LOBYTE(v5) = 0;
  }
  *((_BYTE *)this + 121) = v5;
  v6 = CA::Render::Decoder::decode_int8(a2);
  if (v6 >= 3)
  {
    CA::Render::Decoder::set_fatal_error(a2, "%s - enum %u out of range of %u", "decode_int8_enum", v6, 3);
    LOBYTE(v6) = 0;
  }
  *((_BYTE *)this + 122) = v6;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0x3FF0000000000000;
  return this;
}

double CA::Render::Decoder::decode_cgfloat(CA::Render::Decoder *this)
{
  if ((*((_BYTE *)this + 64) & 1) != 0)
    return COERCE_DOUBLE(CA::Render::Decoder::decode_int64(this));
  else
    return COERCE_FLOAT(CA::Render::Decoder::decode_int32(this));
}

uint64_t CA::WindowServer::IOMFBServer::post_max_rate_power_log(CA::WindowServer::IOMFBServer *this, CA::Render::Object *a2, void *a3, void *a4)
{
  pthread_mutex_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __CFDictionary *Mutable;
  uint64_t v10;
  uint64_t v11;

  v5 = (pthread_mutex_t *)((char *)a2 + 544);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 544));
  v6 = *((_QWORD *)a2 + 12);
  v7 = mach_absolute_time();
  v8 = 0;
  while (!*(_DWORD *)(v6 + 25460 + v8))
  {
    v8 += 4;
    if (v8 == 40)
      return pthread_mutex_unlock(v5);
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CA_CFDictionarySetLongLong(Mutable, CFSTR("mach_absolute_time"), v7);
  v10 = 0;
  v11 = v6 + 25460;
  do
  {
    CA_CFDictionarySetInt(Mutable, CA::WindowServer::power_log_dr_keys[v10], *(_DWORD *)(v11 + 4 * v10));
    *(_DWORD *)(v11 + 4 * v10++) = 0;
  }
  while (v10 != 10);
  PLLogTimeSensitiveRegisteredEvent();
  if (Mutable)
    CFRelease(Mutable);
  return pthread_mutex_unlock(v5);
}

void CA_CFDictionarySetInt(__CFDictionary *a1, const void *a2, int a3)
{
  CFNumberRef v5;
  int valuePtr;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

void CA_CFDictionarySetLongLong(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  CFNumberRef v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = a3;
  v5 = CFNumberCreate(0, kCFNumberLongLongType, v6);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

void CA::OGL::`anonymous namespace'::tile_rect_tex9_(uint64_t a1, uint64_t *a2, uint64_t a3, double *a4, float *a5, double *a6)
{
  double *v6;
  double v7;
  double v8;
  double v15;
  double v16;
  float *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  float *v22;
  unsigned int v23;
  double v24;
  double v25;
  double v26[2];
  double v27[2];
  _OWORD v28[2];
  _OWORD v29[2];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v6 = (double *)*a2;
  v7 = *(double *)(*a2 + 16);
  if (v7 > 0.0)
  {
    v8 = v6[3];
    if (v8 > 0.0)
    {
      v16 = *v6;
      v15 = v6[1];
      v24 = 0.0;
      v25 = 0.0;
      CA::Transform::get_scale_recip(a2[1], &v25, &v24);
      memset(v29, 0, sizeof(v29));
      memset(v28, 0, sizeof(v28));
      v27[0] = 0.0;
      v27[1] = 0.0;
      v26[0] = 0.0;
      v26[1] = 0.0;
      v18 = *(_QWORD *)(a1 + 16);
      v19 = *(_QWORD *)(v18 + 16) & 0xFFFFFF00FF00FF00;
      if (*(_QWORD *)(v18 + 8) == 0x3C003C003C003C00)
        v20 = 1;
      else
        v20 = 3;
      *(_DWORD *)(v18 + 16) = v20 | v19;
      *(_DWORD *)(v18 + 20) = HIDWORD(v19);
      *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 0;
    }
  }
}

uint64_t CA::OGL::`anonymous namespace'::prepare_9_slice(CA::OGL::_anonymous_namespace_ *this, double a2, double a3, double a4, double a5, const float *a6, double *a7, double *a8, float *a9)
{
  double v10;

  *a7 = a2;
  if (a4 > a2 || a5 < a3)
  {
    if (a3 < a4)
      a4 = a3;
    if (a4 < a2)
      a4 = a2;
    if (a3 < a5)
      a5 = a3;
    if (a5 >= a2)
      a2 = a5;
    a7[1] = a4;
    a7[2] = a2;
    a7[3] = a3;
    *(_DWORD *)a8 = *(_DWORD *)this;
    *((float *)a8 + 1) = *(float *)this + (float)((float)(*((float *)this + 2) - *(float *)this) * *a6);
    *((float *)a8 + 2) = *(float *)this + (float)((float)(*((float *)this + 2) - *(float *)this) * a6[2]);
    *((_DWORD *)a8 + 3) = *((_DWORD *)this + 2);
    if (a4 > a2)
    {
      v10 = (a2 + a4) * 0.5;
      a7[1] = v10;
      a7[2] = v10;
    }
    return 3;
  }
  else
  {
    a7[1] = a3;
    *(_DWORD *)a8 = *(_DWORD *)this;
    *((_DWORD *)a8 + 1) = *((_DWORD *)this + 2);
    return 1;
  }
}

float64_t CA::Render::Updater::TransformOp::map_transform(CA::Render::Updater::TransformOp *this, CA::Transform *a2, uint64_t a3, const double *a4)
{
  return CA::Transform::concat(a2, (float64x2_t *)((char *)this + 24), a3, a4);
}

CATransform3D *__cdecl CATransform3DScale(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat sx, CGFloat sy, CGFloat sz)
{
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v5 = vmulq_n_f64(*(float64x2_t *)&t->m11, sx);
  v6 = vmulq_n_f64(*(float64x2_t *)&t->m13, sx);
  v7 = vmulq_n_f64(*(float64x2_t *)&t->m21, sy);
  v8 = vmulq_n_f64(*(float64x2_t *)&t->m23, sy);
  v9 = vmulq_n_f64(*(float64x2_t *)&t->m31, sz);
  v10 = vmulq_n_f64(*(float64x2_t *)&t->m33, sz);
  *(float64x2_t *)&t->m11 = v5;
  *(float64x2_t *)&t->m13 = v6;
  *(float64x2_t *)&t->m21 = v7;
  *(float64x2_t *)&t->m23 = v8;
  *(float64x2_t *)&t->m31 = v9;
  *(float64x2_t *)&t->m33 = v10;
  v11 = *(_OWORD *)&t->m43;
  *(_OWORD *)&retstr->m41 = *(_OWORD *)&t->m41;
  *(_OWORD *)&retstr->m43 = v11;
  v12 = *(_OWORD *)&t->m33;
  *(_OWORD *)&retstr->m31 = *(_OWORD *)&t->m31;
  *(_OWORD *)&retstr->m33 = v12;
  v13 = *(_OWORD *)&t->m13;
  *(_OWORD *)&retstr->m11 = *(_OWORD *)&t->m11;
  *(_OWORD *)&retstr->m13 = v13;
  v14 = *(_OWORD *)&t->m23;
  *(_OWORD *)&retstr->m21 = *(_OWORD *)&t->m21;
  *(_OWORD *)&retstr->m23 = v14;
  return t;
}

CA::Render::GroupAnimation *CA::Render::GroupAnimation::GroupAnimation(CA::Render::GroupAnimation *this, CA::Render::Decoder *a2)
{
  CA::Render::Animation *v4;

  v4 = CA::Render::Animation::Animation(this, a2);
  *((_BYTE *)v4 + 12) = 21;
  ++dword_1ECDC7C7C;
  *(_QWORD *)v4 = off_1E1597380;
  *((_QWORD *)this + 12) = CA::Render::Decoder::decode_array_object(a2, 6, CA::Render::animation_types, 0);
  return this;
}

CA::Render::MatchAnimation *CA::Render::MatchAnimation::MatchAnimation(CA::Render::MatchAnimation *this, CA::Render::Decoder *a2)
{
  *(_QWORD *)CA::Render::Animation::Animation(this, a2) = off_1E1597430;
  *((_QWORD *)this + 12) = CA::Render::Decoder::decode_size_t(a2);
  *((_QWORD *)this + 13) = CA::Render::Decoder::decode_size_t(a2);
  *((_DWORD *)this + 28) = CA::Render::Decoder::decode_int32(a2);
  *((_QWORD *)this + 15) = CA::Render::Decoder::decode_keypath(a2);
  *((_QWORD *)this + 16) = 0;
  return this;
}

CA::Render::TransitionAnimation *CA::Render::TransitionAnimation::TransitionAnimation(CA::Render::TransitionAnimation *this, CA::Render::Decoder *a2)
{
  CA::Render::Animation *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = CA::Render::Animation::Animation(this, a2);
  *((_BYTE *)v4 + 12) = 55;
  ++dword_1ECDC7D04;
  *(_QWORD *)v4 = off_1E1598180;
  *((_DWORD *)this + 23) = CA::Render::Decoder::decode_atom(a2);
  *((_DWORD *)this + 24) = CA::Render::Decoder::decode_atom(a2);
  *((_DWORD *)this + 25) = CA::Render::Decoder::decode_int32(a2);
  *((_DWORD *)this + 26) = CA::Render::Decoder::decode_int32(a2);
  *((_QWORD *)this + 14) = CA::Render::Decoder::decode_object(a2, 17);
  v13 = 28;
  v5 = CA::Render::Decoder::decode_array_object(a2, 1, &v13, 0);
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v8 = v5;
    if (!v7)
    {
      v8 = 0;
      do
        v12 = __ldaxr(v6);
      while (__stlxr(v12 - 1, v6));
    }
    *((_QWORD *)this + 15) = v8;
    do
    {
      v9 = __ldaxr(v6);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v6));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  else
  {
    *((_QWORD *)this + 15) = 0;
  }
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  return this;
}

CA::Render::KeyframeAnimation *CA::Render::KeyframeAnimation::KeyframeAnimation(CA::Render::KeyframeAnimation *this, CA::Render::Decoder *a2)
{
  CA::Render::PropertyAnimation *v4;
  unsigned int v5;

  v4 = CA::Render::PropertyAnimation::PropertyAnimation(this, a2);
  *((_BYTE *)v4 + 12) = 27;
  ++dword_1ECDC7C94;
  *(_QWORD *)v4 = off_1E1597CE8;
  *((_QWORD *)this + 14) = CA::Render::Decoder::decode_object(a2, 1);
  *((_QWORD *)this + 15) = CA::Render::Decoder::decode_object(a2, 56);
  *((_QWORD *)this + 16) = CA::Render::Decoder::decode_object(a2, 56);
  *((_QWORD *)this + 17) = CA::Render::Decoder::decode_object(a2, 36);
  v5 = CA::Render::Decoder::decode_int8(a2);
  if (v5 >= 5)
  {
    CA::Render::Decoder::set_fatal_error(a2, "%s - enum %u out of range of %u", "decode_int8_enum", v5, 5);
    LOBYTE(v5) = 0;
  }
  *((_BYTE *)this + 144) = v5;
  *((_QWORD *)this + 19) = CA::Render::Decoder::decode_object(a2, 56);
  *((_QWORD *)this + 20) = CA::Render::Decoder::decode_object(a2, 56);
  *((_QWORD *)this + 21) = CA::Render::Decoder::decode_object(a2, 56);
  return this;
}

CA::Render::SpringAnimation *CA::Render::SpringAnimation::SpringAnimation(CA::Render::SpringAnimation *this, CA::Render::Decoder *a2)
{
  CA::Render::BasicAnimation0 *v4;

  v4 = CA::Render::BasicAnimation0::BasicAnimation0(this, a2);
  *((_BYTE *)v4 + 12) = 48;
  ++dword_1ECDC7CE8;
  *(_QWORD *)v4 = off_1E1597890;
  *((_QWORD *)this + 19) = CA::Render::Decoder::decode_int64(a2);
  *((_QWORD *)this + 20) = CA::Render::Decoder::decode_int64(a2);
  *((_QWORD *)this + 21) = CA::Render::Decoder::decode_int64(a2);
  *((_QWORD *)this + 22) = CA::Render::Decoder::decode_int64(a2);
  return this;
}

CA::Render::BasicAnimation0 *CA::Render::BasicAnimation0::BasicAnimation0(CA::Render::BasicAnimation0 *this, CA::Render::Decoder *a2)
{
  *(_QWORD *)CA::Render::PropertyAnimation::PropertyAnimation(this, a2) = off_1E15974E8;
  *((_QWORD *)this + 14) = CA::Render::Decoder::decode_object(a2, 0);
  *((_QWORD *)this + 15) = CA::Render::Decoder::decode_object(a2, 0);
  *((_QWORD *)this + 16) = CA::Render::Decoder::decode_object(a2, 0);
  *((_QWORD *)this + 17) = CA::Render::Decoder::decode_int64(a2);
  *((_QWORD *)this + 18) = CA::Render::Decoder::decode_int64(a2);
  return this;
}

CA::Render::PropertyAnimation *CA::Render::PropertyAnimation::PropertyAnimation(CA::Render::PropertyAnimation *this, CA::Render::Decoder *a2)
{
  *(_QWORD *)CA::Render::Animation::Animation(this, a2) = off_1E1597DB0;
  *((_QWORD *)this + 12) = CA::Render::Decoder::decode_keypath(a2);
  *((_QWORD *)this + 13) = CA::Render::Decoder::decode_object(a2, 18);
  return this;
}

CA::Render::Animation *CA::Render::Animation::Animation(CA::Render::Animation *this, CA::Render::Decoder *a2)
{
  const void *v4;

  *(_QWORD *)this = off_1E1598C30;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = *((unsigned __int8 *)this + 12) | (CA::Render::Decoder::decode_int32(a2) << 8);
  *(_QWORD *)this = off_1E15995E0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = CA::Render::Decoder::decode_object(a2, 52);
  *((_QWORD *)this + 6) = CA::Render::Decoder::decode_object(a2, 56);
  CFStringGetTypeID();
  *((_QWORD *)this + 7) = CA::Render::Decoder::decode_cfobject(a2);
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = CA::Render::Decoder::decode_int32(a2);
  *(_QWORD *)((char *)this + 84) = 0;
  *(_QWORD *)((char *)this + 76) = 0;
  *((float *)this + 6) = (float)CA::Render::Decoder::decode_int32(a2);
  *((float *)this + 7) = (float)CA::Render::Decoder::decode_int32(a2);
  *((float *)this + 8) = (float)CA::Render::Decoder::decode_int32(a2);
  *((_DWORD *)this + 22) = CA::Render::Decoder::decode_int32(a2);
  v4 = (const void *)*((_QWORD *)this + 7);
  if (v4)
    *((_QWORD *)this + 8) = CFHash(v4);
  return this;
}

__CFArray *CA::Render::Decoder::decode_cfobject(CA::Render::Decoder *this)
{
  CA::Render::Decoder *v1;
  uint64_t v2;
  uint64_t v3;
  CA::Render::Decoder *v4;
  __CFArray **v5;
  const char *v6;
  CFAllocatorContext *v7;
  CFIndex v8;
  CFIndex v9;
  __CFArray *Mutable;
  CFAllocatorContext *v11;
  int v12;
  const __CFAllocator *v13;
  CFNumberType v14;
  int v15;
  const UInt8 *v16;
  CFIndex v17;
  const UInt8 *v18;
  const __CFAllocator *v19;
  const __CFAllocator *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  CFNumberRef v25;
  int v26;
  int v27;
  uint64_t v28;
  CA::Render::Image *v29;
  unsigned int *v30;
  unsigned int v31;
  BOOL v32;
  float64x2_t v33;
  CGColorSpace *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  char *v40;
  CFAllocatorContext *v41;
  CFAllocatorContext *v42;
  unsigned int *v43;
  unsigned int v44;
  const __CFAllocator *v45;
  const UInt8 *v46;
  CFIndex v47;
  unsigned int *v48;
  unsigned int v49;
  const void *v50;
  const void *v51;
  const void *v52;
  const void *v53;
  const void *v54;
  NSObject *v55;
  void *v57;
  void (*v58)(const void *, void *);
  CFIndex length;
  CFAllocatorContext context;
  uint64_t v61;

  v1 = (CA::Render::Decoder *)MEMORY[0x1E0C80A78](this);
  v61 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)v1 + 18) & 1) != 0)
    return 0;
  v3 = v2;
  v4 = v1;
  switch(CA::Render::Decoder::decode_int8(v1))
  {
    case 1u:
      goto LABEL_3;
    case 2u:
      if (!CA::Render::Decoder::decode_int8(v4))
        return 0;
      bzero(&context, 0x1000uLL);
      length = 0;
      v6 = (const char *)CA::Render::Decoder::decode_data(v4, &context, 0x1000uLL, (unint64_t *)&length, 0);
      if (!v6)
        goto LABEL_86;
      v7 = (CFAllocatorContext *)v6;
      v8 = length - 1;
      if ((unint64_t)(length - 1) >= 0xFFF)
        v8 = 4095;
      if (length)
        v9 = v8;
      else
        v9 = 0;
      v6[v9] = 0;
      Mutable = (__CFArray *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE18], v6, 0x8000100u);
      if (v7 == &context)
        goto LABEL_94;
      v11 = v7;
      goto LABEL_48;
    case 3u:
      v12 = CA::Render::Decoder::decode_int8(v4);
      if (v12 == 1)
      {
        context.version = CA::Render::Decoder::decode_int64(v4);
        v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE18];
        v14 = kCFNumberLongLongType;
      }
      else
      {
        if (v12)
        {
          CA::Render::Decoder::set_fatal_error(v4, "%s - wrong type = %u");
          return 0;
        }
        context.version = CA::Render::Decoder::decode_int64(v4);
        v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE18];
        v14 = kCFNumberDoubleType;
      }
      v25 = CFNumberCreate(v13, v14, &context);
      goto LABEL_93;
    case 4u:
      v15 = CA::Render::Decoder::decode_int8(v4);
      v5 = (__CFArray **)MEMORY[0x1E0C9AE50];
      if (!v15)
        v5 = (__CFArray **)MEMORY[0x1E0C9AE40];
      goto LABEL_18;
    case 5u:
      v58 = 0;
      length = 0;
      v57 = 0;
      v16 = (const UInt8 *)CA::Render::Decoder::decode_data_async(v4, (unint64_t *)&length, (void (__cdecl **)(void *))&v58, &v57);
      v17 = length;
      if (length)
      {
        v18 = v16;
        if (!v16)
        {
          CA::Render::Decoder::set_fatal_error(v4, "%s - data = NULL, data_len = %zu");
          goto LABEL_86;
        }
        if (v58)
        {
          context.version = 0;
          memset(&context.retain, 0, 40);
          context.info = v57;
          context.deallocate = (CFAllocatorDeallocateCallBack)v58;
          context.preferredSize = 0;
          v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v20 = CFAllocatorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &context);
          Mutable = CFDataCreateWithBytesNoCopy(v19, v18, v17, v20);
          CFRelease(v20);
          goto LABEL_94;
        }
        v45 = (const __CFAllocator *)*MEMORY[0x1E0C9AE18];
        v46 = v18;
        v47 = length;
      }
      else
      {
        v45 = (const __CFAllocator *)*MEMORY[0x1E0C9AE18];
        v46 = 0;
        v47 = 0;
      }
      v25 = CFDataCreate(v45, v46, v47);
      goto LABEL_93;
    case 6u:
      v21 = CA::Render::Decoder::decode_size_t(v4);
      if (!v21)
      {
        v25 = CFArrayCreate(0, 0, 0, 0);
        goto LABEL_93;
      }
      v22 = v21;
      if (v21 > 0x8000)
      {
        CA::Render::Decoder::set_fatal_error(v4, "%s - array entries = %zu");
        return 0;
      }
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      do
      {
        v50 = (const void *)CA::Render::Decoder::decode_cfobject(v4, 0);
        if (v50)
        {
          v51 = v50;
          CFArrayAppendValue(Mutable, v50);
          CFRelease(v51);
        }
        else
        {
          CA::Render::Decoder::set_fatal_error(v4, "%s - value = NULL", "decode_cfobject");
        }
        --v22;
      }
      while (v22);
      goto LABEL_94;
    case 7u:
      v23 = CA::Render::Decoder::decode_size_t(v4);
      if (!v23)
      {
        v25 = CFDictionaryCreate(0, 0, 0, 0, 0, 0);
LABEL_93:
        Mutable = v25;
        goto LABEL_94;
      }
      v24 = v23;
      if (v23 > 0x8000)
      {
        CA::Render::Decoder::set_fatal_error(v4, "%s - dicitionary entries = %zu");
        return 0;
      }
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      do
      {
        v52 = (const void *)CA::Render::Decoder::decode_cfobject(v4, 0);
        v53 = (const void *)CA::Render::Decoder::decode_cfobject(v4, 0);
        v54 = v53;
        if (v52)
        {
          v53 = v52;
          if (v54)
          {
            CFDictionarySetValue(Mutable, v52, v54);
            CFRelease(v52);
            CFRelease(v54);
            goto LABEL_81;
          }
LABEL_79:
          CFRelease(v53);
          CA::Render::Decoder::set_fatal_error(v4, "%s - key = %p, value = %p", "decode_cfobject", v52, v54);
          goto LABEL_81;
        }
        if (v53)
          goto LABEL_79;
        CA::Render::Decoder::set_fatal_error(v4, "%s - key = %p, value = %p", "decode_cfobject", 0, 0);
LABEL_81:
        --v24;
      }
      while (v24);
      if ((*((_BYTE *)v4 + 18) & 1) == 0)
        goto LABEL_94;
LABEL_97:
      CFRelease(Mutable);
      return 0;
    case 8u:
      v25 = (CFNumberRef)CA::Render::Decoder::decode_colorspace(v4);
      goto LABEL_93;
    case 9u:
      v26 = CA::Render::Decoder::decode_int8(v4);
      if (v26 == 23)
      {
        v29 = (CA::Render::Image *)CA::Render::Decoder::decode_object(v4, 23);
        Mutable = CA::Render::Image::copy_cgimage(v29);
        if (!v29)
          goto LABEL_94;
        v48 = (unsigned int *)((char *)v29 + 8);
        do
        {
          v49 = __ldaxr(v48);
          v32 = --v49 == 0;
        }
        while (__stlxr(v49, v48));
        goto LABEL_63;
      }
      v27 = v26;
      if (v26 == 51)
      {
        v28 = CA::Render::Decoder::decode_object(v4, 51);
        v29 = (CA::Render::Image *)v28;
        Mutable = *(__CFArray **)(v28 + 112);
        if (Mutable)
          CFRetain(*(CFTypeRef *)(v28 + 112));
        v30 = (unsigned int *)((char *)v29 + 8);
        do
        {
          v31 = __ldaxr(v30);
          v32 = --v31 == 0;
        }
        while (__stlxr(v31, v30));
LABEL_63:
        if (v32)
          (*(void (**)(CA::Render::Image *))(*(_QWORD *)v29 + 16))(v29);
        goto LABEL_94;
      }
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v55 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(context.version) = 67109120;
          HIDWORD(context.version) = v27;
          _os_log_impl(&dword_184457000, v55, OS_LOG_TYPE_DEFAULT, "decode kCACFTypeImage got unsupported type %d", (uint8_t *)&context, 8u);
        }
      }
LABEL_3:
      v5 = (__CFArray **)MEMORY[0x1E0C9B0D0];
LABEL_18:
      Mutable = *v5;
      goto LABEL_94;
    case 0xAu:
      context.version = 0;
      context.info = 0;
      CA::Render::Decoder::decode_bytes(v4, &context, 0x10uLL);
      v33 = vcvtq_f64_f32((float32x2_t)context.info);
      *(float64x2_t *)&context.version = vcvtq_f64_f32((float32x2_t)context.version);
      *(float64x2_t *)&context.retain = v33;
      v34 = (CGColorSpace *)CAGetColorSpace(0x1Cu);
      v25 = CGColorCreate(v34, (const CGFloat *)&context.version);
      goto LABEL_93;
    case 0xBu:
      v35 = CA::Render::Decoder::decode_object(v4, 51);
      v29 = (CA::Render::Image *)v35;
      Mutable = *(__CFArray **)(v35 + 112);
      if (Mutable)
        CFRetain(*(CFTypeRef *)(v35 + 112));
      v36 = (unsigned int *)((char *)v29 + 8);
      do
      {
        v37 = __ldaxr(v36);
        v32 = --v37 == 0;
      }
      while (__stlxr(v37, v36));
      goto LABEL_63;
    case 0xCu:
      v38 = CA::Render::Decoder::decode_int8(v4);
      if (v38 >= 8)
      {
        CA::Render::Decoder::set_fatal_error(v4, "%s - incorrect type %d");
        return 0;
      }
      v39 = qword_18474FDD0[v38];
      v40 = off_1E159C118[v38];
      length = 0;
      v41 = (CFAllocatorContext *)CA::Render::Decoder::decode_data(v4, &context, 0xA0uLL, (unint64_t *)&length, 0xA0uLL);
      if (v41)
      {
        v42 = v41;
        if (v39 == length)
        {
          Mutable = (__CFArray *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B18]), "initWithBytes:objCType:", v41, v40);
          if (v42 != &context)
          {
            v11 = v42;
LABEL_48:
            free(v11);
          }
LABEL_94:
          if (v3 && Mutable && CFGetTypeID(Mutable) != v3)
            goto LABEL_97;
          return Mutable;
        }
        CA::Render::Decoder::set_fatal_error(v4, "%s - size mismatch %zu - %zu", "decode_ns_value", v39, length);
        if (v42 != &context)
          free(v42);
      }
      else
      {
        CA::Render::Decoder::set_fatal_error(v4, "%s - data ptr = NULL");
      }
LABEL_86:
      Mutable = 0;
      goto LABEL_94;
    case 0xDu:
      v29 = (CA::Render::Image *)CA::Render::Decoder::decode_object(v4, 36);
      Mutable = (__CFArray *)CA::Render::Path::cg_path(v29);
      CGPathRetain(Mutable);
      if (!v29)
        goto LABEL_94;
      v43 = (unsigned int *)((char *)v29 + 8);
      do
      {
        v44 = __ldaxr(v43);
        v32 = --v44 == 0;
      }
      while (__stlxr(v44, v43));
      goto LABEL_63;
    default:
      return 0;
  }
}

void *CA::Render::Decoder::decode_data(CA::Render::Decoder *this, void *a2, size_t a3, unint64_t *a4, size_t a5)
{
  uint64_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v15;
  void (__cdecl *v16)(void *);
  size_t v17;

  if ((*((_BYTE *)this + 18) & 1) != 0)
    return 0;
  v9 = a3 <= a5 ? a5 : a3;
  v10 = a5 ? v9 : -1;
  v11 = CA::Render::Decoder::decode_size_t(this);
  if (!v11)
    return 0;
  v12 = v11;
  if ((*((_BYTE *)this + 64) & 1) != 0)
  {
    if (v11 == -1)
    {
LABEL_11:
      v13 = *((_QWORD *)this + 6);
      if (!v13 || *(_DWORD *)(v13 + 8) != 1)
      {
        CA::Render::Decoder::set_fatal_error(this, "%s - _attach_list = %p, type = %u");
        return 0;
      }
      if (*(_QWORD *)(v13 + 24) > v10)
      {
        CA::Render::Decoder::set_fatal_error(this, "%s - max_size = %zu, size = %zu");
        return 0;
      }
      v15 = *((_QWORD *)this + 7) - 1;
      *((_QWORD *)this + 6) = *(_QWORD *)v13;
      *((_QWORD *)this + 7) = v15;
      *a4 = *(_QWORD *)(v13 + 24);
      v16 = *(void (__cdecl **)(void *))(v13 + 32);
      if (!v16 || v16 == CA::Render::release_free)
        return *(void **)(v13 + 16);
      v17 = *(_QWORD *)(v13 + 24);
      if (v17 > a3)
        a2 = malloc_type_malloc(v17, 0xE43D2620uLL);
      if (a2)
        memcpy(a2, *(const void **)(v13 + 16), *(_QWORD *)(v13 + 24));
      else
        CA::Render::Decoder::set_fatal_error(this, "%s - buf = NULL", "decode_data");
      (*(void (**)(_QWORD, _QWORD))(v13 + 32))(*(_QWORD *)(v13 + 16), *(_QWORD *)(v13 + 40));
      return a2;
    }
  }
  else if (v11 == 0xFFFFFFFF)
  {
    goto LABEL_11;
  }
  if (v11 > v10)
  {
    CA::Render::Decoder::set_fatal_error(this, "%s - max_size = %zu, tag = %zu");
    return 0;
  }
  if (v11 > 0x10000000)
    goto LABEL_23;
  if (v11 > a3)
    a2 = malloc_type_malloc(v11, 0xF1A80491uLL);
  if (a2)
  {
    CA::Render::Decoder::decode_bytes(this, a2, v12);
  }
  else
  {
LABEL_23:
    CA::Render::Decoder::set_fatal_error(this, "%s - buf = NULL, size = %zu", "decode_data", v12);
    a2 = 0;
  }
  *a4 = v12;
  return a2;
}

void *CA::Render::Decoder::decode_data_async(CA::Render::Decoder *this, unint64_t *a2, void (__cdecl **a3)(void *), void **a4)
{
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  if ((*((_BYTE *)this + 18) & 1) != 0)
    return 0;
  v8 = CA::Render::Decoder::decode_size_t(this);
  if (!v8)
    return 0;
  v9 = (void *)v8;
  if ((*((_BYTE *)this + 64) & 1) != 0)
  {
    if (v8 == -1)
    {
LABEL_5:
      v10 = *((_QWORD *)this + 6);
      if (v10 && *(_DWORD *)(v10 + 8) == 1)
      {
        v11 = *((_QWORD *)this + 7) - 1;
        *((_QWORD *)this + 6) = *(_QWORD *)v10;
        *((_QWORD *)this + 7) = v11;
        *a2 = *(_QWORD *)(v10 + 24);
        *a3 = *(void (__cdecl **)(void *))(v10 + 32);
        *a4 = *(void **)(v10 + 40);
        return *(void **)(v10 + 16);
      }
      CA::Render::Decoder::set_fatal_error(this, "%s - _attach_list = %p, type = %u");
      return 0;
    }
  }
  else if (v8 == 0xFFFFFFFF)
  {
    goto LABEL_5;
  }
  if (v8 >= 0x2000001)
  {
    CA::Render::Decoder::set_fatal_error(this, "%s - buf size = %zu");
    return 0;
  }
  v12 = malloc_type_valloc(v8, 0x89C27083uLL);
  if (v12)
  {
    CA::Render::Decoder::decode_bytes(this, v12, (size_t)v9);
    *a2 = (unint64_t)v9;
    *a3 = CA::Render::release_free;
    *a4 = v9;
  }
  else
  {
    CA::Render::Decoder::set_fatal_error(this, "%s - buf = NULL", "decode_data_async");
  }
  return v12;
}

uint64_t CA::Render::GradientLayer::hit_test(CA::Render::GradientLayer *a1, uint64_t a2, double *a3)
{
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  float v8;
  _OWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  result = CA::Render::GradientLayer::is_valid(a1);
  if ((_DWORD)result)
  {
    v6 = *(_OWORD *)(a2 + 80);
    v9[0] = *(_OWORD *)(a2 + 64);
    v9[1] = v6;
    v7 = *(_QWORD *)(a2 + 128);
    v8 = 0.0;
    if (v7)
      v8 = *(float *)(v7 + 228);
    return CA_CGRoundRectContainsPoint((double *)v9, v8, *a3, a3[1]);
  }
  return result;
}

BOOL CA::Render::GradientLayer::has_background(CA::Render::GradientLayer *this, const CA::Render::Layer *a2, BOOL *a3)
{
  _BOOL8 result;
  int v6;

  result = CA::Render::GradientLayer::is_valid(this);
  if (result)
  {
    if ((*((_DWORD *)this + 3) & 0x800) != 0)
      v6 = *((_DWORD *)this + 3) & 0x1000;
    else
      v6 = *((_DWORD *)this + 7) & 0x800;
    *a3 = v6 != 0;
  }
  return result;
}

BOOL CA::OGL::prepare_layer_image(CA::OGL::Renderer &,CA::OGL::Layer *,CA::OGL::Gstate const&)::visitor::visit_subclass(uint64_t a1, CA::Render::GradientLayer *this)
{
  _BOOL8 result;

  result = CA::Render::GradientLayer::is_valid(this);
  if (result)
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) |= 0x4000uLL;
  return result;
}

BOOL CA::Render::GradientLayer::is_valid(CA::Render::GradientLayer *this)
{
  int v1;

  v1 = *((_DWORD *)this + 26);
  if (v1 != 49 && v1 != 442 && v1 != 115)
    return 0;
  if ((*((_BYTE *)this + 13) & 8) != 0 && *((_QWORD *)this + 14))
    return 1;
  return *((_QWORD *)this + 6) != 0;
}

void CA::WindowServer::Server::hit_test(uint64_t a1, uint64_t a2, CGFloat *a3, int *a4, uint64_t a5, char a6, int64x2_t *a7)
{
  uint64_t v9;
  int *v10;
  uint64_t v14;
  int v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  const double *v20;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;
  int v24;
  float v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unint64_t v32;
  CA::Render::Layer *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  __int32 v41;
  __int32 v42;
  __int32 v43;
  __int32 v44;
  uint64_t v46;
  int32x2_t *v47;
  uint64_t v48;
  int v49;
  int32x2_t *v50;
  NSObject *v51;
  unsigned int v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  int32x2_t *v57;
  int32x2_t v58;
  int32x2_t v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  int32x2_t *v63;
  unsigned int *v64;
  unsigned int v66;
  uint64_t v69;
  NSObject *v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  const char *v74;
  NSObject *v75;
  uint32_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  float64x2_t v92;
  CA::Render::Texture *v93;
  CA::Render::Layer *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  int v100;
  unsigned int *secure_superlayers_validation_start_node;
  double *v102;
  const double *v103;
  int8x16_t *v104;
  uint64_t v105;
  unsigned int *v106;
  NSObject *v107;
  uint64_t v108;
  uint64_t *i;
  NSObject *v110;
  int v111;
  char *v112;
  int v113;
  uint64_t v114;
  char *v115;
  int v116;
  unsigned int v117;
  int v119;
  NSObject *v120;
  const char *v121;
  unsigned int *v122;
  uint64_t v123;
  BOOL v124;
  int32x2_t *v125;
  int32x2_t v126;
  uint64_t *v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  unsigned int *v137;
  BOOL v138;
  char v139;
  float v140;
  float v141;
  double v142;
  float v143;
  float v144;
  unsigned int *v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t *v148;
  NSObject *v149;
  uint64_t v150;
  uint64_t v151;
  const char *v152;
  const char *v153;
  float64x2_t v154;
  uint64_t v155;
  float64x2_t v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  float64x2_t v160;
  float64x2_t v161;
  double v162;
  double v163;
  uint64_t v164;
  uint64_t v165;
  double v166;
  double v167;
  NSObject *v168;
  uint64_t v169;
  uint64_t v170;
  const char *v171;
  const char *v172;
  NSObject *v173;
  uint64_t v174;
  uint64_t v175;
  const char *v176;
  const char *v177;
  CA::Render::Layer *v178;
  _BOOL4 has_hit_test_insecure_properties;
  NSObject *v180;
  uint64_t v181;
  uint64_t v182;
  const char *v183;
  const char *v184;
  uint64_t v185;
  BOOL v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  double v190;
  float v191;
  double v192;
  float v193;
  double v194;
  const double *v195;
  const double *v196;
  float64x2_t v197;
  float64_t v198;
  double v199;
  double *v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  float64x2_t v205;
  char v206;
  char v207;
  uint64_t v208;
  const char *v209;
  uint64_t v210;
  int8x16_t v211;
  __int32 v212;
  int v213;
  int v214;
  int32x2_t v215;
  int32x2_t v216;
  int32x2_t v217;
  int32x2_t v218;
  int8x8_t v219;
  _BOOL4 v221;
  BOOL v222;
  unsigned int v223;
  uint64_t v224;
  int32x2_t *v225;
  unint64_t v226;
  int v227;
  float v228;
  CA::Shape **v229;
  unint64_t v230;
  int32x2_t *v231;
  int32x2_t v232;
  int32x2_t v233;
  uint64_t v234;
  float v235;
  int32x2_t v236;
  uint32x2_t v237;
  uint32x2_t v238;
  uint32x2_t v239;
  int v240;
  int v241;
  int v242;
  int v243;
  const CA::Bounds *v246;
  int32x2_t *v247;
  int32x2_t v248;
  uint64_t v249;
  uint64_t v250;
  CA::Shape **v251;
  uint64_t v252;
  const CA::Bounds *v253;
  CA::Shape *v254;
  const CA::Shape *v255;
  const int *v256;
  int64x2_t v257;
  int8x16_t v258;
  int32x4_t v259;
  double v260;
  unsigned int v262;
  uint64_t v264;
  int32x2_t v265;
  uint64_t v266;
  const char *v267;
  const char *v268;
  unsigned int v269;
  uint64_t v270;
  float v271;
  float v272;
  float v273;
  _BOOL4 v274;
  int v275;
  float v276;
  uint64_t v277;
  NSObject *v278;
  uint32_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  __int32 v283;
  NSObject *v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  float v288;
  const char *v289;
  NSObject *log;
  int v291;
  unsigned int *v292;
  uint64_t v293;
  __int32 v294;
  int v295;
  int v296;
  void **v297;
  int v298;
  uint64_t v299;
  unsigned int *v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  int v304;
  char v305;
  char v306;
  int64x2_t *v307;
  int8x16_t *v308;
  int v309;
  CA::Shape *v310;
  int8x16_t v311;
  _BYTE buf[48];
  __int128 v313;
  float64x2_t v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  char v319;
  uint8_t v320[32];
  float64x2_t v321[2];
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  float64x2_t v326;
  float64x2_t v327;
  uint64_t v328;

  v9 = a5;
  v10 = a4;
  v328 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(CATransform3D *)(a1 + 40) = CATransform3DIdentity;
  *(CATransform3D *)(a1 + 168) = CATransform3DIdentity;
  v309 = 0;
  if ((a6 & 1) != 0)
  {
    v14 = *(_QWORD *)(a2 + 168);
    if (v14)
    {
      v15 = *(_DWORD *)(v14 + 16);
      if (a5)
      {
        a4[a5] = v15;
        v9 = a5 + 1;
      }
      else
      {
        v309 = v15;
        v10 = &v309;
        v9 = 1;
      }
    }
  }
  v16 = (os_unfair_lock_s *)(a2 + 324);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 324));
  v17 = *(_QWORD *)(a2 + 328);
  if (!v17)
  {
    os_unfair_lock_unlock(v16);
    return;
  }
  v307 = a7;
  do
    v18 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v18 + 1, (unsigned int *)v17));
  os_unfair_lock_unlock(v16);
  v19 = CA::Render::HitTestTree::hit_test(v17, v10, (const char *)v9, *a3, a3[1]);
  if (!v19)
    goto LABEL_410;
  v21 = (unsigned int *)v19;
  v22 = (unsigned int *)v19;
  do
  {
    LODWORD(v23) = v22[6];
    if ((_DWORD)v23)
      break;
    v23 = *v22;
    v22 = (unsigned int *)((char *)v22 - v23);
  }
  while ((_DWORD)v23);
  v24 = *(_DWORD *)(v19 + 28);
  *(_DWORD *)a1 = v23;
  *(_DWORD *)(a1 + 4) = v24;
  if ((a6 & 2) != 0)
  {
    v25 = 1.0;
    v26 = (unsigned int *)v19;
    do
    {
      v25 = (float)(v25 * 0.0039216) * (float)*((unsigned __int8 *)v26 + 11);
      v27 = *v26;
      v26 = (unsigned int *)((char *)v26 - v27);
    }
    while ((_DWORD)v27);
    *(float *)(a1 + 32) = v25;
    if ((a6 & 0x10) == 0)
    {
LABEL_15:
      if (!v24)
        goto LABEL_123;
LABEL_28:
      if ((a6 & 0x10) != 0 && !*(_BYTE *)(a1 + 28))
      {
        v33 = (CA::Render::Layer *)*((_QWORD *)v21 + 2);
        if (v33)
          LOBYTE(v33) = CA::Render::Layer::has_hit_test_insecure_properties(v33, 1);
        *(_BYTE *)(a1 + 28) = (_BYTE)v33;
      }
      v34 = *((_QWORD *)v21 + 5);
      v321[0] = *((float64x2_t *)v21 + 2);
      v35 = HIDWORD(v321[0].f64[1]);
      v36 = HIDWORD(v321[0].f64[0]);
      v37 = LODWORD(v321[0].f64[0]);
      if (!v307)
        goto LABEL_50;
      v38 = v34 <= SHIDWORD(v321[0].f64[1]) ? HIDWORD(v321[0].f64[1]) : v34;
      v39 = v34 >= SHIDWORD(v321[0].f64[1]) ? HIDWORD(v321[0].f64[1]) : v34;
      if (v38 > 1073741822 || v39 < 1)
        goto LABEL_50;
      v41 = v307[1].i32[0];
      v42 = v307[1].i32[2];
      v43 = v307->i32[0];
      v44 = v307->i32[2];
      v37 = (LODWORD(v321[0].f64[0]) + v44);
      v36 = (HIDWORD(v321[0].f64[0]) + v307->i32[0]);
      LODWORD(v321[0].f64[0]) += v44;
      HIDWORD(v321[0].f64[0]) = v36;
      v34 -= v42 + v44;
      v35 = HIDWORD(v321[0].f64[1]) - (v41 + v43);
      *(_QWORD *)&v321[0].f64[1] = __PAIR64__(v35, v34);
      if (v34 < 1 || v35 <= 0)
      {
        v304 = 0;
        v34 = 0;
        v321[0].f64[1] = 0.0;
      }
      else
      {
LABEL_50:
        v304 = v35;
      }
      v46 = *v21;
      if ((_DWORD)v46)
        v47 = (int32x2_t *)((char *)v21 - v46);
      else
        v47 = 0;
      if (byte_1ECDC6AAF)
      {
        v296 = byte_1ECDC6AAF;
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v51 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_INFO))
          {
            v52 = v21[7];
            v53 = *((_QWORD *)v21 + 2);
            v54 = "No Name";
            if (v53)
            {
              v55 = *(_QWORD *)(v53 + 120);
              if (v55)
                v54 = (const char *)(v55 + 28);
            }
            *(_DWORD *)buf = 67110402;
            *(_DWORD *)&buf[4] = v52;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v37;
            *(_WORD *)&buf[14] = 1024;
            *(_DWORD *)&buf[16] = v36;
            *(_WORD *)&buf[20] = 1024;
            *(_DWORD *)&buf[22] = v34;
            *(_WORD *)&buf[26] = 1024;
            *(_DWORD *)&buf[28] = v304;
            *(_WORD *)&buf[32] = 2080;
            *(_QWORD *)&buf[34] = v54;
            _os_log_impl(&dword_184457000, v51, OS_LOG_TYPE_INFO, "Slot <%d> [%d %d %d %d] (%s) detected", buf, 0x2Au);
          }
        }
        v56 = *((_QWORD *)v21 + 1);
        if ((v56 & 0x40000000000) == 0)
        {
          if ((v56 & 0x20000000000000) != 0)
          {
            if (x_log_hook_p())
            {
LABEL_100:
              x_log_();
            }
            else
            {
              v72 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_INFO))
              {
                v73 = v21[7];
                *(_DWORD *)buf = 67110144;
                *(_DWORD *)&buf[4] = v73;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v37;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&buf[16] = v36;
                *(_WORD *)&buf[20] = 1024;
                *(_DWORD *)&buf[22] = v34;
                *(_WORD *)&buf[26] = 1024;
                *(_DWORD *)&buf[28] = v304;
                v74 = "Slot <%d> [%d %d %d %d] occluded by self border";
                v75 = v72;
                v76 = 32;
LABEL_106:
                _os_log_impl(&dword_184457000, v75, OS_LOG_TYPE_INFO, v74, buf, v76);
              }
            }
            goto LABEL_107;
          }
          v295 = v34;
          v50 = (int32x2_t *)v21;
          if ((_DWORD)v46)
            goto LABEL_72;
          v49 = 0;
LABEL_109:
          *(_DWORD *)(a1 + 24) = v49;
          if ((a6 & 4) == 0)
            goto LABEL_121;
          CA::Render::HitTestTree::Node::relative_transform_product((CA::Mat4Impl *)buf, v21, 0, v20);
          v77 = *(_OWORD *)&buf[16];
          v78 = *(_OWORD *)&buf[32];
          v79 = v313;
          *(_OWORD *)(a1 + 40) = *(_OWORD *)buf;
          *(_OWORD *)(a1 + 56) = v77;
          *(_OWORD *)(a1 + 72) = v78;
          *(_OWORD *)(a1 + 88) = v79;
          v80 = v315;
          v81 = v316;
          v82 = v317;
          *(float64x2_t *)(a1 + 104) = v314;
          *(_OWORD *)(a1 + 120) = v80;
          *(_OWORD *)(a1 + 136) = v81;
          *(_OWORD *)(a1 + 152) = v82;
          v83 = xmmword_18474DF40;
          v84 = 0uLL;
          *(_OWORD *)buf = xmmword_18474DF40;
          *(_OWORD *)&buf[16] = 0u;
          v85 = xmmword_18474DF50;
          *(_OWORD *)&buf[32] = xmmword_18474DF50;
          v313 = 0u;
          v314 = 0u;
          v315 = xmmword_18474DF40;
          v316 = 0u;
          __asm { FMOV            V0.2D, #1.0 }
          v317 = xmmword_18474DF50;
          v318 = _Q0;
          v319 &= 0xE0u;
          v89 = *((_QWORD *)v21 + 2);
          if (!v89)
            goto LABEL_119;
          v90 = *(_QWORD *)(v89 + 96);
          if (!v90)
            goto LABEL_119;
          v91 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 80))(v90);
          v85 = xmmword_18474DF50;
          v84 = 0uLL;
          v83 = xmmword_18474DF40;
          v93 = (CA::Render::Texture *)v91;
          if (v91)
          {
LABEL_113:
            v94 = (CA::Render::Layer *)*((_QWORD *)v21 + 2);
            if ((*((_BYTE *)v94 + 41) & 0x20) != 0)
            {
              v92.f64[0] = -1.0;
              CA::Transform::scale((float64x2_t *)buf, v92, 1.0, 1.0);
              v94 = (CA::Render::Layer *)*((_QWORD *)v21 + 2);
            }
            CA::Render::Layer::append_texture_transform(v94, (CA::Transform *)buf, v93, (CA::Render::Object *)v90);
            v96 = *(_OWORD *)buf;
            v95 = *(_OWORD *)&buf[16];
            v98 = *(_OWORD *)&buf[32];
            v97 = v313;
            v92 = v314;
            v83 = v315;
            v84 = v316;
            v85 = v317;
            goto LABEL_120;
          }
          if (*(_BYTE *)(v90 + 12) == 26)
          {
            v99 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v90 + 32) + 80))(*(_QWORD *)(v90 + 32));
            v85 = xmmword_18474DF50;
            v84 = 0uLL;
            v83 = xmmword_18474DF40;
            v93 = (CA::Render::Texture *)v99;
            v92 = 0uLL;
            v97 = 0uLL;
            v98 = xmmword_18474DF50;
            v95 = 0uLL;
            v96 = xmmword_18474DF40;
            if (v99)
              goto LABEL_113;
          }
          else
          {
LABEL_119:
            v92 = 0uLL;
            v97 = 0uLL;
            v98 = v85;
            v95 = 0uLL;
            v96 = v83;
          }
LABEL_120:
          *(_OWORD *)(a1 + 168) = v96;
          *(_OWORD *)(a1 + 184) = v95;
          *(_OWORD *)(a1 + 200) = v98;
          *(_OWORD *)(a1 + 216) = v97;
          *(float64x2_t *)(a1 + 232) = v92;
          *(_OWORD *)(a1 + 248) = v83;
          *(_OWORD *)(a1 + 264) = v84;
          *(_OWORD *)(a1 + 280) = v85;
LABEL_121:
          if ((a6 & 8) != 0)
            *(_OWORD *)(a1 + 8) = *((_OWORD *)v21 + 2);
          goto LABEL_123;
        }
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v70 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_INFO))
          {
            v71 = v21[7];
            *(_DWORD *)buf = 67110144;
            *(_DWORD *)&buf[4] = v71;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v37;
            *(_WORD *)&buf[14] = 1024;
            *(_DWORD *)&buf[16] = v36;
            *(_WORD *)&buf[20] = 1024;
            *(_DWORD *)&buf[22] = v34;
            *(_WORD *)&buf[26] = 1024;
            *(_DWORD *)&buf[28] = v304;
            _os_log_impl(&dword_184457000, v70, OS_LOG_TYPE_INFO, "Slot <%d> [%d %d %d %d] occluded by clipping", buf, 0x20u);
          }
        }
      }
      else
      {
        v48 = *((_QWORD *)v21 + 1);
        if ((v48 & 0x40000000000) == 0)
        {
          v296 = byte_1ECDC6AAF;
          if ((v48 & 0x20000000000000) != 0)
            v49 = 3;
          else
            v49 = 0;
          if ((v48 & 0x20000000000000) != 0)
            goto LABEL_109;
          v295 = v34;
          v50 = (int32x2_t *)v21;
          if (!(_DWORD)v46)
            goto LABEL_109;
          while (1)
          {
LABEL_72:
            v57 = v47;
            v58 = v47[1];
            if ((*(_QWORD *)&v58 & 0x20000000000000) != 0)
            {
              v59 = v47[2];
              if (v59)
              {
                v60 = *(_QWORD *)(*(_QWORD *)&v59 + 128);
                if (v60)
                {
                  v61 = *(float *)(v60 + 236);
                  if (v296 && v61 > 2.0)
                  {
                    if (x_log_hook_p())
                      goto LABEL_100;
                    v282 = x_log_category_render;
                    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_INFO))
                    {
                      v283 = v50[3].i32[1];
                      *(_DWORD *)buf = 67110400;
                      *(_DWORD *)&buf[4] = v283;
                      *(_WORD *)&buf[8] = 1024;
                      *(_DWORD *)&buf[10] = v37;
                      *(_WORD *)&buf[14] = 1024;
                      *(_DWORD *)&buf[16] = v36;
                      *(_WORD *)&buf[20] = 1024;
                      *(_DWORD *)&buf[22] = v295;
                      *(_WORD *)&buf[26] = 1024;
                      *(_DWORD *)&buf[28] = v304;
                      *(_WORD *)&buf[32] = 2048;
                      *(int32x2_t *)&buf[34] = v59;
                      v74 = "Slot <%d> [%d %d %d %d] occluded by border of parent layer <%p>";
                      v75 = v282;
                      v76 = 42;
                      goto LABEL_106;
                    }
LABEL_107:
                    v49 = 3;
                    goto LABEL_109;
                  }
                  if (v61 > 2.0)
                    goto LABEL_107;
                }
              }
            }
            v299 = v37;
            v62 = v36;
            v63 = (int32x2_t *)((char *)v57 + v58.u8[4]);
            v64 = v21;
            if ((*(_QWORD *)&v58 & 0x800000000000) != 0)
              v63 = (int32x2_t *)((char *)v63 + v63->i32[1]);
            _ZF = (*(_QWORD *)&v58 & 0xFFFFFFLL) == 0 || v63 == v50;
            if (!_ZF)
            {
              v66 = 1;
              while ((CA::Render::HitTestTree::Node::subtree_occludes_slot(v63, v50[3].u32[1], (int32x2_t *)v321) & 1) == 0)
              {
                v63 = (int32x2_t *)((char *)v63 + v63->i32[1]);
                _CF = v66++ >= (v57[1].i32[0] & 0xFFFFFFu);
                if (_CF || v63 == v50)
                  goto LABEL_91;
              }
              v49 = 1;
              v21 = v64;
              goto LABEL_109;
            }
LABEL_91:
            v49 = 0;
            v69 = v57->u32[0];
            if ((_DWORD)v69)
              v47 = (int32x2_t *)((char *)v57 - v69);
            else
              v47 = 0;
            v50 = v57;
            v21 = v64;
            v36 = v62;
            v37 = v299;
            if (!(_DWORD)v69)
              goto LABEL_109;
          }
        }
      }
      v49 = 2;
      goto LABEL_109;
    }
  }
  else if ((a6 & 0x10) == 0)
  {
    goto LABEL_15;
  }
  v28 = (unsigned int *)v19;
  while (1)
  {
    v29 = *((_QWORD *)v28 + 1);
    if ((v29 & 0x400000000000) != 0)
      break;
    v30 = *v28;
    v28 = (unsigned int *)((char *)v28 - v30);
    if (!(_DWORD)v30)
    {
      v31 = (unsigned int *)v19;
      v32 = 0;
      goto LABEL_27;
    }
  }
  v31 = (unsigned int *)v19;
  v32 = v29 & 0x400000000000;
  if (byte_1ECDC6AAF)
    CA::Render::print_hit_test(*((CA::Render **)v28 + 2), (const CA::Render::Layer *)"detected", "filters", (const char *)v20);
LABEL_27:
  *(_BYTE *)(a1 + 28) = v32 >> 46;
  v21 = v31;
  if (v24)
    goto LABEL_28;
LABEL_123:
  if ((a6 & 0x20) == 0)
    goto LABEL_410;
  v300 = v21;
  v100 = byte_1ECDC6B02;
  if (!*(_DWORD *)(v17 + 48))
  {
    if (!byte_1ECDC6B02)
      goto LABEL_410;
    if (x_log_hook_p())
      goto LABEL_403;
    v208 = x_log_category_security_analysis;
    if (!os_log_type_enabled((os_log_t)x_log_category_security_analysis, OS_LOG_TYPE_INFO))
      goto LABEL_410;
    *(_WORD *)buf = 0;
    v209 = "Security Analysis requested but no context labeled as needing secure superlayers";
    goto LABEL_408;
  }
  if (!byte_1ECDC6B02)
  {
    secure_superlayers_validation_start_node = CA::Render::HitTestTree::get_secure_superlayers_validation_start_node(v17, v300);
    if (!secure_superlayers_validation_start_node)
      goto LABEL_410;
    v104 = (int8x16_t *)secure_superlayers_validation_start_node;
    v105 = *secure_superlayers_validation_start_node;
    if (!(_DWORD)v105)
      goto LABEL_410;
    v291 = 0;
    v106 = (unsigned int *)((char *)secure_superlayers_validation_start_node - v105);
LABEL_167:
    v124 = 1;
    v125 = (int32x2_t *)v104;
    do
    {
      if (v124)
      {
        v126 = v125[2];
        if (v126)
        {
          v127 = *(uint64_t **)(*(_QWORD *)&v126 + 128);
          if (v127)
          {
            v128 = *v127;
            if (*v127)
            {
              v129 = *(_DWORD *)(v128 + 12);
              if (v129 == 40)
              {
                v131 = *(_QWORD *)(v128 + 56);
                if (v131 && (*(_BYTE *)(v131 + 13) & 0x10) != 0)
                  goto LABEL_183;
              }
              else if (v129 == 30)
              {
                v130 = *(_QWORD *)(v128 + 80);
                if (v130)
                {
                  if (*(_WORD *)(v130 + 552) & 0x20 | v129 & 0x10000)
                    goto LABEL_183;
                }
                else if ((v129 & 0x10000) != 0)
                {
                  goto LABEL_183;
                }
              }
            }
          }
        }
      }
      v124 = v125[3].i32[0] != 0;
      v132 = v125->u32[0];
      v125 = (int32x2_t *)((char *)v125 - v132);
    }
    while ((_DWORD)v132);
    v125 = 0;
LABEL_183:
    v133 = byte_1ECDC6B02;
    v134 = xmmword_18474DF40;
    v135 = 0uLL;
    *(_OWORD *)buf = xmmword_18474DF40;
    *(_OWORD *)&buf[16] = 0u;
    v136 = xmmword_18474DF50;
    *(_OWORD *)&buf[32] = xmmword_18474DF50;
    v313 = 0u;
    v314 = 0u;
    v315 = xmmword_18474DF40;
    v316 = 0u;
    v317 = xmmword_18474DF50;
    if (v106 != (unsigned int *)v125)
    {
      v137 = v106;
      v138 = 0;
      v139 = 0;
      v305 = 0;
      v298 = 0;
      v140 = 1.0;
      v141 = 0.0039216;
      v142 = 1.0;
      v292 = v106;
      v143 = 1.0;
      while (1)
      {
        if (v138)
        {
          v138 = v137[6] == 0;
          if ((v139 & 1) == 0)
            goto LABEL_187;
        }
        else
        {
          v145 = v137;
          while (1)
          {
            v146 = v145[6];
            if (v146)
              break;
            v147 = *v145;
            v145 = (unsigned int *)((char *)v145 - v147);
            if (!(_DWORD)v147)
            {
              v146 = 0;
              break;
            }
          }
          v148 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)(v17 + 24), v146);
          v138 = v137[6] == 0;
          if (!v148)
          {
LABEL_187:
            v144 = (float)*((unsigned __int8 *)v137 + 11) * v141;
            if (v133 && v144 < v140)
            {
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                v149 = x_log_category_security_analysis;
                if (os_log_type_enabled((os_log_t)x_log_category_security_analysis, OS_LOG_TYPE_INFO))
                {
                  v150 = *((_QWORD *)v137 + 2);
                  if (v150)
                  {
                    v151 = *(_QWORD *)(v150 + 120);
                    v152 = (const char *)(v151 + 28);
                    _ZF = v151 == 0;
                    v153 = "No Name";
                    if (!_ZF)
                      v153 = v152;
                  }
                  else
                  {
                    v153 = "No Name";
                  }
                  LODWORD(v321[0].f64[0]) = 134218498;
                  *(_QWORD *)((char *)v321[0].f64 + 4) = v150;
                  WORD2(v321[0].f64[1]) = 2080;
                  *(_QWORD *)((char *)&v321[0].f64[1] + 6) = v153;
                  HIWORD(v321[1].f64[0]) = 2048;
                  v321[1].f64[1] = v144;
                  _os_log_impl(&dword_184457000, v149, OS_LOG_TYPE_INFO, "Insecure Layer <%p> <%s> (opacity %f)", (uint8_t *)v321, 0x20u);
                }
              }
            }
            v154.f64[1] = 0.0;
            v321[0] = (float64x2_t)xmmword_18474DF40;
            v321[1] = 0u;
            v322 = xmmword_18474DF50;
            v323 = 0u;
            v324 = 0u;
            v325 = xmmword_18474DF40;
            v326 = 0u;
            v327 = (float64x2_t)xmmword_18474DF50;
            if (v137 == v292)
            {
              v187 = *((_QWORD *)v292 + 2);
              if (v187)
              {
                v188 = *(_QWORD *)(v187 + 128);
                if (v188)
                {
                  v189 = *(_QWORD *)(v188 + 24);
                  if (v189)
                  {
                    v288 = v143;
                    v190 = *(double *)(v188 + 184);
                    v191 = v141;
                    v192 = *(double *)(v187 + 64) + *(double *)(v188 + 168) * *(double *)(v187 + 80);
                    v193 = v144;
                    v194 = *(double *)(v187 + 72) + *(double *)(v188 + 176) * *(double *)(v187 + 88);
                    v154.f64[0] = -v192;
                    CA::Mat4Impl::mat4_translate_right((float64x2_t *)buf, v102, v154, -v194, -v190);
                    if (*(_DWORD *)(v189 + 16) <= 0xFu)
                      v196 = (const double *)&CA::Mat4Impl::mat4_identity_double;
                    else
                      v196 = (const double *)(v189 + 24);
                    v197 = CA::Mat4Impl::mat4_concat((float64x2_t *)buf, (double *)buf, v196, v195);
                    v197.f64[0] = v192;
                    v142 = 1.0;
                    v141 = v191;
                    v140 = 1.0;
                    v198 = v194;
                    v144 = v193;
                    v199 = v190;
                    v143 = v288;
                    CA::Mat4Impl::mat4_translate_right((float64x2_t *)buf, v200, v197, v198, v199);
                  }
                }
              }
            }
            v155 = *((_QWORD *)v137 + 1);
            if ((v155 & 0x8000000000000) != 0)
            {
              v156 = *((float64x2_t *)v137 + 6);
              v157 = *((_OWORD *)v137 + 7);
              v158 = *((_OWORD *)v137 + 8);
              v301 = *((float64x2_t *)v137 + 5);
              v321[0] = v301;
              v321[1] = v156;
              v322 = v157;
              v323 = v158;
              v159 = *((_OWORD *)v137 + 10);
              v160 = *((float64x2_t *)v137 + 11);
              v161 = *((float64x2_t *)v137 + 12);
              v324 = *((_OWORD *)v137 + 9);
              v325 = v159;
              v326 = v160;
              v327 = v161;
            }
            else
            {
              v301.f64[0] = 1.0;
              if ((v155 & 0x10000000000000) != 0)
              {
                v162 = *((double *)v137 + 10);
                v163 = *((double *)v137 + 11);
                v326 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_18474DF50, v163), (float64x2_t)xmmword_18474DF40, v162);
                v327 = vmlaq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_18474DF50, (float64x2_t)0, v162), (float64x2_t)0, v163);
              }
            }
            CA::Mat4Impl::mat4_concat((float64x2_t *)buf, (double *)buf, v321[0].f64, v103);
            if (v133)
            {
              if (v301.f64[0] == v142)
              {
                v164 = 1;
                while (v164 != 16)
                {
                  v165 = v164;
                  v166 = v321[0].f64[v164];
                  v167 = *((double *)&CA::Mat4Impl::mat4_identity_double + v164++);
                  if (v166 != v167)
                  {
                    if ((unint64_t)(v165 - 1) <= 0xE)
                      goto LABEL_212;
                    break;
                  }
                }
              }
              else
              {
LABEL_212:
                if (x_log_hook_p())
                {
                  x_log_();
                }
                else
                {
                  v168 = x_log_category_security_analysis;
                  if (os_log_type_enabled((os_log_t)x_log_category_security_analysis, OS_LOG_TYPE_INFO))
                  {
                    v169 = *((_QWORD *)v137 + 2);
                    if (v169)
                    {
                      v170 = *(_QWORD *)(v169 + 120);
                      v171 = (const char *)(v170 + 28);
                      _ZF = v170 == 0;
                      v172 = "No Name";
                      if (!_ZF)
                        v172 = v171;
                    }
                    else
                    {
                      v172 = "No Name";
                    }
                    *(_DWORD *)v320 = 134218242;
                    *(_QWORD *)&v320[4] = v169;
                    *(_WORD *)&v320[12] = 2080;
                    *(_QWORD *)&v320[14] = v172;
                    _os_log_impl(&dword_184457000, v168, OS_LOG_TYPE_INFO, "Insecure Layer <%p> <%s> (non identity transform)", v320, 0x16u);
                  }
                }
              }
              if ((*((_BYTE *)v137 + 13) & 0x40) != 0)
              {
                if (x_log_hook_p())
                {
                  x_log_();
                  v298 = 1;
                }
                else
                {
                  v173 = x_log_category_security_analysis;
                  v298 = 1;
                  if (os_log_type_enabled((os_log_t)x_log_category_security_analysis, OS_LOG_TYPE_INFO))
                  {
                    v174 = *((_QWORD *)v137 + 2);
                    if (v174)
                    {
                      v175 = *(_QWORD *)(v174 + 120);
                      v176 = (const char *)(v175 + 28);
                      _ZF = v175 == 0;
                      v177 = "No Name";
                      if (!_ZF)
                        v177 = v176;
                    }
                    else
                    {
                      v177 = "No Name";
                    }
                    *(_DWORD *)v320 = 134218242;
                    *(_QWORD *)&v320[4] = v174;
                    *(_WORD *)&v320[12] = 2080;
                    *(_QWORD *)&v320[14] = v177;
                    v298 = 1;
                    _os_log_impl(&dword_184457000, v173, OS_LOG_TYPE_INFO, "Insecure Layer <%p> <%s> (insecure filters)", v320, 0x16u);
                  }
                }
              }
            }
            else
            {
              v298 |= (*((_BYTE *)v137 + 13) & 0x40) >> 6;
            }
            v178 = (CA::Render::Layer *)*((_QWORD *)v137 + 2);
            if (v178)
            {
              has_hit_test_insecure_properties = CA::Render::Layer::has_hit_test_insecure_properties(v178, 0);
              v305 |= has_hit_test_insecure_properties;
              if (v133)
              {
                if (has_hit_test_insecure_properties)
                {
                  if (x_log_hook_p())
                  {
                    x_log_();
                    v305 = 1;
                  }
                  else
                  {
                    v180 = x_log_category_security_analysis;
                    v305 = 1;
                    if (os_log_type_enabled((os_log_t)x_log_category_security_analysis, OS_LOG_TYPE_INFO))
                    {
                      v181 = *((_QWORD *)v137 + 2);
                      if (v181)
                      {
                        v182 = *(_QWORD *)(v181 + 120);
                        v183 = (const char *)(v182 + 28);
                        _ZF = v182 == 0;
                        v184 = "No Name";
                        if (!_ZF)
                          v184 = v183;
                      }
                      else
                      {
                        v184 = "No Name";
                      }
                      *(_DWORD *)v320 = 134218242;
                      *(_QWORD *)&v320[4] = v181;
                      *(_WORD *)&v320[12] = 2080;
                      *(_QWORD *)&v320[14] = v184;
                      v305 = 1;
                      _os_log_impl(&dword_184457000, v180, OS_LOG_TYPE_INFO, "Insecure Layer <%p> <%s> (insecure properties)", v320, 0x16u);
                    }
                  }
                }
              }
            }
            v139 = 0;
            v143 = v144 * v143;
            goto LABEL_250;
          }
        }
        v139 = 1;
LABEL_250:
        v185 = *v137;
        if ((_DWORD)v185)
          v137 = (unsigned int *)((char *)v137 - v185);
        else
          v137 = 0;
        if ((_DWORD)v185)
          v186 = v137 == (unsigned int *)v125;
        else
          v186 = 1;
        if (v186)
        {
          v202 = *(_OWORD *)buf;
          v201 = *(_OWORD *)&buf[16];
          v204 = *(_OWORD *)&buf[32];
          v203 = v313;
          v205 = v314;
          v134 = v315;
          v135 = v316;
          v136 = v317;
          v206 = v298;
          v207 = v305;
          goto LABEL_275;
        }
      }
    }
    v206 = 0;
    v207 = 0;
    v143 = 1.0;
    v205 = 0uLL;
    v203 = 0uLL;
    v204 = xmmword_18474DF50;
    v201 = 0uLL;
    v202 = xmmword_18474DF40;
LABEL_275:
    *(float *)(a1 + 308) = v143;
    *(_OWORD *)(a1 + 312) = v202;
    *(_OWORD *)(a1 + 328) = v201;
    *(_OWORD *)(a1 + 344) = v204;
    *(_OWORD *)(a1 + 360) = v203;
    *(float64x2_t *)(a1 + 376) = v205;
    *(_OWORD *)(a1 + 392) = v134;
    *(_OWORD *)(a1 + 408) = v135;
    *(_OWORD *)(a1 + 424) = v136;
    *(_BYTE *)(a1 + 440) = v206 & 1;
    *(_BYTE *)(a1 + 441) = v207 & 1;
    v211 = v104[2];
    v311 = v211;
    v212 = v211.i32[3];
    if (v307)
    {
      v213 = v211.i32[2];
      if (v211.i32[2] <= v211.i32[3])
        v214 = v211.i32[3];
      else
        v214 = v211.i32[2];
      if (v211.i32[2] >= v211.i32[3])
        v213 = v211.i32[3];
      if (v214 <= 1073741822 && v213 >= 1)
      {
        v215 = vmovn_s64(*v307);
        v216 = vadd_s32(vmovn_s64(v307[1]), v215);
        v217 = vadd_s32(*(int32x2_t *)v211.i8, vrev64_s32(v215));
        v218 = vsub_s32(vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v211, v211, 8uLL)), v216);
        v219 = (int8x8_t)vrev64_s32(v218);
        v221 = v218.i32[1] < 1 || v218.i32[0] < 1;
        v222 = !v221;
        if (v221)
          v223 = -1;
        else
          v223 = 0;
        *(int32x2_t *)v311.i8 = v217;
        v311.u64[1] = (unint64_t)vbic_s8(v219, (int8x8_t)vdup_n_s32(v223));
        if (v222)
          v212 = v218.i32[0];
        else
          v212 = 0;
      }
    }
    v306 = v207;
    v224 = v104->u32[0];
    if ((_DWORD)v224)
      v225 = (int32x2_t *)((char *)v104 - v224);
    else
      v225 = 0;
    v226 = v104->u64[1];
    if ((v226 & 0x40000000000) != 0)
    {
      v228 = *(double *)((char *)v104[5].i64 + ((uint64_t)(((v226 >> 3) & 0x1F00000000) - 0xB00000000) >> 29));
      v227 = 4;
    }
    else
    {
      v227 = 0;
      v228 = 0.0;
    }
    v230 = CA::Shape::new_shape((CA::Shape *)&v311, (const CA::Bounds *)v102);
    v310 = (CA::Shape *)v230;
    if (!(_DWORD)v224 || v225 == v125)
    {
LABEL_385:
      if ((v230 & 1) == 0 && *(int *)(v230 + 4) > 256)
        LOBYTE(v227) = v227 | 0x10;
      v271 = (float)CA::Shape::area((CA::Shape *)v230);
      v272 = (float)(v212 * v311.i32[2]);
      if ((v104->i8[13] & 4) != 0 && v228 < 1.0)
        v272 = v272 / (float)(1.0 - v228);
      if ((float)(v271 - v272) > 0.01)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v284 = x_log_category_security_analysis;
          if (os_log_type_enabled((os_log_t)x_log_category_security_analysis, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(double *)&buf[4] = v271;
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = v272;
            _os_log_impl(&dword_184457000, v284, OS_LOG_TYPE_ERROR, "Error: Unoccluded area (%f) is larger than original area (%f)", buf, 0x16u);
          }
        }
      }
      v273 = 1.0 - (float)(v271 / v272);
      v274 = v273 > 1.0 || v273 < 0.0;
      if (v273 < 0.0 && v273 <= 1.0)
        *(float *)&v275 = 0.0;
      else
        *(float *)&v275 = 1.0;
      if (v274)
        v276 = *(float *)&v275;
      else
        v276 = 1.0 - (float)(v271 / v272);
      CA::Shape::unref((CA::Shape *)v230);
      *(_BYTE *)(a1 + 442) = v227;
      *(float *)(a1 + 444) = v276;
      *(_BYTE *)(a1 + 448) = 1;
      if (!v291)
        goto LABEL_410;
      if (x_log_hook_p())
        goto LABEL_403;
      v277 = x_log_category_security_analysis;
      if (!os_log_type_enabled((os_log_t)x_log_category_security_analysis, OS_LOG_TYPE_INFO))
        goto LABEL_410;
      *(_DWORD *)buf = 134219008;
      *(double *)&buf[4] = v143;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v206 & 1;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v306 & 1;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v227;
      *(_WORD *)&buf[30] = 2048;
      *(double *)&buf[32] = (float)(v276 * 100.0);
      v209 = "Security Results [opacity: %f] [insecure filtered: %d] [insecure properties: %d] [occlusion: %d (%.2f%% occluded)]";
      v278 = v277;
      v279 = 40;
      goto LABEL_409;
    }
    v302 = (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL);
    v303 = (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000);
    v308 = v104;
    while (1)
    {
      v231 = v225;
      v232 = v225[1];
      if ((*(_QWORD *)&v232 & 0x20000000000000) == 0)
        goto LABEL_332;
      if ((v310 & 1) != 0 || *((int *)v310 + 1) < 257)
      {
        v233 = v225[2];
        if (!*(_QWORD *)&v233)
          goto LABEL_331;
        v234 = *(_QWORD *)(*(_QWORD *)&v233 + 128);
        if (!v234)
          goto LABEL_331;
        v235 = *(float *)(v234 + 236);
        if (v235 < 2.0)
          goto LABEL_331;
        v236 = v225[7];
        v237 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v236);
        v212 = v311.i32[3];
        if ((vpmax_u32(v237, v237).u32[0] & 0x80000000) != 0)
          goto LABEL_331;
        v238 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v311.u64[1]);
        if ((vpmax_u32(v238, v238).u32[0] & 0x80000000) != 0)
          goto LABEL_331;
        v239 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, vsub_s32(vmin_s32(vadd_s32(v225[6], v236), vadd_s32(*(int32x2_t *)v311.i8, (int32x2_t)v311.u64[1])), vmax_s32(v225[6], *(int32x2_t *)v311.i8)));
        if ((vpmax_u32(v239, v239).u32[0] & 0x80000000) != 0)
          goto LABEL_331;
        v293 = v311.i64[0];
        v294 = v311.i32[2];
        v241 = (int)v225[7];
        v321[0] = *(float64x2_t *)v225[6].i8;
        v240 = HIDWORD(v321[0].f64[1]);
        if (SLODWORD(v321[0].f64[1]) <= SHIDWORD(v321[0].f64[1]))
          v242 = HIDWORD(v321[0].f64[1]);
        else
          v242 = v241;
        if (SLODWORD(v321[0].f64[1]) >= SHIDWORD(v321[0].f64[1]))
          v243 = HIDWORD(v321[0].f64[1]);
        else
          v243 = v241;
        if (v242 <= 1073741822 && v243 >= 1)
        {
          *(int32x2_t *)&v321[0].f64[0] = vadd_s32(*(int32x2_t *)&v321[0].f64[0], vdup_n_s32((int)v235));
          LODWORD(v321[0].f64[1]) = v241 - 2 * (int)v235;
          HIDWORD(v321[0].f64[1]) -= 2 * (int)v235;
          if (SLODWORD(v321[0].f64[1]) < 1 || v240 - 2 * (int)v235 <= 0)
            v321[0].f64[1] = 0.0;
        }
        if (CA::BoundsImpl::contains(v321, &v311))
          goto LABEL_331;
        *(_QWORD *)v320 = CA::Shape::new_shape((CA::Shape *)&v225[6], v246);
        CA::shape_subtract((CA::Shape **)v320, (CA::Shape **)v321, v253);
        v254 = *(CA::Shape **)v320;
        CA::shape_subtract(&v310, *(CA::Shape ***)v320, v255, v256);
        CA::Shape::unref(v254);
        if (byte_1ECDC6B02)
        {
          if (x_log_hook_p())
          {
            CA::Shape::area(v310);
            x_log_();
          }
          else
          {
            log = x_log_category_security_analysis;
            if (os_log_type_enabled((os_log_t)x_log_category_security_analysis, OS_LOG_TYPE_INFO))
            {
              v265 = v231[2];
              if (v265)
              {
                v266 = *(_QWORD *)(*(_QWORD *)&v265 + 120);
                v267 = (const char *)(v266 + 28);
                _ZF = v266 == 0;
                v268 = "No Name";
                if (!_ZF)
                  v268 = v267;
              }
              else
              {
                v268 = "No Name";
              }
              v289 = v268;
              v269 = v231[6].u32[0];
              v285 = v231[6].u32[1];
              v286 = v231[7].u32[0];
              v287 = v231[7].u32[1];
              v270 = CA::Shape::area(v310);
              *(_DWORD *)buf = 136317954;
              *(_QWORD *)&buf[4] = v289;
              *(_WORD *)&buf[12] = 2048;
              *(int32x2_t *)&buf[14] = v265;
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = v269;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v285;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v286;
              *(_WORD *)&buf[40] = 1024;
              *(_DWORD *)&buf[42] = v287;
              *(_WORD *)&buf[46] = 2048;
              *(double *)&v313 = v235;
              WORD4(v313) = 1024;
              *(_DWORD *)((char *)&v313 + 10) = v293;
              HIWORD(v313) = 1024;
              LODWORD(v314.f64[0]) = HIDWORD(v293);
              WORD2(v314.f64[0]) = 1024;
              *(_DWORD *)((char *)v314.f64 + 6) = v294;
              WORD1(v314.f64[1]) = 1024;
              HIDWORD(v314.f64[1]) = v212;
              LOWORD(v315) = 2048;
              *(_QWORD *)((char *)&v315 + 2) = v270;
              _os_log_impl(&dword_184457000, log, OS_LOG_TYPE_INFO, "Layer (%s) <%p> [%d %d %d %d] has border width %f that occludes view [%d %d %d %d] unoccluded area is now %ld", buf, 0x5Au);
            }
          }
        }
      }
      v227 |= 8u;
LABEL_331:
      v232 = v231[1];
LABEL_332:
      v247 = (int32x2_t *)((char *)v231 + v232.u8[4]);
      CA::Render::Update::subtract_corner_radii_clipping_from_shape(*(_QWORD *)&v231[2], &v310, v229);
      v248 = v231[1];
      if ((*(_QWORD *)&v248 & 0x800000000000) != 0)
      {
        v249 = (uint64_t)v247[2];
        if (!v249)
          goto LABEL_356;
        v250 = *(_QWORD *)(v249 + 128);
        if (!v250)
          goto LABEL_354;
        if (*(_QWORD *)(v250 + 96) || *(_QWORD *)(v250 + 112))
        {
LABEL_337:
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          v251 = (CA::Shape **)buf;
          goto LABEL_338;
        }
        v252 = *(_QWORD *)v250;
        if (*(_QWORD *)v250)
        {
          if (*(_BYTE *)(v252 + 12) == 46)
          {
            if (!*(_QWORD *)(v252 + 16)
              || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(*(float32x4_t *)(v252 + 24))))) & 1) == 0
              && !*(_QWORD *)(v252 + 40))
            {
              goto LABEL_337;
            }
            goto LABEL_353;
          }
          memset(buf, 0, 32);
          memset(v321, 0, sizeof(v321));
          if ((*(unsigned int (**)(uint64_t, uint64_t, _BYTE *, float64x2_t *))(*(_QWORD *)v252 + 184))(v252, v249, buf, v321))
          {
            v257 = vceqzq_f64(v321[1]);
            if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v257, 1), (int8x16_t)v257).u64[0] & 0x8000000000000000) != 0
              || (v258 = vorrq_s8((int8x16_t)vcltzq_f64(v321[1]), (int8x16_t)vcgezq_f64(v321[1])),
                  (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v258), 1), v258).u64[0] & 0x8000000000000000) != 0))
            {
              *(_QWORD *)v320 = 0;
              *(_QWORD *)&v320[8] = 0;
            }
            else
            {
              v259 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v321[0], v303));
              *(int32x4_t *)v320 = vuzp1q_s32(v259, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v321[0], v321[1]), v302)), (int64x2_t)v259));
            }
            v251 = (CA::Shape **)v320;
LABEL_338:
            CA::shape_intersect(&v310, v251, (const CA::Bounds *)v229);
LABEL_356:
            v247 = (int32x2_t *)((char *)v247 + v247->i32[1]);
            v248 = v231[1];
            goto LABEL_357;
          }
          v250 = *(_QWORD *)(v249 + 128);
          if (v250)
            goto LABEL_353;
LABEL_354:
          CA::Render::Layer::max_corner_radii(v250);
          if (v260 <= 0.0)
            goto LABEL_356;
        }
        else
        {
LABEL_353:
          if (*(float *)(v250 + 228) <= 0.0)
            goto LABEL_354;
        }
        CA::Render::Update::subtract_corner_radii_clipping_from_shape(v249, &v310, v229);
        goto LABEL_356;
      }
LABEL_357:
      if ((*(_QWORD *)&v248 & 0xFFFFFFLL) != 0 && v247 != (int32x2_t *)v104)
      {
        v262 = 1;
        do
        {
          if (CA::Render::HitTestTree::Node::subtract_subtree_occlusion_from_shape(v247, (int32x2_t *)&v311, &v310))v227 |= 2u;
          v247 = (int32x2_t *)((char *)v247 + v247->i32[1]);
          _CF = v262++ >= (v231[1].i32[0] & 0xFFFFFFu);
        }
        while (!_CF && v247 != (int32x2_t *)v104);
      }
      v264 = v231->u32[0];
      if ((_DWORD)v264)
        v225 = (int32x2_t *)((char *)v231 - v264);
      else
        v225 = 0;
      if ((_DWORD)v264)
      {
        v104 = (int8x16_t *)v231;
        if (v225 != v125)
          continue;
      }
      v230 = (unint64_t)v310;
      v104 = v308;
      goto LABEL_385;
    }
  }
  x_log_begin();
  v291 = v100;
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v107 = x_log_category_security_analysis;
    if (os_log_type_enabled((os_log_t)x_log_category_security_analysis, OS_LOG_TYPE_INFO))
    {
      v108 = *(_QWORD *)(v17 + 48);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v108;
      _os_log_impl(&dword_184457000, v107, OS_LOG_TYPE_INFO, "%zu start ctxs [", buf, 0xCu);
    }
  }
  for (i = *(uint64_t **)(v17 + 40); i; i = (uint64_t *)*i)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v110 = x_log_category_security_analysis;
      if (os_log_type_enabled((os_log_t)x_log_category_security_analysis, OS_LOG_TYPE_INFO))
      {
        v111 = *((_DWORD *)i + 4);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v111;
        _os_log_impl(&dword_184457000, v110, OS_LOG_TYPE_INFO, " %x;", buf, 8u);
      }
    }
  }
  v297 = (void **)x_stream_pop_(0);
  v112 = x_stream_get(v297);
  v113 = 0;
  while (2)
  {
    v114 = 0;
    v115 = &v112[v113];
    v116 = -1;
    while (1)
    {
      if (v115[v114] == 10)
      {
        v116 = v114;
        goto LABEL_148;
      }
      if (!v115[v114])
        break;
LABEL_148:
      ++v114;
      v117 = 32512;
      if (v114 == 32512)
        goto LABEL_149;
    }
    v117 = v114;
LABEL_149:
    if (v116 <= -1 || v115[v117] == 0)
      v119 = v117;
    else
      v119 = v116 + 1;
    if (v119 >= 1)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v120 = x_log_category_security_analysis;
        if (os_log_type_enabled((os_log_t)x_log_category_security_analysis, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          if (v113)
            v121 = "continued...\n";
          else
            v121 = "";
          *(_QWORD *)&buf[4] = v121;
          *(_WORD *)&buf[12] = 1040;
          *(_DWORD *)&buf[14] = v119;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = &v112[v113];
          _os_log_impl(&dword_184457000, v120, OS_LOG_TYPE_INFO, "%s%.*s", buf, 0x1Cu);
        }
      }
      v113 += v119;
      continue;
    }
    break;
  }
  x_log_end_free_(v297);
  v122 = CA::Render::HitTestTree::get_secure_superlayers_validation_start_node(v17, v300);
  if (v122)
  {
    v104 = (int8x16_t *)v122;
    v123 = *v122;
    if ((_DWORD)v123)
    {
      v106 = (unsigned int *)((char *)v122 - v123);
      goto LABEL_167;
    }
    if (x_log_hook_p())
    {
      do
      {
        if (v104[1].i32[2])
          break;
        v210 = v104->u32[0];
        v104 = (int8x16_t *)((char *)v104 - v210);
      }
      while ((_DWORD)v210);
LABEL_403:
      x_log_();
      goto LABEL_410;
    }
    v280 = x_log_category_security_analysis;
    if (!os_log_type_enabled((os_log_t)x_log_category_security_analysis, OS_LOG_TYPE_INFO))
      goto LABEL_410;
    do
    {
      LODWORD(v281) = v104[1].i32[2];
      if ((_DWORD)v281)
        break;
      v281 = v104->u32[0];
      v104 = (int8x16_t *)((char *)v104 - v281);
    }
    while ((_DWORD)v281);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v281;
    v209 = "Nothing above start ctx [%x] to test";
    v278 = v280;
    v279 = 8;
LABEL_409:
    _os_log_impl(&dword_184457000, v278, OS_LOG_TYPE_INFO, v209, buf, v279);
    goto LABEL_410;
  }
  if (x_log_hook_p())
    goto LABEL_403;
  v208 = x_log_category_security_analysis;
  if (os_log_type_enabled((os_log_t)x_log_category_security_analysis, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    v209 = "no secure ctxs were hit";
LABEL_408:
    v278 = v208;
    v279 = 2;
    goto LABEL_409;
  }
LABEL_410:
  CA::Render::HitTestTree::unref((CA::Render::HitTestTree *)v17);
}

uint64_t CA::Render::HitTestTree::hit_test(uint64_t a1, int *a2, const char *a3, CGFloat a4, CGFloat a5)
{
  uint64_t v10;
  NSObject *v12;
  NSObject *v13;
  double v14;
  uint8_t buf[4];
  CGFloat v16;
  __int16 v17;
  CGFloat v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (byte_1ECDC6AAF)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v12 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        v16 = a4;
        v17 = 2048;
        v18 = a5;
        _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_DEFAULT, "HitTest: start at: (%g, %g)", buf, 0x16u);
      }
    }
  }
  v10 = CA::Render::HitTestTree::hit_test_node(a1, *(_QWORD *)(a1 + 16), a2, a3, a4, a5);
  if (byte_1ECDC6AAF)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v13 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v14 = *(double *)(v10 + 16);
        *(_DWORD *)buf = 134217984;
        v16 = v14;
        _os_log_impl(&dword_184457000, v13, OS_LOG_TYPE_DEFAULT, "HitTest: end - layer %p", buf, 0xCu);
      }
    }
  }
  return v10;
}

uint64_t CA::Render::HitTestTree::hit_test_node(uint64_t a1, uint64_t a2, int *a3, const char *a4, CGFloat a5, CGFloat a6)
{
  uint64_t v10;
  uint64_t v12;
  const double *v13;
  const char *v14;
  unint64_t v15;
  int v16;
  BOOL v17;
  const char *v18;
  int *v19;
  int v20;
  CGSize v21;
  unsigned int v22;
  const char *v23;
  double *v24;
  CGFloat v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  CA::Render *v33;
  unsigned int v34;
  CGPoint v35;
  uint64_t v36;
  double v37;
  BOOL v39;
  BOOL v40;
  const char *v42;
  uint64_t v43;
  double v44;
  double y;
  double v46;
  double v47;
  BOOL v48;
  BOOL v49;
  CA::Render::LayerHost **v51;
  CA::Render::LayerHost *v52;
  uint64_t v53;
  CA::Render::HitTestTree *v54;
  uint64_t *v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  NSObject *v60;
  CGFloat v61;
  int v62;
  double x;
  CGRect v64;
  CGRect v65;
  CGPoint v66;
  CGRect buf;
  __int16 v68;
  const char *v69;
  __int16 v70;
  const char *v71;
  uint64_t v72;

  v10 = a2;
  v72 = *MEMORY[0x1E0C80C00];
  v66.x = a5;
  v66.y = a6;
  v12 = *(_QWORD *)(a2 + 16);
  CA::Render::print_hit_test((CA::Render *)v12, (const CA::Render::Layer *)"entering", 0, a4);
  v15 = *(_QWORD *)(v10 + 8);
  if ((v15 & 0x10000000000) != 0)
  {
    v23 = "culled/disallows hit testing";
    goto LABEL_109;
  }
  v16 = *(_DWORD *)(v10 + 24);
  if (v16)
    v17 = a4 == 0;
  else
    v17 = 1;
  if (!v17)
  {
    v18 = a4;
    v19 = a3;
    while (1)
    {
      v20 = *v19++;
      if (v16 == v20)
        break;
      if (!--v18)
        goto LABEL_9;
    }
    v23 = "rejected context ID";
    goto LABEL_109;
  }
LABEL_9:
  v21 = *(CGSize *)(v10 + 64);
  v65.origin = (CGPoint)*MEMORY[0x1E0C9D538];
  v65.size = v21;
  if ((v15 & 0x8000000000000) != 0)
  {
    CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)&buf, (CA::Mat4Impl *)(v10 + 80), v13);
    CA::Mat4Impl::mat4_unapply_inverse_to_point2((float64x2_t *)&buf, &v66.x, v24);
    v22 = 16;
  }
  else if ((v15 & 0x10000000000000) != 0)
  {
    v25 = a6 - *(double *)(v10 + 88);
    v66.x = a5 - *(double *)(v10 + 80);
    v66.y = v25;
    v22 = 2;
  }
  else
  {
    v22 = 0;
  }
  v26 = 0.0;
  if ((v15 & 0x20000000000000) != 0)
  {
    v28 = v10 + 8 * v22;
    v22 |= 1u;
    v27 = *(double *)(v28 + 80);
    if ((v15 & 0x40000000000000) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
  v27 = 0.0;
  if ((v15 & 0x40000000000000) != 0)
  {
LABEL_20:
    v29 = v10 + 8 * v22++;
    v26 = *(double *)(v29 + 80);
  }
LABEL_21:
  v30 = 0.0;
  if ((v15 & 0x80000000000000) != 0)
  {
    v31 = v10 + 8 * v22++;
    v30 = *(double *)(v31 + 80);
    if ((v15 & 0x100000000000000) == 0)
    {
LABEL_23:
      if ((v15 & 0x20000000000) == 0)
        goto LABEL_28;
      goto LABEL_27;
    }
  }
  else if ((v15 & 0x100000000000000) == 0)
  {
    goto LABEL_23;
  }
  v65.origin = *(CGPoint *)(v10 + 8 * v22 + 80);
  if ((v15 & 0x20000000000) == 0)
    goto LABEL_28;
LABEL_27:
  if ((CA_CGRoundRectContainsPoint(&v65.origin.x, v30, v66.x, v66.y) & 1) == 0)
  {
    v23 = "masksToBounds = YES and not in bounds";
    goto LABEL_109;
  }
LABEL_28:
  v32 = v10 + BYTE4(v15);
  if ((v15 & 0x800000000000) != 0)
  {
    v33 = (CA::Render *)CA::Render::HitTestTree::hit_test_node(a1, v10 + BYTE4(v15), a3, a4, v66.x, v66.y);
    if (v12)
    {
      if ((v33 == 0) != *(unsigned __int8 *)(v12 + 40) >> 7)
      {
        if (byte_1ECDC6AAF)
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v60 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              v61 = *(double *)(v12 + 120);
              if (v61 != 0.0)
              {
                v62 = *(_DWORD *)(*(_QWORD *)&v61 + 24);
                *(_QWORD *)&v61 += 28;
                if (!v62)
                  v61 = 0.0;
              }
              LODWORD(buf.origin.x) = 136316162;
              *(_QWORD *)((char *)&buf.origin.x + 4) = "rejecting";
              WORD2(buf.origin.y) = 2048;
              *(_QWORD *)((char *)&buf.origin.y + 6) = v12;
              HIWORD(buf.size.width) = 2080;
              buf.size.height = v61;
              v68 = 2080;
              v69 = " - ";
              v70 = 2080;
              v71 = "mask not hit";
              _os_log_impl(&dword_184457000, v60, OS_LOG_TYPE_DEFAULT, "HitTest: %s layer %p \"%s\"%s%s", (uint8_t *)&buf, 0x34u);
            }
          }
        }
        return 0;
      }
    }
    else if (!v33)
    {
      v23 = "mask not hit";
LABEL_110:
      CA::Render::print_hit_test(v33, (const CA::Render::Layer *)"rejecting", v23, v14);
      return 0;
    }
    v32 += *(unsigned int *)(v32 + 4);
    v15 = *(_QWORD *)(v10 + 8);
  }
  if ((v15 & 0xFFFFFF) == 0)
  {
LABEL_41:
    if ((v15 & 0x80000000000) != 0)
    {
      v37 = v65.size.height + v65.origin.y;
      if (v65.size.width + v65.origin.x > v65.origin.x && v37 > v65.origin.y)
      {
        v39 = v66.x >= v65.origin.x && v66.x < v65.size.width + v65.origin.x;
        v40 = !v39 || v66.y < v65.origin.y;
        if (!v40 && v66.y < v37)
        {
          v42 = "hitTestsAsOpaque = YES and in bounds";
          goto LABEL_107;
        }
      }
    }
    if ((v15 & 0x200000000000) == 0)
    {
      if ((v15 & 0x1000000000000) != 0 && CA_CGRoundRectContainsPoint(&v65.origin.x, v30, v66.x, v66.y))
      {
        v42 = "within background color";
LABEL_107:
        CA::Render::print_hit_test((CA::Render *)v12, (const CA::Render::Layer *)"accepting", v42, v14);
        return v10;
      }
      if (v27 != 0.0)
      {
        buf = CGRectInset(v65, -v26, -v26);
        v64 = CGRectInset(buf, v27, v27);
        if (v30 + v26 >= 0.0)
          v44 = v30 + v26;
        else
          v44 = 0.0;
        y = v66.y;
        x = v66.x;
        if (CA_CGRoundRectContainsPoint(&buf.origin.x, v44, v66.x, v66.y))
        {
          v46 = v44 - v27;
          if (v44 - v27 < 0.0)
            v46 = 0.0;
          if (!CA_CGRoundRectContainsPoint(&v64.origin.x, v46, x, y))
          {
            v42 = "within border";
            goto LABEL_107;
          }
        }
        v15 = *(_QWORD *)(v10 + 8);
      }
      if ((v15 & 0x2000000000000) != 0)
      {
        if ((v15 & 0x4000000000000) == 0)
        {
          if (!CA::Render::hit_test_contents(v12, *(_QWORD *)(v12 + 96), (v15 >> 44) & 1, v66.x, v66.y))
            goto LABEL_92;
LABEL_90:
          v42 = "within contents";
          goto LABEL_107;
        }
        v47 = v65.size.height + v65.origin.y;
        v48 = v65.size.width + v65.origin.x <= v65.origin.x || v47 <= v65.origin.y;
        if (!v48 && v66.x >= v65.origin.x)
        {
          v49 = v66.x >= v65.size.width + v65.origin.x || v66.y < v65.origin.y;
          if (!v49 && v66.y < v47)
            goto LABEL_90;
        }
      }
      if (!v12)
      {
LABEL_108:
        v23 = "no hits";
        goto LABEL_109;
      }
LABEL_92:
      v51 = *(CA::Render::LayerHost ***)(v12 + 128);
      if (v51)
      {
        v52 = *v51;
        if (*v51)
        {
          if (*((_BYTE *)v52 + 12) == 30)
          {
            v53 = CA::Render::LayerHost::retain_async_hit_test_tree(v52);
            if (v53)
            {
              v54 = (CA::Render::HitTestTree *)v53;
              v55 = *(uint64_t **)(v53 + 40);
              if (v55)
              {
                v56 = a1 + 24;
                do
                {
                  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v56, *((_DWORD *)v55 + 4), *((_DWORD *)v55 + 4));
                  v55 = (uint64_t *)*v55;
                }
                while (v55);
              }
              v57 = (unsigned int *)CA::Render::HitTestTree::hit_test(v54, a3, a4, v66.x, v66.y);
              if (v57)
              {
                do
                {
                  LODWORD(v58) = v57[6];
                  if ((_DWORD)v58)
                    break;
                  v58 = *v57;
                  v57 = (unsigned int *)((char *)v57 - v58);
                }
                while ((_DWORD)v58);
                *(_DWORD *)(v10 + 24) = v58;
                CA::Render::HitTestTree::unref(v54);
                return v10;
              }
              CA::Render::HitTestTree::unref(v54);
            }
          }
          buf.origin = v66;
          if ((*(unsigned int (**)(CA::Render::LayerHost *, uint64_t, CGRect *))(*(_QWORD *)v52 + 224))(v52, v12, &buf))
          {
            v42 = "subclass";
            goto LABEL_107;
          }
        }
      }
      goto LABEL_108;
    }
    v23 = "culled above";
LABEL_109:
    v33 = (CA::Render *)v12;
    goto LABEL_110;
  }
  v34 = 0;
  v35 = v66;
  while (1)
  {
    v36 = CA::Render::HitTestTree::hit_test_node(a1, v32, a3, a4, v35.x, v35.y);
    if (v36)
      break;
    v32 += *(unsigned int *)(v32 + 4);
    ++v34;
    v15 = *(_QWORD *)(v10 + 8);
    if (v34 >= (*(_DWORD *)(v10 + 8) & 0xFFFFFFu))
      goto LABEL_41;
  }
  v43 = v36;
  CA::Render::print_hit_test((CA::Render *)v12, (const CA::Render::Layer *)"accepting", "hit sublayer", v14);
  return v43;
}

void CA::Render::print_hit_test(CA::Render *this, const CA::Render::Layer *a2, const char *a3, const char *a4)
{
  NSObject *v7;
  const char *v8;
  const char *v9;
  int v10;
  const char *v11;
  uint8_t buf[4];
  const CA::Render::Layer *v13;
  __int16 v14;
  CA::Render *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (byte_1ECDC6AAF)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v8 = "";
        if (this)
        {
          v9 = (const char *)*((_QWORD *)this + 15);
          if (v9)
          {
            v10 = *((_DWORD *)v9 + 6);
            v9 += 28;
            if (!v10)
              v9 = 0;
          }
        }
        else
        {
          v9 = "";
        }
        v11 = " - ";
        *(_DWORD *)buf = 136316162;
        if (!a3)
          v11 = "";
        v13 = a2;
        if (a3)
          v8 = a3;
        v14 = 2048;
        v15 = this;
        v16 = 2080;
        v17 = v9;
        v18 = 2080;
        v19 = v11;
        v20 = 2080;
        v21 = v8;
        _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_DEFAULT, "HitTest: %s layer %p \"%s\"%s%s", buf, 0x34u);
      }
    }
  }
}

uint64_t CA_CGRoundRectContainsPoint(double *a1, double a2, double a3, double a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  BOOL v19;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2] + *a1;
  v7 = a1[3] + v5;
  v8 = v6 <= *a1 || v7 <= v5;
  if (v8)
    return 0;
  v9 = v4 <= a3 && v6 > a3;
  v10 = v9 && v5 <= a4;
  if (!v10 || v7 <= a4)
    return 0;
  if (a2 <= 0.0)
    return 1;
  v13 = a2 * a2;
  v14 = v4 + a2 - a3;
  v15 = v5 + a2 - a4;
  if (v14 > 0.0 && v15 > 0.0 && v14 * v14 + v15 * v15 > v13)
    return 0;
  if (((v16 = a2 - v6 + a3, v16 <= 0.0) || v15 <= 0.0 || v16 * v16 + v15 * v15 <= v13)
    && ((v17 = a2 - v7 + a4, v16 <= 0.0) || v17 <= 0.0 || v16 * v16 + v17 * v17 <= v13)
    && (v14 <= 0.0 || ((v8 = v17 <= 0.0, v18 = v14 * v14 + v17 * v17, !v8) ? (v19 = v18 <= v13) : (v19 = 1), v19)))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t CA::Render::BackdropLayer::hit_test(_BYTE *a1, uint64_t a2, double *a3)
{
  uint64_t result;
  double v5;
  __int128 v6;
  double v7[3];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if ((a1[13] & 0x10) == 0)
  {
    v6 = 0u;
    *(_OWORD *)v7 = 0u;
    result = (*(uint64_t (**)(_BYTE *, uint64_t, __int128 *, _QWORD))(*(_QWORD *)a1 + 184))(a1, a2, &v6, 0);
    if (!(_DWORD)result)
      return result;
    if (*(double *)&v6 <= *a3 && v7[0] + *(double *)&v6 > *a3)
    {
      v5 = a3[1];
      if (*((double *)&v6 + 1) <= v5)
        return v7[1] + *((double *)&v6 + 1) > v5;
    }
  }
  return 0;
}

uint64_t CA::Render::hit_test_contents(uint64_t a1, uint64_t a2, int a3, double a4, double a5)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  double v17;
  double v18;
  uint64_t v19;
  double *v20;
  double v21;
  uint64_t v22;
  double v23;
  const double *v29;
  double *v30;
  unsigned int v31;
  double v32;
  int v33;
  int v34;
  int v35;
  float64x2_t v36[8];
  double v37;
  double v38;
  float64x2_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  unsigned int v44[2];
  _OWORD v45[9];
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
  if (v10)
    goto LABEL_2;
  if (*(_BYTE *)(a2 + 12) != 26)
    return 0;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 80))(*(_QWORD *)(a2 + 32));
  v10 = result;
  if (result)
  {
LABEL_2:
    *(_QWORD *)v44 = 0;
    if ((*(_BYTE *)(v10 + 13) & 0x64) != 0)
    {
      CA::Render::Texture::displayed_size_(v10, &v44[1], v44);
    }
    else
    {
      v14 = *(_DWORD *)(v10 + 16);
      v44[0] = *(_DWORD *)(v10 + 20);
      v44[1] = v14;
    }
    v15 = (unsigned int *)(a2 + 32);
    v16 = v44;
    if (*(_BYTE *)(a2 + 12) == 50)
      v16 = (unsigned int *)(a2 + 36);
    else
      v15 = &v44[1];
    LODWORD(v11) = *v15;
    LODWORD(v12) = *v16;
    v17 = (double)v11;
    v18 = (double)v12;
    v40 = 0.0;
    v41 = 0.0;
    v42 = v17;
    v43 = (double)v12;
    v19 = *(_QWORD *)(a1 + 128);
    if (v19)
    {
      LODWORD(v12) = *(_DWORD *)(v19 + 280);
    }
    else
    {
      LOBYTE(v12) = *(_BYTE *)(a1 + 34);
      *(float *)&v12 = (float)v12;
    }
    if (*(float *)&v12 != 1.0)
    {
      if (*(float *)&v12 != 0.0)
      {
        v23 = *(float *)&v12;
        v17 = v17 / v23;
        v18 = v18 / v23;
        v42 = v17;
        v43 = v18;
        if (!v19)
          goto LABEL_20;
        goto LABEL_18;
      }
      v42 = 0.0;
      v43 = 0.0;
      v18 = 0.0;
      v17 = 0.0;
    }
    if (!v19)
      goto LABEL_20;
LABEL_18:
    v20 = *(double **)(v19 + 40);
    if (v20)
    {
      v17 = (v20[5] - v20[3]) * v17;
      v18 = (v20[6] - v20[4]) * v18;
      v42 = v17;
      v43 = v18;
    }
LABEL_20:
    v39.f64[0] = v17;
    v39.f64[1] = v18;
    if ((*(_DWORD *)(a1 + 36) & 0xF000) == 0x9000
      && *(double *)(a1 + 64) == 0.0
      && *(double *)(a1 + 72) == 0.0
      && (!v19 || !*(_QWORD *)(v19 + 32))
      && *(double *)(a1 + 80) == v17
      && *(double *)(a1 + 88) == v18)
    {
      v21 = 0.0;
    }
    else
    {
      CA::Render::Layer::apply_contents_transform(a1, (uint64_t)&v40, &v39, 0);
      v21 = v40;
    }
    if (v21 <= a4 && v42 + v21 > a4 && v41 <= a5 && v43 + v41 > a5)
    {
      v22 = *(_QWORD *)(a1 + 40);
      if ((v22 & 0x100000000) == 0)
        return 1;
      if ((v22 & 0x20000) != 0)
        return 1;
      if ((*(_DWORD *)(v10 + 12) & 0x1000) != 0)
        return 1;
      v45[0] = xmmword_18474DF40;
      v45[1] = 0u;
      v45[2] = xmmword_18474DF50;
      memset(&v45[3], 0, 32);
      v45[5] = xmmword_18474DF40;
      v45[6] = 0u;
      v45[7] = xmmword_18474DF50;
      __asm { FMOV            V0.2D, #1.0 }
      v45[8] = _Q0;
      v46 = 0;
      if (!CA::Render::Layer::append_texture_transform((CA::Render::Layer *)a1, (CA::Transform *)v45, (CA::Render::Texture *)v10, (CA::Render::Object *)a2))return 1;
      v37 = a4;
      v38 = a5;
      if ((v46 & 0x10) != 0)
      {
        CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)v36, (CA::Mat4Impl *)v45, v29);
        CA::Mat4Impl::mat4_unapply_inverse_to_point2(v36, &v37, v30);
      }
      else
      {
        CA::Transform::unapply_simple<double>((uint64_t)v45, &v37, &v38);
      }
      v31 = *(_DWORD *)(v10 + 20);
      if (a3)
        v38 = -1.0 - v38 + (double)v31;
      v32 = v37;
      if (*(_BYTE *)(a2 + 12) == 50)
      {
        v34 = *(_DWORD *)(a2 + 24);
        v33 = *(_DWORD *)(a2 + 28);
        v35 = *(_DWORD *)(a2 + 32);
        v31 = *(_DWORD *)(a2 + 36);
        v32 = v37 + (double)v34;
        v38 = v38 + (double)v33;
      }
      else
      {
        v34 = 0;
        v33 = 0;
        v35 = *(_DWORD *)(v10 + 16);
      }
      if (v32 >= (double)v34
        && v32 < (double)(v35 + v34)
        && v38 >= (double)v33
        && v38 < (double)(int)(v31 + v33)
        && (*(float (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 248))(v10, (int)v32, (int)v38) > 0.0)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

BOOL CA::Render::Layer::append_texture_transform(CA::Render::Layer *this, CA::Transform *a2, CA::Render::Texture *a3, CA::Render::Object *a4)
{
  unsigned int *v7;
  double v8;
  unsigned int v9;
  unsigned int *v10;
  double v11;
  unint64_t v12;
  double v13;
  int v19;
  uint64_t v20;
  float v21;
  double v22;
  uint64_t v23;
  unsigned int v24;
  float64x2_t v25;
  float64x2_t v26;
  uint64_t v27;
  uint64_t v28;
  const double *v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  const double *v38;
  uint64_t v39;
  float64x2_t v41;
  float64x2_t v42;
  unsigned int v43;
  float64x2_t v44;
  float64x2_t v45[9];
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 41) & 0x80) != 0)
    return 0;
  v7 = (unsigned int *)((char *)a3 + 16);
  v8 = (double)*((unsigned int *)a3 + 4);
  v10 = (unsigned int *)((char *)a3 + 20);
  v9 = *((_DWORD *)a3 + 5);
  v11 = (double)v9;
  v44.f64[0] = v8;
  v44.f64[1] = (double)v9;
  v46 = 0;
  HIDWORD(v12) = 0;
  v45[0] = (float64x2_t)xmmword_18474DF40;
  v45[1] = 0u;
  v13 = 0.0;
  v45[2] = (float64x2_t)xmmword_18474DF50;
  memset(&v45[3], 0, 32);
  v45[5] = (float64x2_t)xmmword_18474DF40;
  v45[6] = 0u;
  v45[7] = (float64x2_t)xmmword_18474DF50;
  __asm { FMOV            V0.2D, #1.0 }
  v41 = _Q0;
  v45[8] = _Q0;
  if (*((_BYTE *)a4 + 12) != 50)
  {
    v19 = *((_DWORD *)a3 + 3);
    if ((v19 & 0x6400) == 0)
      goto LABEL_15;
    if ((v19 & 0x100) != 0)
    {
      v25 = CA::Transform::translate((CA::Transform *)v45, 0.0, (double)-v9, 0.0);
      v25.f64[0] = 1.0;
      _Q0.f64[0] = CA::Transform::scale(v45, v25, -1.0, 1.0);
      v19 = *((_DWORD *)a3 + 3);
      if ((v19 & 0x200) == 0)
      {
LABEL_7:
        if ((v19 & 0x400) == 0)
          goto LABEL_8;
        goto LABEL_26;
      }
    }
    else if ((v19 & 0x200) == 0)
    {
      goto LABEL_7;
    }
    v26 = CA::Transform::translate((CA::Transform *)v45, (double)-*((_DWORD *)a3 + 4), 0.0, 0.0);
    v26.f64[0] = -1.0;
    _Q0.f64[0] = CA::Transform::scale(v45, v26, 1.0, 1.0);
    v19 = *((_DWORD *)a3 + 3);
    if ((v19 & 0x400) == 0)
    {
LABEL_8:
      if ((v19 & 0x4000) == 0)
        goto LABEL_9;
      goto LABEL_27;
    }
LABEL_26:
    CA::Transform::translate((CA::Transform *)v45, 0.0, (double)-*((_DWORD *)a3 + 5), 0.0);
    _Q0.f64[0] = CA::Transform::rotate90((CA::Transform *)v45, v27, v28, v29);
    v19 = *((_DWORD *)a3 + 3);
    if ((v19 & 0x4000) == 0)
    {
LABEL_9:
      if ((v19 & 0x2000) == 0)
      {
LABEL_11:
        LODWORD(v42.f64[0]) = 0;
        v43 = 0;
        if ((v19 & 0x6400) != 0)
        {
          v7 = (unsigned int *)&v42;
          v10 = &v43;
          CA::Render::Texture::displayed_size_((uint64_t)a3, (unsigned int *)&v42, &v43);
        }
        LODWORD(_Q0.f64[0]) = *v7;
        v8 = (double)*(unint64_t *)&_Q0.f64[0];
        LODWORD(_Q0.f64[0]) = *v10;
        v11 = (double)*(unint64_t *)&_Q0.f64[0];
        goto LABEL_14;
      }
LABEL_10:
      _Q0.f64[0] = *((float *)a3 + 8);
      _Q0.f64[0] = CA::Transform::scale(v45, _Q0, 1.0, 1.0);
      v19 = *((_DWORD *)a3 + 3);
      goto LABEL_11;
    }
LABEL_27:
    _Q0 = CA::Transform::translate((CA::Transform *)v45, (double)-*((__int16 *)a3 + 12), (double)-*((__int16 *)a3 + 13), 0.0);
    if ((v19 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  LODWORD(_Q0.f64[0]) = *((_DWORD *)a4 + 8);
  LODWORD(v12) = *((_DWORD *)a4 + 9);
  v8 = (double)*(unint64_t *)&_Q0.f64[0];
  v11 = (double)v12;
LABEL_14:
  v44.f64[0] = v8;
  v44.f64[1] = v11;
LABEL_15:
  v20 = *((_QWORD *)this + 16);
  if (!v20)
  {
    v24 = *((unsigned __int8 *)this + 34);
    if (!*((_BYTE *)this + 34))
    {
      v23 = 0;
      v22 = 0.0;
LABEL_30:
      _Q0.f64[0] = v22;
      CA::Transform::scale_2d_right((CA::Transform *)v45, (__n128)_Q0, (uint64_t)a2, (uint64_t)a3, (const double *)a4);
      v8 = v8 * v22;
      v11 = v11 * v22;
      v44.f64[0] = v8;
      v44.f64[1] = v11;
      if (!v23)
        goto LABEL_37;
      goto LABEL_31;
    }
    if (v24 == 1)
      goto LABEL_37;
    v21 = (float)v24;
LABEL_22:
    v23 = *((_QWORD *)this + 16);
    v22 = 1.0 / v21;
    goto LABEL_30;
  }
  v21 = *(float *)(v20 + 280);
  if (v21 != 1.0)
  {
    if (v21 == 0.0)
    {
      v22 = 0.0;
      v23 = *((_QWORD *)this + 16);
      goto LABEL_30;
    }
    goto LABEL_22;
  }
  v23 = *((_QWORD *)this + 16);
LABEL_31:
  v30 = *(double **)(v23 + 40);
  if (v30)
  {
    v31 = v30[3];
    if (v31 < 0.0)
      return 0;
    v32 = v30[4];
    if (v32 < 0.0)
      return 0;
    v33 = v30[5];
    if (v33 > 1.0)
      return 0;
    v34 = v30[6];
    if (v34 > 1.0)
      return 0;
    _Q0.f64[0] = -(v31 * v8);
    CA::Transform::translate_right(v45, _Q0, -(v32 * v11), v13);
    v8 = (v33 - v31) * v8;
    v11 = (v34 - v32) * v11;
    v44.f64[0] = v8;
    v44.f64[1] = v11;
  }
LABEL_37:
  v42 = v41;
  if ((*((_DWORD *)this + 9) & 0xF000) != 0x9000
    || *((double *)this + 8) != 0.0
    || *((double *)this + 9) != 0.0
    || v20 && *(_QWORD *)(v20 + 32)
    || *((double *)this + 10) != v8
    || *((double *)this + 11) != v11)
  {
    CA::Render::Layer::append_contents_transform((uint64_t)this, a2, &v44, &v42);
    v36 = v42.f64[0];
    v35 = v42.f64[1];
    CA::Transform::concat_left(a2, v45, v37, v38);
    if (v36 == 1.0 && v35 == 1.0)
      return 1;
    v39 = *((_QWORD *)this + 16);
    return !v39 || !*(_QWORD *)(v39 + 48);
  }
  CA::Transform::concat_left(a2, v45, (uint64_t)a3, (const double *)a4);
  return 1;
}

uint64_t CA::Render::Texture::displayed_size_(uint64_t this, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;

  v3 = *(_DWORD *)(this + 20);
  v4 = *(_DWORD *)(this + 12);
  if ((v4 & 0x400) != 0)
    v5 = *(_DWORD *)(this + 20);
  else
    v5 = *(_DWORD *)(this + 16);
  if ((v4 & 0x400) != 0)
    v3 = *(_DWORD *)(this + 16);
  if ((v4 & 0x4000) != 0)
  {
    v5 -= *(__int16 *)(this + 24) + *(__int16 *)(this + 28);
    v3 -= *(__int16 *)(this + 26) + *(__int16 *)(this + 30);
  }
  if ((v4 & 0x2000) != 0)
    v5 = (float)((float)(*(float *)(this + 32) * (float)v5) + 0.5);
  *a2 = v5;
  *a3 = v3;
  return this;
}

double CA::Transform::scale_2d_right(CA::Transform *this, __n128 a2, uint64_t a3, uint64_t a4, const double *a5)
{
  char v5;
  double v6;
  double v7;
  float64x2_t v9[2];
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a2.n128_f64[0] != 1.0)
  {
    v5 = *((_BYTE *)this + 144);
    if ((v5 & 0x10) != 0)
    {
      v19 = 8;
      v9[1] = 0u;
      v10 = 0;
      v12 = 0u;
      v13 = 0u;
      v15 = 0u;
      v16 = xmmword_18474DF50;
      v9[0] = (float64x2_t)a2.n128_u64[0];
      v11 = a2.n128_u64[0];
      v14 = 0x3FF0000000000000uLL;
      v17 = a2.n128_u64[0];
      v18 = 1.0 / a2.n128_f64[0];
      a2.n128_f64[0] = CA::Transform::concat(this, v9, a4, a5);
    }
    else
    {
      v6 = *((double *)this + 16) * a2.n128_f64[0];
      v7 = *((double *)this + 17) / a2.n128_f64[0];
      *((double *)this + 16) = v6;
      *((double *)this + 17) = v7;
      *((_BYTE *)this + 144) = v5 & 0xF7 | (8 * (v6 != 1.0));
      *(float64x2_t *)this = vmulq_n_f64(*(float64x2_t *)this, a2.n128_f64[0]);
      *((float64x2_t *)this + 2) = vmulq_n_f64(*((float64x2_t *)this + 2), a2.n128_f64[0]);
      a2 = (__n128)vmulq_n_f64(*((float64x2_t *)this + 6), a2.n128_f64[0]);
      *((__n128 *)this + 6) = a2;
    }
  }
  return a2.n128_f64[0];
}

uint64_t CA::Render::LayerSubclass::hit_test()
{
  return 0;
}

uint64_t CAImageQueueGetUnconsumedImageCount(uint64_t a1, double *a2, double *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _DWORD *v7;
  double v8;
  double v9;
  int v10;
  BOOL v11;
  double v12;
  _BOOL4 v13;

  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
    return 0;
  v4 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v4)
    return 0;
  result = 0;
  v6 = *(_QWORD *)(v3 + 24);
  v7 = (_DWORD *)(v6 + 540);
  v8 = -1.0;
  v9 = -1.0;
  do
  {
    if (!*(v7 - 4))
      goto LABEL_28;
    v10 = *(v7 - 6);
    if (v10 > 572662305)
    {
      if (v10 == 572662306 || v10 == 858993459)
        goto LABEL_28;
    }
    else
    {
      if (v10)
        v11 = v10 == 286331153;
      else
        v11 = 1;
      if (v11 && (*v7 || *(v7 - 5) - *(_DWORD *)(v6 + 16) < 0))
        goto LABEL_28;
    }
    v12 = *(double *)(v7 - 21);
    v13 = result == 0;
    if (v12 > v9 || result == 0)
      v9 = *(double *)(v7 - 21);
    if (v12 < v8)
      v13 = 1;
    if (v13)
      v8 = *(double *)(v7 - 21);
    ++result;
LABEL_28:
    v7 += 40;
    --v4;
  }
  while (v4);
  if (a2 && result)
    *a2 = v8;
  if (a3)
  {
    if (result)
      *a3 = v9;
  }
  return result;
}

uint64_t CARenderServerGetFrameCounter(mach_port_name_t a1)
{
  return CARenderServerGetFrameCounterByIndex(a1, 0);
}

uint64_t CA::Transaction::add_commit_handler(uint64_t a1, const void *a2, uint64_t a3)
{
  int v3;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  int AppBooleanValue;
  NSObject *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  malloc_zone_t *malloc_zone;
  _QWORD *v18;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v3 = a3;
  v6 = *(unsigned int *)(*(_QWORD *)(a1 + 104) + 56);
  v7 = a3 + 1;
  if ((a3 + 1) > 6)
    v8 = -1;
  else
    v8 = dword_1847635E8[v7];
  if ((v6 + 1) >= 7)
    goto LABEL_32;
  if ((_DWORD)v6 == 2)
  {
    if (v7 < 7)
    {
      if ((_DWORD)a3 != 2)
      {
        if ((_DWORD)a3 != 5)
          goto LABEL_16;
        goto LABEL_15;
      }
      goto LABEL_17;
    }
LABEL_32:
    __assert_rtn("order_of_phase", "CATransactionInternal.mm", 1611, "phase_is_valid (phase)");
  }
  if (dword_184752490[(v6 + 1)] <= v8)
  {
LABEL_16:
    v9 = 1;
    goto LABEL_28;
  }
  if ((_DWORD)a3 == -1 || (_DWORD)a3 == 5)
  {
LABEL_15:
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("CATransaction"), CFSTR("cannot add handler to %i from %i"), a3, v6);
    v9 = 0;
LABEL_28:
    v13 = *(_DWORD *)(a1 + 100);
    *(_DWORD *)(a1 + 100) = v13 + 1;
    if (!v13)
      os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
    v14 = (uint64_t *)CA::Transaction::commit_handlers_for_phase(*(_QWORD *)(a1 + 104), v3);
    v15 = *v14;
    v16 = _Block_copy(a2);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v18 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
    *v18 = v16;
    v18[1] = v15;
    *v14 = (uint64_t)v18;
    CA::Transaction::unlock((CA::Transaction *)a1);
    return v9;
  }
LABEL_17:
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v10 = x_log_category_api;
    if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109376;
      v21 = v3;
      v22 = 1024;
      v23 = v6;
      _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_ERROR, "cannot add handler to %i from %i - dropping", buf, 0xEu);
    }
  }
  buf[0] = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("CADebugTxHandlers"), CFSTR("com.apple.coreanimation"), buf);
  if (buf[0] && AppBooleanValue)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v12 = x_log_category_api;
      if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109376;
        v21 = v3;
        v22 = 1024;
        v23 = v6;
        _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_FAULT, "CoreAnimation: cannot add handler to %i from %i", buf, 0xEu);
      }
    }
  }
  v9 = 0;
  if ((_DWORD)v6 != v3)
    goto LABEL_28;
  return v9;
}

uint64_t CAImageQueueGetDisplayedPixelCount(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
    return *(unsigned int *)(*(_QWORD *)(v1 + 24) + 68);
  else
    return 0;
}

void invoke_presented_callback(double *a1)
{
  double v2;

  v2 = *a1;
  pthread_mutex_lock(&presented_mutex);
  while (*(_BYTE *)(*(_QWORD *)&v2 + 136))
    pthread_cond_wait(&presented_cond, &presented_mutex);
  if (*(_QWORD *)(*(_QWORD *)&v2 + 120))
  {
    *(_BYTE *)(*(_QWORD *)&v2 + 136) = 1;
    pthread_mutex_unlock(&presented_mutex);
    (*(void (**)(double, _QWORD, _QWORD, double, double, double))(*(_QWORD *)&v2 + 120))(COERCE_DOUBLE(*(_QWORD *)&v2), *((unsigned int *)a1 + 2), *(_QWORD *)(*(_QWORD *)&v2 + 128), a1[2], a1[3], a1[4]);
    pthread_mutex_lock(&presented_mutex);
    *(_BYTE *)(*(_QWORD *)&v2 + 136) = 0;
    pthread_cond_broadcast(&presented_cond);
  }
  pthread_mutex_unlock(&presented_mutex);
  CFRelease(*(CFTypeRef *)&v2);
  free(a1);
}

void layer_private_cleanup_callbacks(_CAMetalLayerPrivate *a1)
{
  os_unfair_lock_s *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  os_unfair_lock_s *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  _BYTE v13[128];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = (os_unfair_lock_s *)((char *)a1 + 208);
  os_unfair_lock_lock((os_unfair_lock_t)a1 + 52);
  v3 = (void *)objc_msgSend(*((id *)a1 + 27), "copy");
  objc_msgSend(*((id *)a1 + 27), "removeAllObjects");
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v19, v18, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v20 != v5)
          objc_enumerationMutation(v3);
        v7 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        objc_msgSend(v7, "setStatus:", 3);
        objc_msgSend(v7, "didPresentAtTime:", 0.0);
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v19, v18, 16);
    }
    while (v4);
  }
  os_unfair_lock_unlock(v2);

  v8 = (os_unfair_lock_s *)((char *)a1 + 184);
  os_unfair_lock_lock((os_unfair_lock_t)a1 + 46);
  v9 = (void *)objc_msgSend(*((id *)a1 + 24), "copy");
  objc_msgSend(*((id *)a1 + 24), "removeAllObjects");
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v14, v13, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v15;
    do
    {
      for (j = 0; j != v10; ++j)
      {
        if (*(_QWORD *)v15 != v11)
          objc_enumerationMutation(v9);
        objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * j), "didScheduledPresent");
      }
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v14, v13, 16);
    }
    while (v10);
  }
  os_unfair_lock_unlock(v8);

}

void sub_184557A60(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

BOOL CAImageQueueInsertImageWithRotation(uint64_t a1, int a2, uint64_t a3, unsigned int a4, char a5, uint64_t a6, uint64_t a7, double a8)
{
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = xmmword_18474E240;
  return CAImageQueueInsertImage_(a1, a2, a3, a4, a5, &v9, a6, a7, a8, 0.0, 0.0, 0.0, 0.0);
}

BOOL CAImageQueueInsertImage_(uint64_t a1, int a2, uint64_t a3, unsigned int a4, char a5, _OWORD *a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13)
{
  os_unfair_lock_s *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  _DWORD *v34;
  BOOL v35;
  __IOSurface *v36;
  uint64_t v37;
  double v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  double v44;
  os_signpost_id_t v45;
  NSObject *v46;
  int v47;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  _OWORD *v61;
  char v62;
  uint8_t buf[4];
  int v65;
  __int16 v66;
  double v67;
  __int16 v68;
  int v69;
  __int16 v70;
  unsigned int v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 48))
    return 0;
  v25 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  v26 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24);
  v27 = *(unsigned int *)(a1 + 40);
  if ((a4 & 0x84000000) == 0x80000000)
  {
    v28 = 0;
    if ((_DWORD)v27)
    {
      v29 = (int *)(v26 + 524);
      v30 = *(unsigned int *)(a1 + 40);
      do
      {
        v31 = *v29;
        v29 += 40;
        if (!v31)
          ++v28;
        --v30;
      }
      while (v30);
    }
    if (v28 == v27)
    {
      a4 &= ~0x80000000;
      a9 = 0.0;
    }
  }
  if (!(_DWORD)v27)
  {
LABEL_16:
    v35 = 0;
    LODWORD(v36) = 0;
    goto LABEL_17;
  }
  v62 = a5;
  v61 = a6;
  v32 = 0;
  v33 = 0;
  v34 = (_DWORD *)(v26 + 524);
  v35 = 1;
  while (*v34)
  {
LABEL_15:
    v35 = ++v33 < v27;
    v34 += 40;
    if (v27 == v33)
      goto LABEL_16;
  }
  if (v32 < *(unsigned __int8 *)(v26 + 95))
  {
    ++v32;
    goto LABEL_15;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v33) = a7;
  *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v33) = a8;
  v49 = (unsigned int *)(v26 + 36);
LABEL_41:
  v50 = *v49;
  v51 = *v49 + 1;
  do
  {
    v52 = __ldaxr(v49);
    if (v52 != v50)
    {
      __clrex();
      goto LABEL_41;
    }
  }
  while (__stlxr(v51, v49));
  v53 = v26 + 160 * v33;
  *(_DWORD *)(v53 + 556) = v51;
  *(_DWORD *)(v53 + 512) = 0;
  *(_DWORD *)(v53 + 516) = 0;
  *(_DWORD *)(v53 + 520) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(v53 + 528) = a4;
  *(_BYTE *)(v53 + 576) = v62;
  *(_QWORD *)(v53 + 464) = a3;
  *(double *)(v53 + 456) = a9;
  *(_DWORD *)(v53 + 540) = 0;
  *(_WORD *)(v53 + 577) = 0;
  *(_QWORD *)(v53 + 504) = 0;
  *(_OWORD *)(v53 + 472) = 0u;
  *(_OWORD *)(v53 + 488) = 0u;
  *(_BYTE *)(v53 + 579) = (a4 & 0x10000000) != 0;
  *(double *)(v53 + 584) = a11;
  *(double *)(v53 + 592) = a12;
  *(double *)(v53 + 600) = a13;
  *(_DWORD *)(v53 + 548) = 0;
  *(_DWORD *)(v53 + 608) = 0;
  if (a2 == 2 || a2 == 4)
  {
    v36 = IOSurfaceLookup(a3);
    if (v36)
    {
LABEL_54:
      v56 = atomic_load((unint64_t *)(v26 + 8));
      if ((v56 & 0x400000000000000) == 0)
        IOSurfaceIncrementUseCount(v36);
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v33) = v36;
      LODWORD(v36) = IOSurfaceGetID(v36);
      *(_DWORD *)(v53 + 512) = (_DWORD)v36;
    }
  }
  else
  {
    LODWORD(v36) = 0;
    if (a2 == 3)
    {
      v54 = x_hash_table_lookup(*(_QWORD *)(a1 + 200), a3, 0);
      if (v54 && (v55 = *(_QWORD *)(v54 + 24), *(_BYTE *)(v55 + 12) == 51))
      {
        v36 = *(__IOSurface **)(v55 + 112);
        if (v36)
        {
          CFRetain(*(CFTypeRef *)(v55 + 112));
          goto LABEL_54;
        }
      }
      else
      {
        LODWORD(v36) = 0;
      }
    }
  }
  if ((a4 & 6) != 0)
    ++*(_DWORD *)(v53 + 520);
  v57 = *(_DWORD *)(a1 + 32);
  v58 = v26 + 160 * v33;
  *(_DWORD *)(v58 + 532) = v57;
  v59 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v58 + 536) = v59;
  if ((v62 & 4) != 0)
  {
    *(_DWORD *)(v58 + 532) = v59;
    *(_DWORD *)(v58 + 536) = v57;
  }
  __dmb(0xBu);
  *v34 = a2;
  *(_OWORD *)(v26 + 160 * v33 + 560) = *v61;
  if ((a4 & 0x80000000) != 0)
    CAImageQueueSetFlagsInternal((int *)a1, 0x1000000000000000, 0x1000000000000000);
  if ((a4 & 2) != 0)
  {
    v60 = *(_DWORD *)(a1 + 24) + 1;
    *(_DWORD *)(a1 + 24) = v60;
    *(_DWORD *)(v26 + 16) = v60;
  }
LABEL_17:
  os_unfair_lock_unlock(v25);
  v37 = mach_absolute_time();
  v38 = CATimeWithHostTime(v37);
  v39 = (*(_DWORD *)(a1 + 20) | a4 & 0x80) != 0;
  if ((a4 & 0x20) != 0)
  {
    v40 = atomic_load((unint64_t *)(v26 + 8));
    if ((v40 & 0x20000) != 0 && v38 <= *(double *)(v26 + 312))
      v39 = 1;
  }
  if (BYTE9(xmmword_1ECDC6A90))
    kdebug_trace();
  if (!(!v35 | ((a4 & 4) >> 2) & 1))
  {
    v41 = atomic_load((unint64_t *)(v26 + 8));
    v42 = (v41 & 0x200000000000001) == 1 || v39;
    if ((v42 & 1) == 0)
    {
      v43 = atomic_load((unint64_t *)(v26 + 8));
      v44 = 0.0;
      if ((v43 & 0x20000000000000) != 0)
        v44 = a9;
      CAImageQueuePing_(a1, (a4 >> 5) & 1, (a4 >> 23) & 1, v44, a10);
    }
  }
  if (BYTE9(xmmword_1ECDC6A90))
    kdebug_trace();
  if (CAImageQueueLog(void)::onceToken[0] != -1)
    dispatch_once(CAImageQueueLog(void)::onceToken, &__block_literal_global_11815);
  v45 = *(unsigned int *)(v26 + 88);
  if ((_DWORD)v45)
  {
    v46 = CAImageQueueLog(void)::log;
    if (os_signpost_enabled((os_log_t)CAImageQueueLog(void)::log))
    {
      v47 = *(_DWORD *)(v26 + 16);
      *(_DWORD *)buf = 67240960;
      v65 = (int)v36;
      v66 = 2050;
      v67 = a9;
      v68 = 1026;
      v69 = v47;
      v70 = 1026;
      v71 = a4;
      _os_signpost_emit_with_name_impl(&dword_184457000, v46, OS_SIGNPOST_EVENT, v45, "ImageQueueInsert", "ID is queue ID. surfaceID=%{public, name=surfaceID}#x time=%{public, name=time}f sampleGeneration=%{public, name=sampleGeneration}u flags=%{public, name=flags}#x", buf, 0x1Eu);
    }
  }
  return v35;
}

void CA::Context::Generic::release(CA::Context **this)
{
  CA::Context::unref(this[1], 0);
}

void sub_1845581EC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void CAMetalLayerPrivateNextDrawableLocked(CAMetalLayer *a1, CAMetalDrawable **a2, unint64_t *a3)
{
  char *priv;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  int v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  unsigned int *v20;
  double v21;
  int v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  __int16 v28;
  _BOOL4 v29;
  _DWORD *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _CAMetalDrawablePrivate *unused_drawable;
  uint64_t v36;
  double v37;
  double v38;
  unsigned int v39;
  double v41;
  dispatch_time_t v42;
  unsigned int v43;
  double v44;
  unsigned int v45;
  void *v46;
  int v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  double v55;
  double i;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  _CAMetalDrawablePrivate *v61;
  _CAMetalDrawablePrivate *v62;
  unsigned int v63;
  uint64_t v64;
  CAMetalDrawable *v65;
  _CAMetalDrawablePrivate *v66;
  _CAMetalDrawablePrivate *v67;
  unsigned int v68;
  uint64_t v69;
  double v70;
  char v71;
  unsigned int v73;
  int *v74;

  priv = (char *)a1->_priv;
  v5 = mach_absolute_time();
  v70 = CATimeWithHostTime(v5);
  v6 = *(_QWORD *)(*((_QWORD *)priv + 2) + 48);
  if (v6)
    v7 = atomic_load((unint64_t *)(*(_QWORD *)(v6 + 24) + 8));
  else
    v7 = 0;
  v8 = (v7 >> 37) & 0x4000 | *((_WORD *)priv + 144) & 0xBFFF;
  *((_WORD *)priv + 144) = (v7 >> 37) & 0x4000 | *((_WORD *)priv + 144) & 0xBFFF;
  if ((*((_DWORD *)priv + 1) & 1) == 0)
  {
    -[CALayer size](a1, "size");
    v10 = v9;
    v12 = v11;
    -[CALayer contentsScale](a1, "contentsScale");
    layer_private_set_drawable_size_internal((_CAMetalLayerPrivate *)priv, (v10 * v13), (v12 * v13));
    LOWORD(v8) = *((_WORD *)priv + 144);
  }
  v73 = 0;
  if ((v8 & 0x40) != 0 && (v7 & 0x800000000000000) != 0)
  {
    if (CADeviceUseCompression::once != -1)
      dispatch_once(&CADeviceUseCompression::once, &__block_literal_global_15);
    if (CADeviceUseCompression::enable_compression)
    {
      if (CADeviceSupportsUniversalCompression::once[0] != -1)
        dispatch_once(CADeviceSupportsUniversalCompression::once, &__block_literal_global_27);
      if (!CADeviceSupportsUniversalCompression::universal)
        goto LABEL_21;
    }
    v14 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)priv + 2) + 48) + 24) + 92) & 3;
    if (v14 == 3 || v14 == 0)
    {
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)priv + 2) + 48) + 24) + 92) & 4) != 0)
      {
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)priv + 2) + 48) + 24) + 92) & 3) != 0)
          v16 = 3;
        else
          v16 = 1;
      }
      else
      {
        v16 = 2 * (v14 != 0);
      }
      v73 = v16;
    }
    else
    {
LABEL_21:
      v73 = 0;
    }
  }
  v18 = (*((_WORD *)priv + 144) & 8) != 0
     && (v17 = *(_QWORD *)(*((_QWORD *)priv + 2) + 48)) != 0
     && *(_DWORD *)(*(_QWORD *)(v17 + 24) + 32) != 0;
  if (!*((_QWORD *)priv + 9))
  {
LABEL_112:
    NSLog(CFSTR("[CAMetalLayer nextDrawable] returning nil because device is nil."));
    return;
  }
  v19 = 0;
  v71 = 0;
  v74 = (int *)(priv + 132);
  v20 = (unsigned int *)(priv + 152);
  v21 = 0.0;
  while (1)
  {
    if (*((_QWORD *)priv + 4))
      goto LABEL_38;
    if (!byte_1ECDC6AC8)
    {
      v22 = *v74;
      if (!v18)
        break;
      goto LABEL_35;
    }
    v22 = 2;
    if (!v18)
      break;
LABEL_35:
    *((_WORD *)priv + 144) &= ~0x10u;
    v23 = a1->_priv;
    v23[34] = v22;
    v24 = *(_QWORD *)(*((_QWORD *)v23 + 2) + 48);
    if (v24)
      *(_BYTE *)(*(_QWORD *)(v24 + 24) + 95) = 5 - v22;
    v18 = 1;
LABEL_38:
    if ((v19 & 1) != 0)
      goto LABEL_113;
LABEL_39:
    v25 = *((_QWORD *)priv + 25);
    v26 = CAHostTimeWithTime(0.2) + v25;
    if (mach_absolute_time() > v26)
      goto LABEL_113;
    v27 = *((unsigned __int16 *)priv + 144);
    *((_WORD *)priv + 144) = (*((_WORD *)priv + 144) >> 1) & 0x100 | *((_WORD *)priv + 144) & 0xFEFF;
    CAImageQueueSetFlagsInternal(*((int **)priv + 2), 0x4000000000000000, (unint64_t)((v27 >> 1) & 0x100) << 54);
    v28 = *((_WORD *)priv + 144);
    if ((v28 & 0x100) != 0)
    {
      v30 = priv + 136;
      if ((v28 & 0x10) != 0)
        goto LABEL_47;
      v30 = priv + 136;
      if (*((_QWORD *)priv + 4))
        goto LABEL_47;
LABEL_46:
      v30 = priv + 132;
      goto LABEL_47;
    }
    if ((v28 & 0x20) == 0 || *((_QWORD *)priv + 4))
    {
      v29 = 0;
      goto LABEL_48;
    }
    v30 = priv + 136;
    if ((v28 & 0x10) == 0)
      goto LABEL_46;
LABEL_47:
    v29 = *v30 > 2u;
LABEL_48:
    pthread_setspecific(collect_slot, priv);
    v31 = CAImageQueueCollect_(*((_QWORD *)priv + 2), 0, v29);
    pthread_setspecific(collect_slot, 0);
    if (a3)
      *a3 = v31;
    if (!a2)
      return;
    if (v31)
    {
      v32 = *((_QWORD *)priv + 4) || (*((_WORD *)priv + 144) & 0x10) != 0
          ? *((unsigned int *)priv + 34)
          : *v74;
      if (v32 >= 5)
        goto LABEL_60;
      v33 = 5 - v32;
      v34 = v31;
      if (v33 < v31)
        v34 = v33;
      if (v31 != v34)
      {
LABEL_60:
        unused_drawable = get_unused_drawable((uint64_t)priv, v73, (v7 & 0x800000000000000) != 0, 1);
        if (unused_drawable)
        {
          v67 = unused_drawable;
          do
            v68 = __ldaxr((unsigned int *)unused_drawable);
          while (__stlxr(v68 + 1, (unsigned int *)unused_drawable));
          unused_drawable->var9 = (_CAMetalLayerPrivate *)priv;
          v69 = mach_absolute_time();
          v67->var8 = CATimeWithHostTime(v69);
          IOSurfaceGetID(v67->var10);
          kdebug_trace();
          v65 = [CAMetalDrawable alloc];
          v66 = v67;
LABEL_123:
          *a2 = -[CAMetalDrawable initWithDrawablePrivate:layer:waitStart:](v65, "initWithDrawablePrivate:layer:waitStart:", v66, a1, v70);
          return;
        }
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)priv + 2);
    v36 = mach_absolute_time();
    v37 = CATimeWithHostTime(v36);
    v38 = v37;
    if (v21 == 0.0)
    {
      v21 = v37;
    }
    else if (v71 & 1 | (v37 <= v21 + 0.05) || (dyld_program_sdk_at_least() & 1) != 0)
    {
      if ((*((_WORD *)priv + 144) & 0x80) != 0)
      {
        v44 = 0.064;
        if ((*((_WORD *)priv + 144) & 0x4000) == 0)
          v44 = *((double *)priv + 6);
        if (v38 > v44 + v21)
        {
          NSLog(CFSTR("[CAMetalLayer nextDrawable] returning nil due to 1 second timeout. Set allowsNextDrawableTimeout to keep retrying."));
          os_unfair_lock_lock((os_unfair_lock_t)priv + 2);
          return;
        }
      }
    }
    else
    {
      v46 = (void *)MEMORY[0x186DBE2E4]();
      +[CATransaction flush](CATransaction, "flush");
      objc_autoreleasePoolPop(v46);
      v71 = 1;
    }
    kdebug_trace();
    while (1)
    {
      v39 = __ldaxr(v20);
      if (v39 != 2)
        break;
      if (!__stlxr(0, v20))
      {
LABEL_77:
        v19 = 0;
        goto LABEL_78;
      }
    }
    while (1)
    {
      __clrex();
      do
      {
        if (__ldaxr(v20))
        {
          __clrex();
          goto LABEL_75;
        }
      }
      while (__stlxr(1u, v20));
      v41 = 0.064;
      if ((*((_WORD *)priv + 144) & 0x4000) == 0)
        v41 = *((double *)priv + 6);
      v42 = dispatch_time(0, (uint64_t)(v41 * 1000000000.0));
      if (dispatch_semaphore_wait(*((dispatch_semaphore_t *)priv + 18), v42))
        break;
LABEL_75:
      while (1)
      {
        v43 = __ldaxr(v20);
        if (v43 != 2)
          break;
        if (!__stlxr(0, v20))
          goto LABEL_77;
      }
    }
    while (1)
    {
      v45 = __ldaxr(v20);
      if (v45 != 1)
        break;
      v19 = 1;
      if (!__stlxr(0, v20))
        goto LABEL_78;
    }
    __clrex();
    dispatch_semaphore_wait(*((dispatch_semaphore_t *)priv + 18), 0xFFFFFFFFFFFFFFFFLL);
    v19 = 1;
LABEL_78:
    kdebug_trace();
    os_unfair_lock_lock((os_unfair_lock_t)priv + 2);
    if (!*((_QWORD *)priv + 9))
      goto LABEL_112;
  }
  v47 = v22 + 1;
  v48 = a1->_priv;
  v48[34] = v47;
  v49 = *(_QWORD *)(*((_QWORD *)v48 + 2) + 48);
  if (v49)
    *(_BYTE *)(*(_QWORD *)(v49 + 24) + 95) = 5 - v47;
  *((_WORD *)priv + 144) |= 0x10u;
  v50 = mach_absolute_time();
  v51 = CATimeWithHostTime(v50);
  v52 = *((double *)priv + 30) - v51 + 0.00833333333;
  if (v52 > 0.00833333333)
    v52 = 0.00833333333;
  if (v52 >= 0.0)
    v53 = v52;
  else
    v53 = 0.0;
  v54 = mach_absolute_time();
  v55 = CATimeWithHostTime(v54);
  for (i = v55 - v55; ; i = v58 - v55)
  {
    if (i >= v53)
    {
      v18 = 0;
      goto LABEL_109;
    }
    usleep(0x3E8u);
    v57 = mach_absolute_time();
    v58 = CATimeWithHostTime(v57);
    if ((*((_WORD *)priv + 144) & 8) != 0)
    {
      v59 = *(_QWORD *)(*((_QWORD *)priv + 2) + 48);
      if (v59)
      {
        if (*(_DWORD *)(*(_QWORD *)(v59 + 24) + 32))
          break;
      }
    }
  }
  v18 = 1;
LABEL_109:
  *((double *)priv + 30) = v53 + v51;
  CAImageQueueConsumeUnconsumed_(*((_QWORD *)priv + 2), 0);
  if ((v19 & 1) == 0)
    goto LABEL_39;
LABEL_113:
  os_unfair_lock_unlock((os_unfair_lock_t)priv + 2);
  layer_private_cleanup_callbacks((_CAMetalLayerPrivate *)priv);
  os_unfair_lock_lock((os_unfair_lock_t)priv + 2);
  pthread_setspecific(collect_slot, priv);
  v60 = CAImageQueueCollect_(*((_QWORD *)priv + 2), 0, 0);
  pthread_setspecific(collect_slot, 0);
  if (a3)
    *a3 = v60;
  if (a2)
  {
    v61 = get_unused_drawable((uint64_t)priv, v73, (v7 & 0x800000000000000) != 0, 0);
    if (v61)
    {
      v62 = v61;
      *((_BYTE *)v61 + 113) |= 8u;
      do
        v63 = __ldaxr((unsigned int *)v61);
      while (__stlxr(v63 + 1, (unsigned int *)v61));
      v61->var9 = (_CAMetalLayerPrivate *)priv;
      v64 = mach_absolute_time();
      v62->var8 = CATimeWithHostTime(v64);
      IOSurfaceGetID(v62->var10);
      kdebug_trace();
      v65 = [CAMetalDrawable alloc];
      v66 = v62;
      goto LABEL_123;
    }
    NSLog(CFSTR("[CAMetalLayer nextDrawable] returning nil because allocation failed."));
  }
}

void sub_184558A38(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  objc_end_catch();
  os_unfair_lock_lock(v1);
  _Unwind_Resume(a1);
}

void sub_184558A44()
{
  JUMPOUT(0x184558A50);
}

int *CAImageQueueSetFlagsInternal(int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = *((_QWORD *)result + 6);
  if (v3)
  {
    v4 = (unint64_t *)(*(_QWORD *)(v3 + 24) + 8);
    do
    {
      while (1)
      {
        v5 = atomic_load(v4);
        v6 = __ldaxr(v4);
        if (v6 == v5)
          break;
        __clrex();
      }
      v7 = (v5 | a3 & a2) & (a3 | ~a2);
    }
    while (__stlxr(v7, v4));
    if ((v5 & 1) == 0 && (v7 & 1) != 0)
      return CAImageQueuePing_((uint64_t)result, 0, 0, 0.0, 0.0);
  }
  return result;
}

uint64_t CAImageQueueCollect_(uint64_t a1, int a2, int a3)
{
  _BOOL4 v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  double *v9;
  uint64_t v10;
  double v11;
  unint64_t v13;
  _DWORD *v14;
  int v15;
  unsigned int v16;
  int *v17;
  int v18;
  BOOL v19;
  _BOOL4 v21;
  int v22;
  int v23;
  double v24;
  char v27;
  _DWORD *v30;
  os_unfair_lock_s *v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  BOOL v39;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  IOSurfaceID ID;
  mach_port_t v47;
  mach_port_t reply_port;
  mach_msg_return_t v49;
  mach_port_t msgh_remote_port;
  _QWORD *v51;
  unint64_t v52;
  _DWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  double *v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  _QWORD *v66;
  BOOL v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  int v71;
  BOOL v72;
  _QWORD *v73;
  _BOOL4 v74;
  unsigned int v75;
  os_unfair_lock_s *lock;
  mach_msg_header_t msg[2];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  if (a3)
    v5 = *(_DWORD *)(a1 + 40) > 2u;
  else
    v5 = 0;
  if (!*(_QWORD *)(a1 + 48))
    return 0;
  lock = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24);
  v7 = *(unsigned int *)(a1 + 40);
  v8 = 0.0;
  v74 = v5;
  if (a2)
  {
    if (!*(_DWORD *)(a1 + 40))
      goto LABEL_54;
    v9 = (double *)(v6 + 528);
    v10 = *(unsigned int *)(a1 + 40);
    do
    {
      if (*((_DWORD *)v9 - 1) && (*(_DWORD *)v9 & 0x80000000) == 0 && *((_DWORD *)v9 - 2) == *(_DWORD *)(v6 + 16))
      {
        v11 = *(v9 - 9);
        if (v11 > v8 && v11 <= *(double *)(v6 + 136))
          v8 = *(v9 - 9);
      }
      v9 += 20;
      --v10;
    }
    while (v10);
  }
  if (*(_DWORD *)(a1 + 40))
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = (int *)(v6 + 528);
    while (!*(v17 - 1))
    {
      ++v16;
LABEL_51:
      ++v13;
      v17 += 40;
      if (v13 >= v7)
        goto LABEL_55;
    }
    v18 = *(v17 - 3);
    if (v18 > 572662305)
    {
      if (v18 != 572662306 && v18 != 858993459)
        goto LABEL_50;
      v27 = 0;
    }
    else
    {
      if (v18)
        v19 = v18 == 286331153;
      else
        v19 = 1;
      if (!v19 || a2 == 0)
        goto LABEL_50;
      v21 = 0;
      v22 = *(v17 - 2);
      v23 = *(_DWORD *)(v6 + 16);
      v24 = *((double *)v17 - 9);
      if (v24 != 0.0 && v8 != 0.0)
        v21 = v24 < v8 && *v17 >= 0 && v22 == v23;
      v27 = 1;
      if (((v22 - v23) & 0x80000000) == 0 && !v21)
        goto LABEL_50;
    }
    v14 = release_image((_QWORD *)a1, v13, v14, v27);
    ++v16;
    v7 = *(unsigned int *)(a1 + 40);
LABEL_50:
    v15 |= (*v17 & 4u) >> 2;
    goto LABEL_51;
  }
LABEL_54:
  v16 = 0;
  v15 = 0;
  v14 = 0;
LABEL_55:
  v30 = v14;
  v31 = lock;
  os_unfair_lock_unlock(lock);
  v32 = *(unsigned __int8 *)(v6 + 95);
  if (v74 && v16 <= v32)
  {
    os_unfair_lock_lock(lock);
    v33 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v33)
    {
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = v6 + 516;
      do
      {
        if (*(_DWORD *)(v38 + 8) && *(_DWORD *)v38 == 286331153)
        {
          *(_BYTE *)(v38 + 63) = 0;
          if (v36)
            v39 = *(_DWORD *)(v38 + 40) >= v37;
          else
            v39 = 0;
          if (!v39)
          {
            v37 = *(_DWORD *)(v38 + 40);
            v35 = v34;
          }
          ++v36;
        }
        ++v34;
        v38 += 160;
      }
      while (v33 != v34);
    }
    else
    {
      v33 = 0;
      v37 = 0;
      v36 = 0;
      v35 = 0;
    }
    v42 = *(unsigned __int8 *)(v6 + 95) + 1;
    v39 = v33 >= v42;
    v43 = v33 - v42;
    if (!v39)
      v43 = 0;
    v44 = v43 > v36 || v37 == 0;
    if (v44 || !*(_DWORD *)(a1 + 212))
    {
      v41 = v16;
      goto LABEL_89;
    }
    v45 = v35;
    ID = IOSurfaceGetID(*(IOSurfaceRef *)(*(_QWORD *)(a1 + 64) + 8 * v35));
    v47 = *(_DWORD *)(a1 + 212);
    memset(&msg[0].msgh_id, 0, 28);
    *(_OWORD *)&msg[0].msgh_size = 0u;
    *(_QWORD *)&msg[1].msgh_bits = *MEMORY[0x1E0C804E8];
    msg[1].msgh_remote_port = ID;
    reply_port = mig_get_reply_port();
    msg[0].msgh_remote_port = v47;
    msg[0].msgh_local_port = reply_port;
    msg[0].msgh_bits = 5395;
    *(_QWORD *)&msg[0].msgh_voucher_port = 0x9D5500000000;
    if (MEMORY[0x1E0C85B60])
    {
      voucher_mach_msg_set(msg);
      reply_port = msg[0].msgh_local_port;
    }
    v49 = mach_msg(msg, 3, 0x24u, 0x30u, reply_port, 0, 0);
    msgh_remote_port = v49;
    if ((v49 - 268435458) <= 0xE && ((1 << (v49 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(msg[0].msgh_local_port);
      goto LABEL_86;
    }
    if (v49)
    {
      mig_dealloc_reply_port(msg[0].msgh_local_port);
      goto LABEL_140;
    }
    if (msg[0].msgh_id == 71)
    {
      msgh_remote_port = -308;
    }
    else if (msg[0].msgh_id == 40377)
    {
      if ((msg[0].msgh_bits & 0x80000000) == 0)
      {
        if (msg[0].msgh_size == 40)
        {
          if (!msg[0].msgh_remote_port)
          {
            msgh_remote_port = msg[1].msgh_remote_port;
            if (!msg[1].msgh_remote_port)
            {
              if (msg[1].msgh_local_port)
              {
                *(_BYTE *)(v6 + 160 * v45 + 579) = 1;
                v30 = release_image((_QWORD *)a1, v45, v30, 0);
                v41 = v16 + 1;
                goto LABEL_87;
              }
LABEL_86:
              v41 = v16;
LABEL_87:
              v31 = lock;
LABEL_89:
              os_unfair_lock_unlock(v31);
              goto LABEL_90;
            }
            goto LABEL_139;
          }
        }
        else if (msg[0].msgh_size == 36)
        {
          if (msg[0].msgh_remote_port)
            v67 = 1;
          else
            v67 = msg[1].msgh_remote_port == 0;
          if (v67)
            msgh_remote_port = -300;
          else
            msgh_remote_port = msg[1].msgh_remote_port;
          goto LABEL_139;
        }
      }
      msgh_remote_port = -300;
    }
    else
    {
      msgh_remote_port = -301;
    }
LABEL_139:
    mach_msg_destroy(msg);
LABEL_140:
    v41 = v16;
    v31 = lock;
    if (msgh_remote_port == -81182719)
    {
      x_log_crash("Unentitled call to server!");
      abort();
    }
    goto LABEL_89;
  }
  v41 = v16;
LABEL_90:
  v51 = v30;
  if (v16 <= v32 && ((v15 ^ 1) & 1) == 0)
  {
    v75 = v41;
    os_unfair_lock_lock(v31);
    LODWORD(v52) = *(_DWORD *)(a1 + 40);
    if ((_DWORD)v52 == 1)
    {
      v53 = v30;
    }
    else
    {
      v54 = 0;
      v55 = 1;
      v53 = v30;
      do
      {
        v56 = v6 + 160 * v54;
        if (*(_DWORD *)(v56 + 524))
        {
          v57 = *(_DWORD *)(v56 + 520);
          if (!*(_DWORD *)(v6 + 160 * v54 + 516) && v57 > *(_DWORD *)(v6 + 16) && v54 + 1 < v52)
          {
            v59 = (double *)(v56 + 456);
            v60 = v55;
            do
            {
              v61 = v6 + 160 * v60;
              if (*(_DWORD *)(v61 + 524)
                && !*(_DWORD *)(v6 + 160 * v60 + 516)
                && v57 == *(_DWORD *)(v6 + 160 * v60 + 520)
                && *v59 == 0.0
                && *(double *)(v61 + 456) == 0.0)
              {
                if (*(_DWORD *)(v6 + 160 * v54 + 556) >= *(_DWORD *)(v6 + 456 + 160 * v60 + 100))
                  v62 = v60;
                else
                  v62 = v54;
                v63 = v62;
                v64 = (unsigned int *)(v6 + 456 + 160 * v62 + 60);
                while (!__ldaxr(v64))
                {
                  if (!__stlxr(0x22222222u, v64))
                  {
                    v53 = release_image((_QWORD *)a1, v63, v53, 0);
                    ++v75;
                    goto LABEL_115;
                  }
                }
                __clrex();
              }
LABEL_115:
              ++v60;
              v52 = *(unsigned int *)(a1 + 40);
            }
            while (v60 < v52);
          }
        }
        ++v54;
        ++v55;
      }
      while (v54 < (v52 - 1));
    }
    v66 = v53;
    os_unfair_lock_unlock(lock);
    v51 = v66;
    v41 = v75;
  }
  if (BYTE9(xmmword_1ECDC6A90))
  {
    memset(msg, 0, 24);
    if (v51)
    {
      v68 = 0;
      v69 = v51;
      do
      {
        LODWORD(v70) = *((_DWORD *)v69 + 4);
        if (!(_DWORD)v70)
          v70 = v69[3];
        *(&msg[0].msgh_bits + v68) = v70;
        v69 = (_QWORD *)*v69;
        v71 = v68 + 1;
        if (v69)
          v72 = v68 >= 5;
        else
          v72 = 1;
        ++v68;
      }
      while (!v72);
      for (; v69; v69 = (_QWORD *)*v69)
        ++v71;
    }
    v73 = v51;
    kdebug_trace();
    v51 = v73;
    if (!v73)
      return v41;
    goto LABEL_120;
  }
  if (v51)
LABEL_120:
    release_images(a1, v51);
  return v41;
}

_DWORD *release_image(_QWORD *a1, uint64_t a2, _DWORD *a3, char a4)
{
  uint64_t v8;
  const void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  malloc_zone_t *malloc_zone;
  _DWORD *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v28;

  v8 = *(_QWORD *)(a1[6] + 24);
  v9 = *(const void **)(a1[8] + 8 * a2);
  if (v9)
  {
    v10 = atomic_load((unint64_t *)(v8 + 8));
    if ((v10 & 0x400000000000000) == 0)
      IOSurfaceDecrementUseCount(*(IOSurfaceRef *)(a1[8] + 8 * a2));
    v11 = IOSurfaceGetDetachModeCode() & 0xFFFFFFFFFFFFLL;
    CFRelease(v9);
    *(_QWORD *)(a1[8] + 8 * a2) = 0;
    v12 = v8 + 160 * a2;
    v13 = *(_DWORD *)(v12 + 512);
    *(_DWORD *)(v12 + 512) = 0;
  }
  else
  {
    v13 = 0;
    v11 = 0xFFFFFFFFFFFFLL;
  }
  if (*(_QWORD *)(a1[23] + 8 * a2))
  {
    v14 = v8 + 160 * a2;
    v15 = *(_DWORD *)(v14 + 524);
    v28 = v11;
    v16 = a4;
    v17 = *(_QWORD *)(v14 + 464);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v19 = malloc_type_zone_malloc(malloc_zone, 0x78uLL, 0x8BB15036uLL);
    v20 = *(_DWORD *)(v14 + 556);
    v19[2] = v15;
    v19[3] = v20;
    v21 = *(_DWORD *)(v14 + 548);
    *((_QWORD *)v19 + 3) = v17;
    a4 = v16;
    v19[4] = v13;
    v19[5] = v21;
    *((_QWORD *)v19 + 4) = *(_QWORD *)(v14 + 456);
    v22 = a1[23];
    v23 = a1[24];
    *((_QWORD *)v19 + 5) = *(_QWORD *)(v22 + 8 * a2);
    *((_QWORD *)v19 + 6) = *(_QWORD *)(v23 + 8 * a2);
    LODWORD(v23) = *(_DWORD *)(v14 + 540);
    v19[14] = v23;
    *((_QWORD *)v19 + 8) = *(_QWORD *)(v14 + 472);
    *((_QWORD *)v19 + 10) = *(_QWORD *)(v14 + 480);
    v24 = *(double *)(v14 + 488);
    *((double *)v19 + 11) = v24;
    v25 = *(_QWORD *)(v14 + 496);
    *((_QWORD *)v19 + 12) = v28;
    *((_QWORD *)v19 + 13) = v25;
    v26 = v24 * (double)v23;
    if (*(double *)(v14 + 504) != 0.0)
      v26 = *(double *)(v14 + 504);
    *((double *)v19 + 14) = v26;
    *((_BYTE *)v19 + 73) = *(_BYTE *)(v14 + 577) != 0;
    *((_BYTE *)v19 + 74) = *(_BYTE *)(v14 + 579) != 0;
    *((_BYTE *)v19 + 72) = *(_DWORD *)(v14 + 516) == 858993459;
    *(_QWORD *)v19 = a3;
    *(_QWORD *)(v22 + 8 * a2) = 0;
    *(_QWORD *)(a1[24] + 8 * a2) = 0;
    a3 = v19;
  }
  if ((a4 & 1) == 0)
  {
    __dmb(0xBu);
    *(_DWORD *)(v8 + 160 * a2 + 524) = 0;
  }
  return a3;
}

_CAMetalDrawablePrivate *get_unused_drawable(uint64_t a1, unsigned int a2, int a3, int a4)
{
  _CAMetalDrawablePrivate **v7;
  _CAMetalDrawablePrivate *v9;
  _CAMetalDrawablePrivate *v10;
  malloc_zone_t *malloc_zone;
  _DWORD *v12;
  unsigned int v13;
  unsigned int v14;
  __int16 v15;
  CA::Render *v16;
  const __CFString *v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  _CAImageQueue *v23;
  int v24;
  __IOSurface *iosurface_with_pixel_format;
  __IOSurface *v26;
  CGColorSpace *v28;
  CGColorSpace *var13;
  int v30;
  CAEDRMetadata *v31;
  CAEDRMetadata *var14;
  id var15;
  __IOSurface *var10;
  _CAImageQueue *v35;
  CGColorSpace *space;
  uint64_t v37;
  CAEDRMetadata *v38;
  void *v39;
  uint64_t v40;
  uint32_t oldState;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v7 = *(_CAMetalDrawablePrivate ***)(a1 + 56);
  if (!v7)
  {
LABEL_14:
    if (a4)
    {
      v12 = (_DWORD *)(*(_QWORD *)(a1 + 32) || (*(_WORD *)(a1 + 288) & 0x10) != 0 ? a1 + 136 : a1 + 132);
      if (*v12 <= *(_DWORD *)(a1 + 128))
        return 0;
    }
    layer_private_check_pixel_format(*(_CAMetalLayerPrivate **)(a1 + 72), (CA::Render *)*(unsigned int *)(a1 + 64));
    v13 = *(_DWORD *)(a1 + 120);
    v14 = *(_DWORD *)(a1 + 124);
    v39 = *(void **)(a1 + 72);
    v40 = *(_QWORD *)(a1 + 96);
    v15 = *(_WORD *)(a1 + 288);
    v16 = (CA::Render *)*(unsigned int *)(a1 + 64);
    space = *(CGColorSpace **)(a1 + 248);
    v38 = *(CAEDRMetadata **)(a1 + 256);
    v37 = objc_msgSend(*(id *)(a1 + 24), "toneMapMode");
    v18 = (a2 & 0xFFFFFFFD) == 1 ? v14 : v13;
    v19 = (a2 & 0xFFFFFFFD) == 1 ? v13 : v14;
    v20 = v15 & 0x40;
    v22 = *(_QWORD *)(a1 + 272);
    v21 = *(_QWORD *)(a1 + 280);
    v23 = *(_CAImageQueue **)(a1 + 16);
    v24 = v20 ? 6 : 0;
    iosurface_with_pixel_format = CA::Render::create_iosurface_with_pixel_format(v16, v18, v19, (MEMORY[0xFFFFFC020] >> 9) & 4 | v24, *(_QWORD *)(a1 + 272), CFSTR("CAMetalLayer Display Drawable"), v17);
    if (!iosurface_with_pixel_format)
      return 0;
    v26 = iosurface_with_pixel_format;
    v35 = v23;
    v9 = (_CAMetalDrawablePrivate *)malloc_type_calloc(1uLL, 0x78uLL, 0x10A0040E43F16B8uLL);
    v9->var1 = v13;
    v9->var2 = v14;
    v9->var3 = v16;
    v9->var4 = v40;
    v9->var6 = v22;
    v9->var7 = v21;
    v9->var10 = v26;
    v9->var12 = v39;
    v9->var16 = a2;
    *((_BYTE *)v9 + 113) = *((_BYTE *)v9 + 113) & 0x88 | (v20 >> 6) | 4;
    drawable_set_colorspace(v9, space);
    drawable_set_edr_metadata(v9, v38);
    v9->var15 = (id)v37;
    v9->var11 = allocate_drawable_texture(v39, v26, v13, v14, v40, 0, a2, v20 != 0, (uint64_t)CFSTR("CAMetalLayer Display Drawable"), v21);
    register_drawable((uint64_t)v9, v35);
    ++*(_DWORD *)(a1 + 128);
    return v9;
  }
  while (1)
  {
    v9 = *v7;
    v10 = v7[1];
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v7);
    *(_QWORD *)(a1 + 56) = v10;
    if (v9->var1 == *(_DWORD *)(a1 + 120)
      && v9->var2 == *(_DWORD *)(a1 + 124)
      && v9->var3 == *(_DWORD *)(a1 + 64)
      && v9->var4 == *(_QWORD *)(a1 + 96)
      && ((*(unsigned __int16 *)(a1 + 288) >> 6) & 1) == (*((_BYTE *)v9 + 113) & 1)
      && v9->var12 == *(id *)(a1 + 72)
      && v9->var16 == a2
      && v9->var6 == *(_QWORD *)(a1 + 272)
      && v9->var7 == *(_QWORD *)(a1 + 280)
      && ((*((_BYTE *)v9 + 113) & 4) != 0 || !a3))
    {
      break;
    }
    release_drawable((_CAMetalLayerPrivate *)a1, v9);
    v7 = *(_CAMetalDrawablePrivate ***)(a1 + 56);
    if (!v7)
      goto LABEL_14;
  }
  v28 = *(CGColorSpace **)(a1 + 248);
  var13 = v9->var13;
  if (!v28 || !var13)
  {
    if (var13 != v28)
      goto LABEL_38;
LABEL_39:
    v30 = 0;
    goto LABEL_40;
  }
  if (CFEqual(var13, v28))
    goto LABEL_39;
  v28 = *(CGColorSpace **)(a1 + 248);
LABEL_38:
  drawable_set_colorspace(v9, v28);
  v30 = 1;
LABEL_40:
  v31 = *(CAEDRMetadata **)(a1 + 256);
  var14 = (CAEDRMetadata *)v9->var14;
  if (v31 && var14)
  {
    if (!-[CAEDRMetadata isEqual:](var14, "isEqual:", *(_QWORD *)(a1 + 256)))
    {
      v31 = *(CAEDRMetadata **)(a1 + 256);
LABEL_45:
      drawable_set_edr_metadata(v9, v31);
      v30 = 1;
    }
  }
  else if (var14 != v31)
  {
    goto LABEL_45;
  }
  var15 = v9->var15;
  if (var15 != (id)objc_msgSend(*(id *)(a1 + 24), "toneMapMode"))
  {
    v9->var15 = (id)objc_msgSend(*(id *)(a1 + 24), "toneMapMode");
    v30 = 1;
  }
  if ((*((_BYTE *)v9 + 113) & 0x40) != 0)
  {
    var10 = v9->var10;
    oldState = 0;
    IOSurfaceSetPurgeable(var10, 0, &oldState);
    *((_BYTE *)v9 + 113) &= ~0x40u;
  }
  if (v30)
    register_drawable((uint64_t)v9, *(_CAImageQueue **)(a1 + 16));
  return v9;
}

BOOL present_on_finish_enabled(_CAImageQueue *a1)
{
  uint64_t v1;
  BOOL v2;
  _BOOL4 v3;
  char v5;
  uint64_t v6;
  _BOOL4 v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  _DWORD v11[2];
  __int16 v12;
  _BOOL4 v13;
  __int16 v14;
  int v15;
  __int16 v16;
  _BOOL4 v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a1)
    v1 = atomic_load((unint64_t *)(*((_QWORD *)a1 + 3) + 8));
  else
    v1 = 0;
  if (wants_compositing_dependencies(void)::once != -1)
    dispatch_once(&wants_compositing_dependencies(void)::once, &__block_literal_global_468);
  if (wants_compositing_dependencies(void)::wants_compositing_dependencies)
    v2 = 0;
  else
    v2 = (v1 & 0x802000000000000) == 0;
  v3 = !v2 || byte_1ECDC6ACB != 0;
  if (byte_1ECDC6ACC)
  {
    v5 = v1 >= 0 || v3;
    v6 = x_log_category_api;
    v7 = os_signpost_enabled((os_log_t)x_log_category_api);
    if ((v5 & 1) != 0)
    {
      if (!v7)
        return v1 < 0 && !v3;
      v11[0] = 67241728;
      v11[1] = (unint64_t)v1 >> 63;
      v12 = 1026;
      v13 = v3;
      v14 = 1026;
      v15 = wants_compositing_dependencies(void)::wants_compositing_dependencies;
      v16 = 1026;
      v17 = (v1 & 0x800000000000000) != 0;
      v18 = 1026;
      v19 = ((unint64_t)v1 >> 49) & 1;
      v20 = 1026;
      v21 = 0;
      v22 = 1026;
      v23 = byte_1ECDC6ACB;
      v8 = "Disabled requested=%{public,name=requested}d disabled=%{public,name=disabled}d wants_compositing_dependencies"
           "=%{public,name=wants_compositing_dependencies}d detached=%{public,name=detached}d game_mode=%{public,name=gam"
           "e_mode}d vsync_disabled=%{public,name=vsync_disabled}d CADebugDisablePresentOnFinish=%{public,name=CADebugDis"
           "ablePresentOnFinish}d";
      v9 = v6;
      v10 = 44;
    }
    else
    {
      if (!v7)
        return v1 < 0 && !v3;
      LOWORD(v11[0]) = 0;
      v8 = "Enabled";
      v9 = v6;
      v10 = 2;
    }
    _os_signpost_emit_with_name_impl(&dword_184457000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "PresentOnFinish", v8, (uint8_t *)v11, v10);
  }
  return v1 < 0 && !v3;
}

void release_images(uint64_t a1, _QWORD *a2)
{
  pthread_key_t v4;
  _QWORD *v5;
  char *v6;
  _BOOL4 v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  const void *v16;
  _BYTE v17[12];
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = release_key;
  if (!release_key)
  {
    *(_QWORD *)v17 = 0;
    pthread_key_create((pthread_key_t *)v17, 0);
    v4 = *(_QWORD *)v17;
    release_key = *(_QWORD *)v17;
  }
  v16 = pthread_getspecific(v4);
  v5 = a2;
  do
  {
    if ((release_images(_CAImageQueue *,CAImageQueueReleased *)::initialized & 1) != 0)
    {
      if (!release_images(_CAImageQueue *,CAImageQueueReleased *)::log_frames)
        goto LABEL_15;
    }
    else
    {
      v6 = getenv("CA_LOG_IMAGE_QUEUE_FRAMES");
      if (v6)
        v7 = atoi(v6) != 0;
      else
        v7 = 0;
      release_images(_CAImageQueue *,CAImageQueueReleased *)::log_frames = v7;
      release_images(_CAImageQueue *,CAImageQueueReleased *)::initialized = 1;
      if (!v7)
        goto LABEL_15;
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v8 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
      {
        v10 = v5[3];
        v9 = v5[4];
        v11 = *((_DWORD *)v5 + 14);
        v12 = v5[8];
        v13 = v5[10];
        v14 = v5[12];
        *(_DWORD *)v17 = 134219520;
        *(_QWORD *)&v17[4] = a1;
        v18 = 2048;
        v19 = v9;
        v20 = 2048;
        v21 = v10;
        v22 = 1024;
        v23 = v11;
        v24 = 2048;
        v25 = v12;
        v26 = 2048;
        v27 = v13;
        v28 = 2048;
        v29 = v14;
        _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_DEFAULT, "CAImageQueue %p: frame %f (%llx) used %d: %f (%llx) detach: 0x%llx\n", v17, 0x44u);
      }
    }
LABEL_15:
    pthread_setspecific(release_key, v5);
    ((void (*)(_QWORD, _QWORD, _QWORD))v5[5])(*((unsigned int *)v5 + 2), v5[3], v5[6]);
    CAImageQueueDidComposite(*(_DWORD *)(a1 + 28), *((_DWORD *)v5 + 3), *((_DWORD *)v5 + 5));
    v5 = (_QWORD *)*v5;
  }
  while (v5);
  pthread_setspecific(release_key, v16);
  if (a2)
  {
    do
    {
      v15 = (_QWORD *)*a2;
      free(a2);
      a2 = v15;
    }
    while (v15);
  }
}

void CAImageQueueDidComposite(int a1, unsigned int a2, unsigned int a3)
{
  CFTypeRef *v6;
  _BYTE *v7;
  unsigned int *v8;

  pthread_mutex_lock(&composited_mutex);
  v6 = (CFTypeRef *)composited_list;
  if (composited_list)
  {
    while (1)
    {
      v7 = *v6;
      if (*((_DWORD *)*v6 + 7) == a1)
        break;
      v6 = (CFTypeRef *)v6[1];
      if (!v6)
        goto LABEL_4;
    }
    CFRetain(*v6);
    pthread_mutex_unlock(&composited_mutex);
    v8 = (unsigned int *)malloc_type_malloc(0x10uLL, 0x1020040EDED9539uLL);
    *(_QWORD *)v8 = v7;
    v8[2] = a2;
    v8[3] = a3;
    pthread_mutex_lock(&composited_mutex);
    while (v7[160])
      pthread_cond_wait(&composited_cond, &composited_mutex);
    if (*((_QWORD *)v7 + 18))
    {
      v7[160] = 1;
      pthread_mutex_unlock(&composited_mutex);
      (*((void (**)(_BYTE *, _QWORD, _QWORD, _QWORD))v7 + 18))(v7, *((_QWORD *)v7 + 19), v8[2], v8[3]);
      pthread_mutex_lock(&composited_mutex);
      v7[160] = 0;
      pthread_cond_broadcast(&composited_cond);
    }
    pthread_mutex_unlock(&composited_mutex);
    CFRelease(v7);
    free(v8);
  }
  else
  {
LABEL_4:
    pthread_mutex_unlock(&composited_mutex);
  }
}

void layer_composited(_CAImageQueue *a1, void *a2, unsigned int a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  unsigned int v12;
  id v13;
  _BYTE v14[128];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)a2 + 25) = mach_absolute_time();
  v13 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  os_unfair_lock_lock((os_unfair_lock_t)a2 + 46);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v7 = (void *)*((_QWORD *)a2 + 24);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v14, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v16 != v9)
          objc_enumerationMutation(v7);
        v11 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        if (objc_msgSend(v11, "presentScheduledInsertSeedValid"))
        {
          v12 = objc_msgSend(v11, "presentScheduledInsertSeed");
          if (!a3 || v12 <= a3)
          {
            objc_msgSend(v11, "setUpdateSeed:", a4);
            objc_msgSend(v11, "setDidComposite:", 1);
            objc_msgSend(v11, "didScheduledPresent");
            objc_msgSend(v13, "addObject:", v11);
            IOSurfaceGetID((IOSurfaceRef)objc_msgSend((id)objc_msgSend(v11, "cachedTexture"), "iosurface"));
            objc_msgSend(v11, "presentScheduledInsertSeed");
            objc_msgSend((id)objc_msgSend(v11, "cachedTexture"), "iosurface");
            IOSurfaceGetDetachModeCode();
            kdebug_trace();
          }
        }
      }
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v14, 16);
    }
    while (v8);
  }
  if (objc_msgSend(v13, "count"))
    objc_msgSend(*((id *)a2 + 24), "removeObjectsInArray:", v13);
  os_unfair_lock_unlock((os_unfair_lock_t)a2 + 46);

}

void sub_184559E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_unfair_lock_t lock)
{
  _Unwind_Resume(exception_object);
}

_QWORD *CA::Context::retain_all_contexts(CA::Context *this, _QWORD *a2, size_t *a3, unint64_t *a4, const __CFArray *a5)
{
  int v8;
  unint64_t v9;
  int **v10;
  uint64_t v11;
  int *v12;
  int v13;
  id *v14;
  _DWORD **v15;
  _DWORD *v16;
  malloc_zone_t *malloc_zone;
  uint64_t v18;
  size_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t i;
  _DWORD *v23;
  int **v24;
  uint64_t v25;
  int *v26;
  int v27;
  id *v28;
  _BYTE v30[128];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v8 = (int)this;
  v35 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Context::_lock);
  if (a4)
  {
    v9 = objc_msgSend(a4, "count");
    if ((CA::all_contexts(void)::contexts_data_initialized & 1) != 0)
    {
      v10 = (int **)CA::all_contexts(void)::contexts_data;
      v11 = qword_1ECDC6558;
      while (1)
      {
        if (v10 == (int **)v11)
          goto LABEL_23;
        v12 = *v10;
        v13 = **v10;
        if (!v13 && (v8 & 1) != 0)
          break;
        if (v13)
        {
          v14 = (id *)(v12 + 20);
          if (*((_BYTE *)v12 + 88))
          {
            if (!objc_loadWeak(v14))
              break;
          }
          else if (!*v14)
          {
            break;
          }
        }
LABEL_13:
        ++v10;
      }
      ++v9;
      goto LABEL_13;
    }
    CA::all_contexts(void)::contexts_data = 0;
    qword_1ECDC6558 = 0;
    qword_1ECDC6560 = 0;
    CA::all_contexts(void)::contexts_data_initialized = 1;
    goto LABEL_23;
  }
  if (v8)
  {
    if (CA::all_contexts(void)::contexts_data_initialized)
    {
      v9 = (qword_1ECDC6558 - CA::all_contexts(void)::contexts_data) >> 3;
      goto LABEL_23;
    }
LABEL_66:
    CA::all_contexts(void)::contexts_data = 0;
    qword_1ECDC6558 = 0;
    qword_1ECDC6560 = 0;
    CA::all_contexts(void)::contexts_data_initialized = 1;
    if (a2)
      goto LABEL_27;
LABEL_67:
    v19 = 0;
    goto LABEL_68;
  }
  if (!CA::all_contexts(void)::contexts_data_initialized)
    goto LABEL_66;
  v15 = (_DWORD **)CA::all_contexts(void)::contexts_data;
  if (CA::all_contexts(void)::contexts_data == qword_1ECDC6558)
    goto LABEL_26;
  v9 = 0;
  do
  {
    v16 = *v15++;
    if (*v16)
      ++v9;
  }
  while (v15 != (_DWORD **)qword_1ECDC6558);
LABEL_23:
  if (v9 > *a3)
  {
    if (v9 >> 61)
    {
      v19 = 0;
      a2 = 0;
      goto LABEL_68;
    }
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    a2 = malloc_type_zone_malloc(malloc_zone, 8 * v9, 0x8BB15036uLL);
  }
LABEL_26:
  if (!a2)
    goto LABEL_67;
LABEL_27:
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v18 = objc_msgSend(a4, "countByEnumeratingWithState:objects:count:", &v31, v30, 16);
  if (v18)
  {
    v19 = 0;
    v20 = 0;
    v21 = *(_QWORD *)v32;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v32 != v21)
          objc_enumerationMutation(a4);
        v23 = (_DWORD *)objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * i), "contextImpl");
        a2[v19 + i] = v23;
        ++*v23;
        v20 = v20 || v23[35] != 0;
      }
      v18 = objc_msgSend(a4, "countByEnumeratingWithState:objects:count:", &v31, v30, 16);
      v19 += i;
    }
    while (v18);
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  if ((CA::all_contexts(void)::contexts_data_initialized & 1) != 0)
  {
    v24 = (int **)CA::all_contexts(void)::contexts_data;
    v25 = qword_1ECDC6558;
    while (1)
    {
      if (v24 == (int **)v25)
        goto LABEL_63;
      v26 = *v24;
      v27 = **v24;
      if (a4)
      {
        if (v27 || (v8 & 1) == 0)
        {
          if (!v27)
            goto LABEL_60;
          v28 = (id *)(v26 + 20);
          if (*((_BYTE *)v26 + 88))
          {
            if (objc_loadWeak(v28))
              goto LABEL_60;
          }
          else if (*v28)
          {
            goto LABEL_60;
          }
          v27 = *v26;
        }
        else
        {
          v27 = 0;
        }
      }
      else if ((v8 & 1) == 0 && !v27)
      {
        goto LABEL_60;
      }
      a2[v19] = v26;
      *v26 = v27 + 1;
      v20 = v20 || v26[35] != 0;
      ++v19;
LABEL_60:
      ++v24;
    }
  }
  CA::all_contexts(void)::contexts_data = 0;
  qword_1ECDC6558 = 0;
  qword_1ECDC6560 = 0;
  CA::all_contexts(void)::contexts_data_initialized = 1;
LABEL_63:
  if (v19 >= 2 && v20)
    qsort(a2, v19, 8uLL, (int (__cdecl *)(const void *, const void *))CA::compare_contexts);
LABEL_68:
  *a3 = v19;
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Context::_lock);
  return a2;
}

void sub_18455A210(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Context::_lock);
  _Unwind_Resume(a1);
}

void sub_18455A31C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

int *CAImageQueuePing_(uint64_t a1, int a2, int a3, double a4, double a5)
{
  int *result;
  uint64_t v11;
  CA::Render::Context *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  mach_port_t v17;
  mach_port_t v18;
  int v19;
  uint64_t v20;
  int v21;
  mach_msg_header_t msg;
  uint64_t v23;
  int v24;
  double v25;
  int v26;
  int v27;
  double v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  result = (int *)*(unsigned int *)(a1 + 208);
  if ((_DWORD)result)
  {
    result = CA::Context::retain_context_with_id((CA::Context *)result);
    v11 = result ? (uint64_t)(result + 54) : 0;
    if (result)
    {
      v12 = (CA::Render::Context *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      if (v12)
      {
        v13 = (unint64_t)v12;
        CA::Render::Context::will_commit(v12);
        CA::Render::Context::did_commit(v13, 1, 0, 1, 0, 0);
        v14 = (unsigned int *)(v13 + 8);
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
          (*(void (**)(unint64_t))(*(_QWORD *)v13 + 16))(v13);
      }
      else
      {
        v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
        if (v17)
        {
          v18 = v17;
          v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
          v20 = *(_QWORD *)(a1 + 48);
          if (!v20 || (v21 = *(_DWORD *)(*(_QWORD *)(v20 + 24) + 72)) == 0)
            v21 = v19;
          v23 = *MEMORY[0x1E0C804E8];
          v24 = v21;
          v25 = a4;
          v26 = a2;
          v27 = a3;
          v28 = a5;
          *(_QWORD *)&msg.msgh_bits = 19;
          msg.msgh_voucher_port = 0;
          msg.msgh_id = 40204;
          msg.msgh_remote_port = v18;
          msg.msgh_local_port = 0;
          if (MEMORY[0x1E0C85B60])
            voucher_mach_msg_set(&msg);
          if (mach_msg(&msg, 1, 0x3Cu, 0, 0, 0, 0) == -81182719)
          {
            x_log_crash("Unentitled call to server!");
            abort();
          }
        }
      }
      return (int *)(**(uint64_t (***)(uint64_t))v11)(v11);
    }
  }
  return result;
}

uint64_t CA::Context::retain_render_ctx(CA::Context *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v6;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::Context::_lock);
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    if (!v4)
    {
      v2 = 0;
      do
        v6 = __ldaxr(v3);
      while (__stlxr(v6 - 1, v3));
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Context::_lock);
  return v2;
}

uint64_t CA::Context::Generic::server_port(CA::Context::Generic *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 160);
}

uint64_t CA::Context::Generic::client_id(CA::Context::Generic *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 4);
}

uint64_t CA::Context::Generic::retain_render_context(CA::Context **this)
{
  return CA::Context::retain_render_ctx(this[1]);
}

uint64_t layer_private_check_pixel_format(_CAMetalLayerPrivate *a1, CA::Render *this)
{
  uint64_t result;

  result = CA::Render::fourcc_to_format(this);
  if (a1 && (result - 33) <= 2)
  {
    result = -[_CAMetalLayerPrivate supportsExtendedXR10Formats](a1, "supportsExtendedXR10Formats");
    if ((result & 1) == 0)
      return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("CAMetalLayerInvalid"), CFSTR("unsupported extended range format"));
  }
  return result;
}

__IOSurface *CA::OGL::create_iosurface(CA::OGL *this, uint64_t a2, uint64_t a3, char a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  __IOSurface *v13;
  __IOSurface *v14;
  OSType PixelFormat;
  int v16;
  const __CFString *v17;
  __IOSurface *iosurface_with_pixel_format;
  NSObject *v19;
  uint8_t buf[4];
  CA::OGL *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v10 = 1380411457;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::OGL::surface_cache_lock);
  v11 = 0;
  if (a5)
    v12 = 1999843442;
  else
    v12 = 1647534392;
  do
  {
    v13 = (__IOSurface *)CA::OGL::surface_cache[v11];
    if (v13)
    {
      if ((CA::OGL *)IOSurfaceGetWidth(v13) == this
        && IOSurfaceGetHeight((IOSurfaceRef)CA::OGL::surface_cache[v11]) == a2
        && IOSurfaceGetProtectionOptions() == a3)
      {
        PixelFormat = IOSurfaceGetPixelFormat((IOSurfaceRef)CA::OGL::surface_cache[v11]);
        v16 = 1380411457;
        if ((a4 & 1) == 0)
        {
          if (CADeviceUseCIF10::once != -1)
            dispatch_once(&CADeviceUseCIF10::once, &__block_literal_global_9735);
          if (CADeviceUseCIF10::enable_cif10)
            v16 = v12;
          else
            v16 = 1111970369;
        }
        if (PixelFormat == v16)
        {
          iosurface_with_pixel_format = (__IOSurface *)CA::OGL::surface_cache[v11];
          CA::OGL::surface_cache[v11] = 0;
          os_unfair_lock_unlock((os_unfair_lock_t)&CA::OGL::surface_cache_lock);
          return iosurface_with_pixel_format;
        }
      }
      CA::OGL::release_iosurface((CA::OGL *)CA::OGL::surface_cache[v11], v14);
      CA::OGL::surface_cache[v11] = 0;
    }
    ++v11;
  }
  while (v11 != 2);
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::OGL::surface_cache_lock);
  if ((a4 & 1) == 0)
  {
    if (CADeviceUseCIF10::once != -1)
      dispatch_once(&CADeviceUseCIF10::once, &__block_literal_global_9735);
    if (CADeviceUseCIF10::enable_cif10)
      v10 = v12;
    else
      v10 = 1111970369;
  }
  iosurface_with_pixel_format = CA::Render::create_iosurface_with_pixel_format((CA::Render *)v10, this, a2, 0xAu, a3, CFSTR("CA Asynchronous Page"), v17);
  if (!iosurface_with_pixel_format)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v19 = x_log_category_ogl;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        v22 = this;
        v23 = 2048;
        v24 = a2;
        _os_log_impl(&dword_184457000, v19, OS_LOG_TYPE_ERROR, "Failed to allocate async IOSurface [%zu x %zu]\n", buf, 0x16u);
      }
    }
    return 0;
  }
  return iosurface_with_pixel_format;
}

__IOSurface *CA::Render::create_iosurface_with_pixel_format(CA::Render *this, unsigned int a2, int a3, unsigned int a4, uint64_t a5, const void *a6, const __CFString *a7)
{
  __IOSurface *result;
  unsigned __int8 v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  CA::Render *v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  result = 0;
  v25 = *MEMORY[0x1E0C80C00];
  if (a2 && a3)
  {
    v14 = (2 * a4) & 0x10 | (8 * (a4 & 1));
    if ((a4 & 0x10) != 0)
      v15 = 2;
    else
      v15 = (a4 >> 5) & 1;
    v16 = *MEMORY[0x1E0C85AD8];
    if ((a4 & 0x1C6) != 0)
      v17 = 1792;
    else
      v17 = 1024;
    if (CADeviceUseCompression::once == -1)
    {
      if ((a4 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      dispatch_once(&CADeviceUseCompression::once, &__block_literal_global_15);
      if ((a4 & 2) == 0)
        goto LABEL_19;
    }
    if (CADeviceUseCompression::enable_compression)
    {
      if (CADeviceSupportsUniversalCompression::once[0] != -1)
        dispatch_once(CADeviceSupportsUniversalCompression::once, &__block_literal_global_27);
      if (CADeviceSupportsUniversalCompression::universal)
        v18 = 3;
      else
        v18 = 2;
      v19 = this;
      v20 = 0;
      goto LABEL_29;
    }
LABEL_19:
    if (CADeviceSupportsLossyUniversalCompression::once[0] != -1)
      dispatch_once(CADeviceSupportsLossyUniversalCompression::once, &__block_literal_global_33_9776);
    if ((a4 & 0x1C0) == 0 || !CADeviceSupportsLossyUniversalCompression::lossy)
      goto LABEL_30;
    if ((a4 & 0x40) != 0)
    {
      v20 = 1;
    }
    else if ((a4 & 0x80) != 0)
    {
      v20 = 2;
    }
    else
    {
      v20 = ((int)(a4 << 23) >> 31) & 3;
    }
    v19 = this;
    v18 = 4;
LABEL_29:
    this = (CA::Render *)CA::Render::fourcc_compressed_of_type(v19, v18, v20);
LABEL_30:
    v21 = xmmword_18474DEB0;
    v22 = 1;
    v23 = v16;
    v24 = 0;
    return CA::SurfaceUtil::CAIOSurfaceCreate(a2, a3, (uint64_t)this, v17, v15, v14, a5, &v21, a6);
  }
  return result;
}

void drawable_set_edr_metadata(_CAMetalDrawablePrivate *a1, CAEDRMetadata *a2)
{
  CAEDRMetadata *v4;

  if (a1 && a1->var14 != a2)
  {
    v4 = a2;

    a1->var14 = a2;
    if (a1->var10)
      +[CAEDRMetadata setMetadata:onSurface:](CAEDRMetadata, "setMetadata:onSurface:", a2);
  }
}

void drawable_set_colorspace(_CAMetalDrawablePrivate *a1, CGColorSpaceRef space)
{
  CGColorSpace *v4;
  __IOSurface *var10;

  if (a1)
  {
    if (!space && a1->var10)
      IOSurfaceSetBulkAttachments2();
    if (a1->var13 != space)
    {
      CGColorSpaceRetain(space);
      CGColorSpaceRelease(a1->var13);
      a1->var13 = space;
      var10 = a1->var10;
      if (var10)
        CA::Render::iosurface_set_colorspace(var10, space, v4);
    }
  }
}

void CA::OGL::release_iosurface(CA::OGL *this, __IOSurface *a2)
{
  _QWORD *v3;
  dispatch_block_t v4;
  _QWORD v5[6];

  v5[5] = *MEMORY[0x1E0C80C00];
  if (CA::OGL::AsynchronousDispatcher::dispatcher(void)::once != -1)
    dispatch_once(&CA::OGL::AsynchronousDispatcher::dispatcher(void)::once, &__block_literal_global_1592);
  v3 = (_QWORD *)CA::OGL::AsynchronousDispatcher::renderer((CA::OGL::AsynchronousDispatcher *)CA::OGL::AsynchronousDispatcher::dispatcher(void)::dispatcher);
  if (v3)
    (*(void (**)(_QWORD, CA::OGL *))(*(_QWORD *)*v3 + 40))(*v3, this);
  if (CA::OGL::release_iosurface(__IOSurface *)::once != -1)
    dispatch_once(&CA::OGL::release_iosurface(__IOSurface *)::once, &__block_literal_global_11);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN2CA3OGLL17release_iosurfaceEP11__IOSurface_block_invoke_2;
  v5[3] = &__block_descriptor_tmp_13_1593;
  v5[4] = this;
  v4 = dispatch_block_create(DISPATCH_BLOCK_DETACHED, v5);
  dispatch_async((dispatch_queue_t)CA::OGL::release_iosurface(__IOSurface *)::queue, v4);
  _Block_release(v4);
}

uint64_t _CASCreateFencePort(int a1, _DWORD *a2, _QWORD *a3)
{
  mach_port_t reply_port;
  uint64_t v7;
  uint64_t v8;
  int msg;
  int msg_4;
  int msg_8;
  mach_port_t msg_12;
  _BYTE msg_16[48];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  memset(&msg_16[4], 0, 44);
  msg_4 = 0;
  reply_port = mig_get_reply_port();
  msg_8 = a1;
  msg_12 = reply_port;
  msg = 5395;
  *(_QWORD *)msg_16 = 0x9D1000000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)&msg);
    reply_port = msg_12;
  }
  v7 = mach_msg((mach_msg_header_t *)&msg, 3, 0x18u, 0x40u, reply_port, 0, 0);
  v8 = v7;
  if ((v7 - 268435458) <= 0xE && ((1 << (v7 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg_12);
  }
  else
  {
    if (!(_DWORD)v7)
    {
      if (*(_DWORD *)&msg_16[4] == 71)
      {
        v8 = 4294966988;
      }
      else if (*(_DWORD *)&msg_16[4] == 40308)
      {
        if (msg < 0)
        {
          v8 = 4294966996;
          if (*(_DWORD *)&msg_16[8] == 1 && msg_4 == 56 && !msg_8 && *(unsigned __int16 *)&msg_16[22] << 16 == 1114112)
          {
            v8 = 0;
            *a2 = *(_DWORD *)&msg_16[12];
            *a3 = *(_QWORD *)&msg_16[32];
            return v8;
          }
        }
        else if (msg_4 == 36)
        {
          v8 = 4294966996;
          if (*(_DWORD *)&msg_16[16])
          {
            if (msg_8)
              v8 = 4294966996;
            else
              v8 = *(unsigned int *)&msg_16[16];
          }
        }
        else
        {
          v8 = 4294966996;
        }
      }
      else
      {
        v8 = 4294966995;
      }
      mach_msg_destroy((mach_msg_header_t *)&msg);
      return v8;
    }
    mig_dealloc_reply_port(msg_12);
  }
  return v8;
}

BOOL CA::Transaction::add_fence(CA::Transaction *this, int a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 v8;
  _QWORD v10[8];
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 116) & 2) != 0)
    return 0;
  if (!**((_DWORD **)this + 13))
    CA::Transaction::ensure_implicit(this, 1);
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN2CA11Transaction9add_fenceEjP13CAFenceHandleU13block_pointerFvvE_block_invoke;
  v10[3] = &unk_1E159E368;
  v11 = a2;
  v10[4] = a3;
  v10[5] = a4;
  v10[6] = &v12;
  v10[7] = this;
  -[CAFenceHandle _accessMachPort:](a3, (uint64_t)v10);
  v8 = *((_BYTE *)v13 + 24) != 0;
  _Block_object_dispose(&v12, 8);
  return v8;
}

void sub_18455B8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18455B994(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN2CA11Transaction9add_fenceEjP13CAFenceHandleU13block_pointerFvvE_block_invoke(uint64_t a1, int a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  malloc_zone_t *malloc_zone;
  uint64_t v14;
  _QWORD *v15;
  _DWORD *v16;
  malloc_zone_t *v17;
  int v18;
  const void *v19;
  uint64_t v20;
  void *v21;
  malloc_zone_t *v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD v28[6];

  v28[5] = *MEMORY[0x1E0C80C00];
  if ((a2 + 1) >= 2 && (a3 & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 56);
    kdebug_trace();
    v6 = *(_QWORD *)(v5 + 104);
    v7 = *(_DWORD *)(v5 + 100);
    *(_DWORD *)(v5 + 100) = v7 + 1;
    if (!v7)
      os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
    v8 = (_QWORD *)(v6 + 32);
    v9 = (char *)(v6 + 32);
    while (1)
    {
      v9 = *(char **)v9;
      if (!v9)
        break;
      if (*((_DWORD *)v9 + 6) == a2)
        goto LABEL_12;
    }
    v10 = *(_QWORD *)(a1 + 32);
    if (!v10
      || (v11 = -[CAFenceHandle _copyUntrackedPort](*(os_unfair_lock_s **)(a1 + 32)),
          (v11 - 1) > 0xFFFFFFFD))
    {
      CA::Transaction::unlock((CA::Transaction *)v5);
      return;
    }
    v12 = -[CAFenceHandle _initWithPort:name:tracing:]([CAFenceHandle alloc], v11, *(_QWORD *)(v10 + 16), 1);
    kdebug_trace();
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v9 = (char *)malloc_type_zone_malloc(malloc_zone, 0x20uLL, 0x8BB15036uLL);
    *((_QWORD *)v9 + 2) = 0;
    v14 = MEMORY[0x1E0C809B0];
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = v12;
    v28[0] = v14;
    v28[1] = 3221225472;
    v28[2] = ___ZN2CA11Transaction5FenceC2EP13CAFenceHandle_block_invoke;
    v28[3] = &__block_descriptor_40_e11_v16__0I8B12l;
    v28[4] = v9;
    -[CAFenceHandle _accessMachPort:]((uint64_t)v12, (uint64_t)v28);
    *(_QWORD *)v9 = *v8;
    *v8 = v9;
LABEL_12:
    v15 = v9 + 16;
    v16 = v15;
    while (1)
    {
      v16 = *(_DWORD **)v16;
      if (!v16)
        break;
      if (v16[2] == *(_DWORD *)(a1 + 64))
        goto LABEL_17;
    }
    v17 = (malloc_zone_t *)get_malloc_zone();
    v16 = malloc_type_zone_malloc(v17, 0x18uLL, 0x8BB15036uLL);
    v18 = *(_DWORD *)(a1 + 64);
    *((_QWORD *)v16 + 2) = 0;
    v16[2] = v18;
    *(_QWORD *)v16 = *v15;
    *v15 = v16;
LABEL_17:
    v19 = *(const void **)(a1 + 40);
    if (v19)
    {
      v20 = *((_QWORD *)v16 + 2);
      v21 = _Block_copy(v19);
      v22 = (malloc_zone_t *)get_malloc_zone();
      v23 = malloc_type_zone_malloc(v22, 0x10uLL, 0x8BB15036uLL);
      *v23 = v21;
      v23[1] = v20;
      *((_QWORD *)v16 + 2) = v23;
    }
    CA::Transaction::unlock((CA::Transaction *)v5);
    v24 = *(_QWORD *)(v5 + 104);
    if (!*(_DWORD *)(v24 + 40))
    {
      do
        v25 = __ldaxr(CA::Transaction::capture_ftx_seed(void)::next_ftx_seed);
      while (__stlxr(v25 + 1, CA::Transaction::capture_ftx_seed(void)::next_ftx_seed));
      *(_DWORD *)(v24 + 40) = v25 + 1;
      if (v25 == -1)
      {
        do
        {
          v26 = __ldaxr(CA::Transaction::capture_ftx_seed(void)::next_ftx_seed);
          v27 = v26 + 1;
        }
        while (__stlxr(v27, CA::Transaction::capture_ftx_seed(void)::next_ftx_seed));
        *(_DWORD *)(v24 + 40) = v27;
      }
    }
    kdebug_trace();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }
}

void sub_18455BC8C(_Unwind_Exception *a1)
{
  void *v1;
  malloc_zone_t *malloc_zone;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, v1);
  _Unwind_Resume(a1);
}

void sub_18455C06C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2CA11Transaction5FenceC2EP13CAFenceHandle_block_invoke(uint64_t result, int a2)
{
  if ((a2 + 1) <= 1)
    __assert_rtn("Fence_block_invoke", "CATransactionInternal.mm", 1421, "MACH_PORT_VALID (port)");
  *(_DWORD *)(*(_QWORD *)(result + 32) + 24) = a2;
  return result;
}

void CA::OGL::`anonymous namespace'::tile_n_part_rect(uint64_t a1, uint64_t a2, float *a3, double *a4, unsigned int a5, unsigned int a6, float64_t *a7, uint64_t a8, _DWORD *a9, uint64_t a10)
{
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  float v21;
  double v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  size_t v37;
  char *v38;
  uint64_t v39;
  float v40;
  size_t v42;
  char *v43;
  uint64_t v44;
  _DWORD *v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  float *v52;
  float64_t *v53;
  float v54;
  int v55;
  float v56;
  float *v57;
  float v58;
  float v59;
  float *v60;
  _DWORD *v61;
  int v62;
  int v63;
  float64_t *v64;
  double *v65;
  _DWORD *v66;
  float64_t *v67;
  uint64_t v68;
  _DWORD *v69;
  float64_t *v70;
  double *v71;
  float *v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  float64_t *v76;
  unsigned int v77;
  unsigned int v78;
  float64_t *v79;
  float64_t *v80;
  float *v81;
  uint64_t v82;
  double *v83;
  double *v84;
  uint64_t v85;
  _DWORD v86[2];
  _DWORD v87[2];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v10 = *(double *)(*(_QWORD *)a2 + 16) * (float)(a3[2] - *a3);
  v11 = -v10;
  if (v10 >= 0.0)
    v11 = *(double *)(*(_QWORD *)a2 + 16) * (float)(a3[2] - *a3);
  if (v11 > 0.0)
  {
    v12 = (float)(a3[3] - a3[1]);
    v13 = *(double *)(*(_QWORD *)a2 + 24) * v12;
    v14 = -v13;
    if (v13 >= 0.0)
      v14 = *(double *)(*(_QWORD *)a2 + 24) * v12;
    if (v14 > 0.0)
    {
      v17 = 0;
      v18 = a5 >> 1;
      v82 = (v18 + 1);
      v79 = &a7[v82];
      v80 = a7;
      v19 = *v79;
      v75 = (a6 >> 1) + 1;
      v76 = &a7[v18];
      v20 = a4[1];
      v21 = (v19 - *v76) * *a4 / v11;
      v84 = (double *)(a8 + 8 * v75);
      v85 = a8;
      v22 = *v84;
      v23 = a6 >> 1;
      v83 = (double *)(a8 + 8 * v23);
      v24 = (v22 - *v83) * v20 / v14;
      v87[0] = 0;
      *(float *)&v87[1] = v21;
      v86[0] = 0;
      *(float *)&v86[1] = v24;
      v77 = a6;
      v78 = a5;
      v25 = a5 + 1;
      v26 = 1.1755e-38;
      v27 = 3.4028e38;
      v28 = a6 + 1;
      do
      {
        v29 = *(float *)&a9[v17];
        if (v27 >= v29)
          v27 = *(float *)&a9[v17];
        if (v26 <= v29)
          v26 = *(float *)&a9[v17];
        ++v17;
      }
      while (v25 != v17);
      v30 = 0;
      v31 = 1.1755e-38;
      v32 = 3.4028e38;
      do
      {
        v33 = *(float *)(a10 + 4 * v30);
        if (v32 >= v33)
          v32 = *(float *)(a10 + 4 * v30);
        if (v31 <= v33)
          v31 = *(float *)(a10 + 4 * v30);
        ++v30;
      }
      while (v28 != v30);
      v34 = 0.0;
      v35 = 1.0;
      if (v27 >= 0.0 && v26 <= 1.0)
      {
        v38 = 0;
        v40 = 1.0;
        v27 = 0.0;
      }
      else
      {
        MEMORY[0x1E0C80A78](a1);
        v38 = (char *)&v73 - ((v37 + 15) & 0x7FFFFFFF0);
        bzero(v38, v37);
        v39 = 0;
        v40 = v26 - v27;
        do
        {
          *(float *)&v38[4 * v39] = (float)(*(float *)&a9[v39] - v27) * (float)(1.0 / v40);
          ++v39;
        }
        while (v25 != v39);
      }
      if (v32 >= 0.0 && v31 <= 1.0)
      {
        v43 = 0;
      }
      else
      {
        MEMORY[0x1E0C80A78](a1);
        v43 = (char *)&v73 - ((v42 + 15) & 0x7FFFFFFF0);
        bzero(v43, v42);
        v44 = 0;
        v35 = v31 - v32;
        do
        {
          *(float *)&v43[4 * v44] = (float)(*(float *)(a10 + 4 * v44) - v32) * (float)(1.0 / (float)(v31 - v32));
          ++v44;
        }
        while (v28 != v44);
        v34 = v32;
      }
      *(_BYTE *)(*(_QWORD *)(a1 + 16) + 19) = 3;
      v45 = &a9[v82];
      v46 = *(float *)&a9[v18];
      v47 = *(float *)v45;
      v74 = v45;
      v73 = v18;
      v48 = v75;
      v81 = (float *)(a10 + 4 * v75);
      v49 = v23;
      v50 = *(float *)(a10 + 4 * v23);
      v51 = *v81 - v50;
      v52 = *(float **)(a1 + 16);
      v52[92] = v47 - v46;
      v52[93] = v51;
      v52[94] = v46;
      v52[95] = v50;
      v53 = v76;
      CA::OGL::emit_n_part_rect(a1, a2, 1, 1, v76, (uint64_t)v83, v87, (uint64_t)v86, 0, 0, 0);
      v54 = *(float *)v45;
      v55 = v73;
      v56 = *(float *)&a9[v73];
      v57 = *(float **)(a1 + 16);
      v57[92] = v54 - v56;
      v57[93] = v35;
      v57[94] = v56;
      v57[95] = v34;
      if (!v43)
        v43 = (char *)a10;
      CA::OGL::emit_n_part_rect(a1, a2, 1, v49, v53, v85, v87, (uint64_t)v43, 0, 0, 0);
      CA::OGL::emit_n_part_rect(a1, a2, 1, v77 - v48, v53, (uint64_t)v84, v87, (uint64_t)&v43[4 * v48], 0, 0, 0);
      v58 = *(float *)(a10 + 4 * v49);
      v59 = *v81 - v58;
      v60 = *(float **)(a1 + 16);
      v60[92] = v40;
      v60[93] = v59;
      v60[94] = v27;
      v60[95] = v58;
      if (v38)
        v61 = v38;
      else
        v61 = a9;
      v62 = v55;
      v63 = v55;
      v64 = v80;
      v65 = v83;
      CA::OGL::emit_n_part_rect(a1, a2, v63, 1, v80, (uint64_t)v83, v61, (uint64_t)v86, 0, 0, 0);
      v66 = &v61[v82];
      v67 = v79;
      CA::OGL::emit_n_part_rect(a1, a2, v78 - v82, 1, v79, (uint64_t)v65, v66, (uint64_t)v86, 0, 0, 0);
      *(_BYTE *)(*(_QWORD *)(a1 + 16) + 19) = 0;
      v68 = v85;
      CA::OGL::emit_n_part_rect(a1, a2, v62, v49, v64, v85, a9, a10, 0, 0, 0);
      v69 = v74;
      CA::OGL::emit_n_part_rect(a1, a2, v62, v49, v67, v68, v74, a10, 0, 0, 0);
      v70 = v64;
      v71 = v84;
      v72 = v81;
      CA::OGL::emit_n_part_rect(a1, a2, v62, v49, v70, (uint64_t)v84, a9, (uint64_t)v81, 0, 0, 0);
      CA::OGL::emit_n_part_rect(a1, a2, v62, v49, v67, (uint64_t)v71, v69, (uint64_t)v72, 0, 0, 0);
    }
  }
}

unint64_t CA::OGL::emit_shadow_path(uint64_t a1)
{
  CA::OGL::Context *v1;
  float32x2_t *v2;
  float16x4_t *v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  float16x4_t *v16;
  float32x2_t *v17;
  double v18;
  double v19;
  CA::OGL::Context *v20;
  _BYTE *v21;
  unint64_t result;
  uint64_t *v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  _QWORD **v26;
  float16x4_t *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  malloc_zone_t *malloc_zone;
  char *v33;
  char *v34;
  malloc_zone_t *v35;
  char *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  float32x2_t *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  CA::Render::Texture *v46;
  double v47;
  double v48;
  int v49;
  uint32x2_t *v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  unint64_t v55;
  float16x4_t v56;
  int v57;
  int v58;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  unint64_t v79;
  unint64_t v80;
  double *v81;
  int v82;
  unint64_t v83;
  size_t v84;
  uint64_t v85;
  void *v86;
  size_t v87;
  unint64_t v88;
  float *v89;
  size_t v90;
  uint64_t v91;
  double v92;
  double v93;
  const float *v94;
  const float *v95;
  double *v96;
  double *v97;
  uint64_t v98;
  double v99;
  double v100;
  double *v101;
  double v102;
  double v103;
  double v104;
  unsigned int v105;
  double *v106;
  double *v107;
  uint64_t v108;
  double v109;
  double v110;
  double *v111;
  double v112;
  double v113;
  double v114;
  unsigned int v115;
  uint64_t v116;
  _OWORD *v117;
  unint64_t v118;
  size_t v119;
  void *v120;
  float v121;
  unsigned int v122;
  int v123;
  float v124;
  uint64_t v125;
  unsigned __int8 *v126;
  __int128 *v127;
  unsigned __int8 *v128;
  int v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  char v133;
  double v134;
  double v135;
  double v136;
  double v137;
  char v138;
  double *v139;
  double v140;
  uint64_t v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double *v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double *v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double *v159;
  double v160;
  double v161;
  double v162;
  double v163;
  unsigned int v164;
  int v165;
  unsigned int v166;
  const unsigned __int8 *v167;
  unsigned int v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  CGColorSpace *v181;
  unsigned __int8 *v182;
  double *v183;
  uint64_t v184;
  unsigned __int8 *v185;
  int v186;
  double v187;
  double *v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double *v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double *v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double *v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double *v214;
  double *v215;
  double *v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double *v222;
  double *v223;
  double *v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double *v240;
  double *v241;
  double *v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double *v248;
  double *v249;
  double *v250;
  double v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double *v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double *v262;
  double v263;
  double v264;
  double v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double v270;
  double v271;
  double v272;
  double v273;
  double v274;
  double v275;
  double v276;
  double v277;
  double v278;
  CA::Render::Texture *v279;
  uint64_t v280;
  const unsigned __int8 *v281;
  unint64_t v282;
  unint64_t v283;
  unsigned __int8 *v284;
  unint64_t v285;
  unsigned __int16 *v286;
  CGColorSpace *v287;
  CA::_anonymous_namespace_ *v288;
  float v289;
  CA::Render::Texture *v290;
  unsigned int *v291;
  unsigned int *v292;
  unsigned int v293;
  int v294;
  int v295;
  unsigned int *v296;
  unsigned int *v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int *v300;
  unsigned int v301;
  unsigned int v302;
  uint64_t v303;
  size_t v304;
  uint64_t v305;
  uint64_t v306;
  float *v307;
  double *v308;
  double v309;
  double v310;
  double v311;
  float64x2_t v312;
  double v313;
  double v314;
  double v315;
  double v316;
  double v317;
  size_t v319;
  size_t v320;
  void *v321;
  size_t v322;
  uint64_t v323;
  uint64_t v324;
  char *v325;
  size_t v326;
  float64_t *v327;
  float32x2_t *v328;
  const float *v329;
  uint64_t v330;
  float64_t *v331;
  uint64_t v332;
  int v333;
  uint64_t v334;
  uint64_t v335;
  void (*v336)(uint64_t, _QWORD, uint64_t);
  uint64_t v337;
  unint64_t v338;
  void *v339;
  void *v340;
  double v341;
  double v342;
  unsigned int v343;
  unsigned int v344;
  const unsigned __int8 *v345;
  CGColorSpace *v346;
  double v347;
  double v348;
  uint32x2_t *v349;
  float16x4_t *v350;
  uint64_t v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  unint64_t v356;
  float *v357;
  double *v358;
  float32x2_t *v359;
  CA::OGL::Context *v360;
  float16x4_t v361;
  float64x2_t v362;
  float64x2_t v363;
  uint64_t v364;
  __int128 v365;
  __int128 v366;
  _OWORD v367[3];
  uint64_t v368;
  int64x2_t v369;
  int64x2_t v370;
  double v371;
  double v372;
  double v373;
  double v374;
  float32x4_t v375;
  float32x4_t v376;
  float64x2_t v377;
  uint64_t v378[5];
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  uint64_t v383;
  __int128 v384;
  __int128 v385;
  uint64_t v386;
  float32x4_t v387;
  uint64_t v388;
  uint64_t v389;

  v1 = (CA::OGL::Context *)MEMORY[0x1E0C80A78](a1);
  v10 = v9;
  v11 = v8;
  v12 = v7;
  v13 = v6;
  v14 = v5;
  v15 = v4;
  v16 = v3;
  v17 = v2;
  v19 = v18;
  v20 = v1;
  v389 = *MEMORY[0x1E0C80C00];
  if (byte_1ECDC6AEF)
    *v3 = (float16x4_t)0x3C0000003C003C00;
  if (*(_DWORD *)(v8 + 24) == 4 && *(_DWORD *)(v8 + 20) == 5)
  {
    v21 = *(_BYTE **)(v8 + 40);
    if (*v21 == 1 && v21[1] == 2 && v21[2] == 2 && v21[3] == 2 && !v21[4])
    {
      v308 = *(double **)(v8 + 32);
      v310 = v308[2];
      v309 = v308[3];
      v311 = v308[1];
      if (v311 == v309)
      {
        v312.f64[0] = v308[4];
        if (v310 == v312.f64[0])
        {
          v313 = v308[5];
          if (v313 == v308[7])
          {
            v314 = *v308;
            if (v308[6] == *v308)
              goto LABEL_274;
          }
        }
      }
      v314 = *v308;
      if (*v308 == v310)
      {
        v313 = v308[5];
        if (v309 == v313)
        {
          v312.f64[0] = v308[4];
          if (v312.f64[0] == v308[6] && v308[7] == v311)
          {
LABEL_274:
            v315 = v313 - v311;
            v316 = -(v312.f64[0] - v314);
            if (v312.f64[0] - v314 >= 0.0)
              v316 = v312.f64[0] - v314;
            v317 = -v315;
            if (v315 >= 0.0)
              v317 = v313 - v311;
            if (v316 >= v19 * 5.6 && v317 >= v19 * 5.6)
            {
              if (v312.f64[0] - v314 >= 0.0)
                v312.f64[0] = v314;
              if (v315 < 0.0)
                v311 = v313;
              v312.f64[1] = v311;
              v377 = v312;
              *(double *)v378 = v316;
              *(double *)&v378[1] = v317;
              v361 = *v3;
              return CA::OGL::emit_shadow_rect(v1, &v377, v2, &v361, v4, v5, v6, v7, v19);
            }
          }
        }
      }
    }
  }
  result = CA::OGL::Context::shadow_cache(v1);
  if (!result || (*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return result;
  v23 = (uint64_t *)result;
  v359 = v17;
  v356 = v12;
  LODWORD(v358) = v14;
  v24 = (os_unfair_lock_s *)(result + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(result + 24));
  v25 = x_hash_table_lookup(*v23, v11, 0);
  v360 = v20;
  LODWORD(v357) = v13;
  if (v25)
  {
    v26 = (_QWORD **)v25;
    v27 = v16;
    v28 = v15;
    v29 = 1;
    v30 = v25;
    do
    {
      v31 = (_QWORD *)v30;
      if (*(double *)(v30 + 8) == v19 && *(double *)(v30 + 16) == v10)
      {
        v34 = (char *)v30;
        goto LABEL_23;
      }
      v30 = *(_QWORD *)v30;
      ++v29;
    }
    while (*v31);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v33 = (char *)malloc_type_zone_malloc(malloc_zone, 0x88uLL, 0x8BB15036uLL);
    v34 = v33;
    if (v33)
    {
      *(_QWORD *)v33 = 0;
      *(int64x2_t *)(v33 + 8) = vdupq_n_s64(0x7FF8000000000000uLL);
      *((_QWORD *)v33 + 3) = 0;
      *((_QWORD *)v33 + 4) = 0;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
    }
    *v31 = v33;
LABEL_23:
    v15 = v28;
    if (v29 >= 9)
    {
      v40 = *v26;
      *v26 = (_QWORD *)**v26;
      *v40 = v23[2];
      v23[2] = (uint64_t)v40;
    }
    v16 = v27;
    v20 = v360;
  }
  else
  {
    v35 = (malloc_zone_t *)get_malloc_zone();
    v36 = (char *)malloc_type_zone_malloc(v35, 0x88uLL, 0x8BB15036uLL);
    v34 = v36;
    if (v36)
    {
      *(_QWORD *)v36 = 0;
      *(int64x2_t *)(v36 + 8) = vdupq_n_s64(0x7FF8000000000000uLL);
      *((_QWORD *)v36 + 3) = 0;
      *((_QWORD *)v36 + 4) = 0;
      *(_OWORD *)(v36 + 88) = 0u;
      *(_OWORD *)(v36 + 104) = 0u;
      *(_OWORD *)(v36 + 120) = 0u;
      v37 = (int *)*v23;
      v38 = v11;
      v39 = (uint64_t)v34;
    }
    else
    {
      v37 = (int *)*v23;
      v38 = v11;
      v39 = 0;
    }
    hash_table_modify(v37, v38, v39, 0);
  }
  v41 = v359;
  *((double *)v34 + 1) = v19;
  os_unfair_lock_unlock(v24);
  v46 = (CA::Render::Texture *)*((_QWORD *)v34 + 3);
  if (v46)
  {
    *(_QWORD *)&v43 = *((_QWORD *)v34 + 5);
    *(_QWORD *)&v42 = *((_QWORD *)v34 + 6);
    *(_QWORD *)&v45 = *((_QWORD *)v34 + 7);
    *(_QWORD *)&v44 = *((_QWORD *)v34 + 8);
    v48 = *((double *)v34 + 9);
    v47 = *((double *)v34 + 10);
    v49 = (int)v358;
    goto LABEL_30;
  }
  v64 = v10;
  v65 = 1.0 / v10;
  v66 = v10 * v19;
  v67 = 8.0;
  if (v66 <= 8.0)
    v67 = 4.0;
  v68 = 2.0;
  if (v66 > 4.0)
    v68 = v67;
  LODWORD(v351) = v15;
  v350 = v16;
  *(double *)&v353 = v10;
  if (v66 > v68 && (v357 & 1) == 0)
  {
    do
    {
      v65 = v65 + v65;
      v64 = v64 * 0.5;
      v66 = v66 * 0.5;
    }
    while (v66 > v68);
  }
  *(double *)&v352 = v68;
  v121 = v66;
  v122 = vcvtps_s32_f32((float)(v121 * 2.82) + 0.5);
  *(float *)&v349 = v121;
  if (v121 <= 0.6)
    v123 = 0;
  else
    v123 = v122;
  *((_QWORD *)v34 + 12) = *((_QWORD *)v34 + 11);
  *((_QWORD *)v34 + 15) = *((_QWORD *)v34 + 14);
  v384 = 0u;
  v385 = 0u;
  LODWORD(v355) = v123;
  v124 = v65 * (double)v123;
  v377.f64[0] = (float)(ceilf(v124) + 1.0);
  *(_QWORD *)&v377.f64[1] = v34 + 88;
  v378[0] = (uint64_t)(v34 + 112);
  memset(&v378[1], 0, 32);
  v379 = 0u;
  v380 = 0u;
  v381 = 0u;
  v382 = 0u;
  v386 = 0;
  v383 = 0;
  v125 = *(unsigned int *)(v11 + 20);
  if ((_DWORD)v125)
  {
    v127 = *(__int128 **)(v11 + 32);
    v126 = *(unsigned __int8 **)(v11 + 40);
    v128 = &v126[v125];
    do
    {
      v129 = *v126++;
      switch(v129)
      {
        case 0:
          break;
        case 1:
          v384 = *v127;
          v130 = *v127++;
          v385 = v130;
          break;
        case 2:
          v131 = *v127++;
          v384 = v131;
          LOBYTE(v386) = 1;
          break;
        case 3:
          v132 = 0;
          v133 = 1;
          v134 = *((double *)&v384 + 1);
          v135 = *((double *)&v384 + 1);
          v136 = *(double *)&v384;
          v137 = *(double *)&v384;
          do
          {
            v138 = v133;
            v139 = (double *)&v127[v132];
            v140 = v139[1];
            if (v137 >= *v139)
              v137 = *v139;
            if (v136 <= *v139)
              v136 = *v139;
            if (v135 >= v140)
              v135 = v139[1];
            if (v134 <= v140)
              v134 = v139[1];
            v132 = 1;
            v133 = 0;
          }
          while ((v138 & 1) != 0);
          v384 = v127[1];
          LOBYTE(v386) = 1;
          v127 += 2;
          break;
        case 4:
          v141 = 0;
          v142 = *((double *)&v384 + 1);
          v143 = *((double *)&v384 + 1);
          v144 = *(double *)&v384;
          v145 = *(double *)&v384;
          do
          {
            v146 = *(double *)&v127[v141];
            v147 = *((double *)&v127[v141] + 1);
            if (v145 >= v146)
              v145 = *(double *)&v127[v141];
            if (v144 <= v146)
              v144 = *(double *)&v127[v141];
            if (v143 >= v147)
              v143 = *((double *)&v127[v141] + 1);
            if (v142 <= v147)
              v142 = *((double *)&v127[v141] + 1);
            ++v141;
          }
          while (v141 != 3);
          v384 = v127[2];
          LOBYTE(v386) = 1;
          v127 += 3;
          break;
        default:
          break;
      }
    }
    while (v126 < v128);
  }
  if (v378[1] <= 1uLL)
  {
    if (v378[3] != v378[2])
    {
      v362 = 0uLL;
      v363.f64[0] = 0.0;
      v387 = 0uLL;
      v388 = 0;
      if (v387.i64[0])
        operator delete((void *)v387.i64[0]);
      if (*(_QWORD *)&v362.f64[0])
        operator delete(*(void **)&v362.f64[0]);
    }
    if ((_QWORD)v381 != *((_QWORD *)&v380 + 1))
    {
      v362 = 0uLL;
      v363.f64[0] = 0.0;
      v387 = 0uLL;
      v388 = 0;
      if (v387.i64[0])
        operator delete((void *)v387.i64[0]);
      if (*(_QWORD *)&v362.f64[0])
        operator delete(*(void **)&v362.f64[0]);
    }
  }
  if ((_QWORD)v382)
    operator delete((void *)v382);
  if (*((_QWORD *)&v380 + 1))
    operator delete(*((void **)&v380 + 1));
  v20 = v360;
  if ((_QWORD)v379)
    operator delete((void *)v379);
  if (v378[2])
    operator delete((void *)v378[2]);
  v348 = v19;
  v148 = (double *)CA::Render::Path::bounding_rect((CA::Render::Path *)v11);
  v150 = *v148;
  v149 = v148[1];
  v151 = v148[3];
  v152 = v148[2] + *v148;
  v153 = (double *)*((_QWORD *)v34 + 11);
  v154 = v152;
  do
  {
    v155 = v154;
    if (v153 == *((double **)v34 + 12))
      break;
    v157 = *v153;
    v156 = v153[1];
    v153 += 2;
    if (v156 >= v152)
      v156 = v148[2] + *v148;
    v154 = v157 + v155 - v156;
  }
  while (v157 < v152);
  v347 = v148[2] + *v148;
  v158 = v151 + v149;
  v159 = (double *)*((_QWORD *)v34 + 14);
  v160 = v151 + v149;
  do
  {
    v161 = v160;
    if (v159 == *((double **)v34 + 15))
      break;
    v163 = *v159;
    v162 = v159[1];
    v159 += 2;
    if (v162 >= v158)
      v162 = v158;
    v160 = v163 + v161 - v162;
  }
  while (v163 < v158);
  v164 = vcvtmd_s64_f64(v150 * v64);
  v165 = vcvtmd_s64_f64(v149 * v64) - v355;
  v166 = vcvtpd_s64_f64(v155 * v64);
  LODWORD(v354) = v164 - v355;
  v167 = (const unsigned __int8 *)(v166 - (v164 - (_DWORD)v355) + 2 * (_DWORD)v355);
  v168 = vcvtpd_s64_f64(v161 * v64);
  v169 = v168 - v165 + 2 * (_DWORD)v355;
  v170 = CA::Render::format_rowbytes((CA::Render *)9, v166 - (v164 - v355) + 2 * v355);
  v171 = v170;
  v387.i64[0] = v170;
  if (is_mul_ok(v170, v169))
    result = v170 * v169;
  else
    result = 0;
  if (result >= 0x1000001)
    return result;
  v376.i64[0] = 0;
  result = (unint64_t)CA::Render::aligned_malloc((CA::Render *)result, (unint64_t *)&v376, 0);
  v346 = (CGColorSpace *)result;
  if (!result)
    return result;
  v345 = v167;
  v179 = 2 * v355;
  LODWORD(v355) = v165;
  v377.f64[1] = 0.0;
  v378[0] = (uint64_t)&v378[3];
  *(_OWORD *)&v378[1] = xmmword_18474E1F0;
  *(_QWORD *)&v377.f64[0] = &v377.f64[1];
  v368 = 0;
  *(_QWORD *)&v362.f64[0] = &v377.f64[1];
  v362.f64[1] = 0.0;
  v363 = 0uLL;
  v364 = 0x3FC0000000000000;
  v365 = 0u;
  v366 = 0u;
  memset(v367, 0, sizeof(v367));
  v369 = vdupq_n_s64(0x7FF0000000000000uLL);
  v370 = vdupq_n_s64(0xFFF0000000000000);
  v343 = v179 + v168;
  v344 = v179 + v166;
  v341 = (double)v165;
  v342 = (double)(int)v354;
  v371 = (double)(int)v354;
  v372 = (double)v165;
  v373 = (double)(int)(v179 + v166);
  v374 = (double)(int)(v179 + v168);
  v180 = *(unsigned int *)(v11 + 20);
  v181 = v346;
  if ((_DWORD)v180)
  {
    v184 = v11 + 32;
    v183 = *(double **)(v11 + 32);
    v182 = *(unsigned __int8 **)(v184 + 8);
    v185 = &v182[v180];
    do
    {
      v186 = *v182++;
      switch(v186)
      {
        case 0:
          CA::ScanConverter::Path::closepath(v362.f64);
          break;
        case 1:
          v187 = *v183;
          v188 = (double *)*((_QWORD *)v34 + 11);
          v189 = *v183;
          do
          {
            v190 = v189;
            if (v188 == *((double **)v34 + 12))
              break;
            v192 = *v188;
            v191 = v188[1];
            v188 += 2;
            if (v191 >= v187)
              v191 = *v183;
            v189 = v192 + v190 - v191;
          }
          while (v192 < v187);
          v193 = v183[1];
          v194 = (double *)*((_QWORD *)v34 + 14);
          v195 = v193;
          do
          {
            v196 = v195;
            if (v194 == *((double **)v34 + 15))
              break;
            v198 = *v194;
            v197 = v194[1];
            v194 += 2;
            if (v197 >= v193)
              v197 = v183[1];
            v195 = v198 + v196 - v197;
          }
          while (v198 < v193);
          v199 = v190 * v64;
          v200 = v196 * v64;
          CA::ScanConverter::Path::closepath(v362.f64);
          *(double *)&v365 = v199;
          *((double *)&v365 + 1) = v200;
          *((double *)&v366 + 1) = v199;
          *(double *)v367 = v200;
          *(_QWORD *)&v366 = 0x3FF0000000000000;
          v183 += 2;
          *((_QWORD *)&v367[0] + 1) = 0x3FF0000000000000;
          break;
        case 2:
          v201 = *v183;
          v202 = (double *)*((_QWORD *)v34 + 11);
          v203 = *v183;
          do
          {
            v204 = v203;
            if (v202 == *((double **)v34 + 12))
              break;
            v206 = *v202;
            v205 = v202[1];
            v202 += 2;
            if (v205 >= v201)
              v205 = *v183;
            v203 = v206 + v204 - v205;
          }
          while (v206 < v201);
          v207 = v183[1];
          v208 = (double *)*((_QWORD *)v34 + 14);
          v209 = v207;
          do
          {
            v210 = v209;
            if (v208 == *((double **)v34 + 15))
              break;
            v212 = *v208;
            v211 = v208[1];
            v208 += 2;
            if (v211 >= v207)
              v211 = v183[1];
            v209 = v212 + v210 - v211;
          }
          while (v212 < v207);
          CA::ScanConverter::Path::lineto(v362.f64, v204 * v64, v210 * v64);
          v183 += 2;
          break;
        case 3:
          v213 = *v183;
          v214 = (double *)*((_QWORD *)v34 + 11);
          v215 = (double *)*((_QWORD *)v34 + 12);
          v216 = v214;
          v217 = *v183;
          do
          {
            v218 = v217;
            if (v216 == v215)
              break;
            v220 = *v216;
            v219 = v216[1];
            v216 += 2;
            if (v219 >= v213)
              v219 = *v183;
            v217 = v220 + v218 - v219;
          }
          while (v220 < v213);
          v221 = v183[1];
          v222 = (double *)*((_QWORD *)v34 + 14);
          v223 = (double *)*((_QWORD *)v34 + 15);
          v224 = v222;
          v225 = v221;
          do
          {
            v226 = v225;
            if (v224 == v223)
              break;
            v228 = *v224;
            v227 = v224[1];
            v224 += 2;
            if (v227 >= v221)
              v227 = v183[1];
            v225 = v228 + v226 - v227;
          }
          while (v228 < v221);
          v229 = v183[2];
          v230 = v229;
          do
          {
            v231 = v230;
            if (v214 == v215)
              break;
            v233 = *v214;
            v232 = v214[1];
            v214 += 2;
            if (v232 >= v229)
              v232 = v183[2];
            v230 = v233 + v231 - v232;
          }
          while (v233 < v229);
          v234 = v183[3];
          v235 = v234;
          do
          {
            v236 = v235;
            if (v222 == v223)
              break;
            v238 = *v222;
            v237 = v222[1];
            v222 += 2;
            if (v237 >= v234)
              v237 = v183[3];
            v235 = v238 + v236 - v237;
          }
          while (v238 < v234);
          CA::ScanConverter::Path::quadto((CA::ScanConverter::Path *)&v362, v218 * v64, v226 * v64, v231 * v64, v236 * v64, v172, v173, v174, v175, v176, v177, v178);
          v183 += 4;
          break;
        case 4:
          v239 = *v183;
          v240 = (double *)*((_QWORD *)v34 + 11);
          v241 = (double *)*((_QWORD *)v34 + 12);
          v242 = v240;
          v243 = *v183;
          do
          {
            v244 = v243;
            if (v242 == v241)
              break;
            v246 = *v242;
            v245 = v242[1];
            v242 += 2;
            if (v245 >= v239)
              v245 = *v183;
            v243 = v246 + v244 - v245;
          }
          while (v246 < v239);
          v247 = v183[1];
          v248 = (double *)*((_QWORD *)v34 + 14);
          v249 = (double *)*((_QWORD *)v34 + 15);
          v250 = v248;
          v251 = v247;
          do
          {
            v252 = v251;
            if (v250 == v249)
              break;
            v254 = *v250;
            v253 = v250[1];
            v250 += 2;
            if (v253 >= v247)
              v253 = v183[1];
            v251 = v254 + v252 - v253;
          }
          while (v254 < v247);
          v255 = v183[2];
          v256 = (double *)*((_QWORD *)v34 + 11);
          v257 = v255;
          do
          {
            v258 = v257;
            if (v256 == v241)
              break;
            v260 = *v256;
            v259 = v256[1];
            v256 += 2;
            if (v259 >= v255)
              v259 = v183[2];
            v257 = v260 + v258 - v259;
          }
          while (v260 < v255);
          v261 = v183[3];
          v262 = (double *)*((_QWORD *)v34 + 14);
          v263 = v261;
          do
          {
            v264 = v263;
            if (v262 == v249)
              break;
            v266 = *v262;
            v265 = v262[1];
            v262 += 2;
            if (v265 >= v261)
              v265 = v183[3];
            v263 = v266 + v264 - v265;
          }
          while (v266 < v261);
          v267 = v183[4];
          v268 = v267;
          do
          {
            v269 = v268;
            if (v240 == v241)
              break;
            v271 = *v240;
            v270 = v240[1];
            v240 += 2;
            if (v270 >= v267)
              v270 = v183[4];
            v268 = v271 + v269 - v270;
          }
          while (v271 < v267);
          v272 = v183[5];
          v273 = v272;
          do
          {
            v274 = v273;
            if (v248 == v249)
              break;
            v276 = *v248;
            v275 = v248[1];
            v248 += 2;
            if (v275 >= v272)
              v275 = v183[5];
            v273 = v276 + v274 - v275;
          }
          while (v276 < v272);
          CA::ScanConverter::Path::cubeto((CA::ScanConverter::Path *)&v362, v244 * v64, v252 * v64, v258 * v64, v264 * v64, v269 * v64, v274 * v64, v172, v173, v174, v175, v176, v177, v178);
          v183 += 6;
          break;
        default:
          break;
      }
    }
    while (v182 < v185);
  }
  v277 = (double)(int)v345;
  v278 = (double)(int)v169;
  CA::ScanConverter::Path::closepath(v362.f64);
  CA::ScanConverter::render_mask((uint64_t)&v362, 0, (uint64_t)v346 + v171 * ((int)v169 - 1), -v171, v354, v355, v344, v343, 1);
  x_heap_free(*(void ****)&v377.f64[0]);
  if (!(_DWORD)v357)
  {
    v46 = CA::Render::Image::new_image((CA::Render::Image *)9, v345, v169, 1u, 0, v346, (unint64_t *)&v387, (const unint64_t *)CA::Render::aligned_free, (void (*)(const void *, void *))v376.i64[0], v339);
    v296 = (unsigned int *)*((_QWORD *)v34 + 3);
    *((_QWORD *)v34 + 3) = v46;
    v41 = v359;
    v15 = v351;
    v16 = v350;
    if (!v296)
    {
LABEL_261:
      v49 = (int)v358;
      if (!v46)
        return (unint64_t)CA::Render::aligned_free(v346, v376.u64[0], 0);
      v48 = v65 * v277;
      v47 = v65 * v278;
      *(double *)&v43 = v65 * v342;
      *(double *)&v42 = v65 * v341;
      *(double *)&v45 = v347 - v155 + v65 * v277;
      v303 = v353;
      *((double *)v34 + 1) = v348;
      *((_QWORD *)v34 + 2) = v303;
      *((_QWORD *)v34 + 5) = v43;
      *((_QWORD *)v34 + 6) = v42;
      *(double *)&v44 = v158 - v161 + v65 * v278;
      *((_QWORD *)v34 + 7) = v45;
      *((_QWORD *)v34 + 8) = v44;
      *((double *)v34 + 9) = v65 * v277;
      *((double *)v34 + 10) = v65 * v278;
LABEL_30:
      v50 = (uint32x2_t *)*((_QWORD *)v34 + 4);
      v354 = v43;
      v355 = v42;
      *(_QWORD *)&v51.f64[0] = v43;
      *(_QWORD *)&v51.f64[1] = v42;
      v52 = vaddq_f64(v51, vcvtq_f64_f32(*v41));
      v352 = v45;
      v353 = v44;
      *(_QWORD *)&v53.f64[0] = v45;
      *(_QWORD *)&v53.f64[1] = v44;
      v362 = v52;
      v363 = v53;
      v387 = 0uLL;
      v376 = 0uLL;
      v375 = 0uLL;
      result = (unint64_t)CA::OGL::Context::bind_image((uint64_t)v20, 0, (uint32x2_t *)v46, (double *)0x3F, 1u, 1, 0, 0, 0.0, &v387, 0);
      if (!result)
        return result;
      v55 = result;
      v56 = *v16;
      if (v15 >= 255)
        v57 = 255;
      else
        v57 = v15;
      v58 = v57 & ~(v57 >> 31);
      if (*(_QWORD *)&v56 == 0x3C003C003C003C00)
      {
        *(float *)_D0.i32 = (float)v58 * 0.0039216;
        __asm { FCVT            H0, S0 }
        v63 = COERCE_DOUBLE(vdup_lane_s16(_D0, 0));
      }
      else
      {
        v63 = COERCE_DOUBLE(vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v56), (float)v58 * 0.0039216)));
      }
      v69 = COERCE_DOUBLE(vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16(*(float16x4_t *)(*((_QWORD *)v20 + 29) + 32)), vcvtq_f32_f16(*(float16x4_t *)&v63))));
      if (*(_QWORD *)(*((_QWORD *)v20 + 29) + 32) != 0x3C003C003C003C00)
        v63 = v69;
      *(double *)(*((_QWORD *)v20 + 2) + 8) = v63;
      v70 = *((_QWORD *)v20 + 2);
      if ((v49 & 1) != 0)
      {
        *(_BYTE *)(v70 + 16) = 12;
      }
      else
      {
        v71 = *(_QWORD *)(v70 + 16) & 0xFFFFFF00FF00FF00;
        if (*(_QWORD *)(v70 + 8) == 0x3C003C003C003C00)
          v72 = 1;
        else
          v72 = 3;
        *(_DWORD *)(v70 + 16) = v72 | v71;
        *(_DWORD *)(v70 + 20) = HIDWORD(v71);
      }
      *(_QWORD *)&v377.f64[0] = &v362;
      *(_QWORD *)&v377.f64[1] = v356;
      *(uint64_t *)((char *)v378 + 4) = 0;
      *(uint64_t *)((char *)&v378[2] + 4) = 0;
      *(uint64_t *)((char *)&v378[1] + 4) = 0;
      LODWORD(v378[0]) = 63;
      HIDWORD(v378[3]) = 0;
      v73 = (uint64_t)(*((_QWORD *)v34 + 12) - *((_QWORD *)v34 + 11)) >> 3;
      v74 = (uint64_t)(*((_QWORD *)v34 + 15) - *((_QWORD *)v34 + 14)) >> 3;
      if (!(v73 | v74))
      {
        if ((_DWORD)v357 && v50)
        {
          v75 = CA::OGL::Context::bind_image((uint64_t)v20, 1, v50, (double *)0x3F, 1u, 1, 0, 0, 0.0, &v376, 0);
          *(_BYTE *)(*((_QWORD *)v20 + 2) + 16) = 14;
          v76 = vcvtq_f64_f32(*v359);
          v77 = vcvtq_f64_f32(*(float32x2_t *)v376.f32);
          v78 = vcvtq_f64_f32(vsub_f32(*(float32x2_t *)&v376.u32[2], *(float32x2_t *)v376.f32));
          v375 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vdivq_f64(vmulq_f64(v76, v78), v363), v77)), vaddq_f64(vdivq_f64(vmulq_f64(vaddq_f64(v363, v76), v78), v363), v77));
          CA::OGL::emit_one_part_rect(v20, (uint64_t)&v377, (const CA::Transform *)&v387, (uint64_t)&v375, 0);
          (*(void (**)(CA::OGL::Context *, _OWORD *, uint64_t))(*(_QWORD *)v20 + 520))(v20, v75, 1);
        }
        else
        {
          if (v49)
            v82 = 0x40000;
          else
            v82 = 0;
          CA::OGL::emit_one_part_rect(v20, (uint64_t)&v377, (const CA::Transform *)&v387, 0, v82);
        }
LABEL_316:
        *(_BYTE *)(*((_QWORD *)v20 + 2) + 16) = 0;
        return (*(uint64_t (**)(CA::OGL::Context *, unint64_t, _QWORD))(*(_QWORD *)v20 + 520))(v20, v55, 0);
      }
      v79 = (v73 + 2);
      v349 = v50;
      if (v79 > 0x200)
      {
        v81 = (double *)malloc_type_malloc(8 * (v73 + 2), 0x100004000313F17uLL);
        v80 = (unint64_t)v81;
      }
      else
      {
        MEMORY[0x1E0C80A78](result);
        v80 = (unint64_t)&v341 - ((8 * v79 + 15) & 0xFFFFFFFF0);
        bzero((void *)v80, 8 * (v73 + 2));
      }
      v83 = (v74 + 2);
      v350 = (float16x4_t *)(8 * v83);
      v351 = 8 * (v73 + 2);
      if (v83 > 0x200)
      {
        v86 = malloc_type_malloc(8 * (v74 + 2), 0x100004000313F17uLL);
        v85 = (uint64_t)v86;
      }
      else
      {
        MEMORY[0x1E0C80A78](v81);
        v85 = (uint64_t)&v341 - ((v84 + 15) & 0xFFFFFFFF0);
        bzero((void *)v85, v84);
      }
      if (v79 > 0x400)
      {
        v89 = (float *)malloc_type_malloc(4 * v79, 0x100004052888210uLL);
        v88 = (unint64_t)v89;
      }
      else
      {
        MEMORY[0x1E0C80A78](v86);
        v88 = (unint64_t)&v341 - ((v87 + 15) & 0x7FFFFFFF0);
        bzero((void *)v88, v87);
      }
      v356 = (v73 + 2);
      if (v83 > 0x400)
      {
        v91 = (uint64_t)malloc_type_malloc(4 * v83, 0x100004052888210uLL);
      }
      else
      {
        MEMORY[0x1E0C80A78](v89);
        v91 = (uint64_t)&v341 - ((v90 + 15) & 0x7FFFFFFF0);
        bzero((void *)v91, v90);
      }
      v93 = *(double *)&v354;
      v92 = *(double *)&v355;
      if ((v85 & v80 & v88 & v91) == 0)
        goto LABEL_308;
      v348 = *(double *)&v55;
      v94 = (const float *)(v73 + 1);
      v95 = (const float *)(v74 + 1);
      *(float64_t *)v80 = v362.f64[0];
      *(double *)(v80 + 8 * v94) = v363.f64[0] + v362.f64[0];
      *(float64_t *)v85 = v362.f64[1];
      *(double *)(v85 + 8 * v95) = v363.f64[1] + v362.f64[1];
      *(_DWORD *)v88 = v387.i32[0];
      *(_DWORD *)(v88 + 4 * v94) = v387.i32[2];
      *(_DWORD *)v91 = v387.i32[1];
      *(_DWORD *)(v91 + 4 * v95) = v387.i32[3];
      v96 = (double *)*((_QWORD *)v34 + 11);
      v97 = (double *)*((_QWORD *)v34 + 12);
      if (v96 != v97)
      {
        v98 = 0;
        v99 = 1.0 / *(double *)&v352;
        v100 = 0.0;
        do
        {
          v101 = &v96[v98];
          v102 = *v101;
          v103 = v101[1];
          v104 = *(double *)v80;
          v105 = v98 + 1;
          *(double *)(v80 + 8 * v105) = *(double *)v80
                                        + (*(double *)(v80 + 8 * (_QWORD)v94) - *(double *)v80) * (*v101 - v93) * v99;
          v98 += 2;
          *(double *)(v80 + 8 * v98) = v104
                                                     + (*(double *)(v80 + 8 * (_QWORD)v94) - v104)
                                                     * (v103 - v93)
                                                     * v99;
          *(float *)&v104 = *(float *)v88
                          + (v102 - (v100 + v93))
                          * (float)(*(float *)(v88 + 4 * (_QWORD)v94) - *(float *)v88)
                          * (1.0
                           / v48);
          *(_DWORD *)(v88 + 4 * v105) = LODWORD(v104);
          *(_DWORD *)(v88 + 4 * v98) = LODWORD(v104);
          v100 = v100 - v102 + v103;
        }
        while (v101 + 2 != v97);
      }
      v106 = (double *)*((_QWORD *)v34 + 14);
      v107 = (double *)*((_QWORD *)v34 + 15);
      if (v106 != v107)
      {
        v108 = 0;
        v109 = 1.0 / *(double *)&v353;
        v110 = 0.0;
        do
        {
          v111 = &v106[v108];
          v112 = *v111;
          v113 = v111[1];
          v114 = *(double *)v85;
          v115 = v108 + 1;
          *(double *)(v85 + 8 * v115) = *(double *)v85
                                        + (*(double *)(v85 + 8 * (_QWORD)v95) - *(double *)v85) * (*v111 - v92) * v109;
          v108 += 2;
          *(double *)(v85 + 8 * v108) = v114
                                                      + (*(double *)(v85 + 8 * (_QWORD)v95) - v114)
                                                      * (v113 - v92)
                                                      * v109;
          *(float *)&v114 = *(float *)v91
                          + (v112 - (v110 + v92))
                          * (float)(*(float *)(v91 + 4 * (_QWORD)v95) - *(float *)v91)
                          * (1.0
                           / v47);
          *(_DWORD *)(v91 + 4 * v115) = LODWORD(v114);
          *(_DWORD *)(v91 + 4 * v108) = LODWORD(v114);
          v110 = v110 - v112 + v113;
        }
        while (v111 + 2 != v107);
      }
      if (!(_DWORD)v357 || !v349)
      {
        if ((_DWORD)v358)
          v295 = 0x40000;
        else
          v295 = 0;
        CA::OGL::emit_n_part_rect((uint64_t)v360, (uint64_t)&v377, v73 + 1, (int)v95, (float64_t *)v80, v85, (_DWORD *)v88, v91, 0, 0, v295);
        v55 = *(_QWORD *)&v348;
        goto LABEL_308;
      }
      v116 = (uint64_t)v360;
      v117 = CA::OGL::Context::bind_image((uint64_t)v360, 1, v349, (double *)0x3F, 1u, 1, 0, 0, 0.0, &v376, 0);
      *(_BYTE *)(*(_QWORD *)(v116 + 16) + 16) = 14;
      v118 = v356;
      *(_QWORD *)&v352 = v117;
      if (v356 > 0x100)
      {
        v120 = malloc_type_malloc(16 * v356, 0x8A3E2C2AuLL);
        *(_QWORD *)&v353 = v120;
        if (v118 > 0x200)
        {
          v319 = v351;
          v358 = (double *)malloc_type_malloc(v351, 0xD13DD386uLL);
          v307 = (float *)malloc_type_malloc(v319, 0x5CA4A561uLL);
          v357 = v307;
LABEL_288:
          if (v83 > 0x100)
          {
            v321 = malloc_type_malloc(16 * v83, 0x8381A0CFuLL);
            *(_QWORD *)&v355 = v321;
            if (v83 > 0x200)
            {
              v326 = (size_t)v350;
              *(_QWORD *)&v354 = malloc_type_malloc((size_t)v350, 0x87F9A58DuLL);
              v325 = (char *)malloc_type_malloc(v326, 0x435F5518uLL);
              goto LABEL_293;
            }
          }
          else
          {
            MEMORY[0x1E0C80A78](v307);
            *(_QWORD *)&v355 = (char *)&v341 - ((v320 + 15) & 0x1FFFFFFFF0);
            bzero((void *)v355, v320);
          }
          v322 = (size_t)v350;
          MEMORY[0x1E0C80A78](v321);
          v323 = (v322 + 15) & 0xFFFFFFFF0;
          *(_QWORD *)&v354 = (char *)&v341 - v323;
          bzero((char *)&v341 - v323, v322);
          MEMORY[0x1E0C80A78](v324);
          v325 = (char *)&v341 - v323;
          bzero(v325, v322);
LABEL_293:
          v327 = (float64_t *)v353;
          if ((_QWORD)v353 && (_QWORD)v355 && v358 && (_QWORD)v354 && v357 && v325)
          {
            *(_QWORD *)&v353 = v325;
            v328 = v359;
            LODWORD(v351) = CA::OGL::merge_compressed_geometry((CA::OGL *)v80, (const double *)v80, (const double *)v88, (const float *)v88, v94, v359->f32[0], (uint64_t)v327, v387.f32[0], v376.f32[0], v358, v357, *(float **)&v341);
            v329 = v95;
            v330 = v355;
            v331 = v327;
            v332 = v354;
            v333 = CA::OGL::merge_compressed_geometry((CA::OGL *)v85, (const double *)v85, (const double *)v91, (const float *)v91, v329, v328->f32[1], v355, v387.f32[1], v376.f32[1], (double *)v354, (float *)v353, *(float **)&v341);
            v334 = (uint64_t)v360;
            v335 = v332;
            v327 = v331;
            CA::OGL::emit_n_part_rect((uint64_t)v360, (uint64_t)&v377, v351 - 1, v333 - 1, v331, v330, v358, v335, v357, v353, 0);
            v336 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v334 + 520);
            v337 = v334;
            v325 = (char *)v353;
            v336(v337, v352, 1);
          }
          if (v83 < 0x201)
          {
            v55 = *(_QWORD *)&v348;
            if (v83 < 0x101)
            {
LABEL_304:
              if (v356 >= 0x201)
              {
                free(v357);
                free(v358);
LABEL_307:
                free(v327);
                goto LABEL_308;
              }
              if (v356 >= 0x101)
                goto LABEL_307;
LABEL_308:
              if (v83 >= 0x401)
                free((void *)v91);
              v338 = v356;
              if (v356 >= 0x401)
                free((void *)v88);
              if (v83 >= 0x201)
                free((void *)v85);
              v20 = v360;
              if (v338 >= 0x201)
                free((void *)v80);
              goto LABEL_316;
            }
          }
          else
          {
            free(v325);
            free((void *)v354);
            v55 = *(_QWORD *)&v348;
          }
          free((void *)v355);
          goto LABEL_304;
        }
      }
      else
      {
        MEMORY[0x1E0C80A78](v117);
        *(_QWORD *)&v353 = (char *)&v341 - ((v119 + 15) & 0x1FFFFFFFF0);
        bzero((void *)v353, v119);
      }
      v304 = v351;
      MEMORY[0x1E0C80A78](v120);
      v305 = (v304 + 15) & 0xFFFFFFFF0;
      v358 = (double *)((char *)&v341 - v305);
      bzero((char *)&v341 - v305, v304);
      MEMORY[0x1E0C80A78](v306);
      v357 = (float *)((char *)&v341 - v305);
      bzero((char *)&v341 - v305, v304);
      goto LABEL_288;
    }
    v297 = v296 + 2;
    do
    {
      v298 = __ldaxr(v297);
      v299 = v298 - 1;
    }
    while (__stlxr(v299, v297));
    if (!v299)
      (*(void (**)(unsigned int *))(*(_QWORD *)v296 + 16))(v296);
LABEL_260:
    v46 = (CA::Render::Texture *)*((_QWORD *)v34 + 3);
    goto LABEL_261;
  }
  v279 = CA::Render::Image::new_image((CA::Render::Image *)9, v345, v169, 1u, 0, v346, (unint64_t *)&v387, (const unint64_t *)CA::Render::aligned_free, (void (*)(const void *, void *))v376.i64[0], v339);
  v280 = *((_QWORD *)v34 + 4);
  *((_QWORD *)v34 + 4) = v279;
  v15 = v351;
  v16 = v350;
  for (*(_QWORD *)&v355 = v280; v66 > *(double *)&v352; v66 = v66 * 0.5)
    v64 = v64 * 0.5;
  v281 = (const unsigned __int8 *)(int)(v64 / *(double *)&v353 * v277);
  v282 = (int)(v64 / *(double *)&v353 * v278);
  v283 = CA::Render::format_rowbytes((CA::Render *)9, (int)(v64 / *(double *)&v353 * v277));
  v284 = (unsigned __int8 *)v283;
  *(_QWORD *)&v377.f64[0] = v283;
  if (is_mul_ok(v283, v282))
    v285 = v283 * v282;
  else
    v285 = 0;
  if (v285 > 0x1000000
    || (v362.f64[0] = 0.0,
        (v286 = (unsigned __int16 *)CA::Render::aligned_malloc((CA::Render *)v285, (unint64_t *)&v362, 0)) == 0))
  {
    v294 = 1;
LABEL_253:
    v41 = v359;
    goto LABEL_254;
  }
  v287 = v181;
  v288 = (CA::_anonymous_namespace_ *)v286;
  CA::downsample_image((CA *)9, v287, v387.u64[0], (int)v345, (int)v169, v286, (size_t)v284, 4, 0.0, 0.0, (double)(int)v281, (double)(int)v282, LODWORD(v341));
  v289 = v66;
  v290 = CA::Render::Image::new_image((CA::Render::Image *)9, v281, v282, 1u, 0, v288, (unint64_t *)&v377, (const unint64_t *)CA::Render::aligned_free, *(void (**)(const void *, void *))&v362.f64[0], v340);
  v291 = (unsigned int *)*((_QWORD *)v34 + 3);
  *((_QWORD *)v34 + 3) = v290;
  if (!v291)
  {
    v294 = 0;
    goto LABEL_253;
  }
  v292 = v291 + 2;
  v41 = v359;
  do
    v293 = __ldaxr(v292);
  while (__stlxr(v293 - 1, v292));
  if (v293 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)v291 + 16))(v291);
  v294 = 0;
LABEL_254:
  result = v355;
  if ((_QWORD)v355)
  {
    v300 = (unsigned int *)(v355 + 8);
    do
    {
      v301 = __ldaxr(v300);
      v302 = v301 - 1;
    }
    while (__stlxr(v302, v300));
    if (!v302)
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v355 + 16))(v355);
  }
  if (!v294)
    goto LABEL_260;
  return result;
}

void CA::OGL::render_subclass(CA::OGL::Renderer &,CA::OGL::Layer const*)::visitor::visit_subclass(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v5;
  int32x2_t **v6;
  float32x4_t v7;
  double *v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  uint64_t v12;
  double scale;
  double *v14;
  float32x4_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  double *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = *(int32x2_t ***)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(float32x4_t *)(a2 + 24);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v7)))) & 1) != 0)
  {
    v8 = *(double **)(a2 + 16);
    v9 = *(unsigned __int8 *)(a2 + 120);
    if (v8)
    {
      v10 = (__int128 *)CA::Render::Path::bounding_rect(*(CA::Render::Path **)(a2 + 16));
      v11 = v10[1];
      v20 = *v10;
      v21 = v11;
      v7 = *(float32x4_t *)(a2 + 24);
    }
    else
    {
      v20 = 0u;
      v21 = 0u;
    }
    CA::OGL::render_shape(*v6, v5, v8, v7, v7.f32[1], v7.f32[2], v7.f32[3], v9, (uint64_t)&v20, *(_QWORD *)(a2 + 40), 0);
  }
  if (*(double *)(a2 + 88) != 0.0
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(*(float32x4_t *)(a2 + 48))))) & 1) != 0)
  {
    v12 = *(_QWORD *)(*(_QWORD *)&(*v6)[29] + 24);
    if ((*(_BYTE *)(v12 + 144) & 0x10) != 0)
      scale = CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v12, 0, 0, a4);
    else
      scale = *(double *)(v12 + 128);
    CA::Render::ShapeLayer::stroke_path((CA::Render::ShapeLayer *)&v19, scale, a2);
    v14 = v19;
    *(double *)v15.i64 = CA::Render::ShapeLayer::stroke_bounds((CA::Render::ShapeLayer *)&v20, a2);
    v15.i32[0] = *(_DWORD *)(a2 + 48);
    CA::OGL::render_shape(*v6, v5, v14, v15, *(float32_t *)(a2 + 52), *(float *)(a2 + 56), *(float *)(a2 + 60), 0, (uint64_t)&v20, *(_QWORD *)(a2 + 64), *(double *)(a2 + 88) < 0.0);
    if (v14)
    {
      v16 = (unsigned int *)(v14 + 1);
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        (*(void (**)(double *))(*(_QWORD *)v14 + 16))(v14);
    }
  }
}

uint64_t CA::Render::ShapeLayer::get_bounds(CA::Render::ShapeLayer *this, const CA::Render::Layer *a2, CA::Rect *a3, CA::Rect *a4)
{
  CA::Render::Path *v7;
  __int128 v8;
  __int128 v9;
  __int128 *v10;
  float64x2_t v11;
  float64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int32x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v19;
  float64x2_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v7 = (CA::Render::Path *)*((_QWORD *)this + 2);
  v8 = 0uLL;
  if (v7)
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(*(float32x4_t *)((char *)this + 24))))) & 1) != 0
      || (v9 = 0uLL, *((_QWORD *)this + 5)))
    {
      v10 = (__int128 *)CA::Render::Path::bounding_rect(v7);
      v9 = *v10;
      v8 = v10[1];
    }
  }
  else
  {
    v9 = 0uLL;
  }
  *(_OWORD *)a3 = v9;
  *((_OWORD *)a3 + 1) = v8;
  CA::Render::ShapeLayer::stroke_bounds((CA::Render::ShapeLayer *)&v19, (uint64_t)this);
  v11 = *((float64x2_t *)a3 + 1);
  v12 = v20;
  v13 = vclezq_f64(v11);
  v14 = vclezq_f64(v20);
  v15 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v14, v13), (int8x16_t)vzip2q_s64(v14, v13))));
  if ((v15.i8[4] & 1) != 0)
  {
    if ((v15.i8[0] & 1) != 0)
      goto LABEL_12;
    v16 = v19;
  }
  else
  {
    if ((v15.i8[0] & 1) != 0)
      goto LABEL_12;
    v17 = vaddq_f64(*(float64x2_t *)a3, v11);
    v16 = vminnmq_f64(*(float64x2_t *)a3, v19);
    v12 = vsubq_f64(vmaxnmq_f64(v17, vaddq_f64(v19, v20)), v16);
  }
  *(float64x2_t *)a3 = v16;
  *((float64x2_t *)a3 + 1) = v12;
LABEL_12:
  if (a4)
  {
    *(_OWORD *)a4 = 0u;
    *((_OWORD *)a4 + 1) = 0u;
  }
  return 1;
}

uint64_t CA::Render::Path::bounding_rect(CA::Render::Path *this)
{
  int v1;
  uint64_t v2;
  float64x2_t v3;
  float64x2_t v4;
  unsigned __int8 *v5;
  float64x2_t *v6;
  unsigned __int8 *v7;
  float64x2_t v8;
  int v9;
  uint64_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  int32x2_t v20;
  char v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v29;

  v1 = *((_DWORD *)this + 3);
  if ((v1 & 0x100) == 0)
  {
    v2 = *((unsigned int *)this + 5);
    v3 = 0uLL;
    if ((_DWORD)v2)
    {
      v4 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
      v6 = (float64x2_t *)*((_QWORD *)this + 4);
      v5 = (unsigned __int8 *)*((_QWORD *)this + 5);
      v7 = &v5[v2];
      v8 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
      do
      {
        v9 = *v5++;
        switch(v9)
        {
          case 1:
          case 2:
            v4 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*v6, v4), (int8x16_t)v4, *(int8x16_t *)v6);
            v8 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v8, *v6), (int8x16_t)v8, *(int8x16_t *)v6);
            v10 = 1;
            goto LABEL_8;
          case 3:
            v11 = v6[1];
            v12 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*v6, v4), (int8x16_t)v4, *(int8x16_t *)v6);
            v13 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v8, *v6), (int8x16_t)v8, *(int8x16_t *)v6);
            v4 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v11, v12), (int8x16_t)v12, (int8x16_t)v11);
            v8 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v13, v11), (int8x16_t)v13, (int8x16_t)v11);
            v10 = 2;
            goto LABEL_8;
          case 4:
            v14 = v6[1];
            v15 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*v6, v4), (int8x16_t)v4, *(int8x16_t *)v6);
            v16 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v8, *v6), (int8x16_t)v8, *(int8x16_t *)v6);
            v17 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v14, v15), (int8x16_t)v15, (int8x16_t)v14);
            v18 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v16, v14), (int8x16_t)v16, (int8x16_t)v14);
            v19 = v6[2];
            v4 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v19, v17), (int8x16_t)v17, (int8x16_t)v19);
            v8 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v18, v19), (int8x16_t)v18, (int8x16_t)v19);
            v10 = 3;
LABEL_8:
            v6 += v10;
            break;
          default:
            break;
        }
      }
      while (v5 < v7);
      v20 = vmovn_s64(vcgtq_f64(v8, v4));
      v21 = v20.i8[4] & v20.i8[0];
      v22 = 0uLL;
      if ((v21 & 1) != 0)
      {
        v23 = vrndmq_f64(v4);
        __asm { FMOV            V1.2D, #-1.0 }
        v3 = vaddq_f64(v23, _Q1);
        v29 = vrndpq_f64(v8);
        __asm { FMOV            V2.2D, #1.0 }
        v22 = vsubq_f64(vaddq_f64(v29, _Q2), v3);
      }
    }
    else
    {
      v22 = 0uLL;
    }
    *((float64x2_t *)this + 5) = v3;
    *((float64x2_t *)this + 6) = v22;
    *((_DWORD *)this + 3) = v1 | 0x100;
  }
  return (uint64_t)this + 80;
}

double CA::Render::ShapeLayer::stroke_bounds(CA::Render::ShapeLayer *this, uint64_t a2)
{
  CA::Render::Path *v3;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  CA::Render::Path *v11[2];

  v11[1] = *(CA::Render::Path **)MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 16)
    && *(double *)(a2 + 88) != 0.0
    && *(double *)(a2 + 80) > *(double *)(a2 + 72)
    && ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(*(float32x4_t *)(a2 + 48))))) & 1) != 0
     || *(_QWORD *)(a2 + 64))
    && (v11[0] = 0,
        CA::Render::ShapeLayer::stroke_path((CA::Render::ShapeLayer *)v11, *(double *)(a2 + 144), a2),
        (v3 = v11[0]) != 0))
  {
    v4 = (__int128 *)CA::Render::Path::bounding_rect(v11[0]);
    v5 = *v4;
    v6 = v4[1];
    *(_OWORD *)this = *v4;
    *((_OWORD *)this + 1) = v6;
    v7 = (unsigned int *)((char *)v3 + 8);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(CA::Render::Path *))(*(_QWORD *)v3 + 16))(v3);
  }
  else
  {
    *(_QWORD *)&v5 = 0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  return *(double *)&v5;
}

void CA::OGL::render_shape(int32x2_t *a1, uint64_t a2, double *a3, float32x4_t a4, float32_t a5, float a6, float a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  double v17;
  int32x2_t v18;
  float16x4_t v19;
  const CA::Transform *v20;
  float16x4_t v21;
  float64x2_t v22;
  float16x4_t v23;
  int32x2_t *v24;
  int32x2_t *v25;
  uint32x2_t v26;
  int32x2_t v27;
  uint32x2_t v28;
  int32x2_t v29;
  int32x2_t v30;
  uint32x2_t v31;
  int64x2_t v32;
  int8x16_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x2_t v36;
  uint32x2_t v37;
  uint32x2_t v38;
  int32x2_t v39;
  __int128 v40;
  int32x2_t v41;
  uint32x2_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int32x2_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  unsigned int v55;
  int32x2_t v56;
  CA::Shape *v57;
  double *v58;
  int8x16_t v59;
  float64_t v60;
  uint64_t v61;
  int v62;
  float64x2_t v63[3];
  _QWORD v64[2];
  __int128 v65;
  int32x2_t v66;
  int32x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  _OWORD v70[3];
  uint64_t (**v71)();
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  if (a3 && (a4.f32[0] != 0.0 || a5 != 0.0 || a6 != 0.0 || a7 != 0.0))
  {
    v17 = *(double *)(a9 + 16);
    if (v17 >= *(double *)(a9 + 24))
      v17 = *(double *)(a9 + 24);
    if (v17 > 0.0)
    {
      a4.f32[1] = a5;
      v18 = a1[29];
      a4.i64[1] = __PAIR64__(LODWORD(a7), LODWORD(a6));
      v19 = vcvt_f16_f32(a4);
      v20 = *(const CA::Transform **)(*(_QWORD *)&v18 + 24);
      v21 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16(*(float16x4_t *)(*(_QWORD *)&v18 + 32)), vcvtq_f32_f16(v19)));
      if (*(_QWORD *)&v19 == 0x3C003C003C003C00)
        v21 = *(float16x4_t *)(*(_QWORD *)&v18 + 32);
      v22 = *(float64x2_t *)(a9 + 16);
      if (*(_QWORD *)(*(_QWORD *)&v18 + 32) == 0x3C003C003C003C00)
        v23 = v19;
      else
        v23 = v21;
      v68 = *(float64x2_t *)a9;
      v69 = v22;
      CA::Rect::apply_transform((int8x16_t *)&v68, v20, a3);
      v66 = 0;
      v67 = 0;
      CA::Shape::get_bounds(*(_QWORD *)(*(_QWORD *)&v18 + 8), (int *)&v66);
      v24 = (int32x2_t *)a1[31];
      if (v24)
        v25 = v24 + 4;
      else
        v25 = a1 + 23;
      v26 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v67);
      if ((vpmax_u32(v26, v26).u32[0] & 0x80000000) == 0)
      {
        v27 = v25[1];
        v28 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v27);
        if ((vpmax_u32(v28, v28).u32[0] & 0x80000000) == 0)
        {
          v29 = vmax_s32(v66, *v25);
          v30 = vsub_s32(vmin_s32(vadd_s32(v66, v67), vadd_s32(*v25, v27)), v29);
          v31 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v30);
          if ((vpmax_u32(v31, v31).u32[0] & 0x80000000) == 0)
          {
            v32 = vceqzq_f64(v69);
            if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v32, 1), (int8x16_t)v32).u64[0] & 0x8000000000000000) != 0
              || (v33 = vorrq_s8((int8x16_t)vcltzq_f64(v69), (int8x16_t)vcgezq_f64(v69)),
                  (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v33), 1), v33).u64[0] & 0x8000000000000000) != 0))
            {
              v35.i64[0] = 0;
              v36 = 0;
            }
            else
            {
              v34 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v68, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
              v35 = vuzp1q_s32(v34, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v68, v69), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v34));
              v36 = (int32x2_t)v35.u64[1];
            }
            v37 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v36);
            if ((vpmax_u32(v37, v37).u32[0] & 0x80000000) == 0)
            {
              v38 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v30);
              if ((vpmax_u32(v38, v38).u32[0] & 0x80000000) == 0)
              {
                v39 = vadd_s32(v29, v30);
                *(int32x2_t *)&v40 = vmax_s32(*(int32x2_t *)v35.i8, v29);
                v41 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v35.i8, v36), v39), *(int32x2_t *)&v40);
                v42 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v41);
                if ((vpmax_u32(v42, v42).u32[0] & 0x80000000) == 0)
                {
                  *((int32x2_t *)&v40 + 1) = v41;
                  v65 = v40;
                  if (a10)
                  {
                    v43 = *(_QWORD *)(a2 + 24);
                    v44 = *(_DWORD *)(v43 + 36);
                    if ((v44 & 0xFu) > 0xA)
                      v45 = 1;
                    else
                      v45 = CA::OGL::texture_filter(CA::Render::ImageFilter)::filters[v44 & 0xF];
                    v48 = v44 >> 4;
                    if (v48 > 0xA)
                      v49 = 1;
                    else
                      v49 = CA::OGL::texture_filter(CA::Render::ImageFilter)::filters[v48];
                    v50 = *(_QWORD *)(v43 + 128);
                    v62 = v49;
                    if (v50)
                      v51 = *(float *)(v50 + 288);
                    else
                      v51 = 0.0;
                    v61 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 24);
                    v52 = (*(uint64_t (**)(int32x2_t *, uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 656))(a1, 1, &v65, 15);
                    if (v52)
                    {
                      v53 = (_DWORD *)v52;
                      v74 = 0x3C003C003C003C00;
                      v75 = 0;
                      v76 = 0;
                      v77 = 0;
                      v78 = 0;
                      v71 = 0;
                      v72 = *(_OWORD *)(*(_QWORD *)&v18 + 8);
                      v73 = *(_QWORD *)(*(_QWORD *)&v18 + 24);
                      LODWORD(v78) = *(_DWORD *)(*(_QWORD *)&v18 + 64);
                      WORD2(v78) = *(_WORD *)(*(_QWORD *)&v18 + 68) & 0x500 | 4;
                      memset(v70, 0, sizeof(v70));
                      CA::Shape::operator=((uint64_t)v70, &v65);
                      *(_QWORD *)&v72 = v70;
                      v71 = (uint64_t (**)())CA::OGL::Context::set_gstate((uint64_t)a1, (uint64_t)&v71);
                      CA::OGL::Context::push_surface((uint64_t)a1, (uint64_t)v53, 1u, 2, 0);
                      *(float16x4_t *)(*(_QWORD *)&a1[2] + 8) = v23;
                      v54 = v73;
                      v64[0] = a3;
                      if (v73)
                      {
                        v55 = v45;
                        if ((*(_BYTE *)(v73 + 144) & 0x1F) == 0
                          && *(double *)(v73 + 96) == 0.0
                          && *(double *)(v73 + 104) == 0.0)
                        {
                          v54 = 0;
                        }
                      }
                      else
                      {
                        v55 = v45;
                      }
                      v64[1] = v54;
                      if ((a11 & 1) != 0)
                      {
                        *(_QWORD *)&v63[0].f64[0] = off_1E15954E8;
                        *(_QWORD *)&v63[0].f64[1] = v64;
                        CA::OGL::Shape::render_path((uint64_t)a1);
                      }
                      else
                      {
                        CA::OGL::Shape::fill_path<CA::OGL::RenderPathIterator>((uint64_t)a1);
                      }
                      *(_BYTE *)(*(_QWORD *)&a1[2] + 481) |= 1u;
                      v63[0] = 0uLL;
                      CA::OGL::fill_pattern_rect((uint64_t)a1, a10, a9, v63, v73, &v68, v55, v62, v51, v61 & 1, 0);
                      *(_BYTE *)(*(_QWORD *)&a1[2] + 481) &= ~1u;
                      CA::OGL::Context::pop_surface((CA::OGL::Context *)a1);
                      CA::OGL::Context::set_gstate((uint64_t)a1, **(_QWORD **)&a1[29]);
                      v56 = a1[2];
                      if (*(unsigned __int8 *)(*(_QWORD *)&v56 + 480) >= 2u)
                        *(_BYTE *)(*(_QWORD *)&v56 + 481) |= 1u;
                      v57 = *(CA::Shape **)(*(_QWORD *)&v18 + 8);
                      v63[0] = 0uLL;
                      CA::OGL::emit_combine((uint64_t)a1, 1, v53, 0, v57, (unsigned int *)v63);
                      *(_BYTE *)(*(_QWORD *)&a1[2] + 481) &= ~1u;
                      CA::OGL::Context::release_surface((uint64_t)a1, (uint64_t)v53);
                      if (byte_1ECDC6A61)
                      {
                        v60 = *(double *)(*(_QWORD *)&v18 + 24);
                        *(_QWORD *)&v63[0].f64[0] = a9;
                        v63[0].f64[1] = v60;
                        memset(&v63[1], 0, 32);
                        CA::OGL::fill_color_rect((uint64_t)a1, (uint64_t)v63, (double *)0x80800080, v58, 0.0, v59);
                      }
                    }
                  }
                  else
                  {
                    *(float16x4_t *)(*(_QWORD *)&a1[2] + 8) = v23;
                    v46 = a1[2];
                    if (*(unsigned __int8 *)(*(_QWORD *)&v46 + 480) >= 2u)
                      *(_BYTE *)(*(_QWORD *)&v46 + 481) |= 1u;
                    v47 = *(_QWORD *)(*(_QWORD *)&a1[29] + 24);
                    *(_QWORD *)&v70[0] = a3;
                    if (v47
                      && (*(_BYTE *)(v47 + 144) & 0x1F) == 0
                      && *(double *)(v47 + 96) == 0.0
                      && *(double *)(v47 + 104) == 0.0)
                    {
                      v47 = 0;
                    }
                    *((_QWORD *)&v70[0] + 1) = v47;
                    if ((a11 & 1) != 0)
                    {
                      v71 = off_1E15954E8;
                      *(_QWORD *)&v72 = v70;
                      CA::OGL::Shape::render_path((uint64_t)a1);
                    }
                    else
                    {
                      CA::OGL::Shape::fill_path<CA::OGL::RenderPathIterator>((uint64_t)a1);
                    }
                    *(_BYTE *)(*(_QWORD *)&a1[2] + 481) &= ~1u;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void CA::Render::ShapeLayer::stroke_path(CA::Render::ShapeLayer *this, double a2, uint64_t a3)
{
  CA::Render::Path *v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  int v17;
  double *v19;
  unsigned int *v20;
  CA::Render::Path *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  _QWORD v40[2];

  v40[1] = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::ShapeLayer::_stroke_lock);
  if (*(_QWORD *)(a3 + 136) && vabdd_f64(*(double *)(a3 + 144), a2) <= 0.1)
    goto LABEL_52;
  v6 = *(CA::Render::Path **)(a3 + 16);
  if (!v6)
    goto LABEL_52;
  v7 = *(_QWORD *)(a3 + 112);
  if (v7 && (v8 = *(unsigned int *)(v7 + 16), (_DWORD)v8))
  {
    if (v8 > 0x200)
    {
      v10 = (char *)malloc_type_malloc(8 * v8, 0x314C5196uLL);
      v7 = *(_QWORD *)(a3 + 112);
    }
    else
    {
      MEMORY[0x1E0C80A78](v6);
      v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFF0);
      bzero(v10, v9);
    }
    v11 = 0;
    if (v8 <= 1)
      v12 = 1;
    else
      v12 = v8;
    v13 = 8 * v12;
    do
    {
      *(_QWORD *)&v10[v11] = *(_QWORD *)(v7 + 24 + v11);
      v11 += 8;
    }
    while (v13 != v11);
    v6 = *(CA::Render::Path **)(a3 + 16);
  }
  else
  {
    v8 = 0;
    v10 = 0;
  }
  v14 = fmax(*(double *)(a3 + 72), 0.0);
  v15 = fmin(*(double *)(a3 + 80), 1.0);
  if (v14 >= v15)
  {
    v21 = 0;
    goto LABEL_35;
  }
  v16 = *(double *)(a3 + 88);
  v17 = *(_DWORD *)(a3 + 120);
  if (v14 == 0.0 && v15 == 1.0)
  {
    v21 = CA::Render::Path::stroke(v6, *(double *)(a3 + 88), BYTE2(v17), BYTE1(v17), v8);
  }
  else
  {
    v19 = CA::Render::Path::copy_subpath(v6, v14, v15);
    v20 = (unsigned int *)v19;
    if (!v19)
    {
      v21 = 0;
      goto LABEL_36;
    }
    v21 = CA::Render::Path::stroke((CA::Render::Path *)v19, v16, BYTE2(v17), BYTE1(v17), v8);
    v22 = v20 + 2;
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
      (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 16))(v20);
  }
  if (!v21)
  {
LABEL_35:
    v20 = 0;
    goto LABEL_36;
  }
  v25 = (unsigned int *)((char *)v21 + 8);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 + 1, v25));
  if (!v26)
  {
    do
      v27 = __ldaxr(v25);
    while (__stlxr(v27 - 1, v25));
    goto LABEL_35;
  }
  v20 = (unsigned int *)v21;
LABEL_36:
  if (v8 >= 0x201 && v10)
    free(v10);
  v28 = *(_QWORD *)(a3 + 128);
  if (v28 && !*(_QWORD *)(v28 + 136))
  {
    *(_QWORD *)(v28 + 136) = v20;
    *(double *)(v28 + 144) = a2;
    v29 = *(unsigned int **)(a3 + 136);
    *(_QWORD *)(a3 + 136) = v21;
    *(double *)(a3 + 144) = a2;
    if (!v29)
      goto LABEL_52;
    goto LABEL_47;
  }
  v29 = *(unsigned int **)(a3 + 136);
  *(_QWORD *)(a3 + 136) = v21;
  *(double *)(a3 + 144) = a2;
  if (v20)
  {
    v30 = v20 + 2;
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
      (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 16))(v20);
  }
  if (v29)
  {
LABEL_47:
    v33 = v29 + 2;
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
      (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 16))(v29);
  }
LABEL_52:
  v36 = *(_QWORD *)(a3 + 136);
  if (v36)
  {
    v37 = (unsigned int *)(v36 + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 + 1, v37));
    if (!v38)
    {
      v36 = 0;
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 - 1, v37));
    }
  }
  *(_QWORD *)this = v36;
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::ShapeLayer::_stroke_lock);
}

void CA::Render::`anonymous namespace'::Compressor::add_rect(CA::Render::_anonymous_namespace_::Compressor *this, double a2, double a3, double a4, double a5)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  unint64_t v11;
  double *v12;
  double *v13;
  unint64_t v14;
  double *v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  unint64_t v20;
  double *v21;
  double *v22;
  double *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  double *v29;
  __int128 v30;
  double *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  double *v37;
  __int128 v38;
  double *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  double *v45;
  __int128 v46;
  double v47;
  double v48;
  double v49;
  double *v50;
  double *v51;
  double *v52;
  double *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  double *v59;
  __int128 v60;
  double v61;
  double v62;
  double v63;
  double *v64;
  double *v65;
  double *v66;
  double *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  double *v73;
  __int128 v74;
  double v75;
  double v76;
  unint64_t v77;
  double *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  double *v84;
  char *v85;
  double *v86;
  __int128 v87;
  double v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  __int128 v94;
  double v95;
  double v96;
  double *v97;
  double *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  double *v104;
  __int128 v105;

  if (a2 <= a4)
    v6 = a4;
  else
    v6 = a2;
  if (a2 <= a4)
    v7 = a2;
  else
    v7 = a4;
  if (a3 <= a5)
    v8 = a5;
  else
    v8 = a3;
  if (a3 <= a5)
    v9 = a3;
  else
    v9 = a5;
  v10 = vabdd_f64(v9, v8);
  if (vabdd_f64(v7, v6) >= 0.000001)
  {
    if (v10 >= 0.000001)
    {
      v17 = *(double *)this;
      v18 = v7 - *(double *)this;
      v19 = *(double *)this + v6;
      v21 = (double *)*((_QWORD *)this + 8);
      v20 = *((_QWORD *)this + 9);
      if ((unint64_t)v21 >= v20)
      {
        v39 = (double *)*((_QWORD *)this + 7);
        v40 = ((char *)v21 - (char *)v39) >> 4;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 60)
          goto LABEL_130;
        v42 = v20 - (_QWORD)v39;
        if (v42 >> 3 > v41)
          v41 = v42 >> 3;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
          v43 = 0xFFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        if (v43 >> 60)
          goto LABEL_131;
        v44 = (char *)operator new(16 * v43);
        v45 = (double *)&v44[16 * v40];
        *v45 = v18;
        v45[1] = v19;
        v22 = v45 + 2;
        while (v21 != v39)
        {
          v46 = *((_OWORD *)v21 - 1);
          v21 -= 2;
          *((_OWORD *)v45 - 1) = v46;
          v45 -= 2;
        }
        *((_QWORD *)this + 7) = v45;
        *((_QWORD *)this + 8) = v22;
        *((_QWORD *)this + 9) = &v44[16 * v43];
        if (v39)
        {
          operator delete(v39);
          v17 = *(double *)this;
        }
      }
      else
      {
        *v21 = v18;
        v21[1] = v19;
        v22 = v21 + 2;
      }
      *((_QWORD *)this + 8) = v22;
      v75 = v9 - v17;
      v76 = v17 + v8;
      v52 = (double *)*((_QWORD *)this + 14);
      v77 = *((_QWORD *)this + 15);
      if ((unint64_t)v52 < v77)
      {
        *v52 = v75;
LABEL_98:
        v52[1] = v76;
        v86 = v52 + 2;
LABEL_111:
        *((_QWORD *)this + 14) = v86;
        return;
      }
      v78 = (double *)*((_QWORD *)this + 13);
      v79 = ((char *)v52 - (char *)v78) >> 4;
      v80 = v79 + 1;
      if (!((unint64_t)(v79 + 1) >> 60))
      {
        v81 = v77 - (_QWORD)v78;
        if (v81 >> 3 > v80)
          v80 = v81 >> 3;
        if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0)
          v82 = 0xFFFFFFFFFFFFFFFLL;
        else
          v82 = v80;
        if (!(v82 >> 60))
        {
          v83 = (char *)operator new(16 * v82);
          v84 = (double *)&v83[16 * v79];
          v85 = &v83[16 * v82];
          *v84 = v75;
          v84[1] = v76;
          v86 = v84 + 2;
          while (v52 != v78)
          {
            v87 = *((_OWORD *)v52 - 1);
            v52 -= 2;
            *((_OWORD *)v84 - 1) = v87;
            v84 -= 2;
          }
          goto LABEL_109;
        }
LABEL_131:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      goto LABEL_130;
    }
    v15 = (double *)*((_QWORD *)this + 5);
    v14 = *((_QWORD *)this + 6);
    if ((unint64_t)v15 >= v14)
    {
      v31 = (double *)*((_QWORD *)this + 4);
      v32 = ((char *)v15 - (char *)v31) >> 4;
      v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 60)
        goto LABEL_130;
      v34 = v14 - (_QWORD)v31;
      if (v34 >> 3 > v33)
        v33 = v34 >> 3;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
        v35 = 0xFFFFFFFFFFFFFFFLL;
      else
        v35 = v33;
      if (v35 >> 60)
        goto LABEL_131;
      v36 = (char *)operator new(16 * v35);
      v37 = (double *)&v36[16 * v32];
      *v37 = v7;
      v37[1] = v6;
      v16 = v37 + 2;
      while (v15 != v31)
      {
        v38 = *((_OWORD *)v15 - 1);
        v15 -= 2;
        *((_OWORD *)v37 - 1) = v38;
        v37 -= 2;
      }
      *((_QWORD *)this + 4) = v37;
      *((_QWORD *)this + 5) = v16;
      *((_QWORD *)this + 6) = &v36[16 * v35];
      if (v31)
        operator delete(v31);
    }
    else
    {
      *v15 = v7;
      v15[1] = v6;
      v16 = v15 + 2;
    }
    *((_QWORD *)this + 5) = v16;
    v61 = *(double *)this;
    v62 = v7 - *(double *)this;
    v63 = *(double *)this + v7;
    v65 = (double *)*((_QWORD *)this + 8);
    v64 = (double *)*((_QWORD *)this + 9);
    if (v65 >= v64)
    {
      v67 = (double *)*((_QWORD *)this + 7);
      v68 = ((char *)v65 - (char *)v67) >> 4;
      v69 = v68 + 1;
      if ((unint64_t)(v68 + 1) >> 60)
        goto LABEL_130;
      v70 = (char *)v64 - (char *)v67;
      if (v70 >> 3 > v69)
        v69 = v70 >> 3;
      if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF0)
        v71 = 0xFFFFFFFFFFFFFFFLL;
      else
        v71 = v69;
      if (v71 >> 60)
        goto LABEL_131;
      v72 = (char *)operator new(16 * v71);
      v73 = (double *)&v72[16 * v68];
      v64 = (double *)&v72[16 * v71];
      *v73 = v62;
      v73[1] = v63;
      v66 = v73 + 2;
      while (v65 != v67)
      {
        v74 = *((_OWORD *)v65 - 1);
        v65 -= 2;
        *((_OWORD *)v73 - 1) = v74;
        v73 -= 2;
      }
      *((_QWORD *)this + 7) = v73;
      *((_QWORD *)this + 8) = v66;
      *((_QWORD *)this + 9) = v64;
      if (v67)
      {
        operator delete(v67);
        v61 = *(double *)this;
        v64 = (double *)*((_QWORD *)this + 9);
      }
    }
    else
    {
      *v65 = v62;
      v65[1] = v63;
      v66 = v65 + 2;
    }
    *((_QWORD *)this + 8) = v66;
    v95 = v6 - v61;
    v96 = v61 + v6;
    if (v66 >= v64)
    {
      v98 = (double *)*((_QWORD *)this + 7);
      v99 = ((char *)v66 - (char *)v98) >> 4;
      v100 = v99 + 1;
      if ((unint64_t)(v99 + 1) >> 60)
        goto LABEL_130;
      v101 = (char *)v64 - (char *)v98;
      if (v101 >> 3 > v100)
        v100 = v101 >> 3;
      if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF0)
        v102 = 0xFFFFFFFFFFFFFFFLL;
      else
        v102 = v100;
      if (v102 >> 60)
        goto LABEL_131;
      v103 = (char *)operator new(16 * v102);
      v104 = (double *)&v103[16 * v99];
      *v104 = v95;
      v104[1] = v96;
      v97 = v104 + 2;
      while (v66 != v98)
      {
        v105 = *((_OWORD *)v66 - 1);
        v66 -= 2;
        *((_OWORD *)v104 - 1) = v105;
        v104 -= 2;
      }
      *((_QWORD *)this + 7) = v104;
      *((_QWORD *)this + 8) = v97;
      *((_QWORD *)this + 9) = &v103[16 * v102];
      if (v98)
        operator delete(v98);
    }
    else
    {
      *v66 = v95;
      v66[1] = v96;
      v97 = v66 + 2;
    }
    *((_QWORD *)this + 8) = v97;
  }
  else if (v10 >= 0.000001)
  {
    v12 = (double *)*((_QWORD *)this + 11);
    v11 = *((_QWORD *)this + 12);
    if ((unint64_t)v12 >= v11)
    {
      v23 = (double *)*((_QWORD *)this + 10);
      v24 = ((char *)v12 - (char *)v23) >> 4;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 60)
        goto LABEL_130;
      v26 = v11 - (_QWORD)v23;
      if (v26 >> 3 > v25)
        v25 = v26 >> 3;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
        v27 = 0xFFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27 >> 60)
        goto LABEL_131;
      v28 = (char *)operator new(16 * v27);
      v29 = (double *)&v28[16 * v24];
      *v29 = v9;
      v29[1] = v8;
      v13 = v29 + 2;
      while (v12 != v23)
      {
        v30 = *((_OWORD *)v12 - 1);
        v12 -= 2;
        *((_OWORD *)v29 - 1) = v30;
        v29 -= 2;
      }
      *((_QWORD *)this + 10) = v29;
      *((_QWORD *)this + 11) = v13;
      *((_QWORD *)this + 12) = &v28[16 * v27];
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v12 = v9;
      v12[1] = v8;
      v13 = v12 + 2;
    }
    *((_QWORD *)this + 11) = v13;
    v47 = *(double *)this;
    v48 = v9 - *(double *)this;
    v49 = *(double *)this + v9;
    v51 = (double *)*((_QWORD *)this + 14);
    v50 = (double *)*((_QWORD *)this + 15);
    if (v51 >= v50)
    {
      v53 = (double *)*((_QWORD *)this + 13);
      v54 = ((char *)v51 - (char *)v53) >> 4;
      v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 60)
        goto LABEL_130;
      v56 = (char *)v50 - (char *)v53;
      if (v56 >> 3 > v55)
        v55 = v56 >> 3;
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
        v57 = 0xFFFFFFFFFFFFFFFLL;
      else
        v57 = v55;
      if (v57 >> 60)
        goto LABEL_131;
      v58 = (char *)operator new(16 * v57);
      v59 = (double *)&v58[16 * v54];
      v50 = (double *)&v58[16 * v57];
      *v59 = v48;
      v59[1] = v49;
      v52 = v59 + 2;
      while (v51 != v53)
      {
        v60 = *((_OWORD *)v51 - 1);
        v51 -= 2;
        *((_OWORD *)v59 - 1) = v60;
        v59 -= 2;
      }
      *((_QWORD *)this + 13) = v59;
      *((_QWORD *)this + 14) = v52;
      *((_QWORD *)this + 15) = v50;
      if (v53)
      {
        operator delete(v53);
        v47 = *(double *)this;
        v50 = (double *)*((_QWORD *)this + 15);
      }
    }
    else
    {
      *v51 = v48;
      v51[1] = v49;
      v52 = v51 + 2;
    }
    *((_QWORD *)this + 14) = v52;
    v88 = v8 - v47;
    v76 = v47 + v8;
    if (v52 < v50)
    {
      *v52 = v88;
      goto LABEL_98;
    }
    v78 = (double *)*((_QWORD *)this + 13);
    v89 = ((char *)v52 - (char *)v78) >> 4;
    v90 = v89 + 1;
    if (!((unint64_t)(v89 + 1) >> 60))
    {
      v91 = (char *)v50 - (char *)v78;
      if (v91 >> 3 > v90)
        v90 = v91 >> 3;
      if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF0)
        v92 = 0xFFFFFFFFFFFFFFFLL;
      else
        v92 = v90;
      if (!(v92 >> 60))
      {
        v93 = (char *)operator new(16 * v92);
        v84 = (double *)&v93[16 * v89];
        v85 = &v93[16 * v92];
        *v84 = v88;
        v84[1] = v76;
        v86 = v84 + 2;
        while (v52 != v78)
        {
          v94 = *((_OWORD *)v52 - 1);
          v52 -= 2;
          *((_OWORD *)v84 - 1) = v94;
          v84 -= 2;
        }
LABEL_109:
        *((_QWORD *)this + 13) = v84;
        *((_QWORD *)this + 14) = v86;
        *((_QWORD *)this + 15) = v85;
        if (v78)
          operator delete(v78);
        goto LABEL_111;
      }
      goto LABEL_131;
    }
LABEL_130:
    abort();
  }
}

void CA::OGL::emit_n_part_rect(uint64_t a1, uint64_t a2, int a3, int a4, float64_t *a5, uint64_t a6, _DWORD *a7, uint64_t a8, _DWORD *a9, uint64_t a10, int a11)
{
  CA::OGL::Context *v16;
  int v17;
  int v18;
  unsigned int v19;
  const double *v20;
  char *v21;
  int v22;
  uint64_t v23;
  float64x2_t *v24;
  char *v25;
  const double *v26;
  uint64_t v27;
  char *v28;
  size_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  float64_t *v36;
  _DWORD *v37;
  _DWORD *v38;
  float64_t *v39;
  float64_t *v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  CA::OGL::Context *v44;
  int v45;
  int v46;
  __int16 v47;
  const unsigned __int16 *v48;
  char *v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  int v55;
  __int16 v56;
  __int16 v57;
  int v58;
  char *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  const double *v67;
  void (*v68)(void);
  float64x2_t *v69;
  const double *v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, const double *);
  int v73;
  uint64_t v74;
  _BOOL4 v75;
  uint64_t v76;
  CA::OGL::Context *v77;
  uint64_t v78;
  int v79;
  float64x2_t v80;
  float32x2_t *v81;
  float64x2_t v82;
  float32x2_t *v83;
  float64x2_t v84;
  float32x2_t *v85;
  float64x2_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  CA::OGL::Context *v91;
  uint64_t v92;
  const unsigned __int16 *v93;
  int v94;
  uint64_t v95;
  char *v96;
  int v97;
  const double *v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD v101[8];
  uint64_t v102;

  v16 = (CA::OGL::Context *)a1;
  v102 = *MEMORY[0x1E0C80C00];
  if (a3 == 3 && a4 == 3)
  {
    CA::OGL::emit_nine_part_rect(a1, a2, (uint64_t)a5, a6, (uint64_t)a7, a8, (uint64_t)a9, a10, a11);
    return;
  }
  if (a4 * a3)
  {
    v17 = a3 + 1;
    v18 = a4 + 1;
    v19 = (a4 + 1) * (a3 + 1);
    if (v19 >= 0x401)
    {
      CA::OGL::emit_n_part_rect_large(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      return;
    }
    v95 = (a4 + 1);
    v99 = a2;
    v97 = a4;
    v94 = a11;
    v96 = *(char **)(a1 + 120);
    v92 = *(_QWORD *)(a1 + 136);
    v98 = (const double *)(v18 * (a3 + 1));
    if (v19 <= v92)
    {
      MEMORY[0x1E0C80A78](a1);
      v91 = v16;
      v28 = (char *)&v89 - v27;
      bzero((char *)&v89 - v27, v29);
      v30 = (unint64_t)(v28 + 15);
      v16 = v91;
      v90 = v30 & 0xFFFFFFFFFFFFFFF0;
      MEMORY[0x1E0C80A78](v31);
      v93 = (const unsigned __int16 *)((char *)&v89 - v32);
      bzero((char *)&v89 - v32, v33);
      v24 = (float64x2_t *)v90;
      v26 = v98;
      v23 = v99;
      v25 = v96;
      v22 = v97;
    }
    else
    {
      v20 = (const double *)(v18 * (a3 + 1));
      v21 = (char *)malloc_type_malloc(80 * v19 + 8 * (a4 * a3), 0xC152B6CBuLL);
      v22 = v97;
      v23 = v99;
      if (!v21)
        return;
      v24 = (float64x2_t *)&v21[48 * v20];
      v93 = (const unsigned __int16 *)&v24[2 * (_QWORD)v20];
      v25 = v21;
      *((_QWORD *)v16 + 15) = v21;
      *((_QWORD *)v16 + 17) = v20;
      v26 = v20;
    }
    v34 = v95;
    if ((v22 & 0x80000000) == 0)
    {
      v35 = 0;
      v36 = &v24->f64[1];
      v37 = v25 + 28;
      do
      {
        v38 = v37;
        v39 = v36;
        v40 = a5;
        v41 = a7;
        v42 = a9;
        v43 = (a3 + 1);
        if ((a3 & 0x80000000) == 0)
        {
          do
          {
            *(v39 - 1) = *v40;
            *v39 = *(float64_t *)(a6 + 8 * v35);
            *(_OWORD *)(v39 + 1) = xmmword_18474DF50;
            if (a7)
            {
              *(v38 - 3) = *v41;
              *(v38 - 2) = *(_DWORD *)(a8 + 4 * v35);
            }
            if (a9)
            {
              *(v38 - 1) = *v42;
              *v38 = *(_DWORD *)(a10 + 4 * v35);
            }
            ++v42;
            ++v41;
            ++v40;
            v39 += 4;
            v38 += 12;
            --v43;
          }
          while (v43);
        }
        ++v35;
        v36 += 4 * v17;
        v37 += 12 * v17;
      }
      while (v35 != v34);
    }
    v44 = v16;
    if (a3 <= 0)
    {
      v46 = v22 - 1;
      v48 = v93;
      v49 = (char *)v93;
      v50 = (uint64_t)v25;
    }
    else
    {
      v45 = 0;
      v46 = v22 - 1;
      v47 = (v22 - 1) * v17;
      v48 = v93;
      v49 = (char *)v93;
      v50 = (uint64_t)v25;
      do
      {
        *(_WORD *)v49 = v45;
        v51 = v45 + 1;
        *((_WORD *)v49 + 1) = v45 + 1;
        *((_WORD *)v49 + 2) = a3 + v45 + 2;
        *((_WORD *)v49 + 3) = a3 + v45 + 1;
        if (v22 < 2)
        {
          v49 += 8;
        }
        else
        {
          *((_WORD *)v49 + 4) = v47 + v45;
          *((_WORD *)v49 + 5) = v47 + v45 + 1;
          v52 = v17 * v22 + v45;
          *((_WORD *)v49 + 6) = v52 + 1;
          *((_WORD *)v49 + 7) = v52;
          v49 += 16;
        }
        v45 = v51;
      }
      while (a3 != v51);
    }
    if (v22 < 3)
    {
      v59 = v49;
      if (!(_DWORD)v26)
        goto LABEL_46;
    }
    else
    {
      v53 = 0;
      v54 = 2 * a3;
      v55 = 1;
      v56 = 3 * a3;
      do
      {
        *(_WORD *)v49 = v17 + v53;
        *((_WORD *)v49 + 1) = v17 + v53 + 1;
        v57 = v54 + v53;
        *((_WORD *)v49 + 2) = v54 + v53 + 3;
        *((_WORD *)v49 + 3) = v54 + v53 + 2;
        if (a3 < 2)
        {
          v49 += 8;
        }
        else
        {
          *((_WORD *)v49 + 4) = v57;
          *((_WORD *)v49 + 5) = v57 + 1;
          *((_WORD *)v49 + 6) = v56 + v53 + 2;
          *((_WORD *)v49 + 7) = v56 + v53 + 1;
          v49 += 16;
        }
        ++v55;
        v53 += v17;
      }
      while (v46 != v55);
      v58 = 1;
      v59 = v49;
      do
      {
        if (a3 <= 2)
        {
          v60 = v58 + 1;
        }
        else
        {
          v60 = v58 + 1;
          v61 = (v58 + 1) * v17 + 1;
          v62 = v58 * v17 + 2;
          v63 = a3 - 2;
          do
          {
            *(_WORD *)v59 = v62 - 1;
            *((_WORD *)v59 + 3) = v61++;
            v64 = v59 + 8;
            *((_WORD *)v59 + 1) = v62;
            *((_WORD *)v59 + 2) = v61;
            ++v62;
            v59 += 8;
            --v63;
          }
          while (v63);
          v59 = v64;
        }
        v58 = v60;
      }
      while (v60 != v46);
      if (!(_DWORD)v26)
      {
LABEL_46:
        v68 = *(void (**)(void))(v23 + 24);
        if (v68)
        {
          v69 = v24;
          v68();
          v24 = v69;
          v26 = v98;
          v23 = v99;
        }
        v70 = v26;
        CA::OGL::transform_vertices(v24, (float32x4_t *)v50, v26, *(float64x2_t **)(v23 + 8));
        v71 = v99;
        v72 = *(void (**)(uint64_t, uint64_t, const double *))(v99 + 32);
        if (v72)
        {
          v72(v99, v50, v70);
          v71 = v99;
        }
        v73 = *(_DWORD *)(v71 + 20);
        if ((v73 & 0xF) == 0 || (*(_BYTE *)(v71 + 16) & 9) == 0)
          goto LABEL_57;
        if ((v73 & 4) != 0)
        {
          CA::OGL::aa_adjust_vertices(v50, v50 + 48 * v17, 48, v17);
          v71 = v99;
          v73 = *(_DWORD *)(v99 + 20);
          if ((v73 & 8) == 0)
          {
LABEL_54:
            if ((v73 & 1) == 0)
              goto LABEL_55;
            goto LABEL_68;
          }
        }
        else if ((v73 & 8) == 0)
        {
          goto LABEL_54;
        }
        CA::OGL::aa_adjust_vertices(v50 + 48 * v17 * v97, v50 + 48 * v46 * v17, 48, v17);
        v71 = v99;
        v73 = *(_DWORD *)(v99 + 20);
        if ((v73 & 1) == 0)
        {
LABEL_55:
          if ((v73 & 2) == 0)
            goto LABEL_57;
          goto LABEL_56;
        }
LABEL_68:
        CA::OGL::aa_adjust_vertices(v50, v50 + 48, 48 * v17, (int)v95);
        v71 = v99;
        if ((*(_DWORD *)(v99 + 20) & 2) == 0)
        {
LABEL_57:
          v74 = v71;
          v75 = CA::OGL::Context::need_transparent_source(v44);
          v76 = v59 - v49;
          v77 = v44;
          v78 = (uint64_t)v44;
          v79 = v94;
          CA::OGL::emit_mesh_with_center(v78, v74, v48, (v59 - (char *)v48) >> 1, v76 >> 1, v98, v94);
          if ((v79 & 0x40000) != 0 || v75)
          {
            v80 = vcvtq_f64_f32(*(float32x2_t *)(v50 + 8));
            v101[0] = vcvtq_f64_f32(*(float32x2_t *)v50);
            v101[1] = v80;
            v81 = (float32x2_t *)(v50 + 48 * a3);
            v82 = vcvtq_f64_f32(v81[1]);
            v101[2] = vcvtq_f64_f32(*v81);
            v101[3] = v82;
            v83 = (float32x2_t *)(v50 + 48 * (v17 * v97 + a3));
            v84 = vcvtq_f64_f32(v83[1]);
            v101[4] = vcvtq_f64_f32(*v83);
            v101[5] = v84;
            v85 = (float32x2_t *)(v50 + 48 * v17 * v97);
            v86 = vcvtq_f64_f32(v85[1]);
            v101[6] = vcvtq_f64_f32(*v85);
            v101[7] = v86;
            if ((v79 & 0x40000) != 0)
              v87 = *(_QWORD *)(*((_QWORD *)v77 + 2) + 8);
            else
              v87 = 0;
            v100 = v87;
            CA::OGL::emit_quad_surround((uint64_t)v77, (const double *)v101, &v100);
          }
          if ((char *)v50 != v96)
          {
            v88 = v92;
            *((_QWORD *)v77 + 15) = v96;
            *((_QWORD *)v77 + 17) = v88;
            free((void *)v50);
          }
          return;
        }
LABEL_56:
        CA::OGL::aa_adjust_vertices(v50 + 48 * a3, v50 + 48 * a3 - 48, 48 * v17, (int)v95);
        v71 = v99;
        goto LABEL_57;
      }
    }
    v65 = *(_QWORD *)(*((_QWORD *)v44 + 2) + 8);
    v66 = (_QWORD *)(v50 + 32);
    v67 = v26;
    do
    {
      *v66 = v65;
      v66 += 6;
      v67 = (const double *)((char *)v67 - 1);
    }
    while (v67);
    goto LABEL_46;
  }
}

uint64_t CA::OGL::Context::shadow_cache(CA::OGL::Context *this)
{
  uint64_t v1;
  malloc_zone_t *malloc_zone;
  _QWORD *v4;

  v1 = *((_QWORD *)this + 49);
  if (!v1)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v4 = malloc_type_zone_malloc(malloc_zone, 0x20uLL, 0x8BB15036uLL);
    v1 = (uint64_t)v4;
    if (v4)
    {
      v4[2] = 0;
      *((_DWORD *)v4 + 6) = 0;
      *v4 = x_hash_table_new_(0, 0, 0, 0, 0, 0);
      *(_QWORD *)(v1 + 8) = 0;
      CA::Render::add_observer(0xAu, 0, (uint64_t)CA::Render::ShadowCache::path_deleted, v1, 0);
    }
    *((_QWORD *)this + 49) = v1;
  }
  return v1;
}

void CA::Render::Path::finalize(CA::Render::Path *this)
{
  BOOL v2;
  malloc_zone_t *malloc_zone;

  CA::Render::post_notification(0xAu, (unint64_t)this, 0, 1);
  if (*((_QWORD *)this + 6))
    v2 = CA::Render::Path::_path_table == 0;
  else
    v2 = 1;
  if (!v2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Path::_path_lock);
    x_hash_table_remove(CA::Render::Path::_path_table, *((_QWORD *)this + 6));
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Path::_path_lock);
  }
  (**(void (***)(CA::Render::Path *))this)(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::Render::Path::~Path(CA::Render::Path *this, const CA::Render::Object *a2)
{
  void *v3;
  malloc_zone_t *malloc_zone;
  const CGPath *v5;

  *(_QWORD *)this = off_1E1598688;
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v3);
  }
  v5 = (const CGPath *)*((_QWORD *)this + 7);
  if (v5)
    CGPathRelease(v5);
  --dword_1ECDC7CB8;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

{
  malloc_zone_t *malloc_zone;

  CA::Render::Path::~Path(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::ScanConverter::Path::quadto(CA::ScanConverter::Path *this, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  double v12;
  double v13;

  if (*((double *)this + 10) != 1.0)
    return CA::ScanConverter::Path::quadto(this, a2, a3, 1.0, a4, a5, 1.0, a6, a7, a8, a9, a10, a11, a12);
  v12 = *((double *)this + 8);
  v13 = *((double *)this + 9);
  *((double *)this + 8) = a4;
  *((double *)this + 9) = a5;
  return CA::ScanConverter::Path::add_cube((uint64_t)this, v12, v13, (v12 + a2 + a2) * 0.333333333, (v13 + a3 + a3) * 0.333333333, (a2 + a2 + a4) * 0.333333333, (a3 + a3 + a5) * 0.333333333, a4, a5);
}

uint64_t CA::ScanConverter::Path::cubeto(CA::ScanConverter::Path *this, double a2, double a3, double a4, double a5, double a6, double a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  double v17;
  double v18;

  if (*((double *)this + 10) != 1.0)
    return CA::ScanConverter::Path::cubeto(this, a2, a3, 1.0, a4, a5, 1.0, a6, a7, a8, a9, a10, a11, a12, a13, a14, 1.0);
  v17 = *((double *)this + 8);
  v18 = *((double *)this + 9);
  *((double *)this + 8) = a6;
  *((double *)this + 9) = a7;
  return CA::ScanConverter::Path::add_cube((uint64_t)this, v17, v18, a2, a3, a4, a5, a6, a7);
}

void CA::Render::`anonymous namespace'::Compressor::closepath(CA::Render::_anonymous_namespace_::Compressor *this)
{
  _OWORD *v2;
  double v3;
  _OWORD *v4;
  double v5;
  double v6;
  double v7;

  v2 = (_OWORD *)((char *)this + 128);
  v3 = *((double *)this + 16);
  v4 = (_OWORD *)((char *)this + 144);
  v5 = *((double *)this + 18);
  v6 = *((double *)this + 17);
  v7 = *((double *)this + 19);
  if (v3 == v5 && v6 == v7)
  {
    if (!*((_BYTE *)this + 160))
      return;
  }
  else
  {
    *v2 = *v4;
  }
  ++*((_QWORD *)this + 3);
  *((_BYTE *)this + 160) = 0;
}

uint64_t CA::Render::Update::mark_composited(uint64_t this)
{
  _QWORD *v1;
  unint64_t *v2;
  unint64_t v3;
  _QWORD *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;

  v1 = *(_QWORD **)(this + 824);
  if (v1)
  {
    v2 = (unint64_t *)(this + 824);
    while (1)
    {
      v3 = __ldaxr(v2);
      if ((_QWORD *)v3 != v1)
        break;
      if (!__stlxr(0, v2))
      {
        v4 = (_QWORD *)*v1;
        if ((_QWORD *)*v1 != v1 + 1)
        {
          do
          {
            v5 = (unsigned int *)v4[4];
            if (*((_BYTE *)v5 + 12) != 25)
              __assert_rtn("mark_composited", "render-updater.cpp", 10663, "obj->type () == Render::kTypeImageQueue");
            CA::Render::ImageQueue::did_composite((CA::Render::ImageQueue *)v4[4]);
            v6 = v5 + 2;
            do
            {
              v7 = __ldaxr(v6);
              v8 = v7 - 1;
            }
            while (__stlxr(v8, v6));
            if (!v8)
              (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
            v9 = (_QWORD *)v4[1];
            if (v9)
            {
              do
              {
                v10 = v9;
                v9 = (_QWORD *)*v9;
              }
              while (v9);
            }
            else
            {
              do
              {
                v10 = (_QWORD *)v4[2];
                v11 = *v10 == (_QWORD)v4;
                v4 = v10;
              }
              while (!v11);
            }
            v4 = v10;
          }
          while (v10 != v1 + 1);
        }
        std::__tree<std::tuple<unsigned short,unsigned short>>::destroy((_QWORD *)v1[1]);
        JUMPOUT(0x186DBD990);
      }
    }
    __clrex();
  }
  return this;
}

uint64_t CA::WindowServer::`anonymous namespace'::OGLDisplay::foreach_detached_layer(CA::WindowServer::_anonymous_namespace_::OGLDisplay *this, void (*a2)(CA::Render::Handle *, uint64_t, CA::Render::Texture *, void *), void *a3)
{
  return (*(uint64_t (**)(_QWORD, void (*)(CA::Render::Handle *, uint64_t, CA::Render::Texture *, void *), void *))(**((_QWORD **)this + 1) + 600))(*((_QWORD *)this + 1), a2, a3);
}

void CA::WindowServer::IOMFBDisplay::foreach_detached_layer(CA::WindowServer::IOMFBDisplay *this, void (*a2)(CA::Render::Handle *, uint64_t, CA::Render::Texture *, void *), void *a3)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 3251);
  if (v3 && (*(_BYTE *)(v3 + 292) & 1) == 0)
  {
    if (*(_QWORD *)v3)
      a2(*(CA::Render::Handle **)v3, *(int *)(v3 + 288), *(CA::Render::Texture **)(v3 + 8), a3);
    else
      CA::WindowServer::IOMFBDisplay::delete_detached_layer(this);
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::displayed_surface(CA::WindowServer::IOMFBDisplay *this, char a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (pthread_mutex_t *)((char *)this + 25688);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25688));
  v5 = *((_QWORD *)this + 6 * *((unsigned int *)this + 6419) + 3220);
  if (v5)
  {
    if ((a2 & 1) == 0)
      *(_BYTE *)(v5 + 132) |= 8u;
    v6 = *(_QWORD *)(v5 + 32);
  }
  else
  {
    v6 = 0;
  }
  pthread_mutex_unlock(v4);
  return v6;
}

float32x4_t CA::Mat4Impl::mat4_concat(float32x4_t *this, float *a2, const float *a3, const float *a4)
{
  float32x4_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float32x4_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float32x4_t result;

  v4 = *(float32x4_t *)(a2 + 4);
  v5 = vcvt_hight_f64_f32(*(float32x4_t *)a2);
  v6 = vcvtq_f64_f32(*(float32x2_t *)a2);
  v7 = vcvt_hight_f64_f32(v4);
  v8 = vcvtq_f64_f32(*(float32x2_t *)v4.f32);
  v9 = *(float32x4_t *)(a2 + 8);
  v10 = *(float32x4_t *)(a2 + 12);
  v11 = vcvt_hight_f64_f32(v9);
  v12 = vcvtq_f64_f32(*(float32x2_t *)v9.f32);
  v13 = vcvt_hight_f64_f32(v10);
  v14 = vcvtq_f64_f32(*(float32x2_t *)v10.f32);
  v15 = *(float32x4_t *)(a3 + 4);
  v16 = vcvt_hight_f64_f32(*(float32x4_t *)a3);
  v17 = vcvtq_f64_f32(*(float32x2_t *)a3);
  v18 = vmulq_n_f64(v17, v6.f64[0]);
  v19 = vmulq_n_f64(v16, v6.f64[0]);
  v20 = vmulq_n_f64(v17, v8.f64[0]);
  v21 = vmulq_n_f64(v16, v8.f64[0]);
  v22 = vmulq_n_f64(v17, v12.f64[0]);
  v23 = vmulq_n_f64(v16, v12.f64[0]);
  v24 = vmulq_n_f64(v17, v14.f64[0]);
  v25 = vmulq_n_f64(v16, v14.f64[0]);
  v26 = vcvt_hight_f64_f32(v15);
  v27 = vcvtq_f64_f32(*(float32x2_t *)v15.f32);
  v28 = vmlaq_laneq_f64(v18, v27, v6, 1);
  v29 = vmlaq_laneq_f64(v19, v26, v6, 1);
  v30 = vmlaq_laneq_f64(v20, v27, v8, 1);
  v31 = vmlaq_laneq_f64(v21, v26, v8, 1);
  v32 = vmlaq_laneq_f64(v22, v27, v12, 1);
  v33 = vmlaq_laneq_f64(v23, v26, v12, 1);
  v34 = *(float32x4_t *)(a3 + 8);
  v35 = *(float32x4_t *)(a3 + 12);
  v36 = vcvt_hight_f64_f32(v34);
  v37 = vcvtq_f64_f32(*(float32x2_t *)v34.f32);
  v38 = vmlaq_n_f64(v28, v37, v5.f64[0]);
  v39 = vmlaq_n_f64(v30, v37, v7.f64[0]);
  v40 = vmlaq_n_f64(v32, v37, v11.f64[0]);
  v41 = vmlaq_n_f64(vmlaq_laneq_f64(v24, v27, v14, 1), v37, v13.f64[0]);
  v42 = vcvt_hight_f64_f32(v35);
  v43 = vcvtq_f64_f32(*(float32x2_t *)v35.f32);
  *this = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_laneq_f64(v38, v43, v5, 1)), vmlaq_laneq_f64(vmlaq_n_f64(v29, v36, v5.f64[0]), v42, v5, 1));
  this[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_laneq_f64(v39, v43, v7, 1)), vmlaq_laneq_f64(vmlaq_n_f64(v31, v36, v7.f64[0]), v42, v7, 1));
  result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_laneq_f64(v40, v43, v11, 1)), vmlaq_laneq_f64(vmlaq_n_f64(v33, v36, v11.f64[0]), v42, v11, 1));
  this[2] = result;
  this[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_laneq_f64(v41, v43, v13, 1)), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v25, v26, v14, 1), v36, v13.f64[0]), v42, v13, 1));
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::needs_p3_clamp(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28088);
}

float CA::OGL::MetalContext::hdr_scale(CA::OGL::MetalContext *this)
{
  return *((float *)this + 722);
}

uint64_t CA::WindowServer::IOMFBDisplay::detached_layers_valid_p(CA::WindowServer::IOMFBDisplay *this, const CA::Render::Update *a2)
{
  uint64_t v4;
  unsigned int *v5;
  int v6;
  pthread_mutex_t *v7;
  uint64_t v8;
  double v9;
  int v10;
  double v11;
  uint64_t v12;
  float v13;
  float v14;
  unint64_t v15;
  __n128 v16;
  __n128 v17;
  float v18;
  float v19;
  _DWORD *v20;
  int v21;
  int v22;
  double v23;
  double v24;
  float v25;
  float v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const CA::Rect *v34;
  float *v35;
  float *v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  double v40;
  double v41;
  int v42;
  double v43;
  float v44;
  const CA::Rect *v45;
  float *v46;
  float *v47;
  __n128 v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64x2_t v52;
  float64x2_t v53;
  int v54;
  int v55;
  double v56;
  unsigned int v57;
  _QWORD v58[2];

  v58[1] = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1536))(this) & 1) != 0)
    return 1;
  v4 = *((_QWORD *)this + 3251);
  if (!v4 || !*(_QWORD *)(v4 + 24) || (*(_BYTE *)(v4 + 292) & 1) != 0)
    return 1;
  v5 = (unsigned int *)((char *)this + 25672);
  v6 = *((_DWORD *)this + 6791);
  switch(v6)
  {
    case 3:
      v31 = 216;
      if ((*(_DWORD *)(v4 + 40) & 8) == 0)
        v31 = 208;
      if (!(*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *, unint64_t))(*(_QWORD *)this + 2232))(this, (unint64_t)*(double *)(v4 + v31)))return 0;
      v7 = (pthread_mutex_t *)((char *)this + 25688);
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25688));
      v32 = *((_QWORD *)this + 6 * *v5 + 3220);
      if (!v32
        || (v33 = *(_QWORD *)(v32 + 32)) == 0
        || (*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *, _QWORD))(*(_QWORD *)this + 2232))(this, *(unsigned int *)(v33 + 56)))
      {
        v29 = 1;
LABEL_49:
        pthread_mutex_unlock(v7);
        return v29;
      }
      goto LABEL_51;
    case 2:
      v7 = (pthread_mutex_t *)((char *)this + 25688);
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25688));
      v37 = *((_QWORD *)this + 3251);
      v38 = *((_QWORD *)this + 6 * *v5 + 3220);
      v58[0] = 0;
      v39 = (float)*((int *)this + 52);
      v41 = *(double *)(v37 + 208);
      v40 = *(double *)(v37 + 216);
      v42 = *(_DWORD *)(v37 + 40);
      if ((v42 & 8) != 0)
        v43 = *(double *)(v37 + 216);
      else
        v43 = *(double *)(v37 + 208);
      if ((v42 & 8) != 0)
        v40 = *(double *)(v37 + 208);
      v44 = CA::WindowServer::layer_bandwidth_v2((CA::WindowServer *)*(unsigned int *)(*(_QWORD *)(v37 + 24) + 64), (CA::WindowServer::Surface *)((char *)v58 + 4), (const CA::Rect *)v58, v34, v43, v35, v36, v40, *(double *)(v37 + 248), v39);
      v29 = 0;
      if (!(*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *, unint64_t, float))(*(_QWORD *)this + 2232))(this, (unint64_t)v41, v44))goto LABEL_49;
      if (!v38)
        goto LABEL_47;
      v50 = *(_QWORD *)(v38 + 32);
      if (!v50 || (*(_BYTE *)(v38 + 132) & 4) != 0 || (*((_BYTE *)a2 + 268) & 8) == 0)
        goto LABEL_47;
      v51 = *(_QWORD *)(v50 + 56);
      v57 = v51;
      v52.i64[0] = v51;
      v52.i64[1] = HIDWORD(v51);
      v53 = vcvtq_f64_u64(v52);
      v54 = *((_DWORD *)this + 40);
      v55 = *((_DWORD *)this + 41);
      if (v54 <= v55)
        v54 = *((_DWORD *)this + 41);
      v56 = 1.79769313e308;
      if (v54 <= 1073741822)
        v56 = (double)v55;
      CA::WindowServer::layer_bandwidth_v2((CA::WindowServer *)*(unsigned int *)(v50 + 64), (CA::WindowServer::Surface *)((char *)v58 + 4), (const CA::Rect *)v58, v45, v53.f64[0], v46, v47, v53.f64[1], v56, v39);
      if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *, _QWORD))(*(_QWORD *)this + 2232))(this, v57))
      {
LABEL_47:
        v48.n128_u32[0] = HIDWORD(v58[0]);
        v49.n128_u32[0] = v58[0];
        v28 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, __n128, __n128))(*(_QWORD *)this + 2240))(this, v48, v49);
LABEL_48:
        v29 = v28;
        goto LABEL_49;
      }
LABEL_51:
      v29 = 0;
      goto LABEL_49;
    case 1:
      v7 = (pthread_mutex_t *)((char *)this + 25688);
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25688));
      v8 = *((_QWORD *)this + 3251);
      v9 = *(double *)(v8 + 208);
      v10 = *(_DWORD *)(v8 + 40);
      if ((v10 & 8) != 0)
        v11 = *(double *)(v8 + 216);
      else
        v11 = *(double *)(v8 + 208);
      if ((v10 & 8) == 0)
        v9 = *(double *)(v8 + 216);
      v12 = *((_QWORD *)this + 6 * *v5 + 3220);
      v13 = *(double *)(v8 + 240) / v11;
      v14 = *(double *)(v8 + 248) / v9;
      v15 = CA::WindowServer::Surface::bits_per_pixel((CA::WindowServer::Surface *)*(unsigned int *)(*(_QWORD *)(v8 + 24) + 64));
      v17.n128_f32[0] = v13 * 8.0;
      v18 = (float)v15 / (float)((float)(v13 * 8.0) * v14);
      v19 = (float)(ceilf(1.0 / v14) * (float)v15) / v17.n128_f32[0];
      if (v12)
      {
        v20 = *(_DWORD **)(v12 + 32);
        if (v20)
        {
          if ((*(_BYTE *)(v12 + 132) & 4) == 0 && (*((_BYTE *)a2 + 268) & 8) != 0)
          {
            v16.n128_u32[0] = v20[14];
            v17.n128_u32[0] = v20[15];
            v16.n128_f64[0] = (double)v16.n128_u64[0];
            v17.n128_f64[0] = (double)v17.n128_u64[0];
            v21 = *((_DWORD *)this + 40);
            v22 = *((_DWORD *)this + 41);
            v23 = (double)v21;
            v24 = (double)v22;
            if (v21 <= v22)
              v21 = *((_DWORD *)this + 41);
            if (v21 > 1073741822)
            {
              v23 = 1.79769313e308;
              v24 = 1.79769313e308;
            }
            v25 = v23 / v16.n128_f64[0];
            v26 = v24 / v17.n128_f64[0];
            v27 = CA::WindowServer::Surface::bits_per_pixel((CA::WindowServer::Surface *)v20[16]);
            v18 = (float)((float)v27 / (float)((float)(v25 * 8.0) * v26)) + v18;
            v19 = (float)((float)(ceilf(1.0 / v26) * (float)v27) / (float)(v25 * 8.0)) + v19;
          }
        }
      }
      v16.n128_f32[0] = v18;
      v17.n128_f32[0] = v19;
      v28 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, __n128, __n128))(*(_QWORD *)this + 2240))(this, v16, v17);
      goto LABEL_48;
  }
  return 1;
}

char *CAGetDebugMessage()
{
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  if (debug_message)
    return &debug_message;
  else
    return 0;
}

uint64_t CA::WindowServer::IOMFBDisplay::color_flush_shape(CA::WindowServer::IOMFBDisplay *this, const CA::Render::Update *a2)
{
  pthread_mutex_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (pthread_mutex_t *)((char *)this + 25688);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25688));
  v4 = *((_QWORD *)this + 6 * *((unsigned int *)this + 6418) + 3220);
  if (v4)
    v5 = *(_QWORD *)(v4 + 24);
  else
    v5 = 0;
  pthread_mutex_unlock(v3);
  return v5;
}

BOOL CA::WindowServer::AppleDisplay::valid_clocking_p(CA::WindowServer::AppleDisplay *this, uint64_t a2)
{
  return *(_OWORD *)((char *)this + 28264) == 0
      || *((_QWORD *)this + 3534) * a2 <= (unint64_t)(2 * *((_QWORD *)this + 3533) * *((int *)this + 52));
}

uint64_t CA::OGL::emit_shape(CA::OGL *this, CA::OGL::Context *a2, const CA::Shape *a3)
{
  CA::OGL::Context *v5;
  int32x2_t *v6;
  int32x2_t *v7;
  _BOOL4 v8;
  const CA::Bounds *v9;
  uint64_t v10;
  const int *v11;
  _BOOL4 v12;
  int v13;
  char *v14;
  uint64_t v15;
  CA::Shape *v16;
  uint64_t v17;
  uint32x2_t v18;
  int32x2_t v19;
  uint32x2_t v20;
  int32x2_t v21;
  int32x2_t v22;
  int32x2_t v23;
  uint32x2_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CA::Shape *v30;
  uint32x2_t v31;
  int32x2_t v32;
  uint32x2_t v33;
  int32x2_t v34;
  int32x2_t v35;
  int32x2_t v36;
  uint32x2_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t result;
  int32x2_t v43;
  int32x2_t v44;
  int32x2_t v45;
  int32x2_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(*((_QWORD *)this + 2) + 16) = 0;
  v5 = *(CA::OGL::Context **)(*((_QWORD *)this + 29) + 8);
  v6 = (int32x2_t *)*((_QWORD *)this + 31);
  if (v6)
    v7 = v6 + 4;
  else
    v7 = (int32x2_t *)((char *)this + 184);
  v8 = CA::OGL::Context::need_transparent_source(this);
  v12 = v8;
  v13 = *((unsigned __int8 *)this + 64);
  if (*((_BYTE *)this + 64))
    *((_BYTE *)this + 64) = 0;
  *((_QWORD *)this + 16) = 0;
  v14 = (char *)this + 818;
  *((_QWORD *)this + 12) = (char *)this + 818;
  *(_OWORD *)((char *)this + 104) = xmmword_18474E060;
  if ((a2 & 1) == 0)
  {
    if (*((_DWORD *)a2 + 1) == 6)
      goto LABEL_8;
LABEL_11:
    if (v5 == a2)
      v15 = CA::Shape::ref((unint64_t)a2, v9);
    else
      v15 = CA::Shape::intersect((uint64_t)v5, (uint64_t)a2);
    v16 = (CA::Shape *)v15;
    if ((v15 & 1) != 0)
    {
      if (v15 == 1)
        goto LABEL_32;
    }
    else if (*(_DWORD *)(v15 + 4) == 6)
    {
      goto LABEL_32;
    }
    v17 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
    v47 = 0uLL;
    v49 = 0;
    v50 = 0;
    v48 = v15;
    while (CA::ShapeIterator::iterate(&v48, (int *)&v47))
    {
      v18 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v47 + 8));
      if ((vpmax_u32(v18, v18).u32[0] & 0x80000000) == 0)
      {
        v19 = v7[1];
        v20 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v19);
        if ((vpmax_u32(v20, v20).u32[0] & 0x80000000) != 0
          || (v21 = vmax_s32(*(int32x2_t *)&v47, *v7),
              v22 = vmin_s32(vadd_s32(*(int32x2_t *)&v47, *(int32x2_t *)((char *)&v47 + 8)), vadd_s32(*v7, v19)),
              v23 = vsub_s32(v22, v21),
              v24 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v23),
              (vpmax_u32(v24, v24).u32[0] & 0x80000000) != 0))
        {
          *((_QWORD *)&v47 + 1) = 0;
        }
        else
        {
          *(int32x2_t *)&v25 = v21;
          *((int32x2_t *)&v25 + 1) = v23;
          v47 = v25;
          if (*((_DWORD *)this + 23))
            v26 = 6;
          else
            v26 = 4;
          if ((unint64_t)(*((_QWORD *)this + 16) + 4) > *((_QWORD *)this + 17)
            || (v27 = *((_QWORD *)this + 14)) != 0 && *((_QWORD *)this + 13) + v26 > v27)
          {
            *((_WORD *)this + 408) |= 0x20u;
            v43 = v21;
            v45 = v22;
            CA::OGL::Context::array_flush((uint64_t)this);
            v21 = v43;
            v22 = v45;
            *((_QWORD *)this + 16) = 0;
            *((_QWORD *)this + 12) = v14;
            *(_OWORD *)((char *)this + 104) = xmmword_18474E060;
          }
          CA::OGL::Context::array_rect(this, (float)v21.i32[0], (float)v21.i32[1], (float)v22.i32[0], (float)v22.i32[1]);
          v28 = *((_QWORD *)this + 15) + 48 * *((_QWORD *)this + 16);
          *(_QWORD *)(v28 - 160) = v17;
          *(_QWORD *)(v28 - 112) = v17;
          *(_QWORD *)(v28 - 64) = v17;
          *(_QWORD *)(v28 - 16) = v17;
        }
      }
    }
LABEL_32:
    CA::Shape::unref(v16);
    if (!v12)
      goto LABEL_52;
LABEL_33:
    v29 = CA::Shape::subtract(v5, a2, v10, v11);
    v30 = (CA::Shape *)v29;
    if ((v29 & 1) != 0)
    {
      if (v29 == 1)
      {
LABEL_51:
        CA::Shape::unref(v30);
        goto LABEL_52;
      }
    }
    else if (*(_DWORD *)(v29 + 4) == 6)
    {
      goto LABEL_51;
    }
    v47 = 0uLL;
    v49 = 0;
    v50 = 0;
    v48 = v29;
    while (CA::ShapeIterator::iterate(&v48, (int *)&v47))
    {
      v31 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v47 + 8));
      if ((vpmax_u32(v31, v31).u32[0] & 0x80000000) == 0)
      {
        v32 = v7[1];
        v33 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v32);
        if ((vpmax_u32(v33, v33).u32[0] & 0x80000000) != 0
          || (v34 = vmax_s32(*(int32x2_t *)&v47, *v7),
              v35 = vmin_s32(vadd_s32(*(int32x2_t *)&v47, *(int32x2_t *)((char *)&v47 + 8)), vadd_s32(*v7, v32)),
              v36 = vsub_s32(v35, v34),
              v37 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v36),
              (vpmax_u32(v37, v37).u32[0] & 0x80000000) != 0))
        {
          *((_QWORD *)&v47 + 1) = 0;
        }
        else
        {
          *(int32x2_t *)&v38 = v34;
          *((int32x2_t *)&v38 + 1) = v36;
          v47 = v38;
          if (*((_DWORD *)this + 23))
            v39 = 6;
          else
            v39 = 4;
          if ((unint64_t)(*((_QWORD *)this + 16) + 4) > *((_QWORD *)this + 17)
            || (v40 = *((_QWORD *)this + 14)) != 0 && *((_QWORD *)this + 13) + v39 > v40)
          {
            *((_WORD *)this + 408) |= 0x20u;
            v44 = v34;
            v46 = v35;
            CA::OGL::Context::array_flush((uint64_t)this);
            v34 = v44;
            v35 = v46;
            *((_QWORD *)this + 16) = 0;
            *((_QWORD *)this + 12) = v14;
            *(_OWORD *)((char *)this + 104) = xmmword_18474E060;
          }
          CA::OGL::Context::array_rect(this, (float)v34.i32[0], (float)v34.i32[1], (float)v35.i32[0], (float)v35.i32[1]);
          v41 = *((_QWORD *)this + 15) + 48 * *((_QWORD *)this + 16);
          *(_QWORD *)(v41 - 160) = 0;
          *(_QWORD *)(v41 - 112) = 0;
          *(_QWORD *)(v41 - 64) = 0;
          *(_QWORD *)(v41 - 16) = 0;
        }
      }
    }
    goto LABEL_51;
  }
  if (a2 != (CA::OGL::Context *)1)
    goto LABEL_11;
LABEL_8:
  if (v8)
    goto LABEL_33;
LABEL_52:
  result = CA::OGL::Context::array_flush((uint64_t)this);
  if (v13)
    *((_BYTE *)this + 64) = 1;
  *(_BYTE *)(*((_QWORD *)this + 2) + 16) = 0;
  return result;
}

BOOL *CA::CG::DrawGradient::color_type(CA::CG::Renderer &)const::$_1::__invoke(BOOL *result, uint64_t a2)
{
  BOOL v3;

  v3 = *(double *)(a2 + 24) == 1.0 && *result;
  *result = v3;
  return result;
}

uint64_t CA::Render::Context::context_by_client_port(CA::Render::Context *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **i;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = 0;
  v13 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)this && CA::Render::Context::_context_table)
  {
    v12 = 0;
    v11 = this;
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
    v3 = 0;
    v4 = CA::Render::Context::_context_table;
    v5 = 1 << *(_DWORD *)CA::Render::Context::_context_table;
    do
    {
      for (i = *(uint64_t ***)(*(_QWORD *)(v4 + 16) + 8 * v3); i; i = (uint64_t **)*i)
        CA::Render::find_port((CA::Render *)i[2], (uint64_t)i[3], (CA::Render::Context *)&v11, v2);
      ++v3;
    }
    while (v3 != v5);
    v1 = v12;
    if (v12)
    {
      v7 = (unsigned int *)(v12 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      if (!v8)
      {
        v1 = 0;
        do
          v10 = __ldaxr(v7);
        while (__stlxr(v10 - 1, v7));
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
  }
  return v1;
}

void CA::Render::find_port(CA::Render *this, uint64_t a2, CA::Render::Context *a3, void *a4)
{
  if (*(_DWORD *)(a2 + 256) == *(_DWORD *)a3 || *(_DWORD *)(a2 + 260) == *(_DWORD *)a3)
    *((_QWORD *)a3 + 1) = a2;
}

void sub_184561008(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

CA::Render::Pattern *CA::Render::Pattern::Pattern(CA::Render::Pattern *this, CA::Render::Decoder *a2)
{
  __int128 v4;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E1598C30;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = (CA::Render::Decoder::decode_int32(a2) << 8) | 0x25;
  ++dword_1ECDC7CBC;
  *(_QWORD *)this = off_1E1598F18;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 1) = 0u;
  CA::Render::Decoder::decode_cgfloat(a2, (double *)this + 2, 6);
  v6 = 0u;
  v7 = 0u;
  CA::Render::Decoder::decode_cgfloat(a2, (double *)&v6, 4);
  v4 = v7;
  *((_OWORD *)this + 4) = v6;
  *((_OWORD *)this + 5) = v4;
  v6 = 0uLL;
  CA::Render::Decoder::decode_cgfloat(a2, (double *)&v6, 2);
  *((_OWORD *)this + 6) = v6;
  v6 = 0uLL;
  CA::Render::Decoder::decode_cgfloat(a2, (double *)&v6, 2);
  *((_OWORD *)this + 7) = v6;
  *((_QWORD *)this + 16) = CA::Render::Decoder::decode_object(a2, 6, (uint64_t)&CA::Render::texture_types);
  return this;
}

CA::Render::GradientLayer *CA::Render::GradientLayer::GradientLayer(CA::Render::GradientLayer *this, CA::Render::Decoder *a2)
{
  int v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  CGColorSpaceRef v11;
  const void *v12;
  double v14[3];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E1598C30;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = (CA::Render::Decoder::decode_int32(a2) << 8) | 0x14;
  ++dword_1ECDC7C78;
  *(_QWORD *)this = off_1E1596F38;
  CA::Render::Gradient::Gradient((CA::Render::GradientLayer *)((char *)this + 16), a2);
  *(_OWORD *)v14 = 0uLL;
  CA::Render::Decoder::decode_cgfloat(a2, v14, 2);
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)v14;
  *(_OWORD *)v14 = 0uLL;
  CA::Render::Decoder::decode_cgfloat(a2, v14, 2);
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)v14;
  *((_DWORD *)this + 26) = CA::Render::Decoder::decode_atom(a2);
  v4 = CA::Render::Decoder::decode_int32(a2);
  *((_OWORD *)this + 7) = 0u;
  v5 = (unsigned int **)((char *)this + 112);
  *((_DWORD *)this + 27) = v4;
  *((_OWORD *)this + 8) = 0u;
  if ((*((_BYTE *)this + 13) & 8) != 0)
  {
    v6 = CA::Render::Decoder::decode_object(a2, 6, (uint64_t)&CA::Render::texture_types);
    v7 = *v5;
    *v5 = v6;
    if (v7)
    {
      v8 = v7 + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
    }
  }
  v11 = CA::Render::Decoder::decode_colorspace(a2);
  v12 = (const void *)*((_QWORD *)this + 16);
  if (v12)
    CFRelease(v12);
  *((_QWORD *)this + 16) = v11;
  return this;
}

uint64_t CA::Render::Path::decode(CA::Render::Path *this, CA::Render::Decoder *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  size_t v12;
  _BYTE *v13;
  int v14;
  unsigned int v15;
  _BYTE v17[4];
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = CA::Render::Decoder::decode_size_t(this);
  v4 = CA::Render::Decoder::decode_int32(this);
  v5 = CA::Render::Decoder::decode_int32(this);
  v6 = CA::Render::Decoder::decode_int32(this);
  v7 = 0;
  if (HIBYTE(v4))
    return v7;
  if (HIBYTE(v5))
    return v7;
  v8 = v6;
  if (BYTE3(v6))
    return v7;
  v9 = v4;
  if (v4 > 0x1000)
  {
    v11 = (unsigned __int8 *)malloc_type_malloc(v4, 0x100004077774924uLL);
    v10 = v11;
  }
  else
  {
    MEMORY[0x1E0C80A78](v6);
    v10 = &v17[-((v4 + 15) & 0x1FFFFFFF0)];
    bzero(v10, v4);
  }
  if (v5 > 0x100)
  {
    v13 = malloc_type_malloc(16 * v5, 0x1000040451B5BE8uLL);
  }
  else
  {
    MEMORY[0x1E0C80A78](v11);
    v13 = &v17[-((v12 + 15) & 0x1FFFFFFFF0)];
    bzero(v13, v12);
  }
  v7 = 0;
  if (!v10 || !v13)
  {
LABEL_18:
    if (v10)
      goto LABEL_19;
    goto LABEL_21;
  }
  v18 = v8;
  v19 = v3;
  CA::Render::Decoder::decode_bytes(this, v10, v4);
  CA::Render::Decoder::decode_cgfloat(this, (double *)v13, 2 * v5);
  v20 = v10;
  v14 = 0;
  if (v4)
  {
    do
    {
      v15 = *v10;
      if (v15 >= 5)
      {
        CA::Render::Decoder::set_fatal_error(this, "%s - unexpected path type %u", "decode", v15);
        v15 = 0u;
        *v10 = 0;
      }
      v14 += CA::Render::path_counts[v15];
      ++v10;
      --v9;
    }
    while (v9);
  }
  if (v14 == v5)
  {
    v10 = v20;
    v7 = CA::Render::Path::new_path(v19, v4, v20, v5, (double *)v13, v18);
    goto LABEL_18;
  }
  CA::Render::Decoder::set_fatal_error(this, "%s - expected %u points, but decoded %u points", "decode", v14, v5);
  v7 = 0;
  v10 = v20;
  if (v20)
  {
LABEL_19:
    if (v4 > 0x1000)
      free(v10);
  }
LABEL_21:
  if (v13 && v5 >= 0x101)
    free(v13);
  return v7;
}

void CA::Render::Decoder::decode_cgfloat(CA::Render::Decoder *this, double *__dst, uint64_t a3)
{
  uint64_t v3;
  double *v4;

  v3 = a3;
  v4 = __dst;
  if ((*((_BYTE *)this + 64) & 1) != 0)
  {
    CA::Render::Decoder::decode_bytes(this, __dst, 8 * a3);
  }
  else if (a3)
  {
    do
    {
      *v4++ = COERCE_FLOAT(CA::Render::Decoder::decode_int32(this));
      --v3;
    }
    while (v3);
  }
}

uint64_t CA::Render::Path::new_path(uint64_t a1, unsigned int a2, unsigned __int8 *a3, unsigned int a4, double *a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  malloc_zone_t *malloc_zone;
  _DWORD *v24;
  char *v25;
  int *v26;

  if (!a1 || !CA::Render::Path::_path_table)
    goto LABEL_28;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Path::_path_lock);
  v12 = x_hash_table_lookup(CA::Render::Path::_path_table, a1, 0);
  if (!v12)
    goto LABEL_27;
  v13 = v12;
  v14 = (unsigned int *)(v12 + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  if (!v15)
  {
    do
      v22 = __ldaxr(v14);
    while (__stlxr(v22 - 1, v14));
LABEL_27:
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Path::_path_lock);
    goto LABEL_28;
  }
  if (*(_DWORD *)(v12 + 20) == a2 && *(_DWORD *)(v12 + 24) == a4 && *(_DWORD *)(v12 + 16) == a6)
  {
    v16 = 0;
    if (a2)
    {
      while (*(unsigned __int8 *)(*(_QWORD *)(v12 + 40) + v16) == a3[v16])
      {
        if (a2 == ++v16)
          goto LABEL_15;
      }
    }
    if (v16 == a2)
    {
LABEL_15:
      v17 = 0;
      if (a4)
      {
        v18 = a5 + 1;
        v19 = (double *)(*(_QWORD *)(v12 + 32) + 8);
        while (*(v19 - 1) == *(v18 - 1) && *v19 == *v18)
        {
          ++v17;
          v18 += 2;
          v19 += 2;
          if (a4 == v17)
            goto LABEL_37;
        }
      }
      if (v17 == a4)
        goto LABEL_37;
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Path::_path_lock);
  do
  {
    v20 = __ldaxr(v14);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v14));
  if (!v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
LABEL_28:
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v24 = malloc_type_zone_malloc(malloc_zone, a2 + 16 * a4 + 113, 0x8BB15036uLL);
  v13 = (uint64_t)v24;
  if (v24)
  {
    v24[2] = 1;
    v24[3] = 36;
    ++dword_1ECDC7CB8;
    *(_QWORD *)v24 = off_1E1598688;
    v24[4] = a6;
    v24[5] = a2;
    v24[6] = a4;
    v25 = (char *)&v24[4 * a4 + 28];
    *(_QWORD *)(v13 + 32) = v13 + 112;
    *(_QWORD *)(v13 + 40) = v25;
    *(_QWORD *)(v13 + 56) = 0;
    *(_QWORD *)(v13 + 64) = 0;
    *(_QWORD *)(v13 + 48) = a1;
    if (a3)
    {
      memcpy(v25, a3, a2);
      *(_BYTE *)(*(_QWORD *)(v13 + 40) + a2) = 5;
    }
    if (a5)
      memcpy(*(void **)(v13 + 32), a5, 16 * a4);
    if (a1)
    {
      os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Path::_path_lock);
      v26 = (int *)CA::Render::Path::_path_table;
      if (!CA::Render::Path::_path_table)
      {
        v26 = (int *)x_hash_table_new_(0, 0, 0, 0, 0, 0);
        CA::Render::Path::_path_table = (uint64_t)v26;
      }
      hash_table_modify(v26, *(_QWORD *)(v13 + 48), v13, 0);
LABEL_37:
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Path::_path_lock);
    }
  }
  return v13;
}

CA::Render::Gradient *CA::Render::Gradient::Gradient(CA::Render::Gradient *this, CA::Render::Decoder *a2)
{
  CA::Render::InterpolatedFunction *v4;
  int v5;

  v4 = CA::Render::InterpolatedFunction::InterpolatedFunction(this, a2);
  *(_QWORD *)v4 = off_1E15994C8;
  v5 = *((_DWORD *)v4 + 6);
  if (v5 != 4)
    CA::Render::Decoder::set_fatal_error(a2, "%s - width = %u", "Gradient", v5);
  return this;
}

CA::Render::InterpolatedFunction *CA::Render::InterpolatedFunction::InterpolatedFunction(CA::Render::InterpolatedFunction *this, CA::Render::Decoder *a2)
{
  void *v4;
  void *v5;
  void *v6;

  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = 18;
  ++dword_1ECDC7C70;
  *(_QWORD *)this = off_1E1598230;
  *((_QWORD *)this + 2) = CA::Render::Decoder::decode_size_t(a2);
  *((_DWORD *)this + 6) = CA::Render::Decoder::decode_int32(a2);
  *((float *)this + 7) = (float)*((unint64_t *)this + 2) + -1.0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 3) |= CA::Render::Decoder::decode_int32(a2) << 8;
  if (*((_QWORD *)this + 2))
  {
    CA::Render::InterpolatedFunction::allocate_storage(this);
    v4 = (void *)*((_QWORD *)this + 4);
    if (v4)
    {
      CA::Render::Decoder::decode_bytes(a2, v4, 4 * *((_QWORD *)this + 2) * *((unsigned int *)this + 6));
      if ((*((_BYTE *)this + 13) & 2) != 0)
      {
        v5 = (void *)*((_QWORD *)this + 5);
        if (v5)
          CA::Render::Decoder::decode_bytes(a2, v5, 4 * *((_QWORD *)this + 2));
        else
          CA::Render::Decoder::set_fatal_error(a2, "%s - _locations = NULL", "InterpolatedFunction");
      }
      if ((*((_BYTE *)this + 13) & 4) != 0)
      {
        v6 = (void *)*((_QWORD *)this + 6);
        if (v6)
          CA::Render::Decoder::decode_bytes(a2, v6, 32 * *((_QWORD *)this + 2) - 32);
        else
          CA::Render::Decoder::set_fatal_error(a2, "%s - _interpolations = NULL");
      }
    }
    else
    {
      CA::Render::Decoder::set_fatal_error(a2, "%s - _values = NULL");
    }
  }
  return this;
}

CA::Render::Subtexture *CA::Render::Subtexture::Subtexture(CA::Render::Subtexture *this, CA::Render::Decoder *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)this = off_1E1598C30;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = (CA::Render::Decoder::decode_int32(a2) << 8) | 0x32;
  ++dword_1ECDC7CF0;
  *(_QWORD *)this = off_1E1596360;
  *((_QWORD *)this + 2) = CA::Render::Decoder::decode_object(a2, 6, (uint64_t)&CA::Render::texture_types);
  v4 = CA::Render::Decoder::decode_int32(a2);
  v5 = CA::Render::Decoder::decode_int32(a2);
  v6 = CA::Render::Decoder::decode_int32(a2);
  v7 = CA::Render::Decoder::decode_int32(a2);
  *((_DWORD *)this + 6) = v4;
  *((_DWORD *)this + 7) = v5;
  *((_DWORD *)this + 8) = v6;
  *((_DWORD *)this + 9) = v7;
  return this;
}

unsigned int *CA::Render::Decoder::decode_object(CA::Render::Decoder *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;

  v6 = CA::Render::Decoder::decode_object(a1, 0);
  v7 = (unsigned int *)v6;
  if (v6)
  {
    v8 = 0;
    v9 = *(unsigned __int8 *)(v6 + 12);
    while (v9 != *(_DWORD *)(a3 + 4 * v8))
    {
      if (a2 == ++v8)
        goto LABEL_7;
    }
    if (v8 != a2)
      return v7;
LABEL_7:
    CA::Render::Decoder::set_fatal_error(a1, "%s - decoded object of unexpected type: %d", "decode_object", v9);
    v10 = v7 + 2;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (v11 == 1)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
    return 0;
  }
  return v7;
}

void sub_184562480(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (v1)
  {
    v3 = v1 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
  }
  _Unwind_Resume(exception_object);
}

const void **X::CFRef<__CFDictionary const*>::operator=(const void **a1, CFTypeRef cf)
{
  CFTypeRef v3;

  v3 = *a1;
  if (v3 != cf)
  {
    if (v3)
      CFRelease(v3);
    *a1 = cf;
    if (cf)
      CFRetain(cf);
  }
  return a1;
}

char *CA::Render::GradientLayer::copy@<X0>(CA::Render::GradientLayer *this@<X0>, _QWORD *a2@<X8>)
{
  malloc_zone_t *malloc_zone;
  char *result;
  unsigned int *v6;
  void *v7;
  void *v8;
  const void *v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  const void *v19;
  unsigned int v20;
  unsigned int v21;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = (char *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x90uLL, 0x743898A5uLL);
  v6 = (unsigned int *)result;
  if (result)
  {
    *((_DWORD *)result + 2) = 1;
    *((_DWORD *)result + 3) = 20;
    ++dword_1ECDC7C78;
    *(_QWORD *)result = off_1E1596F38;
    *((_DWORD *)result + 6) = 1;
    *((_DWORD *)result + 7) = 18;
    ++dword_1ECDC7C70;
    *((_QWORD *)result + 2) = off_1E1598230;
    *((_QWORD *)result + 4) = *((_QWORD *)this + 4);
    *((_DWORD *)result + 10) = *((_DWORD *)this + 10);
    *((_DWORD *)result + 11) = *((_DWORD *)this + 11);
    *((_QWORD *)result + 7) = 0;
    *((_QWORD *)result + 8) = 0;
    *((_QWORD *)result + 6) = 0;
    *((_DWORD *)result + 7) = *((_DWORD *)this + 7) & 0xFFFFFF00 | 0x12;
    CA::Render::InterpolatedFunction::allocate_storage((CA::Render::InterpolatedFunction *)(result + 16));
    v7 = (void *)*((_QWORD *)v6 + 6);
    if (v7)
    {
      memcpy(v7, *((const void **)this + 6), 4 * *((_QWORD *)v6 + 4) * v6[10]);
      v8 = (void *)*((_QWORD *)v6 + 7);
      if (v8)
      {
        v9 = (const void *)*((_QWORD *)this + 7);
        if (v9)
          memcpy(v8, v9, 4 * *((_QWORD *)v6 + 4));
      }
    }
    v10 = (void *)*((_QWORD *)v6 + 8);
    if (v10)
    {
      v11 = (const void *)*((_QWORD *)this + 8);
      if (v11)
      {
        v12 = *((_QWORD *)v6 + 4);
        if (v12)
          memcpy(v10, v11, 32 * v12 - 32);
      }
    }
    *((_QWORD *)v6 + 2) = off_1E15994C8;
    *(_OWORD *)(v6 + 18) = *(_OWORD *)((char *)this + 72);
    *(_OWORD *)(v6 + 22) = *(_OWORD *)((char *)this + 88);
    v6[26] = *((_DWORD *)this + 26);
    v6[27] = *((_DWORD *)this + 27);
    v13 = *((_QWORD *)this + 14);
    if (v13)
    {
      v14 = (unsigned int *)(v13 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      if (!v15)
      {
        v13 = 0;
        do
          v20 = __ldaxr(v14);
        while (__stlxr(v20 - 1, v14));
      }
    }
    *((_QWORD *)v6 + 14) = v13;
    v16 = *((_QWORD *)this + 15);
    if (v16)
    {
      v17 = (unsigned int *)(v16 + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      if (!v18)
      {
        v16 = 0;
        do
          v21 = __ldaxr(v17);
        while (__stlxr(v21 - 1, v17));
      }
    }
    v19 = (const void *)*((_QWORD *)this + 16);
    *((_QWORD *)v6 + 15) = v16;
    *((_QWORD *)v6 + 16) = v19;
    if (v19)
      CFRetain(v19);
    result = (char *)*((_QWORD *)this + 17);
    *((_QWORD *)v6 + 17) = result;
    if (result)
      result = (char *)CFRetain(result);
  }
  *a2 = v6;
  return result;
}

void CA::Render::InterpolatedFunction::allocate_storage(CA::Render::InterpolatedFunction *this)
{
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return;
  if (*((_QWORD *)this + 4))
    goto LABEL_3;
  if (!is_mul_ok(v1, *((unsigned int *)this + 6)))
    return;
  v5 = v1 * *((unsigned int *)this + 6);
  v6 = *((_DWORD *)this + 3);
  if ((v6 & 0x200) == 0)
    v1 = 0;
  v7 = __CFADD__(v5, v1);
  v8 = v5 + v1;
  if (v7 || v8 >> 62)
    return;
  v9 = 4 * v8;
  if (4 * v8 <= 0x20000)
  {
    v10 = (char *)malloc_type_malloc(4 * v8, 0x2DDEEEAEuLL);
    *((_QWORD *)this + 4) = v10;
    if ((v6 & 0x200) != 0 && v10)
      *((_QWORD *)this + 5) = &v10[4 * v5];
LABEL_3:
    if (!*((_QWORD *)this + 6) && (*((_BYTE *)this + 13) & 4) != 0)
    {
      v3 = *((_QWORD *)this + 2) - 1;
      if (!(v3 >> 59))
      {
        v4 = 32 * v3;
        if (32 * v3 <= 0x10000)
        {
          *((_QWORD *)this + 6) = malloc_type_malloc(32 * v3, 0xC5A17290uLL);
          return;
        }
        if (x_log_hook_p())
          goto LABEL_16;
        v11 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
        {
          v12 = *((_QWORD *)this + 2);
          *(_DWORD *)buf = 134218240;
          v16 = v4;
          v17 = 2048;
          v18 = v12;
          v13 = "suspiciously large interpolations: %zu count: %zu";
LABEL_25:
          _os_log_impl(&dword_184457000, v11, OS_LOG_TYPE_ERROR, v13, buf, 0x16u);
          return;
        }
      }
    }
    return;
  }
  if (x_log_hook_p())
  {
LABEL_16:
    x_log_();
    return;
  }
  v11 = x_log_category_render;
  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
  {
    v14 = *((_QWORD *)this + 2);
    *(_DWORD *)buf = 134218240;
    v16 = v9;
    v17 = 2048;
    v18 = v14;
    v13 = "suspiciously large function size: %zu count: %zu";
    goto LABEL_25;
  }
}

x_list_struct *list_sort_1(x_list_struct *a1, unint64_t a2, BOOL (*a3)(const void *, const void *))
{
  x_list_struct *v3;
  unint64_t v5;
  x_list_struct *v6;
  uint64_t v7;
  x_list_struct *v8;
  x_list_struct *v9;
  BOOL (*v10)(const void *, const void *);
  x_list_struct *v11;
  x_list_struct *v12;
  _BOOL4 v13;
  x_list_struct *v14;
  x_list_struct *v15;
  x_list_struct *v16;
  BOOL v17;

  v3 = a1;
  if (a2 >= 2)
  {
    v5 = a2 >> 1;
    v6 = a1;
    v7 = (a2 >> 1) - 1;
    if (a2 >> 1 != 1)
    {
      v6 = a1;
      do
      {
        v6 = (x_list_struct *)*((_QWORD *)v6 + 1);
        --v7;
      }
      while (v7);
    }
    v8 = (x_list_struct *)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = 0;
    v9 = (x_list_struct *)list_sort_1(a1, a2 >> 1, a3);
    v3 = (x_list_struct *)list_sort_1(v8, a2 - v5, v10);
    if (atom_less(*(_QWORD *)v3, *(_QWORD *)v9))
    {
      v11 = (x_list_struct *)*((_QWORD *)v3 + 1);
      v12 = v9;
    }
    else
    {
      v12 = (x_list_struct *)*((_QWORD *)v9 + 1);
      v11 = v3;
      v3 = v9;
    }
    v13 = v12 != 0;
    if (v12 && v11)
    {
      v14 = v3;
      do
      {
        if (atom_less(*(_QWORD *)v11, *(_QWORD *)v12))
        {
          *((_QWORD *)v14 + 1) = v11;
          v15 = (x_list_struct *)*((_QWORD *)v11 + 1);
          v16 = v12;
          v14 = v11;
          v11 = v15;
        }
        else
        {
          *((_QWORD *)v14 + 1) = v12;
          v16 = (x_list_struct *)*((_QWORD *)v12 + 1);
          v15 = v11;
          v14 = v12;
          v12 = v16;
        }
        v13 = v16 != 0;
        if (v16)
          v17 = v15 == 0;
        else
          v17 = 1;
      }
      while (!v17);
    }
    else
    {
      v16 = v12;
      v15 = v11;
      v14 = v3;
    }
    if (!v13)
      v16 = v15;
    *((_QWORD *)v14 + 1) = v16;
  }
  return v3;
}

BOOL atom_less(unsigned int a1, unsigned int a2)
{
  return a1 < a2;
}

void CA::Transaction::pop(CA::Transaction *this, const void *a2)
{
  uint64_t v2;
  unsigned int v4;
  unsigned int v5;
  CA::Transaction::Level *v6;
  malloc_zone_t *malloc_zone;

  v2 = *((_QWORD *)this + 13);
  if (*(_DWORD *)v2)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v2));
    if (v5)
    {
      v6 = (CA::Transaction::Level *)*((_QWORD *)this + 11);
      *((_QWORD *)this + 11) = *(_QWORD *)v6;
      CA::Transaction::Level::~Level(v6, a2);
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(malloc_zone, v6);
      if (*(_DWORD *)v2 != 1
        || (*(_BYTE *)(v2 + 204) & 2) == 0
        || *((CA::Transaction **)this + 13) != (CA::Transaction *)((char *)this + 120))
      {
        return;
      }
    }
    else
    {
      *(_DWORD *)v2 = 1;
    }
    CA::Transaction::commit(this);
  }
}

uint64_t CAImageQueueCopyRenderValue(uint64_t a1)
{
  uint64_t v1;
  unint64_t StatusReg;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  mach_port_name_t v26;
  mach_port_name_t v27;
  mach_port_name_t v28;
  ipc_space_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  int *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  CA::Render::Encoder *v40;
  uint64_t *v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t v47;
  int *v48;
  int *v49;
  CFNumberRef v50;
  uint64_t v51;
  int v52;
  const void *v53;
  uint64_t v54;
  mach_port_name_t v55;
  uint64_t v56;
  uint64_t v57;
  CA::Render::Context *v58;
  CA::Render::Object *v59;
  CA::Render::Context *v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  malloc_zone_t *malloc_zone;
  void *v69;
  uint64_t v70;
  unsigned int v71;
  _DWORD v72[1030];
  _BYTE v73[120];
  uint64_t v74;

  v1 = MEMORY[0x1E0C80A78](a1);
  v74 = *MEMORY[0x1E0C80C00];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 576);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 40);
    if (v4)
    {
      if (*(_QWORD *)(v4 + 208))
      {
        v5 = v1;
        v6 = v4 + 216;
        v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 216) + 16))(v4 + 216);
        if (*(_DWORD *)(v5 + 208) != v7)
        {
          v8 = v7;
          if (*(_QWORD *)(v5 + 200) && *(_DWORD *)(v5 + 212))
          {
            os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
            v9 = x_hash_table_values(*(_QWORD *)(v5 + 200));
            if (v9)
            {
              v10 = v9;
              v11 = v9;
              do
              {
                v12 = (unsigned int *)(*v11 + 8);
                do
                  v13 = __ldaxr(v12);
                while (__stlxr(v13 + 1, v12));
                if (!v13)
                {
                  do
                    v14 = __ldaxr(v12);
                  while (__stlxr(v14 - 1, v12));
                }
                v11 = (_QWORD *)v11[1];
              }
              while (v11);
              os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
              v16 = *(_QWORD *)(StatusReg + 576);
              if (v16)
              {
                v17 = v10;
                do
                {
                  v18 = *v17;
                  if (CA::Render::Encoder::initialize_render_id_slide(void)::once[0] != -1)
                    dispatch_once(CA::Render::Encoder::initialize_render_id_slide(void)::once, &__block_literal_global_11026);
                  if (v18)
                    v19 = CA::Render::_render_id_slide + v18;
                  else
                    v19 = 0;
                  CA::Transaction::add_deleted_id(*(CA::Transaction **)(v16 + 104), v19, *(_DWORD *)(*v17 + 16), *(_DWORD *)(v5 + 208));
                  v17 = (_QWORD *)v17[1];
                }
                while (v17);
              }
              v20 = v10;
              do
              {
                v21 = *v20;
                v22 = (unsigned int *)(*v20 + 8);
                do
                {
                  v23 = __ldaxr(v22);
                  v24 = v23 - 1;
                }
                while (__stlxr(v24, v22));
                if (!v24)
                  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
                v20 = (_QWORD *)v20[1];
              }
              while (v20);
              do
              {
                v25 = (_QWORD *)v10[1];
                free(v10);
                v10 = v25;
              }
              while (v25);
            }
            else
            {
              os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
            }
          }
          *(_DWORD *)(v5 + 208) = v8;
          v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
          v27 = *(_DWORD *)(v5 + 212);
          if (v27 != v26)
          {
            v28 = v26;
            v29 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
            if (v27)
              mach_port_deallocate(*MEMORY[0x1E0C83DA0], v27);
            *(_DWORD *)(v5 + 212) = 0;
            if (v28 - 1 <= 0xFFFFFFFD && !mach_port_mod_refs(*v29, v28, 0, 1))
              *(_DWORD *)(v5 + 212) = v28;
          }
          *(_DWORD *)(v5 + 216) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
          if (*(_QWORD *)(v5 + 200) && *(_DWORD *)(v5 + 212))
          {
            os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
            v30 = x_hash_table_values(*(_QWORD *)(v5 + 200));
            if (v30)
            {
              v31 = v30;
              v32 = v30;
              do
              {
                v33 = (unsigned int *)(*v32 + 8);
                do
                  v34 = __ldaxr(v33);
                while (__stlxr(v34 + 1, v33));
                if (!v34)
                {
                  do
                    v35 = __ldaxr(v33);
                  while (__stlxr(v35 - 1, v33));
                }
                v32 = (uint64_t *)v32[1];
              }
              while (v32);
              os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
              v36 = CA::Context::retain_context_with_id((CA::Context *)*(unsigned int *)(v5 + 208));
              if (v36)
              {
                v37 = (uint64_t)(v36 + 54);
                bzero(v72, 0x1090uLL);
                CAImageQueueCommit::CAImageQueueCommit((uint64_t)v72, v5, v37);
                v38 = v31;
                do
                {
                  v39 = *v38;
                  if (CA::Render::Encoder::initialize_render_id_slide(void)::once[0] != -1)
                    dispatch_once(CA::Render::Encoder::initialize_render_id_slide(void)::once, &__block_literal_global_11026);
                  if (v39)
                    v40 = (CA::Render::Encoder *)(CA::Render::_render_id_slide + v39);
                  else
                    v40 = 0;
                  CA::Render::encode_set_object((CA::Render *)v73, v40, *(_DWORD *)(v39 + 16), *(CA::Render::Object **)(v39 + 24), 0);
                  v73[104] = 1;
                  v38 = (uint64_t *)v38[1];
                }
                while (v38);
                CAImageQueueCommit::~CAImageQueueCommit((CAImageQueueCommit *)v72);
              }
              v41 = v31;
              do
              {
                v42 = *v41;
                v43 = (unsigned int *)(*v41 + 8);
                do
                {
                  v44 = __ldaxr(v43);
                  v45 = v44 - 1;
                }
                while (__stlxr(v45, v43));
                if (!v45)
                  (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
                v41 = (uint64_t *)v41[1];
              }
              while (v41);
              do
              {
                v46 = (uint64_t *)v31[1];
                free(v31);
                v31 = v46;
              }
              while (v46);
            }
            else
            {
              os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
            }
          }
        }
        os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
        v47 = *(_QWORD *)(v5 + 48);
        if (v47)
        {
          if (*(_DWORD *)(v5 + 24) != *(_DWORD *)(*(_QWORD *)(v47 + 24) + 16))
          {
            v48 = CA::Context::retain_context_with_id((CA::Context *)*(unsigned int *)(v5 + 208));
            if (v48)
            {
              v49 = v48;
              v72[0] = *(_DWORD *)(v5 + 24);
              v50 = CFNumberCreate(0, kCFNumberIntType, v72);
              v51 = *((_QWORD *)v49 + 27);
              v49 += 54;
              v52 = (*(uint64_t (**)(int *))(v51 + 16))(v49);
              CA::Transaction::add_command((CA::Transaction *)0xE, v52, *(unsigned int *)(v5 + 28), v50, v53);
              CFRelease(v50);
              (**(void (***)(int *))v49)(v49);
            }
          }
        }
        v54 = *(_QWORD *)(v5 + 56);
        if (v54)
          goto LABEL_74;
        v56 = *(_QWORD *)(v5 + 48);
        if (v56
          && ((v57 = *(unsigned int *)(v5 + 40), (unint64_t)(v57 - 1) >> 16)
           || 160 * (unint64_t)v57 + 456 <= *(_QWORD *)(v56 + 16)))
        {
          malloc_zone = (malloc_zone_t *)get_malloc_zone();
          v69 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x110uLL, 0x743898A5uLL);
          if (v69)
          {
            v70 = CA::Render::ImageQueue::ImageQueue((uint64_t)v69, *(CA::Render::Shmem **)(v5 + 48), *(_DWORD *)(v5 + 40));
            *(_QWORD *)(v5 + 56) = v70;
            X::WeakDetails::Ptr::set((id *)(v70 + 200), (id)v5, 1);
            v54 = *(_QWORD *)(v5 + 56);
            *(_DWORD *)(v54 + 176) = *(_DWORD *)(v5 + 28);
LABEL_74:
            if (*(_DWORD *)(v5 + 212))
            {
              v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
              v54 = *(_QWORD *)(v5 + 56);
            }
            else
            {
              v55 = 0;
            }
            CA::Render::ImageQueue::set_client_port(v54, v55);
            v58 = *(CA::Render::Context **)(v5 + 56);
            *((_DWORD *)v58 + 48) = *(_DWORD *)(v5 + 216);
            CA::Render::Context::remove_image_queue(v58, v59);
            v60 = (CA::Render::Context *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
            if (v60)
            {
              v61 = (unsigned int *)v60;
              CA::Render::Context::add_image_queue(v60, *(CA::Render::Object **)(v5 + 56));
              v62 = v61 + 2;
              do
              {
                v63 = __ldaxr(v62);
                v64 = v63 - 1;
              }
              while (__stlxr(v64, v62));
              if (!v64)
                (*(void (**)(unsigned int *))(*(_QWORD *)v61 + 16))(v61);
            }
            v15 = *(_QWORD *)(v5 + 56);
            if (v15)
            {
              v65 = (unsigned int *)(v15 + 8);
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 + 1, v65));
              if (!v66)
              {
                v15 = 0;
                do
                  v71 = __ldaxr(v65);
                while (__stlxr(v71 - 1, v65));
              }
            }
            goto LABEL_90;
          }
          v15 = 0;
          *(_QWORD *)(v5 + 56) = 0;
        }
        else
        {
          v15 = 0;
        }
LABEL_90:
        os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
        return v15;
      }
    }
  }
  return 0;
}

void CA::Context::did_connect(CA::Context *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::Context::_lock);
  if ((CA::all_contexts(void)::contexts_data_initialized & 1) != 0)
  {
    v3 = qword_1ECDC6558;
    v2 = qword_1ECDC6560;
    if (qword_1ECDC6558 < (unint64_t)qword_1ECDC6560)
    {
      *(_QWORD *)qword_1ECDC6558 = this;
      v4 = v3 + 8;
      goto LABEL_20;
    }
    v5 = (void *)CA::all_contexts(void)::contexts_data;
  }
  else
  {
    v5 = 0;
    v3 = 0;
    v2 = 0;
    CA::all_contexts(void)::contexts_data = 0;
    qword_1ECDC6558 = 0;
    qword_1ECDC6560 = 0;
    CA::all_contexts(void)::contexts_data_initialized = 1;
  }
  v6 = (v3 - (uint64_t)v5) >> 3;
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 61)
    abort();
  v8 = v2 - (_QWORD)v5;
  if (v8 >> 2 > v7)
    v7 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v7;
  if (v9)
  {
    if (v9 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v10 = (char *)operator new(8 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[8 * v6];
  *(_QWORD *)v11 = this;
  v4 = (uint64_t)(v11 + 8);
  if ((void *)v3 != v5)
  {
    do
    {
      v12 = *(_QWORD *)(v3 - 8);
      v3 -= 8;
      *((_QWORD *)v11 - 1) = v12;
      v11 -= 8;
    }
    while ((void *)v3 != v5);
    v5 = (void *)CA::all_contexts(void)::contexts_data;
  }
  CA::all_contexts(void)::contexts_data = (uint64_t)v11;
  qword_1ECDC6558 = v4;
  qword_1ECDC6560 = (uint64_t)&v10[8 * v9];
  if (v5)
    operator delete(v5);
LABEL_20:
  qword_1ECDC6558 = v4;
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Context::_lock);
  v13 = *((_QWORD *)this + 24);
  if (v13)
    dispatch_activate(v13);
}

void sub_184563CE0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Context::_lock);
  _Unwind_Resume(a1);
}

BOOL CA::Context::connect_remote(CA::Context *this)
{
  const __CFDictionary *v2;
  const void *Value;
  mach_port_t v4;
  const __CFDictionary *v6;
  const __CFString *v7;
  const __CFString *v8;
  char *CStringPtr;
  mach_port_t ServerPort;
  _BOOL8 v11;
  NSObject *v12;
  char v13[1024];
  uint8_t buf[8];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFDictionary *)*((_QWORD *)this + 15);
  if (!v2)
    goto LABEL_10;
  Value = CFDictionaryGetValue(v2, CFSTR("port_number"));
  if (Value)
  {
    v4 = CA_CFIntValue(Value);
    return CA::Context::connect_remote(this, v4);
  }
  v6 = (const __CFDictionary *)*((_QWORD *)this + 15);
  if (v6 && (v7 = (const __CFString *)CFDictionaryGetValue(v6, CFSTR("port_name"))) != 0)
  {
    v8 = v7;
    CStringPtr = (char *)CFStringGetCStringPtr(v7, 0x8000100u);
    if (!CStringPtr)
    {
      MEMORY[0x1E0C80A78](0);
      CStringPtr = v13;
      bzero(v13, 0x400uLL);
      if (!CFStringGetCString(v8, v13, 1024, 0x8000100u))
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v12 = x_log_category_api;
          if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_ERROR, "Failed to get Context port name!", buf, 2u);
          }
        }
        return 0;
      }
    }
  }
  else
  {
LABEL_10:
    CStringPtr = 0;
  }
  ServerPort = CARenderServerGetServerPort(CStringPtr);
  v11 = CA::Context::connect_remote(this, ServerPort);
  mach_port_deallocate(*MEMORY[0x1E0C83DA0], ServerPort);
  return v11;
}

BOOL CA::Context::connect_remote(CA::Context *this, mach_port_t a2)
{
  int v4;
  const void *v5;
  const __CFData *Data;
  const __CFDictionary *v7;
  const void *Value;
  unsigned int v9;
  int v10;
  const UInt8 *BytePtr;
  int Length;
  int v13;
  unsigned int v14;
  mach_port_t reply_port;
  mach_msg_return_t v16;
  mach_error_t v17;
  mach_port_name_t v18;
  pid_t v19;
  kern_return_t v20;
  mach_error_t v21;
  uint64_t v22;
  _BOOL8 result;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  int v27;
  unsigned int NeededAlignment;
  uint64_t v29;
  int v30;
  char *v31;
  NSObject *log;
  uint64_t v33;
  _BYTE msg[36];
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  const UInt8 *v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    if (x_log_hook_p())
      goto LABEL_65;
    v22 = x_log_category_api;
    result = os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_WORD *)msg = 0;
    v24 = "Null Context server port!";
    v25 = v22;
    v26 = 2;
    goto LABEL_68;
  }
  if (CARenderServerGetServerPort(0) == a2)
    *((_BYTE *)this + 241) |= 0x80u;
  if (dyld_program_sdk_at_least())
    v4 = 0;
  else
    v4 = 8;
  v5 = (const void *)*((_QWORD *)this + 15);
  if (v5)
  {
    Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E0C9AE18], v5, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    v7 = (const __CFDictionary *)*((_QWORD *)this + 15);
    if (v7)
    {
      Value = CFDictionaryGetValue(v7, CFSTR("client_port_number"));
      if (Value)
      {
        v9 = CA_CFIntValue(Value);
        goto LABEL_15;
      }
    }
  }
  else
  {
    Data = 0;
  }
  v9 = CA::Context::_user_client_port;
LABEL_15:
  v10 = CA::MachPortUtil::task_identity_port(void)::task;
  if (!CA::MachPortUtil::task_identity_port(void)::task)
  {
    task_create_identity_token(*MEMORY[0x1E0C83DA0], (task_id_token_t *)&CA::MachPortUtil::task_identity_port(void)::task);
    v10 = CA::MachPortUtil::task_identity_port(void)::task;
    if (Data)
      goto LABEL_17;
LABEL_19:
    BytePtr = 0;
    Length = 0;
    goto LABEL_20;
  }
  if (!Data)
    goto LABEL_19;
LABEL_17:
  BytePtr = CFDataGetBytePtr(Data);
  Length = CFDataGetLength(Data);
LABEL_20:
  {
    v18 = *MEMORY[0x1E0C83DA0];
    v19 = getpid();
    if (v20)
    {
      v21 = v20;
      if (x_log_hook_p())
      {
        mach_error_string(v21);
        x_log_();
      }
      else
      {
        log = x_log_category_api;
        if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)msg = 67109378;
          *(_DWORD *)&msg[4] = v21;
          *(_WORD *)&msg[8] = 2080;
          *(_QWORD *)&msg[10] = mach_error_string(v21);
          _os_log_impl(&dword_184457000, log, OS_LOG_TYPE_ERROR, "task_name_for_pid failed [0x%x %s]", msg, 0x12u);
        }
      }
    }
  }
  v14 = CA::Context::client_port((mach_port_context_t)this);
  memset(&msg[4], 0, 32);
  v41 = 0x13000000000000;
  *(_DWORD *)&msg[24] = 5;
  *(_DWORD *)&msg[28] = v13;
  v35 = 1245184;
  v36 = v14;
  v37 = 1245184;
  v38 = v9;
  v39 = 1245184;
  v40 = v10;
  v42 = BytePtr;
  v43 = 16777472;
  v44 = Length;
  v45 = *MEMORY[0x1E0C804E8];
  v46 = v4;
  v47 = Length;
  reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = a2;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)msg = -2147478253;
  *(_QWORD *)&msg[16] = 0x9D0A00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    reply_port = *(_DWORD *)&msg[12];
  }
  v16 = mach_msg((mach_msg_header_t *)msg, 3, 0x6Cu, 0x40u, reply_port, 0, 0);
  v17 = v16;
  if ((v16 - 268435458) <= 0xE && ((1 << (v16 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
    goto LABEL_52;
  }
  if (v16)
  {
    mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
    goto LABEL_52;
  }
  if (*(_DWORD *)&msg[20] == 71)
  {
    v17 = -308;
  }
  else if (*(_DWORD *)&msg[20] == 40302)
  {
    if ((*(_DWORD *)msg & 0x80000000) != 0)
    {
      v17 = -300;
      if (*(_DWORD *)&msg[24] != 1 || *(_DWORD *)&msg[4] != 56 || *(_DWORD *)&msg[8])
        goto LABEL_51;
      if (HIWORD(v35) << 16 == 1114112)
      {
        v17 = 0;
        v27 = v37;
        *((_DWORD *)this + 40) = *(_DWORD *)&msg[28];
        *((_DWORD *)this + 1) = v27;
        *((_DWORD *)this + 3) = v38;
        goto LABEL_52;
      }
    }
    else if (*(_DWORD *)&msg[4] == 36)
    {
      v17 = -300;
      if (*(_DWORD *)&msg[32])
      {
        if (*(_DWORD *)&msg[8])
          v17 = -300;
        else
          v17 = *(_DWORD *)&msg[32];
      }
      goto LABEL_51;
    }
    v17 = -300;
  }
  else
  {
    v17 = -301;
  }
LABEL_51:
  mach_msg_destroy((mach_msg_header_t *)msg);
LABEL_52:
  if (Data)
    CFRelease(Data);
  if (v17)
  {
    if (v17 == 268435459)
    {
      *((_BYTE *)this + 241) |= 2u;
    }
    else if (v17 == -81182719)
    {
      x_log_crash("Unentitled call to server!");
      abort();
    }
    if (x_log_hook_p())
    {
      mach_error_string(v17);
LABEL_65:
      x_log_();
      return 0;
    }
    v29 = x_log_category_api;
    result = os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v30 = *((_DWORD *)this + 1);
    v31 = mach_error_string(v17);
    *(_DWORD *)msg = 67109634;
    *(_DWORD *)&msg[4] = v30;
    *(_WORD *)&msg[8] = 1024;
    *(_DWORD *)&msg[10] = v17;
    *(_WORD *)&msg[14] = 2080;
    *(_QWORD *)&msg[16] = v31;
    v24 = "Unable to register with server (client=0x%x) [0x%x %s]";
    v25 = v29;
    v26 = 24;
LABEL_68:
    _os_log_impl(&dword_184457000, v25, OS_LOG_TYPE_ERROR, v24, msg, v26);
    return 0;
  }
  result = 1;
  if ((CA::Context::connect_remote::image_requirements_set & 1) == 0)
  {
    CA::Context::connect_remote::image_requirements_set = 1;
    NeededAlignment = CARenderServerGetNeededAlignment(a2);
    CADeviceSetMinimumAlignment(NeededAlignment);
    *(_DWORD *)msg = 0;
    v33 = 0;
    if (CARenderServerGetMaxRenderableIOSurfaceSize(a2, msg, (_DWORD *)&v33 + 1, &v33))
      CADeviceSetMaxRenderableIOSurfaceSize(*(unsigned int *)msg, HIDWORD(v33), v33);
    return 1;
  }
  return result;
}

uint64_t CA::Context::client_port(mach_port_context_t context)
{
  uint64_t result;
  int *v3;
  uint64_t v4;

  v3 = (int *)(context + 176);
  result = *(unsigned int *)(context + 176);
  if (!(_DWORD)result)
  {
    if ((*(_BYTE *)(context + 241) & 1) != 0)
    {
      return 0;
    }
    else
    {
      v4 = CA::MachPortUtil::ClientIPC::create((mach_port_context_t)v3, "CA::Context");
      CA_CLIENT_MACH_PORT_ALLOCATE_FAILED(v4, *v3);
      return *v3;
    }
  }
  return result;
}

void sub_1845647EC(_Unwind_Exception *a1)
{
  _BYTE *v1;
  id *v2;
  CFTypeRef *v3;
  malloc_zone_t *malloc_zone;

  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Context::_lock);
  if (*v3)
    CFRelease(*v3);
  if (*v2)
  {
    if (v1[88])
      objc_storeWeakOrNil(v2, 0);
    else
      *v2 = 0;
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, v1);
  _Unwind_Resume(a1);
}

void CA::Context::set_objc_context(id *this, void *a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Context::_lock);
  X::WeakDetails::Ptr::set(this + 10, a2, 1);
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Context::_lock);
}

uint64_t CA::Render::ImageQueue::set_client_port(uint64_t this, mach_port_name_t name)
{
  mach_port_name_t v3;
  uint64_t v4;
  ipc_space_t *v5;

  v3 = *(_DWORD *)(this + 188);
  if (v3 != name)
  {
    v4 = this;
    v5 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
    if (v3)
      this = mach_port_deallocate(*MEMORY[0x1E0C83DA0], v3);
    *(_DWORD *)(v4 + 188) = 0;
    if (name - 1 <= 0xFFFFFFFD)
    {
      this = mach_port_mod_refs(*v5, name, 0, 1);
      if (!(_DWORD)this)
        *(_DWORD *)(v4 + 188) = name;
    }
  }
  return this;
}

uint64_t CADeviceSetMinimumAlignment(unint64_t a1)
{
  uint64_t v2;
  int8x16_t v3;

  v2 = 0;
  v3 = (int8x16_t)vdupq_n_s64(a1);
  do
  {
    ++v2;
  }
  while (v2 != 2);
}

void CADeviceSetMaxRenderableIOSurfaceSize(unint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  v9[0] = a1;
  v9[1] = a2;
  v9[2] = a3;
    v6 = a1;
    v7 = a2;
    v8 = a3;
}

uint64_t CARenderServerGetNeededAlignment(mach_port_t a1)
{
  mach_port_t ServerPort;
  mach_port_t reply_port;
  mach_msg_return_t v4;
  mach_port_t msgh_remote_port;
  BOOL v6;
  uint64_t msgh_local_port;
  mach_msg_header_t msg[2];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  ServerPort = a1;
  if (!a1)
  {
    ServerPort = CARenderServerGetServerPort(0);
    if (!ServerPort)
      return 0;
  }
  *(_OWORD *)&msg[1].msgh_remote_port = 0u;
  *(_OWORD *)&msg[0].msgh_id = 0u;
  msg[0].msgh_size = 0;
  reply_port = mig_get_reply_port();
  msg[0].msgh_remote_port = ServerPort;
  msg[0].msgh_local_port = reply_port;
  msg[0].msgh_bits = 5395;
  *(_QWORD *)&msg[0].msgh_voucher_port = 0x9D4100000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(msg);
    reply_port = msg[0].msgh_local_port;
  }
  v4 = mach_msg(msg, 3, 0x18u, 0x30u, reply_port, 0, 0);
  msgh_remote_port = v4;
  if ((v4 - 268435458) <= 0xE && ((1 << (v4 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg[0].msgh_local_port);
    goto LABEL_28;
  }
  if (v4)
  {
    mig_dealloc_reply_port(msg[0].msgh_local_port);
    goto LABEL_27;
  }
  if (msg[0].msgh_id == 71)
  {
    msgh_remote_port = -308;
  }
  else if (msg[0].msgh_id == 40357)
  {
    if ((msg[0].msgh_bits & 0x80000000) == 0)
    {
      if (msg[0].msgh_size == 40)
      {
        if (!msg[0].msgh_remote_port)
        {
          msgh_remote_port = msg[1].msgh_remote_port;
          if (!msg[1].msgh_remote_port)
          {
            msgh_local_port = msg[1].msgh_local_port;
            if (a1)
              return msgh_local_port;
            goto LABEL_29;
          }
          goto LABEL_26;
        }
      }
      else if (msg[0].msgh_size == 36)
      {
        if (msg[0].msgh_remote_port)
          v6 = 1;
        else
          v6 = msg[1].msgh_remote_port == 0;
        if (v6)
          msgh_remote_port = -300;
        else
          msgh_remote_port = msg[1].msgh_remote_port;
        goto LABEL_26;
      }
    }
    msgh_remote_port = -300;
  }
  else
  {
    msgh_remote_port = -301;
  }
LABEL_26:
  mach_msg_destroy(msg);
LABEL_27:
  if (msgh_remote_port == -81182719)
  {
    x_log_crash("Unentitled call to server!");
    abort();
  }
LABEL_28:
  msgh_local_port = 16;
  if (!a1)
LABEL_29:
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], ServerPort);
  return msgh_local_port;
}

uint64_t CARenderServerGetMaxRenderableIOSurfaceSize(mach_port_name_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  mach_port_name_t v8;
  uint64_t result;
  mach_port_t reply_port;
  mach_msg_return_t v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  int rcv_name;
  mach_port_name_t rcv_name_4;
  mach_port_t rcv_name_8;
  _BYTE rcv_name_12[20];
  __int128 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  v8 = a1;
  if (a1 || (result = CARenderServerGetServerPort(0), (v8 = result) != 0))
  {
    v21 = 0;
    v20 = 0u;
    *(_OWORD *)&rcv_name_12[4] = 0u;
    rcv_name = 0;
    reply_port = mig_get_reply_port();
    rcv_name_4 = v8;
    rcv_name_8 = reply_port;
    v15 = 5395;
    *(_QWORD *)rcv_name_12 = 0x9D5600000000;
    if (MEMORY[0x1E0C85B60])
    {
      voucher_mach_msg_set((mach_msg_header_t *)&v15);
      reply_port = rcv_name_8;
    }
    v11 = mach_msg((mach_msg_header_t *)&v15, 3, 0x18u, 0x38u, reply_port, 0, 0);
    v12 = v11;
    if ((v11 - 268435458) <= 0xE && ((1 << (v11 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(rcv_name_8);
      if (a1)
        return 1;
LABEL_29:
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], v8);
      return 1;
    }
    if (v11)
    {
      mig_dealloc_reply_port(rcv_name_8);
      goto LABEL_27;
    }
    if (*(_DWORD *)&rcv_name_12[4] == 71)
    {
      v12 = -308;
    }
    else if (*(_DWORD *)&rcv_name_12[4] == 40378)
    {
      if ((v15 & 0x80000000) == 0)
      {
        if (rcv_name == 48)
        {
          if (!rcv_name_4)
          {
            v12 = *(_DWORD *)&rcv_name_12[16];
            if (!*(_DWORD *)&rcv_name_12[16])
            {
              v14 = DWORD1(v20);
              *a2 = v20;
              *a3 = v14;
              *a4 = DWORD2(v20);
              if (a1)
                return 1;
              goto LABEL_29;
            }
            goto LABEL_26;
          }
        }
        else if (rcv_name == 36)
        {
          if (rcv_name_4)
            v13 = 1;
          else
            v13 = *(_DWORD *)&rcv_name_12[16] == 0;
          if (v13)
            v12 = -300;
          else
            v12 = *(_DWORD *)&rcv_name_12[16];
          goto LABEL_26;
        }
      }
      v12 = -300;
    }
    else
    {
      v12 = -301;
    }
LABEL_26:
    mach_msg_destroy((mach_msg_header_t *)&v15);
LABEL_27:
    if (v12 == -81182719)
    {
      x_log_crash("Unentitled call to server!");
      abort();
    }
    if (a1)
      return 1;
    goto LABEL_29;
  }
  return result;
}

uint64_t CA::Context::Generic::client_port(CA::Context::Generic *this)
{
  return CA::Context::client_port(*((_QWORD *)this + 1));
}

void CA::Render::Context::remove_image_queue(CA::Render::Context *this, CA::Render::Object *a2)
{
  uint64_t v3;
  CA::Render::Context **v4;
  CA::Render::Context **v5;
  int64_t v6;

  if (*((_BYTE *)this + 12) == 25)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Context::_image_queues_lock);
    v3 = *((_QWORD *)this + 28);
    if (v3)
    {
      *((_QWORD *)this + 28) = 0;
      v5 = *(CA::Render::Context ***)(v3 + 360);
      v4 = *(CA::Render::Context ***)(v3 + 368);
      if (v5 != v4)
      {
        while (*v5 != this)
        {
          if (++v5 == v4)
          {
            v5 = *(CA::Render::Context ***)(v3 + 368);
            break;
          }
        }
      }
      if (v5 != v4)
      {
        v6 = (char *)v4 - (char *)(v5 + 1);
        if (v4 != v5 + 1)
          memmove(v5, v5 + 1, (char *)v4 - (char *)(v5 + 1));
        *(_QWORD *)(v3 + 368) = (char *)v5 + v6;
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Context::_image_queues_lock);
  }
}

CA::Render::Object *CA::Render::ImageQueue::decode(CA::Render::Context **this, CA::Render::Decoder *a2)
{
  CA::Render::Shmem *v3;
  unsigned int v4;
  mach_port_name_t v5;
  int v6;
  int v7;
  CA::Render::Object *v8;
  int v9;
  malloc_zone_t *malloc_zone;
  CA::Render::Object *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = (CA::Render::Shmem *)CA::Render::Decoder::decode_object(this, 47);
  v4 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)this);
  v18 = 0;
  v5 = CA::Render::Decoder::decode_port((CA::Render::Decoder *)this, 17, &v18);
  v6 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)this);
  v7 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)this);
  v8 = 0;
  if (v3 && !(((unint64_t)v4 - 1) >> 16))
  {
    if (*((_QWORD *)v3 + 2) < 160 * (unint64_t)v4 + 456)
    {
LABEL_4:
      v8 = 0;
      goto LABEL_11;
    }
    v9 = v7;
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v11 = (CA::Render::Object *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x110uLL, 0x743898A5uLL);
    if (!v11)
    {
      v16 = (unsigned int *)((char *)v3 + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (v17 == 1)
        (*(void (**)(CA::Render::Shmem *))(*(_QWORD *)v3 + 16))(v3);
      goto LABEL_4;
    }
    v8 = v11;
    CA::Render::ImageQueue::ImageQueue((uint64_t)v11, v3, v4);
    v12 = (unsigned int *)((char *)v3 + 8);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(CA::Render::Shmem *))(*(_QWORD *)v3 + 16))(v3);
    CA::Render::ImageQueue::set_client_port((uint64_t)v8, v5);
    *((_DWORD *)v8 + 48) = v6;
    *((_DWORD *)v8 + 44) = v9;
    CA::Render::Context::add_image_queue(this[9], v8);
  }
LABEL_11:
  if (v18)
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], v5);
  return v8;
}

CA::Render::CompressedImage *CA::Render::CompressedImage::decode(CA::Render::CompressedImage *this, CA::Render::Decoder *a2)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  mem_entry_name_port_t v23;
  mach_port_name_t v24;
  kern_return_t v25;
  const void *v26;
  BOOL v27;
  malloc_zone_t *malloc_zone;
  CA::Render::CompressedImage *v29;
  CA::Render::CompressedImage *v30;
  CA::Render::Texture *v31;
  ipc_space_t *v32;
  NSObject *v33;
  CA::Render::Texture *v34;
  _BYTE v36[12];
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  mach_vm_address_t address;
  BOOL v43;
  _OWORD buf[6];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = CA::Render::Decoder::decode_int32(this);
  v4 = CA::Render::Decoder::decode_int32(this);
  v5 = CA::Render::Decoder::decode_int32(this);
  v6 = CA::Render::Decoder::decode_int32(this);
  v7 = v6;
  if (v6 >= 0x41)
  {
    CA::Render::Decoder::set_fatal_error(this, "Incorrect CompressedImage levels: %u", v6);
    return 0;
  }
  v39 = v5;
  v40 = v4;
  v41 = v3;
  v8 = 8 * v6;
  MEMORY[0x1E0C80A78](v6);
  v9 = (v8 + 15) & 0xFFFFFFFF0;
  v10 = (unint64_t *)&v36[-v9];
  bzero(&v36[-v9], 8 * v7);
  MEMORY[0x1E0C80A78](v11);
  v12 = (unint64_t *)&v36[-v9];
  bzero(&v36[-v9], 8 * v7);
  MEMORY[0x1E0C80A78](v13);
  v14 = (unint64_t *)&v36[-v9];
  bzero(&v36[-v9], 8 * v7);
  if (v7)
  {
    v15 = &v36[-v9];
    v16 = &v36[-v9];
    v17 = v14;
    v18 = v7;
    do
    {
      *v15++ = CA::Render::Decoder::decode_size_t(this);
      *v16++ = CA::Render::Decoder::decode_size_t(this);
      *v17++ = CA::Render::Decoder::decode_size_t(this);
      --v18;
    }
    while (v18);
  }
  v19 = CA::Render::Decoder::decode_int32(this);
  v20 = CA::Render::Decoder::decode_int32(this);
  v21 = CA::Render::Decoder::decode_int8(this);
  v22 = CA::Render::Decoder::decode_size_t(this);
  v43 = 0;
  v23 = CA::Render::Decoder::decode_port(this, 17, &v43);
  if (!v23)
  {
    CA::Render::Decoder::set_fatal_error(this, "CompressedImage port is MACH_PORT_NULL!");
    return 0;
  }
  v24 = v23;
  v37 = v19;
  v38 = v20;
  address = 0;
  v25 = mach_vm_map(*MEMORY[0x1E0C83DA0], &address, v22, *MEMORY[0x1E0C85AC0], 856686593, v23, 0, 0, 1, 1, 2u);
  v26 = (const void *)address;
  if (v25)
    v27 = 1;
  else
    v27 = address == 0;
  if (v27)
  {
    if (CADeviceHasInternalBuild::once != -1)
      dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
    if (CADeviceHasInternalBuild::internal)
    {
      x_log_crash("Failed to map %ld bytes with port = %u, protection = %u, err = 0x%x\n", v22, v24, 1, v25);
      abort();
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v33 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf[0]) = 134218752;
        *(_QWORD *)((char *)buf + 4) = v22;
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = v24;
        WORD1(buf[1]) = 1024;
        DWORD1(buf[1]) = 1;
        WORD4(buf[1]) = 1024;
        *(_DWORD *)((char *)&buf[1] + 10) = v25;
        _os_log_impl(&dword_184457000, v33, OS_LOG_TYPE_ERROR, "Failed to map %ld bytes with port = %u, protection = %u, err = 0x%x\n", (uint8_t *)buf, 0x1Eu);
      }
    }
    v50 = 0;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v45 = 0u;
    memset(buf, 0, sizeof(buf));
    v34 = CA::Render::Texture::Texture((CA::Render::Texture *)buf, 0, 0);
    BYTE12(buf[0]) = 9;
    ++dword_1ECDC7C4C;
    *(_QWORD *)&buf[0] = off_1E15975B0;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    *(_QWORD *)&v49 = 0;
    *((_QWORD *)&v49 + 1) = 2;
    CA::Render::Texture::decode(v34, this);
    CA::Render::Decoder::set_fatal_error(this, "%s - data = NULL", "decode");
    CA::Render::CompressedImage::~CompressedImage((CA::Render::CompressedImage *)buf);
    return 0;
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v29 = (CA::Render::CompressedImage *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0xB8uLL, 0x743898A5uLL);
  v30 = v29;
  if (v29)
  {
    v31 = CA::Render::CompressedImage::CompressedImage(v29, v40, v39, v37, v26, v22, v10, v12, v14, v7, (unint64_t)CA::Render::release_deallocate);
    *((_DWORD *)v30 + 42) = v38;
    *((_BYTE *)v30 + 176) = *((_BYTE *)v30 + 176) & 0xFE | (v21 != 0);
    *((_DWORD *)v30 + 3) |= v41 << 8;
    CA::Render::Texture::decode(v31, this);
    v32 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
  }
  else
  {
    CA::Render::Decoder::set_fatal_error(this, "Failed to decode CompressedImage from data ptr: %p, len: %ld", v26, v22);
    v32 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
    mach_vm_deallocate(*MEMORY[0x1E0C83DA0], address, v22);
  }
  if (v43)
    mach_port_deallocate(*v32, v24);
  return v30;
}

_DWORD *CA::Render::Shmem::decode(CA::Render::Shmem *this, CA::Render::Decoder *a2)
{
  int v3;
  mach_vm_size_t v4;
  mem_entry_name_port_t v5;
  mach_port_name_t v6;
  _BOOL4 v7;
  _DWORD *result;
  void *v9;
  void *v10;
  const void *v11;
  void (*v12)(const void *, void *);
  char *v13;
  void (*v14)(const void *, void *);
  void (*v15)(const void *, void *);
  void (*v16)(const void *, void *);
  BOOL v17[8];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = CA::Render::Decoder::decode_int32(this);
  if ((v3 & 3) != 0)
  {
    v4 = CA::Render::Decoder::decode_size_t(this);
    CA::Render::Decoder::decode_size_t(this);
    v17[0] = 0;
    v5 = CA::Render::Decoder::decode_port(this, 17, v17);
    if (v5)
    {
      v6 = v5;
      v7 = v17[0];
      result = CA::Render::Shmem::new_shmem(v5, v4, v17[0], v3);
      if (result)
        return result;
      if (v7)
        mach_port_deallocate(*MEMORY[0x1E0C83DA0], v6);
    }
    else
    {
      CA::Render::Decoder::set_fatal_error(this, "Shmem port is MACH_PORT_NULL!");
    }
  }
  else
  {
    v16 = 0;
    *(_QWORD *)v17 = 0;
    v15 = 0;
    v9 = CA::Render::Decoder::decode_data_async(this, (unint64_t *)v17, (void (__cdecl **)(void *))&v16, (void **)&v15);
    if (v9)
    {
      v11 = v9;
      v12 = v16;
      v13 = *(char **)v17;
      v14 = v15;
      result = CA::Render::Shmem::new_shmem((unint64_t)v9, *(char **)v17, v3, (uint64_t (*)(CA::Render *, _QWORD *, void *))v16, v15, v10);
      if (result)
        return result;
      CA::Render::Decoder::set_fatal_error(this, "Failed to decode shmem from data ptr: %p, len: %zu", v11, (size_t)v13);
      if (v12)
        v12(v11, v14);
    }
    else
    {
      CA::Render::Decoder::set_fatal_error(this, "Failed to decode shmem data");
    }
  }
  return 0;
}

uint64_t CA::Render::Decoder::decode_port(CA::Render::Decoder *this, int a2, BOOL *a3)
{
  uint64_t v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 18) & 1) == 0)
  {
    v3 = *((_QWORD *)this + 6);
    if (v3 && *(_DWORD *)(v3 + 8) == 2)
    {
      v4 = *((_QWORD *)this + 7) - 1;
      *((_QWORD *)this + 6) = *(_QWORD *)v3;
      *((_QWORD *)this + 7) = v4;
      if (*(_DWORD *)(v3 + 20) == a2)
      {
        *a3 = *(_BYTE *)(v3 + 24);
        return *(unsigned int *)(v3 + 16);
      }
      CA::Render::Decoder::set_fatal_error(this, "%s - expected disposition = %u, received = %u", a3);
    }
    else
    {
      CA::Render::Decoder::set_fatal_error(this, "%s - _attach_list = %p, type = %u", a3);
    }
  }
  return 0;
}

_DWORD *CA::Render::Shmem::new_shmem(mem_entry_name_port_t object, mach_vm_size_t size, int a3, int a4)
{
  int v8;
  vm_prot_t cur_protection;
  BOOLean_t v10;
  kern_return_t v11;
  BOOL v12;
  kern_return_t v13;
  malloc_zone_t *malloc_zone;
  _DWORD *result;
  mach_vm_address_t v16;
  NSObject *v17;
  mach_vm_address_t address;
  uint8_t buf[4];
  mach_vm_size_t v20;
  __int16 v21;
  mem_entry_name_port_t v22;
  __int16 v23;
  vm_prot_t v24;
  __int16 v25;
  kern_return_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if ((a4 & 1) != 0)
    v8 = 3;
  else
    v8 = 1;
  if ((a4 & 2) != 0)
    cur_protection = 1;
  else
    cur_protection = v8;
  v10 = (a4 & 2) == 0 && !(a4 & 1);
  address = 0;
  v11 = mach_vm_map(*MEMORY[0x1E0C83DA0], &address, size, *MEMORY[0x1E0C85AC0], 856686593, object, 0, v10, cur_protection, cur_protection, 2u);
  if (v11)
    v12 = 1;
  else
    v12 = address == 0;
  if (v12)
  {
    v13 = v11;
    if (CADeviceHasInternalBuild::once != -1)
      dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
    if (CADeviceHasInternalBuild::internal)
    {
      x_log_crash("Failed to map %ld bytes with port = %u, protection = %u, err = 0x%x\n", size, object, cur_protection, v13);
      abort();
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v17 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218752;
        v20 = size;
        v21 = 1024;
        v22 = object;
        v23 = 1024;
        v24 = cur_protection;
        v25 = 1024;
        v26 = v13;
        _os_log_impl(&dword_184457000, v17, OS_LOG_TYPE_ERROR, "Failed to map %ld bytes with port = %u, protection = %u, err = 0x%x\n", buf, 0x1Eu);
      }
    }
    return 0;
  }
  else
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    result = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x38uLL, 0x743898A5uLL);
    if (result)
    {
      v16 = address;
      result[2] = 1;
      result[3] = (a4 << 8) & 0x4B00 | 0x102F;
      ++dword_1ECDC7CE4;
      *(_QWORD *)result = off_1E1598AD0;
      *((_QWORD *)result + 2) = size;
      *((_QWORD *)result + 3) = v16;
      result[8] = 0;
      *((_QWORD *)result + 5) = CA::Render::release_deallocate;
      *((_QWORD *)result + 6) = result;
      result[9] = 0;
    }
    if (a3)
      result[8] = object;
  }
  return result;
}

_DWORD *CA::Render::Shmem::new_shmem(unint64_t this, char *a2, int a3, uint64_t (*a4)(CA::Render *this, _QWORD *a2, void *a3), void (*a5)(const void *, void *), void *a6)
{
  _DWORD *result;
  unsigned int v11;
  malloc_zone_t *malloc_zone;
  char *v13;
  vm_map_read_t *v14;
  kern_return_t v15;
  int v16;
  NSObject *v18;
  const char *v19;
  mach_port_t object_name;
  mach_msg_type_number_t infoCnt;
  mach_vm_size_t size;
  mach_vm_address_t address;
  int info[4];
  __int128 v25;
  int v26;
  uint8_t buf[4];
  unint64_t v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  result = 0;
  v31 = *MEMORY[0x1E0C80C00];
  if (this && a2)
  {
    v11 = a3 & 0xFFFFFFCB;
    if ((a3 & 3) != 0)
    {
LABEL_4:
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      result = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x38uLL, 0x743898A5uLL);
      if (result)
      {
        result[2] = 1;
        result[3] = (v11 << 8) | 0x2F;
        ++dword_1ECDC7CE4;
        *(_QWORD *)result = off_1E1598AD0;
        *((_QWORD *)result + 2) = a2;
        *((_QWORD *)result + 3) = this;
        result[8] = 0;
        *((_QWORD *)result + 5) = a4;
        *((_QWORD *)result + 6) = a5;
        result[9] = 0;
        if (a4 == CA::Render::release_deallocate && !a5)
          *((_QWORD *)result + 6) = result;
      }
    }
    else
    {
      v26 = 0;
      *(_OWORD *)info = 0u;
      v25 = 0u;
      size = 0;
      v13 = &a2[this];
      if (__CFADD__(this, a2))
      {
        if (x_log_hook_p())
        {
LABEL_23:
          x_log_();
        }
        else
        {
          v18 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            v28 = this;
            v29 = 2048;
            v30 = a2;
            v19 = "Data %p with size %zu underflow";
LABEL_28:
            _os_log_impl(&dword_184457000, v18, OS_LOG_TYPE_ERROR, v19, buf, 0x16u);
          }
        }
      }
      else
      {
        address = ~*MEMORY[0x1E0C85AC0] & this;
        object_name = 0;
        infoCnt = 9;
        v14 = (vm_map_read_t *)MEMORY[0x1E0C83DA0];
        while (1)
        {
          v15 = mach_vm_region(*v14, &address, &size, 9, info, &infoCnt, &object_name);
          if (object_name)
          {
            mach_port_deallocate(*v14, object_name);
            object_name = 0;
          }
          if (v15)
            break;
          v16 = info[1] & 3;
          address += size;
          if ((unint64_t)v13 <= address || v16 != 1)
          {
            if (v16 == 1)
              v11 |= 2u;
            goto LABEL_4;
          }
        }
        if (x_log_hook_p())
          goto LABEL_23;
        v18 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          v28 = this;
          v29 = 2048;
          v30 = a2;
          v19 = "CoreAnimation: failed to query region %p (%zu bytes)\n";
          goto LABEL_28;
        }
      }
      return 0;
    }
  }
  return result;
}

CA::Render::Texture *CA::Render::CompressedImage::new_image_with_texture_data(uint64_t a1)
{
  CGColorSpace *ColorSpace;
  double v3;
  double v4;
  double v5;
  double v6;
  unint64_t NumberOfMipmaps;
  uint64_t PixelFormat;
  unsigned int v9;
  CA::Render::Texture *v10;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *OffsetWithBlock;
  NSObject *v22;
  const char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  char v29;
  malloc_zone_t *malloc_zone;
  CA::Render::CompressedImage *v31;
  void *v32;
  uint64_t v33;
  id v34;
  void *v35;
  void *v36;
  CA::Render *v37;
  void *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  CA::Render::CompressedImage *v46;
  void *v47;
  NSObject *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  CGColorSpace *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _BYTE v64[24];
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v71;
  _QWORD *v72;
  __int128 *p_buf;
  uint64_t *v74;
  uint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t *v80;
  _QWORD *v81;
  _QWORD v82[3];
  char v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE v92[12];
  __int16 v93;
  unint64_t v94;
  __int128 buf;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  ColorSpace = (CGColorSpace *)CGImageTextureDataGetColorSpace();
  CGImageTextureDataGetSize();
  v4 = v3;
  v6 = v5;
  NumberOfMipmaps = CGImageTextureDataGetNumberOfMipmaps();
  PixelFormat = CGImageTextureDataGetPixelFormat();
  v9 = 0;
  if ((PixelFormat - 186) <= 0x20)
    v9 = dword_18475D6F8[(PixelFormat - 186)];
  if (CADeviceIsVirtualized::once[0] != -1)
    dispatch_once(CADeviceIsVirtualized::once, &__block_literal_global_204);
  if (CADeviceIsVirtualized::is_virtualized)
    return 0;
  if (CADeviceSupportsASTC::once[0] != -1)
    dispatch_once(CADeviceSupportsASTC::once, &__block_literal_global_118);
  v13 = v9 > 4 && CADeviceSupportsASTC::supports_astc != 0;
  v14 = v9 - 1;
  if (v9 - 1 >= 4 && !v13)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v22 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEBUG))
      {
        if (v14 > 0x1B)
          v23 = "UNKNOWN";
        else
          v23 = off_1E15A81A8[v14];
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v23;
        _os_log_impl(&dword_184457000, v22, OS_LOG_TYPE_DEBUG, "%s compressed texture not supported on this device, falling back to software\n", (uint8_t *)&buf, 0xCu);
      }
    }
    return 0;
  }
  v15 = CGImageTextureDataSupportsTiledLayout();
  if ((_DWORD)v15)
    v16 = 2;
  else
    v16 = 0;
  LODWORD(v61) = v16;
  if (NumberOfMipmaps >> 61)
    return 0;
  v55 = PixelFormat;
  v58 = (unint64_t)v4;
  v59 = (unint64_t)v6;
  v17 = 8 * NumberOfMipmaps;
  v57 = v15;
  LODWORD(v54) = v9;
  if (8 * NumberOfMipmaps > 0x1000)
  {
    v63 = malloc_type_malloc(8 * NumberOfMipmaps, 0xE5CAE7DCuLL);
    v60 = (unint64_t *)malloc_type_malloc(8 * NumberOfMipmaps, 0xC2F1836AuLL);
    OffsetWithBlock = malloc_type_malloc(8 * NumberOfMipmaps, 0xB8A38E5BuLL);
    v62 = OffsetWithBlock;
  }
  else
  {
    MEMORY[0x1E0C80A78](v15);
    v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
    v63 = (uint64_t *)((char *)&v52 - v18);
    bzero((char *)&v52 - v18, 8 * NumberOfMipmaps);
    MEMORY[0x1E0C80A78](v19);
    v60 = (unint64_t *)((char *)&v52 - v18);
    bzero((char *)&v52 - v18, 8 * NumberOfMipmaps);
    MEMORY[0x1E0C80A78](v20);
    v62 = (uint64_t *)((char *)&v52 - v18);
    bzero((char *)&v52 - v18, 8 * NumberOfMipmaps);
  }
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v96 = 0x2020000000;
  v97 = 0;
  v88 = 0;
  v89 = &v88;
  v90 = 0x2020000000;
  v91 = 0;
  v84 = 0;
  v85 = &v84;
  v86 = 0x2020000000;
  v87 = 0;
  v82[0] = 0;
  v82[1] = v82;
  v82[2] = 0x2020000000;
  v83 = 0;
  if (NumberOfMipmaps)
  {
    v24 = NumberOfMipmaps;
    v56 = 8 * NumberOfMipmaps;
    v53 = ColorSpace;
    v25 = 0;
    v26 = MEMORY[0x1E0C809B0];
    do
    {
      v68 = v26;
      v69 = 3221225472;
      v70 = ___ZN2CA6Render15CompressedImage27new_image_with_texture_dataEP18CGImageTextureData_block_invoke;
      v71 = &unk_1E15A8188;
      v76 = v58;
      v77 = v59;
      v72 = v82;
      p_buf = &buf;
      v78 = v25;
      v79 = v63;
      v80 = v60;
      v81 = v62;
      v74 = &v88;
      v75 = &v84;
      OffsetWithBlock = (_QWORD *)CGImageTextureDataGetOffsetWithBlock();
      ++v25;
    }
    while (v24 != v25);
    v27 = v85[3];
    ColorSpace = v53;
    v17 = v56;
    NumberOfMipmaps = v24;
  }
  else
  {
    v27 = 0;
  }
  LOBYTE(v28) = v57;
  if (v27 != NumberOfMipmaps)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v48 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEBUG))
      {
        v49 = v85[3];
        *(_DWORD *)v92 = 134218240;
        *(_QWORD *)&v92[4] = v49;
        v93 = 2048;
        v94 = NumberOfMipmaps;
        _os_log_impl(&dword_184457000, v48, OS_LOG_TYPE_DEBUG, "Compressed image acquired %zu levels, but expected %zu!\n", v92, 0x16u);
      }
    }
    v10 = 0;
    goto LABEL_66;
  }
  if (v54 < 5)
    v29 = 1;
  else
    v29 = v57;
  if ((v29 & 1) == 0)
  {
    *(_QWORD *)v92 = 0;
    v32 = (void *)MEMORY[0x186DBE2E4](OffsetWithBlock);
    v61 = NumberOfMipmaps;
    v33 = *((unsigned int *)v85 + 6);
    v34 = MTLCreateSystemDefaultDevice();
    v35 = (void *)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", v55, v58, v59, (v33 & 0xFFFFFFFE) != 0);
    objc_msgSend(v35, "setMipmapLevelCount:", v33);
    v36 = (void *)objc_msgSend(v34, "newTextureLayoutWithDescriptor:isHeapOrBufferBacked:", v35, 0);

    v37 = (CA::Render *)objc_msgSend(v36, "size");
    v38 = CA::Render::aligned_malloc(v37, (unint64_t *)v92, (void **)objc_msgSend(v36, "alignment"));
    v28 = v38 != 0;
    if (v38)
    {
      v39 = v38;
      objc_msgSend(v36, "initializeTextureMemory:", v38);
      v53 = v37;
      v54 = v32;
      v57 = v28;
      v56 = v17;
      if (v85[3])
      {
        v40 = 0;
        v42 = v58;
        v41 = v59;
        do
        {
          v43 = *(_QWORD *)(*((_QWORD *)&buf + 1) + 24);
          v44 = v63[v40];
          v45 = v62[v40];
          memset(v64, 0, sizeof(v64));
          v65 = v42;
          v66 = v41;
          v67 = 1;
          objc_msgSend(v36, "copyFromLinearBytes:linearOffset:linearBytesPerRow:linearBytesPerImage:toTextureMemory:textureSlice:textureLevel:textureRegion:", v43, v44, v45, 0, v39, 0, v40, v64);
          objc_msgSend(v36, "finalizeTextureMemory:", v39);
          if (v42 <= 1)
            v42 = 1;
          else
            v42 >>= 1;
          if (v41 <= 1)
            v41 = 1;
          else
            v41 >>= 1;
          ++v40;
        }
        while (v40 < v85[3]);
      }
      v46 = (CA::Render::CompressedImage *)x_mem_alloc0(0xB8uLL);
      v10 = v46;
      if (v46)
      {
        *(_QWORD *)&v51 = CA::Render::aligned_free;
        *((_QWORD *)&v51 + 1) = *(_QWORD *)v92;
        CA::Render::CompressedImage::CompressedImage(v46, v58, v59, v55, v39, (uint64_t)v53, v63, v60, v62, v61, v51);
      }
      else
      {
        CA::Render::aligned_free((CA::Render *)v39, *(size_t *)v92, v47);
      }
      v17 = v56;
      LOBYTE(v28) = v57;
      v32 = v54;
    }
    else
    {
      v10 = 0;
    }

    objc_autoreleasePoolPop(v32);
    if (!v10)
      goto LABEL_66;
    goto LABEL_65;
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v31 = (CA::Render::CompressedImage *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0xB8uLL, 0x743898A5uLL);
  v10 = v31;
  if (v31)
  {
    *(_QWORD *)&v50 = CA::Render::release_cgtexturedata;
    *((_QWORD *)&v50 + 1) = a1;
    CA::Render::CompressedImage::CompressedImage(v31, v58, v59, v55, *(const void **)(*((_QWORD *)&buf + 1) + 24), v89[3], v63, v60, v62, NumberOfMipmaps, v50);
    CGImageTextureDataRetain();
    *((_BYTE *)v10 + 176) &= ~2u;
LABEL_65:
    CA::Render::Texture::set_colorspace(v10, ColorSpace);
    *((_BYTE *)v10 + 176) = *((_BYTE *)v10 + 176) & 0xFE | !v28;
  }
LABEL_66:
  if (v17 > 0x1000)
  {
    free(v63);
    free(v60);
    free(v62);
  }
  _Block_object_dispose(v82, 8);
  _Block_object_dispose(&v84, 8);
  _Block_object_dispose(&v88, 8);
  _Block_object_dispose(&buf, 8);
  return v10;
}

void sub_18456649C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v1 + 256), 8);
  _Block_object_dispose((const void *)(v2 - 256), 8);
  _Block_object_dispose((const void *)(v2 - 224), 8);
  _Block_object_dispose((const void *)(v2 - 160), 8);
  _Unwind_Resume(a1);
}

CA::Render::CompressedImage *CA::Render::CompressedImage::CompressedImage(CA::Render::CompressedImage *this, int a2, int a3, int a4, const void *a5, uint64_t a6, unint64_t *a7, unint64_t *a8, unint64_t *a9, int a10, __int128 a11)
{
  CA::Render::Texture *v17;
  int v18;
  unint64_t *v19;
  int v20;
  int v21;
  uint64_t v22;
  size_t v23;
  malloc_zone_t *malloc_zone;
  void *v25;
  malloc_zone_t *v26;
  void *v27;
  malloc_zone_t *v28;
  void *v29;

  v17 = CA::Render::Texture::Texture(this, a2, a3);
  v18 = *((_DWORD *)v17 + 3);
  *((_BYTE *)v17 + 12) = 9;
  ++dword_1ECDC7C4C;
  *(_QWORD *)v17 = off_1E15975B0;
  *((_QWORD *)v17 + 12) = a5;
  *((_QWORD *)v17 + 13) = a6;
  *((_OWORD *)v17 + 7) = a11;
  *((_QWORD *)v17 + 17) = 0;
  *((_QWORD *)v17 + 18) = 0;
  *((_QWORD *)v17 + 16) = 0;
  *((_DWORD *)v17 + 38) = a10;
  *((_DWORD *)v17 + 40) = a4;
  *(_QWORD *)((char *)v17 + 164) = 0x200000000;
  *((_DWORD *)v17 + 43) = 0;
  *((_BYTE *)v17 + 176) |= 3u;
  if (a3 <= 4096 && a2 <= 4096 && a10 == 1)
  {
    if (*a9 <= 0x8000)
      *((_DWORD *)this + 3) = v18 & 0xFFFBFF00 | 0x40009;
    v19 = a8;
    if ((a4 - 186) > 0x20)
      v20 = 0;
    else
      v20 = dword_18475D6F8[a4 - 186];
    *((_DWORD *)this + 39) = v20;
    v22 = 1;
    goto LABEL_14;
  }
  if ((a4 - 186) > 0x20)
    v21 = 0;
  else
    v21 = dword_18475D6F8[a4 - 186];
  v19 = a8;
  *((_DWORD *)this + 39) = v21;
  v22 = a10;
  if ((a10 & 0x80000000) == 0)
  {
LABEL_14:
    v23 = 8 * v22;
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v25 = malloc_type_zone_malloc(malloc_zone, v23, 0x8BB15036uLL);
    *((_QWORD *)this + 16) = v25;
    memcpy(v25, a7, v23);
    v26 = (malloc_zone_t *)get_malloc_zone();
    v27 = malloc_type_zone_malloc(v26, v23, 0x8BB15036uLL);
    *((_QWORD *)this + 17) = v27;
    memcpy(v27, v19, v23);
    v28 = (malloc_zone_t *)get_malloc_zone();
    v29 = malloc_type_zone_malloc(v28, v23, 0x8BB15036uLL);
    goto LABEL_16;
  }
  v23 = 8 * a10;
  memcpy(0, a8, v23);
  v29 = 0;
LABEL_16:
  *((_QWORD *)this + 18) = v29;
  memcpy(v29, a9, v23);
  *((_DWORD *)this + 41) = 1;
  if (a11 == (unint64_t)CA::Render::release_deallocate)
    *((_QWORD *)this + 15) = this;
  return this;
}

uint64_t CA::Render::ImageQueue::ImageQueue(uint64_t this, CA::Render::Shmem *a2, int a3)
{
  unsigned int *v3;
  unsigned int v4;
  CA::Render::Shmem *v5;
  unsigned int v6;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;

  *(_DWORD *)(this + 8) = 1;
  *(_DWORD *)(this + 12) = 25;
  ++dword_1ECDC7C8C;
  *(_QWORD *)this = off_1E15961E0;
  if (a2)
  {
    v3 = (unsigned int *)((char *)a2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v5 = a2;
    if (!v4)
    {
      v5 = 0;
      do
        v6 = __ldaxr(v3);
      while (__stlxr(v6 - 1, v3));
    }
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)(this + 16) = v5;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0x7FF0000000000000;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_OWORD *)(this + 80) = 0u;
  *(_OWORD *)(this + 96) = 0u;
  *(_QWORD *)(this + 112) = 0;
  *(_QWORD *)(this + 120) = 0x7FF0000000000000;
  *(_DWORD *)(this + 128) = 0;
  *(_BYTE *)(this + 132) = 0;
  *(_DWORD *)(this + 136) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(this + 140) = _D0;
  *(_QWORD *)(this + 152) = 0;
  *(_QWORD *)(this + 160) = 0;
  *(_BYTE *)(this + 168) = 0;
  *(_DWORD *)(this + 172) = a3;
  *(_QWORD *)(this + 200) = 0;
  *(_BYTE *)(this + 208) = 0;
  *(_QWORD *)(this + 180) = 0;
  *(_QWORD *)(this + 188) = 0;
  *(_QWORD *)(this + 216) = 0;
  *(_QWORD *)(this + 224) = 0;
  v12 = *((_QWORD *)a2 + 3);
  do
  {
    v13 = __ldaxr(CA::Render::ImageQueue::ImageQueue(CA::Render::Shmem *,unsigned long)::_next_image_queue_id);
    v14 = v13 + 1;
  }
  while (__stlxr(v14, CA::Render::ImageQueue::ImageQueue(CA::Render::Shmem *,unsigned long)::_next_image_queue_id));
  *(_DWORD *)(v12 + 88) = v14;
  return this;
}

void CA::Render::Context::add_image_queue(CA::Render::Context *this, CA::Render::Object *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  if (*((_BYTE *)a2 + 12) == 25)
  {
    CA::Render::ImageQueue::set_visible(a2, *((_DWORD *)this + 88) != 0);
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Context::_image_queues_lock);
    *((_QWORD *)a2 + 28) = this;
    v5 = (_QWORD *)*((_QWORD *)this + 46);
    v4 = *((_QWORD *)this + 47);
    if ((unint64_t)v5 >= v4)
    {
      v7 = (_QWORD *)*((_QWORD *)this + 45);
      v8 = v5 - v7;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61)
        abort();
      v10 = v4 - (_QWORD)v7;
      if (v10 >> 2 > v9)
        v9 = v10 >> 2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[8 * v8];
      *(_QWORD *)v13 = a2;
      v6 = v13 + 8;
      if (v5 != v7)
      {
        do
        {
          v14 = *--v5;
          *((_QWORD *)v13 - 1) = v14;
          v13 -= 8;
        }
        while (v5 != v7);
        v5 = (_QWORD *)*((_QWORD *)this + 45);
      }
      *((_QWORD *)this + 45) = v13;
      *((_QWORD *)this + 46) = v6;
      *((_QWORD *)this + 47) = &v12[8 * v11];
      if (v5)
        operator delete(v5);
    }
    else
    {
      *v5 = a2;
      v6 = v5 + 1;
    }
    *((_QWORD *)this + 46) = v6;
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Context::_image_queues_lock);
  }
}

void CA::Render::ImageQueue::set_visible(CA::Render::ImageQueue *this, int a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if (*(_DWORD *)(v3 + 32) != a2)
  {
    *(_DWORD *)(v3 + 32) = a2;
    if ((a2 & 1) == 0)
      CAShmemImageQueueCollectable(v3, *((unsigned int *)this + 47), 0, 0);
  }
}

void CA::Context::invalidate(CA::Context *this)
{
  pthread_mutex_t *v2;
  CA::Transaction *v3;
  unint64_t StatusReg;
  CA::Transaction *v5;
  int v6;
  uint64_t v7;
  const void *v8;
  CA::Transaction *v9;

  v2 = (pthread_mutex_t *)((char *)this + 16);
  v3 = (CA::Transaction *)pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(CA::Transaction **)(StatusReg + 576);
  if (!v5)
  {
    v3 = (CA::Transaction *)CA::Transaction::create(v3);
    v5 = v3;
  }
  v6 = **((_DWORD **)v5 + 13);
  if (!v6)
  {
    CA::Transaction::begin_transaction(v3);
    *((_BYTE *)v5 + 116) = *((_BYTE *)v5 + 116) & 0xFB | (4 * (pthread_main_np() == 0));
  }
  v7 = *((_QWORD *)this + 12);
  if (v7)
  {
    CA::Layer::set_visible(*(CA::Layer **)(v7 + 16), 0);
    CFRelease(*((CFTypeRef *)this + 12));
    *((_QWORD *)this + 12) = 0;
  }
  *((_BYTE *)this + 241) |= 8u;
  pthread_mutex_unlock(v2);
  if (!v6)
  {
    v9 = *(CA::Transaction **)(StatusReg + 576);
    if (v9)
    {
      if (**((_DWORD **)v9 + 13))
        CA::Transaction::pop(v9, v8);
    }
  }
}

void sub_184566A30(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

CA::Transaction *CA::Transaction::begin_transaction(CA::Transaction *this)
{
  CA::Transaction *result;

  result = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
  if (result)
    return (CA::Transaction *)CA::Transaction::push(result, 0, 0);
  result = (CA::Transaction *)CA::Transaction::create(0);
  if (result)
    return (CA::Transaction *)CA::Transaction::push(result, 0, 0);
  return result;
}

_OWORD *CA::Transaction::create(CA::Transaction *this)
{
  _OWORD *v1;
  _OWORD *v2;
  char v3;
  char v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  if (CA::Render::memory_once[0] != -1)
    dispatch_once_f(CA::Render::memory_once, 0, (dispatch_function_t)CA::Render::init_memory_warnings_);
  v1 = malloc_type_malloc(0x2000uLL, 0xEC1F78CDuLL);
  v2 = v1;
  if (v1)
  {
    v1[21] = 0u;
    v1[22] = 0u;
    v1[19] = 0u;
    v1[20] = 0u;
    v1[17] = 0u;
    v1[18] = 0u;
    v1[15] = 0u;
    v1[16] = 0u;
    v1[13] = 0u;
    v1[14] = 0u;
    v1[11] = 0u;
    v1[12] = 0u;
    v1[9] = 0u;
    v1[10] = 0u;
    v1[7] = 0u;
    v1[8] = 0u;
    v1[5] = 0u;
    v1[6] = 0u;
    v1[3] = 0u;
    v1[4] = 0u;
    v1[1] = 0u;
    v1[2] = 0u;
    *v1 = 0u;
    if (CA::Transaction::create(void)::once[0] != -1)
      dispatch_once_f(CA::Transaction::create(void)::once, 0, (dispatch_function_t)CA::Transaction::init);
    *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576) = v2;
    *((_BYTE *)v2 + 116) = *((_BYTE *)v2 + 116) & 0xFE | (pthread_main_np() != 0);
    *((_QWORD *)v2 + 13) = (char *)v2 + 120;
    if (dyld_program_sdk_at_least())
      v3 = 0;
    else
      v3 = 16;
    *((_BYTE *)v2 + 116) = *((_BYTE *)v2 + 116) & 0xEF | v3;
    if (dyld_program_sdk_at_least())
      v4 = 0;
    else
      v4 = 32;
    *((_BYTE *)v2 + 116) = *((_BYTE *)v2 + 116) & 0xDF | v4;
    *(_DWORD *)(*((_QWORD *)v2 + 13) + 4) = -1;
    do
    {
      v5 = __ldaxr(&CA::Transaction::next_transaction_seed);
      v6 = v5 + 1;
    }
    while (__stlxr(v6, &CA::Transaction::next_transaction_seed));
    v7 = *((_QWORD *)v2 + 13);
    *(_DWORD *)(v7 + 200) = v6;
    *((_DWORD *)v2 + 24) = -1;
    *(_DWORD *)(v7 + 56) = -1;
  }
  return v2;
}

_QWORD *x_hash_table_values(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  malloc_zone_t *malloc_zone;

  result = 0;
  v3 = 0;
  v4 = 1 << *(_DWORD *)a1;
  do
  {
    v5 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8 * v3);
    if (v5)
    {
      v6 = result;
      do
      {
        v7 = v5[3];
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        result = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
        *result = v7;
        result[1] = v6;
        v5 = (_QWORD *)*v5;
        v6 = result;
      }
      while (v5);
    }
    ++v3;
  }
  while (v3 != v4);
  return result;
}

void sub_184567000(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::Layer::style_value(CA::Layer *this, unsigned int a2, objc_object **a3)
{
  uint64_t v5;
  objc_class *v6;
  const __CFString *String;
  uint64_t result;
  uint64_t v9;
  objc_object *v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 57) & 1) == 0)
    return 0;
  v11 = 0;
  v5 = *((_QWORD *)this + 9);
  if (!v5 || (CA::AttrList::get(v5, 534, (const CGAffineTransform *)1, (CA::Mat4Impl *)&v11) & 1) == 0)
  {
    v6 = (objc_class *)objc_opt_class();
    CAObject_defaultValueForAtom(v6, 534, (const CGAffineTransform *)1, (uint64_t)&v11);
  }
  if (!v11)
    return 0;
  String = CAAtomGetString(a2);
  result = (uint64_t)v11;
  if (v11)
  {
    while (1)
    {
      v9 = objc_msgSend((id)result, "objectForKey:", String, v11, v12);
      if (v9)
        break;
      result = objc_msgSend(v11, "objectForKey:", CFSTR("style"));
      v11 = (id)result;
      if (!result)
        return result;
    }
    if (v9 == *MEMORY[0x1E0C9B0D0])
      v10 = 0;
    else
      v10 = (objc_object *)v9;
    *a3 = v10;
    return 1;
  }
  return result;
}

CGAffineTransform *__cdecl CATransform3DGetAffineTransform(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  __int128 v2;

  v2 = *(_OWORD *)&t->tx;
  *(_OWORD *)&retstr->a = *(_OWORD *)&t->a;
  *(_OWORD *)&retstr->c = v2;
  *(_OWORD *)&retstr->tx = *(_OWORD *)&t[2].a;
  return t;
}

void sub_1845671B0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZL15ensure_displaysv_block_invoke()
{
  id v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[128];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = current_displays();
  result = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v6, v5, 16);
  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)v7;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v7 != v3)
          objc_enumerationMutation(v0);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v4++), "update");
      }
      while (v2 != v4);
      result = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v6, v5, 16);
      v2 = result;
    }
    while (result);
  }
  return result;
}

id current_displays(void)
{
  id v0;

  pthread_mutex_lock(&_displays_mutex);
  v0 = (id)objc_msgSend((id)_displays, "copy");
  pthread_mutex_unlock(&_displays_mutex);
  return v0;
}

void sub_1845672F4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&_displays_mutex);
  _Unwind_Resume(a1);
}

void query_displays(void)
{
  int ServerPort;
  mach_port_name_t v1;
  int v2;
  int v3;
  vm_map_t *v4;
  const __CFAllocator *v5;
  const UInt8 *v6;
  mach_vm_size_t v7;
  const __CFData *v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  size_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  const __CFDictionary *v17;
  const void *Value;
  const __CFString *v19;
  BOOL v20;
  const __CFString *v21;
  int Int;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  malloc_zone_t *malloc_zone;
  CA::Display::Display *v28;
  CA::Display::Display *v29;
  id v30;
  id v31;
  id v32;
  BOOL v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  int v43;
  void *v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  const __CFArray *v48;
  char *v49;
  uint64_t v50;
  unsigned int v51;
  const UInt8 *v52[2];
  CFRange v53;

  v52[1] = *(const UInt8 **)MEMORY[0x1E0C80C00];
  ServerPort = CARenderServerGetServerPort(0);
  if (ServerPort)
  {
    v1 = ServerPort;
    v52[0] = 0;
    v51 = 0;
    v2 = _CASGetDisplays(ServerPort, v52, &v51);
    if (v2 == -81182719)
    {
      x_log_crash("Unentitled call to server!");
      abort();
    }
    v3 = v2;
    v4 = (vm_map_t *)MEMORY[0x1E0C83DA0];
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], v1);
    if (v3)
    {
      x_log_crash("Unable to query displays from server (%d)", v3);
      abort();
    }
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE18];
    v6 = v52[0];
    v7 = v51;
    v8 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE18], v52[0], v51);
    mach_vm_deallocate(*v4, (mach_vm_address_t)v6, v7);
    if (v8)
    {
      v9 = (const __CFArray *)CFPropertyListCreateWithData(v5, v8, 0, 0, 0);
      CFRelease(v8);
      if (v9)
      {
        Count = CFArrayGetCount(v9);
        v11 = Count;
        v47 = 8 * Count;
        if ((unint64_t)(8 * Count) > 0x1000)
        {
          v13 = (char *)malloc_type_malloc(8 * Count, 0x6784663CuLL);
        }
        else
        {
          MEMORY[0x1E0C80A78](Count);
          v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
          bzero(v13, v12);
        }
        v48 = v9;
        v53.location = 0;
        v53.length = v11;
        CFArrayGetValues(v9, v53, (const void **)v13);
        v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v49 = v13;
        if (v11)
        {
          v15 = 0;
          v16 = 0;
          do
          {
            v17 = *(const __CFDictionary **)&v13[8 * v15];
            Value = CFDictionaryGetValue(v17, CFSTR("kCADisplayName"));
            v19 = (const __CFString *)CFDictionaryGetValue(v17, CFSTR("kCADisplayDeviceName"));
            if (Value)
              v20 = v19 == 0;
            else
              v20 = 1;
            if (!v20)
            {
              v21 = v19;
              v50 = v16;
              Int = CA_CFDictionaryGetInt(v17, CFSTR("kCADisplayId"));
              v23 = objc_msgSend((id)_displays, "count");
              if (v23)
              {
                v24 = v23;
                v25 = 0;
                while (1)
                {
                  v26 = (void *)objc_msgSend((id)_displays, "objectAtIndexedSubscript:", v25);
                  if (objc_msgSend(v26, "displayId") == Int)
                    break;
                  if (v24 == ++v25)
                    goto LABEL_19;
                }
                objc_msgSend(v14, "addObject:", v26);
                v13 = v49;
                v16 = v50;
              }
              else
              {
LABEL_19:
                malloc_zone = (malloc_zone_t *)get_malloc_zone();
                v16 = 1;
                v28 = (CA::Display::Display *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x300uLL, 0x743898A5uLL);
                if (v28)
                {
                  v29 = v28;
                  *(_QWORD *)CA::Display::Display::Display(v28, Value, v21, Int) = off_1E15998A0;
                  v30 = -[CADisplay _initWithDisplay:]([CADisplay alloc], "_initWithDisplay:", v29);
                  objc_msgSend(v14, "addObject:", v30);
                  if (!_mainDisplay
                    && objc_msgSend((id)objc_msgSend(v30, "name"), "isEqualToString:", CFSTR("LCD")))
                  {
                    v31 = v30;

                    _mainDisplay = (uint64_t)v30;
                  }
                  v13 = v49;
                  if (!_tvoutDisplay
                    && ((objc_msgSend((id)objc_msgSend(v30, "name"), "isEqualToString:", CFSTR("TVOut")) & 1) != 0
                     || objc_msgSend((id)objc_msgSend(v30, "name"), "isEqualToString:", CFSTR("External"))))
                  {
                    v32 = v30;

                    _tvoutDisplay = (uint64_t)v30;
                  }

                  v16 = 1;
                }
                else
                {
                  v13 = v49;
                }
              }
            }
            ++v15;
          }
          while (v15 != v11);
        }
        else
        {
          LOBYTE(v16) = 0;
        }
        if (_tvoutDisplay)
          v33 = _mainDisplay == 0;
        else
          v33 = 0;
        if (v33)
          _mainDisplay = (uint64_t)(id)_tvoutDisplay;
        v34 = v16;
        v35 = objc_msgSend((id)_displays, "count");
        if (v35)
        {
          v36 = v35;
          for (i = 0; i != v36; ++i)
          {
            v38 = (void *)objc_msgSend((id)_displays, "objectAtIndexedSubscript:", i);
            v39 = objc_msgSend(v14, "count");
            if (v39)
            {
              v40 = v39;
              v41 = 0;
              while (1)
              {
                v42 = (void *)objc_msgSend(v14, "objectAtIndexedSubscript:", v41);
                v43 = objc_msgSend(v38, "displayId");
                if (v43 == objc_msgSend(v42, "displayId"))
                  break;
                if (v40 == ++v41)
                  goto LABEL_45;
              }
            }
            else
            {
LABEL_45:
              objc_msgSend(v38, "_finalize");
              v34 = 1;
            }
          }
        }
        if (v47 > 0x1000)
          free(v49);
        CFRelease(v48);
        if ((v34 & 1) != 0)
        {
          v44 = (void *)_displays;
          _displays = (uint64_t)v14;
          v45 = v44;
        }
        else
        {

        }
      }
    }
  }
}

uint64_t CA_CFIntValue(const void *a1)
{
  CFTypeID v2;
  unsigned int valuePtr;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = CFGetTypeID(a1);
  if (v2 == CFBooleanGetTypeID())
    return *MEMORY[0x1E0C9AE40] != (_QWORD)a1;
  if (v2 != CFNumberGetTypeID())
    return 0;
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  return valuePtr;
}

uint64_t CA::Display::Display::update(CA::Display::Display *this)
{
  pthread_mutex_t *v2;
  mach_port_t v3;
  mach_port_name_t ServerPort;
  uint64_t v5;
  PerModeInfo *v6;
  unint64_t v7;
  CFStringRef v8;
  CFStringRef v9;
  int v10;
  int v11;
  unsigned int v12;
  int8x8_t v13;
  __int128 v14;
  uint64_t v15;
  double v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFStringRef v24;
  BOOL v25;
  mach_port_t reply_port;
  mach_msg_return_t v27;
  mach_port_t msgh_remote_port;
  PerModeInfo *v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  const char *v35;
  char *v36;
  NSObject *v37;
  uint32_t v38;
  CFStringRef v39;
  BOOL v40;
  _BOOL4 v41;
  _BOOL4 v42;
  _BOOL4 v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  double v53;
  int v54;
  double v55;
  int v56;
  double v57;
  double v58;
  int v59;
  int v60;
  char v61;
  int v62;
  mem_entry_name_port_t v63;
  uint64_t v64;
  char v65;
  CA::Render::Shmem *v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  const void *v71;
  const void *v72;
  const void *v73;
  __int128 v74;
  __int128 v75;
  CA::Display::Display *v76;
  uint64_t i;
  double v78;
  double v79;
  unsigned int v81;
  char *v82;
  mach_msg_size_t v83;
  unsigned int v84;
  unsigned int v85;
  char *v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  vm_map_t *v97;
  unsigned int v98;
  int v99;
  mach_vm_size_t v100;
  int v101;
  int v102;
  BOOL v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  int v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  int v117;
  int v118;
  _BOOL4 v119;
  _BOOL4 v120;
  int v121;
  BOOL v122;
  BOOL v123;
  double v124;
  CFStringRef v125;
  char v126;
  char v127;
  char v128;
  uint64_t v129;
  CFStringRef v130;
  int v131;
  int v132;
  mach_msg_id_t msgh_id;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  BOOL v138;
  BOOL v139;
  _BOOL4 v140;
  pthread_mutex_t *v141;
  mach_port_name_t v142;
  uint64_t v143;
  mach_vm_size_t v144;
  _BOOL4 v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  mach_vm_address_t v149;
  unsigned int v150;
  unsigned int address;
  int addressa;
  mach_vm_address_t address_4;
  int address_4a;
  mach_vm_size_t size;
  _BOOL4 sizea;
  int size_4;
  unint64_t *v158;
  _BOOL4 v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  double v165;
  unint64_t v166;
  __int128 v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  __int128 v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  double v178;
  int v179;
  double v180;
  int v181;
  void *__p[2];
  uint64_t v183;
  __int128 *v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  char v189[16];
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  char cStr[16];
  __int128 v206;
  __int128 v207;
  __int128 v208;
  char dest[16];
  __int128 v210;
  __int128 v211;
  __int128 v212;
  mach_msg_header_t msg[4];
  __int128 v214;
  uint64_t v215;
  mach_msg_size_t v216;
  char v217[744];
  uint64_t v218;

  v218 = *MEMORY[0x1E0C80C00];
  if ((*((_WORD *)this + 380) & 0x800) != 0)
  {
    v98 = this;
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("CADisplay"), CFSTR("%p: cannot update immutable CADisplay"));
  }
  v2 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  v3 = *((_DWORD *)this + 26);
  ServerPort = CARenderServerGetServerPort(0);
  v5 = *((_QWORD *)this + 14);
  if (v5)
  {
    v187 = 0u;
    v188 = 0u;
    *(_OWORD *)__p = 0u;
    v183 = 0;
    v185 = 0u;
    v186 = 0u;
    v184 = &v185;
    LODWORD(v188) = 1065353216;
    v215 = 0;
    v214 = 0u;
    memset(msg, 0, sizeof(msg));
    msg[0].msgh_bits = 2;
    if (((*(uint64_t (**)(uint64_t, mach_msg_header_t *))(v5 + 16))(v5, msg) & 1) != 0)
    {
      v166 = __PAIR64__(msg[0].msgh_size, msg[0].msgh_remote_port);
      v130 = *(CFStringRef *)&msg[1].msgh_bits;
      v8 = *(CFStringRef *)&msg[0].msgh_voucher_port;
      v9 = *(CFStringRef *)&msg[1].msgh_remote_port;
      CA::WindowServer::Display::ModeSet::set_mig_representation((CA::WindowServer::Display::ModeSet *)__p, *(unint64_t **)&msg[1].msgh_voucher_port, *(unsigned int **)&msg[2].msgh_bits, 0, 0, 0, v6, v7, v98);
      v177 = *(_QWORD *)&msg[2].msgh_remote_port;
      v173 = *(_QWORD *)&msg[2].msgh_voucher_port;
      if (*(_QWORD *)&msg[3].msgh_bits)
        (*(void (**)(_QWORD))&msg[3].msgh_bits)(*(_QWORD *)&msg[1].msgh_voucher_port);
      v142 = ServerPort;
      v141 = (pthread_mutex_t *)((char *)this + 8);
      v162 = 0;
      v163 = 0;
      v146 = 0;
      v172 = 0;
      v181 = 0;
      v161 = 0;
      msgh_id = 0;
      v100 = 0;
      v134 = 0;
      v169 = 0;
      HIDWORD(v144) = 0;
      v137 = 0;
      v10 = 0;
      v175 = 0;
      v11 = 0;
      v136 = 0;
      v99 = 0;
      v160 = 0;
      v179 = 0;
      v12 = 0;
      v13.i32[0] = v177;
      v13.i32[1] = v177 >> 14;
      *(_QWORD *)&v14 = 0;
      v147 = 0;
      *((int8x8_t *)&v14 + 1) = vand_s8(v13, (int8x8_t)0x3F0000003FLL);
      v15 = *(_QWORD *)&msg[3].msgh_voucher_port;
      v180 = *(double *)&msg[3].msgh_remote_port;
      v174 = *((_QWORD *)&v214 + 1);
      v178 = *(double *)&v214;
      v16 = 1.0;
      v170 = 0;
      v171 = v14;
      v165 = 0.0;
      v167 = v14;
      v168 = 0;
      v176 = 0;
      v17 = (_BYTE)v215 != 0;
      v164 = 1;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v135 = 0;
      v143 = 0;
LABEL_8:
      *((_WORD *)this + 380) &= ~0x400u;
      v22 = (v11 - 1);
      if (v22 < 4)
        v23 = v22 + 1;
      else
        v23 = 0;
      v131 = *((_DWORD *)this + 31);
      v132 = *((_DWORD *)this + 30);
      os_unfair_lock_lock((os_unfair_lock_t)this + 18);
      v24 = (CFStringRef)*((_QWORD *)this + 16);
      if (v24 == v8)
      {
        v25 = 1;
      }
      else
      {
        v139 = 0;
        if (!v8 || !v24)
        {
LABEL_28:
          v39 = (CFStringRef)*((_QWORD *)this + 18);
          if (v39 == v9)
          {
            v40 = 1;
          }
          else
          {
            v138 = 0;
            if (!v9 || !v39)
              goto LABEL_34;
            v40 = CFEqual(v39, v9) != 0;
          }
          v138 = v40;
LABEL_34:
          v125 = v9;
          v128 = CA::WindowServer::Display::ModeSet::operator==((uint64_t)this + 152, (uint64_t)__p);
          v127 = CA::WindowServer::Display::Mode::operator==(*((_QWORD *)this + 31), v177);
          v126 = CA::WindowServer::Display::Mode::operator==(*((_QWORD *)this + 32), v173);
          v159 = *((_DWORD *)this + 66) == (_DWORD)v171
              && *(_QWORD *)((char *)this + 268) == *(_QWORD *)((char *)&v171 + 4)
              && *((_DWORD *)this + 69) == HIDWORD(v171);
          v122 = *((_DWORD *)this + 70) == (_DWORD)v167
              && *(_QWORD *)((char *)this + 284) == *(_QWORD *)((char *)&v167 + 4)
              && *((_DWORD *)this + 73) == HIDWORD(v167);
          v41 = *((float *)this + 74) != *(float *)&v170 || *((float *)this + 75) != *((float *)&v170 + 1);
          sizea = v41;
          v42 = *((float *)this + 76) != *(float *)&v168 || *((float *)this + 77) != *((float *)&v168 + 1);
          v120 = v42;
          v43 = *((_DWORD *)this + 78) != v172 || *((_DWORD *)this + 79) != v146;
          v119 = v43;
          v103 = v169 == *((_DWORD *)this + 80)
              && __PAIR128__(__PAIR64__(v137, HIDWORD(v143)), __PAIR64__(v143, HIDWORD(v144))) == *(_OWORD *)((char *)this + 324)
              && *((_BYTE *)this + 340) == (v10 != 0)
              && v136 == __PAIR64__(*((_DWORD *)this + 86), *((_DWORD *)this + 87))
              && v135 == *((_QWORD *)this + 44)
              && HIDWORD(v134) == *((_DWORD *)this + 90);
          v123 = v10 != 0;
          v129 = v23;
          v101 = *((unsigned __int8 *)this + 369);
          v102 = *((unsigned __int8 *)this + 368);
          os_unfair_lock_unlock((os_unfair_lock_t)this + 18);
          v44 = *((unsigned __int16 *)this + 380);
          v140 = 1;
          if (*((float *)this + 176) == *(float *)&v176)
            v140 = *((float *)this + 177) != *((float *)&v176 + 1);
          v45 = v12 & 4;
          v46 = v12 & 0x80;
          v47 = v12 & 2;
          v48 = v12 & 8;
          v49 = v12 & 1;
          size_4 = v44 & 1;
          address_4a = *((_DWORD *)this + 104);
          v50 = 528;
          v51 = 496;
          if ((*((_BYTE *)this + 697) & 8) != 0)
            v51 = 528;
          else
            v50 = 512;
          v145 = 1;
          if ((*((_BYTE *)this + 697) & 1) != 0)
            v52 = 2;
          else
            v52 = 1;
          if (v52 <= *((_DWORD *)this + 130))
            v52 = *((_DWORD *)this + 130);
          if (v52 <= *((_DWORD *)this + 138))
            v52 = *((_DWORD *)this + 138);
          v150 = v52;
          if (v175 == ((v44 >> 6) & 1))
            v145 = *((_DWORD *)this + 110) != v147;
          v124 = *((double *)this + 51);
          v117 = (v44 >> 1) & 1;
          v121 = *((_DWORD *)this + 180);
          v116 = v45 >> 2;
          v115 = (v44 >> 2) & 1;
          v114 = v46 >> 7;
          v113 = (v44 >> 3) & 1;
          v109 = *((_DWORD *)this + 105);
          v108 = *((_DWORD *)this + 106);
          v118 = *((_DWORD *)this + 114);
          v106 = *((_DWORD *)this + 107);
          v112 = v47 >> 1;
          v105 = *((_DWORD *)this + 108);
          v111 = (v44 >> 4) & 1;
          v110 = v48 >> 3;
          v53 = *(double *)((char *)this + v51);
          v54 = v49 != size_4 || !v159;
          v55 = *(double *)((char *)this + v50);
          v107 = (v44 >> 7) & 1;
          v56 = v54 | sizea;
          if (address_4a != v181)
            v56 = 1;
          v104 = v56;
          addressa = (v44 >> 8) & 1;
          if ((v44 & 0x200) != 0)
          {
            if (v132 != HIDWORD(v166))
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("seed"));
            if (v131 != (_DWORD)v166)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("connectionSeed"));
            if (!v139)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("uniqueId"));
            if (!v138)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("productName"));
            if ((v128 & 1) == 0)
            {
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("availableModes"));
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("supportedHDRModes"));
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("preferredHDRModes"));
            }
            if ((v127 & 1) == 0)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("currentMode"));
            if ((v126 & 1) == 0)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("preferredMode"));
            v57 = v165;
            v58 = v124;
            if (v124 != v165)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("latency"), v165, v124);
            if (!v159)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("bounds"), v57, v58);
            if (!v122)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("frame"), v57, v58);
            if (v49 != size_4)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("overscanned"), v57, v58);
            if (sizea)
            {
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("overscanAmounts"));
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("overscanAmount"));
            }
            if (address_4a != v181)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("overscanAdjustment"));
            if (v140)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("logicalScale"));
            if (v121 != HIDWORD(v164))
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("pointScale"));
            if (v120)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("physicalSize"));
            if (v119)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("nativeSize"));
            if (v118 != (_DWORD)v164)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("transportType"));
            if (v116 != v117)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("cloned"));
            if (v114 != v115)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("cloning"));
            if (v112 != v113)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("cloningSupported"));
            if (v110 != v111)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("supportsExtendedColors"));
            if (v109 != HIDWORD(v163))
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("tag"));
            if (v108 != (_DWORD)v163)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("processId"));
            if (v53 != v180)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("refreshRate"));
            if (v55 != v178)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("heartbeatRate"));
            if (v150 != (_DWORD)v174)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("minimumFrameDuration"));
            if (HIDWORD(v162) != v107)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("isDmrrEnabled"));
            if (v179 != addressa)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("isForceFixedRateLinksEnabled"));
            if (v106 != (_DWORD)v162)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("nativeOrientation"));
            if (v105 != HIDWORD(v161))
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("currentOrientation"));
            if (v104)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("safeBounds"));
            if (!v103)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("externalDisplayAttributes"));
            if (v145)
            {
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("preferences"));
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("allowedHDRModes"));
            }
            if (v102 != (_DWORD)v161)
            {
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("currentPreset"));
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("isReference"));
            }
            if (v101 != v160)
              objc_msgSend(*((id *)this + 10), "willChangeValueForKey:", CFSTR("isReferenceLimited"));
          }
          *((_DWORD *)this + 30) = HIDWORD(v166);
          *((_DWORD *)this + 31) = v166;
          *((double *)this + 51) = v165;
          v59 = *((_WORD *)this + 380) & 0xFFE0 | v49;
          *((_DWORD *)this + 104) = v181;
          v60 = (v46 >> 5) | (v45 >> 1) | (4 * v47) | (2 * v48) | v59;
          *((_WORD *)this + 380) = v60;
          v61 = *((_BYTE *)this + 697) & 0xFE | v17;
          *((_BYTE *)this + 697) = v61;
          if (v17)
          {
            v63 = msgh_id;
            v62 = v134;
            if (CAFrameRateArbitrationEnabled(void)::once != -1)
              dispatch_once(&CAFrameRateArbitrationEnabled(void)::once, &__block_literal_global_14849);
            v64 = v129;
            v65 = 2 * CAFrameRateArbitrationEnabled(void)::enabled;
            v61 = *((_BYTE *)this + 697);
            LOWORD(v60) = *((_WORD *)this + 380);
          }
          else
          {
            v65 = 0;
            v63 = msgh_id;
            v62 = v134;
            v64 = v129;
          }
          *((_BYTE *)this + 697) = v61 & 0xFD | v65;
          *((_DWORD *)this + 105) = HIDWORD(v163);
          *((_DWORD *)this + 106) = v163;
          *((double *)this + 62) = v180;
          *((_QWORD *)this + 63) = v15;
          *((double *)this + 64) = v178;
          *((_QWORD *)this + 65) = v174;
          *((_DWORD *)this + 107) = v162;
          *((_DWORD *)this + 108) = HIDWORD(v161);
          *((_DWORD *)this + 109) = v62;
          *((_WORD *)this + 380) = v60 & 0xFE1F | (v12 >> 1) & 0x20 | ((HIDWORD(v162) != 0) << 7) | ((v179 != 0) << 8) | ((v175 != 0) << 6);
          *((_QWORD *)this + 55) = v147;
          *((_QWORD *)this + 56) = v64;
          *((_DWORD *)this + 114) = v164;
          *((_QWORD *)this + 88) = v176;
          *((_QWORD *)this + 89) = v21;
          *((_DWORD *)this + 180) = HIDWORD(v164);
          if (v63)
          {
            v66 = (CA::Render::Shmem *)CA::Render::Shmem::new_shmem(v63, v100, 0, 3);
            if (v66)
            {
              v67 = (unsigned int *)v66;
              *((_BYTE *)this + 697) = *((_BYTE *)this + 697) & 0xFB | (4 * (v99 != 0));
              CA::Display::DisplayTimingsControl::set_timings_shmem((os_unfair_lock_s *)this + 116, v66);
              v68 = v67 + 2;
              do
              {
                v69 = __ldaxr(v68);
                v70 = v69 - 1;
              }
              while (__stlxr(v70, v68));
              if (!v70)
                (*(void (**)(unsigned int *))(*(_QWORD *)v67 + 16))(v67);
            }
            else
            {
              mach_port_deallocate(*MEMORY[0x1E0C83DA0], v63);
            }
          }
          os_unfair_lock_lock((os_unfair_lock_t)this + 18);
          v71 = (const void *)*((_QWORD *)this + 16);
          if (v71)
            CFRelease(v71);
          *((_QWORD *)this + 16) = v8;
          v72 = (const void *)*((_QWORD *)this + 17);
          if (v72)
            CFRelease(v72);
          *((_QWORD *)this + 17) = v130;
          v73 = (const void *)*((_QWORD *)this + 18);
          if (v73)
            CFRelease(v73);
          *((_QWORD *)this + 18) = v125;
          CA::WindowServer::Display::ModeSet::operator=((char **)this + 19, (char **)__p);
          *(_QWORD *)&v74 = __PAIR64__(HIDWORD(v144), v169);
          *(_QWORD *)&v75 = __PAIR64__(v136, HIDWORD(v136));
          *((_QWORD *)&v74 + 1) = v143;
          *((_QWORD *)&v75 + 1) = v135;
          *((_QWORD *)this + 31) = v177;
          *((_QWORD *)this + 32) = v173;
          *(_OWORD *)((char *)this + 264) = v171;
          *(_OWORD *)((char *)this + 280) = v167;
          *((_QWORD *)this + 37) = v170;
          *((_QWORD *)this + 38) = v168;
          *((_QWORD *)this + 39) = v172 | (unint64_t)(v146 << 32);
          *((_OWORD *)this + 20) = v74;
          *((_DWORD *)this + 84) = v137;
          *((_BYTE *)this + 340) = v123;
          *(_OWORD *)((char *)this + 344) = v75;
          *((_DWORD *)this + 90) = HIDWORD(v134);
          *((_BYTE *)this + 368) = (_DWORD)v161 != 0;
          *((_BYTE *)this + 369) = v160 != 0;
          *((_QWORD *)this + 47) = v18;
          *((_QWORD *)this + 48) = v19;
          *((double *)this + 49) = v16;
          *((_QWORD *)this + 50) = v20;
          os_unfair_lock_unlock((os_unfair_lock_t)this + 18);
          if (v179 != addressa && (*((_WORD *)this + 380) & 0x100) != 0)
          {
            os_unfair_lock_lock((os_unfair_lock_t)&CA::Display::DisplayLink::_list_lock);
            for (i = CA::Display::DisplayLink::_list; i; i = *(_QWORD *)(i + 48))
            {
              if (*(CA::Display::Display **)(i + 8) == this)
                CA::Display::DisplayLink::power_changed((CA::Display::DisplayLink *)i);
            }
            os_unfair_lock_unlock((os_unfair_lock_t)&CA::Display::DisplayLink::_list_lock);
          }
          if (v53 != v180 || v55 != v178 || v150 != (_DWORD)v174)
          {
            CA::Display::DisplayLink::display_refresh_rate_changed(this, v76);
            CAFrameRateRangeGroupShouldUpdate(*((_DWORD *)this + 26));
            CADynamicFrameRateSourceRecomputeFrameInterval(*((_DWORD *)this + 26));
          }
          if ((*((_WORD *)this + 380) & 0x200) != 0)
          {
            if (v132 != HIDWORD(v166))
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("seed"));
            if (v131 != (_DWORD)v166)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("connectionSeed"));
            if (!v139)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("uniqueId"));
            if (!v138)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("productName"));
            if ((v128 & 1) == 0)
            {
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("availableModes"));
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("supportedHDRModes"));
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("preferredHDRModes"));
            }
            if ((v127 & 1) == 0)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("currentMode"));
            if ((v126 & 1) == 0)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("preferredMode"));
            v78 = v165;
            v79 = v124;
            if (v124 != v165)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("latency"), v165, v124);
            if (!v159)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("bounds"), v78, v79);
            if (!v122)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("frame"), v78, v79);
            if (v49 != size_4)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("overscanned"), v78, v79);
            if (sizea)
            {
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("overscanAmounts"));
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("overscanAmount"));
            }
            if (address_4a != v181)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("overscanAdjustment"));
            if (v140)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("logicalScale"));
            if (v121 != HIDWORD(v164))
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("pointScale"));
            if (v120)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("physicalSize"));
            if (v119)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("nativeSize"));
            if (v118 != (_DWORD)v164)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("transportType"));
            if (v116 != v117)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("cloned"));
            if (v114 != v115)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("cloning"));
            if (v112 != v113)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("cloningSupported"));
            if (v110 != v111)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("supportsExtendedColors"));
            if (v109 != HIDWORD(v163))
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("tag"));
            if (v108 != (_DWORD)v163)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("processId"));
            if (v53 != v180)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("refreshRate"));
            if (v55 != v178)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("heartbeatRate"));
            if (v150 != (_DWORD)v174)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("minimumFrameDuration"));
            if (HIDWORD(v162) != v107)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("isDmrrEnabled"));
            if (v179 != addressa)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("isForceFixedRateLinksEnabled"));
            if (v106 != (_DWORD)v162)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("nativeOrientation"));
            if (v105 != HIDWORD(v161))
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("currentOrientation"));
            if (v104)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("safeBounds"));
            if (!v103)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("externalDisplayAttributes"));
            if (v145)
            {
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("preferences"));
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("allowedHDRModes"));
            }
            if (v102 != (_DWORD)v161)
            {
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("currentPreset"));
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("isReference"));
            }
            if (v101 != v160)
              objc_msgSend(*((id *)this + 10), "didChangeValueForKey:", CFSTR("isReferenceLimited"));
          }
          *((_WORD *)this + 380) |= 0x200u;
          goto LABEL_253;
        }
        v25 = CFEqual(v24, v8) != 0;
      }
      v139 = v25;
      goto LABEL_28;
    }
    if (x_log_hook_p())
    {
      x_log_();
      goto LABEL_254;
    }
    v34 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v189 = 0;
      v35 = "CoreAnimation: CALocalDisplayUpdateBlock returned NO\n";
      v36 = v189;
      v37 = v34;
      v38 = 2;
LABEL_305:
      _os_log_impl(&dword_184457000, v37, OS_LOG_TYPE_ERROR, v35, (uint8_t *)v36, v38);
      goto LABEL_254;
    }
    goto LABEL_254;
  }
  if (!ServerPort)
    return pthread_mutex_unlock(v2);
  if (!v3)
  {
LABEL_257:
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], ServerPort);
    return pthread_mutex_unlock(v2);
  }
  v187 = 0u;
  v188 = 0u;
  *(_OWORD *)__p = 0u;
  v183 = 0;
  v185 = 0u;
  v186 = 0u;
  v184 = &v185;
  LODWORD(v188) = 1065353216;
  v212 = 0u;
  v211 = 0u;
  v210 = 0u;
  *(_OWORD *)dest = 0u;
  v207 = 0u;
  v208 = 0u;
  *(_OWORD *)cStr = 0u;
  v206 = 0u;
  v203 = 0u;
  v204 = 0u;
  v201 = 0u;
  v202 = 0u;
  v199 = 0u;
  v200 = 0u;
  v197 = 0u;
  v198 = 0u;
  v195 = 0u;
  v196 = 0u;
  v193 = 0u;
  v194 = 0u;
  v191 = 0u;
  v192 = 0u;
  *(_OWORD *)v189 = 0u;
  v190 = 0u;
  bzero(&msg[0].msgh_size, 0x358uLL);
  *(_QWORD *)&msg[1].msgh_bits = *MEMORY[0x1E0C804E8];
  msg[1].msgh_remote_port = v3;
  reply_port = mig_get_reply_port();
  msg[0].msgh_bits = 5395;
  *(_QWORD *)&msg[0].msgh_remote_port = __PAIR64__(reply_port, ServerPort);
  *(_QWORD *)&msg[0].msgh_voucher_port = 0x9D2800000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(msg);
    reply_port = msg[0].msgh_local_port;
  }
  v27 = mach_msg(msg, 3, 0x28u, 0x35Cu, reply_port, 0, 0);
  msgh_remote_port = v27;
  v141 = (pthread_mutex_t *)((char *)this + 8);
  v142 = ServerPort;
  if ((v27 - 268435458) > 0xE || ((1 << (v27 - 2)) & 0x4003) == 0)
  {
    if (v27)
    {
      mig_dealloc_reply_port(msg[0].msgh_local_port);
LABEL_295:
      if (msgh_remote_port == -81182719)
      {
        x_log_crash("Unentitled call to server!");
        abort();
      }
      v166 = 0;
      v177 = 0;
      v173 = 0;
      v12 = 0;
      v163 = 0;
      v164 = 0;
      v144 = 0;
      v146 = 0;
      v172 = 0;
      v181 = 0;
      v161 = 0;
      v162 = 0;
      msgh_id = 0;
      v100 = 0;
      v134 = 0;
      v169 = 0;
      v137 = 0;
      v10 = 0;
      v175 = 0;
      v11 = 0;
      v136 = 0;
      v99 = 0;
      v160 = 0;
      v179 = 0;
      size = 0;
      v158 = 0;
      address_4 = 0;
      address = 0;
      v149 = 0;
      v148 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v16 = 1.0;
      v170 = 0;
      v171 = 0u;
      v165 = 0.0;
      v168 = 0;
      v176 = 0;
      v167 = 0u;
      v180 = 0.0;
      v15 = 0;
      v178 = 0.0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v147 = 0;
      goto LABEL_297;
    }
    if (msg[0].msgh_id == 71)
    {
      msgh_remote_port = -308;
    }
    else if (msg[0].msgh_id == 40332)
    {
      if ((msg[0].msgh_bits & 0x80000000) != 0)
      {
        msgh_remote_port = -300;
        if (msg[1].msgh_bits != 5 || msg[0].msgh_size < 0x1D4 || msg[0].msgh_size > 0x354 || msg[0].msgh_remote_port)
          goto LABEL_294;
        if (HIBYTE(msg[1].msgh_local_port) == 1
          && HIBYTE(msg[2].msgh_size) == 1
          && HIBYTE(msg[2].msgh_id) == 1
          && HIBYTE(msg[3].msgh_local_port) == 1
          && WORD3(v214) << 16 == 1114112
          && v216 <= 0x40)
        {
          msgh_remote_port = -300;
          if (msg[0].msgh_size - 468 < v216)
            goto LABEL_294;
          v81 = (v216 + 3) & 0xFFFFFFFC;
          if (msg[0].msgh_size < v81 + 468)
            goto LABEL_294;
          v82 = (char *)msg + v81;
          v83 = *((_DWORD *)v82 + 33);
          if (v83 <= 0x40)
          {
            v84 = msg[0].msgh_size - v81;
            msgh_remote_port = -300;
            if (msg[0].msgh_size - v81 - 468 < v83)
              goto LABEL_294;
            v85 = (v83 + 3) & 0xFFFFFFFC;
            if (v84 < v85 + 468)
              goto LABEL_294;
            v86 = v82 - 64;
            v87 = (uint64_t)&v82[v85 - 64];
            v88 = *(_DWORD *)(v87 + 204);
            if (v88 <= 0x100)
            {
              v89 = v84 - v85;
              msgh_remote_port = -300;
              if (v89 - 468 < v88)
                goto LABEL_294;
              v90 = (v88 + 3) & 0xFFFFFFFC;
              if (v89 != v90 + 468)
                goto LABEL_294;
              v91 = v87 - 64;
              v92 = v87 - 64 + v90;
              if (msg[1].msgh_voucher_port == *(_DWORD *)(v92 + 272))
              {
                v93 = v92 - 256;
                if (__PAIR64__(msg[3].msgh_bits, msg[2].msgh_remote_port) == *(_QWORD *)(v92 + 276)
                  && msg[3].msgh_voucher_port == *(_DWORD *)(v92 + 412))
                {
                  v166 = __PAIR64__(v215, HIDWORD(v215));
                  mig_strncpy(dest, v217, 64);
                  mig_strncpy(cStr, v86 + 200, 64);
                  mig_strncpy(v189, (const char *)(v91 + 272), 256);
                  msgh_remote_port = 0;
                  v158 = *(unint64_t **)&msg[1].msgh_size;
                  v94 = v93;
                  HIDWORD(size) = *(_DWORD *)(v93 + 528);
                  address_4 = *(_QWORD *)&msg[1].msgh_id;
                  address = *(_DWORD *)(v93 + 532);
                  v149 = *(_QWORD *)&msg[2].msgh_local_port;
                  v148 = *(_DWORD *)(v93 + 536);
                  v31 = *(_DWORD *)(v93 + 540);
                  v177 = *(_QWORD *)(v93 + 548);
                  v173 = *(_QWORD *)(v93 + 556);
                  LODWORD(v164) = *(_DWORD *)(v93 + 564);
                  v165 = *(double *)(v93 + 568);
                  v12 = *(_DWORD *)(v93 + 608);
                  HIDWORD(v163) = *(_DWORD *)(v93 + 612);
                  LODWORD(v163) = *(_DWORD *)(v93 + 616);
                  v170 = *(_QWORD *)(v93 + 620);
                  v171 = *(_OWORD *)(v93 + 576);
                  v181 = *(_DWORD *)(v93 + 628);
                  v176 = *(_QWORD *)(v93 + 632);
                  v21 = *(_QWORD *)(v93 + 640);
                  HIDWORD(v164) = *(_DWORD *)(v93 + 648);
                  v167 = *(_OWORD *)(v93 + 592);
                  v168 = *(_QWORD *)(v93 + 652);
                  v172 = *(_DWORD *)(v93 + 660);
                  v146 = *(unsigned int *)(v93 + 664);
                  v32 = *(unsigned int **)&msg[3].msgh_size;
                  LODWORD(v144) = *(_DWORD *)(v93 + 668);
                  v33 = *(_DWORD *)(v93 + 672);
                  LODWORD(size) = *(_DWORD *)(v93 + 676);
                  v180 = *(double *)(v93 + 680);
                  v15 = *(_QWORD *)(v93 + 688);
                  v178 = *(double *)(v93 + 696);
                  v174 = *(_QWORD *)(v93 + 704);
                  HIDWORD(v162) = *(unsigned __int8 *)(v93 + 712);
                  LODWORD(v162) = *(_DWORD *)(v93 + 720);
                  HIDWORD(v161) = *(_DWORD *)(v93 + 724);
                  v100 = *(_QWORD *)(v93 + 728);
                  LODWORD(v134) = *(_DWORD *)(v93 + 736);
                  v169 = *(_DWORD *)(v93 + 740);
                  HIDWORD(v144) = *(_DWORD *)(v93 + 744);
                  v143 = *(_QWORD *)(v93 + 748);
                  v147 = *(_QWORD *)(v93 + 772);
                  v95 = *(_DWORD *)(v93 + 760);
                  v135 = *(_QWORD *)(v93 + 792);
                  v18 = *(_QWORD *)(v93 + 816);
                  v19 = *(_QWORD *)(v93 + 824);
                  v16 = *(double *)(v93 + 832);
                  v20 = *(_QWORD *)(v93 + 840);
                  v10 = *(_DWORD *)(v93 + 764);
                  v175 = *(_DWORD *)(v93 + 768);
                  v11 = *(_DWORD *)(v93 + 780);
                  v136 = *(_QWORD *)(v94 + 784);
                  v137 = v95;
                  HIDWORD(v134) = *(_DWORD *)(v94 + 800);
                  v99 = *(unsigned __int8 *)(v94 + 804);
                  LODWORD(v161) = *(unsigned __int8 *)(v94 + 808);
                  v160 = *(unsigned __int8 *)(v94 + 812);
                  v179 = *(unsigned __int8 *)(v94 + 848);
                  msgh_id = msg[3].msgh_id;
                  goto LABEL_298;
                }
              }
            }
          }
        }
      }
      else if (msg[0].msgh_size == 36)
      {
        msgh_remote_port = -300;
        if (msg[1].msgh_remote_port)
        {
          if (msg[0].msgh_remote_port)
            msgh_remote_port = -300;
          else
            msgh_remote_port = msg[1].msgh_remote_port;
        }
        goto LABEL_294;
      }
      msgh_remote_port = -300;
    }
    else
    {
      msgh_remote_port = -301;
    }
LABEL_294:
    mach_msg_destroy(msg);
    goto LABEL_295;
  }
  mig_put_reply_port(msg[0].msgh_local_port);
  v166 = 0;
  v177 = 0;
  v173 = 0;
  v12 = 0;
  v163 = 0;
  v164 = 0;
  v144 = 0;
  v146 = 0;
  v172 = 0;
  v181 = 0;
  v161 = 0;
  v162 = 0;
  msgh_id = 0;
  v100 = 0;
  v134 = 0;
  v169 = 0;
  v137 = 0;
  v10 = 0;
  v175 = 0;
  v11 = 0;
  v136 = 0;
  v99 = 0;
  v160 = 0;
  v179 = 0;
  size = 0;
  v158 = 0;
  address_4 = 0;
  address = 0;
  v149 = 0;
  v148 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v147 = 0;
  v16 = 1.0;
  v170 = 0;
  v171 = 0u;
  v165 = 0.0;
  v168 = 0;
  v176 = 0;
  v167 = 0u;
  v180 = 0.0;
  v15 = 0;
  v178 = 0.0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
LABEL_297:
  v174 = 0;
  v135 = 0;
  v143 = 0;
LABEL_298:
  if (!msgh_remote_port)
  {
    if (dest[0])
      v8 = CFStringCreateWithCString(0, dest, 0x8000100u);
    else
      v8 = 0;
    if (cStr[0])
      v130 = CFStringCreateWithCString(0, cStr, 0x8000100u);
    else
      v130 = 0;
    if (v189[0])
      v9 = CFStringCreateWithCString(0, v189, 0x8000100u);
    else
      v9 = 0;
    CA::WindowServer::Display::ModeSet::set_mig_representation((CA::WindowServer::Display::ModeSet *)__p, v158, (unsigned int *)v31, v32, (unsigned int *)v33, size, v29, v30, v98);
    v97 = (vm_map_t *)MEMORY[0x1E0C83DA0];
    mach_vm_deallocate(*MEMORY[0x1E0C83DA0], (mach_vm_address_t)v158, HIDWORD(size));
    mach_vm_deallocate(*v97, address_4, address);
    mach_vm_deallocate(*v97, v149, v148);
    mach_vm_deallocate(*v97, (mach_vm_address_t)v32, v144);
    v17 = (v12 >> 4) & 1;
    goto LABEL_8;
  }
  if (x_log_hook_p())
  {
    x_log_();
LABEL_253:
    v2 = v141;
    ServerPort = v142;
    goto LABEL_254;
  }
  v96 = x_log_category_windowserver;
  v2 = v141;
  ServerPort = v142;
  if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
  {
    msg[0].msgh_bits = 67109120;
    msg[0].msgh_size = msgh_remote_port;
    v35 = "CoreAnimation: GetDisplayInfo returned 0x%x\n";
    v36 = (char *)msg;
    v37 = v96;
    v38 = 8;
    goto LABEL_305;
  }
LABEL_254:
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v186);
  std::__tree<std::tuple<unsigned short,unsigned short>>::destroy((_QWORD *)v185);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (ServerPort)
    goto LABEL_257;
  return pthread_mutex_unlock(v2);
}

void sub_18456953C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,pthread_mutex_t *a41,int a42,mach_port_name_t name)
{
  CA::WindowServer::Display::ModeSet::~ModeSet((CA::WindowServer::Display::ModeSet *)&STACK[0x270]);
  if (name)
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], name);
  pthread_mutex_unlock(a41);
  _Unwind_Resume(a1);
}

char **CA::WindowServer::Display::ModeSet::operator=(char **a1, char **a2)
{
  char *v4;
  char *v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  uint64_t **leaf_high;
  char *v28;
  BOOL v29;
  char *i;
  char *v31;
  char *v32;
  int v33;
  uint64_t **v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *j;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *inserted;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v51[2];

  v51[1] = *MEMORY[0x1E0C80C00];
  if (a1 == a2)
    goto LABEL_59;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  v7 = v6 >> 3;
  v8 = (uint64_t)a1[2];
  v9 = *a1;
  if (v6 >> 3 > (unint64_t)((v8 - (uint64_t)*a1) >> 3))
  {
    if (v9)
    {
      a1[1] = v9;
      operator delete(v9);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (v6 < 0)
      abort();
    v10 = v8 >> 2;
    if (v8 >> 2 <= v7)
      v10 = v6 >> 3;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    std::vector<CA::WindowServer::Display::Mode>::__vallocate[abi:nn180100](a1, v11);
    v9 = a1[1];
    goto LABEL_17;
  }
  v12 = a1[1];
  v13 = (v12 - v9) >> 3;
  if (v13 >= v7)
  {
LABEL_17:
    if (v5 == v4)
      goto LABEL_20;
    v15 = v9;
    v16 = v4;
    goto LABEL_19;
  }
  v14 = &v4[8 * v13];
  if (v12 != v9)
  {
    memmove(*a1, *a2, v12 - v9);
    v9 = a1[1];
  }
  v6 = v5 - v14;
  if (v5 != v14)
  {
    v15 = v9;
    v16 = v14;
LABEL_19:
    memmove(v15, v16, v6);
  }
LABEL_20:
  a1[1] = &v9[v6];
  v17 = a2[3];
  v18 = (char *)(a2 + 4);
  if (!a1[5])
    goto LABEL_42;
  v19 = a1[4];
  v20 = a1[3];
  a1[3] = (char *)(a1 + 4);
  *((_QWORD *)v19 + 2) = 0;
  a1[4] = 0;
  a1[5] = 0;
  if (*((_QWORD *)v20 + 1))
    v21 = (char *)*((_QWORD *)v20 + 1);
  else
    v21 = v20;
  if (!v21)
  {
    v31 = 0;
LABEL_41:
    std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(v31);
    goto LABEL_42;
  }
  v22 = (char *)std::__tree<std::tuple<unsigned short,unsigned short>>::_DetachedTreeCache::__detach_next((uint64_t)v21);
  if (v17 != v18)
  {
    v23 = v17;
    do
    {
      v24 = v21;
      v21 = v22;
      v25 = *((_WORD *)v23 + 13);
      *((_WORD *)v24 + 13) = v25;
      v26 = *((_WORD *)v23 + 14);
      *((_WORD *)v24 + 14) = v26;
      v51[0] = 0;
      leaf_high = (uint64_t **)std::__tree<std::tuple<unsigned short,unsigned short>>::__find_leaf_high((uint64_t)(a1 + 3), v51, v25, v26);
      std::__tree<std::tuple<unsigned short,unsigned short>>::__insert_node_at((uint64_t **)a1 + 3, v51[0], leaf_high, (uint64_t *)v24);
      if (v22)
        v22 = (char *)std::__tree<std::tuple<unsigned short,unsigned short>>::_DetachedTreeCache::__detach_next((uint64_t)v22);
      v28 = (char *)*((_QWORD *)v23 + 1);
      if (v28)
      {
        do
        {
          v17 = v28;
          v28 = *(char **)v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v17 = (char *)*((_QWORD *)v23 + 2);
          v29 = *(_QWORD *)v17 == (_QWORD)v23;
          v23 = v17;
        }
        while (!v29);
      }
      if (!v21)
        break;
      v23 = v17;
    }
    while (v17 != v18);
  }
  std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(v21);
  if (v22)
  {
    for (i = (char *)*((_QWORD *)v22 + 2); i; i = (char *)*((_QWORD *)i + 2))
      v22 = i;
    v31 = v22;
    goto LABEL_41;
  }
LABEL_42:
  if (v17 != v18)
  {
    do
    {
      v32 = (char *)operator new(0x20uLL);
      v33 = *(_DWORD *)(v17 + 26);
      *(_DWORD *)(v32 + 26) = v33;
      v51[0] = 0;
      v34 = (uint64_t **)std::__tree<std::tuple<unsigned short,unsigned short>>::__find_leaf_high((uint64_t)(a1 + 3), v51, v33, HIWORD(v33));
      std::__tree<std::tuple<unsigned short,unsigned short>>::__insert_node_at((uint64_t **)a1 + 3, v51[0], v34, (uint64_t *)v32);
      v35 = (char *)*((_QWORD *)v17 + 1);
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = *(char **)v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (char *)*((_QWORD *)v17 + 2);
          v29 = *(_QWORD *)v36 == (_QWORD)v17;
          v17 = v36;
        }
        while (!v29);
      }
      v17 = v36;
    }
    while (v36 != v18);
  }
  *((_DWORD *)a1 + 20) = *((_DWORD *)a2 + 20);
  v37 = a2[8];
  v38 = a1[7];
  if (!v38)
    goto LABEL_55;
  for (j = 0; j != v38; ++j)
    *(_QWORD *)&a1[6][8 * (_QWORD)j] = 0;
  v40 = a1[8];
  a1[8] = 0;
  a1[9] = 0;
  if (v40)
  {
    while (v37)
    {
      v41 = *((_QWORD *)v37 + 2);
      *((_QWORD *)v40 + 2) = v41;
      v42 = *((_QWORD *)v37 + 3);
      *((_DWORD *)v40 + 8) = *((_DWORD *)v37 + 8);
      *((_QWORD *)v40 + 3) = v42;
      v43 = *(char **)v40;
      *((_QWORD *)v40 + 1) = v41;
      inserted = std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__node_insert_multi_prepare((uint64_t)(a1 + 6), v41, (_QWORD *)v40 + 2);
      std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__node_insert_multi_perform(a1 + 6, v40, inserted);
      v37 = *(char **)v37;
      v40 = v43;
      if (!v43)
        goto LABEL_55;
    }
    do
    {
      v49 = *(char **)v40;
      operator delete(v40);
      v40 = v49;
    }
    while (v49);
  }
  else
  {
LABEL_55:
    while (v37)
    {
      v45 = operator new(0x28uLL);
      *v45 = 0;
      v46 = *((_QWORD *)v37 + 4);
      *((_OWORD *)v45 + 1) = *((_OWORD *)v37 + 1);
      v45[4] = v46;
      v47 = v45[2];
      v45[1] = v47;
      v48 = std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__node_insert_multi_prepare((uint64_t)(a1 + 6), v47, v45 + 2);
      std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__node_insert_multi_perform(a1 + 6, v45, v48);
      v37 = *(char **)v37;
    }
  }
LABEL_59:
  *((_DWORD *)a1 + 22) = *((_DWORD *)a2 + 22);
  return a1;
}

void sub_184569988(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::WindowServer::Display::ModeSet::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  v3 = *(uint64_t **)a1;
  v2 = *(uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)a2;
  if ((uint64_t *)((char *)v2 - *(_QWORD *)a1) != (uint64_t *)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2))
    return 0;
  while (v3 != v2)
  {
    result = CA::WindowServer::Display::Mode::operator==(*v3, *v4);
    if (!(_DWORD)result)
      return result;
    ++v3;
    ++v4;
  }
  if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
    return 0;
  v8 = *(_QWORD **)(a1 + 24);
  if (v8 == (_QWORD *)(a1 + 32))
    return 1;
  v9 = *(_QWORD **)(a2 + 24);
  while (1)
  {
    v10 = *((unsigned __int16 *)v8 + 13) == *((unsigned __int16 *)v9 + 13)
       && *((unsigned __int16 *)v8 + 14) == *((unsigned __int16 *)v9 + 14);
    result = v10;
    if (!v10)
      break;
    v11 = (_QWORD *)v8[1];
    v12 = v8;
    if (v11)
    {
      do
      {
        v8 = v11;
        v11 = (_QWORD *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v12[2];
        v10 = *v8 == (_QWORD)v12;
        v12 = v8;
      }
      while (!v10);
    }
    v13 = (_QWORD *)v9[1];
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = (_QWORD *)v9[2];
        v10 = *v14 == (_QWORD)v9;
        v9 = v14;
      }
      while (!v10);
    }
    v9 = v14;
    if (v8 == (_QWORD *)(a1 + 32))
      return 1;
  }
  return result;
}

CA::Display::Display *CA::Display::Display::Display(CA::Display::Display *this, CFTypeRef cf, const __CFString *a3, int a4)
{
  CFTypeRef v7;
  char *v13;

  *(_QWORD *)this = off_1E15999B0;
  *((_DWORD *)this + 18) = 0;
  *((_QWORD *)this + 11) = CFRetain(cf);
  v7 = CFRetain(a3);
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 12) = v7;
  *((_DWORD *)this + 26) = a4;
  *((_QWORD *)this + 24) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 22) = (char *)this + 184;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_DWORD *)this + 58) = 1065353216;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)this + 37) = _D0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_DWORD *)this + 90) = 0;
  *((_WORD *)this + 184) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *(_QWORD *)((char *)this + 333) = 0;
  *((_QWORD *)this + 49) = 0x3FF0000000000000;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_DWORD *)this + 104) = 1;
  *(_OWORD *)((char *)this + 420) = 0u;
  *(_OWORD *)((char *)this + 436) = 0u;
  *(_QWORD *)((char *)this + 452) = 0;
  *((_QWORD *)this + 58) = &off_1E1599990;
  *((_DWORD *)this + 118) = a4;
  *(_OWORD *)((char *)this + 476) = 0u;
  *(_OWORD *)((char *)this + 492) = 0u;
  *(_OWORD *)((char *)this + 508) = 0u;
  *(_OWORD *)((char *)this + 524) = 0u;
  *(_OWORD *)((char *)this + 540) = 0u;
  *(_OWORD *)((char *)this + 556) = 0u;
  *(_OWORD *)((char *)this + 604) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_QWORD *)this + 86) = CAHostTimeWithTime(0.0166666667);
  *((_BYTE *)this + 696) = 10;
  *((_BYTE *)this + 697) &= 0xE2u;
  v13 = (char *)operator new(0x180uLL);
  *((_QWORD *)this + 72) = v13;
  *((_QWORD *)this + 73) = v13;
  *((_QWORD *)this + 74) = v13 + 384;
  __asm { FMOV            V0.4S, #1.0 }
  *((_OWORD *)this + 44) = _Q0;
  *((_DWORD *)this + 180) = 1;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 724) = 0u;
  *((_WORD *)this + 380) = *((_WORD *)this + 380) & 0xF180 | 0x400;
  x_thread_init_mutex((pthread_mutex_t *)((char *)this + 8), 1);
  return this;
}

void sub_184569C7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  CA::WindowServer::Display::ModeSet::~ModeSet((CA::WindowServer::Display::ModeSet *)(v1 + 152));
  _Unwind_Resume(a1);
}

uint64_t x_thread_init_mutex(pthread_mutex_t *a1, char a2)
{
  pthread_mutexattr_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) == 0)
    return pthread_mutex_init(a1, 0);
  v4.__sig = 0;
  *(_QWORD *)v4.__opaque = 0;
  pthread_mutexattr_init(&v4);
  pthread_mutexattr_settype(&v4, 2);
  pthread_mutex_init(a1, &v4);
  return pthread_mutexattr_destroy(&v4);
}

uint64_t CA_CFDictionaryGetInt(const __CFDictionary *a1, const void *a2)
{
  const void *Value;

  if (a1 && (Value = CFDictionaryGetValue(a1, a2)) != 0)
    return CA_CFIntValue(Value);
  else
    return 0;
}

void CA::Display::DisplayTimingsControl::set_timings_shmem(os_unfair_lock_s *this, CA::Render::Shmem *a2)
{
  os_unfair_lock_s *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  CA::Render::Shmem *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v4 = this + 3;
  os_unfair_lock_lock(this + 3);
  v5 = *(unsigned int **)&this[4]._os_unfair_lock_opaque;
  if (v5)
  {
    *(_QWORD *)&this[4]._os_unfair_lock_opaque = 0;
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
    *(_QWORD *)&this[6]._os_unfair_lock_opaque = 0;
  }
  if (a2)
  {
    v9 = *(CA::Render::Shmem **)&this[4]._os_unfair_lock_opaque;
    if (v9 != a2)
    {
      if (v9)
      {
        v10 = (unsigned int *)((char *)v9 + 8);
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          (*(void (**)(CA::Render::Shmem *))(*(_QWORD *)v9 + 16))(v9);
      }
      v13 = (unsigned int *)((char *)a2 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      if (!v14)
      {
        a2 = 0;
        do
          v15 = __ldaxr(v13);
        while (__stlxr(v15 - 1, v13));
      }
      *(_QWORD *)&this[4]._os_unfair_lock_opaque = a2;
    }
    *(_QWORD *)&this[6]._os_unfair_lock_opaque = *((_QWORD *)a2 + 3);
  }
  os_unfair_lock_unlock(v4);
}

void sub_184569F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CA::WindowServer::Display::ModeSet::~ModeSet((CA::WindowServer::Display::ModeSet *)&a9);
  _Unwind_Resume(a1);
}

void CA::Display::Display::available_modes(CA::Display::Display *this, os_unfair_lock_s *a2)
{
  os_unfair_lock_s *v4;

  v4 = a2 + 18;
  os_unfair_lock_lock(a2 + 18);
  CA::WindowServer::Display::ModeSet::ModeSet(this, (const CA::WindowServer::Display::ModeSet *)&a2[38]);
  os_unfair_lock_unlock(v4);
}

void sub_18456A008(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

CA::WindowServer::Display::ModeSet *CA::WindowServer::Display::ModeSet::ModeSet(CA::WindowServer::Display::ModeSet *this, const CA::WindowServer::Display::ModeSet *a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char **v8;
  const CA::WindowServer::Display::ModeSet *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t *v21;
  char *v22;
  const CA::WindowServer::Display::ModeSet *v23;
  const CA::WindowServer::Display::ModeSet *v24;
  uint64_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *i;
  unint64_t v34;
  _QWORD *v35;
  __int128 v36;
  float v37;
  float v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  size_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v47[2];

  v47[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v5 = *(const void **)a2;
  v4 = *((_QWORD *)a2 + 1);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    std::vector<CA::WindowServer::Display::Mode>::__vallocate[abi:nn180100](this, v6 >> 3);
    v7 = (char *)*((_QWORD *)this + 1);
    memmove(v7, v5, v6);
    *((_QWORD *)this + 1) = &v7[v6];
  }
  *((_QWORD *)this + 4) = 0;
  v8 = (char **)((char *)this + 32);
  *((_QWORD *)this + 3) = (char *)this + 32;
  *((_QWORD *)this + 5) = 0;
  v9 = (const CA::WindowServer::Display::ModeSet *)*((_QWORD *)a2 + 3);
  if (v9 != (const CA::WindowServer::Display::ModeSet *)((char *)a2 + 32))
  {
    do
    {
      v47[0] = 0;
      v10 = *v8;
      v11 = (char *)this + 32;
      if (*((char ***)this + 3) == v8)
        goto LABEL_21;
      v12 = *v8;
      v13 = (char *)this + 32;
      if (v10)
      {
        do
        {
          v11 = v12;
          v12 = (char *)*((_QWORD *)v12 + 1);
        }
        while (v12);
      }
      else
      {
        do
        {
          v11 = (char *)*((_QWORD *)v13 + 2);
          v16 = *(_QWORD *)v11 == (_QWORD)v13;
          v13 = v11;
        }
        while (v16);
      }
      v14 = *((unsigned __int16 *)v11 + 13);
      v15 = *((unsigned __int16 *)v9 + 13);
      v16 = v14 == v15;
      if (v14 >= v15)
        v17 = 1;
      else
        v17 = -1;
      if (v16)
      {
        v18 = *((unsigned __int16 *)v11 + 14);
        v19 = *((unsigned __int16 *)v9 + 14);
        v20 = v18 == v19;
        v17 = v18 >= v19 ? 1 : -1;
        if (v20)
          v17 = 0;
      }
      if (v17 < 0)
      {
LABEL_21:
        if (v10)
        {
          v47[0] = (uint64_t)v11;
          v21 = (uint64_t *)(v11 + 8);
        }
        else
        {
          v47[0] = (uint64_t)this + 32;
          v21 = (uint64_t *)((char *)this + 32);
        }
      }
      else
      {
        v21 = std::__tree<std::tuple<unsigned short,unsigned short>>::__find_equal<std::tuple<unsigned short,unsigned short>>((uint64_t)this + 24, v47, v15, *((_WORD *)v9 + 14));
      }
      if (!*v21)
      {
        v22 = (char *)operator new(0x20uLL);
        *(_DWORD *)(v22 + 26) = *(_DWORD *)((char *)v9 + 26);
        std::__tree<std::tuple<unsigned short,unsigned short>>::__insert_node_at((uint64_t **)this + 3, v47[0], (uint64_t **)v21, (uint64_t *)v22);
      }
      v23 = (const CA::WindowServer::Display::ModeSet *)*((_QWORD *)v9 + 1);
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = *(const CA::WindowServer::Display::ModeSet **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (const CA::WindowServer::Display::ModeSet *)*((_QWORD *)v9 + 2);
          v16 = *(_QWORD *)v24 == (_QWORD)v9;
          v9 = v24;
        }
        while (!v16);
      }
      v9 = v24;
    }
    while (v24 != (const CA::WindowServer::Display::ModeSet *)((char *)a2 + 32));
  }
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  v25 = (uint64_t *)((char *)this + 48);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)this + 48, *((_QWORD *)a2 + 7));
  v26 = (_QWORD *)*((_QWORD *)a2 + 8);
  if (v26)
  {
    v27 = (_QWORD *)((char *)this + 64);
    v28 = *((_QWORD *)this + 7);
    do
    {
      v29 = v26[2];
      if (v28)
      {
        v30 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
        v30.i16[0] = vaddlv_u8(v30);
        if (v30.u32[0] > 1uLL)
        {
          v31 = v26[2];
          if (v29 >= v28)
            v31 = v29 % v28;
        }
        else
        {
          v31 = (v28 - 1) & v29;
        }
        v32 = *(_QWORD **)(*v25 + 8 * v31);
        if (v32)
        {
          for (i = (_QWORD *)*v32; i; i = (_QWORD *)*i)
          {
            v34 = i[1];
            if (v34 == v29)
            {
              if (i[2] == v29)
                goto LABEL_73;
            }
            else
            {
              if (v30.u32[0] > 1uLL)
              {
                if (v34 >= v28)
                  v34 %= v28;
              }
              else
              {
                v34 &= v28 - 1;
              }
              if (v34 != v31)
                break;
            }
          }
        }
      }
      else
      {
        v31 = 0;
      }
      v35 = operator new(0x28uLL);
      *v35 = 0;
      v35[1] = v29;
      v36 = *((_OWORD *)v26 + 1);
      v35[4] = v26[4];
      *((_OWORD *)v35 + 1) = v36;
      v37 = (float)(unint64_t)(*((_QWORD *)this + 9) + 1);
      v38 = *((float *)this + 20);
      if (!v28 || (float)(v38 * (float)v28) < v37)
      {
        v39 = (v28 & (v28 - 1)) != 0;
        if (v28 < 3)
          v39 = 1;
        v40 = v39 | (2 * v28);
        v41 = vcvtps_u32_f32(v37 / v38);
        if (v40 <= v41)
          v42 = v41;
        else
          v42 = v40;
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)this + 48, v42);
        v28 = *((_QWORD *)this + 7);
        if ((v28 & (v28 - 1)) != 0)
        {
          if (v29 >= v28)
            v31 = v29 % v28;
          else
            v31 = v29;
        }
        else
        {
          v31 = (v28 - 1) & v29;
        }
      }
      v43 = *v25;
      v44 = *(_QWORD **)(*v25 + 8 * v31);
      if (v44)
      {
        *v35 = *v44;
      }
      else
      {
        *v35 = *v27;
        *v27 = v35;
        *(_QWORD *)(v43 + 8 * v31) = v27;
        if (!*v35)
          goto LABEL_72;
        v45 = *(_QWORD *)(*v35 + 8);
        if ((v28 & (v28 - 1)) != 0)
        {
          if (v45 >= v28)
            v45 %= v28;
        }
        else
        {
          v45 &= v28 - 1;
        }
        v44 = (_QWORD *)(*v25 + 8 * v45);
      }
      *v44 = v35;
LABEL_72:
      ++*((_QWORD *)this + 9);
LABEL_73:
      v26 = (_QWORD *)*v26;
    }
    while (v26);
  }
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  return this;
}

void sub_18456A40C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(v2);
  std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*(_QWORD **)(v1 + 32));
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void CA::WindowServer::Display::ModeSet::add_mode(CA::WindowServer::Display::ModeSet *this, const CA::WindowServer::Display::Mode *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t **v22;
  char *v23;
  uint64_t v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  if ((unint64_t)v5 >= v4)
  {
    v7 = ((uint64_t)v5 - *(_QWORD *)this) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      abort();
    v8 = v4 - *(_QWORD *)this;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v10);
    else
      v11 = 0;
    v12 = (_QWORD *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    *v12 = *(_QWORD *)a2;
    v6 = v12 + 1;
    v15 = *(char **)this;
    v14 = (char *)*((_QWORD *)this + 1);
    if (v14 != *(char **)this)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *--v12 = v16;
      }
      while (v14 != v15);
      v14 = *(char **)this;
    }
    *(_QWORD *)this = v12;
    *((_QWORD *)this + 1) = v6;
    *((_QWORD *)this + 2) = v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v5 = *(_QWORD *)a2;
    v6 = v5 + 1;
  }
  *((_QWORD *)this + 1) = v6;
  v17 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 0x40000000000000) == 0)
  {
    v18 = (uint64_t **)((char *)this + 24);
    v19 = *(_QWORD *)a2 & 0x3FFFLL;
    v20 = (v17 >> 14) & 0x3FFF;
    v24[0] = 0;
    v21 = std::__tree<std::tuple<unsigned short,unsigned short>>::__find_equal<std::tuple<unsigned short,unsigned short>>((uint64_t)v18, v24, v17 & 0x3FFF, (v17 >> 14) & 0x3FFF);
    if (!*v21)
    {
      v22 = (uint64_t **)v21;
      v23 = (char *)operator new(0x20uLL);
      *(_DWORD *)(v23 + 26) = v19 | (v20 << 16);
      std::__tree<std::tuple<unsigned short,unsigned short>>::__insert_node_at(v18, v24[0], v22, (uint64_t *)v23);
    }
  }
}

uint64_t CARenderServerGetFrameCounterByIndex(mach_port_name_t a1, unsigned int a2)
{
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  const void *Value;
  uint64_t v5;

  v2 = (const __CFDictionary *)CARenderServerCopyDictionaryByIndex(a1, a2);
  if (!v2)
    return 0;
  v3 = v2;
  Value = CFDictionaryGetValue(v2, CFSTR("kCADisplayFrameCount"));
  if (Value)
    v5 = CA_CFIntValue(Value);
  else
    v5 = 0;
  CFRelease(v3);
  return v5;
}

uint64_t CARenderServerGetDirtyFrameCountByIndex(mach_port_name_t a1, unsigned int a2)
{
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  const void *Value;
  uint64_t v5;

  v2 = (const __CFDictionary *)CARenderServerCopyDictionaryByIndex(a1, a2);
  if (!v2)
    return 0;
  v3 = v2;
  Value = CFDictionaryGetValue(v2, CFSTR("kCADisplayDirtyFrameCount"));
  if (Value)
    v5 = CA_CFIntValue(Value);
  else
    v5 = 0;
  CFRelease(v3);
  return v5;
}

CFTypeRef CARenderServerCopyDictionaryByIndex(mach_port_name_t a1, unsigned int a2)
{
  const __CFArray *v3;
  const __CFArray *v4;
  const void *ValueAtIndex;
  CFTypeRef v6;

  v3 = (const __CFArray *)CARenderServerCopyDictionaries(a1);
  if (!v3)
    return 0;
  v4 = v3;
  if (CFArrayGetCount(v3) <= a2)
  {
    v6 = 0;
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v4, a2);
    v6 = CFRetain(ValueAtIndex);
  }
  CFRelease(v4);
  return v6;
}

CFPropertyListRef CARenderServerCopyDictionaries(mach_port_name_t a1)
{
  mach_port_name_t ServerPort;
  int v3;
  int v4;
  const __CFAllocator *v5;
  const UInt8 *v6;
  mach_vm_size_t v7;
  const __CFData *v8;
  CFPropertyListRef v9;
  unsigned int length;
  const UInt8 *length_4[2];

  length_4[1] = *(const UInt8 **)MEMORY[0x1E0C80C00];
  ServerPort = a1;
  if (!a1)
  {
    ServerPort = CARenderServerGetServerPort(0);
    if (!ServerPort)
      return 0;
  }
  length_4[0] = 0;
  length = 0;
  v3 = _CASGetDisplays(ServerPort, length_4, &length);
  if (v3 == -81182719)
  {
    x_log_crash("Unentitled call to server!");
    abort();
  }
  v4 = v3;
  if (!a1)
  {
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], ServerPort);
    if (!v4)
      goto LABEL_8;
    return 0;
  }
  if (v3)
    return 0;
LABEL_8:
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE18];
  v6 = length_4[0];
  v7 = length;
  v8 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE18], length_4[0], length);
  mach_vm_deallocate(*MEMORY[0x1E0C83DA0], (mach_vm_address_t)v6, v7);
  if (!v8)
    return 0;
  v9 = CFPropertyListCreateWithData(v5, v8, 0, 0, 0);
  CFRelease(v8);
  return v9;
}

uint64_t _CASGetDisplays(int a1, _QWORD *a2, _DWORD *a3)
{
  mach_port_t reply_port;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int msg;
  _BYTE msg_4[60];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  memset(&msg_4[16], 0, 44);
  *(_OWORD *)msg_4 = 0u;
  *(_QWORD *)&msg_4[20] = *MEMORY[0x1E0C804E8];
  reply_port = mig_get_reply_port();
  *(_DWORD *)&msg_4[4] = a1;
  *(_DWORD *)&msg_4[8] = reply_port;
  msg = 5395;
  *(_QWORD *)&msg_4[12] = 0x9D2700000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)&msg);
    reply_port = *(_DWORD *)&msg_4[8];
  }
  v7 = mach_msg((mach_msg_header_t *)&msg, 3, 0x24u, 0x40u, reply_port, 0, 0);
  v8 = v7;
  if ((v7 - 268435458) <= 0xE && ((1 << (v7 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg_4[8]);
  }
  else
  {
    if (!(_DWORD)v7)
    {
      if (*(_DWORD *)&msg_4[16] == 71)
      {
        v8 = 4294966988;
      }
      else if (*(_DWORD *)&msg_4[16] == 40331)
      {
        if (msg < 0)
        {
          v8 = 4294966996;
          if (*(_DWORD *)&msg_4[20] == 1 && *(_DWORD *)msg_4 == 56 && !*(_DWORD *)&msg_4[4] && msg_4[35] == 1)
          {
            v9 = *(_DWORD *)&msg_4[36];
            if (*(_DWORD *)&msg_4[36] == *(_DWORD *)&msg_4[48])
            {
              v8 = 0;
              *a2 = *(_QWORD *)&msg_4[24];
              *a3 = v9;
              return v8;
            }
          }
        }
        else if (*(_DWORD *)msg_4 == 36)
        {
          v8 = 4294966996;
          if (*(_DWORD *)&msg_4[28])
          {
            if (*(_DWORD *)&msg_4[4])
              v8 = 4294966996;
            else
              v8 = *(unsigned int *)&msg_4[28];
          }
        }
        else
        {
          v8 = 4294966996;
        }
      }
      else
      {
        v8 = 4294966995;
      }
      mach_msg_destroy((mach_msg_header_t *)&msg);
      return v8;
    }
    mig_dealloc_reply_port(*(mach_port_t *)&msg_4[8]);
  }
  return v8;
}

void CA::Display::DisplayLink::display_refresh_rate_changed(CA::Display::DisplayLink *this, CA::Display::Display *a2)
{
  uint64_t i;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::Display::DisplayLink::_list_lock);
  for (i = CA::Display::DisplayLink::_list; i; i = *(_QWORD *)(i + 48))
  {
    if (*(CA::Display::DisplayLink **)(i + 8) == this)
      CA::Display::DisplayLink::update_timer((CA::Display::DisplayLink *)i, 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Display::DisplayLink::_list_lock);
}

void sub_18456AA58(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Display::DisplayLink::_list_lock);
  _Unwind_Resume(a1);
}

void CAFrameRateRangeGroupShouldUpdate(int a1)
{
  uint64_t i;
  uint64_t *j;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::FrameRateRangeGroup::_list_lock);
  for (i = CA::FrameRateRangeGroup::_list; i; i = *(_QWORD *)(i + 24))
  {
    if (*(_DWORD *)(i + 4) == a1)
    {
      os_unfair_lock_lock((os_unfair_lock_t)i);
      *(_QWORD *)(i + 104) = *(_QWORD *)(i + 96);
      for (j = *(uint64_t **)(i + 72); j; j = (uint64_t *)*j)
      {
        CA::FrameRateRangeGroup::add((CA::FrameRateRangeGroup *)i, *(CAFrameRateRange *)(j + 2));
        --j[6];
      }
      os_unfair_lock_unlock((os_unfair_lock_t)i);
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::FrameRateRangeGroup::_list_lock);
}

void sub_18456AB0C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::FrameRateRangeGroup::_list_lock);
  _Unwind_Resume(a1);
}

void CADynamicFrameRateSourceRecomputeFrameInterval(int a1)
{
  uint64_t i;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::DynamicFrameRateSource::_list_lock);
  for (i = CA::DynamicFrameRateSource::_list; i; i = *(_QWORD *)(i + 96))
  {
    if (*(_DWORD *)i == a1)
      CA::DynamicFrameRateSource::set_preferred_fps_range((CA::DynamicFrameRateSource *)i, *(CAFrameRateRange *)(i + 16), 0);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::DynamicFrameRateSource::_list_lock);
}

void sub_18456AB90(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::DynamicFrameRateSource::_list_lock);
  _Unwind_Resume(a1);
}

void sub_18456AD4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18456AFC8(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void CAML::ObjCCGColor::start(CAML::ObjCCGColor *this, CFURLRef *a2, CAML::State *a3, const char **a4)
{
  const char *v7;
  const __CFURL *v8;
  CGImage *v9;
  CGImage *v10;
  CFTypeID v11;
  int v12;
  CGImageSource *image_from_url;
  CFURLRef v14;
  const char *v15;
  CAML::Context *v16;
  size_t v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const __CFString *v21;
  CGColorSpaceRef v22;
  __int128 v23;
  CGPattern *v24;
  CGColorRef v25;
  CGImage *v26;
  CFTypeID v27;
  CGColorSpace *v28;
  const char *v29;
  const char *v30;
  CAML *v31;
  size_t v32;
  const char *v33;
  float v34;
  char v35[16];
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = CAML::Context::parse_src_attribute(a2, a4);
  if (v7)
  {
    v8 = (const __CFURL *)v7;
    v9 = (CGImage *)(*((uint64_t (**)(CFURLRef *, const char *))*a2 + 9))(a2, v7);
    if (v9 && (v10 = v9, v11 = CFGetTypeID(v9), v11 == CGImageGetTypeID()))
    {
      v12 = 0;
    }
    else
    {
      image_from_url = CAML::create_image_from_url(v8, 0);
      v14 = *a2;
      if (image_from_url)
      {
        v10 = image_from_url;
        (*((void (**)(CFURLRef *, const __CFURL *, CGImageSource *))v14 + 10))(a2, v8, image_from_url);
      }
      else
      {
        v26 = (CGImage *)(*((uint64_t (**)(CFURLRef *, const __CFURL *))v14 + 11))(a2, v8);
        if (!v26 || (v10 = v26, v27 = CFGetTypeID(v26), v27 != CGImageGetTypeID()))
        {
          CAML::Context::error((CAML::Context *)a2, "Failed to open image");
LABEL_22:
          CFRelease(v8);
          return;
        }
      }
      v12 = 1;
    }
    v36 = 0u;
    v37 = 0u;
    *(_OWORD *)v35 = 0u;
    v15 = CAML::memq_((const char *)a4, (const char **)"matrix", (const char *)1);
    if (v15)
    {
      v16 = (CAML::Context *)v15;
      v17 = strlen(v15);
      CAML::parse_affine_matrix((CGAffineTransform *)a2, v16, v35, (CAML::Context *)((char *)v16 + v17), v18);
    }
    else
    {
      v23 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
      *(_OWORD *)v35 = *MEMORY[0x1E0C9BAA8];
      v36 = v23;
      v37 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
    }
    v24 = (CGPattern *)CGPatternCreateWithImage2();
    if (v12)
      CGImageRelease(v10);
    if (v24)
    {
      v25 = CA_CGPatternColorCreate(v24);
      CAML::State::set_value(a3, v25);
      CGColorRelease(v25);
      CGPatternRelease(v24);
    }
    else
    {
      CAML::Context::error((CAML::Context *)a2, "Failed to create pattern from image");
    }
    goto LABEL_22;
  }
  v19 = CAML::memq_((const char *)a4, (const char **)"colorspace", (const char *)1);
  v20 = v19;
  if (!v19)
  {
    v28 = (CGColorSpace *)CAGetColorSpace(0x1Du);
    v22 = CGColorSpaceRetain(v28);
    if (v22)
      goto LABEL_12;
LABEL_24:
    v29 = "sRGB";
    if (v20)
      v29 = v20;
    CAML::Context::error((CAML::Context *)a2, "Unable to create colorspace: %s", v29);
    goto LABEL_27;
  }
  v21 = CFStringCreateWithFormat(0, 0, CFSTR("kCGColorSpace%s"), v19);
  v22 = CGColorSpaceCreateWithName(v21);
  CFRelease(v21);
  if (!v22)
    goto LABEL_24;
LABEL_12:
  CAML::State::set_value(a3, v22);
  CGColorSpaceRelease(v22);
LABEL_27:
  v30 = CAML::memq_((const char *)a4, (const char **)"opacity", (const char *)1);
  if (v30)
  {
    v31 = (CAML *)v30;
    v32 = strlen(v30);
    v34 = CAML::parse_real(v31, 0, (char **)((char *)v31 + v32), v33);
  }
  else
  {
    v34 = 1.0;
  }
  *(float *)a3 = v34;
}

BOOL CAObject_CAMLTypeSupportedForKey(uint64_t a1, const __CFString *a2)
{
  unsigned int v2;
  objc_class *v3;

  v2 = CAInternAtom(a2, 1);
  v3 = (objc_class *)objc_opt_class();
  return CAObject_typeForAtom(v3, v2, 0) != 0;
}

void CAML::`anonymous namespace'::sax_start_element(CAML::_anonymous_namespace_ *this, char *__s1, const unsigned __int8 *a3, char *a4, const unsigned __int8 *a5, int a6, const unsigned __int8 **a7, int a8, uint64_t a9, const unsigned __int8 **a10)
{
  uint64_t v10;
  CAML::_anonymous_namespace_ *v12;
  uint64_t v13;
  int v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  char **v21;
  uint64_t v22;
  const void *v23;
  size_t v24;
  size_t v25;
  char *v26;
  const char *v27;
  CAML::Context *v28;
  uint64_t v29;
  int v30;
  int v31;
  void (*v32)(uint64_t, uint64_t);
  char *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  CAML::Context *v39;
  const char *v40;
  const char *v41;
  void (*v42)(CAML::Context *, CAML::State *);
  int v43;
  uint64_t v44;
  int v45;
  void (*v46)(uint64_t, uint64_t);
  void (*v47)(uint64_t, uint64_t);
  const char *v48;
  void (*v49)(CAML::Context *, CAML::State *);
  char *v50;
  const char *v51;
  const char **v52;
  int v53;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  CAML::State *v58;
  const char *v59;
  void **v60;
  _QWORD *v61;
  CAML::State *v62;
  _BYTE v63[12];
  int v64;
  uint64_t v65;
  char **v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  LODWORD(v10) = (_DWORD)a7;
  v12 = this;
  v72 = *MEMORY[0x1E0C80C00];
  v13 = *((_QWORD *)this + 6);
  if (a4)
  {
    this = (CAML::_anonymous_namespace_ *)strcmp(a4, "http://www.apple.com/CoreAnimation/1.0");
    if ((_DWORD)this)
    {
      CAML::Context::error(v12, "Unknown namespace URI: %s", __s1);
      return;
    }
  }
  v67 = a9;
  if ((_DWORD)v10)
  {
    v14 = (2 * v10) | 1;
    v68 = 8 * v14;
    v65 = v13;
    if (v68 > 0x1000)
    {
      v16 = (char *)malloc_type_malloc(8 * v14, 0x118D7746uLL);
      v66 = (char **)v16;
    }
    else
    {
      MEMORY[0x1E0C80A78](this);
      v66 = (char **)&v63[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
      bzero(v66, v15);
    }
    v64 = 2 * v10;
    v19 = v10;
    if ((int)v10 >= 1)
    {
      v20 = v10;
      v21 = v66 + 1;
      v22 = v67 + 24;
      do
      {
        v23 = *(const void **)v22;
        v24 = *(_QWORD *)(v22 + 8) - *(_QWORD *)v22;
        if (v24 + 1 > 0x1000)
        {
          v16 = (char *)malloc_type_malloc(v24 + 1, 0x9A19A767uLL);
          v26 = v16;
          if (!v16)
          {
            v27 = "";
            goto LABEL_17;
          }
          v23 = *(const void **)v22;
        }
        else
        {
          MEMORY[0x1E0C80A78](v16);
          v26 = &v63[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
          bzero(v26, v25);
        }
        v16 = (char *)memcpy(v26, v23, v24);
        v26[v24] = 0;
        v27 = *(const char **)(v22 - 24);
LABEL_17:
        *(v21 - 1) = (char *)v27;
        *v21 = v26;
        v21 += 2;
        v22 += 40;
        --v20;
      }
      while (v20);
    }
    v13 = v65;
    v17 = (char *)v66;
    v66[v64] = 0;
    v18 = v68;
    LODWORD(v10) = v19;
    if (!__s1)
    {
LABEL_23:
      switch(*(_DWORD *)(v13 + 16))
      {
        case 0:
        case 7:
          goto LABEL_29;
        case 1:
          if (!strcmp(__s1, "caml"))
          {
            v29 = (uint64_t)v12;
            v30 = 5;
            v31 = 0;
            goto LABEL_30;
          }
          CAML::Context::push_state((uint64_t)v12, 0, 0, 0, 0);
          if (v17)
            goto LABEL_68;
          return;
        case 2:
          if (*__s1 != 112 || __s1[1])
            goto LABEL_39;
          v33 = (char *)CAML::memq_(v17, (const char **)"key", (const char *)1);
          if (!v33)
          {
LABEL_39:
            v33 = __s1;
          }
          v34 = (const char *)CAInternAtomWithCString(v33);
          if (*(_QWORD *)(v13 + 64) && (v35 = *(_QWORD *)(v13 + 48)) != 0)
            v36 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 40))(v35, *(_QWORD *)(v13 + 8));
          else
            v36 = 0;
          v37 = CAML::memq_(v17, (const char **)"type", (const char *)1);
          if (!v37)
            goto LABEL_53;
          v38 = (*(uint64_t (**)(CAML::_anonymous_namespace_ *, const char *))(*(_QWORD *)v12 + 32))(v12, v37);
          if (!v38)
          {
            goto LABEL_53;
          }
          v39 = (CAML::Context *)v38;
          if (v36
            && ((*(uint64_t (**)(CAML::_anonymous_namespace_ *, uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, v36, v38) & 1) == 0)
          {
LABEL_53:
            v39 = (CAML::Context *)v36;
          }
          v41 = CAML::memq_(v17, (const char **)"object", (const char *)1);
          if (v41)
          {
            if (v17)
              goto LABEL_68;
          }
          else
          {
            v29 = (uint64_t)v12;
            if (v39)
            {
              v43 = (int)v34;
              v44 = (uint64_t)v39;
LABEL_91:
              v62 = (CAML::State *)CAML::Context::push_state(v29, 6, v43, v44, (uint64_t)v32);
              CAML::State::start(v62, (const char **)v17);
              if (v17)
                goto LABEL_68;
            }
            else
            {
              v30 = 5;
              v31 = (int)v34;
LABEL_30:
              CAML::Context::push_state(v29, v30, v31, 0, (uint64_t)v32);
              if (v17)
                goto LABEL_68;
            }
          }
          break;
        case 3:
        case 4:
        case 5:
          if (*__s1 == 111 && !__s1[1])
          {
            v40 = CAML::memq_(v17, (const char **)"type", (const char *)1);
            if (v40)
              v28 = (CAML::Context *)(*(uint64_t (**)(CAML::_anonymous_namespace_ *, const char *))(*(_QWORD *)v12 + 32))(v12, v40);
            else
              v28 = 0;
          }
          else
          {
            v28 = (CAML::Context *)(*(uint64_t (**)(CAML::_anonymous_namespace_ *, char *, const unsigned __int8 *))(*(_QWORD *)v12 + 32))(v12, __s1, a3);
            if (!v28)
          }
          v45 = *(_DWORD *)(v13 + 16);
          if (v45 == 4)
          if (v45 == 3)
          else
            v47 = v46;
          v48 = CAML::memq_(v17, (const char **)"object", (const char *)1);
          if (!v48)
          {
            if (v28)
            {
              v29 = (uint64_t)v12;
              v43 = 0;
              v44 = (uint64_t)v28;
              v32 = v47;
              goto LABEL_91;
            }
LABEL_29:
            v29 = (uint64_t)v12;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            goto LABEL_30;
          }
LABEL_67:
          if (!v17)
            return;
          goto LABEL_68;
        case 6:
          goto LABEL_29;
        default:
          goto LABEL_67;
      }
      return;
    }
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!__s1)
      goto LABEL_23;
  }
  if (*__s1 != 115 || strcmp(__s1, "script"))
    goto LABEL_23;
  (*(void (**)(CAML::_anonymous_namespace_ *, char *))(*(_QWORD *)v12 + 48))(v12, v17);
  if (v17)
  {
LABEL_68:
    if (*(_DWORD *)(*((_QWORD *)v12 + 6) + 16) == 2)
    {
      v68 = v18;
      v69 = 0;
      v70 = 0;
      v71 = 0;
      v50 = v17;
      v51 = *(const char **)v17;
      if (*(_QWORD *)v17)
      {
        v52 = (const char **)(v17 + 16);
        do
        {
          if (*v51)
          {
            v53 = CAInternAtomWithCString(v51);
            v54 = (_QWORD *)*((_QWORD *)v12 + 6);
            if (v54[8]
              && (v55 = v53, (v56 = v54[6]) != 0)
              && (v57 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 40))(v56, v54[1])) != 0)
            {
              v69 = "value";
              v70 = (uint64_t)*(v52 - 1);
              v71 = 0;
              CAML::State::start(v58, (const char **)&v69);
              CAML::Context::pop_state(v12);
              *(v52 - 2) = "";
            }
            else if (strcmp(v51, "final") && strcmp(v51, "mica_expanded"))
            {
            }
          }
          v59 = *v52;
          v52 += 2;
          v51 = v59;
        }
        while (v59);
      }
      v18 = v68;
      v17 = v50;
    }
    if ((int)v10 >= 1)
    {
      v60 = (void **)(v17 + 8);
      v61 = (_QWORD *)(v67 + 32);
      v10 = v10;
      do
      {
        if ((unint64_t)(*v61 - *(v61 - 1) - 4096) <= 0xFFFFFFFFFFFFEFFELL)
          free(*v60);
        v60 += 2;
        v61 += 5;
        --v10;
      }
      while (v10);
    }
    if (v18 > 0x1000)
      free(v17);
  }
}

uint64_t CAML::ObjCContext::lookup_type(CAML::ObjCContext *this, const char *a2)
{
  uint64_t v4;
  __CFString *v5;
  Class v6;
  Class v7;
  char *v8;
  malloc_zone_t *malloc_zone;
  _QWORD *v10;
  char v11;
  char v12;
  char v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  v4 = x_hash_table_lookup(*((_QWORD *)this + 13), (uint64_t)a2, 0);
  if (v4)
    return v4;
  v5 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE18], a2, 0x8000100u);
  v6 = NSClassFromString(&v5->isa);
  if (!v6)
  {
    if ((*((_BYTE *)this + 112) & 8) != 0)
    {
      v17 = (void *)MEMORY[0x186DBE2E4]();
      v7 = (Class)objc_msgSend(*((id *)this + 12), "CAMLParser:didFailToFindClassWithName:", *((_QWORD *)this + 10), v5);
      objc_autoreleasePoolPop(v17);
      CFRelease(v5);
      if (v7)
        goto LABEL_4;
    }
    else
    {
      CFRelease(v5);
    }
    return 0;
  }
  v7 = v6;
  CFRelease(v5);
LABEL_4:
  v8 = strdup(a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v10 = malloc_type_zone_malloc(malloc_zone, 0x28uLL, 0x8BB15036uLL);
  v4 = (uint64_t)v10;
  if (v10)
  {
    v10[2] = 0;
    v10[3] = v7;
    *v10 = off_1E1599E08;
    v10[1] = v8;
    *((_BYTE *)v10 + 32) = v10[4] & 0xFE | objc_opt_respondsToSelector() & 1;
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v11 = 2;
    else
      v11 = 0;
    *(_BYTE *)(v4 + 32) = *(_BYTE *)(v4 + 32) & 0xFD | v11;
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v12 = 4;
    else
      v12 = 0;
    *(_BYTE *)(v4 + 32) = *(_BYTE *)(v4 + 32) & 0xFB | v12;
    if (-[objc_class instancesRespondToSelector:](v7, "instancesRespondToSelector:", sel_CAMLParser_setValue_forKey_))v13 = 8;
    else
      v13 = 0;
    *(_BYTE *)(v4 + 32) = *(_BYTE *)(v4 + 32) & 0xF7 | v13;
    v14 = (int *)*((_QWORD *)this + 13);
    v15 = (uint64_t)v8;
    v16 = v4;
  }
  else
  {
    v14 = (int *)*((_QWORD *)this + 13);
    v15 = (uint64_t)v8;
    v16 = 0;
  }
  hash_table_modify(v14, v15, v16, 0);
  return v4;
}

void sub_18456BE80(_Unwind_Exception *a1)
{
  void *v1;

  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

void CAML::Context::pop_state(CAML::Context *this)
{
  CAML::State *v1;
  _QWORD *v2;
  _QWORD *v3;
  malloc_zone_t *malloc_zone;
  const void *v5;
  const void *v6;
  malloc_zone_t *v7;

  v1 = (CAML::State *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)v1 + 3);
  CAML::State::finish(v1);
  v2 = (_QWORD *)*((_QWORD *)v1 + 26);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(malloc_zone, v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = (const void *)*((_QWORD *)v1 + 4);
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)v1 + 8);
  if (v6)
    CFRelease(v6);
  v7 = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(v7, v1);
}

_QWORD *CAML::Context::push_state(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  malloc_zone_t *malloc_zone;
  _QWORD *result;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = malloc_type_zone_malloc(malloc_zone, 0xE8uLL, 0x8BB15036uLL);
  if (result)
  {
    result[1] = a1;
    *((_DWORD *)result + 4) = a2;
    result[4] = 0;
    *((_DWORD *)result + 10) = a3;
    result[6] = a4;
    result[7] = a5;
    result[8] = 0;
    result[26] = 0;
    result[27] = 0;
    result[25] = 0;
    *((_BYTE *)result + 224) &= ~1u;
  }
  result[3] = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void CAML::State::start(CAML::State *this, const char **a2)
{
  const char *v4;
  const char *v5;
  int v6;
  const char *v7;
  const __CFString *v8;
  const void *v9;

  *((_QWORD *)this + 27) = a2;
  (*(void (**)(_QWORD, _QWORD, CAML::State *, const char **))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), *((_QWORD *)this + 1), this, a2);
  *((_QWORD *)this + 27) = 0;
  v4 = CAML::memq_((const char *)a2, (const char **)"value", (const char *)1);
  if (v4)
  {
    v5 = v4;
    v6 = strlen(v4);
    CAML::State::characters((char *)this, v5, v6);
    *((_BYTE *)this + 224) |= 1u;
  }
  v7 = CAML::memq_((const char *)a2, (const char **)"id", (const char *)1);
  if (v7)
  {
    v8 = CFStringCreateWithCString(0, v7, 0x8000100u);
    *((_QWORD *)this + 4) = v8;
    if (!v8)
      return;
  }
  else
  {
    v8 = (const __CFString *)*((_QWORD *)this + 4);
    if (!v8)
      return;
  }
  v9 = (const void *)*((_QWORD *)this + 8);
  if (v9)
    CAML::Context::set_object(*((CAML::Context **)this + 1), v8, *((const CAML::Type **)this + 6), v9);
}

const char *CAML::memq_(const char *this, const char **__s2, const char *a3)
{
  char *v3;
  int v4;
  int v6;
  const char *v7;

  if (this)
  {
    v3 = (char *)this;
    this = *(const char **)this;
    if (this)
    {
      v4 = (int)a3;
      v6 = *(unsigned __int8 *)__s2;
      while (*(unsigned __int8 *)this != v6 || strcmp(this, (const char *)__s2))
      {
        v7 = (const char *)*((_QWORD *)v3 + 2);
        v3 += 16;
        this = v7;
        if (!v7)
          return this;
      }
      if (v4)
        *(_QWORD *)v3 = "";
      return (const char *)*((_QWORD *)v3 + 1);
    }
  }
  return this;
}

char *CAML::State::characters(char *this, const char *__src, int a3)
{
  _QWORD *v3;
  unsigned int v4;
  const char *v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  malloc_zone_t *malloc_zone;
  uint64_t v10;

  if ((this[224] & 1) == 0)
  {
    v3 = this;
    if (*((_DWORD *)this + 4) >= 6u)
    {
      v4 = a3;
      v5 = __src;
      v6 = *((_QWORD *)this + 25);
      if (127 - (int)v6 >= a3)
        v7 = a3;
      else
        v7 = (127 - v6);
      if ((int)v7 >= 1)
      {
        this = (char *)memcpy(&this[v6 + 72], __src, v7);
        v8 = v3[25] + v7;
        v3[25] = v8;
        *((_BYTE *)v3 + v8 + 72) = 0;
        v5 += v7;
        v4 -= v7;
      }
      if ((int)v4 >= 1)
      {
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        this = (char *)malloc_type_zone_malloc(malloc_zone, v4 + 16, 0x81ECB6CuLL);
        if (this)
        {
          v10 = v3[26];
          v3[26] = this;
          *(_QWORD *)this = v10;
          *((_QWORD *)this + 1) = v4;
          return (char *)memcpy(this + 16, v5, v4);
        }
      }
    }
  }
  return this;
}

void *CAML::ObjCNSObject::property_type(CAML::ObjCNSObject *this, CAML::Context *a2, void *a3, unsigned int a4)
{
  void *result;

  result = (void *)objc_msgSend(a3, "CAMLTypeForKey:", CAAtomGetString(a4));
  if (result)
    return (void *)(*(uint64_t (**)(CAML::Context *, uint64_t))(*(_QWORD *)a2 + 32))(a2, objc_msgSend(result, "UTF8String"));
  return result;
}

const __CFString *CAObject_CAMLTypeForKey(uint64_t a1, const __CFString *a2)
{
  unsigned int v2;
  objc_class *v3;
  const __CFString *result;
  CFStringRef v5[2];

  v5[1] = *(CFStringRef *)MEMORY[0x1E0C80C00];
  v5[0] = 0;
  v2 = CAInternAtom(a2, 1);
  v3 = (objc_class *)objc_opt_class();
  switch((unsigned __int16)CAObject_typeForAtom(v3, v2, v5))
  {
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
      result = v5[0];
      break;
    case 6u:
    case 7u:
    case 8u:
      result = CFSTR("BOOL");
      break;
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
      result = CFSTR("integer");
      break;
    case 0x11u:
    case 0x12u:
      result = CFSTR("real");
      break;
    case 0x13u:
      result = CFSTR("CGPoint");
      break;
    case 0x14u:
      result = CFSTR("CGSize");
      break;
    case 0x15u:
      result = CFSTR("CGRect");
      break;
    case 0x16u:
      result = CFSTR("CATransform3D");
      break;
    case 0x17u:
      result = CFSTR("CGAffineTransform");
      break;
    case 0x18u:
      result = CFSTR("CAPoint3D");
      break;
    case 0x19u:
      result = CFSTR("CACornerRadii");
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

unsigned int *CAObject_typeForAtom(objc_class *a1, unsigned int a2, CFStringRef *a3)
{
  uint64_t *v5;
  unsigned int *result;
  unsigned int *v7;
  CFStringRef v8;
  const char *v9;

  v5 = (uint64_t *)classDescription(a1);
  result = propertyInfoForAtom(v5, a2, 0);
  if (result)
  {
    v7 = result;
    if (a3)
    {
      v8 = (CFStringRef)*((_QWORD *)result + 4);
      if (!v8)
      {
        v9 = (const char *)*((_QWORD *)v7 + 3);
        if (v9)
        {
          v8 = CFStringCreateWithCString(0, v9, 0x8000100u);
          *((_QWORD *)v7 + 4) = v8;
        }
        else
        {
          v8 = 0;
        }
      }
      *a3 = v8;
    }
    return (unsigned int *)*((unsigned __int16 *)v7 + 2);
  }
  return result;
}

uint64_t CAML::ObjCNSObject::start(uint64_t this, CAML::Context *a2, CAML::State *a3, const char **a4)
{
  uint64_t v6;
  char v7;

  v6 = *((_QWORD *)a2 + 10);
  v7 = *(_BYTE *)(this + 32);
  if ((v7 & 8) != 0)
  {
    *((_DWORD *)a3 + 4) = 2;
    v7 = *(_BYTE *)(this + 32);
  }
  if ((v7 & 1) != 0)
  {
    *((_QWORD *)a2 + 11) = a3;
    this = objc_msgSend(*(id *)(this + 24), "CAMLParserStartElement:", v6, a4);
    *((_QWORD *)a2 + 11) = 0;
  }
  return this;
}

uint64_t CAML::ObjCContext::check_type(CAML::ObjCContext *this, const CAML::Type *a2, const CAML::Type *a3)
{
  void *v3;
  void *v5;

  if (a2 == a3)
    return 1;
  v3 = (void *)*((_QWORD *)a2 + 3);
  if (!v3)
    return 0;
  v5 = (void *)*((_QWORD *)a3 + 3);
  if (!v5 || v3 == v5)
    return 1;
  if ((*(unsigned int (**)(const CAML::Type *))(*(_QWORD *)a2 + 32))(a2))
    return (*(uint64_t (**)(const CAML::Type *))(*(_QWORD *)a3 + 32))(a3);
  else
    return objc_msgSend(v5, "isSubclassOfClass:", v3);
}

uint64_t CAML::Type::is_numeric(CAML::Type *this)
{
  return 0;
}

void CAML::ObjCNSArray::start(uint64_t a1, uint64_t a2, CAML::State *a3)
{
  CFMutableArrayRef Mutable;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  CAML::State::set_value(a3, Mutable);
  CFRelease(Mutable);
  *((_DWORD *)a3 + 4) = 3;
}

void CAML::Context::set_object(CAML::Context *this, const __CFString *key, const CAML::Type *a3, const void *a4)
{
  const __CFDictionary *Mutable;
  _QWORD *Value;
  _QWORD *v10;
  const void *v11;
  __CFDictionary *v12;
  malloc_zone_t *malloc_zone;
  _QWORD *v14;
  const void *v15;

  Mutable = (const __CFDictionary *)*((_QWORD *)this + 8);
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE18], 0, MEMORY[0x1E0C9B390], 0);
    *((_QWORD *)this + 8) = Mutable;
  }
  Value = CFDictionaryGetValue(Mutable, key);
  if (Value)
  {
    v10 = Value;
    *Value = a3;
    v11 = (const void *)Value[1];
    if (v11 != a4)
    {
      CFRelease(v11);
      v10[1] = CFRetain(a4);
    }
  }
  else
  {
    v12 = (__CFDictionary *)*((_QWORD *)this + 8);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v14 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
    v15 = v14;
    if (v14)
    {
      *v14 = a3;
      v14[1] = CFRetain(a4);
    }
    CFDictionarySetValue(v12, key, v15);
  }
}

uint64_t CAML::Context::warning(CAML::Context *this, const char *a2, ...)
{
  va_list va;

  va_start(va, a2);
  return (*(uint64_t (**)(CAML::Context *, const char *, uint64_t *))(*(_QWORD *)this + 16))(this, a2, (uint64_t *)va);
}

void CAML::ObjCContext::warningv(id *this, const char *a2, char *a3)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  char *v7;
  int v8;
  uint64_t v9;
  char *v10;
  int v11;
  unsigned int v12;
  int v14;
  NSObject *v15;
  const char *v16;
  void **v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (((_BYTE)this[14] & 0x40) != 0)
  {
    objc_msgSend(this[12], "CAMLParser:formatWarningString:arguments:lineNumber:", this[10], a2, a3, *(int *)(*((_QWORD *)this[1] + 7) + 52));
    return;
  }
  x_log_begin();
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v4 = x_log_category_api;
    if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_DWORD *)(*((_QWORD *)this[1] + 7) + 52);
      *(_DWORD *)buf = 67109120;
      LODWORD(v19) = v5;
      _os_log_impl(&dword_184457000, v4, OS_LOG_TYPE_DEFAULT, "CAML warning:%d: ", buf, 8u);
    }
  }
  x_logv();
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v6 = x_log_category_api;
    if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184457000, v6, OS_LOG_TYPE_DEFAULT, "\n", buf, 2u);
    }
  }
  v17 = (void **)x_stream_pop_(0);
  v7 = x_stream_get(v17);
  v8 = 0;
  while (2)
  {
    v9 = 0;
    v10 = &v7[v8];
    v11 = -1;
    while (1)
    {
      if (v10[v9] == 10)
      {
        v11 = v9;
        goto LABEL_17;
      }
      if (!v10[v9])
        break;
LABEL_17:
      ++v9;
      v12 = 32512;
      if (v9 == 32512)
        goto LABEL_18;
    }
    v12 = v9;
LABEL_18:
    if (v11 <= -1 || v10[v12] == 0)
      v14 = v12;
    else
      v14 = v11 + 1;
    if (v14 > 0)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v15 = x_log_category_api;
        if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          if (v8)
            v16 = "continued...\n";
          else
            v16 = "";
          v19 = v16;
          v20 = 1040;
          v21 = v14;
          v22 = 2080;
          v23 = &v7[v8];
          _os_log_impl(&dword_184457000, v15, OS_LOG_TYPE_DEFAULT, "%s%.*s", buf, 0x1Cu);
        }
      }
      v8 += v14;
      continue;
    }
    break;
  }
  x_log_end_free_(v17);
}

void x_log_()
{
  x_logv();
}

void x_logv()
{
  char v0;
  const char *v1;
  const char *v2;
  char v3;
  va_list v4;
  uint64_t *v5;
  uint64_t *v6;
  char *v7;
  int v8;
  char *v9;
  os_log_type_t v10;
  char *v11;
  char *v12;
  va_list v13;
  uint8_t __str[4104];
  uint64_t v15;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v3 = v0;
  v15 = *MEMORY[0x1E0C80C00];
  v13 = v4;
  if (x_log_once[0] != -1)
    dispatch_once_f(x_log_once, 0, (dispatch_function_t)x_log_init);
  if (x_log_stream_slot)
  {
    v5 = (uint64_t *)pthread_getspecific(x_log_stream_slot);
    if (v5)
    {
      v6 = v5;
      v12 = 0;
      v7 = (char *)__str;
      v8 = vsnprintf((char *)__str, 0x1000uLL, v2, v13);
      if ((v8 - 1) > 0xFFE)
      {
        v8 = vasprintf(&v12, v2, v13);
        if (v8 < 1)
          goto LABEL_18;
        v7 = v12;
      }
      else
      {
        v12 = (char *)__str;
      }
      x_stream_write(*v6, v7, v8);
LABEL_18:
      v11 = v12;
      if (v12 == (char *)__str)
        return;
      goto LABEL_19;
    }
  }
  if (x_log_function)
  {
    *(_QWORD *)__str = v13;
    x_log_function(v2);
  }
  else if (x_log_file_handle)
  {
    *(_QWORD *)__str = v13;
    vfprintf((FILE *)x_log_file_handle, v2, v13);
  }
  v12 = 0;
  vasprintf(&v12, v2, v13);
  v9 = v12;
  if (v12)
  {
    v10 = (0x20111100000uLL >> (8 * v3));
    if (os_log_type_enabled(MEMORY[0x1E0C81028], v10))
    {
      *(_DWORD *)__str = 136315138;
      *(_QWORD *)&__str[4] = v9;
      _os_log_impl(&dword_184457000, MEMORY[0x1E0C81028], v10, "%s", __str, 0xCu);
      v9 = v12;
    }
    v11 = v9;
LABEL_19:
    free(v11);
  }
}

char *x_stream_write(uint64_t a1, void *__src, size_t __n)
{
  char *v6;
  unint64_t v7;
  BOOL v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  char *result;
  char *v15;

  v6 = *(char **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)&v6[__n] < v7)
    goto LABEL_7;
  v9 = v7 - *(_QWORD *)a1;
  v8 = v9 == 0;
  v10 = 2 * v9;
  v11 = 1024;
  if (!v8)
    v11 = v10;
  do
  {
    v12 = v11;
    v13 = *(_QWORD *)a1 - (_QWORD)v6 + v11;
    v11 *= 2;
  }
  while (v13 < __n);
  result = (char *)malloc_type_realloc(*(void **)a1, v12, 0xFFAC0152uLL);
  if (result)
  {
    v15 = result;
    v6 = &result[*(_QWORD *)(a1 + 8) - *(_QWORD *)a1];
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = &v15[v12];
LABEL_7:
    result = (char *)memcpy(v6, __src, __n);
    *(_QWORD *)(a1 + 8) += __n;
  }
  return result;
}

uint64_t x_log_begin()
{
  malloc_zone_t *malloc_zone;
  _QWORD *v1;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v1 = malloc_type_zone_malloc(malloc_zone, 0x18uLL, 0x8BB15036uLL);
  v1[1] = 0;
  v1[2] = 0;
  *v1 = 0;
  return x_stream_push((uint64_t)v1);
}

uint64_t x_stream_push(uint64_t a1)
{
  void *v2;
  malloc_zone_t *malloc_zone;
  _QWORD *v4;

  if (x_log_stream_once != -1)
    dispatch_once_f(&x_log_stream_once, 0, (dispatch_function_t)x_log_stream_init);
  v2 = pthread_getspecific(x_log_stream_slot);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v4 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
  *v4 = a1;
  v4[1] = v2;
  return pthread_setspecific(x_log_stream_slot, v4);
}

char *x_stream_get(_QWORD *a1)
{
  char *v2;
  unint64_t v3;
  _BYTE *v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  char *result;

  v2 = (char *)a1[1];
  v3 = a1[2];
  if ((unint64_t)(v2 + 1) < v3)
    goto LABEL_8;
  v4 = (_BYTE *)*a1;
  v6 = v3 - *a1;
  v5 = v6 == 0;
  v7 = 2 * v6;
  if (v5)
    v7 = 1024;
  v8 = v4 - v2;
  do
  {
    v9 = v7;
    v7 *= 2;
  }
  while (!(v8 + v9));
  result = (char *)malloc_type_realloc(v4, v9, 0xFFAC0152uLL);
  if (result)
  {
    v2 = &result[a1[1] - *a1];
    *a1 = result;
    a1[1] = v2;
    a1[2] = &result[v9];
LABEL_8:
    *v2 = 0;
    return (char *)*a1;
  }
  return result;
}

void x_log_end_free_(void **a1)
{
  void *v2;
  malloc_zone_t *malloc_zone;

  if (a1)
  {
    v2 = *a1;
    if (v2)
    {
      free(v2);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, a1);
  }
}

uint64_t x_stream_pop_(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  const void *v5;
  malloc_zone_t *malloc_zone;

  if (x_log_stream_once != -1)
    dispatch_once_f(&x_log_stream_once, 0, (dispatch_function_t)x_log_stream_init);
  v2 = (uint64_t *)pthread_getspecific(x_log_stream_slot);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = *v2;
  if (a1)
  {
    if (v4 != a1)
      return 0;
  }
  v5 = (const void *)v2[1];
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, v3);
  pthread_setspecific(x_log_stream_slot, v5);
  return v4;
}

const char *CAML::Context::parse_src_attribute(CFURLRef *this, const char **a2)
{
  const char *result;
  const UInt8 *v4;
  size_t v5;

  result = CAML::memq_((const char *)a2, (const char **)"src", (const char *)1);
  if (result)
  {
    v4 = (const UInt8 *)result;
    v5 = strlen(result);
    return (const char *)CFURLCreateWithBytes(0, v4, v5, 0x8000100u, this[2]);
  }
  return result;
}

_QWORD *CA::OGL::MetalContext::create_fragment_shader(void **this, const CA::OGL::MetalContext::FragmentShader::Spec *a2, int a3)
{
  void *v4;
  uint64_t v5;
  char i;
  void *shader_function;
  uint64_t v8;
  const char *v9;
  const char *v10;
  _BOOL4 v11;
  NSObject *v12;
  malloc_zone_t *malloc_zone;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const CA::OGL::MetalContext::FragmentShader::Spec *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int *v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  void *v38;
  unint64_t v39;
  char v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  unint64_t v53;
  int8x16_t v54;
  uint64_t v55;
  char v56;
  BOOL v57;
  void *v58;
  void *v59;
  unsigned int *v60;
  uint64_t v61;
  unint64_t v62;
  BOOL v63;
  unsigned int v64;
  _DWORD *v65;
  void *v66;
  void *v67;
  unint64_t v68;
  int8x16_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unint64_t v80;
  int v81;
  int v82;
  BOOL v83;
  int v84;
  BOOL v85;
  int v86;
  uint64_t v94;
  unint64_t v95;
  NSObject *v96;
  char v97;
  __CFString *v100;
  void *v101;
  id v102;
  uint8_t buf[4];
  uint64_t v104;
  __int16 v105;
  char *v106;
  char __str[16];
  __int128 v108;
  __int128 v109;
  int v110;
  char v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v101 = (void *)CA::OGL::MetalContext::FragmentShader::Spec::name(a2);
  v100 = (__CFString *)objc_msgSend(CA::OGL::MetalContext::fragment_shader_type_info[2* (CA::OGL::MetalContext::texture_function_info[8 * (*((_BYTE *)a2 + 14) & 0x7F) - (*((_BYTE *)a2 + 14) & 0x7F)] & 0x3F)], "stringByAppendingString:", CFSTR("_lph"));
  if (v100)
  {
    v4 = 0;
    goto LABEL_3;
  }
  v100 = off_1E15A6328[((unint64_t)*(unsigned __int16 *)((char *)a2 + 17) >> 11) & 1];
  if (!v100)
    __assert_rtn("create_fragment_shader", "ogl-metal.mm", 7045, "function_name != nil");
  v4 = (void *)objc_opt_new();
  v110 = 0;
  v108 = 0u;
  v109 = 0u;
  *(_OWORD *)__str = 0u;
  CA::OGL::MetalContext::FragmentShader::Spec::get_config((uint64_t)__str, (int *)a2);
  buf[0] = (*((_BYTE *)a2 + 17) & 4) != 0;
  objc_msgSend(CFSTR("fc_generic"), "UTF8String");
  objc_msgSend(v4, "setConstantValue:type:withName:", buf, 53, CFSTR("fc_generic"));
  buf[0] = (*((_BYTE *)a2 + 16) >> 3) & 3;
  objc_msgSend(CFSTR("fc_vertex_layout"), "UTF8String");
  objc_msgSend(v4, "setConstantValue:type:withName:", buf, 49, CFSTR("fc_vertex_layout"));
  buf[0] = (*((_BYTE *)a2 + 17) & 0x20) != 0;
  objc_msgSend(CFSTR("fc_framebuffer_fetch"), "UTF8String");
  objc_msgSend(v4, "setConstantValue:type:withName:", buf, 53, CFSTR("fc_framebuffer_fetch"));
  buf[0] = (*((_BYTE *)a2 + 16) >> 5) & 3;
  objc_msgSend(CFSTR("fc_attachment_count"), "UTF8String");
  objc_msgSend(v4, "setConstantValue:type:withName:", buf, 49, CFSTR("fc_attachment_count"));
  if ((*(_WORD *)((_BYTE *)a2 + 17) & 4) != 0)
  {
    LOBYTE(v16) = 1;
  }
  else
  {
    v15 = *((_BYTE *)a2 + 14) & 0x7F;
    if ((*(_WORD *)&CA::OGL::MetalContext::texture_function_info[8 * v15 - v15 + 5] & 0x20) != 0)
    {
      LOBYTE(v16) = 0;
    }
    else
    {
      v16 = CA::OGL::tex_image_count[v15];
      if (v16)
      {
        v17 = v16 - 1;
        v18 = a2;
        do
        {
          v19 = v17;
          v20 = *(_DWORD *)v18;
          v18 = (const CA::OGL::MetalContext::FragmentShader::Spec *)((char *)v18 + 7);
          LOBYTE(v16) = ((0x42000FFE00uLL >> v20) & 1) == 0;
          if (((0x42000FFE00uLL >> v20) & 1) == 0)
            break;
          --v17;
        }
        while (v19);
      }
    }
  }
  buf[0] = v16;
  objc_msgSend(CFSTR("fc_has_lod_bias"), "UTF8String");
  objc_msgSend(v4, "setConstantValue:type:withName:", buf, 53, CFSTR("fc_has_lod_bias"));
  buf[0] = (*(_WORD *)((_BYTE *)a2 + 17) & 0xC) != 0;
  objc_msgSend(CFSTR("fc_has_noise_scale"), "UTF8String");
  objc_msgSend(v4, "setConstantValue:type:withName:", buf, 53, CFSTR("fc_has_noise_scale"));
  if ((*(_WORD *)((_BYTE *)a2 + 17) & 4) != 0)
    goto LABEL_34;
  v21 = CA::OGL::tex_image_count[*((_BYTE *)a2 + 14) & 0x7F];
  if (!CA::OGL::tex_image_count[*((_BYTE *)a2 + 14) & 0x7F])
    goto LABEL_35;
  if ((CA::OGL::MetalContext::image_function_info[*(_DWORD *)a2 & 0x3F] & 2) != 0)
  {
LABEL_34:
    LOBYTE(v21) = 1;
    goto LABEL_35;
  }
  v22 = 0;
  v23 = (int *)((char *)a2 + 7);
  while (v21 - 1 != v22)
  {
    v24 = *v23;
    v23 = (int *)((char *)v23 + 7);
    ++v22;
    if ((CA::OGL::MetalContext::image_function_info[v24 & 0x3F] & 2) != 0)
      goto LABEL_97;
  }
  v22 = CA::OGL::tex_image_count[*((_BYTE *)a2 + 14) & 0x7F];
LABEL_97:
  LOBYTE(v21) = v22 < v21;
LABEL_35:
  buf[0] = v21;
  objc_msgSend(CFSTR("fc_has_ycbcr_matrix"), "UTF8String");
  objc_msgSend(v4, "setConstantValue:type:withName:", buf, 53, CFSTR("fc_has_ycbcr_matrix"));
  if ((*(_WORD *)((_BYTE *)a2 + 17) & 0x204) == 0)
  {
    v25 = *((_BYTE *)a2 + 14) & 0x7F;
    if ((*(_WORD *)&CA::OGL::MetalContext::texture_function_info[8 * v25 - v25 + 5] & 0x80) == 0)
    {
      v26 = CA::OGL::tex_image_count[v25];
      if (!v26)
      {
        v30 = 0;
        goto LABEL_41;
      }
      v27 = *(unsigned int *)a2;
      v28 = (v27 >> 19) & 0x1F;
      if (v28 != 11)
      {
        v29 = BYTE3(v27) & 0x1F;
        if (v29 != 11)
        {
          v74 = v27 | ((unint64_t)(*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) << 32);
          v75 = (v74 >> 29) & 0x7FFFFFF;
          v76 = (v74 >> 34) & 0x3FFFFF;
          v77 = (v74 >> 39) & 0x1FFFF;
          v78 = (v74 >> 44) & 0xFFF;
          v79 = (unsigned int *)((char *)a2 + 7);
          v80 = 1;
          v30 = 1;
          do
          {
            v81 = v75 & 0x1F;
            v82 = v76 & 0x1F;
            v83 = v81 == 11 || v82 == 11;
            v84 = v77 & 0x1F;
            v85 = v83 || v84 == 11;
            v86 = v78 & 0x1F;
            if (v85 || v86 == 12 || v84 == 12 || v82 == 12 || v81 == 12 || v29 == 12 || v86 == 11 || v28 == 12)
              break;
            v30 = v80 < v26;
            if (v26 == v80)
              break;
            v94 = *v79;
            v28 = (v94 >> 19) & 0x1F;
            if (v28 == 11)
              break;
            v95 = v94 | ((unint64_t)(*((unsigned __int16 *)v79 + 2) | (*((unsigned __int8 *)v79 + 6) << 16)) << 32);
            v78 = (v95 >> 44) & 0xFFF;
            v77 = (v95 >> 39) & 0x1FFFF;
            v76 = (v95 >> 34) & 0x3FFFFF;
            v75 = (v95 >> 29) & 0x7FFFFFF;
            v29 = BYTE3(v94) & 0x1F;
            v79 = (unsigned int *)((char *)v79 + 7);
            ++v80;
          }
          while (v29 != 11);
          goto LABEL_41;
        }
      }
    }
  }
  v30 = 1;
LABEL_41:
  buf[0] = v30;
  objc_msgSend(CFSTR("fc_has_gamma_luts"), "UTF8String");
  objc_msgSend(v4, "setConstantValue:type:withName:", buf, 53, CFSTR("fc_has_gamma_luts"));
  if ((*(_WORD *)((_BYTE *)a2 + 17) & 4) != 0)
    goto LABEL_48;
  v31 = CA::OGL::tex_image_count[*((_BYTE *)a2 + 14) & 0x7F];
  if (!CA::OGL::tex_image_count[*((_BYTE *)a2 + 14) & 0x7F])
    goto LABEL_49;
  if ((CA::OGL::MetalContext::texture_filter_info[((unint64_t)*(unsigned int *)a2 >> 9) & 0xF] & 2) != 0)
  {
LABEL_48:
    LOBYTE(v31) = 1;
  }
  else
  {
    v32 = 0;
    v33 = (unsigned int *)((char *)a2 + 7);
    while (v31 - 1 != v32)
    {
      v34 = *v33;
      v33 = (unsigned int *)((char *)v33 + 7);
      ++v32;
      if ((CA::OGL::MetalContext::texture_filter_info[((unint64_t)v34 >> 9) & 0xF] & 2) != 0)
        goto LABEL_99;
    }
    v32 = CA::OGL::tex_image_count[*((_BYTE *)a2 + 14) & 0x7F];
LABEL_99:
    LOBYTE(v31) = v32 < v31;
  }
LABEL_49:
  buf[0] = v31;
  objc_msgSend(CFSTR("fc_has_asg_77_weights"), "UTF8String");
  objc_msgSend(v4, "setConstantValue:type:withName:", buf, 53, CFSTR("fc_has_asg_77_weights"));
  buf[0] = (*(_WORD *)((_BYTE *)a2 + 17) & 0xC) != 0;
  objc_msgSend(CFSTR("fc_has_noise_tex"), "UTF8String");
  objc_msgSend(v4, "setConstantValue:type:withName:", buf, 53, CFSTR("fc_has_noise_tex"));
  if ((*(_WORD *)((_BYTE *)a2 + 17) & 4) != 0)
  {
LABEL_52:
    LOBYTE(v35) = 1;
    goto LABEL_53;
  }
  v35 = CA::OGL::tex_image_count[*((_BYTE *)a2 + 14) & 0x7F];
  if (CA::OGL::tex_image_count[*((_BYTE *)a2 + 14) & 0x7F])
  {
    if (((*(unsigned int *)a2 | ((unint64_t)(*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) << 32)) & 0x1FFFFFFF80000) == 0)
    {
      v70 = 0;
      v71 = (char *)a2 + 7;
      while (v35 - 1 != v70)
      {
        v72 = *((unsigned __int16 *)v71 + 2) | (v71[6] << 16);
        v73 = *(_DWORD *)v71;
        v71 += 7;
        ++v70;
        if (((v73 | (unint64_t)(v72 << 32)) & 0x1FFFFFFF80000) != 0)
          goto LABEL_102;
      }
      v70 = CA::OGL::tex_image_count[*((_BYTE *)a2 + 14) & 0x7F];
LABEL_102:
      LOBYTE(v35) = v70 < v35;
      goto LABEL_53;
    }
    goto LABEL_52;
  }
LABEL_53:
  buf[0] = v35;
  objc_msgSend(CFSTR("fc_has_color_params"), "UTF8String");
  objc_msgSend(v4, "setConstantValue:type:withName:", buf, 53, CFSTR("fc_has_color_params"));
  if ((*(_WORD *)((_BYTE *)a2 + 17) & 4) != 0)
    LOBYTE(v36) = 1;
  else
    v36 = (*(unsigned __int16 *)&CA::OGL::MetalContext::texture_function_info[8 * (*((_BYTE *)a2 + 14) & 0x7F)
                                                                            - (*((_BYTE *)a2 + 14) & 0x7F)
                                                                            + 5] >> 9) & 1;
  buf[0] = v36;
  objc_msgSend(CFSTR("fc_has_lut_tex"), "UTF8String");
  objc_msgSend(v4, "setConstantValue:type:withName:", buf, 53, CFSTR("fc_has_lut_tex"));
  v37 = 0;
  do
  {
    v38 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("fc_has_attachment_%d"), v37);
    buf[0] = 0;
    objc_msgSend(v38, "UTF8String");
    objc_msgSend(v4, "setConstantValue:type:withName:", buf, 53, v38);
    v37 = (v37 + 1);
  }
  while ((_DWORD)v37 != 3);
  if ((*(_WORD *)((_BYTE *)a2 + 17) & 4) == 0)
  {
    buf[0] = BYTE1(v109);
    objc_msgSend(CFSTR("fc_texture_function"), "UTF8String");
    objc_msgSend(v4, "setConstantValue:type:withName:", buf, 49, CFSTR("fc_texture_function"));
    buf[0] = BYTE2(v109);
    objc_msgSend(CFSTR("fc_blend_function"), "UTF8String");
    objc_msgSend(v4, "setConstantValue:type:withName:", buf, 49, CFSTR("fc_blend_function"));
    buf[0] = BYTE3(v109);
    objc_msgSend(CFSTR("fc_destination_function"), "UTF8String");
    objc_msgSend(v4, "setConstantValue:type:withName:", buf, 49, CFSTR("fc_destination_function"));
    buf[0] = BYTE4(v109);
    objc_msgSend(CFSTR("fc_image_count"), "UTF8String");
    objc_msgSend(v4, "setConstantValue:type:withName:", buf, 49, CFSTR("fc_image_count"));
    buf[0] = BYTE5(v109);
    objc_msgSend(CFSTR("fc_dest_index"), "UTF8String");
    objc_msgSend(v4, "setConstantValue:type:withName:", buf, 49, CFSTR("fc_dest_index"));
    buf[0] = BYTE6(v109);
    objc_msgSend(CFSTR("fc_dest_count"), "UTF8String");
    objc_msgSend(v4, "setConstantValue:type:withName:", buf, 49, CFSTR("fc_dest_count"));
    buf[0] = BYTE7(v109);
    objc_msgSend(CFSTR("fc_noise_width"), "UTF8String");
    objc_msgSend(v4, "setConstantValue:type:withName:", buf, 49, CFSTR("fc_noise_width"));
    buf[0] = BYTE9(v109);
    objc_msgSend(CFSTR("fc_clamp_color"), "UTF8String");
    objc_msgSend(v4, "setConstantValue:type:withName:", buf, 53, CFSTR("fc_clamp_color"));
    buf[0] = BYTE10(v109);
    objc_msgSend(CFSTR("fc_extended_range"), "UTF8String");
    objc_msgSend(v4, "setConstantValue:type:withName:", buf, 53, CFSTR("fc_extended_range"));
    buf[0] = BYTE11(v109);
    objc_msgSend(CFSTR("fc_unbounded_range"), "UTF8String");
    objc_msgSend(v4, "setConstantValue:type:withName:", buf, 53, CFSTR("fc_unbounded_range"));
    buf[0] = BYTE12(v109);
    objc_msgSend(CFSTR("fc_debug_xr"), "UTF8String");
    objc_msgSend(v4, "setConstantValue:type:withName:", buf, 53, CFSTR("fc_debug_xr"));
    buf[0] = BYTE13(v109);
    objc_msgSend(CFSTR("fc_has_premultiply"), "UTF8String");
    objc_msgSend(v4, "setConstantValue:type:withName:", buf, 53, CFSTR("fc_has_premultiply"));
    buf[0] = BYTE14(v109);
    objc_msgSend(CFSTR("fc_has_hdr_scale"), "UTF8String");
    objc_msgSend(v4, "setConstantValue:type:withName:", buf, 53, CFSTR("fc_has_hdr_scale"));
    buf[0] = HIBYTE(v109);
    objc_msgSend(CFSTR("fc_has_edr_factor"), "UTF8String");
    objc_msgSend(v4, "setConstantValue:type:withName:", buf, 53, CFSTR("fc_has_edr_factor"));
  }
  v39 = 0;
  v40 = 1;
  do
  {
    v97 = v40;
    if ((*(_WORD *)((_BYTE *)a2 + 17) & 4) == 0)
    {
      v41 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("fc_image_function%d"), v39);
      buf[0] = __str[16 * v39];
      objc_msgSend(v41, "UTF8String");
      objc_msgSend(v4, "setConstantValue:type:withName:", buf, 49, v41);
      v42 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("fc_coord_function%d"), v39);
      buf[0] = __str[16 * v39 + 1];
      objc_msgSend(v42, "UTF8String");
      objc_msgSend(v4, "setConstantValue:type:withName:", buf, 49, v42);
      v43 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("fc_plane_count%d"), v39);
      buf[0] = __str[16 * v39 + 12];
      objc_msgSend(v43, "UTF8String");
      objc_msgSend(v4, "setConstantValue:type:withName:", buf, 49, v43);
      v44 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("fc_texcoord_count%d"), v39);
      buf[0] = __str[16 * v39 + 13];
      objc_msgSend(v44, "UTF8String");
      objc_msgSend(v4, "setConstantValue:type:withName:", buf, 49, v44);
      v45 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("fc_memoryless_index%d"), v39);
      buf[0] = __str[16 * v39 + 14] + 1;
      objc_msgSend(v45, "UTF8String");
      objc_msgSend(v4, "setConstantValue:type:withName:", buf, 49, v45);
      v46 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("fc_filter%d"), v39);
      buf[0] = __str[16 * v39 + 2];
      objc_msgSend(v46, "UTF8String");
      objc_msgSend(v4, "setConstantValue:type:withName:", buf, 49, v46);
      v47 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("fc_color_inputs%d"), v39);
      buf[0] = __str[16 * v39 + 10];
      objc_msgSend(v47, "UTF8String");
      objc_msgSend(v4, "setConstantValue:type:withName:", buf, 49, v47);
      v48 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("fc_color_opcodes%d"), v39);
      *(_DWORD *)buf = *(_DWORD *)&__str[16 * v39 + 4];
      objc_msgSend(v48, "UTF8String");
      objc_msgSend(v4, "setConstantValue:type:withName:", buf, 52, v48);
      v49 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("fc_color_opcodes_ext%d"), v39);
      *(_WORD *)buf = *(_WORD *)&__str[16 * v39 + 8];
      objc_msgSend(v49, "UTF8String");
      objc_msgSend(v4, "setConstantValue:type:withName:", buf, 50, v49);
      v50 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("fc_color_opaque%d"), v39);
      buf[0] = __str[16 * v39 + 11];
      objc_msgSend(v50, "UTF8String");
      objc_msgSend(v4, "setConstantValue:type:withName:", buf, 53, v50);
    }
    v51 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("fc_has_color_trc%d"), v39);
    v52 = v51;
    if ((*(_WORD *)((_BYTE *)a2 + 17) & 4) != 0)
    {
      v57 = 1;
    }
    else
    {
      v53 = *(unsigned int *)((char *)a2 + 8 * v39 - v39) | ((unint64_t)(*(unsigned __int16 *)((char *)a2 + 8 * v39 - v39 + 4) | (*((unsigned __int8 *)a2 + 8 * v39 - v39 + 6) << 16)) << 32);
      v54 = (int8x16_t)vdupq_n_s64(v53);
      v55 = v53 & 0xF8000000000;
      v56 = vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8(v54, (int8x16_t)xmmword_18474E4F0), (int64x2_t)xmmword_18474E510), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8(v54, (int8x16_t)xmmword_18474E500), (int64x2_t)xmmword_18474E520))));
      v57 = (v53 & 0x1F00000000000) == 0x700000000000;
      if (v55 == 0x38000000000)
        v57 = 1;
      if ((v56 & 1) != 0)
        v57 = 1;
    }
    buf[0] = v57;
    objc_msgSend(v51, "UTF8String");
    objc_msgSend(v4, "setConstantValue:type:withName:", buf, 53, v52);
    v58 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("fc_has_color_cube%d"), v39);
    v59 = v58;
    if ((*(_WORD *)((_BYTE *)a2 + 17) & 4) != 0
      || (v60 = (unsigned int *)((char *)a2 + 8 * v39 - v39), v61 = *v60, ((v61 >> 19) & 0x1F) - 8 < 3)
      || (BYTE3(v61) & 0x1F) - 8 < 3u
      || (v62 = v61 | ((unint64_t)(*((unsigned __int16 *)v60 + 2) | (*((unsigned __int8 *)v60 + 6) << 16)) << 32),
          ((v62 >> 29) & 0x1F) - 8 < 3)
      || ((v62 >> 34) & 0x1F) - 8 < 3
      || ((v62 >> 39) & 0x1F) - 8 < 3
      || ((v62 >> 44) & 0x1F) - 8 < 3)
    {
      v63 = 1;
    }
    else
    {
      v69 = (int8x16_t)vdupq_n_s64(v62);
      v63 = 1;
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8(v69, (int8x16_t)xmmword_18474E4F0), (int64x2_t)xmmword_18474E530), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8(v69, (int8x16_t)xmmword_18474E500), (int64x2_t)xmmword_18474E540)))) & 1) == 0&& (v62 & 0xF8000000000) != 0x98000000000)
      {
        v63 = (v62 & 0x1F00000000000) == 0x1300000000000;
      }
    }
    buf[0] = v63;
    objc_msgSend(v58, "UTF8String");
    objc_msgSend(v4, "setConstantValue:type:withName:", buf, 53, v59);
    v64 = 0;
    v65 = (_DWORD *)((char *)a2 + 8 * v39 - v39);
    do
    {
      v66 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("fc_has_image_%d%c"), v39, v64 + 65);
      v67 = v66;
      if ((*(_WORD *)((_BYTE *)a2 + 17) & 4) != 0)
      {
        LOBYTE(v68) = 1;
      }
      else if (v39 >= CA::OGL::tex_image_count[*((_BYTE *)a2 + 14) & 0x7F])
      {
        LOBYTE(v68) = 0;
      }
      else
      {
        v68 = ((unint64_t)(*v65 << 16) >> 31) & 1;
        if (v64 >= CA::OGL::image_plane_count[*v65 & 0x3FLL])
          LOBYTE(v68) = 0;
      }
      buf[0] = v68;
      objc_msgSend(v66, "UTF8String");
      objc_msgSend(v4, "setConstantValue:type:withName:", buf, 53, v67);
      ++v64;
    }
    while (v64 != 3);
    v40 = 0;
    v39 = 1;
  }
  while ((v97 & 1) != 0);
LABEL_3:
  if (v4)
    v5 = 7;
  else
    v5 = 2;
  for (i = 1; ; i = 0)
  {
    v102 = 0;
    shader_function = CA::OGL::MetalContext::load_shader_function((uint64_t)this, this[411], v100, v101, v4, a3, (uint64_t)&v102);
    if (shader_function)
      break;
    v8 = reason_messages[v5];
    bzero(__str, 0x800uLL);
    v9 = (const char *)-[__CFString UTF8String](v100, "UTF8String");
    v10 = (const char *)objc_msgSend(v101, "UTF8String");
    snprintf(__str, 0x800uLL, "function=%s spec=%s\n%s", v9, v10, (const char *)objc_msgSend((id)objc_msgSend(v102, "localizedDescription"), "UTF8String"));
    v111 = 0;
    v11 = x_log_hook_p();
    if ((i & 1) == 0)
    {
      if (v11)
      {
        x_log_();
      }
      else
      {
        v96 = x_log_category_ogl_metal;
        if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v104 = v8;
          v105 = 2080;
          v106 = __str;
          _os_log_impl(&dword_184457000, v96, OS_LOG_TYPE_ERROR, "%s: %s\n", buf, 0x16u);
        }
      }
      strlen(__str);
      abort_with_payload();
      __break(1u);
    }
    if (v11)
    {
      x_log_();
    }
    else
    {
      v12 = x_log_category_ogl_metal;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315394;
        v104 = v8;
        v105 = 2080;
        v106 = __str;
        _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_FAULT, "%s: %s\n", buf, 0x16u);
      }
    }
  }
  objc_msgSend(shader_function, "setLabel:", objc_msgSend(CFSTR("com.apple.coreanimation.frag."), "stringByAppendingString:", v101));

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = malloc_type_zone_malloc(malloc_zone, 8uLL, 0x8BB15036uLL);
  if (result)
    *result = shader_function;
  return result;
}

void *CA::OGL::MetalContext::load_shader_function(uint64_t a1, void *a2, void *a3, void *a4, void *a5, int a6, uint64_t a7)
{
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  uint64_t v20;
  os_signpost_id_t v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  NSObject *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (byte_1ECDC6A6C || (*(_BYTE *)(a1 + 418) & 0x10) != 0)
  {
    v14 = x_log_hook_p();
    if (a5)
    {
      if (v14)
      {
        v15 = objc_msgSend(a3, "UTF8String");
        v29 = objc_msgSend(a4, "UTF8String");
        v30 = objc_msgSend((id)objc_msgSend(a5, "description"), "UTF8String");
        v28 = v15;
LABEL_8:
        x_log_();
        goto LABEL_14;
      }
      v16 = x_log_category_ogl_metal;
      if (!os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_DEFAULT))
        goto LABEL_14;
      *(_DWORD *)buf = 136315650;
      v33 = objc_msgSend(a3, "UTF8String");
      v34 = 2080;
      v35 = objc_msgSend(a4, "UTF8String");
      v36 = 2080;
      v37 = objc_msgSend((id)objc_msgSend(a5, "description"), "UTF8String");
      v17 = "Specializing shader function %s for %s with constant values %s\n";
      v18 = v16;
      v19 = 32;
    }
    else
    {
      if (v14)
      {
        v28 = objc_msgSend(a3, "UTF8String");
        v29 = objc_msgSend(a4, "UTF8String");
        goto LABEL_8;
      }
      v20 = x_log_category_ogl_metal;
      if (!os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_DEFAULT))
        goto LABEL_14;
      *(_DWORD *)buf = 136315394;
      v33 = objc_msgSend(a3, "UTF8String");
      v34 = 2080;
      v35 = objc_msgSend(a4, "UTF8String");
      v17 = "Loading shader function %s for %s\n";
      v18 = v20;
      v19 = 22;
    }
    _os_log_impl(&dword_184457000, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
  }
LABEL_14:
  v21 = os_signpost_id_generate((os_log_t)x_log_category_ogl_metal);
  if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v22 = x_log_category_ogl_metal;
    if (os_signpost_enabled((os_log_t)x_log_category_ogl_metal))
    {
      *(_DWORD *)buf = 138543874;
      v33 = (uint64_t)a3;
      v34 = 2114;
      v35 = (uint64_t)a4;
      v36 = 1026;
      LODWORD(v37) = a5 != 0;
      _os_signpost_emit_with_name_impl(&dword_184457000, v22, OS_SIGNPOST_INTERVAL_BEGIN, v21, "CompileShader", "function=%{public, name=function}@ spec=%{public, name=spec}@ specialized=%{public, name=specialized}u", buf, 0x1Cu);
    }
  }
  v23 = (void *)objc_msgSend(MEMORY[0x1E0CC6AB0], "functionDescriptor", v28, v29, v30);
  objc_msgSend(v23, "setName:", a3);
  if (a5)
  {
    objc_msgSend(v23, "setSpecializedName:", a4);
    objc_msgSend(v23, "setConstantValues:", a5);
  }
  if (a6 && !byte_1ECDC6AA8 && (*(_BYTE *)(a1 + 418) & 0x30) == 0 && *(_QWORD *)(a1 + 3296))
  {
    v31 = *(_QWORD *)(a1 + 3296);
    objc_msgSend(v23, "setBinaryArchives:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v31, 1));
  }
  v24 = (void *)objc_msgSend(a2, "newFunctionWithDescriptor:error:", v23, a7);
  if (a5)
    v25 = a4;
  else
    v25 = a3;
  objc_msgSend(v24, "setLabel:", objc_msgSend(CFSTR("com.apple.coreanimation."), "stringByAppendingString:", v25));
  if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v26 = x_log_category_ogl_metal;
    if (os_signpost_enabled((os_log_t)x_log_category_ogl_metal))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_184457000, v26, OS_SIGNPOST_INTERVAL_END, v21, "CompileShader", (const char *)&unk_18479AB47, buf, 2u);
    }
  }
  return v24;
}

uint64_t CA::OGL::MetalContext::FragmentShader::Spec::get_config(uint64_t this, int *a2)
{
  uint64_t v2;
  int16x8_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  int v7;
  char v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  int *v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  _BYTE *v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64x2_t v21;
  int16x8_t v22;
  unsigned __int8 v23;
  char v24;

  v2 = 0;
  *(_DWORD *)(this + 48) = 0;
  v3.i64[1] = 0;
  *(_OWORD *)(this + 16) = 0u;
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)this = 0u;
  do
  {
    v4 = this + v2;
    *(_WORD *)v4 = 0;
    *(_BYTE *)(v4 + 2) = 0;
    *(_QWORD *)(v4 + 4) = 0;
    *(_WORD *)(v4 + 12) = 0;
    v2 += 16;
    *(_BYTE *)(v4 + 14) = -1;
  }
  while (v2 != 32);
  v5 = *((_BYTE *)a2 + 16);
  *(_BYTE *)(this + 32) = (v5 >> 3) & 3;
  v6 = *((_BYTE *)a2 + 14) & 0x7F;
  *(_BYTE *)(this + 33) = v6;
  v7 = *((_BYTE *)a2 + 15) & 0x3F;
  *(_BYTE *)(this + 34) = v7;
  v8 = v5 & 7;
  v9 = CA::OGL::tex_image_count[v6];
  *(_BYTE *)(this + 35) = v8;
  *(_BYTE *)(this + 36) = v9;
  v10 = *(unsigned __int16 *)((char *)a2 + 17);
  *(_BYTE *)(this + 37) = v10 & 3;
  if (v7 != 58 || (*(_WORD *)&CA::OGL::MetalContext::texture_function_info[8 * v6 - v6 + 5] & 2) != 0)
    goto LABEL_11;
  if (!(_DWORD)v9)
  {
    v14 = 0;
    goto LABEL_12;
  }
  if ((CA::OGL::MetalContext::image_function_info[*a2 & 0x3F] & 8) != 0)
  {
LABEL_11:
    v14 = 1;
    goto LABEL_12;
  }
  v11 = 0;
  v12 = (int *)((char *)a2 + 7);
  while (v9 - 1 != v11)
  {
    v13 = *v12;
    v12 = (int *)((char *)v12 + 7);
    ++v11;
    if ((CA::OGL::MetalContext::image_function_info[v13 & 0x3F] & 8) != 0)
      goto LABEL_18;
  }
  v11 = v9;
LABEL_18:
  v14 = v11 < v9;
LABEL_12:
  *(_BYTE *)(this + 38) = v14;
  *(_BYTE *)(this + 39) = (4 * v10) & 0x20;
  *(_BYTE *)(this + 40) = byte_184753CB8[v6];
  *(_BYTE *)(this + 41) = (v10 & 0x1000) != 0;
  *(_BYTE *)(this + 42) = (v10 & 0x40) != 0;
  *(_BYTE *)(this + 43) = (v10 & 0x80) != 0;
  v3.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(v10), (uint16x4_t)0xFFF7FFF6FFF8FFF3) & 0xFF01FF01FF01FF01;
  *(_DWORD *)(this + 44) = vmovn_s16(v3).u32[0];
  *(_BYTE *)(this + 48) = 0;
  if ((_DWORD)v9)
  {
    v15 = 0;
    v16 = (_BYTE *)(this + 14);
    do
    {
      v17 = *((unsigned __int8 *)a2 + 6);
      v18 = *((unsigned __int16 *)a2 + 2) | (v17 << 16);
      v19 = *a2;
      a2 = (int *)((char *)a2 + 7);
      v20 = v19 | (unint64_t)(v18 << 32);
      v21 = (uint64x2_t)vdupq_n_s64(v20);
      v22 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v21, (uint64x2_t)xmmword_18474E560), (int32x4_t)vshlq_u64(v21, (uint64x2_t)xmmword_18474E550));
      *(int8x8_t *)v22.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v22), (int8x8_t)0x1F001F001F001FLL);
      *(int8x8_t *)v21.i8 = vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v21, (uint64x2_t)xmmword_18474E570)), (int8x8_t)0x1F0000001FLL);
      v23 = CA::OGL::image_plane_count[v20 & 0x3F];
      v24 = byte_184755BDC[v20 & 0x3F];
      *(v16 - 14) = v20 & 0x3F;
      *(v16 - 13) = (v19 >> 6) & 7;
      *(v16 - 12) = (v19 >> 9) & 0xF;
      *(_DWORD *)(v16 - 10) = vmovn_s16(v22).u32[0];
      *(v16 - 6) = v21.i8[0];
      *(v16 - 5) = v21.i8[4];
      *(v16 - 4) = BYTE2(v19) & 7;
      *(v16 - 3) = (v17 & 2) != 0;
      *(v16 - 2) = v23;
      *(v16 - 1) = v24;
      *v16 = (unint64_t)((uint64_t)((unint64_t)v19 << 48) >> 8) >> 53;
      v16 += 16;
      ++v15;
    }
    while (v15 < *(unsigned __int8 *)(this + 36));
  }
  return this;
}

void X::small_vector_base<CA::Render::BackdropGroup::Item>::resize(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *i;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v5 = *a1;
  v4 = a1[1];
  v6 = 0xCF3CF3CF3CF3CF3DLL * ((v4 - *a1) >> 3);
  if (v6 <= a2)
  {
    if (v6 >= a2)
      return;
    v8 = (unint64_t)a1[3];
    if (v8 >= a2)
    {
      v15 = *a1;
    }
    else
    {
      v9 = a1[2];
      v10 = (v8 + 1) | ((v8 + 1) >> 1) | (((v8 + 1) | ((v8 + 1) >> 1)) >> 2);
      v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
      v12 = v11 | (v11 >> 16) | ((v11 | (v11 >> 16)) >> 32);
      if (v12 + 1 > a2)
        v13 = v12 + 1;
      else
        v13 = a2;
      v14 = (char *)malloc_type_malloc(168 * v13, 0x102004011100410uLL);
      v15 = v14;
      v16 = *a1;
      v17 = a1[1];
      if (*a1 != v17)
      {
        v18 = v14;
        do
        {
          *v18 = *(_OWORD *)v16;
          v18[1] = *((_OWORD *)v16 + 1);
          v18[2] = *((_OWORD *)v16 + 2);
          v18[3] = *((_OWORD *)v16 + 3);
          v18[4] = *((_OWORD *)v16 + 4);
          v18[5] = *((_OWORD *)v16 + 5);
          v18[6] = *((_OWORD *)v16 + 6);
          v19 = *((_OWORD *)v16 + 7);
          v20 = *((_OWORD *)v16 + 8);
          v21 = *((_OWORD *)v16 + 9);
          *((_QWORD *)v18 + 20) = *((_QWORD *)v16 + 20);
          v18[8] = v20;
          v18[9] = v21;
          v18[7] = v19;
          v16 += 168;
          v18 = (_OWORD *)((char *)v18 + 168);
        }
        while (v16 != v17);
      }
      if (v5 != v9)
        free(*a1);
      *a1 = v15;
      v4 = &v15[168 * v6];
      a1[3] = (char *)v13;
    }
    for (i = &v15[168 * a2]; v4 != i; v4 += 168)
    {
      *(_QWORD *)v4 = 0;
      *((_WORD *)v4 + 80) = 0;
      *((_DWORD *)v4 + 41) = 0;
      *((_OWORD *)v4 + 7) = 0uLL;
      *((_OWORD *)v4 + 8) = 0uLL;
      *((_OWORD *)v4 + 1) = 0uLL;
      *((_OWORD *)v4 + 2) = 0uLL;
    }
  }
  else
  {
    i = &v5[168 * a2];
  }
  a1[1] = i;
}

uint64_t CARenderRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 8);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
    if (!v2)
    {
      result = 0;
      do
        v3 = __ldaxr(v1);
      while (__stlxr(v3 - 1, v1));
    }
  }
  return result;
}

void CA::Render::TransitionAnimation::encode(CA::Render::TransitionAnimation *this, CA::Render::Encoder *a2)
{
  int v4;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  int v9;

  CA::Render::Animation::encode(this, a2);
  CA::Render::Encoder::encode_atom(a2, *((_DWORD *)this + 23));
  CA::Render::Encoder::encode_atom(a2, *((_DWORD *)this + 24));
  v4 = *((_DWORD *)this + 25);
  v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v5 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v5 = v4;
  v6 = *((_QWORD *)a2 + 4);
  v7 = *((_QWORD *)a2 + 5);
  v8 = (_DWORD *)(v6 + 4);
  *((_QWORD *)a2 + 4) = v6 + 4;
  v9 = *((_DWORD *)this + 26);
  if (v6 + 8 > v7)
  {
    CA::Render::Encoder::grow(a2, 4);
    v8 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v8 = v9;
  *((_QWORD *)a2 + 4) += 4;
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 14));
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 15));
}

_QWORD *CA::Render::Surface::encode(CGColorSpaceRef *this, CA::Render::Encoder *a2)
{
  CGColorSpaceRef *v3;
  _BYTE *v4;
  unint64_t v5;
  int v6;
  _DWORD *v7;
  __IOSurface *v8;
  mach_port_t v9;
  mach_port_name_t v10;
  _BYTE *v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  CGColorSpaceRef v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  int v27;
  _BYTE *v28;
  char v29;
  _BYTE *v30;
  char v31;
  _BYTE *v32;
  char v33;
  _BYTE *v34;
  char v35;
  _BYTE *v36;
  char v37;
  _BYTE *v38;
  char v39;
  _BYTE *v40;
  _QWORD *result;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  __IOSurface *v45;
  mach_port_t MachPort;
  unsigned int v47;

  v3 = this;
  v4 = (_BYTE *)*((_QWORD *)a2 + 4);
  v5 = *((_QWORD *)a2 + 5);
  if (!this[12])
  {
    if ((unint64_t)(v4 + 1) > v5)
    {
      CA::Render::Encoder::grow(a2, 1);
      v4 = (_BYTE *)*((_QWORD *)a2 + 4);
    }
    *((_QWORD *)a2 + 4) = v4 + 1;
    *v4 = 0;
    v12 = *((_DWORD *)v3 + 3) >> 8;
    v13 = (_DWORD *)*((_QWORD *)a2 + 4);
    if ((unint64_t)(v13 + 1) > *((_QWORD *)a2 + 5))
    {
      CA::Render::Encoder::grow(a2, 4);
      v13 = (_DWORD *)*((_QWORD *)a2 + 4);
    }
    *v13 = v12;
    v14 = *((_QWORD *)a2 + 4);
    v15 = *((_QWORD *)a2 + 5);
    v16 = (_DWORD *)(v14 + 4);
    *((_QWORD *)a2 + 4) = v14 + 4;
    v17 = *((_DWORD *)v3 + 27);
    if (v14 + 8 > v15)
    {
      CA::Render::Encoder::grow(a2, 4);
      v16 = (_DWORD *)*((_QWORD *)a2 + 4);
    }
    *v16 = v17;
    v18 = *((_QWORD *)a2 + 4);
    v11 = (_BYTE *)(v18 + 4);
    *((_QWORD *)a2 + 4) = v18 + 4;
    v19 = v3[15];
    if (!v19)
    {
      v45 = v3[14];
      if (v45)
      {
        MachPort = IOSurfaceCreateMachPort(v45);
        v11 = (_BYTE *)*((_QWORD *)a2 + 4);
        if (MachPort)
        {
          v10 = MachPort;
          if ((unint64_t)(v11 + 1) <= *((_QWORD *)a2 + 5))
            goto LABEL_11;
          goto LABEL_10;
        }
      }
      if ((unint64_t)(v11 + 1) <= *((_QWORD *)a2 + 5))
        goto LABEL_28;
LABEL_27:
      CA::Render::Encoder::grow(a2, 1);
      v11 = (_BYTE *)*((_QWORD *)a2 + 4);
LABEL_28:
      *((_QWORD *)a2 + 4) = v11 + 1;
      *v11 = 0;
      goto LABEL_29;
    }
    v10 = *((_DWORD *)v19 + 4);
    v20 = v18 + 5;
    v21 = *((_QWORD *)a2 + 5);
    v22 = v20 > v21;
    if (v10)
    {
      if (v20 > v21)
      {
        CA::Render::Encoder::grow(a2, 1);
        v11 = (_BYTE *)*((_QWORD *)a2 + 4);
      }
      *((_QWORD *)a2 + 4) = v11 + 1;
      *v11 = 3;
      mach_port_mod_refs(*MEMORY[0x1E0C83DA0], v10, 0, 1);
      goto LABEL_23;
    }
LABEL_25:
    if (!v22)
      goto LABEL_28;
    goto LABEL_27;
  }
  if ((unint64_t)(v4 + 1) > v5)
  {
    CA::Render::Encoder::grow(a2, 1);
    v4 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = v4 + 1;
  *v4 = 1;
  v6 = *((_DWORD *)v3 + 3) >> 8;
  v7 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v7 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v7 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v7 = v6;
  *((_QWORD *)a2 + 4) += 4;
  CA::Render::Encoder::encode_object(a2, v3[12]);
  if ((*((_BYTE *)v3 + 15) & 0x10) != 0)
  {
    v8 = v3[14];
    if (v8)
    {
      v9 = IOSurfaceCreateMachPort(v8);
      if (v9)
      {
        v10 = v9;
        v11 = (_BYTE *)*((_QWORD *)a2 + 4);
        if ((unint64_t)(v11 + 1) <= *((_QWORD *)a2 + 5))
        {
LABEL_11:
          *((_QWORD *)a2 + 4) = v11 + 1;
          *v11 = 1;
LABEL_23:
          v23 = x_heap_malloc_small_(*((uint64_t **)a2 + 1), 0x30uLL);
          *(_DWORD *)(v23 + 8) = 2;
          *(_DWORD *)(v23 + 16) = v10;
          *(_DWORD *)(v23 + 20) = 19;
          *(_BYTE *)(v23 + 24) = 1;
          v24 = *((_QWORD *)a2 + 7);
          *(_QWORD *)v23 = *((_QWORD *)a2 + 6);
          *((_QWORD *)a2 + 6) = v23;
          *((_QWORD *)a2 + 7) = v24 + 1;
          goto LABEL_29;
        }
LABEL_10:
        CA::Render::Encoder::grow(a2, 1);
        v11 = (_BYTE *)*((_QWORD *)a2 + 4);
        goto LABEL_11;
      }
    }
    v11 = (_BYTE *)*((_QWORD *)a2 + 4);
    v22 = (unint64_t)(v11 + 1) > *((_QWORD *)a2 + 5);
    goto LABEL_25;
  }
LABEL_29:
  v25 = (*((unsigned __int8 *)v3 + 336) >> 5) & 1;
  v26 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v26 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 1);
    v26 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = v26 + 1;
  *v26 = v25;
  v27 = (*((unsigned __int8 *)v3 + 336) >> 6) & 1;
  v28 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v28 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 1);
    v28 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = v28 + 1;
  *v28 = v27;
  v29 = *((_BYTE *)v3 + 328);
  v30 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v30 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 1);
    v30 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = v30 + 1;
  *v30 = v29;
  v31 = (*((uint64_t (**)(CGColorSpaceRef *))*v3 + 33))(v3);
  v32 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v32 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 1);
    v32 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = v32 + 1;
  *v32 = v31;
  v33 = (*((uint64_t (**)(CGColorSpaceRef *))*v3 + 34))(v3);
  v34 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v34 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 1);
    v34 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = v34 + 1;
  *v34 = v33;
  v35 = (*((uint64_t (**)(CGColorSpaceRef *))*v3 + 35))(v3);
  v36 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v36 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 1);
    v36 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = v36 + 1;
  *v36 = v35;
  v37 = (*((uint64_t (**)(CGColorSpaceRef *))*v3 + 32))(v3);
  v38 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v38 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 1);
    v38 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = v38 + 1;
  *v38 = v37;
  v39 = (*((uint64_t (**)(CGColorSpaceRef *))*v3 + 16))(v3);
  v40 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v40 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 1);
    v40 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = v40 + 1;
  *v40 = v39;
  CA::Render::Texture::encode(v3, a2);
  result = (_QWORD *)x_heap_malloc_small_(*((uint64_t **)a2 + 1), 0x10uLL);
  v42 = (unsigned int *)(v3 + 1);
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 + 1, v42));
  if (!v43)
  {
    v3 = 0;
    do
      v47 = __ldaxr(v42);
    while (__stlxr(v47 - 1, v42));
  }
  v44 = *((_QWORD *)a2 + 14);
  *result = v3;
  result[1] = v44;
  *((_QWORD *)a2 + 14) = result;
  return result;
}

__n128 CA::Render::Texture::encode(CGColorSpaceRef *this, CA::Render::Encoder *a2)
{
  __n128 result;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _WORD *v9;
  __int16 v10;
  uint64_t v11;
  unint64_t v12;
  _WORD *v13;
  __int16 v14;
  uint64_t v15;
  unint64_t v16;
  _WORD *v17;
  __int16 v18;
  uint64_t v19;
  unint64_t v20;
  _WORD *v21;
  __int16 v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  void *v28;
  const void *v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  _DWORD *v33;
  uint64_t v34;
  unint64_t v35;
  _DWORD *v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  _DWORD *v44;
  int v45;
  int v46;
  uint64_t v47;
  __n128 *v48;
  __n128 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  CA::Render::Encoder::encode_colorspace(a2, this[6]);
  v5 = *((_DWORD *)this + 8);
  v6 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v6 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v6 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v6 = v5;
  v7 = *((_QWORD *)a2 + 4);
  v8 = *((_QWORD *)a2 + 5);
  v9 = (_WORD *)(v7 + 4);
  *((_QWORD *)a2 + 4) = v7 + 4;
  v10 = *((_WORD *)this + 12);
  if (v7 + 6 > v8)
  {
    CA::Render::Encoder::grow(a2, 2);
    v9 = (_WORD *)*((_QWORD *)a2 + 4);
  }
  *v9 = v10;
  v11 = *((_QWORD *)a2 + 4);
  v12 = *((_QWORD *)a2 + 5);
  v13 = (_WORD *)(v11 + 2);
  *((_QWORD *)a2 + 4) = v11 + 2;
  v14 = *((_WORD *)this + 13);
  if (v11 + 4 > v12)
  {
    CA::Render::Encoder::grow(a2, 2);
    v13 = (_WORD *)*((_QWORD *)a2 + 4);
  }
  *v13 = v14;
  v15 = *((_QWORD *)a2 + 4);
  v16 = *((_QWORD *)a2 + 5);
  v17 = (_WORD *)(v15 + 2);
  *((_QWORD *)a2 + 4) = v15 + 2;
  v18 = *((_WORD *)this + 14);
  if (v15 + 4 > v16)
  {
    CA::Render::Encoder::grow(a2, 2);
    v17 = (_WORD *)*((_QWORD *)a2 + 4);
  }
  *v17 = v18;
  v19 = *((_QWORD *)a2 + 4);
  v20 = *((_QWORD *)a2 + 5);
  v21 = (_WORD *)(v19 + 2);
  *((_QWORD *)a2 + 4) = v19 + 2;
  v22 = *((_WORD *)this + 15);
  if (v19 + 4 > v20)
  {
    CA::Render::Encoder::grow(a2, 2);
    v21 = (_WORD *)*((_QWORD *)a2 + 4);
  }
  *v21 = v22;
  v23 = *((_QWORD *)a2 + 4);
  v24 = (_DWORD *)(v23 + 2);
  *((_QWORD *)a2 + 4) = v23 + 2;
  v25 = (uint64_t)this[5];
  if (!v25)
  {
    if ((unint64_t)(v23 + 6) > *((_QWORD *)a2 + 5))
    {
      CA::Render::Encoder::grow(a2, 4);
      v24 = (_DWORD *)*((_QWORD *)a2 + 4);
    }
    *v24 = 0;
    goto LABEL_38;
  }
  if ((v25 & 1) != 0)
  {
    if (v25 == 1)
      goto LABEL_35;
LABEL_24:
    if ((unint64_t)(v23 + 6) > *((_QWORD *)a2 + 5))
    {
      CA::Render::Encoder::grow(a2, 4);
      v24 = (_DWORD *)*((_QWORD *)a2 + 4);
    }
    *v24 = -2;
    *((_QWORD *)a2 + 4) += 4;
    v50 = 0;
    v51 = 0;
    CA::Shape::get_bounds(v25, (int *)&v50);
    v32 = v50;
    v33 = (_DWORD *)*((_QWORD *)a2 + 4);
    if ((unint64_t)(v33 + 1) > *((_QWORD *)a2 + 5))
    {
      CA::Render::Encoder::grow(a2, 4);
      v33 = (_DWORD *)*((_QWORD *)a2 + 4);
    }
    *v33 = v32;
    v34 = *((_QWORD *)a2 + 4);
    v35 = *((_QWORD *)a2 + 5);
    v36 = (_DWORD *)(v34 + 4);
    *((_QWORD *)a2 + 4) = v34 + 4;
    v37 = HIDWORD(v50);
    if (v34 + 8 > v35)
    {
      CA::Render::Encoder::grow(a2, 4);
      v36 = (_DWORD *)*((_QWORD *)a2 + 4);
    }
    *v36 = v37;
    v38 = *((_QWORD *)a2 + 4);
    v39 = *((_QWORD *)a2 + 5);
    v40 = (_DWORD *)(v38 + 4);
    *((_QWORD *)a2 + 4) = v38 + 4;
    v41 = v51;
    if (v38 + 8 > v39)
    {
      CA::Render::Encoder::grow(a2, 4);
      v40 = (_DWORD *)*((_QWORD *)a2 + 4);
    }
    *v40 = v41;
    v42 = *((_QWORD *)a2 + 4);
    v43 = *((_QWORD *)a2 + 5);
    v44 = (_DWORD *)(v42 + 4);
    *((_QWORD *)a2 + 4) = v42 + 4;
    v45 = HIDWORD(v51);
    if (v42 + 8 > v43)
    {
      CA::Render::Encoder::grow(a2, 4);
      v44 = (_DWORD *)*((_QWORD *)a2 + 4);
    }
    *v44 = v45;
    goto LABEL_38;
  }
  v26 = *(_DWORD *)(v25 + 4);
  if (v26 == 12)
    goto LABEL_24;
  if (v26 == 6)
  {
LABEL_35:
    if ((unint64_t)(v23 + 6) > *((_QWORD *)a2 + 5))
    {
      CA::Render::Encoder::grow(a2, 4);
      v24 = (_DWORD *)*((_QWORD *)a2 + 4);
    }
    *v24 = -1;
LABEL_38:
    v31 = (_DWORD *)(*((_QWORD *)a2 + 4) + 4);
    goto LABEL_39;
  }
  if ((unint64_t)(v23 + 6) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v24 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v24 = v26;
  v27 = *((_QWORD *)a2 + 5);
  v28 = (void *)(*((_QWORD *)a2 + 4) + 4);
  *((_QWORD *)a2 + 4) = v28;
  v29 = (const void *)(v25 + 12);
  v30 = 4 * (v26 - 3);
  if ((unint64_t)v28 + v30 > v27)
  {
    CA::Render::Encoder::grow(a2, 4 * (v26 - 3));
    v28 = (void *)*((_QWORD *)a2 + 4);
  }
  memcpy(v28, v29, 4 * (v26 - 3));
  v31 = (_DWORD *)(*((_QWORD *)a2 + 4) + v30);
LABEL_39:
  *((_QWORD *)a2 + 4) = v31;
  v46 = *((_DWORD *)this + 14);
  if ((unint64_t)(v31 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v31 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v31 = v46;
  v47 = *((_QWORD *)a2 + 4);
  v48 = (__n128 *)(v47 + 4);
  *((_QWORD *)a2 + 4) = v47 + 4;
  if ((*((_BYTE *)this + 14) & 0x10) != 0)
  {
    v49 = (__n128 *)((char *)this + 60);
    if ((unint64_t)(v47 + 20) > *((_QWORD *)a2 + 5))
    {
      CA::Render::Encoder::grow(a2, 16);
      v48 = (__n128 *)*((_QWORD *)a2 + 4);
    }
    result = *v49;
    *v48 = *v49;
    *((_QWORD *)a2 + 4) += 16;
  }
  return result;
}

void CA::Render::Encoder::encode_colorspace(CA::Render::Encoder *this, CGColorSpaceRef space)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  CFStringRef Name;
  CFStringRef v10;
  _BYTE *v11;
  CFPropertyListRef v12;
  _BYTE *v13;

  if (space)
  {
    if (*((CGColorSpaceRef *)this + 10) == space)
    {
      v6 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)(v6 + 1) > *((_QWORD *)this + 5))
      {
        CA::Render::Encoder::grow(this, 1);
        v6 = (_BYTE *)*((_QWORD *)this + 4);
      }
      *((_QWORD *)this + 4) = v6 + 1;
      *v6 = 3;
    }
    else
    {
      v4 = 0;
      while ((CGColorSpaceRef)colorspaces[v4] != space)
      {
        if (++v4 == 32)
          goto LABEL_19;
      }
      if (!(_DWORD)v4)
      {
LABEL_19:
        Name = CGColorSpaceGetName(space);
        if (Name)
        {
          v10 = Name;
          v11 = (_BYTE *)*((_QWORD *)this + 4);
          if ((unint64_t)(v11 + 1) > *((_QWORD *)this + 5))
          {
            CA::Render::Encoder::grow(this, 1);
            v11 = (_BYTE *)*((_QWORD *)this + 4);
          }
          *((_QWORD *)this + 4) = v11 + 1;
          *v11 = 4;
          CA::Render::Encoder::encode_cfobject(this, v10);
        }
        else
        {
          v12 = CGColorSpaceCopyPropertyList(space);
          v13 = (_BYTE *)*((_QWORD *)this + 4);
          if ((unint64_t)(v13 + 1) > *((_QWORD *)this + 5))
          {
            CA::Render::Encoder::grow(this, 1);
            v13 = (_BYTE *)*((_QWORD *)this + 4);
          }
          *((_QWORD *)this + 4) = v13 + 1;
          *v13 = 2;
          CA::Render::Encoder::encode_cfobject(this, v12);
          if (v12)
            CFRelease(v12);
        }
        return;
      }
      v7 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)(v7 + 1) > *((_QWORD *)this + 5))
      {
        CA::Render::Encoder::grow(this, 1);
        v7 = (_BYTE *)*((_QWORD *)this + 4);
      }
      *((_QWORD *)this + 4) = v7 + 1;
      *v7 = 1;
      v8 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)(v8 + 1) > *((_QWORD *)this + 5))
      {
        CA::Render::Encoder::grow(this, 1);
        v8 = (_BYTE *)*((_QWORD *)this + 4);
      }
      *((_QWORD *)this + 4) = v8 + 1;
      *v8 = v4;
    }
  }
  else
  {
    v5 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)(v5 + 1) > *((_QWORD *)this + 5))
    {
      CA::Render::Encoder::grow(this, 1);
      v5 = (_BYTE *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 4) = v5 + 1;
    *v5 = 0;
  }
}

void CA::Render::BasicAnimation0::encode(const CA::Render::Object **this, CA::Render::Encoder *a2)
{
  const CA::Render::Object *v4;
  const CA::Render::Object **v5;
  uint64_t v6;
  unint64_t v7;
  const CA::Render::Object **v8;
  const CA::Render::Object *v9;

  CA::Render::PropertyAnimation::encode((CA::Render::PropertyAnimation *)this, a2);
  CA::Render::Encoder::encode_object(a2, this[14]);
  CA::Render::Encoder::encode_object(a2, this[15]);
  CA::Render::Encoder::encode_object(a2, this[16]);
  v4 = this[17];
  v5 = (const CA::Render::Object **)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v5 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 8);
    v5 = (const CA::Render::Object **)*((_QWORD *)a2 + 4);
  }
  *v5 = v4;
  v6 = *((_QWORD *)a2 + 4);
  v7 = *((_QWORD *)a2 + 5);
  v8 = (const CA::Render::Object **)(v6 + 8);
  *((_QWORD *)a2 + 4) = v6 + 8;
  v9 = this[18];
  if (v6 + 16 > v7)
  {
    CA::Render::Encoder::grow(a2, 8);
    v8 = (const CA::Render::Object **)*((_QWORD *)a2 + 4);
  }
  *v8 = v9;
  *((_QWORD *)a2 + 4) += 8;
}

void CA::Render::PropertyAnimation::encode(CA::Render::PropertyAnimation *this, CA::Render::Encoder *a2)
{
  CA::Render::Animation::encode(this, a2);
  CA::Render::Encoder::encode_keypath(a2, (void *const *)this + 12);
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 13));
}

void CA::Render::Animation::encode(CA::Render::Animation *this, CA::Render::Encoder *a2)
{
  const CA::Render::Object *v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  int v22;

  CA::Render::Object::encode(this, a2);
  if (*((_QWORD *)this + 5))
  {
    (*(void (**)(CA::Render::Encoder *, _QWORD))(*(_QWORD *)a2 + 32))(a2, *((_QWORD *)this + 2));
    v4 = (const CA::Render::Object *)*((_QWORD *)this + 5);
  }
  else
  {
    v4 = 0;
  }
  CA::Render::Encoder::encode_object(a2, v4);
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 6));
  CA::Render::Encoder::encode_cfobject(a2, *((const void **)this + 7));
  v5 = *((_DWORD *)this + 18);
  v6 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v6 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v6 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v6 = v5;
  v7 = *((_QWORD *)a2 + 4);
  v8 = *((_QWORD *)a2 + 5);
  v9 = (unsigned int *)(v7 + 4);
  *((_QWORD *)a2 + 4) = v7 + 4;
  v10 = *((float *)this + 6);
  if (v7 + 8 > v8)
  {
    CA::Render::Encoder::grow(a2, 4);
    v9 = (unsigned int *)*((_QWORD *)a2 + 4);
  }
  *v9 = v10;
  v11 = *((_QWORD *)a2 + 4);
  v12 = *((_QWORD *)a2 + 5);
  v13 = (unsigned int *)(v11 + 4);
  *((_QWORD *)a2 + 4) = v11 + 4;
  v14 = *((float *)this + 7);
  if (v11 + 8 > v12)
  {
    CA::Render::Encoder::grow(a2, 4);
    v13 = (unsigned int *)*((_QWORD *)a2 + 4);
  }
  *v13 = v14;
  v15 = *((_QWORD *)a2 + 4);
  v16 = *((_QWORD *)a2 + 5);
  v17 = (unsigned int *)(v15 + 4);
  *((_QWORD *)a2 + 4) = v15 + 4;
  v18 = *((float *)this + 8);
  if (v15 + 8 > v16)
  {
    CA::Render::Encoder::grow(a2, 4);
    v17 = (unsigned int *)*((_QWORD *)a2 + 4);
  }
  *v17 = v18;
  v19 = *((_QWORD *)a2 + 4);
  v20 = *((_QWORD *)a2 + 5);
  v21 = (_DWORD *)(v19 + 4);
  *((_QWORD *)a2 + 4) = v19 + 4;
  v22 = *((_DWORD *)this + 22);
  if (v19 + 8 > v20)
  {
    CA::Render::Encoder::grow(a2, 4);
    v21 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v21 = v22;
  *((_QWORD *)a2 + 4) += 4;
}

void CA::Render::Encoder::encode_cfobject(CA::Render::Encoder *this, const void *a2)
{
  uint64_t v2;
  __CFString *v3;
  __CFString *v4;
  CA::Render::Encoder *v5;
  CFTypeID v6;
  uint64_t v7;
  _BYTE *v8;
  const char *CString;
  BOOL *v10;
  size_t v11;
  CA::Render::Encoder *v12;
  int32x4_t *p_valuePtr;
  CFNumberType Type;
  _BYTE *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  Boolean Value;
  Boolean *v20;
  const UInt8 *BytePtr;
  size_t Length;
  void *v23;
  CFIndex Count;
  CFIndex *v25;
  CFIndex i;
  const void *ValueAtIndex;
  CFIndex v28;
  CFIndex *v29;
  CGImage *ColorSpace;
  unsigned __int8 *v31;
  __int32 v32;
  _BYTE *v33;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  CGColor *v38;
  CA::Render::Pattern **v39;
  int32x4_t v40;
  int32x4_t v42;
  int32x4_t *v43;
  const CA::Render::Object *v44;
  unsigned int *v45;
  unsigned int v46;
  BOOL v47;
  const char *v48;
  char v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  char *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t *v57;
  NSObject *v58;
  int32x4_t v59;
  int8x16_t valuePtr;
  uint64_t v61;

  v2 = MEMORY[0x1E0C80A78](this);
  v4 = v3;
  v5 = (CA::Render::Encoder *)v2;
  v61 = *MEMORY[0x1E0C80C00];
  if (CA::Render::cacftype_from_cfobject(void const*)::once == -1)
  {
    if (v3)
      goto LABEL_3;
  }
  else
  {
    dispatch_once(&CA::Render::cacftype_from_cfobject(void const*)::once, &__block_literal_global_251);
    if (v4)
    {
LABEL_3:
      if ((__CFString *)*MEMORY[0x1E0C9B0D0] == v4)
      {
        LODWORD(v7) = 1;
      }
      else
      {
        v6 = CFGetTypeID(v4);
        v7 = 0;
        while (CA::Render::cacftype_from_cfobject(void const*)::cfTypeIds[v7] != v6)
        {
          if (++v7 == 14)
          {
            if (v6 == CA::Render::cacftype_from_cfobject(void const*)::ns_object_type_id
              && (objc_opt_isKindOfClass() & 1) != 0)
            {
              LODWORD(v7) = 12;
              goto LABEL_13;
            }
            goto LABEL_12;
          }
        }
      }
      goto LABEL_13;
    }
  }
LABEL_12:
  LODWORD(v7) = 0;
LABEL_13:
  v8 = (_BYTE *)*((_QWORD *)v5 + 4);
  if ((unint64_t)(v8 + 1) > *((_QWORD *)v5 + 5))
  {
    CA::Render::Encoder::grow(v5, 1);
    v8 = (_BYTE *)*((_QWORD *)v5 + 4);
  }
  *((_QWORD *)v5 + 4) = v8 + 1;
  *v8 = v7;
  switch((int)v7)
  {
    case 2:
      bzero(&valuePtr, 0x1000uLL);
      CString = CA_CFStringGetCString(v4, valuePtr.i8, 4096);
      v10 = (BOOL *)*((_QWORD *)v5 + 4);
      if ((unint64_t)(v10 + 1) > *((_QWORD *)v5 + 5))
      {
        CA::Render::Encoder::grow(v5, 1);
        v10 = (BOOL *)*((_QWORD *)v5 + 4);
      }
      *((_QWORD *)v5 + 4) = v10 + 1;
      *v10 = CString != 0;
      if (CString)
      {
        v11 = strlen(CString) + 1;
        v12 = v5;
        p_valuePtr = (int32x4_t *)CString;
        goto LABEL_92;
      }
      return;
    case 3:
      Type = CFNumberGetType((CFNumberRef)v4);
      if ((unint64_t)Type <= kCFNumberCGFloatType && ((1 << Type) & 0x13060) != 0)
      {
        valuePtr.i64[0] = 0;
        if (!CFNumberGetValue((CFNumberRef)v4, kCFNumberDoubleType, &valuePtr))
          valuePtr.i64[0] = 0;
        v15 = (_BYTE *)*((_QWORD *)v5 + 4);
        if ((unint64_t)(v15 + 1) > *((_QWORD *)v5 + 5))
        {
          CA::Render::Encoder::grow(v5, 1);
          v15 = (_BYTE *)*((_QWORD *)v5 + 4);
        }
        *((_QWORD *)v5 + 4) = v15 + 1;
        *v15 = 0;
        v16 = valuePtr.i64[0];
        v17 = (uint64_t *)*((_QWORD *)v5 + 4);
        if ((unint64_t)(v17 + 1) > *((_QWORD *)v5 + 5))
        {
          CA::Render::Encoder::grow(v5, 8);
          v17 = (uint64_t *)*((_QWORD *)v5 + 4);
        }
        *v17 = v16;
      }
      else
      {
        valuePtr.i64[0] = 0;
        if (!CFNumberGetValue((CFNumberRef)v4, kCFNumberLongLongType, &valuePtr))
          valuePtr.i64[0] = 0;
        v55 = (_BYTE *)*((_QWORD *)v5 + 4);
        if ((unint64_t)(v55 + 1) > *((_QWORD *)v5 + 5))
        {
          CA::Render::Encoder::grow(v5, 1);
          v55 = (_BYTE *)*((_QWORD *)v5 + 4);
        }
        *((_QWORD *)v5 + 4) = v55 + 1;
        *v55 = 1;
        v56 = valuePtr.i64[0];
        v57 = (uint64_t *)*((_QWORD *)v5 + 4);
        if ((unint64_t)(v57 + 1) > *((_QWORD *)v5 + 5))
        {
          CA::Render::Encoder::grow(v5, 8);
          v57 = (uint64_t *)*((_QWORD *)v5 + 4);
        }
        *v57 = v56;
      }
      v18 = *((_QWORD *)v5 + 4) + 8;
      goto LABEL_64;
    case 4:
      Value = CFBooleanGetValue((CFBooleanRef)v4);
      v20 = (Boolean *)*((_QWORD *)v5 + 4);
      if ((unint64_t)(v20 + 1) > *((_QWORD *)v5 + 5))
      {
        CA::Render::Encoder::grow(v5, 1);
        v20 = (Boolean *)*((_QWORD *)v5 + 4);
      }
      *((_QWORD *)v5 + 4) = v20 + 1;
      *v20 = Value;
      return;
    case 5:
      BytePtr = CFDataGetBytePtr((CFDataRef)v4);
      Length = CFDataGetLength((CFDataRef)v4);
      v23 = (void *)CFRetain(v4);
      CA::Render::Encoder::encode_data_async(v5, BytePtr, Length, (uint64_t (*)(const void *, void *))CA::Render::release_cfdata, v23);
      return;
    case 6:
      Count = CFArrayGetCount((CFArrayRef)v4);
      v25 = (CFIndex *)*((_QWORD *)v5 + 4);
      if ((unint64_t)(v25 + 1) > *((_QWORD *)v5 + 5))
      {
        CA::Render::Encoder::grow(v5, 8);
        v25 = (CFIndex *)*((_QWORD *)v5 + 4);
      }
      *v25 = Count;
      *((_QWORD *)v5 + 4) += 8;
      if (Count)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v4, i);
          CA::Render::Encoder::encode_cfobject(v5, ValueAtIndex);
        }
      }
      return;
    case 7:
      v28 = CFDictionaryGetCount((CFDictionaryRef)v4);
      v29 = (CFIndex *)*((_QWORD *)v5 + 4);
      if ((unint64_t)(v29 + 1) > *((_QWORD *)v5 + 5))
      {
        CA::Render::Encoder::grow(v5, 8);
        v29 = (CFIndex *)*((_QWORD *)v5 + 4);
      }
      *v29 = v28;
      *((_QWORD *)v5 + 4) += 8;
      CFDictionaryApplyFunction((CFDictionaryRef)v4, (CFDictionaryApplierFunction)CA::Render::encode_dictionary_item, v5);
      return;
    case 8:
      CA::Render::Encoder::encode_colorspace(v5, (CGColorSpaceRef)v4);
      return;
    case 9:
      ColorSpace = CGImageGetColorSpace((CGImageRef)v4);
      v31 = (unsigned __int8 *)CA::Render::copy_image((CA::Render *)v4, ColorSpace, 0, 0.0, 1.0);
      v32 = v31[12];
      v33 = (_BYTE *)*((_QWORD *)v5 + 4);
      if ((unint64_t)(v33 + 1) > *((_QWORD *)v5 + 5))
      {
        CA::Render::Encoder::grow(v5, 1);
        v33 = (_BYTE *)*((_QWORD *)v5 + 4);
      }
      *((_QWORD *)v5 + 4) = v33 + 1;
      *v33 = v32;
      if (v32 == 51 || v32 == 23)
      {
        CA::Render::Encoder::encode_object(v5, (const CA::Render::Object *)v31);
      }
      else if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v58 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          valuePtr.i32[0] = 67109120;
          valuePtr.i32[1] = v32;
          _os_log_impl(&dword_184457000, v58, OS_LOG_TYPE_DEFAULT, "encode kCACFTypeImage got unsupported type %d", (uint8_t *)&valuePtr, 8u);
        }
      }
      v35 = (unsigned int *)(v31 + 8);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
        (*(void (**)(unsigned __int8 *))(*(_QWORD *)v31 + 16))(v31);
      return;
    case 10:
      v38 = (CGColor *)CAGetColorSpace(0x1Cu);
      valuePtr = 0uLL;
      CA::Render::convert_cgcolor_to_float((CGColor *)v4, v38, (CGColorSpace *)&valuePtr, 0, v39);
      v40 = (int32x4_t)valuePtr;
      if (*(float *)&valuePtr.i32[3] != 0.0 && *(float *)&valuePtr.i32[3] != 1.0)
      {
        *(float32x2_t *)v42.i8 = vdiv_f32(*(float32x2_t *)valuePtr.i8, (float32x2_t)vdup_laneq_s32((int32x4_t)valuePtr, 3));
        v42.i64[1] = __PAIR64__(vextq_s8(valuePtr, valuePtr, 8uLL).u32[1], *(float *)&valuePtr.i32[2] / *(float *)&valuePtr.i32[3]);
        v40 = v42;
      }
      v43 = (int32x4_t *)*((_QWORD *)v5 + 4);
      if ((unint64_t)&v43[1] > *((_QWORD *)v5 + 5))
      {
        v59 = v40;
        CA::Render::Encoder::grow(v5, 16);
        v40 = v59;
        v43 = (int32x4_t *)*((_QWORD *)v5 + 4);
      }
      *v43 = v40;
      v18 = *((_QWORD *)v5 + 4) + 16;
LABEL_64:
      *((_QWORD *)v5 + 4) = v18;
      return;
    case 11:
      v44 = (const CA::Render::Object *)-[__CFString CA_copyRenderValue](v4, "CA_copyRenderValue");
      CA::Render::Encoder::encode_object(v5, v44);
      if (!v44)
        return;
      v45 = (unsigned int *)((char *)v44 + 8);
      do
      {
        v46 = __ldaxr(v45);
        v47 = --v46 == 0;
      }
      while (__stlxr(v46, v45));
      goto LABEL_81;
    case 12:
      v48 = (const char *)-[__CFString objCType](v4, "objCType");
      if (!strcmp(v48, "{CGPoint=dd}"))
      {
        v49 = 0;
LABEL_88:
        v50 = 16;
        goto LABEL_89;
      }
      if (!strcmp(v48, "{CGSize=dd}"))
      {
        v49 = 1;
        goto LABEL_88;
      }
      if (!strcmp(v48, "{CGRect={CGPoint=dd}{CGSize=dd}}"))
      {
        v49 = 2;
        v50 = 32;
      }
      else if (!strcmp(v48, "{CATransform3D=dddddddddddddddd}"))
      {
        v49 = 3;
        v50 = 128;
      }
      else if (!strcmp(v48, "{CGAffineTransform=dddddd}"))
      {
        v49 = 4;
        v50 = 48;
      }
      else if (!strcmp(v48, "{CAPoint3D=ddd}"))
      {
        v49 = 5;
        v50 = 24;
      }
      else if (!strcmp(v48, "{CACornerRadii={CGSize=dd}{CGSize=dd}{CGSize=dd}{CGSize=dd}}"))
      {
        v49 = 6;
        v50 = 64;
      }
      else
      {
        if (strcmp(v48, "{CAColorMatrix=ffffffffffffffffffff}"))
          return;
        v49 = 7;
        v50 = 80;
      }
LABEL_89:
      -[__CFString getValue:size:](v4, "getValue:size:", &valuePtr, v50);
      v54 = (char *)*((_QWORD *)v5 + 4);
      if ((unint64_t)(v54 + 1) > *((_QWORD *)v5 + 5))
      {
        CA::Render::Encoder::grow(v5, 1);
        v54 = (char *)*((_QWORD *)v5 + 4);
      }
      *((_QWORD *)v5 + 4) = v54 + 1;
      *v54 = v49;
      p_valuePtr = (int32x4_t *)&valuePtr;
      v12 = v5;
      v11 = v50;
LABEL_92:
      CA::Render::Encoder::encode_data(v12, p_valuePtr, v11);
      return;
    case 13:
      v44 = (const CA::Render::Object *)-[__CFString CA_copyRenderValue](v4, "CA_copyRenderValue");
      CA::Render::Encoder::encode_object(v5, v44);
      if (!v44)
        return;
      v51 = (unsigned int *)((char *)v44 + 8);
      do
      {
        v52 = __ldaxr(v51);
        v47 = --v52 == 0;
      }
      while (__stlxr(v52, v51));
LABEL_81:
      if (v47)
        (*(void (**)(const CA::Render::Object *))(*(_QWORD *)v44 + 16))(v44);
      return;
    default:
      return;
  }
}

void *CA::Render::Encoder::encode_data(CA::Render::Encoder *this, const void *__src, size_t a3)
{
  size_t *v6;
  void *result;

  v6 = (size_t *)*((_QWORD *)this + 4);
  if ((unint64_t)(v6 + 1) > *((_QWORD *)this + 5))
  {
    CA::Render::Encoder::grow(this, 8);
    v6 = (size_t *)*((_QWORD *)this + 4);
  }
  *v6 = a3;
  result = (void *)(*((_QWORD *)this + 4) + 8);
  *((_QWORD *)this + 4) = result;
  if (a3)
  {
    if ((unint64_t)result + a3 > *((_QWORD *)this + 5))
    {
      CA::Render::Encoder::grow(this, a3);
      result = (void *)*((_QWORD *)this + 4);
    }
    result = memcpy(result, __src, a3);
    *((_QWORD *)this + 4) += a3;
  }
  return result;
}

void *CA::Render::Timing::encode(CA::Render::Timing *this, CA::Render::Encoder *a2)
{
  int v4;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *result;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  CA::Render::Object::encode(this, a2);
  v4 = *((_DWORD *)this + 4);
  v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v5 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v5 = v4;
  v6 = *((_QWORD *)a2 + 4);
  v7 = *((_QWORD *)a2 + 5);
  v8 = (_QWORD *)(v6 + 4);
  *((_QWORD *)a2 + 4) = v6 + 4;
  v9 = *((_QWORD *)this + 3);
  if (v6 + 12 > v7)
  {
    CA::Render::Encoder::grow(a2, 8);
    v8 = (_QWORD *)*((_QWORD *)a2 + 4);
  }
  *v8 = v9;
  v10 = *((_QWORD *)a2 + 4);
  v11 = *((_QWORD *)a2 + 5);
  v12 = (_QWORD *)(v10 + 8);
  *((_QWORD *)a2 + 4) = v10 + 8;
  v13 = *((_QWORD *)this + 4);
  if (v10 + 16 > v11)
  {
    CA::Render::Encoder::grow(a2, 8);
    v12 = (_QWORD *)*((_QWORD *)a2 + 4);
  }
  *v12 = v13;
  *((_QWORD *)a2 + 4) += 8;
  result = (void *)(*(uint64_t (**)(CA::Render::Encoder *))(*(_QWORD *)a2 + 40))(a2);
  v15 = *((_QWORD *)this + 5);
  v16 = (_QWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v16 + 1) > *((_QWORD *)a2 + 5))
  {
    result = CA::Render::Encoder::grow(a2, 8);
    v16 = (_QWORD *)*((_QWORD *)a2 + 4);
  }
  *v16 = v15;
  v17 = *((_QWORD *)a2 + 4);
  v18 = *((_QWORD *)a2 + 5);
  v19 = (_QWORD *)(v17 + 8);
  *((_QWORD *)a2 + 4) = v17 + 8;
  v20 = *((_QWORD *)this + 6);
  if (v17 + 16 > v18)
  {
    result = CA::Render::Encoder::grow(a2, 8);
    v19 = (_QWORD *)*((_QWORD *)a2 + 4);
  }
  *v19 = v20;
  v21 = *((_QWORD *)a2 + 4);
  v22 = *((_QWORD *)a2 + 5);
  v23 = (_QWORD *)(v21 + 8);
  *((_QWORD *)a2 + 4) = v21 + 8;
  v24 = *((_QWORD *)this + 7);
  if (v21 + 16 > v22)
  {
    result = CA::Render::Encoder::grow(a2, 8);
    v23 = (_QWORD *)*((_QWORD *)a2 + 4);
  }
  *v23 = v24;
  *((_QWORD *)a2 + 4) += 8;
  return result;
}

uint64_t CA::Render::iosurface_load_attachments(CA::Render *this, CA::Render::Surface *a2)
{
  unsigned int v2;
  __IOSurface *v4;
  int has_alpha;
  __IOSurface *v6;
  int v7;
  _BOOL4 v8;
  CFTypeRef v9;
  const void *v10;
  CGColorSpaceRef v11;
  CGColorSpace *colorspace_from_bulk_attachments;
  _BOOL4 v13;
  CFTypeRef v14;
  CFTypeID v15;
  _BOOL4 v16;
  float v18;
  _BOOL4 v19;
  int64x2_t v20;
  float64x2_t v21;
  int32x2_t v22;
  int8x16_t v23;
  int8x16_t v24;
  float64x2_t v25;
  int64x2_t v26;
  unint64_t v27;
  int8x16_t v28;
  int8x16_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  int32x4_t v34;
  int32x2_t v35;
  __int16 v36;
  int v37;
  int DataProperty;
  int v39;
  uint64_t result;
  NSObject *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint8_t buf[4];
  IOSurfaceID ID;
  __int16 v48;
  int v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  int v60;
  uint64_t v61;

  v2 = a2;
  v61 = *MEMORY[0x1E0C80C00];
  v45 = 0u;
  v43 = 0u;
  v44 = 0u;
  v42 = 0u;
  v4 = (__IOSurface *)*((_QWORD *)this + 14);
  if ((a2 & 2) == 0)
  {
    has_alpha = CA::Render::fourcc_has_alpha((CA::Render *)*((unsigned int *)this + 32));
    v7 = has_alpha;
    if (((v2 & 0x3C) != 0 || has_alpha)
      && (v45 = 0u, v43 = 0u, v44 = 0u, v42 = 0u, !IOSurfaceGetBulkAttachments()))
    {
      v8 = 1;
      if ((v2 & 4) == 0)
        goto LABEL_31;
    }
    else
    {
      v8 = 0;
      if ((v2 & 4) == 0)
        goto LABEL_31;
    }
    goto LABEL_23;
  }
  *((_QWORD *)&v45 + 1) = 0;
  v43 = 0uLL;
  v44 = 0uLL;
  v42 = 0uLL;
  v8 = IOSurfaceGetBulkAttachments() == 0;
  v9 = IOSurfaceCopyValue(v4, (CFStringRef)*MEMORY[0x1E0CBBF90]);
  if (v9)
  {
    v10 = v9;
    v11 = CGColorSpaceCreateWithPropertyList(v9);
    goto LABEL_9;
  }
  v14 = IOSurfaceCopyValue(v4, (CFStringRef)*MEMORY[0x1E0CBC010]);
  if (v14)
  {
    v10 = v14;
    v15 = CFGetTypeID(v14);
    if (v15 != CFDataGetTypeID())
    {
      colorspace_from_bulk_attachments = 0;
      goto LABEL_10;
    }
    v11 = (CGColorSpaceRef)MEMORY[0x186DBB8CC](v10);
LABEL_9:
    colorspace_from_bulk_attachments = v11;
LABEL_10:
    CFRelease(v10);
    goto LABEL_11;
  }
  colorspace_from_bulk_attachments = 0;
LABEL_11:
  if (colorspace_from_bulk_attachments)
    v13 = 0;
  else
    v13 = v8;
  if (v13)
    colorspace_from_bulk_attachments = CA::Render::load_colorspace_from_bulk_attachments(0, 0);
  if (colorspace_from_bulk_attachments)
  {
    CA::Render::Texture::set_colorspace(this, colorspace_from_bulk_attachments);
    CGColorSpaceRelease(colorspace_from_bulk_attachments);
  }
  else
  {
    IOSurfaceRemoveValue(v4, (CFStringRef)*MEMORY[0x1E0CBBF70]);
  }
  v7 = CA::Render::fourcc_has_alpha((CA::Render *)*((unsigned int *)this + 32));
  if ((v2 & 4) != 0)
  {
LABEL_23:
    if (DWORD1(v44))
      v16 = v8;
    else
      v16 = 0;
    if (v16 && HIDWORD(v44) != 0)
    {
      v18 = (double)(int)v44 * (double)SHIDWORD(v44) / ((double)SDWORD2(v44) * (double)SDWORD1(v44));
      *((float *)this + 8) = v18;
    }
  }
LABEL_31:
  if ((v2 & 8) != 0)
  {
    v19 = DWORD1(v42) && v8;
    if (v19 && HIDWORD(v42) && DWORD1(v43) && HIDWORD(v43))
    {
      v20.i64[0] = SDWORD1(v42);
      v20.i64[1] = SHIDWORD(v42);
      v21 = vcvtq_f64_s64(v20);
      v22 = *(int32x2_t *)((char *)this + 16);
      v20.i64[0] = (int)v42;
      v20.i64[1] = SDWORD2(v42);
      v23 = (int8x16_t)vdivq_f64(vcvtq_f64_s64(v20), v21);
      v20.i64[0] = v22.u32[0];
      v20.i64[1] = v22.u32[1];
      v24 = (int8x16_t)vcvtq_f64_u64((uint64x2_t)v20);
      v25 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v24, (float64x2_t)v23), v23, v24);
      v26 = vceqzq_f64(v25);
      v27 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v26, 1), (int8x16_t)v26).u64[0];
      v28 = 0uLL;
      if ((v27 & 0x8000000000000000) == 0)
      {
        v29 = vorrq_s8((int8x16_t)vcltzq_f64(v25), (int8x16_t)vcgezq_f64(v25));
        v30 = (float64x2_t)vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v29), 1), v29);
        if ((*(_QWORD *)&v30.f64[0] & 0x8000000000000000) == 0)
        {
          v30.f64[0] = (double)SDWORD1(v43);
          *(_QWORD *)&v31.f64[1] = v24.i64[1];
          v31.f64[0] = (double)(int)v43;
          *(_QWORD *)&v32.f64[0] = *(_OWORD *)&vdivq_f64(v31, v30);
          v30.f64[1] = (double)SDWORD2(v43) / (double)SHIDWORD(v43) + v25.f64[1];
          v32.f64[1] = vsubq_f64(*(float64x2_t *)&v24, v30).f64[1];
          v33 = vmlaq_f64(v32, (float64x2_t)xmmword_18474E660, vsubq_f64((float64x2_t)v24, v25));
          v34 = (int32x4_t)vcvtpq_s64_f64(vmaxnmq_f64(v33, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
          v28 = (int8x16_t)vuzp1q_s32(v34, (int32x4_t)vsubq_s64(vcvtmq_s64_f64(vminnmq_f64(vaddq_f64(v33, v25), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v34));
        }
      }
      *((_WORD *)this + 12) = v28.i16[0];
      *((_WORD *)this + 13) = v28.i16[2];
      v35 = vsub_s32(v22, vadd_s32(*(int32x2_t *)v28.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)));
      *((_WORD *)this + 15) = v35.i16[2];
      *((_WORD *)this + 14) = v35.i16[0];
    }
  }
  if ((v8 & (v2 >> 4)) == 1)
  {
    if ((BYTE12(v45) | 2) == 0x12)
      *((_WORD *)this + 168) |= 0x400u;
    v36 = 2;
    if (BYTE10(v45) != 14 && BYTE10(v45) != 248)
      v36 = 1;
    *((_WORD *)this + 168) = *((_WORD *)this + 168) & 0xFFFC | v36;
  }
  if ((v8 & (v2 >> 5)) == 1)
  {
    CA::Render::iosurface_get_edr_headroom(v4, v6);
    *((_DWORD *)this + 14) = v37;
  }
  if ((v7 & v8) == 1)
    *((_WORD *)this + 168) &= ~8u;
  if (v4)
  {
    if (CADeviceSupportsFilmGrain::once[0] != -1)
      dispatch_once(CADeviceSupportsFilmGrain::once, &__block_literal_global_126);
    if (CADeviceSupportsFilmGrain::has_capability)
    {
      v60 = 0;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      DataProperty = IOSurfaceGetDataProperty();
      if (DataProperty)
      {
        if (byte_1ECDC6AED)
        {
          v39 = DataProperty;
          if (x_log_hook_p())
          {
            IOSurfaceGetID(v4);
            x_log_();
          }
          else
          {
            v41 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109376;
              ID = IOSurfaceGetID(v4);
              v48 = 1024;
              v49 = v39;
              _os_log_impl(&dword_184457000, v41, OS_LOG_TYPE_DEFAULT, "Film Grain Query Failed 0x%x error0x%x", buf, 0xEu);
            }
          }
        }
      }
    }
  }
  result = (*(uint64_t (**)(CA::Render *))(*(_QWORD *)this + 264))(this);
  if ((result & 1) != 0
    || (result = (*(uint64_t (**)(CA::Render *))(*(_QWORD *)this + 256))(this), (_DWORD)result))
  {
    *((_WORD *)this + 168) |= 0x20u;
  }
  return result;
}

uint64_t CA::Render::fourcc_has_alpha(CA::Render *this)
{
  int v1;
  uint64_t result;
  int v3;
  unsigned __int16 v4;
  unsigned __int16 v5;

  v1 = (int)this;
  result = 1;
  if (v1 > 1380401728)
  {
    if (v1 <= 1949327730)
    {
      if (v1 <= 1815162993)
      {
        if (v1 > 1395864161)
        {
          if (v1 > 1647534391)
          {
            if (v1 == 1647534392)
              return result;
            v3 = 1647719521;
          }
          else
          {
            if (v1 == 1395864162)
              return result;
            v3 = 1647522401;
          }
          goto LABEL_86;
        }
        if (v1 != 1380401729 && v1 != 1380410945)
        {
          v3 = 1380411457;
          goto LABEL_86;
        }
        return result;
      }
      if (v1 > 1932550514)
      {
        if (v1 > 1932812658)
        {
          if (v1 == 1932812659)
            return result;
          v3 = 1932866865;
        }
        else
        {
          if (v1 == 1932550515)
            return result;
          v3 = 1932681587;
        }
        goto LABEL_86;
      }
      if (v1 == 1815162994 || v1 == 1815491698)
        return result;
      v3 = 1916022840;
    }
    else
    {
      if (v1 > 1999908960)
      {
        if (v1 > 2016567666)
        {
          if (v1 > 2016698738)
          {
            if (v1 == 2016698739)
              return result;
            v3 = 2033463606;
          }
          else
          {
            if (v1 == 2016567667)
              return result;
            v3 = 2016698680;
          }
        }
        else if (v1 > 2016436594)
        {
          if (v1 == 2016436595)
            return result;
          v3 = 2016567608;
        }
        else
        {
          if (v1 == 1999908961)
            return result;
          v3 = 2016436536;
        }
        goto LABEL_86;
      }
      if (v1 > 1982882103)
      {
        if (v1 > 1983131703)
        {
          if (v1 == 1983131704)
            return result;
          v3 = 1983144248;
        }
        else
        {
          if (v1 == 1982882104)
            return result;
          v3 = 1983013176;
        }
        goto LABEL_86;
      }
      if (v1 == 1949327731 || v1 == 1949458803)
        return result;
      v3 = 1949589875;
    }
LABEL_86:
    if (v1 != v3)
      return 0;
    return result;
  }
  if (v1 <= 645410871)
  {
    if (v1 <= 645148786)
    {
      if (v1 > 643969847)
      {
        if (v1 > 645083762)
        {
          if (v1 == 645083763)
            return result;
          v4 = 13427;
        }
        else
        {
          if (v1 == 643969848)
            return result;
          v4 = 12403;
        }
        v3 = v4 | 0x26730000;
        goto LABEL_86;
      }
      if (v1 != 32 && v1 != 641877825)
      {
        v3 = 642934849;
        goto LABEL_86;
      }
      return result;
    }
    if (v1 > 645279799)
    {
      if (v1 > 645280823)
      {
        if (v1 == 645280824)
          return result;
        v3 = 645346401;
      }
      else
      {
        if (v1 == 645279800)
          return result;
        v3 = 645280312;
      }
      goto LABEL_86;
    }
    if (v1 == 645148787 || v1 == 645149299)
      return result;
    v3 = 645149811;
    goto LABEL_86;
  }
  if (v1 > 843264309)
  {
    if (v1 > 1094862673)
    {
      if (v1 > 1279340599)
      {
        if (v1 == 1279340600)
          return result;
        v3 = 1279342648;
      }
      else
      {
        if (v1 == 1094862674)
          return result;
        v3 = 1111970369;
      }
    }
    else if (v1 > 892679472)
    {
      if (v1 == 892679473)
        return result;
      v3 = 1093677112;
    }
    else
    {
      if (v1 == 843264310)
        return result;
      v3 = 875836468;
    }
    goto LABEL_86;
  }
  if (v1 > 645411442)
  {
    if (v1 > 645411954)
    {
      if (v1 == 645411955)
        return result;
      v3 = 843264104;
      goto LABEL_86;
    }
    if (v1 == 645411443)
      return result;
    v5 = 13368;
    goto LABEL_55;
  }
  if (v1 != 645410872 && v1 != 645410931)
  {
    v5 = 12856;
LABEL_55:
    v3 = v5 | 0x26780000;
    goto LABEL_86;
  }
  return result;
}

uint64_t CA::Render::Surface::should_hdr_tonemap(CA::Render::Surface *this)
{
  return (*((unsigned __int16 *)this + 168) >> 10) & 1;
}

BOOL CA::HDRProcessorInternal::supports_scaling_transforms(CA::HDRProcessorInternal *this, CA::Render::Surface *a2, const CA::Render::Update *a3)
{
  unsigned int v4;

  v4 = *((_DWORD *)a3 + 120);
  if (CADeviceHasHardwareAcceleratedHDR::once != -1)
    dispatch_once(&CADeviceHasHardwareAcceleratedHDR::once, &__block_literal_global_93);
  if (!CADeviceHasHardwareAcceleratedHDR::has_capability)
    return 0;
  if (v4 > 3 || v4 == 2)
    return 0;
  if (!(*(unsigned int (**)(CA::Render::Surface *))(*(_QWORD *)a2 + 256))(a2))
    return 1;
  if (CADeviceSupportsFilmGrainScaling::once != -1)
    dispatch_once(&CADeviceSupportsFilmGrainScaling::once, &__block_literal_global_130);
  return CADeviceSupportsFilmGrainScaling::supports_film_grain_scaling != 0;
}

uint64_t CA::Render::Surface::should_add_film_grain(CA::Render::Surface *this)
{
  return (*((unsigned __int16 *)this + 168) >> 7) & 1;
}

BOOL CA::HDRProcessorInternal::supports_rotation_transforms(CA::HDRProcessorInternal *this, CA::Render::Surface *a2, const CA::Render::Update *a3)
{
  unsigned int v3;
  _BOOL4 v5;

  v3 = *((_DWORD *)a3 + 120);
  if (CADeviceHasHardwareAcceleratedHDR::once != -1)
    dispatch_once(&CADeviceHasHardwareAcceleratedHDR::once, &__block_literal_global_93);
  v5 = v3 < 2 || v3 == 3;
  return CADeviceHasHardwareAcceleratedHDR::has_capability && v5;
}

void CA::Render::ShapeLayer::encode(CA::Render::ShapeLayer *this, CA::Render::Encoder *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  _BYTE *v25;
  int v26;
  _BYTE *v27;
  int v28;
  _BYTE *v29;

  CA::Render::Object::encode(this, a2);
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 2));
  v4 = (_OWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v4 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 16);
    v4 = (_OWORD *)*((_QWORD *)a2 + 4);
  }
  *v4 = *(_OWORD *)((char *)this + 24);
  *((_QWORD *)a2 + 4) += 16;
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 5));
  v5 = (_OWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v5 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 16);
    v5 = (_OWORD *)*((_QWORD *)a2 + 4);
  }
  *v5 = *((_OWORD *)this + 3);
  *((_QWORD *)a2 + 4) += 16;
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 8));
  v6 = *((_QWORD *)this + 9);
  v7 = (_QWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v7 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 8);
    v7 = (_QWORD *)*((_QWORD *)a2 + 4);
  }
  *v7 = v6;
  v8 = *((_QWORD *)a2 + 4);
  v9 = *((_QWORD *)a2 + 5);
  v10 = (_QWORD *)(v8 + 8);
  *((_QWORD *)a2 + 4) = v8 + 8;
  v11 = *((_QWORD *)this + 10);
  if (v8 + 16 > v9)
  {
    CA::Render::Encoder::grow(a2, 8);
    v10 = (_QWORD *)*((_QWORD *)a2 + 4);
  }
  *v10 = v11;
  v12 = *((_QWORD *)a2 + 4);
  v13 = *((_QWORD *)a2 + 5);
  v14 = (_QWORD *)(v12 + 8);
  *((_QWORD *)a2 + 4) = v12 + 8;
  v15 = *((_QWORD *)this + 11);
  if (v12 + 16 > v13)
  {
    CA::Render::Encoder::grow(a2, 8);
    v14 = (_QWORD *)*((_QWORD *)a2 + 4);
  }
  *v14 = v15;
  v16 = *((_QWORD *)a2 + 4);
  v17 = *((_QWORD *)a2 + 5);
  v18 = (_QWORD *)(v16 + 8);
  *((_QWORD *)a2 + 4) = v16 + 8;
  v19 = *((_QWORD *)this + 12);
  if (v16 + 16 > v17)
  {
    CA::Render::Encoder::grow(a2, 8);
    v18 = (_QWORD *)*((_QWORD *)a2 + 4);
  }
  *v18 = v19;
  v20 = *((_QWORD *)a2 + 4);
  v21 = *((_QWORD *)a2 + 5);
  v22 = (_QWORD *)(v20 + 8);
  *((_QWORD *)a2 + 4) = v20 + 8;
  v23 = *((_QWORD *)this + 13);
  if (v20 + 16 > v21)
  {
    CA::Render::Encoder::grow(a2, 8);
    v22 = (_QWORD *)*((_QWORD *)a2 + 4);
  }
  *v22 = v23;
  *((_QWORD *)a2 + 4) += 8;
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 14));
  v24 = *((_DWORD *)this + 30);
  v25 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v25 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 1);
    v25 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = v25 + 1;
  *v25 = v24;
  v26 = *((_DWORD *)this + 30);
  v27 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v27 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 1);
    v27 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = v27 + 1;
  *v27 = BYTE1(v26);
  v28 = *((_DWORD *)this + 30);
  v29 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v29 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 1);
    v29 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = v29 + 1;
  *v29 = BYTE2(v28);
}

void *CA::Render::Path::encode(CA::Render::Path *this, CA::Render::Encoder *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  int v17;
  unint64_t v18;
  void *v19;
  const void *v20;
  size_t v21;
  unint64_t v22;
  void *v23;
  const void *v24;
  unsigned int v25;
  uint64_t v26;
  void *result;

  v4 = *((_QWORD *)this + 6) | 1;
  v5 = (uint64_t *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v5 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 8);
    v5 = (uint64_t *)*((_QWORD *)a2 + 4);
  }
  *v5 = v4;
  v6 = *((_QWORD *)a2 + 4);
  v7 = *((_QWORD *)a2 + 5);
  v8 = (_DWORD *)(v6 + 8);
  *((_QWORD *)a2 + 4) = v6 + 8;
  v9 = *((_DWORD *)this + 5);
  if (v6 + 12 > v7)
  {
    CA::Render::Encoder::grow(a2, 4);
    v8 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v8 = v9;
  v10 = *((_QWORD *)a2 + 4);
  v11 = *((_QWORD *)a2 + 5);
  v12 = (_DWORD *)(v10 + 4);
  *((_QWORD *)a2 + 4) = v10 + 4;
  v13 = *((_DWORD *)this + 6);
  if (v10 + 8 > v11)
  {
    CA::Render::Encoder::grow(a2, 4);
    v12 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v12 = v13;
  v14 = *((_QWORD *)a2 + 4);
  v15 = *((_QWORD *)a2 + 5);
  v16 = (_DWORD *)(v14 + 4);
  *((_QWORD *)a2 + 4) = v14 + 4;
  v17 = *((_DWORD *)this + 4);
  if (v14 + 8 > v15)
  {
    CA::Render::Encoder::grow(a2, 4);
    v16 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v16 = v17;
  v18 = *((_QWORD *)a2 + 5);
  v19 = (void *)(*((_QWORD *)a2 + 4) + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = (const void *)*((_QWORD *)this + 5);
  v21 = *((unsigned int *)this + 5);
  if ((unint64_t)v19 + v21 > v18)
  {
    CA::Render::Encoder::grow(a2, *((unsigned int *)this + 5));
    v19 = (void *)*((_QWORD *)a2 + 4);
  }
  memcpy(v19, v20, v21);
  v22 = *((_QWORD *)a2 + 5);
  v23 = (void *)(*((_QWORD *)a2 + 4) + v21);
  *((_QWORD *)a2 + 4) = v23;
  v24 = (const void *)*((_QWORD *)this + 4);
  v25 = 2 * *((_DWORD *)this + 6);
  v26 = 8 * v25;
  if ((unint64_t)v23 + v26 > v22)
  {
    CA::Render::Encoder::grow(a2, v26);
    v23 = (void *)*((_QWORD *)a2 + 4);
  }
  result = memcpy(v23, v24, v26);
  *((_QWORD *)a2 + 4) += v26;
  return result;
}

void CA::Render::encode_remove_animation(CA::Render *this, CA::Render::Encoder *a2, void *a3, const __CFString *a4)
{
  _BYTE *v7;
  _QWORD *v8;

  v7 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)(v7 + 1) > *((_QWORD *)this + 5))
  {
    CA::Render::Encoder::grow(this, 1);
    v7 = (_BYTE *)*((_QWORD *)this + 4);
  }
  *((_QWORD *)this + 4) = v7 + 1;
  *v7 = 6;
  v8 = (_QWORD *)*((_QWORD *)this + 4);
  if ((unint64_t)(v8 + 1) > *((_QWORD *)this + 5))
  {
    CA::Render::Encoder::grow(this, 8);
    v8 = (_QWORD *)*((_QWORD *)this + 4);
  }
  *v8 = a2;
  *((_QWORD *)this + 4) += 8;
  CA::Render::Encoder::encode_cfobject(this, a3);
}

void CA::Render::DeferredEncoder::mark_begin_time(CA::Render::DeferredEncoder *this)
{
  unint64_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *i;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  int8x8_t prime;
  void *v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;

  v2 = *((_QWORD *)this + 23);
  if (v2)
  {
    v3 = *((_QWORD *)this + 19);
    if (v3)
    {
      v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
      v4.i16[0] = vaddlv_u8(v4);
      if (v4.u32[0] > 1uLL)
      {
        v5 = *((_QWORD *)this + 23);
        if (v2 >= v3)
          v5 = v2 % v3;
      }
      else
      {
        v5 = (v3 - 1) & v2;
      }
      v6 = *(_QWORD **)(*((_QWORD *)this + 18) + 8 * v5);
      if (v6)
      {
        for (i = (_QWORD *)*v6; i; i = (_QWORD *)*i)
        {
          v8 = i[1];
          if (v8 == v2)
          {
            if (i[2] == v2)
              goto LABEL_75;
          }
          else
          {
            if (v4.u32[0] > 1uLL)
            {
              if (v8 >= v3)
                v8 %= v3;
            }
            else
            {
              v8 &= v3 - 1;
            }
            if (v8 != v5)
              break;
          }
        }
      }
    }
    else
    {
      v5 = 0;
    }
    v9 = *((_QWORD *)this + 4) - *((_QWORD *)this + 3);
    v10 = operator new(0x20uLL);
    *v10 = 0;
    v10[1] = v2;
    v10[2] = v2;
    v10[3] = v9;
    v11 = (float)(unint64_t)(*((_QWORD *)this + 21) + 1);
    v12 = *((float *)this + 44);
    if (v3 && (float)(v12 * (float)v3) >= v11)
    {
LABEL_65:
      v29 = *((_QWORD *)this + 18);
      v30 = *(_QWORD **)(v29 + 8 * v5);
      if (v30)
      {
        *v10 = *v30;
      }
      else
      {
        v31 = *((_QWORD *)this + 20);
        *v10 = v31;
        *((_QWORD *)this + 20) = v10;
        *(_QWORD *)(v29 + 8 * v5) = (char *)this + 160;
        if (!v31)
        {
LABEL_74:
          ++*((_QWORD *)this + 21);
          goto LABEL_75;
        }
        v32 = *(_QWORD *)(v31 + 8);
        if ((v3 & (v3 - 1)) != 0)
        {
          if (v32 >= v3)
            v32 %= v3;
        }
        else
        {
          v32 &= v3 - 1;
        }
        v30 = (_QWORD *)(*((_QWORD *)this + 18) + 8 * v32);
      }
      *v30 = v10;
      goto LABEL_74;
    }
    v13 = 1;
    if (v3 >= 3)
      v13 = (v3 & (v3 - 1)) != 0;
    v14 = v13 | (2 * v3);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      prime = (int8x8_t)v15;
    else
      prime = (int8x8_t)v14;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v3 = *((_QWORD *)this + 19);
    }
    if (*(_QWORD *)&prime > v3)
      goto LABEL_31;
    if (*(_QWORD *)&prime < v3)
    {
      v23 = vcvtps_u32_f32((float)*((unint64_t *)this + 21) / *((float *)this + 44));
      if (v3 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v3), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (*(_QWORD *)&prime <= v23)
        prime = (int8x8_t)v23;
      if (*(_QWORD *)&prime >= v3)
      {
        v3 = *((_QWORD *)this + 19);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v17 = operator new(8 * *(_QWORD *)&prime);
          v18 = (void *)*((_QWORD *)this + 18);
          *((_QWORD *)this + 18) = v17;
          if (v18)
            operator delete(v18);
          v19 = 0;
          *((int8x8_t *)this + 19) = prime;
          do
            *(_QWORD *)(*((_QWORD *)this + 18) + 8 * v19++) = 0;
          while (*(_QWORD *)&prime != v19);
          v20 = (_QWORD *)*((_QWORD *)this + 20);
          if (v20)
          {
            v21 = v20[1];
            v22 = (uint8x8_t)vcnt_s8(prime);
            v22.i16[0] = vaddlv_u8(v22);
            if (v22.u32[0] > 1uLL)
            {
              if (v21 >= *(_QWORD *)&prime)
                v21 %= *(_QWORD *)&prime;
            }
            else
            {
              v21 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*((_QWORD *)this + 18) + 8 * v21) = (char *)this + 160;
            v26 = (_QWORD *)*v20;
            if (*v20)
            {
              do
              {
                v27 = v26[1];
                if (v22.u32[0] > 1uLL)
                {
                  if (v27 >= *(_QWORD *)&prime)
                    v27 %= *(_QWORD *)&prime;
                }
                else
                {
                  v27 &= *(_QWORD *)&prime - 1;
                }
                if (v27 != v21)
                {
                  v28 = *((_QWORD *)this + 18);
                  if (!*(_QWORD *)(v28 + 8 * v27))
                  {
                    *(_QWORD *)(v28 + 8 * v27) = v20;
                    goto LABEL_56;
                  }
                  *v20 = *v26;
                  *v26 = **(_QWORD **)(*((_QWORD *)this + 18) + 8 * v27);
                  **(_QWORD **)(*((_QWORD *)this + 18) + 8 * v27) = v26;
                  v26 = v20;
                }
                v27 = v21;
LABEL_56:
                v20 = v26;
                v26 = (_QWORD *)*v26;
                v21 = v27;
              }
              while (v26);
            }
          }
          v3 = (unint64_t)prime;
          goto LABEL_60;
        }
        v33 = (void *)*((_QWORD *)this + 18);
        *((_QWORD *)this + 18) = 0;
        if (v33)
          operator delete(v33);
        v3 = 0;
        *((_QWORD *)this + 19) = 0;
      }
    }
LABEL_60:
    if ((v3 & (v3 - 1)) != 0)
    {
      if (v2 >= v3)
        v5 = v2 % v3;
      else
        v5 = v2;
    }
    else
    {
      v5 = (v3 - 1) & v2;
    }
    goto LABEL_65;
  }
LABEL_75:
  *((_QWORD *)this + 23) = 0;
}

uint64_t CA::Render::DeferredEncoder::mark_timing(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 184) = a2;
  return this;
}

void CA::Render::release_cfdata(CA::Render *this, CFTypeRef cf, void *a3)
{
  CFRelease(cf);
}

CGColorSpaceRef CA::Render::load_colorspace_from_bulk_attachments(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  CGColorSpace *v6;

  v2 = a1 - 1;
  v3 = 22;
  switch(v2)
  {
    case 0:
      if (a2 > 0xCu)
      {
        if (a2 == 16)
        {
          v3 = 18;
        }
        else
        {
          if (a2 != 13)
            return 0;
          v3 = 29;
        }
      }
      else if (a2 == 1)
      {
        v3 = 17;
      }
      else
      {
        if (a2 != 8)
          return 0;
        v3 = 26;
      }
      goto LABEL_22;
    case 4:
      v3 = 23;
      goto LABEL_22;
    case 5:
      goto LABEL_22;
    case 8:
      if (a2 > 0xFu)
      {
        if (a2 == 16)
        {
          v3 = 13;
          goto LABEL_22;
        }
        if (a2 == 18)
        {
          v3 = 12;
          goto LABEL_22;
        }
      }
      else
      {
        if (a2 == 8)
        {
          v3 = 10;
          goto LABEL_22;
        }
        if (a2 == 13)
        {
          v3 = 14;
          goto LABEL_22;
        }
      }
      v3 = 9;
LABEL_22:
      v6 = (CGColorSpace *)CAGetColorSpace(v3);
      return CGColorSpaceRetain(v6);
    case 10:
      if (a2 != 17)
        return 0;
      v3 = 8;
      goto LABEL_22;
    case 11:
      if (a2 == 18)
        v4 = 6;
      else
        v4 = 5;
      if (a2 == 16)
        v5 = 7;
      else
        v5 = v4;
      if (a2 == 8)
        v3 = 15;
      else
        v3 = v5;
      goto LABEL_22;
    default:
      return 0;
  }
}

void *CA::Render::NamedFunction::encode(CA::Render::NamedFunction *this, CA::Render::Encoder *a2)
{
  void *result;
  char v5;
  _BYTE *v6;
  int v7;
  _BYTE *v8;

  result = (void *)(*(uint64_t (**)(CA::Render::NamedFunction *))(*(_QWORD *)this + 96))(this);
  v5 = (char)result;
  v6 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v6 + 1) > *((_QWORD *)a2 + 5))
  {
    result = CA::Render::Encoder::grow(a2, 1);
    v6 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = v6 + 1;
  *v6 = v5;
  v7 = *((_DWORD *)this + 4);
  v8 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v8 + 1) > *((_QWORD *)a2 + 5))
  {
    result = CA::Render::Encoder::grow(a2, 1);
    v8 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = v8 + 1;
  *v8 = v7;
  return result;
}

uint64_t CA::Render::NamedFunction::function_type(CA::Render::NamedFunction *this)
{
  return 1;
}

void ___ZL18shared_server_initPv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v4;
  int v5;

  v4 = (void *)objc_msgSend(a4, "state");
  v5 = objc_msgSend(v4, "taskState");
  if (v5 == 4)
  {
    if (objc_msgSend((id)objc_msgSend(v4, "endowmentNamespaces"), "containsObject:", CFSTR("com.apple.frontboard.visibility")))CA::Render::post_notification(0x2Bu, 0, 0, 0);
  }
  else if ((v5 - 3) > 1)
  {
    return;
  }
  CA::Render::post_notification(0x2Cu, 0, 0, 0);
  CA::Render::post_notification(0x2Eu, 0, 0, 0);
}

void CA::WindowServer::IOMFBServer::register_frame_interval_range(CA::WindowServer::IOMFBServer *this, CA::Render::Object *a2, unsigned int *a3, void *a4)
{
  uint64_t v4;
  unsigned int v6;

  v4 = *((_QWORD *)a2 + 12);
  if ((*(_DWORD *)(v4 + 624) & 0x100) != 0)
  {
    v6 = a3[1];
    if ((!v6 || *(_DWORD *)(v4 + 24) == v6) && (*(_WORD *)(v4 + 656) & 0x1C00) == 0)
    {
      CA::WindowServer::IOMFBDisplay::register_frame_interval_range((os_unfair_lock_s *)v4, a3[2], a3[3], a3[4], a3[5], *((unsigned __int8 *)a3 + 24));
      *(_BYTE *)a3 = 1;
    }
  }
}

void CA::WindowServer::IOMFBDisplay::register_frame_interval_range(os_unfair_lock_s *this, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint8_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint8_t *v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  uint8_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  uint8_t *v41;
  __int128 v42;
  uint8_t *v43;
  _QWORD *v44;
  int v45;
  char v46;
  BOOL v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  unint64_t v59;
  int64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  __int128 v72;
  uint8_t *v73;
  char *v74;
  uint8_t *v75;
  char *v76;
  __int128 v77;
  char *v78;
  char *v79;
  int64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t i;
  _BYTE *v90;
  void *v91;
  NSObject *v92;
  _QWORD v93[3];
  uint8_t buf[16];
  _BYTE v95[10];
  __int16 v96;
  int v97;
  __int16 v98;
  void *v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v12 = this + 6839;
  os_unfair_lock_lock(this + 6839);
  if (byte_1ECDC6AC5)
  {
    memset(v93, 0, sizeof(v93));
    x_stream_printf((uint64_t)v93, "  Existing clients: %ld\n", v14, v15, v16, v17, v18, v19, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)&this[6842]._os_unfair_lock_opaque - *(_QWORD *)&this[6840]._os_unfair_lock_opaque) >> 3));
    v88 = *(_QWORD *)&this[6840]._os_unfair_lock_opaque;
    for (i = *(_QWORD *)&this[6842]._os_unfair_lock_opaque; v88 != i; v88 += 24)
      x_stream_printf((uint64_t)v93, "    %s[%d]: %u %u %u%s%s\n", v82, v83, v84, v85, v86, v87, (uint64_t)"");
    v90 = x_stream_finish((uint64_t)v93);
    if (v90)
    {
      v91 = v90;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v92 = x_log_category_frame_rate;
        if (os_log_type_enabled((os_log_t)x_log_category_frame_rate, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67110402;
          *(_DWORD *)&buf[4] = a3;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = a4;
          *(_WORD *)&buf[14] = 1024;
          *(_DWORD *)v95 = a5;
          *(_WORD *)&v95[4] = 1024;
          *(_DWORD *)&v95[6] = a6;
          v96 = 1024;
          v97 = a2;
          v98 = 2080;
          v99 = v91;
          _os_log_impl(&dword_184457000, v92, OS_LOG_TYPE_DEFAULT, "CAFrameRateServer: register_frame_interval_range %u %u %u (%d) from %d\n%s", buf, 0x2Au);
        }
      }
      free(v91);
    }
  }
  v20 = *(uint8_t **)&this[6842]._os_unfair_lock_opaque;
  v21 = *(uint8_t **)&this[6840]._os_unfair_lock_opaque;
  v22 = (v20 - v21) / 24;
  if (v20 == v21)
  {
LABEL_9:
    if (v22 >= 0x40)
    {
      if (x_log_hook_p())
        goto LABEL_59;
      v54 = x_log_category_frame_rate;
      if (!os_log_type_enabled((os_log_t)x_log_category_frame_rate, OS_LOG_TYPE_DEFAULT))
        goto LABEL_95;
      *(_WORD *)buf = 0;
      v55 = "CAFrameRateServer: too many requests!";
      v56 = v54;
      v57 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_73;
    }
    if (!a3)
    {
      if (x_log_hook_p())
      {
LABEL_59:
        x_log_();
        goto LABEL_95;
      }
      v64 = x_log_category_frame_rate;
      if (!os_log_type_enabled((os_log_t)x_log_category_frame_rate, OS_LOG_TYPE_ERROR))
        goto LABEL_95;
      *(_WORD *)buf = 0;
      v55 = "CAFrameRateServer: invalid interval";
      v56 = v64;
      v57 = OS_LOG_TYPE_ERROR;
LABEL_73:
      _os_log_impl(&dword_184457000, v56, v57, v55, buf, 2u);
      goto LABEL_95;
    }
    *(_DWORD *)buf = a2;
    *(_DWORD *)&buf[4] = 0;
    *(_DWORD *)&buf[8] = a3;
    *(_DWORD *)&buf[12] = a4;
    *(_QWORD *)v95 = a5;
    if (a6)
      v26 = 2;
    else
      v26 = 0;
    v95[4] = v26;
    if ((_DWORD)a2)
    {
      -[CAProcessMonitor addMonitoringProcess:](CA::WindowServer::IOMFBDisplay::process_monitor((CA::WindowServer::IOMFBDisplay *)this), "addMonitoringProcess:", a2);
      v21 = *(uint8_t **)&this[6840]._os_unfair_lock_opaque;
      v20 = *(uint8_t **)&this[6842]._os_unfair_lock_opaque;
    }
    v27 = (unint64_t)v20;
    v28 = v20 - v21;
    if (v20 == v21)
    {
LABEL_29:
      v36 = *(_QWORD *)&this[6844]._os_unfair_lock_opaque;
      if (v27 >= v36)
      {
        v59 = 0xAAAAAAAAAAAAAAABLL * (v28 >> 3) + 1;
        if (v59 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v60 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v21) >> 3);
        v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (_QWORD)v21) >> 3);
        if (2 * v61 > v59)
          v59 = 2 * v61;
        if (v61 >= 0x555555555555555)
          v62 = 0xAAAAAAAAAAAAAAALL;
        else
          v62 = v59;
        if (v62)
        {
          v63 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v62);
        }
        else
        {
          v63 = 0;
          v13 = 0;
        }
        v66 = &v63[8 * ((v20 - v21) >> 3)];
        v67 = &v63[24 * v13];
        if (v60 == v13)
        {
          if (v20 - v21 < 1)
          {
            if (v20 == v21)
              v69 = 1;
            else
              v69 = 0x5555555555555556 * ((v20 - v21) >> 3);
            v70 = v69 >> 2;
            v71 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v69);
            v66 = &v71[24 * v70];
            v67 = &v71[24 * v13];
            if (v63)
              operator delete(v63);
          }
          else
          {
            v68 = v60 + 2;
            if (v60 >= -1)
              v68 = v60 + 1;
            v66 -= 24 * (v68 >> 1);
          }
        }
        v72 = *(_OWORD *)buf;
        *((_QWORD *)v66 + 2) = *(_QWORD *)v95;
        *(_OWORD *)v66 = v72;
        v73 = *(uint8_t **)&this[6840]._os_unfair_lock_opaque;
        v74 = v66;
        if (v73 != v20)
        {
          v75 = v20;
          v76 = v66;
          do
          {
            v77 = *(_OWORD *)(v75 - 24);
            v74 = v76 - 24;
            *((_QWORD *)v76 - 1) = *((_QWORD *)v75 - 1);
            *(_OWORD *)(v76 - 24) = v77;
            v75 -= 24;
            v76 -= 24;
          }
          while (v75 != v73);
        }
        v78 = v66 + 24;
        v79 = *(char **)&this[6842]._os_unfair_lock_opaque;
        v80 = v79 - (char *)v20;
        if (v79 != (char *)v20)
          memmove(v78, v20, v79 - (char *)v20);
        v81 = *(void **)&this[6840]._os_unfair_lock_opaque;
        *(_QWORD *)&this[6840]._os_unfair_lock_opaque = v74;
        *(_QWORD *)&this[6842]._os_unfair_lock_opaque = &v78[v80];
        *(_QWORD *)&this[6844]._os_unfair_lock_opaque = v67;
        if (v81)
          operator delete(v81);
        goto LABEL_94;
      }
      if (v20 != (uint8_t *)v27)
      {
        v37 = v20 + 24;
        v38 = v27 - 24;
        v39 = v27;
        if (v27 >= 0x18)
        {
          v39 = v27;
          do
          {
            v40 = *(_OWORD *)v38;
            *(_QWORD *)(v39 + 16) = *(_QWORD *)(v38 + 16);
            *(_OWORD *)v39 = v40;
            v39 += 24;
            v38 += 24;
          }
          while (v38 < v27);
        }
        *(_QWORD *)&this[6842]._os_unfair_lock_opaque = v39;
        if ((_QWORD *)v27 != v37)
          memmove(v20 + 24, v20, v27 - (_QWORD)v37);
        v41 = buf;
        if (v20 <= buf)
          v41 = &buf[24 * (*(_QWORD *)&this[6842]._os_unfair_lock_opaque > (unint64_t)buf)];
        v42 = *(_OWORD *)v41;
        *((_QWORD *)v20 + 2) = *((_QWORD *)v41 + 2);
        *(_OWORD *)v20 = v42;
        goto LABEL_94;
      }
      v65 = *(_OWORD *)buf;
      *(_QWORD *)(v27 + 16) = *(_QWORD *)v95;
      *(_OWORD *)v27 = v65;
      v58 = (uint8_t *)(v27 + 24);
      goto LABEL_75;
    }
    v29 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v21) >> 3);
    v20 = v21;
    while (1)
    {
      v30 = v29 >> 1;
      v31 = &v20[24 * (v29 >> 1)];
      v32 = *((_DWORD *)v31 + 2);
      if (v32 <= a3)
      {
        if (v32 != a3)
          goto LABEL_27;
        v33 = *(_DWORD *)&v20[24 * v30 + 12];
        if (v33 <= a4)
          break;
      }
LABEL_28:
      v29 = v30;
      if (!v30)
        goto LABEL_29;
    }
    if (v33 == a4)
    {
      v34 = v29 + ~v30;
      v35 = v31 + 24;
      if (*(_DWORD *)&v20[24 * v30 + 16] <= a5)
      {
        v20 = v35;
        v30 = v34;
      }
      goto LABEL_28;
    }
LABEL_27:
    v20 = v31 + 24;
    v30 = v29 + ~v30;
    goto LABEL_28;
  }
  v23 = 0;
  if (v22 <= 1)
    v24 = 1;
  else
    v24 = (v20 - v21) / 24;
  v25 = *(char **)&this[6840]._os_unfair_lock_opaque;
  while (*(_DWORD *)v25 != (_DWORD)a2)
  {
    ++v23;
    v25 += 24;
    if (v24 == v23)
      goto LABEL_9;
  }
  if (!a3)
  {
    v13 = (uint64_t)(v25 + 24);
    if (v20 != (uint8_t *)(v25 + 24))
      memmove(v25, (const void *)v13, v20 - (uint8_t *)(v25 + 24));
    v58 = v20 - 24;
LABEL_75:
    *(_QWORD *)&this[6842]._os_unfair_lock_opaque = v58;
LABEL_94:
    CA::WindowServer::IOMFBDisplay::recompute_server_frame_interval_locked((CA::WindowServer::IOMFBDisplay *)this, v13, v14, v15, v16, v17, v18, v19);
    goto LABEL_95;
  }
  v43 = &v21[24 * v23];
  v45 = *((_DWORD *)v43 + 2);
  v44 = v43 + 8;
  v46 = *((_BYTE *)v44 + 12);
  v48 = v45 == a3 && *((_DWORD *)v44 + 1) == a4 && *((_DWORD *)v44 + 2) == a5;
  if (!v48 || ((((v46 & 2) == 0) ^ a6) & 1) == 0)
  {
    if (a6)
      v49 = 2;
    else
      v49 = 0;
    *((_BYTE *)v44 + 12) = v46 & 0xFD | v49;
    v50 = *(_QWORD *)&this[6840]._os_unfair_lock_opaque;
    v51 = *(_QWORD *)&this[6842]._os_unfair_lock_opaque;
    v52 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - v50) >> 3));
    *(_DWORD *)v44 = a3;
    *((_DWORD *)v44 + 1) = a4;
    *((_DWORD *)v44 + 2) = a5;
    *(_QWORD *)buf = CA::FrameRateArbitrator::RangeSorter<CAFrameIntervalRequest>;
    if (v51 == v50)
      v53 = 0;
    else
      v53 = v52;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*,false>(v50, v51, (uint64_t (**)(__int128 *, __int128 *))buf, v53, 1);
    goto LABEL_94;
  }
LABEL_95:
  os_unfair_lock_unlock(v12);
}

void CA::WindowServer::IOMFBDisplay::recompute_server_frame_interval_locked(CA::WindowServer::IOMFBDisplay *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  __n128 v15;
  _BOOL4 v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  char *v25;
  dispatch_once_t *v26;
  void (__cdecl *v27)(void *);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v36;
  char *v37;
  dispatch_once_t *v38;
  void (__cdecl *v39)(void *);
  _QWORD *v40;
  _BOOL4 v41;
  char *v42;
  _QWORD *v43;
  _BYTE *v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  dispatch_once_t *v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  dispatch_once_t *v55;
  unint64_t v56;
  _QWORD *v57;
  _BYTE *v58;
  char *v59;
  unint64_t v60;
  _QWORD *v61;
  _BYTE *v62;
  BOOL v63;
  _BOOL4 v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned __int8 *v69;
  unsigned int v70;
  unsigned __int8 v71;
  uint64_t v72;
  unint64_t *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t phase;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unsigned __int8 v90;
  unsigned __int8 v91;
  int v92;
  _BOOL4 v94;
  unsigned int v95;
  unint64_t v96;
  unint64_t v97;
  double v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  unint64_t v109;
  _BYTE *v110;
  unint64_t v111;
  int v112;
  _BYTE *v113;
  void *v114;
  NSObject *v115;
  NSObject *v116;
  uint64_t v117;
  _BOOL4 v118;
  _BOOL4 v119;
  _BOOL4 v120;
  _BOOL4 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  _BYTE buf[28];
  __int16 v135;
  int v136;
  __int16 v137;
  unsigned int v138;
  __int16 v139;
  void *v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v9 = *((_QWORD *)this + 3420);
  v10 = *((_QWORD *)this + 3421);
  if (v9 == v10)
  {
LABEL_5:
    v14 = 0;
    goto LABEL_6;
  }
  v11 = v10 - v9;
  if (v11 == 24)
  {
    if ((*(_BYTE *)(v9 + 20) & 1) == 0)
    {
      v13 = *(_DWORD *)(v9 + 8);
      LODWORD(v12) = *(_DWORD *)(v9 + 12);
      v14 = *(_DWORD *)(v9 + 16);
      goto LABEL_94;
    }
    goto LABEL_5;
  }
  v17 = (unsigned __int128)(v11 * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  v130 = 0;
  v131 = 0;
  v132 = 0;
  v18 = &unk_1EDD14000;
  if (initialized[0] != -1)
  {
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
    v18 = &unk_1EDD14000;
  }
  v19 = (v17 >> 2) + ((unint64_t)v17 >> 63);
  v20 = &unk_1ECDC6000;
  if (byte_1ECDC6AC5)
  {
    v130 = 0;
    v131 = 0;
    v132 = 0;
  }
  v21 = 0;
  v13 = 0;
  LODWORD(v22) = 0;
  v23 = 0;
  if (v19 <= 1)
    v24 = 1;
  else
    v24 = v19;
  v12 = 0xFFFFFFFFLL;
  v25 = "    update result: %u %u\n";
  v26 = initialized;
  v27 = (void (__cdecl *)(void *))init_debug;
  v28 = v24;
  LODWORD(v29) = -1;
  v30 = "  candidate: %u %u %u\n";
  while (1)
  {
    v31 = *((_QWORD *)this + 3420) + v21;
    if ((*(_BYTE *)(v31 + 20) & 1) == 0)
      break;
LABEL_57:
    v21 += 24;
    if (!--v28)
      goto LABEL_63;
  }
  v33 = *(_DWORD *)(v31 + 8);
  v32 = *(_DWORD *)(v31 + 12);
  v23 = v33 == 4 && v32 == 5;
  if (v33 > 3)
  {
    if (v33 == 4)
    {
      if (v32 < 6)
        v33 = 4;
      else
        v33 = 3;
    }
  }
  else if (v32 > 3)
  {
    v33 = 2;
  }
  if (v32 > 3 && *(_DWORD *)(v31 + 16) == 2)
    v36 = 3;
  else
    v36 = *(_DWORD *)(v31 + 12);
  if (v18[131] != -1)
  {
    v122 = v12;
    v126 = v19;
    v118 = v23;
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
    v30 = "  candidate: %u %u %u\n";
    v27 = (void (__cdecl *)(void *))init_debug;
    v26 = initialized;
    v25 = "    update result: %u %u\n";
    v23 = v118;
    v20 = (_BYTE *)&unk_1ECDC6000;
    v18 = (_QWORD *)&unk_1EDD14000;
    v12 = v122;
    v19 = v126;
  }
  if (v20[2757])
  {
    v123 = v12;
    v127 = v19;
    v117 = *(unsigned int *)(v31 + 8);
    v37 = v30;
    v119 = v23;
    x_stream_printf((uint64_t)&v130, v30, (uint64_t)v27, a4, a5, a6, a7, a8, v117);
    v30 = v37;
    v27 = (void (__cdecl *)(void *))init_debug;
    v26 = initialized;
    v25 = "    update result: %u %u\n";
    v23 = v119;
    v20 = (_BYTE *)&unk_1ECDC6000;
    v18 = (_QWORD *)&unk_1EDD14000;
    v12 = v123;
    v19 = v127;
  }
  if (v22 <= v33)
    v22 = v33;
  else
    v22 = v22;
  if (v29 >= v36)
    v29 = v36;
  else
    v29 = v29;
  if (v22 <= v29)
  {
    if (v18[131] != -1)
    {
      v38 = v26;
      v39 = v27;
      v128 = v19;
      v40 = v18;
      v41 = v23;
      dispatch_once_f(v26, 0, v27);
      v30 = "  candidate: %u %u %u\n";
      v27 = v39;
      v26 = v38;
      v25 = "    update result: %u %u\n";
      v23 = v41;
      v20 = (_BYTE *)&unk_1ECDC6000;
      v18 = v40;
      v19 = v128;
    }
    if (v20[2757])
    {
      v42 = v25;
      v129 = v19;
      v43 = v18;
      v44 = v20;
      v45 = v23;
      x_stream_printf((uint64_t)&v130, v25, (uint64_t)v27, a4, a5, a6, a7, a8, v22);
      v30 = "  candidate: %u %u %u\n";
      v27 = (void (__cdecl *)(void *))init_debug;
      v26 = initialized;
      v25 = v42;
      v23 = v45;
      v20 = v44;
      v18 = v43;
      v19 = v129;
    }
    v13 = v22;
    v12 = v29;
    goto LABEL_57;
  }
LABEL_63:
  if (!v13 && (_DWORD)v12 == -1)
  {
    v13 = 0;
    LODWORD(v12) = 0;
    v14 = 0;
  }
  else
  {
    v48 = 0;
    v14 = 0;
    v49 = "  explicit preference for %u\n";
    v50 = initialized;
    do
    {
      v51 = *((_QWORD *)this + 3420) + v48;
      if ((*(_BYTE *)(v51 + 20) & 1) == 0)
      {
        v52 = *(unsigned int *)(v51 + 16);
        v53 = v52 < v13 || v52 > v12;
        if (!v53 && v14 - 1 >= v52)
        {
          if (v18[131] != -1)
          {
            v55 = v50;
            v124 = v12;
            v56 = v19;
            v57 = v18;
            v58 = v20;
            v120 = v23;
            dispatch_once_f(v50, 0, (dispatch_function_t)init_debug);
            v50 = v55;
            v49 = "  explicit preference for %u\n";
            v23 = v120;
            v20 = v58;
            v18 = v57;
            v19 = v56;
            v12 = v124;
          }
          if (v20[2757])
          {
            v59 = v49;
            v125 = v12;
            v60 = v19;
            v61 = v18;
            v62 = v20;
            v121 = v23;
            x_stream_printf((uint64_t)&v130, v49, (uint64_t)v27, a4, a5, a6, a7, a8, v52);
            v50 = initialized;
            v49 = v59;
            v23 = v121;
            v20 = v62;
            v18 = v61;
            v19 = v60;
            v12 = v125;
          }
          v14 = v52;
        }
      }
      v48 += 24;
      --v24;
    }
    while (v24);
    if (v23)
    {
      v63 = v13 == 3 && v14 == 0;
      v64 = v63;
      if (v14 == 3 || v64)
      {
        v13 = 2;
        LODWORD(v12) = 2;
        v14 = 2;
      }
    }
    if (v18[131] != -1)
    {
      v108 = v12;
      v109 = v19;
      v110 = v20;
      dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
      v20 = v110;
      v19 = v109;
      LODWORD(v12) = v108;
    }
    if (v20[2757])
    {
      v111 = v19;
      v112 = v12;
      v113 = x_stream_finish((uint64_t)&v130);
      if (v113)
      {
        v114 = v113;
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v116 = x_log_category_frame_rate;
          if (os_log_type_enabled((os_log_t)x_log_category_frame_rate, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)&buf[4] = "CAFrameRateServer: ";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v111;
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = v13;
            v135 = 1024;
            v136 = v112;
            v137 = 1024;
            v138 = v14;
            v139 = 2080;
            v140 = v114;
            _os_log_impl(&dword_184457000, v116, OS_LOG_TYPE_DEFAULT, "%sarbitration among %ld clients yields min:%u max:%u preferred:%u\n%s", buf, 0x32u);
          }
        }
        free(v114);
      }
      LODWORD(v12) = v112;
    }
  }
LABEL_94:
  if (v13 && !v14)
  {
    if ((*((_DWORD *)this + 156) & 0x10) != 0)
    {
      v104 = v12;
      v105 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 768))(this);
      v106 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 784))(this);
      v107 = v104;
      v14 = v13;
      if (v105 != v106)
      {
        v14 = v107;
        if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 784))(this) <= v107)
          v14 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 784))(this);
      }
    }
    else
    {
      v14 = v13;
    }
  }
LABEL_6:
  os_unfair_lock_lock((os_unfair_lock_t)this + 6504);
  v15.n128_f64[0] = CA::WindowServer::IOMFBDisplay::initialize_timings(this);
  if (*((_QWORD *)this + 3254))
  {
    if (v14)
    {
      if (v14 <= (*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *, double))(*(_QWORD *)this + 768))(this, v15.n128_f64[0]))v14 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 768))(this);
      if (v14 >= 6)
      {
        if (v14 == 10)
          v14 = 5;
        else
          v14 = 4;
      }
    }
    if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *, __n128))(*(_QWORD *)this + 768))(this, v15) == 1)
    {
      v16 = 0;
    }
    else
    {
      v46 = *((_QWORD *)this + 3420);
      v47 = *((_QWORD *)this + 3421);
      if (v46 != v47)
      {
        while ((*(_BYTE *)(v46 + 20) & 3) != 2)
        {
          v46 += 24;
          if (v46 == v47)
            goto LABEL_100;
        }
      }
      if (v46 == v47)
LABEL_100:
        v16 = *((_BYTE *)this + 28128) != 0;
      else
        v16 = 1;
    }
    v65 = mach_absolute_time();
    v133 = 0;
    v66 = atomic_load((unint64_t *)(*((_QWORD *)this + 3254) + 24));
    v133 = v66;
    CA::WindowServer::IOMFBDisplay::flush_timings_locked(this, v65, &v133);
    v67 = *((_QWORD *)this + 3254);
    if (v133)
    {
      v68 = atomic_load((unsigned int *)(v67 + 40));
      if (v68 == v14)
      {
        v69 = (unsigned __int8 *)(*((_QWORD *)this + 3254) + 33);
        goto LABEL_106;
      }
      goto LABEL_107;
    }
    v70 = atomic_load((unsigned int *)(v67 + 36));
    if (v70 != v14)
      goto LABEL_107;
    v69 = (unsigned __int8 *)(*((_QWORD *)this + 3254) + 32);
LABEL_106:
    v71 = atomic_load(v69);
    if (((((v71 & 1) == 0) ^ v16) & 1) == 0)
    {
LABEL_107:
      v72 = *((_QWORD *)this + 3254);
      if (v133)
      {
        v73 = (unint64_t *)(v72 + 56);
      }
      else
      {
        v74 = atomic_load((unsigned int *)(v72 + 36));
        if (!v74)
          v74 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 784))(this);
        v75 = v74;
        if (v74 == 2 && v14 == 4)
          v75 = 4;
        v77 = atomic_load((unsigned int *)(*((_QWORD *)this + 3254) + 4));
        v78 = v75 * (unint64_t)v77;
        v79 = atomic_load((unint64_t *)(*((_QWORD *)this + 3254) + 48));
        v80 = atomic_load((unint64_t *)(*((_QWORD *)this + 3254) + 64));
        v81 = atomic_load((unsigned int *)(*((_QWORD *)this + 3254) + 4));
        v130 = v79;
        v131 = v80;
        v132 = v81;
        v82 = atomic_load((unsigned int *)(*((_QWORD *)this + 3254) + 4));
        v83 = v65 + (v82 >> 1);
        *(_QWORD *)buf = v78;
        phase = get_phase(&v130, v83, (unint64_t *)buf);
        v85 = v83 - phase + *(_QWORD *)buf;
        if (!phase)
          v85 = v83;
        v133 = v85;
        v86 = atomic_load((unsigned int *)(*((_QWORD *)this + 3254) + 4));
        v133 -= v86 >> 3;
        v73 = (unint64_t *)(*((_QWORD *)this + 3254) + 48);
      }
      v87 = atomic_load(v73);
      v88 = atomic_load((unsigned int *)(*((_QWORD *)this + 3254) + 36));
      v89 = atomic_load((unsigned int *)(*((_QWORD *)this + 3254) + 40));
      v90 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 3254) + 32));
      v91 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 3254) + 33));
      v92 = ((v90 & 1) == 0) ^ v16;
      if (v88 != v14 || v92 == 0)
      {
        v94 = (v91 & 1) == 0;
        if (v89 != v14 || ((v94 ^ v16) & 1) == 0)
        {
          v95 = v14;
          if (!v14)
            v95 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 784))(this);
          v96 = v133;
          v97 = atomic_load((unint64_t *)(*((_QWORD *)this + 3254) + 64));
          v98 = (double)(v96 - v97);
          LODWORD(v96) = atomic_load((unsigned int *)(*((_QWORD *)this + 3254) + 4));
          v99 = (v87 + vcvtad_u64_f64(v98 / (double)v96)) % v95;
          if (v99)
            v100 = v95 - v99;
          else
            v100 = 0;
          v87 += v100;
        }
      }
      else
      {
        v133 = 0;
      }
      if (byte_1ECDC6AC5)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v115 = x_log_category_frame_rate;
          if (os_log_type_enabled((os_log_t)x_log_category_frame_rate, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)&buf[4] = v14;
            *(_WORD *)&buf[8] = 2048;
            *(_QWORD *)&buf[10] = v133;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = v65;
            _os_log_impl(&dword_184457000, v115, OS_LOG_TYPE_DEFAULT, "CAFrameRateServer: enqueing server frame interval %u for %llu. Now is %llu", buf, 0x1Cu);
          }
        }
      }
      v101 = *((_QWORD *)this + 3254);
      v102 = (unsigned int *)(v101 + 16);
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 + 1, v102));
      atomic_store(v133, (unint64_t *)(v101 + 24));
      atomic_store(v16, (unsigned __int8 *)(v101 + 33));
      atomic_store(v14, (unsigned int *)(v101 + 40));
      atomic_store(v87, (unint64_t *)(v101 + 56));
      atomic_store(v103 + 2, (unsigned int *)(v101 + 16));
      atomic_load((unsigned __int8 *)(*((_QWORD *)this + 3254) + 32));
      atomic_load((unsigned __int8 *)(*((_QWORD *)this + 3254) + 33));
      atomic_load((unint64_t *)(*((_QWORD *)this + 3254) + 24));
      atomic_load((unsigned int *)(*((_QWORD *)this + 3254) + 36));
      atomic_load((unsigned int *)(*((_QWORD *)this + 3254) + 40));
      kdebug_trace();
      atomic_load((unint64_t *)(*((_QWORD *)this + 3254) + 48));
      atomic_load((unint64_t *)(*((_QWORD *)this + 3254) + 64));
      atomic_load((unint64_t *)(*((_QWORD *)this + 3254) + 56));
      kdebug_trace();
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 6504);
}

_QWORD *CA::WindowServer::IOMFBDisplay::flush_timings_locked(_QWORD *this, unint64_t a2, unint64_t *a3)
{
  BOOL v3;
  unint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;

  if (*a3)
    v3 = *a3 >= a2;
  else
    v3 = 1;
  if (!v3)
  {
    v4 = atomic_load((unint64_t *)(this[3254] + 56));
    v5 = atomic_load((unsigned __int8 *)(this[3254] + 33));
    v6 = v5 & 1;
    v7 = atomic_load((unsigned int *)(this[3254] + 40));
    *a3 = 0;
    v8 = this[3254];
    v9 = (unsigned int *)(v8 + 16);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    atomic_store(*a3, (unint64_t *)(v8 + 24));
    atomic_store(v6, (unsigned __int8 *)(v8 + 32));
    atomic_store(v7, (unsigned int *)(v8 + 36));
    atomic_store(v4, (unint64_t *)(v8 + 48));
    atomic_store(v10 + 2, (unsigned int *)(v8 + 16));
    v11 = atomic_load((unint64_t *)(this[3254] + 56));
    this[3258] = v11;
    v12 = atomic_load((unint64_t *)(this[3254] + 64));
    this[3259] = v12;
  }
  return this;
}

uint64_t CA::WindowServer::AppleInternalDisplay::preferred_frame_duration(CA::WindowServer::AppleInternalDisplay *this)
{
  if ((*((_DWORD *)this + 156) & 0x100) != 0)
    return 4;
  else
    return (*(uint64_t (**)(CA::WindowServer::AppleInternalDisplay *))(*(_QWORD *)this + 768))(this);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*,false>(uint64_t a1, unint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 *v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  BOOL v28;
  __int128 v29;
  __int128 *v30;
  int v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 *v42;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  __int128 *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  int64_t v64;
  _OWORD *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 *v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  __int128 v89;
  __int128 *v90;
  __int128 *v91;
  uint64_t v92;
  _OWORD *v93;
  uint64_t v94;
  int64_t v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v92 = a2;
  v94 = a2 - 24;
  v90 = (__int128 *)(a2 - 72);
  v91 = (__int128 *)(a2 - 48);
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = a2 - v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((__int128 *)v94, (__int128 *)a1))
        {
          v39 = *(_OWORD *)a1;
          v99 = *(_QWORD *)(a1 + 16);
          v98 = v39;
          v40 = *(_OWORD *)v94;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v94 + 16);
          *(_OWORD *)a1 = v40;
          v41 = v98;
          *(_QWORD *)(v94 + 16) = v99;
          *(_OWORD *)v94 = v41;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)v94, a3);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>(a1, a1 + 24, a1 + 48, v94, a3);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>((__n128 *)a1, a1 + 24, a1 + 48, a1 + 72, v94, a3);
        return;
      default:
        if (v11 <= 575)
        {
          v42 = (__int128 *)(a1 + 24);
          v44 = a1 == a2 || v42 == (__int128 *)a2;
          if ((a5 & 1) != 0)
          {
            if (!v44)
            {
              v45 = 0;
              v46 = a1;
              do
              {
                v47 = (__int128 *)v46;
                v46 = (uint64_t)v42;
                if ((*a3)(v42, v47))
                {
                  v48 = *(_OWORD *)v46;
                  v99 = *(_QWORD *)(v46 + 16);
                  v98 = v48;
                  v49 = v45;
                  while (1)
                  {
                    v50 = a1 + v49;
                    *(_OWORD *)(v50 + 24) = *(_OWORD *)(a1 + v49);
                    *(_QWORD *)(v50 + 40) = *(_QWORD *)(a1 + v49 + 16);
                    if (!v49)
                      break;
                    v49 -= 24;
                    if (((*a3)(&v98, (__int128 *)(v49 + a1)) & 1) == 0)
                    {
                      v51 = a1 + v49 + 24;
                      goto LABEL_72;
                    }
                  }
                  v51 = a1;
LABEL_72:
                  v52 = v98;
                  *(_QWORD *)(v51 + 16) = v99;
                  *(_OWORD *)v51 = v52;
                }
                v42 = (__int128 *)(v46 + 24);
                v45 += 24;
              }
              while (v46 + 24 != a2);
            }
          }
          else if (!v44)
          {
            do
            {
              v84 = (__int128 *)a1;
              a1 = (uint64_t)v42;
              if ((*a3)(v42, v84))
              {
                v85 = *(_OWORD *)a1;
                v99 = *(_QWORD *)(a1 + 16);
                v98 = v85;
                v86 = a1;
                do
                {
                  v87 = v86 - 24;
                  *(_OWORD *)v86 = *(_OWORD *)(v86 - 24);
                  *(_QWORD *)(v86 + 16) = *(_QWORD *)(v86 - 8);
                  v88 = (*a3)(&v98, (__int128 *)(v86 - 48));
                  v86 = v87;
                }
                while ((v88 & 1) != 0);
                v89 = v98;
                *(_QWORD *)(v87 + 16) = v99;
                *(_OWORD *)v87 = v89;
              }
              v42 = (__int128 *)(a1 + 24);
            }
            while (a1 + 24 != a2);
          }
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            v53 = (v12 - 2) >> 1;
            v95 = v53;
            do
            {
              v54 = v53;
              if (v95 >= v53)
              {
                v55 = (2 * v53) | 1;
                v56 = a1 + 24 * v55;
                if (2 * v53 + 2 < (uint64_t)v12
                  && (*a3)((__int128 *)(a1 + 24 * v55), (__int128 *)(v56 + 24)))
                {
                  v56 += 24;
                  v55 = 2 * v54 + 2;
                }
                v57 = a1 + 24 * v54;
                if (((*a3)((__int128 *)v56, (__int128 *)v57) & 1) == 0)
                {
                  v58 = *(_OWORD *)v57;
                  v99 = *(_QWORD *)(v57 + 16);
                  v98 = v58;
                  do
                  {
                    v59 = v56;
                    v60 = *(_OWORD *)v56;
                    *(_QWORD *)(v57 + 16) = *(_QWORD *)(v56 + 16);
                    *(_OWORD *)v57 = v60;
                    if (v95 < v55)
                      break;
                    v61 = (2 * v55) | 1;
                    v56 = a1 + 24 * v61;
                    v62 = 2 * v55 + 2;
                    if (v62 < (uint64_t)v12 && (*a3)((__int128 *)(a1 + 24 * v61), (__int128 *)(v56 + 24)))
                    {
                      v56 += 24;
                      v61 = v62;
                    }
                    v57 = v59;
                    v55 = v61;
                  }
                  while (!(*a3)((__int128 *)v56, &v98));
                  v63 = v98;
                  *(_QWORD *)(v59 + 16) = v99;
                  *(_OWORD *)v59 = v63;
                }
              }
              v53 = v54 - 1;
            }
            while (v54);
            v64 = v11 / 0x18uLL;
            v65 = (_OWORD *)v92;
            do
            {
              v93 = v65;
              v66 = 0;
              v67 = *(_OWORD *)a1;
              v97 = *(_QWORD *)(a1 + 16);
              v96 = v67;
              v68 = a1;
              do
              {
                v69 = v68 + 24 * v66 + 24;
                v70 = (2 * v66) | 1;
                v71 = 2 * v66 + 2;
                if (v71 < v64
                  && (*a3)((__int128 *)(v68 + 24 * v66 + 24), (__int128 *)(v68 + 24 * v66 + 48)))
                {
                  v69 += 24;
                  v70 = v71;
                }
                v72 = *(_OWORD *)v69;
                *(_QWORD *)(v68 + 16) = *(_QWORD *)(v69 + 16);
                *(_OWORD *)v68 = v72;
                v68 = v69;
                v66 = v70;
              }
              while (v70 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              v65 = (_OWORD *)((char *)v93 - 24);
              if ((_OWORD *)v69 == (_OWORD *)((char *)v93 - 24))
              {
                v82 = v96;
                *(_QWORD *)(v69 + 16) = v97;
                *(_OWORD *)v69 = v82;
              }
              else
              {
                v73 = *v65;
                *(_QWORD *)(v69 + 16) = *((_QWORD *)v93 - 1);
                *(_OWORD *)v69 = v73;
                v74 = v96;
                *((_QWORD *)v93 - 1) = v97;
                *v65 = v74;
                v75 = v69 - a1 + 24;
                if (v75 >= 25)
                {
                  v76 = (unint64_t)(-2 - 0x5555555555555555 * (v75 >> 3)) >> 1;
                  v77 = a1 + 24 * v76;
                  if ((*a3)((__int128 *)v77, (__int128 *)v69))
                  {
                    v78 = *(_OWORD *)v69;
                    v99 = *(_QWORD *)(v69 + 16);
                    v98 = v78;
                    do
                    {
                      v79 = v77;
                      v80 = *(_OWORD *)v77;
                      *(_QWORD *)(v69 + 16) = *(_QWORD *)(v77 + 16);
                      *(_OWORD *)v69 = v80;
                      if (!v76)
                        break;
                      v76 = (v76 - 1) >> 1;
                      v77 = a1 + 24 * v76;
                      v69 = v79;
                    }
                    while (((*a3)((__int128 *)v77, &v98) & 1) != 0);
                    v81 = v98;
                    *(_QWORD *)(v79 + 16) = v99;
                    *(_OWORD *)v79 = v81;
                  }
                }
              }
            }
            while (v64-- > 2);
          }
          return;
        }
        v13 = a1 + 24 * (v12 >> 1);
        if ((unint64_t)v11 < 0xC01)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>((__int128 *)(a1 + 24 * (v12 >> 1)), (__int128 *)a1, (__int128 *)v94, a3);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>((__int128 *)a1, (__int128 *)(a1 + 24 * (v12 >> 1)), (__int128 *)v94, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>((__int128 *)(a1 + 24), (__int128 *)(a1 + 24 * (v12 >> 1) - 24), v91, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>((__int128 *)(a1 + 48), (__int128 *)(a1 + 24 + 24 * (v12 >> 1)), v90, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>((__int128 *)(a1 + 24 * (v12 >> 1) - 24), (__int128 *)(a1 + 24 * (v12 >> 1)), (__int128 *)(a1 + 24 + 24 * (v12 >> 1)), a3);
          v14 = *(_OWORD *)a1;
          v99 = *(_QWORD *)(a1 + 16);
          v98 = v14;
          v15 = *(_QWORD *)(v13 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_QWORD *)(a1 + 16) = v15;
          v16 = v98;
          *(_QWORD *)(v13 + 16) = v99;
          *(_OWORD *)v13 = v16;
        }
        --a4;
        if ((a5 & 1) == 0 && ((*a3)((__int128 *)(a1 - 24), (__int128 *)a1) & 1) == 0)
        {
          v29 = *(_OWORD *)a1;
          v97 = *(_QWORD *)(a1 + 16);
          v96 = v29;
          if (((*a3)(&v96, (__int128 *)v94) & 1) != 0)
          {
            v10 = a1;
            do
              v10 += 24;
            while (((*a3)(&v96, (__int128 *)v10) & 1) == 0);
          }
          else
          {
            v30 = (__int128 *)(a1 + 24);
            do
            {
              v10 = (unint64_t)v30;
              if ((unint64_t)v30 >= a2)
                break;
              v31 = (*a3)(&v96, v30);
              v30 = (__int128 *)(v10 + 24);
            }
            while (!v31);
          }
          v32 = a2;
          if (v10 < a2)
          {
            v32 = a2;
            do
              v32 -= 24;
            while (((*a3)(&v96, (__int128 *)v32) & 1) != 0);
          }
          while (v10 < v32)
          {
            v33 = *(_OWORD *)v10;
            v99 = *(_QWORD *)(v10 + 16);
            v98 = v33;
            v34 = *(_OWORD *)v32;
            *(_QWORD *)(v10 + 16) = *(_QWORD *)(v32 + 16);
            *(_OWORD *)v10 = v34;
            v35 = v98;
            *(_QWORD *)(v32 + 16) = v99;
            *(_OWORD *)v32 = v35;
            do
              v10 += 24;
            while (!(*a3)(&v96, (__int128 *)v10));
            do
              v32 -= 24;
            while (((*a3)(&v96, (__int128 *)v32) & 1) != 0);
          }
          v36 = (__int128 *)(v10 - 24);
          if (v10 - 24 != a1)
          {
            v37 = *v36;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v10 - 8);
            *(_OWORD *)a1 = v37;
          }
          a5 = 0;
          v38 = v96;
          *(_QWORD *)(v10 - 8) = v97;
          *v36 = v38;
          continue;
        }
        v17 = *(_OWORD *)a1;
        v97 = *(_QWORD *)(a1 + 16);
        v96 = v17;
        v18 = (__int128 *)a1;
        do
        {
          v19 = (uint64_t)v18;
          v18 = (__int128 *)((char *)v18 + 24);
        }
        while (((*a3)(v18, &v96) & 1) != 0);
        v20 = (__int128 *)a2;
        if (v19 == a1)
        {
          v20 = (__int128 *)a2;
          do
          {
            if (v18 >= v20)
              break;
            v20 = (__int128 *)((char *)v20 - 24);
          }
          while (((*a3)(v20, &v96) & 1) == 0);
        }
        else
        {
          do
            v20 = (__int128 *)((char *)v20 - 24);
          while (!(*a3)(v20, &v96));
        }
        if (v18 < v20)
        {
          v21 = v20;
          v22 = (unint64_t)v18;
          do
          {
            v98 = *(_OWORD *)v22;
            v23 = v98;
            v99 = *(_QWORD *)(v22 + 16);
            v24 = v99;
            v25 = *((_QWORD *)v21 + 2);
            *(_OWORD *)v22 = *v21;
            *(_QWORD *)(v22 + 16) = v25;
            *((_QWORD *)v21 + 2) = v24;
            *v21 = v23;
            do
            {
              v19 = v22;
              v22 += 24;
            }
            while (((*a3)((__int128 *)v22, &v96) & 1) != 0);
            do
              v21 = (__int128 *)((char *)v21 - 24);
            while (!(*a3)(v21, &v96));
          }
          while (v22 < (unint64_t)v21);
        }
        if (v19 != a1)
        {
          v26 = *(_OWORD *)v19;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v19 + 16);
          *(_OWORD *)a1 = v26;
        }
        v27 = v96;
        *(_QWORD *)(v19 + 16) = v97;
        *(_OWORD *)v19 = v27;
        a2 = v92;
        if (v18 < v20)
        {
LABEL_30:
          std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*,false>(a1, v19, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v19 + 24;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>(a1, v19, a3);
        v10 = v19 + 24;
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>(v19 + 24, v92, a3))
        {
          if (v28)
            continue;
          goto LABEL_30;
        }
        a2 = v19;
        if (!v28)
          goto LABEL_2;
        return;
    }
  }
}

BOOL CA::FrameRateArbitrator::RangeSorter<CAFrameIntervalRequest>(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v5;
  unsigned int v6;

  v2 = a1[2];
  v3 = a2[2];
  if (v2 < v3)
    return 1;
  if (v2 != v3)
    return 0;
  v5 = a1[3];
  v6 = a2[3];
  if (v5 < v6)
    return 1;
  return v5 == v6 && a1[4] < a2[4];
}

CAProcessMonitor *CA::WindowServer::IOMFBDisplay::process_monitor(CA::WindowServer::IOMFBDisplay *this)
{
  CAProcessMonitor *result;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  result = (CAProcessMonitor *)*((_QWORD *)this + 3425);
  if (!result)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 0x40000000;
    v3[2] = ___ZN2CA12WindowServer12IOMFBDisplay15process_monitorEv_block_invoke;
    v3[3] = &__block_descriptor_tmp_412;
    v3[4] = this;
    result = -[CAProcessMonitor initWithCallback:]([CAProcessMonitor alloc], "initWithCallback:", v3);
    *((_QWORD *)this + 3425) = result;
  }
  return result;
}

void ___ZN2CA12WindowServer12IOMFBDisplay15process_monitorEv_block_invoke(uint64_t a1, uint64_t pid, int a3, int a4)
{
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  _OWORD *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  _OWORD buffer[2];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 32);
  if (byte_1ECDC6AC5)
  {
    memset(buffer, 0, sizeof(buffer));
    proc_name(pid, buffer, 0x20u);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v24 = x_log_category_frame_rate;
      if (os_log_type_enabled((os_log_t)x_log_category_frame_rate, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109890;
        v26 = pid;
        v27 = 2080;
        v28 = buffer;
        v29 = 1024;
        v30 = a3;
        v31 = 1024;
        v32 = a4;
        _os_log_impl(&dword_184457000, v24, OS_LOG_TYPE_DEFAULT, "CAFrameRateServer: monitored process %u[%s] running: %d, suspended: %d", buf, 0x1Eu);
      }
    }
  }
  v8 = (os_unfair_lock_s *)(v7 + 27356);
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 27356));
  v16 = *(_BYTE **)(v7 + 27360);
  v17 = *(_BYTE **)(v7 + 27368);
  if (v16 != v17)
  {
    while (*(_DWORD *)v16 != (_DWORD)pid)
    {
      v16 += 24;
      if (v16 == v17)
        goto LABEL_10;
    }
  }
  if (v16 != v17)
  {
    v18 = v16[20];
    if ((a3 & 1) == 0)
    {
      v21 = v16 + 24;
      v22 = v17 - (v16 + 24);
      if (v17 != v16 + 24)
        memmove(v16, v21, v17 - (v16 + 24));
      *(_QWORD *)(v7 + 27368) = &v16[v22];
      if ((v18 & 1) == 0)
        CA::WindowServer::IOMFBDisplay::recompute_server_frame_interval_locked((CA::WindowServer::IOMFBDisplay *)v7, (uint64_t)v21, v10, v11, v12, v13, v14, v15);
LABEL_26:
      os_unfair_lock_unlock(v8);
      goto LABEL_27;
    }
    if (((((v18 & 1) == 0) ^ a4) & 1) == 0)
    {
      v16[20] = v18 & 0xFE | a4;
      CA::WindowServer::IOMFBDisplay::recompute_server_frame_interval_locked((CA::WindowServer::IOMFBDisplay *)v7, v9, v10, v11, v12, v13, v14, v15);
    }
  }
LABEL_10:
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 27356));
  v8 = (os_unfair_lock_s *)(v7 + 27408);
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 27408));
  v19 = *(_QWORD *)(v7 + 27416);
  v20 = *(_QWORD *)(v7 + 27424);
  if (v19 != v20)
  {
    while (*(_DWORD *)v19 != (_DWORD)pid)
    {
      v19 += 28;
      if (v19 == v20)
        goto LABEL_17;
    }
  }
  if (v19 != v20)
  {
    if ((a3 & 1) != 0)
    {
      *(_BYTE *)(v19 + 24) = a4;
      os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 27408));
      return;
    }
    v23 = v20 - (v19 + 28);
    if (v20 != v19 + 28)
      memmove((void *)v19, (const void *)(v19 + 28), v20 - (v19 + 28));
    *(_QWORD *)(v7 + 27424) = v19 + v23;
    goto LABEL_26;
  }
LABEL_17:
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 27408));
  if ((a3 & 1) == 0)
LABEL_27:
    objc_msgSend(*(id *)(v7 + 27400), "removeMonitoringProcess:", pid);
}

void sub_184574134(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::OGL::render_subclass(CA::OGL::Renderer &,CA::OGL::Layer const*)::visitor::visit_subclass(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  double *v4;
  int8x16_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  result = CA::OGL::should_render_secure_indicators_with_gpu(*(_QWORD *)v1, *(_DWORD *)(*(_QWORD *)(v1 + 8) + 1064));
  *(_BYTE *)(v1 + 101) = result ^ 1;
  if (byte_1ECDC6B08)
  {
    v6 = *(_QWORD *)v1;
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 232) + 24);
    v8[0] = *(_QWORD *)(v2 + 24) + 64;
    v8[1] = v7;
    v10 = 0u;
    v9 = 0u;
    return CA::OGL::fill_color_rect(v6, (uint64_t)v8, (double *)0x80408080, v4, 0.0, v5);
  }
  return result;
}

BOOL CA::OGL::prepare_layer_image(CA::OGL::Renderer &,CA::OGL::Layer *,CA::OGL::Gstate const&)::visitor::visit_subclass(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;

  result = CA::OGL::should_render_secure_indicators_with_gpu(**(_QWORD **)(a1 + 8), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 1064));
  v3 = 16392;
  if (result)
    v3 = 0x4000;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) |= v3;
  return result;
}

BOOL CA::OGL::should_render_secure_indicators_with_gpu(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 0x10001000) != 0x1000)
    return 1;
  v2 = *(_QWORD *)(a1 + 176);
  return v2
      && (v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2)) != 0
      && (*(_DWORD *)(v3 + 624) & 4) != 0
      || byte_1ECDC6B08 != 0;
}

uint64_t CA::Render::Layer::set_mask(CA::Render::Layer *this, CA::Render::Layer *a2)
{
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  CA::Render::Layer *v10;
  int v11;
  unsigned int v12;
  unsigned int v13;

  result = *((_QWORD *)this + 14);
  if ((CA::Render::Layer *)result == a2)
    return result;
  if ((*((_BYTE *)this + 13) & 2) != 0)
  {
    *((_QWORD *)this + 14) = a2;
    return result;
  }
  if (result)
  {
    v5 = (unsigned int *)(result + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  if (!a2)
  {
LABEL_19:
    *((_QWORD *)this + 14) = 0;
    return result;
  }
  v8 = (unsigned int *)((char *)a2 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  if (!v9)
  {
    do
      v13 = __ldaxr(v8);
    while (__stlxr(v13 - 1, v8));
    goto LABEL_19;
  }
  *((_QWORD *)this + 14) = a2;
  *((_DWORD *)a2 + 3) |= 0x1000u;
  v10 = (CA::Render::Layer *)*((_QWORD *)this + 14);
  v11 = *((_DWORD *)v10 + 3);
  if ((v11 & 0x1000) != 0 || (result = CA::Render::Layer::is_containerable(v10, (const double *)a2), !(_DWORD)result))
    v12 = v11 & 0xFFFFF7FF;
  else
    v12 = v11 | 0x800;
  *((_DWORD *)v10 + 3) = v12;
  return result;
}

uint64_t CA::WindowServer::AppleDisplay::detachable_layer_impl(uint64_t a1, int *a2, double *a3, uint64_t a4, float64x2_t *a5, float64x2_t *a6, _DWORD *a7)
{
  uint64_t result;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned __int16 v20;
  int v21;
  unsigned __int16 v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  int v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned __int16 v32;
  unsigned __int16 v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  __IOSurface *v38;
  unint64_t v39;
  unsigned int v40;
  _BOOL8 v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  CA::Bounds *v45;
  CA::Bounds *v46;
  CGColorSpace *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  int v51;
  unint64_t v52;
  CA::Bounds *v53;
  CA::Bounds *v54;
  int v55;
  double v56;
  int v57;
  double v58;
  double v59;
  double v60;
  double v61;
  int v62;
  int v63;
  __int32 v64;
  __int32 v65;
  double v66;
  double v67;
  __int32 v68;
  double v69;
  double v70;
  double v71;
  double v72;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  __int16 v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  BOOL v85;
  BOOL v86;
  unint64_t v88;
  double v89;
  int is_420;
  char v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  CA::ScalerStatistics *v95;
  uint64_t v96;
  double v97;
  int v98;
  unint64_t v99;
  uint64_t v100;
  BOOL v101;
  int v102;
  BOOL v103;
  char v104;
  char v105;
  int should_enhance;
  int v107;
  int v108;
  double v110;
  char v111;
  char v112;
  uint64_t v113;
  int v114;
  float *v115;
  float v116;
  float *v117;
  float v118;
  float v119;
  float *v120;
  float v121;
  double v122;
  double v123;
  double *v124;
  double v128;
  double v129;
  double v130;
  BOOL v131;
  BOOL v132;
  BOOL v133;
  double v134;
  unint64_t v135;
  int v136;
  unint64_t v137;
  unint64_t v138;
  int v139;
  unsigned int v140;
  double v141;
  double v144;
  int v145;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  double v158;
  double v159;
  unint64_t v160;
  unint64_t v161;
  double v162;
  unint64_t v163;
  BOOL v164;
  int v165;
  CA::Render *v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  CA::ScalerUtil::ScalerLimits *v174;
  unint64_t v175;
  double v176;
  double v177;
  _BOOL4 v178;
  double v179;
  double v180;
  double v181;
  _QWORD *v182;
  double v183;
  unint64_t v184;
  CA::Render *v185;
  unint64_t v186;
  __int32 v187;
  unint64_t v188;
  int v189;
  int v190;
  int v191;
  int v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  double *v199;
  float64x2_t *v200;
  int32x4_t v201;
  uint64_t v202;
  uint64_t v203;
  int32x4_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;

  v207 = *MEMORY[0x1E0C80C00];
  CA::ScalerUtil::ScalerLimits::limits((CA::ScalerUtil::ScalerLimits *)a1);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1536))(a1) & 1) != 0)
    return 28;
  v199 = a3;
  v200 = a6;
  v15 = *(_DWORD *)(a4 + 64);
  v16 = CA::Render::fourcc_compressed_of_type((CA::Render *)v15, 0, 0);
  v17 = *(_DWORD *)(a1 + 28144);
  v18 = 1;
  result = 9;
  if (v15 <= 1530426927)
  {
    if (v15 > 758674993)
    {
      if (v15 > 796423727)
      {
        if (v15 > 875836533)
        {
          if (v15 > 1380411456)
          {
            if ((v15 - 1530422832) <= 4 && ((1 << (v15 - 48)) & 0x15) != 0)
              goto LABEL_148;
            if (v15 != 1380411457)
              return result;
            if (*(_BYTE *)(a1 + 28072)
              && ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 40))(a4) == 13
               || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 40))(a4) == 8
               || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1832))(a1) & 1) != 0))
            {
              goto LABEL_216;
            }
            return 7;
          }
          if (v15 != 875836534)
          {
            if (v15 == 1111970369)
              goto LABEL_216;
            if (v15 != 1278555701)
              return result;
            if (CADeviceSupportsUniversalCompression::once[0] != -1)
              dispatch_once(CADeviceSupportsUniversalCompression::once, &__block_literal_global_27);
            if (!CADeviceSupportsUniversalCompression::universal)
              goto LABEL_216;
            return 9;
          }
          goto LABEL_196;
        }
        if (v15 <= 875704437)
        {
          if (v15 == 796423728 || v15 == 796423730)
            goto LABEL_192;
          v22 = 12390;
        }
        else
        {
          if (v15 > 875704949)
          {
            if (v15 == 875704950)
              goto LABEL_196;
            v21 = 875836518;
LABEL_184:
            if (v15 != v21)
              return result;
            goto LABEL_196;
          }
          if (v15 == 875704438)
            goto LABEL_196;
          v22 = 12902;
        }
        v21 = v22 | 0x34320000;
        goto LABEL_184;
      }
      if (v15 <= 792225327)
      {
        if (v15 > 762865201)
        {
          if (v15 == 762865202 || v15 == 762869296)
            goto LABEL_192;
          v32 = 30258;
        }
        else
        {
          if (v15 == 758674994)
            goto LABEL_192;
          if (v15 == 759318337)
          {
LABEL_130:
            if (CADeviceSupportsLossyUniversalCompression::once[0] != -1)
              dispatch_once(CADeviceSupportsLossyUniversalCompression::once, &__block_literal_global_33_9776);
            if (!CADeviceSupportsLossyUniversalCompression::lossy)
              return 29;
            goto LABEL_216;
          }
          v32 = 26160;
        }
        v35 = v32 | 0x2D780000;
        goto LABEL_191;
      }
      if (v15 <= 792229425)
      {
        if (v15 != 792225328 && v15 != 792225330)
        {
          v35 = 792229424;
          goto LABEL_191;
        }
        goto LABEL_192;
      }
      if (v15 > 796419631)
      {
        if (v15 == 796419632)
          goto LABEL_192;
        v35 = 796419634;
        goto LABEL_191;
      }
      if (v15 == 792229426)
        goto LABEL_192;
      v25 = 792872769;
LABEL_129:
      if (v15 != v25)
        return result;
      goto LABEL_130;
    }
    if (v15 <= 645166639)
    {
      if (v15 > 641877824)
      {
        if (v15 <= 644624753)
        {
          if (v15 != 641877825 && v15 != 642934849)
          {
            if (v15 != 643969848)
              return result;
            if (CADeviceSupportsUniversalCompression::once[0] != -1)
              dispatch_once(CADeviceSupportsUniversalCompression::once, &__block_literal_global_27);
            if (!CADeviceSupportsUniversalCompression::universal)
              return 29;
            goto LABEL_216;
          }
LABEL_116:
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 696))(a1) & 1) != 0 || !*(_BYTE *)(a1 + 28072))
            return 29;
          goto LABEL_216;
        }
        if ((v15 - 645162544) > 4 || ((1 << (v15 - 48)) & 0x15) == 0)
        {
          if (v15 != 644624754)
            return result;
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 696))(a1) & 1) != 0 || !*(_BYTE *)(a1 + 28073))
            return 29;
          goto LABEL_216;
        }
        goto LABEL_157;
      }
      if ((v15 - 641230384) <= 4 && ((1 << (v15 - 48)) & 0x15) != 0)
        goto LABEL_157;
      v29 = -641234480;
    }
    else
    {
      if (v15 <= 645428783)
      {
        if (v15 > 645346400)
        {
          if ((v15 - 645424688) > 4 || ((1 << (v15 - 48)) & 0x15) == 0)
          {
            v20 = 13409;
LABEL_92:
            if (v15 != (v20 | 0x26770000))
              return result;
            goto LABEL_116;
          }
        }
        else if ((v15 - 645166640) > 4 || ((1 << (v15 - 48)) & 0x15) == 0)
        {
          v20 = 13170;
          goto LABEL_92;
        }
LABEL_157:
        if (CADeviceSupportsUniversalCompression::once[0] != -1)
          dispatch_once(CADeviceSupportsUniversalCompression::once, &__block_literal_global_27);
        if (CADeviceSupportsUniversalCompression::universal)
          goto LABEL_196;
        return 29;
      }
      if (v15 > 758670895)
      {
        if (v15 != 758670896 && v15 != 758670898)
        {
          v35 = 758674992;
          goto LABEL_191;
        }
        goto LABEL_192;
      }
      v29 = -645428784;
    }
    v30 = v15 + v29;
    if (v30 > 4 || ((1 << v30) & 0x15) == 0)
      return result;
    goto LABEL_157;
  }
  if (v15 > 1952854575)
  {
    if (v15 > 2019963441)
    {
      if (v15 <= 2084075055)
      {
        if (v15 > 2037741157)
        {
          if (v15 <= 2084070959)
          {
            if (v15 != 2037741158)
            {
              v21 = 2037741171;
              goto LABEL_184;
            }
LABEL_196:
            *a7 = 2;
LABEL_197:
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1496))(a1))
            {
              *a2 |= 0x4000000u;
              if ((v18 & 1) == 0)
                goto LABEL_217;
            }
            else if ((*(_WORD *)(a1 + 28424) & 2) != 0)
            {
              if (!*(_BYTE *)(a1 + 28092))
                v17 &= ~2u;
              if ((v18 & 1) == 0)
                goto LABEL_217;
            }
            else if (!v18)
            {
              goto LABEL_217;
            }
LABEL_207:
            v36 = 28312;
            goto LABEL_218;
          }
          if (v15 != 2084070960)
          {
            v35 = 2084070962;
            goto LABEL_191;
          }
LABEL_192:
          if (CADeviceSupportsLossyUniversalCompression::once[0] != -1)
            dispatch_once(CADeviceSupportsLossyUniversalCompression::once, &__block_literal_global_33_9776);
          if (!CADeviceSupportsLossyUniversalCompression::lossy)
            return 29;
          v18 = 0;
          goto LABEL_196;
        }
        if (v15 == 2019963442 || v15 == 2019963956)
          goto LABEL_196;
        v33 = 13424;
        goto LABEL_183;
      }
      if (v15 > 2088265263)
      {
        if (v15 > 2088269359)
        {
          if (v15 == 2088269360)
            goto LABEL_192;
          v26 = 30258;
        }
        else
        {
          if (v15 == 2088265264)
            goto LABEL_192;
          v26 = 26162;
        }
        v35 = v26 | 0x7C780000;
LABEL_191:
        if (v15 != v35)
          return result;
        goto LABEL_192;
      }
      if (v15 == 2084075056 || v15 == 2084075058)
        goto LABEL_192;
      v25 = 2084718401;
      goto LABEL_129;
    }
    if (v15 > 1999843441)
    {
      if (v15 <= 2016686641)
      {
        if (v15 == 1999843442 || v15 == 1999908961)
        {
          if ((*(float (**)(uint64_t))(*(_QWORD *)a4 + 192))(a4) != 1.0
            && *(_BYTE *)(a1 + 28084)
            && (v17 & 4) != 0)
          {
            *a7 = 2;
            *a2 |= 0x2000000u;
            if (*a7 != 2)
              goto LABEL_207;
            goto LABEL_197;
          }
          goto LABEL_216;
        }
        v24 = 12848;
      }
      else
      {
        if (v15 > 2016687215)
        {
          if (v15 == 2016687216)
            goto LABEL_196;
          v33 = 12848;
LABEL_183:
          v21 = v33 | 0x78660000;
          goto LABEL_184;
        }
        if (v15 == 2016686642)
          goto LABEL_196;
        v24 = 13364;
      }
      v21 = v24 | 0x78340000;
      goto LABEL_184;
    }
    if (v15 > 1953903151)
    {
      if (v15 != 1953903152 && v15 != 1953903154)
      {
        v31 = 1953903668;
LABEL_164:
        if (v15 != v31)
          return result;
      }
    }
    else if (v15 != 1952854576 && v15 != 1952854578)
    {
      v31 = 1952855092;
      goto LABEL_164;
    }
    if (!*(_BYTE *)(a1 + 28071))
      return 5;
    goto LABEL_196;
  }
  if (v15 <= 1647534391)
  {
    if (v15 <= 1534359087)
    {
      if ((v15 - 1530426928) <= 4 && ((1 << (v15 - 48)) & 0x15) != 0)
        goto LABEL_148;
      v19 = -1534354992;
    }
    else
    {
      if ((v15 - 1534359088) <= 4 && ((1 << (v15 - 48)) & 0x15) != 0
        || (v15 - 1534617136) <= 4 && ((1 << (v15 - 48)) & 0x15) != 0)
      {
        goto LABEL_148;
      }
      v19 = -1534621232;
    }
    v28 = v15 + v19;
    if (v28 > 4 || ((1 << v28) & 0x15) == 0)
      return result;
LABEL_148:
    if (*(_BYTE *)(a1 + 28072))
    {
      if (CADeviceSupportsUniversalCompression::once[0] != -1)
        dispatch_once(CADeviceSupportsUniversalCompression::once, &__block_literal_global_27);
      if (!CADeviceSupportsUniversalCompression::universal)
        goto LABEL_196;
    }
    return 29;
  }
  if (v15 > 1885746227)
  {
    if (((v15 - 1886676528) > 4 || ((1 << (v15 - 48)) & 0x15) == 0)
      && ((v15 - 1886680624) > 4 || ((1 << (v15 - 48)) & 0x15) == 0))
    {
      v27 = 13364;
      goto LABEL_177;
    }
    if (!*(_BYTE *)(a1 + 28071))
      return result;
    if (CADeviceSupportsUniversalCompression::once[0] != -1)
      dispatch_once(CADeviceSupportsUniversalCompression::once, &__block_literal_global_27);
    if (!CADeviceSupportsUniversalCompression::universal)
      goto LABEL_196;
    return 9;
  }
  if (v15 > 1882468913)
  {
    if (v15 <= 1885745711)
    {
      if (v15 != 1882468914)
      {
        v23 = 13364;
LABEL_108:
        v34 = v23 | 0x70340000;
        goto LABEL_178;
      }
LABEL_179:
      if (!*(_BYTE *)(a1 + 28070))
        return 4;
      goto LABEL_196;
    }
    if (v15 == 1885745712)
      goto LABEL_179;
    v27 = 12850;
LABEL_177:
    v34 = v27 | 0x70660000;
LABEL_178:
    if (v15 != v34)
      return result;
    goto LABEL_179;
  }
  if (v15 == 1647534392)
  {
    if (!*(_BYTE *)(a1 + 28070))
      return 6;
    goto LABEL_216;
  }
  if (v15 != 1815162994)
  {
    v23 = 12848;
    goto LABEL_108;
  }
  if (!*(_BYTE *)(a1 + 28073))
    return 7;
LABEL_216:
  *a7 = 0;
LABEL_217:
  v36 = 28352;
LABEL_218:
  v37 = a1 + v36;
  if (!(*(unsigned int (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a4 + 152))(a4, *(_QWORD *)(a1 + 28152), *(_QWORD *)(a1 + 28160)))return 10;
  v38 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 160))(a4);
  if (v38 && *(_QWORD *)(a1 + 28184) && v16 != v15 && IOSurfaceGetAllocSize(v38) > *(_QWORD *)(a1 + 28184))
    return 30;
  LODWORD(v39) = *(_DWORD *)(a4 + 56);
  v40 = *(_DWORD *)(a4 + 60);
  if (v39 >= v40)
    v39 = v40;
  else
    v39 = v39;
  if (*(_QWORD *)(v37 + 8) > v39)
    return 11;
  if (!(*(_DWORD *)(a1 + 745) & 0x40 | *a2 & 0x1000))
    return 34;
  v41 = (*a2 & 0x1000) == 0;
  v198 = (*(uint64_t (**)(uint64_t, _BOOL8))(*(_QWORD *)a1 + 2248))(a1, v41);
  v196 = (*(uint64_t (**)(uint64_t, _BOOL8))(*(_QWORD *)a1 + 2248))(a1, v41);
  v42 = (*(uint64_t (**)(uint64_t, _BOOL8))(*(_QWORD *)a1 + 2256))(a1, v41);
  if (!CA::WindowServer::Display::clones_support_detaching(*(CA::WindowServer::Display **)(a1 + 40)))
    return 12;
  if (((*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 56))(a4) & v17) == 0 && !BYTE13(xmmword_1ECDC6AB0))
  {
    if (!BYTE1(dword_1EDD110CC) || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 56))(a4) == 1)
      return 13;
    if ((v17 & 4) != 0)
    {
      v43 = 0x1000000;
    }
    else
    {
      if ((v17 & 2) == 0)
        return 13;
      v43 = 0x800000;
    }
    *a2 |= v43;
  }
  v195 = v37;
  v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 88))(a4);
  if (!v44)
    goto LABEL_260;
  v47 = (CGColorSpace *)v44;
  v193 = *(unsigned __int8 *)(a4 + 228);
  v48 = *(unsigned int *)(a4 + 224);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
    goto LABEL_252;
  v49 = *(_QWORD **)(a1 + 40);
  if (v49)
  {
    while (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v49 + 96) + 176))(*(_QWORD *)(*v49 + 96)) & 1) != 0)
    {
      v49 = (_QWORD *)v49[1];
      if (!v49)
        goto LABEL_251;
    }
LABEL_252:
    if (CGColorSpaceIsHLGBased(v47))
      return 36;
    goto LABEL_253;
  }
LABEL_251:
  if (((v48 | (v193 << 32)) & 0x2000000000) == 0)
    goto LABEL_252;
LABEL_253:
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1))
    goto LABEL_258;
  v50 = *(_QWORD **)(a1 + 40);
  if (v50)
  {
    while (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v50 + 96) + 168))(*(_QWORD *)(*v50 + 96)) & 1) != 0)
    {
      v50 = (_QWORD *)v50[1];
      if (!v50)
        goto LABEL_260;
    }
LABEL_258:
    if (CGColorSpaceIsPQBased(v47))
      return 36;
  }
LABEL_260:
  v51 = *a2;
  if ((*a2 & 0x40) != 0)
  {
LABEL_560:
    v182 = *(_QWORD **)(a1 + 40);
    if (v182)
    {
      while (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(*v182 + 96) + 696))(*(_QWORD *)(*v182 + 96))
           || (*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(*v182 + 96) + 568))(*(_QWORD *)(*v182 + 96), *a2)&& !*(_BYTE *)(*v182 + 522))
      {
        v182 = (_QWORD *)v182[1];
        if (!v182)
          goto LABEL_565;
      }
      return 23;
    }
    else
    {
LABEL_565:
      if ((*(float (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1) == 0.0)
      {
        return 0;
      }
      else
      {
        *(_BYTE *)(a1 + 28110) = 1;
        return 32;
      }
    }
  }
  v205 = 0;
  v206 = 0;
  v52 = v42 * v196;
  v204 = 0uLL;
  v202 = 0;
  v203 = 0;
  v201 = 0uLL;
  CA::Bounds::set_both(&v204, (const CA::Rect *)&v205, v45, v46, *a5, a5[1]);
  CA::Bounds::set_both(&v201, (const CA::Rect *)&v202, v53, v54, *v200, v200[1]);
  if ((v51 & 4) != 0)
    v55 = v201.i32[3];
  else
    v55 = v201.i32[2];
  v56 = (double)v55;
  if ((v51 & 4) != 0)
    v57 = v201.i32[2];
  else
    v57 = v201.i32[3];
  v191 = HIDWORD(v206);
  v192 = v206;
  v58 = (double)(int)v206;
  v59 = v56 / (double)(int)v206;
  v60 = (double)SHIDWORD(v206);
  v61 = (double)v57 / (double)SHIDWORD(v206);
  v62 = v203;
  if ((v51 & 4) != 0)
    v63 = HIDWORD(v203);
  else
    v63 = v203;
  v189 = HIDWORD(v203);
  v190 = v203;
  if ((v51 & 4) == 0)
    v62 = HIDWORD(v203);
  v64 = v204.i32[2];
  v65 = v204.i32[3];
  v66 = (double)v63 / (double)v204.i32[2];
  v67 = (double)v62 / (double)v204.i32[3];
  if ((v51 & 4) != 0)
    v68 = v204.i32[3];
  else
    v68 = v204.i32[2];
  v194 = v68;
  if (v59 <= v66)
    v69 = v66;
  else
    v69 = v59;
  if (v59 <= v66)
    v70 = v59;
  else
    v70 = v66;
  if (v61 <= v67)
    v71 = (double)v62 / (double)v204.i32[3];
  else
    v71 = v61;
  if (v61 <= v67)
    v72 = v61;
  else
    v72 = (double)v62 / (double)v204.i32[3];
  v73 = *(_DWORD *)(a1 + 176);
  v74 = *(_DWORD *)(a1 + 180);
  v197 = v52;
  if (v52)
  {
    result = 14;
    if (v198 < v201.i32[2] || v201.i32[3] * (uint64_t)v201.i32[2] > v52)
      return result;
  }
  if ((v51 & 0x10000) != 0)
    return 35;
  v187 = v204.i32[3];
  v188 = v204.i32[2];
  v75 = v201.i32[2];
  v186 = v201.i32[3];
  if (CADeviceSupportsDCP::once[0] != -1)
  {
    dispatch_once(CADeviceSupportsDCP::once, &__block_literal_global_214);
    v65 = v187;
    v64 = v188;
  }
  v76 = v74 * (uint64_t)v73;
  if (CADeviceSupportsDCP::has_dcp)
  {
    v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
    v65 = v187;
    v64 = v188;
    if ((v77 & 0xF00) != 0x700)
      goto LABEL_343;
  }
  v78 = *a2;
  v79 = v198;
  if ((*a2 & 8) != 0 || v198 < v194 || v197 && v65 * (uint64_t)v64 > v197)
    goto LABEL_345;
  v80 = *(_QWORD *)(v195 + 16);
  if (v80)
  {
    _NF = v72 < 1.0 || v70 < 1.0;
    if (_NF && v80 < v194)
      goto LABEL_344;
  }
  if (HIBYTE(xmmword_1ECDC6AF0) || !*(_BYTE *)(a1 + 28067))
  {
    v85 = v70 >= 1.0 && v72 >= 1.0 && v69 <= 1.0 && v71 <= 1.0;
    v79 = v198;
    if (!v85)
      goto LABEL_345;
    goto LABEL_346;
  }
  if ((v78 & 7) != 0)
  {
    v79 = v198;
    if (((*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 2272))(a1, v78 & 7, a4) & 1) != 0
      || (*(_DWORD *)(a4 + 60) * *(_DWORD *)(a4 + 56)) <= v76)
    {
      goto LABEL_346;
    }
LABEL_342:
    v78 = *a2;
LABEL_345:
    *a2 = v78 | 0x80;
    goto LABEL_346;
  }
  v86 = v72 < 1.0 || v70 < 1.0;
  _ZF = v86 && *a7 == 2;
  if (_ZF && *(_BYTE *)(a1 + 28070))
  {
    if (CADeviceSupportsUniversalCompression::once[0] != -1)
      dispatch_once(CADeviceSupportsUniversalCompression::once, &__block_literal_global_27);
    if (!CADeviceSupportsUniversalCompression::universal)
    {
LABEL_343:
      v78 = *a2;
LABEL_344:
      v79 = v198;
      goto LABEL_345;
    }
  }
  v88 = *(_QWORD *)(a1 + 28248);
  v79 = v198;
  if (v88)
  {
    v89 = a5[1].f64[0];
    if (v89 > (double)v88 && v89 != v200[1].f64[0])
      goto LABEL_342;
  }
LABEL_346:
  is_420 = CA::Render::fourcc_is_420((CA::Render *)*(unsigned int *)(a4 + 64));
  v91 = (v70 >= 1.0) & ~(_BYTE)is_420;
  if (v72 < 1.0)
    v91 = 0;
  if (v69 > 1.0)
    v91 = 0;
  if (v71 > 1.0)
    v91 = 0;
  v92 = *(_QWORD *)(a1 + 28256);
  if (v92)
  {
    if (v194 > (int)v92 && (v91 & 1) == 0)
    {
      v93 = *a2;
      *a2 |= 0x80u;
      if (is_420)
        *a2 = v93 | 0x20000080;
    }
  }
  v94 = *(_DWORD *)(a4 + 64);
  if (CA::Render::fourcc_compressed_of_type((CA::Render *)v94, 0, 0) == v94)
    *a2 |= 0x40000000u;
  if ((_BYTE)xmmword_1ECDC6A90)
  {
    v101 = 0;
    v105 = 0;
    should_enhance = 1;
  }
  else
  {
    v95 = (CA::ScalerStatistics *)*(unsigned int *)(a4 + 56);
    v96 = *(unsigned int *)(a4 + 60);
    v97 = v71 * (double)v96;
    v98 = *a2;
    if ((*a2 & 4) != 0)
      v99 = (unint64_t)v97;
    else
      v99 = (unint64_t)(v69 * (double)v95);
    if ((v98 & 4) != 0)
      v100 = (unint64_t)(v69 * (double)v95);
    else
      v100 = (unint64_t)v97;
    v101 = (v98 & 0x40000000) == 0 && (double)v76 * 1.5 < (double)(v99 * v100);
    if (v96 < 0x2D1)
    {
      v103 = 0;
    }
    else
    {
      v102 = *(_DWORD *)(a1 + 176);
      if (v102 >= *(_DWORD *)(a1 + 180))
        v102 = *(_DWORD *)(a1 + 180);
      v103 = v102 < 1640;
    }
    v104 = v99 > v79 || v103;
    if (v79)
      v105 = v104;
    else
      v105 = v103;
    should_enhance = CA::ScalerStatistics::should_enhance(v95, v96, v99, v100);
  }
  if (*(_BYTE *)(a4 + 229) && BYTE2(dword_1EDD110CC))
  {
    if (v70 > 1.0)
      v107 = should_enhance;
    else
      v107 = 0;
    v108 = dword_1EDD110A8;
    if (v107 == 1 && v72 > 1.0)
    {
      v110 = *(double *)(v195 + 32);
      if (v69 <= v110 * *(float *)&dword_1EDD110A8)
      {
        v111 = v71 > v110 * *(float *)&dword_1EDD110AC ? 1 : v105;
        if ((v111 & 1) == 0)
        {
          v112 = byte_1ECDC6A8F || v101;
          if ((v112 & 1) == 0)
            *a2 |= 0x10000000u;
        }
      }
    }
  }
  else
  {
    v108 = dword_1EDD110A8;
  }
  v113 = v195;
  v114 = *a2;
  v115 = (float *)&dword_1EDD110A0;
  if ((*a2 & 0x10000000) == 0)
    v115 = (float *)&xmmword_1EDD11090;
  v116 = *v115;
  v117 = (float *)&xmmword_1EDD11090 + 1;
  if ((v114 & 0x10000000) != 0)
    v117 = (float *)algn_1EDD110A4;
  v118 = *v117;
  if ((v114 & 0x10000000) != 0)
    v119 = *(float *)&v108;
  else
    v119 = *((float *)&xmmword_1EDD11090 + 2);
  v120 = (float *)&dword_1EDD110AC;
  if ((v114 & 0x10000000) == 0)
    v120 = (float *)&xmmword_1EDD11090 + 3;
  v121 = *v120;
  v122 = v119;
  v123 = *v120;
  v124 = v199;
  if ((v114 & 0x10000000) != 0 && v69 <= v122 && v71 <= v123)
  {
    v114 |= 0x80u;
    *a2 = v114;
  }
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)v199 = _Q0;
  v128 = v116;
  v129 = v118;
  v130 = 1.0;
  if ((v114 & 0x80) == 0
    || (v70 >= v128 ? (v131 = v72 < v129) : (v131 = 1),
        !v131 ? (v132 = v69 > v122) : (v132 = 1),
        !v132 ? (v133 = v71 > v123) : (v133 = 1),
        v133))
  {
    v140 = v114 & 0xFFFFFF7F;
    *a2 = v114 & 0xFFFFFF7F;
    v141 = *(double *)(v195 + 24);
    if (v70 >= v141)
    {
      v144 = *(double *)(v195 + 32);
      if (v69 <= v144)
      {
        v134 = 1.0;
        if ((v114 & 0x10000000) == 0 || v69 <= v122)
        {
LABEL_464:
          if (v72 >= v141)
          {
            v162 = *(double *)(v113 + 32);
            if (v71 <= v162 && ((v140 & 0x10000000) == 0 || v71 <= v123))
            {
              v114 = v140;
              goto LABEL_570;
            }
            if (v162 * v123 < v71)
              return 15;
            v165 = 2;
            if ((int)v121 >= 3)
            {
              do
              {
                if (v162 * (double)v165 >= v71)
                  break;
                v165 *= 2;
              }
              while (v165 < (int)v121);
              if (v165 < 2)
                return 15;
            }
            v114 = v140 | 0x8000000;
            *a2 = v140 | 0x8000000;
            v130 = (double)v165;
          }
          else
          {
            if (v141 * v129 > v72)
              return 15;
            v130 = 0.5;
            if (v118 < 0.5 && v141 * 0.5 > v72)
            {
              do
                v130 = v130 * 0.5;
              while (v130 > v129 && v130 * v141 > v72);
            }
            if (v130 <= 0.0 || v130 >= 1.0)
              return 15;
            v114 = v140 | 0x8000000;
            *a2 = v140 | 0x8000000;
          }
          v199[1] = v130;
LABEL_570:
          v113 = v195;
          goto LABEL_429;
        }
      }
      if (v144 * v122 < v69)
        return 15;
      v145 = 2;
      if ((int)v119 >= 3)
      {
        do
        {
          if (v144 * (double)v145 >= v69)
            break;
          v145 *= 2;
        }
        while (v145 < (int)v119);
        if (v145 < 2)
          return 15;
      }
      v140 |= 0x8000000u;
      *a2 = v140;
      v134 = (double)v145;
      v124 = v199;
      v113 = v195;
    }
    else
    {
      if (v141 * v128 > v70)
        return 15;
      v134 = 0.5;
      if (v116 < 0.5 && v141 * 0.5 > v70)
      {
        do
          v134 = v134 * 0.5;
        while (v134 > v128 && v134 * v141 > v70);
      }
      if (v134 <= 0.0 || v134 >= 1.0)
        return 15;
      v140 = v114 & 0xF7FFFF7F | 0x8000000;
      *a2 = v140;
    }
    *v124 = v134;
    goto LABEL_464;
  }
  v134 = 1.0;
LABEL_429:
  v135 = *(_QWORD *)v113;
  if (*(_QWORD *)v113)
  {
    v136 = v190;
    if ((v114 & 0x80) == 0)
      v136 = v192;
    LODWORD(v137) = v191;
    if ((v114 & 0x80) != 0)
      LODWORD(v137) = v189;
    v137 = (int)v137;
    v138 = v136;
    v139 = v114 & 0x8000000;
    if ((v114 & 0x8000000) != 0)
    {
      v138 = (unint64_t)(v134 * (double)v138);
      v137 = (unint64_t)(v130 * (double)(unint64_t)(int)v137);
    }
    if (v138 < v137)
      v137 = v138;
    if (v137 < v135)
      return 16;
  }
  else
  {
    v139 = v114 & 0x8000000;
  }
  v149 = *(unsigned int *)(a4 + 56);
  v150 = *(unsigned int *)(a4 + 60);
  if (v139)
  {
    v149 = (unint64_t)(v134 * (double)v149);
    v134 = (double)v150;
    v130 = v130 * (double)v150;
    v150 = (unint64_t)v130;
    v114 &= ~0x40000000u;
    *a2 = v114;
  }
  v151 = *(_QWORD *)(a1 + 28192);
  if (v151)
  {
    if ((v114 & 0x80) != 0)
    {
      v152 = v201.i32[0];
      v153 = v201.i32[1];
      v154 = v75;
      v155 = v186;
    }
    else
    {
      v152 = 0;
      v153 = 0;
      v154 = v149;
      v155 = v150;
    }
    v156 = v154 + v152;
    v157 = v155 + v153;
    if (v156 <= v157)
      v156 = v157;
    if (v156 > v151)
      return 17;
  }
  result = 18;
  if (v149 <= v151 && v150 <= v151)
  {
    if ((v114 & 0x8000080) != 0)
    {
      if ((v114 & 0x80) != 0)
      {
        LODWORD(v130) = *(_DWORD *)(a4 + 56);
        LODWORD(v134) = *(_DWORD *)(a4 + 60);
        v149 = (unint64_t)(v69 * (double)*(unint64_t *)&v130);
        v150 = (unint64_t)(v71 * (double)*(unint64_t *)&v134);
        if ((v114 & 0x40000000) != 0)
        {
          v158 = v200[1].f64[0];
          v159 = v200[1].f64[1];
          if ((unint64_t)v158 < v149)
            v149 = (unint64_t)v158;
          if ((unint64_t)v159 < v150)
            v150 = (unint64_t)v159;
        }
      }
      if ((v114 & 4) != 0)
        v160 = v150;
      else
        v160 = v149;
      if (v198 && v160 > v198)
        return 19;
      v161 = (v114 & 4) != 0 ? v149 : v150;
      if (v197 && v160 * v161 > v197)
        return 19;
    }
    else
    {
      if (v198 < v194 || v197 && v187 * (uint64_t)(int)v188 > v197)
        return 20;
      v160 = v194;
      v163 = *(_QWORD *)(v195 + 16);
      if (v163)
      {
        v164 = v72 < 1.0 || v70 < 1.0;
        if (v164 && v163 < v188)
          return 20;
      }
    }
    if (CADeviceUseCompression::once != -1)
      dispatch_once(&CADeviceUseCompression::once, &__block_literal_global_15);
    if (CADeviceUseCompression::enable_compression)
    {
      v166 = (CA::Render *)*(unsigned int *)(a4 + 64);
      if ((*a2 & 0xBF800080) != 0)
        v166 = (CA::Render *)(*(uint64_t (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)a1 + 2280))(a1, *(unsigned int *)(a4 + 64), v160);
      if ((_DWORD)v166 && CA::Render::fourcc_compressed_of_type(v166, 0, 0) != (_DWORD)v166)
      {
        v184 = *(_QWORD *)(a1 + 28224);
        if (CA::Render::fourcc_is_420(v166) && *(_QWORD *)(a1 + 28232))
          v184 = *(_QWORD *)(a1 + 28232);
        if (v184 && v160 > v184)
          return 31;
        v185 = (CA::Render *)(*(uint64_t (**)(uint64_t, CA::Render *, unint64_t))(*(_QWORD *)a1 + 2280))(a1, v166, v160);
        if (CA::Render::fourcc_compressed_of_type(v185, 0, 0) == (_DWORD)v185
          && !BYTE1(xmmword_1ECDC6A90))
        {
          return 31;
        }
      }
    }
    if ((*a2 & 0xBF800080) == 0 || (result = 21, (int)v188 <= dword_1EDD11078) && v187 <= dword_1EDD1107C)
    {
      v167 = CA::WindowServer::Display::minmax_clone_scale((CA::WindowServer::Display *)a1);
      v169 = v168;
      v171 = v170 * v69;
      v173 = v172 * v71;
      CA::ScalerUtil::ScalerLimits::limits(v174);
      v175 = 1.0;
      if (v171 > 1.0 || v173 > 1.0)
      {
        LODWORD(v175) = *(_DWORD *)(a4 + 56);
        v183 = v171 * (double)v175;
        if (v183 > (double)dword_1EDD11088 * 0.75)
          return 22;
        LODWORD(v183) = *(_DWORD *)(a4 + 60);
        if (v173 * (double)*(unint64_t *)&v183 > (double)dword_1EDD1108C * 0.75)
          return 22;
      }
      v176 = v167 * v70;
      v177 = v169 * v72;
      v178 = v167 * v70 < 1.0;
      if (v169 * v72 < 1.0)
        v178 = 1;
      if (!v178 || (v179 = (double)*(unint64_t *)v195, result = 38, v176 * v58 >= v179) && v177 * v60 >= v179)
      {
        if (v171 == 0.0
          || v173 == 0.0
          || v176 >= *(float *)&xmmword_1EDD11090
          && v177 >= *((float *)&xmmword_1EDD11090 + 1)
          && v171 <= *((float *)&xmmword_1EDD11090 + 2)
          && v173 <= *((float *)&xmmword_1EDD11090 + 3))
        {
          if (v178)
          {
            v180 = v176 * v58;
            v181 = (double)*(unint64_t *)v195;
            result = 38;
            if (v180 < v181 || v177 * v60 < v181)
              return result;
          }
          goto LABEL_560;
        }
        return 15;
      }
    }
  }
  return result;
}

float CA::WindowServer::IOMFBDisplay::luma_boost_scale(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6650);
}

uint64_t CA::WindowServer::Display::update_clone_flags(CA::WindowServer::Display *this, int a2)
{
  unsigned int *v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t result;
  int v9;
  unsigned int v10;
  unsigned int v11;

  v3 = (unsigned int *)((char *)this + 624);
  v4 = *((_DWORD *)this + 156);
  if (!a2)
  {
    if ((v4 & 4) != 0)
    {
      do
        v7 = __ldaxr(v3);
      while (__stlxr(v7 & 0xFFFFFFFB, v3));
      goto LABEL_8;
    }
LABEL_6:
    v6 = 0;
    goto LABEL_9;
  }
  if ((v4 & 4) != 0)
    goto LABEL_6;
  do
    v5 = __ldaxr(v3);
  while (__stlxr(v5 | 4, v3));
LABEL_8:
  v6 = 1;
LABEL_9:
  result = (*(uint64_t (**)(CA::WindowServer::Display *))(*(_QWORD *)this + 696))(this);
  v9 = *((_DWORD *)this + 156);
  if ((_DWORD)result)
  {
    if ((v9 & 0x80) == 0)
    {
      do
        v10 = __ldaxr(v3);
      while (__stlxr(v10 | 0x80, v3));
      return CA::WindowServer::Display::post_display_changed((uint64_t)this);
    }
  }
  else if ((v9 & 0x80) != 0)
  {
    do
      v11 = __ldaxr(v3);
    while (__stlxr(v11 & 0xFFFFFF7F, v3));
    return CA::WindowServer::Display::post_display_changed((uint64_t)this);
  }
  if (v6)
    return CA::WindowServer::Display::post_display_changed((uint64_t)this);
  return result;
}

BOOL CA::WindowServer::IOMFBDisplay::cloning_active(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v1;

  return *((_QWORD *)this + 80)
      && (v1 = *((_QWORD *)this + 6)) != 0
      && (*(_BYTE *)(*(_QWORD *)(v1 + 96) + 747) & 1) == 0
      && !*((_BYTE *)this + 28044)
      && *((_BYTE *)this + 28048) == 0;
}

void CA::ScalerUtil::ScalerLimits::limits(CA::ScalerUtil::ScalerLimits *this)
{
  unsigned __int8 v1;

  if (CA::ScalerUtil::ScalerLimits::limits(void)::onceToken[0] != -1)
    dispatch_once(CA::ScalerUtil::ScalerLimits::limits(void)::onceToken, &__block_literal_global_452);
}

int32x4_t *CA::Bounds::set_both(int32x4_t *this, const CA::Rect *a2, CA::Bounds *a3, CA::Bounds *a4, float64x2_t a5, float64x2_t a6)
{
  int64x2_t v6;
  int8x16_t v7;
  float64x2_t v8;
  float64x2_t v9;
  int32x4_t v10;
  int32x4_t v11;

  v6 = vceqzq_f64(a6);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v6, 1), (int8x16_t)v6).u64[0] & 0x8000000000000000) != 0
    || (v7 = vorrq_s8((int8x16_t)vcltzq_f64(a6), (int8x16_t)vcgezq_f64(a6)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v7), 1), v7).u64[0] & 0x8000000000000000) != 0))
  {
    this->i64[0] = 0;
    this->i64[1] = 0;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
  }
  else
  {
    v8 = vmaxnmq_f64(a5, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000));
    v9 = vminnmq_f64(vaddq_f64(a5, a6), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
    v10 = (int32x4_t)vcvtmq_s64_f64(v8);
    *this = vuzp1q_s32(v10, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v9), (int64x2_t)v10));
    v11 = (int32x4_t)vcvtpq_s64_f64(v8);
    *(int32x4_t *)a2 = vuzp1q_s32(v11, (int32x4_t)vsubq_s64(vcvtmq_s64_f64(v9), (int64x2_t)v11));
  }
  return this;
}

uint64_t CA::WindowServer::IOSurface::color_primaries(IOSurfaceRef *this)
{
  uint64_t result;
  CFTypeRef v3;
  const void *v4;
  int v5;
  int BulkAttachments;

  result = *((unsigned int *)this + 68);
  if (!(_DWORD)result)
  {
    v3 = IOSurfaceCopyValue(this[30], (CFStringRef)*MEMORY[0x1E0CBBF70]);
    if (v3)
    {
      v4 = v3;
      if (CFEqual(v3, (CFTypeRef)*MEMORY[0x1E0CBBF80]))
      {
        v5 = 2;
      }
      else if (CFEqual(v4, (CFTypeRef)*MEMORY[0x1E0CBBF88]))
      {
        v5 = 4;
      }
      else
      {
        if (!CFEqual(v4, (CFTypeRef)*MEMORY[0x1E0CBBF78]))
        {
LABEL_13:
          CFRelease(v4);
          return *((unsigned int *)this + 68);
        }
        v5 = 8;
      }
      *((_DWORD *)this + 68) = v5;
      goto LABEL_13;
    }
    BulkAttachments = IOSurfaceGetBulkAttachments();
    result = 2;
    if (!BulkAttachments)
      result = 2;
    *((_DWORD *)this + 68) = 2;
  }
  return result;
}

BOOL CA::WindowServer::IOSurface::check_alignment(CA::WindowServer::IOSurface *this, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;

  v3 = *((unsigned int *)this + 73);
  v4 = v3 % a2;
  v5 = ((_DWORD)a2 - 1) & v3;
  if ((a2 & (a2 - 1)) != 0)
    v5 = v4;
  if (v5)
    return 0;
  v7 = *((unsigned int *)this + 74);
  if ((a3 & (a3 - 1)) != 0)
    v8 = v7 % a3;
  else
    v8 = ((_DWORD)a3 - 1) & v7;
  return v8 == 0;
}

uint64_t CA::WindowServer::IOSurface::colorspace(CA::WindowServer::IOSurface *this)
{
  return *((_QWORD *)this + 35);
}

uint64_t CA::WindowServer::Display::clones_support_detaching(CA::WindowServer::Display *this)
{
  CA::WindowServer::Display *v1;
  uint64_t v2;

  if (!this)
    return 1;
  v1 = this;
  while (1)
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v1 + 96) + 696))(*(_QWORD *)(*(_QWORD *)v1 + 96)))
    {
      v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
      if ((*(_BYTE *)(v2 + 745) & 0x40) == 0 && (*(_DWORD *)(v2 + 624) & 2) != 0)
        break;
    }
    v1 = (CA::WindowServer::Display *)*((_QWORD *)v1 + 1);
    if (!v1)
      return 1;
  }
  return 0;
}

uint64_t CA::WindowServer::IOSurface::cache_mode(CA::WindowServer::IOSurface *this)
{
  uint64_t result;

  result = *((unsigned int *)this + 65);
  if ((_DWORD)result == -1)
  {
    result = IOSurfaceGetCacheMode();
    *((_DWORD *)this + 65) = result;
  }
  return result;
}

uint64_t CA::ScalerStatistics::should_enhance(CA::ScalerStatistics *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v8;
  _QWORD v10[6];

  v10[5] = *MEMORY[0x1E0C80C00];
  v8 = NSSelectorFromString(CFSTR("shouldEnhanceWidth:height:destinationWidth:destinationHeight:"));
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN2CA16ScalerStatistics14should_enhanceEmmmm_block_invoke;
  v10[3] = &__block_descriptor_40_e5_v8__0l;
  v10[4] = v8;
  if (CA::ScalerStatistics::should_enhance(unsigned long,unsigned long,unsigned long,unsigned long)::once != -1)
    dispatch_once(&CA::ScalerStatistics::should_enhance(unsigned long,unsigned long,unsigned long,unsigned long)::once, v10);
  if (CA::ScalerStatistics::should_enhance(unsigned long,unsigned long,unsigned long,unsigned long)::exists)
    return (uint64_t)objc_msgSend((id)objc_opt_class(), v8, this, a2, a3, a4);
  else
    return 1;
}

double CA::WindowServer::Display::minmax_clone_scale(CA::WindowServer::Display *this)
{
  _QWORD *v1;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;

  v1 = (_QWORD *)*((_QWORD *)this + 5);
  if (!v1)
    return 1.79769313e308;
  v3 = 0.0;
  v4 = 1.79769313e308;
  v5 = 0.0;
  v6 = 1.79769313e308;
  do
  {
    v7 = *v1;
    v8 = 0.0;
    v9 = 0.0;
    if ((*(_DWORD *)(*(_QWORD *)(*v1 + 96) + 624) & 2) != 0)
    {
      pthread_mutex_lock((pthread_mutex_t *)(v7 + 24));
      v8 = (*(double (**)(_QWORD, CA::WindowServer::Display *))(**(_QWORD **)(v7 + 96) + 688))(*(_QWORD *)(v7 + 96), this);
      v9 = v10;
      pthread_mutex_unlock((pthread_mutex_t *)(v7 + 24));
    }
    if (v8 > v5)
      v5 = v8;
    if (v9 > v3)
      v3 = v9;
    if (v8 < v6)
      v6 = v8;
    if (v9 < v4)
      v4 = v9;
    v1 = (_QWORD *)v1[1];
  }
  while (v1);
  return v6;
}

uint64_t CA::OGL::MaskNode::MaskRectState::map_(uint64_t result, float32x2_t *a2, uint64_t a3)
{
  uint64_t v3;
  int64x2_t v4;
  float64x2_t v5;
  float32x2_t *v6;
  float64x2_t v7;
  float v8;

  if (a3)
  {
    v3 = **(_QWORD **)(result + 48);
    v4.i64[0] = (int)v3;
    v4.i64[1] = SHIDWORD(v3);
    v5 = vcvtq_f64_s64(v4);
    v6 = a2 + 2;
    do
    {
      v7 = vcvtq_f64_f32(v6[-2]);
      v8 = v6[-1].f32[1];
      if (v8 != 1.0)
        v7 = vmulq_n_f64(v7, 1.0 / v8);
      *v6 = vcvt_f32_f64(vsubq_f64(v7, v5));
      v6 += 6;
      --a3;
    }
    while (a3);
  }
  return result;
}

uint64_t CARenderRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 8);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

uint64_t CA::Render::mix_objects(uint64_t this, CA::Render::Object *a2, CA::Render::Object **a3, const ValueInterpolator *a4)
{
  _QWORD *v4;
  CA::Render::Object *v5;
  unsigned __int8 *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;

  v4 = (_QWORD *)this;
  if (!a2)
    goto LABEL_22;
  v5 = (CA::Render::Object *)a3;
  if (!a3)
    goto LABEL_22;
  v7 = (unsigned __int8 *)a2;
  if (fabs(a4->var0) < 0.00001)
  {
    v8 = (unsigned int *)((char *)a2 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    if (!v9)
    {
      v7 = 0;
      do
        v14 = __ldaxr(v8);
      while (__stlxr(v14 - 1, v8));
    }
    *(_QWORD *)this = v7;
    return this;
  }
  if (fabs(a4->var0 + -1.0) >= 0.00001)
  {
    v12 = *((unsigned __int8 *)a2 + 12);
    v13 = *((unsigned __int8 *)a3 + 12);
    if (v12 == 26)
    {
      v7 = (unsigned __int8 *)*((_QWORD *)a2 + 4);
      if (!v7)
        goto LABEL_22;
      v12 = v7[12];
    }
    if (v13 != 26)
    {
LABEL_19:
      if (v12 == v13)
        return (*(uint64_t (**)(unsigned __int8 *, CA::Render::Object *, const ValueInterpolator *))(*(_QWORD *)v7 + 56))(v7, v5, a4);
      this = (*(uint64_t (**)(unsigned __int8 *, CA::Render::Object *))(*(_QWORD *)v7 + 48))(v7, v5);
      if ((this & 1) != 0)
        return (*(uint64_t (**)(unsigned __int8 *, CA::Render::Object *, const ValueInterpolator *))(*(_QWORD *)v7 + 56))(v7, v5, a4);
      goto LABEL_22;
    }
    v5 = a3[4];
    if (v5)
    {
      v13 = *((unsigned __int8 *)v5 + 12);
      goto LABEL_19;
    }
LABEL_22:
    *v4 = 0;
    return this;
  }
  v10 = (unsigned int *)(a3 + 1);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  if (!v11)
  {
    v5 = 0;
    do
      v15 = __ldaxr(v10);
    while (__stlxr(v15 - 1, v10));
  }
  *(_QWORD *)this = v5;
  return this;
}

void CA::Render::insert_node_by_minz(CA::Render::LayerNode **a1, CA::Render::LayerNode *this)
{
  CA::Render::LayerNode *v2;
  CA::Render::LayerNode *v4;
  double *v5;
  CA::Render::LayerNode *v6;

  v2 = this;
  CA::Render::LayerNode::update_z_range(this, this);
  if ((*((_BYTE *)v2 + 24) & 0x18) != 0)
  {
    v4 = *a1;
    *a1 = v2;
    *(_QWORD *)v2 = v4;
    *((_QWORD *)v2 + 1) = a1;
  }
  else
  {
    v5 = (double *)a1;
    while (1)
    {
      v5 = (double *)*((_QWORD *)v5 + 1);
      if (v5 == (double *)a1)
        break;
      if (v5[30] > *((double *)v2 + 30))
        goto LABEL_8;
    }
    v5 = (double *)a1;
LABEL_8:
    v6 = (CA::Render::LayerNode *)*((_QWORD *)v2 + 1);
    v4 = *(CA::Render::LayerNode **)v5;
    *((_QWORD *)v2 + 1) = v5;
    *(_QWORD *)v5 = v2;
    *(_QWORD *)v6 = v4;
    v2 = v6;
  }
  *((_QWORD *)v4 + 1) = v2;
}

void CA::Render::LayerNode::update_z_range(CA::Render *this, CA::Render::LayerNode *a2)
{
  uint64_t v2;
  double *v3;
  uint64_t v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  unsigned int v10;
  double v11;
  double v12;
  unsigned int v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;

  v2 = *((_QWORD *)this + 3);
  if ((v2 & 4) != 0)
  {
    *((_QWORD *)this + 3) = v2 & 0xFFFFFFFFFFFFFFF3;
    v3 = (double *)*((_QWORD *)this + 7);
    if (v3)
    {
      if (!*((_QWORD *)this + 19))
      {
        v5 = (double *)*((_QWORD *)this + 4);
        v6 = v5[8];
        v7 = v5[9];
        v8 = v5[10];
        v9 = v5[11];
        v10 = -1;
        v11 = INFINITY;
        v12 = -INFINITY;
        while (1)
        {
          v13 = v10 + 1;
          v14 = v10 >= 2 ? 0.0 : v8;
          v15 = v14 + v6;
          v16 = (v13 & 2) != 0 ? v9 : 0.0;
          v17 = v16 + v7;
          v18 = v3[15] + v3[3] * v15 + v3[7] * v17;
          if (v18 <= 0.0)
            break;
          v19 = (v3[14] + v3[2] * v15 + v3[6] * v17) / v18;
          if (v19 < v11)
            v11 = v19;
          if (v19 > v12)
            v12 = v19;
          ++v10;
          if (v13 == 3)
          {
            *((double *)this + 30) = v11;
            *((double *)this + 31) = v12;
            return;
          }
        }
      }
      CA::Render::update_z_range_clip(this, a2);
    }
    else
    {
      v4 = *((_QWORD *)this + 10);
      *((_QWORD *)this + 30) = v4;
      *((_QWORD *)this + 31) = v4;
    }
  }
}

unint64_t ___ZN2CA3OGL22AsynchronousDispatcher13schedule_itemEPNS0_16AsynchronousItemE_block_invoke(uint64_t a1)
{
  return CA::OGL::AsynchronousDispatcher::start_timer(*(_QWORD *)(a1 + 32));
}

void _XBackdropDidChangeLuma(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  _QWORD block[5];
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 44)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_DWORD *)(a1 + 40);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___Z23CABackdropDidChangeLumayf_block_invoke;
    block[3] = &__block_descriptor_44_e5_v8__0l;
    block[4] = v3;
    v6 = v4;
    dispatch_async(MEMORY[0x1E0C80D38], block);
    *(_DWORD *)(a2 + 32) = 0;
  }
}

void _XImageQueueCollectable(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x80000000) != 0 || a1[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    CAImageQueueCollectable(a1[8]);
    *(_DWORD *)(a2 + 32) = 0;
  }
}

void CAImageQueueCollectable(int a1)
{
  CFTypeRef *v2;
  _QWORD *v3;
  NSObject *v4;

  pthread_mutex_lock(&collectable_mutex);
  v2 = (CFTypeRef *)collectable_list;
  if (collectable_list)
  {
    while (1)
    {
      v3 = *v2;
      if (*((_DWORD *)*v2 + 7) == a1)
        break;
      v2 = (CFTypeRef *)v2[1];
      if (!v2)
        goto LABEL_4;
    }
    CFRetain(*v2);
    pthread_mutex_unlock(&collectable_mutex);
    v4 = v3[9];
    if (v4)
      dispatch_async_f(v4, v3, (dispatch_function_t)invoke_collectable_callback);
    else
      invoke_collectable_callback(v3);
  }
  else
  {
LABEL_4:
    pthread_mutex_unlock(&collectable_mutex);
  }
}

void invoke_collectable_callback(_BYTE *a1)
{
  pthread_mutex_lock(&collectable_mutex);
  while (a1[112])
    pthread_cond_wait(&collectable_cond, &collectable_mutex);
  if (*((_QWORD *)a1 + 12))
  {
    a1[112] = 1;
    pthread_mutex_unlock(&collectable_mutex);
    (*((void (**)(_BYTE *, _QWORD))a1 + 12))(a1, *((_QWORD *)a1 + 13));
    pthread_mutex_lock(&collectable_mutex);
    a1[112] = 0;
    pthread_cond_broadcast(&collectable_cond);
  }
  pthread_mutex_unlock(&collectable_mutex);
  CFRelease(a1);
}

void _XSetContextDisplayId(_DWORD *a1, uint64_t a2)
{
  int v3;
  int *v4;
  int *v5;
  pthread_mutex_t *v6;
  CA::Render::Context *v7;

  if ((*a1 & 0x80000000) != 0 || a1[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    v3 = a1[8];
    v4 = CA::Context::retain_context_with_client_port((CA::Context *)a1[3]);
    if (v4)
    {
      v5 = v4;
      v6 = (pthread_mutex_t *)(v4 + 4);
      pthread_mutex_lock((pthread_mutex_t *)(v4 + 4));
      if (v5[37] != v3)
      {
        v5[37] = v3;
        v7 = (CA::Render::Context *)*((_QWORD *)v5 + 13);
        if (v7)
          CA::Render::Context::set_display_id(v7, v3);
      }
      pthread_mutex_unlock(v6);
      CA::Context::unref((CA::Context *)v5, 0);
    }
    *(_DWORD *)(a2 + 32) = 0;
  }
}

int *CA::Context::retain_context_with_client_port(CA::Context *this)
{
  int v1;
  int **i;
  int *v3;
  int v4;

  v1 = (int)this;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Context::_lock);
  if ((CA::all_contexts(void)::contexts_data_initialized & 1) != 0)
  {
    for (i = (int **)CA::all_contexts(void)::contexts_data; ; ++i)
    {
      if (i == (int **)qword_1ECDC6558)
      {
        v3 = 0;
        goto LABEL_9;
      }
      v3 = *i;
      v4 = **i;
      if (v4)
      {
        if (v3[44] == v1)
          break;
      }
    }
    *v3 = v4 + 1;
  }
  else
  {
    v3 = 0;
    CA::all_contexts(void)::contexts_data = 0;
    qword_1ECDC6558 = 0;
    qword_1ECDC6560 = 0;
    CA::all_contexts(void)::contexts_data_initialized = 1;
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Context::_lock);
  return v3;
}

void _XImageQueueDidComposite(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x80000000) != 0 || a1[1] != 44)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    CAImageQueueDidComposite(a1[8], a1[9], a1[10]);
    *(_DWORD *)(a2 + 32) = 0;
  }
}

void _XImageQueueDidPresent(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef *v8;
  CFTypeRef v9;
  _DWORD *v10;
  _DWORD *v11;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 64)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 32);
    v3 = *(_DWORD *)(a1 + 36);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 56);
    pthread_mutex_lock(&presented_mutex);
    v8 = (CFTypeRef *)presented_list;
    if (presented_list)
    {
      while (1)
      {
        v9 = *v8;
        if (*((_DWORD *)*v8 + 7) == v4)
          break;
        v8 = (CFTypeRef *)v8[1];
        if (!v8)
          goto LABEL_6;
      }
      CFRetain(*v8);
      pthread_mutex_unlock(&presented_mutex);
      v10 = malloc_type_malloc(0x28uLL, 0x102004012755DA7uLL);
      *(_QWORD *)v10 = v9;
      v10[2] = v3;
      *((_QWORD *)v10 + 2) = v5;
      *((_QWORD *)v10 + 3) = v6;
      *((_QWORD *)v10 + 4) = v7;
      if (CA::MachPortUtil::reply_queue(void)::once != -1)
      {
        v11 = v10;
        dispatch_once(&CA::MachPortUtil::reply_queue(void)::once, &__block_literal_global_8138);
        v10 = v11;
      }
      dispatch_async_f((dispatch_queue_t)CA::MachPortUtil::reply_queue(void)::queue, v10, (dispatch_function_t)invoke_presented_callback);
    }
    else
    {
LABEL_6:
      pthread_mutex_unlock(&presented_mutex);
    }
    *(_DWORD *)(a2 + 32) = 0;
  }
}

void _XSetContextDisplayMask(_DWORD *a1, uint64_t a2)
{
  int v3;
  int *v4;
  int *v5;
  pthread_mutex_t *v6;
  CA::Render::Context *v7;

  if ((*a1 & 0x80000000) != 0 || a1[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  }
  else
  {
    v3 = a1[8];
    v4 = CA::Context::retain_context_with_client_port((CA::Context *)a1[3]);
    if (v4)
    {
      v5 = v4;
      v6 = (pthread_mutex_t *)(v4 + 4);
      pthread_mutex_lock((pthread_mutex_t *)(v4 + 4));
      if (v5[36] != v3)
      {
        v5[36] = v3;
        v7 = (CA::Render::Context *)*((_QWORD *)v5 + 13);
        if (v7)
          CA::Render::Context::set_display_mask(v7, v3);
      }
      pthread_mutex_unlock(v6);
      CA::Context::unref((CA::Context *)v5, 0);
    }
    *(_DWORD *)(a2 + 32) = 0;
  }
}

uint64_t getValues(NSValue *a1, double *a2, unint64_t *a3)
{
  uint64_t result;
  const char *v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  result = -[NSValue objCType](a1, "objCType");
  if (!result)
    goto LABEL_7;
  v7 = (const char *)result;
  if (!strcmp((const char *)result, "{CGRect={CGPoint=dd}{CGSize=dd}}"))
  {
    v14 = 0u;
    v15 = 0u;
    result = -[NSValue getValue:size:](a1, "getValue:size:", &v14, 32);
    v11 = v15;
    *(_OWORD *)a2 = v14;
    *((_OWORD *)a2 + 1) = v11;
    *((float64x2_t *)a2 + 1) = vaddq_f64(*(float64x2_t *)(a2 + 2), *(float64x2_t *)a2);
    v8 = *a3;
    v9 = *a3 >= 4;
    v10 = 4;
  }
  else if (!strcmp(v7, "{CGPoint=dd}") || !strcmp(v7, "{CGSize=dd}"))
  {
    v14 = 0uLL;
    result = -[NSValue getValue:size:](a1, "getValue:size:", &v14, 16);
    *(_OWORD *)a2 = v14;
    v8 = *a3;
    v9 = *a3 >= 2;
    v10 = 2;
  }
  else if (!strcmp(v7, "{CAPoint3D=ddd}"))
  {
    v14 = 0uLL;
    *(_QWORD *)&v15 = 0;
    result = -[NSValue getValue:size:](a1, "getValue:size:", &v14, 24);
    *(_OWORD *)a2 = v14;
    *((_QWORD *)a2 + 2) = v15;
    v8 = *a3;
    v9 = *a3 >= 3;
    v10 = 3;
  }
  else
  {
    result = strcmp(v7, "{CACornerRadii={CGSize=dd}{CGSize=dd}{CGSize=dd}{CGSize=dd}}");
    if ((_DWORD)result)
    {
LABEL_7:
      *a3 = 0;
      return result;
    }
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    result = -[NSValue getValue:size:](a1, "getValue:size:", &v14, 64);
    v12 = v15;
    *(_OWORD *)a2 = v14;
    *((_OWORD *)a2 + 1) = v12;
    v13 = v17;
    *((_OWORD *)a2 + 2) = v16;
    *((_OWORD *)a2 + 3) = v13;
    v8 = *a3;
    v9 = *a3 >= 8;
    v10 = 8;
  }
  if (v9)
    v8 = v10;
  *a3 = v8;
  return result;
}

uint64_t makeValue(float64x2_t *a1, unint64_t a2, objc_object *a3)
{
  const char *v5;
  uint64_t result;
  const char *v7;
  size_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = (const char *)-[objc_object objCType](a3, "objCType");
  result = 0;
  switch(a2)
  {
    case 2uLL:
      if (!v5)
        return 0;
      if (!strcmp(v5, "{CGPoint=dd}"))
        goto LABEL_8;
      v7 = "{CGSize=dd}";
      goto LABEL_7;
    case 3uLL:
      if (!v5)
        return 0;
      v7 = "{CAPoint3D=ddd}";
LABEL_7:
      if (strcmp(v5, v7))
        return 0;
LABEL_8:
      if (a2 <= 2)
        v8 = 24 - 8 * a2;
      else
        v8 = 0;
      bzero(&v12.f64[a2], v8);
      memcpy(&v12, a1, 8 * a2);
      return objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v12, v5);
    case 4uLL:
      if (!v5 || strcmp(v5, "{CGRect={CGPoint=dd}{CGSize=dd}}"))
        return 0;
      v9 = a1[1];
      v12 = *a1;
      v13 = vsubq_f64(v9, v12);
      return objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v12, v5);
    case 8uLL:
      if (!v5 || strcmp(v5, "{CACornerRadii={CGSize=dd}{CGSize=dd}{CGSize=dd}{CGSize=dd}}"))
        return 0;
      v10 = a1[1];
      v12 = *a1;
      v13 = v10;
      v11 = a1[3];
      v14 = a1[2];
      v15 = v11;
      return objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v12, v5);
    default:
      return result;
  }
}

double CA::Mat4Impl::mat4_pow(CA::Mat4Impl *this, double *a2, const double *a3, const double *a4)
{
  unsigned int v5;
  double result;
  BOOL v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  float64x2_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2)
  {
    v5 = a2;
    if ((a2 & 0x80000000) != 0)
    {
      CA::Mat4Impl::mat4_invert(this, this, a3);
      v5 = -v5;
    }
    if (v5 != 1)
    {
      v14 = (float64x2_t)xmmword_18474DF40;
      v15 = 0u;
      v16 = xmmword_18474DF50;
      v17 = 0u;
      v18 = 0u;
      v19 = xmmword_18474DF40;
      v20 = 0u;
      v21 = xmmword_18474DF50;
      do
      {
        if ((v5 & 1) != 0)
          CA::Mat4Impl::mat4_concat(&v14, (double *)this, v14.f64, a4);
        CA::Mat4Impl::mat4_concat((float64x2_t *)this, (double *)this, (const double *)this, a4);
        v7 = v5 >= 2;
        v5 >>= 1;
      }
      while (v7);
      v8 = v15;
      v9 = v16;
      v10 = v17;
      *(float64x2_t *)this = v14;
      *((_OWORD *)this + 1) = v8;
      *((_OWORD *)this + 2) = v9;
      *((_OWORD *)this + 3) = v10;
      result = *(double *)&v18;
      v11 = v19;
      v12 = v20;
      v13 = v21;
      *((_OWORD *)this + 4) = v18;
      *((_OWORD *)this + 5) = v11;
      *((_OWORD *)this + 6) = v12;
      *((_OWORD *)this + 7) = v13;
    }
  }
  else
  {
    result = 1.0;
    *(_OWORD *)this = xmmword_18474DF40;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = xmmword_18474DF50;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = xmmword_18474DF40;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = xmmword_18474DF50;
  }
  return result;
}

void CA::Mat4Impl::mat4_mix(CA::Mat4Impl *this, float64x2_t *a2, double *a3, const double *a4, double a5)
{
  const double *v9;
  const double *v10;
  float64x2_t v11;
  float64x2_t v12;
  __int128 v13;
  uint64_t v14;
  const double *v15;
  _OWORD v16[9];
  float64x2_t v17[9];
  float64x2_t v18[9];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (CA::Mat4Impl::mat4_is_affine((CA::Mat4Impl *)a2, a2->f64) && CA::Mat4Impl::mat4_is_affine((CA::Mat4Impl *)a3, v9))
  {
    v11 = a2[2];
    v18[0] = *a2;
    v18[1] = v11;
    v18[2] = a2[6];
    v12 = *(float64x2_t *)(a3 + 4);
    v17[0] = *(float64x2_t *)a3;
    v17[1] = v12;
    v17[2] = *(float64x2_t *)(a3 + 12);
    CA::Mat2Impl::mat2_mix((CA::Mat2Impl *)v16, v18[0].f64, v17[0].f64, v10, a5);
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = xmmword_18474DF40;
    v13 = v16[1];
    *(_OWORD *)this = v16[0];
    *((_OWORD *)this + 2) = v13;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 6) = v16[2];
    *((_OWORD *)this + 7) = xmmword_18474DF50;
  }
  else
  {
    CA::Mat4Impl::mat4_get_unmatrix(a2->f64, (uint64_t)v18, (const double *)1);
    CA::Mat4Impl::mat4_get_unmatrix(a3, (uint64_t)v17, (const double *)1);
    CA::mix((uint64_t)v16, v18, v17, a5);
    CA::Mat4Impl::mat4_set_unmatrix(this, (uint64_t)v16, v14, v15);
  }
}

float64x2_t CA::Mat2Impl::mat2_mix(CA::Mat2Impl *this, double *a2, const double *a3, const double *a4, double a5)
{
  double *v7;
  double v8;
  double v9;
  BOOL v10;
  float64x2_t *v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t result;
  float64x2_t v16;
  float64x2_t v18;
  _BYTE v19[32];
  float64x2_t v20[2];
  float64x2_t v21;
  float64x2_t v22;
  double v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  double v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  CA::Mat2Impl::mat2_get_unmatrix((uint64_t)a2, (uint64_t)&v24);
  CA::Mat2Impl::mat2_get_unmatrix((uint64_t)a3, (uint64_t)v20);
  if ((v24.f64[0] >= 0.0 || v20[0].f64[1] >= 0.0) && (v24.f64[1] >= 0.0 || v20[0].f64[0] >= 0.0))
  {
    v8 = v26.f64[0];
  }
  else
  {
    v24.f64[0] = -v24.f64[0];
    v24.f64[1] = -v24.f64[1];
    v8 = dbl_18474E250[v26.f64[0] < 0.0] + v26.f64[0];
    v26.f64[0] = v8;
  }
  if (v8 == 0.0)
  {
    v26.f64[0] = 6.28318531;
    v8 = 6.28318531;
  }
  v9 = v21.f64[0];
  if (v21.f64[0] == 0.0)
  {
    v21.f64[0] = 6.28318531;
    v9 = 6.28318531;
  }
  if (vabdd_f64(v8, v9) > 3.14159265)
  {
    v10 = v8 <= v9;
    if (v8 <= v9)
      v8 = v9;
    v11 = v20;
    if (!v10)
      v11 = &v24;
    v11[2].f64[0] = v8 + -6.28318531;
  }
  v12 = vmlaq_n_f64(v24, vsubq_f64(v20[0], v24), a5);
  v13 = vmlaq_n_f64(v25, vsubq_f64(v20[1], v25), a5);
  result = vmlaq_n_f64(v26, vsubq_f64(v21, v26), a5);
  *(float64_t *)v19 = result.f64[1];
  *(float64x2_t *)&v19[8] = vmlaq_n_f64(v27, vsubq_f64(v22, v27), a5);
  *(double *)&v19[24] = v28 + (v23 - v28) * a5;
  *(_OWORD *)this = *(_OWORD *)v19;
  *((_OWORD *)this + 1) = *(_OWORD *)&v19[16];
  *((float64x2_t *)this + 2) = v13;
  if (result.f64[0] != 0.0)
  {
    v18 = v12;
    CA::Mat2Impl::mat2_rotate((float64x2_t *)this, v7, result.f64[0]);
    v12 = v18;
  }
  result.f64[0] = v12.f64[1];
  if (v12.f64[0] != 1.0 || v12.f64[1] != 1.0)
  {
    result = vmulq_n_f64(*(float64x2_t *)this, v12.f64[0]);
    v16 = vmulq_laneq_f64(*((float64x2_t *)this + 1), v12, 1);
    *(float64x2_t *)this = result;
    *((float64x2_t *)this + 1) = v16;
  }
  return result;
}

float64x2_t CA::Mat2Impl::mat2_mix_with_deriv(float64x2_t *a1, uint64_t a2, uint64_t a3, float64x2_t *a4, float64x2_t *a5, double a6, double a7)
{
  double *v11;
  double v12;
  double v13;
  BOOL v14;
  float64x2_t *v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t result;
  float64x2_t v22;
  double v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v27;
  float64x2_t v30;
  _BYTE v31[32];
  float64x2_t v32[2];
  float64x2_t v33;
  float64x2_t v34;
  double v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  double v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  CA::Mat2Impl::mat2_get_unmatrix(a2, (uint64_t)&v36);
  CA::Mat2Impl::mat2_get_unmatrix(a3, (uint64_t)v32);
  if ((v36.f64[0] >= 0.0 || v32[0].f64[1] >= 0.0) && (v36.f64[1] >= 0.0 || v32[0].f64[0] >= 0.0))
  {
    v12 = v38.f64[0];
  }
  else
  {
    v36.f64[0] = -v36.f64[0];
    v36.f64[1] = -v36.f64[1];
    v12 = dbl_18474E250[v38.f64[0] < 0.0] + v38.f64[0];
    v38.f64[0] = v12;
  }
  if (v12 == 0.0)
  {
    v38.f64[0] = 6.28318531;
    v12 = 6.28318531;
  }
  v13 = v33.f64[0];
  if (v33.f64[0] == 0.0)
  {
    v33.f64[0] = 6.28318531;
    v13 = 6.28318531;
  }
  if (vabdd_f64(v12, v13) > 3.14159265)
  {
    v14 = v12 <= v13;
    if (v12 <= v13)
      v12 = v13;
    v15 = v32;
    if (!v14)
      v15 = &v36;
    v15[2].f64[0] = v12 + -6.28318531;
  }
  v17 = v36;
  v16 = v37;
  v18 = vsubq_f64(v32[0], v36);
  v19 = vsubq_f64(v32[1], v37);
  v20 = vsubq_f64(v33, v38);
  result = vmlaq_n_f64(v38, v20, a6);
  v22 = vsubq_f64(v34, v39);
  *(float64_t *)v31 = result.f64[1];
  *(float64x2_t *)&v31[8] = vmlaq_n_f64(v39, v22, a6);
  v23 = v35 - v40;
  *(double *)&v31[24] = v40 + (v35 - v40) * a6;
  if (a4)
  {
    *a4 = vmulq_n_f64(v18, a7);
    a4[1] = vmulq_n_f64(v19, a7);
    a4[2] = vmulq_n_f64(v20, a7);
    a4[3] = vmulq_n_f64(v22, a7);
    a4[4].f64[0] = v23 * a7;
  }
  v24 = vmlaq_n_f64(v17, v18, a6);
  v25 = vmlaq_n_f64(v16, v19, a6);
  if (a5)
    *a5 = v24;
  *a1 = *(float64x2_t *)v31;
  a1[1] = *(float64x2_t *)&v31[16];
  a1[2] = v25;
  if (result.f64[0] != 0.0)
  {
    v30 = v24;
    CA::Mat2Impl::mat2_rotate(a1, v11, result.f64[0]);
    v24 = v30;
  }
  result.f64[0] = v24.f64[1];
  if (v24.f64[0] != 1.0 || v24.f64[1] != 1.0)
  {
    result = vmulq_n_f64(*a1, v24.f64[0]);
    v27 = vmulq_laneq_f64(a1[1], v24, 1);
    *a1 = result;
    a1[1] = v27;
  }
  return result;
}

void CA::Mat2Impl::mat2_get_unmatrix(uint64_t a1, uint64_t a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  __double2 v12;
  double v13;
  double v14;

  v4 = *(double *)a1;
  v3 = *(double *)(a1 + 8);
  v5 = *(double *)(a1 + 16);
  v6 = *(double *)(a1 + 24);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 32);
  v7 = sqrt(v4 * v4 + v3 * v3);
  v8 = sqrt(v5 * v5 + v6 * v6);
  *(double *)a2 = v7;
  *(double *)(a2 + 8) = v8;
  if (-(v5 * v3 - v6 * v4) < 0.0)
  {
    if (v4 >= v6)
    {
      v8 = -v8;
      *(double *)(a2 + 8) = v8;
    }
    else
    {
      v7 = -v7;
      *(double *)a2 = v7;
    }
  }
  if (v7 != 0.0)
  {
    v9 = 1.0 / v7;
    v4 = v9 * v4;
    v3 = v9 * v3;
  }
  if (v8 != 0.0)
  {
    v10 = 1.0 / v8;
    v5 = v10 * v5;
    v6 = v10 * v6;
  }
  v11 = atan2(v3, v4);
  *(double *)(a2 + 32) = v11;
  if (v11 != 0.0)
  {
    v12 = __sincos_stret(v11);
    v13 = v12.__sinval * v5;
    v5 = v12.__cosval * v5 + v12.__sinval * v4;
    v4 = -(v13 - v12.__cosval * v4);
    v14 = v12.__sinval * v6;
    v6 = v12.__cosval * v6 + v12.__sinval * v3;
    v3 = -(v14 - v12.__cosval * v3);
  }
  *(double *)(a2 + 40) = v4;
  *(double *)(a2 + 48) = v3;
  *(double *)(a2 + 56) = v5;
  *(double *)(a2 + 64) = v6;
}

CATransform3D *__cdecl CATransform3DTranslate_(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat tx, CGFloat ty, CGFloat tz)
{
  float64x2_t v5;

  v5 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)&t->m43, *(float64x2_t *)&t->m13, tx), *(float64x2_t *)&t->m23, ty), *(float64x2_t *)&t->m33, tz);
  *(float64x2_t *)&t->m41 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)&t->m41, *(float64x2_t *)&t->m11, tx), *(float64x2_t *)&t->m21, ty), *(float64x2_t *)&t->m31, tz);
  *(float64x2_t *)&t->m43 = v5;
  return t;
}

uint64_t CA::Render::TransitionAnimation::validate(CA::Render::TransitionAnimation *this, CA::Render::Layer *a2, const CA::Render::TransitionSubclass *a3)
{
  CA::Render::Layer *v4;
  int v5;
  CA::Render::Layer *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  CA::Render::Transition *v17;
  uint64_t v18;
  _UNKNOWN **v20;
  unsigned int v21;

  if (a2)
  {
    v4 = a2;
    v5 = *((_DWORD *)a2 + 3);
    if ((v5 & 0x100) != 0)
      return 0;
    if (!*((_QWORD *)this + 16))
    {
      *((_DWORD *)a2 + 3) = v5 & 0xFFFFE7FF | 0x1000;
      v6 = (CA::Render::Layer *)*((_QWORD *)this + 16);
      if (v6 != a2)
      {
        if (v6)
        {
          v7 = (unsigned int *)((char *)v6 + 8);
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
            (*(void (**)(CA::Render::Layer *))(*(_QWORD *)v6 + 16))(v6);
        }
        v10 = (unsigned int *)((char *)v4 + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        if (!v11)
        {
          v4 = 0;
          do
            v21 = __ldaxr(v10);
          while (__stlxr(v21 - 1, v10));
        }
        *((_QWORD *)this + 16) = v4;
      }
    }
  }
  v12 = *((_DWORD *)this + 3);
  if ((v12 & 0x1000000) != 0)
  {
    do
    {
      v13 = __ldaxr(CA::Render::next_cache_id(void)::cache_id);
      v14 = v13 + 1;
    }
    while (__stlxr(v14, CA::Render::next_cache_id(void)::cache_id));
    *((_DWORD *)this + 34) = v14;
    v12 = *((_DWORD *)this + 3);
  }
  if ((v12 & 0x2000000) != 0)
  {
    do
    {
      v15 = __ldaxr(CA::Render::next_cache_id(void)::cache_id);
      v16 = v15 + 1;
    }
    while (__stlxr(v16, CA::Render::next_cache_id(void)::cache_id));
    *((_DWORD *)this + 35) = v16;
  }
  v17 = (CA::Render::Transition *)*((unsigned int *)this + 23);
  if ((_DWORD)v17 == 221)
  {
    v18 = *((_QWORD *)this + 14);
    if (v18)
      v17 = (CA::Render::Transition *)*(unsigned int *)(v18 + 24);
    else
      v17 = 0;
  }
  v20 = CA::Render::Transition::lookup_transition(v17, a2, a3);
  if (v20)
  {
    if ((*((unsigned int (**)(_UNKNOWN **))*v20 + 1))(v20))
      *((_DWORD *)this + 3) |= 0x1000u;
  }
  return 1;
}

_UNKNOWN **CA::Render::Transition::subclass(CA::Render::Transition *this, unsigned int a2, const CA::Render::TransitionSubclass *a3)
{
  _UNKNOWN **result;
  CA::Render::Transition *v5;
  uint64_t v6;

  result = (_UNKNOWN **)*((_QWORD *)this + 7);
  if (!result)
  {
    v5 = (CA::Render::Transition *)*((unsigned int *)this + 4);
    if ((_DWORD)v5 == 221)
    {
      v6 = *((_QWORD *)this + 4);
      if (v6)
        v5 = (CA::Render::Transition *)*(unsigned int *)(v6 + 24);
      else
        v5 = 0;
    }
    result = CA::Render::Transition::lookup_transition(v5, a2, a3);
    *((_QWORD *)this + 7) = result;
  }
  return result;
}

_UNKNOWN **CA::Render::Transition::lookup_transition(CA::Render::Transition *this, unsigned int a2, const CA::Render::TransitionSubclass *a3)
{
  unsigned int v3;
  _UNKNOWN **result;
  unsigned __int8 v5;
  unsigned __int8 v6;
  const CA::Render::TransitionSubclass *v7;
  const CA::Render::TransitionSubclass *v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  const CA::Render::TransitionSubclass *v11;
  CA::Render *v12;
  const CA::Render::TransitionSubclass *v13;
  uint64_t v14;
  const CA::Render::TransitionSubclass *v15;
  CA::Render *v16;
  uint64_t v17;
  const CA::Render::TransitionSubclass *v18;
  unsigned __int8 v19;
  CA::Render *v20;
  const CA::Render::TransitionSubclass *v21;
  uint64_t v22;

  v3 = this;
  result = &CA::Render::Transition::lookup_transition::builtin_transition;
  if (v3 != 384 && v3 != 441 && v3 != 464)
  {
    if (CA::Render::transition_table)
      goto LABEL_11;
    {
      CA::OGL::cube_transition_init(void)::aligned_cube = (uint64_t)&off_1E1594DD0;
      byte_1EDD125D8 = 1;
    }
    {
      CA::OGL::cube_transition_init(void)::unaligned_cube = (uint64_t)&off_1E1594DD0;
      byte_1EDD125F0 = 0;
    }
    CA::Render::add_transition((CA::Render *)0x96, (uint64_t)&CA::OGL::cube_transition_init(void)::unaligned_cube, a3);
    CA::Render::add_transition((CA::Render *)5, (uint64_t)&CA::OGL::cube_transition_init(void)::aligned_cube, v7);
    {
      CA::OGL::flip_transition_init(void)::aligned_flip = (uint64_t)&off_1E1594E18;
      byte_1EDD12600 = 1;
    }
    {
      CA::OGL::flip_transition_init(void)::unaligned_flip = (uint64_t)&off_1E1594E18;
      byte_1EDD12618 = 0;
    }
    CA::Render::add_transition((CA::Render *)0xDF, (uint64_t)&CA::OGL::flip_transition_init(void)::unaligned_flip, v8);
    CA::Render::add_transition((CA::Render *)6, (uint64_t)&CA::OGL::flip_transition_init(void)::aligned_flip, v11);
    v12 = (CA::Render *)CAInternAtomWithCString("oglFlip");
    CA::Render::add_transition(v12, (uint64_t)&CA::OGL::flip_transition_init(void)::aligned_flip, v13);
    v14 = operator new();
    *(_QWORD *)v14 = &off_1E1594F58;
    *(_BYTE *)(v14 + 8) = 0;
    CA::Render::add_transition((CA::Render *)0x19C, v14, v15);
    v16 = (CA::Render *)CAInternAtomWithCString("pageUnCurl");
    v17 = operator new();
    *(_QWORD *)v17 = &off_1E1594F58;
    *(_BYTE *)(v17 + 8) = 1;
    CA::Render::add_transition(v16, v17, v18);
    {
      CA::OGL::rotate_transition_init(void)::rotate = (uint64_t)&off_1E1594F08;
      {
        CAInternAtomWithCString("90ccw");
      }
    }
    v20 = (CA::Render *)CAInternAtomWithCString("rotate");
    CA::Render::add_transition(v20, (uint64_t)&CA::OGL::rotate_transition_init(void)::rotate, v21);
    if (CA::Render::transition_table)
    {
LABEL_11:
      os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::transition_lock);
      v22 = x_hash_table_lookup(CA::Render::transition_table, v3, 0);
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::transition_lock);
      return (_UNKNOWN **)v22;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void CA::Render::add_transition(CA::Render *this, uint64_t a2, const CA::Render::TransitionSubclass *a3)
{
  unsigned int v4;
  int *v5;

  v4 = this;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::transition_lock);
  v5 = (int *)CA::Render::transition_table;
  if (!CA::Render::transition_table)
  {
    v5 = (int *)x_hash_table_new_(0, 0, 0, 0, 0, 0);
    CA::Render::transition_table = (uint64_t)v5;
  }
  hash_table_modify(v5, v4, a2, 0);
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::transition_lock);
}

void ___ZN2CA3OGL22AsynchronousDispatcher15unschedule_itemEPNS0_16AsynchronousItemE_block_invoke(uint64_t a1)
{
  CA::OGL::AsynchronousDispatcher::stop_timer(*(CFTypeRef **)(a1 + 32));
}

void ___ZN2CA6Render16AsynchronousItemD2Ev_block_invoke_2(uint64_t a1)
{
  CA::Render::HitTestTree::unref(*(CA::Render::HitTestTree **)(a1 + 32));
}

void ___ZN2CA6Render7Encoder26initialize_render_id_slideEv_block_invoke()
{
  arc4random_buf(&CA::Render::_render_id_slide, 8uLL);
}

uint64_t CA::Transaction::set_frame_input_time(uint64_t this, double a2)
{
  double v2;

  v2 = *(double *)(this + 192);
  if (v2 == 0.0 || v2 > a2)
  {
    *(double *)(this + 192) = a2;
    if ((*(_BYTE *)(this + 204) & 0x20) == 0)
    {
      CAHostTimeWithTime(a2);
      return kdebug_trace();
    }
  }
  return this;
}

void CA::Render::Subtexture::~Subtexture(CA::Render::Subtexture *this, const CA::Render::Object *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1596360;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  --dword_1ECDC7CF0;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = off_1E1596360;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  --dword_1ECDC7CF0;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

unsigned int *CA::Render::Layer::set_shadow_path(unsigned int *this, CA::Render::Path *a2)
{
  CA::Render::Path *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a2;
  if (a2 || *((_QWORD *)this + 16))
  {
    v3 = CA::Render::Layer::ensure_ext((CA::Render::Layer *)this);
    this = (unsigned int *)v3[15];
    if (this != (unsigned int *)v2)
    {
      if (this)
      {
        v4 = this + 2;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 16))(this);
      }
      if (v2)
      {
        v7 = (unsigned int *)((char *)v2 + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        if (!v8)
        {
          v2 = 0;
          do
            v9 = __ldaxr(v7);
          while (__stlxr(v9 - 1, v7));
        }
      }
      v3[15] = v2;
    }
  }
  return this;
}

char *CA::Render::BackdropState::copy_isolated(CA::Render::BackdropState *this, CA::Render::Update *a2, int a3)
{
  malloc_zone_t *malloc_zone;
  char *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unsigned int *v20;
  int v21;
  float v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD v42[2];

  v42[1] = *MEMORY[0x1E0C80C00];
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v7 = (char *)malloc_type_zone_malloc(malloc_zone, 0x68uLL, 0x8BB15036uLL);
  v8 = v7;
  if (v7)
  {
    *((_DWORD *)v7 + 2) = 1;
    *((_DWORD *)v7 + 3) = 4;
    ++dword_1ECDC7C38;
    *(_QWORD *)v7 = off_1E1596EC0;
    *((_QWORD *)v7 + 11) = 0;
    *((_WORD *)v7 + 48) = 0;
    *((_OWORD *)v7 + 1) = 0u;
    *((_OWORD *)v7 + 2) = 0u;
    *((_OWORD *)v7 + 3) = 0u;
    *((_OWORD *)v7 + 4) = 0u;
    *(_QWORD *)(v7 + 77) = 0;
  }
  *((_QWORD *)v7 + 2) = *((_QWORD *)this + 2);
  *((_QWORD *)v7 + 3) = *((_QWORD *)this + 3);
  *((_DWORD *)v7 + 8) = *((_DWORD *)this + 8);
  v9 = (_QWORD *)*((_QWORD *)a2 + 63);
  if (v9)
  {
    while (1)
    {
      v10 = v9[1];
      v11 = *(uint64_t **)(*(_QWORD *)(v10 + 32) + 128);
      if (v11)
      {
        v12 = *v11;
        if (v12)
        {
          if (*(_BYTE *)(v12 + 12) == 3)
          {
            v13 = *(_QWORD *)(v12 + 88);
            if (v13)
            {
              if (*(_QWORD *)(v13 + 40) == *((_QWORD *)this + 5)
                && (*(_BYTE *)(v10 + 27) & 8) == 0
                && (*((_DWORD *)a2 + 266) & 0x8000000) == 0)
              {
                break;
              }
            }
          }
        }
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_12;
    }
    v33 = *(unsigned int **)(*(_QWORD *)(v10 + 256) + 40);
    v34 = (unsigned int *)*((_QWORD *)v7 + 5);
    if (v34 != v33)
    {
      if (v34)
      {
        v35 = v34 + 2;
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
          (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 16))(v34);
      }
      if (v33)
      {
        v38 = v33 + 2;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 + 1, v38));
        if (!v39)
        {
          v33 = 0;
          do
            v40 = __ldaxr(v38);
          while (__stlxr(v40 - 1, v38));
        }
      }
      *((_QWORD *)v8 + 5) = v33;
    }
  }
LABEL_12:
  if (!*((_QWORD *)v8 + 5))
  {
    if (a3)
    {
      CA::Render::BackdropGroup::retain_group(v42, *((_QWORD *)this + 2), *(unsigned int **)(*((_QWORD *)this + 5) + 32), *((unsigned __int8 *)this + 84), *((float *)this + 8));
      v15 = (unsigned int *)*((_QWORD *)v8 + 5);
      *((_QWORD *)v8 + 5) = v42[0];
      if (!v15)
        return v8;
      v16 = v15 + 2;
      do
      {
        v17 = __ldaxr(v16);
        v18 = --v17 == 0;
      }
      while (__stlxr(v17, v16));
    }
    else
    {
      v19 = *((_QWORD *)this + 2);
      v20 = *(unsigned int **)(*((_QWORD *)this + 5) + 32);
      v21 = *((unsigned __int8 *)this + 84);
      v22 = *((float *)this + 8);
      v41 = 0;
      CA::Render::BackdropGroup::retain_group_common(&v41, v19, v20, v21, (uint64_t)a2 + 552, 2, 1, v22);
      if ((*((_DWORD *)a2 + 266) & 0x2000) != 0)
      {
        v42[0] = 0;
        CA::Render::BackdropGroup::retain_group(v42, v19, v20, v21, v22);
        v23 = (unsigned int *)v42[0];
        if (v42[0])
        {
          v24 = *(_QWORD *)(v42[0] + 48);
          if (v24)
          {
            v25 = v41;
            v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
            v27 = *(_QWORD *)(v25 + 48);
            if (v27 != v26)
            {
              if (v27)
                (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
              *(_QWORD *)(v25 + 48) = v26;
            }
          }
          v28 = v23 + 2;
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
            (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 16))(v23);
        }
      }
      v15 = (unsigned int *)*((_QWORD *)v8 + 5);
      *((_QWORD *)v8 + 5) = v41;
      if (!v15)
        return v8;
      v31 = v15 + 2;
      do
      {
        v32 = __ldaxr(v31);
        v18 = --v32 == 0;
      }
      while (__stlxr(v32, v31));
    }
    if (v18)
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
  }
  return v8;
}

void CA::Render::BackdropGroup::retain_group(_QWORD *a1, uint64_t a2, unsigned int *a3, int a4, float a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::BackdropGroup::_list_lock);
  CA::Render::BackdropGroup::retain_group_common(a1, a2, a3, a4, (uint64_t)&CA::Render::BackdropGroup::_list, 1, 0, a5);
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::BackdropGroup::_list_lock);
}

void CA::Render::BackdropGroup::retain_group_common(_QWORD *a1, uint64_t a2, unsigned int *a3, int a4, uint64_t a5, int a6, int a7, float a8)
{
  unsigned int *v13;
  uint64_t *v15;
  uint64_t *v16;
  _DWORD *v17;
  uint64_t v18;
  size_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  malloc_zone_t *malloc_zone;
  _DWORD *v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;

  v13 = a3;
  if (a3)
  {
    v16 = *(uint64_t **)a5;
    v15 = *(uint64_t **)(a5 + 8);
    if (*(uint64_t **)a5 != v15)
    {
      do
      {
        v17 = (_DWORD *)*v16;
        if (*(unsigned __int8 *)(*v16 + 568) == a4)
        {
          if (a4)
          {
            if (a4 != 2)
            {
              if (a4 != 1)
                goto LABEL_6;
              v23 = *(_QWORD *)(a2 + 544);
              if (!v23)
                v23 = a2;
              if (*((_QWORD *)v17 + 3) != v23)
                goto LABEL_6;
            }
          }
          else if (*((_QWORD *)v17 + 2) != a2)
          {
            goto LABEL_6;
          }
          v18 = *((_QWORD *)v17 + 4);
          if (v18)
          {
            v19 = v13[6];
            if ((_DWORD)v19 == *(_DWORD *)(v18 + 24)
              && !memcmp(v13 + 7, (const void *)(v18 + 28), v19)
              && *((float *)v17 + 15) == a8)
            {
              v20 = v17 + 2;
              do
                v21 = __ldaxr(v20);
              while (__stlxr(v21 + 1, v20));
              if (v21)
                goto LABEL_53;
              do
                v22 = __ldaxr(v20);
              while (__stlxr(v22 - 1, v20));
            }
          }
        }
LABEL_6:
        ++v16;
      }
      while (v16 != v15);
    }
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v25 = malloc_type_zone_malloc(malloc_zone, 0x240uLL, 0x8BB15036uLL);
  v17 = v25;
  if (v25)
  {
    v25[2] = 1;
    v25[3] = 2;
    ++dword_1ECDC7C30;
    *(_QWORD *)v25 = off_1E1596D40;
    if (a2)
    {
      v26 = (unsigned int *)(a2 + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 + 1, v26));
      v28 = a2;
      if (!v27)
      {
        v28 = 0;
        do
          v29 = __ldaxr(v26);
        while (__stlxr(v29 - 1, v26));
      }
    }
    else
    {
      v28 = 0;
    }
    v30 = *(_QWORD *)(a2 + 544);
    if (!v30)
      v30 = a2;
    *((_QWORD *)v25 + 2) = v28;
    *((_QWORD *)v25 + 3) = v30;
    if (v13)
    {
      v31 = v13 + 2;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 + 1, v31));
      if (!v32)
      {
        v13 = 0;
        do
          v51 = __ldaxr(v31);
        while (__stlxr(v51 - 1, v31));
      }
    }
    *((_QWORD *)v25 + 4) = v13;
    v25[10] = 0;
    *((_QWORD *)v25 + 6) = 0;
    v25[14] = 0;
    *((float *)v25 + 15) = a8;
    *((_QWORD *)v25 + 8) = v25 + 24;
    *((_QWORD *)v25 + 9) = v25 + 24;
    *((_QWORD *)v25 + 10) = v25 + 24;
    *((_QWORD *)v25 + 11) = 2;
    *((_QWORD *)v25 + 54) = 0;
    v25[110] = 0;
    v25[139] = 0;
    *((_QWORD *)v25 + 70) = 0;
    *((_OWORD *)v25 + 28) = 0u;
    *((_OWORD *)v25 + 29) = 0u;
    *((_OWORD *)v25 + 30) = 0u;
    *((_OWORD *)v25 + 31) = 0u;
    *((_OWORD *)v25 + 32) = 0u;
    *((_OWORD *)v25 + 33) = 0u;
    *((_QWORD *)v25 + 68) = 0;
    *((_BYTE *)v25 + 568) = a4;
    *((_BYTE *)v25 + 569) = 0;
  }
  v25[3] |= a6 << 8;
  v34 = *(uint64_t **)a5;
  v33 = *(_QWORD **)(a5 + 8);
  v35 = ((uint64_t)v33 - *(_QWORD *)a5) >> 3;
  v36 = *(_QWORD *)(a5 + 24);
  if (v36 < v35 + 1)
  {
    v37 = *(uint64_t **)(a5 + 16);
    v38 = (v36 + 1) | ((v36 + 1) >> 1) | (((v36 + 1) | ((v36 + 1) >> 1)) >> 2);
    v39 = v38 | (v38 >> 4) | ((v38 | (v38 >> 4)) >> 8);
    v40 = v39 | (v39 >> 16) | ((v39 | (v39 >> 16)) >> 32);
    if (v40 + 1 > v35 + 1)
      v41 = v40 + 1;
    else
      v41 = v35 + 1;
    v42 = malloc_type_malloc(8 * v41, 0x2004093837F09uLL);
    v43 = v42;
    v44 = *(uint64_t **)a5;
    v45 = *(uint64_t **)(a5 + 8);
    if (*(uint64_t **)a5 != v45)
    {
      v46 = v42;
      do
      {
        v47 = *v44++;
        *v46++ = v47;
      }
      while (v44 != v45);
    }
    if (v34 != v37)
      free(*(void **)a5);
    v33 = &v43[v35];
    *(_QWORD *)a5 = v43;
    *(_QWORD *)(a5 + 8) = v33;
    *(_QWORD *)(a5 + 24) = v41;
  }
  *v33 = v17;
  *(_QWORD *)(a5 + 8) += 8;
  if (a7)
  {
    v48 = v17 + 2;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 + 1, v48));
    if (!v49)
    {
      do
        v50 = __ldaxr(v48);
      while (__stlxr(v50 - 1, v48));
    }
  }
LABEL_53:
  *a1 = v17;
}

void sub_184579368(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::Render::get_transform_property(CA::Render *this, CA::Render::Vector *a2, int *a3, unsigned int *a4, double *a5)
{
  int v7;
  double *v9;
  unsigned int v10;
  double *v11;
  int v12;
  double v13;
  int v14;
  uint64_t result;
  double v16;
  double v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v7 = (int)a2;
  v29 = *MEMORY[0x1E0C80C00];
  v9 = (double *)&CA::Mat4Impl::mat4_identity_double;
  if (this)
  {
    v10 = *((_DWORD *)this + 4);
    v11 = (double *)((char *)this + 24);
    if (v10 > 0xF)
      v9 = v11;
  }
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v20 = 0u;
  CA::Mat4Impl::mat4_get_unmatrix(v9, (uint64_t)&v20, 0);
  if (v7 != 2)
  {
    if (v7 == 1)
    {
      v12 = *a3;
      if (*a3 == 561)
      {
        *(_OWORD *)a4 = v23;
        *((_QWORD *)a4 + 2) = v24;
        return 3;
      }
      if (v12 == 475)
      {
        v16 = *((double *)&v20 + 1) + *(double *)&v20 + *(double *)&v21;
        v17 = 0.333333333;
LABEL_17:
        v13 = v16 * v17;
        goto LABEL_18;
      }
      if (v12 == 470)
        goto LABEL_9;
    }
    return 0;
  }
  v14 = *a3;
  if (*a3 == 470)
  {
    v18 = a3[1];
    switch(v18)
    {
      case 602:
LABEL_9:
        v13 = *((double *)&v27 + 1);
LABEL_18:
        *(double *)a4 = v13;
        return 1;
      case 600:
        v13 = *(double *)&v27;
        goto LABEL_18;
      case 596:
        v13 = *((double *)&v26 + 1);
        goto LABEL_18;
    }
    return 0;
  }
  if (v14 == 561)
  {
    v19 = a3[1];
    switch(v19)
    {
      case 602:
        v13 = *(double *)&v24;
        goto LABEL_18;
      case 600:
        v13 = *((double *)&v23 + 1);
        goto LABEL_18;
      case 596:
        v13 = *(double *)&v23;
        goto LABEL_18;
    }
    return 0;
  }
  if (v14 != 475)
    return 0;
  result = 0;
  switch(a3[1])
  {
    case 596:
      v13 = *(double *)&v20;
      goto LABEL_18;
    case 599:
      v16 = *((double *)&v20 + 1) + *(double *)&v20;
      v17 = 0.5;
      goto LABEL_17;
    case 600:
      v13 = *((double *)&v20 + 1);
      goto LABEL_18;
    case 602:
      v13 = *(double *)&v21;
      goto LABEL_18;
    default:
      return result;
  }
  return result;
}

_DWORD *CA::Render::set_transform_property(CA::Render *this, CA::Render::Vector *a2, int *a3, const unsigned int *a4, unint64_t a5, uint64_t a6, const double *a7)
{
  int v9;
  int v11;
  double *v13;
  unsigned int v14;
  double *v15;
  uint64_t v16;
  const double *v17;
  int v18;
  double v19;
  int v20;
  double v21;
  double v22;
  float64x2_t v23;
  int v24;
  double v25;
  double v26;
  double v27;
  int v28;
  double v29;
  float64x2_t v30;
  int8x16_t v31;
  unint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  const double *v38;
  _OWORD v40[8];
  float64x2_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v9 = (int)a4;
  v11 = (int)a2;
  v50 = *MEMORY[0x1E0C80C00];
  v13 = (double *)&CA::Mat4Impl::mat4_identity_double;
  if (this)
  {
    v14 = *((_DWORD *)this + 4);
    v15 = (double *)((char *)this + 24);
    if (v14 > 0xF)
      v13 = v15;
  }
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v41 = 0u;
  CA::Mat4Impl::mat4_get_unmatrix(v13, (uint64_t)&v41, 0);
  if (v11 != 2)
  {
    if (v11 != 1)
      goto LABEL_77;
    v18 = *a3;
    if (a5 && v18 == 470)
      goto LABEL_8;
    if (a5 && v18 == 475)
    {
      v22 = *(double *)a6;
      if ((v9 & 1) != 0)
      {
        v23 = vaddq_f64(v41, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v22, 0));
        v22 = v22 + *(double *)&v42;
      }
      else
      {
        v23 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v22, 0);
      }
      v41 = v23;
      *(double *)&v42 = v22;
      goto LABEL_77;
    }
    if (!a5 || v18 != 561)
      goto LABEL_77;
    if (!v9)
    {
      *(_QWORD *)&v44 = *(_QWORD *)a6;
      if (a5 <= 1)
        goto LABEL_77;
      *((_QWORD *)&v44 + 1) = *(_QWORD *)(a6 + 8);
      if (a5 == 2)
        goto LABEL_77;
      v36 = *(double *)(a6 + 16);
LABEL_74:
      *(double *)&v45 = v36;
      goto LABEL_77;
    }
    *(double *)&v44 = *(double *)a6 + *(double *)&v44;
    if (a5 <= 1)
      goto LABEL_77;
    *((double *)&v44 + 1) = *(double *)(a6 + 8) + *((double *)&v44 + 1);
    if (a5 == 2)
      goto LABEL_77;
    v26 = *(double *)&v45;
    v27 = *(double *)(a6 + 16);
LABEL_66:
    v36 = v27 + v26;
    goto LABEL_74;
  }
  v20 = *a3;
  if (a5 && v20 == 475)
  {
    switch(a3[1])
    {
      case 596:
        if ((v9 & 1) != 0)
          v21 = *(double *)a6 + v41.f64[0];
        else
          v21 = *(double *)a6;
        v41.f64[0] = v21;
        break;
      case 599:
        v30 = vld1q_dup_f64((const double *)a6);
        v31 = (int8x16_t)vdupq_n_s64(0x8000000000000000);
        if (v9)
          v32 = -1;
        else
          v32 = 0;
        v41 = vaddq_f64(v30, (float64x2_t)vbslq_s8((int8x16_t)vdupq_n_s64(v32), (int8x16_t)v41, v31));
        break;
      case 600:
        if ((v9 & 1) != 0)
          v33 = *(double *)a6 + v41.f64[1];
        else
          v33 = *(double *)a6;
        v41.f64[1] = v33;
        break;
      case 602:
        if ((v9 & 1) != 0)
          v34 = *(double *)a6 + *(double *)&v42;
        else
          v34 = *(double *)a6;
        *(double *)&v42 = v34;
        break;
      default:
        break;
    }
  }
  else if (a5 && v20 == 470)
  {
    v24 = a3[1];
    switch(v24)
    {
      case 602:
LABEL_8:
        if ((v9 & 1) != 0)
          v19 = *(double *)a6 + *((double *)&v48 + 1);
        else
          v19 = *(double *)a6;
        *((double *)&v48 + 1) = v19;
        break;
      case 600:
        if ((v9 & 1) != 0)
          v35 = *(double *)a6 + *(double *)&v48;
        else
          v35 = *(double *)a6;
        *(double *)&v48 = v35;
        break;
      case 596:
        if ((v9 & 1) != 0)
          v25 = *(double *)a6 + *((double *)&v47 + 1);
        else
          v25 = *(double *)a6;
        *((double *)&v47 + 1) = v25;
        break;
    }
  }
  else
  {
    if (!a5 || v20 != 561)
      goto LABEL_77;
    v28 = a3[1];
    switch(v28)
    {
      case 602:
        if ((v9 & 1) == 0)
        {
          v36 = *(double *)a6;
          goto LABEL_74;
        }
        v26 = *(double *)&v45;
        v27 = *(double *)a6;
        goto LABEL_66;
      case 600:
        if ((v9 & 1) != 0)
          v37 = *(double *)a6 + *((double *)&v44 + 1);
        else
          v37 = *(double *)a6;
        *((double *)&v44 + 1) = v37;
        break;
      case 596:
        if ((v9 & 1) != 0)
          v29 = *(double *)a6 + *(double *)&v44;
        else
          v29 = *(double *)a6;
        *(double *)&v44 = v29;
        break;
    }
  }
LABEL_77:
  memset(v40, 0, sizeof(v40));
  CA::Mat4Impl::mat4_set_unmatrix((CA::Mat4Impl *)v40, (uint64_t)&v41, v16, v17);
  return CA::Render::Vector::new_vector((CA::Render::Vector *)0x10, v40, v38);
}

double CATransform3DGetDecomposition_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, double *a6)
{
  double result;
  __int128 v12;
  _OWORD v13[3];
  __int128 v14;
  _OWORD v15[5];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v14 = 0u;
  memset(v15, 0, sizeof(v15));
  memset(v13, 0, sizeof(v13));
  CA::Mat4Impl::mat4_get_unmatrix(a6, (uint64_t)v13, 0);
  if (a1)
  {
    *(_OWORD *)a1 = v13[0];
    result = *(double *)&v13[1];
    *(_QWORD *)(a1 + 16) = *(_QWORD *)&v13[1];
  }
  if (a2)
  {
    *(_OWORD *)a2 = *(_OWORD *)((char *)&v15[2] + 8);
    result = *((double *)&v15[3] + 1);
    *(_QWORD *)(a2 + 16) = *((_QWORD *)&v15[3] + 1);
  }
  if (a3)
  {
    *(_OWORD *)a3 = v14;
    result = *(double *)v15;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&v15[0];
  }
  if (a4)
  {
    *(_OWORD *)a4 = *(_OWORD *)((char *)&v13[1] + 8);
    result = *((double *)&v13[2] + 1);
    *(_QWORD *)(a4 + 16) = *((_QWORD *)&v13[2] + 1);
  }
  if (a5)
  {
    result = *((double *)v15 + 1);
    v12 = *(_OWORD *)((char *)&v15[1] + 8);
    *a5 = *(_OWORD *)((char *)v15 + 8);
    a5[1] = v12;
  }
  return result;
}

void CA::Mat4Impl::mat4_get_unmatrix(double *a1, uint64_t a2, const double *a3)
{
  char v3;
  float64x2_t v6;
  __int128 v7;
  int64x2_t v8;
  int64x2_t v9;
  __int128 v10;
  __int128 v11;
  float64x2_t v12;
  int32x2_t v13;
  const double *v14;
  float64x2_t v15;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  __int128 v62;
  float64x2_t v63;
  __int128 v64;
  float64x2_t v65;
  __int128 v66;
  float64x2_t v67;
  __int128 __x;
  long double __xa;
  float64x2_t v70;
  double v71;
  float64x2_t v72[8];
  double v73[16];
  _OWORD v74[7];
  float64_t v75;
  uint64_t v76;
  uint64_t v77;

  v3 = (char)a3;
  v77 = *MEMORY[0x1E0C80C00];
  if (a1[15] == 0.0)
  {
    *(_QWORD *)(a2 + 128) = 0;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    _Q18 = *(_OWORD *)a1;
    v6 = *(float64x2_t *)(a1 + 2);
    v7 = *((_OWORD *)a1 + 2);
    v8 = *(int64x2_t *)(a1 + 6);
    v10 = *((_OWORD *)a1 + 4);
    v9 = *(int64x2_t *)(a1 + 10);
    v11 = *((_OWORD *)a1 + 6);
    v12 = *(float64x2_t *)(a1 + 14);
    v74[0] = *(_OWORD *)a1;
    v74[1] = *(unint64_t *)&v6.f64[0];
    v74[2] = v7;
    v74[3] = v8.u64[0];
    v74[4] = v10;
    v74[5] = v9.u64[0];
    v74[6] = v11;
    v75 = v12.f64[0];
    v76 = 0x3FF0000000000000;
    if (v6.f64[1] != 0.0
      || (v13 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vceqzq_f64((float64x2_t)vzip2q_s64(v9, v8)))),
          (v13.i8[4] & 1) != 0)
      || (v13.i8[0] & 1) != 0)
    {
      v62 = v11;
      v63 = v12;
      v64 = v7;
      v65 = (float64x2_t)v8;
      v66 = v10;
      v67 = (float64x2_t)v9;
      __x = _Q18;
      v70 = v6;
      if (CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)v73, (CA::Mat4Impl *)v74, a3))
      {
        CA::Mat4Impl::mat4_transpose((CA::Mat4Impl *)v72, v73, v14);
        v6.f64[0] = v70.f64[0];
        v8.i64[0] = *(_QWORD *)&v65.f64[0];
        v9.i64[0] = *(_QWORD *)&v67.f64[0];
        v12.f64[0] = v63.f64[0];
        v15 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v72[1], v70, 1), v72[3], v65, 1), v72[5], v67, 1), v72[7], v63, 1);
        *(float64x2_t *)(a2 + 72) = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v72[0], v70, 1), v72[2], v65, 1), v72[4], v67, 1), v72[6], v63, 1);
        *(float64x2_t *)(a2 + 88) = v15;
      }
      else
      {
        *(_QWORD *)(a2 + 72) = 0;
        *(_QWORD *)(a2 + 80) = 0;
        *(_QWORD *)(a2 + 88) = 0;
        *(_QWORD *)(a2 + 96) = 0x3FF0000000000000;
        v6.f64[0] = v70.f64[0];
        v9.i64[0] = *(_QWORD *)&v67.f64[0];
        v8.i64[0] = *(_QWORD *)&v65.f64[0];
        v12.f64[0] = v63.f64[0];
      }
      v6.f64[1] = 0.0;
      _Q18 = __x;
      v10 = v66;
      v7 = v64;
      v11 = v62;
    }
    else
    {
      *(_QWORD *)(a2 + 72) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0x3FF0000000000000;
    }
    *(_OWORD *)(a2 + 48) = v11;
    *(float64_t *)(a2 + 64) = v12.f64[0];
    _D8 = *((double *)&_Q18 + 1);
    __asm { FMLA            D0, D8, V18.D[1] }
    v22 = sqrt(_D0 + vmulq_f64(v6, v6).f64[0]);
    *(double *)a2 = v22;
    if (v22 != 0.0)
    {
      *(double *)&_Q18 = 1.0 / v22 * *(double *)&_Q18;
      _D8 = 1.0 / v22 * *((double *)&_Q18 + 1);
      v6.f64[0] = 1.0 / v22 * v6.f64[0];
    }
    v23 = v6.f64[0] * *(double *)v8.i64 + _D8 * *((double *)&v7 + 1) + *(double *)&_Q18 * *(double *)&v7;
    v24 = *(double *)&v7 - v23 * *(double *)&_Q18;
    v25 = *((double *)&v7 + 1) - v23 * _D8;
    v26 = *(double *)v8.i64 - v23 * v6.f64[0];
    v27 = sqrt(v24 * v24 + v25 * v25 + v26 * v26);
    *(double *)(a2 + 8) = v27;
    v28 = 0.0;
    if (v27 == 0.0)
    {
      v29 = 0.0;
    }
    else
    {
      v24 = 1.0 / v27 * v24;
      v25 = 1.0 / v27 * v25;
      v26 = 1.0 / v27 * v26;
      v29 = 1.0 / v27 * v23;
    }
    v30 = v6.f64[0] * *(double *)v9.i64 + _D8 * *((double *)&v10 + 1) + *(double *)&_Q18 * *(double *)&v10;
    v31 = *(double *)&v10 - v30 * *(double *)&_Q18;
    v32 = *((double *)&v10 + 1) - v30 * _D8;
    v33 = *(double *)v9.i64 - v30 * v6.f64[0];
    v34 = v26 * v33 + v25 * v32 + v24 * v31;
    v35 = v31 - v34 * v24;
    v36 = v32 - v34 * v25;
    v37 = v33 - v34 * v26;
    v38 = sqrt(v35 * v35 + v36 * v36 + v37 * v37);
    *(double *)(a2 + 16) = v38;
    *(double *)(a2 + 24) = v29;
    if (v38 == 0.0)
    {
      v39 = 0.0;
    }
    else
    {
      v35 = 1.0 / v38 * v35;
      v36 = 1.0 / v38 * v36;
      v37 = 1.0 / v38 * v37;
      v28 = 1.0 / v38 * v30;
      v39 = 1.0 / v38 * v34;
    }
    *(double *)(a2 + 32) = v28;
    *(double *)(a2 + 40) = v39;
    if (-(v36 * v26 - v37 * v25) * *(double *)&_Q18
       + -(v37 * v24 - v35 * v26) * _D8
       + -(v35 * v25 - v36 * v24) * v6.f64[0] < 0.0)
    {
      *(double *)a2 = -v22;
      *(double *)(a2 + 8) = -v27;
      *(double *)&_Q18 = -*(double *)&_Q18;
      *(double *)(a2 + 16) = -v38;
      _D8 = -_D8;
      v6.f64[0] = -v6.f64[0];
      v24 = -v24;
      v25 = -v25;
      v26 = -v26;
      v35 = -v35;
      v36 = -v36;
      v37 = -v37;
    }
    if ((v3 & 1) != 0)
    {
      v40 = v37 + 1.0 + *(double *)&_Q18 + v25;
      if (v40 <= 0.0001)
      {
        if (*(double *)&_Q18 <= v25 || *(double *)&_Q18 <= v37)
        {
          v50 = sqrt(v37 + 1.0 - (*(double *)&_Q18 + v25));
          v51 = 1.0 / (v50 + v50);
          v52 = (v6.f64[0] + v35) * v51;
          v53 = v26 + v36;
          v54 = v53 * v51;
          v55 = v50 * 0.5;
          v56 = (v24 - _D8) * v51;
          v57 = sqrt(v25 + 1.0 - (v37 + *(double *)&_Q18));
          v58 = 1.0 / (v57 + v57);
          v59 = v57 * 0.5;
          v60 = v53 * v58;
          v61 = (v6.f64[0] - v35) * v58;
          if (v25 > v37)
            v43 = (_D8 + v24) * v58;
          else
            v43 = v52;
          if (v25 > v37)
            v44 = v59;
          else
            v44 = v54;
          if (v25 > v37)
            v45 = v60;
          else
            v45 = v55;
          if (v25 > v37)
            v42 = v61;
          else
            v42 = v56;
        }
        else
        {
          v47 = sqrt(1.0 - (v37 + v25) + *(double *)&_Q18);
          v48 = v47 + v47;
          v43 = v47 * 0.5;
          v49 = 1.0 / v48;
          v44 = (_D8 + v24) * v49;
          v45 = (v6.f64[0] + v35) * v49;
          v42 = (v36 - v26) * v49;
        }
      }
      else
      {
        v41 = 0.5 / sqrt(v40);
        v42 = 0.25 / v41;
        v43 = v41 * (v36 - v26);
        v44 = v41 * (v6.f64[0] - v35);
        v45 = v41 * (v24 - _D8);
      }
      *(double *)(a2 + 104) = v43;
      *(double *)(a2 + 112) = v44;
      *(double *)(a2 + 120) = v45;
      *(double *)(a2 + 128) = v42;
    }
    else
    {
      __xa = *(double *)&_Q18;
      v71 = v6.f64[0];
      v46 = asin(-v6.f64[0]);
      *(double *)(a2 + 112) = v46;
      if (fabs(v71) >= 1.0)
      {
        *(long double *)(a2 + 104) = atan2(v24, v25);
      }
      else
      {
        if (v37 >= 0.0 || v26 != 0.0 || _D8 != 0.0 || __xa >= 0.0)
        {
          *(long double *)(a2 + 104) = atan2(v26, v37);
          *(long double *)(a2 + 120) = atan2(_D8, __xa);
          goto LABEL_49;
        }
        *(double *)(a2 + 112) = dbl_18474E250[v71 <= 0.0] - v46;
        *(_QWORD *)(a2 + 104) = 0;
      }
      *(_QWORD *)(a2 + 120) = 0;
    }
  }
LABEL_49:
  *(_BYTE *)(a2 + 136) = v3;
}

double CA::Mat4Impl::mat4_transpose(CA::Mat4Impl *this, double *a2, const double *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double result;
  _OWORD v12[8];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (this == (CA::Mat4Impl *)a2)
  {
    v3 = *(_OWORD *)this;
    v7 = *((_OWORD *)this + 1);
    v4 = *((_OWORD *)this + 2);
    v8 = *((_OWORD *)this + 3);
    v12[0] = *(_OWORD *)this;
    v12[1] = v7;
    v12[2] = v4;
    v12[3] = v8;
    v5 = *((_OWORD *)this + 4);
    v9 = *((_OWORD *)this + 5);
    v6 = *((_OWORD *)this + 6);
    v10 = *((_OWORD *)this + 7);
    v12[4] = v5;
    v12[5] = v9;
    a2 = (double *)v12;
    v12[6] = v6;
    v12[7] = v10;
  }
  else
  {
    *(double *)&v3 = *a2;
    *(double *)&v4 = a2[4];
    *(double *)&v5 = a2[8];
    *(double *)&v6 = a2[12];
    *(double *)&v7 = a2[2];
    *(double *)&v8 = a2[6];
    *(double *)&v9 = a2[10];
    *(double *)&v10 = a2[14];
  }
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 2) = v5;
  *((_QWORD *)this + 3) = v6;
  *((double *)this + 4) = a2[1];
  *((double *)this + 5) = a2[5];
  *((double *)this + 6) = a2[9];
  *((double *)this + 7) = a2[13];
  *((_QWORD *)this + 8) = v7;
  *((_QWORD *)this + 9) = v8;
  *((_QWORD *)this + 10) = v9;
  *((_QWORD *)this + 11) = v10;
  *((double *)this + 12) = a2[3];
  *((double *)this + 13) = a2[7];
  *((double *)this + 14) = a2[11];
  result = a2[15];
  *((double *)this + 15) = result;
  return result;
}

float64x2_t CA::Mat4Impl::mat4_set_unmatrix(CA::Mat4Impl *this, uint64_t a2, uint64_t a3, const double *a4)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  float64x2_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  const double *v24;
  int8x16_t v25;
  int8x16_t v26;
  __double2 v27;
  float64x2_t v28;
  float64x2_t v29;
  double v30;
  const double *v31;
  int8x16_t v32;
  int8x16_t v33;
  __double2 v34;
  float64x2_t v35;
  float64x2_t v36;
  double v37;
  int8x16_t v38;
  int8x16_t v39;
  __double2 v40;
  float64x2_t v41;
  float64x2_t v42;
  double v43;
  double v44;
  double v45;
  __int128 v46;
  __int128 v47;
  float64x2_t result;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[48];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)this = xmmword_18474DF40;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = xmmword_18474DF50;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = xmmword_18474DF40;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = xmmword_18474DF50;
  *((_QWORD *)this + 3) = *(_QWORD *)(a2 + 72);
  *((_QWORD *)this + 7) = *(_QWORD *)(a2 + 80);
  *((_QWORD *)this + 11) = *(_QWORD *)(a2 + 88);
  *((_QWORD *)this + 15) = *(_QWORD *)(a2 + 96);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 64);
  v8 = *(_OWORD *)(a2 + 56);
  v9 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*((float64x2_t *)this + 7), *((float64x2_t *)this + 1), *(double *)&v6), *((float64x2_t *)this + 3), *(double *)&v8), *((float64x2_t *)this + 5), *(double *)&v7);
  *((float64x2_t *)this + 6) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_18474DF40, *(double *)&v6), (float64x2_t)xmmword_18474DF50, *(double *)&v8), (float64x2_t)0, *(double *)&v7);
  *((float64x2_t *)this + 7) = v9;
  if (*(_BYTE *)(a2 + 136))
  {
    v10 = *(double *)(a2 + 104);
    v11 = *(double *)(a2 + 112);
    v12 = v10 * v10;
    v13 = v11 * v10;
    v14 = *(double *)(a2 + 120);
    v15 = *(double *)(a2 + 128);
    v16 = v14 * v10;
    v17 = v15 * v10;
    v18 = v11 * v11;
    v19 = v14 * v11;
    v20 = v15 * v11;
    v21 = v14 * v14;
    v22 = v15 * v14;
    *(double *)&v53 = 1.0 - (v21 + v18) * 2.0;
    *((double *)&v53 + 1) = v13 - v22 + v13 - v22;
    *(double *)&v54 = v20 + v16 + v20 + v16;
    *((_QWORD *)&v54 + 1) = 0;
    *(double *)&v55 = v22 + v13 + v22 + v13;
    *((double *)&v55 + 1) = 1.0 - (v21 + v12) * 2.0;
    *(double *)&v56 = v19 - v17 + v19 - v17;
    *((_QWORD *)&v56 + 1) = 0;
    *(double *)&v57 = v16 - v20 + v16 - v20;
    *((double *)&v57 + 1) = v17 + v19 + v17 + v19;
    *(double *)v58 = 1.0 - (v18 + v12) * 2.0;
    memset(&v58[8], 0, 32);
    *(_QWORD *)&v58[40] = 0x3FF0000000000000;
LABEL_21:
    CA::Mat4Impl::mat4_concat((float64x2_t *)this, (double *)&v53, (const double *)this, a4);
    goto LABEL_22;
  }
  v23 = *(double *)(a2 + 120);
  if (v23 != 0.0)
  {
    v54 = 0u;
    v56 = 0u;
    v57 = 0u;
    *(_OWORD *)v58 = xmmword_18474DF40;
    *(_OWORD *)&v58[16] = 0u;
    *(_OWORD *)&v58[32] = xmmword_18474DF50;
    v27 = __sincos_stret(v23);
    *(double *)v26.i64 = v27.__cosval;
    *(double *)v25.i64 = v27.__sinval;
    if (fabs(v27.__sinval) >= 0.0000001)
    {
      if (fabs(v27.__cosval) < 0.0000001)
      {
        v26.i64[0] = 1.0;
        v29.f64[0] = NAN;
        v29.f64[1] = NAN;
        v25.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v29), v26, v25).u64[0];
        v26.i64[0] = 0;
      }
    }
    else
    {
      v25.i64[0] = 1.0;
      v28.f64[0] = NAN;
      v28.f64[1] = NAN;
      v26.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v28), v25, v26).u64[0];
      v25.i64[0] = 0;
    }
    *(_QWORD *)&v53 = v26.i64[0];
    *((_QWORD *)&v53 + 1) = v25.i64[0];
    *(double *)&v55 = -*(double *)v25.i64;
    *((_QWORD *)&v55 + 1) = v26.i64[0];
    CA::Mat4Impl::mat4_concat((float64x2_t *)this, (double *)&v53, (const double *)this, v24);
  }
  v30 = *(double *)(a2 + 112);
  if (v30 != 0.0)
  {
    v53 = xmmword_18474DF40;
    v54 = 0u;
    v55 = xmmword_18474DF50;
    v56 = 0u;
    v57 = 0u;
    *(_OWORD *)v58 = xmmword_18474DF40;
    *(_OWORD *)&v58[16] = 0u;
    *(_OWORD *)&v58[32] = xmmword_18474DF50;
    v34 = __sincos_stret(v30);
    *(double *)v33.i64 = v34.__cosval;
    *(double *)v32.i64 = v34.__sinval;
    if (fabs(v34.__sinval) >= 0.0000001)
    {
      if (fabs(v34.__cosval) < 0.0000001)
      {
        v33.i64[0] = 1.0;
        v36.f64[0] = NAN;
        v36.f64[1] = NAN;
        v32.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v36), v33, v32).u64[0];
        v33.i64[0] = 0;
      }
    }
    else
    {
      v32.i64[0] = 1.0;
      v35.f64[0] = NAN;
      v35.f64[1] = NAN;
      v33.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v35), v32, v33).u64[0];
      v32.i64[0] = 0;
    }
    *(_QWORD *)&v53 = v33.i64[0];
    *(double *)&v54 = -*(double *)v32.i64;
    *(_QWORD *)&v57 = v32.i64[0];
    *(_QWORD *)v58 = v33.i64[0];
    CA::Mat4Impl::mat4_concat((float64x2_t *)this, (double *)&v53, (const double *)this, v31);
  }
  v37 = *(double *)(a2 + 104);
  if (v37 != 0.0)
  {
    v53 = xmmword_18474DF40;
    v54 = 0u;
    v55 = xmmword_18474DF50;
    v56 = 0u;
    v57 = 0u;
    *(_OWORD *)v58 = xmmword_18474DF40;
    *(_OWORD *)&v58[16] = 0u;
    *(_OWORD *)&v58[32] = xmmword_18474DF50;
    v40 = __sincos_stret(v37);
    *(double *)v39.i64 = v40.__cosval;
    *(double *)v38.i64 = v40.__sinval;
    if (fabs(v40.__sinval) >= 0.0000001)
    {
      if (fabs(v40.__cosval) < 0.0000001)
      {
        v39.i64[0] = 1.0;
        v42.f64[0] = NAN;
        v42.f64[1] = NAN;
        v38.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v42), v39, v38).u64[0];
        v39.i64[0] = 0;
      }
    }
    else
    {
      v38.i64[0] = 1.0;
      v41.f64[0] = NAN;
      v41.f64[1] = NAN;
      v39.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v41), v38, v39).u64[0];
      v38.i64[0] = 0;
    }
    *((_QWORD *)&v55 + 1) = v39.i64[0];
    *(_QWORD *)&v56 = v38.i64[0];
    *((double *)&v57 + 1) = -*(double *)v38.i64;
    *(_QWORD *)v58 = v39.i64[0];
    goto LABEL_21;
  }
LABEL_22:
  v43 = *(double *)(a2 + 40);
  if (v43 != 0.0)
  {
    v53 = xmmword_18474DF40;
    v54 = 0u;
    v55 = xmmword_18474DF50;
    v56 = 0u;
    *(_QWORD *)&v57 = 0;
    *(_OWORD *)v58 = xmmword_18474DF40;
    *(_OWORD *)&v58[16] = 0u;
    *(_OWORD *)&v58[32] = xmmword_18474DF50;
    *((double *)&v57 + 1) = v43;
    CA::Mat4Impl::mat4_concat((float64x2_t *)this, (double *)&v53, (const double *)this, a4);
  }
  v44 = *(double *)(a2 + 32);
  if (v44 != 0.0)
  {
    v53 = xmmword_18474DF40;
    v54 = 0u;
    v55 = xmmword_18474DF50;
    v56 = 0u;
    *(_OWORD *)v58 = xmmword_18474DF40;
    *(_OWORD *)&v58[16] = 0u;
    *(_OWORD *)&v58[32] = xmmword_18474DF50;
    v57 = *(unint64_t *)&v44;
    CA::Mat4Impl::mat4_concat((float64x2_t *)this, (double *)&v53, (const double *)this, a4);
  }
  v45 = *(double *)(a2 + 24);
  if (v45 != 0.0)
  {
    v53 = xmmword_18474DF40;
    v54 = 0u;
    *((_QWORD *)&v55 + 1) = 0x3FF0000000000000;
    v56 = 0u;
    v57 = 0u;
    *(_OWORD *)v58 = xmmword_18474DF40;
    *(_OWORD *)&v58[16] = 0u;
    *(_OWORD *)&v58[32] = xmmword_18474DF50;
    *(double *)&v55 = v45;
    CA::Mat4Impl::mat4_concat((float64x2_t *)this, (double *)&v53, (const double *)this, a4);
  }
  v46 = *(_OWORD *)(a2 + 16);
  v47 = *(_OWORD *)(a2 + 8);
  result = vmulq_n_f64(*((float64x2_t *)this + 1), *(double *)a2);
  v49 = vmulq_n_f64(*((float64x2_t *)this + 2), *(double *)&v47);
  v50 = vmulq_n_f64(*((float64x2_t *)this + 3), *(double *)&v47);
  v51 = vmulq_n_f64(*((float64x2_t *)this + 4), *(double *)&v46);
  v52 = vmulq_n_f64(*((float64x2_t *)this + 5), *(double *)&v46);
  *(float64x2_t *)this = vmulq_n_f64(*(float64x2_t *)this, *(double *)a2);
  *((float64x2_t *)this + 1) = result;
  *((float64x2_t *)this + 2) = v49;
  *((float64x2_t *)this + 3) = v50;
  *((float64x2_t *)this + 4) = v51;
  *((float64x2_t *)this + 5) = v52;
  return result;
}

void ___ZL27cons_CALayer_kCAValueDoublejb_block_invoke_2(uint64_t a1, uint64_t a2, double a3)
{
  const void *v3;
  double v4[2];

  v4[1] = *(double *)MEMORY[0x1E0C80C00];
  v3 = (const void *)*(unsigned int *)(a1 + 32);
  v4[0] = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)0x12, v4);
}

void ___ZN2CA6Render5Fence11Transaction8Observer8activateENSt3__113unordered_setIyNS4_4hashIyEENS4_8equal_toIyEENS4_9allocatorIyEEEEPFvPS3_RKSC_djyEPFvSD_SF_jjEPFvSD_SF_E_block_invoke_11(uint64_t a1)
{
  dispatch_mach_connect();
  dispatch_resume(*(dispatch_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

BOOL CAObject_automaticallyNotifiesObserversForKey(objc_class *a1, const __CFString *a2)
{
  unsigned int *v3;
  uint64_t *v5[2];

  v5[1] = *(uint64_t **)MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t *)classDescription(a1);
  v3 = propertyInfoForKey(v5[0], a2, v5);
  if (!v3)
    return 1;
  if ((*((_BYTE *)v3 + 7) & 0x40) != 0)
    return 0;
  return *((_BYTE *)v5[0] + 136) != 0;
}

uint64_t CAImageQueueGetReleasedImageInfo()
{
  uint64_t result;
  void *v1;

  result = release_key;
  if (release_key)
  {
    v1 = pthread_getspecific(release_key);
    if (v1)
      return (uint64_t)v1 + 56;
    else
      return 0;
  }
  return result;
}

void sub_18457ABC4(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t init_suspended(void *a1)
{
  unsigned __int8 v1;
  void *v2;

  {
    init_suspended(void *)::notification = objc_alloc_init(CASuspendNotification);
  }
  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  objc_msgSend(v2, "addObserver:selector:name:object:", init_suspended(void *)::notification, sel_willSuspend_, CFSTR("UIApplicationDidEnterBackgroundNotification"), 0);
  objc_msgSend(v2, "addObserver:selector:name:object:", init_suspended(void *)::notification, sel_willUnsuspend_, CFSTR("UIApplicationWillEnterForegroundNotification"), 0);
  return objc_msgSend(v2, "addObserver:selector:name:object:", init_suspended(void *)::notification, sel_willUnsuspend_, CFSTR("UIApplicationDidFinishLaunchingNotification"), 0);
}

void sub_18457B3E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CA::Render::ImageQueue::did_composite(CA::Render::ImageQueue *this)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  mach_port_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  BOOL v9;
  int v11;
  mach_error_t v12;
  mach_error_t v13;
  NSObject *v14;
  char *v15;
  NSObject *v16;
  _QWORD block[6];
  mach_port_t v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  mach_error_t v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if (v1)
  {
    v2 = *((unsigned int *)this + 43);
    if ((_DWORD)v2)
    {
      v3 = (_BYTE *)(v1 + 578);
      v4 = *((_DWORD *)this + 47);
      v5 = *(_DWORD *)(v1 + 52);
      v6 = *(_DWORD *)(v1 + 40);
      do
      {
        if (*(_DWORD *)(v3 - 54))
        {
          v7 = *(_DWORD *)(v3 - 22);
          v8 = *v3 || v4 == 0;
          v9 = v8 || v7 > v6;
          if (!v9 && v5 != 0)
          {
            v11 = *(_DWORD *)(v3 - 30);
            v12 = _CACImageQueueDidComposite(v4, 0, v5, *(_DWORD *)(v3 - 22), v11);
            if (v12)
            {
              v13 = v12;
              if (v12 == 268435460)
              {
                if (v4 == -1 || mach_port_mod_refs(*MEMORY[0x1E0C83DA0], v4, 0, 1))
                {
                  if (x_log_hook_p())
                  {
                    x_log_();
                  }
                  else
                  {
                    v16 = x_log_category_utilities;
                    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315138;
                      v24 = "IQDidComposite";
                      _os_log_impl(&dword_184457000, v16, OS_LOG_TYPE_ERROR, "%s failed to retain right", buf, 0xCu);
                    }
                  }
                }
                else
                {
                  if (CA::MachPortUtil::reply_queue(void)::once != -1)
                    dispatch_once(&CA::MachPortUtil::reply_queue(void)::once, &__block_literal_global_8138);
                  block[0] = MEMORY[0x1E0C809B0];
                  block[1] = 0x40000000;
                  block[2] = ___ZN2CA12MachPortUtil17call_with_timeoutIPFijjjjjEJjjjEEEijjPKcT_DpT0__block_invoke;
                  block[3] = &__block_descriptor_tmp_94;
                  v18 = v4;
                  v19 = 2;
                  v20 = v5;
                  v21 = v7;
                  v22 = v11;
                  block[4] = _CACImageQueueDidComposite;
                  block[5] = "IQDidComposite";
                  dispatch_async((dispatch_queue_t)CA::MachPortUtil::reply_queue(void)::queue, block);
                }
              }
              else
              {
                if (x_log_hook_p())
                {
                  mach_error_string(v13);
                  x_log_();
                }
                else
                {
                  v14 = x_log_category_utilities;
                  if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
                  {
                    v15 = mach_error_string(v13);
                    *(_DWORD *)buf = 136315650;
                    v24 = "IQDidComposite";
                    v25 = 1024;
                    v26 = v13;
                    v27 = 2080;
                    v28 = v15;
                    _os_log_impl(&dword_184457000, v14, OS_LOG_TYPE_ERROR, "%s client message err=0x%x : %s", buf, 0x1Cu);
                  }
                }
                if (v13 != 268435460)
                  goto LABEL_16;
              }
            }
            *v3 = 1;
          }
        }
LABEL_16:
        v3 += 160;
        --v2;
      }
      while (v2);
    }
  }
}

uint64_t _CACImageQueueDidComposite(mach_port_t a1, mach_msg_timeout_t timeout, int a3, int a4, int a5)
{
  uint64_t v6;
  mach_msg_header_t msg;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v9 = *MEMORY[0x1E0C804E8];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  *(_QWORD *)&msg.msgh_bits = 19;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 40404;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set(&msg);
  v6 = mach_msg(&msg, 17, 0x2Cu, 0, 0, timeout, 0);
  if ((v6 - 268435459) <= 1)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], msg.msgh_local_port);
    mach_msg_destroy(&msg);
  }
  return v6;
}

CA::Render::Filter *CA::Render::Filter::shared_filter(CA::Render::Filter *this)
{
  int v1;
  CA::Render::Filter *v2;
  uint64_t v3;
  malloc_zone_t *malloc_zone;
  CA::Render::Filter *v5;

  v1 = (int)this;
  v2 = 0;
  if ((int)this > 351)
  {
    if ((int)this <= 423)
    {
      if ((int)this <= 384)
      {
        if ((int)this <= 361)
        {
          if ((_DWORD)this == 352)
          {
            v3 = 35;
          }
          else
          {
            if ((_DWORD)this != 353)
              return v2;
            v3 = 36;
          }
        }
        else
        {
          switch((_DWORD)this)
          {
            case 0x16A:
              v3 = 43;
              break;
            case 0x177:
              v3 = 19;
              break;
            case 0x17E:
              v3 = 18;
              break;
            default:
              return v2;
          }
        }
      }
      else if ((int)this > 408)
      {
        switch((_DWORD)this)
        {
          case 0x199:
            v3 = 23;
            break;
          case 0x19F:
            v3 = 37;
            break;
          case 0x1A6:
            v3 = 14;
            break;
          default:
            return v2;
        }
      }
      else
      {
        switch((_DWORD)this)
        {
          case 0x181:
            v3 = 17;
            break;
          case 0x182:
            v3 = 21;
            break;
          case 0x18A:
            v3 = 20;
            break;
          default:
            return v2;
        }
      }
    }
    else if ((int)this > 536)
    {
      if ((int)this > 538)
      {
        if ((_DWORD)this == 539)
        {
          v3 = 15;
        }
        else
        {
          if ((_DWORD)this != 598)
            return v2;
          v3 = 12;
        }
      }
      else if ((_DWORD)this == 537)
      {
        v3 = 32;
      }
      else
      {
        v3 = 16;
      }
    }
    else
    {
      if ((int)this > 503)
      {
        switch((int)this)
        {
          case 504:
            v3 = 28;
            goto LABEL_84;
          case 507:
            v3 = 6;
            goto LABEL_84;
          case 509:
            v3 = 4;
            goto LABEL_84;
          case 512:
            v3 = 5;
            goto LABEL_84;
          case 513:
            v3 = 3;
            goto LABEL_84;
          default:
            return v2;
        }
        return v2;
      }
      switch((_DWORD)this)
      {
        case 0x1A8:
          v3 = 13;
          break;
        case 0x1DA:
          v3 = 41;
          break;
        case 0x1DF:
          v3 = 22;
          break;
        default:
          return v2;
      }
    }
LABEL_84:
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Filter::shared_filter::lock);
    v2 = (CA::Render::Filter *)CA::Render::Filter::shared_filter::filters[v3];
    if (!v2)
    {
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v5 = (CA::Render::Filter *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x38uLL, 0x743898A5uLL);
      v2 = v5;
      if (v5)
      {
        CA::Render::Filter::Filter(v5, v1, 0, 0);
        CA::Render::Filter::shared_filter::filters[v3] = v2;
        *((_DWORD *)v2 + 3) |= 0x10100u;
      }
      else
      {
        CA::Render::Filter::shared_filter::filters[v3] = 0;
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Filter::shared_filter::lock);
    return v2;
  }
  if ((int)this > 213)
  {
    if ((int)this <= 260)
    {
      switch((_DWORD)this)
      {
        case 0xD6:
          v3 = 31;
          break;
        case 0xF9:
          v3 = 29;
          break;
        case 0x102:
          v3 = 40;
          break;
        default:
          return v2;
      }
    }
    else if ((int)this > 341)
    {
      if ((_DWORD)this == 342)
      {
        v3 = 39;
      }
      else
      {
        if ((_DWORD)this != 351)
          return v2;
        v3 = 34;
      }
    }
    else if ((_DWORD)this == 261)
    {
      v3 = 44;
    }
    else
    {
      if ((_DWORD)this != 341)
        return v2;
      v3 = 25;
    }
    goto LABEL_84;
  }
  switch((int)this)
  {
    case 160:
      v3 = 24;
      goto LABEL_84;
    case 161:
      v3 = 38;
      goto LABEL_84;
    case 162:
    case 163:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
      return v2;
    case 164:
      v3 = 2;
      goto LABEL_84;
    case 165:
      v3 = 11;
      goto LABEL_84;
    case 166:
      v3 = 8;
      goto LABEL_84;
    case 167:
      v3 = 9;
      goto LABEL_84;
    case 168:
      v3 = 10;
      goto LABEL_84;
    case 169:
      v3 = 7;
      goto LABEL_84;
    case 170:
      v3 = 30;
      goto LABEL_84;
    case 181:
      v3 = 33;
      goto LABEL_84;
    default:
      v3 = 0;
      switch((int)this)
      {
        case 'X':
          goto LABEL_84;
        case 'Y':
        case 'Z':
        case '[':
        case ']':
        case '_':
          return v2;
        case '\\':
          v3 = 42;
          goto LABEL_84;
        case '^':
          v3 = 27;
          goto LABEL_84;
          v3 = 26;
          goto LABEL_84;
        default:
          if ((_DWORD)this != 140)
            return v2;
          v3 = 1;
          break;
      }
      goto LABEL_84;
  }
  return v2;
}

uint64_t CAObject_resolveInstanceMethod(objc_class *a1, const void *a2)
{
  uint64_t result;
  _QWORD *v4;
  const __CFDictionary *v5;
  _QWORD *Value;
  _QWORD *v7;
  void *v8;
  const void *v9;
  void (*v10)(void);

  result = classDescription(a1);
  if (result)
  {
    v4 = (_QWORD *)result;
    while (1)
    {
      v5 = (const __CFDictionary *)v4[14];
      if (v5)
      {
        Value = CFDictionaryGetValue(v5, a2);
        if (Value)
          break;
      }
      v4 = (_QWORD *)*v4;
      if (!v4)
        return 0;
    }
    v7 = Value;
    v8 = (void *)v4[1];
    v9 = (const void *)Value[1];
    if (v9 == a2)
      v10 = (void (*)(void))objc_msgSend(v8, "CA_setterForProperty:", Value);
    else
      v10 = (void (*)(void))objc_msgSend(v8, "CA_getterForProperty:", Value);
    if (!v10)
      return 0;
    class_addMethod((Class)v8, (SEL)a2, v10, (&method_encodings[2 * *((unsigned __int16 *)v7 + 2)])[v9 != a2]);
    return 1;
  }
  return result;
}

IMP cons_CALayer_kCAValueDouble(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_d16__0_8l;
    v3 = ___ZL27cons_CALayer_kCAValueDoublejb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v24__0_8d16l;
    v3 = ___ZL27cons_CALayer_kCAValueDoublejb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CALayer_kCAValueCopiedPointer(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e10_r_v16__0_8l;
    v3 = ___ZL34cons_CALayer_kCAValueCopiedPointerjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e13_v24__0_8r_v16l;
    v3 = ___ZL34cons_CALayer_kCAValueCopiedPointerjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CAAnimation_kCAValueWeakPointer(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e10_r_v16__0_8l;
    v3 = ___ZL36cons_CAAnimation_kCAValueWeakPointerjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e13_v24__0_8r_v16l;
    v3 = ___ZL36cons_CAAnimation_kCAValueWeakPointerjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CALayer_kCAValueFloat(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_f16__0_8l;
    v3 = ___ZL26cons_CALayer_kCAValueFloatjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v20__0_8f16l;
    v3 = ___ZL26cons_CALayer_kCAValueFloatjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CALayer_kCAValueRetainedPointer(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e10_r_v16__0_8l;
    v3 = ___ZL36cons_CALayer_kCAValueRetainedPointerjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e13_v24__0_8r_v16l;
    v3 = ___ZL36cons_CALayer_kCAValueRetainedPointerjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CALayer_kCAValueBool(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_B16__0_8l;
    v3 = ___ZL25cons_CALayer_kCAValueBooljb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v20__0_8B16l;
    v3 = ___ZL25cons_CALayer_kCAValueBooljb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

void CAML::ObjCCGRect::end(CAML::ObjCCGRect *this, CAML::Context *a2, CAML::State *a3, CAML *a4, uint64_t a5)
{
  char **v7;
  double v8;
  const char *v9;
  double v10;
  const char *v11;
  double v12;
  const char *v13;
  double v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  CAML::Context *v18[2];

  v18[1] = *(CAML::Context **)MEMORY[0x1E0C80C00];
  v7 = (char **)((char *)a4 + a5);
  v18[0] = a4;
  v8 = CAML::parse_length(a4, (char *)v18, (char **)((char *)a4 + a5), (const char *)a4);
  v10 = CAML::parse_length(v18[0], (char *)v18, v7, v9);
  v12 = CAML::parse_length(v18[0], (char *)v18, v7, v11);
  v14 = CAML::parse_length(v18[0], (char *)v18, v7, v13);
  v16 = CAML::check_trailer((uint64_t)a2, v18[0], (CAML::Context *)v7, v15);
  v17 = (void *)MEMORY[0x186DBE2E4](v16);
  CAML::State::set_value(a3, (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRect:", v8, v10, v12, v14));
  objc_autoreleasePoolPop(v17);
}

void sub_18457C1D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

double CAML::parse_length(CAML *this, char *a2, char **a3, const char *a4)
{
  const char *v6;
  double v7;
  double v8;
  CAML *v9;
  int v10;
  double v11;
  BOOL v12;
  int v13;
  int v14;
  double v15;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v17[0] = this;
  v7 = x_strtod((const char *)this, v17, (const char *)a3);
  v8 = v7;
  v9 = (CAML *)(v17[0] + 2);
  if (v17[0] + 2 >= (unint64_t)a3)
    goto LABEL_11;
  v10 = *(char *)v17[0];
  if (v10 <= 108)
  {
    if (v10 != 99)
    {
      if (v10 == 105)
      {
        v11 = v7 * 72.0;
        v12 = *(_BYTE *)(v17[0] + 1) == 110;
        goto LABEL_16;
      }
LABEL_11:
      v9 = (CAML *)v17[0];
      if (!a2)
        return v8;
      goto LABEL_20;
    }
    v14 = *(unsigned __int8 *)(v17[0] + 1);
    v15 = 28.346456;
LABEL_15:
    v11 = v8 * v15;
    v12 = v14 == 109;
LABEL_16:
    if (v12)
      v8 = v11;
    else
      v9 = (CAML *)v17[0];
    goto LABEL_19;
  }
  if (v10 == 109)
  {
    v14 = *(unsigned __int8 *)(v17[0] + 1);
    v15 = 2.8346456;
    goto LABEL_15;
  }
  if (v10 != 112)
    goto LABEL_11;
  v13 = *(char *)(v17[0] + 1);
  if (v13 == 99)
  {
    v8 = v7 * 12.0;
    if (!a2)
      return v8;
    goto LABEL_20;
  }
  if (v13 != 120 && v13 != 116)
    goto LABEL_11;
LABEL_19:
  if (a2)
LABEL_20:
    *(_QWORD *)a2 = CAML::skip_whitespace(v9, (CAML *)a3, v6);
  return v8;
}

void CAML::ObjCCGPath::end(CAML::ObjCCGPath *this, CAML::Context *a2, CAML::State *a3, char *a4, uint64_t a5)
{
  CGPath *Mutable;
  int v10;
  const char *v11;
  double width;
  const char *v13;
  char *v14;
  double height;
  double x;
  double y;
  int v18;
  CGFloat v19;
  CGFloat v20;
  CGPath *v21;
  CGFloat v22;
  CGFloat v23;
  CGSize size;
  char *v25;
  CGRect v26;
  double v27[3];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)v27 = 0u;
  memset(&v26, 0, sizeof(v26));
  v25 = a4;
  Mutable = CGPathCreateMutable();
  if (a5 < 1)
    goto LABEL_49;
  v10 = 0;
  v11 = &a4[a5];
  width = 0.0;
  v13 = "Invalid number of numeric values in path: %s";
  v14 = a4;
  height = 0.0;
  x = 0.0;
  y = 0.0;
  while (1)
  {
    v18 = *v14;
    if (v18 > 47)
    {
      if (v18 > 72)
      {
        switch(*v14)
        {
          case 'h':
            if (v10)
            {
              CAML::Context::error(a2, "Invalid number of arguments to 'h' path operator: %s");
              goto LABEL_49;
            }
            CGPathCloseSubpath(Mutable);
            goto LABEL_41;
          case 'i':
          case 'j':
          case 'k':
          case 'n':
          case 'o':
          case 'p':
          case 's':
          case 'u':
          case 'w':
          case 'x':
            goto LABEL_47;
          case 'l':
            if (v10 != 2)
            {
              CAML::Context::error(a2, "Invalid number of arguments to 'l' path operator: %s");
              goto LABEL_49;
            }
            y = v26.origin.y;
            x = v26.origin.x;
            CGPathAddLineToPoint(Mutable, 0, v26.origin.x, v26.origin.y);
LABEL_26:
            v10 = 0;
            ++v25;
            height = y;
            width = x;
            break;
          case 'm':
            if (v10 != 2)
            {
              CAML::Context::error(a2, "Invalid number of arguments to 'm' path operator: %s");
              goto LABEL_49;
            }
            y = v26.origin.y;
            x = v26.origin.x;
            CGPathMoveToPoint(Mutable, 0, v26.origin.x, v26.origin.y);
            goto LABEL_26;
          case 'q':
            if (v10 != 4)
            {
              CAML::Context::error(a2, "Invalid number of arguments to 'q' path operator: %s");
              goto LABEL_49;
            }
            y = v26.origin.y;
            x = v26.origin.x;
LABEL_34:
            height = v26.size.height;
            width = v26.size.width;
            CGPathAddQuadCurveToPoint(Mutable, 0, x, y, v26.size.width, v26.size.height);
LABEL_40:
            v10 = 0;
LABEL_41:
            ++v25;
            break;
          case 'r':
            if (v14[1] != 101)
              goto LABEL_47;
            if (v10 != 4)
            {
              CAML::Context::error(a2, "Invalid number of arguments to 're' path operator: %s");
              goto LABEL_49;
            }
            height = v26.size.height;
            width = v26.size.width;
            CGPathAddRect(Mutable, 0, v26);
            v10 = 0;
            break;
          case 't':
            if (v10 != 2)
            {
              CAML::Context::error(a2, "Invalid number of arguments to 't' path operator: %s");
              goto LABEL_49;
            }
            x = -(x - width * 2.0);
            y = -(y - height * 2.0);
            goto LABEL_34;
          case 'v':
            if (v10 != 4)
            {
              CAML::Context::error(a2, "Invalid number of arguments to 'v' path operator: %s");
              goto LABEL_49;
            }
            y = v26.origin.y;
            x = v26.origin.x;
            size = v26.size;
            CGPathAddCurveToPoint(Mutable, 0, width, height, v26.origin.x, v26.origin.y, v26.size.width, v26.size.height);
            v10 = 0;
            ++v25;
            height = size.height;
            width = size.width;
            break;
          case 'y':
            if (v10 != 4)
            {
              CAML::Context::error(a2, "Invalid number of arguments to 'y' path operator: %s");
              goto LABEL_49;
            }
            v20 = v26.origin.y;
            v19 = v26.origin.x;
            height = v26.size.height;
            width = v26.size.width;
            v21 = Mutable;
            v23 = v26.size.height;
            v22 = v26.size.width;
LABEL_39:
            CGPathAddCurveToPoint(v21, 0, v19, v20, v22, v23, width, height);
            goto LABEL_40;
          default:
            if (v18 != 73)
            {
              if (v18 != 99)
                goto LABEL_47;
              if (v10 != 6)
              {
                CAML::Context::error(a2, "Invalid number of arguments to 'c' path operator: %s");
                goto LABEL_49;
              }
              v20 = v26.origin.y;
              v19 = v26.origin.x;
              y = v26.size.height;
              x = v26.size.width;
              height = v27[1];
              width = v27[0];
              v21 = Mutable;
              v23 = v26.size.height;
              v22 = v26.size.width;
              goto LABEL_39;
            }
            if (v14[1] == 110 && v14[2] == 102)
              goto LABEL_16;
            break;
        }
      }
      else
      {
        if ((v18 - 48) >= 0xA)
          goto LABEL_47;
LABEL_16:
        if (v10 == 6)
          goto LABEL_48;
        *(&v26.origin.x + v10++) = x_strtod(v14, &v25, v11);
      }
      v14 = v25;
      goto LABEL_7;
    }
    if (v18 > 0x2E)
      goto LABEL_47;
    if (((1 << v18) & 0x100003600) == 0)
      break;
    v25 = ++v14;
LABEL_7:
    if (v14 >= v11)
      goto LABEL_49;
  }
  if (((1 << v18) & 0x680000000000) != 0)
    goto LABEL_16;
  if (*v14)
  {
LABEL_47:
    v13 = "Invalid path operator: %s";
LABEL_48:
    CAML::Context::error(a2, v13, a4);
  }
LABEL_49:
  CAML::State::set_value(a3, Mutable);
  CGPathRelease(Mutable);
}

double x_strtod(const char *a1, _QWORD *a2, const char *a3)
{
  double v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  int v10;
  const char *v11;
  unint64_t v12;
  const char *v13;
  const char *v14;
  double v15;
  int v16;
  const char *v17;
  int v18;
  int v19;
  uint64_t v20;
  const char *v21;
  double v22;
  int v23;
  double v24;
  double v25;
  const char *v27[2];

  v27[1] = *(const char **)MEMORY[0x1E0C80C00];
  v27[0] = a1;
  v4 = 0.0;
  if (a1 >= a3)
    goto LABEL_77;
  v5 = *(unsigned __int8 *)a1;
  if (v5 == 45)
  {
    v27[0] = ++a1;
    v6 = 1;
  }
  else
  {
    v6 = 0;
    if (v5 == 43)
      v27[0] = ++a1;
  }
  if (a1 >= a3)
    goto LABEL_75;
  v7 = *(unsigned __int8 *)a1;
  if (a3 - a1 >= 3)
  {
    if (*(unsigned __int8 *)a1 <= 0x68u)
    {
      if (v7 != 73)
      {
        if (v7 != 78)
          goto LABEL_27;
LABEL_22:
        if ((*((unsigned __int8 *)a1 + 1) | 0x20) == 0x61 && (*((unsigned __int8 *)a1 + 2) | 0x20) == 0x6E)
        {
          if (a2)
            *a2 = a1 + 3;
          return NAN;
        }
        goto LABEL_27;
      }
      goto LABEL_14;
    }
    if (v7 == 110)
      goto LABEL_22;
    if (v7 == 105)
    {
LABEL_14:
      if ((*((unsigned __int8 *)a1 + 1) | 0x20) == 0x6E && (*((unsigned __int8 *)a1 + 2) | 0x20) == 0x66)
      {
        if (a2)
          *a2 = a1 + 3;
        if (v6)
          return -INFINITY;
        else
          return INFINITY;
      }
      if ((v7 | 0x20) != 0x6E)
        goto LABEL_27;
      goto LABEL_22;
    }
  }
LABEL_27:
  if (*a1)
    v8 = v7 == 46;
  else
    v8 = 1;
  v10 = !v8 && (v7 & 0xFFFFFFDF) != 69;
  if (((v7 - 46) > 0x37 || ((1 << (v7 - 46)) & 0x80000000800001) == 0) && *a1)
  {
    v20 = 0;
    v11 = a3;
    while (a1[v20] - 48 <= 9)
    {
      if (a3 - a1 == ++v20)
        goto LABEL_63;
    }
    v11 = &a1[v20];
LABEL_63:
    v27[0] = v11;
    v21 = v11 - 1;
    v4 = 0.0;
    if (v11 - 1 >= a1)
    {
      v22 = 1.0;
      do
      {
        v23 = *v21--;
        v4 = v4 + v22 * (double)(v23 - 48);
        v22 = v22 * 10.0;
      }
      while (v21 >= a1);
    }
    if (v11 >= a3)
      goto LABEL_75;
    v7 = *(unsigned __int8 *)v11;
  }
  else
  {
    v11 = a1;
  }
  if (v7 != 46)
    goto LABEL_52;
  v12 = (unint64_t)(v11 + 1);
  if (v11 + 1 >= a3)
  {
    ++v11;
  }
  else
  {
    v13 = &a3[-v12];
    ++v11;
    while (*(unsigned __int8 *)v11 - 48 <= 9)
    {
      ++v11;
      if (!--v13)
      {
        v11 = a3;
        break;
      }
    }
  }
  v27[0] = v11;
  v14 = v11 - 1;
  v15 = 0.0;
  if ((unint64_t)(v11 - 1) >= v12)
  {
    do
    {
      v16 = *v14--;
      v15 = (double)(v16 - 48) + v15 * 0.1;
    }
    while ((unint64_t)v14 >= v12);
    v15 = v15 * 0.1;
  }
  v4 = v15 + v4;
  if (v11 < a3)
  {
    v7 = *(unsigned __int8 *)v11;
    v10 = 1;
LABEL_52:
    if (v10)
    {
      if ((v7 & 0xFFFFFFDF) == 0x45)
      {
        v17 = v11 + 1;
        v27[0] = v11 + 1;
        if (v11 + 1 < a3)
        {
          v18 = *(unsigned __int8 *)v17;
          if (v18 == 45)
          {
            v17 = v11 + 2;
            v27[0] = v11 + 2;
            v19 = 1;
          }
          else
          {
            v19 = 0;
            if (v18 == 43)
            {
              v17 = v11 + 2;
              v27[0] = v11 + 2;
            }
          }
          if (v17 < a3)
          {
            v24 = parse_digit_sequence_integer(v17, v27, a3);
            if (v19)
              v24 = -v24;
            v25 = pow_10((int)v24);
            if ((v6 & 1) != 0)
            {
              v4 = -(v25 * v4);
              if (!a2)
                return v4;
            }
            else
            {
              v4 = v25 * v4;
              if (!a2)
                return v4;
            }
            goto LABEL_78;
          }
        }
      }
    }
  }
LABEL_75:
  if (v6)
    v4 = -v4;
LABEL_77:
  if (a2)
LABEL_78:
    *a2 = v27[0];
  return v4;
}

double pow_10(unsigned int a1)
{
  double result;
  unsigned int v2;
  BOOL v3;
  unsigned int v4;
  double *v5;
  unsigned int v6;
  BOOL v7;

  result = 1.0;
  if ((int)a1 >= 1)
  {
    if (a1 < 0x21)
    {
      v2 = a1;
    }
    else
    {
      do
      {
        result = result * 1.0e32;
        v2 = a1 - 32;
        v3 = a1 > 0x40;
        a1 -= 32;
      }
      while (v3);
    }
    v4 = v2 - 1;
    v5 = (double *)&pow_10(int)::up;
    return v5[v4] * result;
  }
  if ((a1 & 0x80000000) != 0)
  {
    if (a1 > 0xFFFFFFDF)
    {
      v6 = a1;
    }
    else
    {
      do
      {
        result = result * 1.0e-32;
        v6 = a1 + 32;
        v7 = __CFADD__(a1, 64);
        a1 += 32;
      }
      while (!v7);
    }
    v4 = ~v6;
    v5 = (double *)&pow_10(int)::down;
    return v5[v4] * result;
  }
  return result;
}

double parse_digit_sequence_integer(const char *a1, const char **a2, const char *a3)
{
  const char *v3;
  uint64_t v4;
  const char *v5;
  double result;
  double v7;
  int v8;

  v3 = a1;
  if (a1 < a3)
  {
    v4 = a3 - a1;
    v3 = a1;
    while (*(unsigned __int8 *)v3 - 48 <= 9)
    {
      ++v3;
      if (!--v4)
      {
        v3 = a3;
        break;
      }
    }
  }
  if (a2)
    *a2 = v3;
  v5 = v3 - 1;
  result = 0.0;
  if (v5 >= a1)
  {
    v7 = 1.0;
    do
    {
      v8 = *v5--;
      result = result + v7 * (double)(v8 - 48);
      v7 = v7 * 10.0;
    }
    while (v5 >= a1);
  }
  return result;
}

double get_transform@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = (double)*(unint64_t *)(CGContextDelegateGetInfo() + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 24) = xmmword_18474DFF0;
  *(double *)(a1 + 40) = result;
  return result;
}

void sub_18457CDAC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&_all_hosts_lock);
  _Unwind_Resume(a1);
}

uint64_t CA::OGL::Renderer::collect(CA::OGL::Renderer *this, const CA::Render::Update *a2, double a3)
{
  uint64_t v6;
  int v7;

  v6 = *(_QWORD *)this;
  if (a2)
  {
    v7 = *((_DWORD *)a2 + 64);
    *(_DWORD *)(v6 + 212) = *((_DWORD *)a2 + 62);
    *(_DWORD *)(v6 + 216) = v7;
    CA::Render::Update::release_objects((unint64_t *)a2);
    v6 = *(_QWORD *)this;
  }
  else
  {
    *(_QWORD *)(v6 + 212) = -1;
  }
  *(double *)(v6 + 224) = a3;
  return (*(uint64_t (**)(uint64_t, BOOL))(*(_QWORD *)v6 + 216))(v6, a2 == 0);
}

uint64_t CAImageQueueSetEnhancementMode(uint64_t result, char a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 48);
  if (v2)
  {
    *(_BYTE *)(*(_QWORD *)(v2 + 24) + 94) = a2;
    __dmb(0xBu);
  }
  return result;
}

void CA::Display::Display::~Display(CFTypeRef *this)
{
  malloc_zone_t *malloc_zone;

  CA::Display::Display::~Display(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  CFTypeRef v2;
  CFTypeRef v3;
  CFTypeRef v4;
  void *v5;

  *this = off_1E15999B0;
  CFRelease(this[11]);
  CFRelease(this[12]);
  v2 = this[16];
  if (v2)
    CFRelease(v2);
  v3 = this[17];
  if (v3)
    CFRelease(v3);
  v4 = this[18];
  if (v4)
    CFRelease(v4);
  _Block_release(this[14]);
  _Block_release(this[91]);
  CA::MachPortUtil::ClientIPC::destroy((CA::MachPortUtil::ClientIPC *)(this + 92));
  CA::Display::DisplayTimingsControl::~DisplayTimingsControl((CA::Display::DisplayTimingsControl *)(this + 58));
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)(this + 25));
  std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(this[23]);
  v5 = (void *)this[19];
  if (v5)
  {
    this[20] = v5;
    operator delete(v5);
  }
}

void sub_18457D0B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  CA::Display::DisplayTimingsControl::~DisplayTimingsControl((CA::Display::DisplayTimingsControl *)(v1 + 464));
  CA::WindowServer::Display::ModeSet::~ModeSet((CA::WindowServer::Display::ModeSet *)(v1 + 152));
  _Unwind_Resume(a1);
}

void CA::Display::DisplayTimingsControl::~DisplayTimingsControl(CA::Display::DisplayTimingsControl *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  void *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *(_QWORD *)this = &off_1E1599990;
  v2 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *((_QWORD *)this + 3) = 0;
  _Block_release(*((const void **)this + 23));
  v6 = (void *)*((_QWORD *)this + 20);
  if (v6)
  {
    *((_QWORD *)this + 21) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 14);
  if (v7)
  {
    *((_QWORD *)this + 15) = v7;
    operator delete(v7);
  }
  v8 = (unsigned int *)*((_QWORD *)this + 2);
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
  }
}

{
  CA::Display::DisplayTimingsControl::~DisplayTimingsControl(this);
  JUMPOUT(0x186DBD990);
}

void sub_18457D188(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = (void *)v1[20];
  if (v3)
  {
    v1[21] = v3;
    operator delete(v3);
  }
  v4 = (void *)v1[14];
  if (v4)
  {
    v1[15] = v4;
    operator delete(v4);
  }
  v5 = (unsigned int *)v1[2];
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CAGetMaximumImageBytes()
{
  return *((_QWORD *)CAGetStatsStruct(0) + 1);
}

void sub_18457D364(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN2CA2CG13AccelRenderer20add_suspend_observerEv_block_invoke()
{
  CA::Render::add_observer(0x32u, 0, (uint64_t)CA::CG::AccelRenderer::will_suspend, 0, 0);
  CA::Render::add_observer(0x33u, 0, (uint64_t)CA::CG::AccelRenderer::will_suspend, 0, 0);
  CA::Render::add_observer(0x31u, 0, (uint64_t)CA::CG::AccelRenderer::will_suspend, 0, 0);
}

CA::OGL::Context *CA::OGL::Context::Context(CA::OGL::Context *this)
{
  unsigned int v2;
  unsigned int v3;
  CGColorSpace *v4;

  *(_QWORD *)this = off_1E1595510;
  do
  {
    v2 = __ldaxr(CA::OGL::Context::_next_context_id);
    v3 = v2 + 1;
  }
  while (__stlxr(v3, CA::OGL::Context::_next_context_id));
  *((_DWORD *)this + 2) = v3;
  *((_DWORD *)this + 38) = 1074664571;
  *(_OWORD *)((char *)this + 184) = xmmword_18474E240;
  *((_DWORD *)this + 72) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_DWORD *)this + 106) = 64;
  *((_DWORD *)this + 199) = 1056964608;
  *((_WORD *)this + 408) |= 4u;
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  if (CA::OGL::Context::Context(void)::once != -1)
    dispatch_once(&CA::OGL::Context::Context(void)::once, &__block_literal_global_3005);
  *((_QWORD *)this + 44) = (char *)this + 352;
  *((_QWORD *)this + 45) = (char *)this + 352;
  *((_QWORD *)this + 47) = 0x800000;
  *((_QWORD *)this + 34) = x_hash_table_new_(0, 0, 0, 0, 0, 0);
  *((_QWORD *)this + 37) = x_hash_table_new_(0, 0, 0, 0, 0, 0);
  *((_DWORD *)this + 104) = global_feature_flags;
  CA::Render::add_observer(3u, 0, (uint64_t)CA::OGL::Context::image_deleted, (uint64_t)this, 0);
  CA::Render::add_observer(0xBu, 0, (uint64_t)CA::OGL::Context::image_volatile, (uint64_t)this, 0);
  v4 = (CGColorSpace *)CAGetColorSpace(0x1Du);
  CA::OGL::Context::set_colorspace(this, v4);
  return this;
}

void CA::Render::add_observer(unsigned int a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  malloc_zone_t *malloc_zone;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  __int128 *v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD *i;
  unint64_t v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  int8x8_t prime;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  uint64_t v49;
  int64x2_t *v50;
  char *v51;

  if (a1 > 0x49)
    return;
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v11 = malloc_type_zone_malloc(malloc_zone, 0x50uLL, 0x8BB15036uLL);
  v11[5] = a3;
  v11[6] = a2;
  v11[7] = a4;
  *((_BYTE *)v11 + 76) = a5;
  *((_BYTE *)v11 + 77) = 0;
  v11[8] = dispatch_semaphore_create(1);
  *((_DWORD *)v11 + 18) = 0;
  *v11 = v11;
  v11[1] = v11;
  v12 = (char *)(v11 + 2);
  v11[2] = v11 + 2;
  v11[3] = v11 + 2;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::notification_lock);
  if ((CA::Render::initialize_notifications(void)::initialized & 1) == 0)
  {
    v49 = 0;
    v50 = (int64x2_t *)CA::Render::notifications;
    do
    {
      v51 = (char *)&CA::Render::notifications_map_data + v49;
      *(_OWORD *)v51 = 0uLL;
      *((_OWORD *)v51 + 1) = 0uLL;
      *((_DWORD *)v51 + 8) = 1065353216;
      *v50 = vdupq_n_s64((unint64_t)v50);
      ++v50;
      v49 += 40;
    }
    while (v49 != 2960);
    CA::Render::initialize_notifications(void)::initialized = 1;
  }
  v13 = CA::Render::add_observer(CA::Render::NotificationName,CA::Render::Object *,void (*)(CA::Render::Object *,void *,void *),void *,BOOL)::order++;
  v11[4] = v13;
  v14 = &CA::Render::notifications[a1];
  v15 = (_QWORD *)*((_QWORD *)v14 + 1);
  *((_QWORD *)v14 + 1) = v11;
  *v11 = v14;
  *v15 = v11;
  v11[1] = v15;
  v16 = (char *)&CA::Render::notifications_map_data + 40 * a1;
  v17 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v18 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v17 >> 47) ^ v17);
  v19 = 0x9DDFEA08EB382D69 * (v18 ^ (v18 >> 47));
  v20 = *((_QWORD *)v16 + 1);
  if (v20)
  {
    v21 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.u32[0] > 1uLL)
    {
      v22 = 0x9DDFEA08EB382D69 * (v18 ^ (v18 >> 47));
      if (v19 >= v20)
        v22 = v19 % v20;
    }
    else
    {
      v22 = v19 & (v20 - 1);
    }
    v23 = *(_QWORD ***)(*(_QWORD *)v16 + 8 * v22);
    if (v23)
    {
      for (i = *v23; i; i = (_QWORD *)*i)
      {
        v25 = i[1];
        if (v25 == v19)
        {
          if (i[2] == a2)
            goto LABEL_76;
        }
        else
        {
          if (v21.u32[0] > 1uLL)
          {
            if (v25 >= v20)
              v25 %= v20;
          }
          else
          {
            v25 &= v20 - 1;
          }
          if (v25 != v22)
            break;
        }
      }
    }
  }
  else
  {
    v22 = 0;
  }
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = v19;
  i[3] = 0;
  i[4] = 0;
  i[2] = a2;
  v26 = (float)(unint64_t)(*((_QWORD *)v16 + 3) + 1);
  v27 = *((float *)v16 + 8);
  if (!v20 || (float)(v27 * (float)v20) < v26)
  {
    v28 = 1;
    if (v20 >= 3)
      v28 = (v20 & (v20 - 1)) != 0;
    v29 = v28 | (2 * v20);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      prime = (int8x8_t)v30;
    else
      prime = (int8x8_t)v29;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v20 = *((_QWORD *)v16 + 1);
    }
    if (*(_QWORD *)&prime > v20)
      goto LABEL_32;
    if (*(_QWORD *)&prime < v20)
    {
      v38 = vcvtps_u32_f32((float)*((unint64_t *)v16 + 3) / *((float *)v16 + 8));
      if (v20 < 3 || (v39 = (uint8x8_t)vcnt_s8((int8x8_t)v20), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (*(_QWORD *)&prime <= v38)
        prime = (int8x8_t)v38;
      if (*(_QWORD *)&prime >= v20)
      {
        v20 = *((_QWORD *)v16 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v32 = operator new(8 * *(_QWORD *)&prime);
          v33 = *(void **)v16;
          *(_QWORD *)v16 = v32;
          if (v33)
            operator delete(v33);
          v34 = 0;
          *((int8x8_t *)v16 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)v16 + 8 * v34++) = 0;
          while (*(_QWORD *)&prime != v34);
          v35 = (_QWORD *)*((_QWORD *)v16 + 2);
          if (v35)
          {
            v36 = v35[1];
            v37 = (uint8x8_t)vcnt_s8(prime);
            v37.i16[0] = vaddlv_u8(v37);
            if (v37.u32[0] > 1uLL)
            {
              if (v36 >= *(_QWORD *)&prime)
                v36 %= *(_QWORD *)&prime;
            }
            else
            {
              v36 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)v16 + 8 * v36) = v16 + 16;
            v41 = (_QWORD *)*v35;
            if (*v35)
            {
              do
              {
                v42 = v41[1];
                if (v37.u32[0] > 1uLL)
                {
                  if (v42 >= *(_QWORD *)&prime)
                    v42 %= *(_QWORD *)&prime;
                }
                else
                {
                  v42 &= *(_QWORD *)&prime - 1;
                }
                if (v42 != v36)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v16 + 8 * v42))
                  {
                    *(_QWORD *)(*(_QWORD *)v16 + 8 * v42) = v35;
                    goto LABEL_57;
                  }
                  *v35 = *v41;
                  *v41 = **(_QWORD **)(*(_QWORD *)v16 + 8 * v42);
                  **(_QWORD **)(*(_QWORD *)v16 + 8 * v42) = v41;
                  v41 = v35;
                }
                v42 = v36;
LABEL_57:
                v35 = v41;
                v41 = (_QWORD *)*v41;
                v36 = v42;
              }
              while (v41);
            }
          }
          v20 = (unint64_t)prime;
          goto LABEL_61;
        }
        v48 = *(void **)v16;
        *(_QWORD *)v16 = 0;
        if (v48)
          operator delete(v48);
        v20 = 0;
        *((_QWORD *)v16 + 1) = 0;
      }
    }
LABEL_61:
    if ((v20 & (v20 - 1)) != 0)
    {
      if (v19 >= v20)
        v22 = v19 % v20;
      else
        v22 = v19;
    }
    else
    {
      v22 = (v20 - 1) & v19;
    }
  }
  v43 = *(_QWORD *)v16;
  v44 = *(_QWORD **)(*(_QWORD *)v16 + 8 * v22);
  if (v44)
  {
    *i = *v44;
  }
  else
  {
    *i = *((_QWORD *)v16 + 2);
    *((_QWORD *)v16 + 2) = i;
    *(_QWORD *)(v43 + 8 * v22) = v16 + 16;
    if (!*i)
      goto LABEL_75;
    v45 = *(_QWORD *)(*i + 8);
    if ((v20 & (v20 - 1)) != 0)
    {
      if (v45 >= v20)
        v45 %= v20;
    }
    else
    {
      v45 &= v20 - 1;
    }
    v44 = (_QWORD *)(*(_QWORD *)v16 + 8 * v45);
  }
  *v44 = i;
LABEL_75:
  ++*((_QWORD *)v16 + 3);
LABEL_76:
  v46 = i + 3;
  v47 = (_QWORD *)i[4];
  if (!v47)
  {
    *v46 = v46;
    v47 = i + 3;
  }
  i[4] = v12;
  v11[2] = v46;
  *v47 = v12;
  v11[3] = v47;
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::notification_lock);
  if (CA::Render::memory_once[0] != -1)
    dispatch_once_f(CA::Render::memory_once, 0, (dispatch_function_t)CA::Render::init_memory_warnings_);
}

uint64_t CAImageQueueCreate(int a1, int a2, unsigned int a3)
{
  uint64_t result;

  result = CAImageQueueCreate_(0, a3);
  if (result)
  {
    *(_DWORD *)(result + 32) = a1;
    *(_DWORD *)(result + 36) = a2;
  }
  return result;
}

uint64_t CAImageQueueCreate_(int a1, unsigned int a2)
{
  size_t v2;
  uint64_t Instance;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  if (a2)
    v2 = a2;
  else
    v2 = 16;
  if (v2 - 65537 < 0xFFFFFFFFFFFF0000)
    return 0;
  if (!CAImageQueueGetTypeID::type)
    CAImageQueueGetTypeID::type = _CFRuntimeRegisterClass();
  Instance = _CFRuntimeCreateInstance();
  v5 = Instance;
  if (Instance)
  {
    bzero((void *)(Instance + 16), 16 * v2 + 224);
    *(_DWORD *)(v5 + 16) = 0;
    *(_DWORD *)(v5 + 20) = a1;
    do
    {
      v6 = __ldaxr(CA::Render::next_sequence(void)::sequence);
      v7 = __stlxr(v6 + 1, CA::Render::next_sequence(void)::sequence);
      v8 = __CFADD__(v6, 1);
      v9 = v6 + 1;
      v10 = v8;
    }
    while (v7 || (v10 & 1) != 0);
    *(_DWORD *)(v5 + 28) = v9;
    *(_DWORD *)(v5 + 40) = v2;
    *(_QWORD *)(v5 + 184) = v5 + 240;
    *(_QWORD *)(v5 + 192) = v5 + 240 + 8 * v2;
    *(_QWORD *)(v5 + 48) = CA::Render::Shmem::new_shmem((CA::Render::Shmem *)(160 * v2 + 456));
    *(_QWORD *)(v5 + 64) = malloc_type_calloc(8uLL, v2, 0x7E4E059FuLL);
    v11 = *(_QWORD *)(v5 + 48);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 24);
      *(_DWORD *)(v12 + 284) = -1;
      *(_QWORD *)(v12 + 208) = 0x3FF0000000000000;
      *(_QWORD *)(v12 + 160) = 0x3FF0000000000000;
      *(_OWORD *)(v12 + 224) = xmmword_18474E5F0;
      *(_OWORD *)(v12 + 176) = xmmword_18474E5F0;
      *(_QWORD *)(v12 + 240) = 0x7FF0000000000000;
      *(_QWORD *)(v12 + 192) = 0x7FF0000000000000;
      *(_DWORD *)(v12 + 448) = a1;
      return v5;
    }
    CFRelease((CFTypeRef)v5);
    return 0;
  }
  return v5;
}

uint64_t CAImageQueueSetCollectableCallback(uint64_t result, NSObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  malloc_zone_t *malloc_zone;
  NSObject *v12;
  int v13;

  if (*(_QWORD *)(result + 48))
  {
    v7 = result;
    pthread_mutex_lock(&collectable_mutex);
    if (*(NSObject **)(v7 + 72) == a2 && *(_QWORD *)(v7 + 96) == a3 && *(_QWORD *)(v7 + 104) == a4)
      return pthread_mutex_unlock(&collectable_mutex);
    while (*(_BYTE *)(v7 + 112))
      pthread_cond_wait(&collectable_cond, &collectable_mutex);
    v8 = *(_QWORD *)(v7 + 96);
    if (a3 || !v8)
    {
      if (!a3 || v8)
        goto LABEL_15;
      v10 = collectable_list;
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v9 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
      *v9 = v7;
      v9[1] = v10;
    }
    else
    {
      v9 = x_list_remove((_QWORD *)collectable_list, v7);
    }
    collectable_list = (uint64_t)v9;
LABEL_15:
    v12 = *(NSObject **)(v7 + 72);
    if (v12)
      dispatch_release(v12);
    *(_QWORD *)(v7 + 72) = a2;
    *(_QWORD *)(v7 + 96) = a3;
    *(_QWORD *)(v7 + 104) = a4;
    if (a2)
      dispatch_retain(a2);
    if (a3)
      v13 = *(_DWORD *)(v7 + 28);
    else
      v13 = 0;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 48) + 24) + 28) = v13;
    return pthread_mutex_unlock(&collectable_mutex);
  }
  return result;
}

uint64_t CA::CG::AccelRenderer::acquire(CA::CG::AccelRenderer *this, CA::CG::AccelDrawable *a2, CA::CG::AccelRenderer **a3, uint64_t a4, uint64_t a5, const __CFString *a6, const __CFString *a7)
{
  void *v10;
  const __CFString *v11;
  uint64_t AppBooleanValue;
  void *v13;
  void *v14;
  BOOL v15;
  int v16;
  uint64_t i;
  int v18;
  os_unfair_lock_s *v19;
  BOOL v20;
  _QWORD *v21;
  int v22;
  CA::CG::AccelDrawable *v23;
  int v24;
  int v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  __n128 v31;
  _QWORD *v32;
  NSObject *v33;
  malloc_zone_t *malloc_zone;
  CA::OGL::Context *v35;
  CA::OGL::Context *v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  int v40;
  _BOOL8 v41;
  uint64_t v42;
  void *v43;
  void *BaseAddress;
  size_t BytesPerRow;
  size_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  size_t v52;
  void *v53;
  unsigned int v54;
  int v55;
  size_t v56;
  void *v57;
  __int128 v58;
  uint64_t v59;
  CGColorSpace *v60;
  BOOL v61;
  __int16 v67;
  int v68;
  uint64_t v69;
  __int16 v70;
  int v73;
  char v74;
  __int128 v75;
  Boolean keyExistsAndHasValidFormat;
  uint8_t buf[8];
  uint64_t v78;

  v73 = a4;
  v74 = a5;
  v78 = *MEMORY[0x1E0C80C00];
  v10 = (void *)MEMORY[0x186DBE2E4](this, a2, a3, a4, a5, a6, a7);
  if ((CAMetalContextIsWhippetEnabled::initialized & 1) == 0)
  {
    CAMetalContextIsWhippetEnabled::whippet_enabled = 1;
    keyExistsAndHasValidFormat = 0;
    v11 = (const __CFString *)*MEMORY[0x1E0C9B248];
    AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("CAEnableMetalWhippet"), (CFStringRef)*MEMORY[0x1E0C9B248], &keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat)
      CAMetalContextIsWhippetEnabled::whippet_enabled = (_DWORD)AppBooleanValue != 0;
    v13 = (void *)MEMORY[0x186DBE2E4](AppBooleanValue);
    v14 = v13;
    if (CAMetalContextAllowDynamicBackend(void)::initialized == 1)
    {
      v15 = CAMetalContextAllowDynamicBackend(void)::allow_dynamic_backend == 0;
      objc_autoreleasePoolPop(v13);
      if (!v15)
        goto LABEL_7;
      goto LABEL_6;
    }
    v20 = CFPreferencesGetAppBooleanValue(CFSTR("CADynamicBackendSwitching"), v11, 0) != 0;
    CAMetalContextAllowDynamicBackend(void)::allow_dynamic_backend = v20;
    CAMetalContextAllowDynamicBackend(void)::initialized = 1;
    objc_autoreleasePoolPop(v14);
    if (!v20)
LABEL_6:
      CAMetalContextIsWhippetEnabled::initialized = 1;
  }
LABEL_7:
  v16 = CAMetalContextIsWhippetEnabled::whippet_enabled;
  objc_autoreleasePoolPop(v10);
  i = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_17;
  if (os_unfair_lock_trylock((os_unfair_lock_t)(i + 4224)))
  {
    if (*(CA::CG::AccelDrawable **)(i + 4240) != a2
      || *(CA::CG::AccelRenderer **)(i + 4264) != this
      || a3 && *(CA::CG::AccelRenderer ***)(i + 144) != a3)
    {
      goto LABEL_15;
    }
    v18 = *(_DWORD *)(i + 4232);
    if (v16)
    {
      if (v18)
      {
LABEL_15:
        os_unfair_lock_unlock((os_unfair_lock_t)(i + 4224));
        goto LABEL_16;
      }
    }
    else if (!v18)
    {
      goto LABEL_15;
    }
    *(_BYTE *)(i + 4228) = 1;
LABEL_105:
    *(_DWORD *)(*(_QWORD *)(i + 8) + 336) = v73;
    return i;
  }
LABEL_16:
  *(_QWORD *)a2 = 0;
LABEL_17:
  v19 = (os_unfair_lock_s *)&CA::CG::AccelRenderer::_list_lock;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
  i = CA::CG::AccelRenderer::_list;
  if (!CA::CG::AccelRenderer::_list)
    goto LABEL_32;
  while (*(_BYTE *)(i + 4228))
  {
LABEL_21:
    i = *(_QWORD *)(i + 4272);
    if (!i)
    {
      v19 = (os_unfair_lock_s *)&CA::CG::AccelRenderer::_list_lock;
      goto LABEL_32;
    }
  }
  v19 = (os_unfair_lock_s *)(i + 4224);
  os_unfair_lock_lock((os_unfair_lock_t)(i + 4224));
  if (*(CA::CG::AccelRenderer **)(i + 4264) != this)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(i + 4224));
    goto LABEL_21;
  }
  v21 = *(_QWORD **)(i + 4240);
  if (v21)
  {
    *v21 = 0;
    *(_QWORD *)(i + 4240) = 0;
  }
  if (a3 && *(CA::CG::AccelRenderer ***)(i + 144) != a3)
  {
LABEL_31:
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
    CA::CG::AccelRenderer::detach_surface((CFTypeRef *)i, 0);
LABEL_32:
    os_unfair_lock_unlock(v19);
    if ((v74 & 1) != 0)
      return 0;
    v23 = a2;
    v24 = *((_DWORD *)this + 16) | 1;
    os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
    for (i = CA::CG::AccelRenderer::_list; i; i = *(_QWORD *)(i + 4272))
    {
      if (!*(_BYTE *)(i + 4228))
      {
        os_unfair_lock_lock((os_unfair_lock_t)(i + 4224));
        if (!a3 || *(CA::CG::AccelRenderer ***)(i + 144) == a3)
        {
          v25 = *(_DWORD *)(i + 4232);
          if (!v16 || v25)
          {
            if (v25 == 1
              && ((*(uint64_t (**)(CA::CG::AccelRenderer *))(*(_QWORD *)this + 40))(this) & 1) == 0)
            {
LABEL_53:
              v32 = *(_QWORD **)(i + 4240);
              if (v32)
                *v32 = 0;
              *(_QWORD *)(i + 4240) = v23;
              *(_QWORD *)v23 = i;
              os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
              goto LABEL_64;
            }
          }
          else if (*(_DWORD *)(*(_QWORD *)(i + 8) + 416) == v24)
          {
            goto LABEL_53;
          }
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(i + 4224));
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
    if (v16)
    {
      v26 = CAMetalContextCreate();
      if (v26)
      {
        v27 = v26;
        v28 = CA::OGL::new_metal_context(v26, 0, 13, v24, 0, a6);
        if (v28)
        {
          v29 = v28;
          v30 = *((_DWORD *)this + 15);
          if (v30)
            *(_DWORD *)(v28 + 424) = v30;
          i = operator new();
          *(_QWORD *)(CA::CG::AccelRenderer::AccelRenderer(i, v29, 0) + 144) = a3;

LABEL_64:
          if (*(CA::CG::AccelRenderer **)(i + 4264) == this)
          {
LABEL_104:
            *(_BYTE *)(i + 4228) = 1;
            goto LABEL_105;
          }
          v37 = *(_QWORD *)(i + 8);
          if ((*(_WORD *)(v37 + 816) & 0x80) != 0)
          {
            v38 = mach_absolute_time();
            v39 = CATimeWithHostTime(v38);
            CARecordFrame(*(_DWORD *)(v37 + 688), *(_DWORD *)(v37 + 692), *(_DWORD *)(v37 + 696), 1, v39, 0.0, (double)*(unint64_t *)(v37 + 712));
            v31.n128_f64[0] = CA::OGL::Context::reset_statistics(*(CA::OGL::Context **)(i + 8));
          }
          v40 = *(_DWORD *)(i + 4232);
          if (v40 == 1)
          {
            v42 = (*(uint64_t (**)(CA::CG::AccelRenderer *, __n128))(*(_QWORD *)this + 24))(this, v31);
            if (*(_QWORD *)(i + 4256) != v42)
            {
              v43 = (void *)v42;
              CA::CG::AccelRenderer::unlock_surface((CA::CG::AccelRenderer *)i);
              if (v43)
              {
                *(_QWORD *)(i + 4256) = v43;
                CFRetain(v43);
                IOSurfaceLock((IOSurfaceRef)v43, 0, 0);
                BaseAddress = IOSurfaceGetBaseAddress((IOSurfaceRef)v43);
                BytesPerRow = IOSurfaceGetBytesPerRow((IOSurfaceRef)v43);
                v46 = 0;
                v47 = 0;
                v48 = 0;
                v49 = 0;
                v50 = 0;
                v51 = 0;
                v52 = 0;
                v53 = 0;
                v54 = 0;
                v55 = 8;
                v56 = BytesPerRow;
                v57 = BaseAddress;
                switch(*((_DWORD *)this + 4))
                {
                  case 1:
                    v55 = 32;
                    v46 = BytesPerRow;
                    v47 = BaseAddress;
                    goto LABEL_84;
                  case 3:
                    v46 = 0;
                    v47 = 0;
                    v55 = 32;
                    goto LABEL_84;
                  case 5:
                    v46 = 0;
                    v47 = 0;
                    v55 = 15;
                    goto LABEL_84;
                  case 9:
                    break;
                  case 0xA:
LABEL_84:
                    if (BaseAddress)
                    {
                      v48 = *((unsigned int *)this + 9);
                      v49 = *((unsigned int *)this + 10);
                      v56 = v46;
                      v52 = BytesPerRow;
                      v57 = v47;
                      v53 = BaseAddress;
                      v54 = v55;
                      v50 = *((_DWORD *)this + 13);
                      v51 = *((_DWORD *)this + 14);
                    }
                    else
                    {
                      v48 = 0;
                      v49 = 0;
                      v50 = 0;
                      v51 = 0;
                      v53 = 0;
                      v56 = v46;
                      v52 = BytesPerRow;
                      v57 = v47;
                      v54 = v55;
                    }
                    break;
                  default:
                    goto LABEL_81;
                }
              }
              else
              {
LABEL_81:
                v48 = 0;
                v49 = 0;
                v50 = 0;
                v51 = 0;
                v56 = 0;
                v52 = 0;
                v57 = 0;
                v53 = 0;
                v54 = 0;
              }
              (*(void (**)(_QWORD, void *, size_t, _QWORD, void *, size_t, uint64_t, uint64_t, unint64_t))(**(_QWORD **)(i + 8) + 1064))(*(_QWORD *)(i + 8), v53, v52, v54, v57, v56, v48, v49, __PAIR64__(v51, v50));
            }
            goto LABEL_88;
          }
          if (v40)
          {
LABEL_88:
            v58 = *(_OWORD *)((char *)this + 36);
            *((_QWORD *)&v58 + 1) = *(_QWORD *)((char *)this + 52);
            v75 = v58;
            CA::CG::Renderer::end_rendering((CA::CG::Renderer *)i);
            *(_OWORD *)(i + 16) = v75;
            v59 = *(_QWORD *)(i + 8);
            if (v59)
            {
              *(_OWORD *)(v59 + 184) = v75;
              v60 = (CGColorSpace *)*((_QWORD *)this + 3);
              if (*(CGColorSpace **)(v59 + 144) != v60)
              {
                CA::OGL::Context::set_colorspace((CA::OGL::Context *)v59, *((CGColorSpace **)this + 3));
                v61 = CGColorSpaceUsesExtendedRange(v60);
                *((_BYTE *)CA::OGL::Context::color_program_cache(*(CA::OGL::Context **)(i + 8)) + 65) = !v61;
                CA::OGL::Mosaic::purge((CA::OGL::Mosaic *)(i + 1584));
                CA::OGL::Mosaic::purge((CA::OGL::Mosaic *)(i + 1776));
                CA::OGL::Mosaic::purge((CA::OGL::Mosaic *)(i + 1968));
                CA::OGL::Mosaic::purge((CA::OGL::Mosaic *)(i + 2160));
                CA::OGL::Mosaic::purge((CA::OGL::Mosaic *)(i + 2352));
              }
            }
            if (*(double *)(i + 80) != 1.0)
            {
              __asm { FMOV            V0.2D, #1.0 }
              *(_OWORD *)(i + 80) = _Q0;
              *(_QWORD *)(i + 96) = 0;
              *(_QWORD *)(i + 104) = 0;
              *(_QWORD *)(i + 120) = 0;
              *(_QWORD *)(i + 128) = 0;
              *(_QWORD *)(i + 112) = 0x3FF0000000000000;
            }
            *(_BYTE *)(i + 4176) = *(_BYTE *)(i + 4176) & 0xF9 | (4 * *((_BYTE *)this + 69));
            *(_QWORD *)(i + 4264) = this;
            if (((*((unsigned int *)this + 4) < 0x24uLL) & (0xC99B4EB03uLL >> *((_DWORD *)this + 4))) != 0)
              v67 = 4;
            else
              v67 = 0;
            *(_WORD *)(*(_QWORD *)(i + 8) + 816) = *(_WORD *)(*(_QWORD *)(i + 8) + 816) & 0xFFFB | v67;
            v68 = *((_DWORD *)this + 4);
            switch(v68)
            {
              case 18:
                v69 = *(_QWORD *)(i + 8);
                v70 = *(_WORD *)(v69 + 816) & 0x8FFF | 0x2000;
                break;
              case 10:
                v69 = *(_QWORD *)(i + 8);
                v70 = *(_WORD *)(v69 + 816) & 0x8FFF | 0x3000;
                break;
              case 9:
                v69 = *(_QWORD *)(i + 8);
                v70 = *(_WORD *)(v69 + 816) & 0x8FFF | 0x1000;
                break;
              default:
                v69 = *(_QWORD *)(i + 8);
                v70 = *(_WORD *)(v69 + 816) & 0x8FFF;
                break;
            }
            *(_WORD *)(v69 + 816) = v70;
            goto LABEL_104;
          }
          CA::CG::Renderer::end_rendering((CA::CG::Renderer *)i);
          v41 = (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(i + 8) + 184))(*(_QWORD *)(i + 8), 32) != 0;
          if ((*(unsigned int (**)(CA::CG::AccelRenderer *, _QWORD, _BOOL8))(*(_QWORD *)this + 48))(this, *(_QWORD *)(i + 8), v41))
          {
            (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(i + 8) + 80))(*(_QWORD *)(i + 8), 0, (*((_DWORD *)this + 12) - *((_DWORD *)this + 14)));
            if (!*(_QWORD *)(i + 4248))
              *(_QWORD *)(i + 4248) = (*(int (**)(_QWORD, uint64_t))(**(_QWORD **)(i + 8) + 184))(*(_QWORD *)(i + 8), 7);
            goto LABEL_88;
          }
          os_unfair_lock_unlock((os_unfair_lock_t)(i + 4224));
          return 0;
        }
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v33 = x_log_category_cg;
          if (os_log_type_enabled((os_log_t)x_log_category_cg, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v33, OS_LOG_TYPE_ERROR, "CoreAnimation: failed to create Metal context!\n", buf, 2u);
          }
        }

      }
    }
    if (((*(uint64_t (**)(CA::CG::AccelRenderer *))(*(_QWORD *)this + 40))(this) & 1) != 0)
      return 0;
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v35 = (CA::OGL::Context *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x5000uLL, 0x743898A5uLL);
    v36 = v35;
    if (v35)
    {
      bzero(v35, 0x5000uLL);
      CA::OGL::Context::Context(v36);
      *(_QWORD *)v36 = off_1E1595D70;
    }
    i = operator new();
    CA::CG::AccelRenderer::AccelRenderer(i, (uint64_t)v36, 1);
    goto LABEL_64;
  }
  v22 = *(_DWORD *)(i + 4232);
  if (!v16)
  {
    if (v22)
      goto LABEL_78;
    goto LABEL_31;
  }
  if (v22)
    goto LABEL_31;
LABEL_78:
  *(_QWORD *)(i + 4240) = a2;
  *(_QWORD *)a2 = i;
  *(_BYTE *)(i + 4228) = 1;
  *(_DWORD *)(*(_QWORD *)(i + 8) + 336) = v73;
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
  return i;
}

void sub_18457F078(_Unwind_Exception *a1)
{
  void *v1;

  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

void CAMarkStatistic(uint64_t a1, double a2)
{
  double v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  NSObject *v22;
  NSObject *v23;
  double v24;
  double v25;
  int v26;
  uint8_t buf[4];
  char *v28;
  uint8_t v29[24];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = *(double *)(a1 + 56);
  if (v4 <= 0.0)
  {
    *(double *)(a1 + 56) = a2;
  }
  else if (v4 + 1.0 < a2)
  {
    if (BYTE10(ca_debug_options))
    {
      memset(v29, 0, sizeof(v29));
      v5 = CARecordCurrentDisplayGet();
      if ((_DWORD)v5)
        x_stream_printf((uint64_t)v29, "display %u: ", v6, v7, v8, v9, v10, v11, (uint64_t)v5);
      x_stream_printf((uint64_t)v29, "%d transactions", v6, v7, v8, v9, v10, v11, (*(_DWORD *)(a1 + 16) - *(_DWORD *)(a1 + 80)));
      v18 = (*(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 84));
      if ((_DWORD)v18)
        x_stream_printf((uint64_t)v29, "; %d %s (%.3gs duration, %.3gfps frame rate, %.3g %s, %.2gs gap)",
          v12,
          v13,
          v14,
          v15,
          v16,
          v17,
          v18);
      v19 = (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 92));
      if ((_DWORD)v19)
        x_stream_printf((uint64_t)v29, "; %d cache miss%s", v12, v13, v14, v15, v16, v17, v19);
      v20 = *(double *)(a1 + 40);
      if (v20 != 0.0)
        x_stream_printf((uint64_t)v29, "; %.3g MP area", v12, v13, v14, v15, v16, v17, COERCE__INT64(v20 * 0.000001));
      if (*(_DWORD *)(a1 + 28))
        x_stream_printf((uint64_t)v29, "; %d draw calls", v12, v13, v14, v15, v16, v17, *(unsigned int *)(a1 + 28));
      v21 = *(double *)(a1 + 48);
      if (v21 != 0.0)
        x_stream_printf((uint64_t)v29, "; %.3g MB uploaded", v12, v13, v14, v15, v16, v17, COERCE__INT64(v21 * 0.000001));
      if (x_log_hook_p())
      {
        x_stream_get(v29);
        x_log_();
      }
      else
      {
        v22 = x_log_category_CADebug;
        if (os_log_type_enabled((os_log_t)x_log_category_CADebug, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v28 = x_stream_get(v29);
          _os_log_impl(&dword_184457000, v22, OS_LOG_TYPE_DEFAULT, "%s\n", buf, 0xCu);
        }
      }
      if (*(_QWORD *)v29)
        free(*(void **)v29);
    }
    if (BYTE8(ca_debug_options))
    {
      if (x_log_hook_p())
      {
        CAGetStatsStruct(0);
        CAGetStatsStruct(0);
        x_log_();
      }
      else
      {
        v23 = x_log_category_CADebug;
        if (os_log_type_enabled((os_log_t)x_log_category_CADebug, OS_LOG_TYPE_DEFAULT))
        {
          v24 = (double)*(unint64_t *)CAGetStatsStruct(0) * 0.000001;
          v25 = (double)*((unint64_t *)CAGetStatsStruct(0) + 1) * 0.000001;
          *(_DWORD *)v29 = 134218240;
          *(double *)&v29[4] = v24;
          *(_WORD *)&v29[12] = 2048;
          *(double *)&v29[14] = v25;
          _os_log_impl(&dword_184457000, v23, OS_LOG_TYPE_DEFAULT, "CoreAnimation buffers: currently %.3gMB; maximum %.3gMB\n",
            v29,
            0x16u);
        }
      }
    }
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 16);
    v26 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 92) = v26;
    *(double *)(a1 + 56) = a2;
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 28) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
  }
}

void CA::OGL::MetalContext::set_destination_offset(CA::OGL::MetalContext *this, int a2, int a3)
{
  uint64_t v3;

  *((_DWORD *)this + 698) = a2;
  *((_DWORD *)this + 699) = a3;
  v3 = *((_QWORD *)this + 347);
  if (v3)
  {
    *(_DWORD *)(v3 + 32) = -a2;
    *(_DWORD *)(v3 + 36) = -a3;
    CA::OGL::MetalContext::update_projection_matrix(this);
    ++*((_DWORD *)this + 60);
  }
}

uint64_t CA::CG::IOSurfaceDrawable::set_as_destination(CA::CG::IOSurfaceDrawable *this, CA::OGL::Context *a2, uint64_t a3)
{
  return (*(uint64_t (**)(CA::OGL::Context *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, *((_QWORD *)this + 12), 1, a3);
}

uint64_t CA::OGL::new_metal_context(void *a1, void *a2, int a3, int a4, int a5, const __CFString *a6)
{
  void *v12;
  void *v13;
  NSObject *v14;
  id v15;
  void *v16;
  const __CFString *v17;
  NSObject *v18;
  NSObject *v19;
  malloc_zone_t *malloc_zone;
  CA::OGL::Context *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  void *v27;
  dispatch_queue_t v28;
  NSObject *v29;
  uint64_t result;
  NSObject *v31;
  NSObject *v32;
  char *v33;
  int v34;
  _WORD *v35;
  __int16 v36;
  __int16 v37;
  int v38;
  __int16 v39;
  __int16 v40;
  void *v41;
  int v42;
  malloc_zone_t *v43;
  char *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  id *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  id v53;
  void *v54;
  uint64_t v55;
  id v56;
  char *v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  NSObject *v70;
  const char *v71;
  id *v72;
  uint64_t v73;
  id v74;
  void *v75;
  id v76;
  char *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  NSObject *v91;
  uint64_t v92;
  unint64_t v93;
  float v94;
  int v95;
  void *v96;
  unint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  int v101;
  unint64_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  float v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  NSObject *v126;
  NSObject *v127;
  const char *v128;
  uint8_t *v129;
  uint64_t v130;
  void *v131;
  void *v132;
  int v133;
  void *context;
  void *v135;
  id v136;
  uint8_t v137[4];
  const char *v138;
  __int16 v139;
  uint8_t *v140;
  uint8_t buf[2047];
  char v142;
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  v12 = (void *)MEMORY[0x186DBE2E4]();
  v13 = (void *)MEMORY[0x186DBE2E4]();
  if (CA::_root_queue_once != -1)
    dispatch_once(&CA::_root_queue_once, &__block_literal_global_18816);
  v14 = CA::_root_queue;
  if (a2)
  {
    v15 = a2;
  }
  else
  {
    v16 = (void *)objc_msgSend(a1, "newCommandQueue");
    v15 = v16;
    if (a6)
      v17 = a6;
    else
      v17 = CFSTR("com.apple.coreanimation.command-queue");
    objc_msgSend(v16, "setLabel:", v17);
    if (v14)
    {
      v18 = dispatch_queue_create_with_target_V2("com.apple.coreanimation.mtl_submission", 0, v14);
      v19 = dispatch_queue_create_with_target_V2("com.apple.coreanimation.mtl_completion", 0, v14);
      objc_msgSend(v15, "setSubmissionQueue:", v18);
      objc_msgSend(v15, "setCompletionQueue:", v19);
      dispatch_release(v18);
      dispatch_release(v19);
    }
  }
  if (!v15)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v31 = x_log_category_ogl_metal;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v31, OS_LOG_TYPE_ERROR, "Failed to create MTLCommandQueue\n", buf, 2u);
      }
    }
    goto LABEL_30;
  }
  if ((void *)objc_msgSend(v15, "device") != a1)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v29 = x_log_category_ogl_metal;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v29, OS_LOG_TYPE_ERROR, "Mismatched MTLCommandQueue and MTLDevice\n", buf, 2u);
      }
    }

LABEL_30:
    v22 = 0;
    goto LABEL_31;
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v21 = (CA::OGL::Context *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0xFE0uLL, 0x743898A5uLL);
  v22 = (uint64_t)v21;
  if (!v21)
  {
LABEL_31:
    objc_autoreleasePoolPop(v13);
    if (a5)
    {
      if (v22)
      {
        objc_msgSend(*(id *)(v22 + 2912), "setGPUPriority:", qword_184753F88[a5 - 1]);
        *(_DWORD *)(v22 + 3048) = a5;
      }
    }
    objc_autoreleasePoolPop(v12);
    return v22;
  }
  v133 = a5;
  v135 = v13;
  CA::OGL::Context::Context(v21);
  *(_QWORD *)v22 = off_1E1594968;
  *(_OWORD *)(v22 + 1848) = 0u;
  *(_OWORD *)(v22 + 1864) = 0u;
  *(_DWORD *)(v22 + 1880) = 1065353216;
  pthread_mutex_init((pthread_mutex_t *)(v22 + 1888), 0);
  *(_OWORD *)(v22 + 1952) = 0u;
  *(_OWORD *)(v22 + 1968) = 0u;
  *(_DWORD *)(v22 + 1984) = 1065353216;
  v23 = pthread_mutex_init((pthread_mutex_t *)(v22 + 1992), 0);
  *(_OWORD *)(v22 + 2056) = 0u;
  *(_OWORD *)(v22 + 2072) = 0u;
  *(_DWORD *)(v22 + 2088) = 1065353216;
  *(_QWORD *)(v22 + 2096) = 0;
  *(_BYTE *)(v22 + 2104) = 0;
  *(_OWORD *)(v22 + 2560) = 0u;
  *(_OWORD *)(v22 + 2576) = 0u;
  *(_DWORD *)(v22 + 2592) = 1065353216;
  *(_DWORD *)(v22 + 2632) = 0;
  *(_OWORD *)(v22 + 2696) = 0u;
  *(_OWORD *)(v22 + 2712) = 0u;
  *(_DWORD *)(v22 + 2728) = 1065353216;
  *(_DWORD *)(v22 + 2744) = 0;
  *(_DWORD *)(v22 + 2760) = 0;
  *(_QWORD *)(v22 + 2784) = 0;
  *(_QWORD *)(v22 + 2864) = 0;
  *(_OWORD *)(v22 + 2872) = 0u;
  *(_DWORD *)(v22 + 2888) = 1065353216;
  *(_DWORD *)(v22 + 2892) = a3 | 8;
  *(_QWORD *)(v22 + 3032) = 0;
  *(_OWORD *)(v22 + 3016) = 0u;
  *(_OWORD *)(v22 + 3120) = xmmword_18474E4E0;
  *(_OWORD *)(v22 + 3136) = xmmword_18474E480;
  *(_OWORD *)(v22 + 3152) = xmmword_18474E020;
  *(_QWORD *)(v22 + 3168) = 0;
  *(_WORD *)(v22 + 3176) = 0;
  *(_QWORD *)(v22 + 3180) = 0x100000001;
  *(_OWORD *)(v22 + 3188) = 0u;
  *(_OWORD *)(v22 + 3204) = 0u;
  *(_BYTE *)(v22 + 3220) = 0;
  *(_DWORD *)(v22 + 3224) = 1065353216;
  *(_OWORD *)(v22 + 3228) = 0u;
  *(_DWORD *)(v22 + 3244) = -1;
  *(_OWORD *)(v22 + 3976) = 0u;
  context = (void *)MEMORY[0x186DBE2E4](v23);
  do
    v24 = __ldaxr(CA::OGL::MetalContext::_context_count);
  while (__stlxr(v24 + 1, CA::OGL::MetalContext::_context_count));
  v25 = *(_DWORD *)(v22 + 208);
  *(_DWORD *)(v22 + 208) = a4;
  *(_DWORD *)(v22 + 416) = global_feature_flags | a4;
  if (((v25 ^ a4) & 0x2000200) != 0)
    CA::OGL::Context::update_color_program_cache(v22);
  if (CA::OGL::MetalContext::MetalContext(objc_object  {objcproto9MTLDevice}*,objc_object  {objcproto15MTLCommandQueue}*,NSObject  {objcproto17OS_dispatch_queue}*,unsigned int,unsigned int)::once != -1)
    dispatch_once(&CA::OGL::MetalContext::MetalContext(objc_object  {objcproto9MTLDevice}*,objc_object  {objcproto15MTLCommandQueue}*,NSObject  {objcproto17OS_dispatch_queue}*,unsigned int,unsigned int)::once, &__block_literal_global_6795);
  *(_QWORD *)(v22 + 2904) = a1;
  v26 = 0;
  *(_QWORD *)(v22 + 3904) = (id)objc_msgSend(MEMORY[0x1E0CC6B50], "renderPassDescriptor");
  do
  {
    v27 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(v22 + 3904), "colorAttachments"), "objectAtIndexedSubscript:", v26);
    *(_QWORD *)(v22 + 8 * v26 + 3912) = v27;
    objc_msgSend(v27, "setClearColor:", 0.0, 0.0, 0.0, 0.0);
    ++v26;
  }
  while (v26 != 3);
  *(_QWORD *)(v22 + 3936) = objc_msgSend(a1, "newDepthStencilStateWithDescriptor:", (id)objc_opt_new());
  if (v14)
  {
    v28 = dispatch_queue_create_with_target_V2("com.apple.coreanimation.mtl_dealloc", 0, v14);
  }
  else
  {
    v32 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
    v28 = dispatch_queue_create("com.apple.coreanimation.mtl_dealloc", v32);
  }
  *(_QWORD *)(v22 + 3952) = v28;
  *(_QWORD *)(v22 + 2912) = v15;
  if ((a3 & 1) != 0)
    objc_msgSend(v15, "setBackgroundGPUPriority:", 2);
  if ((a3 & 2) == 0 && objc_msgSend(*(id *)(v22 + 2904), "supportsMemorylessRenderTargets"))
  {
    v33 = getenv("CA_ENABLE_MEMORYLESS");
    if (v33)
    {
      v34 = atoi(v33);
      v35 = (_WORD *)(v22 + 3280);
      v36 = *(_WORD *)(v22 + 3280);
      if (!v34)
      {
        v37 = 0;
LABEL_47:
        *v35 = v37 | v36 & 0xFFF7;
        goto LABEL_48;
      }
    }
    else
    {
      v35 = (_WORD *)(v22 + 3280);
      v36 = *(_WORD *)(v22 + 3280);
    }
    v37 = 8;
    goto LABEL_47;
  }
LABEL_48:
  v38 = objc_msgSend(*(id *)(v22 + 2904), "supportsMemorylessRenderTargets");
  v39 = *(_WORD *)(v22 + 3280);
  v40 = (2 * v39) & 0x10;
  if (!v38)
    v40 = 0;
  *(_WORD *)(v22 + 3280) = v39 & 0xFFEF | v40;
  *(_QWORD *)(v22 + 3000) = (id)objc_msgSend(MEMORY[0x1E0CC6A48], "sharedCaptureManager");
  if (CADeviceHasInternalBuild::once != -1)
    dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
  if (CADeviceHasInternalBuild::internal)
  {
    v41 = (void *)objc_msgSend(*(id *)(v22 + 3000), "newCaptureScopeWithCommandQueue:", *(_QWORD *)(v22 + 2912));
    *(_QWORD *)(v22 + 3008) = v41;
    objc_msgSend(v41, "setLabel:", CFSTR("CoreAnimation Renderer"));
    *(_WORD *)(v22 + 3280) &= ~4u;
  }
  v42 = objc_msgSend(a1, "minConstantBufferAlignmentBytes");
  v43 = (malloc_zone_t *)get_malloc_zone();
  v44 = (char *)malloc_type_zone_calloc(v43, 1uLL, 0x168uLL, 0x743898A5uLL);
  if (v44)
  {
    *(_QWORD *)v44 = a1;
    *(_OWORD *)(v44 + 8) = 0u;
    *(_OWORD *)(v44 + 24) = 0u;
    *((_DWORD *)v44 + 10) = 0;
    *((_DWORD *)v44 + 11) = v42;
    *((_DWORD *)v44 + 14) = 0;
    *((_QWORD *)v44 + 43) = 0;
    *((_QWORD *)v44 + 44) = 0;
    *((_OWORD *)v44 + 12) = 0u;
    *((_OWORD *)v44 + 13) = 0u;
    *((_OWORD *)v44 + 14) = 0u;
    *((_OWORD *)v44 + 15) = 0u;
    *((_OWORD *)v44 + 16) = 0u;
    *((_OWORD *)v44 + 17) = 0u;
    *((_OWORD *)v44 + 18) = 0u;
    *((_OWORD *)v44 + 19) = 0u;
    *((_OWORD *)v44 + 20) = 0u;
    *((_QWORD *)v44 + 42) = v44 + 344;
  }
  *(_QWORD *)(v22 + 3992) = v44;
  v45 = 0x1E0CB3000uLL;
  v46 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
  if (!v46)
    __assert_rtn("MetalContext", "ogl-metal.mm", 3429, "quartzcore_bundle != nil");
  v47 = objc_msgSend(v46, "URLForResource:withExtension:", CFSTR("default"), CFSTR("metallib"));
  if (!v47)
    __assert_rtn("MetalContext", "ogl-metal.mm", 3432, "metallib_url != nil");
  pthread_mutex_lock(&CA::OGL::MetalContext::_library_lock);
  v48 = (id *)CA::OGL::MetalContext::_libraries;
  v49 = qword_1EDD0FC48;
  if (CA::OGL::MetalContext::_libraries == (_UNKNOWN *)qword_1EDD0FC48)
  {
    v51 = *(void **)(v22 + 2904);
  }
  else
  {
    while (1)
    {
      v50 = objc_msgSend(*v48, "device");
      v51 = *(void **)(v22 + 2904);
      if ((void *)v50 == v51)
        break;
      if (++v48 == (id *)v49)
      {
        v48 = (id *)v49;
        break;
      }
    }
    if (v48 != (id *)qword_1EDD0FC48)
    {
      v52 = v12;
      v53 = *v48;
      v13 = v135;
      goto LABEL_77;
    }
  }
  v136 = 0;
  v131 = v12;
  v54 = (void *)objc_msgSend(v51, "newLibraryWithURL:error:", v47, &v136);
  v53 = v54;
  if (v54)
  {
    objc_msgSend(v54, "setLabel:", CFSTR("com.apple.coreanimation.metal-library"));
    v55 = v47;
    v56 = v53;
    v58 = CA::OGL::MetalContext::_libraries;
    v57 = (char *)qword_1EDD0FC48;
    v59 = (qword_1EDD0FC48 - (uint64_t)CA::OGL::MetalContext::_libraries) >> 3;
    if (qword_1EDD0FC58 < (unint64_t)(v59 + 1))
    {
      v130 = qword_1EDD0FC50;
      v60 = (qword_1EDD0FC58 + 1) | ((unint64_t)(qword_1EDD0FC58 + 1) >> 1) | (((qword_1EDD0FC58 + 1) | ((unint64_t)(qword_1EDD0FC58 + 1) >> 1)) >> 2);
      v61 = v60 | (v60 >> 4) | ((v60 | (v60 >> 4)) >> 8);
      v62 = v61 | (v61 >> 16) | ((v61 | (v61 >> 16)) >> 32);
      if (v62 + 1 > v59 + 1)
        v63 = v62 + 1;
      else
        v63 = v59 + 1;
      v64 = (char *)malloc_type_malloc(8 * v63, 0x80040B8603338uLL);
      v65 = v64;
      v66 = (uint64_t *)CA::OGL::MetalContext::_libraries;
      v67 = qword_1EDD0FC48;
      if (CA::OGL::MetalContext::_libraries != (_UNKNOWN *)qword_1EDD0FC48)
      {
        v68 = v64;
        do
        {
          v69 = *v66++;
          *(_QWORD *)v68 = v69;
          v68 += 8;
        }
        while (v66 != (uint64_t *)v67);
      }
      if (v58 != (void *)v130)
        free(CA::OGL::MetalContext::_libraries);
      v57 = &v65[8 * v59];
      CA::OGL::MetalContext::_libraries = v65;
      qword_1EDD0FC48 = (uint64_t)v57;
      qword_1EDD0FC58 = v63;
    }
    *(_QWORD *)v57 = v56;
    qword_1EDD0FC48 += 8;
    v52 = v131;
    v13 = v135;
    v45 = 0x1E0CB3000uLL;
    v47 = v55;
LABEL_77:
    pthread_mutex_unlock(&CA::OGL::MetalContext::_library_lock);
    *(_QWORD *)(v22 + 3288) = v53;
    if (byte_1ECDC6AA8)
    {
      if (!x_log_hook_p())
      {
        v70 = x_log_category_ogl_metal;
        v12 = v52;
        if (!os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_DEFAULT))
          goto LABEL_118;
        *(_WORD *)buf = 0;
        v71 = "Precompiled pipelines disabled via debug option.";
        goto LABEL_100;
      }
      v12 = v52;
    }
    else
    {
      v12 = v52;
      if ((*(_BYTE *)(v22 + 418) & 0x20) == 0)
      {
        if (objc_msgSend(*(id *)(v22 + 3000), "supportsDestination:", 2))
        {
          if (x_log_hook_p())
            goto LABEL_89;
          v70 = x_log_category_ogl_metal;
          if (!os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_DEFAULT))
            goto LABEL_118;
          *(_WORD *)buf = 0;
          v71 = "Precompiled pipelines disabled for GPU frame capture.";
        }
        else
        {
          if (CADeviceIsVirtualized::once[0] != -1)
            dispatch_once(CADeviceIsVirtualized::once, &__block_literal_global_204);
          if (!CADeviceIsVirtualized::is_virtualized)
          {
            pthread_mutex_lock(&CA::OGL::MetalContext::_library_lock);
            v72 = (id *)CA::OGL::MetalContext::_binary_archives;
            v73 = qword_1EDD0FC18;
            if (CA::OGL::MetalContext::_binary_archives == (_UNKNOWN *)qword_1EDD0FC18)
              goto LABEL_101;
            while (objc_msgSend(*v72, "device") != *(_QWORD *)(v22 + 2904))
            {
              if (++v72 == (id *)v73)
              {
                v72 = (id *)v73;
                break;
              }
            }
            if (v72 == (id *)qword_1EDD0FC18)
            {
LABEL_101:
              v136 = 0;
              v75 = (void *)objc_opt_new();
              objc_msgSend(v75, "setUrl:", v47);
              objc_msgSend(v75, "setOptions:", objc_msgSend(v75, "options") | 0x20);
              v13 = v135;
              v74 = (id)objc_msgSend(*(id *)(v22 + 2904), "newBinaryArchiveWithDescriptor:error:", v75, &v136);

              if (v74)
              {
                objc_msgSend(v74, "setLabel:", CFSTR("com.apple.coreanimation.binary-archive"));
                v132 = v12;
                v76 = v74;
                v78 = CA::OGL::MetalContext::_binary_archives;
                v77 = (char *)qword_1EDD0FC18;
                v79 = (qword_1EDD0FC18 - (uint64_t)CA::OGL::MetalContext::_binary_archives) >> 3;
                if (qword_1EDD0FC28 < (unint64_t)(v79 + 1))
                {
                  v80 = qword_1EDD0FC20;
                  v81 = (qword_1EDD0FC28 + 1) | ((unint64_t)(qword_1EDD0FC28 + 1) >> 1) | (((qword_1EDD0FC28 + 1) | ((unint64_t)(qword_1EDD0FC28 + 1) >> 1)) >> 2);
                  v82 = v81 | (v81 >> 4) | ((v81 | (v81 >> 4)) >> 8);
                  v83 = v82 | (v82 >> 16) | ((v82 | (v82 >> 16)) >> 32);
                  if (v83 + 1 > v79 + 1)
                    v84 = v83 + 1;
                  else
                    v84 = v79 + 1;
                  v85 = (char *)malloc_type_malloc(8 * v84, 0x80040B8603338uLL);
                  v86 = v85;
                  v87 = (uint64_t *)CA::OGL::MetalContext::_binary_archives;
                  v88 = qword_1EDD0FC18;
                  if (CA::OGL::MetalContext::_binary_archives != (_UNKNOWN *)qword_1EDD0FC18)
                  {
                    v89 = v85;
                    do
                    {
                      v90 = *v87++;
                      *(_QWORD *)v89 = v90;
                      v89 += 8;
                    }
                    while (v87 != (uint64_t *)v88);
                  }
                  if (v78 != (void *)v80)
                    free(CA::OGL::MetalContext::_binary_archives);
                  v77 = &v86[8 * v79];
                  CA::OGL::MetalContext::_binary_archives = v86;
                  qword_1EDD0FC18 = (uint64_t)v77;
                  qword_1EDD0FC28 = v84;
                }
                *(_QWORD *)v77 = v76;
                qword_1EDD0FC18 += 8;
                v12 = v132;
                v13 = v135;
                v45 = 0x1E0CB3000;
              }
              else
              {
                bzero(buf, 0x7FFuLL);
                snprintf((char *)buf, 0x800uLL, "%s", (const char *)objc_msgSend((id)objc_msgSend(v136, "localizedDescription"), "UTF8String"));
                v142 = 0;
                if (x_log_hook_p())
                {
                  v128 = "Metal failed to load binary archive";
                  v129 = buf;
                  x_log_();
                }
                else
                {
                  v91 = x_log_category_ogl_metal;
                  if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_FAULT))
                  {
                    *(_DWORD *)v137 = 136315394;
                    v138 = "Metal failed to load binary archive";
                    v139 = 2080;
                    v140 = buf;
                    _os_log_impl(&dword_184457000, v91, OS_LOG_TYPE_FAULT, "%s: %s\n", v137, 0x16u);
                  }
                }
              }
            }
            else
            {
              v74 = *v72;
              v13 = v135;
            }
            pthread_mutex_unlock(&CA::OGL::MetalContext::_library_lock);
            *(_QWORD *)(v22 + 3296) = v74;
            goto LABEL_118;
          }
          if (x_log_hook_p())
            goto LABEL_89;
          v70 = x_log_category_ogl_metal;
          if (!os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_DEFAULT))
            goto LABEL_118;
          *(_WORD *)buf = 0;
          v71 = "Precompiled pipelines disabled on unsupported hardware.";
        }
LABEL_100:
        _os_log_impl(&dword_184457000, v70, OS_LOG_TYPE_DEFAULT, v71, buf, 2u);
        goto LABEL_118;
      }
      if (!x_log_hook_p())
      {
        v70 = x_log_category_ogl_metal;
        if (!os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_DEFAULT))
        {
LABEL_118:
          v92 = *(_QWORD *)(v22 + 2904);
          if (*(_QWORD *)(v22 + 168) != v92)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 1096))(v22);
            *(_QWORD *)(v22 + 168) = v92;
          }
          *(_QWORD *)(v22 + 72) = 0x4110000000000000;
          v93 = *(_QWORD *)(v22 + 2064);
          if (v93)
            v94 = (float)*(unint64_t *)(v22 + 2080) / (float)v93;
          else
            v94 = 0.0;
          a5 = v133;
          *(float *)(v22 + 2088) = fmaxf(v94, 0.5);
          *(_QWORD *)(v22 + 3096) = objc_alloc_init(MEMORY[0x1E0C99E08]);
          v95 = objc_msgSend(*(id *)(v22 + 2904), "supportsFamily:", 1001);
          v96 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(v22 + 2904), "vendorName"), "lowercaseString");
          v97 = objc_msgSend(*(id *)(v22 + 2904), "maxFragmentTextures");
          v98 = objc_msgSend(*(id *)(v22 + 2904), "maxFragmentSamplers");
          v99 = *(void **)(v22 + 2904);
          if (v97 >= v98)
            v100 = objc_msgSend(v99, "maxFragmentSamplers");
          else
            v100 = objc_msgSend(v99, "maxFragmentTextures");
          *(_QWORD *)(v22 + 2640) = v100;
          *(_QWORD *)(v22 + 2656) = objc_msgSend(*(id *)(v22 + 2904), "maxTextureWidth2D", v128, v129);
          *(_QWORD *)(v22 + 2648) = objc_msgSend(*(id *)(v22 + 2904), "maxTextureWidth2D");
          if ((unint64_t)objc_msgSend(*(id *)(v22 + 2904), "maxColorAttachments") > 2)
            v101 = 3;
          else
            v101 = objc_msgSend(*(id *)(v22 + 2904), "maxColorAttachments");
          *(_DWORD *)(v22 + 2672) = v101;
          v102 = *(_QWORD *)(v22 + 2648);
          if (v102 >= 0x2000)
            v102 = 0x2000;
          *(_QWORD *)(v22 + 2648) = v102;
          v103 = *(_DWORD *)(v22 + 2676) | 0x800;
          *(_DWORD *)(v22 + 2676) = v103;
          if (v95)
          {
            if (objc_msgSend(*(id *)(v22 + 2904), "supportsRasterOrderGroups"))
              v104 = 4096;
            else
              v104 = 0;
            v103 = *(_DWORD *)(v22 + 2676);
            v105 = 4;
            v106 = 8;
          }
          else
          {
            v106 = 0;
            v105 = 0;
            v104 = 0;
          }
          *(_DWORD *)(v22 + 2676) = v106 | v105 | v104 | v95 | v103 & 0xFFFFEFF2;
          if (objc_msgSend(*(id *)(v22 + 2904), "supportsFamily:", 1002))
            v107 = 2;
          else
            v107 = 0;
          *(_DWORD *)(v22 + 2676) = *(_DWORD *)(v22 + 2676) & 0xFFFFFFFD | v107;
          if (objc_msgSend(*(id *)(v22 + 2904), "supportsFamily:", 1002))
            v108 = 1024;
          else
            v108 = 0;
          *(_DWORD *)(v22 + 2676) = *(_DWORD *)(v22 + 2676) & 0xFFFFFBFF | v108;
          if (objc_msgSend(*(id *)(v22 + 2904), "supportsFamily:", 1002))
            v109 = 16;
          else
            v109 = 0;
          *(_DWORD *)(v22 + 2676) = *(_DWORD *)(v22 + 2676) & 0xFFFFFFEF | v109;
          if (objc_msgSend(*(id *)(v22 + 2904), "supportsFamily:", 1002))
            v110 = 512;
          else
            v110 = 0;
          *(_DWORD *)(v22 + 2676) = *(_DWORD *)(v22 + 2676) & 0xFFFFFDFF | v110;
          if (objc_msgSend(*(id *)(v22 + 2904), "supportsFamily:", 1003))
            v111 = 256;
          else
            v111 = 0;
          *(_DWORD *)(v22 + 2676) = *(_DWORD *)(v22 + 2676) & 0xFFFFFEFF | v111;
          if (objc_msgSend(*(id *)(v22 + 2904), "supportsFamily:", 1005))
            v112 = 128;
          else
            v112 = 0;
          *(_DWORD *)(v22 + 2676) = *(_DWORD *)(v22 + 2676) & 0xFFFFFF7F | v112;
          if (objc_msgSend(*(id *)(v22 + 2904), "supportsYCBCRFormats12"))
            v113 = 32;
          else
            v113 = 0;
          *(_DWORD *)(v22 + 2676) = *(_DWORD *)(v22 + 2676) & 0xFFFFFFDF | v113;
          NSSelectorFromString(CFSTR("supportsYCBCRPackedFormats12"));
          if ((objc_opt_respondsToSelector() & 1) != 0)
          {
            if (objc_msgSend(*(id *)(v22 + 2904), "supportsYCBCRPackedFormats12"))
              v114 = 64;
            else
              v114 = 0;
            *(_DWORD *)(v22 + 2676) = *(_DWORD *)(v22 + 2676) & 0xFFFFFFBF | v114;
          }
          v115 = MEMORY[0x186DBD438](*MEMORY[0x1E0CBBF08]);
          v116 = 16 * objc_msgSend(*(id *)(v22 + 2904), "maxTextureWidth2D");
          if (v115 > v116)
            v116 = v115;
          *(_QWORD *)(v22 + 2664) = v116;
          *(_DWORD *)(v22 + 2676) &= ~0x4000u;
          if (CADeviceVertexCoordinateSubpixelBits::once != -1)
            dispatch_once(&CADeviceVertexCoordinateSubpixelBits::once, &__block_literal_global_91);
          v117 = 0.5;
          if ((CADeviceVertexCoordinateSubpixelBits::bits - 1) <= 0x1D)
            v117 = 0.5 - (float)(0.5 / (float)(1 << CADeviceVertexCoordinateSubpixelBits::bits));
          *(float *)(v22 + 796) = v117;
          *(_DWORD *)(v22 + 2676) = *(_DWORD *)(v22 + 2676) & 0xFFFFDFFF | (BYTE10(xmmword_1ECDC6A90) << 13);
          if (objc_msgSend(*(id *)(v22 + 2904), "supportsFamily:", 1005))
            v118 = 163840;
          else
            v118 = 0x20000;
          *(_DWORD *)(v22 + 2676) = v118 | *(_DWORD *)(v22 + 2676) & 0xFFFC7FFF;
          if (((objc_msgSend(*(id *)(v22 + 2904), "supportsNativeHardwareFP16") | v95) & 1) != 0)
          {
            v119 = 0x40000;
          }
          else if (objc_msgSend(v96, "containsString:", CFSTR("intel")))
          {
            if (objc_msgSend(*(id *)(v22 + 2904), "supportsFamily:", 2002))
              v119 = 0x40000;
            else
              v119 = 0;
          }
          else
          {
            v119 = 0;
          }
          if (v95)
            v120 = 1572864;
          else
            v120 = 0;
          *(_DWORD *)(v22 + 2676) = v120 | v119 | *(_DWORD *)(v22 + 2676) & 0xFFE3FFFF;
          if (objc_msgSend(*(id *)(v22 + 2904), "supportsTileShaders"))
            v121 = 0x200000;
          else
            v121 = 0;
          *(_DWORD *)(v22 + 2676) = *(_DWORD *)(v22 + 2676) & 0xFFDFFFFF | v121;
          if (objc_msgSend(*(id *)(v22 + 2904), "supportsSIMDGroup"))
            v122 = 0x400000;
          else
            v122 = 0;
          *(_DWORD *)(v22 + 2676) = *(_DWORD *)(v22 + 2676) & 0xFFBFFFFF | v122;
          if (objc_msgSend(*(id *)(v22 + 2904), "supportsFamily:", 1007))
            v123 = 0x2000000;
          else
            v123 = 0;
          *(_DWORD *)(v22 + 2676) = *(_DWORD *)(v22 + 2676) & 0xFDFFFFFF | v123;
          if (objc_msgSend(*(id *)(v22 + 2904), "supportsSIMDShuffleAndFill"))
            v124 = 0x800000;
          else
            v124 = 0;
          *(_DWORD *)(v22 + 2676) = *(_DWORD *)(v22 + 2676) & 0xFF7FFFFF | v124;
          if (objc_msgSend(*(id *)(v22 + 2904), "supportsSIMDReduction"))
            v125 = 0x1000000;
          else
            v125 = 0;
          *(_DWORD *)(v22 + 2676) = *(_DWORD *)(v22 + 2676) & 0xFEFFFFFF | v125;
          if (*(int *)(v22 + 3048) <= 3 && (objc_msgSend(*(id *)(v22 + 2904), "supportsFamily:", 1003) & 1) == 0)
            *(_DWORD *)(v22 + 2680) = 128;
          CADeviceSetMinimumAlignment(objc_msgSend(a1, "iosurfaceReadOnlyTextureAlignmentBytes"));
          CADeviceSetMaxRenderableIOSurfaceSize(objc_msgSend(a1, "maxTextureWidth2D"), objc_msgSend(a1, "maxTextureHeight2D"), *(_QWORD *)(v22 + 2664));
          if (CA::OGL::MetalContext::get_pipeline_queue(void)::once[0] != -1)
            dispatch_once(CA::OGL::MetalContext::get_pipeline_queue(void)::once, &__block_literal_global_234);
          v126 = CA::OGL::MetalContext::get_pipeline_queue(void)::queue;
          *(_QWORD *)(v22 + 2096) = CA::OGL::MetalContext::get_pipeline_queue(void)::queue;
          dispatch_retain(v126);
          *(_WORD *)(v22 + 3280) &= ~0x200u;
          if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(v45 + 1232), "mainBundle"), "bundleIdentifier"), "isEqualToString:", CFSTR("com.apple.backboardd")))
          {
            BMEnrollIntoBlockMonitoring();
            *(_WORD *)(v22 + 3280) |= 0x200u;
          }
          objc_autoreleasePoolPop(context);
          goto LABEL_31;
        }
        *(_WORD *)buf = 0;
        v71 = "Precompiled pipelines disabled via renderer feature flag.";
        goto LABEL_100;
      }
    }
LABEL_89:
    x_log_();
    goto LABEL_118;
  }
  bzero(buf, 0x7FFuLL);
  snprintf((char *)buf, 0x800uLL, "%s", (const char *)objc_msgSend((id)objc_msgSend(v136, "localizedDescription"), "UTF8String"));
  v142 = 0;
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v127 = x_log_category_ogl_metal;
    if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v137 = 136315394;
      v138 = "Metal failed to load library";
      v139 = 2080;
      v140 = buf;
      _os_log_impl(&dword_184457000, v127, OS_LOG_TYPE_ERROR, "%s: %s\n", v137, 0x16u);
    }
  }
  strlen((const char *)buf);
  result = abort_with_payload();
  __break(1u);
  return result;
}

void sub_18458078C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, pthread_mutex_t *a13, pthread_mutex_t *a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, void *context,void *a21)
{
  CA::OGL::Context *v21;
  void *v22;
  void *v24;
  malloc_zone_t *malloc_zone;

  pthread_mutex_unlock(&CA::OGL::MetalContext::_library_lock);
  objc_autoreleasePoolPop(context);
  v24 = *a16;
  if (*a16)
  {
    *((_QWORD *)v21 + 378) = v24;
    operator delete(v24);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(a17);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v21 + 2560);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(a12);
  pthread_mutex_destroy(a13);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v21 + 1952);
  pthread_mutex_destroy(a14);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(a15);
  CA::OGL::Context::~Context(v21);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, v21);
  objc_autoreleasePoolPop(a21);
  objc_autoreleasePoolPop(v22);
  _Unwind_Resume(a1);
}

CGColorSpace *CA::OGL::Context::set_colorspace(CA::OGL::Context *this, CGColorSpace *a2)
{
  CGColorSpace *result;

  result = (CGColorSpace *)*((_QWORD *)this + 18);
  if (result != a2)
  {
    CGColorSpaceRelease(result);
    *((_QWORD *)this + 18) = CGColorSpaceRetain(a2);
    result = (CGColorSpace *)*((_QWORD *)this + 20);
    if (result)
      return (CGColorSpace *)CA::ColorProgram::Cache::set_colorspace((CGColorSpace **)result, a2);
  }
  return result;
}

uint64_t CA::CG::AccelRenderer::AccelRenderer(uint64_t a1, uint64_t a2, int a3)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;

  *(_QWORD *)a1 = &off_1E1593A98;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if ((_UNKNOWN *)(a1 + 32) != &CA::Mat2Impl::mat2_identity_double)
  {
    *(_OWORD *)(a1 + 32) = xmmword_18474DF40;
    *(_OWORD *)(a1 + 48) = xmmword_18474DF50;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
  }
  v6 = (_BYTE *)(a1 + 4176);
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  if ((_UNKNOWN *)(a1 + 88) != &CA::Mat2Impl::mat2_identity_double)
  {
    *(_OWORD *)(a1 + 88) = xmmword_18474DF40;
    *(_OWORD *)(a1 + 104) = xmmword_18474DF50;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
  }
  *(_QWORD *)(a1 + 136) = 0xFFFFFFFE00000000;
  *(_QWORD *)(a1 + 152) = 1;
  v7 = 160;
  do
  {
    v8 = a1 + v7;
    *(_QWORD *)v8 = 0;
    *(_DWORD *)(v8 + 8) = 0;
    v7 += 16;
  }
  while (v8 + 16 != a1 + 288);
  *(_DWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  for (i = 304; i != 1280; i += 488)
    *(_QWORD *)(a1 + i) = 0;
  *(_QWORD *)(a1 + 1280) = 128;
  *(_QWORD *)(a1 + 1288) = operator new[]();
  *(_OWORD *)(a1 + 1368) = 0u;
  v10 = 1392;
  do
  {
    v11 = a1 + v10;
    *(_OWORD *)(v11 + 16) = 0uLL;
    *(_OWORD *)(v11 + 32) = 0uLL;
    *(_OWORD *)v11 = 0uLL;
    *(_QWORD *)(v11 + 72) = 0;
    *(_QWORD *)(v11 + 80) = 0;
    *(_DWORD *)(v11 + 88) = 0;
    *(_OWORD *)(v11 + 112) = 0uLL;
    *(_OWORD *)(v11 + 128) = 0uLL;
    *(_DWORD *)(v11 + 144) = -1;
    *(_WORD *)(v11 + 148) = 0;
    *(_DWORD *)(v11 + 152) = -1;
    v12 = a1 + v10 + 48;
    *(_QWORD *)(v11 + 48) = v12;
    *(_QWORD *)(v11 + 56) = v12;
    *(_QWORD *)(v11 + 64) = 0;
    v13 = a1 + v10 + 96;
    *(_QWORD *)(v11 + 96) = v13;
    *(_QWORD *)(v11 + 104) = v13;
    v10 += 192;
    *(_QWORD *)(v11 + 160) = 0;
  }
  while (v11 + 192 != a1 + 2544);
  *(_QWORD *)(a1 + 2544) = a2;
  *(_QWORD *)(a1 + 2552) = 0;
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 816))(a2);
  *(_QWORD *)(a1 + 2560) = v14;
  *(_OWORD *)(a1 + 2568) = 0u;
  *(_OWORD *)(a1 + 2584) = 0u;
  *(_OWORD *)(a1 + 2600) = 0u;
  *(_DWORD *)(a1 + 2616) = 1065353216;
  if (v14 >> 24)
    __assert_rtn("GlyphCache", "ogl-glyph-cache.cpp", 20, "_buffer_size < limit_of_int_in_float_representability");
  *(_DWORD *)(a1 + 4160) = 0;
  *v6 &= 0xFCu;
  *(_OWORD *)(a1 + 4184) = 0uLL;
  *(_OWORD *)(a1 + 4200) = 0uLL;
  *(_DWORD *)(a1 + 4216) = 1065353216;
  CA::OGL::Mosaic::purge((CA::OGL::Mosaic *)(a1 + 1392));
  *(_OWORD *)(a1 + 1392) = xmmword_18474E760;
  *(_QWORD *)(a1 + 1408) = 0x900000020;
  *(_QWORD *)(a1 + 1416) = 576;
  *(_QWORD *)(a1 + 1424) = 576;
  *(int32x2_t *)(a1 + 1432) = vdup_n_s32(0x3AE38E39u);
  CA::OGL::Mosaic::purge((CA::OGL::Mosaic *)(a1 + 1584));
  *(_OWORD *)(a1 + 1584) = xmmword_18474E770;
  *(_QWORD *)(a1 + 1600) = 0x1200000010;
  *(_QWORD *)(a1 + 1608) = 512;
  *(_QWORD *)(a1 + 1616) = 512;
  *(_QWORD *)(a1 + 1624) = 0x3B0000003B000000;
  CA::OGL::Mosaic::purge((CA::OGL::Mosaic *)(a1 + 1776));
  *(_OWORD *)(a1 + 1776) = xmmword_18474E770;
  *(_QWORD *)(a1 + 1792) = 0xB00000010;
  *(_QWORD *)(a1 + 1800) = 512;
  *(_QWORD *)(a1 + 1808) = 512;
  *(_QWORD *)(a1 + 1816) = 0x3B0000003B000000;
  CA::OGL::Mosaic::purge((CA::OGL::Mosaic *)(a1 + 1968));
  *(_OWORD *)(a1 + 1968) = xmmword_18474E780;
  *(_QWORD *)(a1 + 1984) = 0xB00000010;
  *(_QWORD *)(a1 + 1992) = 2048;
  *(_QWORD *)(a1 + 2000) = 16;
  *(_QWORD *)(a1 + 2008) = 0x3D8000003A000000;
  CA::OGL::Mosaic::purge((CA::OGL::Mosaic *)(a1 + 2160));
  *(_OWORD *)(a1 + 2160) = xmmword_18474E770;
  *(_QWORD *)(a1 + 2176) = 0xD00000010;
  *(_QWORD *)(a1 + 2184) = 512;
  *(_QWORD *)(a1 + 2192) = 512;
  *(_QWORD *)(a1 + 2200) = 0x3B0000003B000000;
  CA::OGL::Mosaic::purge((CA::OGL::Mosaic *)(a1 + 2352));
  *(_OWORD *)(a1 + 2352) = xmmword_18474E780;
  *(_QWORD *)(a1 + 2368) = 0xD00000010;
  *(_QWORD *)(a1 + 2376) = 2048;
  *(_QWORD *)(a1 + 2384) = 16;
  *(_QWORD *)(a1 + 2392) = 0x3D8000003A000000;
  CA::CG::Renderer::_max_mosaic_cells = xmmword_18474E790;
  qword_1ECDC57F0 = 0x100000010;
  bzero((void *)(a1 + 2624), 0x600uLL);
  *(_QWORD *)(a1 + 1328) = 0x3C003C003C003C00;
  *(_QWORD *)(a1 + 1336) = 0;
  *(_QWORD *)(a1 + 1352) = 0;
  *(_QWORD *)(a1 + 1344) = 0;
  v15 = *(_WORD *)(a1 + 1364);
  *(_QWORD *)(a1 + 1296) = 0;
  *(_QWORD *)(a1 + 1312) = 0;
  *(_DWORD *)(a1 + 1360) = 1065353216;
  *(_QWORD *)(a1 + 1320) = &CA::identity_transform;
  *(_QWORD *)(a1 + 1304) = &CA::Shape::_infinite_shape;
  *(_WORD *)(a1 + 1364) = v15 & 0xF800 | 0x503;
  CA::OGL::Context::reset_statistics(*(CA::OGL::Context **)(a1 + 8));
  CA::OGL::Context::prepare_context(*(_QWORD *)(a1 + 8), a1 + 304);
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(_QWORD *)(a1 + 1280);
  *(_QWORD *)(v16 + 120) = *(_QWORD *)(a1 + 1288);
  *(_QWORD *)(v16 + 136) = v17;
  if (*(_DWORD *)(a1 + 136) != 1)
  {
    *(_DWORD *)(a1 + 136) = 1;
    v18 = *(_DWORD *)(v16 + 416) & 0xFFFFFD7F;
    v19 = *(_DWORD *)(v16 + 208);
    *(_DWORD *)(v16 + 208) = v18;
    *(_DWORD *)(v16 + 416) = global_feature_flags | v18;
    if (((v19 ^ v18) & 0x2000200) != 0)
      CA::OGL::Context::update_color_program_cache(v16);
  }
  *(_QWORD *)a1 = &off_1E1591C00;
  *(_DWORD *)(a1 + 4224) = 0;
  v6[52] = 0;
  *(_DWORD *)(a1 + 4232) = a3;
  *(_OWORD *)(a1 + 4240) = 0u;
  *(_OWORD *)(a1 + 4256) = 0u;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 4224));
  if (CA::CG::AccelRenderer::add_suspend_observer(void)::once[0] != -1)
    dispatch_once(CA::CG::AccelRenderer::add_suspend_observer(void)::once, &__block_literal_global_14919);
  os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
  *(_QWORD *)(a1 + 4272) = CA::CG::AccelRenderer::_list;
  CA::CG::AccelRenderer::_list = a1;
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
  return a1;
}

uint64_t CA::OGL::Mosaic::purge(CA::OGL::Mosaic *this)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  malloc_zone_t *malloc_zone;
  char *v7;
  char *v8;
  unsigned int *v9;
  char *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  malloc_zone_t *v15;
  uint64_t result;

  if ((*((_DWORD *)this + 36) & 0x80000000) == 0)
    __assert_rtn("purge", "ogl-mosaic.cpp", 158, "_image_unit < 0");
  v2 = (char *)this + 48;
  v3 = (char *)*((_QWORD *)this + 7);
  if (v3 != (char *)this + 48)
  {
    do
    {
      v4 = (char *)*((_QWORD *)v3 + 1);
      v5 = *((_QWORD *)v3 + 4);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(malloc_zone, v3);
      v3 = v4;
    }
    while (v4 != v2);
    *((_QWORD *)this + 6) = (char *)this + 48;
    *((_QWORD *)this + 7) = v2;
  }
  v7 = (char *)this + 96;
  v8 = (char *)*((_QWORD *)this + 13);
  if (v8 != (char *)this + 96)
  {
    do
    {
      v10 = (char *)*((_QWORD *)v8 + 1);
      v9 = (unsigned int *)*((_QWORD *)v8 + 2);
      if (v9)
      {
        v11 = v9 + 2;
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      }
      v14 = *((_QWORD *)v8 + 3);
      if (v14)
        MEMORY[0x186DBD978](v14, 0x1020C8062D53EE8);
      v15 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v15, v8);
      v8 = v10;
    }
    while (v10 != v7);
    *((_QWORD *)this + 12) = (char *)this + 96;
    *((_QWORD *)this + 13) = v7;
    *((_DWORD *)this + 22) = 0;
    *((_QWORD *)this + 14) = 0;
  }
  result = *((_QWORD *)this + 9);
  if (result)
  {
    result = MEMORY[0x186DBD978](result, 0x20C8093837F09);
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 10) = 0;
  }
  return result;
}

uint64_t CA::OGL::MetalContext::default_buffer_size(CA::OGL::MetalContext *this)
{
  return 0x40000;
}

id CAMetalContextCreate()
{
  void *v0;
  id v1;

  v0 = (void *)MEMORY[0x186DBE2E4]();
  if (CAMetalContextCreate::once[0] != -1)
    dispatch_once(CAMetalContextCreate::once, &__block_literal_global_18072);
  v1 = MTLCreateSystemDefaultDevice();
  objc_autoreleasePoolPop(v0);
  return v1;
}

void sub_184580F6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

uint64_t CABackingStoreSynchronize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  if (!a2)
    return 1;
  *(_QWORD *)(a1 + 480) = pthread_self();
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a3, a4, 1);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  *(_QWORD *)(a1 + 480) = 0;
  return v8;
}

BOOL CA::Context::synchronize(CA::Context *this, mach_port_name_t a2, int a3, int a4)
{
  pthread_mutex_t *v8;
  mach_port_name_t v9;
  mach_port_name_t v10;
  ipc_space_t *v11;
  kern_return_t v12;
  CA::Render::Context *v13;
  mach_error_t v14;
  mach_error_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  const char *v20;
  int v21;
  mach_error_t v22;
  mach_error_t v23;
  unsigned int *v24;
  int v25;
  _BOOL4 v26;
  uint64_t v27;
  int v28;
  NSObject *v29;
  const char *v30;
  uint32_t v31;
  uint64_t v32;
  mach_error_t v33;
  int v34;
  int v35;
  char *v36;
  NSObject *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  char *v42;
  NSObject *v43;
  _BOOL4 v44;
  int v45;
  mach_error_t v46;
  const char *v47;
  _BOOL4 v48;
  int v49;
  mach_error_t v50;
  _BOOL4 v51;
  int v52;
  mach_error_t v53;
  NSObject *v54;
  int v55;
  mach_error_t v56;
  unsigned int v57;
  mach_port_name_t v58;
  mach_port_name_t name;
  uint8_t buf[4];
  int v61;
  __int16 v62;
  mach_error_t v63;
  __int16 v64;
  char *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  name = 0;
  v8 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  if (*((_DWORD *)this + 32) >= a2)
    v9 = a2;
  else
    v9 = *((_DWORD *)this + 32);
  if (a2)
    v10 = v9;
  else
    v10 = *((_DWORD *)this + 32);
  if (v10 <= *((_DWORD *)this + 34))
  {
    pthread_mutex_unlock(v8);
    return 1;
  }
  v11 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
  v12 = mach_port_allocate(*MEMORY[0x1E0C83DA0], 1u, &name);
  if (name - 1 > 0xFFFFFFFD)
  {
    v16 = v12;
    if (x_log_hook_p())
    {
      mach_error_string(v16);
      goto LABEL_16;
    }
    v17 = x_log_category_api;
    if (!os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR))
      goto LABEL_41;
    v18 = *((_DWORD *)this + 1);
    v19 = mach_error_string(v16);
    *(_DWORD *)buf = 67109634;
    v61 = v18;
    v62 = 1024;
    v63 = v16;
    v64 = 2080;
    v65 = v19;
    v20 = "Failed to make reply port for update sync (client=0x%x) [0x%x %s]";
    goto LABEL_39;
  }
  v13 = (CA::Render::Context *)*((_QWORD *)this + 13);
  if (v13)
  {
    v57 = 0;
    v58 = 0;
    v14 = MEMORY[0x186DBE050](*v11);
    if (v14)
    {
      if (x_log_hook_p())
      {
        mach_error_string(v14);
LABEL_16:
        x_log_();
LABEL_41:
        pthread_mutex_unlock(v8);
        v58 = 0;
        goto LABEL_42;
      }
      v17 = x_log_category_api;
      if (!os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR))
        goto LABEL_41;
      v35 = *((_DWORD *)this + 1);
      v36 = mach_error_string(v14);
      *(_DWORD *)buf = 67109634;
      v61 = v35;
      v62 = 1024;
      v63 = v14;
      v64 = 2080;
      v65 = v36;
      v20 = "Failed to make send-once for update sync (client=0x%x) [0x%x %s]";
LABEL_39:
      v37 = v17;
      goto LABEL_40;
    }
    CA::Render::Context::request_synchronize(v13, v58, a3, 0, v10, 1);
  }
  else
  {
    v21 = *((_DWORD *)this + 40);
    if (!v21 || (*((_BYTE *)this + 241) & 2) != 0)
      goto LABEL_41;
    v22 = _CASSynchronize(v21, name, a3, 0, v10, 1, a4);
    if (v22)
    {
      v23 = v22;
      if (v22 == 268435459)
      {
        *((_BYTE *)this + 241) |= 2u;
      }
      else if (v22 == -81182719)
      {
        x_log_crash("Unentitled call to server!");
        abort();
      }
      if (x_log_hook_p())
      {
        mach_error_string(v23);
        goto LABEL_16;
      }
      v40 = x_log_category_api;
      if (!os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR))
        goto LABEL_41;
      v41 = *((_DWORD *)this + 1);
      v42 = mach_error_string(v23);
      *(_DWORD *)buf = 67109634;
      v61 = v41;
      v62 = 1024;
      v63 = v23;
      v64 = 2080;
      v65 = v42;
      v20 = "Failed to register update sync (client=0x%x) [0x%x %s]";
      v37 = v40;
LABEL_40:
      _os_log_impl(&dword_184457000, v37, OS_LOG_TYPE_ERROR, v20, buf, 0x18u);
      goto LABEL_41;
    }
  }
  pthread_mutex_unlock(v8);
  v25 = 0;
  v58 = 0;
  while (2)
  {
    v57 = 0;
    switch(CA::Render::Context::wait_for_synchronize(name, 0, &v57, &v58, v24))
    {
      case 1u:
        pthread_mutex_lock(v8);
        v38 = v57;
        v39 = *((_DWORD *)this + 33);
        if (v57 > v39)
        {
          *((_DWORD *)this + 33) = v57;
          v39 = v38;
        }
        if (v58 <= *((_DWORD *)this + 34))
          v58 = *((_DWORD *)this + 34);
        else
          *((_DWORD *)this + 34) = v58;
        v11 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
        if (v39 > *((_DWORD *)this + 32))
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v54 = x_log_category_api;
            if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR))
            {
              v56 = *((_DWORD *)this + 32);
              v55 = *((_DWORD *)this + 33);
              *(_DWORD *)buf = 67109376;
              v61 = v55;
              v62 = 1024;
              v63 = v56;
              _os_log_impl(&dword_184457000, v54, OS_LOG_TYPE_ERROR, "server/client commit_seed mismatch : sync server seed (%u) > client (%u)", buf, 0xEu);
            }
          }
          *((_DWORD *)this + 32) = *((_DWORD *)this + 33);
        }
        pthread_mutex_unlock(v8);
        goto LABEL_42;
      case 2u:
        if (x_log_hook_p())
          goto LABEL_54;
        v43 = x_log_category_api;
        v48 = os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR);
        v11 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
        if (v48)
        {
          v49 = *((_DWORD *)this + 3);
          v50 = *((_DWORD *)this + 1);
          *(_DWORD *)buf = 67109376;
          v61 = v49;
          v62 = 1024;
          v63 = v50;
          v47 = "dead reply from update sync on %u:%x";
          goto LABEL_69;
        }
        goto LABEL_42;
      case 3u:
        if (x_log_hook_p())
          goto LABEL_54;
        v43 = x_log_category_api;
        v44 = os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR);
        v11 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
        if (v44)
        {
          v45 = *((_DWORD *)this + 3);
          v46 = *((_DWORD *)this + 1);
          *(_DWORD *)buf = 67109376;
          v61 = v45;
          v62 = 1024;
          v63 = v46;
          v47 = "unrecognized reply from update sync on %u:%x";
          goto LABEL_69;
        }
        goto LABEL_42;
      case 4u:
        v26 = x_log_hook_p();
        if (v25 <= 8)
        {
          ++v25;
          if (v26)
            goto LABEL_30;
          v32 = x_log_category_api;
          if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR))
          {
            v33 = *((_DWORD *)this + 3);
            v34 = *((_DWORD *)this + 1);
            *(_DWORD *)buf = 67109632;
            v61 = v25;
            v62 = 1024;
            v63 = v33;
            v64 = 1024;
            LODWORD(v65) = v34;
            v29 = v32;
            v30 = "long update sync wait %i : %u:%x";
            v31 = 20;
            goto LABEL_36;
          }
          continue;
        }
        if (v26)
        {
LABEL_54:
          x_log_();
          v11 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
        }
        else
        {
          v43 = x_log_category_api;
          v51 = os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR);
          v11 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
          if (v51)
          {
            v52 = *((_DWORD *)this + 3);
            v53 = *((_DWORD *)this + 1);
            *(_DWORD *)buf = 67109376;
            v61 = v52;
            v62 = 1024;
            v63 = v53;
            v47 = "excessive update sync wait : %u:%x";
LABEL_69:
            _os_log_impl(&dword_184457000, v43, OS_LOG_TYPE_ERROR, v47, buf, 0xEu);
          }
        }
LABEL_42:
        if (name - 1 <= 0xFFFFFFFD)
          mach_port_mod_refs(*v11, name, 1u, -1);
        return v10 <= v58;
      default:
        if (x_log_hook_p())
        {
LABEL_30:
          x_log_();
        }
        else
        {
          v27 = x_log_category_api;
          if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR))
          {
            v28 = *((_DWORD *)this + 1);
            *(_DWORD *)buf = 67109120;
            v61 = v28;
            v29 = v27;
            v30 = "error while waiting for update sync on %x";
            v31 = 8;
LABEL_36:
            _os_log_impl(&dword_184457000, v29, OS_LOG_TYPE_ERROR, v30, buf, v31);
          }
        }
        continue;
    }
  }
}

void sub_1845818A4(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18458222C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  pthread_mutex_t *v23;

  pthread_mutex_unlock(v23);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t CA::Render::Context::wait_for_synchronize(mach_port_name_t rcv_name, _DWORD *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  mach_msg_return_t v8;
  mach_msg_return_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  _BYTE msg[32];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint8_t buf[4];
  mach_msg_return_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  memset(msg, 0, sizeof(msg));
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0;
  v8 = mach_msg((mach_msg_header_t *)msg, 258, 0, 0x68u, rcv_name, 0x3E8u, 0);
  if (v8 == 268451843)
    return 4;
  v9 = v8;
  if (v8)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v11 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v21 = v9;
        _os_log_impl(&dword_184457000, v11, OS_LOG_TYPE_ERROR, "error (%i) waiting for sync reply", buf, 8u);
      }
    }
    return 5;
  }
  else
  {
    if (*(_DWORD *)&msg[20] == 1937337955 && *(_DWORD *)&msg[4] >= 0x24u)
    {
      if (a2)
        *a2 = *(_DWORD *)&msg[24];
      if (a3)
        *a3 = *(_DWORD *)&msg[28];
      if (a4)
        *a4 = v15;
      v10 = 1;
    }
    else if (*(_DWORD *)&msg[20] == 71)
    {
      v10 = 2;
    }
    else
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v12 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          v21 = *(_DWORD *)&msg[20];
          _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_ERROR, "unknown sync reply received : %i", buf, 8u);
        }
      }
      v10 = 3;
    }
    mach_msg_destroy((mach_msg_header_t *)msg);
  }
  return v10;
}

uint64_t _CASSynchronize(int a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  _BYTE msg[36];
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)&msg[20] = 0u;
  *(_OWORD *)&msg[4] = 0u;
  *(_DWORD *)&msg[28] = a2;
  v9 = 1376256;
  v10 = *MEMORY[0x1E0C804E8];
  v11 = a3;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  v15 = a7;
  *(_DWORD *)msg = -2147483629;
  *(_DWORD *)&msg[8] = a1;
  *(_QWORD *)&msg[20] = 0x100009D09;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set((mach_msg_header_t *)msg);
  return mach_msg((mach_msg_header_t *)msg, 1, 0x44u, 0, 0, 0, 0);
}

BOOL CA::Context::Generic::synchronize(CA::Context **this, mach_port_name_t a2, int a3, int a4)
{
  return CA::Context::synchronize(this[1], a2, a3, a4);
}

void CA::MachPortUtil::call_with_timeout<int (*)(unsigned int,unsigned int,unsigned int),unsigned int>(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD, uint64_t), uint64_t a4)
{
  int v4;
  mach_port_name_t v7;
  mach_error_t v8;
  mach_error_t v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  uint64_t v14;
  _QWORD block[6];
  mach_port_name_t v16;
  int v17;
  int v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  mach_error_t v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v4 = a4;
  v7 = a1;
  v25 = *MEMORY[0x1E0C80C00];
  v8 = a3(a1, 0, a4);
  if (!v8)
    return;
  v9 = v8;
  if (v8 != 268435460)
  {
    if (x_log_hook_p())
    {
      mach_error_string(v9);
LABEL_10:
      x_log_();
      return;
    }
    v10 = x_log_category_utilities;
    if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136315650;
    v20 = a2;
    v21 = 1024;
    v22 = v9;
    v23 = 2080;
    v24 = mach_error_string(v9);
    v11 = "%s client message err=0x%x : %s";
    v12 = v10;
    v13 = 28;
LABEL_15:
    _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);
    return;
  }
  if (v7 - 1 > 0xFFFFFFFD || mach_port_mod_refs(*MEMORY[0x1E0C83DA0], v7, 0, 1))
  {
    if (x_log_hook_p())
      goto LABEL_10;
    v14 = x_log_category_utilities;
    if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136315138;
    v20 = a2;
    v11 = "%s failed to retain right";
    v12 = v14;
    v13 = 12;
    goto LABEL_15;
  }
  if (CA::MachPortUtil::reply_queue(void)::once != -1)
    dispatch_once(&CA::MachPortUtil::reply_queue(void)::once, &__block_literal_global_8138);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN2CA12MachPortUtil17call_with_timeoutIPFijjjEJjEEEijjPKcT_DpT0__block_invoke;
  block[3] = &__block_descriptor_tmp_91;
  v16 = v7;
  v17 = 2;
  v18 = v4;
  block[4] = a3;
  block[5] = a2;
  dispatch_async((dispatch_queue_t)CA::MachPortUtil::reply_queue(void)::queue, block);
}

uint64_t _CACImageQueueCollectable(mach_port_t a1, mach_msg_timeout_t timeout, int a3)
{
  uint64_t v4;
  mach_msg_header_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = *MEMORY[0x1E0C804E8];
  v8 = a3;
  *(_QWORD *)&v6.msgh_bits = 19;
  v6.msgh_voucher_port = 0;
  v6.msgh_id = 40403;
  v6.msgh_remote_port = a1;
  v6.msgh_local_port = 0;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set(&v6);
  v4 = mach_msg(&v6, 17, 0x24u, 0, 0, timeout, 0);
  if ((v4 - 268435459) <= 1)
  {
    if ((v6.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], v6.msgh_local_port);
    mach_msg_destroy(&v6);
  }
  return v4;
}

void CA::OGL::Renderer::update_detached_layer(CA::OGL::Renderer *this, CA::Render::Handle *a2, CA::Render::Texture *a3, CA::OGL::Context **a4, void *a5)
{
  CA::OGL::Context *v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  CA::Render::LayerNode *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  CA::Render::LayerNode ***v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  CA::Render::Handle *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  unsigned int v57;
  CA::Render::Handle *v58;
  int v59;

  v6 = *a4;
  if ((*((_BYTE *)this + 98) & 1) == 0)
  {
    if (*((CA::OGL::Context **)a3 + 11) != v6 || (v7 = *((_QWORD *)a3 + 10)) == 0)
      v7 = CA::OGL::Context::lookup_image_(*a4, a3, 1);
    *(_DWORD *)(v7 + 20) = *((_DWORD *)v6 + 53);
    return;
  }
  v10 = *((_QWORD *)v6 + 22);
  if (!*((_QWORD *)this + 2) || (v12 = CA::Render::Handle::lock_context(this)) == 0)
  {
    v21 = 0;
    v22 = 0;
    goto LABEL_15;
  }
  v15 = v12;
  v16 = *((_QWORD *)this + 2);
  if (v16)
  {
    v17 = *(unsigned int **)(v16 + 96);
    if (v17)
    {
      v18 = v17 + 2;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      if (!v19)
      {
        v17 = 0;
        do
          v20 = __ldaxr(v18);
        while (__stlxr(v20 - 1, v18));
      }
    }
  }
  else
  {
    v17 = 0;
  }
  v30 = (CA::Render::LayerNode ***)*((_QWORD *)this + 5);
  if (v30)
    v31 = CA::Render::LayerNode::clear_above_and_black_below(v30, 0, v13, v14);
  else
    v31 = 0;
  v21 = *(unsigned int **)(v15 + 384);
  if (v21)
  {
    v32 = v21 + 4;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 + 1, v32));
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v15 + 72));
  v34 = (unsigned int *)(v15 + 8);
  do
  {
    v35 = __ldaxr(v34);
    v36 = v35 - 1;
  }
  while (__stlxr(v36, v34));
  if (!v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
  v59 = v31;
  if (!v17)
  {
    v22 = 0;
    v38 = 0;
    if (!v21)
      goto LABEL_67;
LABEL_52:
    if (!v38)
    {
      v58 = a2;
      v41 = (unsigned int *)*((_QWORD *)v21 + 6);
      if (v22 == v41)
      {
        v41 = v22;
        if (!v22)
          goto LABEL_72;
      }
      else
      {
        if (v17)
        {
          v42 = v22 + 2;
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
            (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 16))(v22);
        }
        if (!v41)
          goto LABEL_64;
        v45 = v41 + 2;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 + 1, v45));
        if (!v46)
        {
          do
            v47 = __ldaxr(v45);
          while (__stlxr(v47 - 1, v45));
LABEL_64:
          v22 = 0;
LABEL_72:
          a2 = v58;
          goto LABEL_15;
        }
      }
      v38 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v41 + 80))(v41);
      v22 = v41;
      a2 = v58;
    }
LABEL_67:
    if (!v38)
      goto LABEL_15;
    goto LABEL_68;
  }
  v37 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v17 + 80))(v17);
  if (!v37)
  {
    v39 = *((unsigned __int8 *)v17 + 12);
    if (v39 == 26)
    {
      v37 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v17 + 4) + 80))(*((_QWORD *)v17 + 4));
      if (v37)
        goto LABEL_41;
      v39 = *((unsigned __int8 *)v17 + 12);
    }
    if (v39 == 25 && (v40 = *((_QWORD *)v17 + 4)) != 0)
      v38 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v40 + 32) + 80))(*(_QWORD *)(v40 + 32));
    else
      v38 = 0;
    v22 = v17;
    if (!v21)
      goto LABEL_67;
    goto LABEL_52;
  }
LABEL_41:
  v38 = v37;
  v22 = v17;
LABEL_68:
  if (*(_DWORD *)(v38 + 16) == *((_DWORD *)a3 + 4) && *(_DWORD *)(v38 + 20) == *((_DWORD *)a3 + 5))
  {
    v48 = a2;
    if (*(CA::OGL::Context **)(v38 + 88) != v6 || (v49 = *(_QWORD *)(v38 + 80)) == 0)
      v49 = CA::OGL::Context::lookup_image_(v6, (CA::Render::Texture *)v38, 1);
    v50 = (*(uint64_t (**)(uint64_t, CA::OGL::Context *, uint64_t, uint64_t))(*(_QWORD *)v10 + 24))(v10, v6, v49, v38);
    if (v50)
      *(_DWORD *)(v49 + 20) = *((_DWORD *)v6 + 53);
    v51 = *(_DWORD *)(v38 + 12);
    v52 = (v51 >> 8) & 0x200;
    v53 = (v51 >> 19) & 0x20 | (v51 >> 12) & 0x4000 | (v51 >> 14) & 0x800 | v52;
    if (*(_DWORD *)(v38 + 12) == 51)
      v54 = v53;
    else
      v54 = v52;
    if (v59)
    {
      if ((~*((_DWORD *)a4[1] + 67) & 0xC0) != 0)
        v55 = 256;
      else
        v55 = 4352;
      v54 = v55 | v54;
    }
    if (v22 && *((_BYTE *)v22 + 12) == 25)
    {
      v56 = atomic_load((unint64_t *)(*(_QWORD *)(*((_QWORD *)v22 + 2) + 24) + 8));
      v57 = (v56 >> 35) & 0x8000 | v54;
      if (v22[66] == *((_DWORD *)v6 + 53))
        v54 = v57 | 0x2000;
      else
        v54 = v57;
    }
    (*(void (**)(uint64_t, CA::OGL::Renderer *, CA::Render::Handle *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 64))(v10, this, v48, v38, v50, v54);
    *((_QWORD *)this + 12) &= ~0x10000uLL;
    *((_WORD *)v6 + 408) |= 0x100u;
    if (!v22)
      goto LABEL_20;
    goto LABEL_16;
  }
LABEL_15:
  (*(void (**)(uint64_t, CA::OGL::Renderer *, CA::Render::Handle *))(*(_QWORD *)v10 + 56))(v10, this, a2);
  *((_QWORD *)this + 12) &= ~0x8000uLL;
  if (v22)
  {
LABEL_16:
    v24 = v22 + 2;
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
      (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 16))(v22);
  }
LABEL_20:
  if (v21)
  {
    v27 = v21 + 4;
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
      CA::Render::LayerNode::delete_node((CA::Render::LayerNode *)v21, v23);
  }
}

uint64_t CA::Render::ImageQueue::texture_cast(CA::Render::ImageQueue *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (!result)
  {
    result = *((_QWORD *)this + 10);
    if (!result)
      return *((_QWORD *)this + 3);
  }
  return result;
}

void CA::CG::DrawOp::render(CA::CG::DrawOp *this, float64x2_t *a2)
{
  uint64_t v4;
  double v5;
  int64x2_t v6;
  int8x16_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x2_t v10;
  uint64_t v11;
  int32x2_t *v12;
  int32x2_t *v13;
  uint32x2_t v14;
  int32x2_t v15;
  uint32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;
  uint32x2_t v19;
  uint64_t v20;
  CA::CG::ClipItem **v21;
  size_t v22;
  double v23;
  double v24;
  int64x2_t v25;
  double v26;
  float64x2_t v27;
  int v28;
  double v29;
  float64x2_t v30;
  int v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  int v36;
  int v37;
  _QWORD *v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  float64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  CA::Shape *v46;
  _BOOL4 v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  int32x4_t v51;
  int32x4_t v52;
  _DWORD *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  char v64;
  char v65;
  uint64_t v66;
  int v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  CA::Shape *v78;
  unsigned int v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float64_t v86;
  float64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  __int16 v92;
  char v93;
  float64_t v94;
  uint64_t v95;
  int v96;
  float v97;
  CA::Shape *v98;
  char v99;
  char v100;
  int v101;
  int64x2_t v102;
  int8x16_t v103;
  double v104;
  double v105;
  double *v106;
  double *v107;
  double v108;
  int8x16_t v109;
  _BOOL4 v115;
  int v116;
  unsigned int v117;
  int *v118;
  unsigned int v119;
  CA::Shape *v120;
  int8x16_t v121;
  double v122;
  double v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  unint64_t v127;
  int32x4_t v128;
  float64x2_t v129;
  float64x2_t v130;
  _OWORD v131[2];
  _OWORD v132[2];
  uint64_t v133;
  _OWORD v134[3];
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v129 = 0u;
  v130 = 0u;
  v4 = (*(uint64_t (**)(CA::CG::DrawOp *, float64x2_t *))(*(_QWORD *)this + 24))(this, &v129);
  v5 = a2[5].f64[0];
  if (v5 != 1.0)
  {
    if (v130.f64[0] < 1.79769313e308)
    {
      v129.f64[0] = v129.f64[0] * v5;
      v130.f64[0] = v130.f64[0] * v5;
    }
    if (v130.f64[1] < 1.79769313e308)
    {
      v129.f64[1] = v129.f64[1] * v5;
      v130.f64[1] = v130.f64[1] * v5;
    }
  }
  v6 = vceqzq_f64(v130);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v6, 1), (int8x16_t)v6).u64[0] & 0x8000000000000000) != 0
    || (v7 = vorrq_s8((int8x16_t)vcltzq_f64(v130), (int8x16_t)vcgezq_f64(v130)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v7), 1), v7).u64[0] & 0x8000000000000000) != 0))
  {
    v9.i64[0] = 0;
    v10 = 0;
  }
  else
  {
    v8 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v129, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    v9 = vuzp1q_s32(v8, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v129, v130), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v8));
    v10 = (int32x2_t)v9.u64[1];
  }
  v11 = *(_QWORD *)&a2->f64[1];
  v12 = *(int32x2_t **)(v11 + 248);
  if (v12)
    v13 = v12 + 4;
  else
    v13 = (int32x2_t *)(v11 + 184);
  v14 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v10);
  if ((vpmax_u32(v14, v14).u32[0] & 0x80000000) == 0)
  {
    v15 = v13[1];
    v16 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v15);
    if ((vpmax_u32(v16, v16).u32[0] & 0x80000000) == 0)
    {
      v17 = vadd_s32(*(int32x2_t *)v9.i8, v10);
      *(int32x2_t *)v9.i8 = vmax_s32(*(int32x2_t *)v9.i8, *v13);
      v18 = vsub_s32(vmin_s32(v17, vadd_s32(*v13, v15)), *(int32x2_t *)v9.i8);
      v19 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v18);
      if ((vpmax_u32(v19, v19).u32[0] & 0x80000000) == 0)
      {
        v9.u64[1] = (unint64_t)v18;
        v128 = v9;
        MEMORY[0x1E0C80A78](v4);
        v21 = (CA::CG::ClipItem **)((char *)&v116 - v20);
        bzero((char *)&v116 - v20, v22);
        v127 = 0;
        v125 = 0u;
        v126 = 0u;
        v124 = 0u;
        CA::CG::ClipOp::ClipOp((int32x2_t *)&v124, (CA::CG::Renderer *)a2, this, (int32x2_t *)&v128, v21, 0.0, v23, v24, v25, v26, v27);
        v28 = DWORD2(v124);
        if (SDWORD2(v124) >= SHIDWORD(v124))
          v28 = HIDWORD(v124);
        if (v28 < 1)
          goto LABEL_140;
        if (!*(_QWORD *)&a2[85].f64[1])
          (*(void (**)(float64x2_t *, __int128 *))(*(_QWORD *)&a2->f64[0] + 24))(a2, &v124);
        if ((float64x2_t *)((char *)this + 8) != &a2[2])
        {
          a2[2] = *(float64x2_t *)((char *)this + 8);
          a2[3] = *(float64x2_t *)((char *)this + 24);
          a2[4] = *(float64x2_t *)((char *)this + 40);
        }
        v29 = a2[5].f64[0];
        if (v29 != 1.0)
        {
          v30 = vmulq_n_f64(a2[3], v29);
          a2[2] = vmulq_n_f64(a2[2], v29);
          a2[3] = v30;
          a2[4] = vmulq_n_f64(a2[4], v29);
        }
        v31 = (*(uint64_t (**)(CA::CG::DrawOp *, float64x2_t *))(*(_QWORD *)this + 128))(this, a2);
        v32 = (*(uint64_t (**)(CA::CG::DrawOp *, float64x2_t *))(*(_QWORD *)this + 136))(this, a2);
        v33 = v32;
        v34 = 3;
        v35 = 3;
        switch(*((_DWORD *)this + 14))
        {
          case 0:
            v36 = *((_DWORD *)this + 25);
            if ((v36 & 0x200) != 0)
              v34 = 3;
            else
              v34 = 12;
            v35 = (v36 << 22 >> 31) & 9;
            break;
          case 1:
            _H0 = *((_WORD *)this + 47);
            __asm { FCVT            S0, H0 }
            v115 = (v32 & 4) == 0;
            if (_S0 < 1.0)
              v115 = 1;
            if (v115)
              v34 = 8;
            else
              v34 = 11;
            if (v115)
              v35 = 1;
            else
              v35 = 3;
            break;
          case 2:
            break;
          case 3:
            v34 = 0;
            v35 = 4;
            break;
          case 4:
            v34 = 0;
            v35 = 5;
            break;
          case 5:
            v35 = 6;
            break;
          case 6:
            v35 = 7;
            break;
          case 7:
            v34 = 0;
            v35 = 8;
            break;
          case 8:
            v35 = 9;
            break;
          case 9:
            v34 = 0;
            v35 = 10;
            break;
          case 0xA:
            v35 = 11;
            break;
          case 0xB:
            v35 = 26;
            break;
          case 0xC:
            v35 = 12;
            break;
          case 0xD:
            v35 = 28;
            break;
          case 0xE:
            v35 = 16;
            break;
          case 0xF:
            v35 = 29;
            break;
          case 0x10:
            v35 = 30;
            break;
          case 0x11:
            v35 = 31;
            break;
          case 0x12:
            v35 = 32;
            break;
          case 0x13:
            v35 = 33;
            break;
          case 0x14:
            v35 = 34;
            break;
          case 0x15:
            v35 = 35;
            break;
          case 0x16:
            v35 = 36;
            break;
          case 0x17:
            v35 = 20;
            break;
          case 0x18:
            v35 = 51;
            break;
          case 0x19:
            v35 = 52;
            break;
          case 0x1A:
            v35 = 53;
            break;
          case 0x1B:
            v35 = 54;
            break;
          default:
            v35 = 3;
            break;
        }
        memset(v134, 0, sizeof(v134));
        v120 = (CA::Shape *)v125;
        if (!(_QWORD)v125)
        {
          v120 = (CA::Shape *)v134;
          CA::Shape::operator=((uint64_t)v134, &v124);
        }
        v37 = *((_DWORD *)this + 25);
        if ((v37 & 0x100) != 0)
        {
          v38 = (_QWORD *)(*(uint64_t (**)(CA::CG::DrawOp *, float64x2_t *))(*(_QWORD *)this + 152))(this, a2);
          v37 = *((_DWORD *)this + 25);
        }
        else
        {
          v38 = 0;
        }
        v119 = v35;
        if ((v37 & 0x800) == 0
          && ((*(uint64_t (**)(CA::CG::DrawOp *, float64x2_t *, uint64_t))(*(_QWORD *)this + 48))(this, a2, v35) & 1) == 0)
        {
          if (!v127)
          {
LABEL_78:
            v117 = 10255;
            v39 = 1;
LABEL_39:
            v116 = v31 & 1;
            v118 = &v116;
            if (((v31 & 1) == 0 || (v33 & 2) == 0)
              && ((v34 & 1) != 0
               || !v127
               && ((*(uint64_t (**)(CA::CG::DrawOp *, float64x2_t *, CA::Shape *))(*(_QWORD *)this + 112))(this, a2, v120) & 1) != 0))
            {
              v40 = v119;
              if (v127
                && v119 == 3
                && !v31
                && ((v33 & 4) != 0 || (*(unsigned int (**)(CA::CG::DrawOp *))(*(_QWORD *)this + 144))(this))
                && (*(_WORD *)(v11 + 816) & 4) == 0)
              {
                v41 = *(_QWORD *)(v11 + 248);
                if (v41)
                {
                  if ((*(_BYTE *)(v41 + 68) & 8) != 0)
                  {
                    *(_BYTE *)(*(_QWORD *)(v11 + 16) + 481) |= 1u;
                    v133 = 0;
                    memset(v132, 0, sizeof(v132));
                    memset(v131, 0, sizeof(v131));
                    v97 = CA::OGL::copy_gstate((uint64_t)v131, *(_QWORD *)(v11 + 232));
                    v98 = v120;
                    *((_QWORD *)&v131[0] + 1) = v120;
                    *(_QWORD *)&v131[1] = v38;
                    v99 = (*(uint64_t (**)(CA::CG::DrawOp *, float64x2_t *, CA::Shape *, float))(*(_QWORD *)this + 112))(this, a2, v120, v97);
                    if ((v99 & 1) == 0)
                    {
                      WORD2(v133) = WORD2(v133) & 0xFB00 | 0x18;
                      *(_QWORD *)&v131[0] = CA::OGL::Context::set_gstate(v11, (uint64_t)v131);
                      *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) = 0;
                      v121 = 0uLL;
                      CA::OGL::emit_combine(v11, 0, 0, 0, v98, (unsigned int *)&v121);
                      *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) = 0x3C003C003C003C00;
                      (*(void (**)(CA::CG::DrawOp *, float64x2_t *))(*(_QWORD *)this + 160))(this, a2);
                      CA::OGL::Context::set_gstate(v11, **(_QWORD **)(v11 + 232));
                    }
                    WORD2(v133) = WORD2(v133) & 0xFB00 | 0x419;
                    *(_QWORD *)&v131[0] = CA::OGL::Context::set_gstate(v11, (uint64_t)v131);
                    CA::CG::ClipOp::draw((CA::CG::ClipOp *)&v124, (CA::CG::Renderer *)a2);
                    CA::OGL::Context::set_gstate(v11, **(_QWORD **)(v11 + 232));
                    if ((v33 & 4) != 0)
                      v100 = 21;
                    else
                      v100 = 55;
                    BYTE4(v133) = v100;
                    *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) = *((_QWORD *)this + 11);
                    *(_QWORD *)&v131[0] = CA::OGL::Context::set_gstate(v11, (uint64_t)v131);
                    (*(void (**)(CA::CG::DrawOp *, float64x2_t *))(*(_QWORD *)this + 168))(this, a2);
                    CA::OGL::Context::set_gstate(v11, **(_QWORD **)(v11 + 232));
                    if ((v99 & 1) == 0)
                    {
                      WORD2(v133) = WORD2(v133) & 0xFB00 | 0x18;
                      *(_QWORD *)&v131[0] = CA::OGL::Context::set_gstate(v11, (uint64_t)v131);
                      *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) = 0x3C003C003C003C00;
                      v121 = 0uLL;
                      CA::OGL::emit_combine(v11, 0, 0, 0, v98, (unsigned int *)&v121);
                      CA::OGL::Context::set_gstate(v11, **(_QWORD **)(v11 + 232));
                    }
                    *(_BYTE *)(*(_QWORD *)(v11 + 16) + 481) &= ~1u;
                    goto LABEL_137;
                  }
                }
              }
              if ((v33 & 2) == 0 && !v127 && (!v116 || (v33 & 6) == 4 && (v34 & 1) != 0))
              {
                if (v40 >= 0x1A && (LOBYTE(a2[261].f64[0]) & 2) == 0)
                {
                  v42 = a2->f64[1];
                  if (v42 != 0.0)
                  {
                    LOBYTE(a2[261].f64[0]) |= 2u;
                    (*(void (**)(float64_t))(**(_QWORD **)&v42 + 760))(COERCE_FLOAT64_T(*(_QWORD *)&v42));
                  }
                }
                v133 = 0;
                memset(v132, 0, sizeof(v132));
                memset(v131, 0, sizeof(v131));
                v43 = *(_QWORD *)(v11 + 232);
                *(_OWORD *)((char *)v131 + 8) = *(_OWORD *)(v43 + 8);
                v44 = *(_QWORD *)(v43 + 32);
                *((_QWORD *)&v131[1] + 1) = *(_QWORD *)(v43 + 24);
                *(_QWORD *)&v132[0] = v44;
                *(_OWORD *)((char *)v132 + 8) = *(_OWORD *)(v43 + 40);
                *((_QWORD *)&v132[1] + 1) = *(_QWORD *)(v43 + 56);
                v45 = *(_WORD *)(v43 + 68);
                LODWORD(v133) = *(_DWORD *)(v43 + 64);
                v46 = v120;
                if ((v34 & 2) == 0)
                  goto LABEL_165;
                if ((v120 & 1) != 0)
                {
                  if (v120 != (CA::Shape *)1)
                    goto LABEL_165;
                }
                else if (*((_DWORD *)v120 + 1) == 12)
                {
                  goto LABEL_165;
                }
                if (CA::Shape::contains((uint64_t)v120, (const CA::Bounds *)&v128))
                {
LABEL_166:
                  *(_QWORD *)&v131[1] = v38;
                  WORD2(v133) = v45 & 0x500 | v119;
                  *(_QWORD *)&v131[0] = CA::OGL::Context::set_gstate(v11, (uint64_t)v131);
                  *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) = *((_QWORD *)this + 11);
                  *(_BYTE *)(*(_QWORD *)(v11 + 16) + 481) |= 1u;
                  (*(void (**)(CA::CG::DrawOp *, float64x2_t *))(*(_QWORD *)this + 176))(this, a2);
                  *(_BYTE *)(*(_QWORD *)(v11 + 16) + 481) &= ~1u;
                  CA::OGL::Context::set_gstate(v11, **(_QWORD **)(v11 + 232));
                  goto LABEL_137;
                }
LABEL_165:
                *((_QWORD *)&v131[0] + 1) = v46;
                goto LABEL_166;
              }
              v58 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, _QWORD))(*(_QWORD *)v11 + 656))(v11, 1, &v124, v117);
              if (v58)
              {
                v59 = (_DWORD *)v58;
                *(_BYTE *)(*(_QWORD *)(v11 + 16) + 481) &= ~1u;
                v133 = 0;
                memset(v132, 0, sizeof(v132));
                memset(v131, 0, sizeof(v131));
                v60 = *(_QWORD *)(v11 + 232);
                v61 = *(_QWORD *)(v60 + 32);
                *((_QWORD *)&v131[1] + 1) = *(_QWORD *)(v60 + 24);
                *(_QWORD *)&v132[0] = v61;
                *(_OWORD *)((char *)v132 + 8) = *(_OWORD *)(v60 + 40);
                *((_QWORD *)&v132[1] + 1) = *(_QWORD *)(v60 + 56);
                WORD2(v133) = *(unsigned __int8 *)(v60 + 68);
                LODWORD(v133) = *(_DWORD *)(v60 + 64);
                LOWORD(v61) = *(_WORD *)(v60 + 68) & 0x100;
                WORD2(v133) |= v61;
                LOWORD(v60) = v61 | *(_WORD *)(v60 + 68) & 0x400;
                *((_QWORD *)&v131[0] + 1) = v120;
                *(_QWORD *)&v131[1] = v38;
                WORD2(v133) = v60 | 0xF;
                v62 = *(unsigned __int16 *)(v11 + 816);
                v117 = v62 & 0x7000;
                if (v117 == 12288)
                {
                  v62 = v62 & 0xFFFF8FFF | 0x2000;
                  *(_WORD *)(v11 + 816) = v62;
                }
                v63 = v62 >> 12;
                if ((v63 & 4) != 0)
                  v64 = 0;
                else
                  v64 = 0x1E1F1400u >> (8 * (v63 & 7));
                *(_BYTE *)(v58 + 73) = *(_BYTE *)(v58 + 73) & 0xC0 | v64;
                *(_QWORD *)&v131[0] = CA::OGL::Context::set_gstate(v11, (uint64_t)v131);
                CA::OGL::Context::push_surface(v11, (uint64_t)v59, 1u, 256, 0);
                WORD2(v133) &= ~0x400u;
                if ((v31 & 2) != 0)
                {
                  if (v116)
                    v65 = 18;
                  else
                    v65 = 12;
                  v66 = *(_QWORD *)(v11 + 16);
                  *(_BYTE *)(v66 + 480) = v65;
                  *(_BYTE *)(v66 + 481) |= 1u;
                }
                v67 = v33 & 3 | v116;
                v68 = v67 == 0;
                if (v67)
                {
                  *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) = 0x3C003C003C003C00;
                  v69 = 20;
                }
                else
                {
                  *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) = *((_QWORD *)this + 11);
                  v69 = 22;
                }
                (*(void (**)(CA::CG::DrawOp *, float64x2_t *))(*(_QWORD *)this + 8 * v69))(this, a2);
                *(_BYTE *)(*(_QWORD *)(v11 + 16) + 481) |= 1u;
                v92 = WORD2(v133);
                if ((v31 & 2) != 0)
                  *(_BYTE *)(*(_QWORD *)(v11 + 16) + 480) = BYTE4(v133);
                WORD2(v133) = v92 | 0x400;
                if ((v33 & 1) == 0 && v67)
                {
                  *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) = *((_QWORD *)this + 11);
                  (*(void (**)(CA::CG::DrawOp *, float64x2_t *))(*(_QWORD *)this + 168))(this, a2);
                  *(_BYTE *)(*(_QWORD *)(v11 + 16) + 481) |= 1u;
                  v68 = 1;
                }
                if (v127)
                  CA::CG::ClipOp::draw((CA::CG::ClipOp *)&v124, (CA::CG::Renderer *)a2);
                *(_BYTE *)(*(_QWORD *)(v11 + 16) + 481) &= ~1u;
                CA::OGL::Context::pop_surface((CA::OGL::Context *)v11);
                CA::OGL::Context::set_gstate(v11, **(_QWORD **)(v11 + 232));
                *(_WORD *)(v11 + 816) = *(_WORD *)(v11 + 816) & 0x8FFF | v117;
                v93 = v119;
                if (v119 >= 0x1A && (LOBYTE(a2[261].f64[0]) & 2) == 0)
                {
                  v94 = a2->f64[1];
                  if (v94 != 0.0)
                  {
                    LOBYTE(a2[261].f64[0]) |= 2u;
                    (*(void (**)(float64_t))(**(_QWORD **)&v94 + 760))(COERCE_FLOAT64_T(*(_QWORD *)&v94));
                  }
                }
                v95 = *(_QWORD *)(v11 + 16);
                *(_BYTE *)(v95 + 480) = v93;
                *(_BYTE *)(v95 + 481) |= 1u;
                *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) = 0x3C003C003C003C00;
                if (v68)
                {
                  v96 = 1;
                }
                else
                {
                  *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) = *((_QWORD *)this + 11);
                  v96 = 11;
                }
                v121 = 0uLL;
                CA::OGL::emit_combine(v11, v96, v59, 0, v120, (unsigned int *)&v121);
                *(_BYTE *)(*(_QWORD *)(v11 + 16) + 481) &= ~1u;
                *(_BYTE *)(*(_QWORD *)(v11 + 16) + 480) = *(_BYTE *)(*(_QWORD *)(v11 + 232) + 68);
                v89 = v11;
                v90 = (uint64_t)v59;
                goto LABEL_136;
              }
              goto LABEL_137;
            }
            v47 = (v34 & 4 | v33 & 1) == 0;
            if (v34 & 4 | v33 & 1)
              v48 = 10248;
            else
              v48 = 8200;
            if (v39)
              v49 = v48;
            else
              v49 = 8200;
            v50 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v11 + 656))(v11, 1, &v124, v49);
            v53 = (_DWORD *)v50;
            v54 = *(unsigned __int16 *)(v11 + 816);
            v55 = (v54 >> 12) & 7;
            if (v50)
            {
              if (v55 == 3)
              {
                *(_WORD *)(v11 + 816) = v54 & 0x8FFF | 0x2000;
                LOBYTE(v56) = 31;
              }
              else if (v55 > 3)
              {
                LOBYTE(v56) = 0;
              }
              else
              {
                v56 = 0x1E1F1400u >> (8 * v55);
              }
              *(_BYTE *)(v50 + 73) = *(_BYTE *)(v50 + 73) & 0xC0 | v56;
              v133 = 0;
              memset(v132, 0, sizeof(v132));
              memset(v131, 0, sizeof(v131));
              v70 = *(_QWORD *)(v11 + 232);
              v71 = *(_QWORD *)(v70 + 32);
              *((_QWORD *)&v131[1] + 1) = *(_QWORD *)(v70 + 24);
              *(_QWORD *)&v132[0] = v71;
              *(_OWORD *)((char *)v132 + 8) = *(_OWORD *)(v70 + 40);
              *((_QWORD *)&v132[1] + 1) = *(_QWORD *)(v70 + 56);
              WORD2(v133) = *(unsigned __int8 *)(v70 + 68);
              LODWORD(v133) = *(_DWORD *)(v70 + 64);
              LOWORD(v71) = *(_WORD *)(v70 + 68) & 0x100;
              WORD2(v133) |= v71;
              LOWORD(v70) = v71 | *(_WORD *)(v70 + 68) & 0x400;
              *((_QWORD *)&v131[0] + 1) = v120;
              *(_QWORD *)&v131[1] = v38;
              WORD2(v133) = v70 | 0xF;
              *(_QWORD *)&v131[0] = CA::OGL::Context::set_gstate(v11, (uint64_t)v131);
              CA::OGL::Context::push_surface(v11, (uint64_t)v53, 1u, 256, 0);
              WORD2(v133) &= ~0x400u;
              if ((v31 & 2) != 0)
              {
                if (v116)
                  v73 = 18;
                else
                  v73 = 12;
                v74 = *(_QWORD *)(v11 + 16);
                *(_BYTE *)(v74 + 480) = v73;
                *(_BYTE *)(v74 + 481) |= 1u;
                *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) = 0x3C003C003C003C00;
                (*(void (**)(CA::CG::DrawOp *, float64x2_t *))(*(_QWORD *)this + 160))(this, a2);
                *(_BYTE *)(*(_QWORD *)(v11 + 16) + 481) &= ~1u;
                v72 = WORD2(v133);
                *(_BYTE *)(*(_QWORD *)(v11 + 16) + 480) = BYTE4(v133);
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) = 0x3C003C003C003C00;
                (*(void (**)(CA::CG::DrawOp *, float64x2_t *))(*(_QWORD *)this + 160))(this, a2);
                v72 = WORD2(v133);
              }
              WORD2(v133) = v72 | 0x400;
              if (v127)
              {
                *(_BYTE *)(*(_QWORD *)(v11 + 16) + 481) |= 1u;
                CA::CG::ClipOp::draw((CA::CG::ClipOp *)&v124, (CA::CG::Renderer *)a2);
                *(_BYTE *)(*(_QWORD *)(v11 + 16) + 481) &= ~1u;
              }
              CA::OGL::Context::pop_surface((CA::OGL::Context *)v11);
              CA::OGL::Context::set_gstate(v11, **(_QWORD **)(v11 + 232));
            }
            if (v47)
            {
              v75 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, _QWORD))(*(_QWORD *)v11 + 656))(v11, 1, &v124, v117);
              v76 = v75;
              if (v75)
              {
                v77 = *(unsigned __int16 *)(v11 + 816);
                _ZF = v55 == 3;
                v78 = v120;
                if (_ZF)
                {
                  v77 = v77 & 0xFFFF8FFF | 0x2000;
                  *(_WORD *)(v11 + 816) = v77;
                }
                v79 = v77 >> 12;
                if ((v79 & 4) != 0)
                  v80 = 0;
                else
                  v80 = 0x1E1F1400u >> (8 * (v79 & 7));
                *(_BYTE *)(v75 + 73) = *(_BYTE *)(v75 + 73) & 0xC0 | v80;
                v133 = 0;
                memset(v132, 0, sizeof(v132));
                memset(v131, 0, sizeof(v131));
                v81 = *(_QWORD *)(v11 + 232);
                *(_OWORD *)((char *)v131 + 8) = *(_OWORD *)(v81 + 8);
                v82 = *(_QWORD *)(v81 + 24);
                v83 = *(_QWORD *)(v81 + 32);
                *(_OWORD *)((char *)v132 + 8) = *(_OWORD *)(v81 + 40);
                v84 = *(_QWORD *)(v81 + 56);
                *((_QWORD *)&v131[1] + 1) = v82;
                *(_QWORD *)&v132[0] = v83;
                *((_QWORD *)&v132[1] + 1) = v84;
                LOWORD(v83) = *(unsigned __int8 *)(v81 + 68);
                WORD2(v133) = v83;
                LODWORD(v133) = *(_DWORD *)(v81 + 64);
                WORD2(v133) = *(_WORD *)(v81 + 68) & 0x100 | v83;
                WORD2(v133) |= *(_WORD *)(v81 + 68) & 0x400;
                *((_QWORD *)&v131[0] + 1) = v78;
                *(_QWORD *)&v131[0] = CA::OGL::Context::set_gstate(v11, (uint64_t)v131);
                CA::OGL::Context::push_surface(v11, v76, 0, 2, 0);
                *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) = *((_QWORD *)this + 11);
                (*(void (**)(CA::CG::DrawOp *, float64x2_t *))(*(_QWORD *)this + 168))(this, a2);
                CA::OGL::Context::pop_surface((CA::OGL::Context *)v11);
                CA::OGL::Context::set_gstate(v11, **(_QWORD **)(v11 + 232));
LABEL_115:
                *(_WORD *)(v11 + 816) = *(_WORD *)(v11 + 816) & 0x8FFF | v54 & 0x7000;
                if (v53)
                  _ZF = v76 == 0;
                else
                  _ZF = 1;
                if (_ZF)
                {
                  if (v53)
                  {
                    if (v119)
                    {
                      if ((LOBYTE(a2[261].f64[0]) & 2) == 0)
                      {
                        v86 = a2->f64[1];
                        if (v86 != 0.0)
                        {
                          LOBYTE(a2[261].f64[0]) |= 2u;
                          (*(void (**)(float64_t))(**(_QWORD **)&v86 + 760))(COERCE_FLOAT64_T(*(_QWORD *)&v86));
                        }
                      }
                      *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) = *((_QWORD *)this + 11);
                      *(_BYTE *)(*(_QWORD *)(v11 + 16) + 480) = v119;
                      v131[0] = 0uLL;
                      CA::OGL::emit_combine(v11, 16, v53, 0, v78, (unsigned int *)v131);
                    }
                    else
                    {
                      v88 = *(_QWORD *)(v11 + 16);
                      *(_BYTE *)(v88 + 480) = 9;
                      *(_BYTE *)(v88 + 481) |= 1u;
                      v131[0] = 0uLL;
                      CA::OGL::emit_combine(v11, 1, v53, 0, v78, (unsigned int *)v131);
                      *(_BYTE *)(*(_QWORD *)(v11 + 16) + 481) &= ~1u;
                    }
                    *(_BYTE *)(*(_QWORD *)(v11 + 16) + 480) = *(_BYTE *)(*(_QWORD *)(v11 + 232) + 68);
                  }
                  if (!v76)
                  {
LABEL_134:
                    if (v53)
                    {
                      v89 = v11;
                      v90 = (uint64_t)v53;
LABEL_136:
                      CA::OGL::Context::release_surface(v89, v90);
                    }
LABEL_137:
                    if (byte_1ECDC6AEA)
                    {
                      *(_BYTE *)(*(_QWORD *)(v11 + 16) + 481) |= 1u;
                      if (SDWORD2(v124) <= SHIDWORD(v124))
                        v101 = HIDWORD(v124);
                      else
                        v101 = DWORD2(v124);
                      v51.i32[0] = 1073741822;
                      v52.i32[0] = v101;
                      v102.i64[0] = (int)v124;
                      v102.i64[1] = SDWORD1(v124);
                      v103 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v52, v51), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v102));
                      v104 = (double)SDWORD2(v124);
                      v105 = (double)SHIDWORD(v124);
                      *(_BYTE *)(*(_QWORD *)(v11 + 16) + 480) = 3;
                      if (v101 > 1073741822)
                      {
                        v104 = 1.79769313e308;
                        v105 = 1.79769313e308;
                      }
                      v121 = v103;
                      v122 = v104;
                      v123 = v105;
                      *(_QWORD *)&v131[0] = &v121;
                      *((_QWORD *)&v131[0] + 1) = &CA::identity_transform;
                      v131[1] = 0u;
                      v132[0] = 0u;
                      v106 = (double *)(*(uint64_t (**)(CA::CG::DrawOp *))(*(_QWORD *)this + 120))(this);
                      CA::OGL::fill_color_rect(v11, (uint64_t)v131, v106, v107, v108, v109);
                      *(_BYTE *)(*(_QWORD *)(v11 + 16) + 481) &= ~1u;
                    }
                    if (v38)
                    {
                      do
                      {
                        v91 = (_QWORD *)*v38;
                        free(v38);
                        v38 = v91;
                      }
                      while (v91);
                    }
LABEL_140:
                    if (*((_QWORD *)&v125 + 1))
                      (*(void (**)(_QWORD))(**((_QWORD **)&v125 + 1) + 8))(*((_QWORD *)&v125 + 1));
                    if ((_QWORD)v126)
                      (*(void (**)(_QWORD))(*(_QWORD *)v126 + 8))(v126);
                    if ((_QWORD)v125)
                      CA::Shape::unref((CA::Shape *)v125);
                    return;
                  }
                }
                else
                {
                  if ((LOBYTE(a2[261].f64[0]) & 2) == 0)
                  {
                    v87 = a2->f64[1];
                    if (v87 != 0.0)
                    {
                      LOBYTE(a2[261].f64[0]) |= 2u;
                      (*(void (**)(float64_t))(**(_QWORD **)&v87 + 760))(COERCE_FLOAT64_T(*(_QWORD *)&v87));
                    }
                  }
                  *(_BYTE *)(*(_QWORD *)(v11 + 16) + 480) = v119;
                  v131[0] = 0uLL;
                  CA::OGL::emit_combine(v11, 17, v53, v76, v78, (unsigned int *)v131);
                  *(_BYTE *)(*(_QWORD *)(v11 + 16) + 480) = *(_BYTE *)(*(_QWORD *)(v11 + 232) + 68);
                }
                CA::OGL::Context::release_surface(v11, v76);
                goto LABEL_134;
              }
            }
            else
            {
              v76 = 0;
            }
            v78 = v120;
            goto LABEL_115;
          }
          v57 = 0;
          while ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)&v126 + 1) + 8 * v57) + 16))(*(_QWORD *)(*((_QWORD *)&v126 + 1) + 8 * v57)) != 6)
          {
            if (++v57 >= v127)
              goto LABEL_78;
          }
        }
        v39 = 0;
        v117 = 8207;
        goto LABEL_39;
      }
    }
  }
}

BOOL CA::OGL::detach_contents(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  __IOSurface *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  IOSurfaceID ID;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  char *v19;
  int v20;
  NSObject *v24;
  char *v25;
  uint64_t v26;
  float64x2_t v28;
  int64x2_t v29;
  double v30;
  int v31;
  double v32;
  unsigned int v35;
  int v36;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  int v43;
  CA::Rect *v44;
  int32x4_t v45;
  int32x4_t v46;
  int v47;
  int64x2_t v48;
  double v49;
  int8x16_t v50;
  double v51;
  const CA::Rect *v52;
  int32x4_t v53;
  int32x4_t v54;
  double v55;
  double v56;
  double v57;
  int32x4_t v58;
  uint64_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int v62;
  int64x2_t v63;
  float64x2_t v64;
  int8x16_t v65;
  int32x2_t v66;
  int64x2_t v67;
  int8x16_t v68;
  int8x16_t v69;
  const Rect *v70;
  uint64_t v71;
  _BOOL4 v72;
  double v73;
  float v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  CA::WindowServer::Display *v84;
  unsigned int v85;
  _BOOL4 v86;
  char v87;
  int v88;
  uint64_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int v92;
  int64x2_t v93;
  int8x16_t v94;
  double v95;
  double v96;
  const Rect *v97;
  const Rect *v98;
  int32x4_t v99;
  uint64_t v100;
  int32x4_t v101;
  int64x2_t v102;
  int8x16_t v103;
  int v104;
  int64x2_t v105;
  float64x2_t v106;
  int8x16_t v107;
  int32x2_t v108;
  int64x2_t v109;
  const CA::Bounds *v110;
  const CA::Bounds *v111;
  uint64_t v112;
  CA::Shape *v113;
  uint64_t v114;
  __int16 v115;
  float16x4_t *v116;
  float16x4_t v120;
  int v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  int v127;
  int8x16_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v134;
  int32x4_t v135[3];
  CA::Shape *v136[4];
  int8x16_t v137;
  __int128 v138;
  int v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  _BYTE buf[32];
  __int128 v145;
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  if (a3)
    v8 = *(__IOSurface **)(a3 + 112);
  else
    v8 = 0;
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 176);
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 24);
  if ((v11 & 0x4000000) != 0)
  {
    v12 = 0;
    if (!v10)
    {
LABEL_11:
      v13 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    v12 = *(_QWORD **)(*(_QWORD *)(a2 + 24) + 144);
    if (!v10)
      goto LABEL_11;
  }
  if ((*(_WORD *)(v9 + 816) & 2) != 0)
    goto LABEL_11;
  if ((*(_QWORD *)(*(_QWORD *)(a2 + 24) + 40) & 0x30) == 0x20)
  {
    v13 = 27;
    goto LABEL_12;
  }
  v16 = *(_QWORD *)(v9 + 232);
  if ((*(_BYTE *)(a3 + 13) & 0x10) == 0 && (*(_BYTE *)(a5 + 309) & 2) == 0)
  {
    v13 = 2;
    goto LABEL_12;
  }
  v17 = *(_QWORD *)(v9 + 16);
  if (*(_QWORD *)(v17 + 8) != 0x3C003C003C003C00)
  {
    v13 = 3;
    goto LABEL_12;
  }
  if (*(_DWORD *)(v9 + 724))
  {
    v13 = 4;
    goto LABEL_12;
  }
  if (*(_QWORD *)(v17 + 360))
  {
    v13 = 5;
    goto LABEL_12;
  }
  if ((*(_WORD *)(v16 + 68) & 0x100) == 0)
  {
    v13 = 6;
    goto LABEL_12;
  }
  if (*(_QWORD *)(v16 + 16))
  {
    v13 = 8;
    goto LABEL_12;
  }
  if (!v12)
  {
    v13 = 9;
    goto LABEL_12;
  }
  if ((v11 & 0x40) == 0)
  {
    v13 = 10;
    goto LABEL_12;
  }
  if (*(_BYTE *)(a5 + 337))
  {
    v13 = 11;
    goto LABEL_12;
  }
  v20 = *(_DWORD *)(a5 + 308);
  if ((v20 & 0x400) != 0)
  {
    v13 = 12;
    goto LABEL_12;
  }
  v134 = *a1;
  if ((v20 & 9) != 0 && (*(_WORD *)(a2 + 40) & 0x3C0) != 0)
  {
    v13 = 13;
    goto LABEL_12;
  }
  if ((*(_DWORD *)(a2 + 32) & 0x100006) != 0)
  {
    v13 = 14;
    goto LABEL_12;
  }
  v26 = a1[1];
  if ((*(_DWORD *)(v26 + 1064) & 0x100000) == 0)
  {
    v13 = 15;
    goto LABEL_12;
  }
  if ((*(_BYTE *)(v26 + 271) & 0x20) != 0)
  {
    v13 = 26;
    goto LABEL_12;
  }
  if (byte_1ECDC6A66)
  {
    v13 = 16;
    goto LABEL_12;
  }
  v130 = v12[12];
  v131 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 24))(v10, v134, a4, a3);
  if (!v131)
  {
    v13 = 17;
    goto LABEL_12;
  }
  if ((*(_BYTE *)(a5 + 248) & 0x1F) != 0)
  {
    if ((*(_BYTE *)(a5 + 248) & 0x10) != 0)
    {
      v13 = 18;
      if (*(double *)(a5 + 128) != 0.0 || *(double *)(a5 + 160) != 0.0)
        goto LABEL_12;
    }
    v28 = *(float64x2_t *)(a5 + 104);
    v29 = *(int64x2_t *)(a5 + 136);
    v30 = *(double *)(a5 + 112);
    if (vabdd_f64(v30, *(double *)v29.i64) >= 0.001 || fabs(v30) >= 0.001)
    {
      v13 = 19;
      if (fabs(vsubq_f64(v28, (float64x2_t)vdupq_laneq_s64(v29, 1)).f64[0]) >= 0.001 || fabs(v28.f64[0]) >= 0.001)
        goto LABEL_12;
      if (v30 <= 0.0 || *(double *)v29.i64 <= 0.0)
      {
        if (v30 >= 0.0 || *(double *)v29.i64 >= 0.0)
        {
          if (*(double *)v29.i64 > 0.0 && v30 < 0.0)
            v31 = 7;
          else
            v31 = 4;
        }
        else
        {
          v31 = 5;
        }
      }
      else
      {
        v31 = 6;
      }
      v28.f64[0] = *(float64_t *)(a5 + 112);
    }
    else
    {
      v29.i64[0] = *(_QWORD *)(a5 + 144);
      if (v28.f64[0] >= 0.0 || *(double *)&v29.i64[1] <= 0.0)
      {
        if (v28.f64[0] <= 0.0 || *(double *)&v29.i64[1] >= 0.0)
        {
          if (*(double *)&v29.i64[1] < 0.0 && v28.f64[0] < 0.0)
            v31 = 3;
          else
            v31 = 0;
        }
        else
        {
          v31 = 1;
        }
      }
      else
      {
        v31 = 2;
      }
    }
    if (v28.f64[0] < 0.0)
      v28.f64[0] = -v28.f64[0];
    if (*(double *)v29.i64 < 0.0)
      *(double *)v29.i64 = -*(double *)v29.i64;
    v32 = (*(double *)v29.i64 + v28.f64[0]) * 0.5;
  }
  else
  {
    v31 = 0;
    v32 = 1.0;
  }
  v35 = *(_DWORD *)(a3 + 12);
  v36 = v31 ^ (v35 >> 11) & 1 ^ (*(_DWORD *)(a5 + 308) >> 11) & 1 ^ 1;
  if (!a6 && v32 < 1.0 || !a7 && v32 > 1.0)
    v36 |= 8u;
  if ((v36 & 4) != 0 && (*(_QWORD *)(*(_QWORD *)(a2 + 16) + 24) & 1) != 0)
    v36 ^= 3u;
  v38 = *(double *)(a5 + 24);
  v39 = *(double *)(a5 + 32);
  v41 = *(double *)(a5 + 256);
  v40 = *(double *)(a5 + 264);
  v42 = v40 * *(double *)(a5 + 16);
  v142.f64[0] = v40 * *(double *)(a5 + 8);
  v142.f64[1] = v42;
  v143.f64[0] = v40 * v38 / v41;
  v143.f64[1] = v40 * v39;
  v43 = v36 | (v35 >> 19) & 0x20;
  if ((v35 & 0x4000000) != 0)
    v43 |= ~*(unsigned __int16 *)(a1[1] + 270) & 0x4000;
  v44 = (CA::Rect *)(v43 | (v35 >> 14) & 0x800);
  v140 = 0u;
  v141 = 0u;
  CA::OGL::Context::raster_round_rect((CA::OGL::Context *)buf, (const Rect *)*a1, (double *)(a5 + 40));
  if (*(int *)&buf[8] <= *(int *)&buf[12])
    v47 = *(_DWORD *)&buf[12];
  else
    v47 = *(_DWORD *)&buf[8];
  v45.i32[0] = 1073741822;
  v46.i32[0] = v47;
  v48.i64[0] = *(int *)buf;
  v48.i64[1] = *(int *)&buf[4];
  v49 = (double)*(int *)&buf[8];
  v128 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
  v50 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v46, v45), 0), v128, (int8x16_t)vcvtq_f64_s64(v48));
  v51 = (double)*(int *)&buf[12];
  if (v47 > 1073741822)
  {
    v49 = 1.79769313e308;
    v51 = 1.79769313e308;
  }
  v140 = (float64x2_t)v50;
  v141.f64[0] = v49;
  v141.f64[1] = v51;
  (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v10 + 32))(v10, &v140);
  if ((*(_BYTE *)(v134 + 416) & 1) == 0)
  {
    v140.f64[1] = (double)*(int *)(v134 + 196) - (v140.f64[1] + v141.f64[1]);
    v44 = (CA::Rect *)(v44 ^ 1);
  }
  v59 = v12[14];
  v53.i64[0] = v12[15];
  v60.i64[0] = (int)v59;
  v60.i64[1] = SHIDWORD(v59);
  v61 = v60;
  v62 = v53.i32[1];
  v60.i64[0] = v53.i32[0];
  v60.i64[1] = v53.i32[1];
  v63 = v60;
  if (v53.i32[0] > v53.i32[1])
    v62 = v12[15];
  v53.i32[0] = v62;
  v54.i32[0] = 1073741822;
  v64 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v53, v54), 0), v128, (int8x16_t)vcvtq_f64_s64(v61));
  v65 = (int8x16_t)vcvtq_f64_s64(v63);
  v66 = vdup_n_s32(v62 > 1073741822);
  v67.i64[0] = v66.u32[0];
  v67.i64[1] = v66.u32[1];
  v68 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v67, 0x3FuLL));
  v69 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  CA::OGL::clip_detached_rects(&v142, &v140, v44, v52, v64, (float64x2_t)vbslq_s8(v68, v69, v65), *(double *)v68.i64, *(double *)v69.i64, v55, v56, v57, v58);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64(v143), (int32x4_t)vcgtzq_f64(v141))))) & 1) != 0)
  {
    v13 = 25;
    goto LABEL_12;
  }
  v71 = *(_QWORD *)(a1[1] + 16);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  CA::Bounds::set_exterior((int32x4_t *)buf, v70, v140, v141);
  v72 = CA::Shape::contains(v71, (const CA::Bounds *)buf);
  v75 = v44 | 0x400;
  if (v72)
    v75 = v44;
  v129 = v75;
  v76 = *(_QWORD *)(a2 + 24);
  v77 = *(_QWORD *)(v76 + 96);
  if (v77)
  {
    if (*(_BYTE *)(v77 + 12) == 25)
    {
      v78 = *(_QWORD *)(v76 + 144);
      if (v78)
      {
        if (*(_QWORD *)(v78 + 24))
        {
          v79 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(v77 + 16) + 24) + 8));
          v80 = (v79 >> 35) & 0x8000 | v129;
          if (*(_DWORD *)(v77 + 264) == *(_DWORD *)(v134 + 212))
            v81 = v80 | 0x2000;
          else
            v81 = v80;
          v129 = v81;
        }
      }
    }
  }
  v82 = *(_QWORD *)(v134 + 176);
  if (v82 && (v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 16))(v82)) != 0)
  {
    v84 = (CA::WindowServer::Display *)v83;
    v85 = *(_DWORD *)(v83 + 624);
    v127 = (v85 >> 2) & 1;
    v86 = (*(_WORD *)(v83 + 656) & 0x1800) == 0;
    if ((v85 & 4) != 0)
      v87 = CA::WindowServer::Display::clones_support_detaching(*(CA::WindowServer::Display **)(v83 + 40));
    else
      v87 = 0;
    if (((*(uint64_t (**)(CA::WindowServer::Display *))(*(_QWORD *)v84 + 1528))(v84) & 1) == 0)
    {
      *(float *)&v73 = CA::WindowServer::Display::edr_headroom(v84);
      v74 = 1.0;
      if (*(float *)&v73 != 1.0 && (*(_WORD *)(a3 + 336) & 4) == 0)
      {
        v13 = 21;
        goto LABEL_12;
      }
    }
  }
  else
  {
    v87 = 0;
    v86 = 0;
    LOBYTE(v127) = 0;
  }
  if ((v87 & 1) != 0 || v86)
  {
    if (CA::Render::LayerNode::clear_above_and_black_below(*(CA::Render::LayerNode ****)(a2 + 16), v127, v73, v74))
    {
      if ((~*(_DWORD *)(a1[1] + 268) & 0xC0) != 0)
        v88 = 256;
      else
        v88 = 4352;
      v129 |= v88;
    }
    else if ((v87 & 1) != 0)
    {
      v13 = 22;
      goto LABEL_12;
    }
  }
  v139 = 0;
  if ((*(unsigned int (**)(uint64_t, _QWORD *, _QWORD, uint64_t, uint64_t, float64x2_t *, float64x2_t *, _QWORD, int *))(*(_QWORD *)v10 + 40))(v10, v12, 0, a3, v131, &v142, &v140, v129, &v139))
  {
    v12[12] = v12[12] & 0xFFFFFFFFFFFE7FFFLL | 0x8000;
    *(_DWORD *)(a4 + 20) = *(_DWORD *)(v134 + 212);
    CA::Render::updater_mark_detached_layer(*(_QWORD *)(a2 + 16), (CA::Render::LayerNode *)((v130 & 0x8000) == 0));
    if ((*(unsigned int (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v10 + 48))(v10, v12, 0))
    {
      *(_BYTE *)(*(_QWORD *)(v134 + 16) + 481) &= ~1u;
      *(_BYTE *)(*(_QWORD *)(v134 + 16) + 16) = 0;
      if (byte_1ECDC6A62)
        v89 = 0x3804380400000000;
      else
        v89 = 0;
      *(_QWORD *)(*(_QWORD *)(v134 + 16) + 8) = v89;
      v137 = 0u;
      v138 = 0u;
      CA::OGL::Context::raster_round_rect((CA::OGL::Context *)buf, (const Rect *)*a1, (double *)(a5 + 40));
      if (*(int *)&buf[8] <= *(int *)&buf[12])
        v92 = *(_DWORD *)&buf[12];
      else
        v92 = *(_DWORD *)&buf[8];
      v90.i32[0] = 1073741822;
      v91.i32[0] = v92;
      v93.i64[0] = *(int *)buf;
      v93.i64[1] = *(int *)&buf[4];
      v94 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v91, v90), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v93));
      v95 = (double)*(int *)&buf[8];
      v137 = v94;
      v96 = 1.79769313e308;
      if (v92 <= 1073741822)
        v96 = (double)*(int *)&buf[12];
      else
        v95 = 1.79769313e308;
      *(double *)&v138 = v95;
      *((double *)&v138 + 1) = v96;
      *(_QWORD *)buf = &v137;
      *(_QWORD *)&buf[8] = &CA::identity_transform;
      *(_OWORD *)&buf[16] = 0u;
      v145 = 0u;
      CA::OGL::emit_one_part_rect((CA::OGL::Context *)v134, (uint64_t)buf, 0, 0, 0);
      if (byte_1ECDC6A62)
      {
        v115 = v139;
        if (v139)
        {
          v116 = *(float16x4_t **)(v134 + 16);
          if ((v139 & 0x2000) != 0)
          {
            v120 = (float16x4_t)0x3804000038040000;
          }
          else
          {
            __asm { FMOV            V1.4S, #0.75 }
            v120 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16(v116[1]), _Q1));
          }
          v121 = 0;
          v116[1] = v120;
          v122 = 0.0;
          do
          {
            v123 = *(double *)v137.i64;
            if ((v115 & 0x2000) != 0)
            {
              v125 = *(double *)&v138;
              v124 = *(double *)&v137.i64[1] + (double)v121 * 0.03125 * *((double *)&v138 + 1);
              v126 = *((double *)&v138 + 1) * 0.015625;
            }
            else
            {
              v124 = *(double *)&v137.i64[1];
              v123 = *(double *)v137.i64 + v122 * 0.03125 * *(double *)&v138;
              v125 = *(double *)&v138 * 0.015625;
              v126 = *((double *)&v138 + 1);
            }
            v136[0] = *(CA::Shape **)&v123;
            v136[1] = *(CA::Shape **)&v124;
            v136[2] = *(CA::Shape **)&v125;
            v136[3] = *(CA::Shape **)&v126;
            v135[0].i64[0] = (uint64_t)v136;
            v135[0].i64[1] = (uint64_t)&CA::identity_transform;
            memset(&v135[1], 0, 32);
            CA::OGL::emit_one_part_rect((CA::OGL::Context *)v134, (uint64_t)v135, 0, 0, 0);
            v122 = v122 + 1.0;
            ++v121;
          }
          while (v121 != 32);
        }
      }
      if ((v130 & 0x8000) == 0)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        v135[0] = 0uLL;
        CA::Bounds::set_exterior((int32x4_t *)buf, v97, *(float64x2_t *)(a5 + 40), *(float64x2_t *)(a5 + 56));
        v100 = v12[14];
        v101.i64[0] = v12[15];
        v102.i64[0] = (int)v100;
        v102.i64[1] = SHIDWORD(v100);
        v103 = (int8x16_t)vcvtq_f64_s64(v102);
        v104 = v101.i32[1];
        v102.i64[0] = v101.i32[0];
        v102.i64[1] = v101.i32[1];
        v105 = v102;
        if (v101.i32[0] > v101.i32[1])
          v104 = v12[15];
        v101.i32[0] = v104;
        v99.i32[0] = 1073741822;
        v106 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v101, v99), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), v103);
        v107 = (int8x16_t)vcvtq_f64_s64(v105);
        v108 = vdup_n_s32(v104 > 1073741822);
        v109.i64[0] = v108.u32[0];
        v109.i64[1] = v108.u32[1];
        CA::Bounds::set_exterior(v135, v98, v106, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v109, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v107));
        if (*(_DWORD *)buf != v135[0].i32[0]
          || *(_QWORD *)&buf[4] != *(uint64_t *)((char *)v135[0].i64 + 4)
          || *(_DWORD *)&buf[12] != v135[0].i32[3])
        {
          v136[0] = (CA::Shape *)CA::Shape::new_shape((CA::Shape *)buf, v110);
          CA::shape_subtract(v136, (CA::Shape **)v135, v111);
          *(_BYTE *)(*(_QWORD *)(v134 + 16) + 481) |= 1u;
          v112 = *(_QWORD *)(v134 + 16);
          *(_BYTE *)(v112 + 480) = 12;
          *(_QWORD *)(v112 + 8) = 0x3C00000000000000;
          v113 = v136[0];
          v137 = 0uLL;
          CA::OGL::emit_combine(v134, 0, 0, 0, v136[0], (unsigned int *)&v137);
          v114 = *(_QWORD *)(v134 + 16);
          *(_BYTE *)(v114 + 480) = *(_BYTE *)(v16 + 68);
          *(_BYTE *)(v114 + 481) &= ~1u;
          CA::Shape::unref(v113);
        }
      }
      v13 = 0;
    }
    else
    {
      v13 = 0;
      *(_WORD *)(v134 + 816) |= 0x200u;
    }
  }
  else
  {
    v13 = 23;
  }
LABEL_12:
  if (v8)
  {
    IOSurfaceSetDetachModeCode();
    if (!byte_1ECDC6A6E)
      goto LABEL_16;
    ID = IOSurfaceGetID(v8);
  }
  else
  {
    if (!byte_1ECDC6A6E)
      goto LABEL_16;
    ID = 0;
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v18 = x_log_category_CADebug;
    if (os_log_type_enabled((os_log_t)x_log_category_CADebug, OS_LOG_TYPE_INFO))
    {
      v19 = CA::detach_string_coreanimation(CA::CADetachReasonCode)::names[v13];
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = ID;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = v19;
      _os_log_impl(&dword_184457000, v18, OS_LOG_TYPE_INFO, "[CA] Surface ID:0x%x detach result: %s", buf, 0x12u);
    }
  }
LABEL_16:
  if (v13 < 2)
    return v13 == 0;
  if (v10 && v12)
  {
    (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v10 + 56))(v10, v12, 0);
  }
  else if (!v12)
  {
    goto LABEL_22;
  }
  v12[12] &= ~0x8000uLL;
LABEL_22:
  if (HIBYTE(xmmword_1ECDC6A90))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v24 = x_log_category_ogl;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_FAULT))
      {
        v25 = CA::detach_string_coreanimation(CA::CADetachReasonCode)::names[v13];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v25;
        _os_log_impl(&dword_184457000, v24, OS_LOG_TYPE_FAULT, "Failed to detach surface code: %s", buf, 0xCu);
      }
    }
  }
  return v13 == 0;
}

void CA::OGL::CombineNode::apply(uint64_t a1, _QWORD *a2, uint64_t a3, double a4, int32x4_t a5, int32x4_t a6)
{
  uint64_t v8;
  uint64_t v9;
  float v10;
  int v11;
  _DWORD *v12;
  uint64_t v13;
  CA::Shape *v14;
  unsigned int *v15;
  unsigned int v17;
  uint64_t v18;
  int8x16_t v19;
  uint64_t v20;
  char v21;
  char v22;
  int32x2_t *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  int8x16_t v27;
  int32x4_t v28;
  CA::Shape *v29;
  _QWORD v30[2];
  int32x2_t v31[3];

  v31[2] = *(int32x2_t *)MEMORY[0x1E0C80C00];
  v8 = **(_QWORD **)(a1 + 8);
  *(_QWORD *)(*(_QWORD *)(v8 + 16) + 8) = *(_QWORD *)(a1 + 88);
  v9 = *(_QWORD *)(v8 + 16);
  if (*(unsigned __int8 *)(v9 + 480) >= 2u)
    *(_BYTE *)(v9 + 481) |= 1u;
  v10 = *(float *)a3;
  a5.i32[0] = *(_DWORD *)(a3 + 4);
  v11 = *(unsigned __int8 *)(a1 + 224);
  v12 = (_DWORD *)*a2;
  v13 = a2[1];
  v14 = *(CA::Shape **)(a1 + 64);
  v15 = (unsigned int *)(a1 + 228);
  a6.i32[0] = 1.0;
  if (v10 == 1.0 && *(float *)a5.i32 == 1.0)
    CA::OGL::emit_combine(v8, v11, v12, v13, v14, v15);
  else
    CA::OGL::emit_combine_scaled(v8, v11, (uint64_t)v12, v13, v14, v15, v10, a5, a6);
  v17 = *(_DWORD *)(a1 + 220);
  if ((v17 & 0xE0000) != 0)
  {
    v20 = 0;
    v31[0] = 0;
    v31[1] = 0;
    v21 = 1;
    do
    {
      v22 = v21;
      v23 = (int32x2_t *)a2[v20];
      if (v23)
        CA::BoundsImpl::Union(v31, v23[4], v23[5]);
      v21 = 0;
      v20 = 1;
    }
    while ((v22 & 1) != 0);
    v24 = -2147467200;
    switch((v17 >> 17) & 7)
    {
      case 1u:
        break;
      case 2u:
        v24 = 8388736;
        break;
      case 3u:
        v24 = -2147483520;
        break;
      case 5u:
        v24 = -2139094912;
        if (*a2)
        {
          if ((*(_BYTE *)(*a2 + 69) & 8) != 0)
            v24 = 8388736;
          else
            v24 = -2139094912;
        }
        break;
      case 6u:
        v24 = -2147450752;
        break;
      case 7u:
        v24 = 8421504;
        break;
      default:
        v24 = 0;
        break;
    }
    v25 = *(_QWORD *)(v8 + 16);
    *(_BYTE *)(v25 + 480) = 3;
    *(_BYTE *)(v25 + 481) |= 1u;
    v26 = bswap32(v24);
    v19.i32[0] = v26;
    v19.i32[1] = v26 >> 8;
    v19.i32[2] = HIWORD(v26);
    v27.i64[0] = 0xFF000000FFLL;
    v27.i64[1] = 0xFF000000FFLL;
    v28 = (int32x4_t)vandq_s8(v19, v27);
    v28.i32[3] = vshrq_n_u32((uint32x4_t)vdupq_n_s32(v26), 0x18uLL).i32[3];
    *(float16x4_t *)(*(_QWORD *)(v8 + 16) + 8) = vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v28), (float32x4_t)vdupq_n_s32(0x3B808081u)));
    v29 = (CA::Shape *)CA::Shape::intersect(*(CA::Shape **)(a1 + 64), (const CA::Bounds *)v31);
    v30[0] = 0;
    v30[1] = 0;
    CA::OGL::emit_combine(v8, 0, 0, 0, v29, (unsigned int *)v30);
    CA::Shape::unref(v29);
    v18 = *(_QWORD *)(v8 + 16);
    *(_BYTE *)(v18 + 480) = *(_BYTE *)(a1 + 124);
  }
  else
  {
    v18 = *(_QWORD *)(v8 + 16);
  }
  *(_BYTE *)(v18 + 481) &= ~1u;
}

void CA::OGL::emit_combine(uint64_t a1, int a2, _DWORD *a3, uint64_t a4, CA::Shape *a5, unsigned int *a6)
{
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  const CA::Bounds *v16;
  char v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  NSObject *v24;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  int32x2_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  uint64_t v42;
  int32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  uint64_t v46;
  const int *v47;
  uint64_t v48;
  CA::Shape *v49;
  const void *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int32x2_t v54;
  uint32x2_t v55;
  uint32x2_t v56;
  unsigned __int32 v57;
  int32x2_t v58;
  int32x2_t v59;
  __int32 v60;
  int v61;
  CA::Shape *v62;
  uint64_t v63;
  int8x16_t v64;
  unint64_t v65;
  int32x2_t v66;
  unint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70[3];
  uint8_t buf[488];
  uint64_t v72[5];

  v72[3] = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = a2;
  if (a3)
  {
    CA::OGL::Context::bind_surface(a1, (uint64_t)a3, 0, 0, 0, 0.0);
    v12 = a3[8];
    v13 = a3[9];
    v14 = a3[10];
    v15 = a3[11];
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
  }
  v67 = __PAIR64__(v13, v12);
  v68 = v14;
  v69 = v15;
  if (a4)
  {
    CA::OGL::Context::bind_surface(a1, a4, 1u, 0, 0, 0.0);
    v64 = *(int8x16_t *)(a4 + 32);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 984))(a1))
    {
      CA::OGL::Context::unbind_surface((_QWORD *)a1, a4, 1);
LABEL_14:
      if (a3)
        CA::OGL::Context::unbind_surface((_QWORD *)a1, (uint64_t)a3, 0);
      *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 0;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v24 = x_log_category_ogl;
        if (os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = a2;
          _os_log_impl(&dword_184457000, v24, OS_LOG_TYPE_DEFAULT, "CoreAnimation: unhandled combiner function: %d\n", buf, 8u);
        }
      }
      return;
    }
  }
  else
  {
    v64 = 0u;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 984))(a1) & 1) == 0)
      goto LABEL_14;
  }
  v62 = a5;
  v65 = 0;
  v66 = 0;
  v16 = (const CA::Bounds *)&v67;
  v17 = a2 - 5;
  if ((a2 - 5) <= 0x3F)
  {
    if (((1 << v17) & 0x86021C00000FE0DALL) != 0)
    {
LABEL_10:
      v63 = CA::Shape::intersect(v62, v16);
LABEL_11:
      v18 = 1;
      goto LABEL_12;
    }
    if (((1 << v17) & 0x24) != 0)
    {
      v65 = __PAIR64__(v13, v12);
      v66 = (int32x2_t)__PAIR64__(v15, v14);
      v54 = (int32x2_t)vextq_s8(v64, v64, 8uLL).u64[0];
      v55 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)__PAIR64__(v15, v14));
      v56 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v54);
      v57 = vpmax_u32(v56, v56).u32[0];
      if ((vpmax_u32(v55, v55).u32[0] & 0x80000000) != 0)
      {
        if ((v57 & 0x80000000) != 0)
        {
          v63 = 1;
          goto LABEL_11;
        }
        v65 = v64.i64[0];
        v66.i32[0] = v64.i32[2];
        v60 = v64.i32[3];
      }
      else
      {
        if ((v57 & 0x80000000) != 0)
        {
LABEL_76:
          v16 = (const CA::Bounds *)&v65;
          goto LABEL_10;
        }
        v58 = vmin_s32((int32x2_t)v65, *(int32x2_t *)v64.i8);
        v59 = vsub_s32(vmax_s32(vadd_s32((int32x2_t)v65, (int32x2_t)__PAIR64__(v15, v14)), vadd_s32(*(int32x2_t *)v64.i8, v54)), v58);
        v65 = (unint64_t)v58;
        v66.i32[0] = v59.i32[0];
        v60 = v59.i32[1];
      }
      v66.i32[1] = v60;
      goto LABEL_76;
    }
    if (a2 == 5)
    {
      v65 = __PAIR64__(v13, v12);
      v66 = (int32x2_t)__PAIR64__(v15, v14);
      v16 = (const CA::Bounds *)&v65;
      if ((CA::BoundsImpl::intersect((int32x2_t *)&v65, *(int32x2_t *)v64.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL)) & 1) == 0)
      {
        v20 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
        v21 = v20 >> 16;
        v22 = HIDWORD(v20);
        v23 = HIWORD(v20);
        v61 = 1;
        v63 = 1;
        goto LABEL_22;
      }
      goto LABEL_10;
    }
  }
  if ((a2 - 1) < 4)
    goto LABEL_10;
  v18 = 0;
  v63 = (uint64_t)v62;
LABEL_12:
  v19 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD *)(v19 + 8);
  v21 = v20 >> 16;
  v22 = HIDWORD(v20);
  v23 = HIWORD(v20);
  v61 = v18;
  if ((a2 - 8) >= 2)
  {
    if (a2 == 7)
    {
      _S0 = *a6;
      __asm { FCVT            H0, S0 }
      LOWORD(v20) = _S0;
      LOWORD(v21) = _S0;
      LOWORD(v22) = _S0;
      v23 = _S0;
    }
  }
  else
  {
    *(_OWORD *)(v19 + 24) = *(_OWORD *)a6;
  }
LABEL_22:
  v30 = CA::OGL::Context::need_transparent_source((CA::OGL::Context *)a1);
  v31 = *(unsigned __int8 *)(a1 + 64);
  if (*(_BYTE *)(a1 + 64))
    *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v32 = a1 + 818;
  *(_QWORD *)(a1 + 96) = a1 + 818;
  *(_OWORD *)(a1 + 104) = xmmword_18474E060;
  v72[1] = 0;
  v72[2] = 0;
  v72[0] = v63;
  v33 = ((unint64_t)(unsigned __int16)v22 << 32) | (v23 << 48) | ((unint64_t)(unsigned __int16)v21 << 16) | (unsigned __int16)v20;
  v34 = (int32x2_t)v67;
  while (CA::ShapeIterator::iterate(v72, (int *)&v65))
  {
    if (*(_DWORD *)(a1 + 92))
      v35 = 6;
    else
      v35 = 4;
    if ((unint64_t)(*(_QWORD *)(a1 + 128) + 4) > *(_QWORD *)(a1 + 136)
      || (v36 = *(_QWORD *)(a1 + 112)) != 0 && *(_QWORD *)(a1 + 104) + v35 > v36)
    {
      *(_WORD *)(a1 + 816) |= 0x20u;
      CA::OGL::Context::array_flush(a1);
      *(_QWORD *)(a1 + 128) = 0;
      *(_QWORD *)(a1 + 96) = v32;
      *(_OWORD *)(a1 + 104) = xmmword_18474E060;
    }
    CA::OGL::Context::array_rect((_QWORD *)a1, (float)(int)v65, (float)SHIDWORD(v65), (float)(v66.i32[0] + (int)v65), (float)(v66.i32[1] + HIDWORD(v65)));
    v37 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
    *(_QWORD *)(v37 - 160) = v33;
    *(_QWORD *)(v37 - 112) = v33;
    *(_QWORD *)(v37 - 64) = v33;
    *(_QWORD *)(v37 - 16) = v33;
    if (a3)
    {
      v38 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
      v39 = vsub_s32((int32x2_t)v65, v34);
      v40 = vcvt_f32_s32(vadd_s32(v66, v39));
      v41 = vcvt_f32_s32(v39);
      *(float32x2_t *)(v38 - 176) = v41;
      *(_QWORD *)(v38 - 128) = __PAIR64__(v41.u32[1], v40.u32[0]);
      *(float32x2_t *)(v38 - 80) = v40;
      v41.i32[1] = v40.i32[1];
      *(float32x2_t *)(v38 - 32) = v41;
    }
    if (a4)
    {
      v42 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
      v43 = vsub_s32((int32x2_t)v65, *(int32x2_t *)v64.i8);
      v44 = vcvt_f32_s32(vadd_s32(v66, v43));
      v45 = vcvt_f32_s32(v43);
      *(float32x2_t *)(v42 - 168) = v45;
      *(_QWORD *)(v42 - 120) = __PAIR64__(v45.u32[1], v44.u32[0]);
      *(float32x2_t *)(v42 - 72) = v44;
      v45.i32[1] = v44.i32[1];
      *(float32x2_t *)(v42 - 24) = v45;
    }
  }
  CA::OGL::Context::array_flush(a1);
  if (!v30)
    goto LABEL_54;
  v48 = CA::Shape::subtract(v62, (const CA::Shape *)v63, v46, v47);
  v49 = (CA::Shape *)v48;
  if ((v48 & 1) == 0)
  {
    if (*(_DWORD *)(v48 + 4) == 6)
      goto LABEL_53;
LABEL_42:
    v50 = *(const void **)(a1 + 16);
    memcpy(buf, v50, sizeof(buf));
    v70[2] = 0;
    *(_QWORD *)buf = v50;
    *(_QWORD *)(a1 + 16) = buf;
    buf[16] = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 96) = v32;
    *(_OWORD *)(a1 + 104) = xmmword_18474E060;
    v70[0] = (uint64_t)v49;
    v70[1] = 0;
    while (CA::ShapeIterator::iterate(v70, (int *)&v65))
    {
      if (*(_DWORD *)(a1 + 92))
        v51 = 6;
      else
        v51 = 4;
      if ((unint64_t)(*(_QWORD *)(a1 + 128) + 4) > *(_QWORD *)(a1 + 136)
        || (v52 = *(_QWORD *)(a1 + 112)) != 0 && *(_QWORD *)(a1 + 104) + v51 > v52)
      {
        *(_WORD *)(a1 + 816) |= 0x20u;
        CA::OGL::Context::array_flush(a1);
        *(_QWORD *)(a1 + 128) = 0;
        *(_QWORD *)(a1 + 96) = v32;
        *(_OWORD *)(a1 + 104) = xmmword_18474E060;
      }
      CA::OGL::Context::array_rect((_QWORD *)a1, (float)(int)v65, (float)SHIDWORD(v65), (float)(v66.i32[0] + (int)v65), (float)(v66.i32[1] + HIDWORD(v65)));
      v53 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
      *(_QWORD *)(v53 - 160) = 0;
      *(_QWORD *)(v53 - 112) = 0;
      *(_QWORD *)(v53 - 64) = 0;
      *(_QWORD *)(v53 - 16) = 0;
    }
    CA::OGL::Context::array_flush(a1);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)buf;
    goto LABEL_53;
  }
  if (v48 != 1)
    goto LABEL_42;
LABEL_53:
  CA::Shape::unref(v49);
LABEL_54:
  if (v31)
    *(_BYTE *)(a1 + 64) = 1;
  if (v61)
    CA::Shape::unref((CA::Shape *)v63);
  if (a4)
    CA::OGL::Context::unbind_surface((_QWORD *)a1, a4, 1);
  if (a3)
    CA::OGL::Context::unbind_surface((_QWORD *)a1, (uint64_t)a3, 0);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 0;
}

uint64_t CA::Render::LayerNode::clear_above_and_black_below(CA::Render::LayerNode ***this, char a2, double a3, float a4)
{
  CA::Render::LayerNode *v4;
  CA::Render::LayerNode *v5;
  _DWORD *v6;
  CA::Render::LayerNode *v7;
  uint64_t v8;
  CA::Render::LayerNode *i;
  uint64_t v11;
  CA::Render::LayerNode ***j;
  CA::Render::LayerNode *v13;
  CA::Render::LayerNode **v14;
  CA::Render::LayerNode **v15;
  CA::Render::LayerNode *v16;
  CA::Render::LayerNode *v17;
  CA::Render::LayerNode *v18;
  CA::Render::LayerNode *k;
  uint64_t v21;
  uint64_t v22;
  CA::Render::LayerNode *v23;
  CA::Render::LayerNode *v24;
  CA::Render::LayerNode *v25;
  CA::Render::LayerNode *v26;
  char v27;
  float32x4_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = (CA::Render::LayerNode *)this;
  do
  {
    v5 = v4;
    v4 = (CA::Render::LayerNode *)*((_QWORD *)v4 + 11);
  }
  while (v4);
  v6 = *(_DWORD **)(*((_QWORD *)v5 + 4) + 144);
  if (v6)
  {
    if ((v7 = this[4][18], *((_QWORD *)v7 + 14) == *((_QWORD *)v6 + 14))
      && *((_DWORD *)v7 + 30) == v6[30]
      && *((_DWORD *)v7 + 31) == v6[31]
      || (a2 & 1) == 0)
    {
      for (i = *(CA::Render::LayerNode **)v5; i != v5 && (*((_BYTE *)i + 24) & 0x40) != 0; i = *(CA::Render::LayerNode **)i)
      {
        v11 = *(_QWORD *)(*((_QWORD *)i + 4) + 144);
        if (v11 && (*(_BYTE *)(v11 + 98) & 0x80) != 0)
          return 0;
      }
      for (j = (CA::Render::LayerNode ***)this[13]; j != this + 12; j = (CA::Render::LayerNode ***)j[1])
      {
        v13 = j[4][18];
        if (v13 && (*((_BYTE *)v13 + 98) & 0x80) != 0)
          return 0;
      }
      v14 = this[11];
      if (!v14)
        return 1;
      v15 = this[11];
      v16 = (CA::Render::LayerNode *)this;
      do
      {
        v17 = (CA::Render::LayerNode *)v15;
        v18 = (CA::Render::LayerNode *)(v15 + 12);
        for (k = (CA::Render::LayerNode *)*((_QWORD *)v17 + 13);
              k != v18 && k != v16;
              k = (CA::Render::LayerNode *)*((_QWORD *)k + 1))
        {
          v21 = *((_QWORD *)k + 4);
          v22 = *(_QWORD *)(v21 + 144);
          if (v22)
          {
            if ((*(_BYTE *)(v22 + 98) & 0x80) != 0)
            {
              LOBYTE(a4) = *(_BYTE *)(v21 + 32);
              a4 = (float)LODWORD(a4) * 0.0039216;
              if (a4 > 0.0)
                return 0;
            }
          }
        }
        v15 = (CA::Render::LayerNode **)*((_QWORD *)v17 + 11);
        v16 = v17;
      }
      while (v15);
      v23 = (CA::Render::LayerNode *)this;
      while (1)
      {
        v24 = (CA::Render::LayerNode *)v14;
        v25 = (CA::Render::LayerNode *)(v14 + 12);
        v26 = v14[13];
        if (v26 != v25)
          break;
LABEL_55:
        v14 = (CA::Render::LayerNode **)*((_QWORD *)v24 + 11);
        v8 = 1;
        v23 = v24;
        if (!v14)
          return v8;
      }
      v27 = 0;
      while (1)
      {
        v27 |= v26 == v23;
        if (v26 != (CA::Render::LayerNode *)this && (v27 & 1) != 0)
        {
          v28 = (float32x4_t *)*((_QWORD *)v26 + 4);
          v29 = v28[9].i64[0];
          if (v29)
          {
            v30 = *(_QWORD *)(v29 + 96);
            if (v26 == v23)
            {
              if ((v30 & 0x20000000) != 0)
                return 0;
              if (v28[6].i64[0])
                goto LABEL_49;
              if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v28[1], (float32x4_t)xmmword_18474DFE0)))) & 1) != 0)goto LABEL_49;
              v31 = v28[8].i64[0];
              if (v31)
              {
                if (*(float *)(v31 + 228) > 0.0 || *(float *)(v31 + 236) > 0.0)
                  goto LABEL_49;
              }
            }
            else if ((v30 & 0x400000) != 0)
            {
              return 0;
            }
            if (*(_DWORD *)(v29 + 112) == v6[28]
              && *(_DWORD *)(v29 + 116) == v6[29]
              && *(_DWORD *)(v29 + 120) == v6[30]
              && *(_DWORD *)(v29 + 124) == v6[31])
            {
              return 1;
            }
          }
        }
LABEL_49:
        v26 = (CA::Render::LayerNode *)*((_QWORD *)v26 + 1);
        if (v26 == v25)
          goto LABEL_55;
      }
    }
  }
  return 0;
}

uint64_t CA::WindowServer::`anonymous namespace'::OGLDisplay::get_surface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 624))(a2, a3, a4);
}

float64_t CA::WindowServer::`anonymous namespace'::OGLDisplay::round_logical_rect(CA::WindowServer::_anonymous_namespace_::OGLDisplay *this, float64x2_t *a2)
{
  uint64_t v3;
  float64x2_t v4;
  double v5;
  double v6;
  float64x2_t v7;
  uint64_t v8;
  uint64_t v9;
  int64x2_t v10;
  float64x2_t v11;
  uint64_t v12;
  uint64_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  double v19;
  double v20;
  float64x2_t v21;
  float64x2_t v23;

  v3 = *((_QWORD *)this + 1);
  if ((*(_BYTE *)(v3 + 745) & 4) != 0)
  {
    v9 = *(_QWORD *)(v3 + 152);
    v8 = *(_QWORD *)(v3 + 160);
    v10.i64[0] = (int)v8;
    v10.i64[1] = SHIDWORD(v8);
    v11 = vcvtq_f64_s64(v10);
    v13 = *(_QWORD *)(v3 + 200);
    v12 = *(_QWORD *)(v3 + 208);
    v10.i64[0] = (int)v12;
    v10.i64[1] = SHIDWORD(v12);
    v14 = vdivq_f64(v11, vcvtq_f64_s64(v10));
    v10.i64[0] = (int)v9;
    v10.i64[1] = SHIDWORD(v9);
    v15 = vcvtq_f64_s64(v10);
    v10.i64[0] = (int)v13;
    v10.i64[1] = SHIDWORD(v13);
    v23 = vmlsq_f64(v15, vcvtq_f64_s64(v10), v14);
    v16 = v14;
    CA::BoundsImpl::scale(a2->f64, v14.f64[0], v14.f64[1]);
    v17 = a2[1];
    v18 = vaddq_f64(*a2, v23);
    v19 = a2[1].f64[1];
    if (v17.f64[0] <= v19)
      v20 = a2[1].f64[1];
    else
      v20 = a2[1].f64[0];
    if (v20 < 1.79769313e308)
    {
      if (v17.f64[0] < v19)
        v19 = a2[1].f64[0];
      if (v19 > 0.0)
      {
        v21 = vaddq_f64(v18, v17);
        v18 = vrndaq_f64(v18);
        a2[1] = vsubq_f64(vrndaq_f64(v21), v18);
      }
    }
    *a2 = vsubq_f64(v18, v23);
    v4.f64[0] = CA::BoundsImpl::scale(a2->f64, 1.0 / v16.f64[0], 1.0 / v16.f64[1]);
  }
  else
  {
    v4 = a2[1];
    v5 = a2[1].f64[1];
    if (v4.f64[0] <= v5)
      v6 = a2[1].f64[1];
    else
      v6 = a2[1].f64[0];
    if (v6 < 1.79769313e308)
    {
      if (v4.f64[0] < v5)
        v5 = a2[1].f64[0];
      if (v5 > 0.0)
      {
        v7 = vrndaq_f64(*a2);
        v4 = vsubq_f64(vrndaq_f64(vaddq_f64(*a2, v4)), v7);
        *a2 = v7;
        a2[1] = v4;
      }
    }
  }
  return v4.f64[0];
}

uint64_t CA::WindowServer::`anonymous namespace'::OGLDisplay::detach_layer(CA::WindowServer::_anonymous_namespace_::OGLDisplay *this, CA::Render::Handle *a2, uint64_t a3, CA::Render::Texture *a4, _QWORD *a5, const CA::Rect *a6, const CA::Rect *a7, unsigned int a8, unsigned int *a9)
{
  uint64_t v10;
  uint64_t v11;

  if (a5)
  {
    v10 = a5[1];
    v11 = *((_QWORD *)this + 1);
    if (v10 != v11)
    {
      a5[1] = v11;
      v10 = v11;
    }
  }
  else
  {
    v10 = *((_QWORD *)this + 1);
  }
  return (*(uint64_t (**)(uint64_t, CA::Render::Handle *, uint64_t, CA::Render::Texture *))(*(_QWORD *)v10
                                                                                                  + 576))(v10, a2, a3, a4);
}

float64x2_t CA::OGL::clip_detached_rects(float64x2_t *this, float64x2_t *a2, CA::Rect *a3, const CA::Rect *a4, float64x2_t a5, float64x2_t a6, double a7, double a8, double a9, double a10, double a11, int32x4_t a12)
{
  float64x2_t v12;
  float64x2_t v13;
  int64x2_t v14;
  unint64_t v15;
  float64x2_t v16;
  float64x2_t v17;
  int64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float64x2_t v29;
  int8x16_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  int8x16_t v35;
  float64x2_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  float64x2_t v40;
  float64x2_t result;

  v12 = *a2;
  v13 = a2[1];
  v14 = vclezq_f64(v13);
  v15 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v14, 1), (int8x16_t)v14).u64[0];
  v16 = v13;
  v17 = *a2;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v18 = vclezq_f64(a6);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v18, 1), (int8x16_t)v18).u64[0] & 0x8000000000000000) != 0)
    {
      v16 = 0uLL;
      v17 = *a2;
    }
    else
    {
      v19 = vaddq_f64(a5, a6);
      a5 = vmaxnmq_f64(v12, a5);
      v20 = vsubq_f64(vminnmq_f64(vaddq_f64(v12, v13), v19), a5);
      v21 = vclezq_f64(v20);
      v22 = vdupq_laneq_s64(v21, 1);
      v23 = (int64x2_t)vorrq_s8((int8x16_t)v22, (int8x16_t)v21);
      v22.i64[0] = -1;
      v24 = (int8x16_t)vdupq_lane_s64(vcgtq_s64(v23, v22).i64[0], 0);
      v17 = (float64x2_t)vbslq_s8(v24, (int8x16_t)a5, (int8x16_t)v12);
      v16 = (float64x2_t)vandq_s8((int8x16_t)v20, v24);
    }
  }
  LODWORD(a5.f64[0]) = 0;
  a12.i32[0] = a3 & 4;
  v25 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(a12, (int32x4_t)a5), 0);
  v26 = (int8x16_t)vaddq_f64(this[1], *this);
  v27 = vbslq_s8(v25, *(int8x16_t *)this, vextq_s8(v26, *(int8x16_t *)this, 8uLL));
  v28 = vbslq_s8(v25, v26, vextq_s8(*(int8x16_t *)this, v26, 8uLL));
  v29 = vaddq_f64(v13, v12);
  *(int32x2_t *)v26.i8 = vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(a3), (int8x8_t)0x100000002));
  v30.i64[0] = v26.i32[0];
  v30.i64[1] = v26.i32[1];
  v31 = (float64x2_t)vbslq_s8(v30, v28, v27);
  v32 = (float64x2_t)vbslq_s8(v30, v27, v28);
  v33 = vdivq_f64(vsubq_f64(v31, v32), v13);
  v34 = vsubq_f64(v17, v12);
  v35 = (int8x16_t)vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtzq_f64(v34), (int8x16_t)vmulq_f64(v34, v33), (int8x16_t)vdupq_n_s64(0x8000000000000000)), v32);
  v36 = vsubq_f64(v29, vaddq_f64(v17, v16));
  v37 = (int8x16_t)vsubq_f64(v31, (float64x2_t)vandq_s8((int8x16_t)vmulq_f64(v36, v33), (int8x16_t)vcgtzq_f64(v36)));
  v38 = vbslq_s8(v30, v37, v35);
  v39 = vbslq_s8(v30, v35, v37);
  v40 = (float64x2_t)vbslq_s8(v25, v39, vextq_s8(v39, v38, 8uLL));
  *a2 = v17;
  a2[1] = v16;
  result = vsubq_f64((float64x2_t)vbslq_s8(v25, v38, vextq_s8(v38, v39, 8uLL)), v40);
  *this = v40;
  this[1] = result;
  return result;
}

uint64_t CA::Render::updater_mark_detached_layer(uint64_t this, CA::Render::LayerNode *a2)
{
  uint64_t v2;
  uint64_t v3;
  int32x2_t *v4;
  const CA::Bounds *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  int32x2_t v10;

  if (this)
  {
    v2 = this;
    do
    {
      v3 = *(_QWORD *)(v2 + 32);
      v4 = *(int32x2_t **)(v3 + 144);
      if (v4)
      {
        if ((a2 & 1) != 0)
        {
          this = CA::Render::Handle::lock_context(*(CA::Render::Handle **)(v3 + 144));
          if (this)
          {
            v6 = this;
            CA::Render::Context::invalidate((CA::Render::Context *)this, v4 + 14, v5);
            this = pthread_mutex_unlock((pthread_mutex_t *)(v6 + 72));
            v7 = (unsigned int *)(v6 + 8);
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
          }
        }
        v10 = v4[12];
        if ((v10.i32[0] & 0x20000) != 0)
          return this;
        LOBYTE(a2) = 0;
        v4[12] = (int32x2_t)(*(_QWORD *)&v10 | 0x20020);
      }
      v2 = *(_QWORD *)(v2 + 88);
    }
    while (v2);
  }
  return this;
}

uint64_t CA::Render::Handle::lock_context(CA::Render::Handle *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v6;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Handle::_handle_lock);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    if (v4)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Handle::_handle_lock);
      pthread_mutex_lock((pthread_mutex_t *)(v2 + 72));
    }
    else
    {
      do
        v6 = __ldaxr(v3);
      while (__stlxr(v6 - 1, v3));
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Handle::_handle_lock);
      return 0;
    }
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Handle::_handle_lock);
  }
  return v2;
}

uint64_t CA::WindowServer::`anonymous namespace'::OGLDisplay::detached_layer_under_destination_p(CA::WindowServer::_anonymous_namespace_::OGLDisplay *this, CA::Render::Handle *a2)
{
  return 1;
}

uint64_t CA::CG::DrawOp::shape_type(CA::CG::DrawOp *this, CA::CG::Renderer *a2)
{
  return 0;
}

uint64_t CA::CG::ClipOp::draw(CA::CG::ClipOp *this, CA::CG::Renderer *a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *((_QWORD *)a2 + 1);
  *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8) = 0x3C003C003C003C00;
  result = *((_QWORD *)this + 3);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t, CA::CG::Renderer *))(*(_QWORD *)result + 32))(result, a2);
    *(_BYTE *)(*(_QWORD *)(v4 + 16) + 481) |= 1u;
  }
  v6 = *((_QWORD *)this + 6);
  if (v6)
  {
    v7 = 0;
    v8 = -1;
    do
    {
      v9 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * (v6 + v8));
      result = (*(uint64_t (**)(uint64_t, CA::CG::Renderer *))(*(_QWORD *)v9 + 32))(v9, a2);
      *(_BYTE *)(*(_QWORD *)(v4 + 16) + 481) |= 1u;
      ++v7;
      v6 = *((_QWORD *)this + 6);
      --v8;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t CA::CG::DrawOp::may_flush()
{
  return 0;
}

uint64_t CA::CG::ClipRoundedRectFill::prepare(CA::CG::ClipRoundedRectFill *this, CA::CG::Renderer *a2, const CA::CG::DrawOp *a3, int32x2_t *a4, double a5, double a6, double a7, double a8, float64x2_t a9)
{
  int8x16_t v10;
  int8x16_t v11;
  double v12;
  double v13;
  BOOL v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  double v19;
  double v20;
  double v21;
  int8x16_t v22;
  BOOL v23;
  unint64_t v24;
  double v25;
  double v26;
  double v27;
  int8x16_t v28;
  unint64_t v30;
  double v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int64x2_t v38;
  int8x16_t v39;
  float64x2_t v40;
  float64x2_t v41;
  int32x4_t v42;
  int64x2_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int64x2_t v47;
  int8x16_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x2_t v51;
  int32x2_t v52;
  uint32x2_t v53;
  uint32x2_t v54;
  int32x2_t v55;
  int32x2_t v56;
  uint32x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  int32x4_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v10 = *(int8x16_t *)((char *)this + 8);
  v11 = *(int8x16_t *)((char *)this + 24);
  v12 = *((double *)this + 4);
  if (*(double *)v11.i64 <= v12)
    v13 = *((double *)this + 4);
  else
    v13 = *((double *)this + 3);
  v14 = v13 < 1.79769313e308;
  v15 = *(int8x16_t *)((char *)this + 8);
  v16 = *(int8x16_t *)((char *)this + 24);
  v17 = v16;
  v18 = v15;
  if (v14)
  {
    if (*(double *)v11.i64 >= v12)
      v19 = *((double *)this + 4);
    else
      v19 = *((double *)this + 3);
    v23 = v19 <= 0.0;
    v16 = *(int8x16_t *)((char *)this + 24);
    v15 = *(int8x16_t *)((char *)this + 8);
    if (!v23)
    {
      v20 = *((double *)this + 5);
      v15.i64[1] = *((_QWORD *)this + 2);
      *(double *)v15.i64 = *(double *)v10.i64 + v20;
      v21 = *(double *)v11.i64 - (v20 + v20);
      v22.i64[1] = *((_QWORD *)this + 4);
      *(double *)v22.i64 = v21;
      v23 = v12 > 0.0 && v21 > 0.0;
      if (v23)
        v24 = -1;
      else
        v24 = 0;
      v16 = vandq_s8(v22, (int8x16_t)vdupq_n_s64(v24));
    }
    if (*(double *)v11.i64 >= v12)
      v25 = *((double *)this + 4);
    else
      v25 = *((double *)this + 3);
    if (v25 > 0.0)
    {
      v26 = *((double *)this + 6);
      v18.i64[0] = *((_QWORD *)this + 1);
      *(double *)&v18.i64[1] = *(double *)&v10.i64[1] + v26;
      v27 = v12 - (v26 + v26);
      v28.i64[0] = *((_QWORD *)this + 3);
      *(double *)&v28.i64[1] = v27;
      if (v27 > 0.0 && *(double *)v11.i64 > 0.0)
        v30 = -1;
      else
        v30 = 0;
      v17 = vandq_s8(v28, (int8x16_t)vdupq_n_s64(v30));
    }
    else
    {
      v17 = *(int8x16_t *)((char *)this + 24);
      v18 = *(int8x16_t *)((char *)this + 8);
    }
  }
  v31 = *((double *)a2 + 10);
  if (v31 != 1.0)
  {
    a9.f64[0] = 1.79769313e308;
    v32 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a9, (float64x2_t)v11).i64[0], 0);
    v33.i64[1] = *((_QWORD *)this + 2);
    *(double *)v33.i64 = v31 * *(double *)v10.i64;
    v10 = vbslq_s8(v32, v33, v10);
    v33.i64[1] = *((_QWORD *)this + 4);
    *(double *)v33.i64 = *(double *)v11.i64 * v31;
    v11 = vbslq_s8(v32, v33, v11);
    if (*(double *)&v11.i64[1] < 1.79769313e308)
    {
      v10.i64[1] = vmuld_lane_f64(v31, (float64x2_t)v10, 1);
      *(double *)&v11.i64[1] = *(double *)&v11.i64[1] * v31;
    }
    a9.f64[0] = 1.79769313e308;
    v34 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a9, (float64x2_t)v16).i64[0], 0);
    v35.i64[1] = v15.i64[1];
    *(double *)v35.i64 = v31 * *(double *)v15.i64;
    v15 = vbslq_s8(v34, v35, v15);
    v35.i64[1] = v16.i64[1];
    *(double *)v35.i64 = v31 * *(double *)v16.i64;
    v16 = vbslq_s8(v34, v35, v16);
    if (*(double *)&v16.i64[1] < 1.79769313e308)
    {
      v15.i64[1] = vmuld_lane_f64(v31, (float64x2_t)v15, 1);
      *(double *)&v16.i64[1] = *(double *)&v16.i64[1] * v31;
    }
    a9.f64[0] = 1.79769313e308;
    v36 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a9, (float64x2_t)v17).i64[0], 0);
    v37.i64[1] = v18.i64[1];
    *(double *)v37.i64 = v31 * *(double *)v18.i64;
    v18 = vbslq_s8(v36, v37, v18);
    v37.i64[1] = v17.i64[1];
    *(double *)v37.i64 = v31 * *(double *)v17.i64;
    v17 = vbslq_s8(v36, v37, v17);
    if (*(double *)&v17.i64[1] < 1.79769313e308)
    {
      v18.i64[1] = vmuld_lane_f64(v31, (float64x2_t)v18, 1);
      *(double *)&v17.i64[1] = *(double *)&v17.i64[1] * v31;
    }
  }
  v38 = vceqzq_f64((float64x2_t)v16);
  v58 = (float64x2_t)v10;
  v59 = (float64x2_t)v18;
  v60 = (float64x2_t)v11;
  v61 = (float64x2_t)v17;
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v38, 1), (int8x16_t)v38).u64[0] & 0x8000000000000000) != 0
    || (v39 = vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v16), (int8x16_t)vcgezq_f64((float64x2_t)v16)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v39), 1), v39).u64[0] & 0x8000000000000000) != 0))
  {
    v62 = 0uLL;
  }
  else
  {
    v40 = vmaxnmq_f64((float64x2_t)v15, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000));
    v41 = vminnmq_f64(vaddq_f64((float64x2_t)v15, (float64x2_t)v16), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
    v42 = (int32x4_t)vcvtpq_s64_f64(v40);
    v62 = vuzp1q_s32(v42, (int32x4_t)vsubq_s64(vcvtmq_s64_f64(v41), (int64x2_t)v42));
  }
  if (CA::BoundsImpl::contains(&v62, a4))
    return 0;
  v43 = vceqzq_f64(v61);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v43, 1), (int8x16_t)v43).u64[0] & 0x8000000000000000) != 0
    || (v44 = vorrq_s8((int8x16_t)vcltzq_f64(v61), (int8x16_t)vcgezq_f64(v61)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v44), 1), v44).u64[0] & 0x8000000000000000) != 0))
  {
    v62 = 0uLL;
  }
  else
  {
    v45 = (int32x4_t)vcvtpq_s64_f64(vmaxnmq_f64(v59, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    v62 = vuzp1q_s32(v45, (int32x4_t)vsubq_s64(vcvtmq_s64_f64(vminnmq_f64(vaddq_f64(v59, v61), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v45));
  }
  if (CA::BoundsImpl::contains(&v62, a4))
    return 0;
  v47 = vceqzq_f64(v60);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v47, 1), (int8x16_t)v47).u64[0] & 0x8000000000000000) != 0
    || (v48 = vorrq_s8((int8x16_t)vcltzq_f64(v60), (int8x16_t)vcgezq_f64(v60)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v48), 1), v48).u64[0] & 0x8000000000000000) != 0))
  {
    v50.i64[0] = 0;
    v51 = 0;
  }
  else
  {
    v49 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v58, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    v50 = vuzp1q_s32(v49, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v58, v60), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v49));
    v51 = (int32x2_t)v50.u64[1];
  }
  v52 = a4[1];
  v53 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v52);
  if ((vpmax_u32(v53, v53).u32[0] & 0x80000000) == 0)
  {
    v54 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v51);
    if ((vpmax_u32(v54, v54).u32[0] & 0x80000000) == 0)
    {
      v55 = vadd_s32(*(int32x2_t *)v50.i8, v51);
      *(int32x2_t *)v50.i8 = vmax_s32(*a4, *(int32x2_t *)v50.i8);
      v56 = vsub_s32(vmin_s32(vadd_s32(*a4, v52), v55), *(int32x2_t *)v50.i8);
      v57 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v56);
      if ((vpmax_u32(v57, v57).u32[0] & 0x80000000) == 0)
      {
        v50.u64[1] = (unint64_t)v56;
        *(int32x4_t *)a4->i8 = v50;
        return 2;
      }
    }
    a4[1] = 0;
  }
  return 1;
}

uint64_t CA::CG::ClipRoundedRectFill::draw(CA::CG::ClipRoundedRectFill *this, CA::CG::Renderer *a2)
{
  double v3;
  __int128 v4;
  double v5;
  double v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  double v10;
  double v11;
  double v12;
  float64x2_t v13;
  double v15;
  __int128 v16;
  double v17;
  _OWORD v18[9];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = *((double *)this + 1);
  v15 = v3;
  v4 = *((_OWORD *)this + 1);
  v16 = v4;
  v5 = *((double *)this + 4);
  v6 = *((double *)this + 5);
  v17 = v5;
  v7 = *(float64x2_t *)((char *)a2 + 88);
  v8 = *(float64x2_t *)((char *)a2 + 104);
  v9 = *(float64x2_t *)((char *)a2 + 120);
  v10 = *((double *)this + 6);
  v11 = v6 - v10;
  if (v6 - v10 < 0.0)
    v11 = -(v6 - v10);
  if (v11 > 0.001)
  {
    v12 = v10 / v6;
    v13 = vmlaq_n_f64(vmlaq_n_f64(v9, v7, v3), v8, *(double *)&v4);
    v8 = vmulq_n_f64(v8, v12);
    v9 = vmlsq_lane_f64(vmlsq_lane_f64(v13, v7, v3, 0), v8, *(double *)&v4, 0);
    v17 = v5 / v12;
  }
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  memset(v18, 0, sizeof(v18));
  v22 = 0;
  CA::Transform::set_affine((CA::Transform *)v18, v7.f64[0], v7.f64[1], v8.f64[0], v8.f64[1], v9.f64[0], v9.f64[1]);
  *((_QWORD *)&v19 + 1) = &v15;
  *(_QWORD *)&v20 = v18;
  *((_QWORD *)&v20 + 1) = 0xFF0020003FLL;
  v22 = 0;
  v21 = 0uLL;
  return CA::OGL::fill_round_rect(*((_QWORD *)a2 + 1), (float64x2_t **)&v19 + 1, (double *)0xF, 0, v6, v6);
}

BOOL CA::CG::FillRects::shape_type(CA::CG::FillRects *this, CA::CG::Renderer *a2)
{
  return (*((_BYTE *)this + 103) & 1) == 0
      && CA::CG::rects_intersect((CA::CG::FillRects *)((char *)this + 120), *((const CGRect **)this + 14), 0.0);
}

uint64_t CA::CG::FillRects::color_type(CA::CG::FillRects *this, CA::CG::Renderer *a2, double *a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  double *i;
  double v16;
  double v17;
  double v18;
  double v19;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 10);
  v4 = 9;
  if (v3)
  {
    if (*((_DWORD *)this + 14))
      v4 = 10;
    else
      v4 = 9;
  }
  _H0 = *((_WORD *)this + 47);
  __asm { FCVT            S0, H0 }
  if (_S0 == 1.0 && v3 == 0)
    v11 = v4 | 4;
  else
    v11 = v4;
  if ((v11 & 2) != 0)
  {
    if (!v3)
      return v11 & 0xD;
    v12 = 88;
    if ((*((_DWORD *)this + 25) & 4) != 0)
    {
      v13 = (double *)((char *)a2 + 88);
    }
    else
    {
      v12 = 32;
      v13 = (double *)((char *)a2 + 32);
    }
    if ((fabs(v13[1]) >= 0.000001 || fabs(v13[2]) >= 0.000001)
      && (fabs(*(double *)((char *)a2 + v12)) >= 0.000001 || fabs(v13[3]) >= 0.000001))
    {
      return v11;
    }
    v14 = *((_QWORD *)this + 14);
    if (!v14)
      return v11 & 0xD;
    for (i = (double *)((char *)this + 144); ; i += 4)
    {
      v17 = *(i - 3);
      v16 = *(i - 2);
      v21 = v17;
      v22 = v16;
      v19 = *(i - 1);
      v18 = *i;
      v23 = v19;
      v24 = v18;
      if (v19 < 0.0)
      {
        v21 = v19 + v17;
        v23 = -v19;
      }
      if (v18 < 0.0)
      {
        v22 = v18 + v16;
        v24 = -v18;
      }
      CA::Mat2Impl::mat2_apply_to_rect((uint64_t)v13, &v21, a3);
      if (v21 != trunc(v21) || v22 != trunc(v22) || v23 != trunc(v23) || v24 != trunc(v24))
        break;
      if (!--v14)
        return v11 & 0xD;
    }
  }
  return v11;
}

BOOL CA::CG::DrawLinearGradient::may_flush(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 103) & 4) == 0;
}

void CA::CG::DrawLinearGradient::draw_color(CA::CG::DrawLinearGradient *this, CA::CG::Renderer *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CGColorSpace *ColorSpace;
  CGFunction *Function;
  CGShadingRef Axial;
  CGShading *v9;
  uint64_t v10;
  char v11;
  int32x2_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  unsigned int v17;
  int v18;
  int v19;
  const double *v20;
  int32x2_t *v21;
  int32x2_t *v22;
  uint32x2_t v23;
  int32x2_t v24;
  uint32x2_t v25;
  int32x2_t v26;
  int32x2_t v27;
  int32x2_t v28;
  int32x2_t v29;
  uint32x2_t v30;
  __int128 v31;
  double v32;
  double v33;
  double *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  int64x2_t v44;
  float64x2_t v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  float16x4_t v66;
  int16x4_t v74;
  float16x4_t v75;
  int32x2_t *v76;
  int32x2_t *v77;
  uint32x2_t v78;
  int32x2_t v79;
  uint32x2_t v80;
  __int128 v81;
  int32x2_t v82;
  uint32x2_t v83;
  uint64_t v84;
  unsigned int v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  int32x2_t v95[4];
  int v96;
  char v97;
  char v98;
  char v99;
  char v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _BYTE v107[24];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  char v111;
  float32x2_t v112[4];
  float64x2_t v113;
  double v114;
  float64_t v115;
  uint64_t v116;

  MEMORY[0x1E0C80A78](this);
  v3 = v2;
  v5 = v4;
  v116 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(v4 + 103) & 4) != 0)
  {
    v10 = *(_QWORD *)(v2 + 8);
    if (CGGradientUsesPremultipliedInterpolation())
      v11 = 0;
    else
      v11 = 13;
    *(_BYTE *)(*(_QWORD *)(v10 + 16) + 16) = v11;
    {
      *(_BYTE *)(*(_QWORD *)(v10 + 16) + 481) |= 2u;
      *(_DWORD *)(*(_QWORD *)(v10 + 16) + 352) = 1065353216;
    }
    memset(v107, 0, sizeof(v107));
    v106 = 0u;
    v105 = 0u;
    v104 = 0u;
    v103 = 0u;
    v102 = 0u;
    v101 = 0u;
    v12 = *(int32x2_t *)(v5 + 112);
    v13 = *(double *)(v5 + 120);
    v14 = *(double *)(v5 + 128);
    v15 = *(double *)(v5 + 136);
    v16 = *(double *)(v5 + 144);
    v17 = *(_DWORD *)(v5 + 100);
    v18 = HIBYTE(v17) & 1;
    v19 = (v17 >> 25) & 1;
    v95[0] = *(int32x2_t *)(v3 + 8);
    v95[1] = v12;
    v95[2] = (int32x2_t)CGGradientGetColorSpace();
    v95[3] = (int32x2_t)&v111;
    v96 = 0;
    v97 = 1;
    v98 = v18;
    v99 = v19;
    v100 = 1;
    *(_QWORD *)&v102 = 0xFFEFFFFFFFFFFFFFLL;
    CA::Shape::get_bounds(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v95 + 232) + 8), (int *)&v107[8]);
    v21 = *(int32x2_t **)(*(_QWORD *)v95 + 248);
    if (v21)
      v22 = v21 + 4;
    else
      v22 = (int32x2_t *)(*(_QWORD *)v95 + 184);
    v23 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)&v107[16]);
    if ((vpmax_u32(v23, v23).u32[0] & 0x80000000) == 0)
    {
      v24 = v22[1];
      v25 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v24);
      if ((vpmax_u32(v25, v25).u32[0] & 0x80000000) != 0
        || (v26 = vadd_s32(*v22, v24),
            v27 = vmax_s32(*(int32x2_t *)&v107[8], *v22),
            v28 = vmin_s32(vadd_s32(*(int32x2_t *)&v107[8], *(int32x2_t *)&v107[16]), v26),
            v29 = vsub_s32(v28, v27),
            v30 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v29),
            (vpmax_u32(v30, v30).u32[0] & 0x80000000) != 0))
      {
        *(_QWORD *)&v107[16] = 0;
      }
      else
      {
        *(int32x2_t *)&v31 = v27;
        *((int32x2_t *)&v31 + 1) = v29;
        *(_OWORD *)&v107[8] = v31;
        v32 = v15 - v13;
        v33 = v16 - v14;
        v35 = *(double *)(v3 + 32);
        v34 = (double *)(v3 + 32);
        v37 = v34[1];
        v36 = v34[2];
        v38 = v35 * v13 + v36 * v14;
        v88 = v34[4];
        v89 = sqrt(v32 * v32 + v33 * v33);
        v39 = v34[3];
        v40 = v38 + v88;
        *(double *)&v31 = v37 * v13 + v39 * v14;
        v41 = *(double *)&v31 + v34[5];
        v93 = v36;
        v94 = v35;
        v86 = v35 * v15 + v36 * v16;
        v87 = v34[5];
        v91 = v39;
        v92 = v37;
        v42 = v37 * v15 + v39 * v16;
        *(double *)&v103 = v38 + v88;
        *((double *)&v103 + 1) = v41;
        v43 = v86 - v38;
        *(double *)&v104 = v86 - v38;
        *((double *)&v104 + 1) = v42 - *(double *)&v31;
        v90 = v42 - *(double *)&v31;
        *(double *)v112 = (double)v27.i32[0];
        *(double *)&v112[1] = (double)v27.i32[1];
        v44.i64[0] = v28.i32[0];
        v44.i64[1] = v28.i32[1];
        v45 = vcvtq_f64_s64(v44);
        v112[2] = *(float32x2_t *)&v45.f64[0];
        *(double *)&v112[3] = (double)v27.i32[1];
        v113 = v45;
        v114 = (double)v27.i32[0];
        v115 = v45.f64[1];
        v109 = 0u;
        v110 = 0u;
        v108 = 0u;
        CA::Mat2Impl::mat2_invert((CA::Mat2Impl *)&v108, v34, v20);
        v46 = 0;
        v47 = -INFINITY;
        v48 = INFINITY;
        v49 = 0.0;
        do
        {
          v51 = *(double *)&v112[v46];
          v52 = *(double *)&v112[v46 + 1];
          v53 = vabdd_f64(v52, v41) + vabdd_f64(v51, v40);
          v50 = 1.0 / (v89 * v89);
          v54 = ((*(double *)&v110 - v13 + v51 * *(double *)&v108 + v52 * *(double *)&v109) * v32
               + (*((double *)&v110 + 1) - v14 + v51 * *((double *)&v108 + 1) + v52 * *((double *)&v109 + 1)) * v33)
              * v50;
          if (v48 >= v54)
            v48 = ((*(double *)&v110 - v13 + v51 * *(double *)&v108 + v52 * *(double *)&v109) * v32
                 + (*((double *)&v110 + 1) - v14 + v51 * *((double *)&v108 + 1) + v52 * *((double *)&v109 + 1)) * v33)
                * v50;
          v55 = vabdd_f64(v52, v87 + v42) + vabdd_f64(v51, v88 + v86);
          if (v47 <= v54)
            v47 = v54;
          if (v53 > v55)
            v55 = v53;
          if (v49 <= v55)
            v49 = v55;
          v46 += 2;
        }
        while (v46 != 8);
        v56 = -(v94 * v33 - v93 * v32);
        v57 = 1.0 / sqrt(v43 * v43 + *((double *)&v104 + 1) * *((double *)&v104 + 1));
        v58 = -(v92 * v33 - v91 * v32);
        *(double *)&v101 = v48;
        *((double *)&v101 + 1) = v47;
        v59 = 1.0 / sqrt(v56 * v56 + v58 * v58);
        v60 = v59 * v56;
        v61 = v59 * v58;
        *(double *)&v105 = v49 * (v59 * v56);
        *((double *)&v105 + 1) = v49 * (v59 * v58);
        v62 = -(v59 * v58);
        v63 = -(v57 * v43 * (v59 * v58) - v57 * v90 * (v59 * v56));
        v64 = -(v59 * v56);
        if (v63 >= 0.0)
          v64 = v60;
        else
          v62 = v61;
        v65 = (double)(*(_DWORD *)&v107[20] + *(_DWORD *)&v107[16]);
        *(double *)&v106 = v62 * v65;
        *((double *)&v106 + 1) = v64 * v65;
        v66 = *(float16x4_t *)(*(_QWORD *)(*(_QWORD *)v95 + 16) + 8);
        *(float16x4_t *)v107 = v66;
        _H0 = v66.i16[3];
        __asm { FCVT            S8, H0 }
        if (_S8 != 1.0 && _S8 != 0.0 && (CGGradientUsesPremultipliedInterpolation() & 1) == 0)
        {
          _S1 = 1.0 / _S8;
          __asm { FCVT            H1, S1 }
          v74.i16[1] = 15360;
          v74.i32[1] = 1006648320;
          v74.i16[0] = LOWORD(_S1);
          v75 = (float16x4_t)vzip1_s16(v74, v74);
          v75.i16[2] = LOWORD(_S1);
          *(float16x4_t *)v107 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16(v75), vcvtq_f32_f16(v66)));
        }
      }
    }
    CA::Shape::get_bounds(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v95 + 232) + 8), (int *)&v107[8]);
    v76 = *(int32x2_t **)(*(_QWORD *)v95 + 248);
    if (v76)
      v77 = v76 + 4;
    else
      v77 = (int32x2_t *)(*(_QWORD *)v95 + 184);
    v78 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)&v107[16]);
    if ((vpmax_u32(v78, v78).u32[0] & 0x80000000) == 0)
    {
      v79 = v77[1];
      v80 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v79);
      if ((vpmax_u32(v80, v80).u32[0] & 0x80000000) == 0)
      {
        *(int32x2_t *)&v81 = vmax_s32(*(int32x2_t *)&v107[8], *v77);
        v82 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&v107[8], *(int32x2_t *)&v107[16]), vadd_s32(*v77, v79)), *(int32x2_t *)&v81);
        v83 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v82);
        if ((vpmax_u32(v83, v83).u32[0] & 0x80000000) == 0)
        {
          *((int32x2_t *)&v81 + 1) = v82;
          *(_OWORD *)&v107[8] = v81;
          CGGradientApply();
          if (v99)
          {
            if (*(double *)&v101 <= 1.0)
            {
              if (*((double *)&v101 + 1) > 1.0)
              {
                v112[0] = *(float32x2_t *)((char *)&v102 + 8);
              }
            }
            else
            {
              v112[0] = *(float32x2_t *)((char *)&v102 + 8);
            }
          }
          v84 = *(_QWORD *)(*(_QWORD *)v95 + 16);
          if ((*(_BYTE *)(v84 + 481) & 1) != 0
            && ((v85 = *(unsigned __int8 *)(v84 + 480), v85 < 2) || v85 == 3 && v100))
          {
            *(_BYTE *)(v84 + 481) &= ~1u;
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v95 + 16) + 481) |= 1u;
          }
          else
          {
          }
        }
      }
    }
    *(_BYTE *)(*(_QWORD *)(v10 + 16) + 481) &= ~2u;
    *(_BYTE *)(*(_QWORD *)(v10 + 16) + 16) = 0;
  }
  else
  {
    ColorSpace = (CGColorSpace *)CGGradientGetColorSpace();
    Function = (CGFunction *)CGGradientGetFunction();
    Axial = CGShadingCreateAxial(ColorSpace, *(CGPoint *)(v5 + 120), *(CGPoint *)(v5 + 136), Function, *(_DWORD *)(v5 + 100) & 0x1000000, (*(_DWORD *)(v5 + 100) & 0x2000000) != 0);
    if (Axial)
    {
      v9 = Axial;
      CA::CG::fill_shading(v3);
      CGShadingRelease(v9);
    }
  }
}

uint64_t CA::CG::DrawGradient::draw_shape_and_color(CA::CG::DrawGradient *this, CA::CG::Renderer *a2)
{
  return (*(uint64_t (**)(CA::CG::DrawGradient *, CA::CG::Renderer *))(*(_QWORD *)this + 168))(this, a2);
}

int64x2_t CA::CG::DrawGradient::compute_dod(CA::CG::DrawGradient *this, int64x2_t *a2)
{
  int64x2_t result;

  result = vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
  *a2 = result;
  a2[1] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  return result;
}

uint64_t CA::CG::DrawGradient::color_type(CA::CG::DrawGradient *this, CA::CG::Renderer *a2)
{
  CGColorSpace *ColorSpace;
  char v11;

  v11 = 1;
  ColorSpace = (CGColorSpace *)CGGradientGetColorSpace();
  if (CGColorSpaceGetModel(ColorSpace) > kCGColorSpaceModelRGB)
    v11 = 0;
  else
    CGGradientApply();
  if ((~*((_DWORD *)this + 25) & 0x3000000) != 0)
    return 0;
  if (!v11)
    return 8;
  _H0 = *((_WORD *)this + 47);
  __asm { FCVT            S0, H0 }
  if (_S0 == 1.0)
    return 12;
  else
    return 8;
}

double CA::Mat2Impl::mat2_invert(CA::Mat2Impl *this, double *a2, const double *a3)
{
  double v3;
  double result;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v3 = a2[1];
  result = a2[2];
  v5 = a2[3];
  v6 = -(result * v3 - v5 * *a2);
  if (v6 != 0.0)
  {
    v7 = 1.0 / v6;
    v9 = a2[4];
    v8 = a2[5];
    v10 = v7 * *a2;
    v11 = v7 * v5;
    *(double *)this = v11;
    *((double *)this + 1) = -(v7 * v3);
    *((double *)this + 2) = -(v7 * result);
    *((double *)this + 3) = v10;
    result = -(v9 * v11 - v8 * (v7 * result));
    *((double *)this + 4) = result;
    *((double *)this + 5) = -(v8 * v10 - v9 * (v7 * v3));
  }
  return result;
}

int32x2_t *CA::CG::`anonymous namespace'::GradientStripeRenderer::flush(int32x2_t *this)
{
  int32x2_t *v1;
  int32x2_t *v2;
  uint64_t v3;
  _QWORD v4[3];
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (this[4].i32[0])
  {
    v1 = this;
    v6 = 0u;
    v2 = this + 18;
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 232) + 8);
    v4[0] = *this;
    v4[1] = v3;
    v5 = 0u;
    v4[2] = 0;
    WORD4(v5) = 0;
    CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v4);
    while (1)
    {
      this = (int32x2_t *)CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v4, v2);
      if (!(_DWORD)this)
        break;
      (*(void (**)(int32x2_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)v1
                                                                                                 + 280))(*v1, 2, v1[4].u32[0], 0, *(_QWORD *)&v1[3], 0, v1[4].u32[0], 0);
    }
  }
  return this;
}

uint64_t CA::CG::DrawLinearGradient::supports_complex_blend_modes(CA::CG::DrawLinearGradient *this)
{
  return (*((unsigned __int8 *)this + 103) >> 2) & 1;
}

void CA::CG::FillRects::draw_shape_and_color(CA::CG::FillRects *this, CA::CG::Renderer *a2, double *a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  int64x2_t v12;
  int8x16_t v13;
  int32x4_t v14;
  unint64_t v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  const CA::Bounds *v21;
  int64x2_t v22;
  int8x16_t v23;
  int32x4_t v24;
  CA::Shape *v25;
  uint64_t v26;
  float64_t v27;
  float64x2_t v28;
  float64x2_t v29;
  uint64_t v30;
  CA::Shape *v31[2];
  float64x2_t v32[4];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 10))
  {
    v5 = *((_QWORD *)a2 + 1);
    if ((*((_BYTE *)this + 100) & 4) != 0)
      v6 = (char *)a2 + 88;
    else
      v6 = (char *)a2 + 32;
    v7 = *((_QWORD *)this + 14);
    if (v7 == 1)
    {
      v9 = *((double *)this + 15);
      v8 = *((double *)this + 16);
      v32[0].f64[0] = v9;
      v32[0].f64[1] = v8;
      v11 = *((double *)this + 17);
      v10 = *((double *)this + 18);
      v32[1].f64[0] = v11;
      v32[1].f64[1] = v10;
      if (v11 < 0.0)
      {
        v32[0].f64[0] = v11 + v9;
        v32[1].f64[0] = -v11;
      }
      if (v10 < 0.0)
      {
        v32[0].f64[1] = v10 + v8;
        v32[1].f64[1] = -v10;
      }
      CA::Mat2Impl::mat2_apply_to_rect((uint64_t)v6, v32[0].f64, a3);
      v12 = vceqzq_f64(v32[1]);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v12, 1), (int8x16_t)v12).u64[0] & 0x8000000000000000) != 0
        || (v13 = vorrq_s8((int8x16_t)vcltzq_f64(v32[1]), (int8x16_t)vcgezq_f64(v32[1])),
            (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v13), 1), v13).u64[0] & 0x8000000000000000) != 0))
      {
        v31[0] = 0;
        v31[1] = 0;
      }
      else
      {
        v14 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v32[0], (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        *(int32x4_t *)v31 = vuzp1q_s32(v14, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v32[0], v32[1]), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v14));
      }
      v25 = (CA::Shape *)CA::Shape::intersect(*(CA::Shape **)(*(_QWORD *)(v5 + 232) + 8), (const CA::Bounds *)v31);
    }
    else
    {
      v30 = 1;
      if (v7)
      {
        v15 = 0;
        v16 = (double *)((char *)this + 144);
        v28 = (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL);
        v29 = (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000);
        do
        {
          v18 = *(v16 - 3);
          v17 = *(v16 - 2);
          v32[0].f64[0] = v18;
          v32[0].f64[1] = v17;
          v20 = *(v16 - 1);
          v19 = *v16;
          v32[1].f64[0] = v20;
          v32[1].f64[1] = v19;
          if (v20 < 0.0)
          {
            v32[0].f64[0] = v20 + v18;
            v32[1].f64[0] = -v20;
          }
          if (v19 < 0.0)
          {
            v32[0].f64[1] = v19 + v17;
            v32[1].f64[1] = -v19;
          }
          CA::Mat2Impl::mat2_apply_to_rect((uint64_t)v6, v32[0].f64, a3);
          v22 = vceqzq_f64(v32[1]);
          if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v22, 1), (int8x16_t)v22).u64[0] & 0x8000000000000000) != 0
            || (v23 = vorrq_s8((int8x16_t)vcltzq_f64(v32[1]), (int8x16_t)vcgezq_f64(v32[1])),
                (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v23), 1), v23).u64[0] & 0x8000000000000000) != 0))
          {
            v31[0] = 0;
            v31[1] = 0;
          }
          else
          {
            v24 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v32[0], v29));
            *(int32x4_t *)v31 = vuzp1q_s32(v24, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v32[0], v32[1]), v28)), (int64x2_t)v24));
          }
          CA::shape_union((CA::Shape **)&v30, v31, v21);
          ++v15;
          v16 += 4;
        }
        while (v15 < *((_QWORD *)this + 14));
      }
      CA::shape_intersect((CA *)&v30, *(_QWORD *)(*(_QWORD *)(v5 + 232) + 8), (const CA::Shape *)a3);
      v25 = (CA::Shape *)v30;
    }
    v33 = 0;
    memset(&v32[2], 0, 32);
    memset(v32, 0, 32);
    v26 = *(_QWORD *)(v5 + 232);
    *(float64x2_t *)((char *)v32 + 8) = *(float64x2_t *)(v26 + 8);
    v27 = *(double *)(v26 + 32);
    v32[1].f64[1] = *(float64_t *)(v26 + 24);
    v32[2].f64[0] = v27;
    *(float64x2_t *)((char *)&v32[2] + 8) = *(float64x2_t *)(v26 + 40);
    v32[3].f64[1] = *(float64_t *)(v26 + 56);
    LOWORD(v27) = *(_WORD *)(v26 + 68);
    LODWORD(v33) = *(_DWORD *)(v26 + 64);
    HIDWORD(v33) = LOWORD(v27) & 0x5FF;
    *(_QWORD *)&v32[0].f64[1] = v25;
    *(_QWORD *)&v32[0].f64[0] = CA::OGL::Context::set_gstate(v5, (uint64_t)v32);
    (*(void (**)(CA::CG::FillRects *, CA::CG::Renderer *))(*(_QWORD *)this + 168))(this, a2);
    CA::OGL::Context::set_gstate(v5, **(_QWORD **)(v5 + 232));
    if (v25)
      CA::Shape::unref(v25);
  }
  else
  {
    (*(void (**)(CA::CG::FillRects *, CA::CG::Renderer *))(*(_QWORD *)this + 160))(this, a2);
  }
}

uint64_t CA::CG::DrawImage::may_flush()
{
  return 1;
}

uint64_t CA::CG::DrawImage::draw_shape_and_color(CA::CG::DrawImage *this, CA::CG::Renderer *a2)
{
  return (*(uint64_t (**)(CA::CG::DrawImage *, CA::CG::Renderer *, uint64_t))(*(_QWORD *)this + 184))(this, a2, 1);
}

void CA::CG::DrawImage::draw_image(CA::CG::DrawImage *this, CA::CG::Renderer *a2)
{
  CA::CG::fill_image((uint64_t)a2);
}

uint64_t CA::CG::DrawImage::color_type(CA::CG::DrawImage *this, CA::CG::Renderer *a2)
{
  uint64_t v3;
  unsigned int v4;

  if ((*((_BYTE *)this + 100) & 2) != 0)
  {
    v3 = *((_QWORD *)this + 10);
    v4 = 9;
    if (v3)
    {
      if (*((_DWORD *)this + 14))
        v4 = 10;
      else
        v4 = 9;
    }
    _H0 = *((_WORD *)this + 47);
    __asm { FCVT            S0, H0 }
    if (_S0 == 1.0 && v3 == 0)
      return v4 | 4;
    else
      return v4;
  }
  else if ((CGImageHasAlpha() & 1) != 0)
  {
    return 0;
  }
  else
  {
    return 4 * (CGImageGetMask() == 0);
  }
}

uint64_t CA::CG::DrawOp::draw_shape_and_color(CA::CG::DrawOp *this, CA::CG::Renderer *a2)
{
  return (*(uint64_t (**)(CA::CG::DrawOp *, CA::CG::Renderer *))(*(_QWORD *)this + 160))(this, a2);
}

BOOL CA::CG::FillGlyphs::may_flush(uint64_t a1, uint64_t a2, int a3)
{
  _BOOL8 result;

  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 184))(*(_QWORD *)(a2 + 8), 19))
    return 1;
  result = 1;
  if (a3 != 12 && (a3 - 1) <= 0x18)
    return (*(_BYTE *)(a1 + 103) & 1) == 0;
  return result;
}

float64x2_t *CA::CG::FillGlyphs::compute_dod(CA::CG::FillGlyphs *this, float64x2_t *a2)
{
  return CA::CG::DrawGlyphs::compute_dod_(this, a2, 0.0, 192);
}

uint64_t CA::CG::FillGlyphs::shape_type(CA::CG::FillGlyphs *this, CA::CG::Renderer *a2)
{
  if (!*((_QWORD *)this + 23))
    return 0;
  if ((*((_BYTE *)this + 103) & 1) != 0)
    return 3;
  return 2;
}

void CA::CG::FillRoundedRect::draw_shape(CA::CG::FillRoundedRect *this, CA::CG::Renderer *a2)
{
  int v3;
  CGPathRef v4;
  const CGPath *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  BOOL v10;
  uint64_t v11;
  __int128 v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  float64_t v16;
  float64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  _OWORD v22[9];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)this + 25);
  if ((v3 & 1) != 0)
  {
    v7 = *((double *)this + 14);
    v6 = *((double *)this + 15);
    v18 = v7;
    v19 = v6;
    v9 = *((double *)this + 16);
    v8 = *((double *)this + 17);
    v20 = v9;
    v21 = v8;
    if (v9 < 0.0)
    {
      v18 = v9 + v7;
      v20 = -v9;
    }
    if (v8 < 0.0)
    {
      v19 = v8 + v6;
      v21 = -v8;
    }
    v10 = (v3 & 4) == 0;
    v11 = 88;
    if (v10)
      v11 = 32;
    v12 = *(_OWORD *)((char *)a2 + v11);
    v13 = (char *)a2 + 32;
    if (!v10)
      v13 = (char *)a2 + 88;
    v14 = *((_OWORD *)v13 + 1);
    v15 = *((_OWORD *)v13 + 2);
    v16 = *((double *)this + 18);
    v17 = *((double *)this + 19);
    v24 = 0u;
    v25 = 0u;
    v23 = 0u;
    memset(v22, 0, sizeof(v22));
    v26 = 0;
    CA::Transform::set_affine((CA::Transform *)v22, *(double *)&v12, *((double *)&v12 + 1), *(double *)&v14, *((double *)&v14 + 1), *(double *)&v15, *((double *)&v15 + 1));
    *((_QWORD *)&v23 + 1) = &v18;
    *(_QWORD *)&v24 = v22;
    *((_QWORD *)&v24 + 1) = 0xFF0020003FLL;
    v26 = 0;
    v25 = 0uLL;
    CA::OGL::fill_round_rect(*((_QWORD *)a2 + 1), (float64x2_t **)&v23 + 1, (double *)0xF, 0, v16, v17);
  }
  else
  {
    v4 = CA::CG::Renderer::retain_simple_path(a2, (const CGRect *)((char *)this + 112), (const CGSize *)this + 9);
    if (v4)
    {
      v5 = v4;
      CA::CG::fill_path((uint64_t)a2);
      CGPathRelease(v5);
    }
  }
}

_QWORD *CA::CG::DrawShadow::draw_shape_and_color(_QWORD *this, CA::CG::Renderer *a2)
{
  if (!*(_BYTE *)(this[19] + 89))
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, CA::CG::Renderer *))(*this + 184))(this, a2);
  return this;
}

float64x2_t *CA::CG::FillPath::compute_dod(float64x2_t *this, float64x2_t *a2)
{
  *a2 = *(float64x2_t *)((char *)this + 120);
  a2[1] = *(float64x2_t *)((char *)this + 136);
  if ((BYTE4(this[6].f64[0]) & 4) == 0)
    return CA::Rect::apply_transform(a2, (const CGAffineTransform *)&this->f64[1]);
  return this;
}

void CA::CG::FillPath::draw_shape(CA::CG::FillPath *this, CA::CG::Renderer *a2)
{
  CA::CG::fill_path((uint64_t)a2);
}

uint64_t CA::CG::DrawOp::supports_complex_blend_modes(CA::CG::DrawOp *this)
{
  return 1;
}

_QWORD *CA::CG::DrawShadow::draw_shape(_QWORD *this, CA::CG::Renderer *a2)
{
  if (!*(_BYTE *)(this[19] + 89))
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, CA::CG::Renderer *))(*this + 184))(this, a2);
  return this;
}

uint64_t CAImageQueueConsumeUnconsumedInRange(uint64_t a1, char a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v9;
  os_unfair_lock_s *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  double v18;
  unsigned int *v21;
  unsigned int *v23;
  unsigned int *v25;
  unsigned int *v27;

  v4 = *(_QWORD *)(a1 + 48);
  if (!v4)
    return 0;
  v9 = *(_QWORD *)(v4 + 24);
  v10 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  if (!*(_DWORD *)(a1 + 40))
  {
    v12 = 0;
    goto LABEL_45;
  }
  v11 = 0;
  v12 = 0;
  v13 = *(_DWORD *)(a1 + 24);
  v14 = INFINITY;
  if ((a2 & 2) == 0)
    v14 = -INFINITY;
  v15 = -1;
  do
  {
    v16 = v9 + 160 * v11;
    if (!*(_DWORD *)(v16 + 524))
      goto LABEL_35;
    v17 = *(_DWORD *)(v9 + 160 * v11 + 520);
    if (v17 - v13 < 0)
    {
      v23 = (unsigned int *)(v9 + 160 * v11 + 516);
      while (!__ldaxr(v23))
      {
        if (!__stlxr(0x33333333u, v23))
        {
LABEL_32:
          *(_BYTE *)(v9 + 160 * v11 + 577) = 1;
          ++v12;
          goto LABEL_35;
        }
      }
      goto LABEL_25;
    }
    v18 = *(double *)(v16 + 456);
    if (v17 != v13 || v18 < a3 || v18 > a4)
      goto LABEL_35;
    if ((a2 & 2) == 0)
    {
      if (v18 <= v14)
        goto LABEL_17;
      goto LABEL_27;
    }
    if (v18 >= v14)
    {
LABEL_17:
      v21 = (unsigned int *)(v9 + 160 * v11 + 516);
      while (!__ldaxr(v21))
      {
        if (!__stlxr(0x22222222u, v21))
          goto LABEL_32;
      }
LABEL_25:
      __clrex();
      goto LABEL_35;
    }
LABEL_27:
    if (v15 != -1)
    {
      v25 = (unsigned int *)(v9 + 160 * v15 + 516);
      while (!__ldaxr(v25))
      {
        if (!__stlxr(0x22222222u, v25))
        {
          v15 = v11;
          v14 = v18;
          goto LABEL_32;
        }
      }
      __clrex();
    }
    v15 = v11;
    v14 = v18;
LABEL_35:
    ++v11;
  }
  while (v11 < *(unsigned int *)(a1 + 40));
  if ((a2 & 1) == 0 && v15 != -1)
  {
    v27 = (unsigned int *)(v9 + 160 * v15 + 516);
    while (!__ldaxr(v27))
    {
      if (!__stlxr(0x22222222u, v27))
      {
        *(_BYTE *)(v9 + 160 * v15 + 577) = 1;
        ++v12;
        goto LABEL_45;
      }
    }
    __clrex();
  }
LABEL_45:
  os_unfair_lock_unlock(v10);
  return v12;
}

void register_memory_handler(void)
{
  CA::Render::add_observer(0x31u, 0, (uint64_t)memory_warning, 0, 0);
}

void sub_184587758(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::Layer::toggle_flipped(CA::Layer *this, CA::Transaction *a2)
{
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  _WORD *v7;
  _WORD *v8;
  CFTypeID v9;
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  while (1)
  {
    v4 = (void *)*((_QWORD *)this + 2);
    objc_msgSend(v4, "willChangeValueForKey:", CFSTR("contentsAreFlipped"));
    v5 = (unsigned int *)((char *)this + 4);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 ^ 0x400000, v5));
    if ((CA::Layer::layout_is_active(this, a2, 1) & 1) == 0
      && objc_msgSend(v4, "needsLayoutOnGeometryChange"))
    {
      objc_msgSend(v4, "setNeedsLayout");
    }
    v7 = (_WORD *)objc_msgSend(v4, "contents");
    if (v7)
    {
      v8 = v7;
      v9 = CFGetTypeID(v7);
      v10 = CABackingStoreGetTypeID::type;
      if (!CABackingStoreGetTypeID::type)
      {
        v10 = _CFRuntimeRegisterClass();
        CABackingStoreGetTypeID::type = v10;
      }
      if (v9 == v10 && (v8[246] & 0x4000) != 0)
        objc_msgSend(v4, "setNeedsDisplay");
    }
    result = objc_msgSend(v4, "didChangeValueForKey:", CFSTR("contentsAreFlipped"));
    v12 = (_QWORD *)*((_QWORD *)this + 3);
    if (v12)
    {
      v13 = v12 + 1;
      v14 = v12[2];
      if (v14 == 1)
      {
        if (!v12[3])
        {
          do
          {
LABEL_18:
            v15 = *v13++;
            result = CA::Layer::toggle_flipped(*(CA::Layer **)(v15 + 16), a2);
            --v14;
          }
          while (v14);
          goto LABEL_19;
        }
      }
      else if (!v14)
      {
        goto LABEL_19;
      }
      v13 = (uint64_t *)*v13;
      goto LABEL_18;
    }
LABEL_19:
    v16 = *((_QWORD *)this + 4);
    if (!v16)
      return result;
    this = *(CA::Layer **)(v16 + 16);
  }
}

uint64_t CAImageQueueGetWidth(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

unint64_t CA::OGL::AsynchronousDispatcher::start_timer(unint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(this + 40))
  {
    v1 = this;
    v7 = 0;
    v8 = 0;
    v6 = this;
    v2 = mach_absolute_time();
    v3 = CATimeWithHostTime(v2);
    v4 = CATimeWithHostTime(*(_QWORD *)(v1 + 48));
    v5 = CADisplayTimerCreate((uint64_t)CA::OGL::AsynchronousDispatcher::timer_callback, &v6, 0, v3, v4);
    *(_QWORD *)(v1 + 40) = v5;
    v9 = *(_OWORD *)(v1 + 72);
    v10 = *(_QWORD *)(v1 + 88);
    CADisplayTimerAlignPhase(v5, &v9);
    return CADisplayTimerAddToRunLoop(*(_QWORD *)(v1 + 40), *(__CFRunLoop **)(v1 + 32), (const __CFString *)*MEMORY[0x1E0C9B280]);
  }
  return this;
}

uint64_t CA::Display::DisplayLink::item_properties_changed(CA::Display::DisplayLink *this)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)((char *)this + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  CA::Display::DisplayLink::compute_firing_rate_multiplier_locked((uint64_t)this);
  CA::Display::DisplayLink::update_paused_locked((uint64_t)this);
  return pthread_mutex_unlock(v2);
}

void sub_184587E28(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void CA::Display::DisplayLinkItem::update_link(CA::Display::DisplayLinkItem *this, __CFRunLoop *a2)
{
  pthread_mutex_t *v4;
  _opaque_pthread_t *v5;
  uint64_t v6;
  uint64_t v7;
  CA::Display::DisplayLinkItem **v8;
  CA::Display::DisplayLinkItem **v9;
  CA::Display::DisplayLinkItem **v10;
  int v11;
  CA::Display::DisplayLink *v12;
  size_t v13;
  uint64_t i;
  const __CFString *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  CA::Display::DisplayLinkItem *v20;
  uint64_t j;
  const __CFString *v22;
  uint64_t v23;
  const void *v24;
  const void *v25;
  NSObject *v26;
  int v27;
  int v28;
  int v29;
  CA::Display::DisplayLinkItem *v30;
  uint8_t buf[8];
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = (pthread_mutex_t *)((char *)this + 136);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 136));
  *((_BYTE *)this + 316) |= 2u;
  while (1)
  {
    v5 = (_opaque_pthread_t *)*((_QWORD *)this + 31);
    if (!v5)
      break;
    if (v5 == pthread_self())
    {
      pthread_mutex_unlock(v4);
      return;
    }
    pthread_cond_wait((pthread_cond_t *)((char *)this + 200), v4);
  }
  (*(void (**)(uint8_t *__return_ptr, CA::Display::DisplayLinkItem *, __CFRunLoop *, _QWORD))(*(_QWORD *)this + 40))(buf, this, a2, *((_QWORD *)this + 34));
  v6 = *(_QWORD *)buf;
  v7 = *((_QWORD *)this + 33);
  if (v7 == *(_QWORD *)buf)
  {
    v11 = 0;
    v12 = *(CA::Display::DisplayLink **)buf;
  }
  else
  {
    if (v7)
    {
      pthread_mutex_lock((pthread_mutex_t *)(v7 + 56));
      if ((*((_BYTE *)this + 316) & 1) == 0)
        CA::Display::DisplayLinkItem::unregister_frame_interval_range(this);
      v9 = *(CA::Display::DisplayLinkItem ***)(v7 + 120);
      v8 = *(CA::Display::DisplayLinkItem ***)(v7 + 128);
      if (v9 == v8)
      {
        v8 = *(CA::Display::DisplayLinkItem ***)(v7 + 120);
      }
      else
      {
        v10 = *(CA::Display::DisplayLinkItem ***)(v7 + 120);
        while (*v10 != this)
        {
          if (++v10 == v8)
            goto LABEL_21;
        }
        v13 = (char *)v8 - (char *)(v10 + 1);
        if (v13)
        {
          memmove(v10, v10 + 1, v13);
          v9 = *(CA::Display::DisplayLinkItem ***)(v7 + 120);
        }
        v8 = (CA::Display::DisplayLinkItem **)((char *)v10 + v13);
        *(_QWORD *)(v7 + 128) = v8;
      }
LABEL_21:
      CA::Display::DisplayLink::compute_firing_rate_multiplier_locked(v7);
      CA::Display::DisplayLink::update_paused_locked(v7);
      pthread_mutex_unlock((pthread_mutex_t *)(v7 + 56));
      if (v8 == v9)
      {
        for (i = *(_QWORD *)(v7 + 24); i; i = *(_QWORD *)(i + 8))
        {
          v15 = *(const __CFString **)i;
          pthread_mutex_lock((pthread_mutex_t *)(v7 + 56));
          v16 = *(_QWORD *)(v7 + 152);
          if (v16)
            CADisplayTimerRemoveFromRunLoop(v16, *(__CFRunLoop **)(v7 + 16), v15);
          pthread_mutex_unlock((pthread_mutex_t *)(v7 + 56));
        }
      }
    }
    else
    {
      CFRetain(*((CFTypeRef *)this + 32));
    }
    v12 = (CA::Display::DisplayLink *)*((_QWORD *)this + 33);
    *((_QWORD *)this + 33) = v6;
    if (v6)
    {
      v30 = this;
      pthread_mutex_lock((pthread_mutex_t *)(v6 + 56));
      v17 = *(char **)(v6 + 120);
      v18 = *(char **)(v6 + 128);
      if (v18 == v17)
      {
LABEL_31:
        v19 = *(char **)(v6 + 128);
      }
      else
      {
        v19 = *(char **)(v6 + 120);
        while (*(_QWORD *)(*(_QWORD *)v19 + 48) >= *((_QWORD *)this + 6))
        {
          v19 += 8;
          if (v19 == v18)
            goto LABEL_31;
        }
      }
      std::vector<CA::Display::DisplayLinkItem *>::insert(v6 + 120, v19, (char *)&v30);
      v20 = v30;
      if ((*((_BYTE *)v30 + 316) & 1) == 0)
      {
        if ((*(_BYTE *)(*((_QWORD *)v30 + 2) + 697) & 2) != 0
          && (*((_BYTE *)v30 + 316) & 4) == 0
          && *((_QWORD *)v30 + 33))
        {
          if (byte_1ECDC6AC5)
          {
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v26 = x_log_category_frame_rate;
              if (os_log_type_enabled((os_log_t)x_log_category_frame_rate, OS_LOG_TYPE_DEFAULT))
              {
                v27 = *((_DWORD *)v20 + 16);
                v28 = *((_DWORD *)v20 + 17);
                v29 = *((_DWORD *)v20 + 18);
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)&buf[4] = v27;
                v32 = 1024;
                v33 = v28;
                v34 = 1024;
                v35 = v29;
                _os_log_impl(&dword_184457000, v26, OS_LOG_TYPE_DEFAULT, "CAFrameRateClient: register %u %u %u", buf, 0x14u);
              }
            }
          }
          if (*((_BYTE *)v20 + 129))
            CA::Display::DisplayLinkItem::run_deferred_unregister_frame_interval_range(v20);
          CA::Display::DisplayTimingsControl::register_frame_interval_range((os_unfair_lock_s *)(*((_QWORD *)v20 + 2) + 464), *(CAFrameIntervalRange *)((char *)v20 + 64));
          CA::Display::DisplayTimingsControl::register_frame_interval_reasons((CA::Display::DisplayTimingsControl *)(*((_QWORD *)v20 + 2) + 464), (uint64_t)v20, (const unsigned int *)v20 + 22, 4u);
          *((_BYTE *)v20 + 316) |= 4u;
          v20 = v30;
        }
        CA::Display::DisplayLinkItem::set_preferred_fps_range_locked(v20, *(CAFrameRateRange *)((char *)v20 + 76), 0);
        CA::Display::DisplayLink::compute_firing_rate_multiplier_locked(v6);
        CA::Display::DisplayLinkItem::set_display_active((uint64_t)v30, *(unsigned __int8 *)(v6 + 172));
      }
      CA::Display::DisplayLink::update_paused_locked(v6);
      pthread_mutex_unlock((pthread_mutex_t *)(v6 + 56));
      if (v18 == v17)
      {
        for (j = *(_QWORD *)(v6 + 24); j; j = *(_QWORD *)(j + 8))
        {
          v22 = *(const __CFString **)j;
          pthread_mutex_lock((pthread_mutex_t *)(v6 + 56));
          v23 = *(_QWORD *)(v6 + 152);
          if (v23)
            CADisplayTimerAddToRunLoop(v23, *(__CFRunLoop **)(v6 + 16), v22);
          pthread_mutex_unlock((pthread_mutex_t *)(v6 + 56));
        }
      }
      v11 = 0;
    }
    else
    {
      v11 = 1;
    }
  }
  if (*((_DWORD *)this + 78))
  {
    v24 = (const void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    v25 = (const void *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
  }
  else
  {
    v24 = 0;
    v25 = 0;
  }
  *((_BYTE *)this + 316) &= ~2u;
  pthread_mutex_unlock(v4);
  if (v24)
    CFRelease(v24);
  if (v25)
    CFRelease(v25);
  if (v11)
    CFRelease(*((CFTypeRef *)this + 32));
  if (v12)
    CA::Display::DisplayLink::unref(v12);
}

void sub_18458829C(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;
  CA::Display::DisplayLink *v2;

  pthread_mutex_unlock(v1);
  if (v2)
    CA::Display::DisplayLink::unref(v2);
  _Unwind_Resume(a1);
}

uint64_t CA::Display::DisplayLink::update_paused_locked(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;

  v1 = this;
  *(_DWORD *)(this + 144) = 0;
  v2 = *(_QWORD *)(this + 120);
  v3 = *(_QWORD *)(this + 128);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = *(_QWORD *)(this + 120);
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)v5 + 316) & 1) != 0)
        *(_DWORD *)(this + 144) = ++v4;
      v5 += 8;
    }
    while (v5 != v3);
  }
  if (v4 < (unint64_t)((v3 - v2) >> 3))
  {
    if (*(_QWORD *)(this + 152))
    {
      v6 = *(_DWORD *)(this + 148);
      this = CA::Display::DisplayLink::update_timer_locked((CA::Display::DisplayLink *)this, 0);
      if (!v6)
      {
        if ((this & 1) != 0)
          this = (uint64_t)CA::Display::DisplayLink::start_timer_locked((_QWORD *)v1);
        else
          *(_BYTE *)(v1 + 192) = 1;
      }
    }
    else
    {
      this = CA::Display::DisplayLink::update_timer_locked((CA::Display::DisplayLink *)this, 0);
    }
    *(_DWORD *)(v1 + 148) = 5;
  }
  return this;
}

void CA::Display::DisplayLink::get_link(uint64_t *a1, uint64_t a2, const void *a3, uint64_t *a4, const void *a5, const void *a6, const void *a7)
{
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  id v22;
  _QWORD *v23;
  _QWORD *v24;
  CFTypeRef *v25;
  int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;

  if (a4)
  {
    v14 = dyld_program_sdk_at_least();
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Display::DisplayLink::_list_lock);
    if (!a6 && v14 && (v15 = CA::Display::DisplayLink::_list) != 0)
    {
      while (1)
      {
        if (!*(_QWORD *)(v15 + 240) && *(_QWORD *)(v15 + 8) == a2 && *(const void **)(v15 + 16) == a3)
        {
          v16 = *(_QWORD *)(v15 + 24);
          if (v16)
          {
            v17 = 0;
            v18 = *(_QWORD *)(v15 + 24);
            do
            {
              ++v17;
              v18 = *(_QWORD *)(v18 + 8);
            }
            while (v18);
          }
          else
          {
            v17 = 0;
          }
          v19 = 0;
          v20 = a4;
          do
          {
            ++v19;
            v20 = (uint64_t *)v20[1];
          }
          while (v20);
          if (v17 == v19)
            break;
        }
LABEL_23:
        v15 = *(_QWORD *)(v15 + 48);
        if (!v15)
          goto LABEL_24;
      }
      for (; v16; v16 = *(_QWORD *)(v16 + 8))
      {
        v21 = a4;
        while (!CFEqual(*(CFTypeRef *)v16, (CFTypeRef)*v21))
        {
          v21 = (uint64_t *)v21[1];
          if (!v21)
            goto LABEL_23;
        }
      }
      v27 = (unsigned int *)(v15 + 40);
      while (1)
      {
        v28 = *v27;
        if (!*v27)
          break;
        while (1)
        {
          v29 = __ldaxr(v27);
          if (v29 != v28)
            break;
          if (!__stlxr(v28 + 1, v27))
            goto LABEL_32;
        }
        __clrex();
      }
    }
    else
    {
LABEL_24:
      v15 = operator new();
      *(_QWORD *)v15 = &off_1E1599880;
      v22 = *(id *)(a2 + 80);
      *(_QWORD *)(v15 + 8) = a2;
      *(_QWORD *)(v15 + 16) = CFRetain(a3);
      v23 = x_list_copy(a4);
      v24 = v23;
      if (v23)
      {
        v25 = (CFTypeRef *)v23;
        do
        {
          CFRetain(*v25);
          v25 = (CFTypeRef *)v25[1];
        }
        while (v25);
      }
      *(_QWORD *)(v15 + 120) = 0;
      *(_QWORD *)(v15 + 24) = v24;
      *(_QWORD *)(v15 + 32) = 0;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 128) = 0;
      *(_QWORD *)(v15 + 136) = 0;
      *(_QWORD *)(v15 + 152) = 0;
      *(_QWORD *)(v15 + 160) = 0;
      *(_QWORD *)(v15 + 144) = 0x500000000;
      *(_DWORD *)(v15 + 168) = 1;
      *(_DWORD *)(v15 + 176) = 0;
      *(_BYTE *)(v15 + 180) = 0;
      *(_QWORD *)(v15 + 184) = 0;
      *(_OWORD *)(v15 + 200) = 0u;
      *(_OWORD *)(v15 + 216) = 0u;
      *(_QWORD *)(v15 + 232) = _Block_copy(a5);
      *(_QWORD *)(v15 + 240) = _Block_copy(a6);
      *(_QWORD *)(v15 + 248) = _Block_copy(a7);
      *(_DWORD *)(v15 + 40) = 1;
      pthread_mutex_init((pthread_mutex_t *)(v15 + 56), 0);
      if ((CA::Display::DisplayTimingsControl::power_state((CA::Display::DisplayTimingsControl *)(*(_QWORD *)(v15 + 8)
                                                                                                 + 464)) & 1) != 0)
        v26 = 1;
      else
        v26 = HIBYTE(*(unsigned __int16 *)(*(_QWORD *)(v15 + 8) + 760)) & 1;
      CA::Display::DisplayLink::set_display_active((CA::Display::DisplayLink *)v15, v26);
      CA::Display::DisplayLink::update_timer((CA::Display::DisplayLink *)v15, 0);
      *(_QWORD *)(v15 + 48) = CA::Display::DisplayLink::_list;
      CA::Display::DisplayLink::_list = v15;
    }
LABEL_32:
    *a1 = v15;
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Display::DisplayLink::_list_lock);
  }
  else
  {
    *a1 = 0;
  }
}

void sub_184588650(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Display::DisplayLink::_list_lock);
  _Unwind_Resume(a1);
}

void CA::Display::DisplayLinkItem::get_link(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  CA::Display::DisplayLink::get_link(a4, *(_QWORD *)(a1 + 16), a2, a3, 0, 0, 0);
}

uint64_t CADisplayTimerAddToRunLoop(uint64_t result, __CFRunLoop *a2, const __CFString *a3)
{
  uint64_t v5;
  pthread_mutex_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t phase;
  unint64_t v11;
  void (*v12)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  unint64_t v13[3];
  unint64_t v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  if (a2 && a3)
  {
    v5 = result;
    v6 = (pthread_mutex_t *)(result + 16);
    pthread_mutex_lock((pthread_mutex_t *)(result + 16));
    CFRunLoopAddSource(a2, *(CFRunLoopSourceRef *)(v5 + 136), a3);
    v7 = mach_absolute_time();
    v8 = *(_QWORD *)(v5 + 240);
    v9 = *(_QWORD *)(v5 + 216);
    v13[0] = 0;
    v13[1] = v8;
    v13[2] = v9;
    v14[0] = 0;
    phase = get_phase(v13, v7, v14);
    v11 = v7 - phase + v14[0];
    if (!phase)
      v11 = v7;
    *(_QWORD *)(v5 + 224) = v11;
    mk_timer_cancel();
    *(_BYTE *)(v5 + 200) = 1;
    mk_timer_arm_leeway();
    *(_BYTE *)(v5 + 200) = 0;
    v12 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(v5 + 192);
    if (v12)
      v12(v5, 1, *(_QWORD *)(v5 + 224), *(_QWORD *)(v5 + 216), *(_QWORD *)(v5 + 184));
    return pthread_mutex_unlock(v6);
  }
  return result;
}

void std::vector<CA::Display::DisplayLinkItem *>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  char *v32;

  v3 = a3;
  v6 = *(char **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v12 = *(char **)a1;
    v13 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v13 >> 61)
      abort();
    v14 = __src - v12;
    v15 = (__src - v12) >> 3;
    v16 = v7 - (_QWORD)v12;
    if (v16 >> 2 > v13)
      v13 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v13;
    if (v17)
    {
      v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v17);
    }
    else
    {
      v19 = 0;
      v18 = 0;
    }
    v20 = &v19[8 * v15];
    v21 = &v19[8 * v18];
    if (v15 == v18)
    {
      if (v14 < 1)
      {
        if (v12 == __src)
          v23 = 1;
        else
          v23 = v14 >> 2;
        v24 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v23);
        v20 = &v24[8 * (v23 >> 2)];
        v21 = &v24[8 * v25];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v22 = v15 + 2;
        if (v15 >= -1)
          v22 = v15 + 1;
        v20 -= 8 * (v22 >> 1);
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v26 = v20 + 8;
    v27 = *(char **)a1;
    if (*(char **)a1 != __src)
    {
      v28 = __src;
      do
      {
        v29 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *((_QWORD *)v20 - 1) = v29;
        v20 -= 8;
      }
      while (v28 != v27);
    }
    v30 = *(_BYTE **)(a1 + 8);
    v31 = v30 - __src;
    if (v30 != __src)
      memmove(v26, __src, v30 - __src);
    v32 = *(char **)a1;
    *(_QWORD *)a1 = v20;
    *(_QWORD *)(a1 + 8) = &v26[v31];
    *(_QWORD *)(a1 + 16) = v21;
    if (v32)
      operator delete(v32);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v8 = __src + 8;
    v9 = v6 - 8;
    v10 = *(_QWORD **)(a1 + 8);
    while (v9 < v6)
    {
      v11 = *(_QWORD *)v9;
      v9 += 8;
      *v10++ = v11;
    }
    *(_QWORD *)(a1 + 8) = v10;
    if (v6 != v8)
      memmove(&v6[-8 * ((v6 - v8) >> 3)], __src, v6 - v8);
    if (__src <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)__src = *(_QWORD *)v3;
  }
}

void sub_184588A00(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *x_list_copy(uint64_t *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  malloc_zone_t *malloc_zone;
  _QWORD *v6;
  _QWORD *v7;

  if (!a1)
    return 0;
  v1 = a1;
  v2 = 0;
  do
  {
    v3 = v2;
    v4 = *v1;
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v2 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
    *v2 = v4;
    v2[1] = v3;
    v1 = (uint64_t *)v1[1];
  }
  while (v1);
  v6 = 0;
  do
  {
    v7 = v2;
    v2 = (_QWORD *)v2[1];
    v7[1] = v6;
    v6 = v7;
  }
  while (v2);
  return v7;
}

uint64_t CADisplayTimerRemoveFromRunLoop(uint64_t a1, __CFRunLoop *a2, const __CFString *a3)
{
  pthread_mutex_t *v6;
  void (*v7)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);

  v6 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  mk_timer_cancel();
  *(_BYTE *)(a1 + 200) = 1;
  v7 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 192);
  if (v7)
    v7(a1, 2, *(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 184));
  CFRunLoopRemoveSource(a2, *(CFRunLoopSourceRef *)(a1 + 136), a3);
  return pthread_mutex_unlock(v6);
}

_QWORD *CA::Display::DisplayLink::start_timer_locked(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t phase;
  unint64_t v7;
  void (*v8)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t v9[3];
  unint64_t v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  if (this[19])
  {
    v1 = this;
    CA::Display::DisplayLink::align_phase_locked((CA::Display::DisplayLink *)this);
    v2 = mach_absolute_time();
    v3 = v1[19];
    pthread_mutex_lock((pthread_mutex_t *)(v3 + 16));
    v4 = *(_QWORD *)(v3 + 240);
    v5 = *(_QWORD *)(v3 + 216);
    v9[0] = 0;
    v9[1] = v4;
    v9[2] = v5;
    v10[0] = 0;
    phase = get_phase(v9, v2, v10);
    if (phase)
      v7 = v2 - phase + v10[0];
    else
      v7 = v2;
    *(_QWORD *)(v3 + 224) = v7;
    mk_timer_arm_leeway();
    *(_BYTE *)(v3 + 200) = 0;
    v8 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(v3 + 192);
    if (v8)
      v8(v3, 0, *(_QWORD *)(v3 + 224), *(_QWORD *)(v3 + 216), *(_QWORD *)(v3 + 184));
    return (_QWORD *)pthread_mutex_unlock((pthread_mutex_t *)(v3 + 16));
  }
  return this;
}

CA::Display::DisplayLinkItem *CA::Display::DisplayLinkItem::DisplayLinkItem(CA::Display::DisplayLinkItem *this, id *a2, const void *a3, objc_selector *a4)
{
  id v8;
  CFTypeRef v9;
  _BOOL4 v10;
  float v11;
  float v12;
  float v13;

  *(_QWORD *)this = &off_1E1599940;
  *((_DWORD *)this + 2) = 0;
  v8 = a2[10];
  *((_QWORD *)this + 2) = a2;
  if (a3)
    v9 = CFRetain(a3);
  else
    v9 = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 3) = v9;
  *((_QWORD *)this + 4) = a4;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 114) = 0u;
  *((_BYTE *)this + 316) &= 0xE8u;
  *((_DWORD *)this + 78) = 0;
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 136), 0);
  pthread_cond_init((pthread_cond_t *)((char *)this + 200), 0);
  *((_BYTE *)this + 316) &= ~8u;
  v10 = CADeviceDisableMinimumFrameDuration();
  v11 = 60.0;
  if (v10)
    v11 = 0.0;
  v12 = v11;
  v13 = v11;
  CA::Display::DisplayLinkItem::set_preferred_fps_range((CA::Display::DisplayLink **)this, *(CAFrameRateRange *)&v11, 1, 0);
  return this;
}

void sub_1845893F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  CA::Display::DisplayLink *v3;

  v3 = *(CA::Display::DisplayLink **)(v1 + 264);
  if (v3)
    CA::Display::DisplayLink::unref(v3);
  _Unwind_Resume(exception_object);
}

BOOL CADeviceDisableMinimumFrameDuration()
{
  if ((dyld_program_sdk_at_least() & 1) != 0)
    return 1;
  if (CADeviceDisableMinimumFrameDuration::once != -1)
    dispatch_once(&CADeviceDisableMinimumFrameDuration::once, &__block_literal_global_99);
  return CADeviceDisableMinimumFrameDuration::disabled != 0;
}

os_log_t ___ZN2CA11Transaction25in_memory_signpost_handleEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreanimation", "Transaction");
  CA::Transaction::in_memory_signpost_handle(void)::handle = (uint64_t)result;
  return result;
}

uint64_t CA::OGL::MetalContext::create_pipeline_state(uint64_t a1, CA::OGL::MetalContext::Pipeline::Spec *this, _DWORD *a3, unsigned __int8 *a4)
{
  void *v8;
  uint64_t v9;
  NSString *v10;
  uint64_t pipeline_state;
  uint64_t v12;
  id pipeline_descriptor;
  char v14;
  unsigned __int8 v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  os_signpost_id_t v19;
  os_signpost_id_t v20;
  NSObject *v21;
  NSObject *v22;
  const char *v23;
  _BOOL4 v24;
  NSObject *v25;
  NSObject *v27;
  const char *v28;
  uint8_t *v29;
  id v30;
  uint8_t v31[4];
  const char *v32;
  __int16 v33;
  uint8_t *v34;
  uint8_t buf[4];
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v8 = (void *)MEMORY[0x1E0CB3940];
  v9 = CA::OGL::MetalContext::Pipeline::Spec::encode_segment(this);
  v10 = (NSString *)objc_msgSend(v8, "stringWithFormat:", CFSTR("%@_%@"), v9, CA::OGL::MetalContext::FragmentShader::Spec::name(this));
  if ((*(_BYTE *)(a1 + 418) & 0x10) == 0)
  {
    pipeline_state = CA::OGL::MetalContext::load_pipeline_state((CA::OGL::MetalContext *)a1, v10);
    if (pipeline_state)
    {
      v12 = pipeline_state;
      *a3 |= 4u;
      return v12;
    }
    if ((*(_WORD *)((_BYTE *)this + 17) & 4) != 0)
      return 0;
  }
  pipeline_descriptor = CA::OGL::MetalContext::get_pipeline_descriptor(a1, (uint64_t)this, 0, a4);
  v14 = 1;
  if (a4)
  {
LABEL_6:
    v15 = atomic_load(a4);
    if ((v15 & 1) == 0)
      goto LABEL_7;
    return 0;
  }
  while (1)
  {
LABEL_7:
    v30 = 0;
    if (byte_1ECDC6A6C || (*(_BYTE *)(a1 + 418) & 0x10) != 0)
    {
      if (x_log_hook_p())
      {
        v28 = -[NSString UTF8String](v10, "UTF8String");
        v29 = (uint8_t *)objc_msgSend((id)objc_msgSend(pipeline_descriptor, "description"), "UTF8String");
        x_log_();
      }
      else
      {
        v16 = x_log_category_ogl_metal;
        if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_DEFAULT))
        {
          v17 = -[NSString UTF8String](v10, "UTF8String");
          v18 = objc_msgSend((id)objc_msgSend(pipeline_descriptor, "description"), "UTF8String");
          *(_DWORD *)buf = 136315394;
          v36 = v17;
          v37 = 2080;
          v38 = v18;
          _os_log_impl(&dword_184457000, v16, OS_LOG_TYPE_DEFAULT, "Building render pipeline %s with descriptor %s\n", buf, 0x16u);
        }
      }
    }
    v19 = os_signpost_id_generate((os_log_t)x_log_category_ogl_metal);
    if (v19 - 1 > 0xFFFFFFFFFFFFFFFDLL)
    {
      v12 = objc_msgSend(*(id *)(a1 + 2904), "newRenderPipelineStateWithDescriptor:error:", pipeline_descriptor, &v30);
    }
    else
    {
      v20 = v19;
      v21 = x_log_category_ogl_metal;
      if (os_signpost_enabled((os_log_t)x_log_category_ogl_metal))
      {
        *(_DWORD *)buf = 138543618;
        v36 = (uint64_t)v10;
        v37 = 1026;
        LODWORD(v38) = 0;
        _os_signpost_emit_with_name_impl(&dword_184457000, v21, OS_SIGNPOST_INTERVAL_BEGIN, v20, "CompileShader", "pipeline=%{public, name=pipeline}@ precompiled=%{public, name=precompiled}u", buf, 0x12u);
      }
      v12 = objc_msgSend(*(id *)(a1 + 2904), "newRenderPipelineStateWithDescriptor:error:", pipeline_descriptor, &v30, v28, v29);
      v22 = x_log_category_ogl_metal;
      if (os_signpost_enabled((os_log_t)x_log_category_ogl_metal))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_184457000, v22, OS_SIGNPOST_INTERVAL_END, v20, "CompileShader", (const char *)&unk_18479AB47, buf, 2u);
      }
    }
    *a3 |= 0x10u;
    if (v12)
      return v12;
    bzero(buf, 0x800uLL);
    v23 = -[NSString UTF8String](v10, "UTF8String");
    snprintf((char *)buf, 0x800uLL, "spec=%s\n%s", v23, (const char *)objc_msgSend((id)objc_msgSend(v30, "localizedDescription"), "UTF8String"));
    v39 = 0;
    v24 = x_log_hook_p();
    if ((v14 & 1) == 0)
    {
      if (v24)
      {
        x_log_();
      }
      else
      {
        v27 = x_log_category_ogl_metal;
        if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v31 = 136315394;
          v32 = "Metal failed to build render pipeline";
          v33 = 2080;
          v34 = buf;
          _os_log_impl(&dword_184457000, v27, OS_LOG_TYPE_ERROR, "%s: %s\n", v31, 0x16u);
        }
      }
      strlen((const char *)buf);
      abort_with_payload();
    }
    if (v24)
    {
      v29 = buf;
      v28 = "Metal failed to build render pipeline";
      x_log_();
    }
    else
    {
      v25 = x_log_category_ogl_metal;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)v31 = 136315394;
        v32 = "Metal failed to build render pipeline";
        v33 = 2080;
        v34 = buf;
        _os_log_impl(&dword_184457000, v25, OS_LOG_TYPE_FAULT, "%s: %s\n", v31, 0x16u);
      }
    }
    v14 = 0;
    *a3 |= 0x40u;
    if (a4)
      goto LABEL_6;
  }
}

uint64_t CA::OGL::MetalContext::load_pipeline_state(CA::OGL::MetalContext *this, NSString *a2)
{
  void *v4;
  int v5;
  uint64_t v6;
  id pipeline_descriptor;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  NSObject *v12;
  id v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  char __str[4];
  NSString *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (byte_1ECDC6AA8 || (*((_BYTE *)this + 418) & 0x20) != 0 || !*((_QWORD *)this + 412))
    return 0;
  if (CA::OGL::MetalContext::get_offline_compilation_index(void)::index_once[0] != -1)
    dispatch_once(CA::OGL::MetalContext::get_offline_compilation_index(void)::index_once, &__block_literal_global_2276);
  v4 = (void *)objc_msgSend((id)CA::OGL::MetalContext::get_offline_compilation_index(void)::index, "objectForKey:", a2);
  if (!v4)
    return 0;
  v5 = objc_msgSend(v4, "intValue");
  if (LOBYTE((&CA::OGL::MetalContext::offline_compilation_manifest)[5 * v5 + 1]))
  {
    if (!objc_msgSend(*((id *)this + 363), "supportsFamily:", (&CA::OGL::MetalContext::offline_compilation_manifest)[5 * v5 + 2]))return 0;
  }
  if (LOBYTE((&CA::OGL::MetalContext::offline_compilation_manifest)[5 * v5 + 3])
    && (objc_msgSend(*((id *)this + 363), "supportsFamily:", (&CA::OGL::MetalContext::offline_compilation_manifest)[5 * v5 + 4]) & 1) != 0)
  {
    return 0;
  }
  v6 = mach_continuous_time();
  v27 = 0u;
  v28 = 0u;
  CA::OGL::MetalContext::Pipeline::Spec::decode_name((CA::OGL::MetalContext::Pipeline::Spec *)&v27, (char *)-[NSString UTF8String](a2, "UTF8String"));
  if ((BYTE7(v28) & 1) != 0)
    return 0;
  v14 = 0;
  pipeline_descriptor = CA::OGL::MetalContext::get_pipeline_descriptor((uint64_t)this, (uint64_t)&v27, 1, 0);
  v26 = *((_QWORD *)this + 412);
  objc_msgSend(pipeline_descriptor, "setBinaryArchives:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v26, 1));
  v8 = objc_msgSend(*((id *)this + 363), "newRenderPipelineStateWithDescriptor:options:reflection:error:", pipeline_descriptor, 4, 0, &v14);
  if (!v8)
  {
    bzero(__str, 0x7FFuLL);
    v10 = -[NSString UTF8String](a2, "UTF8String");
    v11 = (const char *)objc_msgSend(CFSTR("22A337"), "UTF8String");
    snprintf(__str, 0x800uLL, "pipeline=%s sdk=%s\n%s", v10, v11, (const char *)objc_msgSend((id)objc_msgSend(v14, "localizedDescription"), "UTF8String"));
    v25 = 0;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v12 = x_log_category_ogl_metal;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315394;
        v16 = "Metal failed to load render pipeline";
        v17 = 2080;
        v18 = __str;
        _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_FAULT, "%s: %s\n", buf, 0x16u);
      }
    }
    return 0;
  }
  v9 = v8;
  if (os_signpost_enabled((os_log_t)x_log_category_ogl_metal))
  {
    *(_DWORD *)__str = 138543874;
    v20 = a2;
    v21 = 1026;
    v22 = 1;
    v23 = 2050;
    v24 = v6;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  return v9;
}

id CA::OGL::MetalContext::get_pipeline_descriptor(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *a4)
{
  id v8;
  void *v9;
  uint64_t v10;
  id *fragment_shader;
  malloc_zone_t *malloc_zone;
  pthread_mutex_t *v13;
  unint64_t v14;
  int8x8_t v15;
  uint8x8_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *i;
  unint64_t v20;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  void **v28;
  char *v29;
  unint64_t v30;
  float v33;
  float v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  int8x8_t prime;
  void *v39;
  void *v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint8x8_t v44;
  unint64_t v45;
  uint8x8_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  malloc_zone_t *v54;
  id *v55;
  unsigned __int8 v56;
  _DWORD *v57;
  id *vertex_shader;
  malloc_zone_t *v59;
  unint64_t v60;
  int8x8_t v61;
  uint8x8_t v62;
  unint64_t v63;
  uint64_t **v64;
  uint64_t *j;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint8x8_t v70;
  unint64_t v71;
  void **v72;
  void *k;
  unint64_t v74;
  float v75;
  float v76;
  _BOOL8 v77;
  unint64_t v78;
  unint64_t v79;
  int8x8_t v80;
  void *v81;
  void *v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint8x8_t v86;
  unint64_t v87;
  uint8x8_t v88;
  uint64_t v89;
  void *v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  malloc_zone_t *v97;
  id *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  _QWORD *v103;
  void *v104;
  void *v105;
  unint64_t v106;
  uint64_t v107;
  unsigned __int16 *v108;
  unsigned int v109;
  void *v110;
  void *v111;
  uint64_t v112;
  MTLPixelFormat v113;
  void *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  __int16 v118;
  void *v119;
  int v120;
  unint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  void *v128;
  void *v129;
  int v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v137;
  void *v138;
  void *v139;
  void *v140;

  v8 = (id)objc_opt_new();
  v9 = (void *)MEMORY[0x1E0CB3940];
  v10 = CA::OGL::MetalContext::Pipeline::Spec::encode_segment((CA::OGL::MetalContext::Pipeline::Spec *)a2);
  objc_msgSend(v8, "setLabel:", objc_msgSend(CFSTR("com.apple.coreanimation."), "stringByAppendingString:", objc_msgSend(v9, "stringWithFormat:", CFSTR("%@_%@"), v10, CA::OGL::MetalContext::FragmentShader::Spec::name((CA::OGL::MetalContext::FragmentShader::Spec *)a2))));
  if (a3)
  {
    fragment_shader = (id *)CA::OGL::MetalContext::create_fragment_shader((void **)a1, (const CA::OGL::MetalContext::FragmentShader::Spec *)a2, 1);
    objc_msgSend(v8, "setFragmentFunction:", *fragment_shader);

    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, fragment_shader);
    if (a4)
      goto LABEL_114;
    goto LABEL_115;
  }
  v13 = (pthread_mutex_t *)(a1 + 1888);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1888));
  v14 = CA::OGL::MetalContext::StructHasher<CA::OGL::MetalContext::FragmentShader::Spec>::operator()((unsigned __int8 *)a2);
  v15 = *(int8x8_t *)(a1 + 1856);
  if (v15)
  {
    v16 = (uint8x8_t)vcnt_s8(v15);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      v17 = v14;
      if (v14 >= *(_QWORD *)&v15)
        v17 = v14 % *(_QWORD *)&v15;
    }
    else
    {
      v17 = (*(_QWORD *)&v15 - 1) & v14;
    }
    v18 = *(_QWORD **)(*(_QWORD *)(a1 + 1848) + 8 * v17);
    if (v18)
    {
      for (i = (_QWORD *)*v18; i; i = (_QWORD *)*i)
      {
        v20 = i[1];
        if (v20 == v14)
        {
          if (i[2] == *(_QWORD *)a2
            && i[3] == *(_QWORD *)(a2 + 8)
            && *(_QWORD *)((char *)i + 27) == *(_QWORD *)(a2 + 11))
          {
            v55 = (id *)i[5];
            goto LABEL_113;
          }
        }
        else
        {
          if (v16.u32[0] > 1uLL)
          {
            if (v20 >= *(_QWORD *)&v15)
              v20 %= *(_QWORD *)&v15;
          }
          else
          {
            v20 &= *(_QWORD *)&v15 - 1;
          }
          if (v20 != v17)
            break;
        }
      }
    }
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1888));
  v55 = (id *)CA::OGL::MetalContext::create_fragment_shader((void **)a1, (const CA::OGL::MetalContext::FragmentShader::Spec *)a2, 0);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1888));
  v23 = CA::OGL::MetalContext::StructHasher<CA::OGL::MetalContext::FragmentShader::Spec>::operator()((unsigned __int8 *)a2);
  v24 = v23;
  v25 = *(_QWORD *)(a1 + 1856);
  if (!v25)
  {
    v27 = 0;
    goto LABEL_51;
  }
  v26 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    v27 = v23;
    if (v23 >= v25)
      v27 = v23 % v25;
  }
  else
  {
    v27 = (v25 - 1) & v23;
  }
  v28 = *(void ***)(*(_QWORD *)(a1 + 1848) + 8 * v27);
  if (!v28 || (v29 = (char *)*v28) == 0)
  {
LABEL_51:
    v29 = (char *)operator new(0x30uLL);
    *(_QWORD *)v29 = 0;
    *((_QWORD *)v29 + 1) = v24;
    *((_OWORD *)v29 + 1) = *(_OWORD *)a2;
    *(_DWORD *)(v29 + 31) = *(_DWORD *)(a2 + 15);
    *((_QWORD *)v29 + 5) = 0;
    v33 = (float)(unint64_t)(*(_QWORD *)(a1 + 1872) + 1);
    v34 = *(float *)(a1 + 1880);
    if (v25 && (float)(v34 * (float)v25) >= v33)
    {
LABEL_97:
      v51 = *(_QWORD *)(a1 + 1848);
      v52 = *(_QWORD **)(v51 + 8 * v27);
      if (v52)
      {
        *(_QWORD *)v29 = *v52;
        v13 = (pthread_mutex_t *)(a1 + 1888);
      }
      else
      {
        *(_QWORD *)v29 = *(_QWORD *)(a1 + 1864);
        *(_QWORD *)(a1 + 1864) = v29;
        *(_QWORD *)(v51 + 8 * v27) = a1 + 1864;
        v13 = (pthread_mutex_t *)(a1 + 1888);
        if (!*(_QWORD *)v29)
        {
LABEL_106:
          ++*(_QWORD *)(a1 + 1872);
          goto LABEL_107;
        }
        v53 = *(_QWORD *)(*(_QWORD *)v29 + 8);
        if ((v25 & (v25 - 1)) != 0)
        {
          if (v53 >= v25)
            v53 %= v25;
        }
        else
        {
          v53 &= v25 - 1;
        }
        v52 = (_QWORD *)(*(_QWORD *)(a1 + 1848) + 8 * v53);
      }
      *v52 = v29;
      goto LABEL_106;
    }
    v35 = 1;
    if (v25 >= 3)
      v35 = (v25 & (v25 - 1)) != 0;
    v36 = v35 | (2 * v25);
    v37 = vcvtps_u32_f32(v33 / v34);
    if (v36 <= v37)
      prime = (int8x8_t)v37;
    else
      prime = (int8x8_t)v36;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v25 = *(_QWORD *)(a1 + 1856);
    }
    if (*(_QWORD *)&prime > v25)
      goto LABEL_63;
    if (*(_QWORD *)&prime < v25)
    {
      v45 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 1872) / *(float *)(a1 + 1880));
      if (v25 < 3 || (v46 = (uint8x8_t)vcnt_s8((int8x8_t)v25), v46.i16[0] = vaddlv_u8(v46), v46.u32[0] > 1uLL))
      {
        v45 = std::__next_prime(v45);
      }
      else
      {
        v47 = 1 << -(char)__clz(v45 - 1);
        if (v45 >= 2)
          v45 = v47;
      }
      if (*(_QWORD *)&prime <= v45)
        prime = (int8x8_t)v45;
      if (*(_QWORD *)&prime >= v25)
      {
        v25 = *(_QWORD *)(a1 + 1856);
      }
      else
      {
        if (prime)
        {
LABEL_63:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v39 = operator new(8 * *(_QWORD *)&prime);
          v40 = *(void **)(a1 + 1848);
          *(_QWORD *)(a1 + 1848) = v39;
          if (v40)
            operator delete(v40);
          v41 = 0;
          *(int8x8_t *)(a1 + 1856) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 1848) + 8 * v41++) = 0;
          while (*(_QWORD *)&prime != v41);
          v42 = *(_QWORD **)(a1 + 1864);
          if (v42)
          {
            v43 = v42[1];
            v44 = (uint8x8_t)vcnt_s8(prime);
            v44.i16[0] = vaddlv_u8(v44);
            if (v44.u32[0] > 1uLL)
            {
              if (v43 >= *(_QWORD *)&prime)
                v43 %= *(_QWORD *)&prime;
            }
            else
            {
              v43 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 1848) + 8 * v43) = a1 + 1864;
            v48 = (_QWORD *)*v42;
            if (*v42)
            {
              do
              {
                v49 = v48[1];
                if (v44.u32[0] > 1uLL)
                {
                  if (v49 >= *(_QWORD *)&prime)
                    v49 %= *(_QWORD *)&prime;
                }
                else
                {
                  v49 &= *(_QWORD *)&prime - 1;
                }
                if (v49 != v43)
                {
                  v50 = *(_QWORD *)(a1 + 1848);
                  if (!*(_QWORD *)(v50 + 8 * v49))
                  {
                    *(_QWORD *)(v50 + 8 * v49) = v42;
                    goto LABEL_88;
                  }
                  *v42 = *v48;
                  *v48 = **(_QWORD **)(*(_QWORD *)(a1 + 1848) + 8 * v49);
                  **(_QWORD **)(*(_QWORD *)(a1 + 1848) + 8 * v49) = v48;
                  v48 = v42;
                }
                v49 = v43;
LABEL_88:
                v42 = v48;
                v48 = (_QWORD *)*v48;
                v43 = v49;
              }
              while (v48);
            }
          }
          v25 = (unint64_t)prime;
          goto LABEL_92;
        }
        v90 = *(void **)(a1 + 1848);
        *(_QWORD *)(a1 + 1848) = 0;
        if (v90)
          operator delete(v90);
        v25 = 0;
        *(_QWORD *)(a1 + 1856) = 0;
      }
    }
LABEL_92:
    if ((v25 & (v25 - 1)) != 0)
    {
      if (v24 >= v25)
        v27 = v24 % v25;
      else
        v27 = v24;
    }
    else
    {
      v27 = (v25 - 1) & v24;
    }
    goto LABEL_97;
  }
  while (1)
  {
    v30 = *((_QWORD *)v29 + 1);
    if (v30 == v23)
      break;
    if (v26.u32[0] > 1uLL)
    {
      if (v30 >= v25)
        v30 %= v25;
    }
    else
    {
      v30 &= v25 - 1;
    }
    if (v30 != v27)
      goto LABEL_51;
LABEL_50:
    v29 = *(char **)v29;
    if (!v29)
      goto LABEL_51;
  }
  if (*((_QWORD *)v29 + 2) != *(_QWORD *)a2
    || *((_QWORD *)v29 + 3) != *(_QWORD *)(a2 + 8)
    || *(_QWORD *)(v29 + 27) != *(_QWORD *)(a2 + 11))
  {
    goto LABEL_50;
  }
  v13 = (pthread_mutex_t *)(a1 + 1888);
LABEL_107:
  if (*((_QWORD *)v29 + 5))
  {
    if (v55)
    {

      v54 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v54, v55);
    }
    v55 = (id *)*((_QWORD *)v29 + 5);
  }
  else
  {
    *((_QWORD *)v29 + 5) = v55;
  }
LABEL_113:
  pthread_mutex_unlock(v13);
  objc_msgSend(v8, "setFragmentFunction:", *v55);
  if (a4)
  {
LABEL_114:
    v56 = atomic_load(a4);
    if ((v56 & 1) == 0)
      goto LABEL_115;
    return 0;
  }
LABEL_115:
  v57 = (_DWORD *)(a2 + 19);
  if (a3)
  {
    vertex_shader = (id *)CA::OGL::MetalContext::create_vertex_shader((void **)a1, (const CA::OGL::MetalContext::VertexShader::Spec *)(a2 + 19), 1);
    objc_msgSend(v8, "setVertexFunction:", *vertex_shader);

    v59 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v59, vertex_shader);
    goto LABEL_223;
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1992));
  v60 = CA::OGL::MetalContext::StructHasher<CA::OGL::MetalContext::VertexShader::Spec>::operator()((unsigned int *)(a2 + 19));
  v61 = *(int8x8_t *)(a1 + 1960);
  if (v61)
  {
    v62 = (uint8x8_t)vcnt_s8(v61);
    v62.i16[0] = vaddlv_u8(v62);
    if (v62.u32[0] > 1uLL)
    {
      v63 = v60;
      if (v60 >= *(_QWORD *)&v61)
        v63 = v60 % *(_QWORD *)&v61;
    }
    else
    {
      v63 = (*(_QWORD *)&v61 - 1) & v60;
    }
    v64 = *(uint64_t ***)(*(_QWORD *)(a1 + 1952) + 8 * v63);
    if (v64)
    {
      for (j = *v64; j; j = (uint64_t *)*j)
      {
        v66 = j[1];
        if (v66 == v60)
        {
          if (*((_DWORD *)j + 4) == *v57)
          {
            v98 = (id *)j[3];
            goto LABEL_222;
          }
        }
        else
        {
          if (v62.u32[0] > 1uLL)
          {
            if (v66 >= *(_QWORD *)&v61)
              v66 %= *(_QWORD *)&v61;
          }
          else
          {
            v66 &= *(_QWORD *)&v61 - 1;
          }
          if (v66 != v63)
            break;
        }
      }
    }
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1992));
  v98 = (id *)CA::OGL::MetalContext::create_vertex_shader((void **)a1, (const CA::OGL::MetalContext::VertexShader::Spec *)(a2 + 19), 0);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1992));
  v67 = CA::OGL::MetalContext::StructHasher<CA::OGL::MetalContext::VertexShader::Spec>::operator()((unsigned int *)(a2 + 19));
  v68 = v67;
  v69 = *(_QWORD *)(a1 + 1960);
  if (v69)
  {
    v70 = (uint8x8_t)vcnt_s8((int8x8_t)v69);
    v70.i16[0] = vaddlv_u8(v70);
    if (v70.u32[0] > 1uLL)
    {
      v71 = v67;
      if (v67 >= v69)
        v71 = v67 % v69;
    }
    else
    {
      v71 = (v69 - 1) & v67;
    }
    v72 = *(void ***)(*(_QWORD *)(a1 + 1952) + 8 * v71);
    if (v72)
    {
      for (k = *v72; k; k = *(void **)k)
      {
        v74 = *((_QWORD *)k + 1);
        if (v74 == v67)
        {
          if (*((_DWORD *)k + 4) == *v57)
            goto LABEL_216;
        }
        else
        {
          if (v70.u32[0] > 1uLL)
          {
            if (v74 >= v69)
              v74 %= v69;
          }
          else
          {
            v74 &= v69 - 1;
          }
          if (v74 != v71)
            break;
        }
      }
    }
  }
  else
  {
    v71 = 0;
  }
  k = operator new(0x20uLL);
  *(_QWORD *)k = 0;
  *((_QWORD *)k + 1) = v68;
  *((_DWORD *)k + 4) = *v57;
  *((_QWORD *)k + 3) = 0;
  v75 = (float)(unint64_t)(*(_QWORD *)(a1 + 1976) + 1);
  v76 = *(float *)(a1 + 1984);
  if (!v69 || (float)(v76 * (float)v69) < v75)
  {
    v77 = 1;
    if (v69 >= 3)
      v77 = (v69 & (v69 - 1)) != 0;
    v78 = v77 | (2 * v69);
    v79 = vcvtps_u32_f32(v75 / v76);
    if (v78 <= v79)
      v80 = (int8x8_t)v79;
    else
      v80 = (int8x8_t)v78;
    if (*(_QWORD *)&v80 == 1)
    {
      v80 = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&v80 & (*(_QWORD *)&v80 - 1)) != 0)
    {
      v80 = (int8x8_t)std::__next_prime(*(_QWORD *)&v80);
      v69 = *(_QWORD *)(a1 + 1960);
    }
    if (*(_QWORD *)&v80 <= v69)
    {
      if (*(_QWORD *)&v80 < v69)
      {
        v87 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 1976) / *(float *)(a1 + 1984));
        if (v69 < 3 || (v88 = (uint8x8_t)vcnt_s8((int8x8_t)v69), v88.i16[0] = vaddlv_u8(v88), v88.u32[0] > 1uLL))
        {
          v87 = std::__next_prime(v87);
        }
        else
        {
          v89 = 1 << -(char)__clz(v87 - 1);
          if (v87 >= 2)
            v87 = v89;
        }
        if (*(_QWORD *)&v80 <= v87)
          v80 = (int8x8_t)v87;
        if (*(_QWORD *)&v80 >= v69)
        {
          v69 = *(_QWORD *)(a1 + 1960);
        }
        else
        {
          if (v80)
            goto LABEL_163;
          v140 = *(void **)(a1 + 1952);
          *(_QWORD *)(a1 + 1952) = 0;
          if (v140)
            operator delete(v140);
          v69 = 0;
          *(_QWORD *)(a1 + 1960) = 0;
        }
      }
    }
    else
    {
LABEL_163:
      if (*(_QWORD *)&v80 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v81 = operator new(8 * *(_QWORD *)&v80);
      v82 = *(void **)(a1 + 1952);
      *(_QWORD *)(a1 + 1952) = v81;
      if (v82)
        operator delete(v82);
      v83 = 0;
      *(int8x8_t *)(a1 + 1960) = v80;
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 1952) + 8 * v83++) = 0;
      while (*(_QWORD *)&v80 != v83);
      v84 = *(_QWORD **)(a1 + 1968);
      if (v84)
      {
        v85 = v84[1];
        v86 = (uint8x8_t)vcnt_s8(v80);
        v86.i16[0] = vaddlv_u8(v86);
        if (v86.u32[0] > 1uLL)
        {
          if (v85 >= *(_QWORD *)&v80)
            v85 %= *(_QWORD *)&v80;
        }
        else
        {
          v85 &= *(_QWORD *)&v80 - 1;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 1952) + 8 * v85) = a1 + 1968;
        v91 = (_QWORD *)*v84;
        if (*v84)
        {
          do
          {
            v92 = v91[1];
            if (v86.u32[0] > 1uLL)
            {
              if (v92 >= *(_QWORD *)&v80)
                v92 %= *(_QWORD *)&v80;
            }
            else
            {
              v92 &= *(_QWORD *)&v80 - 1;
            }
            if (v92 != v85)
            {
              v93 = *(_QWORD *)(a1 + 1952);
              if (!*(_QWORD *)(v93 + 8 * v92))
              {
                *(_QWORD *)(v93 + 8 * v92) = v84;
                goto LABEL_197;
              }
              *v84 = *v91;
              *v91 = **(_QWORD **)(*(_QWORD *)(a1 + 1952) + 8 * v92);
              **(_QWORD **)(*(_QWORD *)(a1 + 1952) + 8 * v92) = v91;
              v91 = v84;
            }
            v92 = v85;
LABEL_197:
            v84 = v91;
            v91 = (_QWORD *)*v91;
            v85 = v92;
          }
          while (v91);
        }
      }
      v69 = (unint64_t)v80;
    }
    if ((v69 & (v69 - 1)) != 0)
    {
      if (v68 >= v69)
        v71 = v68 % v69;
      else
        v71 = v68;
    }
    else
    {
      v71 = (v69 - 1) & v68;
    }
  }
  v94 = *(_QWORD *)(a1 + 1952);
  v95 = *(_QWORD **)(v94 + 8 * v71);
  if (v95)
  {
    *(_QWORD *)k = *v95;
LABEL_214:
    *v95 = k;
    goto LABEL_215;
  }
  *(_QWORD *)k = *(_QWORD *)(a1 + 1968);
  *(_QWORD *)(a1 + 1968) = k;
  *(_QWORD *)(v94 + 8 * v71) = a1 + 1968;
  if (*(_QWORD *)k)
  {
    v96 = *(_QWORD *)(*(_QWORD *)k + 8);
    if ((v69 & (v69 - 1)) != 0)
    {
      if (v96 >= v69)
        v96 %= v69;
    }
    else
    {
      v96 &= v69 - 1;
    }
    v95 = (_QWORD *)(*(_QWORD *)(a1 + 1952) + 8 * v96);
    goto LABEL_214;
  }
LABEL_215:
  ++*(_QWORD *)(a1 + 1976);
LABEL_216:
  if (*((_QWORD *)k + 3))
  {
    if (v98)
    {

      v97 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v97, v98);
    }
    v98 = (id *)*((_QWORD *)k + 3);
  }
  else
  {
    *((_QWORD *)k + 3) = v98;
  }
LABEL_222:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1992));
  objc_msgSend(v8, "setVertexFunction:", *v98);
LABEL_223:
  v99 = *(unsigned __int16 *)(a2 + 21);
  if ((v99 & 0x80) == 0)
  {
    v100 = (v99 >> 5) & 3;
    v101 = a1 + 8 * v100;
    v102 = *(void **)(v101 + 2112);
    if (!v102)
    {
      v103 = (_QWORD *)(v101 + 2112);
      v102 = (void *)objc_opt_new();
      v104 = (void *)objc_msgSend(v102, "attributes");
      v105 = (void *)objc_msgSend((id)objc_msgSend(v102, "layouts"), "objectAtIndexedSubscript:", 1);
      v106 = CA::OGL::MetalContext::vertex_layout_info[20 * v100];
      objc_msgSend(v105, "setStride:", v106 & 0x3F);
      objc_msgSend(v105, "setStepFunction:", 1);
      v107 = (v106 >> 6) & 7;
      if ((_DWORD)v107)
      {
        v108 = &CA::OGL::MetalContext::vertex_layout_info[20 * v100 + 4];
        do
        {
          v109 = *v108;
          v108 += 4;
          v110 = (void *)objc_msgSend(v104, "objectAtIndexedSubscript:", v109 & 7);
          objc_msgSend(v110, "setFormat:", v109 >> 3);
          objc_msgSend(v110, "setOffset:", ((unint64_t)v109 >> 8) & 0x3F);
          objc_msgSend(v110, "setBufferIndex:", 1);
          --v107;
        }
        while (v107);
      }
      *v103 = v102;
    }
    objc_msgSend(v8, "setVertexDescriptor:", v102);
  }
  v111 = (void *)objc_msgSend(v8, "colorAttachments");
  if ((*(_BYTE *)(a2 + 16) & 0x60) != 0)
  {
    v112 = 0;
    while (1)
    {
      v114 = (void *)objc_msgSend(v111, "objectAtIndexedSubscript:", v112);
      if (!v112)
      {
        v115 = *(_WORD *)(a2 + 24) & 0x3FF;
        goto LABEL_254;
      }
      if (v112 == 2 && ((*(unsigned __int16 *)(a2 + 24) | (*(unsigned __int8 *)(a2 + 26) << 16)) & 0x20000) != 0)
      {
        v115 = 55;
        goto LABEL_254;
      }
      v116 = *(_WORD *)(a2 + 24) & 0x3FF;
      if (v116 > 0x59)
        break;
      switch(v116)
      {
        case 0xAuLL:
          v117 = 30;
          break;
        case 0x2BuLL:
          v117 = 80;
          break;
        case 0x3FuLL:
          v117 = 113;
          break;
        default:
          goto LABEL_251;
      }
LABEL_253:
      v115 = CA::OGL::non_srgb_pixel_format(v117, v113);
LABEL_254:
      objc_msgSend(v114, "setPixelFormat:", v115);
      v118 = *(_WORD *)(a2 + 17);
      if ((v118 & 4) == 0 && v112 != (v118 & 3))
        objc_msgSend(v114, "setWriteMask:", 0);
      if (++v112 >= (((unint64_t)*(unsigned __int8 *)(a2 + 16) >> 5) & 3))
        goto LABEL_258;
    }
    v117 = 110;
    if (v116 == 90 || v116 == 94)
      goto LABEL_253;
    if (v116 == 554)
    {
      if (CADeviceIsVirtualized::once[0] != -1)
        dispatch_once(CADeviceIsVirtualized::once, &__block_literal_global_204);
      if (CADeviceIsVirtualized::is_virtualized)
        v117 = 115;
      else
        v117 = 550;
      goto LABEL_253;
    }
LABEL_251:
    v117 = *(_WORD *)(a2 + 24) & 0x3FF;
    goto LABEL_253;
  }
LABEL_258:
  if ((*(_WORD *)(a2 + 24) & 0xFC00) != 0xE800)
  {
    v119 = (void *)objc_msgSend(v111, "objectAtIndexedSubscript:", *(_WORD *)(a2 + 17) & 3);
    v120 = *(unsigned __int16 *)(a2 + 24) >> 10;
    objc_msgSend(v119, "setBlendingEnabled:", 1);
    v121 = (unsigned __int16)CA::OGL::MetalContext::blend_function_info[v120];
    objc_msgSend(v119, "setAlphaBlendOperation:", v121 >> 5);
    v122 = *(unsigned __int16 *)(a2 + 24) >> 10;
    if (v122 < 0x18)
    {
      objc_msgSend(v119, "setRgbBlendOperation:", v121 >> 5);
      objc_msgSend(v119, "setSourceRGBBlendFactor:", (v121 >> 8) & 0xF);
      v124 = 5;
      if (v122 >= 0x16)
        v124 = 1;
      if (v122 <= 0x12)
        v125 = (v121 >> 8) & 0xF;
      else
        v125 = v122 < 0x16;
      v126 = v121 >> 12;
      v127 = v121 >> 12;
      if (v122 <= 0x12)
        v123 = v126;
      else
        v123 = v124;
      objc_msgSend(v119, "setSourceAlphaBlendFactor:", v125);
      objc_msgSend(v119, "setDestinationRGBBlendFactor:", v127);
    }
    else
    {
      objc_msgSend(v119, "setWriteMask:", 1);
      objc_msgSend(v119, "setSourceAlphaBlendFactor:", (v121 >> 8) & 0xF);
      v123 = v121 >> 12;
    }
    objc_msgSend(v119, "setDestinationAlphaBlendFactor:", v123);
  }
  if ((*(_WORD *)&CA::OGL::MetalContext::texture_function_info[8 * (*(_BYTE *)(a2 + 14) & 0x7F)
                                                              - (*(_BYTE *)(a2 + 14) & 0x7F)
                                                              + 5] & 0x10) != 0)
  {
    v128 = (void *)objc_msgSend(v8, "colorAttachments");
    v129 = v128;
    v130 = *(_BYTE *)(a2 + 14) & 0x7F;
    if ((v130 - 82) >= 7)
    {
      if ((v130 - 90) >= 2)
      {
        if (v130 == 89)
        {
          v137 = (void *)objc_msgSend(v128, "objectAtIndexedSubscript:", 0);
          objc_msgSend(v137, "setBlendingEnabled:", 0);
          objc_msgSend(v137, "setWriteMask:", 0);
          v138 = (void *)objc_msgSend(v129, "objectAtIndexedSubscript:", 1);
          objc_msgSend(v138, "setBlendingEnabled:", 0);
          objc_msgSend(v138, "setWriteMask:", 0);
          v139 = (void *)objc_msgSend(v129, "objectAtIndexedSubscript:", 2);
          objc_msgSend(v139, "setBlendingEnabled:", 0);
          objc_msgSend(v139, "setWriteMask:", 8);
        }
        return v8;
      }
      v134 = (void *)objc_msgSend(v128, "objectAtIndexedSubscript:", 2);
      objc_msgSend(v134, "setBlendingEnabled:", 0);
      objc_msgSend(v134, "setWriteMask:", 8);
      v135 = (void *)objc_msgSend(v129, "objectAtIndexedSubscript:", (*(_WORD *)(a2 + 17) & 3) == 0);
      objc_msgSend(v135, "setBlendingEnabled:", 0);
      objc_msgSend(v135, "setWriteMask:", 0);
    }
    else
    {
      v131 = (void *)objc_msgSend(v128, "objectAtIndexedSubscript:", 0);
      objc_msgSend(v131, "setWriteMask:", 0);
      objc_msgSend(v131, "setBlendingEnabled:", 0);
      v132 = (void *)objc_msgSend(v129, "objectAtIndexedSubscript:", 1);
      objc_msgSend(v132, "setWriteMask:", 0);
      objc_msgSend(v132, "setBlendingEnabled:", 0);
      v133 = (void *)objc_msgSend((id)objc_msgSend(v8, "colorAttachments"), "objectAtIndexedSubscript:", 2);
      objc_msgSend(v133, "setWriteMask:", 8);
      objc_msgSend(v133, "setBlendingEnabled:", 1);
      objc_msgSend(v133, "setSourceRGBBlendFactor:", 1);
      objc_msgSend(v133, "setDestinationRGBBlendFactor:", 1);
      objc_msgSend(v133, "setRgbBlendOperation:", 4 * ((*(_BYTE *)(a2 + 14) & 0x7Fu) - 82 > 4));
    }
    objc_msgSend(v8, "setVertexDescriptor:", 0);
  }
  return v8;
}

void sub_18458AE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, pthread_mutex_t *a12)
{
  void *v12;
  pthread_mutex_t *v13;

  operator delete(v12);
  pthread_mutex_unlock(v13);
  _Unwind_Resume(a1);
}

unint64_t CA::OGL::MetalContext::StructHasher<CA::OGL::MetalContext::FragmentShader::Spec>::operator()(unsigned __int8 *a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = 0xB492B66FBE98F273;
  v2 = 19;
  v3 = a1;
  do
  {
    v4 = *(_QWORD *)v3;
    v3 += 8;
    v1 = 5 * __ROR8__((461845907 * ((0xCBE41013C0000000 * v4) | ((0x9AE16A3B2F90404FLL * v4) >> 34))) ^ v1, 38)
       + 3864292196;
    v2 -= 8;
  }
  while (v2 > 7);
  v5 = ((unint64_t)a1[18] << 16) | ((unint64_t)a1[17] << 8) | a1[16];
  v6 = __ROR8__((461845907 * ((0xCBE41013C0000000 * v5) | ((0x9AE16A3B2F90404FLL * v5) >> 34))) ^ v1, 38);
  v7 = 0xBF58476D1CE4E5B9 * ((5 * v6 + 3864292196) ^ ((unint64_t)(5 * v6 + 3864292196) >> 30) ^ 0x18);
  return (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
}

uint64_t CA::OGL::MetalContext::Pipeline::Spec::name(CA::OGL::MetalContext::Pipeline::Spec *this)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x1E0CB3940];
  v3 = CA::OGL::MetalContext::Pipeline::Spec::encode_segment(this);
  return objc_msgSend(v2, "stringWithFormat:", CFSTR("%@_%@"), v3, CA::OGL::MetalContext::FragmentShader::Spec::name(this));
}

uint64_t CA::OGL::MetalContext::Pipeline::Spec::encode_segment(CA::OGL::MetalContext::Pipeline::Spec *this)
{
  unsigned __int16 v2;
  unsigned int v3;
  _DWORD *v4;
  _BYTE *v5;
  unsigned int v6;
  char *v7;
  __int16 v8;
  _BYTE *v9;
  int v10;
  int v11;
  char v13;
  _BYTE v14[21];

  *(_QWORD *)&v14[13] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v14[5] = 0;
  *(_QWORD *)v14 = 0;
  v13 = 80;
  v2 = *((_WORD *)this + 12);
  v3 = v2 & 0x3FF;
  if (v3 <= 0x22C && (v4 = (_DWORD *)CA::OGL::MetalContext::MTLPixelFormat_codes[v2 & 0x3FF]) != 0)
  {
    *(_DWORD *)v14 = *v4;
  }
  else
  {
    snprintf(v14, 5uLL, "%04d", v3);
    v2 = *((_WORD *)this + 12);
  }
  if ((v2 & 0xFC00) == 0xE800)
  {
    v5 = &v14[4];
  }
  else
  {
    v14[4] = 66;
    v6 = v2 >> 10;
    if (v6 > 0x3A)
    {
      snprintf(&v14[5], 4uLL, "%03d", v6);
    }
    else
    {
      v7 = CA::OGL::MetalContext::BlendFunction_codes[v6];
      v8 = *(_WORD *)v7;
      v14[7] = v7[2];
      *(_WORD *)&v14[5] = v8;
    }
    v5 = &v14[8];
  }
  *v5 = 0;
  v9 = v5 + 1;
  if ((*((_BYTE *)this + 23) & 1) != 0)
  {
    *(_WORD *)v5 = 25176;
    v9 = v5 + 2;
    v10 = 88;
  }
  else
  {
    v10 = 0;
  }
  v11 = *((unsigned __int16 *)this + 12) | (*((unsigned __int8 *)this + 26) << 16);
  if ((v11 & 0x10000) != 0)
  {
    v10 = 88;
    *v5 = 88;
    *v9++ = 109;
  }
  if ((v11 & 0x20000) != 0)
  {
    *v5 = 88;
    *v9++ = 119;
    v10 = *v5;
  }
  if (v10)
    v5 = v9;
  *v5 = 0;
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", &v13);
}

uint64_t CA::OGL::MetalContext::FragmentShader::Spec::name(CA::OGL::MetalContext::FragmentShader::Spec *this)
{
  void *v2;
  CA::OGL::MetalContext::FragmentShader::Spec::Image *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  __int16 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int16 v11;
  char v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  _BYTE *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const __CFString *v22;
  const __CFString *v23;
  const __CFString *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  _OWORD v29[2];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1E0CB3940];
  memset(v29, 0, sizeof(v29));
  v3 = (CA::OGL::MetalContext::FragmentShader::Spec *)((char *)this + 14);
  v4 = (char *)v29;
  v5 = *((_BYTE *)this + 14) & 0x7F;
  if ((*((_BYTE *)this + 14) & 0x7F) != 0)
  {
    LOBYTE(v29[0]) = 84;
    if (v5 > 0x65)
    {
      snprintf((char *)v29 + 1, 4uLL, "%03d", v5);
    }
    else
    {
      v6 = CA::OGL::MetalContext::TextureFunction_codes[v5];
      v7 = *(_WORD *)v6;
      BYTE3(v29[0]) = v6[2];
      *(_WORD *)((char *)v29 + 1) = v7;
    }
    v4 = (char *)v29 + 4;
  }
  v8 = *((_BYTE *)this + 15) & 0x3F;
  if ((_DWORD)v8 != 58)
  {
    *v4 = 66;
    v9 = v4 + 1;
    if (v8 > 0x3A)
    {
      snprintf(v9, 4uLL, "%03d", v8);
    }
    else
    {
      v10 = CA::OGL::MetalContext::BlendFunction_codes[v8];
      v11 = *(_WORD *)v10;
      v4[3] = v10[2];
      *(_WORD *)v9 = v11;
    }
    v4 += 4;
  }
  v12 = *((_BYTE *)this + 16);
  if ((v12 & 7) != 0)
  {
    *v4 = 68;
    v13 = v4 + 1;
    v14 = *((_BYTE *)this + 16) & 7;
    if (v14 > 4)
      snprintf(v13, 3uLL, "%02d", *((_BYTE *)this + 16) & 7);
    else
      *(_WORD *)v13 = *(_WORD *)CA::OGL::MetalContext::DestinationFunction_codes[v14];
    v4 += 3;
    v12 = *((_BYTE *)this + 16);
  }
  if ((v12 & 0x60) != 0x20)
  {
    *v4 = 65;
    v4[1] = *CA::OGL::MetalContext::int_codes[((unint64_t)*((unsigned __int8 *)this + 16) >> 5) & 3];
    v4 += 2;
  }
  if ((*(_WORD *)((_BYTE *)this + 17) & 3) != 0)
  {
    *v4 = 83;
    v4[1] = *CA::OGL::MetalContext::int_codes[*(_WORD *)((_BYTE *)this + 17) & 3];
    v4 += 2;
  }
  if ((*((_BYTE *)this + 16) & 0x18) != 0)
  {
    *v4 = 76;
    v15 = v4 + 1;
    v16 = ((unint64_t)*((unsigned __int8 *)this + 16) >> 3) & 3;
    if ((_DWORD)v16 == 3)
      snprintf(v15, 3uLL, "%02d", 3);
    else
      *(_WORD *)v15 = *(_WORD *)CA::OGL::MetalContext::VertexLayout_codes[v16];
    v4 += 3;
  }
  *v4 = 0;
  v17 = v4 + 1;
  v18 = *(_WORD *)((char *)this + 17);
  if ((v18 & 4) != 0)
  {
    *(_WORD *)v4 = 26456;
    v17 = v4 + 2;
    v18 = *(_WORD *)((char *)this + 17);
    if ((v18 & 0x10) == 0)
    {
LABEL_27:
      if ((v18 & 0x20) == 0)
        goto LABEL_28;
      goto LABEL_46;
    }
  }
  else if ((v18 & 0x10) == 0)
  {
    goto LABEL_27;
  }
  *v4 = 88;
  *v17++ = 104;
  v18 = *(_WORD *)((char *)this + 17);
  if ((v18 & 0x20) == 0)
  {
LABEL_28:
    if ((v18 & 0x800) == 0)
      goto LABEL_29;
    goto LABEL_47;
  }
LABEL_46:
  *v4 = 88;
  *v17++ = 102;
  v18 = *(_WORD *)((char *)this + 17);
  if ((v18 & 0x800) == 0)
  {
LABEL_29:
    if ((v18 & 0x40) == 0)
      goto LABEL_30;
    goto LABEL_48;
  }
LABEL_47:
  *v4 = 88;
  *v17++ = 99;
  v18 = *(_WORD *)((char *)this + 17);
  if ((v18 & 0x40) == 0)
  {
LABEL_30:
    if ((v18 & 0x80) == 0)
      goto LABEL_31;
    goto LABEL_49;
  }
LABEL_48:
  *v4 = 88;
  *v17++ = 120;
  v18 = *(_WORD *)((char *)this + 17);
  if ((v18 & 0x80) == 0)
  {
LABEL_31:
    if ((v18 & 0x100) == 0)
      goto LABEL_32;
    goto LABEL_50;
  }
LABEL_49:
  *v4 = 88;
  *v17++ = 117;
  v18 = *(_WORD *)((char *)this + 17);
  if ((v18 & 0x100) == 0)
  {
LABEL_32:
    if ((v18 & 0x200) == 0)
      goto LABEL_33;
    goto LABEL_51;
  }
LABEL_50:
  *v4 = 88;
  *v17++ = 112;
  v18 = *(_WORD *)((char *)this + 17);
  if ((v18 & 0x200) == 0)
  {
LABEL_33:
    if ((v18 & 0x400) == 0)
      goto LABEL_34;
    goto LABEL_52;
  }
LABEL_51:
  *v4 = 88;
  *v17++ = 101;
  v18 = *(_WORD *)((char *)this + 17);
  if ((v18 & 0x400) == 0)
  {
LABEL_34:
    if ((v18 & 8) == 0)
      goto LABEL_35;
    goto LABEL_53;
  }
LABEL_52:
  *v4 = 88;
  *v17++ = 115;
  v18 = *(_WORD *)((char *)this + 17);
  if ((v18 & 8) == 0)
  {
LABEL_35:
    if ((v18 & 0x1000) == 0)
      goto LABEL_36;
    goto LABEL_54;
  }
LABEL_53:
  *v4 = 88;
  *v17++ = 110;
  v18 = *(_WORD *)((char *)this + 17);
  if ((v18 & 0x1000) == 0)
  {
LABEL_36:
    if ((v18 & 0x2000) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
LABEL_54:
  *v4 = 88;
  *v17++ = 108;
  if ((*(_WORD *)((_BYTE *)this + 17) & 0x2000) != 0)
  {
LABEL_37:
    *v4 = 88;
    *v17++ = 114;
  }
LABEL_38:
  if (!*v4)
    v17 = v4;
  *v17 = 0;
  v19 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v29);
  v20 = *(_BYTE *)v3 & 0x7F;
  v21 = CA::OGL::tex_image_count[v20];
  if (!CA::OGL::tex_image_count[v20])
  {
    v24 = &stru_1E15B0530;
    v25 = "";
    v22 = &stru_1E15B0530;
    v23 = &stru_1E15B0530;
    v26 = "";
    goto LABEL_60;
  }
  v22 = (const __CFString *)CA::OGL::MetalContext::FragmentShader::Spec::Image::encode_segment(this);
  if (CA::OGL::tex_image_count[*((_BYTE *)this + 14) & 0x7F] < 2u)
  {
    v25 = "";
    v24 = &stru_1E15B0530;
    v23 = &stru_1E15B0530;
    goto LABEL_58;
  }
  v23 = (const __CFString *)CA::OGL::MetalContext::FragmentShader::Spec::Image::encode_segment((CA::OGL::MetalContext::FragmentShader::Spec *)((char *)this + 7));
  if (CA::OGL::tex_image_count[*((_BYTE *)this + 14) & 0x7F] >= 3u)
  {
    v24 = (const __CFString *)CA::OGL::MetalContext::FragmentShader::Spec::Image::encode_segment(v3);
    v25 = "_";
LABEL_58:
    v26 = v25;
    goto LABEL_60;
  }
  v26 = "_";
  v25 = "";
  v24 = &stru_1E15B0530;
LABEL_60:
  if (v21)
    v27 = "_";
  else
    v27 = "";
  return objc_msgSend(v2, "stringWithFormat:", CFSTR("%@%s%@%s%@%s%@"), v19, v27, v22, v26, v23, v25, v24);
}

uint64_t CA::OGL::MetalContext::FragmentShader::Spec::Image::encode_segment(CA::OGL::MetalContext::FragmentShader::Spec::Image *this)
{
  unint64_t v2;
  unsigned int v3;
  char *v4;
  __int16 v5;
  unsigned int v6;
  _BYTE *v7;
  char *v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  char *v12;
  unsigned int v13;
  char *v14;
  unsigned int v15;
  char *v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  unsigned int v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  unsigned int v25;
  char v27;
  _BYTE v28[37];

  *(_QWORD *)&v28[29] = *MEMORY[0x1E0C80C00];
  memset(v28, 0, 29);
  v27 = 73;
  v2 = *(unsigned int *)this | ((unint64_t)(*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) << 32);
  v3 = *(_DWORD *)this & 0x3F;
  if (v3 > 0x29)
  {
    snprintf(v28, 4uLL, "%03d", *(_DWORD *)this & 0x3F);
    v2 = *(unsigned int *)this | ((unint64_t)(*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) << 32);
  }
  else
  {
    v4 = CA::OGL::MetalContext::ImageFunction_codes[v3];
    v5 = *(_WORD *)v4;
    v28[2] = v4[2];
    *(_WORD *)v28 = v5;
  }
  if ((v2 & 0x1C0) != 0)
  {
    v28[3] = 67;
    v6 = (v2 >> 6) & 7;
    if (v6 > 5)
    {
      snprintf(&v28[4], 3uLL, "%02d", (v2 >> 6) & 7);
      v2 = *(unsigned int *)this | ((unint64_t)(*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) << 32);
    }
    else
    {
      *(_WORD *)&v28[4] = *(_WORD *)CA::OGL::MetalContext::CoordFunction_codes[v6];
    }
    v7 = &v28[6];
  }
  else
  {
    v7 = &v28[3];
  }
  if ((v2 & 0x1E00) != 0)
  {
    *v7 = 70;
    v8 = v7 + 1;
    v9 = (v2 >> 9) & 0xF;
    if (v9 > 0xB)
    {
      snprintf(v8, 3uLL, "%02d", (v2 >> 9) & 0xF);
      v2 = *(unsigned int *)this | ((unint64_t)(*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) << 32);
    }
    else
    {
      *(_WORD *)v8 = *(_WORD *)CA::OGL::MetalContext::TextureFilter_codes[v9];
    }
    v7 += 3;
  }
  if (((uint64_t)(__int16)v2 >> 13) != -1)
  {
    *v7 = 77;
    v7[1] = **(char **)((char *)CA::OGL::MetalContext::int_codes
                      + (((8 * ((uint64_t)((unint64_t)*(unsigned int *)this << 48) >> 8)) >> 53) & 0xFFFFFFFFFFFFFFF8));
    v7 += 2;
    v2 = *(unsigned int *)this | ((unint64_t)(*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) << 32);
  }
  if ((v2 & 0x70000) != 0)
  {
    *v7 = 78;
    v10 = v7 + 1;
    v11 = HIWORD(*(_DWORD *)this) & 7;
    if (v11 > 3)
      snprintf(v10, 2uLL, "%01d", HIWORD(*(_DWORD *)this) & 7);
    else
      *v10 = *CA::OGL::MetalContext::int_codes[v11];
    v7 += 2;
    v2 = *(unsigned int *)this | ((unint64_t)(*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) << 32);
  }
  if ((v2 & 0x1FFFFFFF80000) != 0)
  {
    *v7 = 79;
    v12 = v7 + 1;
    v13 = (*(_DWORD *)this >> 19) & 0x1F;
    if (v13 > 0x14)
      snprintf(v12, 3uLL, "%02d", (*(_DWORD *)this >> 19) & 0x1F);
    else
      *(_WORD *)v12 = *(_WORD *)CA::OGL::MetalContext::Opcode_codes[v13];
    v14 = v7 + 3;
    v15 = HIBYTE(*(_DWORD *)this) & 0x1F;
    if (v15 > 0x14)
      snprintf(v14, 3uLL, "%02d", HIBYTE(*(_DWORD *)this) & 0x1F);
    else
      *(_WORD *)v14 = *(_WORD *)CA::OGL::MetalContext::Opcode_codes[v15];
    v16 = v7 + 5;
    if ((((*(unsigned int *)this | ((unint64_t)(*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) << 32)) >> 29) & 0x1F) > 0x14)
      snprintf(v16, 3uLL, "%02d", ((*(unsigned int *)this | ((unint64_t)(*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) << 32)) >> 29) & 0x1F);
    else
      *(_WORD *)v16 = *(_WORD *)CA::OGL::MetalContext::Opcode_codes[((*(unsigned int *)this | ((unint64_t)(*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) << 32)) >> 29) & 0x1F];
    v17 = v7 + 7;
    v18 = *((unsigned __int16 *)this + 2);
    v19 = (v18 >> 2) & 0x1F;
    if (v19 > 0x14)
      snprintf(v17, 3uLL, "%02d", ((*(unsigned int *)this | ((unint64_t)(v18 | (*((unsigned __int8 *)this + 6) << 16)) << 32)) >> 34) & 0x1F);
    else
      *(_WORD *)v17 = *(_WORD *)CA::OGL::MetalContext::Opcode_codes[v19];
    v20 = v7 + 9;
    v21 = *((unsigned __int16 *)this + 2);
    v22 = (v21 >> 7) & 0x1F;
    if (v22 > 0x14)
      snprintf(v20, 3uLL, "%02d", ((*(unsigned int *)this | ((unint64_t)(v21 | (*((unsigned __int8 *)this + 6) << 16)) << 32)) >> 39) & 0x1F);
    else
      *(_WORD *)v20 = *(_WORD *)CA::OGL::MetalContext::Opcode_codes[v22];
    v23 = v7 + 11;
    v24 = *((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16);
    v25 = (v24 >> 12) & 0x1F;
    if (v25 > 0x14)
      snprintf(v23, 3uLL, "%02d", ((*(unsigned int *)this | (unint64_t)(v24 << 32)) >> 44) & 0x1F);
    else
      *(_WORD *)v23 = *(_WORD *)CA::OGL::MetalContext::Opcode_codes[v25];
    v7 += 13;
  }
  *v7 = 0;
  if (((*(unsigned int *)this | ((unint64_t)(*((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16)) << 32)) & 0x2000000000000) != 0)
  {
    *(_WORD *)v7 = 29016;
    v7 += 2;
  }
  *v7 = 0;
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", &v27);
}

unint64_t CA::OGL::MetalContext::StructHasher<CA::OGL::MetalContext::VertexShader::Spec>::operator()(unsigned int *a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = __ROR8__((461845907 * ((0xCBE41013C0000000 * *a1) | ((0x9AE16A3B2F90404FLL * *a1) >> 34))) ^ 0xB492B66FBE98F273, 38);
  v2 = 0xBF58476D1CE4E5B9 * ((5 * v1 + 3864292196) ^ ((unint64_t)(5 * v1 + 3864292196) >> 30) ^ 8);
  return (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
}

CA::Render::Texture *CA::Render::copy_render_value(CA::Render::Texture *cf, CGImage *a2, CGColorSpace *a3)
{
  __CFString *v4;
  CFTypeID v5;
  const CGPath *v6;
  CGColorSpace *v7;
  malloc_zone_t *malloc_zone;
  __IOSurface *v9;
  char v10;
  double v11;
  malloc_zone_t *v12;
  CA::Render::Texture *v13;
  double v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  float64x2_t v18;
  double v19;
  float64x2_t valuePtr;
  double v21[3];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!cf)
    return cf;
  v4 = (__CFString *)cf;
  if (CA::Render::initialize_types(void)::once[0] != -1)
    dispatch_once(CA::Render::initialize_types(void)::once, &__block_literal_global_4814);
  v5 = CFGetTypeID(v4);
  if (v5 == CA::Render::image_type)
    return (CA::Render::Texture *)CA::Render::copy_image((CA::Render *)v4, a2, 0, 0.0, 1.0);
  if (v5 == CA::Render::backing_type)
    return (CA::Render::Texture *)CABackingStoreRetainFrontTexture((uint64_t)v4, a2);
  if (v5 != CA::Render::color_type)
  {
    if (v5 == CA::Render::surface_type)
    {
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      cf = (CA::Render::Texture *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x158uLL, 0x743898A5uLL);
      if (!cf)
        return cf;
      v9 = (__IOSurface *)v4;
      v10 = 35;
    }
    else
    {
      if (v5 == CA::Render::machport_type)
      {
        cf = (CA::Render::Texture *)x_mem_alloc0(0x158uLL);
        if (cf)
          return CA::Render::Surface::Surface(cf, v4);
        return cf;
      }
      if (v5 == CA::Render::caiosurface_type)
        return CAIOSurfaceRetainFrontTexture((CA::Render::Surface *)v4);
      if (v5 != CA::Render::cvpixelbuffer_type)
      {
        if (v5 == CA::Render::queue_type)
          return (CA::Render::Texture *)CAImageQueueCopyRenderValue((uint64_t)v4);
        if (v5 == CA::Render::provider_type)
          return (CA::Render::Texture *)CAImageProviderCopyRenderValue((uint64_t)v4, (uint64_t)v6);
        if (v5 == CA::Render::path_type)
          return (CA::Render::Texture *)CA::Render::Path::new_path((CGPathRef)v4, v6);
        if (v5 == CA::Render::number_type)
        {
          valuePtr.f64[0] = 0.0;
          CFNumberGetValue((CFNumberRef)v4, kCFNumberDoubleType, &valuePtr);
          v14 = valuePtr.f64[0];
        }
        else
        {
          if (v5 != CA::Render::BOOL_type)
          {
            if (v5 == CA::Render::string_type)
              return (CA::Render::Texture *)CA::Render::String::new_string(v4, (const __CFString *)v6);
            if (v5 == CA::Render::array_type)
              return (CA::Render::Texture *)CA::Render::copy_render_array((CA::Render *)v4, a2, v7);
            if (v5 == CA::Render::render_object_type)
            {
              cf = (CA::Render::Texture *)v4->data;
              if (cf)
              {
                v15 = (unsigned int *)((char *)cf + 8);
                do
                  v16 = __ldaxr(v15);
                while (__stlxr(v16 + 1, v15));
                if (!v16)
                {
                  cf = 0;
                  do
                    v17 = __ldaxr(v15);
                  while (__stlxr(v17 - 1, v15));
                }
              }
            }
            else
            {
              if (!-[__CFString conformsToProtocol:](v4, "conformsToProtocol:", &unk_1EDD2A560))
                return 0;
              cf = (CA::Render::Texture *)x_mem_alloc0(0x70uLL);
              if (cf)
                return CA::Render::MetalTexture::MetalTexture(cf, (objc_object *)v4);
            }
            return cf;
          }
          v14 = 0.0;
          if ((__CFString *)*MEMORY[0x1E0C9AE40] != v4)
            v14 = 1.0;
        }
        valuePtr.f64[0] = v14;
        return (CA::Render::Texture *)CA::Render::Vector::new_vector((CA::Render::Vector *)1, &valuePtr, (const double *)v7);
      }
      cf = CVPixelBufferGetIOSurface((CVPixelBufferRef)v4);
      if (!cf)
        return cf;
      v13 = cf;
      cf = (CA::Render::Texture *)x_mem_alloc0(0x158uLL);
      if (!cf)
        return cf;
      v9 = v13;
      v10 = 3;
    }
    return (CA::Render::Texture *)CA::Render::Surface::Surface((uint64_t)cf, v9, -1, v10, 0x8000, 0, 0);
  }
  if (CGColorGetPattern((CGColorRef)v4))
    return 0;
  valuePtr = 0u;
  *(_OWORD *)v21 = 0u;
  CA_CGColorGetRGBComponents((CGColor *)v4, a2, valuePtr.f64);
  v11 = v21[0];
  v18 = valuePtr;
  v19 = v21[1];
  v12 = (malloc_zone_t *)get_malloc_zone();
  cf = (CA::Render::Texture *)malloc_type_zone_malloc(v12, 0x38uLL, 0x8BB15036uLL);
  if (cf)
  {
    *((_DWORD *)cf + 2) = 1;
    ++dword_1ECDC7D08;
    *(_QWORD *)cf = off_1E1598DC0;
    *(_QWORD *)((char *)cf + 12) = 0x400000038;
    *(float64x2_t *)((char *)cf + 24) = vmulq_n_f64(v18, v19);
    *((double *)cf + 5) = v11 * v19;
    *((double *)cf + 6) = v19;
  }
  return cf;
}

uint64_t calcModeFromString(const __CFString *a1)
{
  int v2;

  v2 = CAInternAtom(a1, 0);
  if (v2 <= 177)
  {
    if (v2 == 151)
      return 3;
    if (v2 == 152)
      return 4;
    goto LABEL_11;
  }
  if (v2 != 178)
  {
    if (v2 == 411)
      return 2;
    if (v2 == 350)
      return 1;
LABEL_11:
    NSLog(CFSTR("unknown animation calculation mode: %@"), a1);
  }
  return 0;
}

_DWORD *copyFloatVector(NSArray *a1, BOOL *a2)
{
  NSUInteger v4;
  CA::Render::Vector *v5;
  size_t v6;
  _QWORD *v7;
  _DWORD *v8;
  const double *v9;
  uint64_t v10;
  CA::Render::Vector *v11;
  char v12;
  double *v13;
  double v14;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v4 = -[NSArray count](a1, "count");
  if (v4)
  {
    v5 = (CA::Render::Vector *)v4;
    v6 = 8 * v4;
    if (8 * v4 > 0x1000)
    {
      v7 = malloc_type_malloc(8 * v4, 0xD9C9718AuLL);
    }
    else
    {
      MEMORY[0x1E0C80A78](v4);
      v7 = (_QWORD *)((char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
      bzero(v7, v6);
    }
    objc_msgSend(-[NSArray objectAtIndex:](a1, "objectAtIndex:", 0), "doubleValue");
    *v7 = v10;
    if ((unint64_t)v5 < 2)
    {
      v12 = 1;
      if (a2)
LABEL_11:
        *a2 = v12;
    }
    else
    {
      v11 = 0;
      v12 = 1;
      do
      {
        objc_msgSend(-[NSArray objectAtIndex:](a1, "objectAtIndex:", (char *)v11 + 1), "doubleValue");
        v13 = (double *)&v7[(_QWORD)v11];
        v13[1] = v14;
        v12 &= v14 >= *v13;
        v11 = (CA::Render::Vector *)((char *)v11 + 1);
      }
      while ((CA::Render::Vector *)((char *)v5 - 1) != v11);
      if (a2)
        goto LABEL_11;
    }
    v8 = CA::Render::Vector::new_vector(v5, v7, v9);
    if (v6 > 0x1000)
      free(v7);
    return v8;
  }
  v8 = 0;
  if (a2)
    *a2 = 1;
  return v8;
}

uint64_t CA::OGL::MetalContext::Pipeline::Spec::decode_name(CA::OGL::MetalContext::Pipeline::Spec *this, char *a2)
{
  CA::OGL::MetalContext::Pipeline::Spec *v2;
  uint64_t result;
  _BYTE *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v10[2];

  v2 = this;
  v10[1] = *(char **)MEMORY[0x1E0C80C00];
  v10[0] = a2;
  CA::OGL::MetalContext::decode_segment(v10, (uint64_t)this, byte_1E15A6118, 6u);
  result = CA::OGL::MetalContext::FragmentShader::Spec::decode_name(v2, v10[0]);
  *(_DWORD *)((char *)v2 + 19) = 0;
  v4 = (char *)v2 + 19;
  v5 = *(unsigned __int16 *)((char *)v2 + 17);
  v6 = (16 * v5) & 0x100 | (((v5 >> 2) & 1) << 7);
  if ((v5 & 4) != 0)
  {
    *(_WORD *)((char *)v2 + 21) = v6;
  }
  else
  {
    v7 = *((_BYTE *)v2 + 14) & 0x7F;
    *(_WORD *)((char *)v2 + 21) = v6 | (uint64_t)CA::OGL::MetalContext::fragment_shader_type_info[2
                                                                                               * (CA::OGL::MetalContext::texture_function_info[8 * v7 - v7] & 0x3F)
                                                                                               + 1] & 0x1F | (32 * ((*((_BYTE *)v2 + 16) >> 3) & 3));
    v8 = CA::OGL::tex_image_count[v7];
    if (CA::OGL::tex_image_count[v7])
    {
      do
      {
        v9 = *(_DWORD *)v2;
        v2 = (CA::OGL::MetalContext::Pipeline::Spec *)((char *)v2 + 7);
        *v4 = *v4 & 0xFC | byte_184755BDC[v9 & 0x3F] & 3;
        ++v4;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t CALayerGetRenderId(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)(result + 16);
    if (CA::Render::Encoder::initialize_render_id_slide(void)::once[0] != -1)
      dispatch_once(CA::Render::Encoder::initialize_render_id_slide(void)::once, &__block_literal_global_11026);
    if (v1)
      return CA::Render::_render_id_slide + v1;
    else
      return 0;
  }
  return result;
}

int *CAImageQueueSetEDRDeadline(int *result, double a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)result + 6);
  if (v2)
  {
    *(double *)(*(_QWORD *)(v2 + 24) + 128) = a2;
    __dmb(0xBu);
    return CAImageQueuePing_((uint64_t)result, 0, 0, 0.0, 0.0);
  }
  return result;
}

int *CA::Render::aligned_release(size_t this, void *a2, const void *a3)
{
  int *result;
  size_t v5;
  size_t v6;

  munmap(a2, this);
  result = CAGetStatsStruct(0);
  v5 = *((_QWORD *)result + 1);
  v6 = *(_QWORD *)result - this;
  *(_QWORD *)result = v6;
  if (v6 > v5)
    *((_QWORD *)result + 1) = v6;
  return result;
}

void malloc_zone_init(void)
{
  malloc_zone = (uint64_t)malloc_create_zone(0, 0);
  malloc_set_zone_name((malloc_zone_t *)malloc_zone, "QuartzCore");
}

void CAML::ObjCContext::~ObjCContext(CAML::ObjCContext *this)
{
  malloc_zone_t *malloc_zone;

  CAML::ObjCContext::~ObjCContext(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *i;
  uint64_t v6;
  void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  _QWORD *v12;
  const __CFDictionary *v13;
  const void *v14;

  v2 = 0;
  *(_QWORD *)this = off_1E1599CF8;
  v3 = *((_QWORD *)this + 13);
  v4 = 1 << *(_DWORD *)v3;
  do
  {
    for (i = *(_QWORD **)(*(_QWORD *)(v3 + 16) + 8 * v2); i; i = (_QWORD *)*i)
    {
      v7 = (void *)i[2];
      v6 = i[3];
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6) & 1) == 0)
      {
        free(v7);
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
    }
    ++v2;
  }
  while (v2 != v4);
  x_hash_table_free(*((_QWORD **)this + 13));
  *(_QWORD *)this = off_1E159A0D8;
  if (*((_QWORD *)this + 1))
    CAML::Context::result(this);
  v8 = (const void *)*((_QWORD *)this + 2);
  if (v8)
    CFRelease(v8);
  v9 = (const void *)*((_QWORD *)this + 3);
  if (v9)
    CFRelease(v9);
  v10 = (const void *)*((_QWORD *)this + 4);
  if (v10)
    CFRelease(v10);
  v11 = (const void *)*((_QWORD *)this + 5);
  if (v11)
    CFRelease(v11);
  v12 = (_QWORD *)*((_QWORD *)this + 7);
  if (v12)
    x_hash_table_free(v12);
  v13 = (const __CFDictionary *)*((_QWORD *)this + 8);
  if (v13)
  {
    CFDictionaryApplyFunction(v13, (CFDictionaryApplierFunction)CAML::Context::free_object, 0);
    CFRelease(*((CFTypeRef *)this + 8));
  }
  v14 = (const void *)*((_QWORD *)this + 9);
  if (v14)
    CFRelease(v14);
}

uint64_t CAML::ObjCType::builtin_type(CAML::ObjCType *this)
{
  return 1;
}

void CAML::ObjCNSObject::~ObjCNSObject(CAML::ObjCNSObject *this)
{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

uint64_t CAML::ObjCNSObject::builtin_type(CAML::ObjCNSObject *this)
{
  return 0;
}

dispatch_queue_t ___ZN2CA7DisplayL13display_queueEv_block_invoke()
{
  NSObject *v0;
  dispatch_queue_t result;

  v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, 0);
  result = dispatch_queue_create("CA::Display::display_queue", v0);
  CA::Display::display_queue(void)::queue = (uint64_t)result;
  return result;
}

uint64_t draw_rects(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t Info;
  CGColor *Color;
  unsigned int CompositeOperation;
  CGColor *FillColor;
  unsigned int v9;
  CGColor *StrokeColor;
  unsigned int v11;

  Info = CGContextDelegateGetInfo();
  CGGStateGetStyle();
  Color = (CGColor *)CGStyleGetColor();
  CompositeOperation = CGGStateGetCompositeOperation();
  CACGContextEvaluator::update_with_color(Info, Color, CompositeOperation);
  if (a4 <= 4)
  {
    if (a4 == 2
      || (FillColor = (CGColor *)CGGStateGetFillColor(),
          v9 = CGGStateGetCompositeOperation(),
          CACGContextEvaluator::update_with_color(Info, FillColor, v9),
          a4 - 2 <= 2))
    {
      StrokeColor = (CGColor *)CGGStateGetStrokeColor();
      v11 = CGGStateGetCompositeOperation();
      CACGContextEvaluator::update_with_color(Info, StrokeColor, v11);
    }
  }
  *(_BYTE *)(Info + 78) |= CGGStateGetStyle() != 0;
  CGContextDelegateGetInfo();
  return CGContextDelegateDrawRects();
}

void CA::Render::GradientLayer::set_property(CA::Render::GradientLayer *this, uint64_t a2, const unsigned int *a3, BOOL a4, unint64_t a5, const double *a6)
{
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  float64_t *v16;
  uint64_t v17;
  float64x2_t v18;
  uint64_t v19;
  unint64_t v20;
  float64x2_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  float32x4_t *v26;
  float v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  float v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  __int128 v53;
  _OWORD *v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  float64x2_t v63;
  float64x2_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v11 = *a3;
  if (*(int *)a3 > 355)
  {
    if (v11 != 356)
    {
      if (v11 != 525)
        goto LABEL_69;
      goto LABEL_7;
    }
LABEL_14:
    if (a2 == 2)
    {
      v23 = a3[1];
      if ((v23 & 0x40000000) == 0)
        goto LABEL_55;
      v24 = v23 & 0xFFFFFFFFBFFFFFFFLL;
      if (*((_QWORD *)this + 4) <= (v23 & 0xFFFFFFFFBFFFFFFFLL))
        goto LABEL_55;
      if (a5 < 4 || v11 != 108)
      {
        if (v11 == 356 && a5 && *((_QWORD *)this + 7))
        {
          v27 = *a6;
          CA::Render::InterpolatedFunction::set_location((uint64_t)this + 16, v24, v27);
        }
        goto LABEL_55;
      }
      if ((CARequiresColorMatching(*((CGColorSpace **)this + 17), *((CGColorSpace **)this + 16), 0) & 1) == 0)
      {
        CA::Render::Gradient::set_color((uint64_t)this + 16, v24, a6);
        goto LABEL_55;
      }
      if (CARetainColorTransform(*((CGColorSpace **)this + 16)))
      {
        v63 = 0u;
        v64 = 0u;
        CA::Render::convert_color((uint64_t)a6, (uint64_t)&v63);
        v25 = *((_QWORD *)this + 6);
        if (v25)
        {
          if (*((_QWORD *)this + 4) > v24)
          {
            v26 = (float32x4_t *)(v25 + 16 * v24);
            *v26 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v63), v64);
            if (v26->f32[3] < 1.0)
              *((_DWORD *)this + 7) &= ~0x800u;
          }
        }
        goto LABEL_42;
      }
    }
    else if (a2 == 1)
    {
      if (v11 == 356)
      {
        if (*((_QWORD *)this + 7) && *((_QWORD *)this + 4) <= a5)
          CA::Render::InterpolatedFunction::set_locations((uint64_t)this + 16, a6);
        goto LABEL_55;
      }
      if (a5 >= 4 * *((_QWORD *)this + 4))
      {
        if ((CARequiresColorMatching(*((CGColorSpace **)this + 17), *((CGColorSpace **)this + 16), 0) & 1) == 0)
        {
          CA::Render::Gradient::set_colors((uint64_t)this + 16, a6);
          goto LABEL_55;
        }
        if (CARetainColorTransform(*((CGColorSpace **)this + 16)))
        {
          if (*((_QWORD *)this + 4))
          {
            v15 = 0;
            v16 = (float64_t *)(a6 + 3);
            v17 = 12;
            do
            {
              v18 = *(float64x2_t *)(v16 - 1);
              v63 = *(float64x2_t *)(v16 - 3);
              v64 = v18;
              CGColorTransformConvertColorComponents();
              v19 = *((_QWORD *)this + 6);
              v20 = *((_QWORD *)this + 4);
              if (v19)
              {
                if (v20 > v15)
                {
                  v21.f64[0] = 0.0;
                  v21.f64[1] = *v16;
                  *(float32x4_t *)(v19 + 16 * v15) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)0), v21);
                  if (*(float *)(v19 + v17) < 1.0)
                    *((_DWORD *)this + 7) &= ~0x800u;
                }
              }
              ++v15;
              v17 += 16;
              v16 += 4;
            }
            while (v15 < v20);
          }
LABEL_42:
          CGColorTransformRelease();
        }
      }
    }
LABEL_55:
    if ((*((_BYTE *)this + 13) & 8) == 0)
    {
      v28 = (unsigned int *)*((_QWORD *)this + 14);
      if (v28)
      {
        v29 = v28 + 2;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
          (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 16))(v28);
        *((_QWORD *)this + 14) = 0;
      }
      v32 = (unsigned int *)*((_QWORD *)this + 15);
      if (v32)
      {
        v33 = v32 + 2;
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
          (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 16))(v32);
        *((_QWORD *)this + 15) = 0;
      }
    }
    v11 = *a3;
    goto LABEL_69;
  }
  if (v11 == 108)
    goto LABEL_14;
  if (v11 != 211)
  {
LABEL_69:
    if (v11 == 322)
    {
      if (a2 == 2)
      {
        if (a5 >= 4)
        {
          v48 = a3[1];
          if ((v48 & 0x40000000) != 0)
          {
            v49 = *((_QWORD *)this + 4);
            _CF = v49 != 0;
            v50 = v49 - 1;
            if (_CF)
            {
              v51 = v48 & 0xFFFFFFFFBFFFFFFFLL;
              if (v50 > (v48 & 0xFFFFFFFFBFFFFFFFLL))
              {
                *((_DWORD *)this + 7) |= 0x400u;
                CA::Render::InterpolatedFunction::allocate_storage((CA::Render::GradientLayer *)((char *)this + 16));
                v52 = *((_QWORD *)this + 8);
                if (v52)
                {
                  v53 = *((_OWORD *)a6 + 1);
                  v54 = (_OWORD *)(v52 + 32 * v51);
                  *v54 = *(_OWORD *)a6;
                  v54[1] = v53;
                }
              }
            }
          }
        }
      }
      else if (a2 == 1)
      {
        *((_DWORD *)this + 7) |= 0x400u;
        v36 = *((_QWORD *)this + 4);
        CA::Render::InterpolatedFunction::allocate_storage((CA::Render::GradientLayer *)((char *)this + 16));
        v37 = (void *)*((_QWORD *)this + 8);
        if (v37)
        {
          v38 = v36 - 1 >= a5 >> 2 ? a5 >> 2 : v36 - 1;
          memcpy(v37, a6, 32 * v38);
          v39 = *((_QWORD *)this + 4);
          if (v38 < v39 - 1)
          {
            v40 = ~v38 + v39;
            v41 = (_OWORD *)(*((_QWORD *)this + 8) + 32 * v38 + 16);
            __asm { FMOV            V0.2D, #1.0 }
            do
            {
              *((_QWORD *)v41 - 2) = 0;
              *((_QWORD *)v41 - 1) = 0;
              *v41 = _Q0;
              v41 += 2;
              --v40;
            }
            while (v40);
          }
        }
      }
      if ((*((_BYTE *)this + 13) & 8) == 0)
      {
        v55 = (unsigned int *)*((_QWORD *)this + 14);
        if (v55)
        {
          v56 = v55 + 2;
          do
          {
            v57 = __ldaxr(v56);
            v58 = v57 - 1;
          }
          while (__stlxr(v58, v56));
          if (!v58)
            (*(void (**)(unsigned int *))(*(_QWORD *)v55 + 16))(v55);
          *((_QWORD *)this + 14) = 0;
        }
        v59 = (unsigned int *)*((_QWORD *)this + 15);
        if (v59)
        {
          v60 = v59 + 2;
          do
          {
            v61 = __ldaxr(v60);
            v62 = v61 - 1;
          }
          while (__stlxr(v62, v60));
          if (!v62)
            (*(void (**)(unsigned int *))(*(_QWORD *)v59 + 16))(v59);
          *((_QWORD *)this + 15) = 0;
        }
      }
    }
    else if (a5 && v11 == 393)
    {
      v47 = *a6;
      *((float *)this + 27) = v47;
    }
    return;
  }
LABEL_7:
  v12 = 72;
  if (v11 == 525)
  {
    v13 = (char *)this + 72;
  }
  else
  {
    v12 = 88;
    v13 = (char *)this + 88;
  }
  if (a2 == 1 && a5 >= 2)
  {
    *(double *)((char *)this + v12) = *a6;
    v14 = *((_QWORD *)a6 + 1);
LABEL_13:
    *((_QWORD *)v13 + 1) = v14;
    return;
  }
  if (a2 != 2)
    return;
  v22 = a3[1];
  if (a5 && v22 == 596)
  {
    *(double *)((char *)this + v12) = *a6;
    return;
  }
  if (a5 && v22 == 600)
  {
    v14 = *(_QWORD *)a6;
    goto LABEL_13;
  }
}

uint64_t CA::Render::InterpolatedFunction::set_locations(uint64_t this, const double *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  float *v6;
  float v7;
  unsigned int v8;

  v2 = *(_QWORD *)(this + 40);
  if (v2)
  {
    v3 = *(_QWORD *)(this + 16);
    if (v3)
    {
      v4 = 0;
      v5 = 1;
LABEL_4:
      v6 = (float *)(v2 + 4 * v4);
      do
      {
        v7 = a2[v4];
        *v6 = v7;
        if (v4 && *(v6 - 1) > v7)
        {
          v5 = 0;
          if (++v4 != v3)
            goto LABEL_4;
          goto LABEL_13;
        }
        ++v4;
        ++v6;
      }
      while (v3 != v4);
      if ((v5 & 1) != 0)
        goto LABEL_12;
LABEL_13:
      v8 = *(_DWORD *)(this + 12) & 0xFFFFFEFF;
    }
    else
    {
LABEL_12:
      v8 = *(_DWORD *)(this + 12) | 0x100;
    }
    *(_DWORD *)(this + 12) = v8 | 0x200;
  }
  return this;
}

uint64_t CA::Context::set_layer(CA::Context *this, char *a2)
{
  CA::Transaction *v4;
  const void *v5;
  char *v6;
  CA::Layer *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  malloc_zone_t *malloc_zone;
  int *v14;
  CA::Context *v15;

  v4 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
  if (!v4)
    v4 = (CA::Transaction *)CA::Transaction::create(this);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  v6 = (char *)*((_QWORD *)this + 12);
  if (v6 != a2)
  {
    if (v6)
    {
      v7 = (CA::Layer *)*((_QWORD *)v6 + 2);
      if (v7)
        CA::Layer::set_visible(v7, 0);
    }
    *((_QWORD *)this + 12) = a2;
    if (a2)
    {
      CFRetain(a2);
      v8 = *((_QWORD *)this + 12);
      a2 = *(char **)(v8 + 16);
      if (a2)
      {
        v9 = CA::Layer::retain_parent(*(CA::Layer **)(v8 + 16), v4);
        if (v9)
        {
          v10 = v9;
          CA::Layer::remove_from_superlayer((CALayer **)a2);
LABEL_11:
          v11 = *v10;
          if (*v10)
          {
            do
            {
              v12 = __ldaxr(v10);
              if (v12 != v11)
              {
                __clrex();
                goto LABEL_11;
              }
            }
            while (__stlxr(v11 - 1, v10));
            if (v11 == 1)
            {
              CA::Layer::destroy((CA::Layer *)v10);
              CA::Layer::~Layer((CA::AttrList **)v10);
              malloc_zone = (malloc_zone_t *)get_malloc_zone();
              malloc_zone_free(malloc_zone, v10);
            }
          }
        }
        else if ((a2[54] & 0x10) != 0)
        {
          v14 = CA::Layer::retain_context((CA::Layer *)a2);
          v15 = (CA::Context *)v14;
          if (v14)
          {
            CA::Context::set_layer((CA::Context *)v14, 0);
            CA::Context::unref(v15, 0);
          }
        }
        CA::Layer::set_visible((CA::Layer *)a2, *((_DWORD *)this + 2));
        if (CA::Render::Encoder::initialize_render_id_slide(void)::once[0] != -1)
          dispatch_once(CA::Render::Encoder::initialize_render_id_slide(void)::once, &__block_literal_global_11026);
        a2 += CA::Render::_render_id_slide;
      }
    }
    if (v6)
      CA::Transaction::release_object(v4, v6);
    CA::Transaction::add_command((CA::Transaction *)6, *((_DWORD *)this + 2), (uint64_t)a2, 0, v5);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 16));
}

void sub_18458E544(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::Transaction::add_command(CA::Transaction *this, int a2, uint64_t a3, const void *a4, const void *a5)
{
  unsigned int v8;
  CA::Transaction *v9;
  uint64_t v10;
  malloc_zone_t *malloc_zone;
  _DWORD *v12;
  uint64_t result;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;

  v8 = this;
  v9 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
  if (!v9)
    v9 = (CA::Transaction *)CA::Transaction::create(this);
  v10 = *((_QWORD *)v9 + 13);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v12 = malloc_type_zone_malloc(malloc_zone, 0x28uLL, 0x8BB15036uLL);
  v12[8] = a2;
  *((_QWORD *)v12 + 1) = v8;
  *((_QWORD *)v12 + 2) = a3;
  if (a4)
    result = (uint64_t)CFRetain(a4);
  else
    result = 0;
  *((_QWORD *)v12 + 3) = result;
  if (!**((_DWORD **)v9 + 13))
    result = CA::Transaction::ensure_implicit(v9, 1);
  v14 = (unint64_t *)(v10 + 16);
LABEL_9:
  v15 = *v14;
  *(_QWORD *)v12 = *v14;
  do
  {
    v16 = __ldaxr(v14);
    if (v16 != v15)
    {
      __clrex();
      goto LABEL_9;
    }
  }
  while (__stlxr((unint64_t)v12, v14));
  return result;
}

void CA::Layer::set_visible(CA::Layer *this, int a2)
{
  CA::Transaction *v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v4 = (CA::Transaction *)CA::Transaction::ensure_compat(this);
  v5 = *((_DWORD *)v4 + 25);
  *((_DWORD *)v4 + 25) = v5 + 1;
  if (!v5)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v6 = *((_QWORD *)this + 1);
  CA::Transaction::unlock(v4);
  if (v6)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("CALayerInvalid"), CFSTR("layer %@ has a superlayer; so cannot be added to a context"),
      *((_QWORD *)this + 2));
  v7 = *((_DWORD *)this + 13);
  if (a2)
  {
    v8 = *((_DWORD *)this + 67);
    if ((v7 & 0x100000) == 0)
    {
      v9 = *((_DWORD *)v4 + 25);
      *((_DWORD *)v4 + 25) = v9 + 1;
      if (!v9)
        os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
      if (v8 != a2)
      {
        v10 = *((_DWORD *)v4 + 25);
        *((_DWORD *)v4 + 25) = v10 + 1;
        if (!v10)
          os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
        *((_QWORD *)this + 1) = 0;
        *((_DWORD *)this + 67) = a2;
        CA::Transaction::unlock(v4);
        CA::Transaction::remove_root(v4, this);
        CA::Layer::mark_context_changed(this, (CA::Transaction **)v4);
      }
LABEL_16:
      CA::Layer::mark_visible(this, v4, a2 != 0);
      CA::Transaction::unlock(v4);
      return;
    }
    if (v8 != a2)
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("CALayerInvalid"), CFSTR("cannot add layer to one context while visible in another"));
  }
  else if ((v7 & 0x100000) != 0)
  {
    v11 = *((_DWORD *)v4 + 25);
    *((_DWORD *)v4 + 25) = v11 + 1;
    if (!v11)
      os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
    goto LABEL_16;
  }
}

void sub_18458E7C4(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN2CA6Render15CompressedImage27new_image_with_texture_dataEP18CGImageTextureData_block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a1[8] || !a1[9])
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v14 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEBUG))
      {
        v15 = a1[8];
        v16 = a1[9];
        *(_DWORD *)buf = 134218240;
        v21 = v15;
        v22 = 2048;
        v23 = v16;
        _os_log_impl(&dword_184457000, v14, OS_LOG_TYPE_DEBUG, "Compressed texture has bogus dimensions %zu x %zu!\n", buf, 0x16u);
      }
    }
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    v17 = a1[10];
    v18 = *(_QWORD *)(a1[5] + 8);
    if (v17)
    {
      if (*(_QWORD *)(v18 + 24) != a5)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v19 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v19, OS_LOG_TYPE_DEBUG, "Compressed texture data base address is not consistent, bailing.", buf, 2u);
          }
        }
        *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
        return;
      }
    }
    else
    {
      *(_QWORD *)(v18 + 24) = a5;
      *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = a6;
      v17 = a1[10];
    }
    *(_QWORD *)(a1[11] + 8 * v17) = a7;
    *(_QWORD *)(a1[12] + 8 * a1[10]) = a8;
    *(_QWORD *)(a1[13] + 8 * a1[10]) = a4;
    ++*(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
  }
}

void CAML::Context::free_object(CAML::Context *this, __CFString *a2, Object *a3, void *a4)
{
  malloc_zone_t *malloc_zone;

  if (a2)
  {
    CFRelease((CFTypeRef)a2->info);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, a2);
  }
}

void CA::Display::DisplayLink::~DisplayLink(CA::Display::DisplayLink *this)
{
  CA::Display::DisplayLink::~DisplayLink(this);
  JUMPOUT(0x186DBD990);
}

{
  uint64_t v2;
  CA::Display::DisplayLink *v3;
  CA::Display::DisplayLink *v4;
  uint64_t *v5;
  const void *v6;
  void *v7;

  *(_QWORD *)this = &off_1E1599880;
  v2 = *((_QWORD *)this + 19);
  if (v2)
  {
    CADisplayTimerInvalidate(v2);
    CFRelease(*((CFTypeRef *)this + 19));
  }
  v3 = (CA::Display::DisplayLink *)CA::Display::DisplayLink::_list;
  if (CA::Display::DisplayLink::_list)
  {
    if ((CA::Display::DisplayLink *)CA::Display::DisplayLink::_list == this)
    {
      v5 = &CA::Display::DisplayLink::_list;
LABEL_9:
      *v5 = *((_QWORD *)this + 6);
    }
    else
    {
      while (1)
      {
        v4 = v3;
        v3 = (CA::Display::DisplayLink *)*((_QWORD *)v3 + 6);
        if (!v3)
          break;
        if (v3 == this)
        {
          v5 = (uint64_t *)((char *)v4 + 48);
          goto LABEL_9;
        }
      }
    }
  }
  _Block_release(*((const void **)this + 29));
  _Block_release(*((const void **)this + 30));
  _Block_release(*((const void **)this + 31));
  CFRelease(*((CFTypeRef *)this + 2));
  v6 = (const void *)*((_QWORD *)this + 4);
  if (v6)
    CFRelease(v6);

  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 56));
  v7 = (void *)*((_QWORD *)this + 15);
  if (v7)
  {
    *((_QWORD *)this + 16) = v7;
    operator delete(v7);
  }
}

void sub_18458EC2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 120);
  if (v3)
  {
    *(_QWORD *)(v1 + 128) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CA::Display::DisplayLinkItem::invalidate(CA::Display::DisplayLinkItem *this)
{
  pthread_mutex_t *v2;
  _QWORD *v3;
  _opaque_pthread_t *v4;
  uint64_t v5;
  __CFRunLoop *v6;

  *((_DWORD *)this + 78) = 1;
  v2 = (pthread_mutex_t *)((char *)this + 136);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 136));
  v3 = (_QWORD *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  while (1)
  {
    v4 = (_opaque_pthread_t *)*((_QWORD *)this + 31);
    if (!v4 || v4 == pthread_self())
      break;
    pthread_cond_wait((pthread_cond_t *)((char *)this + 200), v2);
  }
  v5 = *((_QWORD *)this + 33);
  if (v5)
    v6 = *(__CFRunLoop **)(v5 + 16);
  else
    v6 = 0;
  pthread_mutex_unlock(v2);
  if (v6)
    CA::Display::DisplayLinkItem::update_link(this, v6);
}

void sub_18458ED00(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void CA::Display::`anonymous namespace'::delete_mode_list(_QWORD *a1)
{
  _QWORD *v1;
  CFTypeRef *v2;
  _QWORD *v3;

  if (a1)
  {
    v1 = a1;
    v2 = (CFTypeRef *)a1;
    do
    {
      CFRelease(*v2);
      v2 = (CFTypeRef *)v2[1];
    }
    while (v2);
    do
    {
      v3 = (_QWORD *)v1[1];
      free(v1);
      v1 = v3;
    }
    while (v3);
  }
}

uint64_t CADisplayTimerInvalidate(uint64_t a1)
{
  pthread_mutex_t *v2;
  __CFRunLoopSource *v3;
  __CFMachPort *v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);

  v2 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  v3 = *(__CFRunLoopSource **)(a1 + 136);
  if (v3)
  {
    CFRunLoopSourceInvalidate(v3);
    CFRelease(*(CFTypeRef *)(a1 + 136));
  }
  *(_QWORD *)(a1 + 136) = 0;
  v4 = *(__CFMachPort **)(a1 + 128);
  if (v4)
  {
    CFMachPortInvalidate(v4);
    CFRelease(*(CFTypeRef *)(a1 + 128));
  }
  *(_QWORD *)(a1 + 128) = 0;
  if (*(_DWORD *)(a1 + 120))
  {
    mk_timer_cancel();
    *(_BYTE *)(a1 + 200) = 1;
    v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 192);
    if (v5)
      v5(a1, 2, *(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 184));
    mk_timer_destroy();
  }
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  return pthread_mutex_unlock(v2);
}

void sub_18458F33C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DBD990](v1, 0x10A0C405234EED1);
  _Unwind_Resume(a1);
}

void sub_18458F7A8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t CA::WindowServer::IOMFBDisplay::brightness_control_disabled(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28125);
}

__n128 CA::WindowServer::IOMFBDisplay::set_luminance(uint64_t a1, __n128 *a2)
{
  unint64_t v2;
  __n128 result;

  v2 = a2[1].n128_u64[0];
  result = *a2;
  *(__n128 *)(a1 + 26216) = *a2;
  *(_QWORD *)(a1 + 26232) = v2;
  return result;
}

void CA::WindowServer::IOMFBServer::set_edr_properties(CA::WindowServer::Display **this, int a2, float a3, float a4, float a5)
{
  pthread_mutex_t *v10;
  float v11;
  _BOOL4 v12;
  float v13;
  int v14;
  CA::WindowServer::Display *v15;
  unsigned int *v16;
  CA::WindowServer::Display *v17;
  CA::OGL::Performance *v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  _QWORD *i;
  NSObject *v22;
  __int128 v23;
  uint64_t v24;
  uint8_t buf[24];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v10 = (pthread_mutex_t *)(this + 68);
  pthread_mutex_lock((pthread_mutex_t *)(this + 68));
  v11 = CA::WindowServer::Display::edr_headroom(this[12]);
  memset(buf, 0, sizeof(buf));
  (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)this[12] + 1216))(buf);
  if (v11 != a3 && fabs(a3 + -1.0) < 0.001)
    goto LABEL_20;
  if ((*(uint64_t (**)(CA::WindowServer::Display *))(*(_QWORD *)this[12] + 1240))(this[12]))
  {
    v12 = vabds_f32(v11, a3) < 0.000001;
    if (!a2)
      goto LABEL_19;
  }
  else
  {
    v13 = powf(v11, 0.45455);
    v12 = vabds_f32(v13, powf(a3, 0.45455)) <= 0.0019531;
    if (!a2)
      goto LABEL_19;
  }
  if (v12)
  {
    if ((a4 != 0.0 || *(float *)&buf[8] != 0.0)
      && (a4 != 0.0 && *(float *)&buf[8] == 0.0 || (float)(vabds_f32(*(float *)&buf[8], a4) / *(float *)&buf[8]) > 0.01)
      || (a5 != 0.0 || *(float *)&buf[12] != 0.0)
      && (a5 != 0.0 && *(float *)&buf[12] == 0.0
       || (float)(vabds_f32(*(float *)&buf[12], a5) / *(float *)&buf[12]) > 0.01))
    {
      goto LABEL_20;
    }
LABEL_18:
    v14 = 0;
    goto LABEL_23;
  }
LABEL_19:
  if (v12)
    goto LABEL_18;
LABEL_20:
  v15 = this[12];
  CA::WindowServer::Display::initialize_edr_state(v15);
  v16 = (unsigned int *)*((_QWORD *)v15 + 86);
  if (v16)
    atomic_store(LODWORD(a3), v16);
  *(float *)&buf[8] = a4;
  *(float *)&buf[12] = a5;
  v17 = this[12];
  v24 = *(_QWORD *)&buf[16];
  v23 = *(_OWORD *)buf;
  (*(void (**)(CA::WindowServer::Display *, __int128 *))(*(_QWORD *)v17 + 1224))(v17, &v23);
  v14 = 1;
LABEL_23:
  if (BYTE9(xmmword_1ECDC6A90))
    kdebug_trace();
  v18 = (CA::OGL::Performance *)pthread_mutex_unlock(v10);
  if (v14)
  {
    if (CA::OGL::Performance::invalidates_screen_on_edr_change(v18))
      CA::WindowServer::Server::invalidate((os_unfair_lock_s *)this, *((const CA::Shape **)this[12] + 27));
    *(_DWORD *)((char *)this[12] + 745) |= 0x400u;
    if (byte_1ECDC6B04)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v22 = x_log_category_CADebug;
        if (os_log_type_enabled((os_log_t)x_log_category_CADebug, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "set_edr_properties";
          _os_log_impl(&dword_184457000, v22, OS_LOG_TYPE_INFO, "kUpdateReasonDisplayBrightness %s", buf, 0xCu);
        }
      }
    }
    *(_QWORD *)buf = 0;
    *(int64x2_t *)&buf[8] = vdupq_n_s64(8uLL);
    (*((void (**)(CA::WindowServer::Display **, uint8_t *, double))*this + 23))(this, buf, 0.0);
    (*(void (**)(CA::WindowServer::Display *, uint64_t))(*(_QWORD *)this[12] + 968))(this[12], 1);
    if (CA::OGL::AsynchronousDispatcher::dispatcher(void)::once != -1)
      dispatch_once(&CA::OGL::AsynchronousDispatcher::dispatcher(void)::once, &__block_literal_global_1592);
    v19 = CA::OGL::AsynchronousDispatcher::dispatcher(void)::dispatcher;
    v20 = (os_unfair_lock_s *)(CA::OGL::AsynchronousDispatcher::dispatcher(void)::dispatcher + 4);
    os_unfair_lock_lock((os_unfair_lock_t)(CA::OGL::AsynchronousDispatcher::dispatcher(void)::dispatcher + 4));
    for (i = *(_QWORD **)(v19 + 8); i; i = (_QWORD *)i[24])
      (*(void (**)(_QWORD *))(*i + 32))(i);
    os_unfair_lock_unlock(v20);
  }
}

_DWORD *CA::WindowServer::Display::initialize_edr_state(_DWORD *this)
{
  _DWORD *v1;
  unsigned int *v2;

  if (!*((_QWORD *)this + 85))
  {
    v1 = this;
    this = CA::Render::Shmem::new_shmem((CA::Render::Shmem *)0xC);
    *((_QWORD *)v1 + 85) = this;
    v2 = (unsigned int *)*((_QWORD *)this + 3);
    v2[2] = 0;
    *(_QWORD *)v2 = 0;
    *((_QWORD *)v1 + 86) = v2;
    atomic_store(0x3F800000u, v2);
    atomic_store(0x3F800000u, (unsigned int *)(*((_QWORD *)v1 + 86) + 4));
    atomic_store(0x3F800000u, (unsigned int *)(*((_QWORD *)v1 + 86) + 8));
  }
  return this;
}

uint64_t CA::WindowServer::Server::set_sdr_nits(CA::WindowServer::Server *this, float a2)
{
  pthread_mutex_t *v4;
  _QWORD *v5;
  int v6;
  CA::OGL::Performance *v7;
  NSObject *v9;
  NSObject *v10;
  _BYTE buf[24];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v5 = (_QWORD *)*((_QWORD *)this + 12);
  if (v5[5]
    && (v6 = (*(uint64_t (**)(_QWORD *))(*v5 + 304))(v5), v5 = (_QWORD *)*((_QWORD *)this + 12), v6))
  {
    (*(void (**)(_QWORD *, float))(*v5 + 928))(v5, a2);
    CA::WindowServer::Server::invalidate((os_unfair_lock_s *)this, *(const CA::Shape **)(*((_QWORD *)this + 12) + 216));
    if (byte_1ECDC6B04)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v10 = x_log_category_CADebug;
        if (os_log_type_enabled((os_log_t)x_log_category_CADebug, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "set_sdr_nits_1";
          _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_INFO, "kUpdateReasonDisplayBrightness %s", buf, 0xCu);
        }
      }
    }
    *(_QWORD *)buf = 0;
    *(int64x2_t *)&buf[8] = vdupq_n_s64(8uLL);
    (*(void (**)(CA::WindowServer::Server *, _BYTE *, double))(*(_QWORD *)this + 184))(this, buf, 0.0);
  }
  else if ((*(unsigned int (**)(_QWORD *, float))(*v5 + 928))(v5, a2))
  {
    if (byte_1ECDC6B04)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v9 = x_log_category_CADebug;
        if (os_log_type_enabled((os_log_t)x_log_category_CADebug, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "set_sdr_nits_2";
          _os_log_impl(&dword_184457000, v9, OS_LOG_TYPE_INFO, "kUpdateReasonDisplayBrightness %s", buf, 0xCu);
        }
      }
    }
    *(_QWORD *)buf = 0;
    *(int64x2_t *)&buf[8] = vdupq_n_s64(8uLL);
    (*(void (**)(CA::WindowServer::Server *, _BYTE *, double))(*(_QWORD *)this + 184))(this, buf, 0.0);
    v7 = (CA::OGL::Performance *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 12) + 968))(*((_QWORD *)this + 12), 1);
    if (CA::OGL::Performance::invalidates_screen_on_edr_change(v7))
      CA::WindowServer::Server::invalidate((os_unfair_lock_s *)this, *(const CA::Shape **)(*((_QWORD *)this + 12) + 216));
  }
  if (!(*(uint64_t (**)(CA::WindowServer::Server *))(*(_QWORD *)this + 304))(this))
    *(_DWORD *)(*((_QWORD *)this + 12) + 745) |= 0x200u;
  return pthread_mutex_unlock(v4);
}

BOOL CA::OGL::Performance::invalidates_screen_on_edr_change(CA::OGL::Performance *this)
{
  unsigned int v2;

  if (!BYTE5(xmmword_1ECDC6A70))
    return 0;
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  v2 = *(float *)&dword_1ECDC6924;
  if (*(float *)&dword_1ECDC6924 >= 0xB)
    v2 = 11;
  return v2 == 7;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_high_ambient_adaptation_strength(CA::WindowServer::IOMFBDisplay *this, float a2)
{
  float *v2;

  v2 = (float *)((char *)this + 26192);
  if (!*((_BYTE *)this + 28123) || *v2 == a2)
    return 0;
  *v2 = a2;
  return 1;
}

uint64_t CA::WindowServer::IOMFBDisplay::has_deferred_brightness_tx_callbacks(CA::WindowServer::IOMFBDisplay *this)
{
  return 1;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_low_ambient_adaptation_strength(CA::WindowServer::IOMFBDisplay *this, float a2)
{
  float *v2;

  v2 = (float *)((char *)this + 26184);
  if (!*((_BYTE *)this + 28123) || *v2 == a2)
    return 0;
  *v2 = a2;
  return 1;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_contrast_enhancer_strength(CA::WindowServer::IOMFBDisplay *this, float a2)
{
  float *v2;

  v2 = (float *)((char *)this + 26176);
  if (!*((_BYTE *)this + 28123) || *v2 == a2)
    return 0;
  *v2 = a2;
  return 1;
}

void CA::WindowServer::IOMFBDisplay::append_brightness_tx_callback(uint64_t a1, void *aBlock)
{
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;

  v3 = _Block_copy(aBlock);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 25908));
  v4 = *(_QWORD **)(a1 + 25944);
  v5 = *(_QWORD *)(a1 + 25936);
  v6 = ((uint64_t)v4 - v5) >> 3;
  v7 = *(_QWORD *)(a1 + 25960);
  if (v7 < v6 + 1)
  {
    v8 = *(_QWORD *)(a1 + 25952);
    v9 = (v7 + 1) | ((v7 + 1) >> 1) | (((v7 + 1) | ((v7 + 1) >> 1)) >> 2);
    v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
    v11 = v10 | (v10 >> 16) | ((v10 | (v10 >> 16)) >> 32);
    if (v11 + 1 > v6 + 1)
      v12 = v11 + 1;
    else
      v12 = v6 + 1;
    v13 = malloc_type_malloc(8 * v12, 0x80040B8603338uLL);
    v14 = v13;
    v15 = *(uint64_t **)(a1 + 25936);
    v16 = *(uint64_t **)(a1 + 25944);
    if (v15 != v16)
    {
      v17 = v13;
      do
      {
        v18 = *v15++;
        *v17++ = v18;
      }
      while (v15 != v16);
    }
    if (v5 != v8)
      free(*(void **)(a1 + 25936));
    *(_QWORD *)(a1 + 25936) = v14;
    v4 = &v14[v6];
    *(_QWORD *)(a1 + 25944) = v4;
    *(_QWORD *)(a1 + 25960) = v12;
  }
  *v4 = v3;
  *(_QWORD *)(a1 + 25944) += 8;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 25908));
}

uint64_t CA::WindowServer::IOMFBDisplay::set_indicator_brightness(CA::WindowServer::IOMFBDisplay *this, float a2)
{
  float *v2;

  v2 = (float *)((char *)this + 26200);
  if (!*((_BYTE *)this + 28123) || *v2 == a2)
    return 0;
  *v2 = a2;
  return 1;
}

BOOL CA::WindowServer::IOMFBDisplay::set_brightness_limit(CA::WindowServer::IOMFBDisplay *this, float a2)
{
  int v2;
  int v4;

  v2 = *((unsigned __int8 *)this + 28123);
  if (*((_BYTE *)this + 28123))
  {
    *((float *)this + 6541) = a2;
    v4 = a2 < 1000.0 && *((_BYTE *)this + 26328) != 0 && *((float *)this + 6539) == 100.0;
    if (*((unsigned __int8 *)this + 26329) != v4)
    {
      *((_BYTE *)this + 26329) = v4;
      CA::WindowServer::Display::post_display_changed((uint64_t)this);
    }
  }
  return v2 != 0;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_sdr_nits(CA::WindowServer::IOMFBDisplay *this, float a2)
{
  float *v4;
  _BOOL4 is_hdr;
  float v6;
  float v7;
  float v8;
  int v9;
  float v10;

  v4 = (float *)((char *)this + 26156);
  if (*((_BYTE *)this + 28123))
    is_hdr = 1;
  else
    is_hdr = CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::IOMFBDisplay *)((char *)this + 640));
  if (*((_BYTE *)v4 + 1956))
  {
    CA::WindowServer::IOMFBDisplay::save_brightness_preferences(this, 1);
    *((_BYTE *)v4 + 1956) = 0;
  }
  *((_QWORD *)this + 3311) = 0;
  v6 = (*(float (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 920))(this);
  v7 = CA::WindowServer::Display::edr_headroom(this) * v6;
  v8 = CA::WindowServer::Display::edr_headroom(this) * a2;
  if (v7 >= v4[91] != v8 < v4[91] && v7 < v4[92] == v8 < v4[92])
  {
    v9 = 0;
  }
  else
  {
    v9 = 1;
    *((_BYTE *)v4 + 1935) = 1;
  }
  if (v7 != v8)
  {
    v10 = v4[110];
    if (v7 < v10 || v8 < v10)
    {
      is_hdr = 1;
      *((_BYTE *)v4 + 1952) = 1;
    }
  }
  *v4 = a2;
  (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1104))(this);
  return v9 | is_hdr;
}

uint64_t CA::WindowServer::IOMFBServer::brightness_capabilities(CA::WindowServer::IOMFBServer *this)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 12);
  v2 = (os_unfair_lock_s *)(v1 + 27208);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 27208));
  v3 = *(_QWORD *)(v1 + 27216);
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t _CACImageQueueDidPresent(mach_port_t a1, mach_msg_timeout_t timeout, int a3, int a4, double a5, double a6, double a7)
{
  uint64_t v8;
  mach_msg_header_t msg;
  uint64_t v11;
  int v12;
  int v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v11 = *MEMORY[0x1E0C804E8];
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  *(_QWORD *)&msg.msgh_bits = 19;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 40405;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set(&msg);
  v8 = mach_msg(&msg, 17, 0x40u, 0, 0, timeout, 0);
  if ((v8 - 268435459) <= 1)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], msg.msgh_local_port);
    mach_msg_destroy(&msg);
  }
  return v8;
}

BOOL CARenderServerSnapshot(mach_port_t a1, NSDictionary *a2)
{
  return CARenderServerSnapshot_(a1, a2) != 0;
}

uint64_t CARenderServerSnapshot_(mach_port_t a1, NSDictionary *a2)
{
  __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  int v7;
  const __CFString *v8;
  id v9;
  uint64_t v10;
  void *v11;
  int v12;
  int v13;
  id v14;
  id v15;
  CFTypeID v16;
  unint64_t v17;
  CFTypeID v18;
  const void *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 *v22;
  int v23;
  uint64_t v24;
  double v25;
  double v26;
  id v27;
  __int128 v28;
  __int128 v29;
  _anonymous_namespace_ *v30;
  _anonymous_namespace_ *v31;
  uint64_t v32;
  unint64_t v33;
  size_t v34;
  NSArray *v35;
  _anonymous_namespace_ *v36;
  _anonymous_namespace_ *v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  NSArray *v41;
  CATransform3D *v42;
  CFTypeID v43;
  CFTypeID TypeID;
  CFTypeID v45;
  NSArray *v47;
  unint64_t v48;
  CATransform3D *v49;
  CFTypeID v50;
  CFTypeID v51;
  CFTypeID v52;
  int v53;
  uint64_t v54;
  int v55;
  __int128 *v56;
  NSArray *v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  NSArray *v62;
  int v63;
  int v64;
  mach_port_t v65;
  void *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v66 = (void *)MEMORY[0x186DBE2E4]();
  v4 = -[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("mode"));
  v5 = -[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("displayName"));
  v6 = -[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("systemIdentifier"));
  v65 = a1;
  v7 = v6 != 0;
  if (v6)
    v8 = v6;
  else
    v8 = v5;
  v9 = -[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("destination"));
  v10 = 0;
  if (!v4)
    goto LABEL_69;
  if (!v8)
    goto LABEL_69;
  v11 = v9;
  if (!v9)
    goto LABEL_69;
  v64 = objc_msgSend(-[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("originX")), "intValue");
  v63 = objc_msgSend(-[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("originY")), "intValue");
  if (a2)
  {
    v12 = objc_msgSend(-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("reuseBackdrops")), "BOOLValue");
    if (objc_msgSend(-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("enforceSecureMode")), "BOOLValue"))v12 |= 2u;
    if (objc_msgSend(-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("ignoreAccessibility")), "BOOLValue"))v12 |= 4u;
    if (objc_msgSend(-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("ignoreSublayers")), "BOOLValue"))v12 |= 8u;
    if (objc_msgSend(-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("ignoreLayerFixup")), "BOOLValue"))v12 |= 0x10u;
    if (objc_msgSend(-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("ignoreDisableUpdateMasks")), "BOOLValue"))v12 |= 0x20u;
    if (objc_msgSend(-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("trackBackdropReuseFailures")), "BOOLValue"))v12 |= 0x40u;
    if (objc_msgSend(-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("bottomLeftOrigin")), "BOOLValue"))v12 |= 0x80u;
    if (objc_msgSend(-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("selfGenerated")), "BOOLValue"))v12 |= 0x100u;
    if (objc_msgSend(-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("wantsHDR")), "BOOLValue"))v12 |= 0x400u;
    if (objc_msgSend(-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("ignoreContextualAssistance")), "BOOLValue"))v13 = v12 | 0x800;
    else
      v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v14 = -[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("transform"));
  v15 = v14;
  if (v14)
  {
    objc_msgSend(v14, "CATransform3DValue");
    v87 = v79;
    v88 = v80;
    v89 = v81;
    v90 = v82;
    v83 = v75;
    v84 = v76;
    v85 = v77;
    v86 = v78;
  }
  v16 = CFGetTypeID(v11);
  v17 = v13 | (v7 << 12);
  if (v16 == CFNumberGetTypeID())
  {
    if (-[NSDictionary valueForKey:](a2, "valueForKey:", CFSTR("wantsHDR")))
      v17 = v17;
    else
      v17 = v17 | 0x400;
  }
  else
  {
    v18 = CFGetTypeID(v11);
    if (v18 == IOSurfaceGetTypeID()
      && objc_msgSend(-[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("wantsHDR")), "BOOLValue"))
    {
      if (IOSurfaceGetPixelFormat((IOSurfaceRef)v11) == 1380411457)
        v17 = v17;
      else
        v17 = v13 & 0xFFFFFBFF | (v7 << 12);
    }
  }
  if (v4 == CFSTR("modeDisplay"))
  {
    if (v15)
      v22 = &v83;
    else
      v22 = 0;
    LODWORD(v58) = 0;
    goto LABEL_68;
  }
  if (v4 == CFSTR("modeLayer"))
  {
    v23 = objc_msgSend(-[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("contextId")), "unsignedIntValue");
    v24 = objc_msgSend(-[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("layerId")), "unsignedLongLongValue");
    objc_msgSend(-[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("timeOffset")), "doubleValue");
    v26 = v25;
    v27 = -[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("transform"));
    if (v27)
    {
      objc_msgSend(v27, "CATransform3DValue");
      v79 = v71;
      v80 = v72;
      v81 = v73;
      v82 = v74;
      v75 = v67;
      v76 = v68;
      v28 = v69;
      v29 = v70;
    }
    else
    {
      v79 = *(_OWORD *)&CATransform3DIdentity.m31;
      v80 = *(_OWORD *)&CATransform3DIdentity.m33;
      v81 = *(_OWORD *)&CATransform3DIdentity.m41;
      v82 = *(_OWORD *)&CATransform3DIdentity.m43;
      v75 = *(_OWORD *)&CATransform3DIdentity.m11;
      v76 = *(_OWORD *)&CATransform3DIdentity.m13;
      v28 = *(_OWORD *)&CATransform3DIdentity.m21;
      v29 = *(_OWORD *)&CATransform3DIdentity.m23;
    }
    v77 = v28;
    v78 = v29;
    v43 = CFGetTypeID(v11);
    TypeID = IOSurfaceGetTypeID();
    v45 = CFGetTypeID(v11);
    if (v45 == CFNumberGetTypeID())
    {
      v21 = CARenderServerCaptureDisplayLayerWithTransformTimeOffsetAndFlags_(v65, v8, v23, v24, objc_msgSend(v11, "intValue"), v64, v63, &v75, v26, v17);
    }
    else
    {
      if (v43 != TypeID)
        goto LABEL_70;
      v21 = CARenderServerRenderDisplayLayerWithTransformTimeOffsetAndFlags_(v65, v8, v23, v24, v11, v64, v63, &v75, v26, v17);
    }
LABEL_68:
    v10 = v21;
    goto LABEL_69;
  }
  if (v4 != CFSTR("includeContextList"))
  {
    if (v4 != CFSTR("stopAfterContextList") && v4 != CFSTR("excludeContextList"))
    {
      if (v4 == CFSTR("stopBeforeSlot"))
      {
        v19 = (const void *)objc_msgSend(-[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("slotId")), "unsignedLongLongValue");
        if (v15)
          v20 = &v83;
        else
          v20 = 0;
        LODWORD(v58) = 3;
        goto LABEL_68;
      }
LABEL_70:
      v10 = 0;
      goto LABEL_69;
    }
    v36 = -[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("contextList"));
    v37 = v36;
    if (v36)
    {
      v38 = -[_anonymous_namespace_ count](v36, "count");
      v39 = v38;
      v40 = 4 * v38;
      if ((unint64_t)(4 * v38) > 0x1000)
      {
        v41 = (NSArray *)malloc_type_malloc(4 * v38, 0xED51815AuLL);
      }
      else
      {
        MEMORY[0x1E0C80A78](v38);
        v41 = (NSArray *)((char *)&v60 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
        bzero(v41, v40);
      }
    }
    else
    {
      v39 = 0;
      v41 = 0;
      v40 = 0;
    }
    if (v4 == CFSTR("excludeContextList"))
      v55 = 2;
    else
      v55 = 1;
    if (v15)
      v56 = &v83;
    else
      v56 = 0;
    LODWORD(v58) = v55;
    if (v40 > 0x1000)
    {
      v57 = v41;
LABEL_98:
      free(v57);
      goto LABEL_69;
    }
    goto LABEL_69;
  }
  v30 = -[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("contextList"));
  v31 = v30;
  if (v30)
  {
    v32 = -[_anonymous_namespace_ count](v30, "count");
    v33 = v32;
    v61 = 4 * v32;
    if ((unint64_t)(4 * v32) > 0x1000)
    {
      v35 = (NSArray *)malloc_type_malloc(4 * v32, 0xD3A9DAA4uLL);
      v62 = v35;
    }
    else
    {
      MEMORY[0x1E0C80A78](v32);
      v62 = (NSArray *)((char *)&v60 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
      bzero(v62, v34);
    }
    v48 = v33 << 7;
    if (v33 << 7 > 0x1000)
    {
      v47 = (NSArray *)malloc_type_malloc(v33 << 7, 0x5615E03CuLL);
    }
    else
    {
      MEMORY[0x1E0C80A78](v35);
      v47 = (NSArray *)((char *)&v60 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
      bzero(v47, v33 << 7);
    }
  }
  else
  {
    v33 = 0;
    v61 = 0;
    v62 = 0;
    v47 = 0;
    v48 = 0;
  }
  v50 = CFGetTypeID(v11);
  v51 = IOSurfaceGetTypeID();
  v52 = CFGetTypeID(v11);
  if (v52 == CFNumberGetTypeID())
  {
    v53 = objc_msgSend(v11, "intValue");
    v54 = _CARenderServerCaptureDisplayContextList(v65, v8, v33, (uint64_t)v62, v53, v64, v63, v33, (uint64_t)v47, v17);
LABEL_82:
    v10 = v54;
    goto LABEL_94;
  }
  if (v50 == v51)
  {
    v54 = _CARenderServerRenderDisplayContextList(v65, v8, v33, (uint64_t)v62, v11, v64, v63, v33, (uint64_t)v47, v17);
    goto LABEL_82;
  }
  v10 = 0;
LABEL_94:
  if (v61 > 0x1000)
    free(v62);
  if (v48 > 0x1000)
  {
    v57 = v47;
    goto LABEL_98;
  }
LABEL_69:
  objc_autoreleasePoolPop(v66);
  return v10;
}

void sub_184591BE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_autoreleasePoolPop(*(void **)(v1 + 40));
  _Unwind_Resume(a1);
}

uint64_t CA::OGL::MetalContext::FragmentShader::Spec::decode_name(CA::OGL::MetalContext::FragmentShader::Spec *this, const char *a2)
{
  uint64_t result;
  unint64_t v4;
  CA::OGL::MetalContext::FragmentShader::Spec *v5;
  _BYTE *v6[2];

  v6[1] = *(_BYTE **)MEMORY[0x1E0C80C00];
  v6[0] = a2;
  result = CA::OGL::MetalContext::decode_segment(v6, (uint64_t)this, byte_1E15A4300, 0x13u);
  if (CA::OGL::tex_image_count[*((_BYTE *)this + 14) & 0x7F])
  {
    v4 = 0;
    v5 = this;
    do
    {
      result = CA::OGL::MetalContext::decode_segment(v6, (uint64_t)v5, byte_1E15A4AE0, 8u);
      ++v4;
      v5 = (CA::OGL::MetalContext::FragmentShader::Spec *)((char *)v5 + 7);
    }
    while (v4 < CA::OGL::tex_image_count[*((_BYTE *)this + 14) & 0x7F]);
  }
  return result;
}

uint64_t CA::OGL::MetalContext::decode_segment(_BYTE **a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v9;
  uint64_t result;
  unsigned __int8 *v11;
  int *v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  unsigned __int8 *v26;
  int *v27;
  int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  int *v31;
  unsigned int v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  unsigned int v39;
  _BYTE *v40;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  int v44;
  uint64_t (**v46)(void);
  unsigned int *v47;
  unsigned int v48;
  uint64_t __dst;
  __int16 v50;
  uint64_t v51;

  v4 = a3;
  v5 = 0;
  v51 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  v7 = a3 + 24;
  do
  {
    v9 = (char)v4[72 * v5];
    if ((v9 & 0x80000000) != 0)
    {
      result = __maskrune(v9, 0x8000uLL);
      if (!(_DWORD)result)
        goto LABEL_10;
    }
    else
    {
      result = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v9 + 60) & 0x8000;
      if (!(_DWORD)result)
        goto LABEL_10;
    }
    if (!v4[72 * v5 + 1])
    {
      v11 = &v4[72 * v5];
      v13 = *((_DWORD *)v11 + 2);
      v12 = (int *)(v11 + 8);
      if (v13 >= 1)
      {
        v14 = 0;
        do
          result = (*(uint64_t (**)(uint64_t, _QWORD))&v7[8 * v14++])(a2, *(unsigned int *)&v4[72 * v5 + 12]);
        while (v14 < *v12);
      }
    }
LABEL_10:
    ++v5;
    v7 += 72;
  }
  while (v5 != v6);
  v15 = *a1;
  v42 = v4 + 24;
  v43 = v4;
  v16 = a2;
LABEL_12:
  while (1)
  {
    v17 = *v15;
    if (!*v15 || v17 == 95)
      break;
    v18 = 0;
    ++v15;
    v19 = v42;
    v44 = v17;
    do
    {
      if (v17 == v4[72 * v18])
      {
        v20 = MEMORY[0x1E0C80978];
        if (v4[72 * v18 + 1])
        {
          while (1)
          {
LABEL_17:
            v21 = (char)*v15;
            if ((v21 & 0x80000000) != 0)
            {
              if (__maskrune(v21, 0x8000uLL))
                break;
            }
            else if ((*(_DWORD *)(v20 + 4 * v21 + 60) & 0x8000) != 0)
            {
              break;
            }
            v22 = *v15;
            if (!*v15 || v22 == 95)
              break;
            v23 = 0;
            ++v15;
            v24 = v4;
            while (1)
            {
              v25 = *v24;
              v24 += 72;
              if (v22 == v25)
                break;
              if (v6 == ++v23)
                goto LABEL_17;
            }
            (*(void (**)(uint64_t, uint64_t))&v4[72 * v23 + 24])(v16, 1);
          }
        }
        else
        {
          v26 = &v4[72 * v18];
          v28 = *((_DWORD *)v26 + 2);
          v27 = (int *)(v26 + 8);
          if (v28 >= 1)
          {
            v29 = 0;
            v30 = &v4[72 * v18];
            v31 = (int *)(v30 + 4);
            v46 = (uint64_t (**)(void))(v30 + 16);
            v47 = (unsigned int *)(v30 + 12);
            do
            {
              v32 = *v47;
              v33 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v15, *v31, 4, 0);
              if (*v46)
                v34 = (void *)(*v46)();
              else
                v34 = 0;
              v35 = (void *)objc_msgSend(v34, "valueForKey:", v33);

              if (v35)
              {
                v36 = objc_msgSend(v35, "unsignedIntValue");
              }
              else
              {
                v50 = 0;
                __dst = 0;
                v48 = 0;
                v37 = *v31;
                memcpy(&__dst, v15, v37);
                *((_BYTE *)&__dst + v37) = 0;
                if (sscanf((const char *)&__dst, "%d", &v48) == 1)
                  v36 = v48;
                else
                  v36 = v32;
              }
              v16 = a2;
              (*(void (**)(uint64_t, uint64_t))&v19[8 * v29])(a2, v36);
              v15 += *v31;
              ++v29;
            }
            while (v29 < *v27);
          }
        }
      }
      ++v18;
      v19 += 72;
      v4 = v43;
      v17 = v44;
    }
    while (v18 != v6);
    v38 = MEMORY[0x1E0C80978];
    while (1)
    {
      v39 = (char)*v15;
      if ((v39 & 0x80000000) != 0)
      {
        result = __maskrune(v39, 0x8000uLL);
        if ((_DWORD)result)
          goto LABEL_12;
      }
      else
      {
        result = *(_DWORD *)(v38 + 4 * v39 + 60) & 0x8000;
        if ((_DWORD)result)
          goto LABEL_12;
      }
      if (!*v15 || *v15 == 95)
        break;
      ++v15;
    }
  }
  if (v17 == 95)
    v40 = v15 + 1;
  else
    v40 = v15;
  *a1 = v40;
  return result;
}

uint64_t CA::OGL::MetalContext::FragmentShader::Spec::decode_segment(char const**)::$_3::__invoke(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 0x9F | (32 * (a2 & 3));
  return result;
}

uint64_t CA::OGL::MetalContext::FragmentShader::Spec::decode_segment(char const**)::$_0::__invoke(uint64_t result, char a2)
{
  *(_BYTE *)(result + 14) = *(_BYTE *)(result + 14) & 0x80 | a2 & 0x7F;
  return result;
}

uint64_t CA::OGL::MetalContext::get_Opcode_decoder(CA::OGL::MetalContext *this)
{
  if (CA::OGL::MetalContext::get_Opcode_decoder(void)::once != -1)
    dispatch_once(&CA::OGL::MetalContext::get_Opcode_decoder(void)::once, &__block_literal_global_2028);
  return CA::OGL::MetalContext::get_Opcode_decoder(void)::decoder;
}

uint64_t CA::OGL::MetalContext::get_ImageFunction_decoder(CA::OGL::MetalContext *this)
{
  if (CA::OGL::MetalContext::get_ImageFunction_decoder(void)::once[0] != -1)
    dispatch_once(CA::OGL::MetalContext::get_ImageFunction_decoder(void)::once, &__block_literal_global_1906);
  return CA::OGL::MetalContext::get_ImageFunction_decoder(void)::decoder;
}

uint64_t CA::OGL::MetalContext::FragmentShader::Spec::decode_segment(char const**)::$_5::__invoke(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 0xE7 | (8 * (a2 & 3));
  return result;
}

uint64_t CA::OGL::MetalContext::FragmentShader::Spec::decode_segment(char const**)::$_4::__invoke(uint64_t result, char a2)
{
  *(_WORD *)(result + 17) = *(_WORD *)(result + 17) & 0xFFFC | a2 & 3;
  return result;
}

uint64_t CA::OGL::MetalContext::FragmentShader::Spec::decode_segment(char const**)::$_10::__invoke(uint64_t result, int a2)
{
  *(_WORD *)(result + 17) = *(_WORD *)(result + 17) & 0xFFBF | ((a2 != 0) << 6);
  return result;
}

uint64_t CA::OGL::MetalContext::FragmentShader::Spec::decode_segment(char const**)::$_9::__invoke(uint64_t result, int a2)
{
  *(_WORD *)(result + 17) = *(_WORD *)(result + 17) & 0xF7FF | ((a2 != 0) << 11);
  return result;
}

uint64_t CA::OGL::MetalContext::FragmentShader::Spec::decode_segment(char const**)::$_8::__invoke(uint64_t result, int a2)
{
  *(_WORD *)(result + 17) = *(_WORD *)(result + 17) & 0xFFDF | (32 * (a2 != 0));
  return result;
}

uint64_t CA::OGL::MetalContext::FragmentShader::Spec::decode_segment(char const**)::$_7::__invoke(uint64_t result, int a2)
{
  *(_WORD *)(result + 17) = *(_WORD *)(result + 17) & 0xFFEF | (16 * (a2 != 0));
  return result;
}

uint64_t CA::OGL::MetalContext::FragmentShader::Spec::decode_segment(char const**)::$_2::__invoke(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 0xF8 | a2 & 7;
  return result;
}

uint64_t CA::OGL::MetalContext::FragmentShader::Spec::decode_segment(char const**)::$_1::__invoke(uint64_t result, char a2)
{
  *(_BYTE *)(result + 15) = *(_BYTE *)(result + 15) & 0xC0 | a2 & 0x3F;
  return result;
}

uint64_t CA::OGL::MetalContext::get_TextureFunction_decoder(CA::OGL::MetalContext *this)
{
  if (CA::OGL::MetalContext::get_TextureFunction_decoder(void)::once[0] != -1)
    dispatch_once(CA::OGL::MetalContext::get_TextureFunction_decoder(void)::once, &__block_literal_global_1387);
  return CA::OGL::MetalContext::get_TextureFunction_decoder(void)::decoder;
}

uint64_t CA::OGL::MetalContext::get_MTLPixelFormat_decoder(CA::OGL::MetalContext *this)
{
  if (CA::OGL::MetalContext::get_MTLPixelFormat_decoder(void)::once != -1)
    dispatch_once(&CA::OGL::MetalContext::get_MTLPixelFormat_decoder(void)::once, &__block_literal_global_2147);
  return CA::OGL::MetalContext::get_MTLPixelFormat_decoder(void)::decoder;
}

void sub_184592590(_Unwind_Exception *a1)
{
  void *v1;

  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

void sub_18459276C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CA::OGL::MetalContext::get_BlendFunction_decoder(CA::OGL::MetalContext *this)
{
  if (CA::OGL::MetalContext::get_BlendFunction_decoder(void)::once != -1)
    dispatch_once(&CA::OGL::MetalContext::get_BlendFunction_decoder(void)::once, &__block_literal_global_1695);
  return CA::OGL::MetalContext::get_BlendFunction_decoder(void)::decoder;
}

uint64_t CA::OGL::MetalContext::get_CoordFunction_decoder(CA::OGL::MetalContext *this)
{
  if (CA::OGL::MetalContext::get_CoordFunction_decoder(void)::once != -1)
    dispatch_once(&CA::OGL::MetalContext::get_CoordFunction_decoder(void)::once, &__block_literal_global_1990);
  return CA::OGL::MetalContext::get_CoordFunction_decoder(void)::decoder;
}

uint64_t class_substitutions(void)
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v0 = objc_alloc(MEMORY[0x1E0C99D80]);
  v1 = objc_opt_class();
  v2 = objc_opt_class();
  v3 = objc_opt_class();
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v8 = objc_opt_class();
  v9 = objc_opt_class();
  return objc_msgSend(v0, "initWithObjectsAndKeys:", v1, CFSTR("LKState"), v2, CFSTR("LKStateAddAnimation"), v3, CFSTR("LKStateAddElement"), v4, CFSTR("LKStateElement"), v5, CFSTR("LKStateRemoveAnimation"), v6, CFSTR("LKStateRemoveElement"), v7, CFSTR("LKStateSetValue"), v8, CFSTR("LKStateSetProperty"), v9,
           CFSTR("LKStateTransition"),
           objc_opt_class(),
           CFSTR("LKStateTransitionElement"),
           0);
}

uint64_t CA::OGL::MetalContext::get_VertexLayout_decoder(CA::OGL::MetalContext *this)
{
  if (CA::OGL::MetalContext::get_VertexLayout_decoder(void)::once != -1)
    dispatch_once(&CA::OGL::MetalContext::get_VertexLayout_decoder(void)::once, &__block_literal_global_1821);
  return CA::OGL::MetalContext::get_VertexLayout_decoder(void)::decoder;
}

uint64_t CARenderServerRenderDisplayLayerWithTransformTimeOffsetAndFlags_(mach_port_t a1, const __CFString *a2, int a3, uint64_t a4, void *cf, int a6, int a7, __int128 *a8, double a9, int a10)
{
  CFTypeID v19;
  mach_port_t ServerPort;
  mach_port_t MachPort;
  uint64_t v22;
  double v23;
  double v24;
  int v25;
  mach_msg_size_t v27;
  char *v28;
  mach_port_t reply_port;
  mach_msg_return_t v30;
  int v31;
  uint64_t v32;
  BOOL v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char buffer[16];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  mach_msg_header_t msg;
  int v59;
  mach_port_t v60;
  __int128 v61;
  _OWORD v62[26];
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v19 = CFGetTypeID(cf);
  if (v19 != IOSurfaceGetTypeID())
    return 0;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  *(_OWORD *)buffer = 0u;
  v43 = 0u;
  if (!a2)
    return 0;
  if (!CFStringGetCString(a2, buffer, 256, 0x8000100u))
    return 0;
  ServerPort = a1;
  if (!a1)
  {
    ServerPort = CARenderServerGetServerPort(0);
    if (!ServerPort)
      return 0;
  }
  if ((a10 & 0x10) == 0)
    a4 = CA::Render::Object::render_id(*(CA::Render::Object **)(a4 + 16));
  v40 = a8[1];
  v41 = *a8;
  v38 = a8[3];
  v39 = a8[2];
  v36 = a8[5];
  v37 = a8[4];
  v34 = a8[7];
  v35 = a8[6];
  MachPort = IOSurfaceCreateMachPort((IOSurfaceRef)cf);
  v22 = mach_absolute_time();
  v23 = CATimeWithHostTime(v22);
  v63 = 0;
  v24 = v23 + a9;
  memset(v62, 0, sizeof(v62));
  v61 = 0u;
  memset(&msg, 0, sizeof(msg));
  v59 = 1;
  v60 = MachPort;
  DWORD1(v61) = 1245184;
  *((_QWORD *)&v61 + 1) = *MEMORY[0x1E0C804E8];
  if (MEMORY[0x1E0C84128])
    v25 = mig_strncpy_zerofill((char *)v62 + 8, buffer, 256);
  else
    v25 = mig_strncpy((char *)v62 + 8, buffer, 256);
  DWORD1(v62[0]) = v25;
  LODWORD(v62[0]) = 0;
  v27 = ((v25 + 3) & 0xFFFFFFFC) + 216;
  v28 = (char *)&msg + ((v25 + 3) & 0xFFFFFFFC);
  *((_DWORD *)v28 + 14) = a3;
  *(_QWORD *)(v28 + 60) = a4;
  *((_DWORD *)v28 + 17) = a6;
  *((_DWORD *)v28 + 18) = a7;
  *(double *)(v28 + 76) = v24;
  *(_OWORD *)(v28 + 84) = v41;
  *(_OWORD *)(v28 + 100) = v40;
  *(_OWORD *)(v28 + 116) = v39;
  *(_OWORD *)(v28 + 132) = v38;
  *(_OWORD *)(v28 + 148) = v37;
  *(_OWORD *)(v28 + 164) = v36;
  *(_OWORD *)(v28 + 180) = v35;
  *(_OWORD *)(v28 + 196) = v34;
  *((_DWORD *)v28 + 53) = a10;
  reply_port = mig_get_reply_port();
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  msg.msgh_remote_port = ServerPort;
  *(_QWORD *)&msg.msgh_voucher_port = 0x9D1E00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v30 = mach_msg(&msg, 3, v27, 0x34u, reply_port, 0, 0);
  v31 = v30;
  if ((v30 - 268435458) <= 0xE && ((1 << (v30 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    v32 = 0;
    goto LABEL_17;
  }
  if (v30)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    goto LABEL_40;
  }
  if (msg.msgh_id == 71)
  {
    v31 = -308;
  }
  else if (msg.msgh_id == 40322)
  {
    if ((msg.msgh_bits & 0x80000000) == 0)
    {
      if (msg.msgh_size == 44)
      {
        if (!msg.msgh_remote_port)
        {
          v31 = v61;
          if (!(_DWORD)v61)
          {
            v32 = *(_QWORD *)((char *)&v61 + 4);
LABEL_17:
            mach_port_deallocate(*MEMORY[0x1E0C83DA0], MachPort);
            if (a1)
              goto LABEL_19;
            goto LABEL_18;
          }
          goto LABEL_39;
        }
      }
      else if (msg.msgh_size == 36)
      {
        if (msg.msgh_remote_port)
          v33 = 1;
        else
          v33 = (_DWORD)v61 == 0;
        if (v33)
          v31 = -300;
        else
          v31 = v61;
        goto LABEL_39;
      }
    }
    v31 = -300;
  }
  else
  {
    v31 = -301;
  }
LABEL_39:
  mach_msg_destroy(&msg);
LABEL_40:
  mach_port_deallocate(*MEMORY[0x1E0C83DA0], MachPort);
  if (v31 == -81182719)
  {
    x_log_crash("Unentitled call to server!");
    abort();
  }
  v32 = 0;
  if (a1)
    goto LABEL_19;
LABEL_18:
  mach_port_deallocate(*MEMORY[0x1E0C83DA0], ServerPort);
LABEL_19:
  if (v31)
    return 0;
  else
    return v32;
}

void sub_184593484(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = v1 + 2;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (!v5)
    (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

_DWORD *point_vector_from_array(NSArray *a1)
{
  NSUInteger v2;
  NSUInteger v3;
  size_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  id v9;
  const char *v10;
  const double *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v2 = -[NSArray count](a1, "count");
  if (!v2)
    return 0;
  v3 = v2;
  v4 = 16 * v2;
  if (16 * v2 <= 0x1000)
  {
    MEMORY[0x1E0C80A78](v2);
    v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v5, v4);
    goto LABEL_5;
  }
  v5 = (char *)malloc_type_malloc(16 * v2, 0x3F1CD179uLL);
  if (!v5)
    return 0;
LABEL_5:
  v6 = 0;
  v7 = v5 + 8;
  v8 = (uint64_t *)MEMORY[0x1E0CB3430];
  do
  {
    v9 = -[NSArray objectAtIndex:](a1, "objectAtIndex:", v6);
    v10 = (const char *)objc_msgSend(v9, "objCType");
    if (v10 && !strcmp(v10, "{CGPoint=dd}"))
    {
      objc_msgSend(v9, "pointValue");
    }
    else
    {
      v12 = *v8;
      v13 = v8[1];
    }
    *(v7 - 1) = v12;
    *v7 = v13;
    ++v6;
    v7 += 2;
  }
  while (v3 != v6);
  v14 = CA::Render::Vector::new_vector((CA::Render::Vector *)(2 * v3), v5, v11);
  if (v4 > 0x1000)
    free(v5);
  return v14;
}

void sub_18459456C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *context)
{
  objc_autoreleasePoolPop(context);
  _Unwind_Resume(a1);
}

uint64_t CAML::Context::result(CAML::Context *this)
{
  xmlParserCtxt *v2;
  const void *v3;

  v2 = (xmlParserCtxt *)*((_QWORD *)this + 1);
  if (v2)
  {
    xmlParseChunk(v2, "", 0, 1);
    xmlFreeParserCtxt(*((xmlParserCtxtPtr *)this + 1));
    *((_QWORD *)this + 1) = 0;
    v3 = (const void *)*((_QWORD *)this + 9);
    if (v3)
    {
      CFRelease(v3);
      *((_QWORD *)this + 9) = 0;
    }
    CAML::Context::pop_state(this);
    (*(void (**)(CAML::Context *))(*(_QWORD *)this + 64))(this);
  }
  return *((_QWORD *)this + 5);
}

void CAML::Context::set_current_url(CAML::Context *this, CFTypeRef cf)
{
  const void *v4;

  v4 = (const void *)*((_QWORD *)this + 3);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 3) = 0;
  }
  if (cf)
    *((_QWORD *)this + 3) = CFRetain(cf);
}

void CAML::Context::set_base_url(CAML::Context *this, CFTypeRef cf)
{
  const void *v4;

  v4 = (const void *)*((_QWORD *)this + 2);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 2) = 0;
  }
  if (cf)
    *((_QWORD *)this + 2) = CFRetain(cf);
}

void sub_184594BF8(_Unwind_Exception *a1)
{
  void *v1;

  pthread_mutex_unlock(&parser_mutex);
  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

os_log_t ___ZN2CA11Transaction24bad_perf_signpost_handleEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreanimation", "Transaction.Stalls");
  CA::Transaction::bad_perf_signpost_handle(void)::handle = (uint64_t)result;
  return result;
}

float CAColorMatrixMakeColorSourceOver@<S0>(uint64_t a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>)
{
  float result;

  *(float *)a1 = 1.0 - a5;
  *(_QWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(float *)(a1 + 16) = a5 * a2;
  result = a5 * a3;
  *(_DWORD *)(a1 + 20) = 0;
  *(float *)(a1 + 24) = 1.0 - a5;
  *(_QWORD *)(a1 + 28) = 0;
  *(float *)(a1 + 36) = a5 * a3;
  *(_QWORD *)(a1 + 40) = 0;
  *(float *)(a1 + 48) = 1.0 - a5;
  *(_DWORD *)(a1 + 52) = 0;
  *(float *)(a1 + 56) = a5 * a4;
  *(_QWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(float *)(a1 + 72) = 1.0 - a5;
  *(float *)(a1 + 76) = a5;
  return result;
}

CA::Render **CA::Render::morph_paths(CA::Render **this, CA::Render **a2, CA::Render::Path *a3, float a4)
{
  CA::Render **v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  _DWORD *v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  float64x2_t v30;
  char v31;
  float64x2_t *v32;
  float64x2_t *v33;
  double v34;
  double v35;
  double v36;
  char *v37;
  double v38;
  char *v39;
  float64x2_t *v40;
  float64x2_t *v41;
  double v42;
  double v43;
  double v44;
  char *v45;
  double v46;
  float64x2_t *v47;
  float64x2_t *v48;
  double v49;
  double v50;
  double v51;
  char *v52;
  double v53;
  float64x2_t *v54;
  float64x2_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char v59;
  char v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  unint64_t v68;
  float64x2_t *v69;
  float64x2_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char v74;
  char v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  int v83;
  unsigned int v84;
  CA::Render::Path *v85;
  _BYTE *v86;
  unint64_t v87;
  BOOL v88;
  int v89;
  int v90;
  int v91;
  int v92;
  _DWORD *v93;
  char *v94;
  _BYTE *v95;
  uint64_t v96;
  BOOL v97;
  char *v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  char *v104;
  double v105;
  double v106;
  double v107;
  _DWORD *v108;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  float64x2_t v114;
  __int128 v115;
  uint64_t v116;

  v5 = this;
  v116 = *MEMORY[0x1E0C80C00];
  if (fabsf(a4) < 0.00001)
  {
    if (this)
    {
      v6 = (unsigned int *)(this + 1);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      if (!v7)
      {
        v5 = 0;
        do
          v8 = __ldaxr(v6);
        while (__stlxr(v8 - 1, v6));
      }
    }
    return v5;
  }
  if (fabsf(a4 + -1.0) < 0.00001)
  {
    if (!a2)
      return 0;
    v10 = (unsigned int *)(a2 + 1);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v5 = a2;
    if (!v11)
    {
      v5 = 0;
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 - 1, v10));
    }
    return v5;
  }
  v13 = CA::Render::spline_count(this[4], this[5]);
  v14 = CA::Render::spline_count(a2[4], a2[5]);
  if (v13 <= v14)
    v15 = v14;
  else
    v15 = v13;
  v16 = 72 * v13;
  v113 = v14;
  v17 = 72 * v14;
  if (72 * v13 > 0x1000)
  {
    v19 = (char *)malloc_type_malloc(72 * v13, 0x12C6E32DuLL);
    v18 = v19;
  }
  else
  {
    MEMORY[0x1E0C80A78](v14);
    v18 = (char *)&v110 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v18, 72 * v13);
  }
  v20 = 72 * v15;
  if (v17 > 0x1000)
  {
    v22 = (char *)malloc_type_malloc(v17, 0xFB73BA17uLL);
    v21 = v22;
  }
  else
  {
    MEMORY[0x1E0C80A78](v19);
    v21 = (char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v21, v17);
  }
  v111 = 72 * v15;
  v112 = v17;
  if (v20 > 0x1000)
  {
    v23 = (char *)malloc_type_malloc(72 * v15, 0xCA037FB8uLL);
  }
  else
  {
    MEMORY[0x1E0C80A78](v22);
    v23 = (char *)&v110 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v23, 72 * v15);
  }
  v24 = 0;
  if (!v18 || !v21 || !v23)
    goto LABEL_115;
  CA::Render::make_splines((__int128 *)v5[4], (unsigned __int8 *)v5[5], (unint64_t)v18);
  CA::Render::make_splines((__int128 *)a2[4], (unsigned __int8 *)a2[5], (unint64_t)v21);
  v26 = v113;
  if (v13 >= v113)
    v27 = v113;
  else
    v27 = v13;
  v110 = 72 * v13;
  if (v27)
  {
    v28 = 0;
    v29 = 0;
    *(double *)&v25 = a4;
    v115 = v25;
    v30 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a4), 0);
    v31 = 1;
    v114 = v30;
    do
    {
      if (v18[72 * v29 + 64] || v21[72 * v29 + 64])
      {
        if ((v31 & 1) != 0 && v18[72 * v29 + 65] && v21[72 * v29 + 65])
        {
          CA::Render::mix_splines((uint64_t)v23, (uint64_t)v18, (uint64_t)v21, v29, v28, a4);
          v30 = v114;
          ++v29;
          v31 = 1;
        }
        else
        {
          v32 = (float64x2_t *)&v18[72 * (int)v29];
          v33 = (float64x2_t *)&v21[72 * (int)v29];
          *(float64x2_t *)&v23[72 * (int)v29 + 16] = vmlaq_f64(v32[1], v30, vsubq_f64(v33[1], v32[1]));
          v34 = v32[2].f64[1];
          v35 = v33[2].f64[1];
          if (vabdd_f64(v34, v35) > 3.14159265)
          {
            if (v34 <= v35)
              v35 = v35 + -6.28318531;
            else
              v34 = v34 + -6.28318531;
          }
          v36 = *(double *)&v115;
          v37 = &v23[72 * (int)v29];
          *((double *)v37 + 5) = v34 + (v35 - v34) * *(double *)&v115;
          v38 = *(double *)&v18[72 * (int)v29 + 56];
          v39 = &v21[72 * (int)v29];
          *((double *)v37 + 7) = v38 + (*((double *)v39 + 7) - v38) * v36;
          *((_WORD *)v37 + 32) = *((_WORD *)v39 + 32);
          v40 = (float64x2_t *)&v18[72 * (int)v28];
          v41 = (float64x2_t *)&v21[72 * (int)v28];
          *(float64x2_t *)&v23[72 * (int)v28] = vmlaq_f64(*v40, v30, vsubq_f64(*v41, *v40));
          v42 = v40[2].f64[0];
          v43 = v41[2].f64[0];
          if (vabdd_f64(v42, v43) > 3.14159265)
          {
            if (v42 <= v43)
              v43 = v43 + -6.28318531;
            else
              v42 = v42 + -6.28318531;
          }
          v31 = 0;
          v44 = *(double *)&v115;
          v45 = &v23[72 * (int)v28];
          *((double *)v45 + 4) = v42 + (v43 - v42) * *(double *)&v115;
          v46 = *(double *)&v18[72 * (int)v28 + 48];
          *((double *)v45 + 6) = v46 + (*(double *)&v21[72 * (int)v28 + 48] - v46) * v44;
          ++v29;
        }
        v28 = v29;
      }
      else
      {
        CA::Render::mix_splines((uint64_t)v23, (uint64_t)v18, (uint64_t)v21, v29, v29 + 1, a4);
        v30 = v114;
        ++v29;
      }
    }
    while (v29 != v27);
    if (v28 >= v27)
    {
      v16 = v110;
      v26 = v113;
    }
    else
    {
      v47 = (float64x2_t *)&v18[72 * (int)v28];
      v48 = (float64x2_t *)&v21[72 * (int)v28];
      *(float64x2_t *)&v23[72 * (int)v28] = vmlaq_f64(*v47, v30, vsubq_f64(*v48, *v47));
      v49 = v47[2].f64[0];
      v50 = v48[2].f64[0];
      v16 = v110;
      if (vabdd_f64(v49, v50) > 3.14159265)
      {
        if (v49 <= v50)
          v50 = v50 + -6.28318531;
        else
          v49 = v49 + -6.28318531;
      }
      v26 = v113;
      v51 = *(double *)&v115;
      v52 = &v23[72 * (int)v28];
      *((double *)v52 + 4) = v49 + (v50 - v49) * *(double *)&v115;
      v53 = *(double *)&v18[72 * (int)v28 + 48];
      *((double *)v52 + 6) = v53 + (*(double *)&v21[72 * (int)v28 + 48] - v53) * v51;
    }
  }
  if (v27 < v13)
  {
    if (v26)
    {
      v54 = (float64x2_t *)&v21[72 * v27 - 56];
      v55 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a4), 0);
      do
      {
        v56 = 0;
        v57 = &v18[72 * v27];
        v58 = &v23[72 * v27];
        v59 = 1;
        do
        {
          v60 = v59;
          *(float64x2_t *)&v58[16 * v56] = vmlaq_f64(*(float64x2_t *)&v57[16 * v56], v55, vsubq_f64(*v54, *(float64x2_t *)&v57[16 * v56]));
          v61 = &v57[8 * v56];
          v62 = &v58[8 * v56];
          *((_QWORD *)v62 + 4) = *((_QWORD *)v61 + 4);
          *((double *)v62 + 6) = *((double *)v61 + 6) - *((double *)v61 + 6) * a4;
          v56 = 1;
          v59 = 0;
        }
        while ((v60 & 1) != 0);
        *(_WORD *)&v23[72 * v27 + 64] = *(_WORD *)&v18[72 * v27 + 64];
        ++v27;
      }
      while (v27 != v13);
    }
    else
    {
      v63 = &v23[72 * v27];
      v64 = &v18[72 * v27];
      do
      {
        *(_OWORD *)v63 = *(_OWORD *)v64;
        v65 = *((_OWORD *)v64 + 1);
        v66 = *((_OWORD *)v64 + 2);
        v67 = *((_OWORD *)v64 + 3);
        *((_WORD *)v63 + 32) = *((_WORD *)v64 + 32);
        *((_OWORD *)v63 + 2) = v66;
        *((_OWORD *)v63 + 3) = v67;
        *((_OWORD *)v63 + 1) = v65;
        ++v27;
        v63 += 72;
        v64 += 72;
      }
      while (v13 != v27);
    }
    v27 = v13;
  }
  v68 = v26 - v27;
  if (v26 > v27)
  {
    if (v13)
    {
      v69 = (float64x2_t *)&v18[72 * v27 - 56];
      v70 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a4), 0);
      do
      {
        v71 = 0;
        v72 = &v21[72 * v27];
        v73 = &v23[72 * v27];
        v74 = 1;
        do
        {
          v75 = v74;
          *(float64x2_t *)&v73[16 * v71] = vmlaq_f64(*v69, v70, vsubq_f64(*(float64x2_t *)&v72[16 * v71], *v69));
          v76 = &v72[8 * v71];
          v77 = &v73[8 * v71];
          *((_QWORD *)v77 + 4) = *((_QWORD *)v76 + 4);
          *((double *)v77 + 6) = *((double *)v76 + 6) * a4;
          v71 = 1;
          v74 = 0;
        }
        while ((v75 & 1) != 0);
        *(_WORD *)&v23[72 * v27 + 64] = *(_WORD *)&v21[72 * v27 + 64];
        ++v27;
      }
      while (v27 != v26);
    }
    else
    {
      v78 = &v23[72 * v27];
      v79 = &v21[72 * v27];
      do
      {
        *(_OWORD *)v78 = *(_OWORD *)v79;
        v80 = *((_OWORD *)v79 + 1);
        v81 = *((_OWORD *)v79 + 2);
        v82 = *((_OWORD *)v79 + 3);
        *((_WORD *)v78 + 32) = *((_WORD *)v79 + 32);
        *((_OWORD *)v78 + 2) = v81;
        *((_OWORD *)v78 + 3) = v82;
        *((_OWORD *)v78 + 1) = v80;
        v78 += 72;
        v79 += 72;
        --v68;
      }
      while (v68);
    }
  }
  if (v15)
  {
    v83 = 0;
    v84 = 0;
    LODWORD(v85) = 0;
    v86 = v23 + 65;
    v87 = v15;
    v88 = 1;
    do
    {
      if (*(double *)(v86 - 17) == 0.0 && *(double *)(v86 - 9) == 0.0)
        v89 = 1;
      else
        v89 = 3;
      v90 = v88;
      v91 = (_DWORD)v85 + v90;
      v84 += v90 + v89;
      if (*v86)
        v92 = 2;
      else
        v92 = 1;
      v85 = (CA::Render::Path *)(v91 + v92);
      v83 += v92;
      v88 = *(v86 - 1) != 0;
      v86 += 72;
      --v87;
    }
    while (v87);
    v93 = CA::Render::Path::new_path(v85, v84, v83);
    v24 = v93;
    if (!v93)
    {
LABEL_115:
      if (v23 && v111 > 0x1000)
        free(v23);
      goto LABEL_118;
    }
    v94 = v23 + 32;
    v96 = *((_QWORD *)v93 + 4);
    v95 = (_BYTE *)*((_QWORD *)v93 + 5);
    v97 = 1;
    do
    {
      v98 = v94 - 32;
      if (v97)
      {
        *v95++ = 1;
        *(_OWORD *)v96 = *(_OWORD *)v98;
        v96 += 16;
      }
      if (*((double *)v94 + 2) == 0.0 && *((double *)v94 + 3) == 0.0)
      {
        *v95 = 2;
        *(_OWORD *)v96 = *((_OWORD *)v94 - 1);
        v96 += 16;
      }
      else
      {
        *v95 = 4;
        v99 = *((double *)v94 + 2);
        if (v99 == 0.0)
        {
          *(_OWORD *)v96 = *(_OWORD *)v98;
        }
        else
        {
          v100 = *((double *)v94 - 4);
          *(long double *)v96 = v100 + cos(*(long double *)v94) * v99;
          v101 = *((double *)v94 - 3);
          v102 = *((double *)v94 + 2);
          *(long double *)(v96 + 8) = v101 + sin(*(long double *)v94) * v102;
        }
        v103 = *((double *)v94 + 3);
        v104 = v94 - 16;
        if (v103 == 0.0)
        {
          *(_OWORD *)(v96 + 16) = *(_OWORD *)v104;
        }
        else
        {
          v105 = *((double *)v94 - 2);
          *(long double *)(v96 + 16) = v105 + cos(*((long double *)v94 + 1)) * v103;
          v106 = *((double *)v94 - 1);
          v107 = *((double *)v94 + 3);
          *(long double *)(v96 + 24) = v106 + sin(*((long double *)v94 + 1)) * v107;
        }
        *(_OWORD *)(v96 + 32) = *(_OWORD *)v104;
        v96 += 48;
      }
      if (v94[33])
      {
        v95[1] = 0;
        v95 += 2;
      }
      else
      {
        ++v95;
      }
      v97 = v94[32] != 0;
      v94 += 72;
      --v15;
    }
    while (v15);
    v16 = v110;
LABEL_114:
    *v95 = 5;
    goto LABEL_115;
  }
  v108 = CA::Render::Path::new_path(0, 0, 0);
  v24 = v108;
  if (v108)
  {
    v95 = (_BYTE *)*((_QWORD *)v108 + 5);
    goto LABEL_114;
  }
LABEL_118:
  if (v21 && v112 > 0x1000)
    free(v21);
  if (v16 > 0x1000 && v18)
    free(v18);
  return (CA::Render **)v24;
}

uint64_t CA::Render::mix_splines(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, float a6)
{
  float64x2_t *v6;
  double v7;
  float64x2_t *v8;
  float64x2_t *v9;
  float64x2_t *v10;
  float64x2_t v11;
  double *v12;
  double v13;
  uint64_t v14;
  double *v15;
  float64_t v16;
  uint64_t v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;

  v6 = (float64x2_t *)(a2 + 72 * a4);
  v7 = a6;
  v8 = (float64x2_t *)(a3 + 72 * a4);
  v9 = (float64x2_t *)(result + 72 * a5);
  v10 = (float64x2_t *)(result + 72 * a4);
  v11 = vmlaq_n_f64(v6[1], vsubq_f64(v8[1], v6[1]), v7);
  *v9 = v11;
  v10[1] = v11;
  v13 = v8[3].f64[1];
  v12 = &v8[3].f64[1];
  v10[3].f64[1] = v6[3].f64[1] + (v13 - v6[3].f64[1]) * v7;
  v14 = a2 + 72 * a5;
  v16 = *(double *)(v14 + 48);
  v15 = (double *)(v14 + 48);
  v11.f64[0] = v16;
  v17 = a3 + 72 * a5;
  v19 = *(double *)(v17 + 48);
  v18 = (double *)(v17 + 48);
  v9[3].f64[0] = v11.f64[0] + (v19 - v11.f64[0]) * v7;
  if (v6[3].f64[1] == 0.0)
  {
    v20 = *(double *)(a3 + 72 * a4 + 40);
  }
  else
  {
    v20 = *(double *)(a2 + 72 * a4 + 40);
    if (*v12 != 0.0)
    {
      v21 = *(double *)(a3 + 72 * a4 + 40);
      if (vabdd_f64(v20, v21) > 3.14159265)
      {
        if (v20 <= v21)
          v21 = v21 + -6.28318531;
        else
          v20 = v20 + -6.28318531;
      }
      v20 = v20 + (v21 - v20) * v7;
    }
  }
  *(double *)(result + 72 * a4 + 40) = v20;
  if (*v15 == 0.0)
  {
    v22 = *(double *)(a3 + 72 * a5 + 32);
  }
  else
  {
    v22 = *(double *)(a2 + 72 * a5 + 32);
    if (*v18 != 0.0)
    {
      v23 = *(double *)(a3 + 72 * a5 + 32);
      if (vabdd_f64(v22, v23) > 3.14159265)
      {
        if (v22 <= v23)
          v23 = v23 + -6.28318531;
        else
          v22 = v22 + -6.28318531;
      }
      v22 = v22 + (v23 - v22) * v7;
    }
  }
  *(double *)(result + 72 * a5 + 32) = v22;
  *(_WORD *)(result + 72 * a4 + 64) = *(_WORD *)(a3 + 72 * a4 + 64);
  return result;
}

void CA::Render::`anonymous namespace'::PathAccumulator::push_moveto(unint64_t *a1, _OWORD *a2)
{
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  char v15;
  unint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  unint64_t v26;
  char *v27;
  char *v28;

  v5 = (_BYTE *)a1[1];
  v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = &v5[-*a1];
    v9 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) < 0)
      goto LABEL_36;
    v10 = v4 - v7;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (unint64_t)operator new(v11);
    else
      v12 = 0;
    v13 = (char *)(v12 + v11);
    v8[v12] = 1;
    v6 = (uint64_t)&v8[v12 + 1];
    if (v5 == (_BYTE *)v7)
    {
      v12 += (unint64_t)v8;
    }
    else
    {
      v14 = &v5[~v7];
      do
      {
        v15 = *--v5;
        (v14--)[v12] = v15;
      }
      while (v5 != (_BYTE *)v7);
      v5 = (_BYTE *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = 1;
    v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
  v17 = (_OWORD *)a1[4];
  v16 = a1[5];
  if ((unint64_t)v17 < v16)
  {
    *v17 = *a2;
    v18 = v17 + 1;
    goto LABEL_35;
  }
  v19 = a1[3];
  v20 = (uint64_t)((uint64_t)v17 - v19) >> 4;
  v21 = v20 + 1;
  if ((unint64_t)(v20 + 1) >> 60)
LABEL_36:
    abort();
  v22 = v16 - v19;
  if (v22 >> 3 > v21)
    v21 = v22 >> 3;
  if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
    v23 = 0xFFFFFFFFFFFFFFFLL;
  else
    v23 = v21;
  if (v23)
    v23 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Render::MeshFace>>(v23);
  else
    v24 = 0;
  v25 = (_OWORD *)(v23 + 16 * v20);
  v26 = v23 + 16 * v24;
  *v25 = *a2;
  v18 = v25 + 1;
  v28 = (char *)a1[3];
  v27 = (char *)a1[4];
  if (v27 != v28)
  {
    do
    {
      *--v25 = *((_OWORD *)v27 - 1);
      v27 -= 16;
    }
    while (v27 != v28);
    v27 = (char *)a1[3];
  }
  a1[3] = (unint64_t)v25;
  a1[4] = (unint64_t)v18;
  a1[5] = v26;
  if (v27)
    operator delete(v27);
LABEL_35:
  a1[4] = (unint64_t)v18;
}

double *CA::Render::Path::copy_subpath(CA::Render::Path *this, double a2, double a3)
{
  double *v6;
  double v7;
  float64x2_t *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  unsigned __int8 *v15;
  double v16;
  int v17;
  __int128 v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  _BYTE *v26;
  _BYTE *v27;
  void *v28;
  void *__p[2];
  __int128 v31;
  __int128 v32;
  _OWORD v33[4];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = CA::Render::Path::keyframe_lengths(this);
  if (!v6)
    return v6;
  if (!*((_QWORD *)this + 8))
    CA::Render::Path::keyframe_lengths(this);
  v7 = *((double *)this + 9);
  v8 = (float64x2_t *)*((_QWORD *)this + 4);
  v9 = (unsigned __int8 *)*((_QWORD *)this + 5);
  v10 = *((unsigned int *)this + 5);
  v32 = 0u;
  memset(v33, 0, sizeof(v33));
  *(_OWORD *)__p = 0u;
  v31 = 0u;
  *(_OWORD *)((char *)&v33[1] + 8) = *MEMORY[0x1E0C9D5E0];
  *(_OWORD *)((char *)&v33[2] + 8) = *(_OWORD *)((char *)&v33[1] + 8);
  v11 = 1;
  if ((_DWORD)v10)
  {
    v12 = 0;
    v13 = v7 * a2;
    v14 = v7 * a3;
    v15 = &v9[v10];
    v16 = 0.0;
    do
    {
      v17 = *v9;
      if (v17 == 1)
      {
        *(float64x2_t *)((char *)v33 + 8) = *v8;
        v18 = (__int128)*v8++;
        *(_OWORD *)((char *)&v33[1] + 8) = v18;
        BYTE8(v33[3]) = 1;
      }
      else
      {
        v19 = v6[v12];
        v20 = 0.0;
        if (v13 > v16)
          v20 = (v13 - v16) / v19;
        if (v14 >= v19 + v16)
        {
        }
        else
        {
          v21 = (v14 - v16) / v19;
          if (v21 < 1.0)
            break;
        }
        v8 += CA::Render::path_counts[*v9];
        v22 = v6[v12++];
        v16 = v22 + v16;
      }
      ++v9;
    }
    while (v9 < v15);
    v23 = v33[0];
    v11 = (LODWORD(__p[1]) - LODWORD(__p[0]) + 1);
    v24 = ((_QWORD)v32 - *((_QWORD *)&v31 + 1)) >> 4;
  }
  else
  {
    v23 = 0;
    LODWORD(v24) = 0;
  }
  v25 = CA::Render::Path::new_path((CA::Render::Path *)v11, v24, v23);
  v6 = (double *)v25;
  if (v25)
  {
    v26 = __p[0];
    if (__p[1] == __p[0])
    {
      v27 = __p[0];
    }
    else
    {
      memmove(*((void **)v25 + 5), __p[0], (char *)__p[1] - (char *)__p[0]);
      v26 = __p[0];
      v27 = __p[1];
    }
    *(_BYTE *)(*((_QWORD *)v6 + 5) + v27 - v26) = 5;
    v28 = (void *)*((_QWORD *)&v31 + 1);
    if ((_QWORD)v32 == *((_QWORD *)&v31 + 1))
      goto LABEL_25;
    memmove(*((void **)v6 + 4), *((const void **)&v31 + 1), v32 - *((_QWORD *)&v31 + 1));
  }
  v28 = (void *)*((_QWORD *)&v31 + 1);
LABEL_25:
  if (v28)
  {
    *(_QWORD *)&v32 = v28;
    operator delete(v28);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v6;
}

void CA::Render::`anonymous namespace'::PathAccumulator::add_segment(uint64_t a1, int a2, float64x2_t *a3, double a4, double a5)
{
  double v9;
  double v10;
  __int128 *v11;
  double v12;
  __int128 *v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  __int128 *v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  _OWORD *v28;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v48;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v56;
  float64x2_t v57;
  unint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  unint64_t v64;
  unint64_t v65;
  size_t v66;
  _BYTE *v67;
  unint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  char *v71;
  _BYTE *v72;
  char v73;
  double v74;
  double v75;
  double v76;
  unint64_t v77;
  double *v78;
  double *v79;
  double *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  double *v86;
  unint64_t v87;
  uint64_t v88;
  __int128 v89;
  unint64_t v90;
  _BYTE *v91;
  unint64_t v92;
  unint64_t v93;
  size_t v94;
  _BYTE *v95;
  unint64_t v96;
  _BYTE *v97;
  unint64_t v98;
  unint64_t v99;
  size_t v100;
  _BYTE *v101;
  char *v102;
  _BYTE *v103;
  char v104;
  char *v105;
  _BYTE *v106;
  char v107;
  unint64_t v108;
  float64x2_t *v109;
  float64x2_t *v110;
  float64x2_t *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  unint64_t v118;
  float64x2_t *v119;
  _OWORD *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  float64x2_t *v127;
  char *v128;
  float64x2_t *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  float64x2_t *v136;
  unint64_t v137;
  float64x2_t *v138;
  float64x2_t *v139;
  _OWORD *v140;
  unint64_t v141;
  _OWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  float64x2_t *v149;
  _OWORD *f64;
  _BYTE *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  _OWORD *v158;
  unint64_t v159;
  char *v160;
  char *v161;
  _OWORD *v162;
  unint64_t v163;
  _OWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  float64x2_t *v171;
  unint64_t v172;
  _OWORD *v173;
  unint64_t v174;
  char *v175;
  char *v176;
  float64x2_t v177;
  float64x2_t v178;
  double v179;
  float64x2_t v180;
  _OWORD v181[3];
  uint64_t v182;

  v182 = *MEMORY[0x1E0C80C00];
  v9 = fmax(a4, 0.0);
  v10 = fmin(a5, 1.0);
  if (*(_BYTE *)(a1 + 104))
  {
    *(_BYTE *)(a1 + 105) = a4 > 0.0;
    *(_BYTE *)(a1 + 104) = 0;
  }
  if (v9 < v10)
  {
    switch(a2)
    {
      case 0:
      case 2:
        v179 = v10;
        v11 = (__int128 *)(a1 + 72);
        v12 = *(double *)(a1 + 72);
        v13 = (__int128 *)(a1 + 56);
        if (a2)
          v14 = (double *)a3;
        else
          v14 = (double *)(a1 + 56);
        v15 = *v14 - v12;
        v16 = *(double *)(a1 + 80);
        v17 = v14[1] - v16;
        v18 = v12 + v15 * v9;
        v19 = v16 + v17 * v9;
        *(double *)v181 = v18;
        *((double *)v181 + 1) = v19;
        v20 = (__int128 *)(a1 + 88);
        if (*(double *)(a1 + 88) != v18 || *(double *)(a1 + 96) != v19)
        v22 = *(_BYTE **)(a1 + 8);
        v21 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v22 >= v21)
        {
          v62 = *(_QWORD *)a1;
          v63 = &v22[-*(_QWORD *)a1];
          v64 = (unint64_t)(v63 + 1);
          if ((uint64_t)(v63 + 1) < 0)
            goto LABEL_205;
          v65 = v21 - v62;
          if (2 * v65 > v64)
            v64 = 2 * v65;
          if (v65 >= 0x3FFFFFFFFFFFFFFFLL)
            v66 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v66 = v64;
          if (v66)
            v67 = operator new(v66);
          else
            v67 = 0;
          v71 = &v67[v66];
          v63[(_QWORD)v67] = 2;
          v23 = (uint64_t)&v63[(_QWORD)v67 + 1];
          if (v22 == (_BYTE *)v62)
          {
            v67 = &v63[(_QWORD)v67];
          }
          else
          {
            v72 = &v22[~v62];
            do
            {
              v73 = *--v22;
              (v72--)[(_QWORD)v67] = v73;
            }
            while (v22 != (_BYTE *)v62);
            v22 = *(_BYTE **)a1;
          }
          *(_QWORD *)a1 = v67;
          *(_QWORD *)(a1 + 8) = v23;
          *(_QWORD *)(a1 + 16) = v71;
          if (v22)
            operator delete(v22);
        }
        else
        {
          *v22 = 2;
          v23 = (uint64_t)(v22 + 1);
        }
        v74 = v179;
        v75 = v12 + v15 * v179;
        v76 = v16 + v17 * v179;
        *(_QWORD *)(a1 + 8) = v23;
        v78 = *(double **)(a1 + 32);
        v77 = *(_QWORD *)(a1 + 40);
        if ((unint64_t)v78 < v77)
        {
          *v78 = v75;
          v78[1] = v76;
          v79 = v78 + 2;
LABEL_69:
          *(_QWORD *)(a1 + 32) = v79;
          *(double *)(a1 + 72) = v75;
          *(double *)(a1 + 80) = v76;
          *v20 = *v11;
          if (!a2 && v74 == 1.0 && !*(_BYTE *)(a1 + 105))
          {
            v88 = *(_QWORD *)(a1 + 8);
            if (v88 != *(_QWORD *)a1)
            {
              if (*(_BYTE *)(*(_QWORD *)a1 + ~*(_QWORD *)a1 + v88))
              {
                std::vector<unsigned char>::push_back[abi:nn180100]((unint64_t *)a1, 0);
                v89 = *v13;
                *v11 = *v13;
                *v20 = v89;
              }
            }
          }
          return;
        }
        v80 = *(double **)(a1 + 24);
        v81 = ((char *)v78 - (char *)v80) >> 4;
        v82 = v81 + 1;
        if (!((unint64_t)(v81 + 1) >> 60))
        {
          v83 = v77 - (_QWORD)v80;
          if (v83 >> 3 > v82)
            v82 = v83 >> 3;
          _CF = (unint64_t)v83 >= 0x7FFFFFFFFFFFFFF0;
          v84 = 0xFFFFFFFFFFFFFFFLL;
          if (!_CF)
            v84 = v82;
          if (v84)
          {
            v84 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Render::MeshFace>>(v84);
            v80 = *(double **)(a1 + 24);
            v78 = *(double **)(a1 + 32);
          }
          else
          {
            v85 = 0;
          }
          v86 = (double *)(v84 + 16 * v81);
          v87 = v84 + 16 * v85;
          *v86 = v75;
          v86[1] = v76;
          v79 = v86 + 2;
          if (v78 != v80)
          {
            do
            {
              *((_OWORD *)v86 - 1) = *((_OWORD *)v78 - 1);
              v86 -= 2;
              v78 -= 2;
            }
            while (v78 != v80);
            v80 = *(double **)(a1 + 24);
          }
          *(_QWORD *)(a1 + 24) = v86;
          *(_QWORD *)(a1 + 32) = v79;
          *(_QWORD *)(a1 + 40) = v87;
          if (v80)
            operator delete(v80);
          v74 = v179;
          goto LABEL_69;
        }
        goto LABEL_205;
      case 3:
        v25 = vaddq_f64(*a3, *a3);
        v26 = (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL);
        v27 = vmulq_f64(vaddq_f64(a3[1], v25), v26);
        v181[0] = vmulq_f64(vaddq_f64(*(float64x2_t *)(a1 + 72), v25), v26);
        v181[1] = v27;
        v181[2] = a3[1];
        return;
      case 4:
        v28 = (_OWORD *)(a1 + 72);
        if (v9 != 0.0 || v10 != 1.0)
        {
          v181[0] = *v28;
          v30 = *a3;
          v31 = a3[1];
          v32 = a3[2];
          v33.f64[0] = *(float64_t *)v181;
          if (fabs(v9) > 0.001)
          {
            v34 = vsubq_f64(v31, v30);
            v35 = vsubq_f64(v32, v31);
            v33.f64[1] = *((float64_t *)v181 + 1);
            __asm { FMOV            V6.2D, #-2.0 }
            v40 = vsubq_f64(v30, v33);
            v41 = vaddq_f64(v30, v30);
            v30 = vmlsq_lane_f64(v32, vmlaq_n_f64(vaddq_f64(v35, v35), vsubq_f64(vnegq_f64(vmlaq_f64(v30, _Q6, v31)), v32), 1.0 - v9), 1.0 - v9, 0);
            v42 = vsubq_f64(v31, v41);
            v43 = vmlsq_lane_f64(v32, v35, 1.0 - v9, 0);
            __asm { FMOV            V4.2D, #3.0 }
            v45 = vmulq_f64(v40, _Q4);
            v46 = vmulq_f64(vaddq_f64(v42, v33), _Q4);
            __asm { FMOV            V6.2D, #-3.0 }
            v33 = vmlaq_n_f64(v33, vmlaq_n_f64(v45, vmlaq_n_f64(v46, vsubq_f64(vmlaq_f64(v32, _Q6, v34), v33), v9), v9), v9);
            v181[0] = v33;
            v10 = (v10 - v9) / (1.0 - v9);
            v31 = v43;
          }
          if (fabs(v10 + -1.0) > 0.001)
          {
            v48 = vsubq_f64(v31, v30);
            __asm { FMOV            V2.2D, #-2.0 }
            v50.f64[0] = v33.f64[0];
            v50.f64[1] = *((float64_t *)v181 + 1);
            v51 = vsubq_f64(v30, v50);
            v52 = vmlaq_f64(v50, _Q2, v30);
            v53 = vmlaq_n_f64(v50, v51, v10);
            v54 = vaddq_f64(v52, v31);
            v31 = vmlaq_n_f64(v50, vmlaq_n_f64(vaddq_f64(v51, v51), v54, v10), v10);
            __asm { FMOV            V6.2D, #3.0 }
            v56 = vmulq_f64(v51, _Q6);
            v57 = vmulq_f64(v54, _Q6);
            __asm { FMOV            V6.2D, #-3.0 }
            v32 = vmlaq_n_f64(v50, vmlaq_n_f64(v56, vmlaq_n_f64(v57, vsubq_f64(vmlaq_f64(v32, _Q6, v48), v50), v10), v10), v10);
            v30 = v53;
          }
          v178 = v31;
          v180 = v32;
          v177 = v30;
          if (*(double *)(a1 + 88) != v33.f64[0] || *(double *)(a1 + 96) != *((double *)v181 + 1))
          {
            v30 = v177;
            v31 = v178;
            v32 = v180;
          }
          v60 = *(_BYTE **)(a1 + 8);
          v59 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)v60 >= v59)
          {
            v90 = *(_QWORD *)a1;
            v91 = &v60[-*(_QWORD *)a1];
            v92 = (unint64_t)(v91 + 1);
            if ((uint64_t)(v91 + 1) < 0)
              goto LABEL_205;
            v93 = v59 - v90;
            if (2 * v93 > v92)
              v92 = 2 * v93;
            if (v93 >= 0x3FFFFFFFFFFFFFFFLL)
              v94 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v94 = v92;
            if (v94)
              v95 = operator new(v94);
            else
              v95 = 0;
            v102 = &v95[v94];
            v91[(_QWORD)v95] = 4;
            v61 = (uint64_t)&v91[(_QWORD)v95 + 1];
            if (v60 == (_BYTE *)v90)
            {
              v95 = &v91[(_QWORD)v95];
            }
            else
            {
              v103 = &v60[~v90];
              do
              {
                v104 = *--v60;
                (v103--)[(_QWORD)v95] = v104;
              }
              while (v60 != (_BYTE *)v90);
              v60 = *(_BYTE **)a1;
            }
            *(_QWORD *)a1 = v95;
            *(_QWORD *)(a1 + 8) = v61;
            *(_QWORD *)(a1 + 16) = v102;
            if (v60)
              operator delete(v60);
            v31 = v178;
            v32 = v180;
            v30 = v177;
          }
          else
          {
            *v60 = 4;
            v61 = (uint64_t)(v60 + 1);
          }
          *(_QWORD *)(a1 + 8) = v61;
          v109 = *(float64x2_t **)(a1 + 32);
          v108 = *(_QWORD *)(a1 + 40);
          if ((unint64_t)v109 >= v108)
          {
            v111 = *(float64x2_t **)(a1 + 24);
            v112 = v109 - v111;
            v113 = v112 + 1;
            if ((unint64_t)(v112 + 1) >> 60)
              goto LABEL_205;
            v114 = v108 - (_QWORD)v111;
            if (v114 >> 3 > v113)
              v113 = v114 >> 3;
            _CF = (unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0;
            v115 = 0xFFFFFFFFFFFFFFFLL;
            if (!_CF)
              v115 = v113;
            if (v115)
            {
              v116 = std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Render::MeshFace>>(v115);
              v30 = v177;
              v115 = (unint64_t)v116;
              v111 = *(float64x2_t **)(a1 + 24);
              v109 = *(float64x2_t **)(a1 + 32);
            }
            else
            {
              v117 = 0;
            }
            v127 = (float64x2_t *)(v115 + 16 * v112);
            v108 = v115 + 16 * v117;
            *v127 = v30;
            v110 = v127 + 1;
            if (v109 != v111)
            {
              do
              {
                v127[-1] = v109[-1];
                --v127;
                --v109;
              }
              while (v109 != v111);
              v111 = *(float64x2_t **)(a1 + 24);
            }
            *(_QWORD *)(a1 + 24) = v127;
            *(_QWORD *)(a1 + 32) = v110;
            *(_QWORD *)(a1 + 40) = v108;
            if (v111)
            {
              operator delete(v111);
              v108 = *(_QWORD *)(a1 + 40);
            }
            v31 = v178;
            v32 = v180;
          }
          else
          {
            *v109 = v30;
            v110 = v109 + 1;
          }
          *(_QWORD *)(a1 + 32) = v110;
          if ((unint64_t)v110 >= v108)
          {
            v129 = *(float64x2_t **)(a1 + 24);
            v130 = v110 - v129;
            v131 = v130 + 1;
            if ((unint64_t)(v130 + 1) >> 60)
              goto LABEL_205;
            v132 = v108 - (_QWORD)v129;
            if (v132 >> 3 > v131)
              v131 = v132 >> 3;
            _CF = (unint64_t)v132 >= 0x7FFFFFFFFFFFFFF0;
            v133 = 0xFFFFFFFFFFFFFFFLL;
            if (!_CF)
              v133 = v131;
            if (v133)
            {
              v134 = std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Render::MeshFace>>(v133);
              v31 = v178;
              v133 = (unint64_t)v134;
              v129 = *(float64x2_t **)(a1 + 24);
              v110 = *(float64x2_t **)(a1 + 32);
            }
            else
            {
              v135 = 0;
            }
            v149 = (float64x2_t *)(v133 + 16 * v130);
            v108 = v133 + 16 * v135;
            *v149 = v31;
            v128 = (char *)&v149[1];
            if (v110 != v129)
            {
              do
              {
                v149[-1] = v110[-1];
                --v149;
                --v110;
              }
              while (v110 != v129);
              v129 = *(float64x2_t **)(a1 + 24);
            }
            *(_QWORD *)(a1 + 24) = v149;
            *(_QWORD *)(a1 + 32) = v128;
            *(_QWORD *)(a1 + 40) = v108;
            if (v129)
            {
              operator delete(v129);
              v108 = *(_QWORD *)(a1 + 40);
            }
            v32 = v180;
          }
          else
          {
            *v110 = v31;
            v128 = (char *)&v110[1];
          }
          *(_QWORD *)(a1 + 32) = v128;
          if ((unint64_t)v128 < v108)
          {
            *(float64x2_t *)v128 = v32;
            f64 = v128 + 16;
LABEL_197:
            *(_QWORD *)(a1 + 32) = f64;
            *(float64x2_t *)(a1 + 72) = v32;
            *(_OWORD *)(a1 + 88) = *v28;
            return;
          }
          v151 = *(_BYTE **)(a1 + 24);
          v152 = (v128 - v151) >> 4;
          v153 = v152 + 1;
          if (!((unint64_t)(v152 + 1) >> 60))
          {
            v154 = v108 - (_QWORD)v151;
            if (v154 >> 3 > v153)
              v153 = v154 >> 3;
            _CF = (unint64_t)v154 >= 0x7FFFFFFFFFFFFFF0;
            v155 = 0xFFFFFFFFFFFFFFFLL;
            if (!_CF)
              v155 = v153;
            if (v155)
            {
              v156 = std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Render::MeshFace>>(v155);
              v32 = v180;
              v155 = (unint64_t)v156;
              v151 = *(_BYTE **)(a1 + 24);
              v128 = *(char **)(a1 + 32);
            }
            else
            {
              v157 = 0;
            }
            v171 = (float64x2_t *)(v155 + 16 * v152);
            v172 = v155 + 16 * v157;
            *v171 = v32;
            f64 = (_OWORD *)v171[1].f64;
            if (v128 != v151)
            {
              do
              {
                v171[-1] = *((float64x2_t *)v128 - 1);
                --v171;
                v128 -= 16;
              }
              while (v128 != v151);
              v151 = *(_BYTE **)(a1 + 24);
            }
            *(_QWORD *)(a1 + 24) = v171;
            *(_QWORD *)(a1 + 32) = f64;
            *(_QWORD *)(a1 + 40) = v172;
            if (v151)
            {
              operator delete(v151);
              v32 = v180;
            }
            goto LABEL_197;
          }
LABEL_205:
          abort();
        }
        if (*(double *)(a1 + 88) != *(double *)(a1 + 72) || *(double *)(a1 + 96) != *(double *)(a1 + 80))
        v69 = *(_BYTE **)(a1 + 8);
        v68 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v69 >= v68)
        {
          v96 = *(_QWORD *)a1;
          v97 = &v69[-*(_QWORD *)a1];
          v98 = (unint64_t)(v97 + 1);
          if ((uint64_t)(v97 + 1) < 0)
            goto LABEL_205;
          v99 = v68 - v96;
          if (2 * v99 > v98)
            v98 = 2 * v99;
          if (v99 >= 0x3FFFFFFFFFFFFFFFLL)
            v100 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v100 = v98;
          if (v100)
            v101 = operator new(v100);
          else
            v101 = 0;
          v105 = &v101[v100];
          v97[(_QWORD)v101] = 4;
          v70 = (uint64_t)&v97[(_QWORD)v101 + 1];
          if (v69 == (_BYTE *)v96)
          {
            v101 = &v97[(_QWORD)v101];
          }
          else
          {
            v106 = &v69[~v96];
            do
            {
              v107 = *--v69;
              (v106--)[(_QWORD)v101] = v107;
            }
            while (v69 != (_BYTE *)v96);
            v69 = *(_BYTE **)a1;
          }
          *(_QWORD *)a1 = v101;
          *(_QWORD *)(a1 + 8) = v70;
          *(_QWORD *)(a1 + 16) = v105;
          if (v69)
            operator delete(v69);
        }
        else
        {
          *v69 = 4;
          v70 = (uint64_t)(v69 + 1);
        }
        *(_QWORD *)(a1 + 8) = v70;
        v119 = *(float64x2_t **)(a1 + 32);
        v118 = *(_QWORD *)(a1 + 40);
        if ((unint64_t)v119 >= v118)
        {
          v121 = *(_QWORD *)(a1 + 24);
          v122 = ((uint64_t)v119 - v121) >> 4;
          v123 = v122 + 1;
          if ((unint64_t)(v122 + 1) >> 60)
            goto LABEL_205;
          v124 = v118 - v121;
          if (v124 >> 3 > v123)
            v123 = v124 >> 3;
          if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF0)
            v125 = 0xFFFFFFFFFFFFFFFLL;
          else
            v125 = v123;
          if (v125)
            v125 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Render::MeshFace>>(v125);
          else
            v126 = 0;
          v136 = (float64x2_t *)(v125 + 16 * v122);
          v137 = v125 + 16 * v126;
          *v136 = *a3;
          v120 = (_OWORD *)v136[1].f64;
          v139 = *(float64x2_t **)(a1 + 24);
          v138 = *(float64x2_t **)(a1 + 32);
          if (v138 != v139)
          {
            do
            {
              v136[-1] = v138[-1];
              --v136;
              --v138;
            }
            while (v138 != v139);
            v138 = *(float64x2_t **)(a1 + 24);
          }
          *(_QWORD *)(a1 + 24) = v136;
          *(_QWORD *)(a1 + 32) = v120;
          *(_QWORD *)(a1 + 40) = v137;
          if (v138)
            operator delete(v138);
        }
        else
        {
          *v119 = *a3;
          v120 = (_OWORD *)v119[1].f64;
        }
        *(_QWORD *)(a1 + 32) = v120;
        v140 = (_OWORD *)a3[1].f64;
        v141 = *(_QWORD *)(a1 + 40);
        if ((unint64_t)v120 >= v141)
        {
          v143 = *(_QWORD *)(a1 + 24);
          v144 = ((uint64_t)v120 - v143) >> 4;
          if ((unint64_t)(v144 + 1) >> 60)
            goto LABEL_205;
          v145 = v141 - v143;
          v146 = v145 >> 3;
          if (v145 >> 3 <= (unint64_t)(v144 + 1))
            v146 = v144 + 1;
          if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFF0)
            v147 = 0xFFFFFFFFFFFFFFFLL;
          else
            v147 = v146;
          if (v147)
            v147 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Render::MeshFace>>(v147);
          else
            v148 = 0;
          v158 = (_OWORD *)(v147 + 16 * v144);
          v159 = v147 + 16 * v148;
          *v158 = *v140;
          v142 = v158 + 1;
          v161 = *(char **)(a1 + 24);
          v160 = *(char **)(a1 + 32);
          if (v160 != v161)
          {
            do
            {
              *--v158 = *((_OWORD *)v160 - 1);
              v160 -= 16;
            }
            while (v160 != v161);
            v160 = *(char **)(a1 + 24);
          }
          *(_QWORD *)(a1 + 24) = v158;
          *(_QWORD *)(a1 + 32) = v142;
          *(_QWORD *)(a1 + 40) = v159;
          if (v160)
            operator delete(v160);
        }
        else
        {
          *v120 = *v140;
          v142 = v120 + 1;
        }
        *(_QWORD *)(a1 + 32) = v142;
        v162 = (_OWORD *)a3[2].f64;
        v163 = *(_QWORD *)(a1 + 40);
        if ((unint64_t)v142 >= v163)
        {
          v165 = *(_QWORD *)(a1 + 24);
          v166 = ((uint64_t)v142 - v165) >> 4;
          if ((unint64_t)(v166 + 1) >> 60)
            goto LABEL_205;
          v167 = v163 - v165;
          v168 = v167 >> 3;
          if (v167 >> 3 <= (unint64_t)(v166 + 1))
            v168 = v166 + 1;
          if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFF0)
            v169 = 0xFFFFFFFFFFFFFFFLL;
          else
            v169 = v168;
          if (v169)
            v169 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Render::MeshFace>>(v169);
          else
            v170 = 0;
          v173 = (_OWORD *)(v169 + 16 * v166);
          v174 = v169 + 16 * v170;
          *v173 = *v162;
          v164 = v173 + 1;
          v176 = *(char **)(a1 + 24);
          v175 = *(char **)(a1 + 32);
          if (v175 != v176)
          {
            do
            {
              *--v173 = *((_OWORD *)v175 - 1);
              v175 -= 16;
            }
            while (v175 != v176);
            v175 = *(char **)(a1 + 24);
          }
          *(_QWORD *)(a1 + 24) = v173;
          *(_QWORD *)(a1 + 32) = v164;
          *(_QWORD *)(a1 + 40) = v174;
          if (v175)
            operator delete(v175);
        }
        else
        {
          *v142 = *v162;
          v164 = v142 + 1;
        }
        *(_QWORD *)(a1 + 32) = v164;
        *v28 = *v162;
        *(_OWORD *)(a1 + 88) = *v162;
        return;
      default:
        return;
    }
  }
  if ((a2 - 2) > 2)
    v24 = *(float64x2_t *)(a1 + 56);
  else
    v24 = a3[CA::Render::path_counts[a2] - 1];
  *(float64x2_t *)(a1 + 72) = v24;
}

_DWORD *CA::Render::Path::new_path(CA::Render::Path *this, unsigned int a2, int a3)
{
  int v5;
  size_t v6;
  malloc_zone_t *malloc_zone;
  _DWORD *result;

  v5 = (int)this;
  v6 = ((_DWORD)this + 1) + 16 * a2 + 112;
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = malloc_type_zone_malloc(malloc_zone, v6, 0x8BB15036uLL);
  if (result)
  {
    result[2] = 1;
    result[3] = 36;
    ++dword_1ECDC7CB8;
    *(_QWORD *)result = off_1E1598688;
    result[4] = a3;
    result[5] = v5;
    result[6] = a2;
    *((_QWORD *)result + 4) = result + 28;
    *((_QWORD *)result + 5) = &result[4 * a2 + 28];
    *((_QWORD *)result + 7) = 0;
    *((_QWORD *)result + 8) = 0;
    *((_QWORD *)result + 6) = 0;
  }
  return result;
}

double *CA::Render::Path::keyframe_lengths(CA::Render::Path *this)
{
  double *v1;
  uint64_t v3;
  _BYTE *v4;
  float64x2_t *v5;
  size_t v7;
  malloc_zone_t *malloc_zone;
  double *v9;
  unint64_t v10;
  unint64_t v11;
  float64x2_t *v12;
  double v13;
  float64x2_t v14;
  float64x2_t *v15;
  int v16;
  float64x2_t v17;
  double v18;
  double v19;
  float64x2_t *v20;
  float64x2_t v21;
  double v22;
  double v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  uint64_t v29;
  float64x2_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t j;
  double v41;
  double v42;
  double i;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  BOOL v49;
  double v50;
  double v51;
  unint64_t v52;
  _OWORD v54[14];
  uint64_t v55;
  _OWORD v56[14];
  uint64_t v57;
  _OWORD v58[14];
  uint64_t v59;
  _OWORD v60[14];
  uint64_t v61;
  _OWORD v62[14];
  uint64_t v63;
  _OWORD v64[14];
  uint64_t v65;
  _OWORD v66[14];
  uint64_t v67;
  _OWORD v68[14];
  uint64_t v69;
  _OWORD v70[14];
  uint64_t v71;
  _OWORD v72[14];
  uint64_t v73;
  _OWORD v74[14];
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v1 = (double *)*((_QWORD *)this + 8);
  if (!v1)
  {
    v3 = *((unsigned int *)this + 4);
    if (!(_DWORD)v3)
      return 0;
    v5 = (float64x2_t *)*((_QWORD *)this + 4);
    v4 = (_BYTE *)*((_QWORD *)this + 5);
    if (*v4 != 1 || v5 == 0)
    {
      return 0;
    }
    else
    {
      v7 = 8 * v3;
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v9 = (double *)malloc_type_zone_malloc(malloc_zone, v7, 0x8BB15036uLL);
      v1 = v9;
      if (v9)
      {
        v10 = *((unsigned int *)this + 4);
        if ((_DWORD)v10)
        {
          v11 = 0;
          v12 = v5 + 1;
          v13 = 0.0;
          v14 = (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL);
          v15 = v5;
          while (2)
          {
            v16 = *++v4;
            switch(v16)
            {
              case 0:
                v17 = vsubq_f64(*v5, *v15);
                v17.f64[0] = vaddvq_f64(vmulq_f64(v17, v17));
                v18 = sqrt(v17.f64[0]);
                if (v17.f64[0] == 1.0)
                  v19 = 1.0;
                else
                  v19 = v18;
                v9[v11++] = v19;
                v13 = v19 + v13;
                v20 = v12;
                goto LABEL_52;
              case 1:
                v20 = v12 + 1;
                v15 = v12;
                goto LABEL_22;
              case 2:
                v20 = v12 + 1;
                v21 = vsubq_f64(*v12, *v5);
                v21.f64[0] = vaddvq_f64(vmulq_f64(v21, v21));
                v22 = sqrt(v21.f64[0]);
                if (v21.f64[0] == 1.0)
                  v23 = 1.0;
                else
                  v23 = v22;
                v9[v11++] = v23;
                v13 = v23 + v13;
LABEL_22:
                v5 = v12;
                goto LABEL_52;
              case 3:
                v24 = *v5;
                v5 = v12 + 1;
                v25 = v12[1];
                v26 = vaddq_f64(*v12, *v12);
                v27 = vmulq_f64(vaddq_f64(v26, v25), v14);
                v28 = vmulq_f64(vaddq_f64(v26, v24), v14);
                v29 = 2;
                goto LABEL_25;
              case 4:
                v24 = *v5;
                v28 = *v12;
                v27 = v12[1];
                v5 = v12 + 2;
                v25 = v12[2];
                v29 = 3;
LABEL_25:
                v75 = 0;
                memset(v74, 0, sizeof(v74));
                v73 = 0;
                memset(v72, 0, sizeof(v72));
                v71 = 0;
                memset(v70, 0, sizeof(v70));
                v69 = 0;
                memset(v68, 0, sizeof(v68));
                v67 = 0;
                memset(v66, 0, sizeof(v66));
                v65 = 0;
                memset(v64, 0, sizeof(v64));
                v63 = 0;
                memset(v62, 0, sizeof(v62));
                v61 = 0;
                memset(v60, 0, sizeof(v60));
                v59 = 0;
                memset(v58, 0, sizeof(v58));
                v57 = 0;
                memset(v56, 0, sizeof(v56));
                v55 = 0;
                v30 = vsubq_f64(v28, v24);
                v31 = vaddvq_f64(vmulq_f64(v30, v30));
                memset(v54, 0, sizeof(v54));
                if (v31 <= 0.0)
                  v32 = 1.79769313e308;
                else
                  v32 = 1.0 / sqrt(v31);
                v33 = v27.f64[1];
                v34 = v25.f64[1];
                v35 = (v25.f64[1] - v27.f64[1]) * (v25.f64[1] - v27.f64[1])
                    + (v25.f64[0] - v27.f64[0]) * (v25.f64[0] - v27.f64[0]);
                if (v35 <= 0.0)
                  v36 = 1.79769313e308;
                else
                  v36 = 1.0 / sqrt(v35);
                v37 = v32 * v31;
                v38 = v36 * v35;
                v39 = 0.0;
                if (COERCE__INT64(fabs(v36 * v35 + v37)) <= 0x7FEFFFFFFFFFFFFFLL)
                {
                  LODWORD(j) = 0;
                  v41 = v24.f64[1];
                  v42 = v28.f64[1];
                  for (i = 1.0; ; i = *((double *)v54 + j))
                  {
                    for (j = (int)j; ; ++j)
                    {
                      v44 = (v27.f64[0] - v28.f64[0]) * (v27.f64[0] - v28.f64[0]) + (v33 - v42) * (v33 - v42);
                      v45 = v44 <= 0.0 ? 1.79769313e308 : 1.0 / sqrt(v44);
                      v46 = (v34 - v41) * (v34 - v41) + (v25.f64[0] - v24.f64[0]) * (v25.f64[0] - v24.f64[0]);
                      v47 = v46 <= 0.0 ? 1.79769313e308 : 1.0 / sqrt(v46);
                      v48 = v38 + v37 + v45 * v44;
                      v49 = v48 - v47 * v46 > i && j < 29;
                      if (!v49)
                        break;
                      i = i * 0.5;
                      *((double *)v54 + j) = i;
                      *((_QWORD *)v68 + j) = *(_QWORD *)&v25.f64[0];
                      *((double *)v56 + j) = v34;
                      *((double *)v70 + j) = (v25.f64[0] + v27.f64[0]) * 0.5;
                      *((double *)v58 + j) = (v34 + v33) * 0.5;
                      *((double *)v72 + j) = (v28.f64[0] + v27.f64[0] * 2.0 + v25.f64[0]) * 0.25;
                      *((double *)v60 + j) = (v42 + v33 * 2.0 + v34) * 0.25;
                      v25.f64[0] = (v25.f64[0] + (v27.f64[0] + v28.f64[0]) * 3.0 + v24.f64[0]) * 0.125;
                      *((_QWORD *)v74 + j) = *(_QWORD *)&v25.f64[0];
                      v34 = (v34 + (v33 + v42) * 3.0 + v41) * 0.125;
                      *((double *)v62 + j) = v34;
                      v27.f64[0] = (v27.f64[0] + v28.f64[0] * 2.0 + v24.f64[0]) * 0.25;
                      *((double *)v64 + j) = v38 * 0.5;
                      v33 = (v33 + v42 * 2.0 + v41) * 0.25;
                      v50 = (v34 - v33) * (v34 - v33) + (v25.f64[0] - v27.f64[0]) * (v25.f64[0] - v27.f64[0]);
                      if (v50 <= 0.0)
                        v51 = 1.79769313e308;
                      else
                        v51 = 1.0 / sqrt(v50);
                      v28.f64[0] = (v24.f64[0] + v28.f64[0]) * 0.5;
                      v42 = (v41 + v42) * 0.5;
                      v37 = v37 * 0.5;
                      v38 = v51 * v50;
                      *((double *)v66 + j) = v38;
                    }
                    v39 = v39 + (v47 * v46 + v48) * 0.5;
                    if (!(_DWORD)j)
                      break;
                    j = (int)j - 1;
                    v24.f64[0] = *((float64_t *)v74 + j);
                    v41 = *((double *)v62 + j);
                    v28.f64[0] = *((float64_t *)v72 + j);
                    v42 = *((double *)v60 + j);
                    v27.f64[0] = *((float64_t *)v70 + j);
                    v33 = *((double *)v58 + j);
                    v25.f64[0] = *((float64_t *)v68 + j);
                    v34 = *((double *)v56 + j);
                    v37 = *((double *)v66 + j);
                    v38 = *((double *)v64 + j);
                  }
                }
                v20 = &v12[v29];
                v9[v11++] = v39;
                v13 = v39 + v13;
LABEL_52:
                v12 = v20;
                if (v11 >= v10)
                  goto LABEL_55;
                continue;
              default:
                goto LABEL_55;
            }
          }
        }
        v11 = 0;
        v13 = 0.0;
LABEL_55:
        v49 = v10 > v11;
        v52 = v10 - v11;
        if (v49)
          bzero(&v9[v11], 8 * v52);
        *((_QWORD *)this + 8) = v1;
        *((double *)this + 9) = v13;
      }
    }
  }
  return v1;
}

uint64_t CA::Render::spline_count(CA::Render *this, CA::Render::Path *a2)
{
  double *v3;
  double *v4;
  uint64_t result;
  int v6;
  double *v7;
  CA::Render *v8;

  v3 = 0;
  v4 = 0;
  result = 0;
  while (1)
  {
    v6 = *(unsigned __int8 *)a2;
    a2 = (CA::Render::Path *)((char *)a2 + 1);
    v7 = v3;
    v8 = this;
    switch(v6)
    {
      case 0:
        v3 = 0;
        if (v7)
        {
          if (*v4 != *v7 || (v3 = 0, v4[1] != v7[1]))
          {
            v3 = 0;
            ++result;
          }
        }
        continue;
      case 1:
        this = (CA::Render *)((char *)this + 16);
        v3 = (double *)v8;
        v4 = (double *)v8;
        continue;
      case 2:
        this = (CA::Render *)((char *)this + 16);
        ++result;
        v4 = (double *)v8;
        continue;
      case 3:
        v4 = (double *)((char *)this + 16);
        this = (CA::Render *)((char *)this + 32);
        goto LABEL_11;
      case 4:
        v4 = (double *)((char *)this + 32);
        this = (CA::Render *)((char *)this + 48);
LABEL_11:
        ++result;
        break;
      case 5:
        return result;
      default:
        continue;
    }
  }
}

__int128 *CA::Render::make_splines(__int128 *result, unsigned __int8 *a2, unint64_t a3)
{
  double *v5;
  double *v6;
  unint64_t v7;
  int v8;
  double *v9;
  __int128 *v10;
  __int128 v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;

  v5 = 0;
  v6 = 0;
  v16 = (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL);
  v7 = a3;
  while (1)
  {
    v8 = *a2++;
    v9 = v5;
    v10 = result;
    switch(v8)
    {
      case 0:
        v5 = 0;
        if (v9)
        {
          if (*v6 == *v9 && v6[1] == v9[1])
          {
            v5 = 0;
            if (v7 > a3)
            {
              v5 = 0;
              *(_WORD *)(v7 - 8) = 257;
            }
          }
          else
          {
            v5 = 0;
            *(_OWORD *)v7 = *(_OWORD *)v6;
            v11 = *(_OWORD *)v9;
            *(_OWORD *)(v7 + 32) = 0u;
            *(_OWORD *)(v7 + 48) = 0u;
            *(_OWORD *)(v7 + 16) = v11;
            *(_WORD *)(v7 + 64) = 257;
            v7 += 72;
          }
        }
        break;
      case 1:
        if (v5 && v7 > a3)
          *(_BYTE *)(v7 - 8) = 1;
        ++result;
        v5 = (double *)v10;
        v6 = (double *)v10;
        break;
      case 2:
        *(_OWORD *)v7 = *(_OWORD *)v6;
        v12 = (float64x2_t)*result;
        *(_WORD *)(v7 + 64) = 0;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(float64x2_t *)(v7 + 16) = v12;
        v7 += 72;
        ++result;
        v6 = (double *)v10;
        break;
      case 3:
        *(_OWORD *)v7 = *(_OWORD *)v6;
        v6 = (double *)(result + 1);
        *(_OWORD *)(v7 + 16) = result[1];
        v13 = vaddq_f64(*(float64x2_t *)result, *(float64x2_t *)result);
        v14 = vmulq_f64(vaddq_f64(v13, *(float64x2_t *)v7), v16);
        v15 = vmulq_f64(vaddq_f64(v13, *(float64x2_t *)(v7 + 16)), v16);
        CA::Render::compute_angles(v7, v14.f64[0], v14.f64[1], v15.f64[0], v15.f64[1]);
        *(_WORD *)(v7 + 64) = 0;
        v7 += 72;
        result = v10 + 2;
        v5 = v9;
        break;
      case 4:
        *(_OWORD *)v7 = *(_OWORD *)v6;
        v6 = (double *)(result + 2);
        *(_OWORD *)(v7 + 16) = result[2];
        CA::Render::compute_angles(v7, *(double *)result, *((double *)result + 1), *((double *)result + 2), *((double *)result + 3));
        *(_WORD *)(v7 + 64) = 0;
        v7 += 72;
        result = v10 + 3;
        v5 = v9;
        break;
      case 5:
        if (v5 && v7 > a3)
          *(_BYTE *)(v7 - 8) = 1;
        return result;
      default:
        continue;
    }
  }
}

void CA::Render::compute_angles(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  long double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;

  v7 = *(double *)a1;
  v8 = *(double *)(a1 + 8);
  v9 = *(double *)(a1 + 24);
  v10 = a4 - *(double *)(a1 + 16);
  if (vabdd_f64(a2, *(double *)a1) >= 0.0001 || (v11 = 0.0, v12 = 0.0, vabdd_f64(a3, v8) >= 0.0001))
  {
    v13 = a2 - v7;
    v14 = a3 - v8;
    v12 = atan2(a3 - v8, a2 - v7);
    v11 = (v13 * v13 + v14 * v14) / sqrt(fmax(v13 * v13 + v14 * v14, 0.000001));
  }
  v15 = a5 - v9;
  *(double *)(a1 + 48) = v11;
  *(long double *)(a1 + 32) = v12;
  if (fabs(v10) >= 0.0001 || (v16 = 0.0, v17 = 0.0, fabs(v15) >= 0.0001))
  {
    v17 = atan2(v15, v10);
    v16 = (v10 * v10 + v15 * v15) / sqrt(fmax(v10 * v10 + v15 * v15, 0.000001));
  }
  *(double *)(a1 + 56) = v16;
  *(double *)(a1 + 40) = v17;
}

void CA::Display::DisplayLinkItem::schedule(CA::Display::DisplayLinkItem *this, __CFRunLoop *a2, const __CFString *a3)
{
  uint64_t v6;
  __CFRunLoop *v7;
  uint64_t v8;
  CFStringRef Copy;
  uint64_t v10;
  malloc_zone_t *malloc_zone;
  _QWORD *v12;

  v6 = *((_QWORD *)this + 33);
  if (v6)
  {
    v7 = *(__CFRunLoop **)(v6 + 16);
    if (v7 != a2)
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("CADisplayLink"), CFSTR("%@: already added to runloop %p, cannot also be added to %p"), *((_QWORD *)this + 32), v7, a2);
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 136));
  v8 = *((_QWORD *)this + 34);
  if (v8)
  {
    while (!CFEqual(*(CFTypeRef *)v8, a3))
    {
      v8 = *(_QWORD *)(v8 + 8);
      if (!v8)
        goto LABEL_7;
    }
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 136));
  }
  else
  {
LABEL_7:
    Copy = CFStringCreateCopy(0, a3);
    v10 = *((_QWORD *)this + 34);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v12 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
    *v12 = Copy;
    v12[1] = v10;
    *((_QWORD *)this + 34) = v12;
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 136));
    CA::Display::DisplayLinkItem::update_link(this, a2);
  }
}

void CA::Render::init_memory_warnings_(CA::Render *this, void *a2)
{
  NSObject *global_queue;

  CA::Render::last_memory_warning = 0;
  global_queue = dispatch_get_global_queue(25, 0);
  CA::Render::memory_source = (uint64_t)dispatch_source_create(MEMORY[0x1E0C80DA8], 0, 2uLL, global_queue);
  dispatch_source_set_event_handler_f((dispatch_source_t)CA::Render::memory_source, (dispatch_function_t)CA::Render::memory_warning);
  dispatch_resume((dispatch_object_t)CA::Render::memory_source);
}

dispatch_queue_t CA::DispatchGroup::init(CA::DispatchGroup *this)
{
  NSObject *v1;
  dispatch_queue_t result;

  pthread_mutex_init(&CA::DispatchGroup::_mutex, 0);
  pthread_cond_init(&CA::DispatchGroup::_cond, 0);
  v1 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  result = dispatch_queue_create("CA DispatchGroup", v1);
  CA::DispatchGroup::_queue = (uint64_t)result;
  return result;
}

uint64_t init_max_renderable_iosurface(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  if (a1)
  {
    v1 = a1[1];
    result = a1[2];
  }
  else
  {
    result = MEMORY[0x186DBD438](*MEMORY[0x1E0CBBF08]);
  }
  return result;
}

void CA::Render::`anonymous namespace'::Compressor::compress_(double **a1, double **a2, uint64_t a3)
{
  double *v5;
  double *v6;
  double *v7;
  double *v8;
  int v11;
  double v12;
  double v13;
  int v14;
  int v15;
  double v16;

  v6 = *a1;
  v5 = a1[1];
  v8 = *a2;
  v7 = a2[1];
  if (*a1 != v5 && v8 != v7)
  {
    v11 = 0;
    do
    {
      v12 = *v6;
      v13 = *v8;
      if (*v6 - *v8 <= 0.0)
      {
        ++v6;
        v14 = 1;
      }
      else
      {
        ++v8;
        v14 = 2;
        v12 = v13;
      }
      v15 = v11 ^ v14;
      if (v11 == 1 || v15 == 1)
      {
        v5 = a1[1];
        v7 = a2[1];
      }
      if (v6 == v5)
        break;
      v11 = v15;
    }
    while (v8 != v7);
  }
  while (v6 != v5)
  {
    v16 = *v6++;
    v5 = a1[1];
  }
}

void CA::Render::`anonymous namespace'::add_point_to_slices(uint64_t a1, double a2)
{
  double *v3;
  double *v4;
  uint64_t v6;
  double v7;
  double *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  unint64_t v15;
  uint64_t v16;

  v3 = *(double **)a1;
  v4 = *(double **)(a1 + 8);
  v6 = (char *)v4 - (char *)v3;
  if ((((_DWORD)v4 - (_DWORD)v3) & 8) != 0)
  {
    v7 = floor(a2);
    v8 = v4 - 1;
    if (v7 <= *(v4 - 1))
      goto LABEL_19;
  }
  else
  {
    v7 = ceil(a2);
  }
  v9 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v4 >= v9)
  {
    v10 = v6 >> 3;
    v11 = (v6 >> 3) + 1;
    if (v11 >> 61)
      abort();
    v12 = v9 - (_QWORD)v3;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    if (v11)
    {
      v11 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v11);
      v3 = *(double **)a1;
      v4 = *(double **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = (double *)(v11 + 8 * v10);
    v15 = v11 + 8 * v13;
    *v14 = v7;
    v8 = v14 + 1;
    while (v4 != v3)
    {
      v16 = *((_QWORD *)v4-- - 1);
      *((_QWORD *)v14-- - 1) = v16;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v15;
    if (v3)
      operator delete(v3);
  }
  else
  {
    *v4 = v7;
    v8 = v4 + 1;
  }
LABEL_19:
  *(_QWORD *)(a1 + 8) = v8;
}

void CA::Render::`anonymous namespace'::flatten_intervals(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  double *v5;
  unint64_t v6;
  uint64_t v7;
  double *v8;
  double *v9;
  double v10;
  char v11;
  double *v12;
  unint64_t v13;
  double *v14;
  double *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  double *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  double *v34;
  double *v35;
  double *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  double *v43;
  unint64_t v44;
  uint64_t v45;

  v4 = *a2;
  v5 = (double *)a2[1];
  v6 = 126 - 2 * __clz(((uint64_t)v5 - v4) >> 4);
  if (v5 == (double *)v4)
    v7 = 0;
  else
    v7 = v6;
  v9 = (double *)*a2;
  v8 = (double *)a2[1];
  if ((double *)*a2 == v8)
    return;
  v10 = 0.0;
  v11 = 1;
  do
  {
    if ((v11 & 1) != 0)
    {
      v12 = *(double **)(a1 + 8);
    }
    else
    {
      if (*v9 <= v10)
      {
        if (v10 <= v9[1])
          v10 = v9[1];
        goto LABEL_45;
      }
      v14 = *(double **)(a1 + 8);
      v13 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v14 >= v13)
      {
        v15 = *(double **)a1;
        v16 = ((uint64_t)v14 - *(_QWORD *)a1) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          goto LABEL_63;
        v18 = v13 - (_QWORD)v15;
        if (v18 >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v19 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v19);
          v15 = *(double **)a1;
          v14 = *(double **)(a1 + 8);
        }
        else
        {
          v20 = 0;
        }
        v21 = (double *)(v19 + 8 * v16);
        *v21 = v10;
        v12 = v21 + 1;
        while (v14 != v15)
        {
          v22 = *((_QWORD *)v14-- - 1);
          *((_QWORD *)v21-- - 1) = v22;
        }
        *(_QWORD *)a1 = v21;
        *(_QWORD *)(a1 + 8) = v12;
        *(_QWORD *)(a1 + 16) = v19 + 8 * v20;
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v14 = v10;
        v12 = v14 + 1;
      }
      *(_QWORD *)(a1 + 8) = v12;
    }
    v23 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v12 >= v23)
    {
      v25 = *(double **)a1;
      v26 = ((uint64_t)v12 - *(_QWORD *)a1) >> 3;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 61)
        goto LABEL_63;
      v28 = v23 - (_QWORD)v25;
      if (v28 >> 2 > v27)
        v27 = v28 >> 2;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
        v29 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      if (v29)
      {
        v29 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v29);
        v25 = *(double **)a1;
        v12 = *(double **)(a1 + 8);
      }
      else
      {
        v30 = 0;
      }
      v31 = (_QWORD *)(v29 + 8 * v26);
      *v31 = *(_QWORD *)v9;
      v24 = v31 + 1;
      while (v12 != v25)
      {
        v32 = *((_QWORD *)v12-- - 1);
        *--v31 = v32;
      }
      *(_QWORD *)a1 = v31;
      *(_QWORD *)(a1 + 8) = v24;
      *(_QWORD *)(a1 + 16) = v29 + 8 * v30;
      if (v25)
        operator delete(v25);
    }
    else
    {
      *v12 = *v9;
      v24 = v12 + 1;
    }
    *(_QWORD *)(a1 + 8) = v24;
    v10 = v9[1];
    v8 = (double *)a2[1];
LABEL_45:
    v11 = 0;
    v9 += 2;
  }
  while (v9 != v8);
  v34 = *(double **)(a1 + 8);
  v33 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v34 >= v33)
  {
    v36 = *(double **)a1;
    v37 = ((uint64_t)v34 - *(_QWORD *)a1) >> 3;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 61)
LABEL_63:
      abort();
    v39 = v33 - (_QWORD)v36;
    if (v39 >> 2 > v38)
      v38 = v39 >> 2;
    v40 = (unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8;
    v41 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v40)
      v41 = v38;
    if (v41)
    {
      v41 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v41);
      v36 = *(double **)a1;
      v34 = *(double **)(a1 + 8);
    }
    else
    {
      v42 = 0;
    }
    v43 = (double *)(v41 + 8 * v37);
    v44 = v41 + 8 * v42;
    *v43 = v10;
    v35 = v43 + 1;
    while (v34 != v36)
    {
      v45 = *((_QWORD *)v34-- - 1);
      *((_QWORD *)v43-- - 1) = v45;
    }
    *(_QWORD *)a1 = v43;
    *(_QWORD *)(a1 + 8) = v35;
    *(_QWORD *)(a1 + 16) = v44;
    if (v36)
      operator delete(v36);
  }
  else
  {
    *v34 = v10;
    v35 = v34 + 1;
  }
  *(_QWORD *)(a1 + 8) = v35;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::Render::`anonymous namespace'::Interval *,false>(uint64_t result, double *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  double *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 v14;
  double v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  double v19;
  double v20;
  double *v21;
  double v22;
  double v23;
  unint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  BOOL v28;
  double v29;
  unint64_t v30;
  double *v31;
  double v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  _OWORD *v42;
  double v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  double *v51;
  BOOL v53;
  uint64_t v54;
  unint64_t v55;
  double *v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  uint64_t v65;
  double *v66;
  double *v67;
  double v68;
  uint64_t v69;
  double *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double *v75;
  uint64_t v76;
  double v77;
  double *v78;
  double *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  double *v84;
  double *v85;
  uint64_t v87;
  double v88;
  uint64_t v89;
  double *v90;
  double v91;

  v7 = result;
LABEL_2:
  v8 = a2 - 2;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (uint64_t)a2 - v9;
    v11 = (uint64_t)((uint64_t)a2 - v9) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *(double *)v9;
        if (*v8 < *(double *)v9)
        {
          v39 = *(_QWORD *)(v9 + 8);
          *(_OWORD *)v9 = *(_OWORD *)v8;
          *(a2 - 2) = v38;
          *((_QWORD *)a2 - 1) = v39;
        }
        return result;
      case 3uLL:
      case 4uLL:
      case 5uLL:
        v40 = (_OWORD *)(v9 + 16);
        v41 = (_OWORD *)(v9 + 32);
        v42 = (_OWORD *)(v9 + 48);
        v43 = *(double *)(v9 + 48);
        if (*v8 < v43)
        {
          v44 = *(_QWORD *)(v9 + 56);
          *v42 = *(_OWORD *)v8;
          *(a2 - 2) = v43;
          *((_QWORD *)a2 - 1) = v44;
          v45 = *(double *)(v9 + 32);
          if (*(double *)(v9 + 48) < v45)
          {
            v46 = *(_QWORD *)(v9 + 40);
            *v41 = *v42;
            *(double *)(v9 + 48) = v45;
            *(_QWORD *)(v9 + 56) = v46;
            v47 = *(double *)(v9 + 16);
            if (*(double *)(v9 + 32) < v47)
            {
              v48 = *(_QWORD *)(v9 + 24);
              *v40 = *v41;
              *(double *)(v9 + 32) = v47;
              *(_QWORD *)(v9 + 40) = v48;
              v49 = *(double *)v9;
              if (*(double *)(v9 + 16) < *(double *)v9)
              {
                v50 = *(_QWORD *)(v9 + 8);
                *(_OWORD *)v9 = *v40;
                *(double *)(v9 + 16) = v49;
                *(_QWORD *)(v9 + 24) = v50;
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 383)
        {
          v51 = (double *)(v9 + 16);
          v53 = (double *)v9 == a2 || v51 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v53)
            {
              v54 = 0;
              v55 = v9;
              do
              {
                v56 = v51;
                v57 = *(double *)(v55 + 16);
                if (v57 < *(double *)v55)
                {
                  v58 = *(_QWORD *)(v55 + 24);
                  v59 = v54;
                  while (1)
                  {
                    *(_OWORD *)(v9 + v59 + 16) = *(_OWORD *)(v9 + v59);
                    if (!v59)
                      break;
                    v60 = *(double *)(v9 + v59 - 16);
                    v59 -= 16;
                    if (v57 >= v60)
                    {
                      v61 = v9 + v59 + 16;
                      goto LABEL_79;
                    }
                  }
                  v61 = v9;
LABEL_79:
                  *(double *)v61 = v57;
                  *(_QWORD *)(v61 + 8) = v58;
                }
                v51 = v56 + 2;
                v54 += 16;
                v55 = (unint64_t)v56;
              }
              while (v56 + 2 != a2);
            }
          }
          else if (!v53)
          {
            do
            {
              v87 = (uint64_t)v51;
              v88 = *(double *)(v7 + 16);
              if (v88 < *(double *)v7)
              {
                v89 = *(_QWORD *)(v7 + 24);
                v90 = v51;
                do
                {
                  *(_OWORD *)v90 = *((_OWORD *)v90 - 1);
                  v91 = *(v90 - 4);
                  v90 -= 2;
                }
                while (v88 < v91);
                *v90 = v88;
                *((_QWORD *)v90 + 1) = v89;
              }
              v51 += 2;
              v7 = v87;
            }
            while ((double *)(v87 + 16) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((double *)v9 == a2)
            return result;
          v62 = (v11 - 2) >> 1;
          v63 = v62;
          do
          {
            v64 = v63;
            if (v62 >= v63)
            {
              v65 = (2 * v63) | 1;
              v66 = (double *)(v9 + 16 * v65);
              if (2 * v64 + 2 < (uint64_t)v11 && *v66 < v66[2])
              {
                v66 += 2;
                v65 = 2 * v64 + 2;
              }
              v67 = (double *)(v9 + 16 * v64);
              v68 = *v67;
              if (*v66 >= *v67)
              {
                v69 = *(_QWORD *)(v9 + 16 * v64 + 8);
                do
                {
                  v70 = v66;
                  *(_OWORD *)v67 = *(_OWORD *)v66;
                  if (v62 < v65)
                    break;
                  v71 = 2 * v65;
                  v65 = (2 * v65) | 1;
                  v66 = (double *)(v9 + 16 * v65);
                  v72 = v71 + 2;
                  if (v72 < (uint64_t)v11 && *v66 < v66[2])
                  {
                    v66 += 2;
                    v65 = v72;
                  }
                  v67 = v70;
                }
                while (*v66 >= v68);
                *v70 = v68;
                *((_QWORD *)v70 + 1) = v69;
              }
            }
            v63 = v64 - 1;
          }
          while (v64);
          v73 = (unint64_t)v10 >> 4;
          while (2)
          {
            v74 = 0;
            v75 = a2;
            v77 = *(double *)v9;
            v76 = *(_QWORD *)(v9 + 8);
            v78 = (double *)v9;
            do
            {
              v79 = v78;
              v78 += 2 * v74 + 2;
              v80 = 2 * v74;
              v74 = (2 * v74) | 1;
              v81 = v80 + 2;
              if (v81 < v73 && *v78 < v78[2])
              {
                v78 += 2;
                v74 = v81;
              }
              *(_OWORD *)v79 = *(_OWORD *)v78;
            }
            while (v74 <= (uint64_t)((unint64_t)(v73 - 2) >> 1));
            a2 -= 2;
            if (v78 == v75 - 2)
            {
LABEL_109:
              *v78 = v77;
              *((_QWORD *)v78 + 1) = v76;
            }
            else
            {
              *(_OWORD *)v78 = *(_OWORD *)a2;
              *(v75 - 2) = v77;
              *((_QWORD *)v75 - 1) = v76;
              v82 = (uint64_t)v78 - v9 + 16;
              if (v82 >= 17)
              {
                v83 = (((unint64_t)v82 >> 4) - 2) >> 1;
                v84 = (double *)(v9 + 16 * v83);
                v77 = *v78;
                if (*v84 < *v78)
                {
                  v76 = *((_QWORD *)v78 + 1);
                  v85 = v78;
                  do
                  {
                    v78 = v84;
                    *(_OWORD *)v85 = *(_OWORD *)v84;
                    if (!v83)
                      break;
                    v83 = (v83 - 1) >> 1;
                    v84 = (double *)(v9 + 16 * v83);
                    v85 = v78;
                  }
                  while (*v84 < v77);
                  goto LABEL_109;
                }
              }
            }
            if (v73-- <= 2)
              return result;
            continue;
          }
        }
        v12 = v11 >> 1;
        v13 = (_OWORD *)(v9 + 16 * (v11 >> 1));
        if ((unint64_t)v10 < 0x801)
        {
        }
        else
        {
          v14 = *(_OWORD *)v7;
          *(_OWORD *)v7 = *v13;
          *v13 = v14;
        }
        --a3;
        v15 = *(double *)v7;
        if ((a4 & 1) == 0 && *(double *)(v7 - 16) >= v15)
        {
          if (v15 >= *v8)
          {
            v30 = v7 + 16;
            do
            {
              v9 = v30;
              if (v30 >= (unint64_t)a2)
                break;
              v30 += 16;
            }
            while (v15 >= *(double *)v9);
          }
          else
          {
            v9 = v7;
            do
            {
              v29 = *(double *)(v9 + 16);
              v9 += 16;
            }
            while (v15 >= v29);
          }
          v31 = a2;
          if (v9 < (unint64_t)a2)
          {
            v31 = a2;
            do
            {
              v32 = *(v31 - 2);
              v31 -= 2;
            }
            while (v15 < v32);
          }
          v33 = *(_QWORD *)(v7 + 8);
          if (v9 < (unint64_t)v31)
          {
            v34 = *(double *)v9;
            do
            {
              v35 = *(_QWORD *)(v9 + 8);
              *(_OWORD *)v9 = *(_OWORD *)v31;
              *v31 = v34;
              *((_QWORD *)v31 + 1) = v35;
              do
              {
                v36 = *(double *)(v9 + 16);
                v9 += 16;
                v34 = v36;
              }
              while (v15 >= v36);
              do
              {
                v37 = *(v31 - 2);
                v31 -= 2;
              }
              while (v15 < v37);
            }
            while (v9 < (unint64_t)v31);
          }
          if (v9 - 16 != v7)
            *(_OWORD *)v7 = *(_OWORD *)(v9 - 16);
          a4 = 0;
          *(double *)(v9 - 16) = v15;
          *(_QWORD *)(v9 - 8) = v33;
          continue;
        }
        v16 = *(_QWORD *)(v7 + 8);
        v17 = v7;
        do
        {
          v18 = v17;
          v19 = *(double *)(v17 + 16);
          v17 += 16;
          v20 = v19;
        }
        while (v19 < v15);
        v21 = a2;
        if (v18 == v7)
        {
          v21 = a2;
          do
          {
            if (v17 >= (unint64_t)v21)
              break;
            v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (v23 >= v15);
        }
        else
        {
          do
          {
            v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (v22 >= v15);
        }
        if (v17 >= (unint64_t)v21)
        {
          v9 = v17;
        }
        else
        {
          v24 = (unint64_t)v21;
          v9 = v17;
          do
          {
            v25 = *(_QWORD *)(v9 + 8);
            *(_OWORD *)v9 = *(_OWORD *)v24;
            *(double *)v24 = v20;
            *(_QWORD *)(v24 + 8) = v25;
            do
            {
              v26 = *(double *)(v9 + 16);
              v9 += 16;
              v20 = v26;
            }
            while (v26 < v15);
            do
            {
              v27 = *(double *)(v24 - 16);
              v24 -= 16;
            }
            while (v27 >= v15);
          }
          while (v9 < v24);
        }
        if (v9 - 16 != v7)
          *(_OWORD *)v7 = *(_OWORD *)(v9 - 16);
        *(double *)(v9 - 16) = v15;
        *(_QWORD *)(v9 - 8) = v16;
        if (v17 < (unint64_t)v21)
        {
LABEL_32:
          a4 = 0;
          continue;
        }
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_32;
        }
        a2 = (double *)(v9 - 16);
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

const char *CA::Transaction::init(CA::Transaction *this)
{
  char *v1;
  const char *result;

  pthread_key_init_np();
  v1 = getenv("CA_DEBUG_TRANSACTIONS");
  if (v1)
    CA::Transaction::_debug_transactions = atoi(v1) != 0;
  result = getenv("CA_ASSERT_MAIN_THREAD_TRANSACTIONS");
  if (result)
  {
    result = (const char *)atoi(result);
    CA::Transaction::_assert_transactions = (_DWORD)result != 0;
  }
  return result;
}

uint64_t CAImageQueueGetHeight(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t CAImageQueueSetInterpolationCurve(uint64_t result, double a2, double a3, double a4, double a5)
{
  double *v5;

  v5 = *(double **)(*(_QWORD *)(result + 48) + 24);
  __dmb(0xBu);
  v5[52] = a2;
  v5[53] = a3;
  v5[54] = a4;
  v5[55] = a5;
  __dmb(0xBu);
  return result;
}

void ___ZL36cons_CALayer_kCAValueRetainedPointerjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  double v4[2];

  v4[1] = *(double *)MEMORY[0x1E0C80C00];
  v3 = (const void *)*(unsigned int *)(a1 + 32);
  *(_QWORD *)&v4[0] = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)2, v4);
}

double initialize_time_scale(void)
{
  double v0;
  double result;
  mach_timebase_info v2[2];

  v2[1] = *(mach_timebase_info *)MEMORY[0x1E0C80C00];
  v2[0] = 0;
  if (mach_timebase_info(v2))
  {
    v0 = *(double *)&time_scale;
  }
  else
  {
    v0 = (double)v2[0].numer * 0.000000001 / (double)v2[0].denom;
    *(double *)&time_scale = v0;
    timebase = v2[0].denom;
    timebase = v2[0].numer;
  }
  result = 1.0 / v0;
  recip_time_scale = *(_QWORD *)&result;
  return result;
}

uint64_t CAImageQueueGetTypeID()
{
  uint64_t result;

  result = CAImageQueueGetTypeID::type;
  if (!CAImageQueueGetTypeID::type)
  {
    result = _CFRuntimeRegisterClass();
    CAImageQueueGetTypeID::type = result;
  }
  return result;
}

void sub_184598B50(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_184598D70(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_184598FF0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void CAImageQueueSetSize(os_unfair_lock_s *a1, uint32_t a2, uint32_t a3)
{
  if (a1[8]._os_unfair_lock_opaque != a2 || a1[9]._os_unfair_lock_opaque != a3)
  {
    os_unfair_lock_lock(a1 + 4);
    a1[8]._os_unfair_lock_opaque = a2;
    a1[9]._os_unfair_lock_opaque = a3;
    os_unfair_lock_unlock(a1 + 4);
  }
}

void sub_1845990E4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void layer_private_flush_async(_CAMetalLayerPrivate *a1)
{
  _CAMetalDrawablePrivate **v2;
  _CAMetalDrawablePrivate **v3;
  _CAMetalDrawablePrivate **v4;

  pthread_setspecific(collect_slot, a1);
  CAImageQueueCollect_(*((_QWORD *)a1 + 2), 1, 0);
  pthread_setspecific(collect_slot, 0);
  v2 = (_CAMetalDrawablePrivate **)*((_QWORD *)a1 + 7);
  if (v2)
  {
    *((_QWORD *)a1 + 7) = 0;
    v3 = v2;
    do
    {
      release_drawable(a1, *v3);
      v3 = (_CAMetalDrawablePrivate **)v3[1];
    }
    while (v3);
    do
    {
      v4 = (_CAMetalDrawablePrivate **)v2[1];
      free(v2);
      v2 = v4;
    }
    while (v4);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1 + 2);
  layer_private_cleanup_callbacks(a1);
  os_unfair_lock_lock((os_unfair_lock_t)a1 + 2);
}

void sub_184599198(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_lock(v1);
  _Unwind_Resume(a1);
}

uint64_t begin_layer(uint64_t a1)
{
  CGContextDelegateGetInfo();
  CGContextDelegateBeginLayer();
  return a1;
}

unint64_t CAImageQueueGetFlags(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
    return atomic_load((unint64_t *)(*(_QWORD *)(v1 + 24) + 8));
  else
    return 0;
}

uint64_t ___ZL26enable_frame_rate_featuresv_block_invoke()
{
  uint64_t result;
  char v1;

  result = CADeviceSupportsOddQuantaFrameRates();
  if ((_DWORD)result)
  {
    result = os_variant_has_factory_content();
    v1 = result ^ 1;
  }
  else
  {
    v1 = 0;
  }
  enable_frame_rate_features(void)::enabled = v1;
  return result;
}

void ___Z16CAPrefers60HzAPTv_block_invoke()
{
  BOOL v0;
  char v1;
  char v2;

  if (enable_frame_rate_features(void)::once[0] != -1)
    dispatch_once(enable_frame_rate_features(void)::once, &__block_literal_global_6);
  if (enable_frame_rate_features(void)::enabled)
    v0 = CADevicePrefers60HzAPT();
  else
    v0 = 0;
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  v1 = *(float *)&dword_1ECDC69EC == 1 || v0;
  if (*(float *)&dword_1ECDC69EC == 2)
    v2 = 0;
  else
    v2 = v1;
  CAPrefers60HzAPT(void)::enabled = v2;
}

BOOL CADeviceSupportsOddQuantaFrameRates()
{
  if (CADeviceSupportsOddQuantaFrameRates::once[0] != -1)
    dispatch_once(CADeviceSupportsOddQuantaFrameRates::once, &__block_literal_global_192);
  if (CADeviceSupportsOddQuantaFrameRates::enabled)
    return 1;
  if (CADeviceSupportsAPT::once != -1)
    dispatch_once(&CADeviceSupportsAPT::once, &__block_literal_global_37);
  if (!CADeviceSupportsAPT::supports_apt)
    return 0;
  if (CADeviceIsPhone::once[0] != -1)
    dispatch_once(CADeviceIsPhone::once, &__block_literal_global_134);
  return CADeviceIsPhone::phone != 0;
}

double CA::CG::ContextDelegate::get_transform_@<D0>(uint64_t a1@<X8>)
{
  uint64_t Info;
  double result;

  Info = CGContextDelegateGetInfo();
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 24) = xmmword_18474DFF0;
  result = (float)-(float)*(int *)(Info + 28);
  *(double *)(a1 + 40) = result;
  return result;
}

void CA::Transaction::Continuation::unref(CA::Transaction::Continuation *this)
{
  unsigned int v2;
  unsigned int v3;
  CA::Transaction::Continuation *v4;
  malloc_zone_t *malloc_zone;

  do
  {
    v2 = __ldaxr((unsigned int *)this);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, (unsigned int *)this));
  if (!v3)
  {
    dispatch_async(MEMORY[0x1E0C80D38], *((dispatch_block_t *)this + 2));
    _Block_release(*((const void **)this + 2));
    v4 = (CA::Transaction::Continuation *)*((_QWORD *)this + 1);
    if (v4)
      CA::Transaction::Continuation::unref(v4);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, this);
  }
}

void ___Z33CAHighFrameRateRestrictionEnabledv_block_invoke()
{
  int v0;
  unsigned int v1;
  BOOL v2;
  char v4;

  if (CAPrefers60HzAPT(void)::once[0] != -1)
    dispatch_once(CAPrefers60HzAPT(void)::once, &__block_literal_global_2);
  v0 = CAPrefers60HzAPT(void)::enabled;
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  v1 = *(float *)&dword_1ECDC69E8;
  if (v0)
    v2 = 1;
  else
    v2 = v1 == 1;
  v4 = v2 && v1 != 2;
  CAHighFrameRateRestrictionEnabled(void)::enabled = v4;
}

void ___Z29CAFrameRateArbitrationEnabledv_block_invoke()
{
  int v0;
  unsigned int v1;
  BOOL v2;
  char v4;

  if (enable_frame_rate_features(void)::once[0] != -1)
    dispatch_once(enable_frame_rate_features(void)::once, &__block_literal_global_6);
  v0 = enable_frame_rate_features(void)::enabled;
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  v1 = *(float *)&dword_1ECDC69E4;
  if (v0)
    v2 = 1;
  else
    v2 = v1 == 1;
  v4 = v2 && v1 != 2;
  CAFrameRateArbitrationEnabled(void)::enabled = v4;
}

uint64_t end_layer(uint64_t a1)
{
  uint64_t Info;
  CGColor *Color;
  unsigned int CompositeOperation;

  CGContextDelegateGetInfo();
  CGContextDelegateEndLayer();
  Info = CGContextDelegateGetInfo();
  CGGStateGetStyle();
  Color = (CGColor *)CGStyleGetColor();
  CompositeOperation = CGGStateGetCompositeOperation();
  CACGContextEvaluator::update_with_color(Info, Color, CompositeOperation);
  *(_BYTE *)(Info + 78) |= CGGStateGetStyle() != 0;
  *(_BYTE *)(Info + 77) = 1;
  return a1;
}

void ___ZL26cons_CALayer_kCAValueFloatjb_block_invoke_2(uint64_t a1, uint64_t a2, float a3)
{
  const void *v3;
  float v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = (const void *)*(unsigned int *)(a1 + 32);
  v4 = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)0x11, (double *)&v4);
}

void CAImageQueueConsumeUnconsumed_(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  os_unfair_lock_s *v6;
  unint64_t v7;
  unsigned int *v8;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v5 = *(_QWORD *)(v2 + 24);
    v6 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    if (*(_DWORD *)(a1 + 40))
    {
      v7 = 0;
      do
      {
        if (*(_DWORD *)(v5 + 160 * v7 + 524)
          && ((a2 & 1) != 0 || *(_DWORD *)(v5 + 160 * v7 + 556) != *(_DWORD *)(v5 + 36)))
        {
          v8 = (unsigned int *)(v5 + 160 * v7 + 516);
          while (!__ldaxr(v8))
          {
            if (!__stlxr(0x22222222u, v8))
            {
              *(_BYTE *)(v5 + 160 * v7 + 577) = 1;
              goto LABEL_12;
            }
          }
          __clrex();
        }
LABEL_12:
        ++v7;
      }
      while (v7 < *(unsigned int *)(a1 + 40));
    }
    os_unfair_lock_unlock(v6);
  }
}

void ___ZN2CA12_GLOBAL__N_113PathConverter7convertEPK6CGPath_block_invoke(uint64_t a1, int *a2, const CA::Bounds *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  float64x2_t v6;
  int v8;
  unsigned int v9;
  float64x2_t v10;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  CA::Shape *v20;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_DWORD *)(v3 + 24);
  if (v4 == 8)
  {
    *(_BYTE *)a3 = 1;
    return;
  }
  v5 = *a2;
  if (*a2 == 4)
  {
    if ((v4 & 0xFFFFFFFE) == 6)
    {
      return;
    }
    goto LABEL_45;
  }
  if (v5 == 1)
  {
    v9 = v4 - 1;
    if (v9 <= 4)
    {
      v10 = *(float64x2_t *)*((_QWORD *)a2 + 1);
      if ((**((_QWORD **)a2 + 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(_QWORD *)(*((_QWORD *)a2 + 1) + 8) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v10 = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)(*(_QWORD *)(v3 + 8) + 32), *(float64x2_t *)*(_QWORD *)(v3 + 8), v10.f64[0]), *(float64x2_t *)(*(_QWORD *)(v3 + 8) + 16), v10, 1);
      }
      switch(v9)
      {
        case 0u:
          v12 = *(double *)(v3 + 40);
          if (v10.f64[1] == v12 || vabdd_f64(v10.f64[1], v12) < 0.001)
          {
            *(float64_t *)(v3 + 48) = v10.f64[0];
            v8 = 2;
            goto LABEL_14;
          }
          v13 = *(double *)(v3 + 32);
          if (v10.f64[0] == v13 || vabdd_f64(v10.f64[0], v13) < 0.001)
          {
            *(float64_t *)(v3 + 56) = v10.f64[1];
            v8 = 4;
            goto LABEL_14;
          }
          break;
        case 1u:
          v14 = *(double *)(v3 + 48);
          if (v10.f64[0] != v14 && vabdd_f64(v10.f64[0], v14) >= 0.001)
            goto LABEL_45;
          *(float64_t *)(v3 + 56) = v10.f64[1];
          v8 = 3;
          goto LABEL_14;
        case 2u:
          v15 = *(double *)(v3 + 32);
          if (v10.f64[0] != v15 && vabdd_f64(v10.f64[0], v15) >= 0.001)
            goto LABEL_45;
          v16 = *(double *)(v3 + 56);
          if (v10.f64[1] != v16 && vabdd_f64(v10.f64[1], v16) >= 0.001)
            goto LABEL_45;
          v8 = 6;
          goto LABEL_14;
        case 3u:
          v17 = *(double *)(v3 + 56);
          if (v10.f64[1] != v17 && vabdd_f64(v10.f64[1], v17) >= 0.001)
            goto LABEL_45;
          *(float64_t *)(v3 + 48) = v10.f64[0];
          v8 = 5;
          goto LABEL_14;
        case 4u:
          v18 = *(double *)(v3 + 48);
          if (v10.f64[0] != v18 && vabdd_f64(v10.f64[0], v18) >= 0.001)
            goto LABEL_45;
          v19 = *(double *)(v3 + 40);
          if (v10.f64[1] != v19 && vabdd_f64(v10.f64[1], v19) >= 0.001)
            goto LABEL_45;
          v8 = 7;
          goto LABEL_14;
        default:
          goto LABEL_45;
      }
    }
    goto LABEL_45;
  }
  if (v5 || v4)
  {
LABEL_45:
    *(_DWORD *)(v3 + 24) = 8;
    v20 = *(CA::Shape **)(v3 + 16);
    if (v20)
    {
      CA::Shape::unref(v20);
      *(_QWORD *)(v3 + 16) = 0;
    }
    return;
  }
  v6 = *(float64x2_t *)*((_QWORD *)a2 + 1);
  if ((**((_QWORD **)a2 + 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)(*((_QWORD *)a2 + 1) + 8) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v6 = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)(*(_QWORD *)(v3 + 8) + 32), *(float64x2_t *)*(_QWORD *)(v3 + 8), v6.f64[0]), *(float64x2_t *)(*(_QWORD *)(v3 + 8) + 16), v6, 1);
  }
  *(float64x2_t *)(v3 + 32) = v6;
  v8 = 1;
LABEL_14:
  *(_DWORD *)(v3 + 24) = v8;
}

_QWORD *CALayerGetDelegate(_QWORD *result)
{
  uint64_t v1;
  id *v2;

  if (result)
  {
    v1 = result[2];
    v2 = (id *)(v1 + 128);
    if (*(_BYTE *)(v1 + 136))
      return objc_loadWeak(v2);
    else
      return *v2;
  }
  return result;
}

float64x2_t CA::CG::DrawShadow::compute_dod(int64x2_t *this, int64x2_t *a2)
{
  _BYTE *v4;
  float64x2_t result;
  float32x2_t *v6;
  float v7;
  int64x2_t v8;

  v4 = (_BYTE *)this[9].i64[0];
  if ((v4[101] & 4) != 0)
  {
    result = (float64x2_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
    v8 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    this[7] = (int64x2_t)result;
    this[8] = v8;
    *a2 = (int64x2_t)result;
    a2[1] = v8;
  }
  else
  {
    (*(void (**)(_BYTE *, int64x2_t *))(*(_QWORD *)v4 + 24))(v4, this + 7);
    result = (float64x2_t)this[7];
    *a2 = (int64x2_t)result;
    a2[1] = this[8];
    v6 = (float32x2_t *)this[9].i64[1];
    if (!v6[11].i8[1])
    {
      v7 = v6[9].f32[1] * -2.8;
      *(float64x2_t *)a2 = vaddq_f64(result, vcvtq_f64_f32(v6[10]));
      CA::BoundsImpl::inset((double *)a2->i64, v7, v7);
    }
  }
  return result;
}

float64x2_t *CA::CG::DrawImage::compute_dod(CA::CG::DrawImage *this, CA::Rect *a2)
{
  float64x2_t *v3;

  CA::Rect::operator=((double *)a2, (double *)this + 16);
  return CA::Rect::apply_transform(v3, (const CGAffineTransform *)((char *)this + 8));
}

void CA::CG::FillRoundedRect::compute_dod(CA::CG::FillRoundedRect *this, float64x2_t *a2)
{
  CA::Rect::operator=(a2->f64, (double *)this + 14);
  if ((*((_BYTE *)this + 100) & 4) == 0)
    CA::Rect::apply_transform(a2, (const CGAffineTransform *)((char *)this + 8));
}

void CA::CG::FillRects::compute_dod(CA::CG::FillRects *this, float64x2_t *a2)
{
  float64x2_t v4;
  unint64_t v5;
  float64x2_t v6;
  float64x2_t v7;
  int8x16_t *v8;
  unint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  float64x2_t v15;
  float64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int32x2_t v19;
  float64x2_t v20;

  CA::Rect::operator=(a2->f64, (double *)this + 15);
  v5 = *((_QWORD *)this + 14);
  if (v5 >= 2)
  {
    v6 = *a2;
    v7 = a2[1];
    v8 = (int8x16_t *)((char *)this + 168);
    v9 = v5 - 1;
    v4.f64[0] = 0.0;
    while (1)
    {
      v10 = v8[-1];
      v11 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v4, *(float64x2_t *)v8).i64[0], 0);
      v12.i64[1] = v8->i64[1];
      *(double *)v12.i64 = -*(double *)v8->i64;
      v13 = vbslq_s8(v11, v12, *v8);
      v12.i64[0] = 0x8000000000000000;
      v11.i64[0] = *(_OWORD *)&vaddq_f64((float64x2_t)v10, (float64x2_t)vbslq_s8(v11, *v8, v12));
      v12.i64[0] = v11.i64[0];
      v12.i64[1] = v8[-1].i64[1];
      v14 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v4, (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)v8, 1)).i64[0], 0);
      v11.i64[1] = *(_QWORD *)&vaddq_f64(*(float64x2_t *)v8, *(float64x2_t *)&v10).f64[1];
      v10.i64[0] = v13.i64[0];
      v10.i64[1] = *(_QWORD *)&vnegq_f64(*(float64x2_t *)v8).f64[1];
      v15 = (float64x2_t)vbslq_s8(v14, v11, v12);
      v16 = (float64x2_t)vbslq_s8(v14, v10, v13);
      v17 = vclezq_f64(v7);
      v18 = vclezq_f64(v16);
      v19 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v18, v17), (int8x16_t)vzip2q_s64(v18, v17))));
      if ((v19.i8[4] & 1) != 0)
        break;
      if ((v19.i8[0] & 1) == 0)
      {
        v20 = vaddq_f64(v15, v16);
        v15 = vminnmq_f64(v6, v15);
        v16 = vsubq_f64(vmaxnmq_f64(vaddq_f64(v6, v7), v20), v15);
LABEL_8:
        *a2 = v15;
        a2[1] = v16;
        v7 = v16;
        v6 = v15;
      }
LABEL_9:
      v8 += 2;
      if (!--v9)
        goto LABEL_10;
    }
    if ((v19.i8[0] & 1) != 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_10:
  if ((*((_BYTE *)this + 100) & 4) == 0)
    CA::Rect::apply_transform(a2, (const CGAffineTransform *)((char *)this + 8));
}

double CA::Rect::operator=(double *a1, double *a2)
{
  double result;
  double v3;
  double v4;
  double v5;

  v3 = *a2;
  result = a2[1];
  *a1 = *a2;
  a1[1] = result;
  v5 = a2[2];
  v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  if (v5 < 0.0)
  {
    *a1 = v5 + v3;
    a1[2] = -v5;
  }
  if (v4 < 0.0)
  {
    a1[1] = v4 + result;
    result = -v4;
    a1[3] = -v4;
  }
  return result;
}

float64x2_t *CA::CG::DrawGlyphs::compute_dod_(CA::CG::DrawGlyphs *this, float64x2_t *a2, double a3, uint64_t a4)
{
  CGFont *v7;
  BOOL v8;
  int UnitsPerEm;
  CGFloat v10;
  CGFloat v11;
  double x;
  double y;
  double width;
  double height;
  uint64_t v16;
  double *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v26;
  CGRect bboxes;
  uint64_t v29;
  CGRect v30;
  CGRect v31;
  CGRect FontBBox;

  v29 = *MEMORY[0x1E0C80C00];
  v7 = (CGFont *)*((_QWORD *)this + 14);
  bboxes.origin.x = 0.0;
  if (CGFontGetVariationAxes())
    v8 = *(_QWORD *)&bboxes.origin.x == 0;
  else
    v8 = 1;
  if (!v8)
    CGFontGetVariations();
  UnitsPerEm = CGFontGetUnitsPerEm(v7);
  v10 = -(double)UnitsPerEm;
  v11 = (double)UnitsPerEm * 2.4;
  FontBBox = CGFontGetFontBBox(v7);
  v30.origin.x = v10;
  v30.origin.y = v10;
  v30.size.width = v11;
  v30.size.height = v11;
  v31 = CGRectUnion(v30, FontBBox);
  x = v31.origin.x;
  y = v31.origin.y;
  width = v31.size.width;
  height = v31.size.height;
  v16 = *((_QWORD *)this + 23);
  if (v16)
  {
    v17 = (double *)((char *)this + a4 + 8);
    v18 = -1.79769313e308;
    v19 = 1.79769313e308;
    v20 = 1.79769313e308;
    v21 = -1.79769313e308;
    do
    {
      v22 = *(v17 - 1);
      v23 = *v17;
      if (v22 < v19)
        v19 = *(v17 - 1);
      if (v23 < v20)
        v20 = *v17;
      if (v22 > v18)
        v18 = *(v17 - 1);
      if (v23 > v21)
        v21 = *v17;
      v17 += 2;
      --v16;
    }
    while (v16);
  }
  else
  {
    v20 = 1.79769313e308;
    v21 = -1.79769313e308;
    v18 = -1.79769313e308;
    v19 = 1.79769313e308;
  }
  v26 = *((double *)this + 15);
  v24 = v26 / (double)CGFontGetUnitsPerEm(v7);
  a2[1].f64[0] = v18 - v19 + v24 * width;
  a2[1].f64[1] = v21 - v20 + v24 * height;
  a2->f64[0] = v19 + v24 * x;
  a2->f64[1] = v20 + v24 * y;
  CA::Rect::apply_transform(a2, (const CGAffineTransform *)((char *)this + 136));
  if (a3 > 0.0)
    CA::BoundsImpl::inset(a2->f64, -a3, -a3);
  return CA::Rect::apply_transform(a2, (const CGAffineTransform *)((char *)this + 8));
}

float64x2_t *CA::Rect::apply_transform(float64x2_t *this, const CGAffineTransform *a2)
{
  float64x2_t v2;
  double v3;
  double v4;
  double c;
  double b;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  int8x16_t v10;
  float64x2_t v11;
  float64x2_t v12;
  uint64_t v13;
  double v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  double *v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  int64x2_t v27;
  float64x2_t v28;
  BOOL v29;
  unsigned int v30;
  int32x2_t v31;
  int64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  int8x16_t v36;
  uint64_t v37;
  float64x2x2_t v38;
  float64x2x2_t v39;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = this[1];
  v3 = this[1].f64[1];
  if (v2.f64[0] <= v3)
    v4 = this[1].f64[1];
  else
    v4 = this[1].f64[0];
  if (v4 < 1.79769313e308)
  {
    b = a2->b;
    c = a2->c;
    if (b == 0.0 && c == 0.0)
    {
      v7 = *(float64x2_t *)&a2->a;
      v7.f64[1] = a2->d;
      v8 = vmlaq_f64(*(float64x2_t *)&a2->tx, *this, v7);
      v9 = vmlaq_f64(*(float64x2_t *)&a2->tx, vaddq_f64(*this, v2), v7);
      v10 = (int8x16_t)vcgtq_f64(v8, v9);
      v11 = (float64x2_t)vbslq_s8(v10, (int8x16_t)v9, (int8x16_t)v8);
      v12 = vsubq_f64((float64x2_t)vbslq_s8(v10, (int8x16_t)v8, (int8x16_t)v9), v11);
    }
    else
    {
      v13 = 0;
      v14 = this->f64[1];
      v33.f64[0] = this->f64[0];
      v33.f64[1] = v14;
      v34.f64[0] = v2.f64[0] + v33.f64[0];
      v34.f64[1] = v14;
      v35.f64[0] = v2.f64[0] + v33.f64[0];
      v35.f64[1] = v3 + v14;
      v36.i64[0] = *(_QWORD *)&v33.f64[0];
      *(double *)&v36.i64[1] = v3 + v14;
      v15 = (float64x2_t)vdupq_lane_s64(*(_QWORD *)&a2->a, 0);
      v16 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&c, 0);
      v17 = (float64x2_t)vdupq_lane_s64(*(_QWORD *)&a2->tx, 0);
      v18 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&b, 0);
      v19 = (float64x2_t)vdupq_lane_s64(*(_QWORD *)&a2->d, 0);
      v20 = (float64x2_t)vdupq_lane_s64(*(_QWORD *)&a2->ty, 0);
      do
      {
        v21 = &v33.f64[v13];
        v38 = vld2q_f64(v21);
        v39.val[0] = vmlaq_f64(vmlaq_f64(v17, v16, v38.val[1]), v38.val[0], v15);
        v39.val[1] = vmlaq_f64(vmlaq_f64(v20, v18, v38.val[0]), v38.val[1], v19);
        vst2q_f64(v21, v39);
        v13 += 4;
      }
      while (v13 != 8);
      v22 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v34, v33), (int8x16_t)v33, (int8x16_t)v34);
      v23 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v33, v34), (int8x16_t)v33, (int8x16_t)v34);
      v24 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v36, v35), (int8x16_t)v35, v36);
      v25 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v35, (float64x2_t)v36), (int8x16_t)v35, v36);
      v26 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v24, v22), (int8x16_t)v22, (int8x16_t)v24);
      v27 = vcgtq_f64(v23, v25);
      v28 = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)v27, (int8x16_t)v23, (int8x16_t)v25), v26);
      v25.f64[0] = vaddvq_f64(v28);
      v29 = (*(_QWORD *)&v25.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      *(_QWORD *)&v25.f64[0] &= ~0x8000000000000000;
      v27.i64[0] = 0x7FF0000000000000;
      v12 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgtq_s64(v27, (int64x2_t)v25).i64[0], 0), (int8x16_t)v28, (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL));
      v30 = v29;
      v31 = vdup_n_s32(v30);
      v32.i64[0] = v31.u32[0];
      v32.i64[1] = v31.u32[1];
      v11 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)v26, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL));
    }
    *this = v11;
    this[1] = v12;
  }
  return this;
}

void sub_18459AF68(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::CG::PathIterator::Iterator<CA::ScanConverter::Path>::callback_1(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;

  switch(*(_DWORD *)a2)
  {
    case 0:
      v8 = *(_QWORD *)(result + 8);
      v9 = *(uint64_t **)(a2 + 8);
      v10 = *v9;
      v11 = v9[1];
      result = (uint64_t)CA::ScanConverter::Path::closepath((double *)v8);
      *(_QWORD *)(v8 + 40) = v10;
      *(_QWORD *)(v8 + 48) = v11;
      *(_QWORD *)(v8 + 64) = v10;
      *(_QWORD *)(v8 + 72) = v11;
      *(_QWORD *)(v8 + 56) = 0x3FF0000000000000;
      *(_QWORD *)(v8 + 80) = 0x3FF0000000000000;
      break;
    case 1:
      result = (uint64_t)CA::ScanConverter::Path::lineto(*(double **)(result + 8), **(double **)(a2 + 8), *(double *)(*(_QWORD *)(a2 + 8) + 8));
      break;
    case 2:
      result = CA::ScanConverter::Path::quadto(*(CA::ScanConverter::Path **)(result + 8), **(double **)(a2 + 8), *(double *)(*(_QWORD *)(a2 + 8) + 8), *(double *)(*(_QWORD *)(a2 + 8) + 16), *(double *)(*(_QWORD *)(a2 + 8) + 24), a2, a3, a4, a5, a6, a7, a8);
      break;
    case 3:
      v12 = *(double **)(a2 + 8);
      result = CA::ScanConverter::Path::cubeto(*(CA::ScanConverter::Path **)(result + 8), *v12, v12[1], v12[2], v12[3], v12[4], v12[5], a2, a3, a4, a5, a6, a7, a8);
      break;
    case 4:
      result = (uint64_t)CA::ScanConverter::Path::closepath(*(double **)(result + 8));
      break;
    default:
      return result;
  }
  return result;
}

CGImageRef CA::CG::IOSurfaceDrawable::copy_cgimage_iosurface(CA::CG::IOSurfaceDrawable *this)
{
  uint64_t v3;
  os_unfair_lock_s *v4;
  __IOSurface *v5;

  if (*((_DWORD *)this + 4) == 9)
    return CA::CG::IOSurfaceDrawable::copy_cgimage(this);
  v3 = *((_QWORD *)this + 9);
  if (v3)
    CA::CG::Queue::flush(v3, 3, 1);
  v4 = (os_unfair_lock_s *)((char *)this + 12);
  os_unfair_lock_lock((os_unfair_lock_t)this + 3);
  if (*((_BYTE *)this + 68))
  {
    v5 = 0;
  }
  else
  {
    v5 = CACreateIOSurfaceBackedCGImage(*((__IOSurface **)this + 12), *((unsigned int *)this + 8), *((_QWORD *)this + 3));
    CGImageSetProperty();
  }
  os_unfair_lock_unlock(v4);
  return v5;
}

uint64_t CA::CG::ContextDelegate::operation_(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  const double *Info;
  uint64_t v8;
  int v9;
  CA::CG::Queue *v11;
  CA::CG::Queue *v12;
  uint64_t v13;
  CA::CG::DrawOp **v14;
  uint64_t Copy;
  uint64_t v16;
  uint64_t v17;
  CA::CG::DrawOp *v18;

  Info = (const double *)CGContextDelegateGetInfo();
  if (CFEqual(a4, CFSTR("kCGContextFlush")))
  {
    v8 = (*(uint64_t (**)(const double *))(*(_QWORD *)Info + 16))(Info);
    if (v8)
    {
      v9 = 3;
LABEL_7:
      CA::CG::Queue::flush(v8, v9, 1);
    }
  }
  else if (CFEqual(a4, CFSTR("kCGContextSynchronize")))
  {
    v8 = (*(uint64_t (**)(const double *))(*(_QWORD *)Info + 16))(Info);
    if (v8)
    {
      v9 = 2;
      goto LABEL_7;
    }
  }
  else
  {
    if (!CFEqual(a4, CFSTR("kCGContextWait")))
    {
      if (CFEqual(a4, CFSTR("kCGContextClear")))
      {
        v13 = (*(uint64_t (**)(const double *))(*(_QWORD *)Info + 16))(Info);
        if (!v13)
          return 0;
        v14 = (CA::CG::DrawOp **)v13;
        Copy = CGGStateCreateCopy();
        if (!Copy)
          return 0;
      }
      else
      {
        if (!CFEqual(a4, CFSTR("kCGContextErase")))
          return 0;
        v16 = (*(uint64_t (**)(const double *))(*(_QWORD *)Info + 16))(Info);
        if (!v16)
          return 0;
        v14 = (CA::CG::DrawOp **)v16;
        Copy = CGGStateCreateCopy();
        if (!Copy)
          return 0;
      }
      v17 = Copy;
      CGGStateSetCompositeOperation();
      v18 = CA::CG::ContextDelegate::fill_rects(Info, v14, a2, v17, 0, MEMORY[0x1E0C9D5E0], 1, 1, 1);
      CA::CG::ContextDelegate::submit((uint64_t)Info, (uint64_t)v14, (uint64_t)v18, a2, a3);
      CGGStateRelease();
      return 0;
    }
    v11 = (CA::CG::Queue *)(*(uint64_t (**)(const double *))(*(_QWORD *)Info + 16))(Info);
    if (v11)
    {
      v12 = v11;
      CA::CG::Queue::flush_queue(v11);
      if (CA::CG::Queue::queue(void)::once[0] != -1)
        dispatch_once_f(CA::CG::Queue::queue(void)::once, 0, (dispatch_function_t)CA::CG::Queue::create_queue);
      dispatch_sync_f((dispatch_queue_t)CA::CG::Queue::_queue, v12, (dispatch_function_t)CA::CG::Queue::finish_callback);
    }
  }
  return 0;
}

void CA::CG::Queue::flush(uint64_t a1, int a2, char a3)
{
  malloc_zone_t *malloc_zone;
  _QWORD *v7;
  void *v8;
  NSObject *v9;

  CA::CG::Queue::flush_queue((CA::CG::Queue *)a1);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v7 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
  v8 = v7;
  if (v7)
  {
    *v7 = a1;
    *((_DWORD *)v7 + 2) = a2;
  }
  ++*(_DWORD *)(a1 + 48);
  if ((a3 & 1) != 0 || (CA::CG::Queue::_disable_async & 1) != 0)
  {
    if (CA::CG::Queue::queue(void)::once[0] != -1)
      dispatch_once_f(CA::CG::Queue::queue(void)::once, 0, (dispatch_function_t)CA::CG::Queue::create_queue);
    dispatch_sync_f((dispatch_queue_t)CA::CG::Queue::_queue, v8, (dispatch_function_t)CA::CG::Queue::Flush::callback);
  }
  else
  {
    v9 = *(NSObject **)(a1 + 8);
    if (!v9)
    {
      v9 = dispatch_group_create();
      *(_QWORD *)(a1 + 8) = v9;
    }
    if (CA::CG::Queue::queue(void)::once[0] != -1)
      dispatch_once_f(CA::CG::Queue::queue(void)::once, 0, (dispatch_function_t)CA::CG::Queue::create_queue);
    dispatch_group_async_f(v9, (dispatch_queue_t)CA::CG::Queue::_queue, v8, (dispatch_function_t)CA::CG::Queue::Flush::callback);
  }
}

void CA::CG::Queue::flush_queue(CA::CG::Queue *this)
{
  _QWORD *v1;
  _QWORD *v2;
  NSObject *v4;
  NSObject *v5;

  v2 = (_QWORD *)((char *)this + 32);
  v1 = (_QWORD *)*((_QWORD *)this + 4);
  if (v1)
  {
    (*(void (**)(CA::CG::Queue *))(*(_QWORD *)this + 24))(this);
    *v2 = 0;
    v2[1] = 0;
    if (v1[3] >= (unint64_t)(v1[2] - 48))
    {
      CA::CG::Queue::deallocate_slab(v1);
    }
    else
    {
      ++*((_DWORD *)this + 12);
      dispatch_semaphore_wait((dispatch_semaphore_t)CA::CG::Queue::_queue_sema, 0xFFFFFFFFFFFFFFFFLL);
      if (BYTE9(xmmword_1ECDC6A90))
        kdebug_trace();
      if ((CA::CG::Queue::_disable_async & 1) != 0)
      {
        if (CA::CG::Queue::queue(void)::once[0] != -1)
          dispatch_once_f(CA::CG::Queue::queue(void)::once, 0, (dispatch_function_t)CA::CG::Queue::create_queue);
        dispatch_sync_f((dispatch_queue_t)CA::CG::Queue::_queue, v1, (dispatch_function_t)CA::CG::Queue::render_callback);
      }
      else
      {
        v4 = *((_QWORD *)this + 1);
        if (!v4)
        {
          v4 = dispatch_group_create();
          *((_QWORD *)this + 1) = v4;
        }
        if (CA::CG::Queue::queue(void)::once[0] != -1)
        {
          v5 = v4;
          dispatch_once_f(CA::CG::Queue::queue(void)::once, 0, (dispatch_function_t)CA::CG::Queue::create_queue);
          v4 = v5;
        }
        dispatch_group_async_f(v4, (dispatch_queue_t)CA::CG::Queue::_queue, v1, (dispatch_function_t)CA::CG::Queue::render_callback);
      }
    }
  }
}

uint64_t CA::CG::ContextDelegate::draw_image_(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, CGImage *AlternateImage)
{
  const double *Info;
  CGColor *FillColor;
  uint64_t v13;
  CA::CG::Queue *v14;
  unint64_t *v15;
  uint64_t v16;
  __int128 v18;
  double v19;
  double v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *(double *)&v18 = a1;
  *((double *)&v18 + 1) = a2;
  v19 = a3;
  v20 = a4;
  Info = (const double *)CGContextDelegateGetInfo();
  if (CGImageIsMask(AlternateImage))
    FillColor = (CGColor *)CGGStateGetFillColor();
  else
    FillColor = 0;
  v13 = (*(uint64_t (**)(const double *))(*(_QWORD *)Info + 16))(Info);
  if (v13)
  {
    v14 = (CA::CG::Queue *)v13;
    if (CGImageGetEPSRep())
      AlternateImage = (CGImage *)CGImageEPSRepGetAlternateImage();
    v15 = CA::CG::Queue::alloc(v14, 160);
    if (v15)
    {
      v16 = (uint64_t)v15;
      CA::CG::DrawImage::DrawImage((uint64_t)v15, Info, a6, a7, FillColor, &v18, AlternateImage);
      CA::CG::ContextDelegate::submit((uint64_t)Info, (uint64_t)v14, v16, a6, a7);
    }
  }
  return 0;
}

uint64_t CA::CG::ContextDelegate::draw_glyphs_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 *a5, __int128 *a6, unint64_t a7)
{
  int TextDrawingMode;
  int v14;
  const double *Info;
  uint64_t v16;
  CA::CG::Queue *v17;
  unint64_t *v18;
  CA::CG::DrawOp *v19;
  _OWORD *v20;
  unint64_t *v21;
  __int16 *v22;
  __int128 *v23;
  unint64_t v24;
  __int16 v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  _WORD *v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD *v45;
  float64x2_t v46;
  _WORD *v47;
  __int16 *v48;
  float64x2_t *v49;
  unint64_t v50;
  __int16 v51;
  float64x2_t v52;
  __int128 v53;
  CGColor *StrokeColor;
  unsigned int CompositeOperation;
  unint64_t *v56;
  uint64_t v57;
  _OWORD *v58;
  unint64_t *v59;
  unint64_t v60;
  __int16 v61;
  __int128 v62;
  _QWORD *v63;
  CGColor *FillColor;
  CA::CG::DrawOp *v66;

  TextDrawingMode = CGGStateGetTextDrawingMode();
  if (TextDrawingMode == 3)
    return 0;
  v14 = TextDrawingMode;
  Info = (const double *)CGContextDelegateGetInfo();
  v16 = (*(uint64_t (**)(const double *))(*(_QWORD *)Info + 16))(Info);
  if (!v16)
    return 0;
  v17 = (CA::CG::Queue *)v16;
  if ((v14 & 0xFFFFFFFD) == 0)
  {
    FillColor = (CGColor *)CGGStateGetFillColor();
    v18 = CA::CG::Queue::alloc(v17, 18 * a7 + 192);
    v19 = (CA::CG::DrawOp *)v18;
    if (a7)
    {
      v20 = v18 + 24;
      v21 = &v18[2 * a7 + 24];
      v22 = a5;
      v23 = a6;
      v24 = a7;
      do
      {
        v25 = *v22++;
        *(_WORD *)v21 = v25;
        v21 = (unint64_t *)((char *)v21 + 2);
        v26 = *v23++;
        *v20++ = v26;
        --v24;
      }
      while (v24);
      v27 = a7;
    }
    else
    {
      if (!v18)
        goto LABEL_11;
      v27 = 0;
    }
    CA::CG::DrawGlyphs::DrawGlyphs((uint64_t)v18, Info, a2, a3, FillColor, (_OWORD *)a4, v27);
    *(_QWORD *)v19 = off_1E1591158;
LABEL_11:
    v28 = *((_QWORD *)v17 + 5);
    if (v28)
    {
      if (!*(_QWORD *)(v28 + 104))
      {
        v66 = (CA::CG::DrawOp *)*((_QWORD *)v17 + 5);
        if (!CGGStateGetStyle()
          && (*(unsigned int (**)(CA::CG::DrawOp *, CA::CG::DrawOp *))(*(_QWORD *)v66 + 88))(v66, v19)
          && CA::CG::Queue::cancel_and_grow(v17, v19, v66, 18 * a7))
        {
          v30 = *(double *)a4;
          v29 = *(double *)(a4 + 8);
          v32 = *(double *)(a4 + 16);
          v31 = *(double *)(a4 + 24);
          v33 = *(double *)(a4 + 32);
          v34 = *(double *)(a4 + 40);
          v19 = v66;
          v35 = *((double *)v66 + 21);
          v36 = *((double *)v66 + 22);
          v37 = *((_QWORD *)v66 + 23);
          if (v37 - 1 >= 0)
          {
            v38 = (_WORD *)((char *)v66 + 18 * v37 + 190);
            v39 = *((_QWORD *)v66 + 23);
            do
            {
              v38[8 * a7] = *v38;
              --v38;
              --v39;
            }
            while (v39);
          }
          v40 = v37 + a7;
          if (a7)
          {
            v41 = v34 - v36;
            v42 = v35 - v33;
            v43 = 1.0 / -(v32 * v29 - v31 * v30);
            v44 = (v41 * v30 + v42 * v29) * v43;
            v46.f64[0] = (v41 * v32 + v42 * v31) * v43;
            v45 = (_OWORD *)((char *)v66 + 16 * v37 + 192);
            v46.f64[1] = v44;
            v47 = (_WORD *)((char *)v66 + 18 * v37 + 16 * a7 + 192);
            v48 = a5;
            v49 = (float64x2_t *)a6;
            v50 = a7;
            do
            {
              v51 = *v48++;
              *v47++ = v51;
              v52 = *v49++;
              *(_QWORD *)&v53 = *(_OWORD *)&vsubq_f64(v52, v46);
              *((_QWORD *)&v53 + 1) = *(_QWORD *)&vaddq_f64(v52, v46).f64[1];
              *v45++ = v53;
              --v50;
            }
            while (v50);
          }
          *((_QWORD *)v66 + 23) = v40;
        }
      }
    }
    CA::CG::ContextDelegate::submit((uint64_t)Info, (uint64_t)v17, (uint64_t)v19, a2, a3);
  }
  if ((v14 - 1) <= 1)
  {
    StrokeColor = (CGColor *)CGGStateGetStrokeColor();
    if (CGColorGetAlpha(StrokeColor) != 0.0
      || (CompositeOperation = CGGStateGetCompositeOperation(), CompositeOperation <= 9)
      && ((0x164u >> CompositeOperation) & 1) == 0)
    {
      v56 = CA::CG::Queue::alloc(v17, 18 * a7 + 232);
      v57 = (uint64_t)v56;
      if (a7)
      {
        v58 = v56 + 29;
        v59 = &v56[2 * a7 + 29];
        v60 = a7;
        do
        {
          v61 = *a5++;
          *(_WORD *)v59 = v61;
          v59 = (unint64_t *)((char *)v59 + 2);
          v62 = *a6++;
          *v58++ = v62;
          --v60;
        }
        while (v60);
        goto LABEL_34;
      }
      if (v56)
      {
        a7 = 0;
LABEL_34:
        v63 = (_QWORD *)CA::CG::DrawGlyphs::DrawGlyphs((uint64_t)v56, Info, a2, a3, StrokeColor, (_OWORD *)a4, a7);
        *v63 = off_1E15918F0;
        CA::CG::StrokeState::StrokeState((uint64_t)(v63 + 24));
        CA::CG::ContextDelegate::submit((uint64_t)Info, (uint64_t)v17, v57, a2, a3);
      }
    }
  }
  return 0;
}

uint64_t CA::CG::ContextDelegate::draw_linear_gradient_(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, const void *a8, char a9)
{
  const double *Info;
  CA::CG::Queue *v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  CGColorSpace *ColorSpace;
  unsigned int v24;
  BOOL v25;
  int v26;
  int v28;

  Info = (const double *)CGContextDelegateGetInfo();
  v18 = (CA::CG::Queue *)(*(uint64_t (**)(const double *))(*(_QWORD *)Info + 16))(Info);
  if (v18)
  {
    v19 = (uint64_t)v18;
    v20 = CA::CG::Queue::alloc(v18, 152);
    if (v20)
    {
      v21 = (uint64_t)v20;
      v22 = CA::CG::DrawGradient::DrawGradient((uint64_t)v20, Info, a6, a7, a8, a9);
      *(_QWORD *)v22 = off_1E1592C18;
      *(double *)(v22 + 120) = a1;
      *(double *)(v22 + 128) = a2;
      *(double *)(v22 + 136) = a3;
      *(double *)(v22 + 144) = a4;
      if ((unint64_t)CGGradientGetLocationCount() <= 0x2000)
      {
        ColorSpace = (CGColorSpace *)CGGradientGetColorSpace();
        if (CGColorSpaceGetModel(ColorSpace) <= kCGColorSpaceModelRGB)
          *(_DWORD *)(v21 + 100) |= 0x4000000u;
      }
      v24 = *(_DWORD *)(v21 + 56);
      v25 = v24 > 9;
      v26 = (1 << v24) & 0x29B;
      if (!v25 && v26 != 0)
      {
        v28 = *(_DWORD *)(v21 + 100);
        if ((v28 & 0x4000000) == 0 && (v28 & 0x3000000) != 0x3000000)
          *(_DWORD *)(v21 + 100) = v28 | 0x100;
      }
      CA::CG::ContextDelegate::submit((uint64_t)Info, v19, v21, a6, a7);
    }
  }
  return 0;
}

uint64_t CA::CG::ContextDelegate::draw_rects_(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __int128 *a5, unint64_t a6)
{
  const double *Info;
  uint64_t v12;
  CA::CG::Queue *v13;
  CGColor *FillColor;
  CA::CG::DrawOp *v15;
  CGColor *StrokeColor;
  unint64_t *v17;

  if (a6)
  {
    Info = (const double *)CGContextDelegateGetInfo();
    v12 = (*(uint64_t (**)(const double *))(*(_QWORD *)Info + 16))(Info);
    if (v12)
    {
      v13 = (CA::CG::Queue *)v12;
      if (a4 == 2
        || (FillColor = (CGColor *)CGGStateGetFillColor(),
            v15 = CA::CG::ContextDelegate::fill_rects(Info, (CA::CG::DrawOp **)v13, a2, a3, FillColor, a5, a6, 0, 1),
            CA::CG::ContextDelegate::submit((uint64_t)Info, (uint64_t)v13, (uint64_t)v15, a2, a3),
            a4 >= 2))
      {
        StrokeColor = (CGColor *)CGGStateGetStrokeColor();
        v17 = CA::CG::ContextDelegate::stroke_rects(Info, v13, a2, a3, StrokeColor, (uint64_t)a5, a6, 0);
        CA::CG::ContextDelegate::submit((uint64_t)Info, (uint64_t)v13, (uint64_t)v17, a2, a3);
      }
    }
  }
  return 0;
}

uint64_t CA::CG::AccelContextDelegate<CA::CG::IOSurfaceDrawable>::queue(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  v1 = *(_QWORD **)(a1 + 336);
  if (!v1)
    return 0;
  result = v1[9];
  if (!result)
  {
    result = (*(uint64_t (**)(_QWORD *))(*v1 + 72))(v1);
    v1[9] = result;
  }
  return result;
}

void CA::CG::ContextDelegate::submit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double *updated;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;

  if (a3)
  {
    *(_DWORD *)(a2 + 24) = CGContextDelegateGetOwnerIdentity();
    updated = CA::CG::ContextDelegate::update_style(a1);
    if (updated)
      CA::CG::ContextDelegate::resolve_style(a1, a3, a4, a5, updated);
    v11 = (_QWORD *)(a2 + 32);
    v12 = *(_QWORD **)(a2 + 32);
    if ((CA::CG::Queue::_disable_async & 1) != 0)
    {
      *v11 = 0;
      *(_QWORD *)(a2 + 40) = 0;
      ++*(_DWORD *)(a2 + 48);
      dispatch_semaphore_wait((dispatch_semaphore_t)CA::CG::Queue::_queue_sema, 0xFFFFFFFFFFFFFFFFLL);
      if (BYTE9(xmmword_1ECDC6A90))
        kdebug_trace();
      if ((CA::CG::Queue::_disable_async & 1) != 0)
      {
        if (CA::CG::Queue::queue(void)::once[0] == -1)
          goto LABEL_21;
        goto LABEL_26;
      }
      v13 = *(NSObject **)(a2 + 8);
      if (!v13)
      {
        v13 = dispatch_group_create();
        *(_QWORD *)(a2 + 8) = v13;
      }
      if (CA::CG::Queue::queue(void)::once[0] == -1)
        goto LABEL_25;
      goto LABEL_27;
    }
    if (!v12[4])
    {
      *v11 = 0;
      *(_QWORD *)(a2 + 40) = 0;
      ++*(_DWORD *)(a2 + 48);
      dispatch_semaphore_wait((dispatch_semaphore_t)CA::CG::Queue::_queue_sema, 0xFFFFFFFFFFFFFFFFLL);
      if (BYTE9(xmmword_1ECDC6A90))
        kdebug_trace();
      if ((CA::CG::Queue::_disable_async & 1) != 0)
      {
        if (CA::CG::Queue::queue(void)::once[0] == -1)
        {
LABEL_21:
          dispatch_sync_f((dispatch_queue_t)CA::CG::Queue::_queue, v12, (dispatch_function_t)CA::CG::Queue::render_callback);
          return;
        }
LABEL_26:
        dispatch_once_f(CA::CG::Queue::queue(void)::once, 0, (dispatch_function_t)CA::CG::Queue::create_queue);
        goto LABEL_21;
      }
      v13 = *(NSObject **)(a2 + 8);
      if (!v13)
      {
        v13 = dispatch_group_create();
        *(_QWORD *)(a2 + 8) = v13;
      }
      if (CA::CG::Queue::queue(void)::once[0] == -1)
        goto LABEL_25;
LABEL_27:
      dispatch_once_f(CA::CG::Queue::queue(void)::once, 0, (dispatch_function_t)CA::CG::Queue::create_queue);
LABEL_25:
      dispatch_group_async_f(v13, (dispatch_queue_t)CA::CG::Queue::_queue, v12, (dispatch_function_t)CA::CG::Queue::render_callback);
      return;
    }
    *(_QWORD *)(a2 + 40) = a3;
  }
}

double *CA::CG::ContextDelegate::update_style(uint64_t a1)
{
  double *result;
  uint64_t v3;
  int v4;
  malloc_zone_t *malloc_zone;
  float *v6;
  float *v7;
  malloc_zone_t *v8;
  float *v9;
  uint64_t Data;
  float v11;
  malloc_zone_t *v12;
  float *v13;
  malloc_zone_t *v14;
  float *v15;
  float64x2_t *v16;
  uint64_t i;
  float64x2_t v18;
  float64x2_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  double *BaseCTM;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;

  result = (double *)CGGStateGetStyle();
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 320);
    if (v3)
    {
      v4 = *(_DWORD *)(v3 + 12);
      if (v4 == CGStyleGetIdentifier())
        goto LABEL_22;
    }
    switch(CGStyleGetType())
    {
      case 1u:
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        v6 = (float *)malloc_type_zone_malloc(malloc_zone, 0x60uLL, 0x8BB15036uLL);
        v7 = v6;
        if (v6)
        {
          CA::CG::Style::Style((uint64_t)v6);
          *(_QWORD *)v7 = off_1E15915C8;
          *((_WORD *)v7 + 44) = 0;
        }
        break;
      case 2u:
        v8 = (malloc_zone_t *)get_malloc_zone();
        v9 = (float *)malloc_type_zone_malloc(v8, 0x58uLL, 0x8BB15036uLL);
        v7 = v9;
        if (v9)
        {
          CA::CG::Style::Style((uint64_t)v9);
          *(_QWORD *)v7 = off_1E15920D8;
          Data = CGStyleGetData();
          v11 = *(double *)(Data + 32);
          v7[20] = v11;
          v7[21] = *(float *)(Data + 72);
        }
        break;
      case 3u:
        v12 = (malloc_zone_t *)get_malloc_zone();
        v13 = (float *)malloc_type_zone_malloc(v12, 0x58uLL, 0x8BB15036uLL);
        v7 = v13;
        if (v13)
        {
          CA::CG::Style::Style((uint64_t)v13);
          *(_QWORD *)v7 = off_1E1592A28;
          *((double *)v7 + 10) = *(double *)(CGStyleGetData() + 8) * 0.5;
        }
        break;
      case 4u:
        v14 = (malloc_zone_t *)get_malloc_zone();
        v15 = (float *)malloc_type_zone_malloc(v14, 0xA0uLL, 0x8BB15036uLL);
        v7 = v15;
        if (v15)
        {
          CA::CG::Style::Style((uint64_t)v15);
          *(_QWORD *)v7 = off_1E1592568;
          v16 = (float64x2_t *)(CGStyleGetData() + 8);
          for (i = 19; i != 39; i += 4)
          {
            v19 = *v16;
            v18 = v16[1];
            v16 += 2;
            *(float32x4_t *)&v7[i] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v19), v18);
          }
        }
        break;
      default:
        v7 = 0;
        break;
    }
    v20 = *(unsigned int **)(a1 + 320);
    *(_QWORD *)(a1 + 320) = v7;
    if (v20)
    {
      v21 = v20 + 2;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
        (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
      v7 = *(float **)(a1 + 320);
    }
    if (v7)
    {
LABEL_22:
      BaseCTM = (double *)CGRenderingStateGetBaseCTM();
      v25 = *BaseCTM;
      v26 = BaseCTM[1];
      v27 = BaseCTM[2];
      v28 = BaseCTM[3];
      v29 = BaseCTM[4];
      v30 = BaseCTM[5];
      result = *(double **)(a1 + 320);
      if (result[3] != v25
        || result[4] != v26
        || result[5] != v27
        || result[6] != v28
        || result[7] != v29
        || result[8] != v30)
      {
        if (*((_DWORD *)result + 2) != 1)
        {
          result = (double *)(*(uint64_t (**)(double *))(*(_QWORD *)result + 40))(result);
          v31 = *(unsigned int **)(a1 + 320);
          *(_QWORD *)(a1 + 320) = result;
          if (v31)
          {
            v32 = v31 + 2;
            do
            {
              v33 = __ldaxr(v32);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v32));
            if (!v34)
              (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
            result = *(double **)(a1 + 320);
          }
        }
        result[3] = v25;
        result[4] = v26;
        result[5] = v27;
        result[6] = v28;
        result[7] = v29;
        result[8] = v30;
        (*(void (**)(double *))(*(_QWORD *)result + 16))(result);
        return *(double **)(a1 + 320);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CA::CG::DrawOp *CA::CG::ContextDelegate::fill_rects(const double *a1, CA::CG::DrawOp **this, uint64_t a3, uint64_t a4, CGColor *a5, __int128 *a6, uint64_t a7, int a8, char a9)
{
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  __int128 v22;
  int v23;
  CA::CG::DrawOp *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  double v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  double v37;
  double v38;
  float64x2_t v39;
  float64x2_t v40;
  int8x16_t v41;
  float64x2_t v42;
  float64x2_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  float64x2_t v47;
  int8x16_t v48;
  uint64_t v49;
  uint64_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  double *v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int64x2_t v61;
  int8x16_t v62;
  int64x2_t v63;
  int8x16_t v64;
  BOOL v65;
  unsigned int v66;
  int32x2_t v67;
  int64x2_t v68;
  double v69;
  double v70;
  double v71;
  double v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  int v76;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  uint64_t v85;
  float64x2x2_t v86;
  float64x2x2_t v87;
  CGRect BoundingBox;

  v85 = *MEMORY[0x1E0C80C00];
  v16 = 32 * a7;
  v17 = CA::CG::Queue::alloc((CA::CG::Queue *)this, 32 * a7 + 120);
  v18 = (uint64_t)v17;
  v19 = 0;
  v20 = a7;
  do
  {
    v21 = &v17[v19 / 8];
    v22 = a6[v19 / 0x10];
    *(_OWORD *)(v21 + 17) = a6[v19 / 0x10 + 1];
    *(_OWORD *)(v21 + 15) = v22;
    v19 += 32;
    --v20;
  }
  while (v20);
  if (a8)
    v23 = 4;
  else
    v23 = 0;
  CA::CG::DrawOp::DrawOp((uint64_t)v17, a1, a3, a4, a5, v23 | ((a7 == 1) << 24));
  *(_QWORD *)(v18 + 112) = a7;
  *(_QWORD *)v18 = off_1E1593CB8;
  v24 = this[5];
  if (v24
    && !*((_QWORD *)v24 + 13)
    && !CGGStateGetStyle()
    && (*(unsigned int (**)(CA::CG::DrawOp *, uint64_t))(*(_QWORD *)v24 + 96))(v24, v18)
    && CA::CG::Queue::cancel_and_grow((CA::CG::Queue *)this, (CA::CG::DrawOp *)v18, v24, v16))
  {
    v25 = *((_QWORD *)v24 + 14);
    v26 = 32 * v25 + 120;
    v27 = a7;
    do
    {
      v28 = (_OWORD *)((char *)v24 + v26);
      v29 = *a6;
      v30 = a6[1];
      a6 += 2;
      *v28 = v29;
      v28[1] = v30;
      v26 += 32;
      --v27;
    }
    while (v27);
    *((_QWORD *)v24 + 14) = v25 + a7;
  }
  else
  {
    if (a7 == 1)
    {
      if (a9)
      {
        v31 = *(_QWORD *)(v18 + 72);
        if (v31)
        {
          if (*(_DWORD *)(v31 + 4) == 1
            && (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v31 + 56) + 16))(v31 + 56) == 5)
          {
            BoundingBox = CGPathGetBoundingBox((CGPathRef)*(_QWORD *)(v31 + 64));
            v79.f64[0] = BoundingBox.origin.x;
            v79.f64[1] = BoundingBox.origin.y;
            v80.f64[0] = BoundingBox.size.width;
            v80.f64[1] = BoundingBox.size.height;
            if (BoundingBox.size.width < 0.0)
            {
              BoundingBox.origin.x = BoundingBox.size.width + BoundingBox.origin.x;
              v79.f64[0] = BoundingBox.origin.x;
              v80.f64[0] = -BoundingBox.size.width;
            }
            if (BoundingBox.size.height < 0.0)
            {
              BoundingBox.origin.y = BoundingBox.size.height + BoundingBox.origin.y;
              v79.f64[1] = BoundingBox.origin.y;
              v80.f64[1] = -BoundingBox.size.height;
            }
            if ((*(_BYTE *)(v18 + 100) & 4) == 0)
            {
              v32 = v80.f64[0] <= v80.f64[1] ? v80.f64[1] : v80.f64[0];
              if (v32 < 1.79769313e308)
              {
                v33.f64[0] = *(float64_t *)(v18 + 32);
                v34 = *(float64x2_t *)(v18 + 16);
                v35.f64[1] = *(float64_t *)(v18 + 24);
                v35.f64[0] = v33.f64[0];
                v36 = vmulq_f64(v35, *(float64x2_t *)(v18 + 8));
                v37 = vsubq_f64(v36, (float64x2_t)vdupq_laneq_s64((int64x2_t)v36, 1)).f64[0];
                if (v37 != 0.0)
                {
                  v38 = 1.0 / v37;
                  v33.f64[1] = *(float64_t *)(v18 + 8);
                  v39 = vmulq_n_f64(v33, 1.0 / v37);
                  v40 = *(float64x2_t *)(v18 + 40);
                  v41 = (int8x16_t)vmulq_f64(v40, v34);
                  v42 = vmulq_n_f64(vmlsq_f64((float64x2_t)vextq_s8(v41, v41, 8uLL), v33, v40), v38);
                  v43 = vmulq_n_f64(vnegq_f64(v34), v38);
                  *(int32x2_t *)&v40.f64[0] = vmovn_s64(vceqzq_f64(v43));
                  if ((vand_s8(*(int8x8_t *)&v40.f64[0], (int8x8_t)vdup_lane_s32(*(int32x2_t *)&v40.f64[0], 1)).u8[0] & 1) != 0)
                  {
                    v44 = (int8x16_t)vmlaq_f64(v42, v39, v79);
                    v45 = (int8x16_t)vmlaq_f64(v42, v39, vaddq_f64(v79, v80));
                    v46 = (int8x16_t)vcgtq_f64((float64x2_t)v44, (float64x2_t)v45);
                    v47 = (float64x2_t)vbslq_s8(v46, v45, v44);
                    v48 = (int8x16_t)vsubq_f64((float64x2_t)vbslq_s8(v46, v44, v45), v47);
                  }
                  else
                  {
                    v49 = 0;
                    v81.f64[0] = BoundingBox.origin.x;
                    v81.f64[1] = BoundingBox.origin.y;
                    v82.f64[0] = v80.f64[0] + BoundingBox.origin.x;
                    v82.f64[1] = BoundingBox.origin.y;
                    *(double *)&v50 = v80.f64[1] + BoundingBox.origin.y;
                    v51 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v39.f64[0], 0);
                    v52 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v43, 1);
                    v83.f64[0] = v80.f64[0] + BoundingBox.origin.x;
                    *(_QWORD *)&v83.f64[1] = v50;
                    v53 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v42.f64[0], 0);
                    v54 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v43.f64[0], 0);
                    v84.f64[0] = BoundingBox.origin.x;
                    *(_QWORD *)&v84.f64[1] = v50;
                    v55 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v39, 1);
                    v56 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v42, 1);
                    do
                    {
                      v57 = &v81.f64[v49];
                      v86 = vld2q_f64(v57);
                      v87.val[0] = vmlaq_f64(vmlaq_f64(v53, v51, v86.val[0]), v52, v86.val[1]);
                      v87.val[1] = vmlaq_f64(vmlaq_f64(v56, v54, v86.val[0]), v55, v86.val[1]);
                      vst2q_f64(v57, v87);
                      v49 += 4;
                    }
                    while (v49 != 8);
                    v58 = vbslq_s8((int8x16_t)vcgtq_f64(v82, v81), (int8x16_t)v81, (int8x16_t)v82);
                    v59 = vbslq_s8((int8x16_t)vcgtq_f64(v81, v82), (int8x16_t)v81, (int8x16_t)v82);
                    v60 = vbslq_s8((int8x16_t)vcgtq_f64(v84, v83), (int8x16_t)v83, (int8x16_t)v84);
                    v61 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v83, v84), (int8x16_t)v83, (int8x16_t)v84);
                    v62 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v60, (float64x2_t)v58), v58, v60);
                    v63 = vcgtq_f64((float64x2_t)v59, (float64x2_t)v61);
                    v64 = (int8x16_t)vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)v63, v59, (int8x16_t)v61), (float64x2_t)v62);
                    *(double *)v61.i64 = vaddvq_f64((float64x2_t)v64);
                    v65 = (v61.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
                    v61.i64[0] &= ~0x8000000000000000;
                    v63.i64[0] = 0x7FF0000000000000;
                    v48 = vbslq_s8((int8x16_t)vdupq_lane_s64(vcgtq_s64(v63, v61).i64[0], 0), v64, (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL));
                    v66 = v65;
                    v67 = vdup_n_s32(v66);
                    v68.i64[0] = v67.u32[0];
                    v68.i64[1] = v67.u32[1];
                    v47 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v68, 0x3FuLL)), v62, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL));
                  }
                  v79 = v47;
                  v80 = (float64x2_t)v48;
                }
              }
            }
            v69 = *(double *)(v18 + 120);
            v81.f64[0] = v69;
            v70 = *(double *)(v18 + 128);
            v81.f64[1] = v70;
            v71 = *(double *)(v18 + 136);
            v82.f64[0] = v71;
            v72 = *(double *)(v18 + 144);
            v82.f64[1] = v72;
            if (v71 < 0.0)
            {
              v81.f64[0] = v71 + v69;
              v82.f64[0] = -v71;
            }
            if (v72 < 0.0)
            {
              v81.f64[1] = v72 + v70;
              v82.f64[1] = -v72;
            }
            if (CA::BoundsImpl::contains(v81.f64, v79.f64)
              && (!CGGStateGetStyle() || CGStyleGetType() != 2))
            {
              CA::CG::Queue::cancel((CA::CG::Queue *)this, (CA::CG::DrawOp *)v18);
              v73 = CA::CG::ContextDelegate::fill_path(a1, (CA::CG::Queue *)this, a3, a4, a5, *(const CGPath **)(v31 + 64), *(unsigned __int8 *)(v31 + 72), 1, 0, 0, 0);
              v18 = v73;
              v74 = *(_DWORD *)(v73 + 100);
              v75 = v74 & 0xFFFFFFDE | 0x20;
              v76 = v74 | 0x21;
              if (!*(_BYTE *)(v31 + 73))
                v76 = v75;
              *(_DWORD *)(v73 + 100) = v76;
            }
          }
        }
      }
    }
    return (CA::CG::DrawOp *)v18;
  }
  return v24;
}

uint64_t CA::CG::DrawOp::DrawOp(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, CGColor *a5, int a6)
{
  _OWORD *CTM;
  __int128 v13;
  __int128 v14;
  malloc_zone_t *malloc_zone;
  _QWORD *v16;
  int ShouldAntialias;
  uint64_t v18;
  unsigned int *v19;
  int v20;
  double v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  double v26;
  float v27;
  double v29[2];

  v29[1] = *(double *)MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E1593790;
  CTM = (_OWORD *)CGGStateGetCTM();
  v14 = CTM[1];
  v13 = CTM[2];
  *(_OWORD *)(a1 + 8) = *CTM;
  *(_OWORD *)(a1 + 24) = v14;
  *(_OWORD *)(a1 + 40) = v13;
  *(_DWORD *)(a1 + 56) = CGGStateGetCompositeOperation();
  if (CGGStateGetSoftMask())
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v16 = malloc_type_zone_malloc(malloc_zone, 0x18uLL, 0x8BB15036uLL);
    if (v16)
    {
      *v16 = CGSoftMaskRetain();
      v16[1] = CGRenderingStateCreateCopy();
      v16[2] = CGGStateCreateCopy();
    }
  }
  else
  {
    v16 = 0;
  }
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = 0;
  v29[0] = 1.10008428e-19;
  CA::CG::DeviceColor::DeviceColor((double *)(a1 + 80), a5, a3, a4, a2, v29);
  ShouldAntialias = CGGStateGetShouldAntialias();
  if (ShouldAntialias)
    ShouldAntialias = CGRenderingStateGetAllowsAntialiasing();
  *(_DWORD *)(a1 + 100) = a6 | (2 * (a5 != 0)) | ShouldAntialias;
  *(_QWORD *)(a1 + 104) = 0;
  v18 = CA::CG::ContextDelegate::clip_stack((uint64_t)a2);
  if (v18)
  {
    v19 = (unsigned int *)v18;
    if (*(_DWORD *)(v18 + 4))
      goto LABEL_15;
    v20 = *(_DWORD *)(v18 + 48);
    if (v20 <= *(_DWORD *)(v18 + 52))
      v20 = *(_DWORD *)(v18 + 52);
    if (v20 < 0x3FFFFFFF)
      goto LABEL_15;
    v21 = *(double *)(v18 + 24);
    if (v21 <= *(double *)(v18 + 32))
      v21 = *(double *)(v18 + 32);
    if (v21 < 1.79769313e308)
    {
LABEL_15:
      v22 = *(unsigned int **)(a1 + 72);
      if (v22 != v19)
      {
        if (v22)
        {
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
            CA::CG::ClipStack::destroy_clip_stack((void (***)(char *))v22);
        }
        do
          v25 = __ldaxr(v19);
        while (__stlxr(v25 + 1, v19));
        *(_QWORD *)(a1 + 72) = v19;
      }
    }
  }
  if ((*(_BYTE *)(a1 + 100) & 0x40) == 0)
  {
    CGGStateGetAlpha();
    v27 = v26;
    if (v27 != 1.0)
      *(float16x4_t *)(a1 + 88) = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(*(float16x4_t *)(a1 + 88)), v27));
  }
  if (*(_QWORD *)(a1 + 80))
    *(_DWORD *)(a1 + 100) |= 0x800u;
  return a1;
}

double *CA::CG::DeviceColor::DeviceColor(double *a1, CGColor *a2, uint64_t a3, uint64_t a4, const double *a5, double *a6)
{
  int Identifier;
  int v11;
  uint64_t v12;
  const double *v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  CGPatternRef Pattern;
  CGPatternRef v19;
  double Alpha;
  malloc_zone_t *malloc_zone;
  char *v22;
  CGColor *PatternBaseColor;
  _OWORD *BaseCTM;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  float64x2_t *v29;
  CGColorSpace *v30;
  double *v31;
  double *v32;
  int v33;
  uint64_t v34;
  float64x2_t *Components;
  CGColorSpace *ColorSpace;
  double *v37;
  float v38;
  int v39;
  _QWORD v41[2];

  v41[1] = *MEMORY[0x1E0C80C00];
  *a1 = 0.0;
  if (a2)
  {
    Identifier = CGColorGetIdentifier();
    v11 = Identifier;
    v12 = 0;
    v13 = a5 + 5;
    v14 = Identifier & 7;
    v15 = 1;
    do
    {
      v16 = v15;
      v17 = (uint64_t)&v13[4 * v14 + 2 * v12];
      if (*(_DWORD *)v17 == Identifier)
      {
        v31 = (double *)(v17 + 8);
        a1[1] = *(double *)(v17 + 8);
        if ((v16 & 1) == 0)
        {
          v32 = (double *)&v13[4 * v14];
          v33 = *(_DWORD *)v32;
          v34 = *((_QWORD *)v32 + 1);
          *(_DWORD *)v32 = *(_DWORD *)v17;
          v32[1] = *v31;
          *(_DWORD *)v17 = v33;
          *(_QWORD *)v31 = v34;
        }
        return a1;
      }
      v15 = 0;
      v12 = 1;
    }
    while ((v16 & 1) != 0);
    Pattern = CGColorGetPattern(a2);
    if (!Pattern)
    {
      Components = (float64x2_t *)CGColorGetComponents(a2);
      ColorSpace = CGColorGetColorSpace(a2);
      CA::CG::ContextDelegate::device_color((CA::CG::ContextDelegate *)v41, a5, Components, ColorSpace);
      a1[1] = *(double *)v41;
      v37 = (double *)&v13[4 * v14];
      *((_DWORD *)v37 + 4) = *(_DWORD *)v37;
      v37[3] = v37[1];
      *(_DWORD *)v37 = v11;
      v37[1] = a1[1];
      return a1;
    }
    v19 = Pattern;
    Alpha = CGColorGetAlpha(a2);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v22 = (char *)malloc_type_zone_malloc(malloc_zone, 0x58uLL, 0x8BB15036uLL);
    if (v22)
    {
      PatternBaseColor = (CGColor *)CGColorGetPatternBaseColor();
      *(_QWORD *)v22 = CFRetain(v19);
      BaseCTM = (_OWORD *)CGRenderingStateGetBaseCTM();
      v26 = BaseCTM[1];
      v25 = BaseCTM[2];
      *(_OWORD *)(v22 + 8) = *BaseCTM;
      *(_OWORD *)(v22 + 24) = v26;
      *(_OWORD *)(v22 + 40) = v25;
      CGGStateGetPatternPhase();
      *((_QWORD *)v22 + 7) = v27;
      *((_QWORD *)v22 + 8) = v28;
      if (PatternBaseColor)
      {
        v29 = (float64x2_t *)CGColorGetComponents(PatternBaseColor);
        v30 = CGColorGetColorSpace(PatternBaseColor);
        CA::CG::ContextDelegate::device_color((CA::CG::ContextDelegate *)v41, a5, v29, v30);
        *((_QWORD *)v22 + 9) = v41[0];
      }
      else
      {
        *((_QWORD *)v22 + 9) = 0x3C003C003C003C00;
        if (Alpha != 1.0)
        {
          v38 = Alpha;
          *((float16x4_t *)v22 + 9) = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16((float16x4_t)0x3C003C003C003C00), v38));
        }
      }
      CGGStateGetEDRTargetHeadroom();
      *((_DWORD *)v22 + 20) = v39;
    }
    *(_QWORD *)a1 = v22;
  }
  a1[1] = *a6;
  return a1;
}

uint64_t CA::CG::ContextDelegate::clip_stack(uint64_t a1)
{
  int Identifier;
  int v3;
  uint64_t Count;
  double v5;
  uint64_t v6;
  double v7;
  int8x16_t v8;
  float64x2_t v9;
  float64x2_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  double v16;
  char *v17;
  char *v18;
  int32x4_t *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  int8x16_t v23;
  float64x2_t v24;
  float64x2_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float64x2_t v29;
  float64x2_t v30;
  int64x2_t v31;
  int8x16_t v32;
  int32x4_t v33;
  uint64_t v34;
  char *v35;
  int ShouldAntialias;
  unsigned int Mode;
  uint64_t v38;
  uint64_t v39;
  int8x16_t v40;
  float64x2_t v41;
  float64x2_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int v49;
  char *v50;
  int v51;
  const CGPath *Path;
  int v53;
  char *v54;
  CGImage *Image;
  double v56;
  uint64_t v57;
  int8x16_t v58;
  float64x2_t v59;
  float64x2_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int v66;
  char *v67;
  __int128 v68;
  __int128 v69;
  const CGPath *v70;
  const CGPath *v71;
  int v72;
  char *v73;
  const CGPath *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int8x16_t v79;
  float64x2_t v80;
  float64x2_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int v88;
  char *v89;
  float64x2_t v90;
  int8x16_t v91;
  uint64_t v92;
  CGPoint v93;
  int8x16_t v94;
  int v95;
  int8x16_t v96;
  char *v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  float64x2_t v103;
  int v104;
  char *v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  float64x2_t v114;
  float64x2_t v115;
  CGSize size;
  float64x2_t v117;
  int v118;
  char *v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int v126;
  char *v127;
  int v128;
  char *v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int64x2_t v135;
  int8x16_t v136;
  int32x4_t v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;
  int v142;
  uint64_t v143;
  float64x2_t v144;
  int8x16_t v145;
  float64x2_t v146;
  int8x16_t v147;
  CGRect rect;
  uint64_t v149;
  uint64_t v150;
  _QWORD *(*v151)(_QWORD *, uint64_t, _BYTE *);
  void *v152;
  _QWORD *v153;
  uint64_t *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  char v159;
  _QWORD v160[3];
  int v161;
  _QWORD v162[4];
  int8x16_t v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  CGGStateGetClipStack();
  Identifier = CGClipStackGetIdentifier();
  if (*(_DWORD *)(a1 + 304) != Identifier)
  {
    v3 = Identifier;
    Count = CGClipStackGetCount();
    CGClipStackGetRect();
    *(double *)v8.i64 = v7;
    *(double *)&v8.i64[1] = v5;
    v9.f64[0] = 0.0;
    v11.i64[0] = *(_QWORD *)&v10.f64[0];
    v11.i64[1] = v6;
    v12 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v9, v10).i64[0], 0);
    v13.i64[1] = v6;
    *(double *)v13.i64 = -v10.f64[0];
    v14 = vbslq_s8(v12, v13, v11);
    v10.f64[1] = v5;
    v10.f64[0] = v10.f64[0] + v7;
    v15 = vbslq_s8(v12, (int8x16_t)v10, v8);
    if (*(double *)&v6 < 0.0)
    {
      *(double *)&v15.i64[1] = *(double *)&v6 + v5;
      *(double *)&v14.i64[1] = -*(double *)&v6;
    }
    if (!Count)
    {
      v16 = *(double *)&v14.i64[1];
      if (*(double *)v14.i64 > *(double *)&v14.i64[1])
        v16 = *(double *)v14.i64;
      if (v16 >= 1.79769313e308)
      {
        v17 = 0;
        goto LABEL_62;
      }
    }
    v144 = (float64x2_t)v15;
    v146 = (float64x2_t)v14;
    v18 = (char *)malloc_type_malloc(104 * Count + 56, 0x2CF3A3ECuLL);
    v17 = v18;
    *(_DWORD *)v18 = 1;
    v19 = (int32x4_t *)(v18 + 40);
    *(float64x2_t *)(v18 + 8) = v144;
    *(float64x2_t *)(v18 + 24) = v146;
    *((_DWORD *)v18 + 1) = 0;
    if (Count)
    {
      CGClipStackGetBounds();
      *(double *)v23.i64 = v22;
      v23.i64[1] = v20;
      v24.f64[0] = 0.0;
      v26.i64[0] = *(_QWORD *)&v25.f64[0];
      v26.i64[1] = v21;
      v27 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v24, v25).i64[0], 0);
      v28.i64[1] = v20;
      *(double *)v28.i64 = v25.f64[0] + v22;
      v29 = (float64x2_t)vbslq_s8(v27, v28, v23);
      v23.i64[1] = v21;
      *(double *)v23.i64 = -v25.f64[0];
      v30 = (float64x2_t)vbslq_s8(v27, v23, v26);
      if (*(double *)&v21 < 0.0)
      {
        v29.f64[1] = *(double *)&v21 + *(double *)&v20;
        v30.f64[1] = -*(double *)&v21;
      }
      v31 = vceqzq_f64(v30);
      v143 = a1;
      v142 = v3;
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v31, 1), (int8x16_t)v31).u64[0] & 0x8000000000000000) != 0
        || (v32 = vorrq_s8((int8x16_t)vcltzq_f64(v30), (int8x16_t)vcgezq_f64(v30)),
            (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v32), 1), v32).u64[0] & 0x8000000000000000) != 0))
      {
        v19->i64[0] = 0;
        v19->i64[1] = 0;
      }
      else
      {
        v33 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v29, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        *v19 = vuzp1q_s32(v33, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v29, v30), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v33));
      }
      v34 = 0;
      v35 = v17 + 56;
      while (1)
      {
        CGClipStackGetClipAtIndex();
        ShouldAntialias = CGClipGetShouldAntialias();
        switch(CGClipGetType())
        {
          case 0u:
            Mode = CGClipGetMode();
            if (Mode > 1)
            {
              if (Mode == 2)
              {
                CGClipGetStroke();
                CGClipStrokeGetLineWidth();
                v76 = v75;
                CGClipGetRect();
                v79.i64[1] = v77;
                v80.f64[0] = 0.0;
                v82.i64[0] = *(_QWORD *)&v81.f64[0];
                v82.i64[1] = v78;
                v83 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v80, v81).i64[0], 0);
                v84.i64[1] = v77;
                *(double *)v84.i64 = v81.f64[0] + *(double *)v79.i64;
                v85 = vbslq_s8(v83, v84, v79);
                v86.i64[1] = v78;
                *(double *)v86.i64 = -v81.f64[0];
                v87 = vbslq_s8(v83, v86, v82);
                if (*(double *)&v78 < 0.0)
                {
                  *(double *)&v85.i64[1] = *(double *)&v78 + *(double *)&v77;
                  *(double *)&v87.i64[1] = -*(double *)&v78;
                }
                v88 = *((_DWORD *)v17 + 1);
                *((_DWORD *)v17 + 1) = v88 + 1;
                v89 = &v35[104 * v88];
                *(_QWORD *)v89 = off_1E1591EF0;
                *(int8x16_t *)(v89 + 8) = v85;
                *(int8x16_t *)(v89 + 24) = v87;
                *((_QWORD *)v89 + 5) = v76;
                v89[48] = ShouldAntialias;
              }
            }
            else
            {
              CGClipGetRect();
              v40.i64[1] = v38;
              v41.f64[0] = 0.0;
              v43.i64[0] = *(_QWORD *)&v42.f64[0];
              v43.i64[1] = v39;
              v44 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v41, v42).i64[0], 0);
              v45.i64[1] = v38;
              *(double *)v45.i64 = v42.f64[0] + *(double *)v40.i64;
              v46 = vbslq_s8(v44, v45, v40);
              v47.i64[1] = v39;
              *(double *)v47.i64 = -v42.f64[0];
              v48 = vbslq_s8(v44, v47, v43);
              if (*(double *)&v39 < 0.0)
              {
                *(double *)&v46.i64[1] = *(double *)&v39 + *(double *)&v38;
                *(double *)&v48.i64[1] = -*(double *)&v39;
              }
              v49 = *((_DWORD *)v17 + 1);
              *((_DWORD *)v17 + 1) = v49 + 1;
              v50 = &v35[104 * v49];
              *(_QWORD *)v50 = off_1E15916D8;
              *(int8x16_t *)(v50 + 8) = v46;
              *(int8x16_t *)(v50 + 24) = v48;
              v50[40] = ShouldAntialias;
            }
            goto LABEL_46;
          case 2u:
            v51 = CGClipGetMode();
            Path = (const CGPath *)CGClipGetPath();
            if (v51 == 2)
            {
              CGClipGetStroke();
              Path = (const CGPath *)CGClipStrokeCreateStrokedPath();
            }
            if (!Path)
              goto LABEL_43;
            if ((CGPathIsRegion() & 1) != 0)
            {
              v53 = *((_DWORD *)v17 + 1);
              *((_DWORD *)v17 + 1) = v53 + 1;
              v54 = &v35[104 * v53];
              *(_QWORD *)v54 = off_1E1593858;
              *((_QWORD *)v54 + 1) = CGPathRetain(Path);
              v54[16] = v51 == 1;
              v54[17] = ShouldAntialias;
              goto LABEL_43;
            }
            memset(&rect, 0, sizeof(rect));
            if (CGPathIsRect(Path, &rect))
              goto LABEL_42;
            if ((unint64_t)(CGPathGetNumberOfElements() - 7) <= 0xFFFFFFFFFFFFFFFDLL)
              goto LABEL_49;
            v165 = 0u;
            v166 = 0u;
            v163 = 0u;
            v164 = 0u;
            v162[0] = 0;
            v162[1] = v162;
            v162[2] = 0x2000000000;
            v162[3] = &v163;
            v160[0] = 0;
            v160[1] = v160;
            v160[2] = 0x2000000000;
            v161 = 0;
            v156 = 0;
            v157 = &v156;
            v158 = 0x2000000000;
            v159 = 1;
            v149 = MEMORY[0x1E0C809B0];
            v150 = 0x40000000;
            v151 = __CA_CGPathIsRectShape_block_invoke;
            v152 = &unk_1E15ABBE8;
            v153 = v160;
            v154 = &v156;
            v155 = v162;
            CGPathApplyWithBlock2();
            if (*((_BYTE *)v157 + 24))
            {
              v91 = v163;
              v92 = 16;
              v93 = (CGPoint)v163;
              do
              {
                v94 = *(int8x16_t *)((char *)&v163 + v92);
                v93 = (CGPoint)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v93, (float64x2_t)v94), v94, (int8x16_t)v93);
                v91 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v94, (float64x2_t)v91), v94, v91);
                v92 += 16;
              }
              while (v92 != 64);
              rect.origin = v93;
              rect.size = (CGSize)vsubq_f64((float64x2_t)v91, (float64x2_t)v93);
              _Block_object_dispose(&v156, 8);
              _Block_object_dispose(v160, 8);
              _Block_object_dispose(v162, 8);
LABEL_42:
              v95 = *((_DWORD *)v17 + 1);
              *((_DWORD *)v17 + 1) = v95 + 1;
              v90.f64[0] = 0.0;
              v96 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v90, (float64x2_t)rect.size).i64[0], 0);
              v97 = &v35[104 * v95];
              v98.i64[1] = *(_QWORD *)&rect.size.height;
              *(double *)v98.i64 = -rect.size.width;
              v99 = vbslq_s8(v96, v98, (int8x16_t)rect.size);
              v98.i64[0] = 0x8000000000000000;
              v96.i64[0] = *(_OWORD *)&vaddq_f64((float64x2_t)rect.origin, (float64x2_t)vbslq_s8(v96, (int8x16_t)rect.size, v98));
              v98.i64[0] = v96.i64[0];
              v98.i64[1] = *(_QWORD *)&rect.origin.y;
              v100 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v90, (float64x2_t)vdupq_laneq_s64((int64x2_t)rect.size, 1)).i64[0], 0);
              v101.i64[0] = v99.i64[0];
              v101.i64[1] = *(_QWORD *)&vnegq_f64(*(float64x2_t *)(&rect + 16)).f64[1];
              v96.i64[1] = *(_QWORD *)&vaddq_f64(*(float64x2_t *)(&rect + 16), *(float64x2_t *)&rect).f64[1];
              *(_QWORD *)v97 = off_1E15916D8;
              *(int8x16_t *)(v97 + 8) = vbslq_s8(v100, v96, v98);
              *(int8x16_t *)(v97 + 24) = vbslq_s8(v100, v101, v99);
              v97[40] = ShouldAntialias;
            }
            else
            {
              _Block_object_dispose(&v156, 8);
              _Block_object_dispose(v160, 8);
              _Block_object_dispose(v162, 8);
              if (!ShouldAntialias)
                goto LABEL_56;
LABEL_49:
              if (CGPathIsEllipse())
              {
                v104 = *((_DWORD *)v17 + 1);
                *((_DWORD *)v17 + 1) = v104 + 1;
                v105 = &v35[104 * v104];
                v103.f64[0] = 0.0;
                v106 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v103, (float64x2_t)rect.size).i64[0], 0);
                v107.i64[1] = *(_QWORD *)&rect.size.height;
                *(double *)v107.i64 = -rect.size.width;
                v102.i64[0] = 0x8000000000000000;
                v108.i64[0] = *(_OWORD *)&vaddq_f64((float64x2_t)rect.origin, (float64x2_t)vbslq_s8(v106, (int8x16_t)rect.size, v102));
                v109.i64[0] = v108.i64[0];
                v109.i64[1] = *(_QWORD *)&rect.origin.y;
                v110 = vbslq_s8(v106, v107, (int8x16_t)rect.size);
                v111 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v103, (float64x2_t)vdupq_laneq_s64((int64x2_t)rect.size, 1)).i64[0], 0);
                v112.i64[0] = v110.i64[0];
                v112.i64[1] = *(_QWORD *)&vnegq_f64(*(float64x2_t *)(&rect + 16)).f64[1];
                v108.i64[1] = *(_QWORD *)&vaddq_f64(*(float64x2_t *)(&rect + 16), *(float64x2_t *)&rect).f64[1];
                *(_QWORD *)v105 = off_1E15921B8;
                *(int8x16_t *)(v105 + 8) = vbslq_s8(v111, v108, v109);
                *(int8x16_t *)(v105 + 24) = vbslq_s8(v111, v112, v110);
                goto LABEL_43;
              }
              if (CGPathIsRoundedRect())
              {
                size = rect.size;
                *(double *)v113.i64 = -rect.size.width;
                v117 = vnegq_f64((float64x2_t)rect.size);
                if (rect.size.width == 0.0 + 0.0 && (v114.f64[0] = rect.size.height, rect.size.height == 0.0 + 0.0))
                {
                  v118 = *((_DWORD *)v17 + 1);
                  *((_DWORD *)v17 + 1) = v118 + 1;
                  v119 = &v35[104 * v118];
                  v115.f64[0] = 0.0;
                  v120 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v115, (float64x2_t)size).i64[0], 0);
                  v121.i64[1] = *(_QWORD *)&size.height;
                  v121.i64[0] = v113.i64[0];
                  v113.i64[0] = 0x8000000000000000;
                  v122.i64[0] = *(_OWORD *)&vaddq_f64((float64x2_t)rect.origin, (float64x2_t)vbslq_s8(v120, (int8x16_t)size, v113));
                  v123.i64[0] = v122.i64[0];
                  v123.i64[1] = *(_QWORD *)&rect.origin.y;
                  v124 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v115, v114).i64[0], 0);
                  v125 = vbslq_s8(v120, v121, (int8x16_t)size);
                  v121.i64[0] = v125.i64[0];
                  v121.i64[1] = *(_QWORD *)&v117.f64[1];
                  v122.i64[1] = *(_QWORD *)&vaddq_f64(*(float64x2_t *)&size, *(float64x2_t *)&rect).f64[1];
                  *(_QWORD *)v119 = off_1E15921B8;
                  *(int8x16_t *)(v119 + 8) = vbslq_s8(v124, v122, v123);
                  *(int8x16_t *)(v119 + 24) = vbslq_s8(v124, v121, v125);
                }
                else
                {
                  v128 = *((_DWORD *)v17 + 1);
                  *((_DWORD *)v17 + 1) = v128 + 1;
                  v129 = &v35[104 * v128];
                  v115.f64[0] = 0.0;
                  v130 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v115, (float64x2_t)size).i64[0], 0);
                  v131.i64[1] = *(_QWORD *)&size.height;
                  v131.i64[0] = v113.i64[0];
                  v132 = vbslq_s8(v130, v131, (int8x16_t)size);
                  v131.i64[0] = 0x8000000000000000;
                  v130.i64[0] = *(_OWORD *)&vaddq_f64((float64x2_t)rect.origin, (float64x2_t)vbslq_s8(v130, (int8x16_t)size, v131));
                  v131.i64[0] = v130.i64[0];
                  v131.i64[1] = *(_QWORD *)&rect.origin.y;
                  v133 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v115, (float64x2_t)vdupq_laneq_s64((int64x2_t)size, 1)).i64[0], 0);
                  v134.i64[0] = v132.i64[0];
                  v134.i64[1] = *(_QWORD *)&v117.f64[1];
                  v130.i64[1] = *(_QWORD *)&vaddq_f64(*(float64x2_t *)&size, *(float64x2_t *)&rect).f64[1];
                  *(_QWORD *)v129 = off_1E1592DB0;
                  *(int8x16_t *)(v129 + 8) = vbslq_s8(v133, v130, v131);
                  *(int8x16_t *)(v129 + 24) = vbslq_s8(v133, v134, v132);
                  *((double *)v129 + 5) = fabs(0.0);
                  *((double *)v129 + 6) = fabs(0.0);
                }
              }
              else
              {
LABEL_56:
                v126 = *((_DWORD *)v17 + 1);
                *((_DWORD *)v17 + 1) = v126 + 1;
                v127 = &v35[104 * v126];
                *(_QWORD *)v127 = off_1E1593858;
                *((_QWORD *)v127 + 1) = CGPathRetain(Path);
                v127[16] = v51 == 1;
                v127[17] = ShouldAntialias;
              }
            }
LABEL_43:
            if (v51 == 2)
            {
              v74 = Path;
              goto LABEL_45;
            }
LABEL_46:
            if (++v34 == Count)
            {
              a1 = v143;
              v3 = v142;
              goto LABEL_62;
            }
            break;
          case 3u:
            CGClipGetMask();
            Image = (CGImage *)CGClipMaskGetImage();
            v164 = 0u;
            v165 = 0u;
            v163 = 0u;
            CGClipMaskGetMatrix();
            CGClipMaskGetRect();
            *(double *)&v58.i64[1] = v56;
            v59.f64[0] = 0.0;
            v61.i64[0] = *(_QWORD *)&v60.f64[0];
            v61.i64[1] = v57;
            v62 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v59, v60).i64[0], 0);
            v63.i64[1] = v57;
            *(double *)v63.i64 = -v60.f64[0];
            v64 = vbslq_s8(v62, v63, v61);
            v60.f64[1] = v56;
            v60.f64[0] = v60.f64[0] + *(double *)v58.i64;
            v65 = vbslq_s8(v62, (int8x16_t)v60, v58);
            if (*(double *)&v57 < 0.0)
            {
              *(double *)&v65.i64[1] = *(double *)&v57 + v56;
              *(double *)&v64.i64[1] = -*(double *)&v57;
            }
            v145 = v65;
            v147 = v64;
            v66 = *((_DWORD *)v17 + 1);
            *((_DWORD *)v17 + 1) = v66 + 1;
            v67 = &v35[104 * v66];
            *(_QWORD *)v67 = off_1E1593AE0;
            *((_QWORD *)v67 + 1) = CGImageRetain(Image);
            v68 = v164;
            v69 = v165;
            *((int8x16_t *)v67 + 1) = v163;
            *((_OWORD *)v67 + 2) = v68;
            *((_OWORD *)v67 + 3) = v69;
            *((int8x16_t *)v67 + 4) = v145;
            *((int8x16_t *)v67 + 5) = v147;
            v67[96] = ShouldAntialias;
            goto LABEL_46;
          case 4u:
            CGClipGetTextClipping();
            v70 = (const CGPath *)CGTextClippingCreatePath();
            if (v70)
            {
              v71 = v70;
              v72 = *((_DWORD *)v17 + 1);
              *((_DWORD *)v17 + 1) = v72 + 1;
              v73 = &v35[104 * v72];
              *(_QWORD *)v73 = off_1E1593858;
              *((_QWORD *)v73 + 1) = CGPathRetain(v70);
              v73[16] = 0;
              v73[17] = ShouldAntialias;
              v74 = v71;
LABEL_45:
              CGPathRelease(v74);
            }
            goto LABEL_46;
          default:
            goto LABEL_46;
        }
      }
    }
    v135 = vceqzq_f64(v146);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v135, 1), (int8x16_t)v135).u64[0] & 0x8000000000000000) != 0
      || (v136 = vorrq_s8((int8x16_t)vcltzq_f64(v146), (int8x16_t)vcgezq_f64(v146)),
          (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v136), 1), v136).u64[0] & 0x8000000000000000) != 0))
    {
      v19->i64[0] = 0;
      *((_QWORD *)v18 + 6) = 0;
    }
    else
    {
      v137 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v144, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
      *v19 = vuzp1q_s32(v137, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v144, v146), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v137));
    }
LABEL_62:
    v138 = *(unsigned int **)(a1 + 312);
    *(_QWORD *)(a1 + 312) = v17;
    if (v138)
    {
      do
      {
        v139 = __ldaxr(v138);
        v140 = v139 - 1;
      }
      while (__stlxr(v140, v138));
      if (!v140)
        CA::CG::ClipStack::destroy_clip_stack((void (***)(char *))v138);
    }
    *(_DWORD *)(a1 + 304) = v3;
  }
  return *(_QWORD *)(a1 + 312);
}

unint64_t *CA::CG::Queue::alloc(CA::CG::Queue *this, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t *slab;
  _QWORD *v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t *v16;
  _QWORD *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  char v23;

  v3 = (a2 + 31) & 0xFFFFFFFFFFFFFFF0;
  v4 = (_QWORD *)*((_QWORD *)this + 4);
  if (!v4)
    goto LABEL_12;
  if (*((_QWORD *)this + 2) && v4[3] < v3)
  {
    slab = CA::CG::Queue::allocate_slab((CA::CG::Queue *)(2 * v4[2]));
    v6 = slab + 6;
    v7 = v4[2] - v4[3] - 48;
    memcpy(slab + 6, v4 + 6, v7);
    *(_OWORD *)slab = *(_OWORD *)v4;
    v8 = slab[4] + v7;
    v9 = slab[2];
    v10 = slab[3] - v7;
    slab[3] = v10;
    slab[4] = v8;
    v11 = v9 - 48;
    while (v11 > v10)
    {
      v12 = v6[15];
      if (v12)
      {
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 40))(v12, v6 + 2);
        v10 = slab[3];
      }
      v11 -= *v6;
      v6 = (_QWORD *)((char *)v6 + *v6);
    }
    *((_QWORD *)this + 4) = slab;
    *((_QWORD *)this + 5) = 0;
    CA::CG::Queue::deallocate_slab(v4);
    v4 = (_QWORD *)*((_QWORD *)this + 4);
    if (!v4)
    {
LABEL_12:
      (*(void (**)(CA::CG::Queue *))(*(_QWORD *)this + 24))(this);
      goto LABEL_13;
    }
  }
  v13 = v4[3];
  v14 = v13 - v3;
  if (v13 < v3)
  {
    CA::CG::Queue::flush_queue(this);
LABEL_13:
    if (v3 > 0x1000)
    {
      v17 = malloc_type_malloc(v3 + 48, 0xE90C5830uLL);
      if (!v17)
        abort();
      v17[1] = 0;
      *((_QWORD *)this + 4) = v17;
      v17[3] = 0;
      v17[4] = 0;
      v17[2] = v3 + 48;
      v16 = v17 + 6;
      *v17 = this;
    }
    else
    {
      v15 = CA::CG::Queue::allocate_slab((CA::CG::Queue *)v3);
      *((_QWORD *)this + 4) = v15;
      *v15 = (uint64_t)this;
      v16 = (unint64_t *)v15[4];
      v15[3] -= v3;
      v15[4] = (uint64_t)v16 + v3;
    }
    *v16 = v3;
    v18 = (unsigned int *)*((_QWORD *)this + 2);
    if (v18)
    {
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
    }
    goto LABEL_22;
  }
  v16 = (unint64_t *)v4[4];
  v4[3] = v14;
  v4[4] = (char *)v16 + v3;
  *v16 = v3;
  v18 = (unsigned int *)*((_QWORD *)this + 2);
  if (v18)
  {
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 + 1, v18));
  }
LABEL_22:
  v16[1] = (unint64_t)v18;
  v21 = *((_QWORD *)this + 2);
  if (v21)
  {
    v22 = *(_BYTE *)(v21 + 196);
    v23 = (v22 + 1) & 3;
    if ((v22 & 2) != 0)
      v23 = 2;
    *(_BYTE *)(v21 + 196) = v23 | v22 & 0xFC;
  }
  return v16 + 2;
}

uint64_t CA::CG::ClipRoundedRectFill::type(CA::CG::ClipRoundedRectFill *this)
{
  return 4;
}

uint64_t CA::CG::ContextDelegate::device_color(CA::CG::ContextDelegate *this, const double *a2, float64x2_t *a3, CGColorSpace *a4)
{
  uint64_t result;
  CGColorRenderingIntent v9;
  float32_t v11;
  uint64_t v12;
  float32_t v13;
  float32_t v14;
  CA::ColorProgram::Cache *v15;
  malloc_zone_t *malloc_zone;
  size_t NumberOfComponents;
  float64x2_t v19;
  float v24;
  float v25;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  result = CGColorSpaceGetModel(a4);
  v31 = 0uLL;
  if ((_DWORD)result)
  {
    if ((_DWORD)result != 1)
    {
      if ((_DWORD)result == 6)
      {
        *(_DWORD *)this = 1006648320;
        _H0 = 15360;
        *((_WORD *)this + 2) = 15360;
        goto LABEL_21;
      }
      goto LABEL_13;
    }
    *(float32x2_t *)v31.f32 = vcvt_f32_f64(*a3);
    v13 = a3[1].f64[0];
    v31.f32[2] = v13;
    v12 = 3;
  }
  else
  {
    v11 = a3->f64[0];
    v31.f32[1] = v11;
    v31.f32[2] = v11;
    v31.f32[0] = v11;
    v12 = 1;
  }
  v14 = a3->f64[v12];
  v31.f32[3] = v14;
  v15 = (CA::ColorProgram::Cache *)*((_QWORD *)a2 + 37);
  if (!v15)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v15 = (CA::ColorProgram::Cache *)malloc_type_zone_malloc(malloc_zone, 0x50uLL, 0x8BB15036uLL);
    if (v15)
      v15 = CA::ColorProgram::Cache::Cache(v15, *((CGColorSpaceRef *)a2 + 4));
    *((_QWORD *)a2 + 37) = v15;
  }
  if (!CA::ColorProgram::Cache::convert_color(v15, a4, v31.f32, v9))
  {
LABEL_13:
    if (CARetainColorTransform(*((CGColorSpace **)a2 + 4)))
    {
      NumberOfComponents = CGColorSpaceGetNumberOfComponents(a4);
      CGColorTransformConvertColorComponents();
      CGColorTransformRelease();
      v19.f64[0] = 0.0;
      v19.f64[1] = a3->f64[NumberOfComponents];
      _Q0 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)0), v19);
    }
    else
    {
      __asm { FMOV            V0.4S, #1.0 }
    }
    goto LABEL_16;
  }
  _Q0 = v31;
LABEL_16:
  v30 = _Q0;
  result = CGColorSpaceGetModel(*((CGColorSpaceRef *)a2 + 4));
  v24 = v30.f32[2];
  if (!(_DWORD)result)
    v24 = v30.f32[0];
  v25 = v30.f32[1];
  if (!(_DWORD)result)
    v25 = v30.f32[0];
  _S2 = v30.i32[3];
  _S3 = vmuls_lane_f32(v30.f32[0], v30, 3);
  _S1 = vmuls_lane_f32(v25, v30, 3);
  _S0 = vmuls_lane_f32(v24, v30, 3);
  __asm { FCVT            H3, S3 }
  *(_WORD *)this = LOWORD(_S3);
  __asm { FCVT            H1, S1 }
  *((_WORD *)this + 1) = LOWORD(_S1);
  __asm { FCVT            H0, S0 }
  *((_WORD *)this + 2) = LOWORD(_S0);
  __asm { FCVT            H0, S2 }
LABEL_21:
  *((_WORD *)this + 3) = _H0;
  return result;
}

uint64_t CA::OGL::Context::device_float_color(CA::OGL::Context *this, float *a2, CGColorSpaceRef space, float64x2_t *a4, float a5)
{
  uint64_t result;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  CA::ColorProgram::Cache *v14;
  CGColorRenderingIntent v15;
  size_t NumberOfComponents;

  result = CGColorSpaceGetModel(space);
  if ((_DWORD)result)
  {
    if ((_DWORD)result != 1)
    {
      if ((_DWORD)result == 6)
        goto LABEL_12;
      goto LABEL_10;
    }
    *(float32x2_t *)a2 = vcvt_f32_f64(*a4);
    v12 = a4[1].f64[0];
    a2[2] = v12;
    v11 = 3;
  }
  else
  {
    v10 = a4->f64[0];
    a2[1] = v10;
    a2[2] = v10;
    *a2 = v10;
    v11 = 1;
  }
  v13 = a4->f64[v11];
  a2[3] = v13;
  if ((*((_BYTE *)this + 416) & 0x80) != 0)
    goto LABEL_13;
  v14 = CA::OGL::Context::color_program_cache(this);
  result = CA::ColorProgram::Cache::convert_color(v14, space, a2, v15);
  if ((_DWORD)result)
  {
    v13 = a2[3];
    goto LABEL_13;
  }
LABEL_10:
  result = CARetainColorTransform(*((CGColorSpace **)this + 18));
  if (!result)
  {
LABEL_12:
    a2[2] = 1.0;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)a2 = _D0;
    v13 = 1.0;
    goto LABEL_13;
  }
  NumberOfComponents = CGColorSpaceGetNumberOfComponents(space);
  CGColorTransformConvertColorComponents();
  result = CGColorTransformRelease();
  *(float32x2_t *)a2 = vcvt_f32_f64((float64x2_t)0);
  a2[2] = 0.0;
  v13 = a4->f64[NumberOfComponents];
LABEL_13:
  a2[3] = v13;
  return result;
}

uint64_t CA::ColorProgram::Cache::convert_color(CA::ColorProgram::Cache *this, CGColorSpace *a2, float *a3, CGColorRenderingIntent a4)
{
  CGColorRenderingIntent v7;
  uint64_t result;
  int8x16_t v9;
  int8x16_t v10;
  unsigned int v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  uint64_t i;
  int8x16_t v17;
  int8x16_t v18;
  uint64_t v19;
  uint64_t j;
  float v21;
  float v22;
  float v23;
  int8x16_t v24;
  int8x16_t v25;
  uint64_t v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  int8x16_t v32;
  int8x16_t v33;
  uint64_t v34;
  float *v35;
  float v36;
  float v37;
  float v38;
  int8x16_t v39;
  int8x16_t v40;
  uint64_t v41;
  float *v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  int8x16_t v48;
  int8x16_t v49;
  BOOL v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;

  if (CARequiresColorMatching(a2, *(CGColorSpace **)this, 0))
  {
    result = (uint64_t)CA::ColorProgram::Cache::lookup_(this, a2, 0, v7);
    if (!result)
      return result;
    v11 = *(_DWORD *)(result + 36);
    if (!v11)
      return 0;
    v12 = *(float **)(result + 48);
    do
    {
      switch(v11 & 0x1F)
      {
        case 1u:
          v13 = *a3;
          v14 = a3[1];
          v15 = a3[2];
          *a3 = (float)((float)(v12[12] + (float)(*v12 * *a3)) + (float)(v12[4] * v14)) + (float)(v12[8] * v15);
          a3[1] = (float)((float)(v12[13] + (float)(v12[1] * v13)) + (float)(v12[5] * v14)) + (float)(v12[9] * v15);
          a3[2] = (float)((float)(v12[14] + (float)(v12[2] * v13)) + (float)(v12[6] * v14)) + (float)(v12[10] * v15);
          goto LABEL_19;
        case 2u:
          for (i = 0; i != 3; ++i)
          {
            *(float *)v9.i32 = a3[i];
            v51 = v9;
            *(float *)v17.i32 = powf(fabsf(*(float *)v9.i32), v12[i]);
            v18.i64[0] = 0x8000000080000000;
            v18.i64[1] = 0x8000000080000000;
            v9 = vbslq_s8(v18, v17, v51);
            a3[i] = *(float *)v9.i32;
          }
          v19 = 4;
          break;
        case 3u:
          for (j = 0; j != 3; ++j)
          {
            v21 = v12[j + 4];
            v22 = v12[j + 8];
            *(float *)v9.i32 = a3[j];
            v52 = v9;
            v23 = fabsf(*(float *)v9.i32);
            *(float *)v24.i32 = powf(v22 + (float)(v23 * v21), v12[j]);
            v25.i64[0] = 0x8000000080000000;
            v25.i64[1] = 0x8000000080000000;
            if (v23 < (float)((float)-v22 / v21))
              *(float *)v24.i32 = 0.0;
            v9 = vbslq_s8(v25, v24, v52);
            a3[j] = *(float *)v9.i32;
          }
          v19 = 12;
          break;
        case 4u:
          v26 = 0;
          v27 = v12 + 8;
          do
          {
            v28 = v27[v26 - 4];
            v29 = v27[v26];
            v30 = v27[v26 + 4];
            *(float *)v9.i32 = a3[v26];
            v53 = v9;
            v31 = fabsf(*(float *)v9.i32);
            *(float *)v32.i32 = powf(v29 + (float)(v31 * v28), v12[v26]);
            v33.i64[0] = 0x8000000080000000;
            v33.i64[1] = 0x8000000080000000;
            if (v31 < (float)((float)-v29 / v28))
              *(float *)v32.i32 = 0.0;
            *(float *)v32.i32 = *(float *)v32.i32 + v30;
            v9 = vbslq_s8(v33, v32, v53);
            a3[v26++] = *(float *)v9.i32;
          }
          while (v26 != 3);
LABEL_19:
          v19 = 16;
          break;
        case 5u:
          v34 = 0;
          v35 = v12 + 8;
          do
          {
            v36 = v35[v34 + 4];
            v37 = v35[v34 + 8];
            *(float *)v10.i32 = a3[v34];
            v54 = v10;
            v38 = fabsf(*(float *)v10.i32);
            *(float *)v39.i32 = powf(v35[v34] + (float)(v38 * v35[v34 - 4]), v12[v34]);
            v40.i64[0] = 0x8000000080000000;
            v40.i64[1] = 0x8000000080000000;
            if (v38 < v37)
              *(float *)v39.i32 = v38 * v36;
            v9 = vbslq_s8(v40, v39, v54);
            a3[v34++] = *(float *)v9.i32;
          }
          while (v34 != 3);
          v19 = 20;
          break;
        case 6u:
          v41 = 0;
          v42 = v12 + 12;
          do
          {
            v43 = v42[v41];
            v44 = v42[v41 + 4];
            v45 = v42[v41 + 8];
            v46 = v42[v41 + 12];
            *(float *)v10.i32 = a3[v41];
            v55 = v10;
            v47 = fabsf(*(float *)v10.i32);
            *(float *)v49.i32 = powf(v42[v41 - 4] + (float)(v47 * v42[v41 - 8]), v12[v41]);
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
            *(float *)v49.i32 = *(float *)v49.i32 + v45;
            if (v47 < v44)
              *(float *)v49.i32 = v46 + (float)(v47 * v43);
            v9 = vbslq_s8(v48, v49, v55);
            a3[v41++] = *(float *)v9.i32;
          }
          while (v41 != 3);
          v19 = 28;
          break;
        default:
          return 0;
      }
      v12 += v19;
      v50 = v11 > 0x1F;
      v11 >>= 5;
    }
    while (v50);
  }
  return 1;
}

float32x2_t CA::CG::`anonymous namespace'::GradientStripeRenderer::draw_stripe(uint64_t a1, float32x2_t *a2, double a3)
{
  double v3;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  double v13;
  float64x2_t v14;
  float32x2_t *v15;
  float32x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  uint64_t v19;
  float64x2_t v20;
  float32x2_t *v21;
  float32x2_t *v22;
  float32x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float32x2_t result;

  v3 = a3;
  v6 = *(_DWORD *)(a1 + 32);
  if (v6 - 252 > 0xFFFFFEFF)
  {
    if (!v6)
    {
      v13 = *(double *)(a1 + 56);
      if (v13 >= 0.0)
        v14 = vmulq_n_f64(*(float64x2_t *)(a1 + 88), v13);
      else
        v14 = vnegq_f64(*(float64x2_t *)(a1 + 120));
      v15 = *(float32x2_t **)(a1 + 24);
      *(_DWORD *)(a1 + 32) = 2;
      v16 = *(float32x2_t *)(a1 + 64);
      v17 = vaddq_f64(*(float64x2_t *)(a1 + 72), v14);
      v15[10] = v16;
      v15[4] = v16;
      v18 = *(float64x2_t *)(a1 + 104);
      *v15 = vcvt_f32_f64(vaddq_f64(v18, v17));
      v15[1] = (float32x2_t)0x3F80000000000000;
      v15[6] = vcvt_f32_f64(vsubq_f64(v17, v18));
      v15[7] = (float32x2_t)0x3F80000000000000;
      v6 = *(_DWORD *)(a1 + 32);
    }
  }
  else
  {
    v3 = a3;
    v7 = *(_QWORD *)(a1 + 24);
    v8 = v7 + 48 * (*(_DWORD *)(a1 + 32) - 2);
    v9 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v9;
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
    v10 = *(_QWORD *)(a1 + 24);
    v11 = v10 + 48 * (*(_DWORD *)(a1 + 32) - 1);
    v12 = *(_OWORD *)(v11 + 16);
    *(_OWORD *)(v10 + 48) = *(_OWORD *)v11;
    *(_OWORD *)(v10 + 64) = v12;
    *(_QWORD *)(v10 + 80) = *(_QWORD *)(v11 + 32);
    v6 = 2;
  }
  v19 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 32) = v6 + 2;
  if (v3 <= 1.0)
    v20 = vmulq_n_f64(*(float64x2_t *)(a1 + 88), v3);
  else
    v20 = vaddq_f64(*(float64x2_t *)(a1 + 120), *(float64x2_t *)(a1 + 88));
  v21 = (float32x2_t *)(v19 + 48 * (v6 + 1));
  v22 = (float32x2_t *)(v19 + 48 * v6);
  v23 = *a2;
  v24 = vaddq_f64(*(float64x2_t *)(a1 + 72), v20);
  v21[4] = *a2;
  v22[4] = v23;
  v25 = *(float64x2_t *)(a1 + 104);
  *v22 = vcvt_f32_f64(vaddq_f64(v25, v24));
  v22[1] = (float32x2_t)0x3F80000000000000;
  result = vcvt_f32_f64(vsubq_f64(v24, v25));
  *v21 = result;
  v21[1] = (float32x2_t)0x3F80000000000000;
  return result;
}

void CA::CG::AccelQueue::will_draw(CA::CG::AccelDrawable **this)
{
  CA::CG::AccelDrawable::detach_providers(this[22], 0);
  if (CA::CG::release_queue(void)::once != -1)
    dispatch_once(&CA::CG::release_queue(void)::once, &__block_literal_global_14);
  dispatch_sync((dispatch_queue_t)CA::CG::release_queue(void)::queue, &__block_literal_global_443);
}

void CA::CG::AccelDrawable::detach_providers(CA::CG::AccelDrawable *this, char a2)
{
  CGImage *v4;
  os_unfair_lock_s **v5;
  os_unfair_lock_s **v6;
  os_unfair_lock_s *v7;
  _QWORD *v8;
  unsigned int *p_os_unfair_lock_opaque;
  unsigned int v10;
  NSObject *v11;
  os_unfair_lock_s **v12;

  if (*((_QWORD *)this + 10) || *((_QWORD *)this + 11))
  {
    os_unfair_lock_lock((os_unfair_lock_t)this + 3);
    v4 = (CGImage *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)this + 3);
    if (v4)
      CGImageRelease(v4);
    os_unfair_lock_lock((os_unfair_lock_t)this + 3);
    v5 = (os_unfair_lock_s **)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)this + 3);
    if (v5)
    {
      v6 = v5;
      do
      {
        v7 = *v6;
        if ((a2 & 1) != 0 || (v8 = (_QWORD *)*((_QWORD *)this + 9)) == 0)
        {
          CA::CG::AccelDataProvider::detach(*v6);
          p_os_unfair_lock_opaque = &v7[3]._os_unfair_lock_opaque;
          do
            v10 = __ldaxr(p_os_unfair_lock_opaque);
          while (__stlxr(v10 - 1, p_os_unfair_lock_opaque));
          if (v7 && v10 == 1)
            (*(void (**)(os_unfair_lock_s *))(*(_QWORD *)&v7->_os_unfair_lock_opaque + 16))(v7);
        }
        else
        {
          if (v8[4])
            CA::CG::Queue::flush_queue(*((CA::CG::Queue **)this + 9));
          else
            (*(void (**)(_QWORD))(*v8 + 24))(*((_QWORD *)this + 9));
          if ((CA::CG::Queue::_disable_async & 1) != 0)
          {
            if (CA::CG::Queue::queue(void)::once[0] != -1)
              dispatch_once_f(CA::CG::Queue::queue(void)::once, 0, (dispatch_function_t)CA::CG::Queue::create_queue);
            dispatch_sync_f((dispatch_queue_t)CA::CG::Queue::_queue, v7, (dispatch_function_t)CA::CG::detach_provider_callback);
          }
          else
          {
            v11 = v8[1];
            if (!v11)
            {
              v11 = dispatch_group_create();
              v8[1] = v11;
            }
            if (CA::CG::Queue::queue(void)::once[0] != -1)
              dispatch_once_f(CA::CG::Queue::queue(void)::once, 0, (dispatch_function_t)CA::CG::Queue::create_queue);
            dispatch_group_async_f(v11, (dispatch_queue_t)CA::CG::Queue::_queue, v7, (dispatch_function_t)CA::CG::detach_provider_callback);
          }
        }
        v6 = (os_unfair_lock_s **)v6[1];
      }
      while (v6);
      do
      {
        v12 = (os_unfair_lock_s **)v5[1];
        free(v5);
        v5 = v12;
      }
      while (v12);
    }
  }
}

uint64_t CA::CG::DrawGradient::DrawGradient(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, const void *a5, char a6)
{
  CFTypeRef v9;

  *(_QWORD *)CA::CG::DrawOp::DrawOp(a1, a2, a3, a4, 0, 0x2000) = off_1E1591710;
  if (a5)
    v9 = CFRetain(a5);
  else
    v9 = 0;
  *(_QWORD *)(a1 + 112) = v9;
  if ((a6 & 1) != 0)
    *(_DWORD *)(a1 + 100) |= 0x1000000u;
  if ((a6 & 2) != 0)
    *(_DWORD *)(a1 + 100) |= 0x2000000u;
  return a1;
}

BOOL CA::CG::FillRects::can_coalesce(CA::CG::FillRects *this, const CA::CG::FillRects *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  _BOOL8 result;

  v2 = *((_DWORD *)this + 25);
  if ((v2 & 0x1000000) == 0)
    return 0;
  v3 = *((_DWORD *)a2 + 25);
  if ((v3 & 0x1000000) == 0)
    return 0;
  if (*((double *)this + 1) != *((double *)a2 + 1))
    return 0;
  if (*((double *)this + 2) != *((double *)a2 + 2))
    return 0;
  if (*((double *)this + 3) != *((double *)a2 + 3))
    return 0;
  if (*((double *)this + 4) != *((double *)a2 + 4))
    return 0;
  if (*((double *)this + 5) != *((double *)a2 + 5))
    return 0;
  if (*((double *)this + 6) != *((double *)a2 + 6))
    return 0;
  v4 = *((_DWORD *)this + 14);
  if (v4 != *((_DWORD *)a2 + 14)
    || *((_QWORD *)this + 8) != *((_QWORD *)a2 + 8)
    || *((_QWORD *)this + 9) != *((_QWORD *)a2 + 9)
    || *((_QWORD *)this + 11) != *((_QWORD *)a2 + 11))
  {
    return 0;
  }
  v5 = *((_QWORD *)this + 10);
  v6 = *((_QWORD *)a2 + 10);
  if (v5 && v6)
  {
    v7 = CA::CG::DeviceColor::Pattern::operator==(*((_QWORD *)this + 10), v6);
    result = 0;
    if (!v7)
      return result;
    goto LABEL_21;
  }
  result = 0;
  if (!v5 && !v6)
  {
LABEL_21:
    if (v2 == v3)
      return v4 != 0;
  }
  return result;
}

uint64_t *CA::CG::Queue::allocate_slab(CA::CG::Queue *this)
{
  uint64_t v1;
  size_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  size_t v7;

  v1 = 0x2000;
  if ((unint64_t)this > 0x2000)
    v1 = (uint64_t)this;
  v2 = (v1 + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
  os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::Queue::_free_lock);
  v3 = 0;
  v4 = &CA::CG::Queue::_free_slabs;
  v5 = &CA::CG::Queue::_free_slabs;
  while (1)
  {
    v6 = v3;
    v3 = (uint64_t *)*v5;
    if (!*v5)
      break;
    v7 = v3[1];
    v5 = (uint64_t *)*v5;
    if (v7 >= v2)
    {
      if (v6)
        v4 = v6;
      *v4 = *v3;
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::Queue::_free_lock);
      v2 = v7;
      goto LABEL_10;
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::Queue::_free_lock);
  v3 = (uint64_t *)mmap(0, v2, 3, 4098, 855638016, 0);
  if (v3 == (uint64_t *)-1)
    abort();
LABEL_10:
  *v3 = 0;
  v3[1] = 0;
  v3[2] = v2;
  v3[3] = v2 - 48;
  v3[4] = (uint64_t)(v3 + 6);
  return v3;
}

uint64_t CA::CG::DrawGlyphs::DrawGlyphs(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, CGColor *a5, _OWORD *a6, unint64_t a7)
{
  const void *Font;
  uint64_t v12;
  int FontRenderingStyle;
  __int128 v14;
  __int128 v15;

  *(_QWORD *)CA::CG::DrawOp::DrawOp(a1, a2, a3, a4, a5, 512) = off_1E1590FB8;
  Font = (const void *)CGGStateGetFont();
  *(_QWORD *)(a1 + 112) = Font;
  if (Font)
    CFRetain(Font);
  CGGStateGetFontSize();
  *(_QWORD *)(a1 + 120) = v12;
  FontRenderingStyle = CGGStateGetFontRenderingStyle();
  *(_DWORD *)(a1 + 128) = MEMORY[0x186DBC940](a3) & FontRenderingStyle;
  *(_DWORD *)(a1 + 132) = CGGStateGetTextDrawingMode();
  v15 = a6[1];
  v14 = a6[2];
  *(_OWORD *)(a1 + 136) = *a6;
  *(_OWORD *)(a1 + 152) = v15;
  *(_OWORD *)(a1 + 168) = v14;
  *(_QWORD *)(a1 + 184) = a7;
  if (CGGStateGetShouldDrawBitmapRuns())
    *(_DWORD *)(a1 + 100) |= 0x1000000u;
  if (a7 >= 2)
    *(_DWORD *)(a1 + 100) |= 0x1000u;
  return a1;
}

CA::ColorProgram::Cache *CA::ColorProgram::Cache::Cache(CA::ColorProgram::Cache *this, CGColorSpaceRef space)
{
  CGColorSpaceRef v3;

  v3 = CGColorSpaceRetain(space);
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 1) = CAGetReconciledColorSpace((uint64_t)v3);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 32;
  *((_DWORD *)this + 12) = 1065353216;
  *(_QWORD *)((char *)this + 52) = 0;
  *(_QWORD *)((char *)this + 57) = 0;
  *(_WORD *)((char *)this + 65) = 1;
  *((_BYTE *)this + 67) = 0;
  *(_QWORD *)((char *)this + 68) = 0xD00000000;
  *((_DWORD *)this + 19) = 23;
  CGColorTransformRetain();
  return this;
}

uint64_t CAGetReconciledColorSpace(uint64_t a1)
{
  unsigned int v2;
  uint64_t result;

  if (!a1)
    return a1;
  switch(CGColorSpaceGetType())
  {
    case 0u:
      v2 = 3;
      goto LABEL_7;
    case 1u:
      v2 = 29;
      goto LABEL_7;
    case 2u:
      v2 = 4;
LABEL_7:
      result = CAGetColorSpace(v2);
      break;
    case 8u:
      result = CGColorSpaceGetAlternateColorSpace();
      break;
    default:
      return a1;
  }
  return result;
}

uint64_t CA::CG::Queue::cancel_and_grow(CA::CG::Queue *this, CA::CG::DrawOp *a2, CA::CG::DrawOp *a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v8;
  uint64_t v10;
  unint64_t v11;

  v4 = (_QWORD *)*((_QWORD *)this + 4);
  if (!v4[4])
    return 0;
  if ((uint64_t)v4 > (uint64_t)a3 || *((_QWORD *)this + 5) != (_QWORD)a3)
    return 0;
  if ((uint64_t)v4 + v4[2] < (uint64_t)a3)
    return 0;
  v8 = (a4 + 15) & 0xFFFFFFFFFFFFFFF0;
  if (*((_QWORD *)a2 - 2) + v4[3] < v8 || *((_QWORD *)a3 - 1) != *((_QWORD *)a2 - 1))
    return 0;
  CA::CG::Queue::cancel(this, a2);
  *((_QWORD *)a3 - 2) += v8;
  v10 = *((_QWORD *)this + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 32) + v8;
    *(_QWORD *)(v10 + 24) -= v8;
    *(_QWORD *)(v10 + 32) = v11;
  }
  return 1;
}

void CA::CG::Queue::cancel(CA::CG::Queue *this, CA::CG::DrawOp *a2)
{
  _QWORD *v4;
  CA::CG::TransparencyLayer *v5;
  uint64_t v6;

  (**(void (***)(CA::CG::DrawOp *))a2)(a2);
  v4 = (_QWORD *)*((_QWORD *)this + 4);
  v5 = (CA::CG::TransparencyLayer *)*((_QWORD *)a2 - 1);
  if (v5)
  {
    CA::CG::TransparencyLayer::unref(v5);
    *((_QWORD *)a2 - 1) = 0;
  }
  v6 = v4[4];
  if (v6)
  {
    v4[4] = v6 - *((_QWORD *)a2 - 2);
    v4[3] += *((_QWORD *)a2 - 2);
  }
  else
  {
    CA::CG::Queue::deallocate_slab(v4);
    *((_QWORD *)this + 4) = 0;
  }
}

uint64_t CA::CG::DrawImage::DrawImage(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, CGColor *a5, _OWORD *a6, CGImage *a7)
{
  int InterpolationQuality;
  int v11;
  int MinInterpolationQuality;
  int MaxInterpolationQuality;
  char v16;
  int v17;
  __int128 v18;
  int v19;

  *(_QWORD *)CA::CG::DrawOp::DrawOp(a1, a2, a3, a4, a5, 0) = off_1E1593B18;
  InterpolationQuality = CGGStateGetInterpolationQuality();
  if (InterpolationQuality)
    v11 = InterpolationQuality;
  else
    v11 = 4;
  MinInterpolationQuality = CGRenderingStateGetMinInterpolationQuality();
  if (v11 < MinInterpolationQuality && MinInterpolationQuality != 0)
    v11 = MinInterpolationQuality;
  MaxInterpolationQuality = CGRenderingStateGetMaxInterpolationQuality();
  if (v11 <= MaxInterpolationQuality || MaxInterpolationQuality == 0)
    v16 = v11;
  else
    v16 = MaxInterpolationQuality;
  *(_BYTE *)(a1 + 112) = v16;
  CGGStateGetEDRTargetHeadroom();
  *(_DWORD *)(a1 + 116) = v17;
  *(_QWORD *)(a1 + 120) = CGImageRetain(a7);
  v18 = a6[1];
  *(_OWORD *)(a1 + 128) = *a6;
  *(_OWORD *)(a1 + 144) = v18;
  v19 = *(_DWORD *)(a1 + 100);
  if ((v19 & 2) == 0)
    *(_DWORD *)(a1 + 100) = v19 | 0x2000;
  return a1;
}

BOOL CA::CG::FillGlyphs::can_coalesce(CA::CG::FillGlyphs *this, const CA::CG::FillGlyphs *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (*((double *)this + 1) != *((double *)a2 + 1)
    || *((double *)this + 2) != *((double *)a2 + 2)
    || *((double *)this + 3) != *((double *)a2 + 3)
    || *((double *)this + 4) != *((double *)a2 + 4)
    || *((double *)this + 5) != *((double *)a2 + 5)
    || *((double *)this + 6) != *((double *)a2 + 6)
    || *((_DWORD *)this + 14) != *((_DWORD *)a2 + 14)
    || *((_QWORD *)this + 8) != *((_QWORD *)a2 + 8)
    || *((_QWORD *)this + 9) != *((_QWORD *)a2 + 9)
    || *((_QWORD *)this + 11) != *((_QWORD *)a2 + 11))
  {
    return 0;
  }
  v4 = *((_QWORD *)this + 10);
  v5 = *((_QWORD *)a2 + 10);
  if (v4 && v5)
  {
    if (!CA::CG::DeviceColor::Pattern::operator==(v4, v5))
      return 0;
  }
  else if (v4 | v5)
  {
    return 0;
  }
  if (*((_DWORD *)this + 25) != *((_DWORD *)a2 + 25)
    || *((_QWORD *)this + 14) != *((_QWORD *)a2 + 14)
    || *((double *)this + 15) != *((double *)a2 + 15)
    || *((_DWORD *)this + 32) != *((_DWORD *)a2 + 32)
    || *((_DWORD *)this + 33) != *((_DWORD *)a2 + 33)
    || *((double *)this + 17) != *((double *)a2 + 17)
    || *((double *)this + 18) != *((double *)a2 + 18)
    || *((double *)this + 19) != *((double *)a2 + 19))
  {
    return 0;
  }
  return *((double *)this + 20) == *((double *)a2 + 20);
}

uint64_t CA::CG::Style::Style(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E1593750;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = CGStyleGetIdentifier();
  *(_QWORD *)(a1 + 16) = CGStyleRetain();
  *(_DWORD *)(a1 + 72) = CGStyleGetDrawOrdering();
  *(_QWORD *)(a1 + 24) = 0x7FF8000000000000;
  *(_DWORD *)(a1 + 8) = 1;
  return a1;
}

void CA::CG::ShadowStyle::matrix_changed(CA::CG::ShadowStyle *this)
{
  double *Data;
  double v3;
  double v4;
  double v5;
  double v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  double v14;
  __float2 v15;
  double v16;
  double v17;
  float v18;
  float v19;

  Data = (double *)CGStyleGetData();
  v4 = *((double *)this + 3);
  v3 = *((double *)this + 4);
  v6 = *((double *)this + 5);
  v5 = *((double *)this + 6);
  v7 = v5 * v4 + v6 * v3;
  if (v7 < 0.0)
    v7 = -v7;
  v8 = sqrtf(v7);
  if (v7 != 1.0)
    v7 = v8;
  v9 = Data[5] * 0.5 * v7;
  v10 = 0.0;
  v11 = fmaxf(v9, 0.0);
  *((float *)this + 19) = v11;
  v12 = Data[2] * 0.0174532925;
  v13 = Data[1] * 0.0174532925;
  if (v13 <= 1.5691)
  {
    if (v13 >= 0.0017453)
    {
      v14 = Data[4];
      v10 = v14 / tanf(v13);
    }
    else
    {
      v10 = INFINITY;
    }
  }
  v15 = __sincosf_stret(v12);
  v16 = (float)-(float)(v10 * v15.__cosval);
  v17 = (float)-(float)(v10 * v15.__sinval);
  v18 = v6 * v17 + v4 * v16;
  v19 = v5 * v17 + v3 * v16;
  *((float *)this + 20) = v18;
  *((float *)this + 21) = v19;
  if (*((_BYTE *)this + 88))
  {
    *((float *)this + 20) = truncf(v18);
    *((float *)this + 21) = truncf(v19);
    if (v11 < 0.25 && (int)v18 == 0 && (int)v19 == 0)
      *((_BYTE *)this + 89) = 1;
    *((float *)this + 19) = ceilf(v11 + v11) * 0.5;
  }
}

uint64_t CA::CG::DrawOp::can_coalesce(CA::CG::DrawOp *this, const CA::CG::FillGlyphs *a2)
{
  return 0;
}

uint64_t CA::CG::DrawOp::can_coalesce()
{
  return 0;
}

{
  return 0;
}

__IOSurface *CACreateIOSurfaceBackedCGImage(__IOSurface *result, uint64_t a2, uint64_t a3)
{
  __IOSurface *v4;
  CFDictionaryRef v5;
  CA::Render *PixelFormat;
  CA::Render *v7;
  uint64_t v8;

  if (result)
  {
    v4 = result;
    CFRetain(result);
    v5 = CFDictionaryCreate(0, MEMORY[0x1E0C9DAF0], MEMORY[0x1E0C9AE50], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!a3)
    {
      PixelFormat = (CA::Render *)IOSurfaceGetPixelFormat(v4);
      v7 = (CA::Render *)CA::Render::fourcc_to_format(PixelFormat);
      CA::Render::format_default_colorspace(v7);
    }
    CGImageProviderCreate();
    CFRelease(v5);
    v8 = CGImageCreateWithImageProvider();
    CGImageProviderRelease();
    return (__IOSurface *)v8;
  }
  return result;
}

uint64_t CA::CG::ClipPath::type(CA::CG::ClipPath *this)
{
  return 5;
}

uint64_t draw_image(uint64_t a1, uint64_t a2, uint64_t a3, CGImage *a4)
{
  CACGContextEvaluator *Info;
  CGColor *Color;
  unsigned int CompositeOperation;
  CGColor *FillColor;
  unsigned int v10;

  Info = (CACGContextEvaluator *)CGContextDelegateGetInfo();
  CGGStateGetStyle();
  Color = (CGColor *)CGStyleGetColor();
  CompositeOperation = CGGStateGetCompositeOperation();
  CACGContextEvaluator::update_with_color((uint64_t)Info, Color, CompositeOperation);
  if (CGImageIsMask(a4))
  {
    FillColor = (CGColor *)CGGStateGetFillColor();
    v10 = CGGStateGetCompositeOperation();
    CACGContextEvaluator::update_with_color((uint64_t)Info, FillColor, v10);
  }
  else
  {
    CACGContextEvaluator::update_with_image(Info, a4);
  }
  *((_BYTE *)Info + 78) |= CGGStateGetStyle() != 0;
  CGContextDelegateGetInfo();
  return CGContextDelegateDrawImage();
}

uint64_t CACGContextEvaluator::update_with_image(CACGContextEvaluator *this, CGImageRef image)
{
  size_t v4;
  int BitsPerComponent;
  CGColorSpace *ColorSpace;

  *((_BYTE *)this + 72) = 1;
  *((_BYTE *)this + 77) = 1;
  v4 = *((unsigned int *)this + 21);
  if (CGImageGetBitsPerComponent(image) >= v4)
    BitsPerComponent = CGImageGetBitsPerComponent(image);
  else
    BitsPerComponent = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = BitsPerComponent;
  if ((CGImageGetBitmapInfo(image) & 0x100) != 0)
    *((_BYTE *)this + 80) = 1;
  ColorSpace = CGImageGetColorSpace(image);
  if (CGColorSpaceUsesITUR_2100TF(ColorSpace))
    *((_BYTE *)this + 81) = 1;
  return CACGContextEvaluator::update_with_color_space((uint64_t)this, ColorSpace, 1);
}

void CA::Context::commit_command(CA::Context *this, CA::Render::Encoder *a2, __CFString *a3, const void *a4, void *a5)
{
  int v8;
  CA::Render::Encoder *v9;
  char v10;
  char *v11;
  _QWORD *v12;
  CA::Render::Context *v13;
  CA::Render::Encoder *v14;
  _BYTE *v15;
  _QWORD *v16;
  CA::Render::Context *v17;
  CA::Render::Encoder *v18;
  _BYTE *v19;
  _QWORD *v20;
  CA::Render::Context *v21;
  CA::Render *v22;
  CA::Render::Context *v23;
  CA::Render::Encoder *v24;
  _BYTE *v25;
  _QWORD *v26;
  uint64_t v27;
  CA::Render::Encoder *v28;
  _BYTE *v29;
  uint64_t v30;
  float v31;
  CA::Render::Encoder *v32;
  _BYTE *v33;
  float *v34;
  unint64_t v35;
  const CA::Render::Object *v36;
  CA::Render::Encoder *v37;
  _BYTE *v38;
  _DWORD *v39;
  CA::Render::Context *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  CA::Render::Encoder *v44;
  _BYTE *v45;
  _DWORD *v46;
  CA::Render::Context *v47;
  CA::Render::Context *v48;
  CA::Render::Encoder *v49;
  _BYTE *v50;
  _DWORD *v51;
  uint64_t v52;
  unint64_t v53;
  _DWORD *v54;
  CA::Render::Context *v55;
  unsigned int v56;
  CA::Render::Encoder *v57;
  _BYTE *v58;
  _DWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int *v62;
  CA::Render::Context *v63;
  const void *ValueAtIndex;
  const void *v65;
  const void *v66;
  const void *v67;
  int v68;
  const void *v69;
  int v70;
  const void *v71;
  int v72;
  const void *v73;
  int v74;
  const void *v75;
  int v76;
  const void *v77;
  float v78;
  const void *v79;
  int v80;
  CA::Render *v81;
  CA::Transaction *v82;
  CA::Render *v83;
  CGColor *v84;
  CA::Render::Pattern **v85;
  CA::Render::Encoder *v86;
  _BYTE *v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  unsigned int *v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int *v94;
  uint64_t v95;
  unint64_t v96;
  unsigned int *v97;
  uint64_t v98;
  unint64_t v99;
  int *v100;
  uint64_t v101;
  unint64_t v102;
  int *v103;
  uint64_t v104;
  unint64_t v105;
  int *v106;
  uint64_t v107;
  unint64_t v108;
  int *v109;
  uint64_t v110;
  unint64_t v111;
  BOOL *v112;
  float *v113;
  uint64_t v114;
  unint64_t v115;
  int *v116;
  uint64_t v117;
  unint64_t v118;
  unsigned int *v119;
  CA::Render::ImageProvider *v120;
  const void *v121;
  unsigned int v122;
  const void *v123;
  unsigned int v124;
  CA::Render::Encoder *v125;
  _BYTE *v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t v129;
  unsigned int *v130;
  uint64_t v131;
  unint64_t v132;
  unsigned int *v133;
  uint64_t v134;
  CA::Render *v135;
  CA::Transaction *v136;
  CA::Render *v137;
  CGColor *v138;
  CA::Render::Pattern **v139;
  CA::Render::Encoder *v140;
  unsigned int v141;
  Pattern *v142;
  _BYTE *v143;
  _QWORD *v144;
  uint64_t v145;
  unint64_t v146;
  unsigned int *v147;
  uint64_t v148;
  const void *v149;
  int v150;
  CA::Render::Encoder *v151;
  _BYTE *v152;
  _QWORD *v153;
  uint64_t v154;
  unint64_t v155;
  _DWORD *v156;
  uint64_t v157;
  uint64_t v158;
  const void *v159;
  int v160;
  const void *v161;
  int v162;
  const void *v163;
  int v164;
  void *v165;
  void *v166;
  const void *v167;
  int v168;
  const void *v169;
  unsigned int v170;
  const CA::Render::Object *v171;
  CA::Render::Encoder *v172;
  _BYTE *v173;
  _QWORD *v174;
  uint64_t v175;
  unint64_t v176;
  int *v177;
  uint64_t v178;
  unint64_t v179;
  int *v180;
  uint64_t v181;
  unint64_t v182;
  int *v183;
  int *v184;
  uint64_t v185;
  unint64_t v186;
  unsigned int *v187;
  uint64_t v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int v191;
  const void *v192;
  int v193;
  const void *v194;
  int v195;
  const void *v196;
  int v197;
  const void *v198;
  int v199;
  const void *v200;
  int v201;
  const void *v202;
  int v203;
  CA::Render::Encoder *v204;
  _BYTE *v205;
  _QWORD *v206;
  uint64_t v207;
  unint64_t v208;
  int *v209;
  uint64_t v210;
  unint64_t v211;
  int *v212;
  uint64_t v213;
  unint64_t v214;
  int *v215;
  uint64_t v216;
  unint64_t v217;
  int *v218;
  uint64_t v219;
  unint64_t v220;
  int *v221;
  uint64_t v222;
  unint64_t v223;
  _DWORD *v224;
  uint64_t v225;
  CA::Render::Shmem *v226;
  const CA::Render::Object *v227;
  CA::Render::Encoder *v228;
  _BYTE *v229;
  CA::Render *v230;
  CA::Render::Encoder *v231;
  double v232;
  CA::Render::Encoder *v233;
  CA::Render::Encoder *v234;
  double v235;
  double v236;
  CA::Render::Encoder *v237;
  CA::Render::Context *v238;
  BOOL v239;
  unsigned int v240;
  CA::Render::Object *v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  Pattern *v245;
  unsigned int v246;
  uint64_t v247;

  v247 = *MEMORY[0x1E0C80C00];
  switch((int)this)
  {
    case 2:
      v14 = (CA::Render::Encoder *)*((_QWORD *)a4 + 4);
      if (v14)
      {
        v15 = (_BYTE *)*((_QWORD *)v14 + 4);
        if ((unint64_t)(v15 + 1) > *((_QWORD *)v14 + 5))
        {
          CA::Render::Encoder::grow(*((CA::Render::Encoder **)a4 + 4), 1);
          v15 = (_BYTE *)*((_QWORD *)v14 + 4);
        }
        *((_QWORD *)v14 + 4) = v15 + 1;
        *v15 = 3;
        v16 = (_QWORD *)*((_QWORD *)v14 + 4);
        if ((unint64_t)(v16 + 1) > *((_QWORD *)v14 + 5))
        {
          CA::Render::Encoder::grow(v14, 8);
          v16 = (_QWORD *)*((_QWORD *)v14 + 4);
        }
        *v16 = a2;
        *((_QWORD *)v14 + 4) += 8;
      }
      v17 = (CA::Render::Context *)*((_QWORD *)a4 + 5);
      if (v17)
        CA::Render::Context::update_layer(v17, a2);
      goto LABEL_227;
    case 4:
      v18 = (CA::Render::Encoder *)*((_QWORD *)a4 + 4);
      if (v18)
      {
        v19 = (_BYTE *)*((_QWORD *)v18 + 4);
        if ((unint64_t)(v19 + 1) > *((_QWORD *)v18 + 5))
        {
          CA::Render::Encoder::grow(*((CA::Render::Encoder **)a4 + 4), 1);
          v19 = (_BYTE *)*((_QWORD *)v18 + 4);
        }
        *((_QWORD *)v18 + 4) = v19 + 1;
        *v19 = 5;
        v20 = (_QWORD *)*((_QWORD *)v18 + 4);
        if ((unint64_t)(v20 + 1) > *((_QWORD *)v18 + 5))
        {
          CA::Render::Encoder::grow(v18, 8);
          v20 = (_QWORD *)*((_QWORD *)v18 + 4);
        }
        *v20 = a2;
        *((_QWORD *)v18 + 4) += 8;
      }
      v21 = (CA::Render::Context *)*((_QWORD *)a4 + 5);
      if (v21)
        CA::Render::Context::remove_all_animations(v21, a2);
      goto LABEL_227;
    case 5:
      v22 = (CA::Render *)*((_QWORD *)a4 + 4);
      if (v22)
        CA::Render::encode_remove_animation(v22, a2, a3, (const __CFString *)a4);
      v23 = (CA::Render::Context *)*((_QWORD *)a4 + 5);
      if (v23)
        CA::Render::Context::remove_animation(v23, a2, a3);
      goto LABEL_227;
    case 6:
      v24 = (CA::Render::Encoder *)*((_QWORD *)a4 + 4);
      if (v24)
      {
        v25 = (_BYTE *)*((_QWORD *)v24 + 4);
        if ((unint64_t)(v25 + 1) > *((_QWORD *)v24 + 5))
        {
          CA::Render::Encoder::grow(*((CA::Render::Encoder **)a4 + 4), 1);
          v25 = (_BYTE *)*((_QWORD *)v24 + 4);
        }
        *((_QWORD *)v24 + 4) = v25 + 1;
        *v25 = 7;
        v26 = (_QWORD *)*((_QWORD *)v24 + 4);
        if ((unint64_t)(v26 + 1) > *((_QWORD *)v24 + 5))
        {
          CA::Render::Encoder::grow(v24, 8);
          v26 = (_QWORD *)*((_QWORD *)v24 + 4);
        }
        *v26 = a2;
        *((_QWORD *)v24 + 4) += 8;
      }
      v27 = *((_QWORD *)a4 + 5);
      if (v27)
        CA::Render::Context::set_layer_id(v27, (uint64_t)a2);
      goto LABEL_227;
    case 7:
      v28 = (CA::Render::Encoder *)*((_QWORD *)a4 + 4);
      if (v28)
      {
        v29 = (_BYTE *)*((_QWORD *)v28 + 4);
        if ((unint64_t)(v29 + 1) > *((_QWORD *)v28 + 5))
        {
          CA::Render::Encoder::grow(*((CA::Render::Encoder **)a4 + 4), 1);
          v29 = (_BYTE *)*((_QWORD *)v28 + 4);
        }
        *((_QWORD *)v28 + 4) = v29 + 1;
        *v29 = 8;
        CA::Render::Encoder::encode_cfobject(v28, a3);
      }
      v30 = *((_QWORD *)a4 + 5);
      if (v30)
      {
        X::CFRef<__CFDictionary const*>::operator=((const void **)(v30 + 528), a3);
        ++*(_DWORD *)(v30 + 48);
      }
      goto LABEL_227;
    case 8:
    case 9:
      v8 = (int)this;
      v9 = (CA::Render::Encoder *)*((_QWORD *)a4 + 4);
      if (v9)
      {
        if ((_DWORD)this == 8)
          v10 = 11;
        else
          v10 = 12;
        v11 = (char *)*((_QWORD *)v9 + 4);
        if ((unint64_t)(v11 + 1) > *((_QWORD *)v9 + 5))
        {
          CA::Render::Encoder::grow(*((CA::Render::Encoder **)a4 + 4), 1);
          v11 = (char *)*((_QWORD *)v9 + 4);
        }
        *((_QWORD *)v9 + 4) = v11 + 1;
        *v11 = v10;
        v12 = (_QWORD *)*((_QWORD *)v9 + 4);
        if ((unint64_t)(v12 + 1) > *((_QWORD *)v9 + 5))
        {
          CA::Render::Encoder::grow(v9, 8);
          v12 = (_QWORD *)*((_QWORD *)v9 + 4);
        }
        *v12 = a2;
        *((_QWORD *)v9 + 4) += 8;
      }
      v13 = (CA::Render::Context *)*((_QWORD *)a4 + 5);
      if (v13)
        CA::Render::Context::order_relative(v13, v8 == 8, (int)a2);
      goto LABEL_227;
    case 10:
      v31 = CA_CFFloatValue(a3);
      v32 = (CA::Render::Encoder *)*((_QWORD *)a4 + 4);
      if (v32)
      {
        v33 = (_BYTE *)*((_QWORD *)v32 + 4);
        if ((unint64_t)(v33 + 1) > *((_QWORD *)v32 + 5))
        {
          CA::Render::Encoder::grow(*((CA::Render::Encoder **)a4 + 4), 1);
          v33 = (_BYTE *)*((_QWORD *)v32 + 4);
        }
        *((_QWORD *)v32 + 4) = v33 + 1;
        *v33 = 13;
        v34 = (float *)*((_QWORD *)v32 + 4);
        if ((unint64_t)(v34 + 1) > *((_QWORD *)v32 + 5))
        {
          CA::Render::Encoder::grow(v32, 4);
          v34 = (float *)*((_QWORD *)v32 + 4);
        }
        *v34 = v31;
        *((_QWORD *)v32 + 4) += 4;
      }
      v35 = *((_QWORD *)a4 + 5);
      if (v35 && *(float *)(v35 + 192) != v31)
      {
        *(float *)(v35 + 192) = v31;
        CA::Render::post_notification(8u, v35, 0, 0);
      }
      goto LABEL_227;
    case 11:
      v36 = (const CA::Render::Object *)-[__CFString CA_copyRenderValue](a3, "CA_copyRenderValue", a3, a4, a5);
      v37 = (CA::Render::Encoder *)*((_QWORD *)a4 + 4);
      if (v37)
      {
        v38 = (_BYTE *)*((_QWORD *)v37 + 4);
        if ((unint64_t)(v38 + 1) > *((_QWORD *)v37 + 5))
        {
          CA::Render::Encoder::grow(*((CA::Render::Encoder **)a4 + 4), 1);
          v38 = (_BYTE *)*((_QWORD *)v37 + 4);
        }
        *((_QWORD *)v37 + 4) = v38 + 1;
        *v38 = 14;
        v39 = (_DWORD *)*((_QWORD *)v37 + 4);
        if ((unint64_t)(v39 + 1) > *((_QWORD *)v37 + 5))
        {
          CA::Render::Encoder::grow(v37, 4);
          v39 = (_DWORD *)*((_QWORD *)v37 + 4);
        }
        *v39 = (_DWORD)a2;
        *((_QWORD *)v37 + 4) += 4;
        CA::Render::Encoder::encode_object(v37, v36);
      }
      v40 = (CA::Render::Context *)*((_QWORD *)a4 + 5);
      if (v40)
        CA::Render::Context::set_slot(v40, a2, v36);
      if (v36)
      {
        v41 = (unsigned int *)((char *)v36 + 8);
        do
        {
          v42 = __ldaxr(v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v41));
        if (!v43)
          (*(void (**)(const CA::Render::Object *))(*(_QWORD *)v36 + 16))(v36);
      }
      goto LABEL_227;
    case 12:
      v44 = (CA::Render::Encoder *)*((_QWORD *)a4 + 4);
      if (v44)
      {
        v45 = (_BYTE *)*((_QWORD *)v44 + 4);
        if ((unint64_t)(v45 + 1) > *((_QWORD *)v44 + 5))
        {
          CA::Render::Encoder::grow(*((CA::Render::Encoder **)a4 + 4), 1);
          v45 = (_BYTE *)*((_QWORD *)v44 + 4);
        }
        *((_QWORD *)v44 + 4) = v45 + 1;
        *v45 = 15;
        v46 = (_DWORD *)*((_QWORD *)v44 + 4);
        if ((unint64_t)(v46 + 1) > *((_QWORD *)v44 + 5))
        {
          CA::Render::Encoder::grow(v44, 4);
          v46 = (_DWORD *)*((_QWORD *)v44 + 4);
        }
        *v46 = (_DWORD)a2;
        *((_QWORD *)v44 + 4) += 4;
      }
      v47 = (CA::Render::Context *)*((_QWORD *)a4 + 5);
      if (v47)
        CA::Render::Context::delete_slot(v47, a2);
      goto LABEL_227;
    case 13:
      v48 = (CA::Render::Context *)CA_CFIntValue(a3);
      v49 = (CA::Render::Encoder *)*((_QWORD *)a4 + 4);
      if (v49)
      {
        v50 = (_BYTE *)*((_QWORD *)v49 + 4);
        if ((unint64_t)(v50 + 1) > *((_QWORD *)v49 + 5))
        {
          CA::Render::Encoder::grow(*((CA::Render::Encoder **)a4 + 4), 1);
          v50 = (_BYTE *)*((_QWORD *)v49 + 4);
        }
        *((_QWORD *)v49 + 4) = v50 + 1;
        *v50 = 16;
        v51 = (_DWORD *)*((_QWORD *)v49 + 4);
        if ((unint64_t)(v51 + 1) > *((_QWORD *)v49 + 5))
        {
          CA::Render::Encoder::grow(v49, 4);
          v51 = (_DWORD *)*((_QWORD *)v49 + 4);
        }
        *v51 = (_DWORD)a2;
        v52 = *((_QWORD *)v49 + 4);
        v53 = *((_QWORD *)v49 + 5);
        v54 = (_DWORD *)(v52 + 4);
        *((_QWORD *)v49 + 4) = v52 + 4;
        if (v52 + 8 > v53)
        {
          CA::Render::Encoder::grow(v49, 4);
          v54 = (_DWORD *)*((_QWORD *)v49 + 4);
        }
        *v54 = (_DWORD)v48;
        *((_QWORD *)v49 + 4) += 4;
      }
      v55 = (CA::Render::Context *)*((_QWORD *)a4 + 5);
      if (v55)
        CA::Render::Context::transfer_slot(v55, (int)a2, v48);
      goto LABEL_227;
    case 14:
      v56 = CA_CFIntValue(a3);
      v57 = (CA::Render::Encoder *)*((_QWORD *)a4 + 4);
      if (v57)
      {
        v58 = (_BYTE *)*((_QWORD *)v57 + 4);
        if ((unint64_t)(v58 + 1) > *((_QWORD *)v57 + 5))
        {
          CA::Render::Encoder::grow(*((CA::Render::Encoder **)a4 + 4), 1);
          v58 = (_BYTE *)*((_QWORD *)v57 + 4);
        }
        *((_QWORD *)v57 + 4) = v58 + 1;
        *v58 = 18;
        v59 = (_DWORD *)*((_QWORD *)v57 + 4);
        if ((unint64_t)(v59 + 1) > *((_QWORD *)v57 + 5))
        {
          CA::Render::Encoder::grow(v57, 4);
          v59 = (_DWORD *)*((_QWORD *)v57 + 4);
        }
        *v59 = (_DWORD)a2;
        v60 = *((_QWORD *)v57 + 4);
        v61 = *((_QWORD *)v57 + 5);
        v62 = (unsigned int *)(v60 + 4);
        *((_QWORD *)v57 + 4) = v60 + 4;
        if (v60 + 8 > v61)
        {
          CA::Render::Encoder::grow(v57, 4);
          v62 = (unsigned int *)*((_QWORD *)v57 + 4);
        }
        *v62 = v56;
        *((_QWORD *)v57 + 4) += 4;
        (*(void (**)(CA::Render::Encoder *))(*(_QWORD *)v57 + 16))(v57);
      }
      v63 = (CA::Render::Context *)*((_QWORD *)a4 + 5);
      if (v63)
        CA::Render::Context::flush_image_queue(v63, (int)a2, v56);
      goto LABEL_227;
    case 15:
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a3, 0);
      v244 = CA_CFIntValue(ValueAtIndex);
      v65 = CFArrayGetValueAtIndex((CFArrayRef)a3, 1);
      v243 = CA_CFIntValue(v65);
      v66 = CFArrayGetValueAtIndex((CFArrayRef)a3, 2);
      v242 = CA_CFIntValue(v66);
      v67 = CFArrayGetValueAtIndex((CFArrayRef)a3, 3);
      v68 = CA_CFIntValue(v67);
      v69 = CFArrayGetValueAtIndex((CFArrayRef)a3, 4);
      v70 = CA_CFIntValue(v69);
      v71 = CFArrayGetValueAtIndex((CFArrayRef)a3, 5);
      v72 = CA_CFIntValue(v71);
      v73 = CFArrayGetValueAtIndex((CFArrayRef)a3, 6);
      v74 = CA_CFIntValue(v73);
      v75 = CFArrayGetValueAtIndex((CFArrayRef)a3, 7);
      v76 = CA_CFIntValue(v75);
      v77 = CFArrayGetValueAtIndex((CFArrayRef)a3, 8);
      v78 = (double)(int)CA_CFIntValue(v77) * 0.0000152587891;
      v79 = CFArrayGetValueAtIndex((CFArrayRef)a3, 9);
      v80 = CA_CFIntValue(v79);
      v81 = (CA::Render *)CFArrayGetValueAtIndex((CFArrayRef)a3, 10);
      if (v81 == (CA::Render *)*MEMORY[0x1E0C9B0D0])
        v83 = 0;
      else
        v83 = v81;
      v84 = (CGColor *)CA::Context::current_colorspace(*(CA::Context **)a4, v82);
      v246 = 0;
      v245 = 0;
      CA::Render::convert_cgcolor(v83, v84, (CGColorSpace *)&v246, (float *)&v245, v85);
      v86 = (CA::Render::Encoder *)*((_QWORD *)a4 + 4);
      if (v86)
      {
        v240 = v246;
        v241 = (CA::Render::Object *)v245;
        v87 = (_BYTE *)*((_QWORD *)v86 + 4);
        if ((unint64_t)(v87 + 1) > *((_QWORD *)v86 + 5))
        {
          CA::Render::Encoder::grow(v86, 1);
          v87 = (_BYTE *)*((_QWORD *)v86 + 4);
        }
        *((_QWORD *)v86 + 4) = v87 + 1;
        *v87 = 19;
        v88 = (_QWORD *)*((_QWORD *)v86 + 4);
        if ((unint64_t)(v88 + 1) > *((_QWORD *)v86 + 5))
        {
          CA::Render::Encoder::grow(v86, 8);
          v88 = (_QWORD *)*((_QWORD *)v86 + 4);
        }
        *v88 = a2;
        v89 = *((_QWORD *)v86 + 4);
        v90 = *((_QWORD *)v86 + 5);
        v91 = (unsigned int *)(v89 + 8);
        *((_QWORD *)v86 + 4) = v89 + 8;
        if (v89 + 12 > v90)
        {
          CA::Render::Encoder::grow(v86, 4);
          v91 = (unsigned int *)*((_QWORD *)v86 + 4);
        }
        *v91 = v244;
        v92 = *((_QWORD *)v86 + 4);
        v93 = *((_QWORD *)v86 + 5);
        v94 = (unsigned int *)(v92 + 4);
        *((_QWORD *)v86 + 4) = v92 + 4;
        if (v92 + 8 > v93)
        {
          CA::Render::Encoder::grow(v86, 4);
          v94 = (unsigned int *)*((_QWORD *)v86 + 4);
        }
        *v94 = v243;
        v95 = *((_QWORD *)v86 + 4);
        v96 = *((_QWORD *)v86 + 5);
        v97 = (unsigned int *)(v95 + 4);
        *((_QWORD *)v86 + 4) = v95 + 4;
        if (v95 + 8 > v96)
        {
          CA::Render::Encoder::grow(v86, 4);
          v97 = (unsigned int *)*((_QWORD *)v86 + 4);
        }
        *v97 = v242;
        v98 = *((_QWORD *)v86 + 4);
        v99 = *((_QWORD *)v86 + 5);
        v100 = (int *)(v98 + 4);
        *((_QWORD *)v86 + 4) = v98 + 4;
        if (v98 + 8 > v99)
        {
          CA::Render::Encoder::grow(v86, 4);
          v100 = (int *)*((_QWORD *)v86 + 4);
        }
        *v100 = v68;
        v101 = *((_QWORD *)v86 + 4);
        v102 = *((_QWORD *)v86 + 5);
        v103 = (int *)(v101 + 4);
        *((_QWORD *)v86 + 4) = v101 + 4;
        if (v101 + 8 > v102)
        {
          CA::Render::Encoder::grow(v86, 4);
          v103 = (int *)*((_QWORD *)v86 + 4);
        }
        *v103 = v70;
        v104 = *((_QWORD *)v86 + 4);
        v105 = *((_QWORD *)v86 + 5);
        v106 = (int *)(v104 + 4);
        *((_QWORD *)v86 + 4) = v104 + 4;
        if (v104 + 8 > v105)
        {
          CA::Render::Encoder::grow(v86, 4);
          v106 = (int *)*((_QWORD *)v86 + 4);
        }
        *v106 = v72;
        v107 = *((_QWORD *)v86 + 4);
        v108 = *((_QWORD *)v86 + 5);
        v109 = (int *)(v107 + 4);
        *((_QWORD *)v86 + 4) = v107 + 4;
        if (v107 + 8 > v108)
        {
          CA::Render::Encoder::grow(v86, 4);
          v109 = (int *)*((_QWORD *)v86 + 4);
        }
        *v109 = v74;
        v110 = *((_QWORD *)v86 + 4);
        v111 = *((_QWORD *)v86 + 5);
        v112 = (BOOL *)(v110 + 4);
        *((_QWORD *)v86 + 4) = v110 + 4;
        if (v110 + 5 > v111)
        {
          CA::Render::Encoder::grow(v86, 1);
          v112 = (BOOL *)*((_QWORD *)v86 + 4);
        }
        *((_QWORD *)v86 + 4) = v112 + 1;
        *v112 = v76 != 0;
        v113 = (float *)*((_QWORD *)v86 + 4);
        if ((unint64_t)(v113 + 1) > *((_QWORD *)v86 + 5))
        {
          CA::Render::Encoder::grow(v86, 4);
          v113 = (float *)*((_QWORD *)v86 + 4);
        }
        *v113 = v78;
        v114 = *((_QWORD *)v86 + 4);
        v115 = *((_QWORD *)v86 + 5);
        v116 = (int *)(v114 + 4);
        *((_QWORD *)v86 + 4) = v114 + 4;
        if (v114 + 8 > v115)
        {
          CA::Render::Encoder::grow(v86, 4);
          v116 = (int *)*((_QWORD *)v86 + 4);
        }
        *v116 = v80;
        v117 = *((_QWORD *)v86 + 4);
        v118 = *((_QWORD *)v86 + 5);
        v119 = (unsigned int *)(v117 + 4);
        *((_QWORD *)v86 + 4) = v117 + 4;
        if (v117 + 8 > v118)
        {
          CA::Render::Encoder::grow(v86, 4);
          v119 = (unsigned int *)*((_QWORD *)v86 + 4);
        }
        *v119 = v240;
        *((_QWORD *)v86 + 4) += 4;
        CA::Render::Encoder::encode_object(v86, v241);
      }
      v120 = (CA::Render::ImageProvider *)*((_QWORD *)a4 + 5);
      if (v120)
        CA::Render::ImageProvider::create(v120, a2, v244, v243, v242, v68, v70, v72, v78, v74, v76 != 0, v239, v80, v246, (CA::Render::Pattern *)v245);
      goto LABEL_227;
    case 16:
      v121 = CFArrayGetValueAtIndex((CFArrayRef)a3, 0);
      v122 = CA_CFIntValue(v121);
      v123 = CFArrayGetValueAtIndex((CFArrayRef)a3, 1);
      v124 = CA_CFIntValue(v123);
      v125 = (CA::Render::Encoder *)*((_QWORD *)a4 + 4);
      if (v125)
      {
        v126 = (_BYTE *)*((_QWORD *)v125 + 4);
        if ((unint64_t)(v126 + 1) > *((_QWORD *)v125 + 5))
        {
          CA::Render::Encoder::grow(*((CA::Render::Encoder **)a4 + 4), 1);
          v126 = (_BYTE *)*((_QWORD *)v125 + 4);
        }
        *((_QWORD *)v125 + 4) = v126 + 1;
        *v126 = 20;
        v127 = (_QWORD *)*((_QWORD *)v125 + 4);
        if ((unint64_t)(v127 + 1) > *((_QWORD *)v125 + 5))
        {
          CA::Render::Encoder::grow(v125, 8);
          v127 = (_QWORD *)*((_QWORD *)v125 + 4);
        }
        *v127 = a2;
        v128 = *((_QWORD *)v125 + 4);
        v129 = *((_QWORD *)v125 + 5);
        v130 = (unsigned int *)(v128 + 8);
        *((_QWORD *)v125 + 4) = v128 + 8;
        if (v128 + 12 > v129)
        {
          CA::Render::Encoder::grow(v125, 4);
          v130 = (unsigned int *)*((_QWORD *)v125 + 4);
        }
        *v130 = v122;
        v131 = *((_QWORD *)v125 + 4);
        v132 = *((_QWORD *)v125 + 5);
        v133 = (unsigned int *)(v131 + 4);
        *((_QWORD *)v125 + 4) = v131 + 4;
        if (v131 + 8 > v132)
        {
          CA::Render::Encoder::grow(v125, 4);
          v133 = (unsigned int *)*((_QWORD *)v125 + 4);
        }
        *v133 = v124;
        *((_QWORD *)v125 + 4) += 4;
      }
      v134 = *((_QWORD *)a4 + 5);
      if (v134)
        CA::Render::ImageProvider::set_image_size(*(CA::Render::ImageProvider **)(v134 + 136), (CA::Render::Context *)*(unsigned int *)(v134 + 148), (uint64_t)a2, v122, v124);
      goto LABEL_227;
    case 17:
      v135 = (CA::Render *)CFArrayGetValueAtIndex((CFArrayRef)a3, 0);
      if (v135 == (CA::Render *)*MEMORY[0x1E0C9B0D0])
        v137 = 0;
      else
        v137 = v135;
      v138 = (CGColor *)CA::Context::current_colorspace(*(CA::Context **)a4, v136);
      v246 = 0;
      v245 = 0;
      CA::Render::convert_cgcolor(v137, v138, (CGColorSpace *)&v246, (float *)&v245, v139);
      v140 = (CA::Render::Encoder *)*((_QWORD *)a4 + 4);
      if (v140)
      {
        v141 = v246;
        v142 = v245;
        v143 = (_BYTE *)*((_QWORD *)v140 + 4);
        if ((unint64_t)(v143 + 1) > *((_QWORD *)v140 + 5))
        {
          CA::Render::Encoder::grow(*((CA::Render::Encoder **)a4 + 4), 1);
          v143 = (_BYTE *)*((_QWORD *)v140 + 4);
        }
        *((_QWORD *)v140 + 4) = v143 + 1;
        *v143 = 21;
        v144 = (_QWORD *)*((_QWORD *)v140 + 4);
        if ((unint64_t)(v144 + 1) > *((_QWORD *)v140 + 5))
        {
          CA::Render::Encoder::grow(v140, 8);
          v144 = (_QWORD *)*((_QWORD *)v140 + 4);
        }
        *v144 = a2;
        v145 = *((_QWORD *)v140 + 4);
        v146 = *((_QWORD *)v140 + 5);
        v147 = (unsigned int *)(v145 + 8);
        *((_QWORD *)v140 + 4) = v145 + 8;
        if (v145 + 12 > v146)
        {
          CA::Render::Encoder::grow(v140, 4);
          v147 = (unsigned int *)*((_QWORD *)v140 + 4);
        }
        *v147 = v141;
        *((_QWORD *)v140 + 4) += 4;
        CA::Render::Encoder::encode_object(v140, (const CA::Render::Object *)v142);
      }
      v148 = *((_QWORD *)a4 + 5);
      if (v148)
        CA::Render::ImageProvider::set_fill_color(*(CA::Render::ImageProvider **)(v148 + 136), (CA::Render::Context *)*(unsigned int *)(v148 + 148), (uint64_t)a2, v246, v245);
      goto LABEL_227;
    case 18:
      v149 = CFArrayGetValueAtIndex((CFArrayRef)a3, 0);
      v150 = CA_CFIntValue(v149);
      v151 = (CA::Render::Encoder *)*((_QWORD *)a4 + 4);
      if (v151)
      {
        v152 = (_BYTE *)*((_QWORD *)v151 + 4);
        if ((unint64_t)(v152 + 1) > *((_QWORD *)v151 + 5))
        {
          CA::Render::Encoder::grow(*((CA::Render::Encoder **)a4 + 4), 1);
          v152 = (_BYTE *)*((_QWORD *)v151 + 4);
        }
        *((_QWORD *)v151 + 4) = v152 + 1;
        *v152 = 22;
        v153 = (_QWORD *)*((_QWORD *)v151 + 4);
        if ((unint64_t)(v153 + 1) > *((_QWORD *)v151 + 5))
        {
          CA::Render::Encoder::grow(v151, 8);
          v153 = (_QWORD *)*((_QWORD *)v151 + 4);
        }
        *v153 = a2;
        v154 = *((_QWORD *)v151 + 4);
        v155 = *((_QWORD *)v151 + 5);
        v156 = (_DWORD *)(v154 + 8);
        *((_QWORD *)v151 + 4) = v154 + 8;
        if (v154 + 12 > v155)
        {
          CA::Render::Encoder::grow(v151, 4);
          v156 = (_DWORD *)*((_QWORD *)v151 + 4);
        }
        *v156 = v150;
        *((_QWORD *)v151 + 4) += 4;
      }
      v157 = *((_QWORD *)a4 + 5);
      if (v157)
      {
        v158 = CA::Render::Context::lookup_object(*(_QWORD *)(v157 + 136), *(_DWORD *)(v157 + 148), (uint64_t)a2, 0, 24, 0);
        if (v158)
          *(_DWORD *)(v158 + 136) = v150;
      }
      goto LABEL_227;
    case 19:
      v159 = CFArrayGetValueAtIndex((CFArrayRef)a3, 0);
      v160 = CA_CFIntValue(v159);
      v161 = CFArrayGetValueAtIndex((CFArrayRef)a3, 1);
      v162 = CA_CFIntValue(v161);
      v163 = CFArrayGetValueAtIndex((CFArrayRef)a3, 2);
      v164 = CA_CFIntValue(v163);
      v165 = (void *)CFArrayGetValueAtIndex((CFArrayRef)a3, 3);
      if (v165 == (void *)*MEMORY[0x1E0C9B0D0])
        v166 = 0;
      else
        v166 = v165;
      v167 = CFArrayGetValueAtIndex((CFArrayRef)a3, 4);
      v168 = CA_CFIntValue(v167);
      v169 = CFArrayGetValueAtIndex((CFArrayRef)a3, 5);
      v170 = CA_CFIntValue(v169);
      v171 = (const CA::Render::Object *)objc_msgSend(v166, "CA_copyRenderValue");
      v172 = (CA::Render::Encoder *)*((_QWORD *)a4 + 4);
      if (v172)
      {
        v173 = (_BYTE *)*((_QWORD *)v172 + 4);
        if ((unint64_t)(v173 + 1) > *((_QWORD *)v172 + 5))
        {
          CA::Render::Encoder::grow(*((CA::Render::Encoder **)a4 + 4), 1);
          v173 = (_BYTE *)*((_QWORD *)v172 + 4);
        }
        *((_QWORD *)v172 + 4) = v173 + 1;
        *v173 = 23;
        v174 = (_QWORD *)*((_QWORD *)v172 + 4);
        if ((unint64_t)(v174 + 1) > *((_QWORD *)v172 + 5))
        {
          CA::Render::Encoder::grow(v172, 8);
          v174 = (_QWORD *)*((_QWORD *)v172 + 4);
        }
        *v174 = a2;
        v175 = *((_QWORD *)v172 + 4);
        v176 = *((_QWORD *)v172 + 5);
        v177 = (int *)(v175 + 8);
        *((_QWORD *)v172 + 4) = v175 + 8;
        if (v175 + 12 > v176)
        {
          CA::Render::Encoder::grow(v172, 4);
          v177 = (int *)*((_QWORD *)v172 + 4);
        }
        *v177 = v160;
        v178 = *((_QWORD *)v172 + 4);
        v179 = *((_QWORD *)v172 + 5);
        v180 = (int *)(v178 + 4);
        *((_QWORD *)v172 + 4) = v178 + 4;
        if (v178 + 8 > v179)
        {
          CA::Render::Encoder::grow(v172, 4);
          v180 = (int *)*((_QWORD *)v172 + 4);
        }
        *v180 = v162;
        v181 = *((_QWORD *)v172 + 4);
        v182 = *((_QWORD *)v172 + 5);
        v183 = (int *)(v181 + 4);
        *((_QWORD *)v172 + 4) = v181 + 4;
        if (v181 + 8 > v182)
        {
          CA::Render::Encoder::grow(v172, 4);
          v183 = (int *)*((_QWORD *)v172 + 4);
        }
        *v183 = v164;
        *((_QWORD *)v172 + 4) += 4;
        CA::Render::Encoder::encode_object(v172, v171);
        v184 = (int *)*((_QWORD *)v172 + 4);
        if ((unint64_t)(v184 + 1) > *((_QWORD *)v172 + 5))
        {
          CA::Render::Encoder::grow(v172, 4);
          v184 = (int *)*((_QWORD *)v172 + 4);
        }
        *v184 = v168;
        v185 = *((_QWORD *)v172 + 4);
        v186 = *((_QWORD *)v172 + 5);
        v187 = (unsigned int *)(v185 + 4);
        *((_QWORD *)v172 + 4) = v185 + 4;
        if (v185 + 8 > v186)
        {
          CA::Render::Encoder::grow(v172, 4);
          v187 = (unsigned int *)*((_QWORD *)v172 + 4);
        }
        *v187 = v170;
        *((_QWORD *)v172 + 4) += 4;
        CA::Render::Encoder::retain_object((uint64_t)v172, v171);
      }
      v188 = *((_QWORD *)a4 + 5);
      if (v188)
        CA::Render::ImageProvider::set_subimage(*(CA::Render::ImageProvider **)(v188 + 136), (CA::Render::Context *)*(unsigned int *)(v188 + 148), (uint64_t)a2, v160, v162, v164, v171, v168, v170);
      if (v171)
      {
        v189 = (unsigned int *)((char *)v171 + 8);
        do
        {
          v190 = __ldaxr(v189);
          v191 = v190 - 1;
        }
        while (__stlxr(v191, v189));
        if (!v191)
          (*(void (**)(const CA::Render::Object *))(*(_QWORD *)v171 + 16))(v171);
      }
      goto LABEL_227;
    case 20:
      v192 = CFArrayGetValueAtIndex((CFArrayRef)a3, 0);
      v193 = CA_CFIntValue(v192);
      v194 = CFArrayGetValueAtIndex((CFArrayRef)a3, 1);
      v195 = CA_CFIntValue(v194);
      v196 = CFArrayGetValueAtIndex((CFArrayRef)a3, 2);
      v197 = CA_CFIntValue(v196);
      v198 = CFArrayGetValueAtIndex((CFArrayRef)a3, 3);
      v199 = CA_CFIntValue(v198);
      v200 = CFArrayGetValueAtIndex((CFArrayRef)a3, 4);
      v201 = CA_CFIntValue(v200);
      v202 = CFArrayGetValueAtIndex((CFArrayRef)a3, 5);
      v203 = CA_CFIntValue(v202);
      v204 = (CA::Render::Encoder *)*((_QWORD *)a4 + 4);
      if (v204)
      {
        v205 = (_BYTE *)*((_QWORD *)v204 + 4);
        if ((unint64_t)(v205 + 1) > *((_QWORD *)v204 + 5))
        {
          CA::Render::Encoder::grow(*((CA::Render::Encoder **)a4 + 4), 1);
          v205 = (_BYTE *)*((_QWORD *)v204 + 4);
        }
        *((_QWORD *)v204 + 4) = v205 + 1;
        *v205 = 24;
        v206 = (_QWORD *)*((_QWORD *)v204 + 4);
        if ((unint64_t)(v206 + 1) > *((_QWORD *)v204 + 5))
        {
          CA::Render::Encoder::grow(v204, 8);
          v206 = (_QWORD *)*((_QWORD *)v204 + 4);
        }
        *v206 = a2;
        v207 = *((_QWORD *)v204 + 4);
        v208 = *((_QWORD *)v204 + 5);
        v209 = (int *)(v207 + 8);
        *((_QWORD *)v204 + 4) = v207 + 8;
        if (v207 + 12 > v208)
        {
          CA::Render::Encoder::grow(v204, 4);
          v209 = (int *)*((_QWORD *)v204 + 4);
        }
        *v209 = v193;
        v210 = *((_QWORD *)v204 + 4);
        v211 = *((_QWORD *)v204 + 5);
        v212 = (int *)(v210 + 4);
        *((_QWORD *)v204 + 4) = v210 + 4;
        if (v210 + 8 > v211)
        {
          CA::Render::Encoder::grow(v204, 4);
          v212 = (int *)*((_QWORD *)v204 + 4);
        }
        *v212 = v195;
        v213 = *((_QWORD *)v204 + 4);
        v214 = *((_QWORD *)v204 + 5);
        v215 = (int *)(v213 + 4);
        *((_QWORD *)v204 + 4) = v213 + 4;
        if (v213 + 8 > v214)
        {
          CA::Render::Encoder::grow(v204, 4);
          v215 = (int *)*((_QWORD *)v204 + 4);
        }
        *v215 = v197;
        v216 = *((_QWORD *)v204 + 4);
        v217 = *((_QWORD *)v204 + 5);
        v218 = (int *)(v216 + 4);
        *((_QWORD *)v204 + 4) = v216 + 4;
        if (v216 + 8 > v217)
        {
          CA::Render::Encoder::grow(v204, 4);
          v218 = (int *)*((_QWORD *)v204 + 4);
        }
        *v218 = v199;
        v219 = *((_QWORD *)v204 + 4);
        v220 = *((_QWORD *)v204 + 5);
        v221 = (int *)(v219 + 4);
        *((_QWORD *)v204 + 4) = v219 + 4;
        if (v219 + 8 > v220)
        {
          CA::Render::Encoder::grow(v204, 4);
          v221 = (int *)*((_QWORD *)v204 + 4);
        }
        *v221 = v201;
        v222 = *((_QWORD *)v204 + 4);
        v223 = *((_QWORD *)v204 + 5);
        v224 = (_DWORD *)(v222 + 4);
        *((_QWORD *)v204 + 4) = v222 + 4;
        if (v222 + 8 > v223)
        {
          CA::Render::Encoder::grow(v204, 4);
          v224 = (_DWORD *)*((_QWORD *)v204 + 4);
        }
        *v224 = v203;
        *((_QWORD *)v204 + 4) += 4;
      }
      v225 = *((_QWORD *)a4 + 5);
      if (v225)
        CA::Render::ImageProvider::invalidate(*(CA::Render::ImageProvider **)(v225 + 136), (CA::Render::Context *)*(unsigned int *)(v225 + 148), (uint64_t)a2, v193, v195, v197, v199, v201, v203);
      goto LABEL_227;
    case 21:
    case 22:
    case 23:
    case 24:
      goto LABEL_227;
    case 25:
      v227 = (const CA::Render::Object *)-[__CFString _renderShmem](a3, "_renderShmem", a3, a4, a5);
      v228 = (CA::Render::Encoder *)*((_QWORD *)a4 + 4);
      if (v228)
      {
        v229 = (_BYTE *)*((_QWORD *)v228 + 4);
        if ((unint64_t)(v229 + 1) > *((_QWORD *)v228 + 5))
        {
          CA::Render::Encoder::grow(*((CA::Render::Encoder **)a4 + 4), 1);
          v229 = (_BYTE *)*((_QWORD *)v228 + 4);
        }
        *((_QWORD *)v228 + 4) = v229 + 1;
        *v229 = 35;
        CA::Render::Encoder::encode_object(v228, v227);
        (*(void (**)(CA::Render::Encoder *))(*(_QWORD *)v228 + 16))(v228);
      }
      if (*((_QWORD *)a4 + 5))
        CA::Render::Context::flush_presentation_modifier_shmem((uint64_t)v227, v226);
      goto LABEL_227;
    case 26:
      v232 = CA_CFDoubleValue(a3);
      if (v232 != 0.0)
        CA::Render::CA_IS_FULFILLING_SERVER_GLITCH_REQUEST(v230, v232);
      v233 = (CA::Render::Encoder *)*((_QWORD *)a4 + 4);
      if (v233)
        CA::Render::encode_request_server_glitch(v233, v231, 0.0);
      goto LABEL_227;
    case 27:
      v235 = CA_CFDoubleValue(a3);
      if (v235 != 0.0)
      {
        v236 = v235;
        v237 = (CA::Render::Encoder *)*((_QWORD *)a4 + 4);
        if (v237)
          CA::Render::encode_request_server_glitch(v237, v234, v235);
        v238 = (CA::Render::Context *)*((_QWORD *)a4 + 5);
        if (v238)
          CA::Render::Context::set_glitch_request(v238, v236);
      }
LABEL_227:
      *((_BYTE *)a4 + 56) = 1;
      break;
    default:
      return;
  }
}

uint64_t CA::Render::Encoder::set_synchronous(uint64_t this)
{
  *(_BYTE *)(this + 104) = 1;
  return this;
}

void *CA::Render::ImageQueue::encode(CA::Render::ImageQueue *this, CA::Render::Encoder *a2)
{
  int v4;
  _DWORD *v5;
  void *result;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  int v12;

  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 2));
  v4 = *((_DWORD *)this + 43);
  v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v5 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v5 = v4;
  *((_QWORD *)a2 + 4) += 4;
  result = (void *)CA::Render::Encoder::encode_port_send_right(a2, *((_DWORD *)this + 47), 0);
  v7 = *((_DWORD *)this + 48);
  v8 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v8 + 1) > *((_QWORD *)a2 + 5))
  {
    result = CA::Render::Encoder::grow(a2, 4);
    v8 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v8 = v7;
  v9 = *((_QWORD *)a2 + 4);
  v10 = *((_QWORD *)a2 + 5);
  v11 = (_DWORD *)(v9 + 4);
  *((_QWORD *)a2 + 4) = v9 + 4;
  v12 = *((_DWORD *)this + 44);
  if (v9 + 8 > v10)
  {
    result = CA::Render::Encoder::grow(a2, 4);
    v11 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v11 = v12;
  *((_QWORD *)a2 + 4) += 4;
  return result;
}

float CA_CFFloatValue(const void *a1)
{
  CFTypeID v2;
  float result;
  CFTypeID TypeID;
  float valuePtr;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = CFGetTypeID(a1);
  if (v2 == CFBooleanGetTypeID())
  {
    result = 0.0;
    if ((const void *)*MEMORY[0x1E0C9AE40] != a1)
      return 1.0;
  }
  else
  {
    TypeID = CFNumberGetTypeID();
    result = 0.0;
    if (v2 == TypeID)
    {
      valuePtr = 0.0;
      CFNumberGetValue((CFNumberRef)a1, kCFNumberFloatType, &valuePtr);
      return valuePtr;
    }
  }
  return result;
}

int *CAImageQueueSetMediaTimingClamped(int *result, double a2, float a3, double a4, double a5, double a6, double a7)
{
  uint64_t v13;
  os_unfair_lock_s *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  double *v18;
  unsigned int *v19;
  unsigned int v20;

  if (*((_QWORD *)result + 6))
  {
    v13 = (uint64_t)result;
    v14 = (os_unfair_lock_s *)(result + 4);
    os_unfair_lock_lock((os_unfair_lock_t)result + 4);
    v15 = *(_BYTE *)(v13 + 232) & 1;
    v16 = (*(_BYTE *)(v13 + 232) & 1) == 0;
    v17 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 24);
    v18 = (double *)(v17 + 48 * ((*(_BYTE *)(v13 + 232) & 1) == 0));
    v18[19] = a2;
    v18[20] = a3;
    v18[21] = a4;
    v18[22] = a5;
    v18[23] = a6;
    v18[24] = a7;
    __dmb(0xBu);
    v19 = (unsigned int *)(v17 + 248);
    do
    {
      while (1)
      {
        v20 = __ldaxr(v19);
        if (v20 == v15)
          break;
        __clrex();
      }
    }
    while (__stlxr(v16, v19));
    *(_BYTE *)(v13 + 232) = (*(_BYTE *)(v13 + 232) & 0xFE | v15) ^ 1;
    os_unfair_lock_unlock(v14);
    return CAImageQueuePing_(v13, 0, 0, 0.0, 0.0);
  }
  return result;
}

uint64_t CA::CG::ImageFilter::ImageFilter(uint64_t a1, unsigned int a2, unsigned int a3, double *a4, float64x2_t *a5, int a6)
{
  double v8;
  double v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int v23;
  double v24;
  double v25;
  _BOOL4 v26;
  double v27;
  double v28;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  _QWORD v35[5];

  v35[4] = *MEMORY[0x1E0C80C00];
  v8 = (double)a2;
  v9 = (double)a3;
  v35[0] = 0;
  v35[1] = 0;
  *(double *)&v35[2] = (double)a2;
  *(double *)&v35[3] = (double)a3;
  v10 = *a5;
  v11 = a5[1];
  v32 = *a5;
  v33 = v11;
  v12 = a5[2];
  v34 = v12;
  v13 = a4[1];
  if (*a4 != 0.0 || v13 != 0.0)
    v34 = vmlaq_n_f64(vmlaq_n_f64(v12, v10, *a4), v11, v13);
  v14 = a4[2];
  v15 = a4[3];
  if (v14 == v8 && v15 == v9)
  {
    v30 = v11;
    v31 = v10;
  }
  else
  {
    v31 = vmulq_n_f64(v10, v14 / v8);
    v32 = v31;
    v30 = vmulq_n_f64(v11, v15 / v9);
    v33 = v30;
  }
  v17 = CA::CG::mat2_filter_bits((uint64_t)&v32);
  v23 = CA::CG::rect_filter_bits((uint64_t)v35, v32.f64, v17, v18, v19, v20, v21, v22);
  *(_DWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = 0;
  if ((v23 & 0x3F) != 0)
  {
    switch(a6)
    {
      case 0:
      case 3:
      case 4:
        *(_WORD *)(a1 + 4) = 257;
        if ((v23 & 0x12) != 0)
        {
          v24 = vaddvq_f64(vmulq_f64(v31, v31));
          v25 = vaddvq_f64(vmulq_f64(v30, v30));
          v26 = v24 != 1.0;
          if (v25 != 1.0)
            v26 = 1;
          v27 = sqrt(v24);
          v28 = sqrt(v25);
          if (v26)
          {
            v25 = v28;
            v24 = v27;
          }
          *(double *)(a1 + 16) = v24;
          *(double *)(a1 + 24) = v25;
          if (v24 >= v25)
            v24 = v25;
          if (a6 == 3)
          {
            if (v24 < 0.75)
              *(_BYTE *)(a1 + 4) = 11;
          }
          else if (v24 < 0.75)
          {
            *(_BYTE *)(a1 + 4) = 2;
            *(_DWORD *)(a1 + 8) = -1102263091;
          }
        }
        break;
      case 1:
        goto LABEL_22;
      case 2:
        *(_WORD *)(a1 + 4) = 257;
        break;
      default:
        return a1;
    }
  }
  else
  {
LABEL_22:
    *(_WORD *)(a1 + 4) = 0;
  }
  return a1;
}

void CA::CG::FillRects::draw_shape(CA::CG::FillRects *this, CA::CG::Renderer *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  double *v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  BOOL v12;
  CA::CG::FillRects *v13;
  unint64_t v14;
  double *v16;
  double v22;
  double v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  CA::Shape *v29;
  int v30;
  double v31;
  double *v32;
  double *v33;
  unsigned int v34;
  CA::CG::Renderer *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  _OWORD v42[9];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a2 + 1);
  v4 = *((_DWORD *)this + 25);
  v5 = 88;
  if ((v4 & 4) == 0)
    v5 = 32;
  v36 = v5;
  if ((v4 & 4) != 0)
    v6 = (double *)((char *)a2 + 88);
  else
    v6 = (double *)((char *)a2 + 32);
  v34 = CA::CG::mat2_filter_bits((uint64_t)v6);
  v35 = a2;
  if ((v4 & 1) == 0)
    goto LABEL_7;
  if ((*((_BYTE *)a2 + 136) & 4) == 0)
    goto LABEL_13;
  if (fabs(v6[1]) < 0.000001 && fabs(v6[2]) < 0.000001)
  {
LABEL_7:
    v12 = 0;
    goto LABEL_14;
  }
  if (fabs(*(double *)((char *)a2 + v36)) < 0.000001)
    v12 = fabs(v6[3]) >= 0.000001;
  else
LABEL_13:
    v12 = 1;
LABEL_14:
  v13 = this;
  if (*((_QWORD *)this + 14))
  {
    v14 = 0;
    _H0 = *(_WORD *)(*(_QWORD *)(v3 + 16) + 14);
    v16 = (double *)((char *)this + 144);
    __asm { FCVT            S8, H0 }
    while (1)
    {
      v10.i64[0] = *(uint64_t *)(v16 - 3);
      v9.i64[0] = *(uint64_t *)(v16 - 2);
      v38 = v10.i64[0];
      v39 = v9.i64[0];
      v22 = *(v16 - 1);
      v8.i64[0] = *(uint64_t *)v16;
      v40 = v22;
      v41 = v8.i64[0];
      if (v22 < 0.0)
      {
        *(double *)v10.i64 = v22 + *(double *)v10.i64;
        v22 = -v22;
        v38 = v10.i64[0];
        v40 = v22;
      }
      if (*(double *)v8.i64 < 0.0)
      {
        *(double *)v9.i64 = *(double *)v8.i64 + *(double *)v9.i64;
        *(double *)v8.i64 = -*(double *)v8.i64;
        v39 = v9.i64[0];
        v41 = v8.i64[0];
      }
      if (v22 <= *(double *)v8.i64)
        v23 = *(double *)v8.i64;
      else
        v23 = v22;
      v7.i64[0] = 0x7FEFFFFFFFFFFFFFLL;
      if (v23 < 1.79769313e308)
        v24 = CA::CG::rect_filter_bits((uint64_t)&v38, v6, v34, v7, v8, v9, v10, v11);
      else
        v24 = 0;
      v25 = 0;
      if (v12 && (v24 & 9) != 0)
        v26 = 255;
      else
        v26 = 0;
      v27 = *(_QWORD *)(v3 + 16);
      if ((*(_BYTE *)(v27 + 481) & 1) != 0)
      {
        v28 = *(unsigned __int8 *)(v27 + 480);
        if (v28 < 2 || v28 == 3 && _S8 == 1.0 && (!v12 || (v24 & 9) == 0))
        {
          *(_BYTE *)(v27 + 481) &= ~1u;
          v25 = 1;
        }
        else
        {
          v25 = 0;
        }
      }
      if (v23 >= 1.79769313e308)
        break;
      v30 = v24 | 0x100000;
      v46 = 0;
      v44 = 0u;
      v45 = 0u;
      v43 = 0u;
      v31 = *(double *)((char *)v35 + v36);
      memset(v42, 0, sizeof(v42));
      CA::Transform::set_affine((CA::Transform *)v42, v31, v6[1], v6[2], v6[3], v6[4], v6[5]);
      *((_QWORD *)&v43 + 1) = &v38;
      *(_QWORD *)&v44 = v42;
      *((_QWORD *)&v44 + 1) = __PAIR64__(v26, v30);
      v13 = this;
      v46 = 0;
      v45 = 0uLL;
      CA::OGL::fill_rect(v3, (uint64_t)&v43 + 8, v32, v33);
      if (v25)
        goto LABEL_39;
LABEL_40:
      ++v14;
      v16 += 4;
      if (v14 >= *((_QWORD *)v13 + 14))
        return;
    }
    v29 = *(CA::Shape **)(*(_QWORD *)(v3 + 232) + 8);
    v42[0] = 0uLL;
    CA::OGL::emit_combine(v3, 0, 0, 0, v29, (unsigned int *)v42);
    if (!v25)
      goto LABEL_40;
LABEL_39:
    *(_BYTE *)(*(_QWORD *)(v3 + 16) + 481) |= 1u;
    goto LABEL_40;
  }
}

uint64_t CA::CG::rect_filter_bits(uint64_t a1, double *a2, uint64_t a3, int8x16_t a4, int8x16_t a5, int8x16_t a6, int8x16_t a7, int8x16_t a8)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  float64x2_t v16;
  int8x16_t v17;
  double v18;
  double v19;
  float64x2_t v20;
  int8x16_t v21;
  double v22;
  double v23;

  if ((~(_DWORD)a3 & 9) == 0)
    return a3;
  a6.i64[0] = *(_QWORD *)a1;
  v8 = *(double *)(a1 + 8);
  v9 = *(double *)(a1 + 24);
  *(double *)a7.i64 = *(double *)(a1 + 16) + *(double *)a1;
  v10 = v9 + v8;
  if (!(_DWORD)a3)
  {
    *(double *)a4.i64 = v9 + v8;
    a5.i64[0] = *(_QWORD *)(a1 + 8);
    goto LABEL_6;
  }
  v11 = a2[1];
  v12 = a2[3];
  v13 = a2[5];
  *(double *)a5.i64 = v13 + v11 * *(double *)a6.i64 + v12 * v8;
  *(double *)a4.i64 = v13 + v11 * *(double *)a7.i64 + v12 * v10;
  if ((a3 & 1) == 0)
  {
    v14 = a2[2];
    v15 = a2[4];
    *(double *)a6.i64 = v15 + *a2 * *(double *)a6.i64 + v14 * v8;
    *(double *)a7.i64 = v15 + *a2 * *(double *)a7.i64 + v14 * v10;
LABEL_6:
    a8.i64[0] = 0.5;
    v16.f64[0] = NAN;
    v16.f64[1] = NAN;
    v17 = (int8x16_t)vnegq_f64(v16);
    v18 = vabdd_f64(trunc(*(double *)vbslq_s8(v17, a8, a6).i64 + *(double *)a6.i64), *(double *)a6.i64);
    v19 = vabdd_f64(trunc(*(double *)vbslq_s8(v17, a8, a7).i64 + *(double *)a7.i64), *(double *)a7.i64);
    if (v18 <= v19)
      v18 = v19;
    a3 = (v18 >= 0.001) | a3;
  }
  if ((a3 & 8) == 0)
  {
    a6.i64[0] = 0.5;
    v20.f64[0] = NAN;
    v20.f64[1] = NAN;
    v21 = (int8x16_t)vnegq_f64(v20);
    v22 = vabdd_f64(trunc(*(double *)vbslq_s8(v21, a6, a5).i64 + *(double *)a5.i64), *(double *)a5.i64);
    v23 = vabdd_f64(trunc(*(double *)vbslq_s8(v21, a6, a4).i64 + *(double *)a4.i64), *(double *)a4.i64);
    if (v22 > v23)
      v23 = v22;
    if (v23 >= 0.001)
      return a3 | 8;
    else
      return a3;
  }
  return a3;
}

uint64_t CA::CG::mat2_filter_bits(uint64_t a1)
{
  double v1;
  double v2;
  float64x2_t v3;
  float64x2_t v9;
  unsigned int v10;
  double v11;
  double v12;
  uint64_t result;

  v1 = *(double *)(a1 + 8);
  if (fabs(v1) >= 0.000001 || fabs(*(double *)(a1 + 16)) >= 0.000001)
  {
    v2 = *(double *)a1;
    if (fabs(*(double *)a1) >= 0.000001 || fabs(*(double *)(a1 + 24)) >= 0.000001)
    {
      v10 = 9;
      goto LABEL_9;
    }
  }
  else
  {
    v2 = *(double *)a1;
  }
  v3.f64[0] = NAN;
  v3.f64[1] = NAN;
  __asm { FMOV            V4.2D, #0.5 }
  v9 = vabdq_f64(vrndq_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vnegq_f64(v3), _Q4, *(int8x16_t *)(a1 + 32)), *(float64x2_t *)(a1 + 32))), *(float64x2_t *)(a1 + 32));
  v10 = v9.f64[0] >= 0.001;
  if (v9.f64[1] >= 0.001)
    v10 |= 8u;
LABEL_9:
  v11 = v2 * v2 + v1 * v1;
  v12 = *(double *)(a1 + 16) * *(double *)(a1 + 16) + *(double *)(a1 + 24) * *(double *)(a1 + 24);
  if (v11 >= 0.999)
  {
    if (v11 > 1.001)
      result = v10 | 4;
    else
      result = v10;
  }
  else
  {
    result = v10 | 2;
  }
  if (v12 < 0.999)
    return result | 0x10;
  if (v12 > 1.001)
    return result | 0x20;
  return result;
}

void CA::Render::Proxy::~Proxy(CA::Render::Proxy *this, const CA::Render::Object *a2)
{
  malloc_zone_t *malloc_zone;

  --dword_1ECDC7CD4;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  --dword_1ECDC7CD4;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

os_log_t ___ZL15CAImageQueueLogv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreanimation", "CAImageQueue");
  CAImageQueueLog(void)::log = (uint64_t)result;
  return result;
}

CA::Render::Texture *CA::Render::`anonymous namespace'::create_image_by_rendering(CGImage *a1, CGColorSpace *Extended, __int16 a3, double a4)
{
  char v5;
  CGImage *v7;
  CA::Render::_anonymous_namespace_ *Width;
  unsigned int Height;
  BOOL IsMask;
  unint64_t *v11;
  char v12;
  int v13;
  uint64_t v14;
  _BOOL4 v15;
  size_t BitsPerComponent;
  CA::Render::Texture *v17;
  int v18;
  CGImage *Mask;
  CGImage *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  _BYTE *v26;
  void *v27;
  CGContext *v28;
  char v29;
  int v30;
  const unint64_t *v31;
  void (*v32)(const void *, void *);
  unsigned int v33;
  unint64_t v34;
  void *v35;
  CGImage *image;
  int v38;
  void *v39;
  CA::Render *v40;
  unint64_t v41[2];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;

  v57 = *MEMORY[0x1E0C80C00];
  if ((a3 & 0x200) == 0)
  {
    v5 = a3;
    v7 = a1;
    Width = (CA::Render::_anonymous_namespace_ *)CGImageGetWidth(a1);
    Height = CGImageGetHeight(v7);
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    *(_OWORD *)v41 = 0u;
    v39 = 0;
    v40 = 0;
    kdebug_trace();
    IsMask = CGImageIsMask(v7);
    v12 = IsMask;
    v13 = 0;
    v14 = 9;
    if (Extended && !IsMask)
    {
      v15 = (CGImageHasAlpha() & 1) != 0 || CGImageGetMask() || CGImageGetMaskingColors() != 0;
      BitsPerComponent = CGImageGetBitsPerComponent(v7);
      if (CGColorSpaceGetModel(Extended))
      {
        if (CGColorSpaceGetModel(Extended) == kCGColorSpaceModelCMYK)
        {
          if (v15)
          {
            Extended = (CGColorSpace *)CAGetColorSpace(0x1Du);
            v13 = 0;
            v14 = 1;
          }
          else
          {
            v13 = 0;
            v14 = 29;
          }
        }
        else if (BitsPerComponent < 9)
        {
          v13 = 0;
          if (v15)
            v14 = 1;
          else
            v14 = 3;
        }
        else if ((CGImageGetBitmapInfo(v7) & 0x100) != 0)
        {
          Extended = CAColorSpaceCreateExtended(Extended);
          if (v15)
            v14 = 13;
          else
            v14 = 17;
          v13 = 1;
        }
        else
        {
          v13 = 0;
          if (v15)
            v14 = 21;
          else
            v14 = 22;
        }
      }
      else
      {
        v18 = BitsPerComponent > 8 || v15;
        if (v18 == 1)
        {
          if (BitsPerComponent < 9)
          {
            Extended = (CGColorSpace *)CAGetColorSpace(3u);
            v13 = 0;
            v14 = 18;
          }
          else
          {
            Extended = (CGColorSpace *)CAGetColorSpace(0x1Du);
            v13 = 0;
            v14 = 21;
          }
        }
        else
        {
          v13 = 0;
          v14 = 10;
        }
      }
    }
    v38 = v13;
    if ((v5 & 0x40) != 0)
    {
      Mask = (CGImage *)CGImageGetMask();
      if (Mask)
      {
        v20 = Mask;
        Width = (CA::Render::_anonymous_namespace_ *)CGImageGetWidth(Mask);
        Height = CGImageGetHeight(v20);
      }
    }
    LODWORD(Width) = vcvtpd_u64_f64((double)Width * a4);
    v21 = vcvtpd_u64_f64((double)Height * a4);
    if (v22
      && (v23 = v22, (v24 = (unsigned __int16 *)CA::Render::aligned_malloc(v40, (unint64_t *)&v39, 0)) != 0))
    {
      v25 = v24;
      v26 = CAGetCachedCGBitmapContext_(v24, Width, v21, v14, v41[0], Extended);
      if (v26)
      {
        v28 = (CGContext *)*((_QWORD *)v26 + 2);
        if (v28)
        {
          CGContextSetCompositeOperation();
          image = CGImageCreateCopy(v7);
          if (image)
          {
            CGImageSetCachingFlags();
            v7 = image;
          }
          if ((_DWORD)v14 == 9)
            v29 = v12;
          else
            v29 = 1;
          if ((v29 & 1) == 0)
          {
            CGContextSetRGBFillColor(v28, 1.0, 1.0, 1.0, 1.0);
            v59.origin.x = 0.0;
            v59.origin.y = 0.0;
            v59.size.width = (double)Width;
            v59.size.height = (double)v21;
            CGContextClipToMask(v28, v59, v7);
            v60.origin.x = 0.0;
            v60.origin.y = 0.0;
            v60.size.width = (double)Width;
            v60.size.height = (double)v21;
            CGContextFillRect(v28, v60);
LABEL_60:
            CGImageRelease(image);
            CAReleaseCachedCGContext(v28);
            if (v23 >= 2)
            v32 = (void (*)(const void *, void *))v39;
            MEMORY[0x186DBEA7C](*MEMORY[0x1E0C83DA0], v25, v39, 1, 1);
            if ((v5 & 2) != 0)
              v33 = 9;
            else
              v33 = 10;
            if ((_DWORD)v14 == 10)
              v34 = v33;
            else
              v34 = v14;
            v17 = CA::Render::Image::new_image((CA::Render::Image *)v34, Width, v21, v23, Extended, (CGColorSpace *)v25, v41, (const unint64_t *)CA::Render::aligned_free, v32, image);
            if (v38)
              CGColorSpaceRelease(Extended);
            if (v17)
              *((_DWORD *)v17 + 3) |= 0x800000u;
            else
              CA::Render::aligned_free((CA::Render *)v25, (size_t)v32, v35);
            goto LABEL_73;
          }
          if (a4 == 1.0 && CGImageGetBitsPerPixel(v7) != 1)
          {
            v30 = 0;
            if ((v5 & 0x80) == 0)
              goto LABEL_52;
          }
          else
          {
            CGContextGetInterpolationQualityRange();
            CGContextSetInterpolationQualityRange();
            v30 = 1;
            if ((v5 & 0x80) == 0)
            {
LABEL_52:
              v58.origin.x = 0.0;
              v58.origin.y = 0.0;
              v58.size.width = (double)Width;
              v58.size.height = (double)v21;
              CGContextDrawImage(v28, v58, v7);
              goto LABEL_58;
            }
          }
          CGContextDrawImageWithOptions();
LABEL_58:
          if (v30)
            CGContextSetInterpolationQualityRange();
          goto LABEL_60;
        }
      }
      CA::Render::aligned_free((CA::Render *)v25, (size_t)v39, v27);
      v17 = 0;
    }
    else
    {
      v17 = 0;
    }
LABEL_73:
    kdebug_trace();
    return v17;
  }
  return 0;
}

unsigned __int16 *CA::Render::`anonymous namespace'::create_image_by_copying(CA::Render::_anonymous_namespace_ *a1, unsigned int a2, CGColorSpace *a3, uint64_t a4, CA::Render *a5, unint64_t a6, CA::Render *a7, __int16 a8)
{
  char v8;
  unsigned int v14;
  unint64_t *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int16 *v18;
  unsigned int v19;
  const unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int16 *v26;
  unint64_t v27;
  uint64_t Bytes;
  unsigned int v29;
  void (*v30)(const void *, void *);
  CA::Render::Texture *v31;
  void *v32;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  CGColorSpace *v39;
  void (*v41)(const void *, void *);
  CA::Render *v42;
  _OWORD v43[16];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if ((a8 & 0x200) != 0)
    return 0;
  v8 = a8;
  v14 = a1;
  kdebug_trace();
  memset(v43, 0, sizeof(v43));
  v41 = 0;
  v42 = 0;
  if (v16)
  {
    v17 = v16;
    v39 = a3;
    v18 = (unsigned __int16 *)CA::Render::aligned_malloc(v42, (unint64_t *)&v41, 0);
    if (v18)
    {
      if (a7 > 0x25)
        v19 = 0;
      else
        v19 = dword_184750480[a7];
      if (a5)
      {
        CGBlt_copyBytes();
      }
      else
      {
        CGAccessSessionCreate();
        v21 = a6 - v19 * (unint64_t)v14;
        v22 = *(_QWORD *)&v43[0] - v19 * (unint64_t)v14;
        if (v21 <= v22)
          v23 = a6;
        else
          v23 = v19 * (unint64_t)v14;
        if (v21 <= v22)
          v24 = 0;
        else
          v24 = a6 - v19 * (unint64_t)v14;
        v36 = v23;
        v37 = v24;
        if (v21 <= v22)
          v25 = a6 - v19 * (unint64_t)v14;
        else
          v25 = 0;
        if (a2)
        {
          v35 = v22 - v25;
          v38 = a2;
          v26 = v18;
          while (1)
          {
            v27 = v36;
            if (v36)
              break;
LABEL_25:
            v29 = v38 - 1;
            if (v37 && v38 != 1)
              CGAccessSessionSkipForward();
            v26 = (unsigned __int16 *)((char *)v26 + v35);
            --v38;
            if (!v29)
              goto LABEL_29;
          }
          while (1)
          {
            Bytes = CGAccessSessionGetBytes();
            if (Bytes - 1 >= v27)
              break;
            v26 = (unsigned __int16 *)((char *)v26 + Bytes);
            v27 -= Bytes;
            if (!v27)
              goto LABEL_25;
          }
        }
LABEL_29:
        CGAccessSessionRelease();
      }
      if (v17 >= 2)
      v30 = v41;
      MEMORY[0x186DBEA7C](*MEMORY[0x1E0C83DA0], v18, v41, 1, 1);
      v31 = CA::Render::Image::new_image(a7, a1, a2, v17, v39, (CGColorSpace *)v18, (unint64_t *)v43, (const unint64_t *)CA::Render::aligned_free, v30, v34);
      v18 = (unsigned __int16 *)v31;
      if (v31)
        *((_DWORD *)v31 + 3) |= 0x800000u;
      else
        CA::Render::aligned_free(a5, (size_t)v30, v32);
    }
  }
  else
  {
    v18 = 0;
  }
  kdebug_trace();
  return v18;
}

unint64_t CA::Render::`anonymous namespace'::compute_image_levels(CA::Render::_anonymous_namespace_ *this, unsigned int a2, CA::Render *a3, char a4, unint64_t *a5, unint64_t *a6, unint64_t *a7)
{
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t result;
  uint64_t v14;

  v10 = this;
  v11 = a2;
  if ((a4 & 1) != 0 && (a3 > 0x13 || ((1 << (char)a3) & 0xC00C0) == 0))
  {
    v14 = 0;
    v12 = 0;
    while (1)
    {
      result = CA::Render::format_rowbytes(a3, v10);
      a5[v14] = result;
      if (!result)
        break;
      v12 += result * v11;
      if (v10 < 9 || v11 < 9)
      {
        result = v14 + 1;
        if ((_DWORD)v14 != -1)
          goto LABEL_7;
        goto LABEL_5;
      }
      v10 >>= 1;
      v11 >>= 1;
      ++v14;
    }
  }
  else
  {
    v12 = 0;
LABEL_5:
    result = CA::Render::format_rowbytes(a3, v10);
    *a5 = result;
    if (result)
    {
      v12 += result * v11;
      result = 1;
LABEL_7:
      *a6 = v12;
    }
  }
  return result;
}

void ___ZN2CA3OGLL17release_iosurfaceEP11__IOSurface_block_invoke_2(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

os_log_t ___ZL20CAMetalLayerStallLogv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreanimation", "CAMetalLayer.Stalls");
  CAMetalLayerStallLog(void)::log = (uint64_t)result;
  return result;
}

os_log_t ___ZL15CAMetalLayerLogv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreanimation", "CAMetalLayer");
  CAMetalLayerLog(void)::log = (uint64_t)result;
  return result;
}

uint64_t ___ZN2CA6Render22cacftype_from_cfobjectEPKv_block_invoke()
{
  id v0;
  uint64_t result;

  CA::Render::cacftype_from_cfobject(void const*)::cfTypeIds[0] = 0;
  *(_QWORD *)algn_1ECDC5A18 = 0;
  qword_1ECDC5A20 = CFStringGetTypeID();
  qword_1ECDC5A28 = CFNumberGetTypeID();
  qword_1ECDC5A30 = CFBooleanGetTypeID();
  qword_1ECDC5A38 = CFDataGetTypeID();
  qword_1ECDC5A40 = CFArrayGetTypeID();
  qword_1ECDC5A48 = CFDictionaryGetTypeID();
  qword_1ECDC5A50 = CGColorSpaceGetTypeID();
  qword_1ECDC5A58 = CGImageGetTypeID();
  qword_1ECDC5A60 = CGColorGetTypeID();
  qword_1ECDC5A68 = IOSurfaceGetTypeID();
  qword_1ECDC5A78 = CGPathGetTypeID();
  v0 = (id)objc_opt_new();
  CA::Render::cacftype_from_cfobject(void const*)::ns_object_type_id = CFGetTypeID(v0);
  result = objc_opt_class();
  CA::Render::cacftype_from_cfobject(void const*)::ns_value_class = result;
  return result;
}

uint64_t CA::CG::PathIterator::Iterator<CA::ScanConverter::Path>::callback_0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  double v20[3];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v19 = 0u;
  *(_OWORD *)v20 = 0u;
  v8 = *(_DWORD *)a2;
  v9 = 1;
  switch(*(_DWORD *)a2)
  {
    case 0:
    case 1:
      goto LABEL_5;
    case 2:
      v10 = *(_QWORD *)(a2 + 8);
      v9 = 2;
      goto LABEL_4;
    case 3:
      v10 = *(_QWORD *)(a2 + 8);
      *(_OWORD *)v20 = *(_OWORD *)(v10 + 32);
      v9 = 3;
LABEL_4:
      v19 = *(_OWORD *)(v10 + 16);
LABEL_5:
      v11 = 0;
      v18 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v12 = *(float64x2_t *)*(_QWORD *)result;
      v13 = *(float64x2_t *)(*(_QWORD *)result + 16);
      v14 = *(float64x2_t *)(*(_QWORD *)result + 32);
      v15 = 16 * v9;
      do
      {
        *(__int128 *)((char *)&v18 + v11) = (__int128)vmlaq_n_f64(vmlaq_n_f64(v14, v12, *(double *)((char *)&v18 + v11)), v13, *(double *)((char *)&v18 + v11 + 8));
        v11 += 16;
      }
      while (v15 != v11);
      switch(v8)
      {
        case 0:
          v16 = *(_QWORD *)(result + 8);
          v17 = v18;
          result = (uint64_t)CA::ScanConverter::Path::closepath((double *)v16);
          *(_OWORD *)(v16 + 40) = v17;
          *(_OWORD *)(v16 + 64) = v17;
          *(_QWORD *)(v16 + 56) = 0x3FF0000000000000;
          *(_QWORD *)(v16 + 80) = 0x3FF0000000000000;
          break;
        case 1:
          result = (uint64_t)CA::ScanConverter::Path::lineto(*(double **)(result + 8), *(double *)&v18, *((double *)&v18 + 1));
          break;
        case 2:
          result = CA::ScanConverter::Path::quadto(*(CA::ScanConverter::Path **)(result + 8), *(double *)&v18, *((double *)&v18 + 1), *(double *)&v19, *((double *)&v19 + 1), a2, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          result = CA::ScanConverter::Path::cubeto(*(CA::ScanConverter::Path **)(result + 8), *(double *)&v18, *((double *)&v18 + 1), *(double *)&v19, *((double *)&v19 + 1), v20[0], v20[1], a2, a3, a4, a5, a6, a7, a8);
          break;
        case 4:
          goto LABEL_9;
        default:
          return result;
      }
      break;
    case 4:
LABEL_9:
      result = (uint64_t)CA::ScanConverter::Path::closepath(*(double **)(result + 8));
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ___ZN20CACGContextEvaluator20update_with_gradientEP10CGGradient_block_invoke(uint64_t a1, const double *a2)
{
  return CACGContextEvaluator::update_with_color_components(*(CACGContextEvaluator **)(a1 + 32), *(CGColorSpaceRef *)(a1 + 40), a2);
}

CA::Render::Surface *CAIOSurfaceRetainFrontTexture(CA::Render::Surface *result)
{
  CA::Render::Surface *v1;
  malloc_zone_t *malloc_zone;

  if (result)
  {
    v1 = result;
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    result = (CA::Render::Surface *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x158uLL, 0x743898A5uLL);
    if (result)
      return CA::Render::Surface::Surface(result, *((CA::Render::Surface **)v1 + 2), 1081344);
  }
  return result;
}

CA::Render::Surface *CA::Render::Surface::Surface(CA::Render::Surface *this, CA::Render::Surface *a2, int a3)
{
  CA::Render::Texture *v6;
  unsigned int *v7;
  unsigned int v8;
  CA::Render::Surface *v9;
  void *v10;
  char v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v28;

  v6 = CA::Render::Texture::Texture(this, *((_DWORD *)a2 + 4), *((_DWORD *)a2 + 5));
  *((_BYTE *)v6 + 12) = 51;
  ++dword_1ECDC7CF4;
  *(_QWORD *)v6 = off_1E1598F88;
  v7 = (unsigned int *)((char *)a2 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = a2;
  if (!v8)
  {
    v9 = 0;
    do
      v28 = __ldaxr(v7);
    while (__stlxr(v28 - 1, v7));
  }
  *((_QWORD *)this + 12) = v9;
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  v10 = (void *)*((_QWORD *)a2 + 14);
  if (v10)
    v10 = (void *)CFRetain(v10);
  *((_QWORD *)this + 14) = v10;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 32) = IOSurfaceGetPixelFormat((IOSurfaceRef)v10);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *(_OWORD *)((char *)this + 172) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *(_OWORD *)((char *)this + 188) = xmmword_18474E010;
  *((_DWORD *)this + 51) = 1065353216;
  *((_OWORD *)this + 13) = xmmword_18474E020;
  *((_QWORD *)this + 28) = 0;
  *((_WORD *)this + 116) = 0;
  *(_QWORD *)((char *)this + 236) = 0x100000001;
  *(_OWORD *)((char *)this + 244) = 0u;
  *(_OWORD *)((char *)this + 260) = 0u;
  *((_BYTE *)this + 276) = 0;
  *((_DWORD *)this + 70) = 1065353216;
  *(_QWORD *)((char *)this + 292) = 0;
  *(_QWORD *)((char *)this + 284) = 0;
  *((_DWORD *)this + 75) = -1;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_BYTE *)this + 328) = *((_BYTE *)a2 + 328);
  v11 = *((_BYTE *)this + 329) & 0xF0 | *((_BYTE *)a2 + 329) & 0xF;
  *((_BYTE *)this + 329) = v11;
  *((_BYTE *)this + 329) = v11 & 0x8F | *((_BYTE *)a2 + 329) & 0x70;
  *((_DWORD *)this + 83) = -1;
  v12 = *((_WORD *)this + 168) & 0xFFFC | *((_WORD *)a2 + 168) & 3;
  *((_WORD *)this + 168) = *((_WORD *)this + 168) & 0xFFFC | *((_WORD *)a2 + 168) & 3;
  v13 = v12 & 0xFFFFFFFB | (4 * ((*((unsigned __int16 *)a2 + 168) >> 2) & 1));
  *((_WORD *)this + 168) = v13;
  v14 = v13 & 0xFFFFFFF7 | (8 * ((*((unsigned __int16 *)a2 + 168) >> 3) & 1));
  *((_WORD *)this + 168) = v14;
  v15 = v14 & 0xFFFFFFEF | (16 * ((*((unsigned __int16 *)a2 + 168) >> 4) & 1));
  *((_WORD *)this + 168) = v15;
  v16 = v15 & 0xFFFFFFDF | (32 * ((*((unsigned __int16 *)a2 + 168) >> 5) & 1));
  *((_WORD *)this + 168) = v16;
  v17 = v16 & 0xFFFFFF7F | (((*((unsigned __int16 *)a2 + 168) >> 7) & 1) << 7);
  *((_WORD *)this + 168) = v17;
  v18 = v17 & 0xFFFFFEFF | ((HIBYTE(*((unsigned __int16 *)a2 + 168)) & 1) << 8);
  *((_WORD *)this + 168) = v18;
  v19 = v18 & 0xFFFFFDFF | (((*((unsigned __int16 *)a2 + 168) >> 9) & 1) << 9);
  *((_WORD *)this + 168) = v19;
  *((_WORD *)this + 168) = v19 & 0xFBFF | *((_WORD *)a2 + 168) & 0x400;
  v20 = a3 | (*((_DWORD *)a2 + 3) >> 8);
  *((_DWORD *)this + 3) |= v20 << 8;
  *((_DWORD *)this + 81) = 1;
  CA::Render::Texture::set_colorspace(this, *((CGColorSpace **)a2 + 6));
  v21 = *((unsigned __int16 *)a2 + 12);
  v22 = *((unsigned __int16 *)a2 + 13);
  v23 = *((_DWORD *)a2 + 4) - (v21 + *((unsigned __int16 *)a2 + 14));
  v24 = *((_DWORD *)a2 + 5) - (v22 + *((unsigned __int16 *)a2 + 15));
  *((_WORD *)this + 12) = v21;
  v25 = *((_DWORD *)this + 4);
  v26 = *((_DWORD *)this + 5);
  *((_WORD *)this + 13) = v22;
  *((_WORD *)this + 14) = v25 - v21 - v23;
  *((_WORD *)this + 15) = v26 - v22 - v24;
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  if ((v20 & 0x8000) != 0)
    IOSurfaceIncrementUseCount(*((IOSurfaceRef *)this + 14));
  return this;
}

_QWORD *CA::WindowServer::IOMFBDisplay::activate_replay_(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  _DWORD *v6;
  uint64_t *v7;
  int v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;

  v1 = this;
  v2 = this + 3238;
  v3 = this[3299];
  if (v3)
  {
    v4 = (_QWORD *)(v3 + 32);
    this = *(_QWORD **)(v3 + 32);
    if (!this)
    {
      *((_BYTE *)v2 + 2174) = 0;
LABEL_20:
      --*(_DWORD *)(v3 + 8);
      v1[3299] = 0;
      return this;
    }
  }
  else
  {
    v7 = (uint64_t *)this[3250];
    if (!v7)
    {
LABEL_12:
      *((_BYTE *)v2 + 2174) = 0;
      return this;
    }
    while (1)
    {
      this = (_QWORD *)v7[4];
      if (this)
      {
        if (!*((_DWORD *)v7 + 2))
          break;
      }
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_12;
    }
    *((_DWORD *)v7 + 2) = 1;
    v1[3299] = v7;
    v4 = v7 + 4;
  }
  v5 = (uint64_t *)this[2];
  if (v5 && v5[1])
  {
    (*(void (**)(_QWORD *))(*this + 160))(this);
    v6 = (_DWORD *)v5[8];
    if (v6)
      CA::WindowServer::SharedEvent::History::add(v6, *v5, 13, 1, 2, v5[2]);
    CA::WindowServer::SharedEvent::inc_signal_value((uint64_t)v5, 13, 2);
    this = (_QWORD *)IOMobileFramebufferSetIdleBufferEvent();
  }
  else
  {
    (*(void (**)(_QWORD *))(*this + 160))(this);
    this = (_QWORD *)IOMobileFramebufferSetIdleBuffer();
  }
  v8 = (int)this;
  v9 = (unsigned int *)(*v4 + 224);
  v10 = *v9;
  v11 = v10 | ((unint64_t)*(unsigned __int8 *)(*v4 + 228) << 32) | 0x200000000;
  *v9 = v10;
  *((_BYTE *)v9 + 4) = BYTE4(v11);
  if (BYTE9(xmmword_1ECDC6A90))
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 184))(*v4);
    this = (_QWORD *)kdebug_trace();
    if (v8)
      goto LABEL_16;
LABEL_23:
    *((_BYTE *)v2 + 2174) = 1;
    *(_DWORD *)v2 = 0;
    return this;
  }
  if (!(_DWORD)this)
    goto LABEL_23;
LABEL_16:
  if (!*((_BYTE *)v2 + 2174))
  {
    v3 = v1[3299];
    if (v3)
      goto LABEL_20;
  }
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::surface_is_replaceable(CA::WindowServer::IOMFBDisplay *this, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v15;
  _QWORD *v16;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::WindowServer::IOMFBDisplay::_displays_lock);
  v2 = *(_QWORD **)CA::WindowServer::IOMFBDisplay::_displays;
  v3 = *(_QWORD **)(CA::WindowServer::IOMFBDisplay::_displays + 8);
  if (*(_QWORD **)CA::WindowServer::IOMFBDisplay::_displays == v3)
  {
LABEL_18:
    v15 = 1;
    goto LABEL_19;
  }
  v16 = *(_QWORD **)(CA::WindowServer::IOMFBDisplay::_displays + 8);
  while (1)
  {
    v4 = *v2;
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v2 + 216))(*v2))
      break;
LABEL_17:
    if (++v2 == v3)
      goto LABEL_18;
  }
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 25688));
  v5 = *(unsigned int *)(v4 + 25680);
  if (!(_DWORD)v5)
  {
    pthread_mutex_unlock((pthread_mutex_t *)(v4 + 25688));
    goto LABEL_17;
  }
  v6 = 0;
  v7 = *(unsigned int *)(v4 + 25672);
  v8 = 1;
  v9 = *(unsigned int *)(v4 + 25680);
  do
  {
    if (v7 == v5)
      v10 = 0;
    else
      v10 = v7;
    if (*(_DWORD *)(v4 + 48 * v10 + 25752))
    {
      if (*(_DWORD *)(v4 + 48 * v10 + 25776))
      {
        v11 = *(_QWORD *)(v4 + 48 * v10 + 25768);
        if (v11)
        {
          v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 184))(v11);
          v13 = v6 | v8;
          v6 |= v12 == a2;
          v8 = (v12 != a2) & v13;
        }
      }
    }
    v7 = v10 + 1;
    --v9;
  }
  while (v9);
  pthread_mutex_unlock((pthread_mutex_t *)(v4 + 25688));
  v3 = v16;
  if ((v8 & 1) != 0)
    goto LABEL_17;
  v15 = 0;
LABEL_19:
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::WindowServer::IOMFBDisplay::_displays_lock);
  return v15;
}

uint64_t CA::WindowServer::IOSurface::id(CA::WindowServer::IOSurface *this)
{
  return *((unsigned int *)this + 62);
}

uint64_t `anonymous namespace'::init_alignment(_anonymous_namespace_ *this)
{
  mach_port_t v1;
  const __CFDictionary *v2;
  io_service_t MatchingService;
  io_object_t v4;
  const __CFNumber *CFProperty;
  const __CFNumber *v6;
  unsigned int valuePtr;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = *MEMORY[0x1E0CBBAA8];
  v2 = IOServiceMatching("AGXAccelerator");
  MatchingService = IOServiceGetMatchingService(v1, v2);
  if (MatchingService)
  {
    v4 = MatchingService;
    CFProperty = (const __CFNumber *)IORegistryEntryCreateCFProperty(MatchingService, CFSTR("BaseAddressAlignmentRequirement"), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (CFProperty)
    {
      v6 = CFProperty;
      valuePtr = 0;
      CFNumberGetValue(CFProperty, kCFNumberSInt32Type, &valuePtr);
      CFRelease(v6);
    }
    IOObjectRelease(v4);
  }
    __assert_rtn("init_alignment", "CADeviceInfo.cpp", 112, "alignment_values[kCAAlignmentPropertyImageBytes] >= alignment_values[kCAAlignmentPropertyNeededImageBytes]");
    __assert_rtn("init_alignment", "CADeviceInfo.cpp", 114, "alignment_values[kCAAlignmentPropertyRowBytes] >= alignment_values[kCAAlignmentPropertyNeededRowBytes]");
}

uint64_t CA::CAHDRProcessor::new_hdr_processor(CA::CAHDRProcessor *this)
{
  uint64_t v1;

  v1 = operator new();
  *(_DWORD *)(v1 + 16) = 1;
  *(_QWORD *)v1 = &off_1E1590F00;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_WORD *)(v1 + 88) = 0;
  *(_OWORD *)(v1 + 20) = 0u;
  *(_OWORD *)(v1 + 36) = 0u;
  *(_OWORD *)(v1 + 52) = 0u;
  *(_QWORD *)(v1 + 68) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 96) = 0;
  *(_DWORD *)(v1 + 120) = 1;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_QWORD *)(v1 + 240) = 0;
  if (CADeviceHasHardwareAcceleratedHDR::once != -1)
    dispatch_once(&CADeviceHasHardwareAcceleratedHDR::once, &__block_literal_global_93);
  *(_BYTE *)(v1 + 89) = CADeviceHasHardwareAcceleratedHDR::has_capability;
  return v1;
}

uint64_t CAImageQueueGetLastUpdateHostTime(uint64_t a1)
{
  uint64_t v1;
  int *v2;
  int v3;
  int v4;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    return 0;
  v2 = *(int **)(v1 + 24);
  v3 = -15;
  do
  {
    v4 = *v2;
    __dmb(0xBu);
    result = *((_QWORD *)v2 + 14);
    __dmb(0xBu);
  }
  while (v4 != v2[1] && v3++ != 0);
  return result;
}

dispatch_queue_t ___ZN2CA12MachPortUtil11reply_queueEv_block_invoke()
{
  NSObject *v0;
  dispatch_queue_t result;

  v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, 0);
  result = dispatch_queue_create("com.apple.coreanimation.CAMachPortUtilReplyQueue", v0);
  CA::MachPortUtil::reply_queue(void)::queue = (uint64_t)result;
  return result;
}

__n128 CA::Render::MeshTransform::encode(CA::Render::MeshTransform *this, CA::Render::Encoder *a2)
{
  os_unfair_lock_s *v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  int v18;
  int v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  char v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t i;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  _DWORD *v50;
  int v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  __n128 result;
  __int128 v57;

  v4 = (os_unfair_lock_s *)((char *)this + 16);
  os_unfair_lock_lock((os_unfair_lock_t)this + 4);
  CA::Render::MeshTransform::update_locked(this, 3);
  os_unfair_lock_unlock(v4);
  v5 = *((_DWORD *)this + 3) >> 8;
  v6 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v6 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v6 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v6 = v5;
  v7 = *((_QWORD *)a2 + 4);
  v8 = *((_QWORD *)a2 + 5);
  v9 = (uint64_t *)(v7 + 4);
  *((_QWORD *)a2 + 4) = v7 + 4;
  v10 = (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 5;
  if (v7 + 12 > v8)
  {
    CA::Render::Encoder::grow(a2, 8);
    v9 = (uint64_t *)*((_QWORD *)a2 + 4);
  }
  *v9 = v10;
  v11 = *((_QWORD *)a2 + 4);
  v12 = *((_QWORD *)a2 + 5);
  v13 = (uint64_t *)(v11 + 8);
  *((_QWORD *)a2 + 4) = v11 + 8;
  v14 = (uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 4;
  if (v11 + 16 > v12)
  {
    CA::Render::Encoder::grow(a2, 8);
    v13 = (uint64_t *)*((_QWORD *)a2 + 4);
  }
  *v13 = v14;
  v15 = *((_QWORD *)a2 + 4);
  v16 = *((_QWORD *)a2 + 5);
  v17 = (_BYTE *)(v15 + 8);
  *((_QWORD *)a2 + 4) = v15 + 8;
  v18 = *((_DWORD *)this + 24);
  if (v15 + 9 > v16)
  {
    CA::Render::Encoder::grow(a2, 1);
    v17 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = v17 + 1;
  *v17 = v18;
  v19 = *((_DWORD *)this + 25);
  v20 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v20 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v20 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v20 = v19;
  v21 = *((_QWORD *)a2 + 4);
  v22 = *((_QWORD *)a2 + 5);
  v23 = (_DWORD *)(v21 + 4);
  *((_QWORD *)a2 + 4) = v21 + 4;
  v24 = *((_DWORD *)this + 26);
  if (v21 + 8 > v22)
  {
    CA::Render::Encoder::grow(a2, 4);
    v23 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v23 = v24;
  v25 = *((_QWORD *)a2 + 4);
  v26 = *((_QWORD *)a2 + 5);
  v27 = (_BYTE *)(v25 + 4);
  *((_QWORD *)a2 + 4) = v25 + 4;
  v28 = *((_BYTE *)this + 108);
  if (v25 + 5 > v26)
  {
    CA::Render::Encoder::grow(a2, 1);
    v27 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = v27 + 1;
  *v27 = v28;
  v29 = *((_DWORD *)this + 28);
  v30 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v30 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v30 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v30 = v29;
  v31 = *((_QWORD *)a2 + 4) + 4;
  *((_QWORD *)a2 + 4) = v31;
  v32 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4) != v32)
  {
    v33 = 0;
    v34 = 0;
    do
    {
      if ((unint64_t)(v31 + 8) > *((_QWORD *)a2 + 5))
      {
        CA::Render::Encoder::grow(a2, 8);
        v31 = *((_QWORD *)a2 + 4);
      }
      *(_QWORD *)v31 = *(_QWORD *)(v32 + v33);
      v35 = *((_QWORD *)a2 + 4);
      v36 = *((_QWORD *)a2 + 5);
      v37 = v35 + 8;
      *((_QWORD *)a2 + 4) = v35 + 8;
      v38 = *((_QWORD *)this + 3);
      if (v35 + 20 > v36)
      {
        CA::Render::Encoder::grow(a2, 12);
        v37 = *((_QWORD *)a2 + 4);
      }
      v39 = *(_QWORD *)(v38 + v33 + 16);
      *(_DWORD *)(v37 + 8) = *(_DWORD *)(v38 + v33 + 24);
      *(_QWORD *)v37 = v39;
      v31 = *((_QWORD *)a2 + 4) + 12;
      *((_QWORD *)a2 + 4) = v31;
      ++v34;
      v32 = *((_QWORD *)this + 3);
      v33 += 32;
    }
    while (v34 < (*((_QWORD *)this + 4) - v32) >> 5);
  }
  if (*((_QWORD *)this + 7) != *((_QWORD *)this + 6))
  {
    v40 = 0;
    v41 = 0;
    do
    {
      for (i = 0; i != 16; i += 4)
      {
        v43 = *(_DWORD *)(*((_QWORD *)this + 6) + v40 + i);
        if ((unint64_t)(v31 + 4) > *((_QWORD *)a2 + 5))
        {
          CA::Render::Encoder::grow(a2, 4);
          v31 = *((_QWORD *)a2 + 4);
        }
        *(_DWORD *)v31 = v43;
        v31 = *((_QWORD *)a2 + 4) + 4;
        *((_QWORD *)a2 + 4) = v31;
      }
      ++v41;
      v40 += 16;
    }
    while (v41 < (uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 4);
  }
  v44 = *((_QWORD *)this + 9);
  if (*((_QWORD *)this + 10) != v44)
  {
    v45 = 0;
    v46 = 0;
    do
    {
      v47 = *(_DWORD *)(v44 + v45 + 8);
      if ((unint64_t)(v31 + 4) > *((_QWORD *)a2 + 5))
      {
        CA::Render::Encoder::grow(a2, 4);
        v31 = *((_QWORD *)a2 + 4);
      }
      *(_DWORD *)v31 = v47;
      v48 = *((_QWORD *)a2 + 4);
      v49 = *((_QWORD *)a2 + 5);
      v50 = (_DWORD *)(v48 + 4);
      *((_QWORD *)a2 + 4) = v48 + 4;
      v51 = *(_DWORD *)(*((_QWORD *)this + 9) + v45 + 4);
      if (v48 + 8 > v49)
      {
        CA::Render::Encoder::grow(a2, 4);
        v50 = (_DWORD *)*((_QWORD *)a2 + 4);
      }
      *v50 = v51;
      v31 = *((_QWORD *)a2 + 4) + 4;
      *((_QWORD *)a2 + 4) = v31;
      ++v46;
      v44 = *((_QWORD *)this + 9);
      v45 += 16;
    }
    while (v46 < (*((_QWORD *)this + 10) - v44) >> 4);
  }
  if ((unint64_t)(v31 + 32) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 32);
    v31 = *((_QWORD *)a2 + 4);
  }
  v52 = *(_OWORD *)((char *)this + 136);
  *(_OWORD *)v31 = *(_OWORD *)((char *)this + 120);
  *(_OWORD *)(v31 + 16) = v52;
  v53 = *((_QWORD *)a2 + 4);
  v54 = *((_QWORD *)a2 + 5);
  v55 = v53 + 32;
  *((_QWORD *)a2 + 4) = v53 + 32;
  if (v53 + 80 > v54)
  {
    CA::Render::Encoder::grow(a2, 48);
    v55 = *((_QWORD *)a2 + 4);
  }
  result = *(__n128 *)((char *)this + 152);
  v57 = *(_OWORD *)((char *)this + 184);
  *(_OWORD *)(v55 + 16) = *(_OWORD *)((char *)this + 168);
  *(_OWORD *)(v55 + 32) = v57;
  *(__n128 *)v55 = result;
  *((_QWORD *)a2 + 4) += 48;
  return result;
}

uint64_t CA::Render::MeshTransform::validate(os_unfair_lock_s *this)
{
  uint32_t os_unfair_lock_opaque;
  os_unfair_lock_s *v3;
  uint64_t v4;

  os_unfair_lock_opaque = this[3]._os_unfair_lock_opaque;
  if ((os_unfair_lock_opaque & 0x2000) != 0)
    return (os_unfair_lock_opaque >> 12) & 1;
  v3 = this + 4;
  os_unfair_lock_lock(this + 4);
  v4 = CA::Render::MeshTransform::validate_locked((CA::Render::MeshTransform *)this);
  os_unfair_lock_unlock(v3);
  return v4;
}

os_unfair_lock_s *CA::Render::MeshTransform::retain_subdivided_mesh(os_unfair_lock_s *this, int a2)
{
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  malloc_zone_t *malloc_zone;
  CA::Render::MeshTransform *v7;
  os_unfair_lock_s *v8;
  uint32_t os_unfair_lock_opaque;
  os_unfair_lock_s *v10;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x2_t *v30;
  float32x2_t v31;
  float *v32;
  float32x2_t *v33;
  float v34;
  float32x2_t v35;
  float32x2_t *v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  BOOL v54;
  int *v55;
  int *v56;
  int *v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  float *v61;
  float32x2_t *v62;
  float v63;
  float v64;
  float *v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t *v68;
  _DWORD *v69;
  uint64_t v70;
  unint64_t v71;
  float32x2_t *v72;
  float v73;
  float32x2_t *v74;
  float v75;
  float32x2_t *v76;
  float v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float v82;
  float v83;
  float v84;
  uint64_t v85;
  float32x2_t *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  float v91;
  __int32 *v92;
  float32x2_t v93;
  float32x2_t v94;
  __int32 v95;
  float v96;
  float v97;
  __int32 *v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  __int32 v102;
  __int32 *v103;
  float32x2_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  float32x2_t *v111;
  float v112;
  float32x2_t *v113;
  float v114;
  float32x2_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  uint64_t v124;
  uint64_t v125;
  float *v126;
  uint64_t v127;
  uint64_t v128;
  float32x2_t *v129;
  int v130;
  float v131;
  float32x2_t *v132;
  float v133;
  float32x2_t v134;
  BOOL v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  float *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  float *v152;
  char v153;
  unint64_t v154;
  uint64_t v155;
  _DWORD *v156;
  unint64_t v157;
  int v158;
  signed int v159;
  int v160;
  signed int v161;
  void *v162;
  void *v163;
  int v164;
  unsigned int *v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int *p_os_unfair_lock_opaque;
  unsigned int v170;
  unsigned int *v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  os_unfair_lock_s *v176;
  os_unfair_lock_s *lock;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  __int128 v183;
  uint64_t v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;

  v187 = *MEMORY[0x1E0C80C00];
  v4 = this + 4;
  os_unfair_lock_lock(this + 4);
  if (!CA::Render::MeshTransform::validate_locked((CA::Render::MeshTransform *)this))
  {
    v5 = 0;
LABEL_119:
    os_unfair_lock_unlock(v4);
    return v5;
  }
  if (this[26]._os_unfair_lock_opaque == a2)
    goto LABEL_115;
  v5 = *(os_unfair_lock_s **)&this[50]._os_unfair_lock_opaque;
  if (v5 && v5[26]._os_unfair_lock_opaque == a2)
  {
LABEL_116:
    p_os_unfair_lock_opaque = &v5[2]._os_unfair_lock_opaque;
    do
      v170 = __ldaxr(p_os_unfair_lock_opaque);
    while (__stlxr(v170 + 1, p_os_unfair_lock_opaque));
    if (!v170)
    {
      v5 = 0;
      do
        v175 = __ldaxr(p_os_unfair_lock_opaque);
      while (__stlxr(v175 - 1, p_os_unfair_lock_opaque));
    }
    goto LABEL_119;
  }
  CA::Render::MeshTransform::update_locked((CA::Render::MeshTransform *)this, 8);
  if (*(float *)&this[29]._os_unfair_lock_opaque >= (float)a2)
  {
LABEL_115:
    v5 = this;
    goto LABEL_116;
  }
  os_unfair_lock_unlock(v4);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v7 = (CA::Render::MeshTransform *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0xD0uLL, 0x743898A5uLL);
  v5 = (os_unfair_lock_s *)v7;
  if (v7)
  {
    lock = v4;
    v8 = (os_unfair_lock_s *)CA::Render::MeshTransform::MeshTransform(v7, (const CA::Render::MeshTransform *)this);
    v176 = this;
    os_unfair_lock_opaque = this[26]._os_unfair_lock_opaque;
    if (CA::Render::MeshTransform::validate(v8))
    {
      os_unfair_lock_lock(v5 + 4);
      CA::Render::MeshTransform::update_locked((CA::Render::MeshTransform *)v5, 3);
      os_unfair_lock_unlock(v5 + 4);
      v178 = a2 - os_unfair_lock_opaque;
      if ((signed int)v5[26]._os_unfair_lock_opaque < (signed int)(a2 - os_unfair_lock_opaque))
      {
        v10 = v5 + 6;
        __asm
        {
          FMOV            V12.2S, #0.75
          FMOV            V15.2S, #0.25
        }
        while (1)
        {
          v179 = *(_QWORD *)&v5[8]._os_unfair_lock_opaque;
          v182 = *(_QWORD *)&v5[6]._os_unfair_lock_opaque;
          v17 = v179 - v182;
          v19 = *(_QWORD *)&v5[12]._os_unfair_lock_opaque;
          v18 = *(_QWORD *)&v5[14]._os_unfair_lock_opaque;
          std::vector<CA::Render::MeshVertex>::resize((char **)&v5[6], v5[28]._os_unfair_lock_opaque + ((v179 - v182) >> 5) + ((v18 - v19) >> 4));
          v20 = xmmword_18474DFE0;
          v21 = (v179 - v182) >> 5;
          v22 = v21;
          v180 = v18;
          v181 = v19;
          v23 = v18 - v19;
          v24 = v23 >> 4;
          if (v23)
          {
            v25 = 0;
            v26 = *(_QWORD *)&v5[12]._os_unfair_lock_opaque;
            v27 = *(_QWORD *)&v5[6]._os_unfair_lock_opaque;
            if (v24 <= 1)
              v28 = 1;
            else
              v28 = v23 >> 4;
            v22 = v17 >> 5;
            do
            {
              v29 = 0;
              v30 = (float32x2_t *)(v27 + 32 * v22);
              v31 = 0;
              *v30 = 0;
              v32 = (float *)&v30[3];
              *(_OWORD *)v30[2].f32 = xmmword_18474DFE0;
              v33 = v30 + 2;
              v34 = 0.0;
              v35 = 0;
              do
              {
                v36 = (float32x2_t *)(v27 + 32 * *(unsigned int *)(v26 + v29));
                v31 = vadd_f32(v31, *v36);
                *v30 = v31;
                v35 = vadd_f32(v35, v36[2]);
                *v33 = v35;
                v34 = v34 + v36[3].f32[0];
                *v32 = v34;
                v29 += 4;
              }
              while (v29 != 16);
              ++v22;
              *v30 = vmul_f32(v31, _D15);
              *v33 = vmul_f32(v35, _D15);
              *v32 = v34 * 0.25;
              ++v25;
              v26 += 16;
            }
            while (v25 != v28);
          }
          v37 = v179;
          if (v179 == v182)
          {
            v38 = 0;
            v40 = 0.75;
          }
          else
          {
            if (v17 < 0)
              abort();
            v38 = (int *)operator new(44 * v21);
            v39 = 0;
            do
            {
              *(_QWORD *)&v38[v39 + 8] = 0;
              v39 += 11;
            }
            while (11 * v21 != v39);
            v40 = 0.75;
            v20 = xmmword_18474DFE0;
            v37 = v179;
          }
          if (v180 != v181)
          {
            v41 = 0;
            v42 = *(_QWORD *)&v5[12]._os_unfair_lock_opaque;
            v43 = *(_QWORD *)&v5[18]._os_unfair_lock_opaque;
            if (v24 <= 1)
              v44 = 1;
            else
              v44 = v23 >> 4;
            v45 = *(_QWORD *)&v5[18]._os_unfair_lock_opaque;
            v46 = *(_QWORD *)&v5[12]._os_unfair_lock_opaque;
            do
            {
              v47 = 0;
              v48 = v45;
              v49 = 3;
              v50 = v42 + 16 * v41;
              do
              {
                v51 = v47;
                v52 = *(int *)(v48 + 8);
                v53 = *(unsigned int *)(v48 + 8);
                if ((v52 & 0x80000000) != 0)
                {
                  v54 = 1;
                }
                else
                {
                  v54 = *(float *)(v48 + 4) > 0.5;
                  if ((int)v52 < *(_DWORD *)(v43 + 16 * v53 + 8))
                    goto LABEL_40;
                }
                v55 = &v38[11 * *(unsigned int *)(v50 + 4 * v49)];
                ++v55[8];
                v56 = &v38[11 * *(unsigned int *)(v46 + 4 * v51)];
                ++v56[8];
                if (v54)
                {
                  v57 = &v38[11 * *(unsigned int *)(v50 + 4 * v49)];
                  ++v57[9];
                  v58 = &v38[11 * *(unsigned int *)(v46 + 4 * v51)];
                  ++v58[9];
                  *(_DWORD *)v48 = v22;
                  if ((v53 & 0x80000000) == 0)
                    *(_DWORD *)(v43 + 16 * v53) = v22;
                  v59 = *(_QWORD *)&v10->_os_unfair_lock_opaque;
                  v60 = *(_QWORD *)&v10->_os_unfair_lock_opaque + 32 * v22;
                  *(_QWORD *)v60 = 0;
                  *(_OWORD *)(v60 + 16) = v20;
                  v61 = (float *)(v60 + 16);
                  v62 = (float32x2_t *)(v59 + 32 * *(unsigned int *)(v50 + 4 * v49));
                  v63 = 0.5;
                  v64 = v62[3].f32[0] * 0.5;
                  *(float *)(v60 + 24) = v64;
                  v65 = (float *)(v60 + 24);
                  v66 = vmul_f32(*v62, (float32x2_t)0x3F0000003F000000);
                  *(float32x2_t *)v60 = v66;
                  v67 = vmul_f32(v62[2], (float32x2_t)0x3F0000003F000000);
                  *(float32x2_t *)(v60 + 16) = v67;
                  v68 = (float32x2_t *)(v59 + 32 * *(unsigned int *)(v46 + 4 * v51));
                }
                else
                {
                  v69 = (_DWORD *)(v43 + 16 * v52);
                  *v69 = v22;
                  *(_DWORD *)v48 = v22;
                  v70 = ((unint64_t)(int)v69[2] >> 2) + v21;
                  v71 = v52 >> 2;
                  v59 = *(_QWORD *)&v10->_os_unfair_lock_opaque;
                  v60 = *(_QWORD *)&v10->_os_unfair_lock_opaque + 32 * v22;
                  *(_QWORD *)v60 = 0;
                  *(_OWORD *)(v60 + 16) = v20;
                  v61 = (float *)(v60 + 16);
                  v72 = (float32x2_t *)(v59 + 32 * *(unsigned int *)(v50 + 4 * v49));
                  v63 = 0.25;
                  v73 = v72[3].f32[0] * 0.25;
                  *(float *)(v60 + 24) = v73;
                  v65 = (float *)(v60 + 24);
                  v74 = (float32x2_t *)(v59 + 32 * *(unsigned int *)(v46 + 4 * v51));
                  v75 = v73 + (float)(v74[3].f32[0] * 0.25);
                  *(float *)(v60 + 24) = v75;
                  v76 = (float32x2_t *)(v59 + 32 * v70);
                  v77 = v76[3].f32[0];
                  v78 = vmul_f32(*v72, _D15);
                  *(float32x2_t *)v60 = v78;
                  v79 = vmla_f32(v78, _D15, *v74);
                  *(float32x2_t *)v60 = v79;
                  v66 = vmla_f32(v79, _D15, *v76);
                  *(float32x2_t *)v60 = v66;
                  v80 = vmul_f32(v72[2], _D15);
                  *(float32x2_t *)(v60 + 16) = v80;
                  v81 = vmla_f32(v80, _D15, v74[2]);
                  *(float32x2_t *)(v60 + 16) = v81;
                  v67 = vmla_f32(v81, _D15, v76[2]);
                  *(float32x2_t *)(v60 + 16) = v67;
                  v64 = v75 + (float)(v77 * 0.25);
                  *(float *)(v60 + 24) = v64;
                  v68 = (float32x2_t *)(v59 + 32 * (v71 + v21));
                }
                v82 = v68[2].f32[0];
                v83 = v68[2].f32[1];
                v84 = v68[3].f32[0];
                *(float32x2_t *)v60 = vmla_n_f32(v66, *v68, v63);
                *v61 = v67.f32[0] + (float)(v82 * v63);
                *(float *)(v59 + 32 * v22 + 20) = v67.f32[1] + (float)(v83 * v63);
                *v65 = v64 + (float)(v84 * v63);
                ++v22;
LABEL_40:
                v47 = v51 + 1;
                v48 += 16;
                v49 = v51;
              }
              while (v51 != 3);
              ++v41;
              v46 += 16;
              v45 += 64;
            }
            while (v41 != v44);
          }
          if (v37 != v182)
          {
            if (v21 <= 1)
              v85 = 1;
            else
              v85 = (v179 - v182) >> 5;
            v86 = (float32x2_t *)(v38 + 6);
            v87 = 28;
            while (1)
            {
              v88 = v86[1].i32[0];
              if (v88 <= 2)
                break;
              v90 = v86[1].i32[1];
              v89 = *(_QWORD *)&v10->_os_unfair_lock_opaque;
              if (v90 >= 2)
              {
                if (v90 != 2)
                  goto LABEL_53;
                v98 = (__int32 *)(v89 + v87);
                v99 = *(float32x2_t *)(v98 - 7);
                v86[-3] = v99;
                v100 = v99;
                v101 = *(float32x2_t *)(v98 - 3);
                v86->i32[0] = *(v98 - 1);
                v86[-1] = v101;
                v102 = *v98;
                v86[-3] = vmul_f32(v100, _D12);
                v86[-1] = vmul_f32(v86[-1], _D12);
                v86->f32[0] = v86->f32[0] * v40;
                v86->i32[1] = v102;
                v97 = 0.125;
              }
              else
              {
                v91 = (float)v88;
                v92 = (__int32 *)(v89 + v87);
                v93 = *(float32x2_t *)(v92 - 7);
                v86[-3] = v93;
                v94 = *(float32x2_t *)(v92 - 3);
                v86->i32[0] = *(v92 - 1);
                v86[-1] = v94;
                v95 = *v92;
                v96 = (float)(v91 + -2.0) / v91;
                v86[-3].f32[0] = v96 * v93.f32[0];
                v86[-3].f32[1] = v96 * v93.f32[1];
                v86[-1] = vmul_n_f32(v86[-1], v96);
                v86->f32[0] = v86->f32[0] * v96;
                v86->i32[1] = v95;
                v97 = 1.0 / (float)(v91 * v91);
              }
LABEL_54:
              v86[2].f32[0] = v97;
              v87 += 32;
              v86 = (float32x2_t *)((char *)v86 + 44);
              if (!--v85)
                goto LABEL_55;
            }
            v86[1].i32[1] = 3;
            v89 = *(_QWORD *)&v10->_os_unfair_lock_opaque;
LABEL_53:
            v103 = (__int32 *)(v89 + v87);
            v86[-3] = *(float32x2_t *)(v103 - 7);
            v104 = *(float32x2_t *)(v103 - 3);
            v86->i32[0] = *(v103 - 1);
            v86[-1] = v104;
            v86->i32[1] = *v103;
            v97 = 0.0;
            goto LABEL_54;
          }
LABEL_55:
          if (v180 != v181)
          {
            v105 = 0;
            v106 = *(_QWORD *)&v5[12]._os_unfair_lock_opaque;
            if (v24 <= 1)
              v107 = 1;
            else
              v107 = v23 >> 4;
            do
            {
              v108 = 0;
              v109 = 3;
              do
              {
                v110 = *(_DWORD *)(v106 + 16 * v105 + 4 * v109);
                v109 = v108;
                if (v38[11 * v110 + 9] <= 1)
                {
                  v111 = (float32x2_t *)&v38[11 * v110];
                  v112 = v111[5].f32[0];
                  v113 = (float32x2_t *)(*(_QWORD *)&v10->_os_unfair_lock_opaque + 32 * (v105 + v21));
                  v114 = v113[3].f32[0];
                  v115 = v113[2];
                  *v111 = vmla_n_f32(*v111, *v113, v112);
                  v111[2] = vmla_n_f32(v111[2], v115, v112);
                  v111[3].f32[0] = v111[3].f32[0] + (float)(v114 * v112);
                }
                v108 = v109 + 1;
              }
              while (v109 != 3);
              ++v105;
            }
            while (v105 != v107);
            v116 = 0;
            v117 = *(_QWORD *)&v5[18]._os_unfair_lock_opaque;
            do
            {
              v118 = 0;
              v119 = 3;
              v120 = v106 + 16 * v116;
              do
              {
                v121 = v118;
                v122 = v117 + 16 * (4 * v116 + v118);
                v123 = (_DWORD *)(v122 + 8);
                if ((*(_DWORD *)(v122 + 8) & 0x80000000) != 0
                  || *(_DWORD *)(v122 + 8) >= *(_DWORD *)(v117 + 16 * *(unsigned int *)(v122 + 8) + 8))
                {
                  v124 = *(unsigned int *)(v120 + 4 * v119);
                  v125 = *(unsigned int *)(v120 + 4 * v121);
                  v126 = (float *)(v122 + 4);
                  v127 = v124;
                  do
                  {
                    v128 = v127;
                    v127 = v125;
                    v129 = (float32x2_t *)&v38[11 * v128];
                    v130 = v129[4].i32[1];
                    if (v130 < 2 || v130 == 2 && (*v126 <= 0.5 ? (v135 = *v123 <= 0) : (v135 = 1), v135))
                    {
                      v131 = *(float *)&v38[11 * v128 + 10];
                      v132 = (float32x2_t *)(*(_QWORD *)&v10->_os_unfair_lock_opaque + 32 * v127);
                      v133 = v132[3].f32[0];
                      v134 = v132[2];
                      *v129 = vmla_n_f32(*v129, *v132, v131);
                      v129[2] = vmla_n_f32(v129[2], v134, v131);
                      v129[3].f32[0] = v129[3].f32[0] + (float)(v133 * v131);
                    }
                    v125 = v124;
                  }
                  while (v128 == v124);
                }
                v118 = v121 + 1;
                v119 = v121;
              }
              while (v121 != 3);
              ++v116;
            }
            while (v116 != v107);
          }
          if (v37 != v182)
            break;
          if (v38)
            goto LABEL_87;
LABEL_88:
          v185 = 0uLL;
          v186 = 0;
          v183 = 0uLL;
          v184 = 0;
          std::vector<CA::Render::MeshFace>::resize((char **)&v185, v23 >> 2);
          std::vector<CA::Render::MeshFace>::resize((char **)&v183, v23);
          v5[28]._os_unfair_lock_opaque = 12 * ((unint64_t)v23 >> 4);
          if (v180 != v181)
          {
            v141 = 0;
            v142 = 0;
            v143 = *(_QWORD *)&v5[18]._os_unfair_lock_opaque;
            v144 = *(_QWORD *)&v5[12]._os_unfair_lock_opaque;
            if (v24 <= 1)
              v145 = 1;
            else
              v145 = v23 >> 4;
            v146 = v185 + 12;
            v147 = (float *)(v183 + 36);
            v148 = *(_QWORD *)&v5[18]._os_unfair_lock_opaque;
            do
            {
              v149 = 0;
              v150 = 0;
              v151 = 16 * v142;
              v152 = v147;
              v153 = 1;
              do
              {
                v154 = v153 & 3 | (unint64_t)(4 * v142);
                v155 = v143 + 16 * v154;
                v156 = (_DWORD *)(v146 + v150);
                *(v156 - 3) = *(_DWORD *)(v144 + v149);
                *(v156 - 2) = *(_DWORD *)v155;
                *(v156 - 1) = v142 + v21;
                *v156 = *(_DWORD *)(v148 + v150);
                v157 = v141 + v149;
                *(v152 - 8) = *(float *)(v148 + 4 * v149 + 4) + -1.0;
                *(v152 - 4) = *(float *)(v155 + 4) + -1.0;
                v152[4] = 0.0;
                *v152 = 0.0;
                v158 = *(_DWORD *)(v148 + v150 + 8);
                if (v158 < 0)
                {
                  *(v152 - 7) = NAN;
                }
                else
                {
                  v159 = ((4 * v158) & 0xFFFFFFF0) + CA::Render::MeshTransform::subdivide(int)::edge_map[4 * (v158 & 3)];
                  *((_DWORD *)v152 - 7) = v159;
                  if (v157 < v159)
                    --v5[28]._os_unfair_lock_opaque;
                }
                v160 = *(_DWORD *)(v143 + 16 * v154 + 8);
                if (v160 < 0)
                {
                  *(v152 - 3) = NAN;
                }
                else
                {
                  v161 = ((4 * v160) & 0xFFFFFFF0)
                       + CA::Render::MeshTransform::subdivide(int)::edge_map[((4 * v160) & 0xC) + 1];
                  *((_DWORD *)v152 - 3) = v161;
                  if (v157 < v161)
                    --v5[28]._os_unfair_lock_opaque;
                }
                *((_DWORD *)v152 + 1) = v151 + CA::Render::MeshTransform::subdivide(int)::edge_map[v149 + 2];
                *((_DWORD *)v152 + 5) = v151 + CA::Render::MeshTransform::subdivide(int)::edge_map[v149 + 3];
                v150 += 16;
                v149 += 4;
                ++v153;
                v152 += 16;
              }
              while (v149 != 16);
              ++v142;
              v146 += 64;
              v144 += 16;
              v148 += 64;
              v141 += 16;
              v147 += 64;
            }
            while (v142 != v145);
          }
          v162 = *(void **)&v5[12]._os_unfair_lock_opaque;
          *(_OWORD *)&v5[12]._os_unfair_lock_opaque = v185;
          *(_QWORD *)&v5[16]._os_unfair_lock_opaque = v186;
          v163 = *(void **)&v5[18]._os_unfair_lock_opaque;
          *(_OWORD *)&v5[18]._os_unfair_lock_opaque = v183;
          *(_QWORD *)&v5[22]._os_unfair_lock_opaque = v184;
          if (v163)
            operator delete(v163);
          if (v162)
            operator delete(v162);
          v164 = v5[26]._os_unfair_lock_opaque + 1;
          v5[26]._os_unfair_lock_opaque = v164;
          v5[3]._os_unfair_lock_opaque &= ~0x400u;
          if (v164 >= v178)
            goto LABEL_109;
        }
        v136 = 0;
        if (v21 <= 1)
          v137 = 1;
        else
          v137 = (v179 - v182) >> 5;
        v138 = (char *)(v38 + 4);
        do
        {
          v139 = *(_QWORD *)&v10->_os_unfair_lock_opaque + v136;
          *(_QWORD *)v139 = *((_QWORD *)v138 - 2);
          v140 = *(_QWORD *)v138;
          *(_DWORD *)(v139 + 24) = *((_DWORD *)v138 + 2);
          *(_QWORD *)(v139 + 16) = v140;
          *(_DWORD *)(v139 + 28) = *((_DWORD *)v138 + 3);
          v136 += 32;
          v138 += 44;
          --v137;
        }
        while (v137);
LABEL_87:
        operator delete(v38);
        goto LABEL_88;
      }
    }
LABEL_109:
    v4 = lock;
    os_unfair_lock_lock(lock);
    v165 = *(unsigned int **)&v176[50]._os_unfair_lock_opaque;
    *(_QWORD *)&v176[50]._os_unfair_lock_opaque = v5;
    v166 = &v5[2]._os_unfair_lock_opaque;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 + 1, v166));
    if (!v167)
    {
      do
        v168 = __ldaxr(v166);
      while (__stlxr(v168 - 1, v166));
      v5 = 0;
      v4 = lock;
    }
  }
  else
  {
    os_unfair_lock_lock(v4);
    v165 = *(unsigned int **)&this[50]._os_unfair_lock_opaque;
    *(_QWORD *)&this[50]._os_unfair_lock_opaque = 0;
  }
  os_unfair_lock_unlock(v4);
  if (v165)
  {
    v172 = v165 + 2;
    do
    {
      v173 = __ldaxr(v172);
      v174 = v173 - 1;
    }
    while (__stlxr(v174, v172));
    if (!v174)
      (*(void (**)(unsigned int *))(*(_QWORD *)v165 + 16))(v165);
  }
  return v5;
}

uint64_t CA::Render::MeshTransform::validate_locked(CA::Render::MeshTransform *this)
{
  unsigned int v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  NSObject *v17;
  _BOOL4 v18;
  const char *v19;
  uint8_t *v20;
  _BOOL4 v21;
  _BOOL4 v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = *((_DWORD *)this + 3);
  if ((v1 & 0x2000) != 0)
    return (v1 >> 12) & 1;
  *((_DWORD *)this + 3) = v1 & 0xFFFFCFFF | 0x2000;
  v3 = *((_QWORD *)this + 6);
  v4 = *((_QWORD *)this + 7);
  v5 = v4 - v3;
  if ((uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 4 == (v4 - v3) >> 2)
  {
    if (v4 == v3)
    {
LABEL_10:
      CA::Render::MeshTransform::update_locked(this, 2);
      v9 = *((_QWORD *)this + 7) - *((_QWORD *)this + 6);
      if (v9)
      {
        v10 = 0;
        v11 = v9 >> 4;
        v12 = *((_QWORD *)this + 9);
        v13 = (unint64_t)(*((_QWORD *)this + 10) - v12) >> 4;
        if (v11 <= 1)
          v11 = 1;
        v14 = v12 + 8;
LABEL_14:
        v15 = 0;
        while (*(_DWORD *)(v14 + v15) < (int)v13)
        {
          v15 += 16;
          if (v15 == 64)
          {
            ++v10;
            v14 += 64;
            if (v10 != v11)
              goto LABEL_14;
            goto LABEL_18;
          }
        }
        if (x_log_hook_p())
          goto LABEL_29;
        v17 = x_log_category_render;
        v22 = os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT);
        result = 0;
        if (v22)
        {
          v23 = 0;
          v19 = "CoreAnimation: invalid mesh transform - paired edge\n";
          v20 = (uint8_t *)&v23;
          goto LABEL_32;
        }
      }
      else
      {
LABEL_18:
        *((_DWORD *)this + 3) |= 0x1000u;
        return 1;
      }
    }
    else
    {
      v6 = 0;
      v7 = v5 >> 4;
      if ((unint64_t)(v5 >> 4) <= 1)
        v7 = 1;
LABEL_6:
      v8 = 0;
      while ((uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 5 > (unint64_t)*(unsigned int *)(v3 + v8))
      {
        v8 += 4;
        if (v8 == 16)
        {
          ++v6;
          v3 += 16;
          if (v6 != v7)
            goto LABEL_6;
          goto LABEL_10;
        }
      }
      if (x_log_hook_p())
        goto LABEL_29;
      v17 = x_log_category_render;
      v21 = os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (v21)
      {
        v24 = 0;
        v19 = "CoreAnimation: invalid mesh transform - vertex index\n";
        v20 = (uint8_t *)&v24;
        goto LABEL_32;
      }
    }
  }
  else
  {
    if (x_log_hook_p())
    {
LABEL_29:
      x_log_();
    }
    else
    {
      v17 = x_log_category_render;
      v18 = os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (!v18)
        return result;
      v25 = 0;
      v19 = "CoreAnimation: invalid mesh transform - too few edges\n";
      v20 = (uint8_t *)&v25;
LABEL_32:
      _os_log_impl(&dword_184457000, v17, OS_LOG_TYPE_DEFAULT, v19, v20, 2u);
    }
    return 0;
  }
  return result;
}

void CA::OGL::MeshNode::apply(uint64_t a1, uint64_t *a2, double a3)
{
  LODWORD(a3) = *(_DWORD *)(a1 + 240);
  CA::OGL::fill_surface_mesh(**(_QWORD **)(a1 + 8), *(os_unfair_lock_s **)(a1 + 232), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 64, *a2, *(_BYTE *)(a1 + 224) & 0xF, *(unsigned __int8 *)(a1 + 224) >> 4, 0, a3, *(float *)(a1 + 244));
}

void CA::Render::MeshTransform::update_locked(CA::Render::MeshTransform *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CA::Render::MeshTransform *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float32x2_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  float *v17;
  float32x2_t v18;
  float32x2_t v19;
  int8x16_t v20;
  float v21;
  int8x16_t v22;
  float64x2_t v23;
  float64x2_t v24;
  int8x16_t v25;
  float *v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  char v42;
  int v43;
  BOOL v44;
  BOOL v45;
  uint64_t *v46;
  int v47;
  BOOL v48;
  char v49;
  int v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float *v55;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  float v61;
  int v62;
  uint64_t **v63;
  int v64;
  int v65;
  BOOL v66;
  char v67;
  char v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t **v72;
  uint64_t **v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float v89;
  float32x2_t v90;
  float32x2_t v91;
  char v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t **v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 9);
  v3 = *((_QWORD *)this + 10);
  v4 = (v3 - v2) >> 4;
  v5 = *((_QWORD *)this + 6);
  v6 = *((_QWORD *)this + 7);
  if (v4 == (v6 - v5) >> 2)
  {
    v7 = this;
    v8 = *((_DWORD *)this + 3);
    v9 = a2 & ~(v8 >> 8);
    if ((v9 & 1) != 0)
    {
      v10 = *((_QWORD *)this + 3);
      v11 = *((_QWORD *)this + 4) - v10;
      if (v11)
      {
        v12 = v11 >> 5;
        if (v12 <= 1)
          v12 = 1;
        v13 = (float32x2_t)vdup_n_s32(0x7F800000u);
        v14 = (int8x16_t)vdupq_n_s64(0xFFF0000000000000);
        v15 = (int8x16_t)xmmword_18474E5F0;
        v16 = (int8x16_t)vdupq_n_s64(0x7FF0000000000000uLL);
        v17 = (float *)(v10 + 24);
        v18 = (float32x2_t)0x7F0000007FLL;
        do
        {
          v19 = *(float32x2_t *)(v17 - 6);
          v13 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v19, v13), (int8x8_t)v13, (int8x8_t)v19);
          v18 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v18, v19), (int8x8_t)v18, (int8x8_t)v19);
          v20 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)(v17 - 2));
          v21 = *v17;
          v17 += 8;
          v22 = vextq_s8(v20, v20, 8uLL);
          *(_QWORD *)&v23.f64[1] = v22.i64[1];
          *(_QWORD *)&v24.f64[1] = v15.i64[1];
          *(_QWORD *)&v23.f64[0] = v15.i64[0];
          v24.f64[0] = v21;
          v16 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v20, (float64x2_t)v16), v16, v20);
          v25.i64[1] = v22.i64[1];
          *(double *)v25.i64 = v21;
          v15 = vbslq_s8((int8x16_t)vcgtq_f64(v24, v23), v15, v25);
          *(double *)&v22.i64[1] = v21;
          v14 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v14, (float64x2_t)v22), v14, v22);
          --v12;
        }
        while (v12);
        *(int8x16_t *)((char *)this + 152) = v16;
        *(int8x16_t *)((char *)this + 168) = v15;
        *(int8x16_t *)((char *)this + 184) = v14;
        *(float64x2_t *)((char *)this + 120) = vcvtq_f64_f32(v13);
        *(float64x2_t *)((char *)this + 136) = vcvtq_f64_f32(vsub_f32(v18, v13));
      }
      else
      {
        *(_OWORD *)((char *)this + 136) = 0u;
        *(_OWORD *)((char *)this + 120) = 0u;
        *(_OWORD *)((char *)this + 152) = CA::Volume::null;
        *(_OWORD *)((char *)this + 168) = unk_18475ED70;
        *(_OWORD *)((char *)this + 184) = xmmword_18475ED80;
      }
      v8 |= 0x100u;
      *((_DWORD *)this + 3) = v8;
    }
    if ((v9 & 8) != 0)
    {
      *((_DWORD *)this + 29) = 2139095040;
      if (v3 != v2)
      {
        if (v4 <= 1)
          v4 = 1;
        v26 = (float *)(v2 + 4);
        v27 = INFINITY;
        do
        {
          v28 = *v26;
          if (*v26 < v27)
          {
            *((float *)this + 29) = v28;
            v27 = v28;
          }
          v26 += 4;
          --v4;
        }
        while (v4);
      }
    }
    if ((v9 & 2) != 0)
    {
      v97 = 0;
      v98 = 0;
      v96 = &v97;
      *((_DWORD *)this + 28) = 0;
      if (v6 != v5)
      {
        v92 = v9;
        v29 = 0;
        while (1)
        {
          v30 = 0;
          v95 = 4 * v29;
          v31 = 3;
          v93 = v29;
          v32 = v5 + 16 * v29;
          do
          {
            v33 = *(_DWORD *)(v32 + 4 * v31);
            v31 = v30;
            v34 = *(_DWORD *)(v32 + 4 * v30);
            if (v33 >= v34)
              v35 = v34;
            else
              v35 = v33;
            if (v33 <= v34)
              v36 = v34;
            else
              v36 = v33;
            v37 = v97;
            v38 = &v97;
            v39 = v97;
            if (!v97)
            {
              v62 = v95 + v31;
              v63 = &v97;
              v74 = &v97;
              goto LABEL_80;
            }
            do
            {
              v40 = *((_DWORD *)v39 + 7);
              v41 = v40 == (_DWORD)v35;
              if (v40 >= (int)v35)
                v42 = 1;
              else
                v42 = -1;
              if (v41)
              {
                v43 = *((_DWORD *)v39 + 8);
                v44 = v43 == (_DWORD)v36;
                v42 = v43 >= (int)v36 ? 1 : -1;
                if (v44)
                  v42 = 0;
              }
              v45 = (v42 & 0x80) == 0;
              if (v42 < 0)
                v46 = v39 + 1;
              else
                v46 = v39;
              if (v45)
                v38 = (uint64_t **)v39;
              v39 = (uint64_t *)*v46;
            }
            while (*v46);
            if (&v97 != v38)
            {
              v47 = *((_DWORD *)v38 + 7);
              v48 = (_DWORD)v35 == v47;
              if ((int)v35 >= v47)
                v49 = 1;
              else
                v49 = -1;
              if (v48)
              {
                v50 = *((_DWORD *)v38 + 8);
                v51 = (_DWORD)v36 == v50;
                v49 = (int)v36 >= v50 ? 1 : -1;
                if (v51)
                  v49 = 0;
              }
              if ((v49 & 0x80) == 0)
              {
                v52 = *((int *)v38 + 9);
                v53 = *((_QWORD *)v7 + 9);
                v54 = v53 + ((v95 + v31) << 32 >> 28);
                v56 = *(float *)(v54 + 4);
                v55 = (float *)(v54 + 4);
                v57 = v56;
                *((_DWORD *)v55 + 1) = v52;
                v58 = v53 + 16 * v52;
                v60 = *(float *)(v58 + 4);
                v59 = v58 + 4;
                v61 = v60;
                *(_DWORD *)(v59 + 4) = v95 + v31;
                if (v57 <= v60)
                  *v55 = v61;
                else
                  *(float *)v59 = v57;
                v71 = v38[1];
                v72 = v38;
                if (v71)
                {
                  do
                  {
                    v73 = (uint64_t **)v71;
                    v71 = (uint64_t *)*v71;
                  }
                  while (v71);
                }
                else
                {
                  do
                  {
                    v73 = (uint64_t **)v72[2];
                    v41 = *v73 == (uint64_t *)v72;
                    v72 = v73;
                  }
                  while (!v41);
                }
                if (v96 == v38)
                  v96 = v73;
                --v98;
                std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v37, (uint64_t *)v38);
                operator delete(v38);
                goto LABEL_84;
              }
            }
            v62 = v95 + v31;
            do
            {
              while (1)
              {
                v63 = (uint64_t **)v37;
                v64 = *((_DWORD *)v37 + 7);
                if ((_DWORD)v35 != v64)
                  break;
                v65 = *((_DWORD *)v37 + 8);
                if ((int)v36 < v65)
                  goto LABEL_71;
                v66 = v65 == (_DWORD)v36;
                if (v65 >= (int)v36)
                  v67 = 1;
                else
                  v67 = -1;
                if (v66)
                  v67 = 0;
                if ((v67 & 0x80) == 0)
                  goto LABEL_83;
LABEL_77:
                v74 = (uint64_t **)(v37 + 1);
                v37 = (uint64_t *)v37[1];
                if (!v37)
                  goto LABEL_80;
              }
              if ((int)v35 >= v64)
              {
                if (v64 >= (int)v35)
                  v68 = 1;
                else
                  v68 = -1;
                if ((v68 & 0x80) == 0)
                  goto LABEL_83;
                goto LABEL_77;
              }
LABEL_71:
              v37 = (uint64_t *)*v37;
            }
            while (*v63);
            v74 = v63;
LABEL_80:
            v69 = (uint64_t *)v63;
            v63 = (uint64_t **)operator new(0x28uLL);
            *(uint64_t **)((char *)v63 + 28) = (uint64_t *)(v35 | (v36 << 32));
            *((_DWORD *)v63 + 9) = 0;
            *v63 = 0;
            v63[1] = 0;
            v63[2] = v69;
            *v74 = (uint64_t *)v63;
            v70 = (uint64_t *)v63;
            if (*v96)
            {
              v96 = (uint64_t **)*v96;
              v70 = *v74;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v97, v70);
            ++v98;
            v7 = this;
LABEL_83:
            *((_DWORD *)v63 + 9) = v62;
            *(_DWORD *)(*((_QWORD *)v7 + 9) + 16 * v62 + 8) = -1;
            ++*((_DWORD *)v7 + 28);
LABEL_84:
            v30 = v31 + 1;
          }
          while (v31 != 3);
          v29 = v93 + 1;
          v5 = *((_QWORD *)v7 + 6);
          if (v93 + 1 >= (unint64_t)((*((_QWORD *)v7 + 7) - v5) >> 4))
          {
            v8 = *((_DWORD *)v7 + 3);
            v75 = v97;
            LOBYTE(v9) = v92;
            goto LABEL_98;
          }
        }
      }
      v75 = 0;
LABEL_98:
      *((_DWORD *)v7 + 3) = v8 | 0x200;
      std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(v75);
    }
    if ((v9 & 4) != 0)
    {
      v76 = *((_QWORD *)v7 + 6);
      v77 = *((_QWORD *)v7 + 7);
      v78 = v77 - v76;
      if (v77 != v76)
      {
        v79 = 0;
        v80 = v78 >> 4;
        v81 = *((_QWORD *)v7 + 3);
        if (v80 <= 1)
          v80 = 1;
        v82 = *((_QWORD *)v7 + 9) + 12;
        v83 = *((_QWORD *)v7 + 6);
        do
        {
          v84 = 0;
          v85 = (float *)v82;
          v86 = 3;
          do
          {
            v87 = v81 + 32 * *(unsigned int *)(v83 + 4 * v84);
            v88 = v81 + 32 * *(unsigned int *)(v76 + 16 * v79 + 4 * v86);
            v89 = *(float *)(v87 + 16) - *(float *)(v88 + 16);
            v90 = vsub_f32(*(float32x2_t *)(v87 + 20), *(float32x2_t *)(v88 + 20));
            v91 = vmul_f32(v90, v90);
            *v85 = sqrtf((float)(v91.f32[0] + (float)(v89 * v89)) + v91.f32[1]);
            v85 += 4;
            v86 = v84++;
          }
          while (v84 != 4);
          ++v79;
          v82 += 64;
          v83 += 16;
        }
        while (v79 != v80);
      }
      *((_DWORD *)v7 + 3) |= 0x400u;
    }
  }
}

float CA::Render::MeshTransform::vertex_transform(int a1, float64x2_t *a2, uint64_t a3, float32x2_t *a4)
{
  double v5;
  float v6;
  float v7;
  double v12;

  if (a1)
  {
    _D0 = a2[1].f64[0];
    v5 = a2[1].f64[1];
    v6 = _D0;
    v7 = v5;
    *(float *)a3 = v6;
    *(float *)(a3 + 4) = v7;
    *a4 = vcvt_f32_f64(*a2);
    a4[1].i32[0] = 0;
    switch(a1)
    {
      case 2:
        goto LABEL_11;
      case 3:
        _D0 = v5 * 0.5;
        goto LABEL_14;
      case 4:
        if (_D0 >= v5)
          _D0 = v5;
        goto LABEL_11;
      case 5:
        if (_D0 <= v5)
          _D0 = v5;
LABEL_11:
        v12 = 0.5;
        goto LABEL_13;
      case 6:
        _D0 = v5 + _D0;
        v12 = 0.25;
LABEL_13:
        _D0 = _D0 * v12;
LABEL_14:
        *(float *)&_D0 = _D0;
        *(_DWORD *)(a3 + 8) = LODWORD(_D0);
        break;
      default:
        *(_DWORD *)(a3 + 8) = 1056964608;
        break;
    }
  }
  else
  {
    __asm { FMOV            V0.2S, #1.0 }
    *(double *)a3 = _D0;
    *(_DWORD *)(a3 + 8) = 1065353216;
    *a4 = 0;
    a4[1].i32[0] = 0;
  }
  return *(float *)&_D0;
}

void accel_init(void)
{
  char *v0;
  NSObject *v1;
  const char *v2;
  uint8_t buf[4];
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = getenv("CA_ACCEL_BACKING");
  if (v0)
  {
    accel_defined = 1;
    accel_enabled = atoi(v0) != 0;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v1 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
      {
        if (accel_enabled)
          v2 = "";
        else
          v2 = "non-";
        *(_DWORD *)buf = 136315138;
        v4 = v2;
        _os_log_impl(&dword_184457000, v1, OS_LOG_TYPE_DEFAULT, "CoreAnimation: forcing %saccelerated backing\n", buf, 0xCu);
      }
    }
  }
}

void ___ZN2CA2CG8Renderer22flush_released_objectsEv_block_invoke(uint64_t a1)
{
  void *v2;
  unint64_t v3;

  v2 = (void *)MEMORY[0x186DBE2E4]();
  if (*(_DWORD *)(a1 + 40))
  {
    v3 = 0;
    do
      CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1 + 32) + 8 * v3++));
    while (v3 < *(unsigned int *)(a1 + 40));
  }
  free(*(void **)(a1 + 32));
  objc_autoreleasePoolPop(v2);
}

void CA::Render::iosurface_set_colorspace(CA::Render *this, CGColorSpaceRef space, CGColorSpace *a3)
{
  CFPropertyListRef v5;
  const __CFString *v6;
  unsigned __int8 *v7;
  unsigned __int8 v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = CGColorSpaceCopyPropertyList(space);
  v6 = (const __CFString *)*MEMORY[0x1E0CBBF90];
  if (v5)
    IOSurfaceSetValue(this, v6, v5);
  else
    IOSurfaceRemoveValue(this, v6);
  *(_WORD *)v8 = 0;
  CA::Render::iosurface_color_tags_for_colorspace(space, (CGColorSpace *)&v8[1], v8, v7);
  IOSurfaceSetBulkAttachments2();
  if (v5)
    CFRelease(v5);
}

CFStringRef CA::Render::iosurface_color_tags_for_colorspace(CGColorSpaceRef space, CGColorSpace *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  CFStringRef result;
  CFStringRef v8;
  char v9;
  unsigned __int8 v10;

  result = 0;
  if (space)
  {
    if (a2)
    {
      if (a3)
      {
        result = CGColorSpaceGetName(space);
        if (result)
        {
          v8 = result;
          if (CFEqual(result, (CFTypeRef)*MEMORY[0x1E0C9D9D0]))
          {
            v9 = 1;
            v10 = 1;
LABEL_13:
            *(_BYTE *)a2 = v9;
            *a3 = v10;
            return (CFStringRef)1;
          }
          if (CFEqual(v8, (CFTypeRef)*MEMORY[0x1E0C9D9A0]))
          {
            v10 = 1;
LABEL_9:
            v9 = 9;
            goto LABEL_13;
          }
          if (CFEqual(v8, (CFTypeRef)*MEMORY[0x1E0C9D9E0]))
          {
            v10 = 16;
LABEL_12:
            v9 = 1;
            goto LABEL_13;
          }
          if (CFEqual(v8, (CFTypeRef)*MEMORY[0x1E0C9D9C8]))
          {
            v10 = 16;
            goto LABEL_9;
          }
          if (CFEqual(v8, (CFTypeRef)*MEMORY[0x1E0C9DA10]) || CFEqual(v8, (CFTypeRef)*MEMORY[0x1E0C9D960]))
          {
            v10 = 13;
            goto LABEL_12;
          }
          if (CFEqual(v8, (CFTypeRef)*MEMORY[0x1E0C9DA00]) || CFEqual(v8, (CFTypeRef)*MEMORY[0x1E0C9D958]))
          {
            v10 = 8;
            goto LABEL_12;
          }
          if (CFEqual(v8, (CFTypeRef)*MEMORY[0x1E0C9D908]))
          {
            v10 = 13;
LABEL_31:
            v9 = 12;
            goto LABEL_13;
          }
          if (CFEqual(v8, (CFTypeRef)*MEMORY[0x1E0C9D940]))
          {
            v10 = 8;
            goto LABEL_31;
          }
          if (CFEqual(v8, (CFTypeRef)*MEMORY[0x1E0C9D918]))
          {
            v10 = 16;
            goto LABEL_31;
          }
          if (CFEqual(v8, (CFTypeRef)*MEMORY[0x1E0C9D910]))
          {
            v10 = 18;
            goto LABEL_31;
          }
          if (CFEqual(v8, (CFTypeRef)*MEMORY[0x1E0C9D950]))
          {
            v10 = 8;
            goto LABEL_9;
          }
          if (CFEqual(v8, (CFTypeRef)*MEMORY[0x1E0C9D9C0]))
          {
            v10 = 18;
            goto LABEL_9;
          }
          result = (CFStringRef)CFEqual(v8, (CFTypeRef)*MEMORY[0x1E0C9D9B8]);
          if ((_DWORD)result)
          {
            v10 = 13;
            goto LABEL_9;
          }
        }
      }
    }
  }
  return result;
}

uint64_t ___ZN2CA6RenderL16initialize_typesEv_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  CA::Render::string_type = CFStringGetTypeID();
  CA::Render::array_type = CFArrayGetTypeID();
  CFDictionaryGetTypeID();
  CA::Render::number_type = CFNumberGetTypeID();
  CA::Render::BOOL_type = CFBooleanGetTypeID();
  CFDataGetTypeID();
  CA::Render::color_type = CGColorGetTypeID();
  CA::Render::image_type = CGImageGetTypeID();
  CA::Render::path_type = CGPathGetTypeID();
  v0 = CABackingStoreGetTypeID::type;
  if (!CABackingStoreGetTypeID::type)
  {
    v0 = _CFRuntimeRegisterClass();
    CABackingStoreGetTypeID::type = v0;
  }
  CA::Render::backing_type = v0;
  v1 = CAImageQueueGetTypeID::type;
  if (!CAImageQueueGetTypeID::type)
  {
    v1 = _CFRuntimeRegisterClass();
    CAImageQueueGetTypeID::type = v1;
  }
  CA::Render::queue_type = v1;
  v2 = CAImageProviderGetTypeID::type;
  if (!CAImageProviderGetTypeID::type)
  {
    v2 = _CFRuntimeRegisterClass();
    CAImageProviderGetTypeID::type = v2;
  }
  CA::Render::provider_type = v2;
  v3 = CARenderObjectGetTypeID::type;
  if (!CARenderObjectGetTypeID::type)
  {
    v3 = _CFRuntimeRegisterClass();
    CARenderObjectGetTypeID::type = v3;
  }
  CA::Render::render_object_type = v3;
  CA::Render::surface_type = IOSurfaceGetTypeID();
  v4 = CAMachPortGetTypeID::type;
  if (!CAMachPortGetTypeID::type)
  {
    v4 = _CFRuntimeRegisterClass();
    CAMachPortGetTypeID::type = v4;
  }
  CA::Render::machport_type = v4;
  CA::Render::cvpixelbuffer_type = CVPixelBufferGetTypeID();
  result = CAIOSurfaceGetTypeID::type;
  if (!CAIOSurfaceGetTypeID::type)
  {
    result = _CFRuntimeRegisterClass();
    CAIOSurfaceGetTypeID::type = result;
  }
  CA::Render::caiosurface_type = result;
  return result;
}

uint64_t draw_path(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t Info;
  CGColor *Color;
  unsigned int CompositeOperation;
  CGColor *FillColor;
  unsigned int v9;
  CGColor *StrokeColor;
  unsigned int v11;

  Info = CGContextDelegateGetInfo();
  CGGStateGetStyle();
  Color = (CGColor *)CGStyleGetColor();
  CompositeOperation = CGGStateGetCompositeOperation();
  CACGContextEvaluator::update_with_color(Info, Color, CompositeOperation);
  if (a4 <= 4)
  {
    if (a4 == 2
      || (FillColor = (CGColor *)CGGStateGetFillColor(),
          v9 = CGGStateGetCompositeOperation(),
          CACGContextEvaluator::update_with_color(Info, FillColor, v9),
          a4 - 2 <= 2))
    {
      StrokeColor = (CGColor *)CGGStateGetStrokeColor();
      v11 = CGGStateGetCompositeOperation();
      CACGContextEvaluator::update_with_color(Info, StrokeColor, v11);
    }
  }
  *(_BYTE *)(Info + 78) |= CGGStateGetStyle() != 0;
  CGContextDelegateGetInfo();
  return CGContextDelegateDrawPath();
}

__n128 __copy_helper_block_e8_40c41_ZTSN2CA3OGL12MetalContext8Pipeline4SpecE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 55) = 0;
  result = *(__n128 *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void ___ZN2CA3OGL12MetalContext23dispatch_async_pipelineERKNS1_8Pipeline4SpecEPS2_b_block_invoke(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  CA::OGL::MetalContext::FragmentShader::Spec *v4;
  void *v5;
  uint64_t v6;
  CA::OGL::MetalContext *v7;
  os_signpost_id_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(unsigned __int8 **)(a1 + 32);
  v2 = atomic_load(v1 + 2104);
  if ((v2 & 1) == 0)
  {
    v4 = (CA::OGL::MetalContext::FragmentShader::Spec *)(a1 + 40);
    v5 = (void *)MEMORY[0x1E0CB3940];
    v6 = CA::OGL::MetalContext::Pipeline::Spec::encode_segment((CA::OGL::MetalContext::Pipeline::Spec *)(a1 + 40));
    v7 = (CA::OGL::MetalContext *)objc_msgSend(v5, "stringWithFormat:", CFSTR("%@_%@"), v6, CA::OGL::MetalContext::FragmentShader::Spec::name(v4));
    v13 = 0;
    if (*(_BYTE *)(a1 + 80))
      v8 = 0;
    else
      v8 = CA::OGL::MetalContext::begin_new_render_pipeline(v7, 0, 0);
    v9 = CA::OGL::MetalContext::create_pipeline_state((uint64_t)v1, v4, &v13, v1 + 2104);
    if (v9)
    {
      v10 = *(unint64_t **)(a1 + 72);
      if (atomic_load(v10))
        __assert_rtn("set_pipeline_state", "ogl-metal.mm", 1431, "!is_complete ()");
      atomic_store(v9, v10);
      v12 = v13;
    }
    else
    {
      v12 = v13 | 0x40;
      *(_BYTE *)(*(_QWORD *)(a1 + 72) + 17) = 0;
    }
    CA::OGL::MetalContext::end_new_render_pipeline((CA::OGL::MetalContext *)v1, v8, (char *)v12, 0);
  }
}

void CA::OGL::MetalContext::end_new_render_pipeline(CA::OGL::MetalContext *this, os_signpost_id_t a2, char *a3, int a4)
{
  char v5;
  CA::OGL::MetalContext *v7;
  NSObject *v8;
  NSObject *v9;
  _BOOL4 v10;
  int v11;
  char *v12;
  char __str[8];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v5 = (char)a3;
    v7 = (CA::OGL::MetalContext *)(*((_WORD *)this + 408) & 1 | a3);
    *(_QWORD *)__str = 0;
    CA::OGL::MetalContext::format_new_pipeline_flags_string(v7, __str, a3);
    if (CA::OGL::MetalContext::get_pipeline_log(void)::pipeline_once != -1)
      dispatch_once(&CA::OGL::MetalContext::get_pipeline_log(void)::pipeline_once, &__block_literal_global_236);
    v8 = CA::OGL::MetalContext::get_pipeline_log(void)::pipeline_log;
    if ((v5 & 0x20) != 0)
    {
      if (CA::OGL::MetalContext::get_pipeline_stall_log(void)::pipeline_stall_once != -1)
        dispatch_once(&CA::OGL::MetalContext::get_pipeline_stall_log(void)::pipeline_stall_once, &__block_literal_global_238);
      v9 = CA::OGL::MetalContext::get_pipeline_stall_log(void)::pipeline_stall_log;
      if (os_signpost_enabled((os_log_t)CA::OGL::MetalContext::get_pipeline_stall_log(void)::pipeline_stall_log))
      {
        v11 = 136446210;
        v12 = __str;
        _os_signpost_emit_with_name_impl(&dword_184457000, v9, OS_SIGNPOST_INTERVAL_END, a2, "NewRenderPipeline", "flags=%{public, name=flags}s", (uint8_t *)&v11, 0xCu);
      }
    }
    v10 = os_signpost_enabled(v8);
    if (a4)
    {
      if (v10)
      {
        v11 = 136446210;
        v12 = __str;
        _os_signpost_emit_unreliably_with_name_impl();
      }
    }
    else if (v10)
    {
      v11 = 136446210;
      v12 = __str;
      _os_signpost_emit_with_name_impl(&dword_184457000, v8, OS_SIGNPOST_INTERVAL_END, a2, "NewRenderPipeline", "flags=%{public, name=flags, signpost.telemetry:string2}s enableTelemetry=YES ", (uint8_t *)&v11, 0xCu);
    }
  }
}

uint64_t CA::OGL::MetalContext::format_new_pipeline_flags_string(CA::OGL::MetalContext *this, char *__str, char *a3)
{
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;

  v3 = "a";
  v4 = "";
  if ((this & 1) == 0)
    v3 = "";
  v5 = "p";
  if ((this & 2) == 0)
    v5 = "";
  v6 = "l";
  if ((this & 4) == 0)
    v6 = "";
  v7 = "w";
  if ((this & 8) == 0)
    v7 = "";
  v8 = "c";
  if ((this & 0x10) == 0)
    v8 = "";
  v9 = "s";
  if ((this & 0x20) == 0)
    v9 = "";
  if ((this & 0x40) != 0)
    v4 = "e";
  return snprintf(__str, 8uLL, "%s%s%s%s%s%s%s", v3, v5, v6, v7, v8, v9, v4);
}

uint64_t CA::OGL::MetalContext::begin_new_render_pipeline(CA::OGL::MetalContext *this, NSString *a2, uint64_t a3)
{
  int v4;
  unsigned int v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  os_signpost_id_t v11;
  uint32_t v12;
  uint64_t v13;
  int v15;
  CA::OGL::MetalContext *v16;
  __int16 v17;
  unsigned int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v4 = (int)a2;
  v21 = *MEMORY[0x1E0C80C00];
  do
    v6 = __ldaxr((unsigned int *)&CA::OGL::MetalContext::_next_pipeline_id);
  while (__stlxr(v6 + 1, (unsigned int *)&CA::OGL::MetalContext::_next_pipeline_id));
  if (CA::OGL::MetalContext::get_pipeline_log(void)::pipeline_once != -1)
    dispatch_once(&CA::OGL::MetalContext::get_pipeline_log(void)::pipeline_once, &__block_literal_global_236);
  v7 = CA::OGL::MetalContext::get_pipeline_log(void)::pipeline_log;
  if (a3)
  {
    if (v6 && os_signpost_enabled((os_log_t)CA::OGL::MetalContext::get_pipeline_log(void)::pipeline_log))
    {
      v15 = 138543874;
      v16 = this;
      v17 = 1026;
      v18 = v6;
      v19 = 2050;
      v20 = a3;
      _os_signpost_emit_unreliably_with_name_impl();
    }
  }
  else if (v6 && os_signpost_enabled((os_log_t)CA::OGL::MetalContext::get_pipeline_log(void)::pipeline_log))
  {
    v15 = 138543618;
    v16 = this;
    v17 = 1026;
    v18 = v6;
    _os_signpost_emit_with_name_impl(&dword_184457000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v6, "NewRenderPipeline", "pipeline=%{public, name=pipeline, signpost.telemetry:string1}@ order=%{public, name=order, signpost.telemetry:number1}u enableTelemetry=YES ", (uint8_t *)&v15, 0x12u);
  }
  if (v4)
  {
    if (a3)
    {
      if (CA::OGL::MetalContext::get_pipeline_stall_log(void)::pipeline_stall_once == -1)
      {
        if (!v6)
          return v6;
      }
      else
      {
        dispatch_once(&CA::OGL::MetalContext::get_pipeline_stall_log(void)::pipeline_stall_once, &__block_literal_global_238);
        if (!v6)
          return v6;
      }
      v8 = CA::OGL::MetalContext::get_pipeline_stall_log(void)::pipeline_stall_log;
      if (!os_signpost_enabled((os_log_t)CA::OGL::MetalContext::get_pipeline_stall_log(void)::pipeline_stall_log))
        return v6;
      v15 = 138543874;
      v16 = this;
      v17 = 1026;
      v18 = v6;
      v19 = 2050;
      v20 = a3;
      v9 = "pipeline=%{public, name=pipeline}@ order=%{public, name=order}u %{public, signpost.description:begin_time}llu";
      v10 = v8;
      v11 = v6;
      v12 = 28;
LABEL_24:
      _os_signpost_emit_with_name_impl(&dword_184457000, v10, OS_SIGNPOST_INTERVAL_BEGIN, v11, "NewRenderPipeline", v9, (uint8_t *)&v15, v12);
      return v6;
    }
    if (CA::OGL::MetalContext::get_pipeline_stall_log(void)::pipeline_stall_once == -1)
    {
      if (!v6)
        return v6;
    }
    else
    {
      dispatch_once(&CA::OGL::MetalContext::get_pipeline_stall_log(void)::pipeline_stall_once, &__block_literal_global_238);
      if (!v6)
        return v6;
    }
    v13 = CA::OGL::MetalContext::get_pipeline_stall_log(void)::pipeline_stall_log;
    if (!os_signpost_enabled((os_log_t)CA::OGL::MetalContext::get_pipeline_stall_log(void)::pipeline_stall_log))
      return v6;
    v15 = 138543618;
    v16 = this;
    v17 = 1026;
    v18 = v6;
    v9 = "pipeline=%{public, name=pipeline}@ order=%{public, name=order}u";
    v10 = v13;
    v11 = v6;
    v12 = 18;
    goto LABEL_24;
  }
  return v6;
}

uint64_t CA::CG::IOSurfaceContext::create_delegate(uint64_t a1, const __CFDictionary *a2)
{
  CGColorSpace *v4;
  CA::Render *NumberOfComponents;
  unsigned int v6;
  int v7;
  __IOSurface *v8;
  CA::Render *PixelFormat;
  uint64_t v10;
  CA::CG::ContextDelegate *v11;
  malloc_zone_t *malloc_zone;
  CA::CG::IOSurfaceDrawable *v13;
  uint64_t v14;
  const void *Value;
  int v16;
  CA::CG::AccelQueue *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  CAIsAppSuspended();
  if (CA::Render::memory_once[0] != -1)
    dispatch_once_f(CA::Render::memory_once, 0, (dispatch_function_t)CA::Render::init_memory_warnings_);
  v4 = *(CGColorSpace **)(a1 + 40);
  if (v4)
    NumberOfComponents = (CA::Render *)CGColorSpaceGetNumberOfComponents(v4);
  else
    NumberOfComponents = 0;
  v6 = CA::Render::coregraphics_image_format(NumberOfComponents, *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 48))- 1;
  if (v6 > 0x14)
    v7 = -1;
  else
    v7 = dword_18475EE24[v6];
  v8 = *(__IOSurface **)(a1 + 16);
  if (v8)
  {
    PixelFormat = (CA::Render *)IOSurfaceGetPixelFormat(v8);
    if ((_DWORD)PixelFormat == 1999843442 || (_DWORD)PixelFormat == 1647534392)
      v7 = CA::Render::fourcc_to_format(PixelFormat);
  }
  if (v7 == -1)
  {
    CGPostError();
    return 0;
  }
  else
  {
    v10 = operator new();
    *(_OWORD *)v10 = 0u;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_OWORD *)(v10 + 32) = 0u;
    *(_OWORD *)(v10 + 48) = 0u;
    *(_OWORD *)(v10 + 64) = 0u;
    *(_OWORD *)(v10 + 80) = 0u;
    *(_OWORD *)(v10 + 96) = 0u;
    *(_OWORD *)(v10 + 112) = 0u;
    *(_OWORD *)(v10 + 128) = 0u;
    *(_OWORD *)(v10 + 144) = 0u;
    *(_OWORD *)(v10 + 160) = 0u;
    *(_OWORD *)(v10 + 176) = 0u;
    *(_OWORD *)(v10 + 192) = 0u;
    *(_OWORD *)(v10 + 208) = 0u;
    *(_OWORD *)(v10 + 224) = 0u;
    *(_OWORD *)(v10 + 240) = 0u;
    *(_OWORD *)(v10 + 256) = 0u;
    *(_OWORD *)(v10 + 272) = 0u;
    *(_OWORD *)(v10 + 288) = 0u;
    *(_OWORD *)(v10 + 304) = 0u;
    *(_OWORD *)(v10 + 320) = 0u;
    *(_QWORD *)(v10 + 336) = 0;
    v11 = CA::CG::ContextDelegate::ContextDelegate((CA::CG::ContextDelegate *)v10);
    *((_QWORD *)v11 + 42) = 0;
    *(_QWORD *)v11 = &off_1E1593368;
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v13 = (CA::CG::IOSurfaceDrawable *)malloc_type_zone_malloc(malloc_zone, 0x70uLL, 0x8BB15036uLL);
    v14 = (uint64_t)v13;
    if (v13)
      CA::CG::IOSurfaceDrawable::IOSurfaceDrawable(v13, *(IOSurfaceRef *)(a1 + 16), v7, *(_DWORD *)(a1 + 48), *(CGColorSpace **)(a1 + 40), 0, 0, 0, 0);
    if (a2)
    {
      Value = CFDictionaryGetValue(a2, CFSTR("CGIOSurfaceContextPassLimit"));
      if (Value)
      {
        v16 = CA_CFIntValue(Value);
        *(_DWORD *)(v14 + 60) = v16 & ~(v16 >> 31);
      }
    }
    CA::CG::AccelContextDelegate<CA::CG::IOSurfaceDrawable>::set_drawable((CGColorSpace *)v10, v14);
    v17 = *(CA::CG::AccelQueue **)(v14 + 72);
    if (v17
      || (v17 = (CA::CG::AccelQueue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14),
          (*(_QWORD *)(v14 + 72) = v17) != 0))
    {
      CA::CG::AccelQueue::set_label(v17, CFSTR("com.apple.coreanimation.CGIOSurfaceContext"));
    }
    v18 = *(_QWORD *)(v10 + 8);
    v19 = (unsigned int *)(v14 + 8);
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      (**(void (***)(uint64_t))v14)(v14);
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    }
  }
  return v18;
}

uint64_t CAIsAppSuspended()
{
  unsigned __int8 v0;

  if (CAIsAppSuspended::once != -1)
    dispatch_once_f(&CAIsAppSuspended::once, 0, (dispatch_function_t)init_suspended);
  v0 = atomic_load(is_suspended);
  return v0 & 1;
}

CGColorSpace *CA::CG::AccelContextDelegate<CA::CG::IOSurfaceDrawable>::set_drawable(CGColorSpace *this, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  __int128 v12;

  v2 = (unsigned int *)*((_QWORD *)this + 42);
  if (v2 != (unsigned int *)a2)
  {
    v4 = (uint64_t)this;
    if (v2)
    {
      v5 = v2 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        (**(void (***)(unsigned int *))v2)(v2);
        this = (CGColorSpace *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      }
    }
    if (a2)
    {
      v8 = (unsigned int *)(a2 + 8);
      while (1)
      {
        v9 = *v8;
        if (!*v8)
          break;
        while (1)
        {
          v10 = __ldaxr(v8);
          if (v10 != v9)
            break;
          if (!__stlxr(v9 + 1, v8))
          {
            v11 = a2;
            goto LABEL_14;
          }
        }
        __clrex();
      }
      v11 = 0;
LABEL_14:
      *(_QWORD *)(v4 + 336) = v11;
      *(_QWORD *)&v12 = *(_QWORD *)(a2 + 36);
      *((_QWORD *)&v12 + 1) = *(_QWORD *)(a2 + 52);
      *(_OWORD *)(v4 + 16) = v12;
      return CA::CG::ContextDelegate::set_colorspace((CA::CG::ContextDelegate *)v4, *(CGColorSpace **)(a2 + 24));
    }
    else
    {
      *(_QWORD *)(v4 + 336) = 0;
    }
  }
  return this;
}

_QWORD *CA::CG::IOSurfaceDrawable::create_queue(CA::CG::IOSurfaceDrawable *this)
{
  malloc_zone_t *malloc_zone;
  _QWORD *result;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = malloc_type_zone_malloc(malloc_zone, 0xD8uLL, 0x8BB15036uLL);
  if (result)
  {
    result = (_QWORD *)CA::CG::AccelQueue::AccelQueue((uint64_t)result, (uint64_t)this);
    *result = off_1E1592118;
  }
  return result;
}

CGColorSpace *CA::CG::ContextDelegate::set_colorspace(CA::CG::ContextDelegate *this, CGColorSpace *a2)
{
  CGColorSpace *result;
  CGColorSpaceRef v5;
  __int128 v6;
  char *v7;

  result = (CGColorSpace *)*((_QWORD *)this + 4);
  if (result != a2)
  {
    CGColorSpaceRelease(result);
    v5 = CGColorSpaceRetain(a2);
    *(_QWORD *)&v6 = -1;
    *((_QWORD *)&v6 + 1) = -1;
    *(_OWORD *)((char *)this + 40) = v6;
    v7 = (char *)this + 40;
    *((_QWORD *)v7 - 1) = v5;
    *((_OWORD *)v7 + 1) = v6;
    *((_OWORD *)v7 + 2) = v6;
    *((_OWORD *)v7 + 3) = v6;
    *((_OWORD *)v7 + 4) = v6;
    *((_OWORD *)v7 + 5) = v6;
    *((_OWORD *)v7 + 6) = v6;
    *((_OWORD *)v7 + 7) = v6;
    *((_OWORD *)v7 + 8) = v6;
    *((_OWORD *)v7 + 9) = v6;
    *((_OWORD *)v7 + 10) = v6;
    *((_OWORD *)v7 + 11) = v6;
    *((_OWORD *)v7 + 12) = v6;
    *((_OWORD *)v7 + 13) = v6;
    *((_OWORD *)v7 + 14) = v6;
    *((_OWORD *)v7 + 15) = v6;
    result = (CGColorSpace *)*((_QWORD *)v7 + 32);
    if (result)
      return (CGColorSpace *)CA::ColorProgram::Cache::set_colorspace((CGColorSpace **)result, a2);
  }
  return result;
}

uint64_t CA::CG::AccelQueue::AccelQueue(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  char *v5;
  char *v6;
  int v7;
  unsigned int v8;

  *(_DWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E15936F0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  do
    v4 = __ldaxr(CA::CG::Queue::_queue_count);
  while (__stlxr(v4 + 1, CA::CG::Queue::_queue_count));
  if ((CA::CG::Queue::should_disable_async(void)::initialized & 1) == 0)
  {
    v5 = getenv("CA_DISABLE_ASYNC");
    if (v5 && atoi(v5))
      CA::CG::Queue::_disable_async = 1;
    CA::CG::Queue::should_disable_async(void)::initialized = 1;
  }
  if (CA::CG::Queue::Queue(void)::onceToken[0] != -1)
    dispatch_once(CA::CG::Queue::Queue(void)::onceToken, &__block_literal_global_185);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 56), 0);
  pthread_cond_init((pthread_cond_t *)(a1 + 120), 0);
  *(_QWORD *)a1 = off_1E1590F58;
  *(_QWORD *)(a1 + 176) = a2;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  if ((CA::CG::AccelQueue::AccelQueue(CA::CG::AccelDrawable &)::initialized & 1) == 0)
  {
    v6 = getenv("CA_NO_ACCEL");
    if (v6)
      CA::CG::AccelQueue::AccelQueue(CA::CG::AccelDrawable &)::no_accel = atoi(v6) != 0;
    CA::CG::AccelQueue::AccelQueue(CA::CG::AccelDrawable &)::initialized = 1;
  }
  v7 = CA::CG::AccelQueue::AccelQueue(CA::CG::AccelDrawable &)::no_accel;
  *(_BYTE *)(a1 + 209) = CA::CG::AccelQueue::AccelQueue(CA::CG::AccelDrawable &)::no_accel ^ 1;
  if (!v7)
  {
    v8 = *(_DWORD *)(a2 + 16);
    if (v8 > 0x23 || ((1 << v8) & 0xA0026660ALL) == 0)
      *(_BYTE *)(a1 + 209) = 0;
  }
  return a1;
}

void CA::CG::AccelQueue::set_label(CA::CG::AccelQueue *this, CFTypeRef cf)
{
  const void *v4;

  v4 = (const void *)*((_QWORD *)this + 24);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)this + 24) = cf;
  if (cf)
    CFRetain(cf);
}

uint64_t CA::Render::coregraphics_image_format(CA::Render *this, int a2, int a3, int a4)
{
  uint64_t result;

  if (!(_DWORD)this && a2 == 8 && a3 == 8)
  {
    if (a4 == 7)
      return 9;
    return 0xFFFFFFFFLL;
  }
  if ((_DWORD)this == 1 && a2 == 8 && a3 == 8)
  {
    if (!a4)
      return 10;
    return 0xFFFFFFFFLL;
  }
  if ((_DWORD)this == 1 && a2 == 16 && a3 == 8)
  {
    if (a4 == 1)
      return 18;
    return 0xFFFFFFFFLL;
  }
  if ((_DWORD)this == 3 && a2 == 32 && a3 == 8)
  {
    result = 0;
    switch(a4)
    {
      case 1:
LABEL_36:
        result = 11;
        break;
      case 2:
        return result;
      case 3:
      case 4:
        return 0xFFFFFFFFLL;
      case 5:
LABEL_47:
        result = 12;
        break;
      case 6:
LABEL_48:
        result = 2;
        break;
      default:
        switch(a4)
        {
          case 8193:
            result = 15;
            break;
          case 8194:
            result = 1;
            break;
          case 8195:
          case 8196:
            return 0xFFFFFFFFLL;
          case 8197:
            result = 16;
            break;
          case 8198:
            result = 3;
            break;
          default:
            switch(a4)
            {
              case 16385:
                goto LABEL_36;
              case 16386:
                return result;
              case 16389:
                goto LABEL_47;
              case 16390:
                goto LABEL_48;
              default:
                return 0xFFFFFFFFLL;
            }
        }
        break;
    }
  }
  else
  {
    if ((_DWORD)this == 3 && a2 == 64 && a3 == 16)
    {
      if (a4 > 4352)
      {
        if (a4 == 4353)
          return 13;
        if (a4 == 4357)
          return 17;
      }
      else
      {
        if (a4 == 4097)
          return 21;
        if (a4 == 4101)
          return 22;
      }
      return 0xFFFFFFFFLL;
    }
    if ((_DWORD)this == 3 && a2 == 128 && a3 == 32)
    {
      if (a4 == 8449)
        return 14;
      return 0xFFFFFFFFLL;
    }
    if ((_DWORD)this != 3 || a2 != 16 || a3 != 5)
    {
      if ((_DWORD)this == 4 && a2 == 32 && a3 == 8)
        return 29;
      return 0xFFFFFFFFLL;
    }
    result = 4;
    if (a4 != 6 && a4 != 12294)
    {
      if (a4 == 4102)
        return 5;
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

CA::CG::IOSurfaceDrawable *CA::CG::IOSurfaceDrawable::IOSurfaceDrawable(CA::CG::IOSurfaceDrawable *this, IOSurfaceRef buffer, int a3, int a4, CGColorSpace *a5, unsigned int a6, unsigned int a7, int a8, unsigned int a9)
{
  int Width;
  unsigned int Height;
  int v18;
  unsigned int v19;

  Width = IOSurfaceGetWidth(buffer);
  Height = IOSurfaceGetHeight(buffer);
  *(_QWORD *)this = &off_1E1591B88;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = a3;
  *((_QWORD *)this + 3) = CGColorSpaceRetain(a5);
  *((_DWORD *)this + 8) = a4;
  *(_QWORD *)((char *)this + 36) = __PAIR64__(a7, a6);
  *((_DWORD *)this + 11) = Width;
  *((_DWORD *)this + 12) = Height;
  if (a8)
    v18 = a8;
  else
    v18 = Width;
  if (a9)
    v19 = a9;
  else
    v19 = Height;
  *((_DWORD *)this + 13) = v18;
  *((_DWORD *)this + 14) = v19;
  *(_QWORD *)((char *)this + 60) = 0;
  *(_DWORD *)((char *)this + 67) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = &off_1E1592A68;
  *((_QWORD *)this + 12) = CFRetain(buffer);
  *((_QWORD *)this + 13) = 0;
  return this;
}

CA::CG::ContextDelegate *CA::CG::ContextDelegate::ContextDelegate(CA::CG::ContextDelegate *this)
{
  __int128 v2;

  *(_QWORD *)this = off_1E15921F8;
  *((_QWORD *)this + 1) = CGContextDelegateCreate();
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)&v2 = -1;
  *((_QWORD *)&v2 + 1) = -1;
  *(_OWORD *)((char *)this + 56) = v2;
  *(_OWORD *)((char *)this + 72) = v2;
  *(_OWORD *)((char *)this + 88) = v2;
  *(_OWORD *)((char *)this + 104) = v2;
  *(_OWORD *)((char *)this + 120) = v2;
  *(_OWORD *)((char *)this + 136) = v2;
  *(_OWORD *)((char *)this + 152) = v2;
  *(_OWORD *)((char *)this + 168) = v2;
  *(_OWORD *)((char *)this + 184) = v2;
  *(_OWORD *)((char *)this + 200) = v2;
  *(_OWORD *)((char *)this + 216) = v2;
  *(_OWORD *)((char *)this + 232) = v2;
  *(_OWORD *)((char *)this + 248) = v2;
  *(_OWORD *)((char *)this + 40) = v2;
  *(_OWORD *)((char *)this + 264) = v2;
  *(_OWORD *)((char *)this + 280) = v2;
  *((_QWORD *)this + 37) = 0;
  *((_DWORD *)this + 76) = -1;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 39) = 0;
  CGContextDelegateSetCallbacks();
  return this;
}

uint64_t ___ZL25cons_CALayer_kCAValueBooljb_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned __int8 v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 32);
  v4 = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)6, (id *)&v4);
  return v4;
}

uint64_t CA::OGL::emit_quad_surround(uint64_t a1, const double *a2, uint64_t *a3)
{
  uint64_t v5;
  float64x2_t *v6;
  float64x2_t v7;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  float64x2_t v16;
  float64_t v17;
  int8x16_t v18;
  float64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  double v24;
  double v25;
  _BOOL4 v26;
  _BOOL4 v27;
  uint64_t v28;
  _BOOL4 v29;
  char v30;
  double v31;
  double v32;
  double v33;
  double v34;
  float64x2_t *v36;
  float64x2_t *v37;
  float64x2_t *v38;
  float64x2_t *v39;
  uint64_t result;
  int32x2_t *v41;
  int32x2_t *v42;
  uint32x2_t v43;
  int32x2_t v44;
  uint32x2_t v45;
  int32x2_t v46;
  int32x2_t v47;
  int32x2_t v48;
  uint32x2_t v49;
  __int128 v50;
  int64x2_t v51;
  float64x2_t v52;
  const void *v53;
  uint64_t v54;
  float64x2_t v55;
  uint64_t v56;
  unint64_t v57;
  double v58;
  float64x2_t v59;
  float64x2_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v66;
  float64x2_t v67;
  float64x2_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  float64x2_t v78;
  float64x2_t v79;
  uint64_t v80;
  uint64_t v81;
  float64x2_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  double v87;
  float64x2_t v88;
  float64x2_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  double v93;
  float64x2_t v94;
  float64x2_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  float64x2_t v99;
  float64x2_t v100;
  uint64_t v101;
  uint64_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  int32x2_t v107[2];
  __int128 v108;
  _QWORD v109[3];
  __int128 v110;
  __int128 v111;
  _QWORD __dst[61];
  __int128 v113;
  __int128 v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  __int128 v118;
  uint64_t v119;
  float64x2x2_t v120;
  float64x2x4_t v121;

  v5 = 0;
  v119 = *MEMORY[0x1E0C80C00];
  v117 = 0u;
  v118 = 0u;
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v6 = &v115;
  v7 = (float64x2_t)vdupq_n_s64(0x3F50624DD2F1A9FCuLL);
  __asm
  {
    FMOV            V1.2D, #-1.0
    FMOV            V2.2D, #1.0
  }
  v13 = (int8x16_t)vdupq_n_s64(0x7FF0000000000000uLL);
  do
  {
    v121 = vld4q_f64(a2);
    a2 += 8;
    v14 = (int8x16_t)vcgtq_f64(v7, vabsq_f64(vaddq_f64(v121.val[3], _Q1)));
    v15 = (int8x16_t)vcgtzq_f64(v121.val[3]);
    v16 = (float64x2_t)vbslq_s8(vbicq_s8(vmvnq_s8(v14), v15), v13, vbslq_s8(vbicq_s8(v15, v14), (int8x16_t)vdivq_f64((float64x2_t)_Q2, v121.val[3]), _Q2));
    v120.val[0] = vmulq_f64(v121.val[0], v16);
    v120.val[1] = vmulq_f64(v121.val[1], v16);
    *(_QWORD *)&v17 = v6[1].f64;
    *(_QWORD *)&v121.val[0].f64[0] = v6;
    vst2q_f64(v6->f64, v120);
    v6 += 2;
    v121.val[0].f64[1] = v17;
    *(__int128 *)((char *)&v113 + v5) = (__int128)v121.val[0];
    v5 += 16;
  }
  while (v5 != 32);
  v18 = (int8x16_t)vsubq_f64(v117, v116);
  v19 = vmulq_f64((float64x2_t)vextq_s8(v18, v18, 8uLL), vsubq_f64(v116, v115));
  v20 = v113;
  if (vsubq_f64(v19, (float64x2_t)vdupq_laneq_s64((int64x2_t)v19, 1)).f64[0] >= 0.0)
  {
    v21 = *((_QWORD *)&v113 + 1);
  }
  else
  {
    v21 = v114;
    v22 = *((_QWORD *)&v113 + 1);
    *(_QWORD *)&v113 = *((_QWORD *)&v114 + 1);
    *((_QWORD *)&v113 + 1) = v114;
    *(_QWORD *)&v114 = v22;
    *((_QWORD *)&v114 + 1) = v20;
    v20 = v113;
  }
  v23 = 0;
  v24 = *(double *)(v20 + 8);
  v25 = *(double *)(v21 + 8);
  v26 = v24 >= v25;
  v27 = v24 < v25;
  v28 = 2;
  do
  {
    v29 = v26;
    v30 = v23;
    v31 = *(double *)(*((_QWORD *)&v113 + v28) + 8);
    if (v31 >= *(double *)(*((_QWORD *)&v113 + v26) + 8))
    {
      if (v31 < *(double *)(*((_QWORD *)&v113 + v27) + 8))
        v27 = v28;
    }
    else
    {
      v26 = v28;
      v27 = v29;
    }
    v23 = 1;
    v28 = 3;
  }
  while ((v30 & 1) == 0);
  v32 = **((double **)&v113 + v26);
  v33 = **((double **)&v113 + v27);
  v34 = vabdd_f64(v32, v33);
  if (v32 < v33 || v34 < 0.001)
    v27 = v26;
  v36 = (float64x2_t *)*((_QWORD *)&v113 + v27);
  v37 = (float64x2_t *)*((_QWORD *)&v113 + ((v27 + 1) & 3));
  v38 = (float64x2_t *)*((_QWORD *)&v113 + ((v27 + 2) & 3));
  v39 = (float64x2_t *)*((_QWORD *)&v113 + (v27 ? 0 : 3));
  v108 = 0uLL;
  result = CA::Shape::get_bounds(*(_QWORD *)(*(_QWORD *)(a1 + 232) + 8), (int *)&v108);
  v41 = *(int32x2_t **)(a1 + 248);
  if (v41)
    v42 = v41 + 4;
  else
    v42 = (int32x2_t *)(a1 + 184);
  v43 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v108 + 8));
  if ((vpmax_u32(v43, v43).u32[0] & 0x80000000) == 0)
  {
    v44 = v42[1];
    v45 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v44);
    if ((vpmax_u32(v45, v45).u32[0] & 0x80000000) == 0)
    {
      v46 = vmax_s32(*(int32x2_t *)&v108, *v42);
      v47 = vmin_s32(vadd_s32(*(int32x2_t *)&v108, *(int32x2_t *)((char *)&v108 + 8)), vadd_s32(*v42, v44));
      v48 = vsub_s32(v47, v46);
      v49 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v48);
      if ((vpmax_u32(v49, v49).u32[0] & 0x80000000) == 0)
      {
        *(int32x2_t *)&v50 = v46;
        *((int32x2_t *)&v50 + 1) = v48;
        v108 = v50;
        v51.i64[0] = v47.i32[0];
        v51.i64[1] = v46.i32[1];
        v52 = vcvtq_f64_s64(v51);
        v51.i64[0] = v46.i32[0];
        v51.i64[1] = v47.i32[1];
        v105 = v52;
        v106 = vcvtq_f64_s64(v51);
        v53 = *(const void **)(a1 + 16);
        memcpy(__dst, v53, sizeof(__dst));
        __dst[0] = v53;
        *(_QWORD *)(a1 + 16) = __dst;
        LOBYTE(__dst[2]) = 0;
        v111 = 0u;
        v54 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8);
        v109[0] = a1;
        v109[1] = v54;
        v110 = 0u;
        v109[2] = 0;
        WORD4(v110) = 256;
        CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v109);
        v107[0] = 0;
        v107[1] = 0;
        v55.f64[0] = v105.f64[0];
        v55.f64[1] = v106.f64[1];
        v104 = v55;
        v55.f64[0] = v106.f64[0];
        v55.f64[1] = v105.f64[1];
        v103 = v55;
        while (1)
        {
          result = CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v109, v107);
          if (!(_DWORD)result)
            break;
          if (*(_DWORD *)(a1 + 92))
            v56 = 48;
          else
            v56 = 32;
          if ((unint64_t)(*(_QWORD *)(a1 + 128) + 32) > *(_QWORD *)(a1 + 136)
            || (v57 = *(_QWORD *)(a1 + 112)) != 0 && *(_QWORD *)(a1 + 104) + v56 > v57)
          {
            *(_WORD *)(a1 + 816) |= 0x20u;
            CA::OGL::Context::array_flush(a1);
            *(_QWORD *)(a1 + 128) = 0;
            *(_QWORD *)(a1 + 96) = a1 + 818;
            *(_OWORD *)(a1 + 104) = xmmword_18474E060;
          }
          v58 = v36->f64[1];
          v59.f64[0] = v106.f64[0];
          if (v36->f64[0] > v106.f64[0] && v58 > v105.f64[1])
          {
            v61.f64[1] = v105.f64[1];
            v61.f64[0] = v36->f64[0];
            v59.f64[1] = v36->f64[1];
            CA::OGL::Context::array_quad((_QWORD *)a1, v103, v61, *v36, v59);
            v62 = *a3;
            v63 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
            *(_QWORD *)(v63 - 160) = *a3;
            *(_QWORD *)(v63 - 112) = v62;
            *(_QWORD *)(v63 - 64) = v62;
            *(_QWORD *)(v63 - 16) = v62;
            v58 = v36->f64[1];
          }
          v64 = v37->f64[1];
          if (v58 > v105.f64[1] || v64 > v105.f64[1])
          {
            if (v58 >= v105.f64[1])
              v58 = v105.f64[1];
            if (v64 >= v58)
              v66 = v58;
            else
              v66 = v37->f64[1];
            v67.f64[0] = v36->f64[0];
            v67.f64[1] = v66;
            v68.f64[0] = v37->f64[0];
            v68.f64[1] = v66;
            CA::OGL::Context::array_quad((_QWORD *)a1, v67, v68, *v37, *v36);
            v69 = *a3;
            v70 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
            *(_QWORD *)(v70 - 160) = *a3;
            *(_QWORD *)(v70 - 112) = v69;
            *(_QWORD *)(v70 - 64) = v69;
            *(_QWORD *)(v70 - 16) = v69;
          }
          v71 = v37->f64[0];
          v72.f64[0] = v105.f64[0];
          if (v37->f64[0] < v105.f64[0] && v37->f64[1] > v105.f64[1])
          {
            v73.f64[1] = v105.f64[1];
            v73.f64[0] = v37->f64[0];
            v74.f64[0] = v105.f64[0];
            v74.f64[1] = v37->f64[1];
            CA::OGL::Context::array_quad((_QWORD *)a1, v73, v105, v74, *v37);
            v72.f64[0] = v105.f64[0];
            v75 = *a3;
            v76 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
            *(_QWORD *)(v76 - 160) = *a3;
            *(_QWORD *)(v76 - 112) = v75;
            *(_QWORD *)(v76 - 64) = v75;
            *(_QWORD *)(v76 - 16) = v75;
            v71 = v37->f64[0];
          }
          v77 = v38->f64[0];
          if (v71 < v72.f64[0] || v77 < v72.f64[0])
          {
            if (v71 > v72.f64[0])
              v72.f64[0] = v71;
            if (v77 <= v72.f64[0])
              v78.f64[0] = v72.f64[0];
            else
              v78.f64[0] = v38->f64[0];
            v79.f64[0] = v78.f64[0];
            v79.f64[1] = v37->f64[1];
            v78.f64[1] = v38->f64[1];
            CA::OGL::Context::array_quad((_QWORD *)a1, *v37, v79, v78, *v38);
            v72.f64[0] = v105.f64[0];
            v80 = *a3;
            v81 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
            *(_QWORD *)(v81 - 160) = *a3;
            *(_QWORD *)(v81 - 112) = v80;
            *(_QWORD *)(v81 - 64) = v80;
            *(_QWORD *)(v81 - 16) = v80;
            v77 = v38->f64[0];
          }
          v82.f64[1] = v106.f64[1];
          v83 = v38->f64[1];
          if (v77 < v72.f64[0] && v83 < v106.f64[1])
          {
            v72.f64[1] = v38->f64[1];
            v82.f64[0] = v77;
            CA::OGL::Context::array_quad((_QWORD *)a1, *v38, v72, v104, v82);
            v84 = *a3;
            v85 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
            *(_QWORD *)(v85 - 160) = *a3;
            *(_QWORD *)(v85 - 112) = v84;
            *(_QWORD *)(v85 - 64) = v84;
            *(_QWORD *)(v85 - 16) = v84;
            v83 = v38->f64[1];
          }
          v86 = v39->f64[1];
          if (v83 < v106.f64[1] || v86 < v106.f64[1])
          {
            if (v83 <= v106.f64[1])
              v87 = v106.f64[1];
            else
              v87 = v83;
            if (v86 <= v87)
              v86 = v87;
            v88.f64[0] = v38->f64[0];
            v88.f64[1] = v86;
            v89.f64[0] = v39->f64[0];
            v89.f64[1] = v86;
            CA::OGL::Context::array_quad((_QWORD *)a1, *v39, *v38, v88, v89);
            v90 = *a3;
            v91 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
            *(_QWORD *)(v91 - 160) = *a3;
            *(_QWORD *)(v91 - 112) = v90;
            *(_QWORD *)(v91 - 64) = v90;
            *(_QWORD *)(v91 - 16) = v90;
          }
          v92 = v39->f64[0];
          v93 = v106.f64[0];
          if (v39->f64[0] > v106.f64[0] && v39->f64[1] < v106.f64[1])
          {
            v94.f64[0] = v106.f64[0];
            v94.f64[1] = v39->f64[1];
            v95.f64[1] = v106.f64[1];
            v95.f64[0] = v39->f64[0];
            CA::OGL::Context::array_quad((_QWORD *)a1, v94, *v39, v95, v106);
            v93 = v106.f64[0];
            v96 = *a3;
            v97 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
            *(_QWORD *)(v97 - 160) = *a3;
            *(_QWORD *)(v97 - 112) = v96;
            *(_QWORD *)(v97 - 64) = v96;
            *(_QWORD *)(v97 - 16) = v96;
            v92 = v39->f64[0];
          }
          v98 = v36->f64[0];
          if (v36->f64[0] > v93 || v92 > v93)
          {
            if (v98 >= v93)
              v98 = v93;
            if (v92 >= v98)
              v99.f64[0] = v98;
            else
              v99.f64[0] = v92;
            v100.f64[0] = v99.f64[0];
            v100.f64[1] = v36->f64[1];
            v99.f64[1] = v39->f64[1];
            CA::OGL::Context::array_quad((_QWORD *)a1, v100, *v36, *v39, v99);
            v101 = *a3;
            v102 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
            *(_QWORD *)(v102 - 160) = *a3;
            *(_QWORD *)(v102 - 112) = v101;
            *(_QWORD *)(v102 - 64) = v101;
            *(_QWORD *)(v102 - 16) = v101;
          }
        }
        *(_QWORD *)(a1 + 16) = __dst[0];
      }
    }
  }
  return result;
}

void CA::CG::ImageRectDelegate::~ImageRectDelegate(CA::CG::ImageRectDelegate *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E1592AD8;
  CA::CG::ImageRectDelegate::draw_image_rects((uint64_t)this);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 2) + 520))(*((_QWORD *)this + 2), 0, 1);
  v2 = *((_QWORD *)this + 2);
  *(_QWORD *)(v2 + 800) = 0;
  ++*(_DWORD *)(v2 + 240);
  *(_BYTE *)(*(_QWORD *)(v2 + 16) + 16) = *((_BYTE *)this + 89);
  CA::CG::MosaicBitmapDelegate::~MosaicBitmapDelegate(this);
}

{
  CA::CG::ImageRectDelegate::~ImageRectDelegate(this);
  JUMPOUT(0x186DBD990);
}

uint64_t CA::CG::ImageRectDelegate::draw_image_rects(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD v4[3];
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(this + 1392))
  {
    v1 = this;
    v3 = 0u;
    v6 = 0u;
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 16) + 232) + 8);
    v4[0] = *(_QWORD *)(this + 16);
    v4[1] = v2;
    v5 = 0u;
    v4[2] = 0;
    WORD4(v5) = 0;
    CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v4);
    while (1)
    {
      this = CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v4, (int32x2_t *)&v3);
      if (!(_DWORD)this)
        break;
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 16) + 376))(*(_QWORD *)(v1 + 16), *(unsigned int *)(v1 + 1392), v1 + 112);
    }
    *(_DWORD *)(v1 + 1392) = 0;
  }
  return this;
}

void CA::OGL::MetalContext::draw_image_rects(CA::OGL::Context *a1, unsigned int a2, char *a3)
{
  if (*(_BYTE *)(*((_QWORD *)a1 + 2) + 16) != 93)
    __assert_rtn("draw_image_rects", "ogl-metal.mm", 8147, "get_texture_function () == OGL_TEX_IMAGE_RECT_BLIT");
  CA::OGL::MetalContext::draw(a1, 4, 4u, a2, a3, 0x28uLL, 8u, 0, a2, 0, 0, 0);
}

uint64_t CA::OGL::clip_primitives(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int *a5, _QWORD *a6, float64x2_t *a7, _BYTE *a8, unsigned int a9, uint64_t a10, unsigned __int8 a11)
{
  _BYTE *v11;
  int v16;
  int v17;
  int v18;
  float v19;
  float v20;
  float v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  size_t v26;
  _BYTE *v27;
  uint64_t v28;
  void *v29;
  unsigned int v30;
  char v31;
  unsigned int v32;
  float32x2_t *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  float32x2_t *v40;
  uint64_t v41;
  __int128 v42;
  float32x2_t *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  float32x2_t *v50;
  uint64_t v51;
  __int128 v52;
  float32x2_t *v53;
  uint64_t v54;
  __int128 v55;
  float32x2_t *v56;
  uint64_t v57;
  float32x2_t *v58;
  float32x2_t *v59;
  float32x2_t *v60;
  uint64_t v61;
  float32x2_t *v62;
  _BYTE *v63;
  __int128 v64;
  _BYTE *v65;
  __int128 v66;
  _BYTE *v67;
  __int128 v68;
  uint64_t result;
  _BYTE v70[12304];
  void *v71;
  _BYTE *v72;
  float32x2_t *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  float32x2_t *v77;
  float32x2_t *v78;
  float32x2_t *v79;
  uint64_t *v80;
  int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  _OWORD v90[2];
  _OWORD v91[2];
  _OWORD v92[2];
  _OWORD v93[2];
  _QWORD v94[6];

  v11 = a8;
  v86 = a4;
  v84 = a2;
  v16 = a1;
  v17 = a11;
  v88 = a9;
  v94[5] = *MEMORY[0x1E0C80C00];
  if (!a8 && a11)
  {
    MEMORY[0x1E0C80A78](a1);
    bzero(v70, 0x300FuLL);
    v11 = v70;
    v88 = 256;
  }
  memset(v94, 0, 32);
  memset(v93, 0, sizeof(v93));
  memset(v92, 0, sizeof(v92));
  memset(v91, 0, sizeof(v91));
  memset(v90, 0, sizeof(v90));
  if (a5)
  {
    v18 = a5[1];
    v19 = (float)*a5;
    v20 = (float)(a5[2] + *a5);
    v21 = (float)(a5[3] + v18);
    *(_OWORD *)((char *)v90 + 12) = xmmword_18474DFE0;
    if (a6)
      v22 = *((_DWORD *)a6 + 2);
    else
      v22 = 0;
    DWORD2(v90[0]) = v22 + 1;
    *(_QWORD *)&v90[0] = a6;
    *(_QWORD *)((char *)v91 + 12) = 1065353216;
    *((float *)&v91[1] + 2) = -v19;
    DWORD2(v91[0]) = v22 + 2;
    *(_QWORD *)&v91[0] = v90;
    *(_QWORD *)((char *)v92 + 12) = 3212836864;
    *((float *)&v92[1] + 2) = v20;
    DWORD2(v92[0]) = v22 + 3;
    *(_QWORD *)&v92[0] = v91;
    *(_QWORD *)((char *)v93 + 12) = 0x3F80000000000000;
    *((float *)&v93[1] + 2) = -(float)v18;
    DWORD2(v93[0]) = v22 + 4;
    *(_QWORD *)&v93[0] = v92;
    a6 = v94;
    *(_QWORD *)((char *)&v94[1] + 4) = 0xBF80000000000000;
    *(float *)&v94[3] = v21;
    LODWORD(v94[1]) = v22 + 5;
    v94[0] = v93;
  }
  if (v16)
  {
    if (v16 == 2)
    {
      v82 = 0;
      v81 = 1;
      v23 = 3;
      goto LABEL_16;
    }
    if (v16 != 1)
      return 0;
    v82 = 0;
    v23 = 3;
    v24 = 3;
  }
  else
  {
    v23 = 4;
    v82 = 1;
    v24 = 4;
  }
  v81 = v24;
LABEL_16:
  v87 = a10;
  v25 = *((_DWORD *)a6 + 2) + v23;
  v26 = 48 * v25 + 16;
  v85 = v25;
  v83 = v23;
  if (v25 > 0x55)
  {
    v27 = malloc_type_malloc(48 * v25 + 16, 0xFF0C942FuLL);
    v29 = malloc_type_malloc(v26, 0x83AF315CuLL);
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v27 = &v70[-((v26 + 15) & 0xFFFFFFFFF0)];
    bzero(v27, v26);
    MEMORY[0x1E0C80A78](v28);
    v29 = v27;
    v23 = v83;
    bzero(v27, v26);
  }
  if (v23 > v84)
  {
    v30 = 0;
    v31 = 0;
    goto LABEL_45;
  }
  v80 = a6;
  v75 = a11;
  v32 = 0;
  v30 = 0;
  v72 = v27;
  v33 = (float32x2_t *)((unint64_t)(v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = v29;
  v79 = (float32x2_t *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = v33 + 6;
  v77 = v33 + 12;
  v73 = v33 + 18;
  v74 = v23;
  v76 = a3;
  while (1)
  {
    v34 = v32;
    if (a3)
    {
      v35 = v86;
      v36 = v86 + 48 * *(unsigned __int16 *)(a3 + 2 * v32);
      v37 = *(_OWORD *)(v36 + 16);
      *(_OWORD *)v33->f32 = *(_OWORD *)v36;
      *(_OWORD *)(((unint64_t)(v27 + 15) & 0xFFFFFFFFFFFFFFF0) + 0x10) = v37;
      *(_QWORD *)(((unint64_t)(v27 + 15) & 0xFFFFFFFFFFFFFFF0) + 0x20) = *(_QWORD *)(v36 + 32);
      v38 = v35 + 48 * *(unsigned __int16 *)(a3 + 2 * (v34 + 1));
      v39 = *(_OWORD *)(v38 + 16);
      v40 = v78;
      *(_OWORD *)v78->f32 = *(_OWORD *)v38;
      *(_OWORD *)v40[2].f32 = v39;
      *(_QWORD *)(((unint64_t)(v27 + 15) & 0xFFFFFFFFFFFFFFF0) + 0x50) = *(_QWORD *)(v38 + 32);
      v41 = v35 + 48 * *(unsigned __int16 *)(a3 + 2 * (v34 + 2));
      v42 = *(_OWORD *)(v41 + 16);
      v43 = v77;
      *(_OWORD *)v77->f32 = *(_OWORD *)v41;
      *(_OWORD *)v43[2].f32 = v42;
      *(_QWORD *)(((unint64_t)(v27 + 15) & 0xFFFFFFFFFFFFFFF0) + 0x80) = *(_QWORD *)(v41 + 32);
      if (v82)
      {
        v44 = *(unsigned __int16 *)(a3 + 2 * (v34 + 3));
LABEL_27:
        v54 = v86 + 48 * v44;
        v55 = *(_OWORD *)(v54 + 16);
        v56 = v73;
        *(_OWORD *)v73->f32 = *(_OWORD *)v54;
        *(_OWORD *)v56[2].f32 = v55;
        *(_QWORD *)(((unint64_t)(v27 + 15) & 0xFFFFFFFFFFFFFFF0) + 0xB0) = *(_QWORD *)(v54 + 32);
      }
    }
    else
    {
      v45 = v86;
      v46 = v86 + 48 * v32;
      v47 = *(_OWORD *)(v46 + 16);
      *(_OWORD *)v33->f32 = *(_OWORD *)v46;
      *(_OWORD *)(((unint64_t)(v27 + 15) & 0xFFFFFFFFFFFFFFF0) + 0x10) = v47;
      *(_QWORD *)(((unint64_t)(v27 + 15) & 0xFFFFFFFFFFFFFFF0) + 0x20) = *(_QWORD *)(v46 + 32);
      v48 = v45 + 48 * (v34 + 1);
      v49 = *(_OWORD *)(v48 + 16);
      v50 = v78;
      *(_OWORD *)v78->f32 = *(_OWORD *)v48;
      *(_OWORD *)v50[2].f32 = v49;
      *(_QWORD *)(((unint64_t)(v27 + 15) & 0xFFFFFFFFFFFFFFF0) + 0x50) = *(_QWORD *)(v48 + 32);
      v51 = v45 + 48 * (v34 + 2);
      v52 = *(_OWORD *)(v51 + 16);
      v53 = v77;
      *(_OWORD *)v77->f32 = *(_OWORD *)v51;
      *(_OWORD *)v53[2].f32 = v52;
      *(_QWORD *)(((unint64_t)(v27 + 15) & 0xFFFFFFFFFFFFFFF0) + 0x80) = *(_QWORD *)(v51 + 32);
      if (v82)
      {
        v44 = v34 + 3;
        goto LABEL_27;
      }
    }
    if (a7)
    {
      v57 = v74;
      v58 = (float32x2_t *)((unint64_t)(v27 + 15) & 0xFFFFFFFFFFFFFFF0);
      do
      {
        *(float32x4_t *)v58->f32 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a7), a7[1]), COERCE_FLOAT(*(_OWORD *)v58->f32)), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a7[2]), a7[3]), *v58, 1), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a7[4]), a7[5]), *(float32x4_t *)v58->f32, 2), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a7[6]), a7[7]), *(float32x4_t *)v58->f32, 3);
        v58 += 6;
        --v57;
      }
      while (v57);
    }
    v89 = 0;
    v59 = CA::OGL::clip_vertices(v80, v23, v33, v79, v85, (unsigned int *)&v89);
    if (v89)
    {
      if (v75)
      {
        if ((v89 - 1) >= 2)
        {
          v60 = &v59[6 * (v89 - 1)];
          v61 = (v89 - 2);
          v62 = v59 + 6;
          do
          {
            if (v30 + 3 > v88)
            {
              if ((std::function<BOOL ()(CA::OGL::Vertex *,unsigned int)>::operator()(*(_QWORD *)(v87 + 24), (uint64_t)v11, v30) & 1) == 0)goto LABEL_43;
              v30 = 0;
            }
            v63 = &v11[48 * v30];
            v64 = *(_OWORD *)v62[-4].f32;
            *(_OWORD *)v63 = *(_OWORD *)v62[-6].f32;
            *((_OWORD *)v63 + 1) = v64;
            *((float32x2_t *)v63 + 4) = v62[-2];
            LODWORD(v63) = v30 + 2;
            v65 = &v11[48 * v30 + 48];
            v66 = *(_OWORD *)v62[2].f32;
            *(_OWORD *)v65 = *(_OWORD *)v62->f32;
            *((_OWORD *)v65 + 1) = v66;
            *((float32x2_t *)v65 + 4) = v62[4];
            v30 += 3;
            v67 = &v11[48 * v63];
            v68 = *(_OWORD *)v60[2].f32;
            *(_OWORD *)v67 = *(_OWORD *)v60->f32;
            *((_OWORD *)v67 + 1) = v68;
            *((float32x2_t *)v67 + 4) = v60[4];
            v62 += 6;
            --v61;
          }
          while (v61);
        }
        goto LABEL_41;
      }
      if ((std::function<BOOL ()(CA::OGL::Vertex *,unsigned int)>::operator()(*(_QWORD *)(v87 + 24), (uint64_t)v59, v89) & 1) == 0)
        break;
    }
LABEL_41:
    v32 = v34 + v81;
    v23 = v83;
    a3 = v76;
    if (v34 + v81 + v83 > v84)
    {
      v31 = 0;
      goto LABEL_44;
    }
  }
LABEL_43:
  v31 = 1;
LABEL_44:
  v17 = v75;
  v27 = v72;
  v29 = v71;
LABEL_45:
  if (v85 >= 0x56)
  {
    free(v27);
    free(v29);
  }
  if ((v31 & 1) != 0)
    return 0;
  result = 1;
  if (v17)
  {
    if (v30)
      return std::function<BOOL ()(CA::OGL::Vertex *,unsigned int)>::operator()(*(_QWORD *)(v87 + 24), (uint64_t)v11, v30);
  }
  return result;
}

float32x2_t *CA::OGL::clip_vertices(uint64_t *a1, unsigned int a2, float32x2_t *a3, float32x2_t *a4, unsigned int a5, unsigned int *a6)
{
  uint64_t *v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  float64x2_t v18;
  double v19;
  uint64_t v20;
  float32x2_t *v21;
  double v22;
  uint64_t v23;
  float32x4_t *v24;
  double v25;
  float32x2_t *v26;
  double v27;
  uint64_t v28;
  double v29;
  float64x2_t v30;
  float64x2_t v31;
  float32x4_t v32;
  char v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  float32x2_t *v39;
  float16x4_t *v40;
  float v41;
  float16x4_t v42;
  uint64_t v43;
  float32x2_t *v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  double v48;
  float64x2_t v49;
  float64x2_t v50;
  float32x4_t v51;
  char v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  float32x2_t *v58;
  float v59;
  float16x4_t v60;
  double v61;
  float32x2_t *v62;
  __int128 v63;
  float32x2_t *result;
  char *v65;
  _QWORD v66[2];

  v11 = a1;
  v66[1] = *MEMORY[0x1E0C80C00];
  v12 = 8 * a5;
  MEMORY[0x1E0C80A78](a1);
  v13 = (char *)v66 - ((v12 + 15) & 0xFFFFFFFF0);
  bzero(v13, v12);
  MEMORY[0x1E0C80A78](v14);
  v15 = v13;
  bzero(v13, v12);
  if (!v11)
    goto LABEL_32;
  do
  {
    v16 = 0;
    v17 = 0;
    v18 = vcvtq_f64_f32(*(float32x2_t *)((char *)v11 + 12));
    v19 = *((float *)v11 + 6);
    v20 = a2;
    v21 = a3;
    do
    {
      v22 = vaddvq_f64(vmulq_f64(v18, vcvtq_f64_f32(*v21))) + v19 * v21[1].f32[1];
      *(double *)&v13[8 * v16] = v22;
      if (v22 < 0.0)
        ++v17;
      ++v16;
      v21 += 6;
    }
    while (a2 != v16);
    if (v17)
    {
      if (v17 != a2)
      {
        v23 = 0;
        v24 = (float32x4_t *)&a3[6 * a2 - 6];
        v25 = *(double *)&v13[8 * a2 - 8];
        a2 = 0;
        while (1)
        {
          v26 = &a3[6 * v23];
          v27 = *(double *)&v13[8 * v23];
          if (v25 >= 0.0)
            break;
          if (v27 >= 0.0)
          {
            if (a2 >= a5 - 1)
              goto LABEL_30;
            v28 = 0;
            v29 = v25 / (v25 - v27);
            v30 = vcvt_hight_f64_f32(*v24);
            v31 = vcvtq_f64_f32(*(float32x2_t *)v24->f32);
            v32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_n_f64(v31, vsubq_f64(vcvtq_f64_f32(*v26), v31), v29)), vmlaq_n_f64(v30, vsubq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v26->f32), v30), v29));
            *(float32x4_t *)a4[6 * a2].f32 = v32;
            v33 = 1;
            do
            {
              v34 = (uint64_t)&a3[6 * v23 + 2];
              v35 = v24[1].f32[v28];
              *(float *)&v35 = v35 + (*(float *)(v34 + 4 * v28) - v35) * v29;
              v36 = (uint64_t)&a4[6 * a2 + 2];
              *(_DWORD *)(v36 + 4 * v28) = LODWORD(v35);
              v37 = (4 * v28) | 4;
              v38 = v33;
              *(float *)&v35 = *(float *)((char *)v24[1].f32 + v37)
                             + (*(float *)(v34 + v37) - *(float *)((char *)v24[1].f32 + v37)) * v29;
              *(_DWORD *)(v36 + v37) = LODWORD(v35);
              v28 = 2;
              v33 = 0;
            }
            while ((v38 & 1) != 0);
            v39 = &a4[6 * a2];
            v40 = (float16x4_t *)&a3[6 * v23];
            v41 = v29;
            v42 = *(float16x4_t *)v24[2].f32;
            v39[4] = (float32x2_t)v42;
            v39[4] = (float32x2_t)vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(vcvtq_f32_f16(v42), 1.0 - v41), vcvtq_f32_f16(v40[4]), v41));
            *(double *)&v15[8 * a2] = vaddvq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)v11 + 12)), vcvtq_f64_f32(*(float32x2_t *)v32.f32)))+ *((float *)v11 + 6) * v39[1].f32[1];
            v43 = a2 + 1;
            v44 = &a4[6 * v43];
            v45 = *(_OWORD *)v26[2].f32;
            *(_OWORD *)v44->f32 = *(_OWORD *)v26->f32;
            *(_OWORD *)v44[2].f32 = v45;
            v44[4] = (float32x2_t)v40[4];
            v46 = 2;
            goto LABEL_22;
          }
LABEL_24:
          ++v23;
          v25 = v27;
          v24 = (float32x4_t *)v26;
          if (v23 == v20)
          {
            result = a4;
            a4 = a3;
            v65 = v15;
            v15 = v13;
            goto LABEL_27;
          }
        }
        if (v27 >= 0.0)
        {
          if (a2 == a5)
          {
LABEL_30:
            a2 = 0;
            result = a4;
            break;
          }
          v43 = a2;
          v62 = &a4[6 * a2];
          v63 = *(_OWORD *)v26[2].f32;
          *(_OWORD *)v62->f32 = *(_OWORD *)v26->f32;
          *(_OWORD *)v62[2].f32 = v63;
          v62[4] = a3[6 * v23 + 4];
          v46 = 1;
LABEL_22:
          v61 = v27;
        }
        else
        {
          if (a2 == a5)
            goto LABEL_30;
          v47 = 0;
          v48 = v25 / (v25 - v27);
          v43 = a2;
          v49 = vcvt_hight_f64_f32(*v24);
          v50 = vcvtq_f64_f32(*(float32x2_t *)v24->f32);
          v51 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_n_f64(v50, vsubq_f64(vcvtq_f64_f32(*v26), v50), v48)), vmlaq_n_f64(v49, vsubq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v26->f32), v49), v48));
          *(float32x4_t *)a4[6 * a2].f32 = v51;
          v52 = 1;
          do
          {
            v53 = (uint64_t)&a3[6 * v23 + 2];
            v54 = v24[1].f32[v47];
            *(float *)&v54 = v54 + (*(float *)(v53 + 4 * v47) - v54) * v48;
            v55 = (uint64_t)&a4[6 * a2 + 2];
            *(_DWORD *)(v55 + 4 * v47) = LODWORD(v54);
            v56 = (4 * v47) | 4;
            v57 = v52;
            *(float *)&v54 = *(float *)((char *)v24[1].f32 + v56)
                           + (*(float *)(v53 + v56) - *(float *)((char *)v24[1].f32 + v56)) * v48;
            *(_DWORD *)(v55 + v56) = LODWORD(v54);
            v47 = 2;
            v52 = 0;
          }
          while ((v57 & 1) != 0);
          v58 = &a4[6 * a2];
          v59 = v48;
          v60 = *(float16x4_t *)v24[2].f32;
          v58[4] = (float32x2_t)v60;
          v58[4] = (float32x2_t)vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(vcvtq_f32_f16(v60), 1.0 - v59), vcvtq_f32_f16((float16x4_t)a3[6 * v23 + 4]), v59));
          v61 = vaddvq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)v11 + 12)), vcvtq_f64_f32(*(float32x2_t *)v51.f32)))
              + *((float *)v11 + 6) * v58[1].f32[1];
          v46 = 1;
        }
        *(double *)&v15[8 * v43] = v61;
        a2 += v46;
        goto LABEL_24;
      }
      a2 = 0;
LABEL_32:
      result = a3;
      break;
    }
    result = a3;
    v65 = v13;
LABEL_27:
    if (a2 < 3)
      break;
    v11 = (uint64_t *)*v11;
    v13 = v65;
    a3 = result;
  }
  while (v11);
  *a6 = a2;
  return result;
}

uint64_t std::function<BOOL ()(CA::OGL::Vertex *,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v5[0] = a2;
  v4 = a3;
  if (!a1)
    std::__throw_bad_function_call[abi:nn180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *, int *))(*(_QWORD *)a1 + 48))(a1, v5, &v4);
}

uint64_t CA::CG::ContextDelegate::resolve_style(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t result;
  unsigned int v8;
  _QWORD v9[5];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9[0] = off_1E159A4E8;
  v9[1] = a2;
  v9[2] = a1;
  v9[3] = a3;
  v9[4] = a4;
  v10 = 0;
  result = (*(uint64_t (**)(_DWORD *, _QWORD *))(*(_QWORD *)a5 + 32))(a5, v9);
  if (v10)
  {
    *(_QWORD *)(a2 + 104) = v10;
    v8 = a5[18];
    if (v8 <= 2)
      *(_DWORD *)(a2 + 100) |= 24 - 8 * v8;
  }
  return result;
}

uint64_t CA::CG::ContextDelegate::resolve_style(CA::CG::Queue *,CA::CG::DrawOp *,CGRenderingState *,CGGState *,CA::CG::Style const*)::visitor::visit(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a2, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a2, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a2, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a2, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

_QWORD *CA::CG::FillRoundedRect::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  malloc_zone_t *malloc_zone;
  _QWORD *v11;
  int v12;
  CGColor *Color;
  unsigned int *v14;
  unsigned int v15;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v11 = malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
  if (v11)
  {
    v12 = *(_DWORD *)(a1 + 100) & 4;
    Color = (CGColor *)CGStyleGetColor();
    CA::CG::DrawOp::DrawOp((uint64_t)v11, a2, a1, a4, a5, Color, v12 | 0x8C0);
    *v11 = off_1E1591088;
    v11[18] = a1;
    v14 = (unsigned int *)(a3 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    v11[19] = a3;
    *v11 = off_1E15930A8;
  }
  return v11;
}

uint64_t CA::CG::ShadowStyle::visit(uint64_t a1, uint64_t (***a2)(_QWORD, uint64_t))
{
  return (**a2)(a2, a1);
}

uint64_t CA::CG::DrawOp::DrawOp(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5, CGColor *a6, int a7)
{
  __int128 v14;
  __int128 v15;
  malloc_zone_t *malloc_zone;
  uint64_t *v17;
  unsigned int *v18;
  unsigned int v19;
  int ShouldAntialias;
  double v21;
  float v22;
  double v24[2];

  v24[1] = *(double *)MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E1593790;
  v14 = *(_OWORD *)(a3 + 8);
  v15 = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a1 + 24) = v15;
  *(_OWORD *)(a1 + 8) = v14;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a3 + 56);
  if (*(_QWORD *)(a3 + 64))
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v17 = (uint64_t *)malloc_type_zone_malloc(malloc_zone, 0x18uLL, 0x8BB15036uLL);
    if (v17)
      v17 = CA::CG::BasicState::SoftMask::SoftMask(v17);
  }
  else
  {
    v17 = 0;
  }
  *(_QWORD *)(a1 + 64) = v17;
  v18 = *(unsigned int **)(a3 + 72);
  if (v18)
  {
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
  }
  *(_QWORD *)(a1 + 72) = v18;
  v24[0] = 1.10008428e-19;
  CA::CG::DeviceColor::DeviceColor((double *)(a1 + 80), a6, a4, a5, a2, v24);
  ShouldAntialias = CGGStateGetShouldAntialias();
  if (ShouldAntialias)
    ShouldAntialias = CGRenderingStateGetAllowsAntialiasing();
  *(_DWORD *)(a1 + 100) = ShouldAntialias | (2 * (a6 != 0)) | a7 | *(_DWORD *)(a3 + 100) & 0x1900;
  *(_QWORD *)(a1 + 104) = 0;
  if ((a7 & 0x40) == 0)
  {
    CGGStateGetAlpha();
    v22 = v21;
    if (v22 != 1.0)
      *(float16x4_t *)(a1 + 88) = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(*(float16x4_t *)(a1 + 88)), v22));
  }
  return a1;
}

CGImageRef CA::CG::IOSurfaceContext::create_image()
{
  CA::CG::IOSurfaceDrawable *v0;
  unsigned int v1;

  v0 = *(CA::CG::IOSurfaceDrawable **)(CGContextDelegateGetInfo() + 336);
  v1 = *((_DWORD *)v0 + 4);
  if (v1 <= 0x23 && ((0x1FFFFFF2FuLL >> v1) & 1) == 0)
    return CA::CG::IOSurfaceDrawable::copy_cgimage_iosurface(v0);
  else
    return CA::CG::IOSurfaceDrawable::copy_cgimage(v0);
}

void CA::Display::DisplayLinkItem::unschedule(CA::Display::DisplayLinkItem *this, __CFRunLoop *a2, const __CFString *a3)
{
  pthread_mutex_t *v6;
  CFTypeRef *v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;

  if (*(__CFRunLoop **)(*((_QWORD *)this + 33) + 16) == a2)
  {
    v6 = (pthread_mutex_t *)((char *)this + 136);
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 136));
    v7 = (CFTypeRef *)*((_QWORD *)this + 34);
    if (v7)
    {
      v8 = (uint64_t *)((char *)this + 272);
      while (1)
      {
        v9 = CFEqual(*v7, a3);
        v10 = *v8;
        if (v9)
          break;
        v7 = *(CFTypeRef **)(v10 + 8);
        v8 = (uint64_t *)(v10 + 8);
        if (!v7)
          goto LABEL_6;
      }
      CFRelease(*(CFTypeRef *)v10);
      *v8 = x_list_remove_head((_QWORD *)*v8);
      pthread_mutex_unlock(v6);
      CA::Display::DisplayLinkItem::update_link(this, a2);
    }
    else
    {
LABEL_6:
      pthread_mutex_unlock(v6);
    }
  }
}

uint64_t x_list_remove_head(_QWORD *a1)
{
  uint64_t v2;
  malloc_zone_t *malloc_zone;

  if (!a1)
    return 0;
  v2 = a1[1];
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, a1);
  return v2;
}

void CA::add_timer(CA *this, void *a2)
{
  __CFRunLoop *Current;

  Current = CFRunLoopGetCurrent();
  CFRunLoopAddTimer(Current, this, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
}

uint64_t ___ZL23CALayerDecodeAnimationsP7CALayerP7NSCoder_block_invoke()
{
  id v0;
  uint64_t v1;
  uint64_t result;

  v0 = objc_alloc(MEMORY[0x1E0C99E60]);
  v1 = objc_opt_class();
  result = objc_msgSend(v0, "initWithObjects:", v1, objc_opt_class(), 0);
  CALayerDecodeAnimations(CALayer *,NSCoder *)::keys_classes = result;
  return result;
}

dispatch_queue_t ___ZN2CA6Render5FenceL24_observer_callback_queueEv_block_invoke()
{
  NSObject *v0;
  dispatch_queue_t result;

  v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, 0);
  result = dispatch_queue_create("CA::Fence::Observer", v0);
  CA::Render::Fence::_observer_callback_queue(void)::q = (uint64_t)result;
  return result;
}

uint64_t _XCreateSlot(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  CA::Render::Context *v5;
  CA::Render::Context *v6;
  pthread_mutex_t *v7;
  int v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 24)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 24) || *(_DWORD *)(result + 28) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    v4 = *MEMORY[0x1E0C804E8];
LABEL_8:
    *(_QWORD *)(a2 + 24) = v4;
    return result;
  }
  v5 = (CA::Render::Context *)*(unsigned int *)(result + 12);
  *(_DWORD *)(a2 + 36) = 0;
  result = CA::Render::Context::context_by_server_port(v5);
  if (!result)
  {
    v3 = 56;
    goto LABEL_7;
  }
  v6 = (CA::Render::Context *)result;
  v7 = (pthread_mutex_t *)(result + 72);
  pthread_mutex_lock((pthread_mutex_t *)(result + 72));
  *(_DWORD *)(a2 + 36) = CA::Render::Context::new_slot(v6);
  result = pthread_mutex_unlock(v7);
  v8 = *(_DWORD *)(a2 + 36);
  if (v8)
    v9 = 0;
  else
    v9 = 5;
  v10 = (unsigned int *)((char *)v6 + 8);
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
    result = (*(uint64_t (**)(CA::Render::Context *))(*(_QWORD *)v6 + 16))(v6);
  *(_DWORD *)(a2 + 32) = v9;
  v4 = *MEMORY[0x1E0C804E8];
  if (!v8)
    goto LABEL_8;
  *(_QWORD *)(a2 + 24) = v4;
  *(_DWORD *)(a2 + 4) = 40;
  return result;
}

uint64_t CA::Render::Context::new_slot(CA::Render::Context *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  int v17;
  char v18;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
  if (!CA::Render::Context::_slot_table)
    CA::Render::Context::_slot_table = (uint64_t)x_hash_table_new_(0, 0, 0, 0, 0, 0);
  do
  {
    do
      v2 = arc4random();
    while (!(_DWORD)v2);
    v3 = v2;
    v20[0] = 0;
    x_hash_table_lookup(CA::Render::Context::_slot_table, v2, v20);
  }
  while (LODWORD(v20[0]));
  hash_table_modify((int *)CA::Render::Context::_slot_table, v3, 0, 0);
  v5 = (_QWORD *)*((_QWORD *)this + 22);
  v4 = *((_QWORD *)this + 23);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *((_QWORD *)this + 21);
    v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v9 = v4 - v7;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v11 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v11);
    else
      v12 = 0;
    v13 = v11 + 8 * v8;
    v14 = v11 + 8 * v12;
    *(_QWORD *)v13 = v3;
    v6 = (_QWORD *)(v13 + 8);
    v16 = (_BYTE *)*((_QWORD *)this + 21);
    v15 = (_BYTE *)*((_QWORD *)this + 22);
    if (v15 != v16)
    {
      do
      {
        v17 = *((_DWORD *)v15 - 2);
        v15 -= 8;
        v18 = v15[4];
        *(_DWORD *)(v13 - 8) = v17;
        v13 -= 8;
        *(_BYTE *)(v13 + 4) = v18;
      }
      while (v15 != v16);
      v15 = (_BYTE *)*((_QWORD *)this + 21);
    }
    *((_QWORD *)this + 21) = v13;
    *((_QWORD *)this + 22) = v6;
    *((_QWORD *)this + 23) = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = v3;
    v6 = v5 + 1;
  }
  *((_QWORD *)this + 22) = v6;
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
  return v3;
}

void CA::Render::MeshTransform::~MeshTransform(CA::Render::MeshTransform *this, const CA::Render::Object *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;
  void *v8;
  void *v9;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1597170;
  v3 = (unsigned int *)*((_QWORD *)this + 25);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (void *)*((_QWORD *)this + 9);
  if (v7)
  {
    *((_QWORD *)this + 10) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 6);
  if (v8)
  {
    *((_QWORD *)this + 7) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 3);
  if (v9)
  {
    *((_QWORD *)this + 4) = v9;
    operator delete(v9);
  }
  --dword_1ECDC7CAC;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;
  void *v8;
  void *v9;

  *(_QWORD *)this = off_1E1597170;
  v3 = (unsigned int *)*((_QWORD *)this + 25);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (void *)*((_QWORD *)this + 9);
  if (v7)
  {
    *((_QWORD *)this + 10) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 6);
  if (v8)
  {
    *((_QWORD *)this + 7) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 3);
  if (v9)
  {
    *((_QWORD *)this + 4) = v9;
    operator delete(v9);
  }
  --dword_1ECDC7CAC;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

unsigned int *caIOSurfaceFinalize(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    result = (unsigned int *)*((_QWORD *)result + 2);
    v1 = result + 2;
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

CA::Render::MeshTransform *CA::Render::MeshTransform::decode(CA::Render::MeshTransform *this, CA::Render::Decoder *a2)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  CA::Render::MeshTransform *v12;
  int v13;
  malloc_zone_t *malloc_zone;
  CA::Render::MeshTransform *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t i;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 __dst;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = CA::Render::Decoder::decode_int32(this);
  v4 = CA::Render::Decoder::decode_size_t(this);
  v5 = CA::Render::Decoder::decode_size_t(this);
  v6 = CA::Render::Decoder::decode_int8(this);
  v7 = v6;
  if (v6 >= 7)
  {
    CA::Render::Decoder::set_fatal_error(this, "%s - enum %u out of range of %u", "decode_int8_enum", v6, 7);
    v7 = 0;
  }
  v8 = CA::Render::Decoder::decode_int32(this);
  v9 = CA::Render::Decoder::decode_int32(this);
  v10 = CA::Render::Decoder::decode_int8(this);
  v11 = CA::Render::Decoder::decode_int32(this);
  if (v4 > 0x100000)
  {
    CA::Render::Decoder::set_fatal_error(this, "%s - suspiciously large vertex count: %zu");
    return 0;
  }
  if (v5 > 0x100000)
  {
    CA::Render::Decoder::set_fatal_error(this, "%s - suspiciously large face count: %zu");
    return 0;
  }
  v13 = v11;
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v15 = (CA::Render::MeshTransform *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0xD0uLL, 0x743898A5uLL);
  v12 = v15;
  if (v15)
    CA::Render::MeshTransform::MeshTransform(v15, v4, v5, v8);
  *((_DWORD *)v12 + 3) |= (v3 << 8) & 0xFFFFCFFF | 0x300;
  std::vector<CA::Render::MeshVertex>::resize((char **)v12 + 3, v4);
  v16 = (uint64_t *)((char *)v12 + 48);
  std::vector<CA::Render::MeshFace>::resize((char **)v12 + 6, v5);
  std::vector<CA::Render::MeshFace>::resize((char **)v12 + 9, 4 * v5);
  *((_DWORD *)v12 + 24) = v7;
  *((_DWORD *)v12 + 25) = v8;
  *((_DWORD *)v12 + 26) = v9;
  *((_BYTE *)v12 + 108) = v10 != 0;
  *((_DWORD *)v12 + 28) = v13;
  if (*((_QWORD *)v12 + 4) != *((_QWORD *)v12 + 3))
  {
    v17 = 0;
    v18 = 0;
    do
    {
      *(_QWORD *)&__dst = 0;
      CA::Render::Decoder::decode_bytes(this, &__dst, 8uLL);
      *(_QWORD *)(*((_QWORD *)v12 + 3) + v17) = __dst;
      DWORD2(__dst) = 0;
      *(_QWORD *)&__dst = 0;
      CA::Render::Decoder::decode_bytes(this, &__dst, 0xCuLL);
      v19 = DWORD2(__dst);
      v20 = *((_QWORD *)v12 + 3);
      v21 = v20 + v17;
      *(_QWORD *)(v21 + 16) = __dst;
      *(_DWORD *)(v21 + 24) = v19;
      *(_DWORD *)(v21 + 28) = 1065353216;
      ++v18;
      v17 += 32;
    }
    while (v18 < (*((_QWORD *)v12 + 4) - v20) >> 5);
  }
  if (*((_QWORD *)v12 + 7) != *((_QWORD *)v12 + 6))
  {
    v22 = 0;
    v23 = 0;
    do
    {
      for (i = 0; i != 16; i += 4)
      {
        v25 = CA::Render::Decoder::decode_int32(this);
        v26 = *v16;
        *(_DWORD *)(*v16 + v22 + i) = v25;
      }
      ++v23;
      v22 += 16;
    }
    while (v23 < (*((_QWORD *)v12 + 7) - v26) >> 4);
  }
  if (*((_QWORD *)v12 + 10) != *((_QWORD *)v12 + 9))
  {
    v27 = 0;
    v28 = 0;
    do
    {
      *(_DWORD *)(*((_QWORD *)v12 + 9) + v27 + 8) = CA::Render::Decoder::decode_int32(this);
      v29 = CA::Render::Decoder::decode_int32(this);
      v30 = *((_QWORD *)v12 + 9);
      *(_DWORD *)(v30 + v27 + 4) = v29;
      ++v28;
      v27 += 16;
    }
    while (v28 < (*((_QWORD *)v12 + 10) - v30) >> 4);
  }
  __dst = 0u;
  v35 = 0u;
  CA::Render::Decoder::decode_bytes(this, &__dst, 0x20uLL);
  v31 = v35;
  *(_OWORD *)((char *)v12 + 120) = __dst;
  *(_OWORD *)((char *)v12 + 136) = v31;
  v35 = 0u;
  v36 = 0u;
  __dst = 0u;
  CA::Render::Decoder::decode_bytes(this, &__dst, 0x30uLL);
  v32 = v35;
  *(_OWORD *)((char *)v12 + 152) = __dst;
  *(_OWORD *)((char *)v12 + 168) = v32;
  *(_OWORD *)((char *)v12 + 184) = v36;
  return v12;
}

CA::Render::MeshTransform *CA::Render::MeshTransform::MeshTransform(CA::Render::MeshTransform *this, unint64_t a2, unint64_t a3, int a4)
{
  _QWORD *v7;
  char *v9;
  char *v10;
  char *v11;

  *((_DWORD *)this + 2) = 1;
  ++dword_1ECDC7CAC;
  *(_QWORD *)this = off_1E1597170;
  *(_QWORD *)((char *)this + 12) = 33;
  *((_QWORD *)this + 3) = 0;
  v7 = (_QWORD *)((char *)this + 24);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  if (a2)
  {
    std::vector<CA::Render::MeshVertex>::__vallocate[abi:nn180100](v7, a2);
    v9 = (char *)*((_QWORD *)this + 4);
    bzero(v9, 32 * a2);
    *((_QWORD *)this + 4) = &v9[32 * a2];
  }
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  if (a3)
  {
    std::vector<CA::Render::MeshFace>::__vallocate[abi:nn180100]((_QWORD *)this + 6, a3);
    v10 = (char *)*((_QWORD *)this + 7);
    bzero(v10, 16 * a3);
    *((_QWORD *)this + 7) = &v10[16 * a3];
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 11) = 0;
    if (4 * a3)
    {
      std::vector<CA::Render::MeshFace>::__vallocate[abi:nn180100]((_QWORD *)this + 9, 4 * a3);
      v11 = (char *)*((_QWORD *)this + 10);
      bzero(v11, a3 << 6);
      *((_QWORD *)this + 10) = &v11[64 * a3];
    }
  }
  else
  {
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 11) = 0;
  }
  *((_DWORD *)this + 24) = 0;
  *((_DWORD *)this + 25) = a4;
  *((_DWORD *)this + 26) = 0;
  *((_BYTE *)this + 108) = 0;
  *((_QWORD *)this + 25) = 0;
  return this;
}

CA::Render::MeshTransform *CA::Render::MeshTransform::MeshTransform(CA::Render::MeshTransform *this, const CA::Render::MeshTransform *a2)
{
  _QWORD *v4;
  char *v5;
  char *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;

  *((_DWORD *)this + 2) = 1;
  ++dword_1ECDC7CAC;
  *(_QWORD *)this = off_1E1597170;
  *((_QWORD *)this + 3) = 0;
  v4 = (_QWORD *)((char *)this + 24);
  *(_QWORD *)((char *)this + 12) = 33;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  v5 = (char *)*((_QWORD *)a2 + 3);
  v6 = (char *)*((_QWORD *)a2 + 4);
  if (v6 != v5)
  {
    std::vector<CA::Render::MeshVertex>::__vallocate[abi:nn180100](v4, (v6 - v5) >> 5);
    v7 = (_OWORD *)*((_QWORD *)this + 4);
    do
    {
      v8 = *(_OWORD *)v5;
      v9 = *((_OWORD *)v5 + 1);
      v5 += 32;
      *v7 = v8;
      v7[1] = v9;
      v7 += 2;
    }
    while (v5 != v6);
    *((_QWORD *)this + 4) = v7;
  }
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v11 = (_BYTE *)*((_QWORD *)a2 + 6);
  v10 = (_BYTE *)*((_QWORD *)a2 + 7);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    std::vector<CA::Render::MeshFace>::__vallocate[abi:nn180100]((_QWORD *)this + 6, v12 >> 4);
    v13 = (char *)*((_QWORD *)this + 7);
    memmove(v13, v11, v12);
    *((_QWORD *)this + 7) = &v13[v12];
  }
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  v15 = (_BYTE *)*((_QWORD *)a2 + 9);
  v14 = (_BYTE *)*((_QWORD *)a2 + 10);
  v16 = v14 - v15;
  if (v14 != v15)
  {
    std::vector<CA::Render::MeshFace>::__vallocate[abi:nn180100]((_QWORD *)this + 9, v16 >> 4);
    v17 = (char *)*((_QWORD *)this + 10);
    memmove(v17, v15, v16);
    *((_QWORD *)this + 10) = &v17[v16];
  }
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_BYTE *)this + 108) = *((_BYTE *)a2 + 108);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *(_OWORD *)((char *)this + 120) = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)this + 136) = *(_OWORD *)((char *)a2 + 136);
  v18 = *(_OWORD *)((char *)a2 + 152);
  v19 = *(_OWORD *)((char *)a2 + 168);
  *(_OWORD *)((char *)this + 184) = *(_OWORD *)((char *)a2 + 184);
  *(_OWORD *)((char *)this + 168) = v19;
  *(_OWORD *)((char *)this + 152) = v18;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 3) |= *((_DWORD *)a2 + 3) & 0xFFFFFF00;
  return this;
}

BOOL setDepthNormalization(CAMeshTransform *a1, NSString *a2)
{
  _BOOL8 result;
  unint64_t v5;
  _DWORD *impl;
  int64_t subdivisionSteps;

  result = -[NSString isEqualToString:](a2, "isEqualToString:", CFSTR("width"));
  if (result)
  {
    LODWORD(v5) = 2;
    a1->_normalization = 2;
  }
  else
  {
    result = -[NSString isEqualToString:](a2, "isEqualToString:", CFSTR("height"));
    if (result)
    {
      v5 = 3;
    }
    else
    {
      result = -[NSString isEqualToString:](a2, "isEqualToString:", CFSTR("min"));
      if (result)
      {
        v5 = 4;
      }
      else
      {
        result = -[NSString isEqualToString:](a2, "isEqualToString:", CFSTR("max"));
        if (result)
        {
          v5 = 5;
        }
        else
        {
          result = -[NSString isEqualToString:](a2, "isEqualToString:", CFSTR("average"));
          if (result)
            v5 = 6;
          else
            v5 = 1;
        }
      }
    }
    a1->_normalization = v5;
  }
  impl = a1->_impl;
  if (impl)
  {
    subdivisionSteps = a1->_subdivisionSteps;
    impl[24] = v5;
    impl[25] = subdivisionSteps;
    *((_BYTE *)impl + 108) = a1->_replicatesEdges;
  }
  return result;
}

void std::vector<CA::Render::MeshFace>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v18 = &v3[16 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 4)
  {
    bzero(a1[1], 16 * v6);
    v18 = &v4[16 * v6];
LABEL_17:
    a1[1] = v18;
    return;
  }
  if (a2 >> 60)
    abort();
  v8 = v7 - v3;
  v9 = v8 >> 3;
  if (v8 >> 3 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v10 = 0xFFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Render::MeshFace>>(v10);
  v12 = &v11[16 * v5];
  v14 = &v11[16 * v13];
  bzero(v12, 16 * v6);
  v15 = &v12[16 * v6];
  v17 = *a1;
  v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      *((_OWORD *)v12 - 1) = *((_OWORD *)v16 - 1);
      v12 -= 16;
      v16 -= 16;
    }
    while (v16 != v17);
    v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
    operator delete(v16);
}

void std::vector<CA::Render::MeshVertex>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 5;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[32 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 5)
  {
    bzero(a1[1], 32 * v6);
    v19 = &v4[32 * v6];
LABEL_17:
    a1[1] = v19;
    return;
  }
  if (a2 >> 59)
    abort();
  v8 = v7 - v3;
  v9 = v8 >> 4;
  if (v8 >> 4 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v10 = 0x7FFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Render::MeshVertex>>(v10);
  v12 = &v11[32 * v5];
  v14 = &v11[32 * v13];
  bzero(v12, 32 * v6);
  v15 = &v12[32 * v6];
  v17 = *a1;
  v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      v18 = *((_OWORD *)v16 - 1);
      *((_OWORD *)v12 - 2) = *((_OWORD *)v16 - 2);
      *((_OWORD *)v12 - 1) = v18;
      v12 -= 32;
      v16 -= 32;
    }
    while (v16 != v17);
    v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
    operator delete(v16);
}

dispatch_semaphore_t ___ZN2CA2CG5QueueC2Ev_block_invoke()
{
  dispatch_semaphore_t result;

  result = dispatch_semaphore_create(96);
  CA::CG::Queue::_queue_sema = (uint64_t)result;
  return result;
}

uint64_t CA::CG::ContextDelegate::finalize_()
{
  uint64_t result;

  result = CGContextDelegateGetInfo();
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1845A914C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

_DWORD *CA::Render::MatchAnimation::was_added(_DWORD *this, CA::Render::Handle *a2)
{
  _DWORD *v2;
  int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD v8[2];

  v2 = this;
  v8[1] = *MEMORY[0x1E0C80C00];
  v3 = this[3];
  if ((v3 & 0x1000) != 0)
  {
    *((_QWORD *)a2 + 12) |= 8uLL;
    v3 = this[3];
  }
  if ((v3 & 0x2000) != 0)
    *((_QWORD *)a2 + 12) |= 0x10uLL;
  if (!*((_QWORD *)this + 16))
  {
    if (this[28])
    {
      if (*((_QWORD *)this + 13))
      {
        v4 = (*(uint64_t (**)(_DWORD *, CA::Render::Handle *))(*(_QWORD *)this + 160))(this, a2);
        *((_QWORD *)v2 + 16) = v4;
        CA::Render::Handle::add_dependence(v4);
        v8[0] = 0;
        CA::Render::Handle::Dependence::retain_source_handle((CA::Render::Handle::Dependence *)v8, *((_QWORD *)v2 + 16));
        this = (_DWORD *)v8[0];
        if (v8[0])
        {
          *(_QWORD *)(v8[0] + 96) |= 8uLL;
          v5 = this + 2;
          do
          {
            v6 = __ldaxr(v5);
            v7 = v6 - 1;
          }
          while (__stlxr(v7, v5));
          if (!v7)
            return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
        }
      }
    }
  }
  return this;
}

CA::Render::Handle *CA::Render::PortalLayer::commit_layer(CA::Render::PortalLayer *this, CA::Render::Context *a2, CA::Render::Layer *a3, CA::Render::Handle *a4, int a5)
{
  CA::Render::Context *v6;
  uint64_t v8;
  CA::Render::Handle *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  CA::Render::Handle *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  CA::Render::Handle *result;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  CA::Render::Handle *v27;
  unsigned int *v28;
  unsigned int v29;
  unint64_t v30;
  CA::Render::Handle **v31;
  _QWORD *v32;
  CA::Render::Context *v33;
  CA::Render::Context *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t i;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  malloc_zone_t *malloc_zone;
  _QWORD *v43;
  unsigned int *v44;
  __int16 v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  malloc_zone_t *v53;
  _DWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  CA::Render::Handle **v64;
  CA::Render::Handle *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  CA::Render::Handle *v70[2];

  v6 = a2;
  v70[1] = *(CA::Render::Handle **)MEMORY[0x1E0C80C00];
  if ((a5 & 0x200000) == 0)
  {
    v8 = *((_QWORD *)this + 7);
    if (v8 && (a2 = *(CA::Render::Context **)(v8 + 48)) != 0)
    {
      v70[0] = 0;
      CA::Render::Handle::Dependence::retain_source_handle((CA::Render::Handle::Dependence *)v70, (uint64_t)a2);
      v9 = v70[0];
      if (v70[0])
      {
        CA::Render::Handle::set_update_flags(v70[0], 24);
        *((_QWORD *)v9 + 12) |= 3uLL;
        v10 = (unsigned int *)((char *)v9 + 8);
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          (*(void (**)(CA::Render::Handle *))(*(_QWORD *)v9 + 16))(v9);
      }
    }
    else
    {
      v13 = *((_QWORD *)a4 + 2);
      if (v13)
      {
        v14 = *(uint64_t **)(v13 + 128);
        if (v14)
        {
          v15 = *v14;
          if (v15)
          {
            if (*(_BYTE *)(v15 + 12) == 40)
            {
              v16 = *(_QWORD *)(v15 + 56);
              if (v16)
              {
                a2 = *(CA::Render::Context **)(v16 + 48);
                if (a2)
                {
                  v70[0] = 0;
                  CA::Render::Handle::Dependence::retain_source_handle((CA::Render::Handle::Dependence *)v70, (uint64_t)a2);
                  v17 = v70[0];
                  if (v70[0])
                  {
                    *((_QWORD *)v70[0] + 12) |= 0x18uLL;
                    v18 = (unsigned int *)((char *)v17 + 8);
                    do
                    {
                      v19 = __ldaxr(v18);
                      v20 = v19 - 1;
                    }
                    while (__stlxr(v20, v18));
                    if (!v20)
                      (*(void (**)(CA::Render::Handle *))(*(_QWORD *)v17 + 16))(v17);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  result = (CA::Render::Handle *)*((_QWORD *)this + 7);
  if ((a5 & 0x10000) != 0 && result)
  {
    *((_QWORD *)this + 7) = 0;
    v22 = (unsigned int *)((char *)result + 8);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
      (*(void (**)(CA::Render::Handle *, CA::Render::Context *, CA::Render::Layer *, CA::Render::Handle *))(*(_QWORD *)result + 16))(result, a2, a3, a4);
    result = (CA::Render::Handle *)*((_QWORD *)this + 7);
  }
  if (result)
    goto LABEL_28;
  v33 = (CA::Render::Context *)*((unsigned int *)v6 + 4);
  v34 = (CA::Render::Context *)*((unsigned int *)this + 10);
  v35 = *((_QWORD *)this + 3);
  v36 = *((_QWORD *)this + 4);
  v37 = *((_DWORD *)this + 3);
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::PortalState::_list_lock);
  for (i = CA::Render::PortalState::_list; i; i = *(_QWORD *)(i + 16))
  {
    if (*(_DWORD *)(i + 24) == (_DWORD)v33
      && *(_QWORD *)(i + 32) == v35
      && *(_DWORD *)(i + 28) == (_DWORD)v34
      && *(_QWORD *)(i + 40) == v36)
    {
      v39 = (unsigned int *)(i + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 + 1, v39));
      if (v40)
        goto LABEL_88;
      do
        v41 = __ldaxr(v39);
      while (__stlxr(v41 - 1, v39));
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::PortalState::_list_lock);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v43 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0xD8uLL, 0x743898A5uLL);
  i = (uint64_t)v43;
  if (v43)
  {
    v43[26] = 0;
    *((_OWORD *)v43 + 11) = 0u;
    *((_OWORD *)v43 + 12) = 0u;
    *((_OWORD *)v43 + 9) = 0u;
    *((_OWORD *)v43 + 10) = 0u;
    *((_OWORD *)v43 + 7) = 0u;
    *((_OWORD *)v43 + 8) = 0u;
    *((_OWORD *)v43 + 5) = 0u;
    *((_OWORD *)v43 + 6) = 0u;
    *((_OWORD *)v43 + 3) = 0u;
    *((_OWORD *)v43 + 4) = 0u;
    *((_OWORD *)v43 + 1) = 0u;
    *((_OWORD *)v43 + 2) = 0u;
    *((_DWORD *)v43 + 2) = 1;
    *((_DWORD *)v43 + 3) = 41;
    ++dword_1ECDC7CCC;
    *v43 = off_1E1596770;
  }
  *((_DWORD *)v43 + 6) = (_DWORD)v33;
  *((_DWORD *)v43 + 7) = (_DWORD)v34;
  v43[4] = v35;
  v43[5] = v36;
  if ((v37 & 0x2000) != 0)
    *((_DWORD *)v43 + 3) |= 0x200u;
  v44 = (unsigned int *)CA::Render::Context::context_by_id(v34);
  if (v44)
  {
    v45 = *((_WORD *)v44 + 276);
    if ((v45 & 8) != 0)
    {
      *(_DWORD *)(i + 12) |= 0x400u;
      v45 = *((_WORD *)v44 + 276);
    }
    if ((v45 & 0x10) != 0)
      *(_DWORD *)(i + 12) |= 0x800u;
    v46 = v44 + 2;
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
      (*(void (**)(unsigned int *))(*(_QWORD *)v44 + 16))(v44);
  }
  v49 = (unsigned int *)CA::Render::Context::context_by_id(v33);
  if (v49)
  {
    if ((v49[138] & 0x20) != 0)
      *(_DWORD *)(i + 12) |= 0x1000u;
    v50 = v49 + 2;
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
      (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 16))(v49);
  }
  if ((_DWORD)v34 == (_DWORD)v33)
  {
    if (!v36 || !(_DWORD)v33 || v36 == v35)
      goto LABEL_87;
  }
  else if (!(_DWORD)v34 || !v36)
  {
    goto LABEL_87;
  }
  v53 = (malloc_zone_t *)get_malloc_zone();
  v54 = malloc_type_zone_malloc(v53, 0x40uLL, 0x8BB15036uLL);
  if (v54)
  {
    v54[2] = (_DWORD)v34;
    v54[3] = (_DWORD)v33;
    *((_QWORD *)v54 + 2) = v36;
    *((_QWORD *)v54 + 3) = v35;
    *((_QWORD *)v54 + 4) = 0;
    *((_QWORD *)v54 + 5) = 0;
    *(_QWORD *)v54 = &off_1E1596748;
    *((_QWORD *)v54 + 6) = i;
    v54[14] = 0;
    *(_QWORD *)(i + 48) = v54;
  }
  else
  {
    *(_QWORD *)(i + 48) = 0;
  }
  CA::Render::Handle::add_dependence((uint64_t)v54);
LABEL_87:
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::PortalState::_list_lock);
  *(_QWORD *)(i + 16) = CA::Render::PortalState::_list;
  CA::Render::PortalState::_list = i;
LABEL_88:
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::PortalState::_list_lock);
  result = (CA::Render::Handle *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = i;
  if (result)
  {
    v61 = (unsigned int *)((char *)result + 8);
    do
    {
      v62 = __ldaxr(v61);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, v61));
    if (!v63)
      result = (CA::Render::Handle *)(*(uint64_t (**)(CA::Render::Handle *))(*(_QWORD *)result + 16))(result);
  }
LABEL_28:
  if ((a5 & 0x10000) != 0)
  {
    v25 = *((_QWORD *)this + 7);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 48);
      if (v26)
      {
        v70[0] = 0;
        result = (CA::Render::Handle *)CA::Render::Handle::Dependence::retain_source_handle((CA::Render::Handle::Dependence *)v70, v26);
        v27 = v70[0];
        if (v70[0])
        {
          *((_QWORD *)v70[0] + 12) |= 0x1BuLL;
          v28 = (unsigned int *)((char *)v27 + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 + 1, v28));
          if (!v29)
          {
            v27 = 0;
            do
              v69 = __ldaxr(v28);
            while (__stlxr(v69 - 1, v28));
          }
          v31 = (CA::Render::Handle **)*((_QWORD *)v6 + 50);
          v30 = *((_QWORD *)v6 + 51);
          if ((unint64_t)v31 >= v30)
          {
            v55 = (_QWORD *)*((_QWORD *)v6 + 49);
            v56 = v31 - (CA::Render::Handle **)v55;
            v57 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 61)
              abort();
            v58 = v30 - (_QWORD)v55;
            if (v58 >> 2 > v57)
              v57 = v58 >> 2;
            if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
              v59 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v59 = v57;
            if (v59)
            {
              if (v59 >> 61)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v60 = (char *)operator new(8 * v59);
            }
            else
            {
              v60 = 0;
            }
            v64 = (CA::Render::Handle **)&v60[8 * v56];
            *v64 = v27;
            v32 = v64 + 1;
            if (v31 != v55)
            {
              do
              {
                v65 = *--v31;
                *--v64 = v65;
              }
              while (v31 != v55);
              v31 = (CA::Render::Handle **)*((_QWORD *)v6 + 49);
            }
            *((_QWORD *)v6 + 49) = v64;
            *((_QWORD *)v6 + 50) = v32;
            *((_QWORD *)v6 + 51) = &v60[8 * v59];
            if (v31)
              operator delete(v31);
          }
          else
          {
            *v31 = v27;
            v32 = v31 + 1;
          }
          *((_QWORD *)v6 + 50) = v32;
          result = v70[0];
          if (v70[0])
          {
            v66 = (unsigned int *)((char *)v70[0] + 8);
            do
            {
              v67 = __ldaxr(v66);
              v68 = v67 - 1;
            }
            while (__stlxr(v68, v66));
            if (!v68)
              result = (CA::Render::Handle *)(*(uint64_t (**)(CA::Render::Handle *))(*(_QWORD *)result + 16))(result);
          }
        }
      }
    }
  }
  *((_QWORD *)this + 2) = v6;
  return result;
}

uint64_t CA::Render::Handle::add_dependence(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  CA::Render::Object *v8;
  const double *v9;
  char v10;
  CA::Render::Object *v11;
  const double *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  v2 = CA::Render::Context::context_by_id((CA::Render::Context *)*(unsigned int *)(a1 + 8));
  result = *(unsigned int *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) == (_DWORD)result)
  {
    if (!v2)
      return result;
    v4 = (unsigned int *)(v2 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v6 = v2;
    if (!v5)
    {
      v6 = 0;
      do
        v7 = __ldaxr(v4);
      while (__stlxr(v7 - 1, v4));
    }
  }
  else
  {
    result = CA::Render::Context::context_by_id((CA::Render::Context *)result);
    v6 = result;
    if (!v2)
    {
      if (!result)
        return result;
      v10 = 1;
      goto LABEL_16;
    }
  }
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 72));
  v8 = CA::Render::Context::lookup_handle((CA::Render::Context *)v2, *(CA::Render::Object **)(a1 + 16), 0, 1, 0);
  if (v8)
  {
    *(_QWORD *)(a1 + 32) = *((_QWORD *)v8 + 7);
    *((_QWORD *)v8 + 7) = a1;
    CA::Render::Handle::update_container_state((uint64_t)v8, v9);
  }
  result = pthread_mutex_unlock((pthread_mutex_t *)(v2 + 72));
  if (!v6)
    goto LABEL_23;
  v10 = 0;
LABEL_16:
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 72));
  v11 = CA::Render::Context::lookup_handle((CA::Render::Context *)v6, *(CA::Render::Object **)(a1 + 24), 0, 1, 0);
  if (v11)
  {
    *(_QWORD *)(a1 + 40) = *((_QWORD *)v11 + 8);
    *((_QWORD *)v11 + 8) = a1;
    CA::Render::Handle::update_container_state((uint64_t)v11, v12);
  }
  result = pthread_mutex_unlock((pthread_mutex_t *)(v6 + 72));
  v13 = (unsigned int *)(v6 + 8);
  do
  {
    v14 = __ldaxr(v13);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v13));
  if (!v15)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  if ((v10 & 1) == 0)
  {
LABEL_23:
    v16 = (unsigned int *)(v2 + 8);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  return result;
}

uint64_t CA::Render::Handle::Dependence::retain_source_handle(CA::Render::Handle::Dependence *this, uint64_t a2)
{
  uint64_t result;
  CA::Render::Context *v5;
  pthread_mutex_t *v6;
  CA::Render::Object *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  result = CA::Render::Context::context_by_id((CA::Render::Context *)*(unsigned int *)(a2 + 8));
  *(_QWORD *)this = 0;
  if (result)
  {
    v5 = (CA::Render::Context *)result;
    v6 = (pthread_mutex_t *)(result + 72);
    pthread_mutex_lock((pthread_mutex_t *)(result + 72));
    v7 = CA::Render::Context::lookup_handle(v5, *(CA::Render::Object **)(a2 + 16), 0, 0, 0);
    if (v7)
    {
      v8 = (unsigned int *)((char *)v7 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      if (!v9)
      {
        v7 = 0;
        do
          v13 = __ldaxr(v8);
        while (__stlxr(v13 - 1, v8));
      }
      *(_QWORD *)this = v7;
    }
    result = pthread_mutex_unlock(v6);
    v10 = (unsigned int *)((char *)v5 + 8);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      return (*(uint64_t (**)(CA::Render::Context *))(*(_QWORD *)v5 + 16))(v5);
  }
  return result;
}

int8x16_t CA::Render::MatchMoveAnimation::create_dependence(int8x16_t *this, CA::Render::Handle *a2)
{
  malloc_zone_t *malloc_zone;
  int8x16_t *v5;
  int8x16_t result;
  __int32 v7;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v5 = (int8x16_t *)malloc_type_zone_malloc(malloc_zone, 0x38uLL, 0x8BB15036uLL);
  if (v5)
  {
    v7 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 16);
    v5->i32[2] = this[7].i32[0];
    v5->i32[3] = v7;
    result = vextq_s8(this[6], this[6], 8uLL);
    v5[1] = result;
    v5[2].i64[0] = 0;
    v5[2].i64[1] = 0;
    v5[3].i64[0] = (uint64_t)this;
    v5->i64[0] = (uint64_t)&off_1E1598150;
  }
  return result;
}

int8x16_t CA::CG::ContextDelegate::get_bounds_()
{
  uint64_t Info;
  int32x4_t v1;
  int32x4_t v2;
  __int32 v3;
  int8x16_t v4;
  uint64_t v5;
  int64x2_t v6;

  Info = CGContextDelegateGetInfo();
  if (*(_DWORD *)(Info + 24) <= *(_DWORD *)(Info + 28))
    v3 = *(_DWORD *)(Info + 28);
  else
    v3 = *(_DWORD *)(Info + 24);
  v1.i32[0] = 1073741822;
  v2.i32[0] = v3;
  v4 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v2, v1), 0);
  v5 = *(_QWORD *)(Info + 16);
  v6.i64[0] = (int)v5;
  v6.i64[1] = SHIDWORD(v5);
  return vbslq_s8(v4, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v6));
}

void sub_1845A9E54(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

__IOSurface *CA::SurfaceUtil::CAIOSurfaceCreate(unsigned int a1, int a2, uint64_t a3, int a4, int a5, unsigned __int8 a6, uint64_t a7, _QWORD *a8, const void *a9)
{
  uint64_t v14;
  uint64_t *v16;
  unint64_t *v17;
  __CFDictionary *Mutable;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned __int16 v23;
  int v24;
  int v25;
  int v26;
  unsigned __int16 v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 v50;
  int v51;
  unsigned __int16 v52;
  unsigned int v53;
  int v54;
  int v55;
  unsigned __int16 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t *v63;
  uint64_t v64;
  CA::SurfaceUtil *v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  int v100;
  uint64_t v101;
  CFDictionaryRef universal_plane_dict;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  unsigned int v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  CFIndex v137;
  CFArrayRef v138;
  int v139;
  unint64_t v140;
  CA::SurfaceUtil *v141;
  uint64_t v142;
  unsigned int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  _QWORD *v156;
  unint64_t v157;
  const void *v158;
  __CFDictionary *v159;
  int v160;
  unsigned __int16 v161;
  int v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  int v166;
  int v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  int v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  int8x8_t v237;
  uint8x8_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  int8x8_t v243;
  uint8x8_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  BOOL v250;
  NSObject *v251;
  const char *v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  int v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int8x8_t v262;
  uint8x8_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  int8x8_t v267;
  uint8x8_t v268;
  unint64_t v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  CFArrayRef v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  int8x8_t v285;
  uint8x8_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  int8x8_t v290;
  uint8x8_t v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  CFArrayRef v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  int is_444;
  char v310;
  CA::SurfaceUtil *v311;
  int is_420;
  unsigned int v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  unsigned int v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  unint64_t v354;
  uint64_t v355;
  int v356;
  int v357;
  uint64_t v358;
  unint64_t v359;
  unint64_t v360;
  unsigned int v361;
  uint64_t v362;
  unint64_t v363;
  unint64_t v364;
  uint64_t v365;
  int8x8_t v366;
  int8x8_t v367;
  uint8x8_t v368;
  unint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  uint8x8_t v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  uint64_t v382;
  unint64_t v383;
  unint64_t v384;
  uint64_t v385;
  unint64_t v386;
  uint64_t v387;
  unint64_t v388;
  unint64_t v389;
  CFArrayRef v390;
  int8x8_t v391;
  uint8x8_t v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t v397;
  unint64_t v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unint64_t v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  CFArrayRef v421;
  int8x8_t v422;
  uint8x8_t v423;
  unint64_t v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  uint64_t v428;
  unint64_t v429;
  unint64_t v430;
  unint64_t v431;
  unint64_t v432;
  uint64_t v433;
  unint64_t v434;
  unint64_t v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  unint64_t v439;
  unint64_t v440;
  uint64_t v441;
  unint64_t v442;
  unint64_t v443;
  uint64_t v444;
  unint64_t v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  CFArrayRef v450;
  uint64_t v451;
  unint64_t v452;
  unint64_t v453;
  unint64_t v454;
  unint64_t v455;
  uint64_t v456;
  unint64_t v457;
  unint64_t v458;
  int8x8_t v459;
  uint8x8_t v460;
  unint64_t v461;
  unint64_t v462;
  unint64_t v463;
  unint64_t v464;
  int8x8_t v465;
  uint8x8_t v466;
  unint64_t v467;
  unint64_t v468;
  unint64_t v469;
  unint64_t v470;
  int8x8_t v471;
  uint8x8_t v472;
  unint64_t v473;
  unint64_t v474;
  unint64_t v475;
  int8x8_t v476;
  uint8x8_t v477;
  unint64_t v478;
  unint64_t v479;
  unint64_t v480;
  unint64_t v481;
  int8x8_t v482;
  uint8x8_t v483;
  unint64_t v484;
  unint64_t v485;
  unint64_t v486;
  int8x8_t v487;
  uint8x8_t v488;
  unint64_t v489;
  uint64_t v490;
  int8x8_t v491;
  uint8x8_t v492;
  unint64_t v493;
  uint64_t v494;
  int8x8_t v495;
  uint8x8_t v496;
  unint64_t v497;
  uint64_t v498;
  int8x8_t v499;
  uint8x8_t v500;
  unint64_t v501;
  uint64_t v502;
  int8x8_t v503;
  uint8x8_t v504;
  unint64_t v505;
  uint64_t v506;
  int8x8_t v507;
  uint8x8_t v508;
  unint64_t v509;
  uint64_t v510;
  int8x8_t v511;
  uint8x8_t v512;
  unint64_t v513;
  uint64_t v514;
  unint64_t v515;
  unint64_t v516;
  uint64_t v517;
  unint64_t v518;
  unint64_t v519;
  unint64_t v520;
  unint64_t v521;
  unint64_t v522;
  uint64_t v523;
  unint64_t v524;
  unint64_t v525;
  unint64_t v526;
  unint64_t v527;
  uint64_t v528;
  unint64_t v529;
  uint64_t v530;
  unint64_t v531;
  uint64_t v532;
  unint64_t v533;
  uint64_t v534;
  unint64_t v535;
  uint64_t v536;
  unint64_t v537;
  uint64_t v538;
  unint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  CA::SurfaceUtil *v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  CA::SurfaceUtil *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  CFArrayRef v555;
  CA::SurfaceUtil *v556;
  uint64_t v557;
  unint64_t v558;
  uint64_t v559;
  unint64_t v560;
  unint64_t v561;
  uint64_t v562;
  unint64_t v563;
  uint64_t v564;
  unint64_t v565;
  uint64_t v566;
  unint64_t v567;
  uint64_t v568;
  unint64_t v569;
  uint64_t v570;
  unint64_t v571;
  uint64_t v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t v576;
  unint64_t v577;
  uint64_t v578;
  unint64_t v579;
  unint64_t v580;
  uint64_t v581;
  unint64_t v582;
  int8x8_t v583;
  uint8x8_t v584;
  unint64_t v585;
  unint64_t v586;
  unint64_t v587;
  int8x8_t v588;
  uint8x8_t v589;
  unint64_t v590;
  unint64_t v591;
  unint64_t v592;
  unint64_t v593;
  int8x8_t v594;
  uint8x8_t v595;
  unint64_t v596;
  unint64_t v597;
  unint64_t v598;
  unint64_t v599;
  int8x8_t v600;
  uint8x8_t v601;
  unint64_t v602;
  uint64_t v603;
  int8x8_t v604;
  uint8x8_t v605;
  unint64_t v606;
  uint64_t v607;
  int8x8_t v608;
  uint8x8_t v609;
  unint64_t v610;
  uint64_t v611;
  unint64_t v612;
  unint64_t v613;
  uint64_t v614;
  unint64_t v615;
  unint64_t v616;
  unint64_t v617;
  uint64_t v618;
  unint64_t v619;
  uint64_t v620;
  unint64_t v621;
  uint64_t v622;
  CFArrayRef v623;
  CFArrayRef v624;
  const void *v625;
  const void *v626;
  __IOSurface *v627;
  NSObject *v628;
  unsigned int v629;
  uint64_t v630;
  int v631;
  int v632;
  int v633;
  int v634;
  int v635;
  int v636;
  int v637;
  int v638;
  CA::SurfaceUtil *v640;
  int v641;
  unsigned __int8 v642;
  int v643;
  int v644;
  unsigned int v645;
  int v646;
  int v647;
  uint64_t v648;
  unint64_t v650;
  unint64_t v651;
  uint64_t v652;
  uint64_t v653;
  unint64_t v654;
  uint8_t buf[16];
  __int128 v656;
  __int128 v657;
  __int128 v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  int v662;
  void *values;
  CFDictionaryRef htpc_plane_dict;
  CFDictionaryRef plane_dict;
  uint64_t v666;

  LODWORD(v14) = a2;
  v666 = *MEMORY[0x1E0C80C00];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v653 = 0;
  v654 = 0;
  v651 = 0;
  v652 = 0;
  values = 0;
  htpc_plane_dict = 0;
  plane_dict = 0;
  v650 = 0;
  if (CADeviceSupportsUniversalCompression::once[0] != -1)
    dispatch_once(CADeviceSupportsUniversalCompression::once, &__block_literal_global_27);
  v19 = BYTE3(a3);
  v648 = a7;
  v646 = a4;
  v647 = a5;
  if (BYTE3(a3) == 45)
  {
    v20 = 1;
    v21 = 1;
  }
  else if (v19 == 124)
  {
    v21 = 3;
    v20 = 2;
  }
  else if (v19 == 47)
  {
    v20 = 2;
    v21 = 2;
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v641 = CADeviceSupportsUniversalCompression::universal;
  if ((int)a3 > 762865203)
  {
    if ((int)a3 <= 1534354993)
    {
      if ((int)a3 <= 796161585)
      {
        if ((int)a3 > 792229423)
        {
          if ((int)a3 <= 796157487)
          {
            if ((int)a3 <= 792229427)
            {
              if ((_DWORD)a3 != 792229424)
              {
                v22 = 792229426;
                goto LABEL_109;
              }
              goto LABEL_277;
            }
            if ((_DWORD)a3 == 792229428)
              goto LABEL_281;
            v55 = 792872769;
LABEL_234:
            if ((_DWORD)a3 != v55)
              goto LABEL_358;
            v95 = a1;
            v96 = v14;
            v97 = v21;
            goto LABEL_256;
          }
          if ((int)a3 <= 796157491)
          {
            if ((_DWORD)a3 != 796157488)
            {
              v25 = 796157490;
LABEL_100:
              if ((_DWORD)a3 != v25)
                goto LABEL_358;
              goto LABEL_158;
            }
            goto LABEL_261;
          }
          if ((_DWORD)a3 != 796157492)
          {
            v67 = 796161584;
LABEL_260:
            if ((_DWORD)a3 != v67)
              goto LABEL_358;
            goto LABEL_261;
          }
          goto LABEL_263;
        }
        if ((int)a3 <= 762869299)
        {
          if ((_DWORD)a3 != 762865204)
          {
            if ((_DWORD)a3 != 762869296)
            {
              v50 = 30258;
LABEL_293:
              v68 = v50 | 0x2D780000;
LABEL_294:
              if ((_DWORD)a3 != v68)
                goto LABEL_358;
              goto LABEL_295;
            }
LABEL_297:
            v119 = (a1 + 1) >> 1;
            v120 = (v14 + 1) >> 1;
            if (v21 - 1 > 2)
              v121 = 10;
            else
              v121 = qword_18474FB48[v21 - 1];
            v122 = v14;
            if ((v20 - 1) > 2)
              v14 = 20;
            else
              v14 = qword_18474FB60[v20 - 1];
            v123 = a1;
            v124 = a1;
            v125 = v122;
            values = CA::SurfaceUtil::create_universal_plane_dict(v21, 1, v123, v122, v121, (uint64_t *)&v654);
            v46 = v20;
            v47 = v119;
            v48 = v120;
            v49 = v14;
            LODWORD(v14) = v125;
            a1 = v124;
            goto LABEL_357;
          }
        }
        else
        {
          if ((int)a3 > 792225329)
          {
            if ((_DWORD)a3 == 792225330)
              goto LABEL_205;
            v54 = 792225332;
            goto LABEL_203;
          }
          if ((_DWORD)a3 != 762869300)
          {
            v28 = 792225328;
            goto LABEL_276;
          }
        }
LABEL_311:
        if (v21 - 1 > 2)
          v106 = 10;
        else
          v106 = qword_18474FB48[v21 - 1];
        v108 = v20 - 1;
        if ((v20 - 1) > 2)
        {
          v110 = 20;
          goto LABEL_318;
        }
        v109 = qword_18474FB60;
        goto LABEL_316;
      }
      if ((int)a3 > 796423731)
      {
        if ((int)a3 <= 1530426927)
        {
          if ((int)a3 <= 1530422833)
          {
            if ((_DWORD)a3 == 796423732)
              goto LABEL_311;
            if ((_DWORD)a3 != 1530422832)
              goto LABEL_358;
            goto LABEL_320;
          }
          if ((_DWORD)a3 != 1530422834)
          {
            if ((_DWORD)a3 != 1530422836)
              goto LABEL_358;
            goto LABEL_333;
          }
LABEL_329:
          v652 = 0;
          v653 = 0;
          values = CA::SurfaceUtil::create_htpc_plane_dict((CA::SurfaceUtil *)a1, v14, 1, 0, (unint64_t *)&v653, v16);
          v65 = (CA::SurfaceUtil *)((a1 + 1) >> 1);
          v64 = v653;
          v66 = v14;
          goto LABEL_334;
        }
        if ((int)a3 <= 1530426931)
        {
          if ((_DWORD)a3 == 1530426928)
          {
LABEL_320:
            v652 = 0;
            v653 = 0;
            values = CA::SurfaceUtil::create_htpc_plane_dict((CA::SurfaceUtil *)a1, v14, 1, 0, (unint64_t *)&v653, v16);
            v65 = (CA::SurfaceUtil *)((a1 + 1) >> 1);
            v66 = (v14 + 1) >> 1;
            v64 = v653;
LABEL_334:
            v118 = 2;
            goto LABEL_335;
          }
          if ((_DWORD)a3 != 1530426930)
            goto LABEL_358;
          goto LABEL_329;
        }
        if ((_DWORD)a3 == 1530426932)
        {
LABEL_333:
          v652 = 0;
          v653 = 0;
          values = CA::SurfaceUtil::create_htpc_plane_dict((CA::SurfaceUtil *)a1, v14, 1, 0, (unint64_t *)&v653, v16);
          v64 = v653;
          v65 = (CA::SurfaceUtil *)a1;
          v66 = v14;
          goto LABEL_334;
        }
        v52 = 26160;
        goto LABEL_287;
      }
      if ((int)a3 > 796419633)
      {
        if ((int)a3 > 796423727)
        {
          if ((_DWORD)a3 != 796423728)
          {
            v68 = 796423730;
            goto LABEL_294;
          }
          goto LABEL_297;
        }
        if ((_DWORD)a3 != 796419634)
        {
          v30 = 796419636;
          goto LABEL_310;
        }
        goto LABEL_295;
      }
      if ((_DWORD)a3 == 796161586)
        goto LABEL_158;
      if ((_DWORD)a3 == 796161588)
        goto LABEL_263;
      v31 = 796419632;
      goto LABEL_156;
    }
    if ((int)a3 > 2084075057)
    {
      if ((int)a3 <= 2088007217)
      {
        if ((int)a3 <= 2088003119)
        {
          if ((_DWORD)a3 == 2084075058)
            goto LABEL_205;
          if ((_DWORD)a3 == 2084075060)
            goto LABEL_281;
          v55 = 2084718401;
          goto LABEL_234;
        }
        if ((int)a3 <= 2088003123)
        {
          if ((_DWORD)a3 != 2088003120)
          {
            v25 = 2088003122;
            goto LABEL_100;
          }
LABEL_261:
          v103 = (a1 + 1) >> 1;
          v104 = (v14 + 1) >> 1;
          if (v21 - 1 > 2)
            v105 = 12;
          else
            v105 = dword_18474FB78[v21 - 1];
          v107 = 2 * v105;
          values = CA::SurfaceUtil::create_universal_plane_dict(v21, 1, a1, v14, v105, (uint64_t *)&v654);
          v46 = v21;
          goto LABEL_349;
        }
        if ((_DWORD)a3 != 2088003124)
        {
          v67 = 2088007216;
          goto LABEL_260;
        }
LABEL_263:
        if (v21 - 1 > 2)
          v106 = 12;
        else
          v106 = qword_18474FB88[v21 - 1];
        v108 = v20 - 1;
        if ((v20 - 1) > 2)
        {
          v110 = 24;
LABEL_318:
          v126 = a1;
          v127 = a1;
          v128 = v14;
          v14 = v14;
          values = CA::SurfaceUtil::create_universal_plane_dict(v21, 1, v126, v14, v106, (uint64_t *)&v654);
          v46 = v20;
          v47 = v126;
LABEL_356:
          v48 = v14;
          LODWORD(v14) = v128;
          a1 = v127;
          v49 = v110;
          goto LABEL_357;
        }
        v109 = &unk_18474FBA0;
LABEL_316:
        v110 = v109[v108];
        goto LABEL_318;
      }
      if ((int)a3 <= 2088265267)
      {
        if ((int)a3 <= 2088265263)
        {
          if ((_DWORD)a3 != 2088007218)
          {
            v26 = 2088007220;
            goto LABEL_118;
          }
LABEL_158:
          if (v21 - 1 > 2)
            v53 = 12;
          else
            v53 = dword_18474FB78[v21 - 1];
          v57 = 2 * v53;
          values = CA::SurfaceUtil::create_universal_plane_dict(v21, 1, a1, v14, v53, (uint64_t *)&v654);
          v46 = v21;
          v47 = (a1 + 1) >> 1;
          v48 = v14;
          goto LABEL_342;
        }
        if ((_DWORD)a3 != 2088265264)
        {
          v68 = 2088265266;
          goto LABEL_294;
        }
        goto LABEL_297;
      }
      if ((int)a3 > 2088269361)
      {
        if ((_DWORD)a3 != 2088269362)
        {
          v30 = 2088269364;
LABEL_310:
          if ((_DWORD)a3 != v30)
            goto LABEL_358;
          goto LABEL_311;
        }
LABEL_295:
        v77 = (a1 + 1) >> 1;
        if (v21 - 1 > 2)
          v78 = 10;
        else
          v78 = qword_18474FB48[v21 - 1];
        if ((v20 - 1) > 2)
          v57 = 20;
        else
          v57 = qword_18474FB60[v20 - 1];
        goto LABEL_341;
      }
      if ((_DWORD)a3 == 2088265268)
        goto LABEL_311;
      v31 = 2088269360;
LABEL_156:
      if ((_DWORD)a3 != v31)
        goto LABEL_358;
      goto LABEL_297;
    }
    if ((int)a3 <= 1534617139)
    {
      if ((int)a3 <= 1534359089)
      {
        if ((_DWORD)a3 != 1534354994)
        {
          if ((_DWORD)a3 != 1534354996)
          {
            v52 = 30256;
LABEL_287:
            v24 = v52 | 0x5B740000;
LABEL_288:
            if ((_DWORD)a3 != v24)
              goto LABEL_358;
            goto LABEL_289;
          }
          goto LABEL_182;
        }
      }
      else if ((int)a3 > 1534617135)
      {
        if ((_DWORD)a3 == 1534617136)
        {
LABEL_289:
          v652 = 0;
          v653 = 0;
          values = CA::SurfaceUtil::create_htpc_plane_dict((CA::SurfaceUtil *)a1, v14, 2, 0, (unint64_t *)&v653, v16);
          v65 = (CA::SurfaceUtil *)((a1 + 1) >> 1);
          v66 = (v14 + 1) >> 1;
          v64 = v653;
          goto LABEL_290;
        }
        if ((_DWORD)a3 != 1534617138)
          goto LABEL_358;
      }
      else if ((_DWORD)a3 != 1534359090)
      {
        v29 = 1534359092;
        goto LABEL_181;
      }
    }
    else
    {
      if ((int)a3 > 2084070959)
      {
        if ((int)a3 <= 2084070963)
        {
          if ((_DWORD)a3 != 2084070960)
          {
            v22 = 2084070962;
LABEL_109:
            if ((_DWORD)a3 != v22)
              goto LABEL_358;
LABEL_205:
            v77 = (a1 + 1) >> 1;
            switch(v21)
            {
              case 1u:
                v57 = 12;
                v78 = 6;
                break;
              case 3u:
                v78 = 4;
                goto LABEL_338;
              case 2u:
                v78 = 5;
LABEL_338:
                v20 = 3;
                v57 = 8;
LABEL_341:
                values = CA::SurfaceUtil::create_universal_plane_dict(v21, 1, a1, v14, v78, (uint64_t *)&v654);
                v46 = v20;
                v47 = v77;
                v48 = v14;
LABEL_342:
                v49 = v57;
                goto LABEL_357;
              default:
                v57 = 16;
                v78 = 8;
                break;
            }
            v20 = v21;
            goto LABEL_341;
          }
LABEL_277:
          v103 = (a1 + 1) >> 1;
          v104 = (v14 + 1) >> 1;
          v115 = v14;
          switch(v21)
          {
            case 1u:
              v107 = 12;
              v116 = 6;
              break;
            case 3u:
              v116 = 4;
              goto LABEL_345;
            case 2u:
              v116 = 5;
LABEL_345:
              v130 = 3;
              v107 = 8;
LABEL_348:
              v131 = a1;
              v132 = a1;
              v133 = v115;
              values = CA::SurfaceUtil::create_universal_plane_dict(v21, 1, v131, v115, v116, (uint64_t *)&v654);
              v46 = v130;
              LODWORD(v14) = v133;
              a1 = v132;
LABEL_349:
              v47 = v103;
              v48 = v104;
              v49 = v107;
              goto LABEL_357;
            default:
              v107 = 16;
              v116 = 8;
              break;
          }
          v130 = v21;
          goto LABEL_348;
        }
        if ((_DWORD)a3 == 2084070964)
          goto LABEL_281;
        v28 = 2084075056;
LABEL_276:
        if ((_DWORD)a3 != v28)
          goto LABEL_358;
        goto LABEL_277;
      }
      if ((int)a3 <= 1534621233)
      {
        if ((_DWORD)a3 != 1534617140)
        {
          v24 = 1534621232;
          goto LABEL_288;
        }
        goto LABEL_182;
      }
      if ((_DWORD)a3 != 1534621234)
      {
        v29 = 1534621236;
LABEL_181:
        if ((_DWORD)a3 != v29)
          goto LABEL_358;
LABEL_182:
        v652 = 0;
        v653 = 0;
        values = CA::SurfaceUtil::create_htpc_plane_dict((CA::SurfaceUtil *)a1, v14, 2, 0, (unint64_t *)&v653, v16);
        v64 = v653;
        v65 = (CA::SurfaceUtil *)a1;
        v66 = v14;
LABEL_290:
        v118 = 4;
LABEL_335:
        htpc_plane_dict = CA::SurfaceUtil::create_htpc_plane_dict(v65, v66, v118, v64, (unint64_t *)&v652, v63);
        v654 = v652 + v653;
        goto LABEL_358;
      }
    }
    v652 = 0;
    v653 = 0;
    values = CA::SurfaceUtil::create_htpc_plane_dict((CA::SurfaceUtil *)a1, v14, 2, 0, (unint64_t *)&v653, v16);
    v65 = (CA::SurfaceUtil *)((a1 + 1) >> 1);
    v64 = v653;
    v66 = v14;
    goto LABEL_290;
  }
  if ((int)a3 > 645280823)
  {
    if ((int)a3 <= 758670895)
    {
      if ((int)a3 <= 645411895)
      {
        if ((int)a3 <= 645410871)
        {
          if ((_DWORD)a3 != 645280824)
          {
            if ((_DWORD)a3 != 645346162)
            {
              v51 = 645346401;
LABEL_251:
              if ((_DWORD)a3 != v51)
                goto LABEL_358;
              v95 = a1;
              if (CADeviceSupportsUniversalCompression::universal)
              {
                v97 = v21;
                v96 = v14;
                v101 = 64;
LABEL_257:
                universal_plane_dict = CA::SurfaceUtil::create_universal_plane_dict(v97, 0, v95, v96, v101, (uint64_t *)&v654);
LABEL_851:
                values = universal_plane_dict;
                goto LABEL_358;
              }
              v556 = (CA::SurfaceUtil *)a1;
              v557 = v14;
              v558 = 8;
LABEL_850:
              universal_plane_dict = CA::SurfaceUtil::create_agx_plane_dict(v556, v557, v558, (uint64_t *)&v654, &v651, &v650, v17);
              goto LABEL_851;
            }
            goto LABEL_254;
          }
LABEL_240:
          v86 = a1;
          v87 = v14;
          if (CA::Render::fourcc_is_444((CA::Render *)a3))
            v98 = a1;
          else
            v98 = (a1 + 1) >> 1;
          v99 = a1;
          v100 = v14;
          if (CA::Render::fourcc_is_420((CA::Render *)a3))
            v14 = (v14 + 1) >> 1;
          else
            v14 = v14;
          values = CA::SurfaceUtil::create_universal_plane_dict(v21, 1, v86, v87, 8, (uint64_t *)&v654);
          v91 = v21;
          v92 = v98;
          v93 = v14;
          LODWORD(v14) = v100;
          a1 = v99;
          v94 = 16;
LABEL_247:
          htpc_plane_dict = CA::SurfaceUtil::create_universal_plane_dict(v91, 0, v92, v93, v94, (uint64_t *)&v654);
          v82 = v21;
          v83 = v86;
          v84 = v87;
          v85 = 8;
          goto LABEL_248;
        }
        if ((int)a3 > 645411383)
        {
          if ((_DWORD)a3 != 645411384)
          {
            v23 = 12915;
            goto LABEL_211;
          }
        }
        else if ((_DWORD)a3 != 645410872)
        {
          v23 = 12403;
          goto LABEL_211;
        }
LABEL_220:
        v86 = a1;
        v87 = v14;
        if (CA::Render::fourcc_is_444((CA::Render *)a3))
          v88 = a1;
        else
          v88 = (a1 + 1) >> 1;
        v89 = a1;
        v90 = v14;
        if (CA::Render::fourcc_is_420((CA::Render *)a3))
          v14 = (v14 + 1) >> 1;
        else
          v14 = v14;
        values = CA::SurfaceUtil::create_universal_plane_dict(v21, 1, v86, v87, 10, (uint64_t *)&v654);
        v91 = v21;
        v92 = v88;
        v93 = v14;
        LODWORD(v14) = v90;
        a1 = v89;
        v94 = 20;
        goto LABEL_247;
      }
      if ((int)a3 <= 645424691)
      {
        if ((int)a3 <= 645424687)
        {
          if ((_DWORD)a3 != 645411896)
          {
            v23 = 13427;
LABEL_211:
            if ((_DWORD)a3 != (v23 | 0x26780000))
              goto LABEL_358;
            v32 = a1;
            v33 = v14;
            if (CA::Render::fourcc_is_444((CA::Render *)a3))
              v79 = a1;
            else
              v79 = (a1 + 1) >> 1;
            v80 = a1;
            v81 = v14;
            if (CA::Render::fourcc_is_420((CA::Render *)a3))
              v14 = (v14 + 1) >> 1;
            else
              v14 = v14;
            values = CA::SurfaceUtil::create_universal_plane_dict(v21, 1, v32, v33, 10, (uint64_t *)&v654);
            v37 = v21;
            v38 = v79;
            v39 = v14;
            LODWORD(v14) = v81;
            a1 = v80;
            v40 = 20;
            goto LABEL_219;
          }
          goto LABEL_220;
        }
        if ((_DWORD)a3 != 645424688)
        {
          if ((_DWORD)a3 != 645424690)
            goto LABEL_358;
          goto LABEL_330;
        }
LABEL_328:
        v111 = (a1 + 1) >> 1;
        v112 = (v14 + 1) >> 1;
        v114 = a1;
        v129 = v14;
        v113 = v21;
LABEL_332:
        values = CA::SurfaceUtil::create_universal_plane_dict(v113, 1, v114, v129, 10, (uint64_t *)&v654);
        v46 = v21;
        v47 = v111;
        v48 = v112;
        v49 = 20;
        goto LABEL_357;
      }
      if ((int)a3 > 645428785)
      {
        if ((_DWORD)a3 == 645428786)
        {
LABEL_330:
          v111 = (a1 + 1) >> 1;
          v114 = a1;
          v112 = v14;
          v113 = v21;
          goto LABEL_331;
        }
        if ((_DWORD)a3 != 645428788)
          goto LABEL_358;
      }
      else if ((_DWORD)a3 != 645424692)
      {
        if ((_DWORD)a3 != 645428784)
          goto LABEL_358;
        goto LABEL_328;
      }
      v111 = a1;
      v112 = v14;
      v113 = v21;
      v114 = a1;
LABEL_331:
      v129 = v112;
      goto LABEL_332;
    }
    if ((int)a3 > 762603055)
    {
      if ((int)a3 <= 762607153)
      {
        if ((int)a3 <= 762603059)
        {
          if ((_DWORD)a3 != 762603056)
          {
            v25 = 762603058;
            goto LABEL_100;
          }
          goto LABEL_261;
        }
        if ((_DWORD)a3 != 762603060)
        {
          v67 = 762607152;
          goto LABEL_260;
        }
        goto LABEL_263;
      }
      if ((int)a3 <= 762865199)
      {
        if ((_DWORD)a3 != 762607154)
        {
          v26 = 762607156;
LABEL_118:
          if ((_DWORD)a3 != v26)
            goto LABEL_358;
          goto LABEL_263;
        }
        goto LABEL_158;
      }
      if ((_DWORD)a3 != 762865200)
      {
        v50 = 26162;
        goto LABEL_293;
      }
      goto LABEL_297;
    }
    if ((int)a3 > 758674991)
    {
      if ((int)a3 <= 758674995)
      {
        if ((_DWORD)a3 != 758674992)
        {
          v22 = 758674994;
          goto LABEL_109;
        }
        goto LABEL_277;
      }
      if ((_DWORD)a3 != 758674996)
      {
        v55 = 759318337;
        goto LABEL_234;
      }
LABEL_281:
      switch(v21)
      {
        case 1u:
          v110 = 12;
          v117 = 6;
          break;
        case 3u:
          v117 = 4;
          goto LABEL_352;
        case 2u:
          v117 = 5;
LABEL_352:
          v134 = 3;
          v110 = 8;
LABEL_355:
          v135 = a1;
          v127 = a1;
          v128 = v14;
          v14 = v14;
          values = CA::SurfaceUtil::create_universal_plane_dict(v21, 1, v135, v14, v117, (uint64_t *)&v654);
          v46 = v134;
          v47 = v135;
          goto LABEL_356;
        default:
          v110 = 16;
          v117 = 8;
          break;
      }
      v134 = v21;
      goto LABEL_355;
    }
    if ((_DWORD)a3 == 758670896)
      goto LABEL_277;
    if ((_DWORD)a3 == 758670898)
      goto LABEL_205;
    v54 = 758670900;
LABEL_203:
    if ((_DWORD)a3 != v54)
      goto LABEL_358;
    goto LABEL_281;
  }
  if ((int)a3 > 645101103)
  {
    if ((int)a3 <= 645162545)
    {
      if ((int)a3 <= 645148786)
      {
        if ((a3 - 645101104) > 4 || ((1 << (a3 - 48)) & 0x15) == 0)
          goto LABEL_358;
        goto LABEL_137;
      }
      if ((int)a3 <= 645149810)
      {
        if ((_DWORD)a3 != 645148787 && (_DWORD)a3 != 645149299)
          goto LABEL_358;
        goto LABEL_194;
      }
      if ((_DWORD)a3 == 645149811)
      {
LABEL_194:
        v32 = a1;
        v33 = v14;
        if (CA::Render::fourcc_is_444((CA::Render *)a3))
          v74 = a1;
        else
          v74 = (a1 + 1) >> 1;
        v75 = a1;
        v76 = v14;
        if (CA::Render::fourcc_is_420((CA::Render *)a3))
          v14 = (v14 + 1) >> 1;
        else
          v14 = v14;
        values = CA::SurfaceUtil::create_universal_plane_dict(v21, 1, v32, v33, 12, (uint64_t *)&v654);
        v37 = v21;
        v38 = v74;
        v39 = v14;
        LODWORD(v14) = v76;
        a1 = v75;
        v40 = 24;
        goto LABEL_219;
      }
      v56 = 26160;
      goto LABEL_192;
    }
    if ((int)a3 <= 645166641)
    {
      if ((_DWORD)a3 != 645162546)
      {
        if ((_DWORD)a3 != 645162548)
        {
          v56 = 30256;
LABEL_192:
          if ((_DWORD)a3 != (v56 | 0x26740000))
            goto LABEL_358;
          v69 = (a1 + 1) >> 1;
          v70 = (v14 + 1) >> 1;
          v71 = a1;
          v72 = v14;
          v73 = v21;
LABEL_324:
          values = CA::SurfaceUtil::create_universal_plane_dict(v73, 1, v71, v72, 12, (uint64_t *)&v654);
          v46 = v21;
          v47 = v69;
          v48 = v70;
          v49 = 24;
LABEL_357:
          htpc_plane_dict = CA::SurfaceUtil::create_universal_plane_dict(v46, 0, v47, v48, v49, (uint64_t *)&v654);
          goto LABEL_358;
        }
        goto LABEL_322;
      }
LABEL_321:
      v69 = (a1 + 1) >> 1;
      v71 = a1;
      v70 = v14;
      v73 = v21;
LABEL_323:
      v72 = v70;
      goto LABEL_324;
    }
    if ((int)a3 <= 645279799)
    {
      if ((_DWORD)a3 != 645166642)
      {
        if ((_DWORD)a3 != 645166644)
          goto LABEL_358;
LABEL_322:
        v69 = a1;
        v70 = v14;
        v73 = v21;
        v71 = a1;
        goto LABEL_323;
      }
      goto LABEL_321;
    }
    if ((_DWORD)a3 != 645279800 && (_DWORD)a3 != 645280312)
      goto LABEL_358;
    goto LABEL_240;
  }
  if ((int)a3 > 643969847)
  {
    if ((int)a3 <= 645083762)
    {
      if ((_DWORD)a3 == 643969848)
      {
        values = CA::SurfaceUtil::create_universal_plane_dict(v21, 0, a1, v14, 32, (uint64_t *)&v654);
        v46 = v21;
        v47 = a1;
        v48 = v14;
        v49 = 8;
        goto LABEL_357;
      }
      if ((_DWORD)a3 == 644624754)
      {
LABEL_254:
        v95 = a1;
        if (!CADeviceSupportsUniversalCompression::universal)
        {
          v556 = (CA::SurfaceUtil *)a1;
          v557 = v14;
          v558 = 4;
          goto LABEL_850;
        }
        v97 = v21;
        v96 = v14;
LABEL_256:
        v101 = 32;
        goto LABEL_257;
      }
      v27 = 12403;
      goto LABEL_127;
    }
    if ((a3 - 645097008) > 4 || ((1 << (a3 - 48)) & 0x15) == 0)
    {
      if ((_DWORD)a3 == 645083763)
      {
LABEL_128:
        v32 = a1;
        v33 = v14;
        if (CA::Render::fourcc_is_444((CA::Render *)a3))
          v34 = a1;
        else
          v34 = (a1 + 1) >> 1;
        v35 = a1;
        v36 = v14;
        if (CA::Render::fourcc_is_420((CA::Render *)a3))
          v14 = (v14 + 1) >> 1;
        else
          v14 = v14;
        values = CA::SurfaceUtil::create_universal_plane_dict(v21, 1, v32, v33, 16, (uint64_t *)&v654);
        v37 = v21;
        v38 = v34;
        v39 = v14;
        LODWORD(v14) = v36;
        a1 = v35;
        v40 = 32;
LABEL_219:
        htpc_plane_dict = CA::SurfaceUtil::create_universal_plane_dict(v37, 0, v38, v39, v40, (uint64_t *)&v654);
        v82 = v21;
        v83 = v32;
        v84 = v33;
        v85 = 16;
LABEL_248:
        plane_dict = CA::SurfaceUtil::create_universal_plane_dict(v82, 0, v83, v84, v85, (uint64_t *)&v654);
        goto LABEL_358;
      }
      v27 = 13427;
LABEL_127:
      if ((_DWORD)a3 != (v27 | 0x26730000))
        goto LABEL_358;
      goto LABEL_128;
    }
LABEL_137:
    v41 = a1;
    v42 = v14;
    if (CA::Render::fourcc_is_444((CA::Render *)a3))
      v43 = a1;
    else
      v43 = (a1 + 1) >> 1;
    v44 = a1;
    v45 = v14;
    if (CA::Render::fourcc_is_420((CA::Render *)a3))
      v14 = (v14 + 1) >> 1;
    else
      v14 = v14;
    values = CA::SurfaceUtil::create_universal_plane_dict(v21, 1, v41, v42, 16, (uint64_t *)&v654);
    v46 = v21;
    v47 = v43;
    v48 = v14;
    LODWORD(v14) = v45;
    a1 = v44;
    v49 = 32;
    goto LABEL_357;
  }
  if ((int)a3 > 641234481)
  {
    if ((int)a3 <= 641877824)
    {
      if ((_DWORD)a3 == 641234482)
      {
LABEL_319:
        v58 = (a1 + 1) >> 1;
        v60 = a1;
        v59 = v14;
        v62 = v21;
LABEL_326:
        v61 = v59;
        goto LABEL_327;
      }
      if ((_DWORD)a3 != 641234484)
        goto LABEL_358;
      goto LABEL_325;
    }
    if ((_DWORD)a3 != 641877825)
    {
      v51 = 642934849;
      goto LABEL_251;
    }
    goto LABEL_254;
  }
  if ((int)a3 <= 641230387)
  {
    if ((_DWORD)a3 != 641230384)
    {
      if ((_DWORD)a3 != 641230386)
        goto LABEL_358;
      goto LABEL_319;
    }
LABEL_173:
    v58 = (a1 + 1) >> 1;
    v59 = (v14 + 1) >> 1;
    v60 = a1;
    v61 = v14;
    v62 = v21;
LABEL_327:
    values = CA::SurfaceUtil::create_universal_plane_dict(v62, 1, v60, v61, 8, (uint64_t *)&v654);
    v46 = v21;
    v47 = v58;
    v48 = v59;
    v49 = 16;
    goto LABEL_357;
  }
  if ((_DWORD)a3 == 641230388)
  {
LABEL_325:
    v58 = a1;
    v59 = v14;
    v62 = v21;
    v60 = a1;
    goto LABEL_326;
  }
  if ((_DWORD)a3 == 641234480)
    goto LABEL_173;
LABEL_358:
  v136 = 0;
  LODWORD(v137) = 0;
  v645 = a6;
  do
  {
    if (*(void **)((char *)&values + v136))
      v137 = (v137 + 1);
    else
      v137 = v137;
    v136 += 8;
  }
  while (v136 != 24);
  if ((_DWORD)v137)
  {
    v138 = CFArrayCreate(0, (const void **)&values, v137, MEMORY[0x1E0C9B378]);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBC158], v138);
    CFRelease(v138);
    v139 = -1;
    do
      CFRelease(*(&values + (v137 + v139--)));
    while ((int)v137 + v139 + 2 > 1);
  }
  v140 = a8[4];
  v141 = (CA::SurfaceUtil *)a1;
  v142 = v14;
  if (v140 && v654 > v140 || v651 > a1 || v650 > v14)
  {
    a3 = CA::Render::fourcc_compressed_of_type((CA::Render *)a3, 0, 0);
    CFRelease(Mutable);
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  else if (v654)
  {
LABEL_914:
    v190 = (v645 >> 2) & 1;
    goto LABEL_915;
  }
  if ((int)a3 > 1932812658)
  {
    if ((int)a3 > 1999843441)
    {
      if ((int)a3 > 2016698679)
      {
        if ((int)a3 <= 2019964015)
        {
          if ((int)a3 <= 2019963439)
          {
            if ((_DWORD)a3 == 2016698680)
              goto LABEL_553;
            v162 = 2016698739;
            goto LABEL_552;
          }
          if ((_DWORD)a3 != 2019963440)
          {
            if ((_DWORD)a3 == 2019963442)
              goto LABEL_520;
            v162 = 2019963956;
LABEL_552:
            if ((_DWORD)a3 != v162)
              goto LABEL_848;
            goto LABEL_553;
          }
LABEL_581:
          v642 = a6;
          v281 = v14;
          v282 = (v14 + 1) >> 1;
          v283 = a8[1];
          v284 = v283 - 1 + 2 * a1;
          if ((v283 & (v283 - 1)) != 0)
            v236 = v284 / v283 * v283;
          else
            v236 = v284 & -v283;
          v285 = (int8x8_t)a8[2];
          v286 = (uint8x8_t)vcnt_s8(v285);
          v286.i16[0] = vaddlv_u8(v286);
          v287 = v286.u32[0];
          v240 = v142 - 1;
          v288 = *(_QWORD *)&v285 + v142 - 1;
          if (v286.u32[0] > 1uLL)
            v289 = v288 / *(_QWORD *)&v285 * *(_QWORD *)&v285;
          else
            v289 = v288 & -*(_QWORD *)&v285;
          v290 = (int8x8_t)a8[3];
          v291 = (uint8x8_t)vcnt_s8(v290);
          v291.i16[0] = vaddlv_u8(v291);
          v292 = *(_QWORD *)&v290 - 1 + v289 * v236;
          if (v291.u32[0] > 1uLL)
            v293 = v292 / *(_QWORD *)&v290 * *(_QWORD *)&v290;
          else
            v293 = v292 & -*(_QWORD *)&v290;
          v653 = v293;
          v294 = v282 + *(_QWORD *)&v285 - 1;
          if (v287 > 1)
            v295 = v294 / *(_QWORD *)&v285 * *(_QWORD *)&v285;
          else
            v295 = v294 & -*(_QWORD *)&v285;
          v296 = *(_QWORD *)&v290 - 1 + v295 * v236;
          if (v291.u32[0] > 1uLL)
            v297 = v296 / *(_QWORD *)&v290 * *(_QWORD *)&v290;
          else
            v297 = v296 & -*(_QWORD *)&v290;
          v652 = v297;
          values = CA::SurfaceUtil::create_plane_dict((CA::SurfaceUtil *)a1, v142, v236, 0, v293, 1, 2);
          htpc_plane_dict = CA::SurfaceUtil::create_plane_dict((CA::SurfaceUtil *)((a1 + 1) >> 1), v282, v236, v653, v652, 1, 4);
          if (CA::Render::fourcc_has_alpha((CA::Render *)a3))
          {
            v250 = (_DWORD)a3 == 2016436536;
            LODWORD(v14) = v281;
            a6 = v642;
LABEL_598:
            if (v250)
            {
              v298 = a8[1];
              v299 = v298 - 1 + a1;
              if ((v298 & (v298 - 1)) != 0)
                v236 = v299 / v298 * v298;
              else
                v236 = v299 & -v298;
            }
            v301 = a8[2];
            v302 = v301 + v240;
            if ((v301 & (v301 - 1)) != 0)
              v303 = v302 / v301 * v301;
            else
              v303 = v302 & -(uint64_t)v301;
            v304 = a8[3];
            goto LABEL_693;
          }
          v300 = CFArrayCreate(0, (const void **)&values, 2, MEMORY[0x1E0C9B378]);
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBC158], v300);
          CFRelease(v300);
          CFRelease(htpc_plane_dict);
          CFRelease(values);
          v654 = v652 + v653;
          v190 = (v645 >> 2) & 1;
          LODWORD(v14) = v281;
          a6 = v642;
LABEL_915:
          v355 = v648;
          v357 = v646;
          v356 = v647;
          goto LABEL_916;
        }
        if ((int)a3 > 2033463855)
        {
          if ((_DWORD)a3 != 2033463856)
          {
            if ((_DWORD)a3 != 2037741158 && (_DWORD)a3 != 2037741171)
              goto LABEL_848;
LABEL_463:
            v168 = a8[1];
            v169 = v168 - 1 + 2 * a1;
            v170 = v169 / v168 * v168;
            v171 = v169 & -v168;
            if ((v168 & (v168 - 1)) != 0)
              v172 = v170;
            else
              v172 = v171;
            CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF00], 4);
            CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBFC0], 2);
            CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF08], v172);
            v173 = a8[2];
            v174 = v173 - 1 + v14;
            if ((v173 & (v173 - 1)) != 0)
              v175 = v174 / v173 * v173;
            else
              v175 = v174 & -v173;
            v355 = v648;
            v357 = v646;
            v356 = v647;
            v362 = a8[3];
            v363 = v362 - 1 + v175 * v172;
            if ((v362 & (v362 - 1)) != 0)
              v364 = v363 / v362 * v362;
            else
              v364 = v363 & -v362;
            v654 = v364;
            v190 = 1;
            goto LABEL_916;
          }
          goto LABEL_641;
        }
        if ((_DWORD)a3 != 2019964016)
        {
          if ((_DWORD)a3 == 2033463606)
          {
            v319 = a8[1];
            v320 = v319 - 1 + 8 * a1;
            v321 = v320 / v319 * v319;
            v322 = v320 & -v319;
            if ((v319 & (v319 - 1)) != 0)
              v323 = v321;
            else
              v323 = v322;
            CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF00], 8);
            CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF08], v323);
            v324 = a8[2];
            v325 = a8[3];
            v326 = v324 - 1 + v14;
            v327 = v326 / v324 * v324;
            v328 = v326 & -v324;
            if ((v324 & (v324 - 1)) != 0)
              v329 = v327;
            else
              v329 = v328;
            v330 = v325 - 1 + v329 * v323;
            v331 = v330 / v325 * v325;
            v332 = v330 & -v325;
            if ((v325 & (v325 - 1)) != 0)
              v332 = v331;
            v654 = v332;
            v190 = (a6 >> 2) & 1;
            LODWORD(a3) = 2033463606;
            goto LABEL_915;
          }
          goto LABEL_848;
        }
      }
      else
      {
        if ((int)a3 <= 2016567666)
        {
          if ((int)a3 <= 2016436535)
          {
            if ((_DWORD)a3 != 1999843442)
            {
              if ((_DWORD)a3 == 1999908961)
              {
                v205 = a8[1];
                v206 = v205 - 1 + 8 * a1;
                v207 = v206 / v205 * v205;
                v208 = v206 & -v205;
                if ((v205 & (v205 - 1)) != 0)
                  v209 = v207;
                else
                  v209 = v208;
                CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF00], 8);
                CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF08], v209);
                v210 = a8[2];
                v211 = a8[3];
                v212 = v210 - 1 + v14;
                v213 = v212 / v210 * v210;
                v214 = v212 & -v210;
                if ((v210 & (v210 - 1)) != 0)
                  v215 = v213;
                else
                  v215 = v214;
                v216 = v211 - 1 + v215 * v209;
                v217 = v216 / v211 * v211;
                v218 = v216 & -v211;
                if ((v211 & (v211 - 1)) != 0)
                  v218 = v217;
                v654 = v218;
                v190 = (a6 >> 2) & 1;
                LODWORD(a3) = 1999908961;
                goto LABEL_915;
              }
              goto LABEL_848;
            }
            goto LABEL_503;
          }
          if ((_DWORD)a3 != 2016436536 && (_DWORD)a3 != 2016436595)
          {
            v151 = 2016567608;
            goto LABEL_519;
          }
          goto LABEL_581;
        }
        if ((int)a3 <= 2016686641)
        {
          if ((_DWORD)a3 == 2016567667)
            goto LABEL_520;
          v149 = 2016686640;
          goto LABEL_580;
        }
        if ((_DWORD)a3 == 2016686642)
          goto LABEL_520;
        if ((_DWORD)a3 == 2016687156)
          goto LABEL_553;
        if ((_DWORD)a3 != 2016687216)
          goto LABEL_848;
      }
      v348 = a8[1];
      v349 = v348 - 1 + 4 * a1;
      v350 = v349 / v348 * v348;
      v351 = v349 & -v348;
      v156 = a8;
      if ((v348 & (v348 - 1)) != 0)
        v157 = v350;
      else
        v157 = v351;
      v158 = (const void *)*MEMORY[0x1E0CBBF00];
      v159 = Mutable;
      v160 = 4;
      goto LABEL_654;
    }
    if ((int)a3 <= 1952854575)
    {
      if ((int)a3 <= 1937125937)
      {
        if ((int)a3 > 1936077361)
        {
          if ((_DWORD)a3 != 1936077362)
          {
            if ((_DWORD)a3 != 1936077876)
            {
              v149 = 1937125936;
              goto LABEL_580;
            }
LABEL_553:
            v256 = v14;
            v257 = a8[1];
            v258 = v257 - 1 + 2 * a1;
            v259 = v257 - 1 + 4 * a1;
            if ((v257 & (v257 - 1)) != 0)
            {
              v236 = v258 / v257 * v257;
              v261 = v259 / v257 * v257;
            }
            else
            {
              v260 = -(uint64_t)v257;
              v236 = v258 & v260;
              v261 = v259 & v260;
            }
            v262 = (int8x8_t)a8[2];
            v263 = (uint8x8_t)vcnt_s8(v262);
            v263.i16[0] = vaddlv_u8(v263);
            v264 = v263.u32[0];
            v265 = *(_QWORD *)&v262 + v142 - 1;
            if (v263.u32[0] > 1uLL)
              v266 = v265 / *(_QWORD *)&v262 * *(_QWORD *)&v262;
            else
              v266 = v265 & -*(_QWORD *)&v262;
            v267 = (int8x8_t)a8[3];
            v268 = (uint8x8_t)vcnt_s8(v267);
            v268.i16[0] = vaddlv_u8(v268);
            v269 = *(_QWORD *)&v267 - 1 + v266 * v236;
            if (v268.u32[0] > 1uLL)
              v270 = v269 / *(_QWORD *)&v267 * *(_QWORD *)&v267;
            else
              v270 = v269 & -*(_QWORD *)&v267;
            v653 = v270;
            if (v264 > 1)
              v271 = v265 / *(_QWORD *)&v262 * *(_QWORD *)&v262;
            else
              v271 = v265 & -*(_QWORD *)&v262;
            v272 = *(_QWORD *)&v267 - 1 + v271 * v261;
            if (v268.u32[0] > 1uLL)
              v273 = v272 / *(_QWORD *)&v267 * *(_QWORD *)&v267;
            else
              v273 = v272 & -*(_QWORD *)&v267;
            v652 = v273;
            values = CA::SurfaceUtil::create_plane_dict((CA::SurfaceUtil *)a1, v142, v236, 0, v270, 1, 2);
            htpc_plane_dict = CA::SurfaceUtil::create_plane_dict((CA::SurfaceUtil *)a1, v142, v261, v653, v652, 1, 4);
            if (CA::Render::fourcc_has_alpha((CA::Render *)a3))
            {
              LODWORD(v14) = v256;
              if ((_DWORD)a3 == 2016698680)
              {
                v274 = a8[1];
                v275 = v274 - 1 + a1;
                if ((v274 & (v274 - 1)) != 0)
                  v236 = v275 / v274 * v274;
                else
                  v236 = v275 & -v274;
              }
              v388 = a8[2];
              v389 = v388 + v142 - 1;
              if ((v388 & (v388 - 1)) != 0)
                v303 = v389 / v388 * v388;
              else
                v303 = v389 & -(uint64_t)v388;
              v304 = a8[3];
LABEL_693:
              v386 = v304 - 1 + v303 * v236;
              if ((v304 & (v304 - 1)) == 0)
              {
LABEL_694:
                v387 = v386 & -v304;
                goto LABEL_695;
              }
LABEL_687:
              v387 = v386 / v304 * v304;
LABEL_695:
              plane_dict = CA::SurfaceUtil::create_plane_dict(v141, v142, v236, v652 + v653, v387, 1, 1);
              v390 = CFArrayCreate(0, (const void **)&values, 3, MEMORY[0x1E0C9B378]);
              CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBC158], v390);
              CFRelease(v390);
              CFRelease(values);
              CFRelease(htpc_plane_dict);
              CFRelease(plane_dict);
              v233 = v653 + v387 + v652;
LABEL_913:
              v654 = v233;
              goto LABEL_914;
            }
            v276 = CFArrayCreate(0, (const void **)&values, 2, MEMORY[0x1E0C9B378]);
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBC158], v276);
            CFRelease(v276);
            CFRelease(htpc_plane_dict);
            CFRelease(values);
            v654 = v652 + v653;
            v190 = (a6 >> 2) & 1;
            LODWORD(v14) = v256;
            goto LABEL_915;
          }
LABEL_520:
          v234 = a8[1];
          v235 = v234 - 1 + 2 * a1;
          if ((v234 & (v234 - 1)) != 0)
            v236 = v235 / v234 * v234;
          else
            v236 = v235 & -v234;
          v237 = (int8x8_t)a8[2];
          v238 = (uint8x8_t)vcnt_s8(v237);
          v238.i16[0] = vaddlv_u8(v238);
          v239 = v238.u32[0];
          v240 = v14 - 1;
          v241 = *(_QWORD *)&v237 + v240;
          if (v238.u32[0] > 1uLL)
            v242 = v241 / *(_QWORD *)&v237 * *(_QWORD *)&v237;
          else
            v242 = v241 & -*(_QWORD *)&v237;
          v243 = (int8x8_t)a8[3];
          v244 = (uint8x8_t)vcnt_s8(v243);
          v244.i16[0] = vaddlv_u8(v244);
          v245 = *(_QWORD *)&v243 - 1 + v242 * v236;
          if (v244.u32[0] > 1uLL)
            v246 = v245 / *(_QWORD *)&v243 * *(_QWORD *)&v243;
          else
            v246 = v245 & -*(_QWORD *)&v243;
          v653 = v246;
          if (v239 > 1)
            v247 = v241 / *(_QWORD *)&v237 * *(_QWORD *)&v237;
          else
            v247 = v241 & -*(_QWORD *)&v237;
          v248 = *(_QWORD *)&v243 - 1 + v247 * v236;
          if (v244.u32[0] > 1uLL)
            v249 = v248 / *(_QWORD *)&v243 * *(_QWORD *)&v243;
          else
            v249 = v248 & -*(_QWORD *)&v243;
          v652 = v249;
          values = CA::SurfaceUtil::create_plane_dict((CA::SurfaceUtil *)a1, v14, v236, 0, v246, 1, 2);
          htpc_plane_dict = CA::SurfaceUtil::create_plane_dict((CA::SurfaceUtil *)((a1 + 1) >> 1), v14, v236, v653, v652, 1, 4);
          if (!CA::Render::fourcc_has_alpha((CA::Render *)a3))
            goto LABEL_912;
          v250 = (_DWORD)a3 == 2016567608;
          goto LABEL_598;
        }
        if ((_DWORD)a3 == 1932812659)
          goto LABEL_553;
        v149 = 1936077360;
LABEL_580:
        if ((_DWORD)a3 != v149)
          goto LABEL_848;
        goto LABEL_581;
      }
      if ((int)a3 <= 1949327730)
      {
        if ((_DWORD)a3 == 1937125938)
          goto LABEL_520;
        v162 = 1937126452;
        goto LABEL_552;
      }
      if ((_DWORD)a3 != 1949327731)
      {
        if ((_DWORD)a3 == 1949458803)
          goto LABEL_520;
        v162 = 1949589875;
        goto LABEL_552;
      }
      goto LABEL_581;
    }
    if ((int)a3 <= 1953903667)
    {
      if ((int)a3 <= 1952855091)
      {
        if ((_DWORD)a3 != 1952854576)
        {
          v151 = 1952854578;
LABEL_519:
          if ((_DWORD)a3 != v151)
            goto LABEL_848;
          goto LABEL_520;
        }
        goto LABEL_581;
      }
      if ((_DWORD)a3 != 1952855092)
      {
        if ((_DWORD)a3 != 1953903152)
        {
          v151 = 1953903154;
          goto LABEL_519;
        }
        goto LABEL_581;
      }
      goto LABEL_553;
    }
    if ((int)a3 <= 1983000885)
    {
      if ((_DWORD)a3 == 1953903668)
        goto LABEL_553;
      v167 = 1982882104;
    }
    else
    {
      if ((_DWORD)a3 == 1983000886)
      {
        v436 = a8[1];
        v437 = v436 - 1 + 4 * a1;
        v438 = v437 / v436 * v436;
        v439 = v437 & -v436;
        if ((v436 & (v436 - 1)) != 0)
          v440 = v438;
        else
          v440 = v439;
        CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF00], 4);
        CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF08], v440);
        v441 = a8[2];
        v442 = v441 - 1 + v14;
        if ((v441 & (v441 - 1)) != 0)
          v443 = v442 / v441 * v441;
        else
          v443 = v442 & -v441;
        v355 = v648;
        v357 = v646;
        v356 = v647;
        v578 = a8[3];
        v579 = v578 - 1 + v443 * v440;
        if ((v578 & (v578 - 1)) != 0)
          v580 = v579 / v578 * v578;
        else
          v580 = v579 & -v578;
        v654 = v580;
        v190 = 1;
        LODWORD(a3) = 1983000886;
        goto LABEL_916;
      }
      if ((_DWORD)a3 == 1983013176)
      {
LABEL_617:
        is_444 = CA::Render::fourcc_is_444((CA::Render *)a3);
        v310 = is_444;
        v311 = (CA::SurfaceUtil *)((a1 + 1) >> 1);
        if (is_444)
          v311 = (CA::SurfaceUtil *)a1;
        v640 = v311;
        is_420 = CA::Render::fourcc_is_420((CA::Render *)a3);
        v313 = a1;
        v643 = v14;
        if (is_420)
          v314 = (v14 + 1) >> 1;
        else
          v314 = v14;
        v315 = a8[1];
        v316 = (unint64_t)v141 + v315 - 1;
        if ((v315 & (v315 - 1)) != 0)
        {
          v236 = v316 / v315 * v315;
          v317 = v313;
          v318 = ((unint64_t)(2 * v313) + v315 - 1) / v315 * v315;
        }
        else
        {
          v236 = v316 & -v315;
          v317 = v313;
          v318 = (2 * v313 + v315 - 1) & -v315;
        }
        if ((v310 & 1) != 0)
          v365 = v318;
        else
          v365 = v236;
        v367 = (int8x8_t)a8[2];
        v366 = (int8x8_t)a8[3];
        v368 = (uint8x8_t)vcnt_s8(v367);
        v368.i16[0] = vaddlv_u8(v368);
        v369 = v368.u32[0];
        v370 = *(_QWORD *)&v367 + v142 - 1;
        v371 = v370 / *(_QWORD *)&v367 * *(_QWORD *)&v367;
        v372 = v370 & -*(_QWORD *)&v367;
        if (v368.u32[0] <= 1uLL)
          v373 = v372;
        else
          v373 = v371;
        v374 = (uint8x8_t)vcnt_s8(v366);
        v374.i16[0] = vaddlv_u8(v374);
        v375 = *(_QWORD *)&v366 - 1 + v373 * v236;
        v376 = v375 / *(_QWORD *)&v366 * *(_QWORD *)&v366;
        v377 = v375 & -*(_QWORD *)&v366;
        if (v374.u32[0] <= 1uLL)
          v378 = v377;
        else
          v378 = v376;
        v653 = v378;
        v379 = v314 + *(_QWORD *)&v367 - 1;
        if (v369 > 1)
          v380 = v379 / *(_QWORD *)&v367 * *(_QWORD *)&v367;
        else
          v380 = v379 & -*(_QWORD *)&v367;
        v381 = *(_QWORD *)&v366 - 1 + v380 * v365;
        if (v374.u32[0] > 1uLL)
          v382 = v381 / *(_QWORD *)&v366 * *(_QWORD *)&v366;
        else
          v382 = v381 & -*(_QWORD *)&v366;
        v652 = v382;
        values = CA::SurfaceUtil::create_plane_dict(v141, v142, v236, 0, v378, 1, 1);
        htpc_plane_dict = CA::SurfaceUtil::create_plane_dict(v640, v314, v365, v653, v652, 1, 2);
        v383 = a8[2];
        v384 = v383 + v142 - 1;
        if ((v383 & (v383 - 1)) != 0)
          v385 = v384 / v383 * v383;
        else
          v385 = v384 & -(uint64_t)v383;
        LODWORD(v14) = v643;
        v304 = a8[3];
        v386 = v304 - 1 + v385 * v236;
        a1 = v317;
        if ((v304 & (v304 - 1)) == 0)
          goto LABEL_694;
        goto LABEL_687;
      }
      v167 = 1983144248;
    }
    if ((_DWORD)a3 != v167)
      goto LABEL_848;
    goto LABEL_617;
  }
  if ((int)a3 > 1380410944)
  {
    if ((int)a3 <= 1885746227)
    {
      if ((int)a3 <= 1882468911)
      {
        if ((int)a3 <= 1647534391)
        {
          if ((_DWORD)a3 != 1380410945)
          {
            if ((_DWORD)a3 == 1380411457)
            {
              v191 = a8[1];
              v192 = v191 - 1 + 8 * a1;
              v193 = v192 / v191 * v191;
              v194 = v192 & -v191;
              if ((v191 & (v191 - 1)) != 0)
                v195 = v193;
              else
                v195 = v194;
              CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF00], 8);
              CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF08], v195);
              v196 = a8[2];
              v197 = a8[3];
              v198 = v196 - 1 + v14;
              v199 = v198 / v196 * v196;
              v200 = v198 & -v196;
              if ((v196 & (v196 - 1)) != 0)
                v201 = v199;
              else
                v201 = v200;
              v202 = v197 - 1 + v201 * v195;
              v203 = v202 / v197 * v197;
              v204 = v202 & -v197;
              if ((v197 & (v197 - 1)) != 0)
                v204 = v203;
              v654 = v204;
              v190 = (a6 >> 2) & 1;
              LODWORD(a3) = 1380411457;
              goto LABEL_915;
            }
            goto LABEL_848;
          }
          v451 = a8[1];
          v452 = v451 - 1 + 16 * a1;
          v453 = v452 / v451 * v451;
          v454 = v452 & -v451;
          if ((v451 & (v451 - 1)) != 0)
            v455 = v453;
          else
            v455 = v454;
          CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF00], 16);
          CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF08], v455);
          v456 = a8[2];
          v457 = v456 - 1 + v14;
          if ((v456 & (v456 - 1)) != 0)
            v458 = v457 / v456 * v456;
          else
            v458 = v457 & -v456;
          v355 = v648;
          v357 = v646;
          v356 = v647;
          v581 = a8[3];
          v582 = v581 - 1 + v458 * v455;
          if ((v581 & (v581 - 1)) != 0)
            v360 = v582 / v581 * v581;
          else
            v360 = v582 & -v581;
          v361 = a6;
          LODWORD(a3) = 1380410945;
LABEL_661:
          v654 = v360;
          v190 = (v361 >> 2) & 1;
          goto LABEL_916;
        }
        if ((_DWORD)a3 == 1647534392)
        {
          v396 = a8[1];
          v397 = a8[2];
          v398 = v396 - 1 + 4 * a1;
          v399 = v398 / v396 * v396;
          v400 = v398 & -v396;
          if ((v396 & (v396 - 1)) != 0)
            v401 = v399;
          else
            v401 = v400;
          v402 = v14 - 1;
          v403 = (v397 + v402) & -(uint64_t)v397;
          if ((v397 & (v397 - 1)) != 0)
            v403 = (v397 + v402) / v397 * v397;
          v404 = a8[3];
          v405 = v404 - 1 + v403 * v401;
          v406 = v405 / v404 * v404;
          v407 = v405 & -v404;
          if ((v404 & (v404 - 1)) != 0)
            v408 = v406;
          else
            v408 = v407;
          values = CA::SurfaceUtil::create_plane_dict((CA::SurfaceUtil *)a1, v14, v401, 0, v408, 1, 4);
          v409 = a8[1];
          v410 = a8[2];
          v411 = v409 - 1 + a1;
          v412 = v411 & -v409;
          v413 = v411 / v409 * v409;
          if ((v409 & (v409 - 1)) != 0)
            v414 = v413;
          else
            v414 = v412;
          v415 = (v410 + v402) & -(uint64_t)v410;
          if ((v410 & (v410 - 1)) != 0)
            v415 = (v410 + v402) / v410 * v410;
          v416 = a8[3];
          v417 = v416 - 1 + v415 * v414;
          v418 = v417 / v416 * v416;
          v419 = v417 & -v416;
          if ((v416 & (v416 - 1)) != 0)
            v420 = v418;
          else
            v420 = v419;
          htpc_plane_dict = CA::SurfaceUtil::create_plane_dict((CA::SurfaceUtil *)a1, v14, v414, v408, v420, 1, 1);
          v421 = CFArrayCreate(0, (const void **)&values, 2, MEMORY[0x1E0C9B378]);
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBC158], v421);
          CFRelease(v421);
          CFRelease(htpc_plane_dict);
          CFRelease(values);
          v654 = v420 + v408;
          v190 = (a6 >> 2) & 1;
          LODWORD(a3) = 1647534392;
          goto LABEL_915;
        }
        if ((_DWORD)a3 != 1714696752)
        {
          v150 = 1815162994;
          goto LABEL_449;
        }
LABEL_641:
        v644 = v14;
        v14 = (v14 + 1) >> 1;
        v333 = a8[1];
        v334 = v333 - 1 + a1;
        v335 = v333 - 1 + ((a1 + 1) >> 1);
        if ((v333 & (v333 - 1)) != 0)
        {
          v337 = v334 / v333 * v333;
          v338 = v335 / v333 * v333;
        }
        else
        {
          v336 = -(uint64_t)v333;
          v337 = v334 & v336;
          v338 = v335 & v336;
        }
        v471 = (int8x8_t)a8[2];
        v472 = (uint8x8_t)vcnt_s8(v471);
        v472.i16[0] = vaddlv_u8(v472);
        v473 = v472.u32[0];
        v474 = v142 + *(_QWORD *)&v471 - 1;
        if (v472.u32[0] > 1uLL)
          v475 = v474 / *(_QWORD *)&v471 * *(_QWORD *)&v471;
        else
          v475 = v474 & -*(_QWORD *)&v471;
        v503 = (int8x8_t)a8[3];
        v504 = (uint8x8_t)vcnt_s8(v503);
        v504.i16[0] = vaddlv_u8(v504);
        v505 = *(_QWORD *)&v503 - 1 + v475 * v337;
        if (v504.u32[0] > 1uLL)
          v506 = v505 / *(_QWORD *)&v503 * *(_QWORD *)&v503;
        else
          v506 = v505 & -*(_QWORD *)&v503;
        v653 = v506;
        v521 = v14 + *(_QWORD *)&v471 - 1;
        if (v473 > 1)
          v522 = v521 / *(_QWORD *)&v471 * *(_QWORD *)&v471;
        else
          v522 = v521 & -*(_QWORD *)&v471;
        v535 = *(_QWORD *)&v503 - 1 + v522 * v338;
        if (v504.u32[0] > 1uLL)
          v536 = v535 / *(_QWORD *)&v503 * *(_QWORD *)&v503;
        else
          v536 = v535 & -*(_QWORD *)&v503;
        v652 = v536;
        values = CA::SurfaceUtil::create_plane_dict((CA::SurfaceUtil *)a1, v142, v337, 0, v506, 1, 1);
        htpc_plane_dict = CA::SurfaceUtil::create_plane_dict((CA::SurfaceUtil *)((a1 + 1) >> 1), v14, v338, v653, v652, 1, 1);
        plane_dict = CA::SurfaceUtil::create_plane_dict((CA::SurfaceUtil *)((a1 + 1) >> 1), v14, v338, v652 + v653, v652, 1, 1);
        v555 = CFArrayCreate(0, (const void **)&values, 3, MEMORY[0x1E0C9B378]);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBC158], v555);
        CFRelease(v555);
        CFRelease(plane_dict);
        CFRelease(htpc_plane_dict);
        CFRelease(values);
        v654 = v653 + 2 * v652;
        v190 = (a6 >> 2) & 1;
        LODWORD(v14) = v644;
        goto LABEL_915;
      }
      if ((int)a3 <= 1882469427)
      {
        if ((_DWORD)a3 != 1882468912)
        {
          v166 = 1882468914;
          goto LABEL_575;
        }
LABEL_645:
        v143 = a1;
        v144 = v14;
        v343 = (v14 + 1) >> 1;
        v344 = CA::SurfaceUtil::rowbytes_for_packed_format(v141, a3);
        v345 = a8[1];
        v346 = v345 - 1 + v344;
        if ((v345 & (v345 - 1)) != 0)
          v347 = v346 / v345 * v345;
        else
          v347 = v346 & -v345;
        v482 = (int8x8_t)a8[2];
        v483 = (uint8x8_t)vcnt_s8(v482);
        v483.i16[0] = vaddlv_u8(v483);
        v484 = v483.u32[0];
        v485 = v142 + *(_QWORD *)&v482 - 1;
        if (v483.u32[0] > 1uLL)
          v486 = v485 / *(_QWORD *)&v482 * *(_QWORD *)&v482;
        else
          v486 = v485 & -*(_QWORD *)&v482;
        v511 = (int8x8_t)a8[3];
        v512 = (uint8x8_t)vcnt_s8(v511);
        v512.i16[0] = vaddlv_u8(v512);
        v513 = *(_QWORD *)&v511 - 1 + v486 * v347;
        if (v512.u32[0] > 1uLL)
          v514 = v513 / *(_QWORD *)&v511 * *(_QWORD *)&v511;
        else
          v514 = v513 & -*(_QWORD *)&v511;
        v653 = v514;
        v525 = v343 + *(_QWORD *)&v482 - 1;
        if (v484 > 1)
          v526 = v525 / *(_QWORD *)&v482 * *(_QWORD *)&v482;
        else
          v526 = v525 & -*(_QWORD *)&v482;
        v539 = *(_QWORD *)&v511 - 1 + v526 * v347;
        if (v512.u32[0] > 1uLL)
          v540 = v539 / *(_QWORD *)&v511 * *(_QWORD *)&v511;
        else
          v540 = v539 & -*(_QWORD *)&v511;
        v652 = v540;
        values = CA::SurfaceUtil::create_plane_dict(v141, v142, v347, 0, v514, 3, 4);
        v542 = v652;
        v541 = v653;
        v543 = (CA::SurfaceUtil *)((v143 + 1) >> 1);
        v544 = v343;
        v545 = v347;
        v546 = 3;
        v547 = 8;
        goto LABEL_905;
      }
      if ((_DWORD)a3 != 1882469428)
      {
        if ((_DWORD)a3 != 1885745712)
        {
          v166 = 1885745714;
LABEL_575:
          if ((_DWORD)a3 != v166)
            goto LABEL_848;
          v277 = CA::SurfaceUtil::rowbytes_for_packed_format((CA::SurfaceUtil *)a1, a3);
          v278 = a8[1];
          v279 = v278 - 1 + v277;
          if ((v278 & (v278 - 1)) != 0)
            v280 = v279 / v278 * v278;
          else
            v280 = v279 & -v278;
          v465 = (int8x8_t)a8[2];
          v466 = (uint8x8_t)vcnt_s8(v465);
          v466.i16[0] = vaddlv_u8(v466);
          v467 = v466.u32[0];
          v468 = v14 + *(_QWORD *)&v465 - 1;
          v469 = v468 / *(_QWORD *)&v465;
          if (v466.u32[0] > 1uLL)
            v470 = v469 * *(_QWORD *)&v465;
          else
            v470 = v468 & -*(_QWORD *)&v465;
          v499 = (int8x8_t)a8[3];
          v500 = (uint8x8_t)vcnt_s8(v499);
          v500.i16[0] = vaddlv_u8(v500);
          v501 = *(_QWORD *)&v499 - 1 + v470 * v280;
          if (v500.u32[0] > 1uLL)
            v502 = v501 / *(_QWORD *)&v499 * *(_QWORD *)&v499;
          else
            v502 = v501 & -*(_QWORD *)&v499;
          v653 = v502;
          if (v467 > 1)
            v520 = v469 * *(_QWORD *)&v465;
          else
            v520 = v468 & -*(_QWORD *)&v465;
          v533 = *(_QWORD *)&v499 - 1 + v520 * v280;
          if (v500.u32[0] > 1uLL)
            v534 = v533 / *(_QWORD *)&v499 * *(_QWORD *)&v499;
          else
            v534 = v533 & -*(_QWORD *)&v499;
          v652 = v534;
          values = CA::SurfaceUtil::create_plane_dict((CA::SurfaceUtil *)a1, v14, v280, 0, v502, 3, 4);
          v549 = v652;
          v548 = v653;
          v550 = (CA::SurfaceUtil *)((a1 + 1) >> 1);
          v551 = v14;
          v552 = v280;
          goto LABEL_830;
        }
        goto LABEL_645;
      }
LABEL_643:
      v339 = CA::SurfaceUtil::rowbytes_for_packed_format((CA::SurfaceUtil *)a1, a3);
      v340 = a8[1];
      v341 = v340 - 1 + v339;
      if ((v340 & (v340 - 1)) != 0)
        v342 = v341 / v340 * v340;
      else
        v342 = v341 & -v340;
      v476 = (int8x8_t)a8[2];
      v477 = (uint8x8_t)vcnt_s8(v476);
      v477.i16[0] = vaddlv_u8(v477);
      v478 = v477.u32[0];
      v479 = v14 + *(_QWORD *)&v476 - 1;
      v480 = v479 / *(_QWORD *)&v476;
      if (v477.u32[0] > 1uLL)
        v481 = v480 * *(_QWORD *)&v476;
      else
        v481 = v479 & -*(_QWORD *)&v476;
      v507 = (int8x8_t)a8[3];
      v508 = (uint8x8_t)vcnt_s8(v507);
      v508.i16[0] = vaddlv_u8(v508);
      v509 = *(_QWORD *)&v507 - 1 + v481 * v342;
      if (v508.u32[0] > 1uLL)
        v510 = v509 / *(_QWORD *)&v507 * *(_QWORD *)&v507;
      else
        v510 = v509 & -*(_QWORD *)&v507;
      v653 = v510;
      v523 = 2 * v342;
      if (v478 > 1)
        v524 = v480 * *(_QWORD *)&v476;
      else
        v524 = v479 & -*(_QWORD *)&v476;
      v537 = *(_QWORD *)&v507 - 1 + v524 * v523;
      if (v508.u32[0] > 1uLL)
        v538 = v537 / *(_QWORD *)&v507 * *(_QWORD *)&v507;
      else
        v538 = v537 & -*(_QWORD *)&v507;
      v652 = v538;
      values = CA::SurfaceUtil::create_plane_dict((CA::SurfaceUtil *)a1, v14, v342, 0, v510, 3, 4);
      v549 = v652;
      v548 = v653;
      v550 = (CA::SurfaceUtil *)a1;
      v551 = v14;
      v552 = v523;
LABEL_830:
      v553 = 3;
      v554 = 8;
      goto LABEL_911;
    }
    if ((int)a3 <= 1886680625)
    {
      if ((int)a3 <= 1886676529)
      {
        if ((_DWORD)a3 == 1885746228)
          goto LABEL_643;
        v161 = 26160;
LABEL_539:
        if ((_DWORD)a3 != (v161 | 0x70740000))
          goto LABEL_848;
        if (!v641)
        {
          v143 = a1;
          v144 = v14;
          v562 = (v14 + 1) >> 1;
          v563 = CA::SurfaceUtil::rowbytes_for_packed_format(v141, a3);
          v564 = a8[1];
          v565 = v564 - 1 + v563;
          if ((v564 & (v564 - 1)) != 0)
            v566 = v565 / v564 * v564;
          else
            v566 = v565 & -v564;
          v583 = (int8x8_t)a8[2];
          v584 = (uint8x8_t)vcnt_s8(v583);
          v584.i16[0] = vaddlv_u8(v584);
          v585 = v584.u32[0];
          v586 = v142 + *(_QWORD *)&v583 - 1;
          if (v584.u32[0] > 1uLL)
            v587 = v586 / *(_QWORD *)&v583 * *(_QWORD *)&v583;
          else
            v587 = v586 & -*(_QWORD *)&v583;
          v600 = (int8x8_t)a8[3];
          v601 = (uint8x8_t)vcnt_s8(v600);
          v601.i16[0] = vaddlv_u8(v601);
          v602 = *(_QWORD *)&v600 - 1 + v587 * v566;
          if (v601.u32[0] > 1uLL)
            v603 = v602 / *(_QWORD *)&v600 * *(_QWORD *)&v600;
          else
            v603 = v602 & -*(_QWORD *)&v600;
          v653 = v603;
          v612 = v562 + *(_QWORD *)&v583 - 1;
          if (v585 > 1)
            v613 = v612 / *(_QWORD *)&v583 * *(_QWORD *)&v583;
          else
            v613 = v612 & -*(_QWORD *)&v583;
          v617 = *(_QWORD *)&v600 - 1 + v613 * v566;
          if (v601.u32[0] > 1uLL)
            v618 = v617 / *(_QWORD *)&v600 * *(_QWORD *)&v600;
          else
            v618 = v617 & -*(_QWORD *)&v600;
          v652 = v618;
          values = CA::SurfaceUtil::create_plane_dict(v141, v142, v566, 0, v603, 5, 8);
          v542 = v652;
          v541 = v653;
          v543 = (CA::SurfaceUtil *)((v143 + 1) >> 1);
          v544 = v562;
          v545 = v566;
          v546 = 5;
          v547 = 16;
          goto LABEL_905;
        }
        if (x_log_hook_p())
          goto LABEL_649;
        v251 = x_log_category_utilities;
        if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
          goto LABEL_848;
        *(_WORD *)buf = 0;
        v252 = "12-bit packed linear YUV formats unsupported on this platform.";
        goto LABEL_847;
      }
      if ((_DWORD)a3 != 1886676530)
      {
        if ((_DWORD)a3 != 1886676532)
        {
          v161 = 30256;
          goto LABEL_539;
        }
        goto LABEL_626;
      }
      goto LABEL_647;
    }
    if ((int)a3 <= 1919365991)
    {
      if ((_DWORD)a3 != 1886680626)
      {
        if ((_DWORD)a3 != 1886680628)
          goto LABEL_848;
LABEL_626:
        if (v641)
        {
          if (x_log_hook_p())
            goto LABEL_649;
          v251 = x_log_category_utilities;
          if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
            goto LABEL_848;
          *(_WORD *)buf = 0;
          v252 = "12-bit packed linear YUV formats unsupported on this platform.";
          goto LABEL_847;
        }
        v567 = CA::SurfaceUtil::rowbytes_for_packed_format((CA::SurfaceUtil *)a1, a3);
        v568 = a8[1];
        v569 = v568 - 1 + v567;
        if ((v568 & (v568 - 1)) != 0)
          v570 = v569 / v568 * v568;
        else
          v570 = v569 & -v568;
        v588 = (int8x8_t)a8[2];
        v589 = (uint8x8_t)vcnt_s8(v588);
        v589.i16[0] = vaddlv_u8(v589);
        v590 = v589.u32[0];
        v591 = v14 + *(_QWORD *)&v588 - 1;
        v592 = v591 / *(_QWORD *)&v588;
        if (v589.u32[0] > 1uLL)
          v593 = v592 * *(_QWORD *)&v588;
        else
          v593 = v591 & -*(_QWORD *)&v588;
        v604 = (int8x8_t)a8[3];
        v605 = (uint8x8_t)vcnt_s8(v604);
        v605.i16[0] = vaddlv_u8(v605);
        v606 = *(_QWORD *)&v604 - 1 + v593 * v570;
        if (v605.u32[0] > 1uLL)
          v607 = v606 / *(_QWORD *)&v604 * *(_QWORD *)&v604;
        else
          v607 = v606 & -*(_QWORD *)&v604;
        v653 = v607;
        v614 = 2 * v570;
        if (v590 > 1)
          v615 = v592 * *(_QWORD *)&v588;
        else
          v615 = v591 & -*(_QWORD *)&v588;
        v619 = *(_QWORD *)&v604 - 1 + v615 * v614;
        if (v605.u32[0] > 1uLL)
          v620 = v619 / *(_QWORD *)&v604 * *(_QWORD *)&v604;
        else
          v620 = v619 & -*(_QWORD *)&v604;
        v652 = v620;
        values = CA::SurfaceUtil::create_plane_dict((CA::SurfaceUtil *)a1, v14, v570, 0, v607, 5, 8);
        v549 = v652;
        v548 = v653;
        v550 = (CA::SurfaceUtil *)a1;
        v551 = v14;
        v552 = v614;
LABEL_910:
        v553 = 5;
        v554 = 16;
        goto LABEL_911;
      }
LABEL_647:
      if (v641)
      {
        if (x_log_hook_p())
          goto LABEL_649;
        v251 = x_log_category_utilities;
        if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
          goto LABEL_848;
        *(_WORD *)buf = 0;
        v252 = "12-bit packed linear YUV formats unsupported on this platform.";
        goto LABEL_847;
      }
      v571 = CA::SurfaceUtil::rowbytes_for_packed_format((CA::SurfaceUtil *)a1, a3);
      v572 = a8[1];
      v573 = v572 - 1 + v571;
      if ((v572 & (v572 - 1)) != 0)
        v574 = v573 / v572 * v572;
      else
        v574 = v573 & -v572;
      v594 = (int8x8_t)a8[2];
      v595 = (uint8x8_t)vcnt_s8(v594);
      v595.i16[0] = vaddlv_u8(v595);
      v596 = v595.u32[0];
      v597 = v14 + *(_QWORD *)&v594 - 1;
      v598 = v597 / *(_QWORD *)&v594;
      if (v595.u32[0] > 1uLL)
        v599 = v598 * *(_QWORD *)&v594;
      else
        v599 = v597 & -*(_QWORD *)&v594;
      v608 = (int8x8_t)a8[3];
      v609 = (uint8x8_t)vcnt_s8(v608);
      v609.i16[0] = vaddlv_u8(v609);
      v610 = *(_QWORD *)&v608 - 1 + v599 * v574;
      if (v609.u32[0] > 1uLL)
        v611 = v610 / *(_QWORD *)&v608 * *(_QWORD *)&v608;
      else
        v611 = v610 & -*(_QWORD *)&v608;
      v653 = v611;
      if (v596 > 1)
        v616 = v598 * *(_QWORD *)&v594;
      else
        v616 = v597 & -*(_QWORD *)&v594;
      v621 = *(_QWORD *)&v608 - 1 + v616 * v574;
      if (v609.u32[0] > 1uLL)
        v622 = v621 / *(_QWORD *)&v608 * *(_QWORD *)&v608;
      else
        v622 = v621 & -*(_QWORD *)&v608;
      v652 = v622;
      values = CA::SurfaceUtil::create_plane_dict((CA::SurfaceUtil *)a1, v14, v574, 0, v611, 5, 8);
      v549 = v652;
      v548 = v653;
      v550 = (CA::SurfaceUtil *)((a1 + 1) >> 1);
      v551 = v14;
      v552 = v574;
      goto LABEL_910;
    }
    if ((_DWORD)a3 == 1919365992)
    {
      v444 = a8[1];
      v445 = v444 - 1 + 2 * a1;
      v446 = v445 / v444 * v444;
      v447 = v445 & -v444;
      if ((v444 & (v444 - 1)) != 0)
        v448 = v446;
      else
        v448 = v447;
      v449 = v448 * v14;
      values = CA::SurfaceUtil::create_plane_dict((CA::SurfaceUtil *)a1, v14, v448, 0, v449, 1, 2);
      htpc_plane_dict = CA::SurfaceUtil::create_plane_dict((CA::SurfaceUtil *)a1, v14, v448, v449, v449, 1, 2);
      plane_dict = CA::SurfaceUtil::create_plane_dict((CA::SurfaceUtil *)a1, v14, v448, 2 * v449, v449, 1, 2);
      v450 = CFArrayCreate(0, (const void **)&values, 3, MEMORY[0x1E0C9B378]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBC158], v450);
      CFRelease(v450);
      CFRelease(values);
      CFRelease(htpc_plane_dict);
      CFRelease(plane_dict);
      v654 = 3 * v449;
      v190 = (a6 >> 2) & 1;
      LODWORD(a3) = 1919365992;
      goto LABEL_915;
    }
    if ((_DWORD)a3 != 1932550515)
    {
      v151 = 1932681587;
      goto LABEL_519;
    }
    goto LABEL_581;
  }
  if ((int)a3 <= 1027423536)
  {
    if ((int)a3 <= 875704933)
    {
      if ((int)a3 > 846624120)
      {
        if ((_DWORD)a3 != 846624121)
        {
          if ((_DWORD)a3 == 875704422 || (_DWORD)a3 == 875704438)
          {
            v143 = a1;
            v144 = v14;
            v145 = (v14 + 1) >> 1;
            v146 = a8[1];
            v147 = (unint64_t)v141 + v146 - 1;
            if ((v146 & (v146 - 1)) != 0)
              v148 = v147 / v146 * v146;
            else
              v148 = v147 & -v146;
            v391 = (int8x8_t)a8[2];
            v392 = (uint8x8_t)vcnt_s8(v391);
            v392.i16[0] = vaddlv_u8(v392);
            v393 = v392.u32[0];
            v394 = v142 + *(_QWORD *)&v391 - 1;
            if (v392.u32[0] > 1uLL)
              v395 = v394 / *(_QWORD *)&v391 * *(_QWORD *)&v391;
            else
              v395 = v394 & -*(_QWORD *)&v391;
            v487 = (int8x8_t)a8[3];
            v488 = (uint8x8_t)vcnt_s8(v487);
            v488.i16[0] = vaddlv_u8(v488);
            v489 = *(_QWORD *)&v487 - 1 + v395 * v148;
            if (v488.u32[0] > 1uLL)
              v490 = v489 / *(_QWORD *)&v487 * *(_QWORD *)&v487;
            else
              v490 = v489 & -*(_QWORD *)&v487;
            v653 = v490;
            v515 = v145 + *(_QWORD *)&v391 - 1;
            if (v393 > 1)
              v516 = v515 / *(_QWORD *)&v391 * *(_QWORD *)&v391;
            else
              v516 = v515 & -*(_QWORD *)&v391;
            v527 = *(_QWORD *)&v487 - 1 + v516 * v148;
            if (v488.u32[0] > 1uLL)
              v528 = v527 / *(_QWORD *)&v487 * *(_QWORD *)&v487;
            else
              v528 = v527 & -*(_QWORD *)&v487;
            v652 = v528;
            values = CA::SurfaceUtil::create_plane_dict(v141, v142, v148, 0, v490, 1, 1);
            v542 = v652;
            v541 = v653;
            v543 = (CA::SurfaceUtil *)((v143 + 1) >> 1);
            v544 = v145;
            v545 = v148;
            v546 = 1;
            v547 = 2;
LABEL_905:
            htpc_plane_dict = CA::SurfaceUtil::create_plane_dict(v543, v544, v545, v541, v542, v546, v547);
            v623 = CFArrayCreate(0, (const void **)&values, 2, MEMORY[0x1E0C9B378]);
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBC158], v623);
            CFRelease(v623);
            CFRelease(htpc_plane_dict);
            CFRelease(values);
            v654 = v652 + v653;
            v190 = (a6 >> 2) & 1;
            LODWORD(v14) = v144;
            a1 = v143;
            goto LABEL_915;
          }
LABEL_848:
          CFRelease(Mutable);
          return 0;
        }
        goto LABEL_463;
      }
      if ((_DWORD)a3 != 32)
      {
        if ((_DWORD)a3 == 843264104)
        {
          v176 = a8[1];
          v177 = v176 - 1 + 4 * a1;
          v178 = v177 / v176 * v176;
          v179 = v177 & -v176;
          if ((v176 & (v176 - 1)) != 0)
            v180 = v178;
          else
            v180 = v179;
          CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF00], 4);
          CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF08], v180);
          v181 = a8[2];
          v182 = a8[3];
          v183 = v181 - 1 + v14;
          v184 = v183 / v181 * v181;
          v185 = v183 & -v181;
          if ((v181 & (v181 - 1)) != 0)
            v186 = v184;
          else
            v186 = v185;
          v187 = v182 - 1 + v186 * v180;
          v188 = v187 / v182 * v182;
          v189 = v187 & -v182;
          if ((v182 & (v182 - 1)) != 0)
            v189 = v188;
          v654 = v189;
          v190 = (a6 >> 2) & 1;
          LODWORD(a3) = 843264104;
          goto LABEL_915;
        }
        goto LABEL_848;
      }
      goto LABEL_503;
    }
    if ((int)a3 <= 875836467)
    {
      if ((_DWORD)a3 != 875704934 && (_DWORD)a3 != 875704950)
        goto LABEL_848;
      v253 = a8[1];
      v254 = v253 - 1 + a1;
      if ((v253 & (v253 - 1)) != 0)
        v255 = v254 / v253 * v253;
      else
        v255 = v254 & -v253;
      v459 = (int8x8_t)a8[2];
      v460 = (uint8x8_t)vcnt_s8(v459);
      v460.i16[0] = vaddlv_u8(v460);
      v461 = v460.u32[0];
      v462 = v14 + *(_QWORD *)&v459 - 1;
      v463 = v462 / *(_QWORD *)&v459;
      if (v460.u32[0] > 1uLL)
        v464 = v463 * *(_QWORD *)&v459;
      else
        v464 = v462 & -*(_QWORD *)&v459;
      v495 = (int8x8_t)a8[3];
      v496 = (uint8x8_t)vcnt_s8(v495);
      v496.i16[0] = vaddlv_u8(v496);
      v497 = *(_QWORD *)&v495 - 1 + v464 * v255;
      if (v496.u32[0] > 1uLL)
        v498 = v497 / *(_QWORD *)&v495 * *(_QWORD *)&v495;
      else
        v498 = v497 & -*(_QWORD *)&v495;
      v653 = v498;
      if (v461 > 1)
        v519 = v463 * *(_QWORD *)&v459;
      else
        v519 = v462 & -*(_QWORD *)&v459;
      v531 = *(_QWORD *)&v495 - 1 + v519 * v255;
      if (v496.u32[0] > 1uLL)
        v532 = v531 / *(_QWORD *)&v495 * *(_QWORD *)&v495;
      else
        v532 = v531 & -*(_QWORD *)&v495;
      v652 = v532;
      values = CA::SurfaceUtil::create_plane_dict((CA::SurfaceUtil *)a1, v14, v255, 0, v498, 1, 1);
      v549 = v652;
      v548 = v653;
      v550 = (CA::SurfaceUtil *)((a1 + 1) >> 1);
      v551 = v14;
      v552 = v255;
LABEL_823:
      v553 = 1;
      v554 = 2;
LABEL_911:
      htpc_plane_dict = CA::SurfaceUtil::create_plane_dict(v550, v551, v552, v548, v549, v553, v554);
LABEL_912:
      v624 = CFArrayCreate(0, (const void **)&values, 2, MEMORY[0x1E0C9B378]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBC158], v624);
      CFRelease(v624);
      CFRelease(htpc_plane_dict);
      CFRelease(values);
      v233 = v652 + v653;
      goto LABEL_913;
    }
    if ((_DWORD)a3 != 875836468)
    {
      if ((_DWORD)a3 != 875836518 && (_DWORD)a3 != 875836534)
        goto LABEL_848;
      v163 = a8[1];
      v164 = v163 - 1 + a1;
      if ((v163 & (v163 - 1)) != 0)
        v165 = v164 / v163 * v163;
      else
        v165 = v164 & -v163;
      v422 = (int8x8_t)a8[2];
      v423 = (uint8x8_t)vcnt_s8(v422);
      v423.i16[0] = vaddlv_u8(v423);
      v424 = v423.u32[0];
      v425 = v14 + *(_QWORD *)&v422 - 1;
      v426 = v425 / *(_QWORD *)&v422;
      if (v423.u32[0] > 1uLL)
        v427 = v426 * *(_QWORD *)&v422;
      else
        v427 = v425 & -*(_QWORD *)&v422;
      v491 = (int8x8_t)a8[3];
      v492 = (uint8x8_t)vcnt_s8(v491);
      v492.i16[0] = vaddlv_u8(v492);
      v493 = *(_QWORD *)&v491 - 1 + v427 * v165;
      if (v492.u32[0] > 1uLL)
        v494 = v493 / *(_QWORD *)&v491 * *(_QWORD *)&v491;
      else
        v494 = v493 & -*(_QWORD *)&v491;
      v653 = v494;
      v517 = 2 * v165;
      if (v424 > 1)
        v518 = v426 * *(_QWORD *)&v422;
      else
        v518 = v425 & -*(_QWORD *)&v422;
      v529 = *(_QWORD *)&v491 - 1 + v518 * v517;
      if (v492.u32[0] > 1uLL)
        v530 = v529 / *(_QWORD *)&v491 * *(_QWORD *)&v491;
      else
        v530 = v529 & -*(_QWORD *)&v491;
      v652 = v530;
      values = CA::SurfaceUtil::create_plane_dict((CA::SurfaceUtil *)a1, v14, v165, 0, v494, 1, 1);
      v549 = v652;
      v548 = v653;
      v550 = (CA::SurfaceUtil *)a1;
      v551 = v14;
      v552 = v517;
      goto LABEL_823;
    }
    goto LABEL_610;
  }
  if ((int)a3 <= 1278555444)
  {
    if ((int)a3 > 1093677111)
    {
      if ((_DWORD)a3 == 1093677112)
      {
LABEL_407:
        v152 = a8[1];
        v153 = v152 - 1 + a1;
        v154 = v153 / v152 * v152;
        v155 = v153 & -v152;
        v156 = a8;
        if ((v152 & (v152 - 1)) != 0)
          v157 = v154;
        else
          v157 = v155;
        v158 = (const void *)*MEMORY[0x1E0CBBF00];
        v159 = Mutable;
        v160 = 1;
        goto LABEL_654;
      }
      if ((_DWORD)a3 != 1111970369)
      {
        if ((_DWORD)a3 != 1278226488)
          goto LABEL_848;
        goto LABEL_407;
      }
LABEL_503:
      v219 = a8[1];
      v220 = v219 - 1 + 4 * a1;
      v221 = v220 / v219 * v219;
      v222 = v220 & -v219;
      if ((v219 & (v219 - 1)) != 0)
        v223 = v221;
      else
        v223 = v222;
LABEL_506:
      v224 = (v223 + 255) & 0xFFFFFFFFFFFFFF00;
      CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF00], 4);
      CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF08], v224);
      v225 = a8[2];
      v226 = a8[3];
      v227 = v225 - 1 + v14;
      v228 = v227 / v225 * v225;
      v229 = v227 & -v225;
      if ((v225 & (v225 - 1)) != 0)
        v230 = v228;
      else
        v230 = v229;
      v231 = v226 - 1 + v230 * v224;
      v232 = v231 / v226 * v226;
      v233 = v231 & -v226;
      if ((v226 & (v226 - 1)) != 0)
        v233 = v232;
      goto LABEL_913;
    }
    if ((_DWORD)a3 != 1027423537 && (_DWORD)a3 != 1027423539)
      goto LABEL_848;
    if (!v641)
    {
      v559 = a8[1];
      v560 = v559 - 1 + 4 * a1;
      v561 = v560 / v559 * v559;
      v223 = v560 & -v559;
      if ((v559 & (v559 - 1)) != 0)
        v223 = v561;
      goto LABEL_506;
    }
    if (x_log_hook_p())
    {
LABEL_649:
      x_log_();
      goto LABEL_848;
    }
    v251 = x_log_category_utilities;
    if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
      goto LABEL_848;
    *(_WORD *)buf = 0;
    v252 = "YUV passthrough formats unsupported on this platform.";
LABEL_847:
    _os_log_impl(&dword_184457000, v251, OS_LOG_TYPE_DEFAULT, v252, buf, 2u);
    goto LABEL_848;
  }
  if ((int)a3 <= 1279340599)
  {
    if ((_DWORD)a3 != 1278555445 && (_DWORD)a3 != 1278555701)
      goto LABEL_848;
LABEL_610:
    v305 = a8[1];
    v306 = v305 - 1 + 2 * a1;
    v307 = v306 / v305 * v305;
    v308 = v306 & -v305;
    v156 = a8;
    if ((v305 & (v305 - 1)) != 0)
      v157 = v307;
    else
      v157 = v308;
    v158 = (const void *)*MEMORY[0x1E0CBBF00];
    v159 = Mutable;
    v160 = 2;
LABEL_654:
    CA_CFDictionarySetInt(v159, v158, v160);
    CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF08], v157);
    v352 = v156[2];
    v353 = v352 - 1 + v14;
    if ((v352 & (v352 - 1)) != 0)
      v354 = v353 / v352 * v352;
    else
      v354 = v353 & -v352;
    v355 = v648;
    v357 = v646;
    v356 = v647;
    v358 = a8[3];
    v359 = v358 - 1 + v354 * v157;
    if ((v358 & (v358 - 1)) != 0)
      v360 = v359 / v358 * v358;
    else
      v360 = v359 & -v358;
    v361 = a6;
    goto LABEL_661;
  }
  if ((_DWORD)a3 != 1279340600)
  {
    if ((_DWORD)a3 == 1378955371)
      goto LABEL_503;
    v150 = 1380401729;
LABEL_449:
    if ((_DWORD)a3 != v150)
      goto LABEL_848;
    goto LABEL_503;
  }
  v428 = a8[1];
  v429 = v428 - 1 + 2 * a1;
  v430 = v429 / v428 * v428;
  v431 = v429 & -v428;
  if ((v428 & (v428 - 1)) != 0)
    v432 = v430;
  else
    v432 = v431;
  CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF00], 2);
  CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF08], v432);
  v433 = a8[2];
  v434 = v433 - 1 + v14;
  if ((v433 & (v433 - 1)) != 0)
    v435 = v434 / v433 * v433;
  else
    v435 = v434 & -v433;
  v355 = v648;
  v357 = v646;
  v356 = v647;
  v575 = a8[3];
  v576 = v575 - 1 + v435 * v432;
  if ((v575 & (v575 - 1)) != 0)
    v577 = v576 / v575 * v575;
  else
    v577 = v576 & -v575;
  v654 = v577;
  v190 = (a6 >> 2) & 1;
  LODWORD(a3) = 1279340600;
LABEL_916:
  CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBC1E0], a1);
  CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBC008], v14);
  CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBC070], a3);
  CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF10], v357);
  CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBEE0], v654);
  CA_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBC020], v356);
  if (v355)
    CA_CFDictionarySetLongLong(Mutable, (const void *)*MEMORY[0x1E0CBC1A0], v355);
  v625 = (const void *)*MEMORY[0x1E0C9AE50];
  if ((a6 & 0x10) != 0)
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBC190], (const void *)*MEMORY[0x1E0C9AE50]);
  if (v190)
    v626 = v625;
  else
    v626 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBC068], v626);
  if ((a6 & 2) != 0)
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBC040], CFSTR("PurpleGfxMem"));
  if ((a6 & 0x40) != 0)
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBC1C0], v625);
  v627 = IOSurfaceCreate(Mutable);
  CFRelease(Mutable);
  if (!v627)
  {
    if (x_log_hook_p())
    {
      if ((a3 & 0x80000000) != 0)
        __maskrune(BYTE3(a3), 0x40000uLL);
      if (BYTE2(a3) > 0x7Fu)
        __maskrune(BYTE2(a3), 0x40000uLL);
      if (BYTE1(a3) > 0x7Fu)
        __maskrune(BYTE1(a3), 0x40000uLL);
      if (a3 > 0x7Fu)
        __maskrune(a3, 0x40000uLL);
      x_log_();
    }
    else
    {
      v628 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
      {
        v629 = BYTE3(a3);
        v630 = MEMORY[0x1E0C80978];
        if ((a3 & 0x80000000) != 0)
          v631 = __maskrune(v629, 0x40000uLL);
        else
          v631 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v629 + 60) & 0x40000;
        if (v631)
          v632 = (int)a3 >> 24;
        else
          v632 = 32;
        if (BYTE2(a3) <= 0x7Fu)
          v633 = *(_DWORD *)(v630 + 4 * BYTE2(a3) + 60) & 0x40000;
        else
          v633 = __maskrune(BYTE2(a3), 0x40000uLL);
        if (v633)
          v634 = SBYTE2(a3);
        else
          v634 = 32;
        if (BYTE1(a3) <= 0x7Fu)
          v635 = *(_DWORD *)(v630 + 4 * BYTE1(a3) + 60) & 0x40000;
        else
          v635 = __maskrune(BYTE1(a3), 0x40000uLL);
        if (v635)
          v636 = SBYTE1(a3);
        else
          v636 = 32;
        if (a3 <= 0x7Fu)
          v637 = *(_DWORD *)(v630 + 4 * a3 + 60) & 0x40000;
        else
          v637 = __maskrune(a3, 0x40000uLL);
        v638 = (char)a3;
        *(_DWORD *)buf = 67110400;
        if (!v637)
          v638 = 32;
        *(_DWORD *)&buf[4] = a1;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v14;
        *(_WORD *)&buf[14] = 1024;
        LODWORD(v656) = v632;
        WORD2(v656) = 1024;
        *(_DWORD *)((char *)&v656 + 6) = v634;
        WORD5(v656) = 1024;
        HIDWORD(v656) = v636;
        LOWORD(v657) = 1024;
        *(_DWORD *)((char *)&v657 + 2) = v638;
        _os_log_impl(&dword_184457000, v628, OS_LOG_TYPE_ERROR, "CAIOSurfaceCreate: failed to allocate IOSurface (size: %u x %u, format: %c%c%c%c)\n", buf, 0x26u);
      }
    }
    return 0;
  }
  if (a9)
    IOSurfaceSetValue(v627, (CFStringRef)*MEMORY[0x1E0CBC048], a9);
  v662 = 0;
  v660 = 0u;
  v661 = 0u;
  v658 = 0u;
  v659 = 0u;
  v656 = 0u;
  v657 = 0u;
  *(_OWORD *)buf = 0u;
  *(_WORD *)((char *)&v658 + 11) = 3329;
  IOSurfaceSetBulkAttachments2();
  return v627;
}

