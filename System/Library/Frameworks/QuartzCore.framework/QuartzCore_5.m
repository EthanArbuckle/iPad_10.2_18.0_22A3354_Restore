uint64_t CA::Render::EmitterState::update_cells(CA::Render::EmitterState *a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, float a7)
{
  CA::Render::EmitterState *v8;
  size_t v10;
  size_t v13;
  size_t v14;
  uint64_t *v15;
  malloc_zone_t *malloc_zone;
  CA::Render::EmitterState *v17;
  size_t v18;
  uint64_t *v19;
  CA::Render::EmitterState *v20;
  size_t v21;
  uint64_t v22;
  size_t v23;
  CA::Render::EmitterState **v24;
  malloc_zone_t *v25;
  size_t v26;
  Cell **v27;
  Cell *v28;
  malloc_zone_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  double *v38;
  CA::Render::Timing *v39;
  float v40;
  double v41;
  int v42;
  double v43;
  uint64_t v44;
  float *v45;
  double v46;
  uint64_t v47;
  float v48;
  float v49;
  double v50;
  double v51;
  float v52;
  float v53;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  float v60;
  double v61;
  int v62;
  BOOL v63;
  int v64;
  uint64_t result;
  uint64_t v66;
  size_t v67;
  double *v68;
  _QWORD block[13];

  v68 = a2;
  v8 = a1;
  block[11] = *MEMORY[0x1E0C80C00];
  if (!a3 || (v10 = *(unsigned int *)(a3 + 16), !(_DWORD)v10))
  {
    CA::Render::EmitterState::free_cells_state(a1, a4);
    result = 0;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    return result;
  }
  v13 = *(unsigned int *)(a4 + 8);
  v14 = 8 * v10;
  v67 = *(unsigned int *)(a3 + 16);
  v66 = a5;
  if ((_DWORD)v13 != (_DWORD)v10)
  {
    v15 = *(uint64_t **)a4;
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    a1 = (CA::Render::EmitterState *)malloc_type_zone_malloc(malloc_zone, 8 * v10, 0x8BB15036uLL);
    v17 = a1;
    if (v13 >= v10)
      v18 = v10;
    else
      v18 = v13;
    if (v18)
    {
      v19 = v15;
      v20 = a1;
      v21 = v18;
      do
      {
        v22 = *v19++;
        *(_QWORD *)v20 = v22;
        v20 = (CA::Render::EmitterState *)((char *)v20 + 8);
        --v21;
      }
      while (v21);
    }
    if (v13 < v10)
    {
      v23 = v10 - v18;
      v24 = (CA::Render::EmitterState **)((char *)a1 + 8 * v18);
      do
      {
        v25 = (malloc_zone_t *)get_malloc_zone();
        a1 = (CA::Render::EmitterState *)malloc_type_zone_calloc(v25, 1uLL, 0x28uLL, 0x743898A5uLL);
        *v24++ = a1;
        *((_DWORD *)a1 + 6) = 1176256512;
        --v23;
      }
      while (v23);
      v18 = v67;
    }
    v26 = v13 - v18;
    if (v13 > v18)
    {
      v27 = (Cell **)&v15[v18];
      do
      {
        v28 = *v27++;
        CA::Render::EmitterState::free_cell_state(v8, v28);
        --v26;
      }
      while (v26);
    }
    if ((_DWORD)v13)
    {
      v29 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v29, v15);
    }
    v10 = v67;
    *(_DWORD *)(a4 + 8) = v67;
    *(_QWORD *)a4 = v17;
  }
  v30 = a3 + 24;
  MEMORY[0x1E0C80A78](a1);
  v31 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFF0);
  bzero(v31, v14);
  MEMORY[0x1E0C80A78](v32);
  bzero(v31, v14);
  v33 = 0;
  if (v10 <= 1)
    v10 = 1;
  v34 = 0.0;
  do
  {
    v35 = *(_QWORD *)(v30 + 8 * v33);
    v36 = *(_QWORD *)(*(_QWORD *)a4 + 8 * v33);
    v37 = *(float *)(v35 + 72);
    v38 = (double *)&v31[8 * v33];
    *v38 = a6;
    v39 = *(CA::Render::Timing **)(v35 + 56);
    if (v39 && (CA::Render::Timing::map_time(v39, (double *)&v31[8 * v33], 0) & 1) == 0)
    {
      *v38 = -1.0;
      v61 = *(double *)(*(_QWORD *)(v35 + 56) + 40);
      if (v61 > a6)
        *v68 = fmin(*v68, v61);
LABEL_57:
      *(_QWORD *)&v31[8 * v33] = 0;
      *(_QWORD *)v36 = 0;
      goto LABEL_58;
    }
    v40 = v37 * a7;
    if ((float)(v37 * a7) <= 0.0)
      goto LABEL_57;
    if (v34 <= v40)
      v34 = v37 * a7;
    v41 = (float)(1.0 / v40);
    *(double *)&v31[8 * v33] = v41;
    v42 = *((unsigned __int8 *)v8 + 129);
    if (!*((_BYTE *)v8 + 129))
    {
      v41 = -v41;
      *(double *)&v31[8 * v33] = v41;
    }
    if (*(unsigned __int8 *)(v36 + 36) != v42 && *(_DWORD *)(v36 + 16))
    {
      v43 = -INFINITY;
      if (!v42)
        v43 = INFINITY;
      v44 = *(unsigned int *)(v36 + 20);
      if ((_DWORD)v44)
      {
        v45 = (float *)(*(_QWORD *)(v36 + 8) + 24);
        do
        {
          if (*v45 != 0.0)
          {
            v46 = *((double *)v45 - 1);
            if (v42)
              v43 = fmax(v43, v46);
            else
              v43 = fmin(v43, v46 + *v45);
          }
          v45 += 32;
          --v44;
        }
        while (v44);
      }
      v47 = *(_QWORD *)(v35 + 56);
      if (v47)
        v43 = (v43 - *(double *)(v47 + 40)) * *(float *)(v47 + 16);
      *(double *)v36 = v41 + v43;
      *(_BYTE *)(v36 + 36) = v42;
    }
    v48 = fmaxf(v40, 0.0);
    v49 = (float)(fabsf(*(float *)(v35 + 80)) + *(float *)(v35 + 76)) * *(float *)(*((_QWORD *)v8 + 17) + 80);
    v50 = *v38;
    v51 = *(double *)v36 - *v38;
    v52 = v51;
    v53 = fabsf(v52);
    if (v53 > v49 && (float)(v53 * v48) > 32.0)
    {
      v55 = v49;
      v56 = v48;
      v57 = floor((v50 + v55) * v56);
      v58 = ceil((v50 - v55) * v56);
      if (!v42)
        v58 = v57;
      v59 = v58 / v56;
      *(double *)v36 = v59;
      v51 = v59 - v50;
    }
    v60 = *(float *)(v36 + 24);
    if (fabs(v51) > fabs(v41) * v60)
    {
      *(double *)v36 = v50 - v41 * v60;
      if (v60 > 100.0)
        *(float *)(v36 + 24) = v60 * 0.5;
LABEL_54:
      *(_DWORD *)(v36 + 28) = 15;
      goto LABEL_58;
    }
    v62 = *(_DWORD *)(v36 + 28);
    v63 = __OFSUB__(v62, 1);
    v64 = v62 - 1;
    if (v64 < 0 == v63)
    {
      *(_DWORD *)(v36 + 28) = v64;
      if (!v64)
      {
        *(float *)(v36 + 24) = v60 + v60;
        if ((float)(v60 + v60) < 10000.0)
          goto LABEL_54;
        *(_QWORD *)(v36 + 24) = 1176256512;
      }
    }
LABEL_58:
    ++v33;
  }
  while (v33 != v10);
  if (v34 == 0.0 && !*(_DWORD *)(a4 + 12))
    return 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN2CA6Render12EmitterState12update_cellsEdRdPNS0_10TypedArrayINS0_11EmitterCellEEEPNS1_5CellsEPNS1_8ParticleEf_block_invoke;
  block[3] = &__block_descriptor_tmp_9030;
  block[4] = v8;
  block[5] = v30;
  block[6] = a4;
  block[7] = v31;
  block[8] = v31;
  *(double *)&block[9] = a6;
  block[10] = v66;
  dispatch_apply(v67, 0, block);
  *v68 = a6;
  return 1;
}

void CA::Render::EmitterState::free_cells_state(CA::Render::EmitterState *a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  malloc_zone_t *malloc_zone;

  if (*(_DWORD *)(a2 + 8))
  {
    v4 = 0;
    do
      CA::Render::EmitterState::free_cell_state(a1, *(Cell **)(*(_QWORD *)a2 + 8 * v4++));
    while (v4 < *(unsigned int *)(a2 + 8));
    v5 = *(void **)a2;
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v5);
  }
}

void ___ZN2CA6Render12EmitterState12update_cellsEdRdPNS0_10TypedArrayINS0_11EmitterCellEEEPNS1_5CellsEPNS1_8ParticleEf_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  int32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float32x2_t v19;
  _BOOL4 v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  float v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  float32x2_t *v33;
  float32x4_t *v34;
  uint64_t v35;
  float v36;
  float v37;
  unsigned int v38;
  float32x2_t *v39;
  float32x2_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float32x2_t v45;
  uint64_t v46;
  int v47;
  float32x2_t v48;
  float v49;
  float v50;
  int v51;
  float v52;
  float v53;
  float v54;
  unsigned int v55;
  unsigned int v56;
  float v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  float v62;
  float v63;
  float v64;
  float v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  float v69;
  float v70;
  float v71;
  unsigned int v72;
  unsigned int v73;
  float v74;
  float v75;
  float v76;
  unsigned int v77;
  float v78;
  unsigned int v79;
  float v80;
  float v81;
  unsigned int v82;
  float v83;
  float32x2_t v84;
  uint64_t v85;
  double v86;
  float64x2_t *v87;
  int v88;
  int v89;
  uint32x2_t v90;
  const CGPath *v91;
  float v92;
  unsigned int v93;
  float v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v100;
  float32x2_t v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  unsigned int v105;
  double v106;
  float32x2_t v107;
  float v108;
  unsigned int v109;
  float v110;
  int v111;
  float v112;
  uint64_t v113;
  float32x2_t v114;
  char *v115;
  float v116;
  float32x2_t v117;
  float v118;
  unsigned int v119;
  float v120;
  int v121;
  float v122;
  uint64_t v123;
  unsigned int v124;
  float v125;
  uint64_t v126;
  char *v127;
  float v128;
  float v129;
  float v130;
  unsigned int v131;
  float v132;
  unsigned int v133;
  float v134;
  float v135;
  unsigned int v136;
  float v137;
  float v141;
  float v142;
  float v143;
  unsigned int v144;
  float v145;
  float v146;
  float v147;
  float v148;
  unsigned int v149;
  float v150;
  float v151;
  unsigned int v152;
  float v153;
  float v154;
  unsigned int v155;
  int v156;
  float v157;
  float v158;
  float v160;
  float v161;
  unsigned int v162;
  unsigned int v163;
  float v164;
  float32x4_t v165;
  float v166;
  unsigned int v167;
  float v168;
  float v169;
  unsigned int v170;
  float v171;
  float v172;
  unsigned int v173;
  float v174;
  float v175;
  unsigned int v176;
  float v177;
  unsigned int v178;
  int v179;
  double v180;
  double v181;
  uint64_t v182;
  double v183;
  float v184;
  double v185;
  BOOL v186;
  float64x2_t v187;
  float64x2_t v189;
  float64x2_t *v190;
  int v191;
  float64x2_t v192;
  uint32x2_t v193;
  uint64_t v195;
  uint32x2_t *v196;
  double v197;
  float v198;
  double v199;
  uint64_t v200;
  float64x2_t v201;
  float32x2_t v202;
  float v203;
  float32x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  double v207;
  double v208;
  double v209;
  double v210;
  unsigned int v211;
  unsigned int v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  char *v216;
  void *v217;
  uint64_t v218;
  char *v219;
  float *v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  CA::Render::Path *v228;
  CGPoint point;
  unint64_t v230;
  uint64_t v231;
  float *v233;
  int v234;
  void *__p;
  char *v236;
  char *v237;
  unint64_t v238;
  float v239;
  float32x4_t v240;
  float32x4_t v241;
  uint64_t v242;

  v2 = a2;
  v242 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * a2);
  v6 = *(_QWORD *)(**(_QWORD **)(a1 + 48) + 8 * a2);
  v7 = *(double *)(*(_QWORD *)(a1 + 56) + 8 * a2);
  __p = 0;
  v236 = 0;
  v237 = 0;
  v9 = *(_BYTE **)(v4 + 144);
  v8 = *(_BYTE **)(v4 + 152);
  v10 = v8 - v9;
  if (v8 != v9)
  {
    if (v8 - v9 < 0)
      abort();
    __p = std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v10 >> 3);
    v237 = (char *)__p + 8 * v11;
    memmove(__p, v9, v10);
    v236 = (char *)__p + v10;
    v2 = a2;
  }
  v234 = *(_DWORD *)(v4 + 168);
  if (v7 < 0.0 || *(double *)(*(_QWORD *)(a1 + 64) + 8 * v2) == 0.0)
  {
    if (*(_BYTE *)(v4 + 129))
      v13 = INFINITY;
    else
      v13 = -INFINITY;
  }
  else
  {
    v13 = *(double *)v6;
  }
  v14 = vdupq_n_s32(0x7F7FFFFFu);
  v15.i64[0] = 0x80000000800000;
  v15.i64[1] = 0x80000000800000;
  v240 = (float32x4_t)v14;
  v241 = v15;
  v16 = *(_QWORD *)(v6 + 8);
  v17 = *(unsigned int *)(v6 + 16);
  v18 = v16 + ((unint64_t)*(unsigned int *)(v6 + 20) << 7);
  v19 = (float32x2_t)1065353216;
  v231 = v6;
  if (!*(_DWORD *)(v6 + 16))
    goto LABEL_11;
  do
  {
LABEL_15:
    if (v16 == v18)
    {
      v21 = *(_DWORD *)(v6 + 20);
      if (v21)
        v22 = (2 * v21);
      else
        v22 = 16;
      if (v22 > 0x20000)
        goto LABEL_220;
      v23 = v22 + (*(_DWORD *)(v4 + 84) - v21);
      if (v23 > 0x80000)
        goto LABEL_220;
      v24 = (char *)malloc_type_malloc(v22 << 7, 0x1080040F72ECE51uLL);
      if (!v24)
        goto LABEL_220;
      v25 = v24;
      v26 = *(unsigned int *)(v6 + 20);
      if ((_DWORD)v26)
      {
        memcpy(v24, *(const void **)(v6 + 8), v26 << 7);
        free(*(void **)(v6 + 8));
        LODWORD(v26) = *(_DWORD *)(v6 + 20);
      }
      v18 = (unint64_t)&v25[128 * v22];
      if (v26 < v22)
      {
        v27 = &v25[128 * (unint64_t)v26];
        do
        {
          *((_DWORD *)v27 + 6) = 0;
          v27 += 128;
        }
        while ((unint64_t)v27 < v18);
      }
      *(_QWORD *)(v6 + 8) = v25;
      *(_DWORD *)(v6 + 20) = v22;
      *(_DWORD *)(v4 + 84) = v23;
      v16 = (uint64_t)&v25[128 * (unint64_t)*(unsigned int *)(v6 + 16)];
    }
    v230 = v18;
    v28 = *(float *)(v16 + 24);
    if (v28 != 0.0)
    {
      --v17;
      *(double *)v14.i64 = *(double *)(a1 + 72) - *(double *)(v16 + 16);
      *(float *)v14.i32 = *(double *)v14.i64;
      if (*(_DWORD *)(v16 + 12) || (*(float *)v14.i32 >= 0.0 ? (v29 = v28 <= *(float *)v14.i32) : (v29 = 1), !v29))
      {
        if ((CA::Render::EmitterState::update_particle(v4, v5, v16, &v240, &__p, v234, *(float *)v14.i32) & 1) != 0)
          goto LABEL_218;
      }
      v30 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v16 + 24) = 0;
      --*(_DWORD *)(v6 + 16);
      --*(_DWORD *)(v30 + 12);
      if (*(_DWORD *)(v16 + 8))
        CA::Render::EmitterState::free_cells_state((CA::Render::EmitterState *)v4, v16);
    }
    v31 = a2;
    if (*(_BYTE *)(v4 + 129))
      v32 = v13 < v7;
    else
      v32 = v13 > v7;
    if (!v32)
      goto LABEL_218;
    v227 = v17;
    v33 = (float32x2_t *)(v16 + 32);
    v34 = (float32x4_t *)(v16 + 64);
    v233 = (float *)(v16 + 112);
    while (1)
    {
      v35 = *(_QWORD *)(a1 + 80);
      v36 = *(float *)(v5 + 76);
      v37 = *(float *)(v5 + 80);
      if (v37 != 0.0)
      {
        v38 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
        *(_DWORD *)(v4 + 28) = v38;
        v36 = v36 + (float)((float)((float)((float)HIWORD(v38) * 0.000015259) + -0.5) * v37);
      }
      *(float *)(v16 + 24) = v36;
      v39 = *(float32x2_t **)(v4 + 136);
      *(float *)(v16 + 24) = v39[10].f32[0] * v36;
      if (v35)
      {
        v40 = *(float32x2_t *)(v35 + 32);
        *(_DWORD *)(v16 + 40) = *(_DWORD *)(v35 + 40);
        *v33 = v40;
        *(_QWORD *)(v16 + 84) = *(_QWORD *)(v35 + 84);
        v41 = *(_QWORD *)(v35 + 112);
        *(_DWORD *)(v16 + 120) = *(_DWORD *)(v35 + 120);
        *(_QWORD *)v233 = v41;
        *v34 = *(float32x4_t *)(v35 + 64);
        v42 = *(_QWORD *)(v35 + 48);
        v43 = *(float *)(v35 + 56);
        v44 = 1.0
            / sqrtf((float)((float)(*(float *)&v42 * *(float *)&v42) + (float)(*((float *)&v42 + 1) * *((float *)&v42 + 1)))+ (float)(v43 * v43));
        *(float *)&v238 = v44 * *(float *)&v42;
        *((float *)&v238 + 1) = v44 * *((float *)&v42 + 1);
        v239 = v44 * v43;
        goto LABEL_151;
      }
      v45 = v39[11];
      *(_DWORD *)(v16 + 40) = v39[12].i32[0];
      *v33 = v45;
      v238 = (unint64_t)v19;
      v239 = 0.0;
      v46 = *(_QWORD *)(v4 + 136);
      v47 = *(_DWORD *)(v46 + 68);
      v14.i32[0] = 0;
      if (v47 == 488)
      {
        v48 = v19;
        v49 = *(float *)(v46 + 84);
        *(double *)v14.i64 = fmod(v13, v49);
        if (v49 >= 0.0)
        {
          if (*(double *)v14.i64 < 0.0)
            goto LABEL_51;
        }
        else
        {
          if (*(double *)v14.i64 <= 0.0)
            goto LABEL_52;
LABEL_51:
          *(double *)v14.i64 = *(double *)v14.i64 + v49;
        }
LABEL_52:
        v50 = *(double *)v14.i64;
        *(float *)v14.i32 = v50 / v49;
        v19 = v48;
      }
      v51 = *(_DWORD *)(v46 + 64);
      if (v51 <= 413)
      {
        switch(v51)
        {
          case 87:
            if (v47 == 488)
              goto LABEL_86;
            if (v47 != 428)
            {
              if (v47 == 408)
              {
                v60 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
                *(_DWORD *)(v4 + 28) = v60;
                *(float *)v14.i32 = (float)HIWORD(v60) * 0.000015259;
LABEL_86:
                CA::Render::EmitterState::point_on_circle((float *)(v16 + 32), (uint64_t)&v238, *(float *)v14.i32, *(float *)(v46 + 100) * 0.5);
                break;
              }
              v92 = *(float *)(v46 + 100) * 0.5;
              v93 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
              v94 = (float)HIWORD(v93) * 0.000015259;
              v95 = 214013 * v93 + 2531011;
              *(_DWORD *)(v4 + 28) = v95;
              CA::Render::EmitterState::point_on_circle((float *)(v16 + 32), (uint64_t)&v238, (float)HIWORD(v95) * 0.000015259, (float)(v94 * v92) / sqrtf(v94));
LABEL_122:
              v238 = (unint64_t)v19;
LABEL_123:
              v239 = 0.0;
            }
            break;
          case 153:
            if (v47 == 408)
            {
              v107 = *(float32x2_t *)(v46 + 100);
              v108 = *(float *)(v46 + 108);
              v109 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
              *(_DWORD *)(v4 + 28) = v109;
              v110 = (float)HIWORD(v109) * 0.00018311;
              v111 = vcvtms_s32_f32(v110);
              if (v111 >= 11)
                v111 = 11;
              v112 = v110 - (float)v111;
              v113 = 9 * v111;
              v114 = vadd_f32(*(float32x2_t *)((char *)&CA::Render::EmitterState::point_on_cuboid_outline(CA::Vec3<float> &,CA::Vec3<float> &,float,float,float)::outlines+ 4 * v113), (float32x2_t)0xBF000000BF000000);
              v115 = (char *)&CA::Render::EmitterState::point_on_cuboid_outline(CA::Vec3<float> &,CA::Vec3<float> &,float,float,float)::outlines
                   + 4 * (int)v113;
              *(float32x2_t *)(v16 + 32) = vmla_f32(*(float32x2_t *)(v16 + 32), v107, vmla_n_f32(v114, *(float32x2_t *)(v115 + 12), v112));
              *(float *)(v16 + 40) = *(float *)(v16 + 40)
                                   + (float)((float)((float)(*((float *)v115 + 2) + -0.5)
                                                   + (float)(*((float *)v115 + 5) * v112))
                                           * v108);
              v238 = *((_QWORD *)v115 + 3);
              v116 = *((float *)v115 + 8);
            }
            else
            {
              if (v47 != 543)
              {
                if (v47 == 428)
                {
                  v62 = *(float *)(v16 + 36);
                  v63 = *(float *)(v16 + 32) - (float)(*(float *)(v46 + 100) * 0.5);
                  *(float *)(v16 + 32) = v63;
                  v64 = v62 - (float)(*(float *)(v46 + 104) * 0.5);
                  *(float *)(v16 + 36) = v64;
                  v65 = *(float *)(v16 + 40) - (float)(*(float *)(v46 + 108) * 0.5);
                  *(float *)(v16 + 40) = v65;
                  v66 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
                  if ((float)((float)HIWORD(v66) * 0.000015259) > 0.5)
                    v33->f32[0] = *(float *)(v46 + 100) + v63;
                  v67 = 214013 * v66 + 2531011;
                  if ((float)((float)HIWORD(v67) * 0.000015259) > 0.5)
                    *(float *)(v16 + 36) = *(float *)(v46 + 104) + v64;
                  v68 = 214013 * v67 + 2531011;
                  *(_DWORD *)(v4 + 28) = v68;
                  if ((float)((float)HIWORD(v68) * 0.000015259) <= 0.5)
                    break;
                  v69 = *(float *)(v46 + 108) + v65;
                }
                else
                {
                  v128 = *(float *)(v46 + 100);
                  v129 = 0.0;
                  v130 = 0.0;
                  if (v128 != 0.0)
                  {
                    v131 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
                    *(_DWORD *)(v4 + 28) = v131;
                    v130 = (float)((float)((float)HIWORD(v131) * 0.000015259) + -0.5) * v128;
                  }
                  v132 = *(float *)(v46 + 104);
                  if (v132 != 0.0)
                  {
                    v133 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
                    *(_DWORD *)(v4 + 28) = v133;
                    v129 = (float)((float)((float)HIWORD(v133) * 0.000015259) + -0.5) * v132;
                  }
                  v134 = *(float *)(v46 + 108);
                  v135 = 0.0;
                  if (v134 != 0.0)
                  {
                    v136 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
                    *(_DWORD *)(v4 + 28) = v136;
                    v135 = (float)((float)((float)HIWORD(v136) * 0.000015259) + -0.5) * v134;
                  }
                  v137 = *(float *)(v16 + 36);
                  *(float *)(v16 + 32) = *(float *)(v16 + 32) + v130;
                  *(float *)(v16 + 36) = v137 + v129;
                  v69 = *(float *)(v16 + 40) + v135;
                }
                *(float *)(v16 + 40) = v69;
                break;
              }
              v117 = *(float32x2_t *)(v46 + 100);
              v118 = *(float *)(v46 + 108);
              v119 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
              v120 = (float)HIWORD(v119) * 0.000091554;
              v121 = vcvtms_s32_f32(v120);
              if (v121 >= 5)
                v121 = 5;
              v122 = v120 - (float)v121;
              v123 = 12 * v121;
              v124 = 214013 * v119 + 2531011;
              *(_DWORD *)(v4 + 28) = v124;
              v125 = (float)HIWORD(v124) * 0.000015259;
              v126 = 4 * v123;
              v127 = (char *)&CA::Render::EmitterState::point_on_cuboid_surface(CA::Vec3<float> &,CA::Vec3<float> &,float,float,float)::surfaces
                   + 4 * (int)v123;
              *(float32x2_t *)(v16 + 32) = vmla_f32(*(float32x2_t *)(v16 + 32), v117, vmla_n_f32(vmla_n_f32(vadd_f32(*(float32x2_t *)((char *)&CA::Render::EmitterState::point_on_cuboid_surface(CA::Vec3<float> &,CA::Vec3<float> &,float,float,float)::surfaces+ v126), (float32x2_t)0xBF000000BF000000), *(float32x2_t *)(v127 + 24), v125), *(float32x2_t *)(v127 + 12), v122));
              *(float *)(v16 + 40) = *(float *)(v16 + 40)
                                   + (float)((float)((float)((float)(*((float *)v127 + 2) + -0.5)
                                                           + (float)(*((float *)v127 + 5) * v122))
                                                   + (float)(*((float *)v127 + 8) * v125))
                                           * v118);
              v238 = *(_QWORD *)(v127 + 36);
              v116 = *((float *)v127 + 11);
            }
            v239 = v116;
            break;
          case 344:
            if (v47 == 488)
            {
              v33->f32[0] = v33->f32[0] + (float)(*(float *)(v46 + 100) * (float)(*(float *)v14.i32 + -0.5));
              v238 = 0xBF80000000000000;
              break;
            }
            if (v47 == 428)
            {
              v57 = v33->f32[0] - (float)(*(float *)(v46 + 100) * 0.5);
              v33->f32[0] = v57;
              v58 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
              *(_DWORD *)(v4 + 28) = v58;
              if ((float)((float)HIWORD(v58) * 0.000015259) > 0.5)
                v33->f32[0] = *(float *)(v46 + 100) + v57;
              break;
            }
            v70 = *(float *)(v46 + 100);
            v71 = 0.0;
            if (v70 != 0.0)
            {
              v72 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
              *(_DWORD *)(v4 + 28) = v72;
              v71 = (float)((float)((float)HIWORD(v72) * 0.000015259) + -0.5) * v70;
            }
            v33->f32[0] = v33->f32[0] + v71;
            v238 = 0xBF80000000000000;
            goto LABEL_123;
        }
      }
      else if (v51 > 448)
      {
        if (v51 == 449)
        {
          if (v47 == 488)
            goto LABEL_91;
          if (v47 != 428)
          {
            if (v47 == 408)
            {
              v61 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
              *(_DWORD *)(v4 + 28) = v61;
              *(float *)v14.i32 = (float)HIWORD(v61) * 0.000015259;
LABEL_91:
              v15.i32[0] = *(_DWORD *)(v46 + 100);
              CA::Render::EmitterState::point_on_rectangles(*(_QWORD *)(v46 + 56), (float32x2_t *)(v16 + 32), (uint64_t)&v238, *(float32x2_t *)v14.i8, *(float32x2_t *)v15.f32, *(float32_t *)(v46 + 104));
              goto LABEL_150;
            }
            v96 = *(_QWORD *)(v46 + 56);
            if (!v96)
              goto LABEL_150;
            v97 = *(unsigned int *)(v96 + 16);
            v98 = v97 / 5uLL;
            _ZF = v97 >= 5 && 5 * (v97 / 5uLL) == v97;
            if (!_ZF)
              goto LABEL_150;
            v100 = 0;
            v101 = *(float32x2_t *)(v46 + 100);
            v102 = v96 + 24;
            v103 = v102 + 32 * v98;
            v104 = *(double *)(v103 + 8 * v98 - 8);
            v105 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
            *(_DWORD *)(v4 + 28) = v105;
            *(float *)&v104 = v104 * (float)((float)HIWORD(v105) * 0.000015259);
            v106 = *(float *)&v104;
            if (v98 <= 1)
              v98 = 1;
            while (*(double *)(v103 + 8 * v100) <= v106)
            {
              if (v98 == ++v100)
                goto LABEL_150;
            }
            v190 = (float64x2_t *)(v102 + 32 * v100);
            v187 = vcvtq_f64_f32(v101);
            v191 = 214013 * v105 + 2531011;
            v192 = *v190;
            *(_DWORD *)(v4 + 28) = 214013 * v191 + 2531011;
            v193.i32[0] = v191;
            v193.i32[1] = 214013 * v191 + 2531011;
            __asm { FMOV            V4.2D, #-0.5 }
            v189 = vmlaq_f64(vaddq_f64(v192, _Q4), vcvtq_f64_f32(vmul_f32(vcvt_f32_u32(vshr_n_u32(v193, 0x10uLL)), (float32x2_t)vdup_n_s32(0x37800080u))), v190[1]);
LABEL_215:
            *v33 = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(*v33), v187, v189));
          }
        }
        else if (v51 == 516)
        {
          if (v47 == 543)
            goto LABEL_76;
          if (v47 != 428)
          {
            if (v47 != 408)
            {
              v81 = *(float *)(v46 + 100) * 0.5;
              v82 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
              *(_DWORD *)(v4 + 28) = v82;
              v83 = powf((float)HIWORD(v82) * 0.000015259, 0.33333);
              CA::Render::EmitterState::point_on_sphere(v4, v16 + 32, (uint64_t)&v238, v83 * v81);
              goto LABEL_122;
            }
LABEL_76:
            CA::Render::EmitterState::point_on_sphere(v4, v16 + 32, (uint64_t)&v238, *(float *)(v46 + 100) * 0.5);
          }
        }
      }
      else if (v51 == 414)
      {
        if (v47 == 488)
          goto LABEL_81;
        if (v47 != 428)
        {
          if (v47 != 408)
          {
            v228 = *(CA::Render::Path **)(v46 + 48);
            if (!v228)
              goto LABEL_150;
            v84 = *(float32x2_t *)(v46 + 100);
            v85 = CA::Render::Path::bounding_rect(v228);
            v86 = *(double *)(v85 + 16);
            if (v86 >= *(double *)(v85 + 24))
              v86 = *(double *)(v85 + 24);
            if (v86 <= 0.0)
              goto LABEL_150;
            v87 = (float64x2_t *)v85;
            v88 = 1000;
            while (1)
            {
              v89 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
              *(_DWORD *)(v4 + 28) = 214013 * v89 + 2531011;
              v90.i32[0] = v89;
              v90.i32[1] = 214013 * v89 + 2531011;
              point = (CGPoint)vmlaq_f64(*v87, vcvtq_f64_f32(vmul_f32(vcvt_f32_u32(vshr_n_u32(v90, 0x10uLL)), (float32x2_t)vdup_n_s32(0x37800080u))), v87[1]);
              v91 = (const CGPath *)CA::Render::Path::cg_path(v228);
              if (CGPathContainsPoint(v91, 0, point, 0))
                break;
              if (!--v88)
                goto LABEL_150;
            }
            v187 = vcvtq_f64_f32(v84);
            __asm { FMOV            V1.2D, #-0.5 }
            v189 = vaddq_f64((float64x2_t)point, _Q1);
            goto LABEL_215;
          }
          v59 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
          *(_DWORD *)(v4 + 28) = v59;
          *(float *)v14.i32 = (float)HIWORD(v59) * 0.000015259;
LABEL_81:
          CA::Render::EmitterState::point_on_path(*(CA::Render::Path **)(v46 + 48), (float32x2_t *)(v16 + 32), (uint64_t)&v238, *(float *)v14.i32, *(float *)(v46 + 100), *(float *)(v46 + 104));
        }
      }
      else if (v51 == 448)
      {
        if (v47 == 408)
        {
          v73 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
          *(_DWORD *)(v4 + 28) = v73;
          *(float *)v14.i32 = (float)HIWORD(v73) * 0.000015259;
        }
        else if (v47 != 488)
        {
          if (v47 == 428)
          {
            v52 = *(float *)(v16 + 36);
            v53 = *(float *)(v16 + 32) - (float)(*(float *)(v46 + 100) * 0.5);
            *(float *)(v16 + 32) = v53;
            v54 = v52 - (float)(*(float *)(v46 + 104) * 0.5);
            *(float *)(v16 + 36) = v54;
            v55 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
            if ((float)((float)HIWORD(v55) * 0.000015259) > 0.5)
              v33->f32[0] = *(float *)(v46 + 100) + v53;
            v56 = 214013 * v55 + 2531011;
            *(_DWORD *)(v4 + 28) = v56;
            if ((float)((float)HIWORD(v56) * 0.000015259) > 0.5)
              *(float *)(v16 + 36) = *(float *)(v46 + 104) + v54;
          }
          else
          {
            v74 = *(float *)(v46 + 100);
            v75 = 0.0;
            v76 = 0.0;
            if (v74 != 0.0)
            {
              v77 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
              *(_DWORD *)(v4 + 28) = v77;
              v76 = (float)((float)((float)HIWORD(v77) * 0.000015259) + -0.5) * v74;
            }
            v78 = *(float *)(v46 + 104);
            if (v78 != 0.0)
            {
              v79 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
              *(_DWORD *)(v4 + 28) = v79;
              v75 = (float)((float)((float)HIWORD(v79) * 0.000015259) + -0.5) * v78;
            }
            v80 = *(float *)(v16 + 36) + v75;
            *(float *)(v16 + 32) = *(float *)(v16 + 32) + v76;
            *(float *)(v16 + 36) = v80;
          }
          goto LABEL_150;
        }
        CA::Render::EmitterState::point_on_rectangle((float *)(v16 + 32), (uint64_t)&v238, *(float *)v14.i32, *(float *)(v46 + 100), *(float *)(v46 + 104));
      }
LABEL_150:
      *(_DWORD *)(v16 + 88) = 0;
      *(_QWORD *)(v16 + 112) = 0;
      *(_DWORD *)(v16 + 120) = 1065353216;
      *(_DWORD *)(v16 + 84) = *(_DWORD *)(*(_QWORD *)(v4 + 136) + 116);
      __asm { FMOV            V0.4S, #1.0 }
      *(_OWORD *)(v16 + 64) = _Q0;
      v6 = v231;
      v31 = a2;
LABEL_151:
      CA::Render::EmitterState::adjust_vector(v4, (float *)&v238, *(float *)(v5 + 88), *(float *)(v5 + 84), *(float *)(v5 + 92));
      v141 = *(float *)(v5 + 92);
      if (v141 != 0.0)
        CA::Render::EmitterState::apply_random_deviation(v4, (float *)&v238, v141);
      v142 = *(float *)(v5 + 96);
      v143 = *(float *)(v5 + 100);
      if (v143 != 0.0)
      {
        v144 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
        *(_DWORD *)(v4 + 28) = v144;
        v142 = v142 + (float)((float)((float)((float)HIWORD(v144) * 0.000015259) + -0.5) * v143);
      }
      v145 = *(float *)(*(_QWORD *)(v4 + 136) + 112) * v142;
      v146 = v239 * v145;
      *(float32x2_t *)(v16 + 48) = vmul_n_f32((float32x2_t)v238, v145);
      *(float *)(v16 + 56) = v146;
      if (*(_DWORD *)(v5 + 64) == 417)
      {
        CA::Render::EmitterState::adjust_vector(v4, v233, *(float *)(v5 + 140), *(float *)(v5 + 136), *(float *)(v5 + 144));
      }
      else
      {
        *(_QWORD *)(v16 + 112) = 0;
        *(_DWORD *)(v16 + 120) = 1065353216;
      }
      *(_DWORD *)(v16 + 44) = 1065353216;
      v147 = *(float *)(v5 + 148);
      v148 = *(float *)(v5 + 152);
      if (v148 != 0.0)
      {
        v149 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
        *(_DWORD *)(v4 + 28) = v149;
        v147 = v147 + (float)((float)((float)((float)HIWORD(v149) * 0.000015259) + -0.5) * v148);
      }
      *(float *)(v16 + 88) = *(float *)(v16 + 88) + v147;
      v150 = *(float *)(v5 + 156);
      v151 = *(float *)(v5 + 160);
      if (v151 != 0.0)
      {
        v152 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
        *(_DWORD *)(v4 + 28) = v152;
        v150 = v150 + (float)((float)((float)((float)HIWORD(v152) * 0.000015259) + -0.5) * v151);
      }
      *(float *)(v16 + 92) = v150;
      v153 = *(float *)(v5 + 124);
      v154 = *(float *)(v5 + 128);
      if (v154 != 0.0)
      {
        v155 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
        *(_DWORD *)(v4 + 28) = v155;
        v153 = v153 + (float)((float)((float)((float)HIWORD(v155) * 0.000015259) + -0.5) * v154);
      }
      *(float *)(v16 + 84) = *(float *)(v16 + 84) * v153;
      *(_DWORD *)(v16 + 124) = *(_DWORD *)(v5 + 132);
      v156 = *(_DWORD *)(v5 + 68);
      if (v156 != 444)
      {
        if (v156 != 488)
        {
          *(_DWORD *)(v16 + 80) = 0;
          goto LABEL_183;
        }
        v157 = fmaxf(*(float *)(v5 + 220), 1.0);
        v158 = *(float *)(v6 + 32);
        if (v158 >= v157 || v158 < 0.0)
          v158 = 0.0;
        *(float *)(v16 + 80) = v158;
        v160 = fmodf(v158 + 1.0, v157);
        if (v157 >= 0.0)
        {
          if (v160 >= 0.0)
          {
LABEL_182:
            *(float *)(v6 + 32) = v160;
            goto LABEL_183;
          }
        }
        else if (v160 <= 0.0)
        {
          goto LABEL_182;
        }
        v160 = v160 + v157;
        goto LABEL_182;
      }
      v161 = *(float *)(v5 + 220);
      v162 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
      *(_DWORD *)(v4 + 28) = v162;
      v163 = HIWORD(v162);
      v164 = v161 >= 1.0 ? v161 * 0.000015259 : 0.000015259;
      *(float *)(v16 + 80) = v164 * (float)v163;
LABEL_183:
      v165.i32[0] = *(_DWORD *)(v5 + 164);
      v166 = *(float *)(v5 + 180);
      if (v166 != 0.0)
      {
        v167 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
        *(_DWORD *)(v4 + 28) = v167;
        v165.f32[0] = v165.f32[0] + (float)((float)((float)((float)HIWORD(v167) * 0.000015259) + -0.5) * v166);
      }
      v168 = *(float *)(v5 + 168);
      v169 = *(float *)(v5 + 184);
      if (v169 != 0.0)
      {
        v170 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
        *(_DWORD *)(v4 + 28) = v170;
        v168 = v168 + (float)((float)((float)((float)HIWORD(v170) * 0.000015259) + -0.5) * v169);
      }
      v171 = *(float *)(v5 + 172);
      v172 = *(float *)(v5 + 188);
      if (v172 != 0.0)
      {
        v173 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
        *(_DWORD *)(v4 + 28) = v173;
        v171 = v171 + (float)((float)((float)((float)HIWORD(v173) * 0.000015259) + -0.5) * v172);
      }
      v174 = *(float *)(v5 + 176);
      v175 = *(float *)(v5 + 192);
      if (v175 != 0.0)
      {
        v176 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
        *(_DWORD *)(v4 + 28) = v176;
        v174 = v174 + (float)((float)((float)((float)HIWORD(v176) * 0.000015259) + -0.5) * v175);
      }
      v165.f32[1] = v168;
      v15 = *v34;
      v165.i64[1] = __PAIR64__(LODWORD(v174), LODWORD(v171));
      *v34 = vmulq_f32(*v34, v165);
      *(float32x4_t *)(v16 + 96) = *v34;
      v177 = *(float *)(v5 + 116);
      v15.i32[0] = *(_DWORD *)(v5 + 120);
      if (v15.f32[0] != 0.0)
      {
        v178 = 214013 * *(_DWORD *)(v4 + 28) + 2531011;
        *(_DWORD *)(v4 + 28) = v178;
        v177 = v177 + (float)((float)((float)((float)HIWORD(v178) * 0.000015259) + -0.5) * v15.f32[0]);
      }
      *(float *)(v16 + 28) = 1.0 / v177;
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v16 + 8) = 0;
      v179 = *(unsigned __int8 *)(v4 + 129);
      v15.i32[0] = *(_DWORD *)(v16 + 24);
      if (*(_BYTE *)(v4 + 129))
        v180 = 0.0;
      else
        v180 = v15.f32[0];
      *(double *)v14.i64 = v13 - v180;
      v12 = -0.0;
      if (*(_BYTE *)(v4 + 129))
        v12 = v15.f32[0];
      v181 = *(double *)(*(_QWORD *)(a1 + 64) + 8 * v31);
      v182 = *(_QWORD *)(v5 + 56);
      if (v182)
      {
        v183 = v13 + v12;
        v184 = *(float *)(v182 + 16);
        if (v184 != 1.0)
        {
          v185 = (float)(1.0 / v184);
          *(double *)v14.i64 = *(double *)v14.i64 * v185;
          v183 = v183 * v185;
        }
        v12 = *(double *)(v182 + 40);
        *(double *)v15.i64 = v183 - *(double *)v14.i64;
        *(double *)v14.i64 = v12 + *(double *)v14.i64;
        v15.f32[0] = *(double *)v15.i64;
        *(_DWORD *)(v16 + 24) = v15.i32[0];
      }
      v13 = v181 + v13;
      *(_QWORD *)(v16 + 16) = v14.i64[0];
      *(_DWORD *)(v16 + 60) = 0;
      if (*(double *)v14.i64 <= 0.0)
        goto LABEL_208;
      if (v15.f32[0] <= 0.0)
        goto LABEL_208;
      *(double *)v14.i64 = *(double *)(a1 + 72) - *(double *)v14.i64;
      *(float *)v14.i32 = *(double *)v14.i64;
      if (*(float *)v14.i32 < 0.0 || v15.f32[0] <= *(float *)v14.i32)
        goto LABEL_208;
      if ((CA::Render::EmitterState::update_particle(v4, v5, v16, &v240, &__p, v234, *(float *)v14.i32) & 1) != 0)
        break;
      v179 = *(unsigned __int8 *)(v4 + 129);
LABEL_208:
      *(_DWORD *)(v16 + 24) = 0;
      if (v179)
        v186 = v13 < v7;
      else
        v186 = v13 > v7;
      if (!v186)
        goto LABEL_217;
    }
    ++*(_DWORD *)(v6 + 16);
    ++*(_DWORD *)(*(_QWORD *)(a1 + 48) + 12);
LABEL_217:
    v17 = v227;
LABEL_218:
    v16 += 128;
    v18 = v230;
  }
  while (v17);
LABEL_11:
  if (*(_BYTE *)(v4 + 129))
    v20 = v13 < v7;
  else
    v20 = v13 > v7;
  if (v20)
    goto LABEL_15;
LABEL_220:
  if (v7 >= 0.0 && *(double *)(*(_QWORD *)(a1 + 64) + 8 * a2) != 0.0)
    *(double *)v6 = v13;
  if (*(_DWORD *)(v6 + 16))
  {
    v195 = *(_QWORD *)(v5 + 24);
    LODWORD(v12) = 0;
    if (v195)
    {
      v196 = (uint32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v195 + 80))(v195);
      LODWORD(v12) = 0;
      if (v196)
      {
        v197 = COERCE_DOUBLE(vcvt_f32_u32(v196[2]));
        v198 = *(float *)(v5 + 216);
        _ZF = v198 == 1.0;
        v199 = COERCE_DOUBLE(vmul_n_f32(*(float32x2_t *)&v197, 1.0 / v198));
        if (!_ZF)
          v197 = v199;
        v200 = *(_QWORD *)(v5 + 32);
        if (v200)
        {
          v201 = 0uLL;
          if (*(_DWORD *)(v200 + 16) >= 4u)
            v201 = vsubq_f64(*(float64x2_t *)(v200 + 40), *(float64x2_t *)(v200 + 24));
          v197 = COERCE_DOUBLE(vcvt_f32_f64(vmulq_f64(v201, vcvtq_f64_f32(*(float32x2_t *)&v197))));
        }
        if (*(float *)&v197 <= *((float *)&v197 + 1))
          *(float *)&v197 = *((float *)&v197 + 1);
        *(float *)&v12 = *(float *)&v197 * *(float *)(v4 + 80);
        v202 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v12, 0);
        *(float32x2_t *)v240.f32 = vsub_f32(*(float32x2_t *)v240.f32, v202);
        *(float32x2_t *)v241.f32 = vadd_f32(*(float32x2_t *)v241.f32, v202);
        v240.f32[2] = v240.f32[2] - *(float *)&v12;
      }
    }
    v203 = v241.f32[2] + *(float *)&v12;
    if ((float)(v240.f32[2] - *(float *)&v12) <= (float)(v241.f32[2] + *(float *)&v12))
    {
      v204 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v12, 0);
      v205 = vcvtq_f64_f32(vsub_f32(*(float32x2_t *)v240.f32, v204));
      v206 = vcvtq_f64_f32(vadd_f32(*(float32x2_t *)v241.f32, v204));
      v207 = (float)(v240.f32[2] - *(float *)&v12);
      v208 = v203;
      v209 = *(double *)(v4 + 72);
      v210 = *(double *)(v4 + 48);
      if (v209 < v210)
      {
        *(float64x2_t *)(v4 + 32) = v205;
        *(double *)(v4 + 48) = v207;
        *(float64x2_t *)(v4 + 56) = v206;
        goto LABEL_249;
      }
      if (v205.f64[0] < *(double *)(v4 + 32))
        *(float64_t *)(v4 + 32) = v205.f64[0];
      if (v205.f64[1] < *(double *)(v4 + 40))
        *(float64_t *)(v4 + 40) = v205.f64[1];
      if (v210 > v207)
        *(double *)(v4 + 48) = v207;
      if (v206.f64[0] > *(double *)(v4 + 56))
        *(float64_t *)(v4 + 56) = v206.f64[0];
      if (v206.f64[1] > *(double *)(v4 + 64))
        *(float64_t *)(v4 + 64) = v206.f64[1];
      if (v209 < v208)
LABEL_249:
        *(double *)(v4 + 72) = v208;
    }
  }
  v211 = *(_DWORD *)(v6 + 20);
  if (v211)
  {
    v212 = *(_DWORD *)(v6 + 16);
    if (!v212)
    {
      *(_DWORD *)(v4 + 84) -= v211;
      free(*(void **)(v6 + 8));
      v211 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      *(_DWORD *)(v6 + 20) = 0;
      v212 = *(_DWORD *)(v6 + 16);
    }
    v213 = v211;
    do
    {
      v214 = v213;
      v213 >>= 1;
    }
    while (v213 > v212);
    if (v214 != v211 && v214 >= 0x10)
    {
      v215 = v214 + *(_DWORD *)(v4 + 84) - v211;
      if (v215 <= 0x80000)
      {
        v216 = (char *)malloc_type_malloc(v214 << 7, 0x1080040F72ECE51uLL);
        if (v216)
        {
          v217 = v216;
          v218 = *(unsigned int *)(v6 + 20);
          v219 = v216;
          if ((_DWORD)v218)
          {
            v220 = *(float **)(v6 + 8);
            v219 = v216;
            do
            {
              if (v220[6] != 0.0)
              {
                v221 = *(_OWORD *)v220;
                v222 = *((_OWORD *)v220 + 1);
                v223 = *((_OWORD *)v220 + 3);
                *((_OWORD *)v219 + 2) = *((_OWORD *)v220 + 2);
                *((_OWORD *)v219 + 3) = v223;
                *(_OWORD *)v219 = v221;
                *((_OWORD *)v219 + 1) = v222;
                v224 = *((_OWORD *)v220 + 4);
                v225 = *((_OWORD *)v220 + 5);
                v226 = *((_OWORD *)v220 + 7);
                *((_OWORD *)v219 + 6) = *((_OWORD *)v220 + 6);
                *((_OWORD *)v219 + 7) = v226;
                *((_OWORD *)v219 + 4) = v224;
                *((_OWORD *)v219 + 5) = v225;
                v219 += 128;
              }
              v220 += 32;
              --v218;
            }
            while (v218);
          }
          while (v219 < &v216[128 * v214])
          {
            *((_DWORD *)v219 + 6) = 0;
            v219 += 128;
          }
          free(*(void **)(v6 + 8));
          *(_QWORD *)(v6 + 8) = v217;
          *(_DWORD *)(v6 + 20) = v214;
          *(_DWORD *)(v4 + 84) = v215;
        }
      }
    }
  }
  if (__p)
    operator delete(__p);
}

uint64_t CA::Render::EmitterState::update_particle(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, _QWORD *a5, char a6, float a7)
{
  float v10;
  float v12;
  uint64_t v13;
  uint64_t v16;
  unint64_t v17;
  float32x2_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t *v34;
  uint64_t result;
  int8x16_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  __int32 v45;
  float32x4_t v47;
  uint64_t v48;
  float v49;
  uint64_t v50;

  v10 = a7;
  v50 = *MEMORY[0x1E0C80C00];
  v12 = a7 - *(float *)(a3 + 60);
  *(float *)(a3 + 60) = a7;
  *(_DWORD *)(a3 + 44) = 1065353216;
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a3 + 96);
  v49 = 0.0;
  v48 = 0;
  v13 = a5[1] - *a5;
  if (v13)
  {
    v44 = v12;
    v47 = 0uLL;
    if (v13 >= 1)
    {
      v16 = ((unint64_t)v13 >> 3) - 1;
      do
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t *, float32x4_t *))(**(_QWORD **)(*a5 + 8 * v16) + 24))(*(_QWORD *)(*a5 + 8 * v16), a3, &v48, &v47);
        v17 = v16-- + 1;
      }
      while (v17 > 1);
    }
    if ((a6 & 1) != 0)
    {
      __asm { FMOV            V1.4S, #1.0 }
      *(float32x4_t *)(a3 + 64) = vmulq_f32(*(float32x4_t *)(a3 + 64), vmaxq_f32(vminq_f32(v47, _Q1), (float32x4_t)0));
    }
    v23 = (float32x2_t)v48;
    v24 = v49;
    v12 = v44;
    v10 = a7;
  }
  else
  {
    v23 = 0;
    v24 = 0.0;
  }
  *(float32x2_t *)v25.f32 = vadd_f32(v23, *(float32x2_t *)(a2 + 104));
  v48 = v25.i64[0];
  v49 = v24 + *(float *)(a2 + 112);
  v25.i64[1] = LODWORD(v49);
  v26 = vmulq_n_f32(v25, *(float *)(a3 + 28));
  v27 = vmlaq_n_f32(*(float32x4_t *)(a3 + 48), v26, v12);
  v28 = vmlaq_n_f32(*(float32x4_t *)(a3 + 32), vmlaq_n_f32(*(float32x4_t *)(a3 + 48), v26, v12 * 0.5), v12);
  v29 = *(float32x4_t *)(a3 + 64);
  *(float32x4_t *)(a3 + 32) = v28;
  v30 = *(float32x4_t *)(a2 + 196);
  *(float32x4_t *)(a3 + 48) = v27;
  v31 = vmlaq_n_f32(v29, v30, v10);
  v32 = *a4;
  v33 = a4[1];
  *(float32x4_t *)(a3 + 64) = v31;
  v34 = *(float32x4_t **)(a1 + 176);
  if (!v34
    || *(_QWORD *)(a2 + 40)
    || (result = 0, v36 = vorrq_s8((int8x16_t)vcgtq_f32(v28, v34[1]), (int8x16_t)vcgtq_f32(*v34, v28)), !v36.i32[0])
    && (v36.i32[0] = vextq_s8(v36, v36, 8uLL).u32[0],
        *(int32x2_t *)v36.i8 = vceqz_s32(*(int32x2_t *)v36.i8),
        (v36.i8[4] & 1) != 0)
    && (v36.i8[0] & 1) != 0)
  {
    *a4 = vminq_f32(v32, v28);
    a4[1] = vmaxq_f32(v33, v28);
    v37.i32[0] = *(_DWORD *)(a3 + 124);
    v37.i32[1] = *(_DWORD *)(a3 + 92);
    v38 = vmla_n_f32(*(float32x2_t *)(a3 + 84), v37, v12);
    *(float32x2_t *)(a3 + 84) = v38;
    v39 = *(float *)(a2 + 228);
    if (v39 == 0.0)
    {
LABEL_21:
      if (v38.f32[0] > *(float *)(a1 + 80))
        *(_DWORD *)(a1 + 80) = v38.i32[0];
      if (*(_QWORD *)(a2 + 40))
      {
        v42 = 0.0;
        if (v10 >= 0.0)
        {
          v42 = 0.0;
          if (*(float *)(a3 + 24) > v10)
            v42 = 1.0;
        }
        v43 = *(float *)(a3 + 44) * v42;
        v47.i64[0] = 0;
        CA::Render::EmitterState::update_cells(a1, &v47, v10, v43);
      }
      return 1;
    }
    v45 = v38.i32[0];
    v40 = fmaxf(*(float *)(a2 + 220), 1.0);
    v41 = fmodf(*(float *)(a3 + 80) + (float)(v39 * v12), v40);
    if (v40 >= 0.0)
    {
      if (v41 >= 0.0)
      {
LABEL_20:
        *(float *)(a3 + 80) = v41;
        v38.i32[0] = v45;
        v10 = a7;
        goto LABEL_21;
      }
    }
    else if (v41 <= 0.0)
    {
      goto LABEL_20;
    }
    v41 = v41 + v40;
    goto LABEL_20;
  }
  return result;
}

float *CA::Render::EmitterState::point_on_rectangle(float *result, uint64_t a2, float a3, float a4, float a5)
{
  float v5;
  float v6;
  float v7;
  unint64_t v8;
  float v9;
  float v10;
  float v11;

  v5 = *result - (float)(a4 * 0.5);
  v6 = result[1] - (float)(a5 * 0.5);
  result[1] = v6;
  v7 = a3 * (float)((float)(a5 + a4) + (float)(a5 + a4));
  if (v7 >= a4)
  {
    v9 = v7 - a4;
    *result = v5 + a4;
    if ((float)(v7 - a4) >= a5)
    {
      v10 = v9 - a5;
      v11 = v6 + a5;
      result[1] = v11;
      if (v10 >= a4)
      {
        *result = v5;
        result[1] = (float)(a4 - v10) + v11;
        v8 = 3212836864;
      }
      else
      {
        *result = (float)(v5 + a4) - v10;
        v8 = 0x3F80000000000000;
      }
    }
    else
    {
      result[1] = v6 + v9;
      v8 = 1065353216;
    }
  }
  else
  {
    *result = v5 + v7;
    v8 = 0xBF80000000000000;
  }
  *(_QWORD *)a2 = v8;
  *(_DWORD *)(a2 + 8) = 0;
  return result;
}

float CA::Render::EmitterState::point_on_circle(float *a1, uint64_t a2, float a3, float a4)
{
  float v4;
  float v5;
  float result;
  float v7;
  float v8;
  float v9;

  if (a3 > 0.5)
    a3 = a3 + -1.0;
  v4 = (float)(a3 + a3) * 3.14159265;
  v5 = v4 * v4;
  result = (float)((float)((float)((float)((float)(v4 * v4) * 0.0054654) + -0.15346) * (float)(v4 * v4)) + 0.98442) * v4;
  v7 = (float)((float)((float)((float)((float)(v5 * -0.00096967) + 0.039228) * v5) + -0.49535) * v5) + 0.99861;
  v8 = *a1 + (float)(v7 * a4);
  v9 = a1[1] + (float)(result * a4);
  *a1 = v8;
  a1[1] = v9;
  *(float *)a2 = v7;
  *(float *)(a2 + 4) = result;
  *(_DWORD *)(a2 + 8) = 0;
  return result;
}

float CA::Render::EmitterState::point_on_sphere(uint64_t a1, uint64_t a2, uint64_t a3, float32_t a4)
{
  unsigned int v6;
  float v7;
  unsigned int v8;
  float v9;
  float v10;
  int32x2_t v11;
  float v12;
  float32x2_t v13;
  float32x2_t v14;
  int32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float result;

  v6 = 214013 * *(_DWORD *)(a1 + 28) + 2531011;
  v7 = (float)HIWORD(v6) * 0.000015259;
  v8 = 214013 * v6 + 2531011;
  *(_DWORD *)(a1 + 28) = v8;
  v9 = v7 * 6.28318531 + -3.14159265;
  v10 = acosf((float)((float)HIWORD(v8) * 0.000030518) + -1.0);
  v11.i32[0] = 1065329841;
  v12 = (float)((float)((float)((float)(0.039228 - (float)((float)(v9 * v9) * 0.00096967)) * (float)(v9 * v9)) + -0.49535)
              * (float)(v9 * v9))
      + 0.99861;
  v13.i32[0] = -1105386157;
  v14.f32[0] = (float)((float)((float)((float)((float)(v9 * v9) * 0.0054654) + -0.15346) * (float)(v9 * v9)) + 0.98442)
             * v9;
  *(float *)v15.i32 = v10 * v10;
  v16 = (float32x2_t)vdup_lane_s32(v15, 0);
  v17 = vmul_n_f32((float32x2_t)0x3A7E31513BB31712, v10 * v10);
  v13.i32[0] = vadd_f32(v17, v13).u32[0];
  v13.i32[1] = vsub_f32((float32x2_t)vdup_n_s32(0x3D20AD37u), v17).i32[1];
  v18 = vmla_n_f32((float32x2_t)0xBEFD9E7A3F7C02BDLL, v13, v10 * v10);
  v16.f32[0] = v10;
  v19 = (float32x2_t)vdup_lane_s32(v11, 0);
  v20 = vmul_f32(v18, v16);
  v21 = vadd_f32(v20, v19);
  v19.f32[0] = a4;
  v19.i32[0] = vmul_f32(v20, v19).u32[0];
  v19.i32[1] = v21.i32[1];
  *(float *)a2 = vmlas_n_f32(*(float *)a2, v12, v19.f32[0]);
  v14.f32[1] = a4;
  *(float32x2_t *)(a2 + 4) = vmla_f32(*(float32x2_t *)(a2 + 4), v14, v19);
  result = v12 * v20.f32[0];
  *(float *)a3 = v12 * v20.f32[0];
  *(float *)(a3 + 4) = v14.f32[0] * v20.f32[0];
  *(_DWORD *)(a3 + 8) = v21.i32[1];
  return result;
}

CA::Render::Path *CA::Render::EmitterState::point_on_path(CA::Render::Path *result, float32x2_t *a2, uint64_t a3, float a4, float a5, float a6)
{
  CA::Render::Path *v9;
  CA::Render::Path *v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  float v17;
  float v23;
  double v26;
  float64x2_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v9 = result;
    v27 = 0uLL;
    v26 = 0.0;
    result = (CA::Render::Path *)CA::Render::Path::keyframe_lengths(result);
    if (result)
    {
      v10 = result;
      v11 = 0.0;
      if (a4 >= 0.0)
        v11 = a4;
      v12 = v11 >= 1.0 ? 0.9999 : v11;
      if (!*((_QWORD *)v9 + 8))
        result = (CA::Render::Path *)CA::Render::Path::keyframe_lengths(v9);
      v13 = *((unsigned int *)v9 + 4);
      if ((int)v13 >= 1)
      {
        v14 = 0;
        v15 = *((double *)v9 + 9) * v12;
        while (1)
        {
          v16 = *((double *)v10 + v14);
          if (v15 < v16)
            break;
          v15 = v15 - v16;
          if (v13 == ++v14)
            return result;
        }
        v17 = v15 / v16;
        result = (CA::Render::Path *)CA::Render::Path::interpolate(v9, v14, 1, &v27, 0, 0, &v26, 0, v17, 0.0);
        if ((_DWORD)result)
        {
          __asm { FMOV            V2.2D, #-0.5 }
          v23 = v26 + -1.57079633;
          *a2 = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(*a2), vcvtq_f64_f32((float32x2_t)__PAIR64__(LODWORD(a6), LODWORD(a5))), vaddq_f64(v27, _Q2)));
          *(float *)a3 = (float)((float)((float)((float)((float)((float)(v23 * v23) * -0.00096967) + 0.039228)
                                               * (float)(v23 * v23))
                                       + -0.49535)
                               * (float)(v23 * v23))
                       + 0.99861;
          *(float *)(a3 + 4) = (float)((float)((float)((float)((float)(v23 * v23) * 0.0054654) + -0.15346)
                                             * (float)(v23 * v23))
                                     + 0.98442)
                             * v23;
          *(_DWORD *)(a3 + 8) = 0;
        }
      }
    }
  }
  return result;
}

float32x2_t CA::Render::EmitterState::point_on_rectangles(uint64_t a1, float32x2_t *a2, uint64_t a3, float32x2_t result, float32x2_t a5, float32_t a6)
{
  uint64_t v6;
  unint64_t v9;
  double *v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float64x2_t *v15;
  uint64_t v16;
  double v17;
  float64x2_t v18;
  double v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;

  if (a1)
  {
    v6 = *(unsigned int *)(a1 + 16);
    if (v6 >= 5 && 5 * (v6 / 5uLL) == v6)
    {
      if (v6 / 5uLL <= 1)
        v9 = 1;
      else
        v9 = v6 / 5uLL;
      v10 = (double *)(a1 + 48);
      v11 = 0.0;
      v12 = v9;
      do
      {
        v11 = *(v10 - 1) + v11 + *v10;
        v10 += 4;
        --v12;
      }
      while (v12);
      v13 = 0;
      v14 = v11 * result.f32[0];
      *(double *)&result = v14;
      v15 = (float64x2_t *)(a1 + 40);
      v16 = 4 * v9;
      v17 = 0.0;
      while (1)
      {
        v18 = *v15;
        v19 = vaddvq_f64(*v15);
        if (v19 + v17 > *(double *)&result)
          break;
        v13 += 4;
        v15 += 2;
        v17 = v19 + v17;
        if (v16 == v13)
          return result;
      }
      v20 = *(double *)&result - v17;
      v21 = v20 / v19;
      v22 = v18.f64[0];
      v23 = v18.f64[1];
      __asm { FMOV            V5.2D, #0.5 }
      v31 = _Q5;
      a5.f32[1] = a6;
      v29 = *(float64x2_t *)(a1 + 24 + 8 * v13);
      v30 = vcvtq_f64_f32(a5);
      v28 = *v15;
      CA::Render::EmitterState::point_on_rectangle((float *)a2, a3, v21, v22, v23);
      result = vcvt_f32_f64(vmulq_f64(vaddq_f64(vmlaq_f64(v29, v31, v28), vcvtq_f64_f32(*a2)), v30));
      *a2 = result;
    }
  }
  return result;
}

void CA::Render::EmitterState::adjust_vector(uint64_t a1, float *a2, float a3, float a4, float a5)
{
  float v8;
  float cosval;
  float v10;
  float v11;
  __float2 v12;
  __float2 v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  float v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a3 != 0.0 || a4 != 0.0)
  {
    v8 = a4 + 1.5708;
    if (fabsf(a4 + 1.5708) >= 0.00001)
    {
      v12 = __sincosf_stret(a3);
      v13 = __sincosf_stret(v8);
      cosval = v13.__cosval;
      v10 = v13.__sinval * v12.__cosval;
      v11 = v13.__sinval * v12.__sinval;
    }
    else
    {
      cosval = 1.0;
      v10 = 0.0;
      v11 = 0.0;
    }
    v16 = __PAIR64__(LODWORD(v11), LODWORD(v10));
    v17 = cosval;
    v14 = 1065353216;
    v15 = 0;
  }
  if (a5 != 0.0)
    CA::Render::EmitterState::apply_random_deviation(a1, a2, a5);
}

void CA::Render::EmitterState::apply_random_deviation(uint64_t a1, float *a2, float a3)
{
  unsigned int v4;
  unsigned int v5;
  float v6;
  float v7;
  float cosval;
  float v9;
  float v10;
  float v11;
  float v12;
  __float2 v13;
  __float2 v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  float v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = 214013 * *(_DWORD *)(a1 + 28) + 2531011;
  v5 = 214013 * v4 + 2531011;
  *(_DWORD *)(a1 + 28) = v5;
  v6 = (float)HIWORD(v5);
  v7 = cosf(a3 * 0.5);
  cosval = 1.0;
  v9 = acosf((float)((float)((float)(v7 * 0.000015259) + -0.000015259) * v6) + 1.0);
  v10 = 0.0;
  v11 = 0.0;
  if (fabsf(v9) >= 0.00001)
  {
    v12 = (float)((float)((float)HIWORD(v4) * 0.000015259) + -0.5) * 6.28318531;
    v13 = __sincosf_stret(v12);
    v14 = __sincosf_stret(v9);
    cosval = v14.__cosval;
    v10 = v13.__cosval * v14.__sinval;
    v11 = v13.__sinval * v14.__sinval;
  }
  v17 = __PAIR64__(LODWORD(v11), LODWORD(v10));
  v18 = cosval;
  v15 = 0;
  v16 = 1065353216;
}

void CA::Render::`anonymous namespace'::rotate_vector(float *a1, float32x2_t *a2, float *a3)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  double *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  double v17;
  float64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  float v21;
  float32x2_t v22;
  float64x2_t v23;
  int64x2_t v24;
  float64x2_t v25;
  int64x2_t v26;
  float64x2_t v27;
  __int128 v28;
  float64x2_t v29;
  double v30[3];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  v6 = a3[1];
  v8 = *a1;
  v7 = a1[1];
  v9 = a3[2];
  v10 = a1[2];
  v11 = (float)((float)(*a1 * *a3) + (float)(v7 * v6)) + (float)(v10 * v9);
  if (v11 > 1.0)
    v11 = 1.0;
  if (v11 < -1.0)
    v11 = -1.0;
  if (fabsf(v11 + -1.0) <= 0.00001)
  {
    v22 = *a2;
    a1[2] = a2[1].f32[0];
    *(float32x2_t *)a1 = v22;
    return;
  }
  v13 = acosf(v11);
  v14 = -(float)((float)(v7 * v9) - (float)(v10 * v6));
  v15 = -(float)((float)(v10 * v5) - (float)(v9 * v8));
  v16 = -(float)((float)(v6 * v8) - (float)(v7 * v5));
  if (fabsf((float)((float)(v16 * v16) + (float)(v14 * v14)) + (float)(v15 * v15)) <= 0.00001)
  {
    if (fabsf(v13) <= 1.5708)
      return;
    v21 = -a2[1].f32[0];
    *(float32x2_t *)a1 = vneg_f32(*a2);
  }
  else
  {
    v29 = 0u;
    *(_OWORD *)v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    CA::Mat4Impl::mat4_set_rotation((CA::Mat4Impl *)&v23, v12, v13, v14, v15, v16);
    v17 = a2[1].f32[0];
    v18 = vcvtq_f64_f32(*a2);
    v19 = v24;
    v20 = v26;
    *(float32x2_t *)a1 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v29, v23, v18.f64[0]), v25, v18, 1), v27, v17));
    v21 = vaddvq_f64(vmulq_f64((float64x2_t)vzip1q_s64(v19, v20), v18)) + *(double *)&v28 * v17 + v30[0];
  }
  a1[2] = v21;
}

void CA::Render::EmitterState::free_cell_state(CA::Render::EmitterState *this, Cell *a2)
{
  Cell v3;
  uint64_t v5;
  uint64_t v6;
  malloc_zone_t *malloc_zone;

  v3 = a2[5];
  if (v3)
  {
    v5 = *(_QWORD *)&a2[2].v;
    v6 = a2[4];
    *((_DWORD *)this + 21) -= *(_DWORD *)&v3;
    if ((_DWORD)v6)
    {
      do
      {
        if (*(float *)(v5 + 24) != 0.0)
        {
          --v6;
          if (*(_DWORD *)(v5 + 8))
            CA::Render::EmitterState::free_cells_state(this, v5);
        }
        v5 += 128;
      }
      while (v6);
      v5 = *(_QWORD *)&a2[2].v;
    }
    free((void *)v5);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, a2);
}

CA::Render::EmitterBehaviors::DistanceFunction *CA::Render::EmitterBehaviors::DistanceFunction::DistanceFunction(CA::Render::EmitterBehaviors::DistanceFunction *this, const CA::Render::KeyValueArray *a2)
{
  float vec2_key;
  double v5;
  float float_key;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  float v15;
  float cosval;
  float v17;
  float v18;
  float v19;
  __float2 v20;
  __float2 v21;
  float v22;
  float v23;
  float v24;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)this = 0;
  v26[0] = 0;
  v26[1] = 0;
  vec2_key = CA::Render::KeyValueArray::get_vec2_key(a2, (const CA::Render::KeyValueArray *)0x1AD, (uint64_t)v26);
  *(float *)&v5 = v5;
  *((float *)this + 1) = vec2_key;
  *((_DWORD *)this + 2) = LODWORD(v5);
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 3) = 0;
  float_key = CA::Render::KeyValueArray::get_float_key(a2, (const CA::Render::KeyValueArray *)0x1BB, 0.0);
  *((float *)this + 8) = float_key;
  *((float *)this + 9) = float_key * float_key;
  v7 = CA::Render::KeyValueArray::get_float_key(a2, (const CA::Render::KeyValueArray *)0x20F, 1.0);
  *((float *)this + 10) = v7;
  *((float *)this + 11) = float_key * v7;
  v8 = CA::Render::KeyValueArray::get_float_key(a2, (const CA::Render::KeyValueArray *)0x25C, 0.0);
  *((float *)this + 3) = v8;
  if (a2)
  {
    v9 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v9)
    {
      v10 = 0;
      while (1)
      {
        v11 = *((_QWORD *)a2 + v10 + 3);
        if (*(_DWORD *)(v11 + 16) == 44)
          break;
        if (v9 == ++v10)
          goto LABEL_21;
      }
      if ((v10 & 0x80000000) == 0)
      {
        v12 = *(_QWORD *)(v11 + 24);
        if (v12)
        {
          if (*(_BYTE *)(v12 + 12) == 49)
          {
            v13 = CAInternAtomWithCString((const char *)(v12 + 28));
            if (v13 == 49)
            {
              v14 = 1;
            }
            else
            {
              if (v13 != 416)
              {
                v14 = *(_DWORD *)this;
                if ((*(_DWORD *)this - 1) >= 2)
                  goto LABEL_21;
                goto LABEL_15;
              }
              v14 = 2;
            }
            *(_DWORD *)this = v14;
LABEL_15:
            v15 = CA::Render::KeyValueArray::get_float_key(a2, (const CA::Render::KeyValueArray *)0x194, 1.57079633);
            if (fabsf(v15) >= 0.00001)
            {
              v19 = CA::Render::KeyValueArray::get_float_key(a2, (const CA::Render::KeyValueArray *)0x195, -1.57079633);
              v20 = __sincosf_stret(v19);
              v21 = __sincosf_stret(v15);
              cosval = v21.__cosval;
              v17 = v21.__sinval * v20.__cosval;
              v18 = v21.__sinval * v20.__sinval;
            }
            else
            {
              cosval = 1.0;
              v17 = 0.0;
              v18 = 0.0;
            }
            *((float *)this + 4) = v17;
            *((float *)this + 5) = v18;
            *((float *)this + 6) = cosval;
            if (v14 == 2)
              *((float *)this + 7) = -(float)((float)((float)(*((float *)this + 1) * v17)
                                                    + (float)(*((float *)this + 2) * v18))
                                            + (float)(*((float *)this + 3) * cosval));
          }
        }
      }
    }
  }
LABEL_21:
  v22 = CA::Render::KeyValueArray::get_float_key(a2, (const CA::Render::KeyValueArray *)0xD9, 0.0);
  *((float *)this + 12) = v22;
  v23 = CA::Render::KeyValueArray::get_float_key(a2, (const CA::Render::KeyValueArray *)0xD8, INFINITY);
  v24 = 0.0;
  if (v23 != 0.0 && (LODWORD(v23) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    v24 = 1.0 / v23;
  *((float *)this + 13) = v24;
  *((float *)this + 14) = v22 * v22;
  *((float *)this + 15) = v24 * v24;
  return this;
}

void CA::Render::EmitterBehaviors::NoOp::~NoOp(CA::Render::EmitterBehaviors::NoOp *this)
{
  malloc_zone_t *malloc_zone;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::Render::EmitterBehaviors::NoOp::prepare(CA::Render::EmitterBehaviors::NoOp *this)
{
  return 0;
}

void CA::Render::EmitterBehaviors::Wave::~Wave(CA::Render::EmitterBehaviors::Wave *this)
{
  malloc_zone_t *malloc_zone;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::Render::EmitterBehavior::Eval::prepare(CA::Render::EmitterBehavior::Eval *this)
{
  return 1;
}

float32_t CA::Render::EmitterBehaviors::Wave::operator()(uint64_t a1, uint64_t a2, float32x2_t *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float32_t result;

  v3 = *(float *)(a1 + 20);
  v4 = *(float *)(a1 + 24) * *(float *)(a2 + 60);
  v5 = v4 - floorf(v4);
  if (v5 > 0.5)
    v5 = 1.0 - v5;
  v6 = (float)((float)((float)(v5 + v5) * (float)(v5 + v5)) * (float)((float)(v5 * -8.0) + 6.0)) + -1.0;
  *a3 = vmla_n_f32(*a3, *(float32x2_t *)(a1 + 12), v6);
  result = a3[1].f32[0] + (float)(v6 * v3);
  a3[1].f32[0] = result;
  return result;
}

CA::Render::EmitterBehaviors::ValueMutator *CA::Render::EmitterBehaviors::ValueMutator::ValueMutator(CA::Render::EmitterBehaviors::ValueMutator *this, const CA::Render::KeyValueArray *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int int_key;
  BOOL v8;
  const char *v9;
  BOOL v10;
  int v11;
  int v12;
  int v14;
  int v15;
  char v16;

  *(_DWORD *)this = -1;
  *((_WORD *)this + 2) = 0;
  *((_BYTE *)this + 6) = 0;
  if (!a2)
    return this;
  v3 = *((unsigned int *)a2 + 4);
  if (!(_DWORD)v3)
    return this;
  v4 = 0;
  while (1)
  {
    v5 = *((_QWORD *)a2 + v4 + 3);
    if (*(_DWORD *)(v5 + 16) == 330)
      break;
    if (v3 == ++v4)
      return this;
  }
  if ((v4 & 0x80000000) != 0)
    return this;
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6 || *(_BYTE *)(v6 + 12) != 49)
    return this;
  int_key = CA::Render::KeyValueArray::get_int_key(a2, (const CA::Render::KeyValueArray *)2, 0);
  v8 = int_key != 0;
  v9 = (const char *)(v6 + 28);
  if (!strcmp(v9, "position.x"))
  {
    v12 = 8;
LABEL_33:
    *(_DWORD *)this = v12;
    return this;
  }
  if (!strcmp(v9, "position.y"))
  {
    v12 = 9;
    goto LABEL_33;
  }
  if (!strcmp(v9, "position.z"))
  {
    v12 = 10;
    goto LABEL_33;
  }
  if (!strcmp(v9, "velocity.x"))
  {
    v12 = 12;
    goto LABEL_33;
  }
  if (!strcmp(v9, "velocity.y"))
  {
    v12 = 13;
    goto LABEL_33;
  }
  if (!strcmp(v9, "velocity.z"))
  {
    v12 = 14;
    goto LABEL_33;
  }
  if (!strcmp(v9, "mass"))
  {
    *(_DWORD *)this = 7;
    *((_BYTE *)this + 4) = 1;
    return this;
  }
  if (!strcmp(v9, "rotation"))
  {
    v14 = 22;
LABEL_40:
    *(_DWORD *)this = v14;
LABEL_41:
    *((_BYTE *)this + 6) = v8;
    return this;
  }
  if (!strcmp(v9, "spin"))
  {
    v14 = 23;
    goto LABEL_40;
  }
  if (!strcmp(v9, "scale"))
  {
    v15 = 21;
LABEL_43:
    *(_DWORD *)this = v15;
    *((_BYTE *)this + 5) = v8;
    return this;
  }
  if (!strcmp(v9, "scaleSpeed"))
  {
    v14 = 31;
    goto LABEL_40;
  }
  if (!strcmp(v9, "birthRate"))
  {
    v15 = 11;
    goto LABEL_43;
  }
  if (!strcmp(v9, "color.red"))
  {
    v10 = int_key == 0;
    v11 = 16;
    goto LABEL_47;
  }
  if (!strcmp(v9, "color.green"))
  {
    v10 = int_key == 0;
    v11 = 17;
    goto LABEL_47;
  }
  if (!strcmp(v9, "color.blue"))
  {
    v10 = int_key == 0;
    v11 = 18;
    goto LABEL_47;
  }
  if (!strcmp(v9, "color.alpha"))
  {
    v10 = int_key == 0;
    v11 = 19;
LABEL_47:
    *(_DWORD *)this = v11;
    v16 = v10;
    *((_BYTE *)this + 5) = v16;
    goto LABEL_41;
  }
  return this;
}

_QWORD *CA::Render::EmitterBehaviors::ValueOver<CA::Render::EmitterBehaviors::LifeFunction>::~ValueOver(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = off_1E1597B50;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  return a1;
}

void CA::Render::EmitterBehaviors::ValueOver<CA::Render::EmitterBehaviors::LifeFunction>::~ValueOver(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  malloc_zone_t *malloc_zone;

  *a1 = off_1E1597B50;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, a1);
}

BOOL CA::Render::EmitterBehaviors::ValueOver<CA::Render::EmitterBehaviors::LifeFunction>::prepare(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

uint64_t CA::Render::EmitterBehaviors::ValueOver<CA::Render::EmitterBehaviors::LifeFunction>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  float v5;
  uint64_t v6;
  double v7;
  double v8[2];

  v8[1] = *(double *)MEMORY[0x1E0C80C00];
  v8[0] = (float)(*(float *)(a2 + 60) / *(float *)(a2 + 24));
  v7 = 0.0;
  result = (*(uint64_t (**)(_QWORD, uint64_t, double *, _QWORD, double *, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 128))(*(_QWORD *)(a1 + 16), 1, v8, 0, &v7, 0, 0, 0);
  if ((_DWORD)result)
  {
    v5 = v7;
    if (*(_BYTE *)(a1 + 28))
      v5 = 1.0 / v5;
    v6 = *(int *)(a1 + 24);
    if (*(_BYTE *)(a1 + 29))
      v5 = *(float *)(a2 + 4 * v6) * v5;
    if (*(_BYTE *)(a1 + 30))
      v5 = *(float *)(a2 + 4 * v6) + v5;
    *(float *)(a2 + 4 * v6) = v5;
  }
  return result;
}

_QWORD *CA::Render::EmitterBehaviors::ValueOver<CA::Render::EmitterBehaviors::DistanceFunction>::~ValueOver(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = off_1E1597B80;
  v2 = (unsigned int *)a1[10];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  return a1;
}

void CA::Render::EmitterBehaviors::ValueOver<CA::Render::EmitterBehaviors::DistanceFunction>::~ValueOver(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  malloc_zone_t *malloc_zone;

  *a1 = off_1E1597B80;
  v2 = (unsigned int *)a1[10];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, a1);
}

BOOL CA::Render::EmitterBehaviors::ValueOver<CA::Render::EmitterBehaviors::DistanceFunction>::prepare(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80) != 0;
}

uint64_t CA::Render::EmitterBehaviors::ValueOver<CA::Render::EmitterBehaviors::DistanceFunction>::operator()(uint64_t a1, float *a2, double a3)
{
  uint64_t result;
  float v6;
  uint64_t v7;
  double v8;
  double v9[2];

  v9[1] = *(double *)MEMORY[0x1E0C80C00];
  v9[0] = CA::Render::EmitterBehaviors::DistanceFunction::operator()(a1 + 12, a2, a3);
  v8 = 0.0;
  result = (*(uint64_t (**)(_QWORD, uint64_t, double *, _QWORD, double *, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 128))(*(_QWORD *)(a1 + 80), 1, v9, 0, &v8, 0, 0, 0);
  if ((_DWORD)result)
  {
    v6 = v8;
    if (*(_BYTE *)(a1 + 92))
      v6 = 1.0 / v6;
    v7 = *(int *)(a1 + 88);
    if (*(_BYTE *)(a1 + 93))
      v6 = a2[v7] * v6;
    if (*(_BYTE *)(a1 + 94))
      v6 = a2[v7] + v6;
    a2[v7] = v6;
  }
  return result;
}

float CA::Render::EmitterBehaviors::DistanceFunction::operator()(uint64_t a1, float *a2, double a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;

  *(float *)&a3 = a2[8] - *(float *)(a1 + 4);
  v3 = a2[9] - *(float *)(a1 + 8);
  v4 = a2[10] - *(float *)(a1 + 12);
  if (*(_DWORD *)a1 == 2)
  {
    *(float *)&a3 = fabsf((float)((float)(*(float *)(a1 + 28) + (float)(*(float *)(a1 + 16) * *(float *)&a3))+ (float)(*(float *)(a1 + 20) * v3))+ (float)(*(float *)(a1 + 24) * v4));
  }
  else
  {
    if (*(_DWORD *)a1 == 1)
    {
      v5 = *(float *)(a1 + 16);
      v6 = *(float *)(a1 + 20);
      v7 = *(float *)(a1 + 24);
      v8 = (float)((float)(v5 * *(float *)&a3) + (float)(v6 * v3)) + (float)(v7 * v4);
      *(float *)&a3 = *(float *)&a3 - (float)(v8 * v5);
      v3 = v3 - (float)(v8 * v6);
      v4 = v4 - (float)(v8 * v7);
    }
    *(float *)&a3 = fmaxf((float)((float)(v4 * v4) + (float)(v3 * v3)) + (float)(*(float *)&a3 * *(float *)&a3), 0.0001);
    LODWORD(a3) = vrecpe_f32((float32x2_t)vdup_lane_s32((int32x2_t)vrsqrte_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0)), 0)).u32[0];
  }
  return (float)(*(float *)&a3 - (float)(*(float *)(a1 + 32) + *(float *)(a1 + 48))) * *(float *)(a1 + 52);
}

void CA::Render::EmitterBehaviors::Light::~Light(CA::Render::EmitterBehaviors::Light *this)
{
  malloc_zone_t *malloc_zone;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

float CA::Render::EmitterBehaviors::Light::operator()(uint64_t a1, float *a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, float32x4_t *a10)
{
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float result;

  v10 = a2[8] - *(float *)(a1 + 36);
  v11 = a2[9] - *(float *)(a1 + 40);
  v12 = a2[10] - *(float *)(a1 + 44);
  *(float *)&a8 = (float)((float)(v10 * v10) + (float)(v11 * v11)) + (float)(v12 * v12);
  v13 = (float)(*(float *)&a8 - *(float *)(a1 + 48)) * *(float *)(a1 + 52);
  if (v13 > 1.0)
    v13 = 1.0;
  if (v13 >= 0.0)
    v14 = 1.0 - v13;
  else
    v14 = 1.0;
  if (*(_BYTE *)(a1 + 56))
  {
    *(float *)&a8 = fmaxf(*(float *)&a8, 0.0001);
    v15 = vmlas_n_f32(-*(float *)(a1 + 72), (float)((float)(*(float *)(a1 + 60) * v10) + (float)(*(float *)(a1 + 64) * v11))+ (float)(*(float *)(a1 + 68) * v12), vrsqrte_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0)).f32[0])* *(float *)(a1 + 76);
    if (v15 > 1.0)
      v15 = 1.0;
    if (v15 < 0.0)
      v15 = 0.0;
    v14 = v15 * v14;
  }
  result = *(float *)(a1 + 28) + (float)(*(float *)(a1 + 32) * v14);
  *a10 = vmlaq_n_f32(*a10, *(float32x4_t *)(a1 + 12), result);
  return result;
}

void CA::Render::EmitterBehaviors::Drag::~Drag(CA::Render::EmitterBehaviors::Drag *this)
{
  malloc_zone_t *malloc_zone;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

float CA::Render::EmitterBehaviors::Drag::operator()(uint64_t a1, float32x2_t *a2, float32x2_t *a3, double a4)
{
  float v4;

  LODWORD(a4) = *(_DWORD *)(a1 + 12);
  v4 = a2[7].f32[0];
  *a3 = vmls_lane_f32(*a3, a2[6], *(float32x2_t *)&a4, 0);
  *(float *)&a4 = a3[1].f32[0] - (float)(v4 * *(float *)&a4);
  a3[1].i32[0] = LODWORD(a4);
  return *(float *)&a4;
}

_QWORD *CA::Render::EmitterBehaviors::ColorOver<CA::Render::EmitterBehaviors::LifeFunction>::~ColorOver(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = off_1E1597AF0;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  return a1;
}

void CA::Render::EmitterBehaviors::ColorOver<CA::Render::EmitterBehaviors::LifeFunction>::~ColorOver(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  malloc_zone_t *malloc_zone;

  *a1 = off_1E1597AF0;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, a1);
}

BOOL CA::Render::EmitterBehaviors::ColorOver<CA::Render::EmitterBehaviors::LifeFunction>::prepare(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

float32x4_t CA::Render::EmitterBehaviors::ColorOver<CA::Render::EmitterBehaviors::LifeFunction>::operator()(uint64_t a1, float32x4_t *a2)
{
  float32x4_t result;
  double v4;
  float64x2_t v5;
  float64x2_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v4 = (float)(a2[3].f32[3] / a2[1].f32[2]);
  v5 = 0u;
  v6 = 0u;
  if ((*(unsigned int (**)(_QWORD, uint64_t, double *, _QWORD, float64x2_t *, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 128))(*(_QWORD *)(a1 + 16), 1, &v4, 0, &v5, 0, 0, 0))
  {
    result = vmulq_f32(a2[4], vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v5), v6));
    a2[4] = result;
  }
  return result;
}

_QWORD *CA::Render::EmitterBehaviors::ColorOver<CA::Render::EmitterBehaviors::DistanceFunction>::~ColorOver(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = off_1E1597B20;
  v2 = (unsigned int *)a1[10];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  return a1;
}

void CA::Render::EmitterBehaviors::ColorOver<CA::Render::EmitterBehaviors::DistanceFunction>::~ColorOver(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  malloc_zone_t *malloc_zone;

  *a1 = off_1E1597B20;
  v2 = (unsigned int *)a1[10];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, a1);
}

BOOL CA::Render::EmitterBehaviors::ColorOver<CA::Render::EmitterBehaviors::DistanceFunction>::prepare(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80) != 0;
}

float32x4_t CA::Render::EmitterBehaviors::ColorOver<CA::Render::EmitterBehaviors::DistanceFunction>::operator()(uint64_t a1, float32x4_t *a2, double a3)
{
  float32x4_t result;
  double v6;
  float64x2_t v7;
  float64x2_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = CA::Render::EmitterBehaviors::DistanceFunction::operator()(a1 + 12, a2->f32, a3);
  v7 = 0u;
  v8 = 0u;
  if ((*(unsigned int (**)(_QWORD, uint64_t, double *, _QWORD, float64x2_t *, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 128))(*(_QWORD *)(a1 + 80), 1, &v6, 0, &v7, 0, 0, 0))
  {
    result = vmulq_f32(a2[4], vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v7), v8));
    a2[4] = result;
  }
  return result;
}

void CA::Render::EmitterBehaviors::AlignToMotion::~AlignToMotion(CA::Render::EmitterBehaviors::AlignToMotion *this)
{
  malloc_zone_t *malloc_zone;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::Render::EmitterBehaviors::AlignToMotion::operator()(uint64_t a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;

  v3 = a2[12];
  v4 = a2[13];
  if (!*(_BYTE *)(a1 + 16))
  {
    v20 = *(float *)(a1 + 12) + atan2f(v3, -v4);
    v6 = 1.0;
    v15 = 0.0;
LABEL_12:
    v22 = 0.0;
    goto LABEL_13;
  }
  v5 = a2[14];
  v6 = 1.0;
  v7 = 1.0 / sqrtf((float)((float)(v3 * v3) + (float)(v4 * v4)) + (float)(v5 * v5));
  v8 = v7 * v3;
  v9 = v7 * v4;
  v10 = v7 * v5;
  v11 = *(float *)(a1 + 20);
  v12 = *(float *)(a1 + 24);
  v13 = *(float *)(a1 + 28);
  v14 = (float)((float)(v8 * v11) + (float)(v9 * v12)) + (float)(v10 * v13);
  if (v14 > 1.0)
    v14 = 1.0;
  if (v14 < -1.0)
    v14 = -1.0;
  v15 = 0.0;
  if (fabsf(v14 + -1.0) <= 0.00001)
  {
    v20 = 0.0;
    goto LABEL_12;
  }
  v16 = -(float)((float)(v9 * v13) - (float)(v10 * v12));
  v17 = -(float)((float)(v10 * v11) - (float)(v8 * v13));
  v18 = -(float)((float)(v8 * v12) - (float)(v9 * v11));
  v19 = (float)((float)(v16 * v16) + (float)(v17 * v17)) + (float)(v18 * v18);
  if (fabsf(v19) <= 0.00001)
  {
    v20 = 3.1416;
    goto LABEL_12;
  }
  v20 = acosf(v14);
  v21 = 1.0 / sqrtf(v19);
  v15 = v21 * v16;
  v22 = v21 * v17;
  v6 = v21 * v18;
LABEL_13:
  a2[22] = v20;
  a2[28] = v15;
  a2[29] = v22;
  a2[30] = v6;
}

void CA::Render::EmitterBehaviors::SimpleAttractor::~SimpleAttractor(CA::Render::EmitterBehaviors::SimpleAttractor *this)
{
  malloc_zone_t *malloc_zone;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

float32_t CA::Render::EmitterBehaviors::SimpleAttractor::operator()(uint64_t a1, float32x2_t *a2, float32x2_t *a3, double a4, double a5, double a6)
{
  float32x2_t v6;
  float v7;

  v6 = vsub_f32(a2[4], *(float32x2_t *)(a1 + 12));
  v7 = vaddv_f32(vmul_f32(v6, v6));
  if (v7 < *(float *)(a1 + 28))
  {
    *(float *)&a6 = fmaxf(v7, 0.0001);
    *a3 = vmla_n_f32(*a3, v6, -(float)((float)((float)(*(float *)(a1 + 32) * v7) + -1.0)* vmlas_n_f32(-*(float *)(a1 + 20), *(float *)(a1 + 24), vrsqrte_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0)).f32[0])));
  }
  return v6.f32[0];
}

void CA::Render::EmitterBehaviors::Attractor::~Attractor(CA::Render::EmitterBehaviors::Attractor *this)
{
  malloc_zone_t *malloc_zone;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

float32_t CA::Render::EmitterBehaviors::Attractor::operator()(uint64_t a1, float32x2_t *a2, float32x2_t *a3, double a4, double a5, double a6, double a7)
{
  float32x2_t v7;
  float32x2_t v8;
  float v9;
  int v10;
  float v11;
  float32x2_t v12;
  float32x2_t v13;
  int32x2_t v14;
  float v15;
  float v16;
  float32x2_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float32_t result;

  v7 = a2[4];
  v8 = vsub_f32(v7, *(float32x2_t *)(a1 + 16));
  LODWORD(a7) = a2[5].i32[0];
  v9 = *(float *)&a7 - *(float *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 12);
  if (v10 == 2)
  {
    v16 = *(float *)(a1 + 36);
    v17 = *(float32x2_t *)(a1 + 28);
    v18 = (float)(vaddv_f32(vmul_f32(v17, v8)) + (float)(v16 * v9)) + *(float *)(a1 + 40);
    v9 = *(float *)&a7 + (float)(v18 * v16);
    *(float *)&a7 = fabsf(v18);
    v15 = v18 * v18;
    LODWORD(a7) = vrecpe_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0)).u32[0];
    v8 = vmla_n_f32(v7, v17, v18);
  }
  else
  {
    if (v10 == 1)
    {
      v11 = *(float *)(a1 + 36);
      v12 = *(float32x2_t *)(a1 + 28);
      v13 = vmul_f32(v12, v8);
      v13.f32[0] = vaddv_f32(v13) + (float)(v11 * v9);
      v8 = vmls_lane_f32(v8, v12, v13, 0);
      v9 = v9 - (float)(v13.f32[0] * v11);
    }
    v14 = (int32x2_t)vmul_f32(v8, v8);
    v15 = (float)(*(float *)&v14.i32[1] + (float)(v9 * v9)) + *(float *)v14.i32;
    *(float *)v14.i32 = fmaxf(v15, 0.0001);
    LODWORD(a7) = vrsqrte_f32((float32x2_t)vdup_lane_s32(v14, 0)).u32[0];
  }
  v19 = (float)(v15 - *(float *)(a1 + 68)) * *(float *)(a1 + 72);
  if (v19 > 1.0)
    v19 = 1.0;
  if (v19 >= 0.0)
    v20 = 1.0 - v19;
  else
    v20 = 1.0;
  v21 = v20 * vmlas_n_f32(-*(float *)(a1 + 52), *(float *)(a1 + 56), *(float *)&a7);
  *a3 = vmla_n_f32(*a3, v8, v21);
  result = a3[1].f32[0] + (float)(v21 * v9);
  a3[1].f32[0] = result;
  return result;
}

uint64_t CA::Render::emitter_find_cell(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t i;
  CA::Render::String *v6;

  v2 = 0;
  if (a1 && a2)
  {
    v4 = *(unsigned int *)(a1 + 16);
    if ((a2 & 0x40000000) != 0)
    {
      if ((a2 & 0xBFFFFFFF) < v4)
      {
        i = a1 + 8 * (a2 & 0xBFFFFFFF) + 24;
        return *(_QWORD *)i;
      }
    }
    else if ((_DWORD)v4)
    {
      for (i = a1 + 24; ; i += 8)
      {
        v6 = *(CA::Render::String **)(*(_QWORD *)i + 16);
        if (v6)
        {
          if (CA::Render::String::equal(v6, a2))
            break;
        }
        if (!--v4)
          return 0;
      }
      return *(_QWORD *)i;
    }
    return 0;
  }
  return v2;
}

uint64_t CA::Render::cell_atom_param_index(uint64_t this)
{
  if ((int)this > 380)
  {
    if ((int)this > 516)
    {
      if ((int)this <= 578)
      {
        switch((_DWORD)this)
        {
          case 0x205:
            return 21;
          case 0x207:
            return 22;
          case 0x242:
            return 6;
        }
      }
      else if ((int)this > 600)
      {
        if ((_DWORD)this == 601)
          return 9;
        if ((_DWORD)this == 603)
          return 10;
      }
      else
      {
        if ((_DWORD)this == 579)
          return 7;
        if ((_DWORD)this == 597)
          return 8;
      }
      return 0xFFFFFFFFLL;
    }
    if ((int)this <= 449)
    {
      if ((int)this > 404)
      {
        if ((_DWORD)this == 405)
          return 17;
        if ((_DWORD)this == 406)
          return 18;
      }
      else
      {
        if ((_DWORD)this == 381)
          return 35;
        if ((_DWORD)this == 404)
          return 16;
      }
      return 0xFFFFFFFFLL;
    }
    switch((int)this)
    {
      case 470:
        return 19;
      case 471:
      case 473:
      case 474:
        return 0xFFFFFFFFLL;
      case 472:
        return 20;
      case 475:
        return 13;
      case 476:
        return 14;
      case 477:
        return 15;
      default:
        if ((_DWORD)this == 450)
        {
          this = 27;
        }
        else
        {
          if ((_DWORD)this != 451)
            return 0xFFFFFFFFLL;
          this = 31;
        }
        break;
    }
  }
  else if ((int)this > 192)
  {
    if ((int)this > 245)
    {
      if ((int)this <= 338)
      {
        if ((_DWORD)this == 246)
          return 32;
        if ((_DWORD)this == 338)
          return 1;
      }
      else
      {
        switch((_DWORD)this)
        {
          case 0x153:
            return 2;
          case 0x172:
            return 11;
          case 0x173:
            return 12;
        }
      }
      return 0xFFFFFFFFLL;
    }
    if ((int)this > 194)
    {
      if ((_DWORD)this == 195)
        return 5;
      if ((_DWORD)this == 245)
        return 28;
      return 0xFFFFFFFFLL;
    }
    if ((_DWORD)this == 193)
      return 3;
    else
      return 4;
  }
  else if ((int)this <= 38)
  {
    if ((int)this <= 36)
    {
      if ((_DWORD)this == 21)
        return 30;
      if ((_DWORD)this == 22)
        return 34;
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    if ((int)this > 61)
    {
      switch((_DWORD)this)
      {
        case 0x3E:
          return 29;
        case 0x3F:
          return 33;
        case 0x86:
          return 36;
      }
      return 0xFFFFFFFFLL;
    }
    if ((_DWORD)this != 39)
    {
      if ((_DWORD)this == 59)
        return 0;
      return 0xFFFFFFFFLL;
    }
  }
  return this;
}

uint64_t CA::Render::emitter_find_behavior(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t i;
  CA::Render::String *v6;

  v2 = 0;
  if (a1 && a2)
  {
    v4 = *(unsigned int *)(a1 + 16);
    if ((a2 & 0x40000000) != 0)
    {
      if ((a2 & 0xBFFFFFFF) < v4)
      {
        i = a1 + 8 * (a2 & 0xBFFFFFFF) + 24;
        return *(_QWORD *)i;
      }
    }
    else if ((_DWORD)v4)
    {
      for (i = a1 + 24; ; i += 8)
      {
        v6 = *(CA::Render::String **)(*(_QWORD *)i + 24);
        if (v6)
        {
          if (CA::Render::String::equal(v6, a2))
            break;
        }
        if (!--v4)
          return 0;
      }
      return *(_QWORD *)i;
    }
    return 0;
  }
  return v2;
}

uint64_t CA::Render::emitter_atom_param_index(CA::Render *this, _QWORD *a2, unint64_t *a3)
{
  uint64_t result;

  *a2 = 1;
  if ((int)this > 337)
  {
    if ((int)this <= 516)
    {
      if ((_DWORD)this == 338)
        return 1;
      if ((_DWORD)this == 475)
        return 10;
    }
    else
    {
      switch((_DWORD)this)
      {
        case 0x205:
          return 11;
        case 0x206:
          return 12;
        case 0x242:
          return 9;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if ((int)this <= 155)
  {
    switch((_DWORD)this)
    {
      case 0x3B:
        return 0;
      case 0x9A:
        return 18;
      case 0x9B:
        return 17;
    }
    return 0xFFFFFFFFLL;
  }
  switch((int)this)
  {
    case 198:
      result = 8;
      break;
    case 199:
      result = 2;
      break;
    case 200:
    case 201:
    case 203:
    case 204:
      return 0xFFFFFFFFLL;
    case 202:
      *a2 = 2;
      result = 3;
      break;
    case 205:
      *a2 = 2;
      result = 6;
      break;
    case 206:
      result = 5;
      break;
    default:
      if ((_DWORD)this != 156)
        return 0xFFFFFFFFLL;
      *a2 = 4;
      result = 13;
      break;
  }
  return result;
}

void CA::Render::EmitterState::~EmitterState(CA::Render::EmitterState *this)
{
  malloc_zone_t *malloc_zone;

  CA::Render::EmitterState::~EmitterState(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  CA::Render::EmitterState *v2;
  CA::Render::EmitterState *v3;
  uint64_t *v4;
  const CA::Render::Object *v5;
  void *v6;

  *(_QWORD *)this = off_1E15968F0;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::EmitterState::_list_lock);
  v2 = (CA::Render::EmitterState *)CA::Render::EmitterState::_list;
  if (CA::Render::EmitterState::_list)
  {
    if ((CA::Render::EmitterState *)CA::Render::EmitterState::_list == this)
    {
      v4 = &CA::Render::EmitterState::_list;
LABEL_7:
      *v4 = *((_QWORD *)this + 2);
    }
    else
    {
      while (1)
      {
        v3 = v2;
        v2 = (CA::Render::EmitterState *)*((_QWORD *)v2 + 2);
        if (!v2)
          break;
        if (v2 == this)
        {
          v4 = (uint64_t *)((char *)v3 + 16);
          goto LABEL_7;
        }
      }
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::EmitterState::_list_lock);
  CA::Render::EmitterState::free_cells_state(this, (uint64_t)this + 112);
  v6 = (void *)*((_QWORD *)this + 18);
  if (v6)
  {
    *((_QWORD *)this + 19) = v6;
    operator delete(v6);
  }
  --dword_1ECDC7C68;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, v5);
}

void CA::Render::emitter_cells_copy(_QWORD *a1, _DWORD *a2)
{
  _DWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  char *v6;
  CA::Render::Array *v7;
  uint64_t i;
  malloc_zone_t *malloc_zone;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  _QWORD v36[2];

  v2 = a2;
  v3 = a1;
  v36[1] = *MEMORY[0x1E0C80C00];
  if (!a2)
    goto LABEL_42;
  v4 = a2[4];
  if (v4 < 0x201)
  {
    MEMORY[0x1E0C80A78](a1);
    v6 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFF0);
    bzero(v6, v5);
    if ((_DWORD)v4)
      goto LABEL_4;
LABEL_38:
    v2 = 0;
    goto LABEL_42;
  }
  v6 = (char *)malloc_type_malloc(8 * v4, 0x15FFAEDFuLL);
  if (!v6)
    goto LABEL_38;
LABEL_4:
  v36[0] = v3;
  v7 = 0;
  for (i = 0; i != v4; ++i)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v10 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0xE8uLL, 0x743898A5uLL);
    v11 = v10;
    if (v10)
    {
      v12 = *(_QWORD *)&v2[2 * i + 6];
      v10[2] = 1;
      v10[3] = 14;
      ++dword_1ECDC7C60;
      *(_QWORD *)v10 = off_1E15964B0;
      v13 = *(_QWORD *)(v12 + 16);
      if (v13)
      {
        v14 = (unsigned int *)(v13 + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        if (!v15)
        {
          do
          {
            v13 = 0;
            v32 = __ldaxr(v14);
          }
          while (__stlxr(v32 - 1, v14));
        }
      }
      *((_QWORD *)v10 + 2) = v13;
      v16 = *(_QWORD *)(v12 + 24);
      if (v16)
      {
        v17 = (unsigned int *)(v16 + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
        if (!v18)
        {
          do
          {
            v16 = 0;
            v33 = __ldaxr(v17);
          }
          while (__stlxr(v33 - 1, v17));
        }
      }
      *((_QWORD *)v10 + 3) = v16;
      v19 = *(_QWORD *)(v12 + 32);
      if (v19)
      {
        v20 = (unsigned int *)(v19 + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 + 1, v20));
        if (!v21)
        {
          do
          {
            v19 = 0;
            v34 = __ldaxr(v20);
          }
          while (__stlxr(v34 - 1, v20));
        }
      }
      *((_QWORD *)v10 + 4) = v19;
      CA::Render::emitter_cells_copy(v10 + 10, *(_QWORD *)(v12 + 40));
      CA::Render::emitter_behaviors_copy((_QWORD *)v11 + 6, *(_DWORD **)(v12 + 48));
      v22 = *(_QWORD *)(v12 + 56);
      if (v22)
      {
        v23 = (unsigned int *)(v22 + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 + 1, v23));
        if (!v24)
        {
          do
          {
            v22 = 0;
            v35 = __ldaxr(v23);
          }
          while (__stlxr(v35 - 1, v23));
        }
      }
      *((_QWORD *)v11 + 7) = v22;
      *((_QWORD *)v11 + 8) = *(_QWORD *)(v12 + 64);
      v11[3] |= *(_DWORD *)(v12 + 12) & 0xFFFFFF00;
      v25 = *(_OWORD *)(v12 + 72);
      *(_OWORD *)(v11 + 22) = *(_OWORD *)(v12 + 88);
      *(_OWORD *)(v11 + 18) = v25;
      v26 = *(_OWORD *)(v12 + 104);
      v27 = *(_OWORD *)(v12 + 120);
      v28 = *(_OWORD *)(v12 + 136);
      *(_OWORD *)(v11 + 38) = *(_OWORD *)(v12 + 152);
      *(_OWORD *)(v11 + 34) = v28;
      *(_OWORD *)(v11 + 30) = v27;
      *(_OWORD *)(v11 + 26) = v26;
      v29 = *(_OWORD *)(v12 + 168);
      v30 = *(_OWORD *)(v12 + 184);
      v31 = *(_OWORD *)(v12 + 200);
      *(_OWORD *)(v11 + 54) = *(_OWORD *)(v12 + 216);
      *(_OWORD *)(v11 + 50) = v31;
      *(_OWORD *)(v11 + 46) = v30;
      *(_OWORD *)(v11 + 42) = v29;
    }
    *(_QWORD *)&v6[8 * (_QWORD)v7] = v11;
    if (v11)
      v7 = (CA::Render::Array *)((char *)v7 + 1);
  }
  if (v7)
    v2 = CA::Render::Array::new_array(v7, v6, 0, 0);
  else
    v2 = 0;
  v3 = (_QWORD *)v36[0];
  if (v4 >= 0x201)
    free(v6);
LABEL_42:
  *v3 = v2;
}

void CA::Render::emitter_behaviors_copy(_QWORD *a1, _DWORD *size)
{
  _DWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  char *v6;
  CA::Render::Array *v7;
  uint64_t i;
  malloc_zone_t *malloc_zone;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  _DWORD *v16;
  _DWORD *v17;
  unsigned int v18;
  _QWORD v19[2];

  v2 = size;
  v3 = a1;
  v19[1] = *MEMORY[0x1E0C80C00];
  if (!size)
    goto LABEL_27;
  v4 = size[4];
  if (v4 < 0x201)
  {
    MEMORY[0x1E0C80A78](a1);
    v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFF0);
    bzero(v6, v5);
    if ((_DWORD)v4)
      goto LABEL_4;
LABEL_23:
    v2 = 0;
    goto LABEL_27;
  }
  v6 = (char *)malloc_type_malloc(8 * v4, 0x7C8E9D7CuLL);
  if (!v6)
    goto LABEL_23;
LABEL_4:
  v19[0] = v3;
  v7 = 0;
  for (i = 0; i != v4; ++i)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v10 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x30uLL, 0x743898A5uLL);
    v11 = v10;
    if (v10)
    {
      v12 = *(_QWORD *)&v2[2 * i + 6];
      v10[2] = 1;
      v10[3] = 13;
      ++dword_1ECDC7C5C;
      *(_QWORD *)v10 = off_1E1597710;
      v10[4] = *(_DWORD *)(v12 + 16);
      v13 = *(_QWORD *)(v12 + 24);
      if (v13)
      {
        v14 = (unsigned int *)(v13 + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        if (!v15)
        {
          do
          {
            v13 = 0;
            v18 = __ldaxr(v14);
          }
          while (__stlxr(v18 - 1, v14));
        }
      }
      *((_QWORD *)v10 + 3) = v13;
      v16 = *(_DWORD **)(v12 + 32);
      if (v16)
        v17 = CA::Render::Array::new_array((CA::Render::Array *)v16[4], v16 + 6, (CA::Render::Object *const *)1, v16[3] >> 8);
      else
        v17 = 0;
      *((_QWORD *)v11 + 4) = v17;
      *((_QWORD *)v11 + 5) = 0;
      v11[3] |= *(_DWORD *)(v12 + 12) & 0xFFFFFF00;
    }
    *(_QWORD *)&v6[8 * (_QWORD)v7] = v11;
    if (v11)
      v7 = (CA::Render::Array *)((char *)v7 + 1);
  }
  if (v7)
    v2 = CA::Render::Array::new_array(v7, v6, 0, 0);
  else
    v2 = 0;
  v3 = (_QWORD *)v19[0];
  if (v4 >= 0x201)
    free(v6);
LABEL_27:
  *v3 = v2;
}

void CA::Render::EmitterBehavior::~EmitterBehavior(CA::Render::EmitterBehavior *this, const CA::Render::Object *a2)
{
  malloc_zone_t *malloc_zone;

  CA::Render::EmitterBehavior::~EmitterBehavior(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *(_QWORD *)this = off_1E1597710;
  v3 = *((_QWORD *)this + 5);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 4);
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
  }
  v8 = (unsigned int *)*((_QWORD *)this + 3);
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
  }
  --dword_1ECDC7C5C;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

void CA::Render::EmitterBehavior::encode(CA::Render::EmitterBehavior *this, CA::Render::Encoder *a2)
{
  CA::Render::Object::encode(this, a2);
  CA::Render::Encoder::encode_atom(a2, *((_DWORD *)this + 4));
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 3));
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 4));
}

void CA::Render::EmitterBehavior::show(CA::Render::EmitterBehavior *this, int a2, char a3)
{
  _BOOL4 v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  CA::Render *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t buf[4];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = x_log_hook_p();
  if ((a3 & 1) != 0)
  {
    if (v6)
    {
      -[__CFString cStringUsingEncoding:]((id)CAAtomGetString(*((_DWORD *)this + 4)), "cStringUsingEncoding:", 4);
LABEL_21:
      x_log_();
      return;
    }
    v17 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v18 = -[__CFString cStringUsingEncoding:]((id)CAAtomGetString(*((_DWORD *)this + 4)), "cStringUsingEncoding:", 4);
      *(_DWORD *)buf = 136315138;
      v20 = v18;
      v14 = "(emitter-behavior %s)";
      v15 = v17;
      v16 = 12;
      goto LABEL_24;
    }
  }
  else
  {
    if (v6)
    {
      -[__CFString cStringUsingEncoding:]((id)CAAtomGetString(*((_DWORD *)this + 4)), "cStringUsingEncoding:", 4);
      x_log_();
    }
    else
    {
      v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v8 = -[__CFString cStringUsingEncoding:]((id)CAAtomGetString(*((_DWORD *)this + 4)), "cStringUsingEncoding:", 4);
        *(_DWORD *)buf = 136315138;
        v20 = v8;
        _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_DEFAULT, "(emitter-behavior %s", buf, 0xCu);
      }
    }
    if ((*((_BYTE *)this + 13) & 1) == 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v9 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v9, OS_LOG_TYPE_DEFAULT, "(enabled false)", buf, 2u);
        }
      }
    }
    if (*((_QWORD *)this + 4))
    {
      v10 = (CA::Render *)(a2 + 1);
      CA::Render::show_newline(v10);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v11 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v11, OS_LOG_TYPE_DEFAULT, "(values ", buf, 2u);
        }
      }
      CA::Render::show_object(*((CA::Render **)this + 4), v10);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v12 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
    if (x_log_hook_p())
      goto LABEL_21;
    v13 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v14 = ")";
      v15 = v13;
      v16 = 2;
LABEL_24:
      _os_log_impl(&dword_184457000, v15, OS_LOG_TYPE_DEFAULT, v14, buf, v16);
    }
  }
}

void CA::Render::EmitterCell::~EmitterCell(CA::Render::EmitterCell *this, const CA::Render::Object *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  *(_QWORD *)this = off_1E15964B0;
  v3 = (unsigned int *)*((_QWORD *)this + 7);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 6);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  v11 = (unsigned int *)*((_QWORD *)this + 5);
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
  }
  v15 = (unsigned int *)*((_QWORD *)this + 4);
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
  }
  v19 = (unsigned int *)*((_QWORD *)this + 3);
  if (v19)
  {
    v20 = v19 + 2;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
  }
  v23 = (unsigned int *)*((_QWORD *)this + 2);
  if (v23)
  {
    v24 = v23 + 2;
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
      (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 16))(v23);
  }
  --dword_1ECDC7C60;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E15964B0;
  v3 = (unsigned int *)*((_QWORD *)this + 7);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 6);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  v11 = (unsigned int *)*((_QWORD *)this + 5);
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
  }
  v15 = (unsigned int *)*((_QWORD *)this + 4);
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
  }
  v19 = (unsigned int *)*((_QWORD *)this + 3);
  if (v19)
  {
    v20 = v19 + 2;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
  }
  v23 = (unsigned int *)*((_QWORD *)this + 2);
  if (v23)
  {
    v24 = v23 + 2;
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
      (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 16))(v23);
  }
  --dword_1ECDC7C60;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

__n128 CA::Render::EmitterCell::encode(CA::Render::EmitterCell *this, CA::Render::Encoder *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  CA::Render::Object::encode(this, a2);
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 2));
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 3));
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 4));
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 5));
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 6));
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 7));
  CA::Render::Encoder::encode_atom(a2, *((_DWORD *)this + 16));
  CA::Render::Encoder::encode_atom(a2, *((_DWORD *)this + 17));
  v4 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(v4 + 160) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 160);
    v4 = *((_QWORD *)a2 + 4);
  }
  v5 = *(_OWORD *)((char *)this + 88);
  *(_OWORD *)v4 = *(_OWORD *)((char *)this + 72);
  *(_OWORD *)(v4 + 16) = v5;
  v6 = *(_OWORD *)((char *)this + 104);
  v7 = *(_OWORD *)((char *)this + 120);
  v8 = *(_OWORD *)((char *)this + 152);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)((char *)this + 136);
  *(_OWORD *)(v4 + 80) = v8;
  *(_OWORD *)(v4 + 32) = v6;
  *(_OWORD *)(v4 + 48) = v7;
  result = *(__n128 *)((char *)this + 168);
  v10 = *(_OWORD *)((char *)this + 184);
  v11 = *(_OWORD *)((char *)this + 216);
  *(_OWORD *)(v4 + 128) = *(_OWORD *)((char *)this + 200);
  *(_OWORD *)(v4 + 144) = v11;
  *(__n128 *)(v4 + 96) = result;
  *(_OWORD *)(v4 + 112) = v10;
  *((_QWORD *)a2 + 4) += 160;
  return result;
}

CA::Render::EmitterLayer *CA::Render::EmitterLayer::EmitterLayer(CA::Render::EmitterLayer *this, CA::Render::Decoder *a2)
{
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E1598C30;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = (CA::Render::Decoder::decode_int32(a2) << 8) | 0xF;
  ++dword_1ECDC7C64;
  *(_QWORD *)this = off_1E15967E8;
  *((_QWORD *)this + 2) = CA::Render::Decoder::decode_size_t(a2);
  *((_QWORD *)this + 3) = 0;
  v5 = 14;
  *((_QWORD *)this + 4) = CA::Render::Decoder::decode_array_object(a2, 1, &v5, 0);
  v5 = 13;
  *((_QWORD *)this + 5) = CA::Render::Decoder::decode_array_object(a2, 1, &v5, 0);
  *((_QWORD *)this + 6) = CA::Render::Decoder::decode_object(a2, 36);
  *((_QWORD *)this + 7) = CA::Render::Decoder::decode_object(a2, 56);
  *((_DWORD *)this + 16) = CA::Render::Decoder::decode_atom(a2);
  *((_DWORD *)this + 17) = CA::Render::Decoder::decode_atom(a2);
  *((_DWORD *)this + 18) = CA::Render::Decoder::decode_atom(a2);
  *((_DWORD *)this + 38) = CA::Render::Decoder::decode_int32(a2);
  *((double *)this + 20) = fmax(COERCE_DOUBLE(CA::Render::Decoder::decode_int64(a2)), 0.0);
  CA::Render::Decoder::decode_bytes(a2, (char *)this + 76, 0x4CuLL);
  return this;
}

CA::Render::EmitterCell *CA::Render::EmitterCell::EmitterCell(CA::Render::EmitterCell *this, CA::Render::Decoder *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E1598C30;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = (CA::Render::Decoder::decode_int32(a2) << 8) | 0xE;
  ++dword_1ECDC7C60;
  *(_QWORD *)this = off_1E15964B0;
  *((_QWORD *)this + 2) = CA::Render::Decoder::decode_object(a2, 49);
  *((_QWORD *)this + 3) = CA::Render::Decoder::decode_object(a2, 6, (uint64_t)&CA::Render::texture_types);
  *((_QWORD *)this + 4) = CA::Render::Decoder::decode_object(a2, 56);
  v11 = 14;
  *((_QWORD *)this + 5) = CA::Render::Decoder::decode_array_object(a2, 1, &v11, 0);
  v11 = 13;
  *((_QWORD *)this + 6) = CA::Render::Decoder::decode_array_object(a2, 1, &v11, 0);
  *((_QWORD *)this + 7) = CA::Render::Decoder::decode_object(a2, 52);
  *((_DWORD *)this + 16) = CA::Render::Decoder::decode_atom(a2);
  *((_DWORD *)this + 17) = CA::Render::Decoder::decode_atom(a2);
  CA::Render::Decoder::decode_bytes(a2, (char *)this + 72, 0xA0uLL);
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 16);
    if (v5 <= 3)
    {
      CA::Render::Decoder::set_fatal_error(a2, "%s - _contentsRect size %u", "EmitterCell", v5);
      v6 = (unsigned int *)*((_QWORD *)this + 4);
      if (v6)
      {
        v7 = v6 + 2;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
        *((_QWORD *)this + 4) = 0;
      }
    }
  }
  return this;
}

CA::Render::EmitterBehavior *CA::Render::EmitterBehavior::EmitterBehavior(CA::Render::EmitterBehavior *this, CA::Render::Decoder *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E1598C30;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = (CA::Render::Decoder::decode_int32(a2) << 8) | 0xD;
  ++dword_1ECDC7C5C;
  *(_QWORD *)this = off_1E1597710;
  *((_DWORD *)this + 4) = CA::Render::Decoder::decode_atom(a2);
  *((_QWORD *)this + 3) = CA::Render::Decoder::decode_object(a2, 49);
  v12 = 28;
  v4 = CA::Render::Decoder::decode_array_object(a2, 1, &v12, 0);
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = v4;
    if (!v6)
    {
      v7 = 0;
      do
        v11 = __ldaxr(v5);
      while (__stlxr(v11 - 1, v5));
    }
    *((_QWORD *)this + 4) = v7;
    do
    {
      v8 = __ldaxr(v5);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v5));
    if (!v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  *((_QWORD *)this + 5) = 0;
  return this;
}

void CA::Render::MetalTexture::~MetalTexture(id *this)
{
  malloc_zone_t *malloc_zone;

  CA::Render::MetalTexture::~MetalTexture(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  *this = off_1E1596AF0;

  --dword_1ECDC7CB0;
  CA::Render::Texture::~Texture((CGColorSpaceRef *)this);
}

uint64_t CA::Render::MetalTexture::finalize(CA::Render::MetalTexture *this)
{
  CA::Render::post_notification(3u, (unint64_t)this, 0, 1);
  return (*(uint64_t (**)(CA::Render::MetalTexture *))(*(_QWORD *)this + 184))(this);
}

uint64_t CA::Render::MetalTexture::caches_encoding(CA::Render::MetalTexture *this)
{
  return 0;
}

void CA::Render::MetalTexture::show(id *this, unsigned int a2, char a3)
{
  _BOOL4 v5;
  NSObject *v6;
  int v7;
  int v8;
  NSObject *v9;
  const __CFString *v10;
  const __CFString *v11;
  NSObject *v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint8_t v20[4];
  uint8_t *v21;
  uint8_t buf[16];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = x_log_hook_p();
  if ((a3 & 1) != 0)
  {
    if (v5)
    {
      objc_msgSend(this[12], "pixelFormat");
      MTLPixelFormatGetName();
LABEL_20:
      x_log_();
      return;
    }
    v17 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *((_DWORD *)this + 4);
      v19 = *((_DWORD *)this + 5);
      objc_msgSend(this[12], "pixelFormat");
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v18;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v19;
      *(_WORD *)&buf[14] = 2080;
      *(_QWORD *)&v23 = MTLPixelFormatGetName();
      v14 = "<metal-texture [%d %d] [%s]>";
      v15 = v17;
      v16 = 24;
      goto LABEL_23;
    }
  }
  else
  {
    if (v5)
    {
      objc_msgSend(this[12], "pixelFormat");
      MTLPixelFormatGetName();
      x_log_();
    }
    else
    {
      v6 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *((_DWORD *)this + 4);
        v8 = *((_DWORD *)this + 5);
        objc_msgSend(this[12], "pixelFormat");
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v7;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v8;
        *(_WORD *)&buf[14] = 2080;
        *(_QWORD *)&v23 = MTLPixelFormatGetName();
        _os_log_impl(&dword_184457000, v6, OS_LOG_TYPE_DEFAULT, "(metal-texture [%d %d] %s", buf, 0x18u);
      }
    }
    if (this[6])
    {
      if ((*((_BYTE *)this + 14) & 8) != 0)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v9 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v9, OS_LOG_TYPE_DEFAULT, " colormatching-disabled", buf, 2u);
          }
        }
      }
      v10 = (const __CFString *)CGColorSpaceCopyICCProfileDescription();
      if (v10)
      {
        v11 = v10;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        *(_OWORD *)buf = 0u;
        v23 = 0u;
        CFStringGetCString(v10, (char *)buf, 127, 0x8000100u);
        if (buf[0])
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v12 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v20 = 136315138;
              v21 = buf;
              _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_DEFAULT, " (colorspace \"%s\")", v20, 0xCu);
            }
          }
        }
        CFRelease(v11);
      }
    }
    if (x_log_hook_p())
      goto LABEL_20;
    v13 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v14 = ")";
      v15 = v13;
      v16 = 2;
LABEL_23:
      _os_log_impl(&dword_184457000, v15, OS_LOG_TYPE_DEFAULT, v14, buf, v16);
    }
  }
}

uint64_t CA::Render::MetalTexture::depth(id *this)
{
  return objc_msgSend(this[12], "depth");
}

uint64_t CA::Render::MetalTexture::ref_image_data(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 104);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

unsigned int *CA::Render::MetalTexture::unref_image_data(unsigned int *this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = this + 26;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (this)
  {
    if (v2 == 1)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

void sub_1846ADE20(_Unwind_Exception *a1)
{
  CGColorSpaceRef *v1;

  --dword_1ECDC7CB0;
  CA::Render::Texture::~Texture(v1);
  _Unwind_Resume(a1);
}

CA::Render::MetalTexture *CA::Render::MetalTexture::MetalTexture(CA::Render::MetalTexture *this, objc_object *a2)
{
  CA::Render::Texture::Texture(this, -[objc_object width](a2, "width"), -[objc_object height](a2, "height"));
  *((_BYTE *)this + 12) = 34;
  ++dword_1ECDC7CB0;
  *(_QWORD *)this = off_1E1596AF0;
  *((_QWORD *)this + 12) = a2;
  *((_DWORD *)this + 3) |= 0x40000u;
  *((_DWORD *)this + 26) = 1;
  return this;
}

void sub_1846ADED4(_Unwind_Exception *a1)
{
  CGColorSpaceRef *v1;
  uint64_t v2;

  --*(_DWORD *)(v2 + 3248);
  CA::Render::Texture::~Texture(v1);
  _Unwind_Resume(a1);
}

CA::Render::MetalTexture *CA::Render::MetalTexture::decode(CA::Render::MetalTexture *this, CA::Render::Decoder *a2)
{
  malloc_zone_t *malloc_zone;
  CA::Render::MetalTexture *result;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = (CA::Render::MetalTexture *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x70uLL, 0x743898A5uLL);
  if (result)
    return CA::Render::MetalTexture::MetalTexture(result, 0);
  return result;
}

void CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(uint64_t a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v6;

  if (*(_DWORD *)(a1 + 48) != a2)
  {
    v4 = *(_QWORD **)(a1 + 24);
    if (v4)
    {
      if (*v4)
        MEMORY[0x186DBD978](*v4, 0x1000C80F7F8B94BLL);
      MEMORY[0x186DBD990](v4, 0x20C40960023A9);
      *(_QWORD *)(a1 + 24) = 0;
    }
    if (a2 == 3)
    {
      v5 = (_QWORD *)operator new();
      v6 = (char *)operator new[]();
      *v5 = v6;
      v5[1] = v6;
      v5[2] = v6 + 960;
      bzero(v6, 0x3C0uLL);
      *(_QWORD *)(a1 + 24) = v5;
    }
    *(_DWORD *)(a1 + 48) = a2;
  }
}

float CA::OGL::PerformanceHUD::initialize_timebase(CA::OGL::PerformanceHUD *this)
{
  unint64_t v1;
  unint64_t v2;
  float result;
  mach_timebase_info v4[2];

  v4[1] = *(mach_timebase_info *)MEMORY[0x1E0C80C00];
  v4[0] = 0;
  mach_timebase_info(v4);
  LODWORD(v2) = v4[0].denom;
  LODWORD(v1) = v4[0].numer;
  *(float *)&v1 = (double)v1 * 0.000001 / (double)v2;
  CA::OGL::PerformanceHUD::_scale_ticks_to_ms = v1;
  result = 1.0 / *(float *)&v1;
  CA::OGL::PerformanceHUD::_scale_ms_to_ticks = LODWORD(result);
  return result;
}

float CA::OGL::PerformanceHUD::register_counter(CA::OGL::PerformanceHUD *a1, int a2, unsigned int a3, uint64_t a4, int a5)
{
  char *v6;
  float result;

  if (a3 >= 0x30)
    __assert_rtn("register_counter", "ogl-performance-hud.cpp", 569, "counter_index < _num_counters");
  v6 = (char *)a1 + 64 * (unint64_t)a3;
  if (!*((_DWORD *)v6 + 203))
  {
    *((_QWORD *)v6 + 100) = a4;
    *((_DWORD *)v6 + 202) = a2;
    *((_DWORD *)v6 + 203) = a5;
    *((_QWORD *)v6 + 98) = 1;
    CA::OGL::PerformanceHUD::CounterInfo::set_display_mode((uint64_t)(v6 + 768), 1);
    *((_DWORD *)v6 + 206) = 0;
    v6[828] = 0;
    return CA::OGL::PerformanceHUD::layout(a1);
  }
  return result;
}

float CA::OGL::PerformanceHUD::layout(CA::OGL::PerformanceHUD *this)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  unsigned int v7;
  float v8;
  __int16 v9;
  int16x4_t v15;
  int16x4_t v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float result;

  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  v2 = 0;
  v3 = (float)(*(float *)&dword_1ECDC6980 >> 16);
  v4 = (float)(unsigned __int16)*(float *)&dword_1ECDC6980;
  v5 = v3 + 360.0;
  *((float *)this + 1030) = v3 + 360.0;
  *((float *)this + 1031) = v4;
  v6 = v4;
  do
  {
    if (*(_DWORD *)((char *)this + v2 + 812)
      && ((*((_DWORD *)this + 1034) >> *(_DWORD *)((char *)this + v2 + 808)) & 1) != 0)
    {
      v7 = *(_DWORD *)((char *)this + v2 + 816) - 1;
      v8 = 0.0;
      if (v7 <= 2)
        v8 = flt_18475B398[v7];
      v6 = v6 + v8;
      *((float *)this + 1031) = v6;
    }
    v2 += 64;
  }
  while (v2 != 3072);
  if ((*((_BYTE *)this + 4136) & 0x10) != 0)
  {
    *((float *)this + 1028) = v3 + 50.0;
    *((float *)this + 1029) = v4 + 50.0;
    if (*(float *)&dword_1ECDC6978 < 0x100)
    {
      if (*(float *)&dword_1ECDC6978 >= 0x3F)
      {
        _S0 = (float)*(float *)&dword_1ECDC6978 * 0.0039216;
        __asm { FCVT            H0, S0 }
        v9 = LOWORD(_S0);
      }
      else
      {
        v9 = 13288;
      }
    }
    else
    {
      v9 = 15360;
    }
    v15.i16[1] = 15360;
    v15.i32[1] = 1006648320;
    v15.i16[0] = v9;
    v16 = vzip1_s16(v15, v15);
    v16.i16[2] = v9;
    *((int16x4_t *)this + 510) = v16;
    if (*(float *)&dword_1ECDC697C <= 0x384)
    {
      if (*(float *)&dword_1ECDC697C >= 0x40)
      {
        v18 = truncf(*(float *)&dword_1ECDC697C);
        goto LABEL_22;
      }
      v17 = 1115684864;
    }
    else
    {
      v17 = 1147207680;
    }
    v18 = *(float *)&v17;
LABEL_22:
    v3 = *((float *)this + 1028);
    v5 = v3 + v18;
    v4 = *((float *)this + 1029);
    v6 = v4 + v18;
  }
  v19 = v3 + -2.0;
  *((float *)this + 1028) = v19;
  v20 = v4 + -2.0;
  *((float *)this + 1029) = v20;
  v21 = v5 + 2.0;
  *((float *)this + 1030) = v21;
  v22 = v6 + 2.0;
  *((_DWORD *)this + 1024) = (int)v19;
  *((_DWORD *)this + 1025) = (int)v20;
  *((float *)this + 1031) = v22;
  *((_DWORD *)this + 1026) = (int)(float)(v21 - v19);
  result = v22 - v20;
  *((_DWORD *)this + 1027) = (int)result;
  return result;
}

void *CA::OGL::PerformanceHUD::update(CA::OGL::PerformanceHUD *this)
{
  unsigned int v2;
  float v3;
  float v4;
  __int128 v5;
  uint64_t v6;
  __int128 *v7;
  char *v8;
  int v9;
  char *v10;
  char *v11;
  double *v12;
  double *v13;
  double v14;
  CA::OGL::PerformanceHUD::CounterInfo *v15;
  char *v16;
  int v17;
  _DWORD *v18;
  char *v19;
  _QWORD *v20;
  float v21;
  float v22;
  int v23;
  unsigned __int8 v24;
  char v25;
  unsigned __int8 v27;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char *v39;
  const char *v40;
  uint64_t v41;
  size_t v42;
  size_t v43;
  float v44;
  uint64_t v45;
  char *v46;
  const char *v47;
  uint64_t v48;
  char *v49;
  size_t v50;
  size_t v51;
  double v52;
  unint64_t *v53;
  float v54;
  unint64_t v55;
  float v56;
  _BOOL4 v57;
  float v58;
  unint64_t v59;
  _BOOL4 v60;
  float v61;
  __int128 *v62;
  uint64_t v63;
  char *v64;
  const char *v65;
  uint64_t v66;
  size_t v67;
  size_t v68;
  float v69;
  float v70;
  float v71;
  int v72;
  int v73;
  unsigned __int8 v74;
  char v75;
  BOOL v76;
  unsigned __int8 v77;
  float v80;
  _BYTE *v81;
  double *v82;
  void *result;
  float v84;
  uint64_t v85;
  unsigned int v86;
  float v87;
  uint64_t v88;
  char __s[8];
  uint64_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v88 = mach_absolute_time();
  v2 = *((_DWORD *)this + 1034);
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  v3 = (float)(*(float *)&dword_1ECDC6980 >> 16);
  v4 = (float)(unsigned __int16)*(float *)&dword_1ECDC6980;
  *((_QWORD *)this + 505) = *((_QWORD *)this + 503);
  v5 = *((_OWORD *)this + 256);
  *(_OWORD *)((char *)this + 3976) = v5;
  *((_QWORD *)this + 507) = *((_QWORD *)this + 516);
  *((_QWORD *)this + 499) = *((_QWORD *)this + 514);
  CA::OGL::DebugRenderer::draw_rectangle_with_fill((uint64_t)this + 3976, (float *)this + 1030, *(double *)&v5);
  v6 = 0;
  *((_QWORD *)this + 507) = *((_QWORD *)this + 509);
  v87 = v3 + 360.0;
  v7 = &CA::OGL::PerformanceHUD::_global_values;
  v86 = v2;
  v84 = v3;
  do
  {
    v8 = (char *)this + 64 * v6;
    v9 = *((_DWORD *)v8 + 203);
    if (v9 && ((v2 >> *((_DWORD *)v8 + 202)) & 1) != 0)
    {
      v10 = (char *)this + 64 * v6;
      v11 = (char *)this + 8 * v6;
      v12 = (double *)(v11 + 384);
      if (v10[828])
        v13 = (double *)v7 + v6;
      else
        v13 = (double *)(v11 + 384);
      v14 = *v13;
      if (BYTE4(xmmword_1ECDC6AD0) && v9 == 2)
      {
        v81 = v10 + 828;
        *(_QWORD *)&v14 = (uint64_t)((double)*(uint64_t *)&v14
                                  + (double)(CA::OGL::PerformanceHUD::get_prev_counter_value(this, v6) - *(_QWORD *)&v14)
                                  * 0.995);
        if (*v81)
          v82 = (double *)v7 + v6;
        else
          v82 = v12;
        *v82 = v14;
      }
      if (initialized[0] != -1)
        dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
      v15 = (CA::OGL::PerformanceHUD::CounterInfo *)(v8 + 768);
      v16 = (char *)this + 64 * v6;
      v17 = *((_DWORD *)v16 + 206);
      if (v17 == 2
        || (v17 == 1) != *(_QWORD *)v15 < *(_QWORD *)&v14
        || (float)(*(float *)&CA::OGL::PerformanceHUD::_scale_ticks_to_ms
                 * (float)(v88 - *((_QWORD *)this + 8 * v6 + 97))) > *(float *)&dword_1ECDC6988)
      {
        *(double *)v15 = v14;
        *((_QWORD *)v16 + 97) = v88;
      }
      v18 = v8 + 812;
      v19 = (char *)this + 64 * v6;
      v20 = (_QWORD *)*((_QWORD *)v19 + 99);
      if (v20)
      {
        v21 = v14;
        if (*v18 != 7)
          v21 = (float)*(uint64_t *)&v14;
        v22 = fminf(v21 / (float)*((uint64_t *)v19 + 98), 1.0);
        v23 = (int)(float)(v22 * 255.0);
        if (v17)
          v24 = 0;
        else
          v24 = (int)(float)(v22 * 255.0);
        if (v17)
          v25 = 0;
        else
          v25 = ~(_BYTE)v23;
        if (v17 == 1)
        {
          v24 = ~(_BYTE)v23;
          v25 = (int)(float)(v22 * 255.0);
        }
        _ZF = v17 == 2;
        if (v17 == 2)
          v27 = 0;
        else
          v27 = v24;
        if (!_ZF)
          LOBYTE(v23) = v25;
        _S1 = (float)v27 * 0.0039216;
        __asm { FCVT            H1, S1 }
        _S2 = (float)v23 * 0.0039216;
        __asm { FCVT            H2, S2 }
        v33 = v20[1];
        *(float *)v33 = v22;
        *(_QWORD *)(v33 + 8) = LOWORD(_S1) | ((unint64_t)LOWORD(_S2) << 16) | 0x3A06000000000000;
        v34 = v20[2];
        v35 = v20[1] + 16;
        v20[1] = v35;
        if (v35 >= v34)
          v20[1] = *v20;
      }
      v36 = *((_QWORD *)this + 509);
      v37 = *((_DWORD *)v19 + 204);
      switch(v37)
      {
        case 3:
          *(_QWORD *)__s = 0;
          v90 = 0;
          v45 = CA::OGL::PerformanceHUD::CounterInfo::to_string(v15, __s);
          *((float *)this + 998) = v3;
          *((float *)this + 999) = v4;
          v46 = (char *)this + 64 * v6;
          v47 = (const char *)*((_QWORD *)v46 + 100);
          if (!v47)
            goto LABEL_92;
          v48 = v45;
          v49 = v19 + 792;
          v50 = strlen(*((const char **)v46 + 100));
          CA::OGL::DebugRenderer::draw_string((uint64_t)this + 3976, v47, v50);
          *((float *)this + 998) = v87 - (float)(unint64_t)(14 * v48);
          *((float *)this + 999) = v4;
          v51 = strlen(__s);
          CA::OGL::DebugRenderer::draw_string((uint64_t)this + 3976, __s, v51);
          v53 = *(unint64_t **)v49;
          if (!*(_QWORD *)v49)
            __assert_rtn("draw_graph2d", "ogl-performance-hud.cpp", 481, "_history");
          v54 = v4 + 50.0;
          v55 = v53[1];
          v56 = v3;
          if (v55 < v53[2])
          {
            do
            {
              LODWORD(v52) = *(_DWORD *)v55;
              *((float *)this + 998) = v56;
              v56 = v56 + 6.0;
              v57 = *(float *)&v52 > 1.0 || *(float *)&v52 < 0.0;
              if (*(float *)&v52 < 0.0 && *(float *)&v52 <= 1.0)
                v58 = 0.0;
              else
                v58 = 1.0;
              if (v57)
                *(float *)&v52 = v58;
              *(float *)&v52 = v54 + (float)(*(float *)&v52 * -32.0);
              *(float *)__s = v56;
              *(_DWORD *)&__s[4] = LODWORD(v52);
              *((float *)this + 999) = v54;
              *((_QWORD *)this + 507) = *(_QWORD *)(v55 + 8);
              v52 = CA::OGL::DebugRenderer::draw_rectangle_with_fill((uint64_t)this + 3976, (float *)__s, v52);
              v53 = *(unint64_t **)v49;
              v55 += 16;
            }
            while (v55 < *(_QWORD *)(*(_QWORD *)v49 + 16));
            v55 = v53[1];
          }
          v59 = *v53;
          v2 = v86;
          if (*v53 < v55)
          {
            do
            {
              LODWORD(v52) = *(_DWORD *)v59;
              v60 = *(float *)v59 > 1.0 || *(float *)v59 < 0.0;
              if (*(float *)v59 < 0.0 && *(float *)v59 <= 1.0)
                v61 = 0.0;
              else
                v61 = 1.0;
              if (v60)
                *(float *)&v52 = v61;
              *(float *)&v52 = v54 + (float)(*(float *)&v52 * -32.0);
              *(float *)__s = v56 + 6.0;
              *(_DWORD *)&__s[4] = LODWORD(v52);
              *((float *)this + 998) = v56;
              *((float *)this + 999) = v54;
              *((_QWORD *)this + 507) = *(_QWORD *)(v59 + 8);
              v52 = CA::OGL::DebugRenderer::draw_rectangle_with_fill((uint64_t)this + 3976, (float *)__s, v52);
              v59 += 16;
              v56 = v56 + 6.0;
            }
            while (v59 < *(_QWORD *)(*(_QWORD *)v49 + 8));
          }
          v4 = v4 + 18.0;
          *((_QWORD *)this + 507) = v36;
          v44 = 34.0;
          v3 = v84;
          break;
        case 2:
          v85 = *((_QWORD *)this + 509);
          v62 = v7;
          *(_QWORD *)__s = 0;
          v90 = 0;
          v63 = CA::OGL::PerformanceHUD::CounterInfo::to_string(v15, __s);
          *((float *)this + 998) = v3;
          *((float *)this + 999) = v4;
          v64 = (char *)this + 64 * v6;
          v65 = (const char *)*((_QWORD *)v64 + 100);
          if (!v65)
LABEL_92:
            __assert_rtn("draw_string", "ogl-debug-renderer.h", 136, "text");
          v66 = v63;
          v67 = strlen(*((const char **)v64 + 100));
          CA::OGL::DebugRenderer::draw_string((uint64_t)this + 3976, v65, v67);
          *((float *)this + 998) = v87 - (float)(unint64_t)(14 * v66);
          *((float *)this + 999) = v4;
          v68 = strlen(__s);
          CA::OGL::DebugRenderer::draw_string((uint64_t)this + 3976, __s, v68);
          if (*v18 == 7)
            v69 = *((double *)v19 + 102);
          else
            v69 = (float)*(uint64_t *)v15;
          v7 = v62;
          v2 = v86;
          v70 = v69 / (float)*((uint64_t *)this + 8 * v6 + 98);
          v71 = 1.0;
          if (v70 <= 1.0)
          {
            v71 = 0.0;
            if (v70 >= 0.0)
              v71 = v70;
          }
          v4 = v4 + 18.0;
          *((float *)this + 998) = v3;
          *((float *)this + 999) = v4;
          v72 = (int)(float)(v71 * 255.0);
          v73 = *((_DWORD *)v16 + 206);
          if (v73)
            v74 = 0;
          else
            v74 = (int)(float)(v71 * 255.0);
          if (v73)
            v75 = 0;
          else
            v75 = ~(_BYTE)v72;
          if (v73 == 1)
          {
            v74 = ~(_BYTE)v72;
            v75 = (int)(float)(v71 * 255.0);
          }
          v76 = v73 == 2;
          if (v73 == 2)
            v77 = 0;
          else
            v77 = v74;
          if (!v76)
            LOBYTE(v72) = v75;
          _S1 = (float)v77 * 0.0039216;
          __asm { FCVT            H1, S1 }
          _S2 = (float)v72 * 0.0039216;
          __asm { FCVT            H2, S2 }
          *((_WORD *)this + 2028) = LOWORD(_S1);
          *((_WORD *)this + 2029) = LOWORD(_S2);
          *((_DWORD *)this + 1015) = 973471744;
          v80 = v71 * 360.0;
          CA::OGL::DebugRenderer::draw_bar((CA::OGL::PerformanceHUD *)((char *)this + 3976), v71 * 360.0);
          *((_QWORD *)this + 507) = 0x3A06000000000000;
          CA::OGL::DebugRenderer::draw_bar((CA::OGL::PerformanceHUD *)((char *)this + 3976), 360.0 - v80);
          *((_QWORD *)this + 507) = v85;
          v44 = 18.0;
          break;
        case 1:
          *(_QWORD *)__s = 0;
          v90 = 0;
          v38 = CA::OGL::PerformanceHUD::CounterInfo::to_string(v15, __s);
          *((float *)this + 998) = v3;
          *((float *)this + 999) = v4;
          v39 = (char *)this + 64 * v6;
          v40 = (const char *)*((_QWORD *)v39 + 100);
          if (!v40)
            goto LABEL_92;
          v41 = v38;
          v42 = strlen(*((const char **)v39 + 100));
          CA::OGL::DebugRenderer::draw_string((uint64_t)this + 3976, v40, v42);
          *((float *)this + 998) = v87 - (float)(unint64_t)(14 * v41);
          *((float *)this + 999) = v4;
          v43 = strlen(__s);
          CA::OGL::DebugRenderer::draw_string((uint64_t)this + 3976, __s, v43);
          v44 = 18.0;
          v2 = v86;
          break;
        default:
          goto LABEL_85;
      }
      v4 = v4 + v44;
    }
LABEL_85:
    ++v6;
  }
  while (v6 != 48);
  memcpy(this, (char *)this + 384, 0x180uLL);
  result = memcpy(&CA::OGL::PerformanceHUD::_prev_global_values, v7, 0x180uLL);
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 47) = 0u;
  v7[22] = 0u;
  v7[23] = 0u;
  v7[20] = 0u;
  v7[21] = 0u;
  v7[18] = 0u;
  v7[19] = 0u;
  v7[16] = 0u;
  v7[17] = 0u;
  v7[14] = 0u;
  v7[15] = 0u;
  v7[12] = 0u;
  v7[13] = 0u;
  v7[10] = 0u;
  v7[11] = 0u;
  v7[8] = 0u;
  v7[9] = 0u;
  v7[6] = 0u;
  v7[7] = 0u;
  v7[4] = 0u;
  v7[5] = 0u;
  v7[2] = 0u;
  v7[3] = 0u;
  *v7 = 0u;
  v7[1] = 0u;
  return result;
}

uint64_t CA::OGL::PerformanceHUD::get_prev_counter_value(CA::OGL::PerformanceHUD *this, unsigned int a2)
{
  CA::OGL::PerformanceHUD *v2;

  if (a2 >= 0x30)
    __assert_rtn("get_prev_counter_value", "ogl-performance-hud.cpp", 695, "index < _num_counters");
  if (*((_BYTE *)this + 64 * (unint64_t)a2 + 828))
    v2 = (CA::OGL::PerformanceHUD *)&CA::OGL::PerformanceHUD::_prev_global_values;
  else
    v2 = this;
  return *((_QWORD *)v2 + a2);
}

uint64_t CA::OGL::PerformanceHUD::CounterInfo::to_string(CA::OGL::PerformanceHUD::CounterInfo *this, char *__str)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!__str)
    __assert_rtn("to_string", "ogl-performance-hud.cpp", 235, "buffer");
  v3 = *((_DWORD *)this + 11) - 1;
  result = 0;
  switch(v3)
  {
    case 0:
      return result;
    case 1:
      LODWORD(result) = snprintf(__str, 0x10uLL, "%.2fms");
      return (int)result;
    case 2:
      LODWORD(result) = snprintf(__str, 0x10uLL, "%lld");
      return (int)result;
    case 3:
      LODWORD(result) = snprintf(__str, 0x10uLL, "0x%llx");
      return (int)result;
    case 4:
      v5 = *(_QWORD *)this;
      v6 = 100 * *(_QWORD *)this / *((_QWORD *)this + 2);
      if (v5 && !v6)
        LODWORD(result) = snprintf(__str, 0x10uLL, "<1%%");
      else
        LODWORD(result) = snprintf(__str, 0x10uLL, "%lld%%");
      return (int)result;
    case 5:
      v7 = *(_QWORD *)this;
      if (v7 >= 10000)
      {
        LODWORD(result) = snprintf(__str, 0x10uLL, "%.2fW");
        return (int)result;
      }
      if (v7)
      {
        LODWORD(result) = snprintf(__str, 0x10uLL, "%lldmW");
        return (int)result;
      }
      *(_DWORD *)__str = 5729584;
      return 3;
    case 6:
      LODWORD(result) = snprintf(__str, 0x10uLL, "%.*f");
      return (int)result;
    default:
      __assert_rtn("to_string", "ogl-performance-hud.cpp", 285, "0 && \"unsupported counter type!\"");
  }
}

unsigned int CA::OGL::PerformanceHUD::calculate_fps(CA::OGL::PerformanceHUD *this, double a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  double v6;
  float v7;
  unsigned int result;

  v3 = *((_QWORD *)this + 518);
  v4 = CAHostTimeWithTime(a2);
  if (v3)
  {
    v5 = CAGetStatsStruct(0)[5];
    v6 = (double)(v5 - *((_DWORD *)this + 1038));
    v7 = v6 / CATimeWithHostTime(v4 - v3);
    result = vcvtas_u32_f32(v7);
    *((_QWORD *)this + 519) = v5;
  }
  else
  {
    result = 0;
  }
  *((_QWORD *)this + 518) = v4;
  return result;
}

void CA::CG::DrawColorMatrix::~DrawColorMatrix(CA::CG::DrawColorMatrix *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E1592230;
  v2 = (unsigned int *)*((_QWORD *)this + 15);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1592230;
  v2 = (unsigned int *)*((_QWORD *)this + 15);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

__n128 CA::CG::DrawColorMatrix::compute_dod(CA::CG::DrawColorMatrix *this, __n128 *a2)
{
  __n128 result;

  (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 14) + 24))(*((_QWORD *)this + 14), (char *)this + 128);
  *a2 = *((__n128 *)this + 8);
  result = *((__n128 *)this + 9);
  a2[1] = result;
  return result;
}

uint64_t CA::CG::DrawColorMatrix::set_op(uint64_t this, CA::CG::DrawOp *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 112);
  if (v2)
    *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(this + 112) = a2;
  return this;
}

uint64_t CA::CG::DrawColorMatrix::draw_shape(CA::CG::DrawColorMatrix *this, CA::CG::Renderer *a2)
{
  return (*(uint64_t (**)(CA::CG::DrawColorMatrix *, CA::CG::Renderer *))(*(_QWORD *)this + 176))(this, a2);
}

void CA::CG::DrawColorMatrix::draw_shape_and_color(CA::CG::DrawColorMatrix *this, CA::CG::Renderer *a2)
{
  int32x2_t *v4;
  float v5;
  float64x2_t v6;
  int32x2_t *v7;
  int32x2_t *v8;
  int32x2_t v9;
  uint32x2_t v10;
  int32x2_t v11;
  uint32x2_t v12;
  int32x2_t v13;
  __int128 v14;
  uint32x2_t v15;
  int v16;
  int64x2_t v17;
  int32x2_t v18;
  int8x16_t v19;
  float64x2_t v20;
  int8x16_t v21;
  int8x16_t v22;
  double v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  __int16 v44;
  unsigned int v45;
  char v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  int32x4_t v51;
  __int128 v52;
  __int128 v53;
  _OWORD v54[3];
  _OWORD v55[4];
  uint64_t v56;
  _QWORD __dst[62];

  __dst[61] = *MEMORY[0x1E0C80C00];
  v4 = (int32x2_t *)*((_QWORD *)a2 + 1);
  v5 = *((double *)a2 + 10);
  v52 = 0uLL;
  CA::Shape::get_bounds(*(_QWORD *)(*(_QWORD *)&v4[29] + 8), (int *)&v52);
  v7 = (int32x2_t *)v4[31];
  if (v7)
    v8 = v7 + 4;
  else
    v8 = v4 + 23;
  v9 = *(int32x2_t *)((char *)&v52 + 8);
  v10 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v52 + 8));
  if ((vpmax_u32(v10, v10).u32[0] & 0x80000000) == 0)
  {
    v11 = v8[1];
    v12 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v11);
    if ((vpmax_u32(v12, v12).u32[0] & 0x80000000) != 0
      || (v13 = vadd_s32(*v8, v11),
          *(int32x2_t *)&v14 = vmax_s32(*(int32x2_t *)&v52, *v8),
          v9 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&v52, *(int32x2_t *)((char *)&v52 + 8)), v13), *(int32x2_t *)&v14), v15 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v9), (vpmax_u32(v15, v15).u32[0] & 0x80000000) != 0))
    {
      v9 = 0;
    }
    else
    {
      *((int32x2_t *)&v14 + 1) = v9;
      v52 = v14;
    }
  }
  v16 = v9.i32[0];
  if (v9.i32[0] <= v9.i32[1])
    v16 = v9.i32[1];
  v17.i64[0] = v9.i32[0];
  v17.i64[1] = v9.i32[1];
  v18 = vdup_n_s32(v16 > 1073741822);
  v19 = (int8x16_t)vcvtq_f64_s64(v17);
  v17.i64[0] = v18.u32[0];
  v17.i64[1] = v18.u32[1];
  v20 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v17, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v19);
  v21 = *((int8x16_t *)this + 8);
  v22 = *((int8x16_t *)this + 9);
  if (v5 != 1.0)
  {
    v23 = v5;
    v6.f64[0] = 1.79769313e308;
    v24 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v6, (float64x2_t)v22).i64[0], 0);
    v25.i64[1] = *((_QWORD *)this + 17);
    *(double *)v25.i64 = v5 * *(double *)v21.i64;
    v21 = vbslq_s8(v24, v25, v21);
    v25.i64[1] = *((_QWORD *)this + 19);
    *(double *)v25.i64 = v5 * *(double *)v22.i64;
    v22 = vbslq_s8(v24, v25, v22);
    if (*(double *)&v22.i64[1] < 1.79769313e308)
    {
      v21.i64[1] = vmuld_lane_f64(v23, (float64x2_t)v21, 1);
      *(double *)&v22.i64[1] = *(double *)&v22.i64[1] * v23;
    }
  }
  v26 = (int8x16_t)vclezq_f64(v20);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v26, 1), v26).u64[0] & 0x8000000000000000) == 0)
  {
    v27 = (int8x16_t)vclezq_f64((float64x2_t)v22);
    v28 = (int32x4_t)vdupq_laneq_s64((int64x2_t)v27, 1);
    v29 = (int32x4_t)vorrq_s8((int8x16_t)v28, v27);
    if ((v29.i64[0] & 0x8000000000000000) == 0)
    {
      v29.i32[0] = v16;
      v28.i32[0] = 1073741822;
      v30.i64[0] = (int)v52;
      v30.i64[1] = SDWORD1(v52);
      v31 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v29, v28), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v30));
      v32 = vaddq_f64(v31, v20);
      v33 = vmaxnmq_f64(v31, (float64x2_t)v21);
      v34 = vminnmq_f64(v32, vaddq_f64((float64x2_t)v21, (float64x2_t)v22));
      v35 = vsubq_f64(v34, v33);
      v36 = (int8x16_t)vclezq_f64(v35);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v36, 1), v36).u64[0] & 0x8000000000000000) == 0)
      {
        v37 = (int8x16_t)vceqzq_f64(v35);
        if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v37, 1), v37).u64[0] & 0x8000000000000000) != 0
          || (v38 = vorrq_s8((int8x16_t)vcltzq_f64(v35), (int8x16_t)vcgezq_f64(v35)),
              (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v38), 1), v38).u64[0] & 0x8000000000000000) != 0))
        {
          v51 = 0uLL;
        }
        else
        {
          v39 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v33, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
          v51 = vuzp1q_s32(v39, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(v34, (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v39));
        }
        v40 = (*(uint64_t (**)(int32x2_t *, uint64_t, int32x4_t *, uint64_t))(*(_QWORD *)v4 + 656))(v4, 1, &v51, 8207);
        if (v40)
        {
          v41 = v40;
          v42 = *((_QWORD *)a2 + 1);
          v53 = *(_OWORD *)(v40 + 32);
          v43 = *(unsigned __int16 *)(v42 + 816);
          v44 = v43 & 0x7000;
          if ((v43 & 0x7000) == 0x3000)
          {
            v43 = v43 & 0xFFFF8FFF | 0x2000;
            *(_WORD *)(v42 + 816) = v43;
          }
          v45 = v43 >> 12;
          if ((v45 & 4) != 0)
            v46 = 0;
          else
            v46 = 0x1E1F1400u >> (8 * (v45 & 7));
          *(_BYTE *)(v40 + 73) = *(_BYTE *)(v40 + 73) & 0xC0 | v46;
          v47 = *(const void **)(v42 + 16);
          memcpy(__dst, v47, 0x1E8uLL);
          __dst[0] = v47;
          *(_QWORD *)(v42 + 16) = __dst;
          v56 = 0;
          memset(&v55[2], 0, 32);
          memset(v55, 0, 32);
          v48 = *(_QWORD *)(v42 + 232);
          *(_OWORD *)((char *)v55 + 8) = *(_OWORD *)(v48 + 8);
          v49 = *(_QWORD *)(v48 + 32);
          *((_QWORD *)&v55[1] + 1) = *(_QWORD *)(v48 + 24);
          *(_QWORD *)&v55[2] = v49;
          *(_OWORD *)((char *)&v55[2] + 8) = *(_OWORD *)(v48 + 40);
          *((_QWORD *)&v55[3] + 1) = *(_QWORD *)(v48 + 56);
          v50 = *(_WORD *)(v48 + 68);
          LODWORD(v56) = *(_DWORD *)(v48 + 64);
          HIDWORD(v56) = v50 & 0x5FF;
          memset(v54, 0, sizeof(v54));
          CA::Shape::operator=((uint64_t)v54, &v53);
          *((_QWORD *)&v55[0] + 1) = v54;
          *(_QWORD *)&v55[0] = CA::OGL::Context::set_gstate(v42, (uint64_t)v55);
          CA::OGL::Context::push_surface(v42, v41, 1u, 64, 0);
          CA::CG::DrawOp::render(*((CA::CG::DrawOp **)this + 14), (float64x2_t *)a2);
          CA::OGL::Context::pop_surface((CA::OGL::Context *)v42);
          CA::OGL::Context::set_gstate(v42, **(_QWORD **)(v42 + 232));
          *(_QWORD *)(v42 + 16) = __dst[0];
          __dst[0] = 0;
          *(_WORD *)(v42 + 816) = *(_WORD *)(v42 + 816) & 0x8FFF | v44;
          CA::OGL::emit_color_matrix((CA::OGL *)v42, (float32x4_t *)(*((_QWORD *)this + 15) + 76), v41, 0, 1.0);
          if (__dst[0])
            __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
          CA::OGL::Context::release_surface((uint64_t)v4, v41);
        }
      }
    }
  }
}

void CA::CG::DrawColorMatrixTransparencyLayer::~DrawColorMatrixTransparencyLayer(CA::CG::DrawColorMatrixTransparencyLayer *this)
{
  CA::CG::TransparencyLayer *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = off_1E1593558;
  v2 = (CA::CG::TransparencyLayer *)*((_QWORD *)this + 20);
  if (v2)
    CA::CG::TransparencyLayer::unref(v2);
  *(_QWORD *)this = off_1E1592230;
  v3 = (unsigned int *)*((_QWORD *)this + 15);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  CA::CG::DrawOp::~DrawOp(this);
}

{
  CA::CG::TransparencyLayer *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1593558;
  v2 = (CA::CG::TransparencyLayer *)*((_QWORD *)this + 20);
  if (v2)
    CA::CG::TransparencyLayer::unref(v2);
  *(_QWORD *)this = off_1E1592230;
  v3 = (unsigned int *)*((_QWORD *)this + 15);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::CG::DrawColorMatrixTransparencyLayer::draw_shape_and_color(int8x16_t *this, CA::CG::Renderer *a2, double a3, double a4, double a5, double a6, double a7, float64x2_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int v12;
  int8x16_t v13;
  int32x2_t v14;
  int64x2_t v15;
  float64x2_t v16;
  float v17;
  int8x16_t v18;
  int8x16_t v19;
  double v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int32x4_t v25;
  uint64_t v26;
  int64x2_t v27;
  float64x2_t v28;
  int8x16_t v29;

  v8 = *(_QWORD *)(this[10].i64[0] + 40);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 40);
    v10.i64[0] = (int)v9;
    v10.i64[1] = SHIDWORD(v9);
    v11 = v10;
    v12 = v9;
    if ((int)v9 <= SHIDWORD(v9))
      v12 = HIDWORD(*(_QWORD *)(v8 + 40));
    v13 = (int8x16_t)vcvtq_f64_s64(v11);
    v14 = vdup_n_s32(v12 > 1073741822);
    v15.i64[0] = v14.u32[0];
    v15.i64[1] = v14.u32[1];
    v16 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v15, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v13);
    v17 = *((double *)a2 + 10);
    v18 = this[8];
    v19 = this[9];
    if (v17 != 1.0)
    {
      v20 = v17;
      a8.f64[0] = 1.79769313e308;
      v21 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a8, (float64x2_t)v19).i64[0], 0);
      v22.i64[1] = this[8].i64[1];
      *(double *)v22.i64 = v20 * *(double *)v18.i64;
      v18 = vbslq_s8(v21, v22, v18);
      v22.i64[1] = this[9].i64[1];
      *(double *)v22.i64 = v20 * *(double *)v19.i64;
      v19 = vbslq_s8(v21, v22, v19);
      if (*(double *)&v19.i64[1] < 1.79769313e308)
      {
        a8.f64[0] = vmuld_lane_f64(v20, (float64x2_t)v18, 1);
        v18.i64[1] = *(_QWORD *)&a8.f64[0];
        *(double *)&v19.i64[1] = *(double *)&v19.i64[1] * v20;
      }
    }
    v23 = (int8x16_t)vclezq_f64(v16);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v23, 1), v23).u64[0] & 0x8000000000000000) == 0)
    {
      v24 = (int8x16_t)vclezq_f64((float64x2_t)v19);
      v25 = (int32x4_t)vdupq_laneq_s64((int64x2_t)v24, 1);
      if ((vorrq_s8((int8x16_t)v25, v24).u64[0] & 0x8000000000000000) == 0)
      {
        v26 = *(_QWORD *)(v8 + 32);
        v25.i32[0] = v12;
        LODWORD(a8.f64[0]) = 1073741822;
        v27.i64[0] = (int)v26;
        v27.i64[1] = SHIDWORD(v26);
        v28 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v25, (int32x4_t)a8), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v27));
        v29 = (int8x16_t)vclezq_f64(vsubq_f64(vminnmq_f64(vaddq_f64(v28, v16), vaddq_f64((float64x2_t)v18, (float64x2_t)v19)), vmaxnmq_f64(v28, (float64x2_t)v18)));
        if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v29, 1), v29).u64[0] & 0x8000000000000000) == 0)
          CA::OGL::emit_color_matrix(*((CA::OGL **)a2 + 1), (float32x4_t *)(this[7].i64[1] + 76), v8, 0, 1.0);
      }
    }
  }
  else
  {
    CA::CG::DrawColorMatrix::draw_shape_and_color((CA::CG::DrawColorMatrix *)this, a2);
  }
}

uint64_t CA::OGL::ExtendedColor::word32(CA::OGL::ExtendedColor *this)
{
  float v7;
  _BOOL4 v8;
  int v9;
  float v12;
  _BOOL4 v13;
  int v14;
  float v17;
  _BOOL4 v18;
  int v19;
  float v22;
  _BOOL4 v23;
  int v24;

  _H0 = *(_WORD *)this;
  __asm { FCVT            S0, H0 }
  v7 = (float)(_S0 * 255.0) + 0.5;
  v8 = v7 > 255.0 || v7 < 0.0;
  if (v7 < 0.0 && v7 <= 255.0)
    v9 = 0;
  else
    v9 = 255;
  if (!v8)
    v9 = (int)v7;
  _H0 = *((_WORD *)this + 1);
  __asm { FCVT            S0, H0 }
  v12 = (float)(_S0 * 255.0) + 0.5;
  v13 = v12 > 255.0 || v12 < 0.0;
  if (v12 < 0.0 && v12 <= 255.0)
    v14 = 0;
  else
    v14 = 65280;
  if (!v13)
    v14 = (int)v12 << 8;
  _H0 = *((_WORD *)this + 2);
  __asm { FCVT            S0, H0 }
  v17 = (float)(_S0 * 255.0) + 0.5;
  v18 = v17 > 255.0 || v17 < 0.0;
  if (v17 < 0.0 && v17 <= 255.0)
    v19 = 0;
  else
    v19 = 16711680;
  if (!v18)
    v19 = (int)v17 << 16;
  _H0 = *((_WORD *)this + 3);
  __asm { FCVT            S0, H0 }
  v22 = (float)(_S0 * 255.0) + 0.5;
  v23 = v22 > 255.0 || v22 < 0.0;
  if (v22 < 0.0 && v22 <= 255.0)
    v24 = 0;
  else
    v24 = -16777216;
  if (!v23)
    v24 = (int)v22 << 24;
  return v14 | v9 | v19 | v24;
}

BOOL CA::Render::MatchAnimation::validate(CA::Render::MatchAnimation *this, CA::Render::Layer *a2)
{
  _DWORD *v2;

  if (!*((_QWORD *)this + 13))
    return 0;
  if (!*((_DWORD *)this + 28))
    return 0;
  v2 = (_DWORD *)*((_QWORD *)this + 15);
  if (!v2)
    return 0;
  if ((v2 & 1) != 0)
    return 1;
  return *v2 != 0;
}

void CA::Render::MatchPropertyAnimation::~MatchPropertyAnimation(CA::Render **this, void **a2)
{
  const CA::Render::Object *v3;

  --dword_1ECDC7CA8;
  *this = (CA::Render *)off_1E1597430;
  CA::Render::key_path_free(this[15], a2);
  CA::Render::Animation::~Animation((CA::Render::Animation *)this, v3);
}

{
  const CA::Render::Object *v3;
  malloc_zone_t *malloc_zone;

  --dword_1ECDC7CA8;
  *this = (CA::Render *)off_1E1597430;
  CA::Render::key_path_free(this[15], a2);
  CA::Render::Animation::~Animation((CA::Render::Animation *)this, v3);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::Render::MatchPropertyAnimation::show(CA::Render::MatchPropertyAnimation *this, int a2, int a3)
{
  _BOOL4 v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  __int16 v11;
  uint8_t buf[16];
  __int16 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = x_log_hook_p();
  if ((a3 & 1) != 0)
  {
    if (v6)
    {
      x_log_();
      return;
    }
    v8 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 0;
      v9 = "match-property-animation;";
      v10 = (uint8_t *)&v13;
      goto LABEL_10;
    }
  }
  else
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_DEFAULT, "(match-property-animation", buf, 2u);
      }
    }
    CA::Render::MatchAnimation::show_match_animation(this, a2, a3);
    if (x_log_hook_p())
    {
      x_log_();
      return;
    }
    v8 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 0;
      v9 = ")";
      v10 = (uint8_t *)&v11;
LABEL_10:
      _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_DEFAULT, v9, v10, 2u);
    }
  }
}

int8x16_t CA::Render::MatchPropertyAnimation::create_dependence(int8x16_t *this, CA::Render::Handle *a2)
{
  malloc_zone_t *malloc_zone;
  int8x16_t *v5;
  int8x16_t result;
  __int32 v7;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v5 = (int8x16_t *)malloc_type_zone_malloc(malloc_zone, 0x38uLL, 0x8BB15036uLL);
  if (v5)
  {
    v7 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 16);
    v5->i32[2] = this[7].i32[0];
    v5->i32[3] = v7;
    result = vextq_s8(this[6], this[6], 8uLL);
    v5[1] = result;
    v5[2].i64[0] = 0;
    v5[2].i64[1] = 0;
    v5[3].i64[0] = (uint64_t)this;
    v5->i64[0] = (uint64_t)&off_1E1598618;
  }
  return result;
}

void CA::Render::MatchPropertyDependence::~MatchPropertyDependence(CA::Render::MatchPropertyDependence *this)
{
  malloc_zone_t *malloc_zone;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::Render::MatchAnimation::show_match_animation(CA::Render::MatchAnimation *this, int a2, int a3)
{
  CA::Render *v5;
  NSObject *v6;
  NSObject *v7;
  void *const *v8;
  NSObject *v9;
  const __CFString *v10;
  const __CFString *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  uint8_t buf[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = (CA::Render *)(a2 + 1);
  CA::Render::show_newline(v5);
  CA::Render::show_object(*((CA::Render **)this + 5), v5);
  if (*((_QWORD *)this + 6))
  {
    CA::Render::show_newline(v5);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v6 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v6, OS_LOG_TYPE_DEFAULT, "(timingFunction ", buf, 2u);
      }
    }
    CA::Render::show_object(*((CA::Render **)this + 6), v5);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
      }
    }
  }
  CA::Render::show_newline(v5);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v9 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184457000, v9, OS_LOG_TYPE_DEFAULT, "(keyPath ", buf, 2u);
    }
  }
  v10 = CA::Render::key_path_copy_string(*((_QWORD *)this + 15), v8);
  CA::Render::show_cfstring(v10, v11);
  CFRelease(v10);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v12 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
    }
  }
  CA::Render::show_newline(v5);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v13 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *((_QWORD *)this + 13);
      *(_DWORD *)buf = 134217984;
      v19 = v14;
      _os_log_impl(&dword_184457000, v13, OS_LOG_TYPE_DEFAULT, "(sourceLayer 0x%lx)", buf, 0xCu);
    }
  }
  CA::Render::show_newline(v5);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v15 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *((_DWORD *)this + 28);
      *(_DWORD *)buf = 67109120;
      LODWORD(v19) = v16;
      _os_log_impl(&dword_184457000, v15, OS_LOG_TYPE_DEFAULT, "(sourceContext %x)", buf, 8u);
    }
  }
  return CA::Render::Context::show_source_layer(*((unsigned int *)this + 28), *((CA::Render::Object **)this + 13), v5, a3);
}

void CA::Render::MatchMoveAnimation::show(CA::Render **this, int a2, int a3)
{
  _BOOL4 v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  uint8_t v12[8];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = x_log_hook_p();
  if ((a3 & 1) != 0)
  {
    if (v6)
    {
      x_log_();
      return;
    }
    v10 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v12 = 0;
      v11 = "match-move-animation;";
      goto LABEL_18;
    }
  }
  else
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_DEFAULT, "(match-move-animation", v12, 2u);
      }
    }
    CA::Render::MatchAnimation::show_match_animation((CA::Render::MatchAnimation *)this, a2, a3);
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v8 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_DEFAULT, "(sourcePoints ", v12, 2u);
      }
    }
    CA::Render::show_object(this[17], 0);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v9 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_184457000, v9, OS_LOG_TYPE_DEFAULT, ")", v12, 2u);
      }
    }
    if (x_log_hook_p())
    {
      x_log_();
      return;
    }
    v10 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v12 = 0;
      v11 = ")";
LABEL_18:
      _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_DEFAULT, v11, v12, 2u);
    }
  }
}

BOOL CATransform3DIsIdentity_(CATransform3D *t)
{
  uint64_t v2;
  unint64_t v3;
  double v4;
  double v5;

  if (t->m11 != 1.0)
    return 0;
  v2 = 1;
  v3 = 15;
  while (v2 != 16)
  {
    v4 = *(&t->m11 + v2);
    v5 = *(&CATransform3DIdentity.m11 + v2++);
    if (v4 != v5)
    {
      v3 = v2 - 2;
      return v3 > 0xE;
    }
  }
  return v3 > 0xE;
}

BOOL CATransform3DEqualToTransform_(CATransform3D *a, CATransform3D *b)
{
  uint64_t v3;
  unint64_t v4;
  double v5;
  double v6;

  if (a->m11 != b->m11)
    return 0;
  v3 = 1;
  v4 = 15;
  while (v3 != 16)
  {
    v5 = *(&a->m11 + v3);
    v6 = *(&b->m11 + v3++);
    if (v5 != v6)
    {
      v4 = v3 - 2;
      return v4 > 0xE;
    }
  }
  return v4 > 0xE;
}

CATransform3D *__cdecl CATransform3DMakeTranslation_(CATransform3D *__return_ptr retstr, CGFloat tx, CGFloat ty, CGFloat tz)
{
  CATransform3D *result;

  *(_OWORD *)&result->m11 = xmmword_18474DF40;
  result->m13 = 0.0;
  result->m14 = 0.0;
  *(_OWORD *)&result->m21 = xmmword_18474DF50;
  *(_OWORD *)&result->m23 = 0u;
  *(_OWORD *)&result->m31 = 0u;
  *(_OWORD *)&result->m33 = xmmword_18474DF40;
  *(_OWORD *)&result->m43 = xmmword_18474DF50;
  result->m41 = tx;
  result->m42 = ty;
  result->m43 = tz;
  return result;
}

CATransform3D *__cdecl CATransform3DMakeScale_(CATransform3D *__return_ptr retstr, CGFloat sx, CGFloat sy, CGFloat sz)
{
  CATransform3D *result;

  *(_OWORD *)&result->m11 = xmmword_18474DF40;
  *(_OWORD *)&result->m13 = 0u;
  *(_OWORD *)&result->m21 = xmmword_18474DF50;
  *(_OWORD *)&result->m23 = 0u;
  *(_OWORD *)&result->m31 = 0u;
  *(_OWORD *)&result->m33 = xmmword_18474DF40;
  *(_OWORD *)&result->m41 = 0u;
  *(_OWORD *)&result->m43 = xmmword_18474DF50;
  result->m11 = sx;
  result->m22 = sy;
  result->m33 = sz;
  return result;
}

float64x2_t CATransform3DTranslateRight_(float64x2_t *a1, float64x2_t result, float64_t a3, double a4)
{
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;

  result.f64[1] = a3;
  v5 = a1[1];
  v6 = a1[3];
  v7 = a1[5];
  v8 = a1[7];
  v9 = vmlaq_laneq_f64(a1[2], result, v6, 1);
  v10 = vmlaq_laneq_f64(a1[4], result, v7, 1);
  v11 = vmlaq_laneq_f64(a1[6], result, v8, 1);
  *a1 = vmlaq_laneq_f64(*a1, result, v5, 1);
  a1[1] = vmlaq_laneq_f64(v5, (float64x2_t)*(unint64_t *)&a4, v5, 1);
  a1[2] = v9;
  a1[3] = vmlaq_laneq_f64(v6, (float64x2_t)*(unint64_t *)&a4, v6, 1);
  a1[4] = v10;
  a1[5] = vmlaq_laneq_f64(v7, (float64x2_t)*(unint64_t *)&a4, v7, 1);
  a1[6] = v11;
  a1[7] = vmlaq_laneq_f64(v8, (float64x2_t)*(unint64_t *)&a4, v8, 1);
  return result;
}

__n128 CATransform3DTranslateRight@<Q0>(float64x2_t *a1@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q0>, float64_t a4@<D1>, unint64_t a5@<D2>)
{
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  __n128 result;
  float64x2_t v17;
  float64x2_t v18;

  a3.f64[1] = a4;
  v6 = a1[1];
  v7 = a1[3];
  v8 = a1[5];
  v9 = a1[7];
  v10 = vmlaq_laneq_f64(a1[2], a3, v7, 1);
  v11 = vmlaq_laneq_f64(a1[4], a3, v8, 1);
  v12 = vmlaq_laneq_f64(a1[6], a3, v9, 1);
  *a1 = vmlaq_laneq_f64(*a1, a3, v6, 1);
  a1[1] = vmlaq_laneq_f64(v6, (float64x2_t)a5, v6, 1);
  a1[2] = v10;
  a1[3] = vmlaq_laneq_f64(v7, (float64x2_t)a5, v7, 1);
  a1[4] = v11;
  a1[5] = vmlaq_laneq_f64(v8, (float64x2_t)a5, v8, 1);
  a1[6] = v12;
  a1[7] = vmlaq_laneq_f64(v9, (float64x2_t)a5, v9, 1);
  v13 = *a1;
  v14 = a1[1];
  v15 = a1[3];
  *(float64x2_t *)(a2 + 32) = a1[2];
  *(float64x2_t *)(a2 + 48) = v15;
  *(float64x2_t *)a2 = v13;
  *(float64x2_t *)(a2 + 16) = v14;
  result = (__n128)a1[4];
  v17 = a1[5];
  v18 = a1[7];
  *(float64x2_t *)(a2 + 96) = a1[6];
  *(float64x2_t *)(a2 + 112) = v18;
  *(__n128 *)(a2 + 64) = result;
  *(float64x2_t *)(a2 + 80) = v17;
  return result;
}

CATransform3D *__cdecl CATransform3DScale_(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat sx, CGFloat sy, CGFloat sz)
{
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;

  v5 = vmulq_n_f64(*(float64x2_t *)&t->m11, sx);
  v6 = vmulq_n_f64(*(float64x2_t *)&t->m13, sx);
  v7 = vmulq_n_f64(*(float64x2_t *)&t->m21, sy);
  v8 = vmulq_n_f64(*(float64x2_t *)&t->m23, sy);
  v9 = vmulq_n_f64(*(float64x2_t *)&t->m31, sz);
  v10 = vmulq_n_f64(*(float64x2_t *)&t->m33, sz);
  *(float64x2_t *)&t->m11 = v5;
  *(float64x2_t *)&t->m13 = v6;
  *(float64x2_t *)&t->m21 = v7;
  *(float64x2_t *)&t->m23 = v8;
  *(float64x2_t *)&t->m31 = v9;
  *(float64x2_t *)&t->m33 = v10;
  return t;
}

CATransform3D *__cdecl CATransform3DMakeAffineTransform_(CATransform3D *__return_ptr retstr, CATransform3D *m)
{
  CGFloat *v2;

  *(_OWORD *)&m->m11 = xmmword_18474DF40;
  *(_OWORD *)&m->m13 = 0u;
  *(_OWORD *)&m->m21 = xmmword_18474DF50;
  *(_OWORD *)&m->m23 = 0u;
  *(_OWORD *)&m->m31 = 0u;
  *(_OWORD *)&m->m33 = xmmword_18474DF40;
  *(_OWORD *)&m->m41 = 0u;
  *(_OWORD *)&m->m43 = xmmword_18474DF50;
  m->m11 = *v2;
  m->m12 = v2[1];
  m->m21 = v2[2];
  m->m22 = v2[3];
  m->m41 = v2[4];
  m->m42 = v2[5];
  return m;
}

double CATransform3DConcatAffineTransform@<D0>(double *a1@<X0>, CGAffineTransform *a2@<X1>, const double *a3@<X3>, uint64_t a4@<X8>)
{
  double result;

  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)&result = *(_OWORD *)&CA::Mat4Impl::mat4_concat((float64x2_t *)a4, a1, a2, a3);
  return result;
}

CGAffineTransform *__cdecl CATransform3DGetAffineTransform_(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  _OWORD *v2;
  __int128 v3;

  v3 = v2[2];
  *(_OWORD *)&t->a = *v2;
  *(_OWORD *)&t->c = v3;
  *(_OWORD *)&t->tx = v2[6];
  return t;
}

double CATransform3DSetDecomposition_(double *a1, __int128 *a2, uint64_t a3, __int128 *a4, double *a5, CA::Mat4Impl *this)
{
  double v7;
  double v12;
  double result;
  __int128 v14;
  double v15;
  __int128 v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v22 = 0;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  memset(v17, 0, sizeof(v17));
  v16 = 0u;
  if (a1)
  {
    _Q0 = *(_OWORD *)a1;
    v7 = a1[2];
  }
  else
  {
    __asm { FMOV            V0.2D, #1.0 }
    v7 = 1.0;
  }
  v14 = _Q0;
  v15 = v7;
  if (a2)
  {
    v20 = *a2;
    *(_QWORD *)&v21 = *((_QWORD *)a2 + 2);
  }
  if (a3)
  {
    *(_OWORD *)((char *)v17 + 8) = *(_OWORD *)a3;
    *((_QWORD *)&v17[1] + 1) = *(_QWORD *)(a3 + 16);
  }
  if (a4)
  {
    v16 = *a4;
    *(_QWORD *)&v17[0] = *((_QWORD *)a4 + 2);
  }
  if (a5)
  {
    v18 = *(_OWORD *)a5;
    v12 = a5[3];
    *(double *)&v19 = a5[2];
  }
  else
  {
    v12 = 1.0;
  }
  *((double *)&v19 + 1) = v12;
  *(_QWORD *)&result = *(_OWORD *)&CA::Mat4Impl::mat4_set_unmatrix(this, (uint64_t)&v14, a3, (const double *)a4);
  return result;
}

double CA_CGPointApplyTransform_(double *a1, float64x2_t *this, double *a3)
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&CA::Mat4Impl::mat4_apply_to_point2(this, a1, a3);
  return result;
}

double CA_CGPointApplyTransform(float64x2_t *a1, double a2, double a3)
{
  double v3;
  double result;

  v3 = a1[7].f64[1] + a1[1].f64[1] * a2 + a1[3].f64[1] * a3;
  if (fabs(v3 + -1.0) >= 0.000001)
  {
    if (v3 <= 0.0)
      v3 = INFINITY;
    else
      v3 = 1.0 / v3;
  }
  *(_QWORD *)&result = *(_OWORD *)&vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(a1[6], *a1, a2), a1[2], a3), v3);
  return result;
}

double CA_CGPointUnapplyInverseTransform_(double *a1, float64x2_t *this, double *a3)
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&CA::Mat4Impl::mat4_unapply_inverse_to_point2(this, a1, a3);
  return result;
}

double CA_CGPointUnapplyInverseTransform(float64x2_t *a1, double a2, double a3, uint64_t a4, double *a5)
{
  double v6[3];

  v6[2] = *(double *)MEMORY[0x1E0C80C00];
  v6[0] = a2;
  v6[1] = a3;
  CA::Mat4Impl::mat4_unapply_inverse_to_point2(a1, v6, a5);
  return v6[0];
}

void CA_CGRectApplyTransform_(int8x16_t *a1, float64x2_t *this, double *a3)
{
  CA::Mat4Impl::mat4_apply_to_rect(this, a1, a3);
}

void CA_CGRectUnapplyInverseTransform_(int8x16_t *a1, float64x2_t *this, double *a3)
{
  CA::Mat4Impl::mat4_unapply_inverse_to_rect(this, a1, a3);
}

double CA_CGRectUnapplyInverseTransform(float64x2_t *a1, double a2, double a3, double a4, double a5, uint64_t a6, double *a7)
{
  int8x16_t v8;
  double v9;
  double v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *(double *)v8.i64 = a2;
  *(double *)&v8.i64[1] = a3;
  v9 = a4;
  v10 = a5;
  CA::Mat4Impl::mat4_unapply_inverse_to_rect(a1, &v8, a7);
  return *(double *)v8.i64;
}

double CATransform3DMakeWithSIMDFloat3x3@<D0>(uint64_t a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>)
{
  double result;

  *(float64x2_t *)a1 = vcvtq_f64_f32((float32x2_t)a2.n128_u64[0]);
  *(double *)(a1 + 16) = a2.n128_f32[2];
  *(_QWORD *)(a1 + 24) = 0;
  *(float64x2_t *)(a1 + 32) = vcvtq_f64_f32((float32x2_t)a3.n128_u64[0]);
  *(double *)(a1 + 48) = a3.n128_f32[2];
  *(_QWORD *)(a1 + 56) = 0;
  *(float64x2_t *)(a1 + 64) = vcvtq_f64_f32((float32x2_t)a4.n128_u64[0]);
  *(double *)(a1 + 80) = a4.n128_f32[2];
  result = 0.0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  return result;
}

float64x2_t CATransform3DMakeWithSIMDFloat4x4@<Q0>(float64x2_t *a1@<X8>, float32x4_t a2@<Q0>, float32x4_t a3@<Q1>, float32x4_t a4@<Q2>, float32x4_t a5@<Q3>)
{
  float64x2_t result;

  *a1 = vcvtq_f64_f32(*(float32x2_t *)a2.f32);
  a1[1] = vcvt_hight_f64_f32(a2);
  a1[2] = vcvtq_f64_f32(*(float32x2_t *)a3.f32);
  a1[3] = vcvt_hight_f64_f32(a3);
  a1[4] = vcvtq_f64_f32(*(float32x2_t *)a4.f32);
  a1[5] = vcvt_hight_f64_f32(a4);
  result = vcvtq_f64_f32(*(float32x2_t *)a5.f32);
  a1[6] = result;
  a1[7] = vcvt_hight_f64_f32(a5);
  return result;
}

double CATransform3DMakeWithSIMDDouble3x3@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  result = 0.0;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  return result;
}

__n128 CATransform3DMakeWithSIMDDouble4x4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v3;
  v4 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v4;
  result = *(__n128 *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(__n128 *)(a2 + 112) = result;
  return result;
}

float32x2_t CATransform3DGetSIMDFloat3x3(float64x2_t *a1)
{
  return vcvt_f32_f64(*a1);
}

double CATransform3DGetSIMDFloat4x4(float64x2_t *a1)
{
  double result;

  *(_QWORD *)&result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a1), a1[1]).u64[0];
  return result;
}

__n128 CATransform3DGetSIMDDouble3x3@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 16) = v2;
  v3 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = 0u;
  *(_QWORD *)(a2 + 48) = v3;
  result = *(__n128 *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 80);
  *(__n128 *)(a2 + 64) = result;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

__n128 CATransform3DGetSIMDDouble4x4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v3;
  v4 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v4;
  result = *(__n128 *)(a1 + 96);
  v6 = *(_OWORD *)(a1 + 112);
  *(__n128 *)(a2 + 96) = result;
  *(_OWORD *)(a2 + 112) = v6;
  return result;
}

void CA::CG::DrawGaussianBlur::~DrawGaussianBlur(CA::CG::DrawGaussianBlur *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E15925A8;
  v2 = (unsigned int *)*((_QWORD *)this + 15);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E15925A8;
  v2 = (unsigned int *)*((_QWORD *)this + 15);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

double *CA::CG::DrawGaussianBlur::compute_dod(CA::CG::DrawGaussianBlur *this, CA::Rect *a2)
{
  (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 14) + 24))(*((_QWORD *)this + 14), (char *)this + 128);
  *(_OWORD *)a2 = *((_OWORD *)this + 8);
  *((_OWORD *)a2 + 1) = *((_OWORD *)this + 9);
  return CA::BoundsImpl::inset((double *)a2, *(double *)(*((_QWORD *)this + 15) + 80) * -2.8, *(double *)(*((_QWORD *)this + 15) + 80) * -2.8);
}

uint64_t CA::CG::DrawGaussianBlur::set_op(uint64_t this, CA::CG::DrawOp *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 112);
  if (v2)
    *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(this + 112) = a2;
  return this;
}

uint64_t CA::CG::DrawGaussianBlur::draw_shape(CA::CG::DrawGaussianBlur *this, CA::CG::Renderer *a2)
{
  return (*(uint64_t (**)(CA::CG::DrawGaussianBlur *, CA::CG::Renderer *))(*(_QWORD *)this + 176))(this, a2);
}

void CA::CG::DrawGaussianBlur::draw_shape_and_color(CA::CG::DrawGaussianBlur *this, CA::CG::Renderer *a2)
{
  int32x2_t *v4;
  float v5;
  double v6;
  double v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x2_t *v10;
  int32x2_t *v11;
  int32x2_t v12;
  uint32x2_t v13;
  uint32x2_t v14;
  int32x2_t v15;
  uint32x2_t v16;
  int v17;
  int64x2_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int32x2_t v21;
  float64x2_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x2_t v38;
  int32x2_t v39;
  int v40;
  int v41;
  int8x8_t v42;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  double v49;
  double v50;
  unsigned int v51;
  __int16 v52;
  unsigned int v53;
  double v54;
  char v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  float v61;
  unint64_t v62;
  int v63;
  int32x4_t v64;
  float64x2_t v65;
  float64x2_t v66;
  int32x4_t v67;
  __int128 v68;
  _DWORD v69[2];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _OWORD v73[3];
  _OWORD v74[4];
  uint64_t v75;
  _QWORD __dst[62];

  __dst[61] = *MEMORY[0x1E0C80C00];
  v4 = (int32x2_t *)*((_QWORD *)a2 + 1);
  v5 = *((double *)a2 + 10);
  v6 = v5;
  v7 = *(double *)(*((_QWORD *)this + 15) + 80) * v5;
  v67 = 0uLL;
  CA::Shape::get_bounds(*(_QWORD *)(*(_QWORD *)&v4[29] + 8), v67.i32);
  v10 = (int32x2_t *)v4[31];
  if (v10)
    v11 = v10 + 4;
  else
    v11 = v4 + 23;
  v12 = (int32x2_t)v67.u64[1];
  v9.i32[1] = 1;
  v13 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v67.u64[1]);
  *(uint32x2_t *)v8.i8 = vpmax_u32(v13, v13);
  if ((v8.i32[0] & 0x80000000) == 0)
  {
    *(int32x2_t *)v8.i8 = v11[1];
    v14 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v8.i8);
    *(uint32x2_t *)v9.i8 = vpmax_u32(v14, v14);
    if (v9.i32[0] < 0
      || (v15 = vadd_s32(*v11, *(int32x2_t *)v8.i8),
          *(int32x2_t *)v8.i8 = vmax_s32(*(int32x2_t *)v67.i8, *v11),
          v12 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v67.i8, (int32x2_t)v67.u64[1]), v15), *(int32x2_t *)v8.i8),
          v16 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v12),
          *(uint32x2_t *)v9.i8 = vpmax_u32(v16, v16),
          v9.i32[0] < 0))
    {
      v12 = 0;
    }
    else
    {
      v8.u64[1] = (unint64_t)v12;
      v67 = v8;
    }
  }
  v17 = v12.i32[0];
  if (v12.i32[0] <= v12.i32[1])
    v17 = v12.i32[1];
  v8.i32[0] = v17;
  v9.i32[0] = 1073741822;
  v18.i64[0] = v67.i32[0];
  v18.i64[1] = v67.i32[1];
  v19 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v8, v9), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v18));
  v18.i64[0] = v12.i32[0];
  v18.i64[1] = v12.i32[1];
  v20 = (int8x16_t)vcvtq_f64_s64(v18);
  v21 = vdup_n_s32(v17 > 1073741822);
  v18.i64[0] = v21.u32[0];
  v18.i64[1] = v21.u32[1];
  v65 = (float64x2_t)v19;
  v66 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v18, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v20);
  CA::BoundsImpl::inset(v65.f64, v7 * -2.8, v7 * -2.8);
  v23 = *((int8x16_t *)this + 8);
  v24 = *((int8x16_t *)this + 9);
  if (v5 != 1.0)
  {
    v22.f64[0] = 1.79769313e308;
    v25 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v22, (float64x2_t)v24).i64[0], 0);
    v26.i64[1] = *((_QWORD *)this + 17);
    *(double *)v26.i64 = v6 * *(double *)v23.i64;
    v23 = vbslq_s8(v25, v26, v23);
    v26.i64[1] = *((_QWORD *)this + 19);
    *(double *)v26.i64 = v6 * *(double *)v24.i64;
    v24 = vbslq_s8(v25, v26, v24);
    if (*(double *)&v24.i64[1] < 1.79769313e308)
    {
      v23.i64[1] = vmuld_lane_f64(v6, (float64x2_t)v23, 1);
      *(double *)&v24.i64[1] = *(double *)&v24.i64[1] * v6;
    }
  }
  v27 = (int8x16_t)vclezq_f64(v66);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v27, 1), v27).u64[0] & 0x8000000000000000) == 0)
  {
    v28 = (int8x16_t)vclezq_f64((float64x2_t)v24);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v28, 1), v28).u64[0] & 0x8000000000000000) == 0)
    {
      v29 = vaddq_f64((float64x2_t)v23, (float64x2_t)v24);
      v30 = vmaxnmq_f64(v65, (float64x2_t)v23);
      v31 = vminnmq_f64(vaddq_f64(v65, v66), v29);
      v32 = vsubq_f64(v31, v30);
      v33 = (int8x16_t)vclezq_f64(v32);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v33, 1), v33).u64[0] & 0x8000000000000000) == 0)
      {
        if (v7 >= 0.1)
        {
          v34 = (int8x16_t)vceqzq_f64(v32);
          if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v34, 1), v34).u64[0] & 0x8000000000000000) != 0
            || (v35 = vorrq_s8((int8x16_t)vcltzq_f64(v32), (int8x16_t)vcgezq_f64(v32)),
                (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v35), 1), v35).u64[0] & 0x8000000000000000) != 0))
          {
            v64 = 0uLL;
            v39 = 0;
            v38 = (int32x2_t)-1;
          }
          else
          {
            v36 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v30, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
            v37 = (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(v31, (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v36);
            v64 = vuzp1q_s32(v36, v37);
            v38 = vadd_s32(vmovn_s64((int64x2_t)v36), (int32x2_t)-1);
            v39 = vmovn_s64((int64x2_t)v37);
          }
          v40 = v39.i32[1];
          if (v39.i32[0] <= v39.i32[1])
            v41 = v39.i32[1];
          else
            v41 = v39.i32[0];
          if (v39.i32[0] < v39.i32[1])
            v40 = v39.i32[0];
          if (v41 <= 1073741822 && v40 >= 1)
          {
            v42 = (int8x8_t)vadd_s32(v39, (int32x2_t)0x200000002);
            if (v42.i32[1] < 1 || v42.i32[0] < 1)
              v44 = -1;
            else
              v44 = 0;
            *(int32x2_t *)v64.i8 = v38;
            v64.u64[1] = (unint64_t)vbic_s8(v42, (int8x8_t)vdup_n_s32(v44));
          }
          v45 = (*(uint64_t (**)(int32x2_t *, uint64_t, int32x4_t *, uint64_t))(*(_QWORD *)v4 + 656))(v4, 1, &v64, 8207);
          if (v45)
          {
            v46 = v45;
            v47 = *((_QWORD *)a2 + 1);
            v48 = *((double *)a2 + 10);
            v49 = *(double *)(*((_QWORD *)this + 15) + 80);
            v50 = v48;
            v68 = *(_OWORD *)(v45 + 32);
            v51 = *(unsigned __int16 *)(v47 + 816);
            v52 = v51 & 0x7000;
            if ((v51 & 0x7000) == 0x3000)
            {
              v51 = v51 & 0xFFFF8FFF | 0x2000;
              *(_WORD *)(v47 + 816) = v51;
            }
            v53 = v51 >> 12;
            v54 = v49 * v50;
            if ((v53 & 4) != 0)
              v55 = 0;
            else
              v55 = 0x1E1F1400u >> (8 * (v53 & 7));
            *(_BYTE *)(v45 + 73) = *(_BYTE *)(v45 + 73) & 0xC0 | v55;
            v56 = *(const void **)(v47 + 16);
            memcpy(__dst, v56, 0x1E8uLL);
            __dst[0] = v56;
            *(_QWORD *)(v47 + 16) = __dst;
            v75 = 0;
            memset(&v74[2], 0, 32);
            memset(v74, 0, 32);
            v57 = *(_QWORD *)(v47 + 232);
            *(_OWORD *)((char *)v74 + 8) = *(_OWORD *)(v57 + 8);
            v58 = *(_QWORD *)(v57 + 32);
            *((_QWORD *)&v74[1] + 1) = *(_QWORD *)(v57 + 24);
            *(_QWORD *)&v74[2] = v58;
            *(_OWORD *)((char *)&v74[2] + 8) = *(_OWORD *)(v57 + 40);
            *((_QWORD *)&v74[3] + 1) = *(_QWORD *)(v57 + 56);
            v59 = *(_WORD *)(v57 + 68);
            LODWORD(v75) = *(_DWORD *)(v57 + 64);
            HIDWORD(v75) = v59 & 0x5FF;
            memset(v73, 0, sizeof(v73));
            CA::Shape::operator=((uint64_t)v73, &v68);
            *((_QWORD *)&v74[0] + 1) = v73;
            if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 184))(v47, 25))
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47 + 704))(v47, v46, 32, 32);
            *(_QWORD *)&v74[0] = CA::OGL::Context::set_gstate(v47, (uint64_t)v74);
            CA::OGL::Context::push_surface(v47, v46, 1u, 64, 0);
            CA::CG::DrawOp::render(*((CA::CG::DrawOp **)this + 14), (float64x2_t *)a2);
            CA::OGL::Context::pop_surface((CA::OGL::Context *)v47);
            CA::OGL::Context::set_gstate(v47, **(_QWORD **)(v47 + 232));
            v60 = __dst[0];
            *(_QWORD *)(v47 + 16) = __dst[0];
            __dst[0] = 0;
            *(_WORD *)(v47 + 816) = *(_WORD *)(v47 + 816) & 0x8FFF | v52;
            v72 = 0u;
            v70 = 0u;
            v71 = 0u;
            DWORD1(v72) = 15;
            v61 = v54;
            *(float *)v69 = v61;
            *(float *)&v69[1] = v61;
            v62 = *(_QWORD *)(v60 + 16) & 0xFFFFFF00FF00FF00;
            if (*(_QWORD *)(v60 + 8) == 0x3C003C003C003C00)
              v63 = 1;
            else
              v63 = 3;
            *(_DWORD *)(v60 + 16) = v63 | v62;
            *(_DWORD *)(v60 + 20) = HIDWORD(v62);
            (*(void (**)(uint64_t, uint64_t, _DWORD *, _QWORD, float, float))(*(_QWORD *)v47 + 848))(v47, v46, v69, 0, 1.0, 1.0);
            *(_BYTE *)(*(_QWORD *)(v47 + 16) + 16) = 0;
            if (__dst[0])
              __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
            CA::OGL::Context::release_surface((uint64_t)v4, v46);
          }
        }
        else
        {
          (*(void (**)(_QWORD, CA::CG::Renderer *))(**((_QWORD **)this + 14) + 160))(*((_QWORD *)this + 14), a2);
        }
      }
    }
  }
}

void CA::CG::DrawGaussianBlurTransparencyLayer::~DrawGaussianBlurTransparencyLayer(CA::CG::DrawGaussianBlurTransparencyLayer *this)
{
  CA::CG::TransparencyLayer *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = off_1E1593620;
  v2 = (CA::CG::TransparencyLayer *)*((_QWORD *)this + 20);
  if (v2)
    CA::CG::TransparencyLayer::unref(v2);
  *(_QWORD *)this = off_1E15925A8;
  v3 = (unsigned int *)*((_QWORD *)this + 15);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  CA::CG::DrawOp::~DrawOp(this);
}

{
  CA::CG::TransparencyLayer *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1593620;
  v2 = (CA::CG::TransparencyLayer *)*((_QWORD *)this + 20);
  if (v2)
    CA::CG::TransparencyLayer::unref(v2);
  *(_QWORD *)this = off_1E15925A8;
  v3 = (unsigned int *)*((_QWORD *)this + 15);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::CG::DrawGaussianBlurTransparencyLayer::draw_shape_and_color(uint64_t this, CA::CG::Renderer *a2)
{
  uint64_t v2;
  _QWORD *v3;
  float v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  _DWORD v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(this + 160) + 40);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)a2 + 1);
    v4 = *((double *)a2 + 10);
    v5 = *(double *)(*(_QWORD *)(this + 120) + 80) * v4;
    v12 = 0u;
    v11 = 0u;
    v10 = 0u;
    DWORD1(v12) = 15;
    *(float *)&v5 = v5;
    v9[0] = LODWORD(v5);
    v9[1] = LODWORD(v5);
    if ((*(unsigned int (**)(_QWORD *, uint64_t))(*v3 + 184))(v3, 25))
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v3 + 704))(v3, v2, 32, 32);
    v6 = v3[2];
    v7 = *(_QWORD *)(v6 + 16) & 0xFFFFFF00FF00FF00;
    if (*(_QWORD *)(v6 + 8) == 0x3C003C003C003C00)
      v8 = 1;
    else
      v8 = 3;
    *(_DWORD *)(v6 + 16) = v8 | v7;
    *(_DWORD *)(v6 + 20) = HIDWORD(v7);
    this = (*(uint64_t (**)(_QWORD *, uint64_t, _DWORD *, _QWORD, float, float))(*v3 + 848))(v3, v2, v9, 0, 1.0, 1.0);
    *(_BYTE *)(v3[2] + 16) = 0;
  }
  return this;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::Render::`anonymous namespace'::Interval *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;

  v3 = *(double *)a2;
  v4 = *(double *)result;
  v5 = *(double *)a3;
  if (*(double *)a2 >= *(double *)result)
  {
    if (v5 < v3)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(double *)a3 = v3;
      *(_QWORD *)(a3 + 8) = v7;
      v8 = *(double *)result;
      if (*(double *)a2 < *(double *)result)
      {
        v9 = *(_QWORD *)(result + 8);
        *(_OWORD *)result = *(_OWORD *)a2;
        *(double *)a2 = v8;
        *(_QWORD *)(a2 + 8) = v9;
      }
    }
  }
  else
  {
    v6 = *(_QWORD *)(result + 8);
    if (v5 >= v3)
    {
      *(_OWORD *)result = *(_OWORD *)a2;
      *(double *)a2 = v4;
      *(_QWORD *)(a2 + 8) = v6;
      if (*(double *)a3 >= v4)
        return result;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      *(_OWORD *)result = *(_OWORD *)a3;
    }
    *(double *)a3 = v4;
    *(_QWORD *)(a3 + 8) = v6;
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::Render::`anonymous namespace'::Interval *>(double *a1, double *a2, double *a3, uint64_t a4)
{
  uint64_t result;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  uint64_t v14;

  v9 = *a3;
  if (*(double *)a4 < *a3)
  {
    v10 = *((_QWORD *)a3 + 1);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(double *)a4 = v9;
    *(_QWORD *)(a4 + 8) = v10;
    v11 = *a2;
    if (*a3 < *a2)
    {
      v12 = *((_QWORD *)a2 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *a3 = v11;
      *((_QWORD *)a3 + 1) = v12;
      v13 = *a1;
      if (*a2 < *a1)
      {
        v14 = *((_QWORD *)a1 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *a2 = v13;
        *((_QWORD *)a2 + 1) = v14;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::Render::`anonymous namespace'::Interval *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  _OWORD *v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(double *)a1;
      if (*(double *)(a2 - 16) < *(double *)a1)
      {
        v7 = *(_QWORD *)(a1 + 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 16);
        *(double *)(a2 - 16) = v6;
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      v17 = (_OWORD *)(a1 + 16);
      v18 = (_OWORD *)(a1 + 32);
      v19 = (_OWORD *)(a1 + 48);
      v20 = *(double *)(a1 + 48);
      if (*(double *)(a2 - 16) < v20)
      {
        v21 = *(_QWORD *)(a1 + 56);
        *v19 = *(_OWORD *)(a2 - 16);
        *(double *)(a2 - 16) = v20;
        *(_QWORD *)(a2 - 8) = v21;
        v22 = *(double *)(a1 + 32);
        if (*(double *)(a1 + 48) < v22)
        {
          v23 = *(_QWORD *)(a1 + 40);
          *v18 = *v19;
          *(double *)(a1 + 48) = v22;
          *(_QWORD *)(a1 + 56) = v23;
          v24 = *(double *)(a1 + 16);
          if (*(double *)(a1 + 32) < v24)
          {
            v25 = *(_QWORD *)(a1 + 24);
            *v17 = *v18;
            *(double *)(a1 + 32) = v24;
            *(_QWORD *)(a1 + 40) = v25;
            v26 = *(double *)a1;
            if (*(double *)(a1 + 16) < *(double *)a1)
            {
              v27 = *(_QWORD *)(a1 + 8);
              *(_OWORD *)a1 = *v17;
              *(double *)(a1 + 16) = v26;
              *(_QWORD *)(a1 + 24) = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = (double *)(a1 + 32);
      v9 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *(double *)v9;
    if (*(double *)v9 < *v8)
    {
      v13 = *(_QWORD *)(v9 + 8);
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(double *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = a1 + v14 + 48;
          goto LABEL_13;
        }
      }
      v16 = a1;
LABEL_13:
      *(double *)v16 = v12;
      *(_QWORD *)(v16 + 8) = v13;
      if (++v11 == 8)
        return v9 + 16 == a2;
    }
    v8 = (double *)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2)
      return 1;
  }
}

int8x16_t *CA::Render::ShadowCache::lookup_rounded_rect_path(uint64_t a1, double *a2, double *a3, int a4)
{
  os_unfair_lock_s *v8;
  _QWORD *v9;
  uint64_t *v10;
  double *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  CGPath *Mutable;
  const CGPath *v16;
  CGPath *v17;
  float64x2_t v18;
  int32x2_t v19;
  uint64_t v20;
  double v21;
  double v22;
  int8x16_t v23;
  int8x16_t v24;
  const double *v25;
  int8x16_t v26;
  double *v27;
  double v28;
  double v29;
  float64_t v30;
  double v31;
  double v32;
  float64_t v33;
  double v34;
  double v35;
  float64_t v36;
  double v37;
  double v38;
  float64_t v39;
  float64x2_t v40;
  int8x16_t v41;
  int8x16_t v47;
  uint64_t v49;
  double v50;
  double v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  int8x16_t v57;
  int8x16_t v59;
  uint64_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  int8x16_t v67;
  int8x16_t v69;
  uint64_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  int8x16_t v77;
  int8x16_t v79;
  uint64_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  int8x16_t *v86;
  malloc_zone_t *malloc_zone;
  double *v88;
  double *v89;
  uint64_t v90;
  int8x16_t *v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int v96;
  int8x16_t *v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  os_unfair_lock_s *v101;
  uint64_t v102;
  malloc_zone_t *v103;
  _QWORD *v104;
  os_unfair_lock_s *v105;
  _QWORD *v107;
  uint64_t v108;
  unsigned int v109;
  float64x2_t v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  _OWORD v119[4];
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  float64x2x2_t v135;
  float64x2x2_t v136;

  v134 = *MEMORY[0x1E0C80C00];
  v8 = (os_unfair_lock_s *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  v9 = *(_QWORD **)(a1 + 8);
  if (v9)
  {
    v10 = *(uint64_t **)(a1 + 8);
    while (1)
    {
      v11 = (double *)*v10;
      if (*(double *)*v10 == *a2
        && v11[1] == a2[1]
        && v11[2] == a2[2]
        && v11[3] == a2[3]
        && *((unsigned __int8 *)v11 + 112) == a4
        && v11[4] == *a3
        && v11[5] == a3[1]
        && v11[6] == a3[2]
        && v11[7] == a3[3]
        && v11[8] == a3[4]
        && v11[9] == a3[5]
        && v11[10] == a3[6]
        && v11[11] == a3[7])
      {
        break;
      }
      v10 = (uint64_t *)v10[1];
      if (!v10)
        goto LABEL_17;
    }
    v107 = x_list_remove(v9, *v10);
    *(_QWORD *)(a1 + 8) = v107;
    *(_QWORD *)(a1 + 8) = x_list_prepend((uint64_t)v107, (uint64_t)v11);
    v108 = mach_absolute_time();
    v11[12] = CATimeWithHostTime(v108);
    v86 = (int8x16_t *)*((_QWORD *)v11 + 13);
    v105 = v8;
    goto LABEL_67;
  }
LABEL_17:
  os_unfair_lock_unlock(v8);
  v12 = *((_OWORD *)a3 + 1);
  v13 = *((_OWORD *)a3 + 2);
  v119[0] = *(_OWORD *)a3;
  v119[1] = v12;
  v14 = *((_OWORD *)a3 + 3);
  v119[2] = v13;
  v119[3] = v14;
  Mutable = CGPathCreateMutable();
  v17 = Mutable;
  v18 = *(float64x2_t *)(a2 + 2);
  v19 = vmovn_s64(vclezq_f64(v18));
  if (((v19.i32[0] | v19.i32[1]) & 1) == 0)
  {
    v20 = 0;
    v21 = *a2;
    v22 = a2[1];
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v23 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v18.f64[0], 0);
    v24 = (int8x16_t)vdupq_laneq_s64((int64x2_t)v18, 1);
    do
    {
      v25 = (const double *)&v119[v20];
      v135 = vld2q_f64(v25);
      v26 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v23, v135.val[0]), (int8x16_t)v135.val[0], v23);
      v136.val[0] = (float64x2_t)vbicq_s8(v26, (int8x16_t)vcltzq_f64((float64x2_t)v26));
      v135.val[0] = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v24, v135.val[1]), (int8x16_t)v135.val[1], v24);
      v136.val[1] = (float64x2_t)vbicq_s8((int8x16_t)v135.val[0], (int8x16_t)vcltzq_f64(v135.val[0]));
      v27 = (double *)((char *)&v130 + v20 * 16);
      vst2q_f64(v27, v136);
      v20 += 2;
    }
    while (v20 != 4);
    v28 = *(double *)&v130;
    v29 = *(double *)&v131;
    if (*(double *)&v131 + *(double *)&v130 > v18.f64[0])
    {
      v30 = v18.f64[0] / (*(double *)&v131 + *(double *)&v130);
      v29 = v30 * *(double *)&v131;
      v28 = v30 * *(double *)&v130;
    }
    v31 = *(double *)&v132;
    v32 = *(double *)&v133;
    v118 = v28;
    if (*(double *)&v133 + *(double *)&v132 > v18.f64[0])
    {
      v33 = v18.f64[0] / (*(double *)&v133 + *(double *)&v132);
      v31 = v33 * *(double *)&v132;
      v32 = v33 * *(double *)&v133;
    }
    v34 = *((double *)&v131 + 1);
    v35 = *((double *)&v132 + 1);
    if (*((double *)&v132 + 1) + *((double *)&v131 + 1) > v18.f64[1])
    {
      v36 = v18.f64[1] / (*((double *)&v132 + 1) + *((double *)&v131 + 1));
      v34 = v36 * *((double *)&v131 + 1);
      v35 = v36 * *((double *)&v132 + 1);
    }
    v37 = *((double *)&v130 + 1);
    v38 = *((double *)&v133 + 1);
    if (*((double *)&v133 + 1) + *((double *)&v130 + 1) > v18.f64[1])
    {
      v39 = v18.f64[1] / (*((double *)&v133 + 1) + *((double *)&v130 + 1));
      v38 = v39 * *((double *)&v133 + 1);
      v37 = v39 * *((double *)&v130 + 1);
    }
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v116 = v29;
    v117 = v37;
    v114 = v31;
    v115 = v34;
    v113 = v35;
    if (a4)
    {
      v40.f64[0] = v32;
      v40.f64[1] = v38;
      v41 = (int8x16_t)vaddq_f64(vdivq_f64(vmulq_f64(v18, (float64x2_t)vdupq_n_s64(0xBFEE43E411A05F26)), v40), (float64x2_t)vdupq_n_s64(0x400721F208D02F93uLL));
      __asm { FMOV            V2.2D, #1.0 }
      v47 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v41, (float64x2_t)_Q2), _Q2, v41);
      _Q1 = (int64x2_t)vbicq_s8(v47, (int8x16_t)vcltzq_f64((float64x2_t)v47));
    }
    else
    {
      __asm { FMOV            V1.2D, #1.0 }
    }
    v49 = 0;
    v110 = v18;
    v50 = v21 + v18.f64[0];
    v51 = v22 + v18.f64[1];
    v52 = (float64x2_t)vdupq_lane_s64(_Q1.i64[0], 0);
    v53 = (float64x2_t)vdupq_laneq_s64(_Q1, 1);
    do
    {
      v54 = (float64x2_t)continuous_p[v49];
      v55 = vsubq_f64((float64x2_t)circular_p[v49], v54);
      *(__int128 *)((char *)&v125 + v49 * 16) = (__int128)vmlaq_f64(v54, v52, v55);
      *(__int128 *)((char *)&v120 + v49 * 16) = (__int128)vmlaq_f64(v54, v53, v55);
      ++v49;
    }
    while (v49 != 5);
    v111 = v38;
    v112 = v32;
    CGPathMoveToPoint(Mutable, 0, v21 + *((double *)&v124 + 1) * v32, v22 + *(double *)&v120 * v38);
    CGPathAddCurveToPoint(v17, 0, v21 + *(double *)&v124 * v112, v22 + *((double *)&v120 + 1) * v111, v21 + *((double *)&v123 + 1) * v112, v22 + *(double *)&v121 * v111, v21 + *(double *)&v123 * v112, v22 + *((double *)&v121 + 1) * v111);
    CGPathAddCurveToPoint(v17, 0, v21 + *((double *)&v122 + 1) * v112, v22 + *(double *)&v122 * v111, v21 + *(double *)&v127 * v112, v22 + *((double *)&v122 + 1) * v111, v21 + *((double *)&v126 + 1) * v112, v22 + *(double *)&v128 * v111);
    CGPathAddCurveToPoint(v17, 0, v21 + *(double *)&v126 * v112, v22 + *((double *)&v128 + 1) * v111, v21 + *((double *)&v125 + 1) * v112, v22 + *(double *)&v129 * v111, v21 + *(double *)&v125 * v112, v22 + *((double *)&v129 + 1) * v111);
    if (a4)
    {
      v56.f64[0] = v114;
      v56.f64[1] = v113;
      v57 = (int8x16_t)vaddq_f64(vdivq_f64(vmulq_f64(v110, (float64x2_t)vdupq_n_s64(0xBFEE43E411A05F26)), v56), (float64x2_t)vdupq_n_s64(0x400721F208D02F93uLL));
      __asm { FMOV            V1.2D, #1.0 }
      v59 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v57, (float64x2_t)_Q1), _Q1, v57);
      _Q1 = (int64x2_t)vbicq_s8(v59, (int8x16_t)vcltzq_f64((float64x2_t)v59));
    }
    else
    {
      __asm { FMOV            V1.2D, #1.0 }
    }
    v61 = 0;
    v62 = (float64x2_t)vdupq_lane_s64(_Q1.i64[0], 0);
    v63 = (float64x2_t)vdupq_laneq_s64(_Q1, 1);
    do
    {
      v64 = (float64x2_t)continuous_p[v61];
      v65 = vsubq_f64((float64x2_t)circular_p[v61], v64);
      *(__int128 *)((char *)&v125 + v61 * 16) = (__int128)vmlaq_f64(v64, v62, v65);
      *(__int128 *)((char *)&v120 + v61 * 16) = (__int128)vmlaq_f64(v64, v63, v65);
      ++v61;
    }
    while (v61 != 5);
    CGPathAddLineToPoint(v17, 0, v50 - *(double *)&v125 * v114, v22 + *((double *)&v129 + 1) * v113);
    CGPathAddCurveToPoint(v17, 0, v50 - *((double *)&v125 + 1) * v114, v22 + *(double *)&v129 * v113, v50 - *(double *)&v126 * v114, v22 + *((double *)&v128 + 1) * v113, v50 - *((double *)&v126 + 1) * v114, v22 + *(double *)&v128 * v113);
    CGPathAddCurveToPoint(v17, 0, v50 - *(double *)&v127 * v114, v22 + *((double *)&v127 + 1) * v113, v50 - *((double *)&v127 + 1) * v114, v22 + *(double *)&v122 * v113, v50 - *(double *)&v123 * v114, v22 + *((double *)&v121 + 1) * v113);
    CGPathAddCurveToPoint(v17, 0, v50 - *((double *)&v123 + 1) * v114, v22 + *(double *)&v121 * v113, v50 - *(double *)&v124 * v114, v22 + *((double *)&v120 + 1) * v113, v50 - *((double *)&v124 + 1) * v114, v22 + *(double *)&v120 * v113);
    if (a4)
    {
      v66.f64[0] = v116;
      v66.f64[1] = v115;
      v67 = (int8x16_t)vaddq_f64(vdivq_f64(vmulq_f64(v110, (float64x2_t)vdupq_n_s64(0xBFEE43E411A05F26)), v66), (float64x2_t)vdupq_n_s64(0x400721F208D02F93uLL));
      __asm { FMOV            V1.2D, #1.0 }
      v69 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v67, (float64x2_t)_Q1), _Q1, v67);
      _Q1 = (int64x2_t)vbicq_s8(v69, (int8x16_t)vcltzq_f64((float64x2_t)v69));
    }
    else
    {
      __asm { FMOV            V1.2D, #1.0 }
    }
    v71 = 0;
    v72 = (float64x2_t)vdupq_lane_s64(_Q1.i64[0], 0);
    v73 = (float64x2_t)vdupq_laneq_s64(_Q1, 1);
    do
    {
      v74 = (float64x2_t)continuous_p[v71];
      v75 = vsubq_f64((float64x2_t)circular_p[v71], v74);
      *(__int128 *)((char *)&v125 + v71 * 16) = (__int128)vmlaq_f64(v74, v72, v75);
      *(__int128 *)((char *)&v120 + v71 * 16) = (__int128)vmlaq_f64(v74, v73, v75);
      ++v71;
    }
    while (v71 != 5);
    CGPathAddLineToPoint(v17, 0, v50 - *((double *)&v124 + 1) * v116, v51 - *(double *)&v120 * v115);
    CGPathAddCurveToPoint(v17, 0, v50 - *(double *)&v124 * v116, v51 - *((double *)&v120 + 1) * v115, v50 - *((double *)&v123 + 1) * v116, v51 - *(double *)&v121 * v115, v50 - *(double *)&v123 * v116, v51 - *((double *)&v121 + 1) * v115);
    CGPathAddCurveToPoint(v17, 0, v50 - *((double *)&v122 + 1) * v116, v51 - *(double *)&v122 * v115, v50 - *(double *)&v127 * v116, v51 - *((double *)&v122 + 1) * v115, v50 - *((double *)&v126 + 1) * v116, v51 - *(double *)&v128 * v115);
    CGPathAddCurveToPoint(v17, 0, v50 - *(double *)&v126 * v116, v51 - *((double *)&v128 + 1) * v115, v50 - *((double *)&v125 + 1) * v116, v51 - *(double *)&v129 * v115, v50 - *(double *)&v125 * v116, v51 - *((double *)&v129 + 1) * v115);
    if (a4)
    {
      v76.f64[0] = v118;
      v76.f64[1] = v117;
      v77 = (int8x16_t)vaddq_f64(vdivq_f64(vmulq_f64(v110, (float64x2_t)vdupq_n_s64(0xBFEE43E411A05F26)), v76), (float64x2_t)vdupq_n_s64(0x400721F208D02F93uLL));
      __asm { FMOV            V1.2D, #1.0 }
      v79 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v77, (float64x2_t)_Q1), _Q1, v77);
      _Q1 = (int64x2_t)vbicq_s8(v79, (int8x16_t)vcltzq_f64((float64x2_t)v79));
    }
    else
    {
      __asm { FMOV            V1.2D, #1.0 }
    }
    v81 = 0;
    v82 = (float64x2_t)vdupq_lane_s64(_Q1.i64[0], 0);
    v83 = (float64x2_t)vdupq_laneq_s64(_Q1, 1);
    do
    {
      v84 = (float64x2_t)continuous_p[v81];
      v85 = vsubq_f64((float64x2_t)circular_p[v81], v84);
      *(__int128 *)((char *)&v125 + v81 * 16) = (__int128)vmlaq_f64(v84, v82, v85);
      *(__int128 *)((char *)&v120 + v81 * 16) = (__int128)vmlaq_f64(v84, v83, v85);
      ++v81;
    }
    while (v81 != 5);
    CGPathAddLineToPoint(v17, 0, v21 + *(double *)&v125 * v118, v51 - *((double *)&v129 + 1) * v117);
    CGPathAddCurveToPoint(v17, 0, v21 + *((double *)&v125 + 1) * v118, v51 - *(double *)&v129 * v117, v21 + *(double *)&v126 * v118, v51 - *((double *)&v128 + 1) * v117, v21 + *((double *)&v126 + 1) * v118, v51 - *(double *)&v128 * v117);
    CGPathAddCurveToPoint(v17, 0, v21 + *(double *)&v127 * v118, v51 - *((double *)&v127 + 1) * v117, v21 + *((double *)&v127 + 1) * v118, v51 - *(double *)&v122 * v117, v21 + *(double *)&v123 * v118, v51 - *((double *)&v121 + 1) * v117);
    CGPathAddCurveToPoint(v17, 0, v21 + *((double *)&v123 + 1) * v118, v51 - *(double *)&v121 * v117, v21 + *(double *)&v124 * v118, v51 - *((double *)&v120 + 1) * v117, v21 + *((double *)&v124 + 1) * v118, v51 - *(double *)&v120 * v117);
    CGPathCloseSubpath(v17);
  }
  v86 = CA::Render::Path::new_path(v17, v16);
  CGPathRelease(v17);
  if (v86)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v88 = (double *)malloc_type_zone_malloc(malloc_zone, 0x78uLL, 0x8BB15036uLL);
    v89 = v88;
    if (v88)
      v88[13] = 0.0;
    *(_OWORD *)v88 = *(_OWORD *)a2;
    *((_OWORD *)v88 + 1) = *((_OWORD *)a2 + 1);
    *((_OWORD *)v88 + 2) = *(_OWORD *)a3;
    *((_OWORD *)v88 + 3) = *((_OWORD *)a3 + 1);
    *((_OWORD *)v88 + 4) = *((_OWORD *)a3 + 2);
    *((_OWORD *)v88 + 5) = *((_OWORD *)a3 + 3);
    *((_BYTE *)v88 + 112) = a4;
    v90 = mach_absolute_time();
    v89[12] = CATimeWithHostTime(v90);
    v91 = (int8x16_t *)*((_QWORD *)v89 + 13);
    if (v91 != v86)
    {
      if (v91)
      {
        v92 = &v91->u32[2];
        do
        {
          v93 = __ldaxr(v92);
          v94 = v93 - 1;
        }
        while (__stlxr(v94, v92));
        if (!v94)
          (*(void (**)(int8x16_t *))(v91->i64[0] + 16))(v91);
      }
      v95 = &v86->u32[2];
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 + 1, v95));
      v97 = v86;
      if (!v96)
      {
        v97 = 0;
        do
          v109 = __ldaxr(v95);
        while (__stlxr(v109 - 1, v95));
      }
      *((_QWORD *)v89 + 13) = v97;
    }
    v98 = &v86->u32[2];
    do
    {
      v99 = __ldaxr(v98);
      v100 = v99 - 1;
    }
    while (__stlxr(v100, v98));
    if (!v100)
      (*(void (**)(int8x16_t *))(v86->i64[0] + 16))(v86);
    os_unfair_lock_lock(v8);
    v101 = v8;
    v102 = *(_QWORD *)(a1 + 8);
    v103 = (malloc_zone_t *)get_malloc_zone();
    v104 = malloc_type_zone_malloc(v103, 0x10uLL, 0x8BB15036uLL);
    *v104 = v89;
    v104[1] = v102;
    *(_QWORD *)(a1 + 8) = v104;
    v105 = v101;
LABEL_67:
    os_unfair_lock_unlock(v105);
  }
  return v86;
}

void sub_1846B1DA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CGColorRef black(void)
{
  CGColorSpace *v0;
  _OWORD v2[2];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2[0] = xmmword_18475EFA0;
  v2[1] = unk_18475EFB0;
  v0 = (CGColorSpace *)CAGetColorSpace(0x1Du);
  return CGColorCreate(v0, (const CGFloat *)v2);
}

__n128 CALinearMaskContextGetCTM@<Q0>(uint64_t a1@<X8>)
{
  __n128 *v1;
  __int128 v2;
  __n128 result;

  v1 = (__n128 *)MEMORY[0x1E0C9BAA8];
  v2 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)a1 = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a1 + 16) = v2;
  result = v1[2];
  *(__n128 *)(a1 + 32) = result;
  return result;
}

void CA::ColorProgram::Program::~Program(CA::ColorProgram::Program *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  CGColorSpaceRelease(*((CGColorSpaceRef *)this + 2));
  CGColorSpaceRelease(*((CGColorSpaceRef *)this + 3));
  v2 = (unsigned int *)*((_QWORD *)this + 10);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  v6 = (unsigned int *)*((_QWORD *)this + 8);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
  }
  free(*((void **)this + 9));
}

uint64_t CA::ColorProgram::Cache::set_colorspace(CGColorSpace **this, CGColorSpace *a2)
{
  CGColorSpace *v4;
  uint64_t result;
  CGColorSpaceRef v6;

  v4 = *this;
  if (v4 == a2)
  {
    result = CGColorSpaceEqualToColorSpace();
    if ((result & 1) != 0)
      return result;
    v4 = *this;
  }
  CGColorSpaceRelease(v4);
  v6 = CGColorSpaceRetain(a2);
  *this = v6;
  this[1] = (CGColorSpace *)CAGetReconciledColorSpace((uint64_t)v6);
  result = (uint64_t)this[2];
  if (result)
  {
    result = CGColorTransformRelease();
    this[2] = 0;
  }
  return result;
}

_DWORD *CA::ColorProgram::Program::color_program(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7, float a8, float a9)
{
  _DWORD *v18;
  CA::ColorProgram::Program *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _QWORD v25[4];
  _QWORD v26[3];
  int v27;
  _QWORD v28[4];
  _QWORD v29[3];
  int v30;
  _QWORD v31[3];
  int v32;
  _QWORD v33[4];
  _QWORD v34[3];
  int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v40 = 0;
  v41 = &v40;
  v42 = 0x2000000000;
  v43 = 0;
  v36 = 0;
  v37 = &v36;
  v38 = 0x2000000000;
  v39 = 0;
  v34[0] = 0;
  v34[1] = v34;
  v34[2] = 0x2000000000;
  v35 = 0;
  v33[0] = 0;
  v33[1] = v33;
  v33[2] = 0x2000000000;
  v33[3] = 0;
  v31[0] = 0;
  v31[1] = v31;
  v31[2] = 0x2000000000;
  v32 = 0;
  v29[0] = 0;
  v29[1] = v29;
  v29[2] = 0x2000000000;
  v30 = 0;
  v28[0] = 0;
  v28[1] = v28;
  v28[2] = 0x2000000000;
  v28[3] = 0;
  v26[0] = 0;
  v26[1] = v26;
  v26[2] = 0x2000000000;
  v27 = 0;
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x2000000000;
  v25[3] = 0;
  if ((CGColorConversionInfoIterateFunctionsWithCallbacks() & 1) == 0)
  {
    v19 = (CA::ColorProgram::Program *)v41[3];
    if (v19)
    {
      CA::ColorProgram::Program::~Program(v19);
      v19 = (CA::ColorProgram::Program *)MEMORY[0x186DBD990]();
    }
    if (a3 == 1)
    {
      v20 = a1;
      v21 = a2;
      v22 = 2;
    }
    else
    {
      if (a3)
      {
        *a7 = 1;
        v23 = CA::ColorProgram::Program::null_program(v19);
        goto LABEL_11;
      }
      v20 = a1;
      v21 = a2;
      v22 = 1;
    }
    v23 = (_DWORD *)CA::ColorProgram::Program::color_program(v20, v21, v22, a4, a5, a6, a7, a8, a9);
LABEL_11:
    v18 = v23;
    goto LABEL_12;
  }
  v18 = (_DWORD *)v41[3];
  v18[9] = *((_DWORD *)v37 + 6);
LABEL_12:
  _Block_object_dispose(v25, 8);
  _Block_object_dispose(v26, 8);
  _Block_object_dispose(v28, 8);
  _Block_object_dispose(v29, 8);
  _Block_object_dispose(v31, 8);
  _Block_object_dispose(v33, 8);
  _Block_object_dispose(v34, 8);
  _Block_object_dispose(&v36, 8);
  _Block_object_dispose(&v40, 8);
  return v18;
}

uint64_t ___ZN2CA12ColorProgram7Program13color_programEPK21CGColorConversionInfoP12CGColorSpacei28CGColorConversionIterateTypebijffRb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  NSObject *v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  CGColorSpace *v20;
  uint64_t v21;
  void *v22;
  uint8_t buf[16];
  __int128 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (BYTE8(xmmword_1ECDC6AB0))
    CA::ColorProgram::print_CGColorConverterInfo(a2);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a2 + 12);
  if (*(uint64_t *)(a2 + 4) > 6)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v11 = x_log_category_color;
      result = os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_INFO);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 6;
      _os_log_impl(&dword_184457000, v11, OS_LOG_TYPE_INFO, "Color matching limited to %d-stage format (TRC -> ToneMap --> NxM/LUT -> TRC), falling back to cube LUT\n", buf, 8u);
    }
    return 0;
  }
  if (*(uint64_t *)(a2 + 28) >= 1)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v25 = 0;
      *(_OWORD *)buf = 0u;
      v24 = 0u;
      CGColorTRCGetFunction();
      v7 = CGColorTRCGetGammaID();
      if ((*(_BYTE *)(a1 + 72) & 0x80) != 0)
      {
        if (v7 == 1)
        {
          v8 = 0xCu;
LABEL_15:
          v5 += CA::ColorProgram::kOpcodeParamCount[v8];
          if (*(_DWORD *)buf == 5)
          {
            v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
            v10 = *(unsigned int *)(v9 + 24);
            if (*(_QWORD *)&buf[4] > v10)
              LODWORD(v10) = *(_DWORD *)&buf[4];
            *(_DWORD *)(v9 + 24) = v10;
            ++v6;
          }
          goto LABEL_19;
        }
        if (v7 == 4)
        {
          v8 = 0xBu;
          goto LABEL_15;
        }
      }
      if (*(_DWORD *)buf <= 9u)
      {
        v8 = dword_18475D3A4[*(unsigned int *)buf];
        goto LABEL_15;
      }
LABEL_19:
      if (*(_QWORD *)(a2 + 28) <= ++v4)
        goto LABEL_24;
    }
  }
  v6 = 0;
  v5 = 0;
LABEL_24:
  v13 = *(_QWORD *)(a2 + 36);
  if (v13 <= 0)
    v14 = 0;
  else
    v14 = 4 * v13;
  v15 = v5 + v14;
  if (*(uint64_t *)(a2 + 44) > 0)
  {
    v16 = 0;
    do
    {
      v25 = 0;
      *(_OWORD *)buf = 0u;
      v24 = 0u;
      CGColorNxMTransformGetTransform();
      v15 += CA::ColorProgram::kOpcodeParamCount[0];
      ++v16;
    }
    while (*(_QWORD *)(a2 + 44) > v16);
  }
  result = (uint64_t)malloc_type_calloc(1uLL, 16 * v15 + 112, 0xBBAC55FCuLL);
  if (result)
  {
    *(_DWORD *)(result + 36) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = result;
    v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    if (!v17)
      return 0;
    *(_DWORD *)(v17 + 40) = v15;
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    *(_QWORD *)(v18 + 48) = v18 + 112;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) + 56) = v6;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) + 96) = *(_DWORD *)(a1 + 76);
    if (v6)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) + 72) = malloc_type_calloc(4uLL, v6, 0xA3244538uLL);
      if (*(_BYTE *)(a1 + 80))
        v19 = 2;
      else
        v19 = 1;
      v22 = (void *)((((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) << v19) + 31) & 0xFFFFFFFE0);
      v20 = (CGColorSpace *)malloc_type_calloc(v6, (size_t)v22, 0xE81C452CuLL);
      if (*(uint64_t *)(a2 + 28) >= 1)
      {
        v21 = 0;
        do
        {
          v25 = 0;
          *(_OWORD *)buf = 0u;
          v24 = 0u;
          CGColorTRCGetFunction();
          ++v21;
        }
        while (*(_QWORD *)(a2 + 28) > v21);
      }
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) + 64) = CA::Render::Image::new_image((CA::Render::Image *)0x17, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), v6, 1u, 0, v20, (unint64_t *)&v22, (const unint64_t *)CA::ColorProgram::free_lut_data, (void (*)(const void *, void *))v20, v22);
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                                                                        + 24)
                                                                            + 48);
    return 1;
  }
  return result;
}

BOOL ___ZN2CA12ColorProgram7Program13color_programEPK21CGColorConversionInfoP12CGColorSpacei28CGColorConversionIterateTypebijffRb_block_invoke_30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  CGColorTRC *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  float v29;
  NSObject *v31;
  NSObject *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  _OWORD v40[2];
  int v41;
  __int128 v42;
  __int128 v43;
  int v44;
  uint8_t buf[32];
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v9 = &unk_1ECDC6000;
  if (BYTE8(xmmword_1ECDC6AB0))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v33 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = a3;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = a4;
        _os_log_impl(&dword_184457000, v33, OS_LOG_TYPE_DEFAULT, "Stage = %ld, %ld TRCs\n", buf, 0x16u);
      }
    }
  }
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  CGColorTRCGetFunction();
  v10 = CGColorTRCGetGammaID();
  v11 = a5;
  if ((*(_BYTE *)(a1 + 80) & 0x80) == 0)
    goto LABEL_6;
  if (v10 != 1)
  {
    if (v10 == 4)
    {
      v12 = 0xBu;
      goto LABEL_10;
    }
LABEL_6:
    if (v42 > 9)
      v12 = 0u;
    else
      v12 = dword_18475D3A4[v42];
    goto LABEL_10;
  }
  v12 = 0xCu;
LABEL_10:
  v13 = CA::ColorProgram::kOpcodeParamCount[v12];
  if (*(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) >= a4)
    v14 = a4;
  else
    v14 = *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v14 >= 1)
  {
    v15 = 0;
    v16 = 0;
    v37 = v12 - 13;
    v34 = v12 - 15;
    v38 = v12 - 7;
    v39 = v12 - 3;
    v35 = v14;
    v36 = CA::ColorProgram::kOpcodeParamCount[v12];
    while (1)
    {
      v17 = *(_QWORD *)(v11 + 8 * v15);
      if (v17 < 0)
      {
        if (v38 < 0xFFFFFFFB)
          return v16;
        switch((int)v13)
        {
          case 1:
            goto LABEL_48;
          case 2:
            goto LABEL_47;
          case 3:
            goto LABEL_46;
          case 4:
            goto LABEL_45;
          case 5:
            goto LABEL_44;
          case 6:
            goto LABEL_43;
          case 7:
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 4 * v15 + 96) = 0;
LABEL_43:
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 4 * v15 + 80) = 0;
LABEL_44:
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 4 * v15 + 64) = 0;
LABEL_45:
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 4 * v15 + 48) = 0;
LABEL_46:
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 4 * v15 + 32) = 0;
LABEL_47:
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 4 * v15 + 16) = 1065353216;
LABEL_48:
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 4 * v15) = 1065353216;
            break;
          default:
            goto LABEL_62;
        }
        goto LABEL_62;
      }
      if (v17 >= *(_QWORD *)(a2 + 28))
        return v16;
      v41 = 0;
      memset(v40, 0, sizeof(v40));
      CGColorTRCGetFunction();
      v18 = (CGColorTRC *)CGColorTRCPureGammaOriginal();
      if ((*(_BYTE *)(a1 + 80) & 4) == 0 && v39 <= 3 && (_DWORD)v18)
      {
        DWORD2(v40[0]) = 1065353216;
        memset((char *)v40 + 12, 0, 20);
      }
      if (v9[2744])
      {
        CA::ColorProgram::print_trc((CA::ColorProgram *)v15, *(_QWORD *)(v11 + 8 * v15), (uint64_t)v40, v18);
        if (!v15)
          goto LABEL_24;
      }
      else if (!v15)
      {
        goto LABEL_24;
      }
      if (LODWORD(v40[0]) != (_DWORD)v42)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v31 = x_log_category_color;
          if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v31, OS_LOG_TYPE_INFO, "TRCs are not the same for each color channel, falling back to cube LUT\n", buf, 2u);
          }
        }
        return v16;
      }
LABEL_24:
      if ((_DWORD)v12 == 7)
      {
        v19 = *(_QWORD *)(v11 + 8 * v15);
        if (v19 < 0)
          goto LABEL_77;
        v20 = v12;
        v21 = v9;
        v22 = v11;
        v23 = 0;
        v24 = *(_DWORD *)(a1 + 80);
        v25 = v19 + 1;
        v26 = -1;
        while (1)
        {
          v46 = 0;
          memset(buf, 0, sizeof(buf));
          CGColorTRCGetFunction();
          v27 = CGColorTRCGetGammaID();
          if ((v24 & 0x80) == 0)
            break;
          if (v27 == 1)
          {
            v28 = 12;
          }
          else
          {
            if (v27 != 4)
              break;
            v28 = 11;
          }
LABEL_35:
          if (v28 == 7)
            ++v26;
          if (v25 == ++v23)
          {
            if ((v26 & 0x80000000) == 0)
            {
              *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 4 * v15) = (float)(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) + 72) + 4 * v26) / *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24));
              *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 4 * v15 + 16) = (float)((float)v26 + 0.5) / (float)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) + 56);
              v9 = v21;
              v11 = v22;
              v12 = v20;
              v14 = v35;
              v13 = v36;
              goto LABEL_62;
            }
LABEL_77:
            __assert_rtn("lut_index_from_trc_index", "CAColorProgram.cpp", 525, "lut_index >= 0");
          }
        }
        if (*(_DWORD *)buf > 9u)
          v28 = 0;
        else
          v28 = dword_18475D3A4[*(unsigned int *)buf];
        goto LABEL_35;
      }
      if (v37 > 1)
      {
        if (v34 > 1)
        {
          switch((int)v13)
          {
            case 1:
              goto LABEL_61;
            case 2:
              goto LABEL_60;
            case 3:
              goto LABEL_59;
            case 4:
              goto LABEL_58;
            case 5:
              goto LABEL_57;
            case 6:
              goto LABEL_56;
            case 7:
              *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 4 * v15 + 96) = HIDWORD(v40[1]);
LABEL_56:
              *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 4 * v15 + 80) = DWORD2(v40[1]);
LABEL_57:
              *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 4 * v15 + 64) = DWORD1(v40[1]);
LABEL_58:
              *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 4 * v15 + 48) = v40[1];
LABEL_59:
              *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 4 * v15 + 32) = HIDWORD(v40[0]);
LABEL_60:
              *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 4 * v15 + 16) = DWORD2(v40[0]);
LABEL_61:
              *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 4 * v15) = DWORD1(v40[0]);
              break;
            default:
              goto LABEL_62;
          }
          goto LABEL_62;
        }
        v29 = *((float *)&v40[1] + 3);
      }
      else
      {
        v29 = *((float *)&v40[1] + 1) * 12.0;
      }
      **(float **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v29;
LABEL_62:
      v16 = v14 <= ++v15;
      if (v15 == v14)
        goto LABEL_67;
    }
  }
  v16 = 1;
LABEL_67:
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) |= (_DWORD)v12 << *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8)
                                                                                          + 24);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) += 5;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += 16 * v13;
  return v16;
}

uint64_t ___ZN2CA12ColorProgram7Program13color_programEPK21CGColorConversionInfoP12CGColorSpacei28CGColorConversionIterateTypebijffRb_block_invoke_35(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  int v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  CGColorMatrixGetMatrix();
  if (BYTE8(xmmword_1ECDC6AB0))
    CA::ColorProgram::print_matrix(a3, a4, (float *)&v12);
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = *(_QWORD *)(a2 + 20);
  **(_DWORD **)(*(_QWORD *)(a1[5] + 8) + 24) = v12;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + 4) = v13;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + 8) = v14;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + 12) = 0;
  v8 = DWORD2(v12);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + 16) = DWORD1(v12);
  v9 = HIDWORD(v12);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + 20) = DWORD1(v13);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + 24) = DWORD1(v14);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + 28) = 0;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + 32) = v8;
  v10 = HIDWORD(v13);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + 36) = DWORD2(v13);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + 40) = DWORD2(v14);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + 44) = 0;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + 48) = v9;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + 52) = v10;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + 56) = HIDWORD(v14);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + 60) = 0;
  *(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24) |= 1 << *(_DWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
  *(_DWORD *)(*(_QWORD *)(a1[7] + 8) + 24) += 5;
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) += 64;
  return 1;
}

BOOL ___ZN2CA12ColorProgram7Program13color_programEPK21CGColorConversionInfoP12CGColorSpacei28CGColorConversionIterateTypebijffRb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v4)(const void *, void *);
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  BOOL v24;
  float v25;
  float v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  float v40;
  _DWORD *v41;
  unint64_t v42;
  CA::Render::Texture *v43;
  int v44;
  uint64_t v45;
  _BOOL8 result;
  const char *v47;
  NSObject *v48;
  uint32_t v49;
  uint64_t v50;
  CA::Render::Texture *v51;
  int v52;
  int v53;
  NSObject *v54;
  double v55;
  NSObject *v56;
  double v57;
  NSObject *v58;
  float *v59;
  double v60;
  double v61;
  double v62;
  double v63;
  void *v64;
  _BYTE v65[36];
  uint64_t v66;
  uint8_t buf[4];
  double v68;
  __int16 v69;
  double v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v66 = 0;
  v4 = *(void (**)(const void *, void *))(*(_QWORD *)(a2 + 68) + 8 * a4);
  if (!v4)
    return 0;
  memset(v65, 0, sizeof(v65));
  CGColorNxMTransformGetTransform();
  if (BYTE8(xmmword_1ECDC6AB0))
    CA::ColorProgram::print_nxm(a3, a4, (unsigned int *)v65);
  v8 = *(_DWORD *)v65;
  switch(*(_DWORD *)v65)
  {
    case 3:
    case 5:
    case 6:
      v9 = *(_QWORD *)&v65[12];
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = *(_DWORD *)&v65[12];
      v10 = *(_QWORD *)&v65[4];
      if (*(_QWORD *)&v65[4] <= 4uLL && ((1 << v65[4]) & 0x1A) != 0 && v9 == 3)
      {
        if (*(_QWORD *)&v65[4] == 4 && *(_DWORD *)(a1 + 108) == 2)
          return 0;
        v11 = *(_QWORD *)&v65[20];
        v12 = (float)(unint64_t)(*(_QWORD *)&v65[20] - 1);
        v13 = (float)*(unint64_t *)&v65[20];
        **(float **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v12 / (float)*(unint64_t *)&v65[20];
        *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 4) = 0.5 / v13;
        *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 8) = v12;
        v14 = 1.0 / (double)v11;
        *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 12) = v14;
        switch(v8)
        {
          case 3:
            v15 = 12;
            goto LABEL_49;
          case 6:
            v15 = 14;
            goto LABEL_49;
          case 5:
            v15 = 13;
LABEL_49:
            v66 = v11 * dword_184750480[v15];
            if (v10 != 1)
            {
              if (v10 == 3)
                LODWORD(v10) = v11 * v11;
              else
                LODWORD(v10) = v11 * v11 * v11;
            }
            v51 = CA::Render::Image::new_image((CA::Render::Image *)v15, v11, v10, 1u, 0, *(CGColorSpace **)&v65[28], (unint64_t *)&v66, (const unint64_t *)CA::ColorProgram::release_nxmlut, v4, v64);
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) + 80) = v51;
            if (v51)
              CFRetain(v4);
            if (*(_QWORD *)&v65[4] == 3)
              v52 = 9;
            else
              v52 = 10;
            if (*(_QWORD *)&v65[4] == 1)
              v53 = 8;
            else
              v53 = v52;
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) |= v53 << *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8)
                                                                                            + 24);
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) += 5;
            v29 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
            v30 = *(_QWORD *)(v29 + 24) + 16;
            goto LABEL_64;
        }
        if (x_log_hook_p())
          goto LABEL_17;
        v50 = x_log_category_color;
        result = os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_ERROR);
        if (result)
        {
          *(_WORD *)buf = 0;
          v47 = "unsupported NxM LUT data format\n";
          goto LABEL_44;
        }
      }
      else
      {
        if (x_log_hook_p())
          goto LABEL_17;
        v45 = x_log_category_color;
        result = os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_ERROR);
        if (result)
        {
          *(_DWORD *)buf = 134218240;
          v68 = *(double *)&v65[4];
          v69 = 2048;
          v70 = *(double *)&v65[12];
          v47 = "%zux%zu LUT not supported.\n";
          v48 = v45;
          v49 = 22;
          goto LABEL_45;
        }
      }
      break;
    case 7:
      v31 = *(float **)&v65[28];
      **(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(*(_QWORD *)&v65[28] + 4);
      *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 4) = *v31;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 8) = 0;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 12) = 0;
      *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 16) = v31[2];
      *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 20) = v31[3];
      *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 24) = v31[4];
      *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 28) = v31[5];
      if ((*(_BYTE *)(a1 + 96) & 0x40) != 0 && fabsf(v31[5] + -0.5) <= 0.00000011921)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        *(float *)(v32 + 16) = *(float *)(v32 + 16) + *(float *)(v32 + 16);
        v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        *(float *)(v33 + 20) = *(float *)(v33 + 20) + *(float *)(v33 + 20);
        v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        *(float *)(v34 + 24) = *(float *)(v34 + 24) + *(float *)(v34 + 24);
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 28) = 0;
        if (BYTE8(xmmword_1ECDC6AB0))
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v58 = x_log_category_color;
            if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
            {
              v59 = *(float **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
              v60 = v59[4];
              v61 = v59[5];
              v62 = v59[6];
              v63 = v59[7];
              *(_DWORD *)buf = 134218752;
              v68 = v60;
              v69 = 2048;
              v70 = v61;
              v71 = 2048;
              v72 = v62;
              v73 = 2048;
              v74 = v63;
              _os_log_impl(&dword_184457000, v58, OS_LOG_TYPE_DEFAULT, "    overriding HLG luma_coeffs to (%f, %f, %f, %f)", buf, 0x2Au);
            }
          }
        }
      }
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                              + 24);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = **(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                                + 24);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = a3;
      v35 = *(float **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      *v35 = *v35 * *(float *)(a1 + 100);
      if (BYTE8(xmmword_1ECDC6AB0))
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v54 = x_log_category_color;
          if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
          {
            v55 = *(float *)(a1 + 100);
            *(_DWORD *)buf = 134217984;
            v68 = v55;
            _os_log_impl(&dword_184457000, v54, OS_LOG_TYPE_DEFAULT, "    headroom: %g", buf, 0xCu);
          }
        }
      }
      v36 = *(_QWORD *)(a1 + 64);
      v37 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
      v38 = 17;
      goto LABEL_39;
    case 9:
      v39 = *(_QWORD *)&v65[28];
      **(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(*(_QWORD *)&v65[28] + 24);
      *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 4) = *(float *)(v39 + 20)
                                                                                    - *(float *)(v39 + 24);
      *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 8) = 1.0
                                                                                    / (float)(*(float *)(v39 + 20)
                                                                                            - *(float *)(v39 + 24));
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 12) = 0;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 16) = *(_DWORD *)(v39 + 32);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 20) = *(_DWORD *)(v39 + 28);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 24) = *(_DWORD *)(v39 + 36);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 28) = *(_DWORD *)(v39 + 40);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 32) = *(_DWORD *)(v39 + 44);
      *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 36) = 1.0 / *(float *)(v39 + 44);
      v40 = *(float *)(a1 + 104) * 0.0001 * *(float *)(v39 + 44);
      *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 40) = v40;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 44) = 0;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 48) = *(_DWORD *)(v39 + 56);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 52) = *(_DWORD *)(v39 + 60);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 56) = *(_DWORD *)(v39 + 64);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 60) = *(_DWORD *)(v39 + 68);
      if (BYTE8(xmmword_1ECDC6AB0))
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v56 = x_log_category_color;
          if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
          {
            v57 = *(float *)(a1 + 100);
            *(_DWORD *)buf = 134217984;
            v68 = v57;
            _os_log_impl(&dword_184457000, v56, OS_LOG_TYPE_DEFAULT, "    headroom: %g", buf, 0xCu);
          }
        }
      }
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) |= 18 << *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72)
                                                                                                 + 8)
                                                                                     + 24);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) += 5;
      v29 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v30 = *(_QWORD *)(v29 + 24) + 64;
      goto LABEL_64;
    case 0xA:
      v16 = *(float **)&v65[28];
      **(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = **(_DWORD **)&v65[28];
      *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 4) = v16[1];
      *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 8) = v16[2];
      *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 12) = v16[3];
      *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 16) = v16[4];
      v17 = v16[2];
      v18 = v16[1];
      v19 = v17 / v16[3];
      v20 = v17 * 0.00033333;
      v21 = (float)(v18 + 1.0) + (float)(v19 * -2.0);
      v22 = fabsf(v21);
      v23 = (float)(v20 - v21) + v18;
      v24 = v22 < v20;
      if (v22 >= v20)
        v25 = v16[1];
      else
        v25 = (float)(v20 - v21) + v18;
      if (v24)
        v26 = (float)((float)(v19 * -2.0) + 1.0) + v23;
      else
        v26 = (float)(v18 + 1.0) + (float)(v19 * -2.0);
      *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 20) = v26;
      *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 24) = -(float)(v25 - (float)(v19 * v19));
      *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 28) = 1.0 - v19;
      *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 32) = v16[3] - v16[2];
      *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 36) = 1.0 / v26;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 40) = 0;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 44) = 0;
      v27 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v28 = *(_DWORD **)(v27 + 24);
      if (v28)
      {
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) < a3)
        {
          *v28 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
          v27 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        }
        *(_QWORD *)(v27 + 24) = 0;
      }
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) |= 20 << *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72)
                                                                                                 + 8)
                                                                                     + 24);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) += 5;
      v29 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v30 = *(_QWORD *)(v29 + 24) + 48;
      goto LABEL_64;
    case 0xB:
      v41 = *(_DWORD **)&v65[28];
      v42 = *(_QWORD *)(*(_QWORD *)&v65[28] + 28);
      v66 = 4 * v42;
      v43 = CA::Render::Image::new_image((CA::Render::Image *)0x18, v42, 1u, 1u, 0, (CGColorSpace *)(*(_QWORD *)&v65[28] + 36), (unint64_t *)&v66, (const unint64_t *)CA::ColorProgram::release_nxmlut, v4, v64);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) + 80) = v43;
      if (v43)
        CFRetain(v4);
      **(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v41[2];
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 4) = v41[3];
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 8) = v41[4];
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 12) = v41[5];
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 16) = v41[6];
      *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 20) = (float)(v42 - 1) / (float)v42;
      *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 24) = 0.5 / (float)v42;
      CGColorFunctionGetOutputRange();
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 28) = v44;
      v36 = *(_QWORD *)(a1 + 64);
      v37 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
      v38 = 19;
LABEL_39:
      *(_DWORD *)(*(_QWORD *)(v36 + 8) + 24) |= v38 << v37;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) += 5;
      v29 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v30 = *(_QWORD *)(v29 + 24) + 32;
LABEL_64:
      *(_QWORD *)(v29 + 24) = v30;
      return 1;
    default:
      if (x_log_hook_p())
      {
LABEL_17:
        x_log_();
        return 0;
      }
      v50 = x_log_category_color;
      result = os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      *(_WORD *)buf = 0;
      v47 = "unsupported NxM format\n";
LABEL_44:
      v48 = v50;
      v49 = 2;
LABEL_45:
      _os_log_impl(&dword_184457000, v48, OS_LOG_TYPE_ERROR, v47, buf, v49);
      return 0;
  }
  return result;
}

_DWORD *CA::ColorProgram::Program::null_program(CA::ColorProgram::Program *this)
{
  _DWORD *result;
  NSObject *v2;
  uint8_t v3[8];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (BYTE8(xmmword_1ECDC6AB0))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v2 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v3 = 0;
        _os_log_impl(&dword_184457000, v2, OS_LOG_TYPE_DEFAULT, "Creating null_program", v3, 2u);
      }
    }
  }
  result = malloc_type_calloc(1uLL, 0x70uLL, 0x10F0040FA9269B9uLL);
  result[9] = 0;
  return result;
}

void CA::ColorProgram::print_nxm(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  NSObject *v6;
  double v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  float *v12;
  float *v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  const char *v23;
  NSObject *v24;
  uint32_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  uint8_t buf[4];
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;
  __int16 v68;
  double v69;
  __int16 v70;
  double v71;
  __int16 v72;
  double v73;
  __int16 v74;
  double v75;
  __int16 v76;
  double v77;
  __int16 v78;
  double v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v6 = x_log_category_color;
    if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(double *)(a3 + 1);
      v8 = *(double *)(a3 + 3);
      *(_DWORD *)buf = 134218752;
      v59 = *(double *)&a1;
      v60 = 2048;
      v61 = v7;
      v62 = 2048;
      v63 = v8;
      v64 = 2048;
      v65 = *(double *)&a2;
      _os_log_impl(&dword_184457000, v6, OS_LOG_TYPE_DEFAULT, "Stage = %ld %zux%zu Transform %ld\n", buf, 0x2Au);
    }
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v9 = x_log_category_color;
    if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *a3;
      if (v10 > 0xB)
        *(double *)&v11 = COERCE_DOUBLE("Unknown NxM Transform Format");
      else
        v11 = off_1E15A7490[v10];
      *(_DWORD *)buf = 136315138;
      v59 = *(double *)&v11;
      _os_log_impl(&dword_184457000, v9, OS_LOG_TYPE_DEFAULT, "    Format '%s'\n", buf, 0xCu);
    }
  }
  switch(*a3)
  {
    case 7u:
      v12 = *(float **)(a3 + 7);
      if (x_log_hook_p())
        goto LABEL_20;
      v16 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        v17 = v12[1];
        v18 = *v12;
        v19 = v12[2];
        v20 = v12[3];
        v21 = v12[4];
        v22 = v12[5];
        *(_DWORD *)buf = 134219264;
        v59 = v17;
        v60 = 2048;
        v61 = v18;
        v62 = 2048;
        v63 = v19;
        v64 = 2048;
        v65 = v20;
        v66 = 2048;
        v67 = v21;
        v68 = 2048;
        v69 = v22;
        v23 = "    gain: %g, gamma: %g, luma_coeff: (%g, %g, %g), max_coeff %g";
        v24 = v16;
        v25 = 62;
        goto LABEL_29;
      }
      break;
    case 9u:
      v13 = *(float **)(a3 + 7);
      if (x_log_hook_p())
        goto LABEL_20;
      v26 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        v27 = v13[5];
        v28 = v13[6];
        v29 = v13[8];
        v30 = v13[7];
        v31 = v13[9];
        v32 = v13[10];
        v33 = v13[11];
        v34 = v13[14];
        v35 = v13[15];
        v36 = v13[16];
        v37 = v13[17];
        *(_DWORD *)buf = 134220544;
        v59 = v27;
        v60 = 2048;
        v61 = v28;
        v62 = 2048;
        v63 = v29;
        v64 = 2048;
        v65 = v30;
        v66 = 2048;
        v67 = v31;
        v68 = 2048;
        v69 = v32;
        v70 = 2048;
        v71 = v33;
        v72 = 2048;
        v73 = v34;
        v74 = 2048;
        v75 = v35;
        v76 = 2048;
        v77 = v36;
        v78 = 2048;
        v79 = v37;
        v23 = "    master [%g %g], lum [%g %g], KneeStart %g, KneeScale %g, OpticalScale: %g, lumaCoef (%g, %g, %g, %g)";
        v24 = v26;
        v25 = 112;
        goto LABEL_29;
      }
      break;
    case 0xAu:
      v14 = *(float **)(a3 + 7);
      if (x_log_hook_p())
        goto LABEL_20;
      v38 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        v39 = v14[5];
        v40 = v14[6];
        v41 = v14[7];
        v42 = v14[8];
        v43 = v14[9];
        v44 = v14[4];
        v45 = *v14;
        v46 = v14[1];
        v47 = v14[2];
        v48 = v14[3];
        *(_DWORD *)buf = 134220288;
        v59 = v39;
        v60 = 2048;
        v61 = v40;
        v62 = 2048;
        v63 = v41;
        v64 = 2048;
        v65 = v42;
        v66 = 2048;
        v67 = v43;
        v68 = 2048;
        v69 = v44;
        v70 = 2048;
        v71 = v45;
        v72 = 2048;
        v73 = v46;
        v74 = 2048;
        v75 = v47;
        v76 = 2048;
        v77 = v48;
        v23 = "  a: %g, b: %g, c: %g, d: %g, e: %g, lum_sat_factor: %g, luminance_scale: %g, source headroom: %g, target "
              "   headroom: %g, target_reference_white: %g";
        v24 = v38;
        v25 = 102;
        goto LABEL_29;
      }
      break;
    case 0xBu:
      v15 = *(_QWORD *)(a3 + 7);
      if (x_log_hook_p())
      {
LABEL_20:
        x_log_();
      }
      else
      {
        v49 = x_log_category_color;
        if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
        {
          v50 = *(float *)v15;
          v51 = *(float *)(v15 + 4);
          v52 = *(float *)(v15 + 8);
          v53 = *(float *)(v15 + 12);
          v54 = *(float *)(v15 + 16);
          v55 = *(float *)(v15 + 20);
          v56 = *(float *)(v15 + 24);
          v57 = *(double *)(v15 + 28);
          *(_DWORD *)buf = 134220032;
          v59 = v50;
          v60 = 2048;
          v61 = v51;
          v62 = 2048;
          v63 = v52;
          v64 = 2048;
          v65 = v53;
          v66 = 2048;
          v67 = v54;
          v68 = 2048;
          v69 = v55;
          v70 = 2048;
          v71 = v56;
          v72 = 2048;
          v73 = v57;
          v74 = 2048;
          *(_QWORD *)&v75 = v15 + 36;
          v23 = "\tFlex Luminance Scaling params:\n"
                "\t\tsource headroom = % 3.10f\n"
                "\t\ttarget headroom = % 3.10f\n"
                "\t\tcoefficients[0] = % 3.10f\n"
                "\t\tcoefficients[1] = % 3.10f\n"
                "\t\tcoefficients[2] = % 3.10f\n"
                "\t\tcoefficients[3] = % 3.10f\n"
                "\t\tcoefficients[4] = % 3.10f\n"
                "\t\tFlexGTCTableCount = %zu\n"
                "\t\tFlexGTCTable = %p\n";
          v24 = v49;
          v25 = 92;
LABEL_29:
          _os_log_impl(&dword_184457000, v24, OS_LOG_TYPE_DEFAULT, v23, buf, v25);
        }
      }
      break;
    default:
      return;
  }
}

void CA::ColorProgram::release_nxmlut(CA::ColorProgram *this, CFTypeRef cf, void *a3)
{
  if (cf)
    CFRelease(cf);
}

double CA::ColorProgram::print_matrix(uint64_t a1, uint64_t a2, float *a3)
{
  double result;
  NSObject *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v7 = x_log_category_color;
    if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *a3;
      v9 = a3[1];
      v10 = a3[2];
      v11 = a3[3];
      v12 = a3[4];
      v13 = a3[5];
      v14 = a3[6];
      v15 = a3[7];
      v16 = a3[8];
      v17 = a3[9];
      v18 = a3[10];
      v19 = a3[11];
      *(_DWORD *)buf = 134221312;
      v21 = a1;
      v22 = 2048;
      v23 = a2;
      v24 = 2048;
      v25 = v8;
      v26 = 2048;
      v27 = v9;
      v28 = 2048;
      v29 = v10;
      v30 = 2048;
      v31 = v11;
      v32 = 2048;
      v33 = v12;
      v34 = 2048;
      v35 = v13;
      v36 = 2048;
      v37 = v14;
      v38 = 2048;
      v39 = v15;
      v40 = 2048;
      v41 = v16;
      v42 = 2048;
      v43 = v17;
      v44 = 2048;
      v45 = v18;
      v46 = 2048;
      v47 = v19;
      _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_DEFAULT, "Stage = %ld matrix %ld\n    %g %g %g %g\n    %g %g %g %g\n    %g %g %g %g", buf, 0x8Eu);
    }
  }
  return result;
}

void CA::ColorProgram::print_trc(CA::ColorProgram *this, uint64_t a2, uint64_t a3, CGColorTRC *a4)
{
  int v4;
  int v7;
  uint64_t v8;
  double v9;
  const char *v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  double v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  double v24;
  const char *v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  const char *v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  const char *v42;
  uint64_t v43;
  double v44;
  float *v45;
  double v46;
  double v47;
  float *v48;
  double v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  uint8_t buf[4];
  int v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;
  __int16 v68;
  double v69;
  __int16 v70;
  double v71;
  __int16 v72;
  double v73;
  __int16 v74;
  const char *v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v4 = (int)a4;
  v7 = (int)this;
  switch(*(_DWORD *)a3)
  {
    case 0:
      if (x_log_hook_p())
        goto LABEL_21;
      v8 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(float *)(a3 + 4);
        *(_DWORD *)buf = 67109632;
        v55 = v7;
        v56 = 2048;
        v57 = a2;
        v58 = 2048;
        v59 = v9;
        v10 = "    TRC channel %d --> TRCs[%ld], Type0: Y = X^%f \n";
        goto LABEL_46;
      }
      break;
    case 1:
      if (x_log_hook_p())
        goto LABEL_21;
      v11 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *(float *)(a3 + 4);
        v12 = *(float *)(a3 + 8);
        v14 = *(float *)(a3 + 12);
        *(_DWORD *)buf = 67110914;
        v55 = v7;
        v56 = 2048;
        v57 = a2;
        v58 = 2048;
        v59 = v12;
        v60 = 2048;
        v61 = v14;
        v15 = (float)((float)-v14 / v12);
        v16 = "NO";
        v62 = 2048;
        v63 = v13;
        v64 = 2048;
        v65 = v15;
        if (v4)
          v16 = "YES";
        v66 = 2048;
        v67 = v15;
        v68 = 2080;
        v69 = *(double *)&v16;
        v10 = "    TRC channel %d --> TRCs[%ld], Type1: Y = (%g*X+%g)^%g [X >= %g],  Y = 0 [X < %g] pure power original: %s\n";
        v17 = v11;
        v18 = 78;
        goto LABEL_52;
      }
      break;
    case 2:
      if (x_log_hook_p())
        goto LABEL_21;
      v19 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        v21 = *(float *)(a3 + 4);
        v20 = *(float *)(a3 + 8);
        v22 = *(float *)(a3 + 12);
        v23 = *(float *)(a3 + 16);
        *(_DWORD *)buf = 67111426;
        v24 = v23;
        v55 = v7;
        v56 = 2048;
        v57 = a2;
        v58 = 2048;
        v59 = v20;
        v60 = 2048;
        v61 = v22;
        v62 = 2048;
        v63 = v21;
        v64 = 2048;
        v65 = v24;
        v25 = "NO";
        v26 = (float)((float)-v22 / v20);
        if (v4)
          v25 = "YES";
        v66 = 2048;
        v67 = v26;
        v68 = 2048;
        v69 = v24;
        v70 = 2048;
        v71 = v26;
        v72 = 2080;
        v73 = *(double *)&v25;
        v10 = "    TRC channel %d --> TRCs[%ld], Type2: Y = (%g*X+%g)^%g + %f [X >= %g],  Y = %g [X < %g] pure power original: %s\n";
        v17 = v19;
        v18 = 98;
        goto LABEL_52;
      }
      break;
    case 3:
      if (x_log_hook_p())
        goto LABEL_21;
      v27 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        v28 = *(float *)(a3 + 8);
        v29 = *(float *)(a3 + 12);
        v30 = *(float *)(a3 + 4);
        v31 = *(float *)(a3 + 20);
        v32 = *(float *)(a3 + 16);
        v33 = "NO";
        if (v4)
          v33 = "YES";
        *(_DWORD *)buf = 67111170;
        v55 = v7;
        v56 = 2048;
        v57 = a2;
        v58 = 2048;
        v59 = v28;
        v60 = 2048;
        v61 = v29;
        v62 = 2048;
        v63 = v30;
        v64 = 2048;
        v65 = v31;
        v66 = 2048;
        v67 = v32;
        v68 = 2048;
        v69 = v31;
        v70 = 2080;
        v71 = *(double *)&v33;
        v10 = "    TRC channel %d --> TRCs[%ld], Type3: Y = (%g*X+%g)^%g [X >= %g],  Y = %g*X [X < %g] pure power original: %s\n";
        v17 = v27;
        v18 = 88;
        goto LABEL_52;
      }
      break;
    case 4:
      if (x_log_hook_p())
        goto LABEL_21;
      v34 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        v35 = *(float *)(a3 + 8);
        v36 = *(float *)(a3 + 12);
        v37 = *(float *)(a3 + 4);
        v38 = *(float *)(a3 + 24);
        v39 = *(float *)(a3 + 20);
        v40 = *(float *)(a3 + 16);
        v41 = *(float *)(a3 + 28);
        v42 = "NO";
        if (v4)
          v42 = "YES";
        *(_DWORD *)buf = 67111682;
        v55 = v7;
        v56 = 2048;
        v57 = a2;
        v58 = 2048;
        v59 = v35;
        v60 = 2048;
        v61 = v36;
        v62 = 2048;
        v63 = v37;
        v64 = 2048;
        v65 = v38;
        v66 = 2048;
        v67 = v39;
        v68 = 2048;
        v69 = v40;
        v70 = 2048;
        v71 = v41;
        v72 = 2048;
        v73 = v39;
        v74 = 2080;
        v75 = v42;
        v10 = "    TRC channel %d --> TRCs[%ld], Type4: Y = (%g*X+%g)^%g + %g [X >= %g], Y = %g*X + %g [X < %g] pure powe"
              "r original: %s\n";
        v17 = v34;
        v18 = 108;
        goto LABEL_52;
      }
      break;
    case 5:
      if (x_log_hook_p())
        goto LABEL_21;
      v43 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        v44 = *(double *)(a3 + 4);
        v45 = *(float **)(a3 + 12);
        v46 = *v45;
        v47 = v45[1];
        v48 = &v45[*(_QWORD *)&v44];
        v49 = *(v48 - 2);
        v50 = *(v48 - 1);
        *(_DWORD *)buf = 67110656;
        v55 = v7;
        v56 = 2048;
        v57 = a2;
        v58 = 2048;
        v59 = v44;
        v60 = 2048;
        v61 = v46;
        v62 = 2048;
        v63 = v47;
        v64 = 2048;
        v65 = v49;
        v66 = 2048;
        v67 = v50;
        v10 = "    TRC channel %d --> TRCs[%ld], Table: entries = %zu, [%g %g ... %g %g]\n";
        v17 = v43;
        v18 = 68;
        goto LABEL_52;
      }
      break;
    case 6:
      if (x_log_hook_p())
        goto LABEL_21;
      v8 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        v51 = *(float *)(a3 + 28);
        *(_DWORD *)buf = 67109632;
        v55 = v7;
        v56 = 2048;
        v57 = a2;
        v58 = 2048;
        v59 = v51;
        v10 = "    TRC channel %d --> TRCs[%ld], PQ EOTF (degamma), optical scale: %g";
        goto LABEL_46;
      }
      break;
    case 7:
      if (x_log_hook_p())
        goto LABEL_21;
      v8 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        v52 = *(float *)(a3 + 28);
        *(_DWORD *)buf = 67109632;
        v55 = v7;
        v56 = 2048;
        v57 = a2;
        v58 = 2048;
        v59 = v52;
        v10 = "    TRC channel %d --> TRCs[%ld], PQ InvEOTF (engamma), optical scale: %g";
LABEL_46:
        v17 = v8;
        v18 = 28;
        goto LABEL_52;
      }
      break;
    case 8:
      if (x_log_hook_p())
        goto LABEL_21;
      v53 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        v55 = v7;
        v56 = 2048;
        v57 = a2;
        v10 = "    TRC channel %d --> TRCs[%ld], HLG InvOETF (degamma)";
        goto LABEL_51;
      }
      break;
    case 9:
      if (x_log_hook_p())
      {
LABEL_21:
        x_log_();
      }
      else
      {
        v53 = x_log_category_color;
        if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          v55 = v7;
          v56 = 2048;
          v57 = a2;
          v10 = "    TRC channel %d --> TRCs[%ld], HLG OETF (engamma)";
LABEL_51:
          v17 = v53;
          v18 = 18;
LABEL_52:
          _os_log_impl(&dword_184457000, v17, OS_LOG_TYPE_DEFAULT, v10, buf, v18);
        }
      }
      break;
    default:
      return;
  }
}

void CA::ColorProgram::print_CGColorConverterInfo(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v2 = x_log_category_color;
    if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(a1 + 4);
      v4 = *(_QWORD *)(a1 + 12);
      v5 = *(_QWORD *)(a1 + 20);
      v6 = *(_QWORD *)(a1 + 28);
      v7 = *(_QWORD *)(a1 + 36);
      v8 = *(_QWORD *)(a1 + 44);
      *(_DWORD *)buf = 67110400;
      v10 = v3;
      v11 = 1024;
      v12 = v4;
      v13 = 1024;
      v14 = v5;
      v15 = 1024;
      v16 = v6;
      v17 = 1024;
      v18 = v7;
      v19 = 1024;
      v20 = v8;
      _os_log_impl(&dword_184457000, v2, OS_LOG_TYPE_DEFAULT, "CGColorConverter:\n    %d stages\n    %d input components\n    %d output components\n    %d TRCs\n    %d Matrices\n    %d NxM LUTs\n", buf, 0x26u);
    }
  }
}

void CA::ColorProgram::free_lut_data(CA::ColorProgram *this, void *a2, void *a3)
{
  free(a2);
}

uint64_t CA::ColorProgram::Cache::find_program(uint64_t a1, _QWORD *a2, CGColorSpace *a3, CGColorSpace *a4, uint64_t a5, _BYTE *a6, float a7, float a8)
{
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  float v21;
  float v22;
  _BOOL4 v23;
  _BOOL4 v25;
  float v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  CGColorSpace *v30;
  CGColorSpace *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  CGColorSpace *v35;
  CGColorSpace *v36;
  int v37;
  CGColorSpace *v38;
  int v39;
  uint64_t *v40;
  void *v41;
  _QWORD *v43;
  CGColorSpace *v44;
  const __CFString *v45;
  const __CFString *v46;
  NSObject *v47;
  const char *v48;
  const char *CString;
  const char *v50;
  int v51;
  const char *v52;
  float v53;
  const char *v54;
  double v55;
  NSObject *v56;
  NSObject *v57;
  const char *v58;
  int v60;
  uint64_t v61;
  uint8_t buf[4];
  const char *v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  const char *v73;
  __int16 v74;
  const char *v75;
  __int16 v76;
  const char *v77;
  __int16 v78;
  double v79;
  __int16 v80;
  double v81;
  __int16 v82;
  const char *v83;
  __int16 v84;
  double v85;
  _OWORD v86[8];
  uint8_t v87[32];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  if (a6[3])
    v14 = 1;
  else
    v14 = (a6[5] | a6[4]) == 0;
  v15 = !v14;
  v16 = (uint64_t *)*a2;
  v17 = 0;
  if (*a2)
  {
    v18 = v15 ^ 1;
    v19 = a2;
    v61 = a1;
    do
    {
      v20 = v16;
      if (a6[1])
      {
        v21 = *(float *)(a1 + 48);
        v22 = *((float *)v16 + 24);
        if (v21 == v22)
        {
          v23 = 0;
        }
        else
        {
          if (v21 == 1.0 || v22 == 1.0)
          {
            v25 = 1;
            goto LABEL_30;
          }
          v23 = vabds_f32(v21, v22) > (float)(fminf(v21, v22) * 0.01);
        }
        if (((v23 | v18) & 1) == 0)
        {
LABEL_21:
          v26 = *((float *)v16 + 26);
          v23 = v26 > 0.0 && v26 != a7;
        }
      }
      else
      {
        if ((_DWORD)v15)
          goto LABEL_21;
        v23 = 0;
      }
      if (*a6)
        v25 = 1;
      else
        v25 = v23;
      if (!v23 && *a6)
        v25 = *((float *)v16 + 25) != a8;
LABEL_30:
      if (*((_DWORD *)v16 + 9))
        v27 = v25;
      else
        v27 = 0;
      if (!*((_DWORD *)v16 + 8) && *((_DWORD *)v16 + 22) == (_DWORD)a5 && *((_DWORD *)v16 + 23) == *(_DWORD *)(a1 + 40))
      {
        if ((CGColorSpace *)v16[2] == a3)
          goto LABEL_38;
        v28 = v15;
        v29 = a5;
        v30 = a3;
        v31 = a4;
        v32 = CGColorSpaceEqualToColorSpaceIgnoringRange();
        a4 = v31;
        a3 = v30;
        a5 = v29;
        v15 = v28;
        a1 = v61;
        if (v32)
        {
LABEL_38:
          if ((CGColorSpace *)v20[3] == a4)
          {
            v37 = 1;
          }
          else
          {
            v33 = v15;
            v34 = a5;
            v35 = a3;
            v36 = a4;
            v37 = CGColorSpaceEqualToColorSpaceIgnoringRange();
            a4 = v36;
            a3 = v35;
            a5 = v34;
            v15 = v33;
            a1 = v61;
          }
          if (((v37 ^ 1 | v27) & 1) == 0)
          {
            *v19 = *v20;
            v43 = a2;
            *v20 = *a2;
            if (BYTE8(xmmword_1ECDC6AB0))
            {
              if (x_log_hook_p())
              {
                v43 = a2;
                x_log_();
              }
              else
              {
                v57 = x_log_category_color;
                v43 = a2;
                if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)v87 = 134218498;
                  *(_QWORD *)&v87[4] = v20;
                  if ((_QWORD *)(a1 + 24) == a2)
                    v58 = "static";
                  else
                    v58 = "dynamic";
                  *(_WORD *)&v87[12] = 2080;
                  *(_QWORD *)&v87[14] = v58;
                  *(_WORD *)&v87[22] = 1024;
                  *(_DWORD *)&v87[24] = v17;
                  _os_log_impl(&dword_184457000, v57, OS_LOG_TYPE_DEFAULT, "Found matching color program %p in %s cache at %d", v87, 0x1Cu);
                }
              }
            }
            *v43 = v20;
            return 1;
          }
        }
      }
      v16 = (uint64_t *)*v20;
      if (v17 == 1000)
      {
        if (!v16)
        {
          v17 = 1001;
          break;
        }
        v38 = a4;
        v39 = 0;
        *v20 = 0;
        do
        {
          v40 = (uint64_t *)*v16;
          CA::ColorProgram::Program::~Program((CA::ColorProgram::Program *)v16);
          free(v41);
          ++v39;
          v16 = v40;
        }
        while (v40);
        if (BYTE8(xmmword_1ECDC6AB0))
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v56 = x_log_category_color;
            if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v87 = 67109120;
              *(_DWORD *)&v87[4] = v39;
              _os_log_impl(&dword_184457000, v56, OS_LOG_TYPE_DEFAULT, "Purged %d entries from color program cache", v87, 8u);
            }
          }
          v17 = 1001;
          a4 = v38;
          break;
        }
        return 0;
      }
      ++v17;
      v19 = v20;
    }
    while (v16);
  }
  if (BYTE8(xmmword_1ECDC6AB0))
  {
    v44 = a4;
    v45 = (const __CFString *)CGColorSpaceCopyICCProfileDescription();
    v46 = (const __CFString *)CGColorSpaceCopyICCProfileDescription();
    if (!v45)
      v45 = CGColorSpaceCopyName(a3);
    if (!v46)
      v46 = CGColorSpaceCopyName(v44);
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    memset(v87, 0, sizeof(v87));
    memset(v86, 0, sizeof(v86));
    if (v45 && v46)
    {
      if (x_log_hook_p())
      {
        CA_CFStringGetCString(v45, (char *)v87, 128);
        CA_CFStringGetCString(v46, (char *)v86, 128);
        x_log_();
      }
      else
      {
        v47 = x_log_category_color;
        if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
        {
          if ((_QWORD *)(a1 + 24) == a2)
            v48 = "static";
          else
            v48 = "dynamic";
          v60 = *(_DWORD *)(a1 + 40);
          CString = CA_CFStringGetCString(v45, (char *)v87, 128);
          v50 = CA_CFStringGetCString(v46, (char *)v86, 128);
          v51 = a6[1];
          v52 = "y";
          v53 = *(float *)(a1 + 48);
          *(_DWORD *)buf = 136317954;
          if (v51)
            v54 = "y";
          else
            v54 = "n";
          v55 = v53;
          v63 = v48;
          v64 = 1024;
          if (!(_DWORD)v15)
            v52 = "n";
          v65 = v17;
          v66 = 1024;
          v67 = 0;
          v68 = 1024;
          v69 = a5;
          v70 = 1024;
          v71 = v60;
          v72 = 2080;
          v73 = CString;
          v74 = 2080;
          v75 = v50;
          v76 = 2080;
          v77 = v54;
          v78 = 2048;
          v79 = v55;
          v80 = 2048;
          v81 = a8;
          v82 = 2080;
          v83 = v52;
          v84 = 2048;
          v85 = a7;
          _os_log_impl(&dword_184457000, v47, OS_LOG_TYPE_DEFAULT, "No matching program in %s cache after %d; ri %d; f 0x%x; cu %d; src %s; dst %s; dt %s; targ_hr %f; source_hr"
            " %f; nn %s; tn %f",
            buf,
            0x6Au);
        }
      }
    }
    else if (!v45)
    {
LABEL_77:
      if (v46)
        CFRelease(v46);
      return 0;
    }
    CFRelease(v45);
    goto LABEL_77;
  }
  return 0;
}

uint64_t ___ZN2CA12ColorProgram5Cache18force_single_cacheEv_block_invoke()
{
  uint64_t result;
  Boolean keyExistsAndHasValidFormat;
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  keyExistsAndHasValidFormat = 0;
  result = CFPreferencesGetAppBooleanValue(CFSTR("CAForceSingleColorProgramCache"), (CFStringRef)*MEMORY[0x1E0C9B248], &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    CA::ColorProgram::Cache::force_single_cache(void)::force_single_cache = (_DWORD)result != 0;
  return result;
}

void ___ZN2CA12ColorProgram5Cache7lookup_EP12CGColorSpacej22CGColorRenderingIntent_block_invoke()
{
  CFNumberRef v0;
  CFNumberRef v1;
  CFNumberRef v2;
  CFNumberRef v3;
  CFNumberRef v4;
  CFNumberRef v5;
  const CFDictionaryKeyCallBacks *v6;
  const CFDictionaryValueCallBacks *v7;
  const void *v8[2];
  void *v9[2];
  void *v10;
  void *v11;
  void *v12[10];
  void *v13[2];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  const __CFString *v17;
  void *v18[2];
  void *keys[2];
  void *values[10];
  _OWORD valuePtr[5];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  LODWORD(valuePtr[0]) = 1024;
  v0 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
  LODWORD(valuePtr[0]) = 1120403456;
  v1 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
  LODWORD(valuePtr[0]) = 1008981770;
  v2 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
  LODWORD(valuePtr[0]) = 1094713344;
  v3 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
  LODWORD(valuePtr[0]) = 1034594987;
  v4 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
  LODWORD(valuePtr[0]) = 1120403456;
  v5 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
  valuePtr[2] = xmmword_1E15A73F8;
  valuePtr[3] = *(_OWORD *)&off_1E15A7408;
  valuePtr[4] = xmmword_1E15A7418;
  valuePtr[0] = xmmword_1E15A73D8;
  valuePtr[1] = *(_OWORD *)&off_1E15A73E8;
  values[0] = *(void **)MEMORY[0x1E0C9AE50];
  values[1] = v0;
  values[2] = values[0];
  values[3] = v0;
  values[4] = v3;
  values[5] = v4;
  values[6] = v1;
  values[7] = v2;
  values[8] = values[0];
  values[9] = values[0];
  *(_OWORD *)keys = xmmword_1E15A7428;
  v18[0] = values[0];
  v18[1] = values[0];
  v15 = xmmword_1E15A7458;
  v16 = *(_OWORD *)&off_1E15A7468;
  v17 = CFSTR("kCGSkipToneMappingForBT2100");
  *(_OWORD *)v13 = xmmword_1E15A7438;
  v14 = *(_OWORD *)&off_1E15A7448;
  v12[0] = values[0];
  v12[1] = v0;
  v12[2] = values[0];
  v12[3] = v0;
  v12[4] = v3;
  v12[5] = v4;
  v12[6] = v1;
  v12[7] = v2;
  v12[8] = values[0];
  v12[9] = values[0];
  v10 = values[0];
  v11 = CFSTR("kCGSkipToneMappingForBT2100");
  *(_OWORD *)v9 = xmmword_1E15A7480;
  v8[0] = v5;
  v8[1] = values[0];
  v6 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  CA::ColorProgram::Cache::lookup_(CGColorSpace *,unsigned int,CGColorRenderingIntent)::converter_options[0] = (uint64_t)CFDictionaryCreate(0, (const void **)valuePtr, (const void **)values, 10, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  qword_1ECDC57A0 = (uint64_t)CFDictionaryCreate(0, (const void **)keys, (const void **)v18, 2, v6, v7);
  qword_1ECDC57A8 = (uint64_t)CFDictionaryCreate(0, (const void **)v13, (const void **)v12, 9, v6, v7);
  qword_1ECDC57B0 = (uint64_t)CFDictionaryCreate(0, (const void **)&v11, (const void **)&v10, 1, v6, v7);
  qword_1ECDC57B8 = (uint64_t)CFDictionaryCreate(0, (const void **)v9, v8, 2, v6, v7);
  CFRelease(v0);
  CFRelease(v1);
  CFRelease(v2);
  CFRelease(v3);
  CFRelease(v4);
}

const __CFString *NSStringFromCADisplayPowerAssertionReason(uint64_t a1)
{
  uint64_t v1;
  const __CFString *result;
  const __CFString *v3;

  v1 = a1 - 1;
  result = CFSTR("unblank");
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = CFSTR("audio");
      break;
    case 2:
      result = CFSTR("secure-indicator");
      break;
    case 3:
      result = CFSTR("bim");
      break;
    default:
      v3 = CFSTR("unknown");
      if (CFSTR("unblank") == (__CFString *)0xFFFF)
        v3 = CFSTR("debug");
      if (CFSTR("unblank") == (__CFString *)65534)
        result = CFSTR("bls-assertion");
      else
        result = v3;
      break;
  }
  return result;
}

void sub_1846B6188(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&_controls_lock);
  _Unwind_Resume(a1);
}

void sub_1846B64C8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846B68D0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&_controls_lock);
  _Unwind_Resume(a1);
}

const __CFString *NSStringFromCADisplayState(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("unknown");
  else
    return off_1E15A74F0[a1];
}

const __CFString *NSStringFromCADisplayPowerState(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 1)
    v1 = CFSTR("on");
  if (a1)
    return v1;
  else
    return CFSTR("off");
}

const __CFString *NSStringFromCADisplayStateTransitionStatus(unint64_t a1)
{
  if (a1 > 5)
    return CFSTR("unknown");
  else
    return off_1E15A7510[a1];
}

uint64_t CABootArgGetArray(_QWORD *a1)
{
  mach_port_t v2;
  const __CFDictionary *v3;
  uint64_t result;
  io_object_t v5;
  const __CFString *CFProperty;
  const __CFString *v7;
  CFTypeID v8;
  char *CStringPtr;
  uint64_t v10;
  std::string __p;
  __int128 v12;
  uint64_t v13;
  void **v14[2];

  v14[1] = *(void ***)MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = *MEMORY[0x1E0CBBAA8];
  v3 = IOServiceMatching("IODTNVRAM");
  result = IOServiceGetMatchingService(v2, v3);
  if ((_DWORD)result)
  {
    v5 = result;
    CFProperty = (const __CFString *)IORegistryEntryCreateCFProperty(result, CFSTR("boot-args"), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (CFProperty)
    {
      v7 = CFProperty;
      v8 = CFGetTypeID(CFProperty);
      if (v8 == CFStringGetTypeID())
      {
        CStringPtr = (char *)CFStringGetCStringPtr(v7, 0x600u);
        if (CStringPtr)
        {
          std::string::basic_string[abi:nn180100]<0>(&__p, CStringPtr);
          CABootArgSplit((std::string **)&v12, &__p, 0x20u);
          v10 = v13;
          *(_OWORD *)a1 = v12;
          a1[2] = v10;
          v13 = 0;
          v12 = 0uLL;
          v14[0] = (void **)&v12;
          std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v14);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      CFRelease(v7);
    }
    return IOObjectRelease(v5);
  }
  return result;
}

uint64_t CABootArgGetInt(const std::string *a1, const std::string *a2, uint64_t a3, const std::string::value_type *a4)
{
  const std::string *v7;
  const std::string *v8;
  int64_t size;
  std::string *data;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  int v14;
  int v15;
  std::string *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20[2];

  v20[1] = *(void ***)MEMORY[0x1E0C80C00];
  if (a1 != a2)
  {
    v7 = a1;
    do
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      CABootArgSplit(&v17, v7, 0x3Du);
      if (v18 - (_QWORD)v17 == 48 && !std::string::compare(v17, a4))
      {
        v8 = v17 + 1;
        if (SHIBYTE(v17[1].__r_.__value_.__r.__words[2]) < 0)
        {
          data = (std::string *)v17[1].__r_.__value_.__l.__data_;
          size = v17[1].__r_.__value_.__l.__size_;
        }
        else
        {
          size = HIBYTE(v17[1].__r_.__value_.__r.__words[2]);
          data = v17 + 1;
        }
        if (size >= 2)
        {
          v11 = (std::string *)((char *)data + size);
          v12 = data;
          do
          {
            v13 = (std::string *)memchr(v12, 48, size - 1);
            if (!v13)
              break;
            if (LOWORD(v13->__r_.__value_.__l.__data_) == 30768)
            {
              if (v13 == data)
                v15 = 16;
              else
                v15 = 10;
              if (v13 == v11)
                v14 = 10;
              else
                v14 = v15;
              goto LABEL_14;
            }
            v12 = (std::string *)((char *)&v13->__r_.__value_.__l.__data_ + 1);
            size = (char *)v11 - (char *)v12;
          }
          while ((char *)v11 - (char *)v12 >= 2);
        }
        v14 = 10;
LABEL_14:
        a3 = std::stoi(v8, 0, v14);
      }
      v20[0] = (void **)&v17;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v20);
      ++v7;
    }
    while (v7 != a2);
  }
  return a3;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

uint64_t CABootArgSplit(std::string **a1, const std::string *a2, unsigned __int8 a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  __int128 *p_p;
  unint64_t v13;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _BYTE *v20;
  int v21;
  std::string::size_type size;
  char v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  std::string *v34;
  std::string *v35;
  __int128 v36;
  unint64_t v37;
  std::string *v38;
  std::string *v39;
  __int128 v40;
  int64x2_t v41;
  std::string *v42;
  uint64_t v43;
  std::string v46;
  std::__split_buffer<std::string> v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 __p;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v57 = 0;
  v56 = 0u;
  __p = 0u;
  v54 = 0u;
  v52 = 0u;
  v53 = 0u;
  v49 = 0;
  v51 = 0u;
  v5 = MEMORY[0x1E0DE4FD0];
  v6 = MEMORY[0x1E0DE4FD0] + 104;
  v58 = MEMORY[0x1E0DE4FD0] + 104;
  v7 = MEMORY[0x1E0DE4FD0] + 64;
  v50 = MEMORY[0x1E0DE4FD0] + 64;
  v8 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v48 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  *(uint64_t *)((char *)&v48 + *(_QWORD *)(v48 - 24)) = v9;
  v49 = 0;
  v10 = (std::ios_base *)((char *)&v48 + *(_QWORD *)(v48 - 24));
  std::ios_base::init(v10, &v51);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v11 = v8[5];
  v50 = v8[4];
  *(uint64_t *)((char *)&v50 + *(_QWORD *)(v50 - 24)) = v11;
  v48 = v8[1];
  *(uint64_t *)((char *)&v48 + *(_QWORD *)(v48 - 24)) = v8[6];
  v58 = v6;
  v48 = v5 + 24;
  v50 = v7;
  std::streambuf::basic_streambuf();
  *(_QWORD *)&v51 = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v56 = 0u;
  LODWORD(v57) = 24;
  std::string::operator=((std::string *)&__p, a2);
  *((_QWORD *)&v56 + 1) = 0;
  if ((SBYTE7(v56) & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = (__int128 *)__p;
  if ((SBYTE7(v56) & 0x80u) == 0)
    v13 = BYTE7(v56);
  else
    v13 = *((_QWORD *)&__p + 1);
  if ((v57 & 8) != 0)
  {
    *(_QWORD *)&v52 = p_p;
    *((_QWORD *)&v52 + 1) = p_p;
    *((_QWORD *)&v56 + 1) = (char *)p_p + v13;
    *(_QWORD *)&v53 = (char *)p_p + v13;
  }
  if ((v57 & 0x10) != 0)
  {
    *((_QWORD *)&v56 + 1) = (char *)p_p + v13;
    if ((SBYTE7(v56) & 0x80u) == 0)
      v14 = 22;
    else
      v14 = (v56 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    std::string::resize((std::string *)&__p, v14, 0);
    v15 = BYTE7(v56);
    if (SBYTE7(v56) < 0)
      v15 = *((_QWORD *)&__p + 1);
    *((_QWORD *)&v53 + 1) = p_p;
    *(_QWORD *)&v54 = p_p;
    *((_QWORD *)&v54 + 1) = (char *)p_p + v15;
    if ((v57 & 3) != 0)
    {
      if (v13 >> 31)
      {
        v16 = ((v13 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v17 = 0x7FFFFFFF * ((v16 + ((v13 - 0x80000000 - v16) >> 1)) >> 30);
        p_p = (__int128 *)((char *)p_p + v17 + 0x7FFFFFFF);
        v13 = v13 - v17 - 0x7FFFFFFF;
        *(_QWORD *)&v54 = p_p;
      }
      if (v13)
        *(_QWORD *)&v54 = (char *)p_p + v13;
    }
  }
  memset(&v46, 0, sizeof(v46));
  while (2)
  {
    LOBYTE(v47.__first_) = 0;
    MEMORY[0x186DBD828](&v47, &v48, 1);
    if (!LOBYTE(v47.__first_))
      goto LABEL_38;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    {
      *v46.__r_.__value_.__l.__data_ = 0;
      v46.__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      v46.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&v46.__r_.__value_.__s + 23) = 0;
    }
    v18 = 0;
    while (1)
    {
      v19 = *(_QWORD **)((char *)&v52 + *(_QWORD *)(v48 - 24));
      v20 = (_BYTE *)v19[3];
      if (v20 != (_BYTE *)v19[4])
      {
        v19[3] = v20 + 1;
        LOBYTE(v19) = *v20;
        goto LABEL_29;
      }
      LODWORD(v19) = (*(uint64_t (**)(_QWORD *))(*v19 + 80))(v19);
      if ((_DWORD)v19 == -1)
        break;
LABEL_29:
      if (v19 == a3)
      {
        v21 = 0;
        goto LABEL_37;
      }
      ++v18;
      std::string::push_back(&v46, (std::string::value_type)v19);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0 && v46.__r_.__value_.__l.__size_ == 0x7FFFFFFFFFFFFFF7)
      {
        v21 = 4;
        goto LABEL_37;
      }
    }
    if (v18)
      v21 = 2;
    else
      v21 = 6;
LABEL_37:
    std::ios_base::clear((std::ios_base *)((char *)&v48 + *(_QWORD *)(v48 - 24)), *(_DWORD *)((char *)&v51 + *(_QWORD *)(v48 - 24) + 8) | v21);
LABEL_38:
    size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    v23 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    if ((*((_BYTE *)&v51 + *(_QWORD *)(v48 - 24) + 8) & 5) == 0)
    {
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v46.__r_.__value_.__l.__size_;
      if (size)
      {
        v25 = (unint64_t)a1[1];
        v24 = (unint64_t)a1[2];
        if (v25 >= v24)
        {
          v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)*a1) >> 3);
          v28 = v27 + 1;
          if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
            abort();
          v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)*a1) >> 3);
          if (2 * v29 > v28)
            v28 = 2 * v29;
          if (v29 >= 0x555555555555555)
            v30 = 0xAAAAAAAAAAAAAAALL;
          else
            v30 = v28;
          v47.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
          if (v30)
          {
            v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v30);
            v33 = v32;
            v23 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
          }
          else
          {
            v31 = 0;
            v33 = 0;
          }
          v35 = (std::string *)&v31[24 * v27];
          if (v23 < 0)
          {
            std::string::__init_copy_ctor_external(v35, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
          }
          else
          {
            v36 = *(_OWORD *)&v46.__r_.__value_.__l.__data_;
            v35->__r_.__value_.__r.__words[2] = v46.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
          }
          v38 = *a1;
          v37 = (unint64_t)a1[1];
          if ((std::string *)v37 == *a1)
          {
            v41 = vdupq_n_s64(v37);
            v39 = v35;
          }
          else
          {
            v39 = v35;
            do
            {
              v40 = *(_OWORD *)(v37 - 24);
              v39[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v37 - 8);
              *(_OWORD *)&v39[-1].__r_.__value_.__l.__data_ = v40;
              --v39;
              *(_QWORD *)(v37 - 16) = 0;
              *(_QWORD *)(v37 - 8) = 0;
              *(_QWORD *)(v37 - 24) = 0;
              v37 -= 24;
            }
            while ((std::string *)v37 != v38);
            v41 = *(int64x2_t *)a1;
          }
          v34 = v35 + 1;
          *a1 = v39;
          a1[1] = v34;
          *(int64x2_t *)&v47.__begin_ = v41;
          v42 = a1[2];
          a1[2] = (std::string *)&v31[24 * v33];
          v47.__end_cap_.__value_ = v42;
          v47.__first_ = (std::__split_buffer<std::string>::pointer)v41.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v47);
        }
        else
        {
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(a1[1], v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
          }
          else
          {
            v26 = *(_OWORD *)&v46.__r_.__value_.__l.__data_;
            *(_QWORD *)(v25 + 16) = *((_QWORD *)&v46.__r_.__value_.__l + 2);
            *(_OWORD *)v25 = v26;
          }
          v34 = (std::string *)(v25 + 24);
        }
        a1[1] = v34;
      }
      continue;
    }
    break;
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  v48 = *MEMORY[0x1E0DE4F50];
  v43 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(uint64_t *)((char *)&v48 + *(_QWORD *)(v48 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v50 = v43;
  *(_QWORD *)&v51 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v56) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x186DBD954](&v58);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(24 * a1);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

BOOL CADevicePrefers60HzAPT()
{
  _BOOL8 result;
  char *v1;

  result = CADeviceSupportsOddQuantaFrameRates();
  if (result)
  {
    if (CADeviceIsPhone::once[0] != -1)
      dispatch_once(CADeviceIsPhone::once, &__block_literal_global_134);
    if (CADeviceIsPhone::phone)
    {
      if (CADeviceSupportsAPT::once != -1)
        dispatch_once(&CADeviceSupportsAPT::once, &__block_literal_global_37);
      v1 = &CADeviceSupportsAPT::supports_apt;
    }
    else
    {
      if (CADevicePrefers60HzAPT::once != -1)
        dispatch_once(&CADevicePrefers60HzAPT::once, &__block_literal_global_200);
      v1 = &CADevicePrefers60HzAPT::enabled;
    }
    return *v1 != 0;
  }
  return result;
}

BOOL CADeviceUseSharedEvents()
{
  _QWORD v1[4];
  char v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = __CADeviceUseSharedEvents_block_invoke;
  v1[3] = &__block_descriptor_tmp_252;
  v2 = 0;
  if (CADeviceUseSharedEvents::once[0] != -1)
    dispatch_once(CADeviceUseSharedEvents::once, v1);
  return CADeviceUseSharedEvents::ca_shared_event_enabled != 0;
}

void CA::CG::FillUnevenRoundedRect::~FillUnevenRoundedRect(CA::CG::FillUnevenRoundedRect *this)
{
  malloc_zone_t *malloc_zone;

  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

_QWORD *CA::CG::FillUnevenRoundedRect::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  malloc_zone_t *malloc_zone;
  _QWORD *v11;
  int v12;
  CGColor *Color;
  unsigned int *v14;
  unsigned int v15;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v11 = malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
  if (v11)
  {
    v12 = *(_DWORD *)(a1 + 100) & 4;
    Color = (CGColor *)CGStyleGetColor();
    CA::CG::DrawOp::DrawOp((uint64_t)v11, a2, a1, a4, a5, Color, v12 | 0x8C0);
    *v11 = off_1E1591088;
    v11[18] = a1;
    v14 = (unsigned int *)(a3 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    v11[19] = a3;
    *v11 = off_1E1593398;
  }
  return v11;
}

uint64_t CA::CG::FillUnevenRoundedRect::debug_color(CA::CG::FillUnevenRoundedRect *this)
{
  return 1724330464;
}

void CA::CG::FillUnevenRoundedRectShadow::~FillUnevenRoundedRectShadow(CA::CG::FillUnevenRoundedRectShadow *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E1591088;
  v2 = (unsigned int *)*((_QWORD *)this + 19);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1591088;
  v2 = (unsigned int *)*((_QWORD *)this + 19);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::CG::FillUnevenRoundedRectShadow::retain_path()
{
  return CGPathCreateWithUnevenCornersRoundedRect();
}

void CA::Render::CompressedImage::show(CA::Render::CompressedImage *this, unsigned int a2, char a3)
{
  _BOOL4 v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  const char *v11;
  unint64_t v12;
  NSObject *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  const __CFString *v21;
  const __CFString *v22;
  NSObject *v23;
  uint64_t v24;
  const char *v25;
  NSObject *v26;
  uint32_t v27;
  NSObject *v28;
  int v29;
  int v30;
  unsigned int v31;
  const char *v32;
  unint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  char *v40;
  uint8_t v41[4];
  uint8_t *v42;
  uint8_t buf[32];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v5 = x_log_hook_p();
  if ((a3 & 1) != 0)
  {
    if (v5)
    {
      x_log_();
    }
    else
    {
      v28 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v30 = *((_DWORD *)this + 4);
        v29 = *((_DWORD *)this + 5);
        v31 = *((_DWORD *)this + 39) - 1;
        if (v31 > 0x1B)
          v32 = "UNKNOWN";
        else
          v32 = off_1E15A81A8[v31];
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v30;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v29;
        *(_WORD *)&buf[14] = 2080;
        *(_QWORD *)&buf[16] = v32;
        _os_log_impl(&dword_184457000, v28, OS_LOG_TYPE_DEFAULT, "<compressed-image [%d %d] [%s]", buf, 0x18u);
      }
    }
    v33 = (*(uint64_t (**)(CA::Render::CompressedImage *))(*(_QWORD *)this + 168))(this);
    if (x_log_hook_p())
    {
      if (v33 >= 0x400)
      {
        v37 = 1.0;
        do
          v37 = v37 * 0.0009765625;
        while (v37 * (double)v33 >= 1024.0);
      }
      goto LABEL_45;
    }
    v34 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v35 = (double)v33;
      if (v33 >= 0x400)
      {
        v38 = 1.0;
        do
        {
          v38 = v38 * 0.0009765625;
          v36 = v38 * v35;
        }
        while (v38 * v35 >= 1024.0);
      }
      else
      {
        v36 = (double)v33;
      }
      v39 = v33 > 0x3FF;
      if ((v33 & 0xFFFFFFFFFFF00000) != 0)
        ++v39;
      if ((v33 & 0xFFFFFFFFC0000000) != 0)
        ++v39;
      if (v33 >> 40)
        ++v39;
      if (v33 >> 50)
        ++v39;
      if (v33 >> 60)
        ++v39;
      v40 = off_1E15AAF00[v39];
      *(_DWORD *)buf = 134218242;
      *(double *)&buf[4] = v36;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v40;
      v25 = " [%.2lf %s]>";
      v26 = v34;
      v27 = 22;
      goto LABEL_48;
    }
  }
  else
  {
    if (v5)
    {
      x_log_();
    }
    else
    {
      v6 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *((_DWORD *)this + 4);
        v7 = *((_DWORD *)this + 5);
        v9 = *((_DWORD *)this + 38);
        v10 = *((_DWORD *)this + 39) - 1;
        if (v10 > 0x1B)
          v11 = "UNKNOWN";
        else
          v11 = off_1E15A81A8[v10];
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v8;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v7;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&buf[16] = v9;
        *(_WORD *)&buf[20] = 2080;
        *(_QWORD *)&buf[22] = v11;
        _os_log_impl(&dword_184457000, v6, OS_LOG_TYPE_DEFAULT, "(compressed-image [%d %d] [%d] %s", buf, 0x1Eu);
      }
    }
    v12 = (*(uint64_t (**)(CA::Render::CompressedImage *))(*(_QWORD *)this + 168))(this);
    if (x_log_hook_p())
    {
      if (v12 >= 0x400)
      {
        v16 = 1.0;
        do
          v16 = v16 * 0.0009765625;
        while (v16 * (double)v12 >= 1024.0);
      }
      x_log_();
    }
    else
    {
      v13 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v14 = (double)v12;
        if (v12 >= 0x400)
        {
          v17 = 1.0;
          do
          {
            v17 = v17 * 0.0009765625;
            v15 = v17 * v14;
          }
          while (v17 * v14 >= 1024.0);
        }
        else
        {
          v15 = (double)v12;
        }
        v18 = v12 > 0x3FF;
        if ((v12 & 0xFFFFFFFFFFF00000) != 0)
          ++v18;
        if ((v12 & 0xFFFFFFFFC0000000) != 0)
          ++v18;
        if (v12 >> 40)
          ++v18;
        if (v12 >> 50)
          ++v18;
        if (v12 >> 60)
          ++v18;
        v19 = off_1E15AAF00[v18];
        *(_DWORD *)buf = 134218242;
        *(double *)&buf[4] = v15;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v19;
        _os_log_impl(&dword_184457000, v13, OS_LOG_TYPE_DEFAULT, " (%.2lf %s)", buf, 0x16u);
      }
    }
    if (*((_QWORD *)this + 6))
    {
      if ((*((_BYTE *)this + 14) & 8) != 0)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v20 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v20, OS_LOG_TYPE_DEFAULT, " colormatching-disabled", buf, 2u);
          }
        }
      }
      v21 = (const __CFString *)CGColorSpaceCopyICCProfileDescription();
      if (v21)
      {
        v22 = v21;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        memset(buf, 0, sizeof(buf));
        CFStringGetCString(v21, (char *)buf, 127, 0x8000100u);
        if (buf[0])
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v23 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v41 = 136315138;
              v42 = buf;
              _os_log_impl(&dword_184457000, v23, OS_LOG_TYPE_DEFAULT, " (colorspace \"%s\")", v41, 0xCu);
            }
          }
        }
        CFRelease(v22);
      }
    }
    if (x_log_hook_p())
    {
LABEL_45:
      x_log_();
      return;
    }
    v24 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v25 = ")";
      v26 = v24;
      v27 = 2;
LABEL_48:
      _os_log_impl(&dword_184457000, v26, OS_LOG_TYPE_DEFAULT, v25, buf, v27);
    }
  }
}

BOOL CA::Render::CompressedImage::is_unpremultiplied(CA::Render::CompressedImage *this)
{
  return *((_DWORD *)this + 42) == 2;
}

uint64_t CA::Render::release_deallocate(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  mach_vm_address_t v3;
  mach_vm_size_t v4;

  v2 = (_QWORD *)MEMORY[0x1E0C85AD8];
  v3 = a2[12] & -*MEMORY[0x1E0C85AD8];
  v4 = ((*(uint64_t (**)(_QWORD *))(*a2 + 168))(a2) + *v2 - 1) & -*v2;
  return mach_vm_deallocate(*MEMORY[0x1E0C83DA0], v3, v4);
}

void *x_heap_calloc(uint64_t *a1, size_t a2)
{
  size_t v2;
  void *v3;
  uint64_t v5;
  malloc_zone_t *malloc_zone;
  _QWORD *v7;
  void *v8;

  v2 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v2 < a2)
    return 0;
  if (v2 < 0x801)
  {
    v8 = (void *)x_heap_malloc_small_(a1, (a2 + 7) & 0xFFFFFFFFFFFFFFF8);
    v3 = v8;
    if (v8)
      bzero(v8, v2);
  }
  else
  {
    v3 = malloc_type_calloc(1uLL, (a2 + 7) & 0xFFFFFFFFFFFFFFF8, 0x9DF21B1EuLL);
    v5 = *a1;
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v7 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
    *v7 = v3;
    v7[1] = v5;
    *a1 = (uint64_t)v7;
  }
  return v3;
}

CA::CG::Queue **CA::CG::MetalDataProvider::copy_data(CA::CG::MetalDataProvider *this)
{
  CA::CG::Queue **result;
  int v3;
  unsigned int v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  result = (CA::CG::Queue **)*((_QWORD *)this + 2);
  if (result && !*((_QWORD *)this + 3) && !*((_BYTE *)this + 48))
  {
    v3 = BYTE9(xmmword_1ECDC6A90);
    if (BYTE9(xmmword_1ECDC6A90))
    {
      kdebug_trace();
      result = (CA::CG::Queue **)*((_QWORD *)this + 2);
    }
    v4 = *((_DWORD *)this + 11);
    if (v4 && result[9])
    {
      CA::CG::Queue::wait_queue(result[9], v4);
      result = (CA::CG::Queue **)*((_QWORD *)this + 2);
    }
    v5 = (void *)(*((uint64_t (**)(CA::CG::Queue **))*result + 4))(result);
    v7 = 0;
    v8[0] = 0;
    result = (CA::CG::Queue **)CAMetalTextureGetBytes(v5, v8, &v7);
    v6 = v7;
    *((_QWORD *)this + 3) = v8[0];
    *((_QWORD *)this + 4) = v6;
    if (v3)
      return (CA::CG::Queue **)kdebug_trace();
  }
  return result;
}

void CA::CG::MetalDataProvider::~MetalDataProvider(CA::CG::MetalDataProvider *this, uint64_t a2, void *a3)
{
  malloc_zone_t *malloc_zone;

  CA::CG::AccelDataProvider::~AccelDataProvider(this, a2, a3);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::CG::DrawPathShadow::draw_shadow(CA::CG::DrawPathShadow *this, CA::CG::Renderer *a2)
{
  uint64_t v4;
  __int128 v5;
  float16x4_t *v6;
  float16x4_t v7;
  float16x4_t v13;
  float16x4_t v14;
  float64x2_t v15;
  uint64_t v16;
  float64x2_t *v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64_t v22;
  float32x2_t *v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  int8x16_t v28;
  float64x2_t v29;
  float v30;
  const CGPath *v31;
  const CGPath *v32;
  const CGPath *v33;
  float v34;
  float v35;
  __n128 v36;
  __n128 v37;
  _BOOL4 v38;
  double v39;
  double v40;
  int8x16_t *v42;
  int8x16_t *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  char v47;
  __int128 v48;
  double v49;
  float64x2_t v50;
  __int128 v51;
  float64x2_t v52[2];
  float64x2_t v53;
  _BYTE v54[152];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a2 + 1);
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 136))(*((_QWORD *)this + 18)) & 5) == 0)
  {
    CA::CG::DrawShadow::draw_shadow(this, a2);
    return;
  }
  v6 = *(float16x4_t **)(v4 + 16);
  v7 = v6[1];
  _H0 = *(_WORD *)(*((_QWORD *)this + 18) + 94);
  __asm { FCVT            S0, H0 }
  _ZF = _S0 == 1.0;
  v13 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v7), _S0));
  if (_ZF)
    v14 = v6[1];
  else
    v14 = v13;
  v6[1] = v14;
  v15 = 0uLL;
  v53 = 0u;
  memset(v52, 0, sizeof(v52));
  v16 = 32;
  if ((*((_DWORD *)this + 25) & 4) != 0)
  {
    v16 = 88;
    v17 = (float64x2_t *)((char *)a2 + 88);
  }
  else
  {
    v17 = (float64x2_t *)((char *)a2 + 32);
  }
  if (v17 == v52)
  {
    v20.f64[0] = 0.0;
    v19 = 0uLL;
    v18 = 0uLL;
    v21 = 0uLL;
    v22 = 0.0;
  }
  else
  {
    v18 = *(float64x2_t *)((char *)a2 + v16);
    v19 = v17[1];
    v15 = v17[2];
    v52[0] = v18;
    v52[1] = v19;
    v20.f64[0] = v19.f64[1];
    v21 = *(float64x2_t *)((char *)v52 + 8);
    v22 = v18.f64[0];
  }
  v23 = (float32x2_t *)*((_QWORD *)this + 19);
  *(float *)&v5 = *((double *)a2 + 10);
  v24.f64[1] = v21.f64[1];
  v24.f64[0] = v20.f64[0];
  v25 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v21.f64[0], 0);
  v25.f64[0] = v22;
  v26 = vmulq_f64(v24, v25);
  v48 = v5;
  v49 = v22;
  v27 = vcvtq_f64_f32(vmul_n_f32(v23[10], *(float *)&v5));
  v20.f64[1] = v22;
  v50 = v21;
  v28 = (int8x16_t)vmulq_f64(v21, v27);
  v29 = vmulq_n_f64(vmlaq_f64(vnegq_f64((float64x2_t)vextq_s8(v28, v28, 8uLL)), v27, v20), 1.0 / vsubq_f64(v26, (float64x2_t)vdupq_laneq_s64((int64x2_t)v26, 1)).f64[0]);
  v30 = v23[9].f32[1];
  v53 = vmlaq_laneq_f64(vmlaq_n_f64(v15, v18, v29.f64[0]), v19, v29, 1);
  v51 = 0uLL;
  v31 = (const CGPath *)(*(uint64_t (**)(CA::CG::DrawPathShadow *, CA::CG::Renderer *, __int128 *))(*(_QWORD *)this + 192))(this, a2, &v51);
  if (!v31)
  {
    *(float16x4_t *)(*(_QWORD *)(v4 + 16) + 8) = v7;
    goto LABEL_33;
  }
  v33 = v31;
  v34 = vmulq_f64(v50, v50).f64[0] + v49 * v49;
  v36.n128_u64[1] = *((_QWORD *)&v48 + 1);
  v35 = (float)(v30 * *(float *)&v48) / sqrtf(v34);
  v53 = vmlaq_n_f64(vmlaq_n_f64(v53, v52[0], *(double *)&v51), v52[1], *((double *)&v51 + 1));
  v36.n128_f64[0] = vaddvq_f64(vmulq_f64(v52[0], v52[0]));
  v37 = (__n128)vmulq_f64(v52[1], v52[1]);
  v37.n128_f64[0] = vaddvq_f64((float64x2_t)v37);
  v38 = v36.n128_f64[0] != 1.0;
  if (v37.n128_f64[0] != 1.0)
    v38 = 1;
  v39 = sqrt(v36.n128_f64[0]);
  v40 = sqrt(v37.n128_f64[0]);
  if (v38)
  {
    v37.n128_f64[0] = v40;
    v36.n128_f64[0] = v39;
  }
  _ZF = v35 == 0.0 && (*(_DWORD *)(*((_QWORD *)this + 18) + 100) & 0x400) == 0;
  if (_ZF
    || (*((_BYTE *)this + 100) & 0x80) == 0
    || v36.n128_f64[0] >= 3.0
    || (v37.n128_f64[0] = vabdd_f64(v36.n128_f64[0], v37.n128_f64[0]),
        v36.n128_u64[0] = 0x3F50624DD2F1A9FCLL,
        v37.n128_f64[0] >= 0.001)
    || (v42 = CA::Render::Path::new_path(v31, v32)) == 0)
  {
    (*(void (**)(CA::CG::DrawPathShadow *, __n128, __n128))(*(_QWORD *)this + 200))(this, v37, v36);
    (*(void (**)(CA::CG::DrawPathShadow *))(*(_QWORD *)this + 208))(this);
    v47 = CA::CG::fill_path_blurred((uint64_t)a2);
    CGPathRelease(v33);
    *(float16x4_t *)(*(_QWORD *)(v4 + 16) + 8) = v7;
    if ((v47 & 1) != 0)
      return;
LABEL_33:
    CA::CG::DrawShadow::draw_shadow(this, a2);
    return;
  }
  v43 = v42;
  CA::Transform::set_affine((CA::Transform *)v54, v52[0].f64[0], v52[0].f64[1], v52[1].f64[0], v52[1].f64[1], v53.f64[0], v53.f64[1]);
  CA::OGL::emit_shadow_path(v4);
  v44 = &v43->u32[2];
  do
  {
    v45 = __ldaxr(v44);
    v46 = v45 - 1;
  }
  while (__stlxr(v46, v44));
  if (!v46)
    (*(void (**)(int8x16_t *))(v43->i64[0] + 16))(v43);
  CGPathRelease(v33);
  *(float16x4_t *)(*(_QWORD *)(v4 + 16) + 8) = v7;
}

uint64_t CA::CG::DrawPathShadow::path_bounds(CA::CG::DrawPathShadow *this)
{
  return 0;
}

uint64_t CA::CG::DrawPathShadow::fill_rule(CA::CG::DrawPathShadow *this)
{
  return 0;
}

void CA::CG::FillPathShadow::~FillPathShadow(CA::CG::FillPathShadow *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E1591088;
  v2 = (unsigned int *)*((_QWORD *)this + 19);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1591088;
  v2 = (unsigned int *)*((_QWORD *)this + 19);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

CGPathRef CA::CG::FillPathShadow::retain_path(uint64_t a1)
{
  return CGPathRetain(*(CGPathRef *)(*(_QWORD *)(a1 + 144) + 112));
}

uint64_t CA::CG::FillPathShadow::path_bounds(CA::CG::FillPathShadow *this)
{
  return *((_QWORD *)this + 18) + 120;
}

uint64_t CA::CG::FillPathShadow::fill_rule(CA::CG::FillPathShadow *this)
{
  return HIBYTE(*(_DWORD *)(*((_QWORD *)this + 18) + 100)) & 1;
}

void CA::CG::StrokePathShadow::~StrokePathShadow(CA::CG::StrokePathShadow *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E1591088;
  v2 = (unsigned int *)*((_QWORD *)this + 19);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1591088;
  v2 = (unsigned int *)*((_QWORD *)this + 19);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::CG::StrokePathShadow::retain_path(uint64_t a1)
{
  uint64_t v1;
  const CGPath *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t stroked_path;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 144);
  v2 = *(const CGPath **)(v1 + 112);
  v9 = *(_OWORD *)(v1 + 152);
  v3 = *(_QWORD *)(v1 + 168);
  v10 = v3;
  v4 = v1;
  if (v3)
  {
    CGDashRetain();
    v4 = *(_QWORD *)(a1 + 144);
  }
  v6 = *(_QWORD *)(v1 + 184);
  v11 = *(_QWORD *)(v1 + 176);
  v12 = v6;
  stroked_path = CA::CG::create_stroked_path(v2, (_OWORD *)(v1 + 8), (uint64_t)&v9, (*(_DWORD *)(v4 + 100) & 4) != 0);
  if (v3)
    CGDashRelease();
  return stroked_path;
}

CGColorSpaceRef CACopyColorSpaceFromBulkAttachments(CGColorSpaceRef result)
{
  if (result)
    return CA::Render::load_colorspace_from_bulk_attachments(*((_BYTE *)result + 59), *((_BYTE *)result + 60));
  return result;
}

double CA::Render::TiledTexture::lod_scale(CA::Render::TiledTexture *this, int a2)
{
  double result;
  int v3;
  unsigned int v4;
  unsigned int v5;

  result = 1.0;
  v3 = a2 - *((_DWORD *)this + 27);
  if (v3)
  {
    result = 0.0;
    if ((a2 & 0x80000000) == 0 && *((_DWORD *)this + 26) > a2)
    {
      v4 = *((_DWORD *)this + 4);
      if (v3 >= 0)
        v5 = v4 >> v3;
      else
        v5 = v4 << (*((_BYTE *)this + 108) - a2);
      return (double)v5 / (double)v4;
    }
  }
  return result;
}

uint64_t CA::Render::TiledTexture::set_fill_color(CA::Render::TiledTexture *this, int a2, Pattern *a3)
{
  Pattern *v3;
  Pattern *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  Pattern v11;
  _BOOL4 v12;
  uint64_t result;
  int v14;
  unsigned int v15;

  v3 = a3;
  *((_DWORD *)this + 28) = a2;
  v5 = (Pattern *)*((_QWORD *)this + 15);
  if (v5 != a3)
  {
    if (v5)
    {
      v6 = (unsigned int *)&v5[1];
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(Pattern *))(*(_QWORD *)v5 + 16))(v5);
    }
    if (v3)
    {
      v9 = (unsigned int *)&v3[1];
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      if (!v10)
      {
        v3 = 0;
        do
          v15 = __ldaxr(v9);
        while (__stlxr(v15 - 1, v9));
      }
    }
    *((_QWORD *)this + 15) = v3;
  }
  if (v3)
  {
    v11 = v3[16];
    v12 = *(_QWORD *)&v11
       && (*(_BYTE *)(*(_QWORD *)&v11 + 13) & 0x10) != 0
       && *(double *)&v3[12] <= *(double *)&v3[10]
       && *(double *)&v3[13] <= *(double *)&v3[11];
  }
  else
  {
    v12 = *((unsigned __int8 *)this + 112) == 0xFF;
  }
  result = (*(uint64_t (**)(CA::Render::TiledTexture *))(*(_QWORD *)this + 120))(this);
  if ((result & v12) != 0)
    v14 = 4096;
  else
    v14 = 0;
  *((_DWORD *)this + 3) = *((_DWORD *)this + 3) & 0xFFFFEFFF | v14;
  return result;
}

void sub_1846BB640(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846BB988(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846BBC4C(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846BBD08(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846BBE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1846BBF18(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

CFTypeID CA::Layer::ensure_mipmaps(CFTypeID this)
{
  CFTypeID v1;
  CFTypeID v2;
  uint64_t v3;

  if ((*(_BYTE *)(this + 54) & 0x20) == 0)
  {
    v1 = this;
    this = objc_msgSend(*(id *)(this + 16), "contents");
    if (this)
    {
      v2 = CFGetTypeID((CFTypeRef)this);
      v3 = CABackingStoreGetTypeID::type;
      if (!CABackingStoreGetTypeID::type)
      {
        v3 = _CFRuntimeRegisterClass();
        CABackingStoreGetTypeID::type = v3;
      }
      if (v2 == v3)
      {
        return objc_msgSend(*(id *)(v1 + 16), "setNeedsDisplay");
      }
      else
      {
        this = CGImageGetTypeID();
        if (v2 == this)
          return objc_msgSend(*(id *)(v1 + 16), "setContentsChanged");
      }
    }
  }
  return this;
}

uint64_t CA::Layer::fetch_defaults(CA::Layer *this)
{
  CA::Transaction *v2;
  char *v3;

  v2 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
  if (!v2)
    v2 = (CA::Transaction *)CA::Transaction::create(this);
  v3 = CA::Layer::writable_state(this, v2);
  return CA::Layer::State::fetch_defaults((uint64_t)v3, v2, (void (*)(uint64_t, uint64_t, uint64_t, CFTypeRef *))defaultValueForAtom, (uint64_t)this);
}

unsigned int **X::Ref<CA::Layer>::~Ref(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  malloc_zone_t *malloc_zone;

  v2 = *a1;
  if (*a1)
  {
LABEL_2:
    v3 = *v2;
    if (*v2)
    {
      do
      {
        v4 = __ldaxr(v2);
        if (v4 != v3)
        {
          __clrex();
          goto LABEL_2;
        }
      }
      while (__stlxr(v3 - 1, v2));
      if (v3 == 1)
      {
        CA::Layer::destroy((CA::Layer *)v2);
        CA::Layer::~Layer((CA::AttrList **)v2);
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(malloc_zone, v2);
      }
    }
  }
  return a1;
}

id CA::Layer::layer_at_time(CA::Layer *this, CA::Transaction *a2, double a3, char a4, char a5)
{
  id v5;
  int v10;
  CALayer *v11;
  uint64_t *v12;
  __int16 v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  _DWORD *v17;
  double v18;
  double v19;
  CALayer *v20;
  _DWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  double v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  double v37;
  _QWORD v38[2];
  BOOL (*v39)(uint64_t);
  void *v40;
  id v41;
  uint64_t *v42;
  CA::Layer *v43;
  CA::Transaction *v44;
  char v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  void (*v50)(uint64_t);
  uint64_t v51;
  double v52[3];

  v52[1] = *(double *)MEMORY[0x1E0C80C00];
  v52[0] = a3;
  v5 = (id)*((_QWORD *)this + 2);
  if (!*((_QWORD *)this + 35))
    return v5;
  v10 = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v10 + 1;
  if (!v10)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v46 = 0;
  v47 = &v46;
  v48 = 0x3052000000;
  v49 = __Block_byref_object_copy__10559;
  v50 = __Block_byref_object_dispose__10560;
  v51 = 0;
  v38[0] = MEMORY[0x1E0C809B0];
  v38[1] = 3221225472;
  v39 = ___ZN2CA5Layer13layer_at_timeEPNS_11TransactionEdbb_block_invoke;
  v40 = &unk_1E15A89C8;
  v41 = v5;
  v42 = &v46;
  v45 = a5;
  v43 = this;
  v44 = a2;
  if (objc_msgSend(*((id *)this + 36), "count"))
  {
    if ((((uint64_t (*)(_QWORD *))v39)(v38) & 1) == 0)
      goto LABEL_50;
    CA::Layer::apply_modifiers_to_layer(*((CA::Layer **)this + 36), (CALayer *)v47[5]);
  }
  v12 = (uint64_t *)*((_QWORD *)this + 35);
  if (!v12)
  {
LABEL_46:
    v30 = v47[5];
    if (v30)
    {
      v31 = (unsigned int *)(*(_QWORD *)(v30 + 16) + 4);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 | 0x8000, v31));
      v5 = (id)v47[5];
      v47[5] = (uint64_t)v5;
    }
    goto LABEL_50;
  }
  while (1)
  {
    v13 = *((_WORD *)v12 + 28);
    if ((v13 & 0x24) != 0 || (v13 & 0x82) == 2 && (a5 & 1) != 0)
      goto LABEL_42;
    v14 = (unsigned int *)v12[4];
    if (v14)
    {
      v15 = v14 + 2;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
      if (!v16)
      {
        do
        {
          v14 = 0;
          v29 = __ldaxr(v15);
        }
        while (__stlxr(v29 - 1, v15));
      }
      v13 = *((_WORD *)v12 + 28);
    }
    if ((v13 & 2) == 0)
    {
      objc_msgSend((id)v12[1], "beginTime");
      v17 = (_DWORD *)v12[1];
      if (v18 == 0.0)
      {
        if ((objc_msgSend((id)objc_msgSend(v17, "beginTimeMode"), "isEqualToString:", CFSTR("non-zero")) & 1) != 0)
        {
          CA::Transaction::Shared::time(*((CA::Transaction::Shared **)a2 + 13));
          v37 = v19;
          CA::Layer::convert_time(a2, (CA::Transaction *)&v37, 0, *((CALayer **)this + 2), v20);
          v21 = (_DWORD *)v12[1];
          v21[4] &= ~1u;
          objc_msgSend(v21, "setBeginTime:", v37);
          objc_msgSend((id)v12[1], "setBeginTimeMode:", CFSTR("absolute"));
          v17 = (_DWORD *)v12[1];
          v17[4] |= 5u;
        }
        else
        {
          v17 = (_DWORD *)v12[1];
        }
      }
      if (objc_msgSend((id)objc_msgSend(v17, "beginTimeMode"), "isEqualToString:", CFSTR("absolute")))
      {
        v22 = CAMediaTimingCopyRenderTiming(v12[1]);
        if (v14)
        {
          v23 = v14 + 2;
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
        }
        v14 = (unsigned int *)v22;
      }
    }
    if (!v14)
      goto LABEL_42;
    if ((a4 & 1) != 0
      && !CA::Layer::convert_time(a2, (CA::Transaction *)v52, 0, *((CALayer **)this + 2), v11))
    {
      break;
    }
    v26 = v52[0];
    if ((v52[0] >= *((double *)v14 + 5) || (*((_BYTE *)v14 + 13) & 4) != 0)
      && (v26 <= CA::Render::Timing::end_time((CA::Render::Timing *)v14) || (*((_BYTE *)v14 + 13) & 2) != 0))
    {
      if (!((unsigned int (*)(_QWORD *))v39)(v38))
        break;
      objc_msgSend((id)v12[1], "applyForTime:presentationObject:modelObject:", v47[5], v5, v52[0]);
    }
    v27 = v14 + 2;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (v28 == 1)
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
    a4 = 0;
LABEL_42:
    v12 = (uint64_t *)*v12;
    if (!v12)
      goto LABEL_46;
  }
  v34 = v14 + 2;
  do
  {
    v35 = __ldaxr(v34);
    v36 = v35 - 1;
  }
  while (__stlxr(v36, v34));
  if (!v36)
    (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
LABEL_50:
  _Block_object_dispose(&v46, 8);
  CA::Transaction::unlock(a2);
  return v5;
}

void sub_1846BCDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  CA::Transaction *v12;
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  CA::Transaction::unlock(v12);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__10559(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__10560(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

BOOL ___ZN2CA5Layer13layer_at_timeEPNS_11TransactionEdbb_block_invoke(uint64_t a1)
{
  CA::Layer *v3;
  int v4;
  int v5;
  malloc_zone_t *malloc_zone;
  CA::Layer *v7;
  CA::Layer *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  CA::Transaction *v12;
  CA::Transaction *v13;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
    return 1;
  v3 = *(CA::Layer **)(a1 + 48);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = objc_alloc((Class)objc_opt_class());
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
    return 0;
  v4 = *((_DWORD *)v3 + 1);
  v5 = *(unsigned __int8 *)(a1 + 64);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v7 = (CA::Layer *)malloc_type_zone_malloc(malloc_zone, 0x128uLL, 0x8BB15036uLL);
  if (v7)
  {
    v8 = v7;
    if (v5)
      v9 = 0x40000;
    else
      v9 = 393216;
    v10 = v9 | v4 & 0xFFEBFFFF;
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v12 = *(CA::Transaction **)(a1 + 56);
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 3) = 0;
    *((_QWORD *)v7 + 4) = 0;
    *((_QWORD *)v7 + 2) = v11;
    CA::Layer::State::State((uint64_t)v7 + 40, (uint64_t)v3 + 40, v12);
    *((_QWORD *)v8 + 19) = 0;
    *((_QWORD *)v8 + 20) = 0;
    *((_DWORD *)v8 + 44) = 0;
    *((_QWORD *)v8 + 21) = 0;
    *(_OWORD *)((char *)v8 + 184) = 0u;
    *(_OWORD *)((char *)v8 + 200) = 0u;
    *(_OWORD *)((char *)v8 + 216) = 0u;
    *(_OWORD *)((char *)v8 + 232) = 0u;
    *((_BYTE *)v8 + 248) = 0;
    *((_QWORD *)v8 + 32) = 0;
    *((_QWORD *)v8 + 33) = 0;
    *((_QWORD *)v8 + 35) = 0;
    *((_QWORD *)v8 + 36) = 0;
    *(_DWORD *)v8 = 1;
    *((_DWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 34) = 0;
    *(_QWORD *)(v11 + 16) = v8;
    v13 = *(CA::Transaction **)(a1 + 56);
    v7 = v8;
  }
  else
  {
    v13 = *(CA::Transaction **)(a1 + 56);
  }
  CA::Layer::set_model_layer(v7, v13, v3);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "initWithLayer:", *(_QWORD *)(a1 + 32));
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) != 0;
}

uint64_t __Block_byref_object_copy__261(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  return result;
}

void __Block_byref_object_copy__263(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_dispose__264(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

BOOL backing_blame_callback(char *a1, size_t a2, _BYTE *a3)
{
  id *v5;
  id Weak;
  objc_class *Class;
  const char *Name;

  v5 = (id *)(a3 + 88);
  if (!a3[96])
  {
    Weak = *v5;
    if (!*v5)
      return Weak != 0;
    goto LABEL_3;
  }
  Weak = objc_loadWeak(v5);
  if (Weak)
  {
LABEL_3:
    Class = object_getClass(Weak);
    Name = class_getName(Class);
    snprintf(a1, a2, "%s (CALayer)", Name);
  }
  return Weak != 0;
}

_QWORD *hitTestSublayers(_QWORD *a1, double *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  malloc_zone_t *malloc_zone;
  _QWORD *v11;

  if (a3)
  {
    v5 = a3 + 1;
    v6 = a3[2];
    if (v6 == 1)
    {
      if (!a3[3])
      {
LABEL_7:
        while (1)
        {
          v7 = (void *)*v5;
          if ((*(_DWORD *)(*(_QWORD *)(*v5 + 16) + 4) & 0x10000) != 0)
            break;
          v8 = objc_msgSend(v7, "hitTest:", *a2, a2[1]);
          if (v8)
          {
            v9 = v8;
            malloc_zone = (malloc_zone_t *)get_malloc_zone();
            v11 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
            *v11 = v9;
            v11[1] = a1;
LABEL_11:
            a1 = v11;
          }
          ++v5;
          if (!--v6)
            return a1;
        }
        v11 = (_QWORD *)hitTestSublayers(a1, a2, objc_msgSend(v7, "sublayers"));
        goto LABEL_11;
      }
LABEL_6:
      v5 = (uint64_t *)*v5;
      goto LABEL_7;
    }
    if (v6)
      goto LABEL_6;
  }
  return a1;
}

float64_t computeZ(CALayer *a1, CALayer *a2, CA::Transaction *a3, __int128 *a4, double a5, double a6, double a7)
{
  __int128 *v8;
  CALayer *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  const double *v15;
  double v16;
  double v17;
  uint64_t *i;
  const double *v19;
  BOOL is_affine;
  const double *v21;
  float64_t result;
  double *v23;
  __int128 v29;
  float64x2_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  float64x2_t v38;
  float64x2_t v39;
  __int128 v40;
  float64x2_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  float64x2_t v45;
  uint64_t v46;

  v8 = 0;
  v46 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v9 = a1;
    if (a2 != a1)
    {
      do
      {
        MEMORY[0x1E0C80A78](a1);
        v8 = &v29 - 1;
        *((_QWORD *)&v29 - 2) = v11;
        *((_QWORD *)&v29 - 1) = v12;
        a1 = CA::Layer::superlayer(*(CA::Layer **)(v11 + 16), a3);
        if (a1)
          _ZF = a1 == v9;
        else
          _ZF = 1;
      }
      while (!_ZF);
    }
  }
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v14 = *(_QWORD *)v8;
  CA::Layer::get_frame_transform(*(_QWORD *)(*(_QWORD *)v8 + 16), &v38, 0, 0, 0.0, a6, a7);
  for (i = (uint64_t *)*((_QWORD *)v8 + 1); i; i = (uint64_t *)i[1])
  {
    if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 4) & 0x10000) == 0)
      break;
    v14 = *i;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    CA::Layer::get_frame_transform(*(_QWORD *)(v14 + 16), &v30, 0, 0, 0.0, v16, v17);
    CA::Mat4Impl::mat4_concat(&v38, v30.f64, v38.f64, v19);
  }
  is_affine = CA::Mat4Impl::mat4_is_affine((CA::Mat4Impl *)&v38, v15);
  result = 0.0;
  if (!is_affine)
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)&v30, (CA::Mat4Impl *)&v38, v21);
    v29 = *a4;
    CA::Mat4Impl::mat4_unapply_inverse_to_point2(&v30, (double *)&v29, v23);
    _Q4 = vmlaq_n_f64(vmlaq_n_f64(v45, v39, *(double *)&v29), v41, *((double *)&v29 + 1));
    _D1 = 0x7FF0000000000000;
    result = _Q4.f64[0] / _Q4.f64[1];
    __asm { FMLA            D4, D1, V4.D[1] }
    if (_Q4.f64[0] <= 0.0)
      return -INFINITY;
  }
  return result;
}

void sub_1846BD5CC(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846BD710(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846BD81C(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846BDA2C(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846BDB5C(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846BDC5C(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846BDDDC(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t add_animation(const void *a1, const void *a2, void *a3)
{
  uint64_t result;

  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
    return objc_msgSend(a3, "addAnimation:forKey:", a2, a1);
  return result;
}

uint64_t appendLayerDescription(CALayer *a1, NSMutableString *a2, int a3)
{
  NSArray *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _BYTE v12[128];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  -[NSMutableString appendFormat:](a2, "appendFormat:", CFSTR("%*s%@\n"), (3 * a3), " ", -[CALayer debugDescription](a1, "debugDescription"));
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v6 = -[CALayer sublayers](a1, "sublayers");
  result = -[NSArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v13, v12, 16);
  if (result)
  {
    v8 = result;
    v9 = *(_QWORD *)v14;
    v10 = a3 + 1;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(v6);
        appendLayerDescription(*(CALayer **)(*((_QWORD *)&v13 + 1) + 8 * v11++), a2, v10);
      }
      while (v8 != v11);
      result = -[NSArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v13, v12, 16);
      v8 = result;
    }
    while (result);
  }
  return result;
}

IMP cons_CALayer_kCAValueAssignedPointer(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e10_r_v16__0_8l;
    v3 = ___ZL36cons_CALayer_kCAValueAssignedPointerjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e13_v24__0_8r_v16l;
    v3 = ___ZL36cons_CALayer_kCAValueAssignedPointerjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CALayer_kCAValueWeakPointer(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e10_r_v16__0_8l;
    v3 = ___ZL32cons_CALayer_kCAValueWeakPointerjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e13_v24__0_8r_v16l;
    v3 = ___ZL32cons_CALayer_kCAValueWeakPointerjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CALayer_kCAValueBlock(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e10_r_v16__0_8l;
    v3 = ___ZL26cons_CALayer_kCAValueBlockjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e13_v24__0_8r_v16l;
    v3 = ___ZL26cons_CALayer_kCAValueBlockjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CALayer_kCAValueChar(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_c16__0_8l;
    v3 = ___ZL25cons_CALayer_kCAValueCharjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v20__0_8c16l;
    v3 = ___ZL25cons_CALayer_kCAValueCharjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CALayer_kCAValueUnsignedChar(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_C16__0_8l;
    v3 = ___ZL33cons_CALayer_kCAValueUnsignedCharjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v20__0_8C16l;
    v3 = ___ZL33cons_CALayer_kCAValueUnsignedCharjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CALayer_kCAValueShort(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_s16__0_8l;
    v3 = ___ZL26cons_CALayer_kCAValueShortjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v20__0_8s16l;
    v3 = ___ZL26cons_CALayer_kCAValueShortjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CALayer_kCAValueUnsignedShort(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_S16__0_8l;
    v3 = ___ZL34cons_CALayer_kCAValueUnsignedShortjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v20__0_8S16l;
    v3 = ___ZL34cons_CALayer_kCAValueUnsignedShortjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CALayer_kCAValueInt(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_i16__0_8l;
    v3 = ___ZL24cons_CALayer_kCAValueIntjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v20__0_8i16l;
    v3 = ___ZL24cons_CALayer_kCAValueIntjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CALayer_kCAValueUnsignedInt(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_I16__0_8l;
    v3 = ___ZL32cons_CALayer_kCAValueUnsignedIntjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v20__0_8I16l;
    v3 = ___ZL32cons_CALayer_kCAValueUnsignedIntjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CALayer_kCAValueLong(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_q16__0_8l;
    v3 = ___ZL25cons_CALayer_kCAValueLongjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v24__0_8q16l;
    v3 = ___ZL25cons_CALayer_kCAValueLongjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CALayer_kCAValueUnsignedLong(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_Q16__0_8l;
    v3 = ___ZL33cons_CALayer_kCAValueUnsignedLongjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v24__0_8Q16l;
    v3 = ___ZL33cons_CALayer_kCAValueUnsignedLongjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CALayer_kCAValueLongLong(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_q16__0_8l;
    v3 = ___ZL29cons_CALayer_kCAValueLongLongjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v24__0_8q16l;
    v3 = ___ZL29cons_CALayer_kCAValueLongLongjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CALayer_kCAValueUnsignedLongLong(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_Q16__0_8l;
    v3 = ___ZL37cons_CALayer_kCAValueUnsignedLongLongjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v24__0_8Q16l;
    v3 = ___ZL37cons_CALayer_kCAValueUnsignedLongLongjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CALayer_kCAValuePoint(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e19__CGPoint_dd_16__0_8l;
    v3 = ___ZL26cons_CALayer_kCAValuePointjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e22_v32__0_8_CGPoint_dd_16l;
    v3 = ___ZL26cons_CALayer_kCAValuePointjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CALayer_kCAValueSize(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e18__CGSize_dd_16__0_8l;
    v3 = ___ZL25cons_CALayer_kCAValueSizejb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e21_v32__0_8_CGSize_dd_16l;
    v3 = ___ZL25cons_CALayer_kCAValueSizejb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CALayer_kCAValueRect(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e39__CGRect__CGPoint_dd__CGSize_dd__16__0_8l;
    v3 = ___ZL25cons_CALayer_kCAValueRectjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e42_v48__0_8_CGRect__CGPoint_dd__CGSize_dd__16l;
    v3 = ___ZL25cons_CALayer_kCAValueRectjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CALayer_kCAValueTransform(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e39__CATransform3D_dddddddddddddddd_16__0_8l;
    v3 = ___ZL30cons_CALayer_kCAValueTransformjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e43_v144__0_8_CATransform3D_dddddddddddddddd_16l;
    v3 = ___ZL30cons_CALayer_kCAValueTransformjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CALayer_kCAValueAffineTransform(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e33__CGAffineTransform_dddddd_16__0_8l;
    v3 = ___ZL36cons_CALayer_kCAValueAffineTransformjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e36_v64__0_8_CGAffineTransform_dddddd_16l;
    v3 = ___ZL36cons_CALayer_kCAValueAffineTransformjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CALayer_kCAValuePoint3D(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e22__CAPoint3D_ddd_16__0_8l;
    v3 = ___ZL28cons_CALayer_kCAValuePoint3Djb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e25_v40__0_8_CAPoint3D_ddd_16l;
    v3 = ___ZL28cons_CALayer_kCAValuePoint3Djb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CALayer_kCAValueCornerRadii(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e67__CACornerRadii__CGSize_dd__CGSize_dd__CGSize_dd__CGSize_dd__16__0_8l;
    v3 = ___ZL32cons_CALayer_kCAValueCornerRadiijb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e70_v80__0_8_CACornerRadii__CGSize_dd__CGSize_dd__CGSize_dd__CGSize_dd__16l;
    v3 = ___ZL32cons_CALayer_kCAValueCornerRadiijb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

void ___ZL32cons_CALayer_kCAValueCornerRadiijb_block_invoke_2(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  const void *v3;
  __int128 v4;
  __int128 v5;
  _OWORD v6[4];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = (const void *)*(unsigned int *)(a1 + 32);
  v4 = a3[1];
  v6[0] = *a3;
  v6[1] = v4;
  v5 = a3[3];
  v6[2] = a3[2];
  v6[3] = v5;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)0x19, (double *)v6);
}

void ___ZL32cons_CALayer_kCAValueCornerRadiijb_block_invoke(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;

  v4 = *(_DWORD *)(a1 + 32);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v4, (const CGAffineTransform *)0x19, (id *)a3);
}

void ___ZL28cons_CALayer_kCAValuePoint3Djb_block_invoke_2(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  const void *v5;
  double v6[4];

  v6[3] = *(double *)MEMORY[0x1E0C80C00];
  v5 = (const void *)*(unsigned int *)(a1 + 32);
  v6[0] = a3;
  v6[1] = a4;
  v6[2] = a5;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v5, (const CGAffineTransform *)0x18, v6);
}

double ___ZL28cons_CALayer_kCAValuePoint3Djb_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  id v4[4];

  v4[3] = *(id *)MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 32);
  memset(v4, 0, 24);
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0x18, v4);
  return *(double *)v4;
}

void ___ZL36cons_CALayer_kCAValueAffineTransformjb_block_invoke_2(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  const void *v3;
  __int128 v4;
  _OWORD v5[3];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = (const void *)*(unsigned int *)(a1 + 32);
  v4 = a3[1];
  v5[0] = *a3;
  v5[1] = v4;
  v5[2] = a3[2];
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)0x17, (double *)v5);
}

void ___ZL36cons_CALayer_kCAValueAffineTransformjb_block_invoke(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;

  v4 = *(_DWORD *)(a1 + 32);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v4, (const CGAffineTransform *)0x17, (id *)a3);
}

void ___ZL30cons_CALayer_kCAValueTransformjb_block_invoke_2(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  const void *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[8];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = (const void *)*(unsigned int *)(a1 + 32);
  v4 = a3[5];
  v8[4] = a3[4];
  v8[5] = v4;
  v5 = a3[7];
  v8[6] = a3[6];
  v8[7] = v5;
  v6 = a3[1];
  v8[0] = *a3;
  v8[1] = v6;
  v7 = a3[3];
  v8[2] = a3[2];
  v8[3] = v7;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)0x16, (double *)v8);
}

void ___ZL30cons_CALayer_kCAValueTransformjb_block_invoke(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;

  v4 = *(_DWORD *)(a1 + 32);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v4, (const CGAffineTransform *)0x16, (id *)a3);
}

void ___ZL25cons_CALayer_kCAValueRectjb_block_invoke_2(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  const void *v6;
  double v7[5];

  v7[4] = *(double *)MEMORY[0x1E0C80C00];
  v6 = (const void *)*(unsigned int *)(a1 + 32);
  v7[0] = a3;
  v7[1] = a4;
  v7[2] = a5;
  v7[3] = a6;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v6, (const CGAffineTransform *)0x15, v7);
}

double ___ZL25cons_CALayer_kCAValueRectjb_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _OWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 32);
  memset(v4, 0, sizeof(v4));
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0x15, (id *)v4);
  return *(double *)v4;
}

void ___ZL25cons_CALayer_kCAValueSizejb_block_invoke_2(uint64_t a1, uint64_t a2, double a3, double a4)
{
  const void *v4;
  double v5[3];

  v5[2] = *(double *)MEMORY[0x1E0C80C00];
  v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5[0] = a3;
  v5[1] = a4;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v4, (const CGAffineTransform *)0x14, v5);
}

double ___ZL25cons_CALayer_kCAValueSizejb_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  id v4[3];

  v4[2] = *(id *)MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 32);
  v4[0] = 0;
  v4[1] = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0x14, v4);
  return *(double *)v4;
}

void ___ZL26cons_CALayer_kCAValuePointjb_block_invoke_2(uint64_t a1, uint64_t a2, double a3, double a4)
{
  const void *v4;
  double v5[3];

  v5[2] = *(double *)MEMORY[0x1E0C80C00];
  v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5[0] = a3;
  v5[1] = a4;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v4, (const CGAffineTransform *)0x13, v5);
}

double ___ZL26cons_CALayer_kCAValuePointjb_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  id v4[3];

  v4[2] = *(id *)MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 32);
  v4[0] = 0;
  v4[1] = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0x13, v4);
  return *(double *)v4;
}

void ___ZL37cons_CALayer_kCAValueUnsignedLongLongjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  double v4[2];

  v4[1] = *(double *)MEMORY[0x1E0C80C00];
  v3 = (const void *)*(unsigned int *)(a1 + 32);
  *(_QWORD *)&v4[0] = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)0x10, v4);
}

id ___ZL37cons_CALayer_kCAValueUnsignedLongLongjb_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  id v4[2];

  v4[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 32);
  v4[0] = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0x10, v4);
  return v4[0];
}

void ___ZL29cons_CALayer_kCAValueLongLongjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  double v4[2];

  v4[1] = *(double *)MEMORY[0x1E0C80C00];
  v3 = (const void *)*(unsigned int *)(a1 + 32);
  *(_QWORD *)&v4[0] = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)0xF, v4);
}

id ___ZL29cons_CALayer_kCAValueLongLongjb_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  id v4[2];

  v4[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 32);
  v4[0] = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0xF, v4);
  return v4[0];
}

void ___ZL33cons_CALayer_kCAValueUnsignedLongjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  double v4[2];

  v4[1] = *(double *)MEMORY[0x1E0C80C00];
  v3 = (const void *)*(unsigned int *)(a1 + 32);
  *(_QWORD *)&v4[0] = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)0xE, v4);
}

id ___ZL33cons_CALayer_kCAValueUnsignedLongjb_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  id v4[2];

  v4[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 32);
  v4[0] = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0xE, v4);
  return v4[0];
}

void ___ZL25cons_CALayer_kCAValueLongjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  double v4[2];

  v4[1] = *(double *)MEMORY[0x1E0C80C00];
  v3 = (const void *)*(unsigned int *)(a1 + 32);
  *(_QWORD *)&v4[0] = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)0xD, v4);
}

id ___ZL25cons_CALayer_kCAValueLongjb_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  id v4[2];

  v4[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 32);
  v4[0] = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0xD, v4);
  return v4[0];
}

void ___ZL32cons_CALayer_kCAValueUnsignedIntjb_block_invoke_2(uint64_t a1, uint64_t a2, int a3)
{
  const void *v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = (const void *)*(unsigned int *)(a1 + 32);
  v4 = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)0xC, (double *)&v4);
}

uint64_t ___ZL32cons_CALayer_kCAValueUnsignedIntjb_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 32);
  v4 = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0xC, (id *)&v4);
  return v4;
}

void ___ZL24cons_CALayer_kCAValueIntjb_block_invoke_2(uint64_t a1, uint64_t a2, int a3)
{
  const void *v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = (const void *)*(unsigned int *)(a1 + 32);
  v4 = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)0xB, (double *)&v4);
}

uint64_t ___ZL24cons_CALayer_kCAValueIntjb_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 32);
  v4 = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0xB, (id *)&v4);
  return v4;
}

void ___ZL34cons_CALayer_kCAValueUnsignedShortjb_block_invoke_2(uint64_t a1, uint64_t a2, __int16 a3)
{
  const void *v3;
  __int16 v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = (const void *)*(unsigned int *)(a1 + 32);
  v4 = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)0xA, (double *)&v4);
}

uint64_t ___ZL34cons_CALayer_kCAValueUnsignedShortjb_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned __int16 v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 32);
  v4 = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0xA, (id *)&v4);
  return v4;
}

void ___ZL26cons_CALayer_kCAValueShortjb_block_invoke_2(uint64_t a1, uint64_t a2, __int16 a3)
{
  const void *v3;
  __int16 v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = (const void *)*(unsigned int *)(a1 + 32);
  v4 = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)9, (double *)&v4);
}

uint64_t ___ZL26cons_CALayer_kCAValueShortjb_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  __int16 v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 32);
  v4 = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)9, (id *)&v4);
  return v4;
}

void ___ZL33cons_CALayer_kCAValueUnsignedCharjb_block_invoke_2(uint64_t a1, uint64_t a2, char a3)
{
  const void *v3;
  char v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = (const void *)*(unsigned int *)(a1 + 32);
  v4 = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)8, (double *)&v4);
}

uint64_t ___ZL33cons_CALayer_kCAValueUnsignedCharjb_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned __int8 v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 32);
  v4 = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)8, (id *)&v4);
  return v4;
}

void ___ZL25cons_CALayer_kCAValueCharjb_block_invoke_2(uint64_t a1, uint64_t a2, char a3)
{
  const void *v3;
  char v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = (const void *)*(unsigned int *)(a1 + 32);
  v4 = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)7, (double *)&v4);
}

uint64_t ___ZL25cons_CALayer_kCAValueCharjb_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  char v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 32);
  v4 = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)7, (id *)&v4);
  return v4;
}

void ___ZL25cons_CALayer_kCAValueBooljb_block_invoke_2(uint64_t a1, uint64_t a2, char a3)
{
  const void *v3;
  char v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = (const void *)*(unsigned int *)(a1 + 32);
  v4 = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)6, (double *)&v4);
}

void ___ZL26cons_CALayer_kCAValueBlockjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  double v4[2];

  v4[1] = *(double *)MEMORY[0x1E0C80C00];
  v3 = (const void *)*(unsigned int *)(a1 + 32);
  *(_QWORD *)&v4[0] = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)5, v4);
}

id ___ZL26cons_CALayer_kCAValueBlockjb_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  id v4[2];

  v4[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 32);
  v4[0] = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)5, v4);
  return v4[0];
}

void ___ZL32cons_CALayer_kCAValueWeakPointerjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  double v4[2];

  v4[1] = *(double *)MEMORY[0x1E0C80C00];
  v3 = (const void *)*(unsigned int *)(a1 + 32);
  *(_QWORD *)&v4[0] = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)4, v4);
}

id ___ZL32cons_CALayer_kCAValueWeakPointerjb_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  id v4[2];

  v4[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 32);
  v4[0] = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)4, v4);
  return v4[0];
}

void ___ZL36cons_CALayer_kCAValueAssignedPointerjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  double v4[2];

  v4[1] = *(double *)MEMORY[0x1E0C80C00];
  v3 = (const void *)*(unsigned int *)(a1 + 32);
  *(_QWORD *)&v4[0] = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)1, v4);
}

id ___ZL36cons_CALayer_kCAValueAssignedPointerjb_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  id v4[2];

  v4[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 32);
  v4[0] = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)1, v4);
  return v4[0];
}

double CALayer_getter_kCAValueRect(CA::Transaction *a1, unsigned int a2)
{
  _OWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  memset(v3, 0, sizeof(v3));
  CA::Layer::getter(a1, a2, (const CGAffineTransform *)0x15, (id *)v3);
  return *(double *)v3;
}

void CALayerFrameAffineTransform(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  CA::Layer::get_frame_transform(*(CA::Layer **)(a1 + 16), (CGAffineTransform *)a2, 1);
}

double CALayerFrameTransform@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>, double a3@<D1>, double a4@<D2>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  float64x2_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  CA::Layer::get_frame_transform(*(_QWORD *)(a1 + 16), &v12, 0, 0, 0.0, a3, a4);
  v5 = v13;
  v6 = v14;
  v7 = v15;
  *a2 = v12;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  result = *(double *)&v16;
  v9 = v17;
  v10 = v18;
  v11 = v19;
  a2[4] = v16;
  a2[5] = v9;
  a2[6] = v10;
  a2[7] = v11;
  return result;
}

_QWORD *CA::Layer::collect_all_layers(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  _QWORD *v15;

  v5 = a1[2];
  if (!v5 || !CALayerRetain(v5))
    return (_QWORD *)a2;
  v7 = (_QWORD *)a1[3];
  if (v7)
  {
    v8 = v7 + 1;
    v9 = v7[2];
    if (v9 == 1)
    {
      if (!v7[3])
      {
        do
        {
LABEL_9:
          v10 = *v8++;
          a2 = CA::Layer::collect_all_layers(*(_QWORD *)(v10 + 16), a2, a3);
          --v9;
        }
        while (v9);
        goto LABEL_10;
      }
LABEL_8:
      v8 = (uint64_t *)*v8;
      goto LABEL_9;
    }
    if (v9)
      goto LABEL_8;
  }
LABEL_10:
  v11 = a1[4];
  if (v11)
    a2 = CA::Layer::collect_all_layers(*(_QWORD *)(v11 + 16), a2, a3);
  v12 = a3[2];
  v13 = v12 >= 0x10;
  v14 = v12 - 16;
  if (v13)
  {
    v15 = (_QWORD *)a3[1];
    a3[1] = (uint64_t)(v15 + 2);
    a3[2] = v14;
  }
  else
  {
    v15 = (_QWORD *)x_heap_malloc_small_(a3, 0x10uLL);
  }
  *v15 = a1;
  v15[1] = a2;
  return v15;
}

void CA::Layer::perform_selector(CA::Layer *this, objc_selector *a2, objc_object *a3)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  CA::Transaction *v7;
  CA::Transaction *v8;
  CA::Transaction *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14[2];
  __int128 v15;
  _QWORD v16[509];

  MEMORY[0x1E0C80A78](this);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v16[508] = *MEMORY[0x1E0C80C00];
  v14[0] = 0;
  v14[1] = (void **)v16;
  v15 = xmmword_18474E5E0;
  v9 = CA::Transaction::ensure_compat(v7);
  v10 = *((_DWORD *)v9 + 25);
  *((_DWORD *)v9 + 25) = v10 + 1;
  if (!v10)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v11 = CA::Layer::collect_all_layers(v8, 0, (uint64_t *)v14);
  CA::Transaction::unlock(v9);
  for (; v11; v11 = (_QWORD *)v11[1])
  {
    v12 = *v11;
    objc_msgSend(*(id *)(*v11 + 16), v6, v4);
    v13 = *(_QWORD *)(v12 + 16);
    if (v13)
      CALayerRelease(v13);
  }
  x_heap_free(v14);
}

uint64_t map_fun(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[8];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = a2[1];
  v3 = a2[2];
  v4 = a2[3];
  v9[0] = *a2;
  v9[1] = v2;
  v9[2] = v3;
  v9[3] = v4;
  v5 = a2[5];
  v6 = a2[6];
  v7 = a2[7];
  v9[4] = a2[4];
  v9[5] = v5;
  v9[6] = v6;
  v9[7] = v7;
  return (*(uint64_t (**)(_QWORD, _OWORD *))(a1 + 8))(*(_QWORD *)a1, v9);
}

void run_animation_callbacks_compat(double a1, _QWORD *a2)
{
  MEMORY[0x186DBE2E4](a1);
  run_animation_callbacks(a2);
}

void sub_1846C054C()
{
  void *v0;

  objc_autoreleasePoolPop(v0);
}

void ___Z10init_iomfbv_block_invoke()
{
  void *v0;
  NSObject *v1;
  uint8_t v2[8];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = dlopen("/System/Library/PrivateFrameworks/IOMobileFramebuffer.framework/IOMobileFramebuffer", 2);
  init_iomfb(void)::iomfb_handle = (uint64_t)v0;
  if (v0)
  {
    iomfb_swap_set_aml_strength_f = dlsym(v0, "IOMobileFramebufferSetAmmoliteStrength");
    iomfb_swap_set_indicator_brightness_f = (uint64_t (*)(_QWORD, _QWORD, double))dlsym((void *)init_iomfb(void)::iomfb_handle, "IOMobileFramebufferSwapSetIndicatorBrightness");
    iomfb_swap_set_tonemap_config_f = (uint64_t (*)(_QWORD, _QWORD, _QWORD))dlsym((void *)init_iomfb(void)::iomfb_handle, "IOMobileFramebufferSwapSetToneMapConfig");
    iomfb_announce_next_swap_timestamp_f = dlsym((void *)init_iomfb(void)::iomfb_handle, "IOMobileFramebufferAnnounceNextSwapTimestamp");
  }
  else if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v1 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl(&dword_184457000, v1, OS_LOG_TYPE_ERROR, "Unable to load IOMobileFramebuffer", v2, 2u);
    }
  }
}

uint64_t iomfb_swap_set_indicator_brightness(uint64_t a1, uint64_t a2, float a3)
{
  if (init_iomfb(void)::once != -1)
    dispatch_once(&init_iomfb(void)::once, &__block_literal_global_10917);
  if (iomfb_swap_set_indicator_brightness_f)
    return iomfb_swap_set_indicator_brightness_f(a1, a2, a3);
  else
    return 3758097084;
}

void iomfb_swap_set_tonemap_config(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (init_iomfb(void)::once != -1)
    dispatch_once(&init_iomfb(void)::once, &__block_literal_global_10917);
  if (iomfb_swap_set_tonemap_config_f)
    iomfb_swap_set_tonemap_config_f(a1, a2, a3);
}

uint64_t CA::IOMobileFramebuffer::swap_set_icc_matrix(uint64_t a1, unsigned int a2, int a3, int a4, float *a5)
{
  NSObject *v10;
  const char *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (BYTE8(xmmword_1ECDC6AB0))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v10 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        if (a2 > 7)
          v11 = "UNKNOWN";
        else
          v11 = off_1E15A8BA0[a2];
        v12 = a5[3];
        v13 = a5[4];
        v14 = a5[5];
        v15 = a5[6];
        v16 = a5[7];
        v17 = a5[8];
        v18 = a5[9];
        v19 = a5[10];
        v20 = a5[11];
        *(_DWORD *)buf = 67111938;
        v22 = a3;
        v23 = 2080;
        v24 = v11;
        v25 = 1024;
        v26 = a4;
        v27 = 2048;
        v28 = v12;
        v29 = 2048;
        v30 = v13;
        v31 = 2048;
        v32 = v14;
        v33 = 2048;
        v34 = v15;
        v35 = 2048;
        v36 = v16;
        v37 = 2048;
        v38 = v17;
        v39 = 2048;
        v40 = v18;
        v41 = 2048;
        v42 = v19;
        v43 = 2048;
        v44 = v20;
        _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_DEFAULT, "Display %u swap_set_icc_matrix %s layer: %u\n    {{%g, %g, %g},\n     {%g, %g, %g},\n     {%g, %g, %g}}\n", buf, 0x72u);
      }
    }
  }
  return IOMobileFramebufferSwapSetICCMatrix();
}

uint64_t CA::IOMobileFramebuffer::swap_set_icc_curve(int a1, unsigned int a2, int a3, int a4, int a5, unsigned int *a6)
{
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  char *v27;
  char __str[16];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (BYTE8(xmmword_1ECDC6AB0))
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    *(_OWORD *)__str = 0u;
    v29 = 0u;
    CA::iomfb_icc_curve_params_to_string((uint64_t)a6, __str, 0.0);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v12 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        if (a2 > 0x11)
          v13 = "UNKNOWN";
        else
          v13 = off_1E15A8BE0[a2];
        v14 = *a6;
        if (v14 > 0x11)
          v15 = "UNKNOWN";
        else
          v15 = off_1E15A8C70[v14];
        *(_DWORD *)buf = 67110402;
        v17 = a3;
        v18 = 2080;
        v19 = v13;
        v20 = 1024;
        v21 = a4;
        v22 = 1024;
        v23 = a5;
        v24 = 2080;
        v25 = v15;
        v26 = 2080;
        v27 = __str;
        _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_DEFAULT, "Display %u swap_set_icc_curve %s layer: %u mask: %x type: %s %s\n", buf, 0x32u);
      }
    }
  }
  return IOMobileFramebufferSwapSetICCCurve();
}

double CA::iomfb_icc_curve_params_to_string(uint64_t a1, char *__str, double result)
{
  double v3;
  double v4;
  double v5;
  double v6;
  const char *v7;
  const char *v8;
  double v9;
  double v10;
  double v11;
  double v12;

  switch(*(_DWORD *)a1)
  {
    case 0:
      strcpy(__str, "Y = X");
      return result;
    case 1:
      snprintf(__str, 0x80uLL, "Y = X^%f");
      return result;
    case 2:
      snprintf(__str, 0x80uLL, "Y = (%g*X+%g)^%g [X >= %g],  Y = 0 [X < %g]");
      return result;
    case 3:
      snprintf(__str, 0x80uLL, "Y = (%g*X+%g)^%g + %f [X >= %g],  Y = %g [X < %g]");
      return result;
    case 4:
      v3 = *(float *)(a1 + 12);
      v4 = *(float *)(a1 + 16);
      v5 = *(float *)(a1 + 8);
      v6 = *(float *)(a1 + 24);
      v11 = *(float *)(a1 + 28);
      v12 = *(float *)(a1 + 32);
      v9 = *(float *)(a1 + 20);
      v10 = v6;
      v7 = "Y = (%g*X+%g)^%g [X >= %g],  Y = %g*X [X < %g], Unused Params - e: %g, f: %g";
      goto LABEL_9;
    case 5:
      v3 = *(float *)(a1 + 12);
      v4 = *(float *)(a1 + 16);
      v5 = *(float *)(a1 + 8);
      v6 = *(float *)(a1 + 28);
      v11 = *(float *)(a1 + 32);
      v12 = *(float *)(a1 + 24);
      v9 = v12;
      v10 = *(float *)(a1 + 20);
      v7 = "Y = (%g*X+%g)^%g + %g [X >= %g], Y = %g*X + %g [X < %g]";
LABEL_9:
      snprintf(__str, 0x80uLL, v7, *(_QWORD *)&v3, *(_QWORD *)&v4, *(_QWORD *)&v5, *(_QWORD *)&v6, *(_QWORD *)&v9, *(_QWORD *)&v10, *(_QWORD *)&v11, *(_QWORD *)&v12);
      return result;
    case 6:
      *((_DWORD *)__str + 2) = 4609093;
      v8 = "Y = PQ OETF";
      goto LABEL_12;
    case 7:
      *((_DWORD *)__str + 2) = 4609103;
      v8 = "Y = PQ EOTF";
LABEL_12:
      *(_QWORD *)__str = *(_QWORD *)v8;
      break;
    case 8:
      snprintf(__str, 0x80uLL, "Table: entries: %u, xMax: %f");
      break;
    case 9:
      if (*(_DWORD *)(a1 + 8) >= 2u && *(_QWORD *)(a1 + 16) && *(_QWORD *)(a1 + 32))
      {
        snprintf(__str, 0x80uLL, "Table: entries: %u, xEntries [%f ... %f], xMax: %f, yEntries [%f ... %f] yMax: %f");
      }
      else
      {
        strcpy(__str, "Unexpected table count or missing samples");
        result = *(double *)"missing samples";
      }
      break;
    case 0xA:
      strcpy(__str, "Y = HLG Inverse OETF (Fixed)");
      result = *(double *)"se OETF (Fixed)";
      break;
    case 0xB:
      result = *(double *)"Y = PQ EOTF (Fixed)";
      strcpy(__str, "Y = PQ EOTF (Fixed)");
      break;
    case 0xC:
      snprintf(__str, 0x80uLL, "%d segments");
      break;
    case 0xD:
      snprintf(__str, 0x80uLL, "Offset: %f, Slope: %f, MaxNits: %d");
      break;
    case 0xE:
      snprintf(__str, 0x80uLL, "c1: %f, c2: %f, c3: %f, m: %f, n: %f");
      break;
    case 0xF:
      snprintf(__str, 0x80uLL, "a: %f, b: %f, c0: %f, c1: %f, p: %f");
      break;
    case 0x10:
      snprintf(__str, 0x80uLL, "smaxnits: %d");
      break;
    case 0x11:
      snprintf(__str, 0x80uLL, "alpha: %f, alphaPrime: %f, rangeMax: %f, gain %f");
      break;
    default:
      snprintf(__str, 0x80uLL, "Curve Type %d unrecognized");
      break;
  }
  return result;
}

uint64_t CA::Render::Encoder::retime(CA::Render::Encoder *this, double a2)
{
  return 0;
}

uint64_t CA::Render::Encoder::retain_object(uint64_t this, const CA::Render::Object *a2)
{
  const CA::Render::Object *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;

  if (a2)
  {
    v2 = a2;
    v3 = this;
    this = x_heap_malloc_small_(*(uint64_t **)(this + 8), 0x10uLL);
    v4 = (unsigned int *)((char *)v2 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    if (!v5)
    {
      v2 = 0;
      do
        v7 = __ldaxr(v4);
      while (__stlxr(v7 - 1, v4));
    }
    v6 = *(_QWORD *)(v3 + 112);
    *(_QWORD *)this = v2;
    *(_QWORD *)(this + 8) = v6;
    *(_QWORD *)(v3 + 112) = this;
  }
  return this;
}

uint64_t CA::Render::encode_dictionary_item(CA::Render *this, const void *a2, CA::Render::Encoder *a3, void *a4)
{
  CA::Render::Encoder::encode_cfobject(a3, this);
  return CA::Render::Encoder::encode_cfobject(a3, a2);
}

void CA::Render::Decoder::set_fatal_error(CA::Render::Decoder *this, const char *a2, ...)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  pid_t v8;
  const char *v9;
  unsigned int v10;
  int v11;
  CA::Render::Context *v12;
  NSObject *v13;
  char *v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  unsigned int v18;
  __int16 v19;
  char *v20;
  uint64_t v21;
  va_list va;

  va_start(va, a2);
  v21 = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)this + 4);
  if ((v2 & 0x10000) != 0)
    return;
  *((_DWORD *)this + 4) = v2 & 0xFF00FFFF | 0x10000;
  v14 = 0;
  if (a2)
    vasprintf(&v14, a2, va);
  v4 = *((_QWORD *)this + 9);
  if (v4 && (*(_WORD *)(v4 + 552) |= 0x800u, (v5 = *((_QWORD *)this + 9)) != 0))
  {
    v6 = (unsigned int *)(v5 + 228);
    v7 = atomic_load((unsigned int *)(v5 + 228));
    if (!v7)
    {
      if (*(_DWORD *)(v5 + 252))
        v8 = 0;
      else
        v8 = getpid();
      while (1)
      {
        v10 = __ldaxr(v6);
        if (v10)
          break;
        if (!__stlxr(v8, v6))
        {
          v11 = 1;
          goto LABEL_16;
        }
      }
      v11 = 0;
      __clrex();
LABEL_16:
      if (v11)
        v7 = v8;
      else
        v7 = v10;
    }
    v12 = (CA::Render::Context *)*((_QWORD *)this + 9);
    if (v12)
    {
      v9 = (const char *)(CA::Render::Context::process_path(v12) + 7);
      goto LABEL_21;
    }
  }
  else
  {
    v7 = 0;
  }
  v9 = "";
LABEL_21:
  if (CADeviceHasInternalBuild::once != -1)
    dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
  if (CADeviceHasInternalBuild::internal)
  {
    x_log_crash("%s (%u) : %s", v9, v7, v14);
    abort();
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v13 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v16 = v9;
      v17 = 1024;
      v18 = v7;
      v19 = 2080;
      v20 = v14;
      _os_log_impl(&dword_184457000, v13, OS_LOG_TYPE_ERROR, "%s (%u) : %s", buf, 0x1Cu);
    }
  }
  if (v14)
    free(v14);
}

CA::Render::CloningTerminatorLayer *CA::Render::CloningTerminatorLayer::CloningTerminatorLayer(CA::Render::CloningTerminatorLayer *this, CA::Render::Decoder *a2)
{
  *(_QWORD *)this = off_1E1598C30;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = (CA::Render::Decoder::decode_int32(a2) << 8) | 8;
  ++dword_1ECDC7C48;
  *(_QWORD *)this = off_1E1598450;
  return this;
}

CFTypeID ___ZN2CA6Render7Decoder17decode_colorspaceEv_block_invoke()
{
  CFTypeID result;

  CA::Render::Decoder::decode_colorspace(void)::types[0] = CFDataGetTypeID();
  qword_1EDD11D30 = CFDictionaryGetTypeID();
  result = CFStringGetTypeID();
  qword_1EDD11D38 = result;
  return result;
}

CA::Render::Encoder *CA::Render::encode_request_server_glitch(CA::Render::Encoder *this, CA::Render::Encoder *a2, double a3)
{
  CA::Render::Encoder *v4;
  _BYTE *v5;
  double *v6;

  v4 = this;
  v5 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)(v5 + 1) > *((_QWORD *)this + 5))
  {
    this = (CA::Render::Encoder *)CA::Render::Encoder::grow(this, 1);
    v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  }
  *((_QWORD *)v4 + 4) = v5 + 1;
  *v5 = 36;
  v6 = (double *)*((_QWORD *)v4 + 4);
  if ((unint64_t)(v6 + 1) > *((_QWORD *)v4 + 5))
  {
    this = (CA::Render::Encoder *)CA::Render::Encoder::grow(v4, 8);
    v6 = (double *)*((_QWORD *)v4 + 4);
  }
  *v6 = a3;
  *((_QWORD *)v4 + 4) += 8;
  return this;
}

void CA::Render::CloningTerminatorLayer::~CloningTerminatorLayer(CA::Render::CloningTerminatorLayer *this, const CA::Render::Object *a2)
{
  --dword_1ECDC7C48;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

{
  malloc_zone_t *malloc_zone;

  --dword_1ECDC7C48;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::Render::CloningTerminatorLayer::show(CA::Render::CloningTerminatorLayer *this, unsigned int a2, char a3)
{
  _BOOL4 v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  __int16 v8;
  __int16 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = x_log_hook_p();
  if ((a3 & 1) != 0)
  {
    if (v4)
      goto LABEL_3;
    v5 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 0;
      v6 = "cloning-terminator-layer";
      v7 = (uint8_t *)&v9;
      goto LABEL_6;
    }
  }
  else
  {
    if (v4)
    {
LABEL_3:
      x_log_();
      return;
    }
    v5 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 0;
      v6 = "(cloning-terminator-layer)";
      v7 = (uint8_t *)&v8;
LABEL_6:
      _os_log_impl(&dword_184457000, v5, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
    }
  }
}

uint64_t CA::Render::CloningTerminatorLayer::visit_subclass(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, a1);
}

uint64_t get_color_transform()
{
  CGContextDelegateGetInfo();
  return CGContextDelegateGetColorTransform();
}

uint64_t draw_lines()
{
  uint64_t Info;
  CGColor *Color;
  unsigned int CompositeOperation;
  CGColor *StrokeColor;
  unsigned int v4;

  Info = CGContextDelegateGetInfo();
  CGGStateGetStyle();
  Color = (CGColor *)CGStyleGetColor();
  CompositeOperation = CGGStateGetCompositeOperation();
  CACGContextEvaluator::update_with_color(Info, Color, CompositeOperation);
  StrokeColor = (CGColor *)CGGStateGetStrokeColor();
  v4 = CGGStateGetCompositeOperation();
  CACGContextEvaluator::update_with_color(Info, StrokeColor, v4);
  *(_BYTE *)(Info + 78) |= CGGStateGetStyle() != 0;
  CGContextDelegateGetInfo();
  return CGContextDelegateDrawLines();
}

uint64_t draw_shading()
{
  _BYTE *Info;
  CGColor *Color;
  unsigned int CompositeOperation;
  CGColorSpace *ColorSpace;

  Info = (_BYTE *)CGContextDelegateGetInfo();
  CGGStateGetStyle();
  Color = (CGColor *)CGStyleGetColor();
  CompositeOperation = CGGStateGetCompositeOperation();
  CACGContextEvaluator::update_with_color((uint64_t)Info, Color, CompositeOperation);
  Info[72] = 1;
  Info[77] = 1;
  ColorSpace = (CGColorSpace *)CGShadingGetColorSpace();
  CACGContextEvaluator::update_with_color_space((uint64_t)Info, ColorSpace, 1);
  Info[78] |= CGGStateGetStyle() != 0;
  CGContextDelegateGetInfo();
  return CGContextDelegateDrawShading();
}

uint64_t draw_display_list()
{
  uint64_t Info;

  Info = CGContextDelegateGetInfo();
  *(_BYTE *)(Info + 72) = 1;
  *(_WORD *)(Info + 79) = 257;
  *(_BYTE *)(Info + 81) = 1;
  *(_DWORD *)(Info + 74) = 16843009;
  CGContextDelegateGetInfo();
  return CGContextDelegateDrawDisplayList();
}

uint64_t draw_images(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CGImage **a5, uint64_t a6, uint64_t a7)
{
  CACGContextEvaluator *Info;
  CGColor *Color;
  unsigned int CompositeOperation;
  CGImage **v12;
  uint64_t v13;
  CGImage *v14;

  Info = (CACGContextEvaluator *)CGContextDelegateGetInfo();
  CGGStateGetStyle();
  Color = (CGColor *)CGStyleGetColor();
  CompositeOperation = CGGStateGetCompositeOperation();
  CACGContextEvaluator::update_with_color((uint64_t)Info, Color, CompositeOperation);
  if (a7)
  {
    v12 = a5;
    v13 = a7;
    do
    {
      v14 = *v12++;
      CACGContextEvaluator::update_with_image(Info, v14);
      --v13;
    }
    while (v13);
  }
  *((_BYTE *)Info + 78) |= CGGStateGetStyle() != 0;
  CGContextDelegateGetInfo();
  return CGContextDelegateDrawImages();
}

uint64_t operation(int a1, int a2, int a3, CFTypeRef cf1)
{
  uint64_t Info;

  if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0C9DA38]))
  {
    Info = CGContextDelegateGetInfo();
    CGColorRelease(*(CGColorRef *)(Info + 64));
    *(_QWORD *)(Info + 64) = 0;
    *(_WORD *)(Info + 72) = 256;
    *(_WORD *)(Info + 79) = 0;
    *(_BYTE *)(Info + 81) = 0;
    *(_DWORD *)(Info + 74) = 0;
  }
  CGContextDelegateGetInfo();
  return CGContextDelegateOperation();
}

uint64_t get_layer()
{
  CGContextDelegateGetInfo();
  return CGContextDelegateGetLayer();
}

uint64_t draw_layer()
{
  uint64_t Info;

  Info = CGContextDelegateGetInfo();
  *(_BYTE *)(Info + 72) = 1;
  *(_WORD *)(Info + 79) = 257;
  *(_BYTE *)(Info + 81) = 1;
  *(_DWORD *)(Info + 74) = 16843009;
  *(_BYTE *)(Info + 78) |= CGGStateGetStyle() != 0;
  CGContextDelegateGetInfo();
  return CGContextDelegateDrawLayer();
}

uint64_t draw_radial_gradient(uint64_t a1, uint64_t a2, uint64_t a3, CGGradient *a4)
{
  CACGContextEvaluator *Info;
  CGColor *Color;
  unsigned int CompositeOperation;

  Info = (CACGContextEvaluator *)CGContextDelegateGetInfo();
  CGGStateGetStyle();
  Color = (CGColor *)CGStyleGetColor();
  CompositeOperation = CGGStateGetCompositeOperation();
  CACGContextEvaluator::update_with_color((uint64_t)Info, Color, CompositeOperation);
  CACGContextEvaluator::update_with_gradient(Info, a4);
  *((_BYTE *)Info + 78) |= CGGStateGetStyle() != 0;
  CGContextDelegateGetInfo();
  return CGContextDelegateDrawRadialGradient();
}

uint64_t draw_image_from_rect(uint64_t a1, uint64_t a2, uint64_t a3, CGImage *a4)
{
  CACGContextEvaluator *Info;
  CGColor *Color;
  unsigned int CompositeOperation;

  Info = (CACGContextEvaluator *)CGContextDelegateGetInfo();
  CGGStateGetStyle();
  Color = (CGColor *)CGStyleGetColor();
  CompositeOperation = CGGStateGetCompositeOperation();
  CACGContextEvaluator::update_with_color((uint64_t)Info, Color, CompositeOperation);
  CACGContextEvaluator::update_with_image(Info, a4);
  *((_BYTE *)Info + 78) |= CGGStateGetStyle() != 0;
  CGContextDelegateGetInfo();
  return CGContextDelegateDrawImageFromRect();
}

const char *get_name()
{
  return "CACGContextEvaluator";
}

CGImageRef create_image()
{
  CACGContextEvaluator *Info;
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  unsigned int v6;
  CGColorSpace *v7;
  _BYTE *v8;
  CGContext *v9;
  CGImageRef Image;

  Info = (CACGContextEvaluator *)CGContextDelegateGetInfo();
  v1 = CACGContextEvaluator::suggested_format(Info, 0, 0, 0);
  v2 = v1;
  v3 = 0;
  v4 = *(_QWORD *)Info;
  if (v1 <= 0x25)
    v3 = dword_184750480[v1];
  v5 = (v4 * v3 + 31) & 0xFFFFFFFFFFFFFFE0;
  v6 = *((_DWORD *)Info + 2);
  v7 = (CGColorSpace *)CA::Render::format_default_colorspace((CA::Render *)v1);
  v8 = CAGetCachedCGBitmapContext_(0, v4, v6, v2, v5, v7);
  if (v8)
    v9 = (CGContext *)*((_QWORD *)v8 + 2);
  else
    v9 = 0;
  CGDisplayListDrawInContext();
  Image = CGBitmapContextCreateImage(v9);
  CAReleaseCachedCGContext(v9);
  return Image;
}

uint64_t draw_conic_gradient(uint64_t a1, uint64_t a2, uint64_t a3, CGGradient *a4)
{
  CACGContextEvaluator *Info;
  CGColor *Color;
  unsigned int CompositeOperation;

  Info = (CACGContextEvaluator *)CGContextDelegateGetInfo();
  CGGStateGetStyle();
  Color = (CGColor *)CGStyleGetColor();
  CompositeOperation = CGGStateGetCompositeOperation();
  CACGContextEvaluator::update_with_color((uint64_t)Info, Color, CompositeOperation);
  CACGContextEvaluator::update_with_gradient(Info, a4);
  *((_BYTE *)Info + 78) |= CGGStateGetStyle() != 0;
  CGContextDelegateGetInfo();
  return CGContextDelegateDrawConicGradient();
}

uint64_t CACGContextEvaluator::suggested_format(CACGContextEvaluator *this, int a2, CGColor **a3, int a4)
{
  uint64_t v4;
  BOOL v5;
  unsigned int v6;

  if (!*((_BYTE *)this + 72))
    return 0xFFFFFFFFLL;
  if (a3 && !*((_BYTE *)this + 77) && *((_QWORD *)this + 8) && (a2 & 1) == 0)
  {
    *a3 = CGColorCreateCopyWithAlpha(*((CGColorRef *)this + 8), 1.0);
    return 9;
  }
  if (*((_BYTE *)this + 76))
  {
    v5 = *((_BYTE *)this + 79) == 0;
    LODWORD(v4) = 13;
    v6 = 21;
    goto LABEL_15;
  }
  if (a4 && *((_BYTE *)this + 81) || *((_BYTE *)this + 80))
  {
    v5 = *((_BYTE *)this + 75) == 0;
    LODWORD(v4) = 13;
LABEL_14:
    v6 = 18;
LABEL_15:
    if (v5)
      return v6;
    else
      return v4;
  }
  if (*((_DWORD *)this + 21) >= 0x10u)
  {
    v5 = *((_BYTE *)this + 75) == 0;
    LODWORD(v4) = 21;
    goto LABEL_14;
  }
  if (*((_BYTE *)this + 79))
  {
    if (a2)
      return 33;
    else
      return 35;
  }
  else if (*((_BYTE *)this + 75))
  {
    if (a2)
      return 3;
    else
      return 1;
  }
  else
  {
    if (*((_BYTE *)this + 74))
      v4 = 10;
    else
      v4 = 0xFFFFFFFFLL;
    if (*((_BYTE *)this + 74) && (a2 & 1) == 0)
    {
      if (*((_BYTE *)this + 78))
        return 1;
      else
        return 18;
    }
  }
  return v4;
}

void CA::CG::FillRoundedRect::~FillRoundedRect(CA::CG::FillRoundedRect *this)
{
  malloc_zone_t *malloc_zone;

  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::CG::FillRoundedRect::compute_dod_corners(uint64_t a1, float64x2_t *a2)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  uint64_t v6;
  const double *v7;
  const double *v8;
  const double *v9;
  const double *v10;
  const double *v11;
  const double *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  double *f64;
  float64x2x2_t v21;
  float64x2x2_t v22;

  v2 = *(float64x2_t *)(a1 + 128);
  v3 = vaddq_f64(*(float64x2_t *)(a1 + 112), vminnmq_f64(v2, (float64x2_t)vdupq_n_s64(0x8000000000000000)));
  v4 = vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v2), (int8x16_t)vnegq_f64(v2), (int8x16_t)v2), v3);
  v5.f64[0] = v4.f64[0];
  v5.f64[1] = v3.f64[1];
  *a2 = v3;
  a2[1] = v5;
  v3.f64[1] = v4.f64[1];
  a2[2] = v4;
  a2[3] = v3;
  if ((*(_BYTE *)(a1 + 100) & 4) == 0)
  {
    v6 = 0;
    v7 = (const double *)(a1 + 48);
    v8 = (const double *)(a1 + 8);
    v9 = (const double *)(a1 + 32);
    v10 = (const double *)(a1 + 16);
    v11 = (const double *)(a1 + 40);
    v12 = (const double *)(a1 + 24);
    v13 = vld1q_dup_f64(v8);
    v14 = vld1q_dup_f64(v12);
    v15 = vld1q_dup_f64(v11);
    v16 = vld1q_dup_f64(v10);
    v17 = vld1q_dup_f64(v9);
    v18 = vld1q_dup_f64(v7);
    do
    {
      f64 = a2[v6].f64;
      v21 = vld2q_f64(f64);
      v22.val[0] = vmlaq_f64(vmlaq_f64(v15, v21.val[0], v13), v21.val[1], v14);
      v22.val[1] = vmlaq_f64(vmlaq_f64(v18, v21.val[0], v16), v21.val[1], v17);
      vst2q_f64(f64, v22);
      v6 += 2;
    }
    while (v6 != 4);
  }
  return 1;
}

char *CA::CG::FillRoundedRect::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  malloc_zone_t *malloc_zone;
  char *v11;
  CGColor *Color;
  unsigned int *v13;
  unsigned int v14;
  double *BaseCTM;
  double v16;
  double v17;
  double v18;
  double v19;
  malloc_zone_t *v20;
  char *v21;
  unsigned int *v22;
  float v23;
  double v24;
  __int128 v25;
  __int128 v26;
  float v27;
  malloc_zone_t *v28;
  CGColor *v29;
  __int128 v30;
  __int128 v31;
  malloc_zone_t *v32;
  uint64_t *v33;
  unsigned int *v34;
  unsigned int v35;
  int ShouldAntialias;
  int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  double v43[2];

  v43[1] = *(double *)MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 80))
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v11 = (char *)malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
    if (v11)
    {
      Color = (CGColor *)CGStyleGetColor();
      CA::CG::DrawOp::DrawOp((uint64_t)v11, a2, a1, a4, a5, Color, 2048);
      *(_QWORD *)v11 = off_1E15925A8;
      *((_QWORD *)v11 + 14) = a1;
      v13 = (unsigned int *)(a3 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      *((_QWORD *)v11 + 15) = a3;
    }
  }
  else
  {
    BaseCTM = (double *)CGRenderingStateGetBaseCTM();
    v16 = *BaseCTM;
    v17 = BaseCTM[1];
    v18 = BaseCTM[2];
    v19 = BaseCTM[3];
    v20 = (malloc_zone_t *)get_malloc_zone();
    v21 = (char *)malloc_type_zone_malloc(v20, 0x60uLL, 0x8BB15036uLL);
    v22 = (unsigned int *)v21;
    if (v21)
    {
      v23 = v18 * v17 + v19 * v16;
      if (v23 < 0.0)
        v23 = -v23;
      v24 = *(double *)(a3 + 80);
      *((_QWORD *)v21 + 1) = 0;
      *((_QWORD *)v21 + 2) = 0;
      *(_QWORD *)v21 = off_1E1593750;
      v26 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
      v25 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
      *(_OWORD *)(v21 + 24) = *MEMORY[0x1E0C9BAA8];
      *(_OWORD *)(v21 + 40) = v26;
      *(_OWORD *)(v21 + 56) = v25;
      *((_DWORD *)v21 + 18) = 0;
      *((_DWORD *)v21 + 2) = 1;
      *(_QWORD *)v21 = off_1E15915C8;
      v27 = v24 * sqrtf(v23);
      *((float *)v21 + 19) = v27;
      *((_QWORD *)v21 + 10) = 0;
      *((_WORD *)v21 + 44) = 0;
    }
    v28 = (malloc_zone_t *)get_malloc_zone();
    v11 = (char *)malloc_type_zone_malloc(v28, 0xA0uLL, 0x8BB15036uLL);
    if (v11)
    {
      v29 = (CGColor *)CGStyleGetColor();
      *(_QWORD *)v11 = off_1E1593790;
      v30 = *(_OWORD *)(a1 + 8);
      v31 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)(v11 + 40) = *(_OWORD *)(a1 + 40);
      *(_OWORD *)(v11 + 24) = v31;
      *(_OWORD *)(v11 + 8) = v30;
      *((_DWORD *)v11 + 14) = *(_DWORD *)(a1 + 56);
      if (*(_QWORD *)(a1 + 64))
      {
        v32 = (malloc_zone_t *)get_malloc_zone();
        v33 = (uint64_t *)malloc_type_zone_malloc(v32, 0x18uLL, 0x8BB15036uLL);
        if (v33)
          v33 = CA::CG::BasicState::SoftMask::SoftMask(v33);
      }
      else
      {
        v33 = 0;
      }
      *((_QWORD *)v11 + 8) = v33;
      v34 = *(unsigned int **)(a1 + 72);
      if (v34)
      {
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 + 1, v34));
      }
      *((_QWORD *)v11 + 9) = v34;
      v43[0] = 1.10008428e-19;
      CA::CG::DeviceColor::DeviceColor((double *)v11 + 10, v29, a4, a5, a2, v43);
      ShouldAntialias = CGGStateGetShouldAntialias();
      if (ShouldAntialias)
        ShouldAntialias = CGRenderingStateGetAllowsAntialiasing();
      if (v29)
        v37 = 2242;
      else
        v37 = 2240;
      *((_DWORD *)v11 + 25) = v37 | ShouldAntialias | *(_DWORD *)(a1 + 100) & 0x1100;
      *((_QWORD *)v11 + 13) = 0;
      *(_QWORD *)v11 = off_1E1591088;
      *((_QWORD *)v11 + 18) = a1;
      v38 = v22 + 2;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 + 1, v38));
      *((_QWORD *)v11 + 19) = v22;
      *(_QWORD *)v11 = off_1E15930A8;
    }
    *((_QWORD *)v11 + 11) = *(_QWORD *)(a1 + 88);
    v40 = v22 + 2;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (v22 && v41 == 1)
      (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
  }
  return v11;
}

void CA::CG::StrokeRoundedRect::~StrokeRoundedRect(CA::CG::StrokeRoundedRect *this)
{
  *(_QWORD *)this = off_1E1592B50;
  if (*((_QWORD *)this + 22))
    CGDashRelease();
  CA::CG::DrawOp::~DrawOp(this);
}

{
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1592B50;
  if (*((_QWORD *)this + 22))
    CGDashRelease();
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

double *CA::CG::StrokeRoundedRect::compute_dod(CA::CG::StrokeRoundedRect *this, float64x2_t *a2)
{
  double v4;
  double v5;

  CA::Rect::operator=(a2->f64, (double *)this + 14);
  if ((*((_BYTE *)this + 100) & 4) == 0)
    CA::Rect::apply_transform(a2, (const CGAffineTransform *)((char *)this + 8));
  v4 = CA::CG::stroke_radius((uint64_t)this + 160, *(float64x2_t *)((char *)this + 8), *(float64x2_t *)((char *)this + 24));
  return CA::BoundsImpl::inset_point(a2->f64, -v4, -v5);
}

_QWORD *CA::CG::StrokeRoundedRect::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  malloc_zone_t *malloc_zone;
  _QWORD *v11;
  int v12;
  CGColor *Color;
  unsigned int *v14;
  unsigned int v15;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v11 = malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
  if (v11)
  {
    v12 = *(_DWORD *)(a1 + 100) & 4;
    Color = (CGColor *)CGStyleGetColor();
    CA::CG::DrawOp::DrawOp((uint64_t)v11, a2, a1, a4, a5, Color, v12 | 0x8C0);
    *v11 = off_1E1591088;
    v11[18] = a1;
    v14 = (unsigned int *)(a3 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    v11[19] = a3;
    *v11 = off_1E1593278;
  }
  return v11;
}

void CA::CG::StrokeRoundedRect::draw_shape(CA::CG::StrokeRoundedRect *this, CA::CG::Renderer *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  int v8;
  double v9;
  double v10;
  double *v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  _OWORD v24[9];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 22))
    goto LABEL_7;
  v5 = *((double *)this + 18);
  v4 = *((double *)this + 19);
  v6 = v5 - v4;
  v7 = v4 - v5;
  if (v6 >= 0.0)
    v7 = v6;
  if (v7 <= 0.001
    && (v8 = *((_DWORD *)this + 25), (v8 & 1) != 0)
    && (CA::CG::DrawOp::shape_line_width((uint64_t)this, (const double *)a2, *((double *)this + 20)), v9 >= 0.0))
  {
    v10 = v9;
    if (v9 >= 0.001)
    {
      v11 = (double *)((char *)a2 + 32);
      v12 = 88;
      if ((v8 & 4) != 0)
        v11 = (double *)((char *)a2 + 88);
      else
        v12 = 32;
      v13 = *((double *)this + 14);
      v14 = *((double *)this + 15);
      v20 = v13;
      v21 = v14;
      v15 = *((double *)this + 16);
      v16 = *((double *)this + 17);
      v22 = v15;
      v23 = v16;
      if (v15 < 0.0)
      {
        v13 = v15 + v13;
        v15 = -v15;
        v20 = v13;
        v22 = v15;
      }
      if (v16 < 0.0)
      {
        v14 = v16 + v14;
        v16 = -v16;
        v21 = v14;
        v23 = v16;
      }
      v17 = v10 * 0.5;
      if (v15 <= v16)
        v18 = v16;
      else
        v18 = v15;
      if (v18 < 1.79769313e308)
      {
        v20 = v13 - v17;
        v21 = v14 - v17;
        v22 = v15 + v10;
        v23 = v16 + v10;
        if (v15 + v10 <= 0.0 || v16 + v10 <= 0.0)
        {
          v22 = 0.0;
          v23 = 0.0;
        }
      }
      v28 = 0;
      v26 = 0u;
      v27 = 0u;
      v25 = 0u;
      v19 = *(double *)((char *)a2 + v12);
      memset(v24, 0, sizeof(v24));
      CA::Transform::set_affine((CA::Transform *)v24, v19, v11[1], v11[2], v11[3], v11[4], v11[5]);
      *((_QWORD *)&v25 + 1) = &v20;
      *(_QWORD *)&v26 = v24;
      *((_QWORD *)&v26 + 1) = 0xFF0020003FLL;
      v28 = 0;
      v27 = 0uLL;
      CA::OGL::stroke_round_rect(*((_QWORD **)a2 + 1), (float64x2_t **)&v25 + 1, (double *)0xF, 0, v5 + v17, v10);
    }
  }
  else
  {
LABEL_7:
    CA::CG::StrokeRoundedRect::draw_shape_as_path(this, a2);
  }
}

void CA::CG::StrokeRoundedRect::draw_shape_as_path(CA::CG::StrokeRoundedRect *this, CA::CG::Renderer *a2)
{
  CGPath *Mutable;

  Mutable = CGPathCreateMutable();
  CGPathAddRoundedRect(Mutable, 0, *(CGRect *)((char *)this + 112), *((CGFloat *)this + 18), *((CGFloat *)this + 19));
  CA::CG::stroke_path((uint64_t)a2, (uint64_t)Mutable, 0, (uint64_t)this + 8, (uint64_t)this + 160);
  CFRelease(Mutable);
}

void CA::CG::StrokeRoundedRectShadow::~StrokeRoundedRectShadow(CA::CG::StrokeRoundedRectShadow *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E1591088;
  v2 = (unsigned int *)*((_QWORD *)this + 19);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1591088;
  v2 = (unsigned int *)*((_QWORD *)this + 19);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::CG::StrokeRoundedRectShadow::retain_path(uint64_t a1, CA::CG::Renderer *this, CGPoint *a3)
{
  uint64_t v3;
  CGSize v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  const CGPath *v8;
  const CGPath *v9;
  uint64_t stroked_path;
  float64x2_t v12;
  CGRect v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 144);
  v4 = *(CGSize *)(v3 + 128);
  v13.origin = *(CGPoint *)(v3 + 112);
  v13.size = v4;
  v12 = *(float64x2_t *)(v3 + 144);
  v5 = (float64x2_t)v4;
  *a3 = v13.origin;
  v13.origin.x = 0.0;
  v13.origin.y = 0.0;
  v6 = (float64x2_t)vdupq_n_s64(0x40F0000000000000uLL);
  v7 = (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL);
  v13.size = (CGSize)vmulq_f64(vrndaq_f64(vmulq_f64(v5, v6)), v7);
  v12 = vmulq_f64(vrndaq_f64(vmulq_f64(v12, v6)), v7);
  v8 = CA::CG::Renderer::retain_simple_path(this, &v13, (const CGSize *)&v12);
  if (!v8)
    return 0;
  v9 = v8;
  stroked_path = CA::CG::create_stroked_path(v8, (_OWORD *)(v3 + 8), v3 + 160, (*(_DWORD *)(v3 + 100) & 4) != 0);
  CGPathRelease(v9);
  return stroked_path;
}

uint64_t (***CA::OGL::Context::draw_elements(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8))()
{
  float64x2_t *v9;
  uint64_t (***result)();
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  uint64_t v14;
  uint64_t (***v15)();
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a8)
    return (uint64_t (***)())(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 288))(a1);
  v9 = *(float64x2_t **)(a1 + 800);
  if (v9)
  {
    *(_QWORD *)(a1 + 800) = 0;
    ++*(_DWORD *)(a1 + 240);
    v13 = &off_1E159A370;
    v14 = a1;
    v15 = &v13;
    CA::OGL::clip_primitives(a2, a3, a4, a5, 0, a8, v9, 0, 0, (uint64_t)&v13, 1u);
    result = v15;
    if (v15 == &v13)
    {
      v11 = 4;
      result = &v13;
    }
    else
    {
      if (!v15)
      {
LABEL_12:
        *(_QWORD *)(a1 + 800) = v9;
        ++*(_DWORD *)(a1 + 240);
        return result;
      }
      v11 = 5;
    }
    result = (uint64_t (***)())(*result)[v11]();
    goto LABEL_12;
  }
  v13 = &off_1E159A370;
  v14 = a1;
  v15 = &v13;
  CA::OGL::clip_primitives(a2, a3, a4, a5, 0, a8, 0, 0, 0, (uint64_t)&v13, 1u);
  result = v15;
  if (v15 == &v13)
  {
    v12 = 4;
    result = &v13;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
  }
  return (uint64_t (***)())(*result)[v12]();
}

void std::__function::__func<CA::OGL::Context::draw_elements(CA::OGL::PrimitiveMode,unsigned int,unsigned short const*,CA::OGL::Vertex const*,unsigned int,unsigned int,CA::OGL::ClipPlane const*)::$_0,std::allocator<CA::OGL::Context::draw_elements(CA::OGL::PrimitiveMode,unsigned int,unsigned short const*,CA::OGL::Vertex const*,unsigned int,unsigned int,CA::OGL::ClipPlane const*)::$_0>,BOOL ()(CA::OGL::Vertex*,unsigned int)>::~__func()
{
  JUMPOUT(0x186DBD990);
}

_QWORD *std::__function::__func<CA::OGL::Context::draw_elements(CA::OGL::PrimitiveMode,unsigned int,unsigned short const*,CA::OGL::Vertex const*,unsigned int,unsigned int,CA::OGL::ClipPlane const*)::$_0,std::allocator<CA::OGL::Context::draw_elements(CA::OGL::PrimitiveMode,unsigned int,unsigned short const*,CA::OGL::Vertex const*,unsigned int,unsigned int,CA::OGL::ClipPlane const*)::$_0>,BOOL ()(CA::OGL::Vertex*,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E159A370;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CA::OGL::Context::draw_elements(CA::OGL::PrimitiveMode,unsigned int,unsigned short const*,CA::OGL::Vertex const*,unsigned int,unsigned int,CA::OGL::ClipPlane const*)::$_0,std::allocator<CA::OGL::Context::draw_elements(CA::OGL::PrimitiveMode,unsigned int,unsigned short const*,CA::OGL::Vertex const*,unsigned int,unsigned int,CA::OGL::ClipPlane const*)::$_0>,BOOL ()(CA::OGL::Vertex*,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E159A370;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<CA::OGL::Context::draw_elements(CA::OGL::PrimitiveMode,unsigned int,unsigned short const*,CA::OGL::Vertex const*,unsigned int,unsigned int,CA::OGL::ClipPlane const*)::$_0,std::allocator<CA::OGL::Context::draw_elements(CA::OGL::PrimitiveMode,unsigned int,unsigned short const*,CA::OGL::Vertex const*,unsigned int,unsigned int,CA::OGL::ClipPlane const*)::$_0>,BOOL ()(CA::OGL::Vertex*,unsigned int)>::operator()(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 288))(*(_QWORD *)(a1 + 8), 1, *a3, 0, *a2, 0, *a3);
  return 1;
}

_QWORD *CA::OGL::Context::array_quad(_QWORD *result, float64x2_t a2, float64x2_t a3, float64x2_t a4, float64x2_t a5)
{
  uint64_t v5;
  float32x2_t *v6;

  v5 = result[16];
  v6 = (float32x2_t *)(result[15] + 48 * v5);
  result[16] = v5 + 4;
  *v6 = vcvt_f32_f64(a2);
  v6[1] = (float32x2_t)0x3F80000000000000;
  v6[6] = vcvt_f32_f64(a3);
  v6[7] = (float32x2_t)0x3F80000000000000;
  v6[12] = vcvt_f32_f64(a4);
  v6[13] = (float32x2_t)0x3F80000000000000;
  v6[18] = vcvt_f32_f64(a5);
  v6[19] = (float32x2_t)0x3F80000000000000;
  if (result[12])
    return (_QWORD *)CA::OGL::Context::array_indices((uint64_t)result, v5);
  return result;
}

_QWORD *CA::OGL::Context::array_quad(_QWORD *result, float64x2_t *a2, float64x2_t *a3, float64x2_t *a4, float64x2_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;

  v6 = result[16];
  v7 = result[15] + 48 * v6;
  result[16] = v6 + 4;
  v8 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a3), a3[1]);
  v9 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a4), a4[1]);
  v10 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a5), a5[1]);
  *(float32x4_t *)v7 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a2), a2[1]);
  *(float32x4_t *)(v7 + 48) = v8;
  *(float32x4_t *)(v7 + 96) = v9;
  *(float32x4_t *)(v7 + 144) = v10;
  if (result[12])
    return (_QWORD *)CA::OGL::Context::array_indices((uint64_t)result, v6);
  return result;
}

void CA::OGL::emit_combine_scaled(uint64_t a1, int a2, uint64_t a3, uint64_t a4, CA::Shape *a5, unsigned int *a6, float a7, int32x4_t a8, int32x4_t a9)
{
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  BOOL v21;
  int8x16_t v22;
  int8x16_t v23;
  int v24;
  double v25;
  int32x4_t v26;
  int64x2_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  float v31;
  double v32;
  int8x16_t v33;
  int32x2_t v34;
  int8x16_t v35;
  int8x16_t v37;
  int8x16_t v38;
  unint64_t v39;
  int8x16_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float v43;
  double v44;
  BOOL v45;
  int8x16_t v46;
  int8x16_t v47;
  unint64_t v48;
  int8x16_t v49;
  float64x2_t v50;
  float64x2_t v51;
  int64x2_t v52;
  int8x16_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int64x2_t v56;
  int32x4_t v57;
  int8x16_t v58;
  int32x4_t v59;
  const CA::Bounds *v60;
  char v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  NSObject *v68;
  _BOOL4 v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  uint64_t v85;
  int64x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  uint64_t v90;
  const int *v91;
  uint64_t v92;
  CA::Shape *v93;
  const void *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int32x2_t v98;
  uint32x2_t v99;
  uint32x2_t v100;
  unsigned __int32 v101;
  int32x2_t v102;
  int32x2_t v103;
  __int32 v104;
  CA::Shape *v105;
  int v106;
  CA::Shape *v107[2];
  uint64_t v108;
  float v110;
  float64x2_t v111;
  float64x2_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  uint64_t v116[3];
  uint8_t buf[488];
  uint64_t v118[5];

  v110 = *(float *)a8.i32;
  v118[3] = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = a2;
  if (a3)
  {
    CA::OGL::Context::bind_surface(a1, a3, 0, 1u, 1, 0.0);
    v15 = *(_QWORD *)(a3 + 32);
    v16 = *(_DWORD *)(a3 + 40);
    v17 = *(_DWORD *)(a3 + 44);
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
  }
  v18 = v15;
  if (a4)
  {
    CA::OGL::Context::bind_surface(a1, a4, 1u, 1u, 1, 0.0);
    v19 = *(_OWORD *)(a4 + 32);
  }
  else
  {
    v19 = 0uLL;
  }
  if (v16 <= v17)
    v20 = v17;
  else
    v20 = v16;
  v21 = v20 <= 1073741822;
  a8.i32[0] = v20;
  *(double *)a9.i64 = (double)v16;
  v22 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  if (v20 <= 1073741822)
    *(double *)v23.i64 = (double)v16;
  else
    *(double *)v23.i64 = 1.79769313e308;
  v24 = DWORD2(v19);
  if (v21)
    v25 = (double)v17;
  else
    v25 = 1.79769313e308;
  if (SDWORD2(v19) <= SHIDWORD(v19))
    v24 = HIDWORD(v19);
  a9.i32[0] = 1073741822;
  v26 = vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(a8, a9), 0);
  v27.i64[0] = (int)v18;
  v27.i64[1] = SHIDWORD(v18);
  v28 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
  v29 = vbslq_s8((int8x16_t)v26, v28, (int8x16_t)vcvtq_f64_s64(v27));
  v26.i32[0] = v24;
  v27.i64[0] = (int)v19;
  v27.i64[1] = SDWORD1(v19);
  v30 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v26, a9), 0), v28, (int8x16_t)vcvtq_f64_s64(v27));
  v31 = 1.0 / a7;
  v32 = (float)(1.0 / a7);
  *(double *)&v23.i64[1] = v25;
  v27.i64[0] = SDWORD2(v19);
  v27.i64[1] = SHIDWORD(v19);
  v33 = (int8x16_t)vcvtq_f64_s64(v27);
  v34 = vdup_n_s32(v24 > 1073741822);
  v27.i64[0] = v34.u32[0];
  v27.i64[1] = v34.u32[1];
  v35 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v27, 0x3FuLL)), v22, v33);
  _ZF = *(double *)v23.i64 >= 1.79769313e308 || v31 == 1.0;
  v37.i64[1] = v29.i64[1];
  *(double *)&v38.i64[1] = v25;
  if (_ZF)
    v39 = 0;
  else
    v39 = -1;
  v40 = (int8x16_t)vdupq_n_s64(v39);
  *(double *)v38.i64 = *(double *)v23.i64 * v32;
  v41 = (float64x2_t)vbslq_s8(v40, v38, v23);
  *(double *)v37.i64 = v32 * *(double *)v29.i64;
  v112 = (float64x2_t)vbslq_s8(v40, v37, v29);
  if (v31 != 1.0 && v41.f64[1] < 1.79769313e308)
  {
    v42.f64[0] = v112.f64[0];
    v42.f64[1] = vmuld_lane_f64(v32, v112, 1);
    v112 = v42;
    v41.f64[1] = v41.f64[1] * v32;
  }
  v43 = 1.0 / v110;
  v44 = (float)(1.0 / v110);
  v45 = *(double *)v35.i64 >= 1.79769313e308 || v43 == 1.0;
  v46.i64[1] = v30.i64[1];
  v47.i64[1] = v35.i64[1];
  if (v45)
    v48 = 0;
  else
    v48 = -1;
  v49 = (int8x16_t)vdupq_n_s64(v48);
  *(double *)v47.i64 = v44 * *(double *)v35.i64;
  v50 = (float64x2_t)vbslq_s8(v49, v47, v35);
  *(double *)v46.i64 = v44 * *(double *)v30.i64;
  v111 = (float64x2_t)vbslq_s8(v49, v46, v30);
  if (v43 != 1.0 && v50.f64[1] < 1.79769313e308)
  {
    v51.f64[0] = v111.f64[0];
    v51.f64[1] = vmuld_lane_f64(v44, v111, 1);
    v111 = v51;
    v50.f64[1] = v50.f64[1] * v44;
  }
  v52 = vceqzq_f64(v41);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v52, 1), (int8x16_t)v52).u64[0] & 0x8000000000000000) != 0
    || (v53 = vorrq_s8((int8x16_t)vcltzq_f64(v41), (int8x16_t)vcgezq_f64(v41)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v53), 1), v53).u64[0] & 0x8000000000000000) != 0))
  {
    v115 = 0uLL;
    v55 = 0uLL;
  }
  else
  {
    v54 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v112, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    v55 = vuzp1q_s32(v54, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v112, v41), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v54));
    v115 = v55;
  }
  v56 = vceqzq_f64(v50);
  v57 = 0uLL;
  v113 = v55;
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v56, 1), (int8x16_t)v56).u64[0] & 0x8000000000000000) == 0)
  {
    v58 = vorrq_s8((int8x16_t)vcltzq_f64(v50), (int8x16_t)vcgezq_f64(v50));
    if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v58), 1), v58).u64[0] & 0x8000000000000000) == 0)
    {
      v59 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v111, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
      v57 = vuzp1q_s32(v59, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v111, v50), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v59));
    }
  }
  *(int32x4_t *)v107 = v57;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 984))(a1))
  {
    v114 = 0uLL;
    v60 = (const CA::Bounds *)&v115;
    v61 = a2 - 5;
    v105 = a5;
    if ((a2 - 5) <= 0x3F)
    {
      if (((1 << v61) & 0x86021C00000FE0DALL) != 0)
      {
LABEL_46:
        v108 = CA::Shape::intersect(a5, v60);
LABEL_47:
        v62 = 1;
        goto LABEL_48;
      }
      if (((1 << v61) & 0x24) != 0)
      {
        v114 = v113;
        v98 = (int32x2_t)vextq_s8(*(int8x16_t *)v107, *(int8x16_t *)v107, 8uLL).u64[0];
        v99 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v113.u64[1]);
        v100 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v98);
        v101 = vpmax_u32(v100, v100).u32[0];
        if ((vpmax_u32(v99, v99).u32[0] & 0x80000000) != 0)
        {
          if ((v101 & 0x80000000) != 0)
          {
            v108 = 1;
            goto LABEL_47;
          }
          v114.i64[0] = (uint64_t)v107[0];
          v114.i32[2] = (__int32)v107[1];
          v104 = HIDWORD(v107[1]);
        }
        else
        {
          if ((v101 & 0x80000000) != 0)
          {
LABEL_114:
            v60 = (const CA::Bounds *)&v114;
            goto LABEL_46;
          }
          v102 = vmin_s32(*(int32x2_t *)v113.i8, (int32x2_t)v107[0]);
          v103 = vsub_s32(vmax_s32(vadd_s32(*(int32x2_t *)v113.i8, (int32x2_t)v113.u64[1]), vadd_s32((int32x2_t)v107[0], v98)), v102);
          *(int32x2_t *)v114.i8 = v102;
          v114.i32[2] = v103.i32[0];
          v104 = v103.i32[1];
        }
        v114.i32[3] = v104;
        goto LABEL_114;
      }
      if (a2 == 5)
      {
        v114 = v113;
        v60 = (const CA::Bounds *)&v114;
        if ((CA::BoundsImpl::intersect((int32x2_t *)&v114, (int32x2_t)v107[0], (int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v107, *(int8x16_t *)v107, 8uLL)) & 1) == 0)
        {
          v64 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
          v65 = v64 >> 16;
          v66 = HIDWORD(v64);
          v67 = HIWORD(v64);
          v106 = 1;
          v108 = 1;
          goto LABEL_60;
        }
        goto LABEL_46;
      }
    }
    if ((a2 - 1) >= 4)
    {
      v62 = 0;
      v108 = (uint64_t)a5;
LABEL_48:
      v63 = *(_QWORD *)(a1 + 16);
      v64 = *(_QWORD *)(v63 + 8);
      v65 = v64 >> 16;
      v66 = HIDWORD(v64);
      v67 = HIWORD(v64);
      v106 = v62;
      if ((a2 - 8) >= 2)
      {
        if (a2 == 7)
        {
          _S0 = *a6;
          __asm { FCVT            H0, S0 }
          LOWORD(v64) = _S0;
          LOWORD(v65) = _S0;
          LOWORD(v66) = _S0;
          v67 = _S0;
        }
      }
      else
      {
        *(_OWORD *)(v63 + 24) = *(_OWORD *)a6;
      }
LABEL_60:
      v73 = CA::OGL::Context::need_transparent_source((CA::OGL::Context *)a1);
      v74 = *(unsigned __int8 *)(a1 + 64);
      if (*(_BYTE *)(a1 + 64))
        *(_BYTE *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 128) = 0;
      v75 = a1 + 818;
      *(_QWORD *)(a1 + 96) = a1 + 818;
      *(_OWORD *)(a1 + 104) = xmmword_18474E060;
      v118[1] = 0;
      v118[2] = 0;
      v118[0] = v108;
      v76 = ((unint64_t)(unsigned __int16)v66 << 32) | (v67 << 48) | ((unint64_t)(unsigned __int16)v65 << 16) | (unsigned __int16)v64;
      while (CA::ShapeIterator::iterate(v118, v114.i32))
      {
        if (*(_DWORD *)(a1 + 92))
          v77 = 6;
        else
          v77 = 4;
        if ((unint64_t)(*(_QWORD *)(a1 + 128) + 4) > *(_QWORD *)(a1 + 136)
          || (v78 = *(_QWORD *)(a1 + 112)) != 0 && *(_QWORD *)(a1 + 104) + v77 > v78)
        {
          *(_WORD *)(a1 + 816) |= 0x20u;
          CA::OGL::Context::array_flush(a1);
          *(_QWORD *)(a1 + 128) = 0;
          *(_QWORD *)(a1 + 96) = v75;
          *(_OWORD *)(a1 + 104) = xmmword_18474E060;
        }
        CA::OGL::Context::array_rect((_QWORD *)a1, (float)v114.i32[0], (float)v114.i32[1], (float)(v114.i32[2] + v114.i32[0]), (float)(v114.i32[3] + v114.i32[1]));
        v79 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
        *(_QWORD *)(v79 - 160) = v76;
        *(_QWORD *)(v79 - 112) = v76;
        *(_QWORD *)(v79 - 64) = v76;
        *(_QWORD *)(v79 - 16) = v76;
        if (a3)
        {
          v80 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
          v81.i64[0] = v114.i32[0];
          v81.i64[1] = v114.i32[1];
          v82 = vcvt_f32_f64(vsubq_f64(vcvtq_f64_s64(v81), v112));
          v83 = vmul_n_f32(v82, a7);
          v84 = vmul_n_f32(vadd_f32(vcvt_f32_s32((int32x2_t)v114.u64[1]), v82), a7);
          *(float32x2_t *)(v80 - 176) = v83;
          *(_QWORD *)(v80 - 128) = __PAIR64__(v83.u32[1], v84.u32[0]);
          *(float32x2_t *)(v80 - 80) = v84;
          v83.i32[1] = v84.i32[1];
          *(float32x2_t *)(v80 - 32) = v83;
        }
        if (a4)
        {
          v85 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
          v86.i64[0] = v114.i32[0];
          v86.i64[1] = v114.i32[1];
          v87 = vcvt_f32_f64(vsubq_f64(vcvtq_f64_s64(v86), v111));
          v88 = vmul_n_f32(v87, v110);
          v89 = vmul_n_f32(vadd_f32(vcvt_f32_s32((int32x2_t)v114.u64[1]), v87), v110);
          *(float32x2_t *)(v85 - 168) = v88;
          *(_QWORD *)(v85 - 120) = __PAIR64__(v88.u32[1], v89.u32[0]);
          *(float32x2_t *)(v85 - 72) = v89;
          v88.i32[1] = v89.i32[1];
          *(float32x2_t *)(v85 - 24) = v88;
        }
      }
      CA::OGL::Context::array_flush(a1);
      if (!v73)
        goto LABEL_92;
      v92 = CA::Shape::subtract(v105, (const CA::Shape *)v108, v90, v91);
      v93 = (CA::Shape *)v92;
      if ((v92 & 1) != 0)
      {
        if (v92 == 1)
        {
LABEL_91:
          CA::Shape::unref(v93);
LABEL_92:
          if (v74)
            *(_BYTE *)(a1 + 64) = 1;
          if (v106)
            CA::Shape::unref((CA::Shape *)v108);
          if (a4)
            CA::OGL::Context::unbind_surface((_QWORD *)a1, a4, 1);
          if (a3)
            CA::OGL::Context::unbind_surface((_QWORD *)a1, a3, 0);
          *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 0;
          return;
        }
      }
      else if (*(_DWORD *)(v92 + 4) == 6)
      {
        goto LABEL_91;
      }
      v94 = *(const void **)(a1 + 16);
      memcpy(buf, v94, sizeof(buf));
      v116[2] = 0;
      *(_QWORD *)buf = v94;
      *(_QWORD *)(a1 + 16) = buf;
      buf[16] = 0;
      *(_QWORD *)(a1 + 128) = 0;
      *(_QWORD *)(a1 + 96) = v75;
      *(_OWORD *)(a1 + 104) = xmmword_18474E060;
      v116[0] = (uint64_t)v93;
      v116[1] = 0;
      while (CA::ShapeIterator::iterate(v116, v114.i32))
      {
        if (*(_DWORD *)(a1 + 92))
          v95 = 6;
        else
          v95 = 4;
        if ((unint64_t)(*(_QWORD *)(a1 + 128) + 4) > *(_QWORD *)(a1 + 136)
          || (v96 = *(_QWORD *)(a1 + 112)) != 0 && *(_QWORD *)(a1 + 104) + v95 > v96)
        {
          *(_WORD *)(a1 + 816) |= 0x20u;
          CA::OGL::Context::array_flush(a1);
          *(_QWORD *)(a1 + 128) = 0;
          *(_QWORD *)(a1 + 96) = v75;
          *(_OWORD *)(a1 + 104) = xmmword_18474E060;
        }
        CA::OGL::Context::array_rect((_QWORD *)a1, (float)v114.i32[0], (float)v114.i32[1], (float)(v114.i32[2] + v114.i32[0]), (float)(v114.i32[3] + v114.i32[1]));
        v97 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
        *(_QWORD *)(v97 - 160) = 0;
        *(_QWORD *)(v97 - 112) = 0;
        *(_QWORD *)(v97 - 64) = 0;
        *(_QWORD *)(v97 - 16) = 0;
      }
      CA::OGL::Context::array_flush(a1);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)buf;
      goto LABEL_91;
    }
    goto LABEL_46;
  }
  if (a4)
    CA::OGL::Context::unbind_surface((_QWORD *)a1, a4, 1);
  if (a3)
    CA::OGL::Context::unbind_surface((_QWORD *)a1, a3, 0);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 0;
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v68 = x_log_category_ogl;
    if (os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl(&dword_184457000, v68, OS_LOG_TYPE_DEFAULT, "CoreAnimation: unhandled combiner function: %d\n", buf, 8u);
    }
  }
}

uint64_t CA::OGL::emit_bias(_QWORD *a1, int *a2, float a3, float a4)
{
  int32x2_t v8;
  uint64_t result;

  CA::OGL::bind_filter_surface((uint64_t)a1, (uint64_t)a2, a4);
  *(_BYTE *)(a1[2] + 16) = 25;
  v8.i32[0] = 1000593162;
  if (a3 >= 0.005)
  {
    *(float *)v8.i32 = a3;
    if (a3 > 0.995)
      v8.i32[0] = 1065269330;
  }
  *(float *)v8.i32 = (float)(1.0 / *(float *)v8.i32) + -2.0;
  *(int32x4_t *)(a1[2] + 24) = vdupq_lane_s32(v8, 0);
  result = CA::OGL::emit_filter_quads((uint64_t)a1, a2, a4);
  if ((int *)a1[31] != a2)
    result = CA::OGL::Context::unbind_surface(a1, (uint64_t)a2, 0);
  *(_BYTE *)(a1[2] + 16) = 0;
  *(_BYTE *)(a1[2] + 19) = 0;
  return result;
}

uint64_t CA::OGL::emit_sdr_normalize_filter(_QWORD *a1, int *a2, float a3)
{
  uint64_t result;

  CA::OGL::bind_filter_surface((uint64_t)a1, (uint64_t)a2, a3);
  *(_BYTE *)(a1[2] + 16) = 67;
  result = CA::OGL::emit_filter_quads((uint64_t)a1, a2, a3);
  if ((int *)a1[31] != a2)
    result = CA::OGL::Context::unbind_surface(a1, (uint64_t)a2, 0);
  *(_BYTE *)(a1[2] + 16) = 0;
  *(_BYTE *)(a1[2] + 19) = 0;
  return result;
}

uint64_t CA::OGL::emit_limit_apl_dimming(_QWORD *a1, int *a2, uint64_t a3, float a4, float a5, float a6)
{
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t result;
  __int128 v20;
  _QWORD v21[3];
  __int128 v22;
  __int128 v23;
  float v24[2];
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  float v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  CA::OGL::Context::bind_surface((uint64_t)a1, (uint64_t)a2, 0, a4 != 1.0, a4 != 1.0, 0.0);
  *(_BYTE *)(a1[2] + 16) = 99;
  *(_BYTE *)(a1[2] + 481) |= 2u;
  *(_DWORD *)(a1[2] + 352) = 1065353216;
  v12 = a5 + (float)a2[8];
  v13 = a6 + (float)a2[9];
  v14 = (float)a2[10];
  v15 = (float)a2[11];
  v16 = v13 + v15;
  *(float *)&v17 = v13 * a4;
  v25 = 0x3F80000000000000;
  v26 = 0u;
  v33 = 0u;
  v34 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v31 = 0u;
  v32 = 0u;
  v27 = 0u;
  v24[0] = v12 * a4;
  v24[1] = v16 * a4;
  *((float *)&v26 + 1) = v15;
  v28 = v12 * a4;
  v29 = v17;
  v30 = 1065353216;
  *(float *)&v33 = (float)(v12 + v14) * a4;
  *((float *)&v33 + 1) = v16 * a4;
  HIDWORD(v33) = 1065353216;
  *(_QWORD *)&v34 = __PAIR64__(LODWORD(v15), LODWORD(v14));
  *(float *)&v36 = *(float *)&v33;
  DWORD1(v36) = v17;
  HIDWORD(v36) = 1065353216;
  *(float *)&v37 = v14;
  v20 = 0u;
  v22 = 0u;
  v23 = 0u;
  v18 = *(_QWORD *)(a1[29] + 8);
  v21[0] = a1;
  v21[1] = v18;
  v21[2] = 0;
  WORD4(v22) = 0;
  CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v21);
  while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v21, (int32x2_t *)&v20))(*(void (**)(_QWORD *, uint64_t, float *, uint64_t))(*a1 + 384))(a1, 4, v24, a3);
  *(_BYTE *)(a1[2] + 481) &= ~2u;
  result = CA::OGL::Context::unbind_surface(a1, (uint64_t)a2, 0);
  *(_BYTE *)(a1[2] + 16) = 0;
  return result;
}

void CA::OGL::emit_n_part_rect_large(uint64_t a1, uint64_t a2, int a3, int a4, _QWORD *a5, uint64_t a6, _DWORD *a7, uint64_t a8, _DWORD *a9, uint64_t a10, int a11)
{
  float32x4_t *v17;
  uint64_t v18;
  CA::OGL::Context *v19;
  uint64_t v20;
  float32x4_t *v21;
  uint64_t v22;
  char *v23;
  size_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  _BOOL4 v29;
  float64x2_t *v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  __int8 *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  const double *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  uint64_t v50;
  char *v51;
  unsigned __int16 *v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  int v56;
  unsigned __int16 *v57;
  int v58;
  unsigned __int16 *v59;
  uint64_t v60;
  uint64_t *v61;
  const double *v62;
  void (*v63)(void);
  uint64_t v64;
  void (*v65)(uint64_t, float32x4_t *, const double *);
  int v66;
  float *v67;
  double *v68;
  double *v69;
  double *v70;
  float *v71;
  double *v72;
  double *v73;
  double *v74;
  unsigned __int16 **v75;
  double *v76;
  float v77;
  float v78;
  float v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t *v84;
  char *v85;
  double *v86;
  double *v87;
  double *v88;
  double *v89;
  double *v90;
  double *v91;
  float *f32;
  char *v93;
  double *v94;
  double *v95;
  double *v96;
  double *v97;
  double *v98;
  double *v99;
  float32x4_t *v100;
  float32x4_t *v101;
  const unsigned __int16 *v102;
  int v103;
  int v104;
  int v105;
  float32x4_t *v106;
  const unsigned __int16 *v107;
  int v108;
  float32x4_t *v109;
  float32x4_t *v110;
  uint64_t v111;
  int v112;
  __int8 *v113;
  uint64_t v114;
  unint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  int v120;
  unsigned int v121;
  CA::OGL::Context *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unsigned __int16 *v126;
  const double *v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;

  v119 = a5;
  v128 = a2;
  v138 = *MEMORY[0x1E0C80C00];
  v123 = a3 + 1;
  v17 = *(float32x4_t **)(a1 + 120);
  v18 = *(_QWORD *)(a1 + 136);
  v122 = (CA::OGL::Context *)a1;
  v127 = (const double *)(2 * v123);
  if (2 * (int)v123 <= v18)
  {
    v83 = v18;
    MEMORY[0x1E0C80A78](a1);
    v23 = (char *)&v83 - v22;
    bzero((char *)&v83 - v22, v24);
    v25 = (unint64_t)(v23 + 15);
    v19 = v122;
    v125 = v25 & 0xFFFFFFFFFFFFFFF0;
    MEMORY[0x1E0C80A78](v26);
    v126 = (unsigned __int16 *)((char *)&v83 - v27);
    bzero((char *)&v83 - v27, v28);
    v84 = v17;
  }
  else
  {
    v19 = (CA::OGL::Context *)a1;
    v20 = (2 * v123);
    v21 = (float32x4_t *)malloc_type_malloc(80 * v20 + 8 * a3, 0x15AF469AuLL);
    if (!v21)
      return;
    v83 = v18;
    v84 = v17;
    v125 = (unint64_t)&v21[3 * v20];
    v126 = (unsigned __int16 *)(v125 + 32 * v20);
    *((_QWORD *)v19 + 15) = v21;
    *((_QWORD *)v19 + 17) = v20;
    v17 = v21;
  }
  v29 = CA::OGL::Context::need_transparent_source(v19);
  v120 = a11;
  v136 = 0u;
  v137 = 0u;
  v134 = 0u;
  v135 = 0u;
  v132 = 0u;
  v133 = 0u;
  v121 = v29 | ((a11 & 0x40000u) >> 18);
  v130 = 0u;
  v131 = 0u;
  v124 = (a4 - 1);
  v30 = (float64x2_t *)v125;
  if (a4 >= 1)
  {
    v31 = 0;
    v108 = a3 + 2;
    v107 = v126 + 4;
    v103 = 2 * a3;
    v102 = v126 + 8;
    v109 = &v17[3 * v123];
    v32 = 48 * v123;
    v101 = v17 + 3;
    v106 = &v17[3 * a3];
    v105 = a3 - 1;
    v100 = &v17[3 * a3 - 3];
    v104 = v123 + a3;
    f32 = v17[3 * (int)v123 + 3 * a3].f32;
    v91 = (double *)&v134 + 1;
    v90 = (double *)&v135;
    v89 = (double *)&v135 + 1;
    v88 = (double *)&v136;
    v87 = (double *)&v136 + 1;
    v86 = (double *)&v137;
    v85 = (char *)&v137 + 8;
    v99 = (double *)&v130 + 1;
    v98 = (double *)&v131;
    v97 = (double *)&v131 + 1;
    v96 = (double *)&v132;
    v95 = (double *)&v132 + 1;
    v94 = (double *)&v133;
    v93 = (char *)&v133 + 8;
    v117 = a4;
    v33 = xmmword_18474DF50;
    v34 = v125 + 8;
    v35 = 32 * v123;
    v36 = &v17[1].i8[12];
    v37 = a3 - 2;
    v110 = v17 + 2;
    v38 = v123;
    v118 = 48 * v123;
    v116 = xmmword_18474DF50;
    v115 = v125 + 8;
    v114 = 32 * v123;
    v113 = &v17[1].i8[12];
    v112 = a3 - 2;
    v111 = v123;
    do
    {
      v39 = 0;
      v40 = 1;
      v41 = v119;
      v43 = v127;
      v42 = v128;
      do
      {
        v44 = v40;
        if ((a3 & 0x80000000) == 0)
        {
          v45 = v39 + v31;
          v46 = v34 + v35 * v39;
          v47 = v41;
          v48 = a7;
          v49 = a9;
          v50 = v38;
          v51 = &v36[v32 * v39];
          do
          {
            *(_QWORD *)(v46 - 8) = *v47;
            *(_QWORD *)v46 = *(_QWORD *)(a6 + 8 * v45);
            *(_OWORD *)(v46 + 8) = v33;
            if (a7)
            {
              *((_DWORD *)v51 - 3) = *v48;
              *((_DWORD *)v51 - 2) = *(_DWORD *)(a8 + 4 * v45);
            }
            if (a9)
            {
              *((_DWORD *)v51 - 1) = *v49;
              *(_DWORD *)v51 = *(_DWORD *)(a10 + 4 * v45);
            }
            ++v49;
            ++v48;
            ++v47;
            v46 += 32;
            v51 += 48;
            --v50;
          }
          while (v50);
        }
        v40 = 0;
        v39 = 1;
      }
      while ((v44 & 1) != 0);
      if (!v31 || v31 == v124)
      {
        v53 = v126;
        v54 = v126;
        if (a3 < 1)
          goto LABEL_30;
        v56 = 0;
        v57 = v126;
        do
        {
          *v57 = v56;
          v57[1] = v56 + 1;
          v57[2] = a3 + v56 + 2;
          v54 = v57 + 4;
          v57[3] = a3 + v56++ + 1;
          v57 += 4;
        }
        while (a3 != v56);
      }
      else
      {
        v52 = v126;
        *(_DWORD *)v126 = 0x10000;
        v52[2] = v108;
        v53 = (unsigned __int16 *)v107;
        v54 = (unsigned __int16 *)v107;
        v52[3] = v123;
        if (a3 < 2)
          goto LABEL_30;
        v55 = v126;
        v126[4] = v105;
        v55[5] = a3;
        v55[6] = v104;
        v54 = (unsigned __int16 *)v102;
        v55[7] = v103;
      }
      if (v31 && v31 < v124 && a3 >= 3)
      {
        v58 = 0;
        v59 = v54;
        do
        {
          *v59 = v58 + 1;
          v59[1] = v58 + 2;
          v59[2] = a3 + v58 + 3;
          v53 = v59 + 4;
          v59[3] = a3 + v58++ + 2;
          v59 += 4;
        }
        while (v37 != v58);
      }
      else
      {
        v53 = v54;
      }
LABEL_30:
      if ((_DWORD)v123)
      {
        v60 = *(_QWORD *)(*((_QWORD *)v122 + 2) + 8);
        v61 = (uint64_t *)v110;
        v62 = v43;
        do
        {
          *v61 = v60;
          v61 += 6;
          v62 = (const double *)((char *)v62 - 1);
        }
        while (v62);
      }
      v63 = *(void (**)(void))(v42 + 24);
      if (v63)
      {
        v63();
        v30 = (float64x2_t *)v125;
        v43 = v127;
        v42 = v128;
      }
      CA::OGL::transform_vertices(v30, v17, v43, *(float64x2_t **)(v42 + 8));
      v64 = v128;
      v65 = *(void (**)(uint64_t, float32x4_t *, const double *))(v128 + 32);
      if (v65)
      {
        v65(v128, v17, v127);
        v64 = v128;
      }
      v66 = *(_DWORD *)(v64 + 20);
      if ((v66 & 0xF) != 0 && (*(_BYTE *)(v64 + 16) & 9) != 0)
      {
        if (!v31 && (v66 & 4) != 0)
        {
          CA::OGL::aa_adjust_vertices((uint64_t)v17, (uint64_t)v109, 48, v123);
          v64 = v128;
          v66 = *(_DWORD *)(v128 + 20);
        }
        if (v31 == v124 && (v66 & 8) != 0)
        {
          CA::OGL::aa_adjust_vertices((uint64_t)v109, (uint64_t)v17, 48, v123);
          v64 = v128;
          v66 = *(_DWORD *)(v128 + 20);
        }
        if ((v66 & 1) != 0)
        {
          CA::OGL::aa_adjust_vertices((uint64_t)v17, (uint64_t)v101, 0, 1);
          v64 = v128;
          v66 = *(_DWORD *)(v128 + 20);
        }
        if ((v66 & 2) != 0)
        {
          CA::OGL::aa_adjust_vertices((uint64_t)v106, (uint64_t)v100, 0, 1);
          v64 = v128;
        }
      }
      if (!v121)
        goto LABEL_55;
      if (!v31)
      {
        v67 = (float *)v17;
        v68 = v99;
        v69 = v98;
        v70 = v97;
        v71 = (float *)v106;
        *(double *)&v130 = v17->f32[0];
        v72 = v96;
        v73 = v95;
        v74 = v94;
        v75 = &v126;
        goto LABEL_54;
      }
      if (v31 == v124)
      {
        v67 = f32;
        v68 = v91;
        v69 = v90;
        v70 = v89;
        v71 = (float *)v109;
        *(double *)&v134 = *f32;
        v72 = v88;
        v73 = v87;
        v74 = v86;
        v75 = (unsigned __int16 **)&v117;
LABEL_54:
        v76 = (double *)*(v75 - 32);
        v77 = v67[2];
        *v68 = v67[1];
        *v69 = v77;
        *v70 = v67[3];
        v78 = v71[1];
        *v72 = *v71;
        *v73 = v78;
        v79 = v71[3];
        *v74 = v71[2];
        *v76 = v79;
      }
LABEL_55:
      v80 = v53 - v54;
      v19 = v122;
      CA::OGL::emit_mesh_with_center((uint64_t)v122, v64, v126, v53 - v126, v80, v127, v120);
      ++v31;
      v30 = (float64x2_t *)v125;
      v32 = v118;
      v33 = v116;
      v34 = v115;
      v35 = v114;
      v36 = v113;
      v37 = v112;
      v38 = v111;
    }
    while (v31 != v117);
  }
  if (v17 != v84)
  {
    v81 = v83;
    *((_QWORD *)v19 + 15) = v84;
    *((_QWORD *)v19 + 17) = v81;
    free(v17);
  }
  if (v121)
  {
    if ((v120 & 0x40000) != 0)
      v82 = *(_QWORD *)(*((_QWORD *)v19 + 2) + 8);
    else
      v82 = 0;
    v129 = v82;
    CA::OGL::emit_quad_surround((uint64_t)v19, (const double *)&v130, &v129);
  }
}

void CA::OGL::emit_eight_part_rect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _QWORD *v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, float64x2_t *, uint64_t, unint64_t, __n128);
  void (*v30)(uint64_t, uint64_t, unint64_t);
  int v31;
  _BOOL4 v32;
  const unsigned __int16 *v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  uint64_t v49;
  uint64_t v50;
  CA::OGL::Context *v51;
  uint64_t v52;
  _OWORD v53[8];
  float64x2_t v54;
  _QWORD v55[80];

  v55[78] = *MEMORY[0x1E0C80C00];
  bzero(&v54, 0x280uLL);
  if ((a9 & 0x3C00000) != 0)
    v17 = 20;
  else
    v17 = 16;
  v51 = (CA::OGL::Context *)a1;
  if (v17 > *(unsigned int *)(a1 + 136))
    return;
  v18 = 0;
  v19 = *(_QWORD *)(a1 + 120);
  v20 = (_DWORD *)(v19 + 28);
  v21 = v55;
  v22 = (__n128)xmmword_18474DF50;
  do
  {
    v23 = 0;
    v24 = *(_QWORD *)(a4 + 8 * v18);
    v25 = v21;
    v26 = v20;
    do
    {
      *((_QWORD *)v25 - 2) = *(_QWORD *)(a3 + 8 * v23);
      *((_QWORD *)v25 - 1) = v24;
      *v25 = xmmword_18474DF50;
      v25 += 2;
      *(v26 - 3) = *(_DWORD *)(a5 + 4 * v23);
      *(v26 - 2) = *(_DWORD *)(a6 + 4 * v18);
      *(v26 - 1) = *(_DWORD *)(a7 + 4 * v23);
      *v26 = *(_DWORD *)(a8 + 4 * v18);
      v26 += 12;
      ++v23;
    }
    while (v23 != 4);
    ++v18;
    v20 += 48;
    v21 += 16;
  }
  while (v18 != 4);
  if ((a9 & 0x3C00000) != 0)
    v22.n128_f32[0] = CA::OGL::adjust_skipped_corner_vertices_simple(&v54, v19, 4, 4uLL, a9);
  v27 = 0;
  v28 = *(_QWORD *)(*((_QWORD *)v51 + 2) + 8);
  do
  {
    *(_QWORD *)(v19 + v27 + 32) = v28;
    v27 += 48;
  }
  while (48 * v17 != v27);
  v29 = *(void (**)(uint64_t, float64x2_t *, uint64_t, unint64_t, __n128))(a2 + 24);
  if (v29)
    v29(a2, &v54, v19, v17, v22);
  CA::OGL::transform_vertices(&v54, (float32x4_t *)v19, (const double *)v17, *(float64x2_t **)(a2 + 8));
  v30 = *(void (**)(uint64_t, uint64_t, unint64_t))(a2 + 32);
  if (v30)
    v30(a2, v19, v17);
  if ((*(_BYTE *)(a2 + 16) & 9) != 0)
  {
    v31 = *(_DWORD *)(a2 + 20);
    if ((v31 & 0xF) == 0)
      goto LABEL_24;
    if ((v31 & 4) != 0)
    {
      CA::OGL::aa_adjust_vertices(v19, v19 + 192, 48, 4);
      v31 = *(_DWORD *)(a2 + 20);
      if ((v31 & 8) == 0)
      {
LABEL_21:
        if ((v31 & 1) == 0)
          goto LABEL_22;
        goto LABEL_42;
      }
    }
    else if ((v31 & 8) == 0)
    {
      goto LABEL_21;
    }
    CA::OGL::aa_adjust_vertices(v19 + 576, v19 + 384, 48, 4);
    v31 = *(_DWORD *)(a2 + 20);
    if ((v31 & 1) == 0)
    {
LABEL_22:
      if ((v31 & 2) != 0)
LABEL_23:
        CA::OGL::aa_adjust_vertices(v19 + 144, v19 + 96, 192, 4);
LABEL_24:
      CA::OGL::aa_adjust_vertices(v19 + 240, v19 + 48, 48, 2);
      CA::OGL::aa_adjust_vertices(v19 + 432, v19 + 624, 48, 2);
      CA::OGL::aa_adjust_vertices(v19 + 240, v19 + 192, 192, 2);
      CA::OGL::aa_adjust_vertices(v19 + 288, v19 + 336, 192, 2);
      goto LABEL_25;
    }
LABEL_42:
    CA::OGL::aa_adjust_vertices(v19, v19 + 48, 192, 4);
    if ((*(_DWORD *)(a2 + 20) & 2) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_25:
  v32 = CA::OGL::Context::need_transparent_source(v51);
  if ((a9 & 0x3C00000) != 0)
  {
    v33 = (const unsigned __int16 *)&CA::OGL::emit_eight_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,double const*,double const*,float const*,float const*,float const*,float const*,unsigned int)::skipped_corner_indices;
    v34 = (uint64_t)v51;
    v35 = 32;
    v36 = 20;
  }
  else
  {
    v33 = (const unsigned __int16 *)&CA::OGL::emit_eight_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,double const*,double const*,float const*,float const*,float const*,float const*,unsigned int)::corner_indices;
    v34 = (uint64_t)v51;
    v35 = 16;
    v36 = 16;
  }
  CA::OGL::emit_quad_indices(v34, *(float64x2_t **)(a2 + 40), v33, v35, v36);
  v37 = 0;
  v38 = v32 | ((a9 & 0x40000) >> 18);
  do
  {
    v39 = v19 + v37;
    v40 = *(_DWORD *)(v19 + v37 + 20);
    *(_DWORD *)(v39 + 20) = *(_DWORD *)(v19 + v37 + 28);
    *(_DWORD *)(v39 + 28) = v40;
    v37 += 48;
  }
  while (48 * v17 != v37);
  CA::OGL::emit_quad_indices((uint64_t)v51, *(float64x2_t **)(a2 + 40), CA::OGL::emit_eight_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,double const*,double const*,float const*,float const*,float const*,float const*,unsigned int)::edge0_indices, 8uLL, v17);
  v41 = 0;
  do
  {
    *(int8x16_t *)(v19 + v41 + 16) = vextq_s8(*(int8x16_t *)(v19 + v41 + 16), *(int8x16_t *)(v19 + v41 + 16), 8uLL);
    v41 += 48;
  }
  while (48 * v17 != v41);
  CA::OGL::emit_quad_indices((uint64_t)v51, *(float64x2_t **)(a2 + 40), CA::OGL::emit_eight_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,double const*,double const*,float const*,float const*,float const*,float const*,unsigned int)::edge1_indices, 8uLL, v17);
  v42 = 0;
  do
  {
    v43 = v19 + v42;
    v44 = *(_DWORD *)(v19 + v42 + 16);
    *(_DWORD *)(v43 + 16) = *(_DWORD *)(v19 + v42 + 24);
    *(_DWORD *)(v43 + 24) = v44;
    v42 += 48;
  }
  while (48 * v17 != v42);
  if ((v38 & 1) != 0)
  {
    v45 = vcvtq_f64_f32(*(float32x2_t *)(v19 + 8));
    v53[0] = vcvtq_f64_f32(*(float32x2_t *)v19);
    v53[1] = v45;
    v46 = vcvtq_f64_f32(*(float32x2_t *)(v19 + 152));
    v53[2] = vcvtq_f64_f32(*(float32x2_t *)(v19 + 144));
    v53[3] = v46;
    v47 = vcvtq_f64_f32(*(float32x2_t *)(v19 + 728));
    v53[4] = vcvtq_f64_f32(*(float32x2_t *)(v19 + 720));
    v53[5] = v47;
    v48 = vcvtq_f64_f32(*(float32x2_t *)(v19 + 584));
    v53[6] = vcvtq_f64_f32(*(float32x2_t *)(v19 + 576));
    v53[7] = v48;
    if ((a9 & 0x40000) != 0)
    {
      v49 = (uint64_t)v51;
      v50 = *(_QWORD *)(*((_QWORD *)v51 + 2) + 8);
    }
    else
    {
      v50 = 0;
      v49 = (uint64_t)v51;
    }
    v52 = v50;
    CA::OGL::emit_quad_surround(v49, (const double *)v53, &v52);
  }
}

void CA::OGL::emit_twenty_four_part_rect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _QWORD *v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, float64x2_t *, uint64_t, unint64_t, __n128);
  void (*v30)(uint64_t, uint64_t, unint64_t);
  _BOOL4 v31;
  const unsigned __int16 *v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  uint64_t v48;
  uint64_t v49;
  CA::OGL::Context *v50;
  uint64_t v51;
  _OWORD v52[8];
  float64x2_t v53;
  _QWORD v54[160];

  v54[158] = *MEMORY[0x1E0C80C00];
  bzero(&v53, 0x500uLL);
  if ((a9 & 0x3C00000) != 0)
    v17 = 40;
  else
    v17 = 36;
  v50 = (CA::OGL::Context *)a1;
  if (v17 <= *(unsigned int *)(a1 + 136))
  {
    v18 = 0;
    v19 = *(_QWORD *)(a1 + 120);
    v20 = (_DWORD *)(v19 + 28);
    v21 = v54;
    v22 = (__n128)xmmword_18474DF50;
    do
    {
      v23 = 0;
      v24 = *(_QWORD *)(a4 + 8 * v18);
      v25 = v21;
      v26 = v20;
      do
      {
        *((_QWORD *)v25 - 2) = *(_QWORD *)(a3 + 8 * v23);
        *((_QWORD *)v25 - 1) = v24;
        *v25 = xmmword_18474DF50;
        v25 += 2;
        *(v26 - 3) = *(_DWORD *)(a5 + 4 * v23);
        *(v26 - 2) = *(_DWORD *)(a6 + 4 * v18);
        *(v26 - 1) = *(_DWORD *)(a7 + 4 * v23);
        *v26 = *(_DWORD *)(a8 + 4 * v18);
        v26 += 12;
        ++v23;
      }
      while (v23 != 6);
      ++v18;
      v20 += 72;
      v21 += 24;
    }
    while (v18 != 6);
    if ((a9 & 0x3C00000) != 0)
      v22.n128_f32[0] = CA::OGL::adjust_skipped_corner_vertices_simple(&v53, v19, 6, 4uLL, a9);
    v27 = 0;
    v28 = *(_QWORD *)(*((_QWORD *)v50 + 2) + 8);
    do
    {
      *(_QWORD *)(v19 + v27 + 32) = v28;
      v27 += 48;
    }
    while (48 * v17 != v27);
    v29 = *(void (**)(uint64_t, float64x2_t *, uint64_t, unint64_t, __n128))(a2 + 24);
    if (v29)
      v29(a2, &v53, v19, v17, v22);
    CA::OGL::transform_vertices(&v53, (float32x4_t *)v19, (const double *)v17, *(float64x2_t **)(a2 + 8));
    v30 = *(void (**)(uint64_t, uint64_t, unint64_t))(a2 + 32);
    if (v30)
      v30(a2, v19, v17);
    if ((*(_BYTE *)(a2 + 16) & 9) != 0)
    {
      CA::OGL::aa_adjust_vertices(v19, v19 + 288, 48, 6);
      CA::OGL::aa_adjust_vertices(v19 + 1440, v19 + 1152, 48, 6);
      CA::OGL::aa_adjust_vertices(v19, v19 + 48, 288, 6);
      CA::OGL::aa_adjust_vertices(v19 + 240, v19 + 192, 288, 6);
      CA::OGL::aa_adjust_vertices(v19 + 672, v19 + 384, 48, 2);
      CA::OGL::aa_adjust_vertices(v19 + 960, v19 + 1248, 48, 2);
      CA::OGL::aa_adjust_vertices(v19 + 672, v19 + 624, 288, 2);
      CA::OGL::aa_adjust_vertices(v19 + 720, v19 + 768, 288, 2);
    }
    v31 = CA::OGL::Context::need_transparent_source(v50);
    if ((a9 & 0x3C00000) != 0)
    {
      v32 = (const unsigned __int16 *)&CA::OGL::emit_twenty_four_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,double const*,double const*,float const*,float const*,float const*,float const*,unsigned int)::corner_skipped_outer_indices;
      v33 = (uint64_t)v50;
      v34 = 96;
      v35 = 40;
    }
    else
    {
      v32 = (const unsigned __int16 *)&CA::OGL::emit_twenty_four_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,double const*,double const*,float const*,float const*,float const*,float const*,unsigned int)::outer_indices;
      v33 = (uint64_t)v50;
      v34 = 80;
      v35 = 36;
    }
    CA::OGL::emit_quad_indices(v33, *(float64x2_t **)(a2 + 40), v32, v34, v35);
    v36 = 0;
    v37 = v31 | ((a9 & 0x40000) >> 18);
    do
    {
      v38 = v19 + v36;
      v39 = *(_DWORD *)(v19 + v36 + 20);
      *(_DWORD *)(v38 + 20) = *(_DWORD *)(v19 + v36 + 28);
      *(_DWORD *)(v38 + 28) = v39;
      v36 += 48;
    }
    while (48 * v17 != v36);
    CA::OGL::emit_quad_indices((uint64_t)v50, *(float64x2_t **)(a2 + 40), CA::OGL::emit_twenty_four_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,double const*,double const*,float const*,float const*,float const*,float const*,unsigned int)::inner0_indices, 8uLL, v17);
    v40 = 0;
    do
    {
      *(int8x16_t *)(v19 + v40 + 16) = vextq_s8(*(int8x16_t *)(v19 + v40 + 16), *(int8x16_t *)(v19 + v40 + 16), 8uLL);
      v40 += 48;
    }
    while (48 * v17 != v40);
    CA::OGL::emit_quad_indices((uint64_t)v50, *(float64x2_t **)(a2 + 40), CA::OGL::emit_twenty_four_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,double const*,double const*,float const*,float const*,float const*,float const*,unsigned int)::inner1_indices, 8uLL, v17);
    v41 = 0;
    do
    {
      v42 = v19 + v41;
      v43 = *(_DWORD *)(v19 + v41 + 16);
      *(_DWORD *)(v42 + 16) = *(_DWORD *)(v19 + v41 + 24);
      *(_DWORD *)(v42 + 24) = v43;
      v41 += 48;
    }
    while (48 * v17 != v41);
    if ((v37 & 1) != 0)
    {
      v44 = vcvtq_f64_f32(*(float32x2_t *)(v19 + 8));
      v52[0] = vcvtq_f64_f32(*(float32x2_t *)v19);
      v52[1] = v44;
      v45 = vcvtq_f64_f32(*(float32x2_t *)(v19 + 248));
      v52[2] = vcvtq_f64_f32(*(float32x2_t *)(v19 + 240));
      v52[3] = v45;
      v46 = vcvtq_f64_f32(*(float32x2_t *)(v19 + 1688));
      v52[4] = vcvtq_f64_f32(*(float32x2_t *)(v19 + 1680));
      v52[5] = v46;
      v47 = vcvtq_f64_f32(*(float32x2_t *)(v19 + 1448));
      v52[6] = vcvtq_f64_f32(*(float32x2_t *)(v19 + 1440));
      v52[7] = v47;
      if ((a9 & 0x40000) != 0)
      {
        v48 = (uint64_t)v50;
        v49 = *(_QWORD *)(*((_QWORD *)v50 + 2) + 8);
      }
      else
      {
        v49 = 0;
        v48 = (uint64_t)v50;
      }
      v51 = v49;
      CA::OGL::emit_quad_surround(v48, (const double *)v52, &v51);
    }
  }
}

uint64_t CA::OGL::`anonymous namespace'::prepare_9_slice_aa(CA::OGL::_anonymous_namespace_ *this, double a2, double a3, double a4, double a5, float64x2_t a6, const float *a7, const float *a8, const float *a9, double *a10, double *a11, float *a12, float *a13, double a14)
{
  int32x2_t v14;
  double v16;
  double v17;
  double v18;
  double v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  int v26;
  double v28;
  double v29;
  float v30;
  int v31;
  double v32;

  *(float *)&a14 = *a8 + (float)((float)(a8[1] - *a8) * 0.5);
  *a10 = a2;
  if (a4 > a2 || a5 < a3)
  {
    if (a3 < a4)
      a4 = a3;
    if (a4 >= a2)
      v16 = a4;
    else
      v16 = a2;
    v17 = a6.f64[0] + a2;
    a10[1] = a6.f64[0] + a2;
    a10[2] = v16;
    if (a3 >= a5)
      v18 = a5;
    else
      v18 = a3;
    if (v18 < a2)
      v18 = a2;
    v19 = a3 - a6.f64[0];
    a10[3] = v18;
    a10[4] = a3 - a6.f64[0];
    a10[5] = a3;
    v20 = a6.f64[0] / (v16 - a2);
    v21 = a6.f64[0] / (a3 - (v18 + a2));
    v22 = *(float *)this;
    *(_DWORD *)a11 = *(_DWORD *)this;
    v23 = *((float *)this + 2);
    *((float *)a11 + 5) = v23;
    v24 = *a7 * (float)(v23 - v22);
    *((float *)a11 + 2) = v24 + v22;
    v25 = v22 + (float)(a7[2] * (float)(v23 - v22));
    *((float *)a11 + 1) = v22 + (float)(v24 * v20);
    *((float *)a11 + 3) = v25;
    *((float *)a11 + 4) = v23 + (float)((float)(v25 - v23) * v21);
    v26 = LODWORD(a14);
    if ((a9 & 1) != 0)
      v26 = *(_DWORD *)a8;
    *(_DWORD *)a12 = v26;
    *(int32x4_t *)(a12 + 1) = vdupq_lane_s32(*(int32x2_t *)&a14, 0);
    if ((a9 & 2) != 0)
      *(float *)&a14 = a8[1];
    a12[5] = *(float *)&a14;
    if (v16 > v18)
    {
      v18 = (v18 + v16) * 0.5;
      a10[2] = v18;
      a10[3] = v18;
      v16 = v18;
    }
    if (v17 > v16)
    {
      a10[1] = v16;
      *((_DWORD *)a11 + 1) = *((_DWORD *)a11 + 2);
      a12[1] = a12[2];
    }
    if (v19 < v18)
    {
      a10[4] = v18;
      *((_DWORD *)a11 + 4) = *((_DWORD *)a11 + 3);
      a12[4] = a12[3];
    }
    return 5;
  }
  else
  {
    v28 = a6.f64[0] + a2;
    v29 = a3 - a6.f64[0];
    a10[1] = a6.f64[0] + a2;
    a10[2] = a3 - a6.f64[0];
    a10[3] = a3;
    v14.i32[0] = *(_DWORD *)this;
    *(_DWORD *)a11 = *(_DWORD *)this;
    v30 = *((float *)this + 2);
    *((float *)a11 + 3) = v30;
    a6.f64[1] = a3 - a6.f64[0] - a2;
    *(float32x2_t *)((char *)a11 + 4) = vmla_n_f32((float32x2_t)vdup_lane_s32(v14, 0), vcvt_f32_f64(vmulq_n_f64(a6, 1.0 / (a3 - a2))), v30 - *(float *)v14.i32);
    v31 = LODWORD(a14);
    if ((a9 & 1) != 0)
      v31 = *(_DWORD *)a8;
    *(_DWORD *)a12 = v31;
    a12[1] = *(float *)&a14;
    a12[2] = *(float *)&a14;
    if ((a9 & 2) != 0)
      *(float *)&a14 = a8[1];
    a12[3] = *(float *)&a14;
    if (v28 > v29)
    {
      v32 = (a3 + a2) * 0.5;
      a10[1] = v32;
      a10[2] = v32;
    }
    return 3;
  }
}

uint64_t CA::OGL::fill_corner_rect(uint64_t result, double **a2, double *a3, double *a4, int a5, int a6, int a7, double a8, double a9)
{
  double v11;
  uint64_t v18;
  double *v19;
  double v20;
  unsigned int v21;
  double *v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  _OWORD *v26;
  float *v27;
  _OWORD *v28;
  double *v29;
  double v30;
  double v31;
  double v32;
  float *v33;
  int v34;
  unsigned int v35;
  double v36;
  double v37;
  _QWORD v38[2];
  double v39[2];
  double v40[4];
  double v41[4];
  float32x4_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v11 = (*a2)[2];
  if (v11 >= (*a2)[3])
    v11 = (*a2)[3];
  if (v11 > 0.0)
  {
    v18 = result;
    v36 = 0.0;
    v37 = 0.0;
    v19 = a2[1];
    if (((_BYTE)v19[18] & 0x10) != 0)
    {
      CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v19, &v37, &v36, a4);
      v20 = v37;
    }
    else
    {
      v20 = v19[16];
      v36 = v20;
      v37 = v20;
    }
    if (v20 * a8 < 1.0 || !a7 || !a3 || v36 * a9 < 1.0)
      return CA::OGL::fill_rect(v18, (uint64_t)a2, a3, a4);
    v42 = 0uLL;
    v21 = (*(_DWORD *)(v18 + 416) & 2) != 0 ? 2358 : 310;
    v22 = a5 ? (double *)(v21 ^ 0x800) : (double *)v21;
    v23 = *(_QWORD *)(v18 + 16);
    v24 = *(_QWORD *)(v23 + 16) & 0xFFFFFF00FF00FF00;
    v25 = *(_QWORD *)(v23 + 8) == 0x3C003C003C003C00 ? 1 : 3;
    *(_DWORD *)(v23 + 16) = v25 | v24;
    *(_DWORD *)(v23 + 20) = HIDWORD(v24);
    v26 = CA::OGL::Context::bind_image(v18, 0, (uint32x2_t *)a3, v22, 1u, 1, 0, 0, 0.0, &v42, 0);
    if (v26)
    {
      v28 = v26;
      v39[0] = 0.0;
      v39[1] = 0.0;
      v38[0] = 0;
      v38[1] = 0;
      v29 = *a2;
      v30 = (*a2)[1];
      v41[0] = **a2;
      v41[1] = v41[0] + a8;
      v31 = v29[3];
      v32 = v29[2] + v41[0];
      v41[2] = v32 - a8;
      v41[3] = v32;
      v40[0] = v30;
      v40[1] = v30 + a9;
      v40[2] = v31 + v30 - a9;
      v40[3] = v31 + v30;
      if (a6)
        v34 = 0x20000;
      else
        v34 = 134348800;
      v35 = (v34 & 0xFC3FFFFF | ((a7 & 0xF) << 22)) ^ 0x3C00000;
      CA::OGL::emit_nine_part_rect(v18, (uint64_t)a2, (uint64_t)v41, (uint64_t)v40, (uint64_t)v39, (uint64_t)v38, 0, 0, v35);
      result = (*(uint64_t (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v18 + 520))(v18, v28, 0);
      *(_BYTE *)(*(_QWORD *)(v18 + 16) + 16) = 0;
    }
    else
    {
      return CA::OGL::fill_rect(v18, (uint64_t)a2, a3, a4);
    }
  }
  return result;
}

void CA::OGL::stroke_rect(uint64_t a1, const CA::Transform **a2, double *a3, double *a4, double a5)
{
  double *v8;
  double v9;
  double v10;
  double v11;
  const CA::Transform *v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  int v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  const CA::Transform *v29;
  const CA::Transform *v30;
  _BOOL4 v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  uint64_t v36;
  double *v37;
  double *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  float16x4_t v46;
  int v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  BOOL v78;
  float64_t v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  _BOOL4 v85;
  double v86;
  int v87;
  uint64_t v88;
  float v89;
  float v90;
  float v91;
  float v92;
  double v93;
  float v94;
  double v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  _BOOL4 v108;
  BOOL v109;
  float v110;
  float v111;
  float v112;
  int v113;
  _BOOL4 v114;
  float v115;
  float v116;
  float v117;
  float v118;
  int v119;
  float v120;
  float v121;
  float v122;
  float v123;
  uint64_t v124;
  unint64_t v125;
  float16x4_t v126;
  uint64_t v127;
  float16x4_t v128;
  uint64_t v129;
  float16x4_t v130;
  uint64_t v131;
  float16x4_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  float16x4_t v136;
  uint64_t v137;
  float16x4_t v138;
  uint64_t v139;
  float16x4_t v140;
  uint64_t v141;
  float16x4_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  float16x4_t v152;
  uint64_t v153;
  float16x4_t v154;
  uint64_t v155;
  float16x4_t v156;
  uint64_t v157;
  float16x4_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  float16x4_t v162;
  uint64_t v163;
  float16x4_t v164;
  uint64_t v165;
  float16x4_t v166;
  uint64_t v167;
  float16x4_t v168;
  uint64_t v169;
  float64_t v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  float v185;
  float v186;
  float v187;
  double v188;
  float v189;
  double v190;
  float v191;
  float v192;
  float v193;
  double v194;
  float v195;
  float v196;
  double v197;
  float v198;
  double v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  double v210;
  float v211;
  double v212;
  float v213;
  float v214;
  double v215;
  double v216;
  float v217;
  double v218;
  float v219;
  double v220;
  float v221;
  double v222;
  float v223;
  double v224;
  float v225;
  double v226;
  float v227;
  double v228;
  float v229;
  double v230;
  float32x4_t v231;
  float32x4_t v232;
  uint64_t v233;
  double v234;
  double v235;
  double v236;
  double v237;
  int8x16_t v238;
  double v239;
  double v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  _QWORD v250[6];
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  uint64_t v263;

  v263 = *MEMORY[0x1E0C80C00];
  if (a5 > 0.001)
  {
    v8 = (double *)*a2;
    v10 = *((double *)*a2 + 2);
    v9 = *((double *)*a2 + 3);
    if (v10 >= v9)
      v11 = *((double *)*a2 + 3);
    else
      v11 = *((double *)*a2 + 2);
    if (v11 * 0.5 <= a5)
    {
      CA::OGL::fill_rect(a1, (uint64_t)a2, a3, a4);
      return;
    }
    if (v11 > 0.0)
    {
      v12 = a2[1];
      if ((*((_BYTE *)v12 + 144) & 0x10) != 0 && !CA::Mat4Impl::mat4_is_rectilinear(a2[1], (const double *)a2)
        || a2[3]
        || a2[4])
      {
        v13 = v8[1];
        v14 = *v8 + a5;
        v238.i64[0] = *(uint64_t *)v8;
        *(double *)&v238.i64[1] = v14;
        v239 = v10 + *(double *)v238.i64 - a5;
        v240 = v10 + *(double *)v238.i64;
        v234 = v13;
        v235 = v13 + a5;
        v236 = v9 + v13 - a5;
        v237 = v9 + v13;
        if (*((_DWORD *)a2 + 5) && (((_BYTE)a2[2] & 9) != 0 || vabdd_f64(a5, trunc(a5)) >= 0.001))
        {
          CA::OGL::stroke_round_rect((_QWORD *)a1, (float64x2_t **)a2, (double *)0xF, 0, 0.0, a5);
        }
        else
        {
          v261 = 0u;
          v262 = 0u;
          v259 = 0u;
          v260 = 0u;
          v257 = 0u;
          v258 = 0u;
          v255 = 0u;
          v256 = 0u;
          v253 = 0u;
          v254 = 0u;
          v251 = 0u;
          v252 = 0u;
          v249 = 0u;
          memset(v250, 0, sizeof(v250));
          if ((*(_DWORD *)(a1 + 136) & 0xFFFFFFF8) != 0)
          {
            v15 = 0;
            v16 = *(_QWORD *)(a1 + 120);
            v17 = 1;
            do
            {
              v18 = 0;
              v19 = 0;
              v20 = v17;
              do
              {
                if (v18 == 96 || v18 == 0)
                  v22 = v15;
                else
                  v22 = v15 ^ 3;
                if (v19 >= 2)
                  v23 = v15 ^ 3;
                else
                  v23 = v15;
                v24 = v238.i64[v22];
                v25 = (char *)&v249 + 128 * v15 + v18;
                v26 = *((_QWORD *)&v234 + v23);
                *(_QWORD *)v25 = v24;
                *((_QWORD *)v25 + 1) = v26;
                *((_OWORD *)v25 + 1) = xmmword_18474DF50;
                ++v19;
                v18 += 32;
              }
              while (v18 != 128);
              v17 = 0;
              v15 = 1;
            }
            while ((v20 & 1) != 0);
            v27 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
            for (i = 32; i != 416; i += 48)
              *(_QWORD *)(v16 + i) = v27;
            v29 = a2[3];
            if (v29)
              ((void (*)(const CA::Transform **, float64x2_t *, uint64_t, uint64_t, __n128))v29)(a2, &v249, v16, 8, (__n128)xmmword_18474DF50);
            CA::OGL::transform_vertices(&v249, (float32x4_t *)v16, (const double *)8, (float64x2_t *)a2[1]);
            v30 = a2[4];
            if (v30)
              ((void (*)(const CA::Transform **, uint64_t, uint64_t))v30)(a2, v16, 8);
            v31 = CA::OGL::Context::need_transparent_source((CA::OGL::Context *)a1);
            CA::OGL::emit_quad_indices(a1, (float64x2_t *)a2[5], CA::OGL::emit_five_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,double const*,double const*,float const*,float const*,float const*,float const*,unsigned int)::indices, 0x10uLL, 8u);
            if (v31)
            {
              v32 = vcvtq_f64_f32(*(float32x2_t *)(v16 + 8));
              v241 = vcvtq_f64_f32(*(float32x2_t *)v16);
              v242 = v32;
              v33 = vcvtq_f64_f32(*(float32x2_t *)(v16 + 56));
              v243 = vcvtq_f64_f32(*(float32x2_t *)(v16 + 48));
              v244 = v33;
              v34 = vcvtq_f64_f32(*(float32x2_t *)(v16 + 104));
              v245 = vcvtq_f64_f32(*(float32x2_t *)(v16 + 96));
              v246 = v34;
              v35 = vcvtq_f64_f32(*(float32x2_t *)(v16 + 152));
              v247 = vcvtq_f64_f32(*(float32x2_t *)(v16 + 144));
              v248 = v35;
              v233 = 0;
              CA::OGL::emit_quad_surround(a1, v241.f64, &v233);
            }
          }
        }
        return;
      }
      v36 = *((_QWORD *)v8 + 1);
      v241.f64[0] = *v8;
      *(_QWORD *)&v241.f64[1] = v36;
      v242.f64[0] = v10;
      v242.f64[1] = v9;
      v238.i64[0] = *(_QWORD *)&v241.f64[0];
      v238.i64[1] = v36;
      v239 = v10;
      v240 = v9;
      CA::BoundsImpl::inset((double *)v238.i64, a5, a5);
      CA::Rect::apply_transform((int8x16_t *)&v241, v12, v37);
      CA::Rect::apply_transform(&v238, v12, v38);
      v39 = *(double *)&v238.i64[1];
      v40 = v239 + *(double *)v238.i64;
      v42 = v241.f64[1];
      v41 = v241.f64[0];
      v43 = v242.f64[0] + v241.f64[0];
      v44 = v240 + *(double *)&v238.i64[1];
      v45 = v242.f64[1] + v241.f64[1];
      v46 = *(float16x4_t *)(*(_QWORD *)(a1 + 16) + 8);
      v47 = *((_DWORD *)a2 + 5);
      if (v47)
      {
        v230 = *(double *)v238.i64;
        if (v241.f64[0] != trunc(v241.f64[0])
          || v241.f64[1] != trunc(v241.f64[1])
          || v242.f64[0] != trunc(v242.f64[0])
          || v242.f64[1] != trunc(v242.f64[1])
          || *(double *)v238.i64 != trunc(*(double *)v238.i64)
          || *(double *)&v238.i64[1] != trunc(*(double *)&v238.i64[1])
          || v239 != trunc(v239)
          || v240 != trunc(v240))
        {
          v48 = floor(v241.f64[0]);
          v49 = ceil(v241.f64[0]);
          v50 = round(v241.f64[0]);
          if ((v47 & 1) == 0)
            v48 = v50;
          v228 = v48;
          if ((v47 & 1) != 0)
            v51 = v49;
          else
            v51 = v50;
          v210 = v51;
          v52 = floor(*(double *)v238.i64);
          v53 = ceil(*(double *)v238.i64);
          v54 = round(*(double *)v238.i64);
          if ((v47 & 0x20) == 0)
            v52 = v54;
          v190 = v52;
          if ((v47 & 0x20) != 0)
            v55 = v53;
          else
            v55 = v54;
          v224 = v55;
          v226 = v239 + *(double *)v238.i64;
          v56 = floor(v40);
          v57 = ceil(v40);
          v58 = round(v40);
          if ((v47 & 0x20) == 0)
            v56 = v58;
          v218 = v242.f64[0] + v241.f64[0];
          v220 = v56;
          if ((v47 & 0x20) != 0)
            v59 = v57;
          else
            v59 = v58;
          v215 = v59;
          v60 = floor(v43);
          v61 = ceil(v43);
          v62 = round(v43);
          if ((v47 & 2) != 0)
            v63 = v60;
          else
            v63 = v62;
          if ((v47 & 2) != 0)
            v64 = v61;
          else
            v64 = v62;
          v197 = v64;
          v65 = floor(v241.f64[1]);
          v66 = ceil(v241.f64[1]);
          v67 = round(v241.f64[1]);
          if ((v47 & 4) != 0)
            v68 = v65;
          else
            v68 = v67;
          if ((v47 & 4) != 0)
            v69 = v66;
          else
            v69 = v67;
          v194 = v69;
          v70 = floor(*(double *)&v238.i64[1]);
          v71 = ceil(*(double *)&v238.i64[1]);
          v72 = round(*(double *)&v238.i64[1]);
          if ((v47 & 0x40) == 0)
            v70 = v72;
          v188 = v70;
          if ((v47 & 0x40) != 0)
            v73 = v71;
          else
            v73 = v72;
          v222 = v73;
          v74 = floor(v44);
          v75 = ceil(v44);
          v76 = round(v44);
          if ((v47 & 0x80) == 0)
            v74 = v76;
          v216 = v74;
          v212 = v240 + *(double *)&v238.i64[1];
          if ((v47 & 0x80) != 0)
            v77 = v75;
          else
            v77 = v76;
          v78 = (*((_DWORD *)a2 + 5) & 8) == 0;
          v79 = *(double *)(*(_QWORD *)(a1 + 232) + 8);
          *(_QWORD *)&v249.f64[0] = a1;
          v249.f64[1] = v79;
          v80 = floor(v45);
          v81 = ceil(v45);
          v82 = round(v45);
          memset(v250, 0, 40);
          v199 = v242.f64[1] + v241.f64[1];
          if (v78)
            v83 = v82;
          else
            v83 = v80;
          LOWORD(v250[2]) = 256;
          if (v78)
            v84 = v82;
          else
            v84 = v81;
          CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v249);
          v234 = 0.0;
          v235 = 0.0;
          v85 = v210 > v228;
          if (v197 > v63)
            v85 = 1;
          if (v194 > v68)
            v85 = 1;
          v86 = v84;
          v87 = v84 > v83 || v85;
          v88 = a1 + 818;
          v89 = v228;
          v229 = v89;
          v90 = v68;
          v214 = v90;
          v91 = v210;
          v92 = v194;
          v93 = v210;
          v94 = v210 - v41;
          v95 = v194;
          v96 = v194 - v42;
          v97 = v230 - v190;
          v98 = v39 - v188;
          v208 = v98;
          v209 = v97;
          v99 = 1.0 - v97;
          v100 = v98 - 1.0;
          v207 = (float)(v100 * v99) + 1.0;
          v101 = v215 - v226;
          v206 = v101;
          v102 = 1.0 - v101;
          v205 = (float)(v100 * v102) + 1.0;
          v103 = v77 - v212;
          v204 = v103;
          v104 = v103 - 1.0;
          v202 = (float)(v104 * v102) + 1.0;
          v203 = (float)(v104 * v99) + 1.0;
          v201 = v96 * v94;
          v105 = v63;
          v106 = v197;
          v227 = v106;
          v107 = v218 - v63;
          v211 = v96;
          v213 = v94;
          v198 = v96 * v107;
          v108 = v190 > v93;
          v109 = v63 <= v215;
          v110 = v83;
          v111 = v86;
          v196 = v111;
          v112 = v199 - v83;
          if (!v109)
            v108 = 1;
          v193 = v112 * v94;
          v195 = v199 - v83;
          if (v188 > v95)
            v108 = 1;
          v200 = v107;
          v192 = v112 * v107;
          v113 = v83 > v77 || v108;
          v114 = v224 > v190;
          if (v215 > v220)
            v114 = 1;
          v115 = v188;
          v219 = v115;
          v116 = v190;
          if (v222 > v188)
            v114 = 1;
          v109 = v77 <= v216;
          v117 = v77;
          v118 = v215;
          v119 = !v109 || v114;
          v120 = v224;
          v225 = v120;
          v121 = v222;
          v223 = v121;
          v122 = v220;
          v221 = v122;
          v123 = v216;
          v217 = v123;
          v191 = v190;
          v187 = v92;
          v185 = v117;
          v186 = v110;
          while (1)
          {
            while (1)
            {
              if (!CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v249, (int32x2_t *)&v234))return;
              if (!v87)
                break;
              if (*(_DWORD *)(a1 + 92))
                v124 = 24;
              else
                v124 = 16;
              if ((unint64_t)(*(_QWORD *)(a1 + 128) + 16) > *(_QWORD *)(a1 + 136)
                || (v125 = *(_QWORD *)(a1 + 112)) != 0 && *(_QWORD *)(a1 + 104) + v124 > v125)
              {
                *(_WORD *)(a1 + 816) |= 0x20u;
                CA::OGL::Context::array_flush(a1);
                *(_QWORD *)(a1 + 128) = 0;
                *(_QWORD *)(a1 + 96) = v88;
                *(_OWORD *)(a1 + 104) = xmmword_18474E060;
              }
              CA::OGL::Context::array_rect((_QWORD *)a1, v229, v214, v91, v92);
              v231 = vcvtq_f32_f16(v46);
              v126 = vcvt_f16_f32(vmulq_n_f32(v231, v201));
              v127 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
              *(float16x4_t *)(v127 - 160) = v126;
              *(float16x4_t *)(v127 - 112) = v126;
              *(float16x4_t *)(v127 - 64) = v126;
              *(float16x4_t *)(v127 - 16) = v126;
              CA::OGL::Context::array_rect((_QWORD *)a1, v91, v214, v105, v92);
              v128 = vcvt_f16_f32(vmulq_n_f32(v231, v211));
              v129 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
              *(float16x4_t *)(v129 - 160) = v128;
              *(float16x4_t *)(v129 - 112) = v128;
              *(float16x4_t *)(v129 - 64) = v128;
              *(float16x4_t *)(v129 - 16) = v128;
              CA::OGL::Context::array_rect((_QWORD *)a1, v105, v214, v227, v92);
              v130 = vcvt_f16_f32(vmulq_n_f32(v231, v198));
              v131 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
              *(float16x4_t *)(v131 - 160) = v130;
              *(float16x4_t *)(v131 - 112) = v130;
              *(float16x4_t *)(v131 - 64) = v130;
              *(float16x4_t *)(v131 - 16) = v130;
              CA::OGL::Context::array_rect((_QWORD *)a1, v229, v92, v91, v110);
              v132 = vcvt_f16_f32(vmulq_n_f32(v231, v213));
              v133 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
              *(float16x4_t *)(v133 - 160) = v132;
              *(float16x4_t *)(v133 - 112) = v132;
              *(float16x4_t *)(v133 - 64) = v132;
              *(float16x4_t *)(v133 - 16) = v132;
              if (*(_DWORD *)(a1 + 92))
                v134 = 24;
              else
                v134 = 16;
              if ((unint64_t)(*(_QWORD *)(a1 + 128) + 16) > *(_QWORD *)(a1 + 136)
                || (v135 = *(_QWORD *)(a1 + 112)) != 0 && *(_QWORD *)(a1 + 104) + v134 > v135)
              {
                *(_WORD *)(a1 + 816) |= 0x20u;
                CA::OGL::Context::array_flush(a1);
                *(_QWORD *)(a1 + 128) = 0;
                *(_QWORD *)(a1 + 96) = v88;
                *(_OWORD *)(a1 + 104) = xmmword_18474E060;
              }
              CA::OGL::Context::array_rect((_QWORD *)a1, v105, v92, v227, v110);
              v136 = vcvt_f16_f32(vmulq_n_f32(v231, v200));
              v137 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
              *(float16x4_t *)(v137 - 160) = v136;
              *(float16x4_t *)(v137 - 112) = v136;
              *(float16x4_t *)(v137 - 64) = v136;
              *(float16x4_t *)(v137 - 16) = v136;
              CA::OGL::Context::array_rect((_QWORD *)a1, v229, v110, v91, v196);
              v138 = vcvt_f16_f32(vmulq_n_f32(v231, v193));
              v139 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
              *(float16x4_t *)(v139 - 160) = v138;
              *(float16x4_t *)(v139 - 112) = v138;
              *(float16x4_t *)(v139 - 64) = v138;
              *(float16x4_t *)(v139 - 16) = v138;
              CA::OGL::Context::array_rect((_QWORD *)a1, v91, v110, v105, v196);
              v140 = vcvt_f16_f32(vmulq_n_f32(v231, v195));
              v141 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
              *(float16x4_t *)(v141 - 160) = v140;
              *(float16x4_t *)(v141 - 112) = v140;
              *(float16x4_t *)(v141 - 64) = v140;
              *(float16x4_t *)(v141 - 16) = v140;
              CA::OGL::Context::array_rect((_QWORD *)a1, v105, v110, v227, v196);
              v142 = vcvt_f16_f32(vmulq_n_f32(v231, v192));
              v143 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
              *(float16x4_t *)(v143 - 160) = v142;
              *(float16x4_t *)(v143 - 112) = v142;
              *(float16x4_t *)(v143 - 64) = v142;
              *(float16x4_t *)(v143 - 16) = v142;
              v116 = v191;
              v189 = v215;
              v118 = v189;
              if (!v113)
                goto LABEL_116;
LABEL_133:
              if (*(_DWORD *)(a1 + 92))
                v144 = 24;
              else
                v144 = 16;
              if ((unint64_t)(*(_QWORD *)(a1 + 128) + 16) > *(_QWORD *)(a1 + 136)
                || (v145 = *(_QWORD *)(a1 + 112)) != 0 && *(_QWORD *)(a1 + 104) + v144 > v145)
              {
                *(_WORD *)(a1 + 816) |= 0x20u;
                CA::OGL::Context::array_flush(a1);
                *(_QWORD *)(a1 + 128) = 0;
                *(_QWORD *)(a1 + 96) = v88;
                *(_OWORD *)(a1 + 104) = xmmword_18474E060;
              }
              CA::OGL::Context::array_rect((_QWORD *)a1, v91, v92, v105, v219);
              v146 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
              *(float16x4_t *)(v146 - 160) = v46;
              *(float16x4_t *)(v146 - 112) = v46;
              *(float16x4_t *)(v146 - 64) = v46;
              *(float16x4_t *)(v146 - 16) = v46;
              CA::OGL::Context::array_rect((_QWORD *)a1, v91, v219, v116, v117);
              v147 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
              *(float16x4_t *)(v147 - 160) = v46;
              *(float16x4_t *)(v147 - 112) = v46;
              *(float16x4_t *)(v147 - 64) = v46;
              *(float16x4_t *)(v147 - 16) = v46;
              CA::OGL::Context::array_rect((_QWORD *)a1, v118, v219, v105, v117);
              v148 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
              *(float16x4_t *)(v148 - 160) = v46;
              *(float16x4_t *)(v148 - 112) = v46;
              *(float16x4_t *)(v148 - 64) = v46;
              *(float16x4_t *)(v148 - 16) = v46;
              CA::OGL::Context::array_rect((_QWORD *)a1, v91, v117, v105, v110);
              v149 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
              *(float16x4_t *)(v149 - 160) = v46;
              *(float16x4_t *)(v149 - 112) = v46;
              *(float16x4_t *)(v149 - 64) = v46;
              *(float16x4_t *)(v149 - 16) = v46;
              if (v119)
              {
LABEL_141:
                if (*(_DWORD *)(a1 + 92))
                  v150 = 24;
                else
                  v150 = 16;
                if ((unint64_t)(*(_QWORD *)(a1 + 128) + 16) > *(_QWORD *)(a1 + 136)
                  || (v151 = *(_QWORD *)(a1 + 112)) != 0 && *(_QWORD *)(a1 + 104) + v150 > v151)
                {
                  *(_WORD *)(a1 + 816) |= 0x20u;
                  CA::OGL::Context::array_flush(a1);
                  *(_QWORD *)(a1 + 128) = 0;
                  *(_QWORD *)(a1 + 96) = v88;
                  *(_OWORD *)(a1 + 104) = xmmword_18474E060;
                }
                CA::OGL::Context::array_rect((_QWORD *)a1, v116, v219, v225, v223);
                v232 = vcvtq_f32_f16(v46);
                v152 = vcvt_f16_f32(vmulq_n_f32(v232, v207));
                v153 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
                *(float16x4_t *)(v153 - 160) = v152;
                *(float16x4_t *)(v153 - 112) = v152;
                *(float16x4_t *)(v153 - 64) = v152;
                *(float16x4_t *)(v153 - 16) = v152;
                CA::OGL::Context::array_rect((_QWORD *)a1, v225, v219, v221, v223);
                v154 = vcvt_f16_f32(vmulq_n_f32(v232, v208));
                v155 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
                *(float16x4_t *)(v155 - 160) = v154;
                *(float16x4_t *)(v155 - 112) = v154;
                *(float16x4_t *)(v155 - 64) = v154;
                *(float16x4_t *)(v155 - 16) = v154;
                CA::OGL::Context::array_rect((_QWORD *)a1, v221, v219, v118, v223);
                v156 = vcvt_f16_f32(vmulq_n_f32(v232, v205));
                v157 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
                *(float16x4_t *)(v157 - 160) = v156;
                *(float16x4_t *)(v157 - 112) = v156;
                *(float16x4_t *)(v157 - 64) = v156;
                *(float16x4_t *)(v157 - 16) = v156;
                CA::OGL::Context::array_rect((_QWORD *)a1, v116, v223, v225, v217);
                v158 = vcvt_f16_f32(vmulq_n_f32(v232, v209));
                v159 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
                *(float16x4_t *)(v159 - 160) = v158;
                *(float16x4_t *)(v159 - 112) = v158;
                *(float16x4_t *)(v159 - 64) = v158;
                *(float16x4_t *)(v159 - 16) = v158;
                if (*(_DWORD *)(a1 + 92))
                  v160 = 24;
                else
                  v160 = 16;
                if ((unint64_t)(*(_QWORD *)(a1 + 128) + 16) > *(_QWORD *)(a1 + 136)
                  || (v161 = *(_QWORD *)(a1 + 112)) != 0 && *(_QWORD *)(a1 + 104) + v160 > v161)
                {
                  *(_WORD *)(a1 + 816) |= 0x20u;
                  CA::OGL::Context::array_flush(a1);
                  *(_QWORD *)(a1 + 128) = 0;
                  *(_QWORD *)(a1 + 96) = v88;
                  *(_OWORD *)(a1 + 104) = xmmword_18474E060;
                }
                CA::OGL::Context::array_rect((_QWORD *)a1, v221, v223, v118, v217);
                v162 = vcvt_f16_f32(vmulq_n_f32(v232, v206));
                v163 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
                *(float16x4_t *)(v163 - 160) = v162;
                *(float16x4_t *)(v163 - 112) = v162;
                *(float16x4_t *)(v163 - 64) = v162;
                *(float16x4_t *)(v163 - 16) = v162;
                v117 = v185;
                CA::OGL::Context::array_rect((_QWORD *)a1, v116, v217, v225, v185);
                v164 = vcvt_f16_f32(vmulq_n_f32(v232, v203));
                v165 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
                *(float16x4_t *)(v165 - 160) = v164;
                *(float16x4_t *)(v165 - 112) = v164;
                *(float16x4_t *)(v165 - 64) = v164;
                *(float16x4_t *)(v165 - 16) = v164;
                CA::OGL::Context::array_rect((_QWORD *)a1, v225, v217, v221, v185);
                v166 = vcvt_f16_f32(vmulq_n_f32(v232, v204));
                v167 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
                *(float16x4_t *)(v167 - 160) = v166;
                *(float16x4_t *)(v167 - 112) = v166;
                *(float16x4_t *)(v167 - 64) = v166;
                *(float16x4_t *)(v167 - 16) = v166;
                CA::OGL::Context::array_rect((_QWORD *)a1, v221, v217, v118, v185);
                v168 = vcvt_f16_f32(vmulq_n_f32(v232, v202));
                v169 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
                *(float16x4_t *)(v169 - 160) = v168;
                *(float16x4_t *)(v169 - 112) = v168;
                *(float16x4_t *)(v169 - 64) = v168;
                *(float16x4_t *)(v169 - 16) = v168;
                v110 = v186;
                v92 = v187;
              }
            }
            if (v113)
              goto LABEL_133;
LABEL_116:
            if (v119)
              goto LABEL_141;
          }
        }
      }
      else if ((*((_BYTE *)a2 + 18) & 0x10) != 0)
      {
        v41 = floor(v241.f64[0] + 0.001);
        v230 = ceil(*(double *)v238.i64 + -0.001);
        v40 = floor(v40 + 0.001);
        v43 = ceil(v43 + -0.001);
        v42 = floor(v241.f64[1] + 0.001);
        v39 = ceil(*(double *)&v238.i64[1] + -0.001);
        v44 = floor(v44 + 0.001);
        v45 = ceil(v45 + -0.001);
      }
      else
      {
        v41 = round(v241.f64[0]);
        v230 = round(*(double *)v238.i64);
        v40 = round(v40);
        v43 = round(v43);
        v42 = round(v241.f64[1]);
        v39 = round(*(double *)&v238.i64[1]);
        v44 = round(v44);
        v45 = round(v45);
      }
      v170 = *(double *)(*(_QWORD *)(a1 + 232) + 8);
      *(_QWORD *)&v249.f64[0] = a1;
      v249.f64[1] = v170;
      memset(v250, 0, 40);
      LOWORD(v250[2]) = 256;
      CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v249);
      v234 = 0.0;
      v235 = 0.0;
      v171 = v41;
      v172 = v42;
      v173 = v43;
      v174 = v39;
      v176 = v44;
      v177 = v40;
      v178 = v45;
      while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v249, (int32x2_t *)&v234))
      {
        if (*(_DWORD *)(a1 + 92))
          v179 = 24;
        else
          v179 = 16;
        if ((unint64_t)(*(_QWORD *)(a1 + 128) + 16) > *(_QWORD *)(a1 + 136)
          || (v180 = *(_QWORD *)(a1 + 112)) != 0 && *(_QWORD *)(a1 + 104) + v179 > v180)
        {
          *(_WORD *)(a1 + 816) |= 0x20u;
          CA::OGL::Context::array_flush(a1);
          *(_QWORD *)(a1 + 128) = 0;
          *(_QWORD *)(a1 + 96) = a1 + 818;
          *(_OWORD *)(a1 + 104) = xmmword_18474E060;
        }
        CA::OGL::Context::array_rect((_QWORD *)a1, v171, v172, v173, v174);
        v181 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
        *(float16x4_t *)(v181 - 160) = v46;
        *(float16x4_t *)(v181 - 112) = v46;
        *(float16x4_t *)(v181 - 64) = v46;
        *(float16x4_t *)(v181 - 16) = v46;
        v175 = v230;
        CA::OGL::Context::array_rect((_QWORD *)a1, v171, v174, v175, v176);
        v182 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
        *(float16x4_t *)(v182 - 160) = v46;
        *(float16x4_t *)(v182 - 112) = v46;
        *(float16x4_t *)(v182 - 64) = v46;
        *(float16x4_t *)(v182 - 16) = v46;
        CA::OGL::Context::array_rect((_QWORD *)a1, v177, v174, v173, v176);
        v183 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
        *(float16x4_t *)(v183 - 160) = v46;
        *(float16x4_t *)(v183 - 112) = v46;
        *(float16x4_t *)(v183 - 64) = v46;
        *(float16x4_t *)(v183 - 16) = v46;
        CA::OGL::Context::array_rect((_QWORD *)a1, v171, v176, v173, v178);
        v184 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
        *(float16x4_t *)(v184 - 160) = v46;
        *(float16x4_t *)(v184 - 112) = v46;
        *(float16x4_t *)(v184 - 64) = v46;
        *(float16x4_t *)(v184 - 16) = v46;
      }
    }
  }
}

void CA::OGL::stroke_uneven_round_rect(uint64_t a1, float64x2_t **a2, double *a3, double *a4, double a5)
{
  float64x2_t *v6;
  double v7;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  float64x2_t *v18;
  uint64_t v19;
  double v20;
  double v21;
  float64x2_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  float64x2_t v33;
  float64x2_t v35;
  int8x16_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  int8x16_t v41;
  float32x2_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float64x2_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  uint64_t v57;
  uint64_t i;
  uint64_t v59;
  float v60;
  double v61;
  float v62;
  double v63;
  float v64;
  float v65;
  uint64_t v66;
  uint64_t j;
  float64x2_t *v68;
  float64x2_t *v69;
  int v70;
  _BOOL4 v71;
  float32x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float32x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  double v80;
  uint64_t v81;
  double v82;
  double v83;
  _OWORD v84[8];
  float64x2_t v85[2];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = (*a2)[1].f64[0];
  if (v7 >= (*a2)[1].f64[1])
    v7 = (*a2)[1].f64[1];
  if (v7 > 0.0)
  {
    v12 = *a3;
    v13 = a3[2];
    if (*a3 == v13)
    {
      v14 = a3[1];
      v15 = a3[3];
      if (v14 == v15)
      {
        v16 = a3[4];
        if (v13 == v16)
        {
          v17 = a3[5];
          if (v15 == v17 && v16 == a3[6] && v17 == a3[7] && v12 == v14)
          {
            CA::OGL::stroke_round_rect((_QWORD *)a1, a2, (double *)0xF, a4, v12, a5);
            return;
          }
        }
      }
    }
    v82 = 0.0;
    v83 = 0.0;
    v18 = a2[1];
    v80 = a5;
    if ((LOBYTE(v18[9].f64[0]) & 0x10) != 0)
    {
      CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v18, &v83, &v82, a4);
      a5 = v80;
    }
    else
    {
      v82 = v18[8].f64[0];
      v83 = v82;
    }
    v19 = 0;
    v20 = 0.0;
    do
    {
      v21 = a3[v19];
      if (v21 <= a3[v19 + 1])
        v21 = a3[v19 + 1];
      if (v20 <= v21)
        v20 = v21;
      v19 += 2;
    }
    while (v19 != 8);
    v22.f64[0] = v83;
    if (v83 <= v82)
      v23 = v82;
    else
      v23 = v83;
    v24 = v23 * v20;
    if ((_DWORD)a4)
      v24 = v24 * 1.528665;
    if (v24 < 1.0)
    {
      CA::OGL::stroke_rect(a1, (const CA::Transform **)a2, a3, a4, a5);
      return;
    }
    v25 = 0;
    v26 = v6->f64[0];
    v27 = v6->f64[1];
    v22.f64[1] = v82;
    __asm { FMOV            V2.2D, #0.5 }
    v33 = v6[1];
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    __asm { FMOV            V0.2D, #1.0 }
    v35 = vdivq_f64((float64x2_t)_Q0, vsubq_f64(v33, (float64x2_t)vdupq_lane_s64(COERCE__INT64(a5 + a5), 0)));
    v36 = (int8x16_t)vcvtq_f64_f32(vcvt_f32_f64(vdivq_f64(_Q2, v22)));
    v37 = vdivq_f64((float64x2_t)_Q0, v33);
    v38 = vnegq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&a5, 0));
    v39 = (float32x2_t)vdup_n_s32(0x3FC3AB4Bu);
    do
    {
      v40 = vcvt_f32_f64(vmulq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)&a3[2 * v25], (float64x2_t)v36), *(int8x16_t *)&a3[2 * v25], v36), v37));
      *((float32x2_t *)&v96 + v25) = v40;
      v41 = (int8x16_t)vmlaq_f64(v38, vcvtq_f64_f32(v40), v33);
      v42 = vcvt_f32_f64(vmulq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v36, (float64x2_t)v41), v36, v41), v35));
      *((float32x2_t *)&v94 + v25) = v42;
      if ((_DWORD)a4)
      {
        *((float32x2_t *)&v96 + v25) = vmul_f32(v40, v39);
        *((float32x2_t *)&v94 + v25) = vmul_f32(v42, v39);
      }
      ++v25;
    }
    while (v25 != 4);
    v78 = v33;
    v79 = v35;
    *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 6;
    v92 = 0;
    v93 = 0;
    if ((_DWORD)a4)
    {
      v43.i64[0] = __PAIR64__(HIDWORD(v96), v96);
      v44.i64[0] = __PAIR64__(DWORD1(v97), DWORD2(v96));
      v44.i64[1] = __PAIR64__(DWORD1(v96), DWORD2(v97));
      v43.i64[1] = __PAIR64__(HIDWORD(v97), v97);
      v45 = vaddq_f32(v44, v43);
      v46 = (float64x2_t)vdupq_n_s64(0x400721E8A7A4B61BuLL);
      v47 = (int8x16_t)vsubq_f64(v46, vdivq_f64(v46, vcvt_hight_f64_f32(v45)));
      v48 = (int8x16_t)vsubq_f64(v46, vdivq_f64(v46, vcvtq_f64_f32(*(float32x2_t *)v45.f32)));
      v49 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v47, (float64x2_t)_Q0), _Q0, v47);
      v50 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v48, (float64x2_t)_Q0), _Q0, v48);
      v85[0] = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vbicq_s8(v50, (int8x16_t)vcltzq_f64((float64x2_t)v50))), (float64x2_t)vbicq_s8(v49, (int8x16_t)vcltzq_f64((float64x2_t)v49)));
      v50.i64[0] = __PAIR64__(HIDWORD(v94), v94);
      v51.i64[0] = __PAIR64__(DWORD1(v95), DWORD2(v94));
      v51.i64[1] = __PAIR64__(DWORD1(v94), DWORD2(v95));
      v50.i64[1] = __PAIR64__(HIDWORD(v95), v95);
      v52 = vaddq_f32(v51, (float32x4_t)v50);
      v53 = (int8x16_t)vsubq_f64(v46, vdivq_f64(v46, vcvt_hight_f64_f32(v52)));
      v54 = (int8x16_t)vsubq_f64(v46, vdivq_f64(v46, vcvtq_f64_f32(*(float32x2_t *)v52.f32)));
      v55 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v53, (float64x2_t)_Q0), _Q0, v53);
      v56 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v54, (float64x2_t)_Q0), _Q0, v54);
      v84[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vbicq_s8(v56, (int8x16_t)vcltzq_f64((float64x2_t)v56))), (float64x2_t)vbicq_s8(v55, (int8x16_t)vcltzq_f64((float64x2_t)v55)));
      (*(void (**)(uint64_t, _QWORD, __int128 *, uint64_t *, double *, float64x2_t *))(*(_QWORD *)a1 + 488))(a1, 0, &v96, &v93, a4, v85);
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t *, double *, _OWORD *))(*(_QWORD *)a1 + 488))(a1, 1, &v94, &v92, a4, v84);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD, __int128 *, uint64_t *))(*(_QWORD *)a1 + 480))(a1, 0, &v96, &v93);
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t *))(*(_QWORD *)a1 + 480))(a1, 1, &v94, &v92);
    }
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v85[1] = 0u;
    if ((*(_DWORD *)(a1 + 136) & 0xFFFFFFFC) != 0)
    {
      v57 = *(_QWORD *)(a1 + 120);
      for (i = 1; i != 9; i += 2)
        v85[i] = (float64x2_t)xmmword_18474DF50;
      v85[0].f64[0] = v26;
      v85[0].f64[1] = v27;
      *(double *)&v86 = v78.f64[0] + v26;
      *((double *)&v86 + 1) = v27;
      *(double *)&v88 = v26;
      *((double *)&v88 + 1) = v78.f64[1] + v27;
      *(double *)&v90 = v78.f64[0] + v26;
      *((double *)&v90 + 1) = v78.f64[1] + v27;
      v59 = v93;
      *(_DWORD *)(v57 + 64) = HIDWORD(v93);
      *(_DWORD *)(v57 + 68) = v59;
      *(_DWORD *)(v57 + 16) = v59;
      *(_DWORD *)(v57 + 20) = v59;
      *(_DWORD *)(v57 + 160) = HIDWORD(v59);
      *(_DWORD *)(v57 + 164) = HIDWORD(v59);
      *(_QWORD *)(v57 + 112) = v59;
      v60 = *(float *)&v92 - v80 * v79.f64[0];
      v61 = *((float *)&v92 + 1);
      v62 = v80 * v79.f64[0] + *((float *)&v92 + 1);
      v63 = vmuld_lane_f64(v80, v79, 1);
      v64 = *(float *)&v92 - v63;
      *(float *)(v57 + 72) = v62;
      *(float *)(v57 + 76) = v64;
      *(float *)(v57 + 24) = v60;
      *(float *)(v57 + 28) = v64;
      v65 = v63 + v61;
      *(float *)(v57 + 168) = v62;
      *(float *)(v57 + 172) = v65;
      *(float *)(v57 + 120) = v60;
      *(float *)(v57 + 124) = v65;
      v66 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
      for (j = 32; j != 224; j += 48)
        *(_QWORD *)(v57 + j) = v66;
      v68 = a2[3];
      if (v68)
        ((void (*)(float64x2_t **, float64x2_t *, uint64_t, uint64_t))v68)(a2, v85, v57, 4);
      CA::OGL::transform_vertices(v85, (float32x4_t *)v57, (const double *)4, a2[1]);
      v69 = a2[4];
      if (v69)
        ((void (*)(float64x2_t **, uint64_t, uint64_t))v69)(a2, v57, 4);
      v70 = *((_DWORD *)a2 + 5);
      if ((v70 & 0xF) == 0 || ((_BYTE)a2[2] & 9) == 0)
        goto LABEL_52;
      if ((v70 & 4) != 0)
      {
        CA::OGL::aa_adjust_vertices(v57, v57 + 96, 48, 2);
        v70 = *((_DWORD *)a2 + 5);
      }
      if ((v70 & 8) != 0)
      {
        CA::OGL::aa_adjust_vertices(v57 + 96, v57, 48, 2);
        v70 = *((_DWORD *)a2 + 5);
        if ((v70 & 1) == 0)
        {
LABEL_50:
          if ((v70 & 2) == 0)
            goto LABEL_52;
          goto LABEL_51;
        }
      }
      else if ((v70 & 1) == 0)
      {
        goto LABEL_50;
      }
      CA::OGL::aa_adjust_vertices(v57, v57 + 48, 96, 2);
      if ((*((_DWORD *)a2 + 5) & 2) == 0)
      {
LABEL_52:
        v71 = CA::OGL::Context::need_transparent_source((CA::OGL::Context *)a1);
        CA::OGL::emit_quad_indices(a1, a2[5], CA::OGL::stroke_uneven_round_rect(CA::OGL::Context &,CA::OGL::RectState const&,CA::Vec2<double> *,double,unsigned int)::indices, 4uLL, 4u);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 520))(a1, 0, 0);
        *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 0;
        if (v71)
        {
          v84[0] = vcvtq_f64_f32(*(float32x2_t *)v57);
          v72 = *(float32x2_t *)(v57 + 56);
          v73 = vcvtq_f64_f32(*(float32x2_t *)(v57 + 48));
          v84[1] = vcvtq_f64_f32(*(float32x2_t *)(v57 + 8));
          v84[2] = v73;
          v74 = vcvtq_f64_f32(v72);
          v75 = *(float32x2_t *)(v57 + 152);
          v76 = vcvtq_f64_f32(*(float32x2_t *)(v57 + 144));
          v84[3] = v74;
          v84[4] = v76;
          v77 = vcvtq_f64_f32(*(float32x2_t *)(v57 + 96));
          v84[5] = vcvtq_f64_f32(v75);
          v84[6] = v77;
          v84[7] = vcvtq_f64_f32(*(float32x2_t *)(v57 + 104));
          v81 = 0;
          CA::OGL::emit_quad_surround(a1, (const double *)v84, &v81);
        }
        return;
      }
LABEL_51:
      CA::OGL::aa_adjust_vertices(v57 + 48, v57, 96, 2);
      goto LABEL_52;
    }
  }
}

uint64_t CA::OGL::fill_pattern_rect(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, float64x2_t *a6, unsigned int a7, int a8, float a9, char a10, char a11)
{
  uint64_t result;
  int32x2_t *v21;
  int32x2_t *v22;
  uint32x2_t v23;
  int32x2_t v24;
  uint32x2_t v25;
  __int128 v26;
  int32x2_t v27;
  uint32x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  int v31;
  int64x2_t v32;
  int64x2_t v33;
  int8x16_t v34;
  int32x2_t v35;
  float64x2_t v36;
  int64x2_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  int64x2_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  const double *v53;
  const double *v54;
  __int128 v55;
  const double *v56;
  const double *v57;
  float64x2_t v58;
  double v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  char v63;
  const double *v64;
  const double *v65;
  double v66;
  double v67;
  double v68;
  uint64_t v69;
  float64x2_t v70;
  double v71;
  double v72;
  double v73;
  double v74;
  unsigned int v75;
  int v76;
  _BOOL4 is_rectilinear;
  uint64_t v78;
  BOOL v79;
  double *v80;
  const float *v81;
  double v82;
  double v83;
  double *v84;
  double v85;
  double v86;
  float64x2_t v87;
  float64x2_t v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v96;
  double v97;
  float v98;
  float v99;
  double v100;
  double v101;
  float v102;
  float v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unint64_t v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double *v114;
  const float *v115;
  double v116;
  double v117;
  uint64_t v118;
  float64x2_t *v119;
  double *v120;
  float64x2_t v121;
  double v122;
  double v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  __int128 v134;
  float64x2_t v135;
  __int128 v136;
  float64x2_t v137;
  float64x2_t v138;
  int8x16_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  int8x16_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  float64x2_t v159;
  float64x2_t v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  _QWORD v169[3];
  __int128 v170;
  __int128 v171;
  _QWORD v172[3];
  __int128 v173;
  __int128 v174;
  float64x2_t v175;
  float64x2_t v176;
  unint64_t v177;
  unint64_t v178;
  float32x4_t v179;
  uint64_t v180;

  v180 = *MEMORY[0x1E0C80C00];
  v179 = 0uLL;
  v177 = 0;
  v178 = 0;
  v175 = 0u;
  v176 = 0u;
  if (!*(_QWORD *)(a2 + 128))
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 0;
    v149.i64[0] = a3;
    v149.i64[1] = a5;
    v150 = 0uLL;
    v151 = 0uLL;
    result = (uint64_t)CA::OGL::emit_one_part_rect((CA::OGL::Context *)a1, (uint64_t)&v149, 0, 0, 0);
LABEL_15:
    *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 0;
    return result;
  }
  v134 = 0uLL;
  result = CA::Shape::get_bounds(*(_QWORD *)(*(_QWORD *)(a1 + 232) + 8), (int *)&v134);
  v21 = *(int32x2_t **)(a1 + 248);
  if (v21)
    v22 = v21 + 4;
  else
    v22 = (int32x2_t *)(a1 + 184);
  v23 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v134 + 8));
  if ((vpmax_u32(v23, v23).u32[0] & 0x80000000) == 0)
  {
    v24 = v22[1];
    v25 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v24);
    if ((vpmax_u32(v25, v25).u32[0] & 0x80000000) == 0)
    {
      *(int32x2_t *)&v26 = vmax_s32(*(int32x2_t *)&v134, *v22);
      v27 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&v134, *(int32x2_t *)((char *)&v134 + 8)), vadd_s32(*v22, v24)), *(int32x2_t *)&v26);
      v28 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v27);
      if ((vpmax_u32(v28, v28).u32[0] & 0x80000000) == 0)
      {
        *((int32x2_t *)&v26 + 1) = v27;
        v134 = v26;
        v29 = *a6;
        v30 = a6[1];
        v137 = *a6;
        v138 = v30;
        v31 = v27.i32[1];
        if (v27.i32[0] > v27.i32[1])
          v31 = v27.i32[0];
        v32 = vclezq_f64(v30);
        if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v32, 1), (int8x16_t)v32).u64[0] & 0x8000000000000000) == 0)
        {
          v33.i64[0] = v27.i32[0];
          v33.i64[1] = v27.i32[1];
          v34 = (int8x16_t)vcvtq_f64_s64(v33);
          v35 = vdup_n_s32(v31 > 1073741822);
          v33.i64[0] = v35.u32[0];
          v33.i64[1] = v35.u32[1];
          v36 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v33, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v34);
          v37 = vclezq_f64(v36);
          v38 = (int32x4_t)vdupq_laneq_s64(v37, 1);
          v39 = (int32x4_t)vorrq_s8((int8x16_t)v38, (int8x16_t)v37);
          if (v39.i64[0] < 0)
            goto LABEL_17;
          v39.i32[0] = v31;
          v38.i32[0] = 1073741822;
          v40.i64[0] = (int)v26;
          v40.i64[1] = SDWORD1(v26);
          v41 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v39, v38), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v40));
          v42 = vaddq_f64(v41, v36);
          v43 = vmaxnmq_f64(v29, v41);
          v44 = vsubq_f64(vminnmq_f64(vaddq_f64(v29, v30), v42), v43);
          v45 = vclezq_f64(v44);
          if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v45, 1), (int8x16_t)v45).u64[0] & 0x8000000000000000) != 0)
          {
LABEL_17:
            v138 = 0uLL;
          }
          else
          {
            v137 = v43;
            v138 = v44;
          }
        }
        v158 = 0;
        v148 = 0;
        v146 = 0u;
        v147 = 0u;
        v144 = 0u;
        v145 = 0u;
        v142 = 0u;
        v143 = 0u;
        v140 = 0u;
        v141 = 0u;
        v139 = 0u;
        CA::Transform::set_affine((CA::Transform *)&v139, *(double *)(a2 + 16), *(double *)(a2 + 24), *(double *)(a2 + 32), *(double *)(a2 + 40), *(double *)(a2 + 48), *(double *)(a2 + 56));
        CA::Transform::translate((CA::Transform *)&v139, *(double *)(a2 + 64), *(double *)(a2 + 72), 0.0);
        v46 = *(_OWORD *)(a5 + 16);
        v47 = *(_OWORD *)(a5 + 32);
        v48 = *(_OWORD *)(a5 + 48);
        v149 = *(int8x16_t *)a5;
        v150 = v46;
        v151 = v47;
        v152 = v48;
        v49 = *(_OWORD *)(a5 + 80);
        v50 = *(_OWORD *)(a5 + 96);
        v51 = *(_OWORD *)(a5 + 112);
        v153 = *(_OWORD *)(a5 + 64);
        v154 = v49;
        v155 = v50;
        v156 = v51;
        v157 = *(_OWORD *)(a5 + 128);
        LOBYTE(v158) = *(_BYTE *)(a5 + 144) & 0x1F;
        CA::Transform::translate((CA::Transform *)&v149, a4->f64[0], a4->f64[1], 0.0);
        CA::Transform::concat_left((CA::Transform *)&v149, (float64x2_t *)&v139, v52, v53);
        CA::Rect::unapply_transform((CA::Rect *)&v137, (const CA::Transform *)&v149, v54);
        v55 = *(_OWORD *)(a3 + 16);
        v135 = vsubq_f64(*(float64x2_t *)a3, *a4);
        v136 = v55;
        CA::Rect::unapply_transform((CA::Rect *)&v135, (const CA::Transform *)&v139, v56);
        result = CA::OGL::transform_filter_bits((float64x2_t *)&v149, v57, 1.0, 1.0);
        v58 = v138;
        v59 = v138.f64[0] <= v138.f64[1] ? v138.f64[1] : v138.f64[0];
        if (v59 < 2147483650.0)
        {
          v60 = *(_QWORD *)(a1 + 16);
          v61 = result | ((*(_BYTE *)(v60 + 481) & 1) << 8);
          if ((*(_BYTE *)(a1 + 416) & 2) != 0)
            v61 ^= 0x800u;
          if (a10)
            v62 = v61 ^ 0x800;
          else
            v62 = v61;
          if ((*(_BYTE *)(a2 + 13) & 2) != 0)
          {
            v63 = 11;
          }
          else if (*(_QWORD *)(v60 + 8) == 0x3C003C003C003C00)
          {
            v63 = 1;
          }
          else
          {
            v63 = 3;
          }
          *(_BYTE *)(v60 + 16) = v63;
          result = (uint64_t)CA::OGL::Context::bind_image(a1, 0, *(uint32x2_t **)(a2 + 128), (double *)v62, a7, a8, 0, 0, a9, &v179, 0);
          if (!result)
            goto LABEL_15;
          v66 = fabs(*(double *)(a2 + 96));
          v67 = fabs(*(double *)(a2 + 104));
          v68 = v66 >= v67 ? v67 : v66;
          if (v68 > 0.0)
          {
            v69 = result;
            v70 = v135;
            v129 = *((double *)&v136 + 1);
            v71 = *(double *)&v136;
            v72 = *(double *)&v136 + v135.f64[0];
            v131 = v135.f64[0];
            v133 = *(double *)&v136 + v135.f64[0];
            v73 = *(double *)&v136;
            if (v66 != 1.0)
            {
              v73 = *(double *)(a2 + 80);
              v131 = floor(v137.f64[0] / v66) * v66;
              v133 = ceil((v58.f64[0] + v137.f64[0]) / v66) * v66;
              v71 = v66;
            }
            v74 = *((double *)&v136 + 1) + v135.f64[1];
            v128 = v135.f64[1];
            v130 = *((double *)&v136 + 1) + v135.f64[1];
            v132 = *((double *)&v136 + 1);
            if (v67 != 1.0)
            {
              v132 = *(double *)(a2 + 88);
              v128 = floor(v137.f64[1] / v67) * v67;
              v129 = v67;
              v130 = ceil((v58.f64[1] + v137.f64[1]) / v67) * v67;
            }
            if ((a11 & 1) == 0)
            {
              v76 = 0;
              v148 = 0;
              v146 = 0u;
              v147 = 0u;
              v144 = 0u;
              v145 = 0u;
              v142 = 0u;
              v143 = 0u;
              v140 = 0u;
              v141 = 0u;
              v139 = 0u;
              v75 = v158;
              goto LABEL_48;
            }
            v75 = v158;
            if ((v158 & 0x10) != 0)
            {
              is_rectilinear = CA::Mat4Impl::mat4_is_rectilinear((CA::Mat4Impl *)&v149, v64);
              v148 = 0;
              v146 = 0u;
              v147 = 0u;
              v144 = 0u;
              v145 = 0u;
              v142 = 0u;
              v143 = 0u;
              v140 = 0u;
              v141 = 0u;
              v139 = 0u;
              if (!is_rectilinear)
              {
                v76 = 0;
LABEL_48:
                v78 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8);
                v79 = ((v75 >> 4) & 1) == 0;
                v172[0] = a1;
                v172[1] = v78;
                v173 = 0u;
                v174 = 0u;
                v172[2] = 0;
                BYTE8(v173) = v79;
                BYTE9(v173) = 1;
                CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v172);
                while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v172, (int32x2_t *)&v134))
                {
                  if (v128 < v130)
                  {
                    v82 = v128;
                    do
                    {
                      if (v131 < v133)
                      {
                        v83 = v131;
                        do
                        {
                          if (v76)
                          {
                            v159.f64[0] = v83;
                            v159.f64[1] = v82;
                            v160.f64[0] = v73;
                            v160.f64[1] = v132;
                            CA::Rect::apply_transform((int8x16_t *)&v159, (const CA::Transform *)&v149, v80);
                            v85 = v160.f64[1];
                            if (v160.f64[0] <= v160.f64[1])
                              v86 = v160.f64[1];
                            else
                              v86 = v160.f64[0];
                            if (v86 < 1.79769313e308)
                            {
                              if (v160.f64[0] < v160.f64[1])
                                v85 = v160.f64[0];
                              if (v85 > 0.0)
                              {
                                v87 = vrndaq_f64(v159);
                                v88 = vsubq_f64(vrndaq_f64(vaddq_f64(v159, v160)), v87);
                                v159 = v87;
                                v160 = v88;
                              }
                            }
                            CA::Rect::unapply_inverse_transform((int8x16_t *)&v159, (float64x2_t *)&v139, v84);
                            v89 = v159.f64[1];
                            v90 = v159.f64[0];
                            v91 = v160.f64[0] + v159.f64[0];
                            v92 = v160.f64[1] + v159.f64[1];
                          }
                          else
                          {
                            v91 = v83 + v73;
                            v92 = v82 + v132;
                            v89 = v82;
                            v90 = v83;
                          }
                          if (v91 > v70.f64[0] && v90 < v72 && v92 > v70.f64[1] && v89 < v74)
                          {
                            v96 = v179.f32[0];
                            v97 = v179.f32[2];
                            if (v90 < v70.f64[0])
                            {
                              v98 = (v70.f64[0] - v90) / (v91 - v90);
                              v96 = v96 + (v97 - v96) * v98;
                              v90 = v70.f64[0];
                            }
                            if (v91 > v72)
                            {
                              v99 = (v91 - v72) / (v91 - v90);
                              v97 = v97 + (v96 - v97) * v99;
                              v91 = v72;
                            }
                            v100 = v179.f32[1];
                            v101 = v179.f32[3];
                            if (v89 < v70.f64[1])
                            {
                              v102 = (v70.f64[1] - v89) / (v92 - v89);
                              v100 = v100 + (v101 - v100) * v102;
                              v89 = v70.f64[1];
                            }
                            if (v92 > v74)
                            {
                              v103 = (v92 - v74) / (v92 - v89);
                              v101 = v101 + (v100 - v101) * v103;
                              v92 = v74;
                            }
                            v175.f64[0] = v90;
                            v175.f64[1] = v89;
                            v176.f64[0] = v91;
                            v176.f64[1] = v92;
                            *(float *)&v104 = v96;
                            *(float *)&v105 = v100;
                            v177 = __PAIR64__(v105, v104);
                            *(float *)&v106 = v97;
                            *(float *)&v107 = v101;
                            v178 = __PAIR64__(v107, v106);
                            CA::OGL::emit_quad((CA::OGL *)a1, (CA::OGL::Context *)&v175, (const double *)&v134, (const CA::Bounds *)&v149, (const CA::Transform *)&v177, 0, v81);
                          }
                          if (v71 <= 0.0)
                            break;
                          v83 = v83 + v71;
                        }
                        while (v83 < v133);
                      }
                      v82 = v82 + v129;
                    }
                    while (v129 > 0.0 && v82 < v130);
                  }
                }
                if (v71 - v73 > 0.0 || v129 - v132 > 0.0)
                {
                  v109 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 480);
                  if (v109 <= 0xF && ((0x3ACCu >> v109) & 1) == 0)
                  {
                    v171 = 0u;
                    v111 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8);
                    v169[0] = a1;
                    v169[1] = v111;
                    v170 = 0u;
                    v169[2] = 0;
                    BYTE8(v170) = v79;
                    BYTE9(v170) = 1;
                    CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v169);
                    *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 0;
                    v112 = *(_QWORD *)(a1 + 16);
                    v113 = *(_QWORD *)(v112 + 8);
                    *(_QWORD *)(v112 + 8) = 0;
                    while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v169, (int32x2_t *)&v134))
                    {
                      if (v128 < v130)
                      {
                        v116 = v128;
                        do
                        {
                          if (v131 < v133)
                          {
                            v117 = v131;
                            do
                            {
                              v118 = 0;
                              v159.f64[0] = v117 + v73;
                              v159.f64[1] = v116;
                              v160.f64[0] = v71 - v73;
                              v160.f64[1] = v132;
                              v161 = v117;
                              v162 = v116 + v132;
                              v163 = v73;
                              v164 = v129 - v132;
                              v165 = v117 + v73;
                              v166 = v116 + v132;
                              v167 = v71 - v73;
                              v168 = v129 - v132;
                              do
                              {
                                v119 = (float64x2_t *)((char *)&v159 + v118);
                                if (v76)
                                {
                                  CA::Rect::apply_transform((int8x16_t *)((char *)&v159 + v118), (const CA::Transform *)&v149, v114);
                                  v121 = v119[1];
                                  v122 = v119[1].f64[1];
                                  if (v121.f64[0] <= v122)
                                    v123 = v119[1].f64[1];
                                  else
                                    v123 = v119[1].f64[0];
                                  if (v123 < 1.79769313e308)
                                  {
                                    if (v121.f64[0] < v122)
                                      v122 = v119[1].f64[0];
                                    if (v122 > 0.0)
                                    {
                                      v124 = vrndaq_f64(*v119);
                                      v125 = vsubq_f64(vrndaq_f64(vaddq_f64(*v119, v121)), v124);
                                      *v119 = v124;
                                      v119[1] = v125;
                                    }
                                  }
                                  CA::Rect::unapply_inverse_transform((int8x16_t *)((char *)&v159 + v118), (float64x2_t *)&v139, v120);
                                }
                                v126 = vaddq_f64(v119[1], *v119);
                                v175 = *v119;
                                v176 = v126;
                                CA::OGL::emit_quad((CA::OGL *)a1, (CA::OGL::Context *)&v175, (const double *)&v134, (const CA::Bounds *)&v149, 0, 0, v115);
                                v118 += 32;
                              }
                              while (v118 != 96);
                              if (v71 <= 0.0)
                                break;
                              v117 = v117 + v71;
                            }
                            while (v117 < v133);
                          }
                          v116 = v116 + v129;
                        }
                        while (v129 > 0.0 && v116 < v130);
                      }
                    }
                    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) = v113;
                  }
                }
                result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 520))(a1, v69, 0);
                goto LABEL_15;
              }
            }
            else
            {
              v148 = 0;
            }
            v139 = v149;
            v140 = v150;
            v141 = v151;
            v142 = v152;
            v143 = v153;
            v144 = v154;
            v145 = v155;
            v146 = v156;
            v147 = v157;
            LOBYTE(v148) = v75 & 0x1F;
            CA::Transform::invert(&v139, (uint64_t)v64, v65);
            v76 = 1;
            goto LABEL_48;
          }
        }
      }
    }
  }
  return result;
}

void CA::OGL::fill_surface_rect(CA::OGL::Context *a1, uint64_t a2, CA::Transform *a3, uint64_t a4, float64x2_t a5, float64x2_t a6)
{
  int v10;
  int v11;
  int v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  const double *v17;
  int64x2_t v18;
  int64x2_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int64x2_t v23;
  int8x16_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  int64x2_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  double *v35;
  int v36;
  _QWORD v37[2];
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  _OWORD v47[9];
  uint64_t v48;
  float32x2_t v49[3];

  v49[2] = *(float32x2_t *)MEMORY[0x1E0C80C00];
  v10 = *(_DWORD *)(a2 + 40);
  v11 = *(_DWORD *)(a2 + 44);
  if (v10 <= v11)
    v12 = *(_DWORD *)(a2 + 44);
  else
    v12 = *(_DWORD *)(a2 + 40);
  v13 = (double)v10;
  v14 = *(_QWORD *)(a2 + 32);
  v15 = (double)v11;
  if (v12 > 1073741822)
  {
    v13 = 1.79769313e308;
    v15 = 1.79769313e308;
  }
  v46.f64[0] = v13;
  v46.f64[1] = v15;
  v43 = a5;
  v44 = a6;
  CA::Rect::unapply_transform((CA::Rect *)&v43, a3, (const double *)a3);
  v18 = vclezq_f64(v46);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v18, 1), (int8x16_t)v18).u64[0] & 0x8000000000000000) == 0)
  {
    v19 = vclezq_f64(v44);
    v20 = (int32x4_t)vdupq_laneq_s64(v19, 1);
    v21 = (int32x4_t)vorrq_s8((int8x16_t)v20, (int8x16_t)v19);
    if ((v21.i64[0] & 0x8000000000000000) == 0)
    {
      v21.i32[0] = 1073741822;
      v20.i32[0] = v12;
      v22 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v20, v21), 0);
      v23.i64[0] = (int)v14;
      v23.i64[1] = SHIDWORD(v14);
      v24 = (int8x16_t)vcvtq_f64_s64(v23);
      v25 = (float64x2_t)vbslq_s8(v22, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), v24);
      v26 = vmaxnmq_f64(v25, v43);
      v27 = vsubq_f64(vminnmq_f64(vaddq_f64(v25, v46), vaddq_f64(v43, v44)), v26);
      v28 = vclezq_f64(v27);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v28, 1), (int8x16_t)v28).u64[0] & 0x8000000000000000) == 0)
      {
        v45 = v26;
        v46 = v27;
        v49[0] = vcvt_f32_f64(vsubq_f64(v26, (float64x2_t)v24));
        v49[1] = vcvt_f32_f64(vaddq_f64(v27, vcvtq_f64_f32(v49[0])));
        v48 = 0;
        v29 = *(_OWORD *)(a4 + 16);
        v30 = *(_OWORD *)(a4 + 32);
        v31 = *(_OWORD *)(a4 + 48);
        v47[0] = *(_OWORD *)a4;
        v47[1] = v29;
        v47[2] = v30;
        v47[3] = v31;
        v32 = *(_OWORD *)(a4 + 80);
        v33 = *(_OWORD *)(a4 + 96);
        v34 = *(_OWORD *)(a4 + 112);
        v47[4] = *(_OWORD *)(a4 + 64);
        v47[5] = v32;
        v47[6] = v33;
        v47[7] = v34;
        v47[8] = *(_OWORD *)(a4 + 128);
        LOBYTE(v48) = *(_BYTE *)(a4 + 144) & 0x1F;
        CA::Transform::concat_left((CA::Transform *)v47, (float64x2_t *)a3, v16, v17);
        CA::OGL::Context::bind_surface((uint64_t)a1, a2, 0, 1u, 1, 0.0);
        if ((*((_DWORD *)a1 + 104) & 8) != 0)
          v36 = 0;
        else
          v36 = 15;
        v37[0] = &v45;
        v37[1] = v47;
        v38 = 9;
        v39 = v36;
        v41 = 0;
        v42 = 0;
        v40 = 0;
        CA::OGL::fill_rect_tex(a1, (uint64_t)v37, (uint64_t)v49, v35);
        CA::OGL::Context::unbind_surface(a1, a2, 0);
      }
    }
  }
}

void CA::OGL::`anonymous namespace'::MaskWithRect::draw(void (***a1)(_QWORD, int32x2_t *, __int128 *), int32x2_t *a2, float64x2_t **a3)
{
  int32x2_t v6;
  const CA::Transform *v7;
  float64x2_t v8;
  int64x2_t v9;
  int8x16_t v10;
  int32x4_t v11;
  CA::Shape *v12;
  int32x2_t *v13;
  int32x2_t *v14;
  uint32x2_t v15;
  int32x2_t v16;
  uint32x2_t v17;
  int32x4_t v18;
  int32x2_t v19;
  uint32x2_t v20;
  const void *v21;
  uint64_t v22;
  const void *v23;
  _DWORD *v24;
  int v25;
  int v26;
  double *v27;
  double *v28;
  CA::Shape *v29;
  double *v30;
  double v31;
  int8x16_t v32;
  _QWORD v33[2];
  __int128 v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int32x4_t v40;
  float64x2_t v41;
  float64x2_t v42;
  _QWORD v43[2];
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD __dst[62];

  __dst[61] = *MEMORY[0x1E0C80C00];
  v6 = a2[29];
  v7 = (const CA::Transform *)a3[1];
  v8 = (*a3)[1];
  v41 = **a3;
  v42 = v8;
  CA::Rect::apply_transform((int8x16_t *)&v41, v7, (double *)a3);
  v9 = vceqzq_f64(v42);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v9, 1), (int8x16_t)v9).u64[0] & 0x8000000000000000) != 0
    || (v10 = vorrq_s8((int8x16_t)vcltzq_f64(v42), (int8x16_t)vcgezq_f64(v42)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v10), 1), v10).u64[0] & 0x8000000000000000) != 0))
  {
    v40 = 0uLL;
  }
  else
  {
    v11 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v41, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    v40 = vuzp1q_s32(v11, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v41, v42), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v11));
  }
  v12 = (CA::Shape *)CA::Shape::intersect(*(CA::Shape **)(*(_QWORD *)&v6 + 8), (const CA::Bounds *)&v40);
  CA::Shape::get_bounds((uint64_t)v12, v40.i32);
  v13 = (int32x2_t *)a2[31];
  if (v13)
    v14 = v13 + 4;
  else
    v14 = a2 + 23;
  v15 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v40.u64[1]);
  if ((vpmax_u32(v15, v15).u32[0] & 0x80000000) == 0)
  {
    v16 = v14[1];
    v17 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v16);
    if ((vpmax_u32(v17, v17).u32[0] & 0x80000000) == 0)
    {
      *(int32x2_t *)v18.i8 = vmax_s32(*(int32x2_t *)v40.i8, *v14);
      v19 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v40.i8, (int32x2_t)v40.u64[1]), vadd_s32(*v14, v16)), *(int32x2_t *)v18.i8);
      v20 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v19);
      if ((vpmax_u32(v20, v20).u32[0] & 0x80000000) == 0)
      {
        v18.u64[1] = (unint64_t)v19;
        v40 = v18;
        v21 = (const void *)a2[2];
        memcpy(__dst, v21, 0x1E8uLL);
        __dst[0] = v21;
        a2[2] = (int32x2_t)__dst;
        v22 = (*(uint64_t (**)(int32x2_t *, uint64_t, int32x4_t *, uint64_t))(*(_QWORD *)a2 + 656))(a2, 1, &v40, 15);
        v23 = (const void *)__dst[0];
        a2[2] = (int32x2_t)__dst[0];
        __dst[0] = 0;
        if (v22)
        {
          v24 = (_DWORD *)v22;
          v45 = 0x3C003C003C003C00;
          v46 = 0;
          v47 = 0;
          v48 = 0;
          v49 = 0;
          v44 = *(_OWORD *)(*(_QWORD *)&v6 + 16);
          LODWORD(v49) = *(_DWORD *)(*(_QWORD *)&v6 + 64);
          WORD2(v49) = *(_WORD *)(*(_QWORD *)&v6 + 68) & 0x500 | 0xF;
          v43[0] = 0;
          v43[1] = v12;
          memcpy(__dst, v23, 0x1E8uLL);
          __dst[0] = v23;
          a2[2] = (int32x2_t)__dst;
          v43[0] = CA::OGL::Context::set_gstate((uint64_t)a2, (uint64_t)v43);
          CA::OGL::Context::push_surface((uint64_t)a2, (uint64_t)v24, 1u, 4, 0);
          v25 = *((_DWORD *)a3 + 5);
          v26 = (_DWORD)a3[2] & 0x3F;
          v34 = *(_OWORD *)a3;
          v35 = v26;
          v36 = v25;
          v38 = 0;
          v39 = 0;
          v37 = 0;
          *(_QWORD *)(*(_QWORD *)&a2[2] + 8) = 0x3C003C003C003C00;
          *(_BYTE *)(*(_QWORD *)&a2[2] + 481) &= ~1u;
          WORD2(v49) &= ~0x400u;
          (**a1)(a1, a2, &v34);
          WORD2(v49) |= 0x400u;
          *(_BYTE *)(*(_QWORD *)&a2[2] + 481) |= 1u;
          CA::OGL::fill_rect((uint64_t)a2, (uint64_t)&v34, v27, v28);
          CA::OGL::Context::pop_surface((CA::OGL::Context *)a2);
          CA::OGL::Context::set_gstate((uint64_t)a2, **(_QWORD **)&a2[29]);
          a2[2] = (int32x2_t)__dst[0];
          __dst[0] = 0;
          v29 = *(CA::Shape **)(*(_QWORD *)&v6 + 8);
          v33[0] = 0;
          v33[1] = 0;
          CA::OGL::emit_combine((uint64_t)a2, 3, v24, 0, v29, (unsigned int *)v33);
          CA::OGL::Context::release_surface((uint64_t)a2, (uint64_t)v24);
          if (byte_1ECDC6A61)
            CA::OGL::fill_color_rect((uint64_t)a2, (uint64_t)&v34, (double *)0x80800080, v30, v31, v32);
        }
        CA::Shape::unref(v12);
        if (__dst[0])
          __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
      }
    }
  }
}

void CA::OGL::`anonymous namespace'::tile_rect_tex_(uint64_t a1, float64_t **a2, _DWORD *a3, double *a4)
{
  double v5;
  double v6;
  float64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  _DWORD v11[2];
  _DWORD v12[2];
  _QWORD v13[2];
  float64_t v14[3];

  v14[2] = *(float64_t *)MEMORY[0x1E0C80C00];
  v5 = (*a2)[1];
  v6 = (*a2)[3];
  v7 = (*a2)[2] + **a2;
  v14[0] = **a2;
  v14[1] = v7;
  *(double *)v13 = v5;
  *(double *)&v13[1] = v6 + v5;
  LODWORD(v5) = a3[1];
  LODWORD(v7) = a3[2];
  LODWORD(v6) = a3[3];
  v12[0] = *a3;
  v12[1] = LODWORD(v7);
  v11[0] = LODWORD(v5);
  v11[1] = LODWORD(v6);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(v8 + 16) & 0xFFFFFF00FF00FF00;
  if (*(_QWORD *)(v8 + 8) == 0x3C003C003C003C00)
    v10 = 1;
  else
    v10 = 3;
  *(_DWORD *)(v8 + 16) = v10 | v9;
  *(_DWORD *)(v8 + 20) = HIDWORD(v9);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 0;
}

void CA::OGL::tile_rect_tex(CA::OGL::Context &,CA::OGL::RectState const&,float const*,double const*)::MaskedTileRect::draw_content(uint64_t a1, uint64_t a2, __int128 *a3)
{
  int v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)a3 + 4);
  v4 = *a3;
  v5 = v3;
  v6 = 0;
  v8 = 0;
  v7 = 0;
  v9 = 0;
}

void CA::OGL::tile_rect_tex(CA::OGL::Context &,CA::OGL::RectState const&,float const*,double const*,float const*,double const*)::MaskedTileRect9::draw_content(uint64_t a1, uint64_t a2, __int128 *a3)
{
  int v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)a3 + 4);
  v4 = *a3;
  v5 = v3;
  v6 = 0;
  v8 = 0;
  v7 = 0;
  v9 = 0;
}

uint64_t CA::OGL::merge_compressed_geometry(CA::OGL *this, const double *a2, const double *a3, const float *a4, const float *a5, float a6, uint64_t a7, float a8, float a9, double *a10, float *a11, float *a12)
{
  double v13;
  double v14;
  float v15;
  int v16;
  float v17;
  float v18;
  unsigned int v19;
  uint64_t result;
  unsigned int v21;
  double v22;
  float v23;
  float v24;
  int v25;
  double v26;
  double v27;
  double v28;
  float v29;
  float v30;
  float v31;
  float v32;
  int v33;
  float v34;
  unsigned int v35;
  float v36;

  v13 = *(double *)this;
  v14 = a6;
  if (*(double *)this >= *a2 - v14)
    v13 = *a2 - v14;
  v15 = v13 + -1.0;
  v16 = (int)v15;
  if (a5 < 2)
  {
    v17 = 100.0;
    v18 = 100.0;
  }
  else
  {
    v17 = *((float *)a3 + 1) - *(float *)a3;
    v18 = a4[1] - *a4;
  }
  v19 = 0;
  LODWORD(result) = 0;
  v21 = 0;
  v22 = -v14;
  v23 = a8 - v17;
  v24 = a9 - v18;
  v25 = v16;
  do
  {
    v26 = *((double *)this + v19);
    v27 = a2[v21];
    v28 = v27 - v14;
    if (v26 >= v27 - v14)
    {
      if (v28 >= v26)
      {
        *(double *)(a7 + 8 * result) = v26;
        v23 = *((float *)a3 + v19);
        *((float *)a10 + result) = v23;
        v24 = a4[v21];
        a11[result] = v24;
        v25 = (int)v26;
        v16 = (int)v28;
        ++v19;
      }
      else
      {
        *(double *)(a7 + 8 * result) = v28;
        v30 = (v22 - (double)v25 + v27) * (float)(*((float *)a3 + v19) - v23) / (v26 - (double)v25) + v23;
        *((float *)a10 + result) = v30;
        v24 = a4[v21];
        a11[result] = v24;
        v16 = (int)v28;
      }
      ++v21;
    }
    else
    {
      *(double *)(a7 + 8 * result) = v26;
      v23 = *((float *)a3 + v19);
      *((float *)a10 + result) = v23;
      v29 = (v26 - (double)v16) * (float)(a4[v21] - v24) / (v22 - (double)v16 + v27) + v24;
      a11[result] = v29;
      v25 = (int)v26;
      ++v19;
    }
    result = (result + 1);
  }
  while (v19 <= a5 && v21 <= a5);
  if (a5 < 2)
  {
    v31 = 100.0;
    v32 = 100.0;
  }
  else
  {
    v31 = *((float *)a3 + a5) - *((float *)a3 + ((_DWORD)a5 - 1));
    v32 = a4[a5] - a4[(_DWORD)a5 - 1];
  }
  if (v19 <= a5)
  {
    v33 = 0;
    v34 = a4[v21 - 1] + v32;
    do
    {
      v35 = result + v33;
      *(_QWORD *)(a7 + 8 * v35) = *((_QWORD *)this + v19 + v33);
      *((_DWORD *)a10 + v35) = *((_DWORD *)a3 + v19 + v33);
      a11[v35] = v34;
      ++v33;
    }
    while (v19 + v33 <= a5);
    result = (result + v33);
    v19 += v33;
  }
  if (v21 <= a5)
  {
    v36 = *((float *)a3 + v19 - 1) + v31;
    do
    {
      *(double *)(a7 + 8 * result) = a2[v21] - v14;
      a11[result] = a4[v21];
      *((float *)a10 + result) = v36;
      result = (result + 1);
      ++v21;
    }
    while (v21 <= a5);
  }
  return result;
}

int8x16_t *CA::OGL::emit_shadow_uneven_round_rect(CA::OGL::Context *this, float64x2_t *a2, float32x2_t *a3, double *a4, float16x4_t *a5, int a6, int a7, int a8, double a9, unsigned int a10, uint64_t a11)
{
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  BOOL v21;
  int8x16_t *result;
  float16x4_t v23[2];

  v23[1] = *(float16x4_t *)MEMORY[0x1E0C80C00];
  v15 = *a4;
  v16 = a4[2];
  if (*a4 == v16
    && (v17 = a4[1], v18 = a4[3], v17 == v18)
    && (v19 = a4[4], v16 == v19)
    && (v20 = a4[5], v18 == v20)
    && v19 == a4[6]
    && (v20 == a4[7] ? (v21 = v15 == v17) : (v21 = 0), v21))
  {
    v23[0] = *a5;
    return CA::OGL::emit_shadow_round_rect(this, a2, a3, v23, a6, a7, a8, a10, v15, a9, 15, a11);
  }
  else
  {
    result = (int8x16_t *)CA::OGL::Context::shadow_cache(this);
    if (result)
    {
      result = CA::Render::ShadowCache::lookup_rounded_rect_path((uint64_t)result, a2->f64, a4, a10 != 0);
      if (result)
        return (int8x16_t *)CA::OGL::emit_shadow_path((uint64_t)this);
    }
  }
  return result;
}

uint64_t CA::OGL::emit_rim_rounded_rect(_QWORD *a1, float64x2_t *a2, _QWORD *a3, double *a4, int a5, CA::Mat4Impl *this, double a7, float a8, int8x16_t a9, double a10)
{
  _QWORD *v13;
  int32x2_t v17;
  int64x2_t v18;
  int8x16_t v19;
  int8x16_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  float *v31;
  double v32;
  float v33;
  float v34;
  uint64_t v35;
  double v36;
  float64_t v37;
  float64_t v38;
  float64_t v39;
  double v40;
  uint64_t result;
  float64x2_t v42;
  double v43;
  double v44;
  _QWORD v45[2];
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  float v51[4];
  double v52;
  float v53;
  int v54;
  double v55[4];
  double v56[4];
  uint64_t v57;
  _QWORD v58[2];

  v13 = a3;
  v58[1] = *MEMORY[0x1E0C80C00];
  if (byte_1ECDC6AEF)
    *a3 = 0x3C00380000000000;
  *(_BYTE *)(a1[2] + 481) |= 1u;
  *(_BYTE *)(a1[2] + 16) = 56;
  v45[0] = a2;
  v45[1] = this;
  v46 = 63;
  v47 = 0;
  v49 = 0;
  v48 = 0;
  v50 = 0;
  *(double *)&a9.i64[1] = a10;
  v17 = vdup_n_s32((_DWORD)a4 == 0);
  v18.i64[0] = v17.u32[0];
  v18.i64[1] = v17.u32[1];
  v42 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v18, 0x3FuLL)), a9, (int8x16_t)vmulq_f64((float64x2_t)a9, (float64x2_t)vdupq_n_s64(0x3FF875696E58A32FuLL)));
  v19 = (int8x16_t)vaddq_f64(vdivq_f64(vmulq_f64(a2[1], (float64x2_t)vdupq_n_s64(0xBFF721E8A7A4B61BLL)), v42), (float64x2_t)vdupq_n_s64(0x400721E8A7A4B61BuLL));
  __asm { FMOV            V1.2D, #1.0 }
  v25 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v19, (float64x2_t)_Q1), _Q1, v19);
  v58[0] = vcvt_f32_f64((float64x2_t)vbicq_s8(v25, (int8x16_t)vcltzq_f64((float64x2_t)v25)));
  v43 = 0.0;
  v44 = 0.0;
  if ((*((_BYTE *)this + 144) & 0x10) != 0)
  {
    CA::Mat4Impl::mat4_get_scale(this, &v44, &v43, a4);
    v26 = v43;
    v27 = v44;
  }
  else
  {
    v26 = *((double *)this + 16);
    v43 = v26;
    v44 = v26;
    v27 = v26;
  }
  v28 = v27 * v42.f64[0];
  v29 = vmuld_lane_f64(v26, v42, 1);
  if (v28 >= v29)
    v30 = v28;
  else
    v30 = v29;
  v57 = 0;
  LODWORD(a3) = vcvtpd_s64_f64(v30);
  (*(void (**)(_QWORD *, _QWORD, _QWORD *, _QWORD, _QWORD, uint64_t *, double *, _QWORD *))(*a1 + 472))(a1, 0, a3, 0, 0, &v57, a4, v58);
  v32 = v43;
  if (v43 >= v44)
    v32 = v44;
  v33 = v30;
  v34 = v32 * a7 / v33;
  v35 = a1[2];
  *(float *)(v35 + 24) = v34;
  *(float *)(v35 + 28) = a8;
  *(_QWORD *)(v35 + 32) = 0;
  *(_QWORD *)(v35 + 8) = *v13;
  v36 = a2->f64[1];
  v37 = a2->f64[0] + v42.f64[0];
  v38 = a2[1].f64[0] + a2->f64[0];
  v39 = a2[1].f64[1] + v36;
  v56[0] = a2->f64[0] - a7;
  v56[1] = v37;
  v56[2] = v38 - v42.f64[0];
  v56[3] = v38 + a7;
  v55[0] = v36 - a7;
  v55[1] = v36 + v42.f64[1];
  v55[2] = v39 - v42.f64[1];
  v55[3] = v39 + a7;
  v40 = a7 * *((float *)&v57 + 1);
  *(float *)&v39 = v40 / fmax(v42.f64[0], 0.00100000005) + *((float *)&v57 + 1);
  *(float *)&v52 = -*(float *)&v39;
  *((float *)&v52 + 1) = *(float *)&v57 + (float)((float)(*((float *)&v57 + 1) - *(float *)&v57) * 0.5);
  *(float *)&v36 = v40 / fmax(v42.f64[1], 0.00100000005) + *((float *)&v57 + 1);
  v53 = *((float *)&v52 + 1);
  v54 = LODWORD(v39);
  v51[0] = -*(float *)&v36;
  v51[1] = *((float *)&v52 + 1);
  v51[2] = *((float *)&v52 + 1);
  v51[3] = *(float *)&v36;
  CA::OGL::emit_nine_part_rect((uint64_t)a1, (uint64_t)v45, (uint64_t)v56, (uint64_t)v55, (uint64_t)&v52, (uint64_t)v51, 0, 0, ~(a5 << 22) & 0x3C00000);
  result = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 520))(a1, 0, 0);
  *(_BYTE *)(a1[2] + 16) = 0;
  return result;
}

void CA::OGL::emit_large_brim(CA::OGL::Context *a1, uint64_t a2, float64x2_t *a3, double *a4, float16x4_t *a5, CA::Mat4Impl *this, int a7, double a8, float a9, double a10, float a11)
{
  double v20;
  double v21;
  double v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  uint64_t v30;
  char v31;
  float64x2_t v32;
  float64x2_t v33;
  int32x4_t v34;
  int v40;
  int8x16_t v41;
  int32x2_t v42;
  int64x2_t v43;
  float v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float32x4_t v53;
  float16x4_t *v54;
  float64x2_t v55;
  float64x2_t v56;
  int64x2_t v57;
  float v58;
  float v59;
  float v60;
  _QWORD v61[2];
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  _OWORD v67[2];
  int32x4_t v68;
  double v69;
  double v70;
  float v71;
  int32x4_t v72[9];
  uint64_t v73;
  _DWORD v74[2];
  uint64_t v75;
  _DWORD v76[4];
  float32x4_t v77;
  float32x4_t v78;
  float v79[2];
  float32x2_t v80;
  float v81[2];
  float32x2_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v71 = a11;
  if (byte_1ECDC6AEF)
  {
    *a4 = 1.09955464e-19;
    *a5 = (float16x4_t)0x3C0000003A003A00;
  }
  v69 = 0.0;
  v70 = 0.0;
  if ((*((_BYTE *)this + 144) & 0x10) != 0)
  {
    CA::Mat4Impl::mat4_get_scale(this, &v70, &v69, a4);
    v20 = v69;
    v21 = v70;
  }
  else
  {
    v20 = *((double *)this + 16);
    v69 = v20;
    v70 = v20;
    v21 = v20;
  }
  if (v21 >= v20)
    v22 = v20;
  else
    v22 = v21;
  v23 = v22 * a8;
  v24 = ceilf(v23);
  v58 = v24 + 1.0;
  v57 = (int64x2_t)vcvtq_f64_f32(vmul_n_f32((float32x2_t)0x4080000040000000, v24 + 1.0));
  v56 = (float64x2_t)vdupq_lane_s64(v57.i64[0], 0);
  v68 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vsubq_f64(*a3, v56)), (int32x4_t)vcvtq_s64_f64(vaddq_f64(a3[1], (float64x2_t)vdupq_laneq_s64(v57, 1))));
  v25 = (*(uint64_t (**)(CA::OGL::Context *, uint64_t, int32x4_t *, uint64_t))(*(_QWORD *)a1 + 656))(a1, 1, &v68, 0x200000);
  v26 = (*(uint64_t (**)(CA::OGL::Context *, uint64_t, int32x4_t *, uint64_t))(*(_QWORD *)a1 + 656))(a1, 1, &v68, 0x200000);
  v27 = v26;
  if (v25 && v26)
  {
    v28 = v22 * a10;
    v29 = ceilf(v28);
    v30 = *((_QWORD *)a1 + 2);
    v31 = *(_BYTE *)(v30 + 481);
    v54 = a5;
    if ((v31 & 1) != 0)
    {
      *(_BYTE *)(v30 + 481) = v31 & 0xFE;
      v30 = *((_QWORD *)a1 + 2);
    }
    v55 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v58), 0);
    v32 = vsubq_f64(*a3, v55);
    v33 = vaddq_f64(a3[1], v56);
    v34 = (int32x4_t)vcvtq_s64_f64(v33);
    *(int32x2_t *)v34.i8 = vmovn_s64((int64x2_t)v34);
    v73 = 0;
    v72[0] = (int32x4_t)xmmword_18474DF40;
    v72[1] = 0u;
    v72[2] = (int32x4_t)xmmword_18474DF50;
    memset(&v72[3], 0, 32);
    v72[5] = (int32x4_t)xmmword_18474DF40;
    v72[6] = 0u;
    v72[7] = (int32x4_t)xmmword_18474DF50;
    __asm { FMOV            V3.2D, #1.0 }
    v72[8] = _Q3;
    v40 = v34.i32[1];
    if (v34.i32[0] > v34.i32[1])
      v40 = v34.i32[0];
    v34.i32[0] = v40;
    _Q3.i32[0] = 1073741822;
    v41 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v34, _Q3), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vrndq_f64(v32));
    v42 = vdup_n_s32(v40 > 1073741822);
    v43.i64[0] = v42.u32[0];
    v43.i64[1] = v42.u32[1];
    v67[0] = v41;
    v67[1] = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v43, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), (int8x16_t)vrndq_f64(v33));
    v61[0] = v67;
    v61[1] = v72;
    v62 = 63;
    v63 = 0;
    v65 = 0;
    v64 = 0;
    v66 = 0;
    *(_BYTE *)(v30 + 16) = 58;
    (*(void (**)(CA::OGL::Context *, _QWORD, uint64_t, uint64_t, float *))(*(_QWORD *)a1 + 1000))(a1, 0, 1, 1, &v71);
    v81[0] = -v58;
    v81[1] = -v58;
    v82 = vcvt_f32_f64(vaddq_f64(a3[1], v55));
    CA::OGL::Context::bind_surface((uint64_t)a1, a2, 0, 0, 0, 0.0);
    CA::OGL::Context::push_surface((uint64_t)a1, v25, 1u, 64, 0);
    CA::OGL::emit_one_part_rect(a1, (uint64_t)v61, (const CA::Transform *)v81, 0, 0);
    CA::OGL::Context::pop_surface(a1);
    CA::OGL::Context::unbind_surface(a1, a2, 0);
    *(_BYTE *)(*((_QWORD *)a1 + 2) + 16) = 59;
    v79[0] = v24 + 1.0;
    v79[1] = v24 + 1.0;
    v80 = vcvt_f32_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)v57.i64 + v58), 0), a3[1]));
    v60 = v58 - v81[0];
    if (v24 <= v29)
      v44 = v29;
    else
      v44 = v24;
    v45 = ((unint64_t)(float)(v44 + 1.0) - 1) | (((unint64_t)(float)(v44 + 1.0) - 1) >> 1);
    v46 = v45 | (v45 >> 2) | ((v45 | (v45 >> 2)) >> 4);
    v47 = v46 | (v46 >> 8) | ((v46 | (v46 >> 8)) >> 16);
    v48 = (float)((v47 | HIDWORD(v47)) + 1);
    (*(void (**)(CA::OGL::Context *, uint64_t, uint64_t, uint64_t, float *))(*(_QWORD *)a1 + 1000))(a1, 1, 1, 1, &v60);
    (*(void (**)(CA::OGL::Context *, uint64_t, uint64_t, uint64_t, float *))(*(_QWORD *)a1 + 1000))(a1, 2, 1, 1, &v71);
    CA::OGL::Context::bind_surface((uint64_t)a1, a2, 1u, 0, 0, 0.0);
    v49 = v25;
    v50 = v27;
    do
    {
      v51 = v50;
      v50 = v49;
      v59 = v48 * 0.5;
      (*(void (**)(CA::OGL::Context *, _QWORD, uint64_t, uint64_t, float *))(*(_QWORD *)a1 + 1000))(a1, 0, 1, 1, &v59);
      CA::OGL::Context::bind_surface((uint64_t)a1, v50, 0, 0, 0, 0.0);
      CA::OGL::Context::push_surface((uint64_t)a1, v51, 1u, 64, 0);
      CA::OGL::emit_one_part_rect(a1, (uint64_t)v61, (const CA::Transform *)v79, (uint64_t)v81, 0);
      CA::OGL::Context::pop_surface(a1);
      CA::OGL::Context::unbind_surface(a1, v50, 0);
      v48 = v59;
      v49 = v51;
    }
    while (v59 > 1.0);
    CA::OGL::Context::unbind_surface(a1, a2, 1);
    v52 = *((_QWORD *)a1 + 2);
    if (a7)
    {
      *(_BYTE *)(v52 + 16) = 61;
      v78 = vcvtq_f32_f16(*(float16x4_t *)a4);
      v77.i64[0] = __PAIR64__(LODWORD(a9), LODWORD(v23));
      v77.i64[1] = __PAIR64__(LODWORD(v60), LODWORD(v71));
      (*(void (**)(CA::OGL::Context *, _QWORD, uint64_t, uint64_t, float32x4_t *))(*(_QWORD *)a1 + 1000))(a1, 0, 4, 1, &v78);
      (*(void (**)(CA::OGL::Context *, uint64_t, uint64_t, uint64_t, float32x4_t *))(*(_QWORD *)a1 + 1000))(a1, 1, 4, 1, &v77);
    }
    else
    {
      *(_BYTE *)(v52 + 16) = 60;
      v53 = vcvtq_f32_f16(*(float16x4_t *)a4);
      v77 = vcvtq_f32_f16(*v54);
      v78 = v53;
      *(float *)v76 = v23;
      *(float *)&v76[1] = v28;
      *(float *)&v76[2] = a9;
      v76[3] = 0;
      *(float *)v74 = v71;
      *(float *)&v74[1] = v60;
      v75 = 0;
      (*(void (**)(CA::OGL::Context *, _QWORD, uint64_t, uint64_t, float32x4_t *))(*(_QWORD *)a1 + 1000))(a1, 0, 4, 1, &v78);
      (*(void (**)(CA::OGL::Context *, uint64_t, uint64_t, uint64_t, float32x4_t *))(*(_QWORD *)a1 + 1000))(a1, 1, 4, 1, &v77);
      (*(void (**)(CA::OGL::Context *, uint64_t, uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a1 + 1000))(a1, 2, 4, 1, v76);
      (*(void (**)(CA::OGL::Context *, uint64_t, uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a1 + 1000))(a1, 3, 2, 1, v74);
    }
    *(_BYTE *)(*((_QWORD *)a1 + 2) + 481) |= 1u;
    CA::OGL::Context::bind_surface((uint64_t)a1, v51, 0, 0, 0, 0.0);
    CA::OGL::Context::bind_surface((uint64_t)a1, a2, 1u, 0, 0, 0.0);
    CA::OGL::emit_one_part_rect(a1, (uint64_t)v61, (const CA::Transform *)v79, (uint64_t)v81, 0);
    CA::OGL::Context::unbind_surface(a1, v51, 0);
    CA::OGL::Context::unbind_surface(a1, a2, 1);
    if ((v31 & 1) == 0)
      *(_BYTE *)(*((_QWORD *)a1 + 2) + 481) &= ~1u;
    *(_BYTE *)(*((_QWORD *)a1 + 2) + 16) = 0;
    CA::OGL::Context::release_surface((uint64_t)a1, v25);
LABEL_30:
    CA::OGL::Context::release_surface((uint64_t)a1, v27);
    return;
  }
  if (v25)
    CA::OGL::Context::release_surface((uint64_t)a1, v25);
  if (v27)
    goto LABEL_30;
}

void sub_1846C8FC4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1846C9458(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1846C98B8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN2CA12MachPortUtil17call_with_timeoutIPFijjjEJjEEEijjPKcT_DpT0__block_invoke(uint64_t a1)
{
  mach_error_t v2;
  mach_error_t v4;
  NSObject *v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  mach_error_t v10;
  __int16 v11;
  char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 32))(*(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), *(unsigned int *)(a1 + 56));
  if (v2)
  {
    v4 = v2;
    if (x_log_hook_p())
    {
      mach_error_string(v4);
      x_log_();
    }
    else
    {
      v5 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
      {
        v6 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315650;
        v8 = v6;
        v9 = 1024;
        v10 = v4;
        v11 = 2080;
        v12 = mach_error_string(v4);
        _os_log_impl(&dword_184457000, v5, OS_LOG_TYPE_ERROR, "%s client message err=0x%x : %s", buf, 0x1Cu);
      }
    }
  }
  return mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(_DWORD *)(a1 + 48));
}

void CAImageQueueFlush(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 24);
    v5 = *(_DWORD *)(a1 + 24) + 1;
    *(_DWORD *)(a1 + 24) = v5;
    *(_DWORD *)(v4 + 16) = v5;
    os_unfair_lock_unlock(v2);
    CAImageQueueCollect_(a1, 0, 0);
  }
  else
  {
    os_unfair_lock_unlock(v2);
  }
}

void CAImageQueueFlushWithTransaction(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  CA::Context *v6;
  int *v7;
  int *v8;
  CFNumberRef v9;
  uint64_t v10;
  int v11;
  const void *v12;
  int valuePtr;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 24);
    v5 = *(_DWORD *)(a1 + 24) + 1;
    *(_DWORD *)(a1 + 24) = v5;
    v6 = (CA::Context *)*(unsigned int *)(a1 + 208);
    if ((_DWORD)v6 && (v7 = CA::Context::retain_context_with_id(v6), v5 = *(_DWORD *)(a1 + 24), v7))
    {
      v8 = v7;
      valuePtr = *(_DWORD *)(a1 + 24);
      v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      v10 = *((_QWORD *)v8 + 27);
      v8 += 54;
      v11 = (*(uint64_t (**)(int *))(v10 + 16))(v8);
      CA::Transaction::add_command((CA::Transaction *)0xE, v11, *(unsigned int *)(a1 + 28), v9, v12);
      CFRelease(v9);
      (**(void (***)(int *))v8)(v8);
    }
    else
    {
      *(_DWORD *)(v4 + 16) = v5;
    }
  }
  os_unfair_lock_unlock(v2);
}

void CAShmemImageQueueShow(uint64_t a1, uint64_t a2, char a3, int a4, char a5)
{
  uint64_t v9;
  unint64_t v10;
  _BOOL4 v11;
  NSObject *v12;
  NSObject *v13;
  double v14;
  NSObject *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  NSObject *v22;
  int v23;
  NSObject *v24;
  int v25;
  double v26;
  NSObject *v30;
  NSObject *v31;
  int v32;
  unsigned int *v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  NSObject *v47;
  NSObject *v48;
  CA::Render *v49;
  const char *v50;
  int v51;
  const char *v52;
  int v53;
  IOSurfaceRef v54;
  IOSurfaceRef v55;
  uint64_t DetachModeCode;
  NSObject *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  double v62;
  uint64_t v63;
  int v64;
  const char *v65;
  const char *v66;
  NSObject *v67;
  const char *v68;
  NSObject *v69;
  int *v70;
  const char *v71;
  IOSurfaceRef v72;
  IOSurfaceRef v73;
  NSObject *v74;
  int v75;
  int v76;
  uint8_t buf[4];
  double v78;
  __int16 v79;
  _BYTE v80[10];
  _BYTE v81[10];
  const char *v82;
  _BYTE v83[20];
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  const char *v87;
  __int16 v88;
  const char *v89;
  __int16 v90;
  const char *v91;
  uint64_t v92;

  v9 = a1;
  v92 = *MEMORY[0x1E0C80C00];
  v10 = atomic_load((unint64_t *)(a1 + 8));
  v11 = x_log_hook_p();
  if ((a5 & 1) != 0)
  {
    if (v11)
    {
      x_log_();
    }
    else
    {
      v69 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v69, OS_LOG_TYPE_DEFAULT, "(image-queue: ", buf, 2u);
      }
    }
    if (a2)
    {
      v70 = (int *)(v9 + 536);
      while (2)
      {
        *(double *)&v71 = COERCE_DOUBLE("iosurface");
        switch(*(v70 - 3))
        {
          case 0:
            goto LABEL_131;
          case 2:
          case 4:
            goto LABEL_125;
          case 3:
            *(double *)&v71 = COERCE_DOUBLE("buffer");
            goto LABEL_125;
          default:
            *(double *)&v71 = COERCE_DOUBLE("unknown");
LABEL_125:
            v72 = IOSurfaceLookup(*(v70 - 6));
            if (v72)
            {
              v73 = v72;
              IOSurfaceGetDetachModeCode();
              CFRelease(v73);
            }
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v74 = x_log_category_utilities;
              if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
              {
                v75 = *(v70 - 1);
                v76 = *v70;
                *(_DWORD *)buf = 136315650;
                v78 = *(double *)&v71;
                v79 = 1024;
                *(_DWORD *)v80 = v75;
                *(_WORD *)&v80[4] = 1024;
                *(_DWORD *)&v80[6] = v76;
                _os_log_impl(&dword_184457000, v74, OS_LOG_TYPE_DEFAULT, "%s [%d %d];", buf, 0x18u);
              }
            }
LABEL_131:
            v70 += 40;
            if (!--a2)
              break;
            continue;
        }
        break;
      }
    }
    if (x_log_hook_p())
      goto LABEL_111;
    v67 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v68 = ")";
      goto LABEL_114;
    }
  }
  else
  {
    if (v11)
    {
      x_log_();
    }
    else
    {
      v12 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_DEFAULT, "(image-queue", buf, 2u);
      }
    }
    if (*(_QWORD *)(v9 + 80))
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v13 = x_log_category_utilities;
        if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
        {
          v14 = *(double *)(v9 + 80);
          *(_DWORD *)buf = 134217984;
          v78 = v14;
          _os_log_impl(&dword_184457000, v13, OS_LOG_TYPE_DEFAULT, " 0x%016llx", buf, 0xCu);
        }
      }
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v15 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
      {
        if (*(_DWORD *)(v9 + 32))
          *(double *)&v16 = COERCE_DOUBLE("");
        else
          *(double *)&v16 = COERCE_DOUBLE(" not-visible");
        v17 = " async";
        if ((v10 & 1) == 0)
          v17 = "";
        v18 = " enable-dpb";
        if ((v10 & 0x40) == 0)
          v18 = "";
        *(_DWORD *)buf = 136316418;
        v78 = *(double *)&v16;
        v19 = " protected";
        if ((v10 & 4) == 0)
          v19 = "";
        v79 = 2080;
        *(_QWORD *)v80 = v17;
        v20 = " reduced-polling";
        if ((v10 & 0x10000) == 0)
          v20 = "";
        *(_WORD *)&v80[8] = 2080;
        *(_QWORD *)v81 = v18;
        *(_WORD *)&v81[8] = 2080;
        v82 = v19;
        *(_WORD *)v83 = 2080;
        *(_QWORD *)&v83[2] = v20;
        if ((a3 & 2) != 0)
          v21 = " changed";
        else
          v21 = "";
        *(_WORD *)&v83[10] = 2080;
        *(_QWORD *)&v83[12] = v21;
        _os_log_impl(&dword_184457000, v15, OS_LOG_TYPE_DEFAULT, "%s%s%s%s%s%s", buf, 0x3Eu);
      }
    }
    CA::Render::show_newline((CA::Render *)(a4 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v22 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
      {
        v23 = *(_DWORD *)(v9 + 16);
        *(_DWORD *)buf = 67109120;
        LODWORD(v78) = v23;
        _os_log_impl(&dword_184457000, v22, OS_LOG_TYPE_DEFAULT, "(generation 0x%08x)", buf, 8u);
      }
    }
    if (*(_BYTE *)(v9 + 92))
    {
      CA::Render::show_newline((CA::Render *)(a4 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v24 = x_log_category_utilities;
        if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
        {
          v25 = *(unsigned __int8 *)(v9 + 92);
          *(_DWORD *)buf = 67109120;
          LODWORD(v78) = v25;
          _os_log_impl(&dword_184457000, v24, OS_LOG_TYPE_DEFAULT, "(rotationFlags %d)", buf, 8u);
        }
      }
    }
    v26 = *(double *)(v9 + 128);
    if (((*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001
      || *(_QWORD *)&v26 == 0xFFF0000000000000
      || (*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
    {
      CA::Render::show_newline((CA::Render *)(a4 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v30 = x_log_category_utilities;
        if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          v78 = v26;
          _os_log_impl(&dword_184457000, v30, OS_LOG_TYPE_DEFAULT, "(edr-deadline %f)", buf, 0xCu);
        }
      }
    }
    if (*(_BYTE *)(v9 + 94))
    {
      CA::Render::show_newline((CA::Render *)(a4 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v31 = x_log_category_utilities;
        if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
        {
          v32 = *(unsigned __int8 *)(v9 + 94);
          *(_DWORD *)buf = 67109120;
          LODWORD(v78) = v32;
          _os_log_impl(&dword_184457000, v31, OS_LOG_TYPE_DEFAULT, "(enhancementMode %d)", buf, 8u);
        }
      }
    }
    v33 = (unsigned int *)(v9 + 248);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 | 0x80000000, v33));
    __dmb(0xBu);
    v35 = *(_DWORD *)(v9 + 248) & 1;
    v36 = v9 + 48 * (*(_DWORD *)(v9 + 248) & 1);
    v38 = *(double *)(v36 + 152);
    v37 = *(double *)(v36 + 160);
    v39 = *(double *)(v36 + 168);
    v40 = *(const char **)(v36 + 176);
    v41 = *(_QWORD *)(v36 + 184);
    v42 = *(_QWORD *)(v36 + 192);
    __dmb(0xBu);
    *(_DWORD *)(v9 + 248) = v35;
    v43 = v38 == 0.0 && v37 == 1.0;
    if (!v43
      || (v39 == 0.0 ? (v44 = ((unint64_t)v40 & 0x7FFFFFFFFFFFFFFFLL) < 0x7FF0000000000000) : (v44 = 1),
          !v44 ? (v45 = (v41 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) : (v45 = 1),
          !v45 ? (v46 = (v42 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL) : (v46 = 1),
          v46))
    {
      CA::Render::show_newline((CA::Render *)(a4 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v47 = x_log_category_utilities;
        if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134219264;
          v78 = v38;
          v79 = 2048;
          *(double *)v80 = v37;
          *(_WORD *)&v80[8] = 2048;
          *(double *)v81 = v39;
          *(_WORD *)&v81[8] = 2048;
          v82 = v40;
          *(_WORD *)v83 = 2048;
          *(_QWORD *)&v83[2] = v41;
          *(_WORD *)&v83[10] = 2048;
          *(_QWORD *)&v83[12] = v42;
          _os_log_impl(&dword_184457000, v47, OS_LOG_TYPE_DEFAULT, "(timing begin %g speed %g offset %g duration %g clamp-min %g clamp-max %g)", buf, 0x3Eu);
        }
      }
    }
    CA::Render::show_newline((CA::Render *)(a4 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v48 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v48, OS_LOG_TYPE_DEFAULT, "(samples", buf, 2u);
      }
    }
    if (a2)
    {
      v49 = (CA::Render *)(a4 + 2);
      while (2)
      {
        v50 = "iosurface";
        switch(*(_DWORD *)(v9 + 524))
        {
          case 0:
            goto LABEL_109;
          case 2:
          case 4:
            goto LABEL_88;
          case 3:
            v50 = "buffer";
            goto LABEL_88;
          default:
            v50 = "unknown";
LABEL_88:
            v51 = *(_DWORD *)(v9 + 516);
            if (v51 > 572662305)
            {
              if (v51 == 572662306)
              {
                v52 = "consumed";
                goto LABEL_98;
              }
              if (v51 == 858993459)
              {
                v52 = "flushed";
                goto LABEL_98;
              }
            }
            else
            {
              if (!v51)
              {
                v52 = "unconsumed";
                goto LABEL_98;
              }
              if (v51 == 286331153)
              {
                v52 = "displayed";
                goto LABEL_98;
              }
            }
            v52 = "<unknown>";
LABEL_98:
            v53 = *(_DWORD *)(v9 + 528);
            v54 = IOSurfaceLookup(*(_DWORD *)(v9 + 512));
            if (v54)
            {
              v55 = v54;
              DetachModeCode = IOSurfaceGetDetachModeCode();
              CFRelease(v55);
            }
            else
            {
              DetachModeCode = -1;
            }
            CA::Render::show_newline(v49);
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v57 = x_log_category_utilities;
              if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
              {
                v58 = *(_DWORD *)(v9 + 512);
                v59 = *(_DWORD *)(v9 + 532);
                v60 = *(_DWORD *)(v9 + 536);
                v61 = *(unsigned __int8 *)(v9 + 576);
                v63 = *(_QWORD *)(v9 + 456);
                v62 = *(double *)(v9 + 464);
                v64 = *(_DWORD *)(v9 + 520);
                v65 = " opaque";
                if ((v53 & 1) == 0)
                  v65 = "";
                v66 = " flipped";
                if ((v53 & 8) == 0)
                  v66 = "";
                *(_DWORD *)buf = 134220802;
                v78 = v62;
                v79 = 2080;
                *(_QWORD *)v80 = v50;
                *(_WORD *)&v80[8] = 1024;
                *(_DWORD *)v81 = v58;
                *(_WORD *)&v81[4] = 1024;
                *(_DWORD *)&v81[6] = v59;
                LOWORD(v82) = 1024;
                *(_DWORD *)((char *)&v82 + 2) = v60;
                HIWORD(v82) = 1024;
                *(_DWORD *)v83 = v61;
                *(_WORD *)&v83[4] = 2048;
                *(_QWORD *)&v83[6] = v63;
                *(_WORD *)&v83[14] = 1024;
                *(_DWORD *)&v83[16] = v64;
                v84 = 2048;
                v85 = DetachModeCode;
                v86 = 2080;
                v87 = v52;
                v88 = 2080;
                v89 = v65;
                v90 = 2080;
                v91 = v66;
                _os_log_impl(&dword_184457000, v57, OS_LOG_TYPE_DEFAULT, "(0x%llx %s 0x%x, [%d %d; rot %d] %f (generation 0x%08x) (detach 0x%016llx) %s%s%s)",
                  buf,
                  0x66u);
              }
            }
LABEL_109:
            v9 += 160;
            if (!--a2)
              break;
            continue;
        }
        break;
      }
    }
    if (x_log_hook_p())
    {
LABEL_111:
      x_log_();
      return;
    }
    v67 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v68 = "))";
LABEL_114:
      _os_log_impl(&dword_184457000, v67, OS_LOG_TYPE_DEFAULT, v68, buf, 2u);
    }
  }
}

BOOL CAImageQueueInsertImage(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, double a7)
{
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = xmmword_18474E240;
  return CAImageQueueInsertImage_(a1, a2, a3, a4, 0, &v8, a5, a6, a7, 0.0, 0.0, 0.0, 0.0);
}

IOSurfaceRef CAImageQueueCopyLastIOSurface(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  IOSurfaceID v4;
  IOSurfaceID v5;
  IOSurfaceID *v6;
  IOSurfaceID v7;
  BOOL v8;
  IOSurfaceRef v9;

  if (!*(_QWORD *)(a1 + 48))
    return 0;
  v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  v3 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v3)
    goto LABEL_15;
  v4 = 0;
  v5 = 0;
  v6 = (IOSurfaceID *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + 512);
  do
  {
    if (v6[3] && *v6)
    {
      v7 = v6[11];
      v8 = v7 >= v5;
      if (v7 > v5)
        v5 = v6[11];
      if (v8)
        v4 = *v6;
    }
    v6 += 40;
    --v3;
  }
  while (v3);
  if (v4)
    v9 = IOSurfaceLookup(v4);
  else
LABEL_15:
    v9 = 0;
  os_unfair_lock_unlock(v2);
  return v9;
}

IOSurfaceRef CAImageQueueCopyDisplayedIOSurface(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  IOSurfaceID v4;
  IOSurfaceID v5;
  IOSurfaceID *v6;
  IOSurfaceID v7;
  BOOL v8;
  IOSurfaceRef v9;

  if (!*(_QWORD *)(a1 + 48))
    return 0;
  v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  v3 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v3)
    goto LABEL_16;
  v4 = 0;
  v5 = 0;
  v6 = (IOSurfaceID *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + 512);
  do
  {
    if (v6[3] && *v6 && v6[1] == 286331153)
    {
      v7 = v6[11];
      v8 = v7 >= v5;
      if (v7 > v5)
        v5 = v6[11];
      if (v8)
        v4 = *v6;
    }
    v6 += 40;
    --v3;
  }
  while (v3);
  if (v4)
    v9 = IOSurfaceLookup(v4);
  else
LABEL_16:
    v9 = 0;
  os_unfair_lock_unlock(v2);
  return v9;
}

uint64_t CAImageQueueSetLatestCanonicalTime(uint64_t result, double a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(result + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    *(double *)(v3 + 288) = a2;
    __dmb(0xBu);
    *(_DWORD *)(v3 + 284) = *(_DWORD *)(v3 + 16);
  }
  return result;
}

uint64_t CAImageQueueRegisterPixelBuffer(uint64_t a1, CA::Render::Shmem *this, char *a3, uint64_t a4, int a5, void *a6, int a7, const void *a8)
{
  int v12;
  unsigned int *v15;
  unsigned int *v16;
  malloc_zone_t *malloc_zone;
  CA::Render::Texture *v18;
  CA::Render::Texture *v19;
  CA::Render::Texture *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  CGColorSpace *Value;
  const __CFDictionary *v25;
  float v26;
  const __CFDictionary *v27;
  CFTypeID v28;
  const void *v29;
  const void *v30;
  const void *v31;
  CFTypeID v32;
  CFTypeID v34;
  const void *v35;
  CFTypeID v36;
  const __CFNumber *v37;
  const __CFNumber *v38;
  const __CFNumber *v39;
  CFTypeID TypeID;
  CFTypeID v41;
  float64x2_t v42;
  unint64_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int8x16_t v46;
  unint64_t v47;
  float64x2_t v48;
  int32x4_t v49;
  int32x2_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  CA::Render::Texture *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  const __CFNumber *cf;
  double v59;
  double v60;
  double valuePtr;
  double v62[2];

  v62[1] = *(double *)MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 48))
    return 0;
  if (*(_DWORD *)(a1 + 20))
    return 0;
  v12 = (int)a6;
  v15 = CA::Render::Shmem::new_shmem((unint64_t)this, a3, 1, 0, 0, a6);
  if (!v15)
    return 0;
  v16 = v15;
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v18 = (CA::Render::Texture *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x90uLL, 0x743898A5uLL);
  if (!v18)
  {
    v51 = v16 + 2;
    do
    {
      v52 = __ldaxr(v51);
      v53 = v52 - 1;
    }
    while (__stlxr(v53, v51));
    if (!v53)
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 16))(v16);
    return 0;
  }
  v19 = v18;
  v20 = CA::Render::Texture::Texture(v18, a5, v12);
  *((_BYTE *)v20 + 12) = 38;
  ++dword_1ECDC7CC0;
  *(_QWORD *)v20 = off_1E1596528;
  v21 = v16 + 2;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  v23 = v16;
  if (!v22)
  {
    v23 = 0;
    do
      v57 = __ldaxr(v21);
    while (__stlxr(v57 - 1, v21));
  }
  *((_QWORD *)v19 + 12) = v23;
  *((_QWORD *)v19 + 13) = a4;
  *((_DWORD *)v19 + 28) = a7;
  *((_QWORD *)v19 + 16) = 0;
  *((_QWORD *)v19 + 17) = 0;
  *((_QWORD *)v19 + 15) = 0;
  if (a8)
  {
    *((_QWORD *)v19 + 15) = CFRetain(a8);
    Value = (CGColorSpace *)CFDictionaryGetValue((CFDictionaryRef)a8, (const void *)*MEMORY[0x1E0CA8CD8]);
    CA::Render::Texture::set_colorspace(v19, Value);
    v25 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a8, (const void *)*MEMORY[0x1E0CA8E68]);
    v26 = 1.0;
    if (v25)
    {
      v27 = v25;
      v28 = CFGetTypeID(v25);
      if (v28 == CFDictionaryGetTypeID())
      {
        v29 = CFDictionaryGetValue(v27, (const void *)*MEMORY[0x1E0CA8E70]);
        v30 = CFDictionaryGetValue(v27, (const void *)*MEMORY[0x1E0CA8E60]);
        if (v29)
        {
          v31 = v30;
          v32 = CFGetTypeID(v29);
          if (v32 == CFNumberGetTypeID() && v31 != 0)
          {
            v34 = CFGetTypeID(v31);
            if (v34 == CFNumberGetTypeID())
            {
              LODWORD(v62[0]) = 0;
              LODWORD(valuePtr) = 0;
              CFNumberGetValue((CFNumberRef)v29, kCFNumberFloatType, &valuePtr);
              CFNumberGetValue((CFNumberRef)v31, kCFNumberFloatType, v62);
              v26 = *(float *)v62 / *(float *)&valuePtr;
            }
          }
        }
      }
    }
    *((float *)v19 + 8) = v26;
    v35 = CFDictionaryGetValue((CFDictionaryRef)a8, (const void *)*MEMORY[0x1E0CA8E78]);
    if (v35 || (v35 = CFDictionaryGetValue((CFDictionaryRef)a8, (const void *)*MEMORY[0x1E0CA8D50])) != 0)
    {
      v36 = CFGetTypeID(v35);
      if (v36 == CFDictionaryGetTypeID())
      {
        v37 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v35, (const void *)*MEMORY[0x1E0CA8D48]);
        v38 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v35, (const void *)*MEMORY[0x1E0CA8D58]);
        v39 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v35, (const void *)*MEMORY[0x1E0CA8D60]);
        cf = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v35, (const void *)*MEMORY[0x1E0CA8D40]);
        TypeID = CFNumberGetTypeID();
        if (v37)
        {
          v41 = TypeID;
          if (CFGetTypeID(v37) == TypeID
            && v38
            && CFGetTypeID(v38) == v41
            && v39
            && CFGetTypeID(v39) == v41
            && cf
            && CFGetTypeID(cf) == v41)
          {
            valuePtr = 0.0;
            v62[0] = 0.0;
            v59 = 0.0;
            v60 = 0.0;
            CFNumberGetValue(v37, kCFNumberDoubleType, v62);
            CFNumberGetValue(v38, kCFNumberDoubleType, &valuePtr);
            CFNumberGetValue(v39, kCFNumberDoubleType, &v60);
            CFNumberGetValue(cf, kCFNumberDoubleType, &v59);
            v42.f64[0] = v60;
            v42.f64[1] = v59;
            v44 = (int32x4_t)vceqzq_f64(v42);
            v43 = vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v44, 1), (int8x16_t)v44).u64[0];
            v44.i64[0] = 0;
            v45 = 0uLL;
            if ((v43 & 0x8000000000000000) == 0)
            {
              v46 = vorrq_s8((int8x16_t)vcltzq_f64(v42), (int8x16_t)vcgezq_f64(v42));
              v47 = vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v46), 1), v46).u64[0];
              v45 = 0uLL;
              if ((v47 & 0x8000000000000000) == 0)
              {
                v48.f64[0] = v62[0] + ((double)a5 - v60) * 0.5;
                v48.f64[1] = (double)v12 - (v59 + valuePtr) + ((double)v12 - v59) * -0.5;
                v49 = (int32x4_t)vcvtpq_s64_f64(vmaxnmq_f64(v48, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
                v45 = vuzp1q_s32(v49, (int32x4_t)vsubq_s64(vcvtmq_s64_f64(vminnmq_f64(vaddq_f64(v48, v42), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v49));
              }
            }
            v44.i64[1] = __PAIR64__(v12, a5);
            if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v45, v44))), 0xFuLL))) & 1) != 0)
            {
              *((_WORD *)v19 + 12) = v45.i16[0];
              *((_WORD *)v19 + 13) = v45.i16[2];
              v50 = vsub_s32(*(int32x2_t *)((char *)v19 + 16), vadd_s32(*(int32x2_t *)v45.i8, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL)));
              *((_WORD *)v19 + 15) = v50.i16[2];
              *((_WORD *)v19 + 14) = v50.i16[0];
            }
          }
        }
      }
    }
  }
  else
  {
    *((_DWORD *)v19 + 8) = 1065353216;
  }
  if ((*(unsigned int (**)(CA::Render::Texture *))(*(_QWORD *)v19 + 120))(v19))
    *((_DWORD *)v19 + 3) |= 0x1000u;
  do
  {
    v55 = __ldaxr(v21);
    v56 = v55 - 1;
  }
  while (__stlxr(v56, v21));
  if (!v56)
    (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 16))(v16);
}

uint64_t CAImageQueueRegisterCVImageBuffer(uint64_t a1, void *cf, char a3)
{
  CFTypeID v6;
  __IOSurface *IOSurface;
  CGSize EncodedSize;
  malloc_zone_t *malloc_zone;
  CA::Render::Texture *v11;
  CA::Render::Texture *v12;
  CA::Render::Texture *v13;
  unsigned int **v14;
  const __CFDictionary **v15;
  CFTypeID v16;
  void *BaseAddress;
  char *DataSize;
  void *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  const __CFDictionary *v27;
  CA::Render::Texture *v28;
  CGColorSpace *Value;
  unsigned int v30;

  v6 = CFGetTypeID(cf);
  if (v6 == CVPixelBufferGetTypeID())
  {
    IOSurface = CVPixelBufferGetIOSurface((CVPixelBufferRef)cf);
    if (IOSurface)
      return CAImageQueueRegisterIOSurfaceBuffer((_anonymous_namespace_ *)a1, IOSurface, a3);
  }
  if (!*(_QWORD *)(a1 + 48))
    return 0;
  if (*(_DWORD *)(a1 + 20))
    return 0;
  EncodedSize = CVImageBufferGetEncodedSize((CVImageBufferRef)cf);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v11 = (CA::Render::Texture *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x90uLL, 0x743898A5uLL);
  if (!v11)
    return 0;
  v12 = v11;
  v13 = CA::Render::Texture::Texture(v11, EncodedSize.width, EncodedSize.height);
  *((_BYTE *)v13 + 12) = 38;
  ++dword_1ECDC7CC0;
  *(_QWORD *)v13 = off_1E1596528;
  *((_QWORD *)v13 + 12) = 0;
  v14 = (unsigned int **)((char *)v13 + 96);
  *((_QWORD *)v13 + 15) = 0;
  v15 = (const __CFDictionary **)((char *)v13 + 120);
  *((_QWORD *)v13 + 13) = 0;
  *((_DWORD *)v13 + 28) = 0;
  *((_QWORD *)v13 + 16) = 0;
  *((_QWORD *)v12 + 17) = CFRetain(cf);
  v16 = CFGetTypeID(cf);
  if (v16 == CVPixelBufferGetTypeID())
  {
    CVPixelBufferLockBaseAddress((CVPixelBufferRef)cf, 0);
    BaseAddress = CVPixelBufferGetBaseAddress((CVPixelBufferRef)cf);
    DataSize = (char *)CVPixelBufferGetDataSize((CVPixelBufferRef)cf);
    v20 = CA::Render::Shmem::new_shmem((unint64_t)BaseAddress, DataSize, 1, (uint64_t (*)(CA::Render *, _QWORD *, void *))CA::Render::release_cvpixelbuffer, (void (*)(const void *, void *))cf, v19);
    v21 = *v14;
    if (*v14 != v20)
    {
      if (v21)
      {
        v22 = v21 + 2;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
          (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 16))(v21);
      }
      if (v20)
      {
        v25 = v20 + 2;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 + 1, v25));
        if (!v26)
        {
          v20 = 0;
          do
            v30 = __ldaxr(v25);
          while (__stlxr(v30 - 1, v25));
        }
      }
      *v14 = v20;
    }
    if (v20)
      CVPixelBufferRetain((CVPixelBufferRef)cf);
    else
      CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)cf, 0);
    *((_QWORD *)v12 + 13) = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)cf);
    *((_DWORD *)v12 + 28) = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)cf);
  }
  v27 = CVBufferCopyAttachments((CVBufferRef)cf, kCVAttachmentMode_ShouldPropagate);
  *v15 = v27;
  if (v27)
  {
    Value = (CGColorSpace *)CFDictionaryGetValue(v27, (const void *)*MEMORY[0x1E0CA8CD8]);
    CA::Render::Texture::set_colorspace(v12, Value);
  }
}

uint64_t CAImageQueueRegisterBuffer(uint64_t a1, CA::Render::Shmem *a2, unint64_t a3, unint64_t a4, void *a5, unsigned int a6)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char v13;

  if (a4
    && a5
    && is_mul_ok((unint64_t)a5 - 1, a3)
    && (a6 > 0x25 ? (v9 = 0) : (v9 = dword_184750480[a6]),
        is_mul_ok(a4, v9)
     && ((v10 = ((unint64_t)a5 - 1) * a3, v11 = a4 * v9, v12 = (char *)(v10 + v11), !__CFADD__(v10, v11))
       ? (v13 = 0)
       : (v13 = 1),
         a6 <= 0x23 && (v13 & 1) == 0 && ((0x61CB910CuLL >> a6) & 1) == 0)))
  {
    return CAImageQueueRegisterPixelBuffer(a1, a2, v12, a3, a4, a5, dword_184750604[a6], 0);
  }
  else
  {
    return 0;
  }
}

uint64_t CAImageQueueCopyTexture(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  if (!*(_QWORD *)(a1 + 200))
    return 0;
  v4 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  v5 = x_hash_table_lookup(*(_QWORD *)(a1 + 200), a2, 0);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 24);
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      if (!v8)
      {
        v6 = 0;
        do
          v9 = __ldaxr(v7);
        while (__stlxr(v9 - 1, v7));
      }
    }
  }
  else
  {
    v6 = 0;
  }
  os_unfair_lock_unlock(v4);
  return v6;
}

unint64_t CAImageQueueGetTimes(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v3;
  _DWORD *v4;
  int i;
  int v6;
  unint64_t result;
  uint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v4 = *(_DWORD **)(v3 + 24);
    for (i = 16; i; --i)
    {
      v6 = *v4;
      __dmb(0xBu);
      if (v4[15] >= a3)
        result = a3;
      else
        result = v4[15];
      if (result)
      {
        v8 = (uint64_t *)(v4 + 82);
        v9 = a2;
        v10 = result;
        do
        {
          v11 = *v8;
          v8 += 3;
          *v9++ = v11;
          --v10;
        }
        while (v10);
      }
      __dmb(0xBu);
      if (v6 == v4[1])
        return result;
    }
  }
  return 0;
}

uint64_t CAImageQueueGetTimeStamp(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  int *v4;
  int v5;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  v3 = *(_QWORD *)(result + 48);
  if (v3)
  {
    v4 = *(int **)(v3 + 24);
    v5 = -17;
    do
    {
      if (__CFADD__(v5++, 1))
        break;
      v7 = *v4;
      __dmb(0xBu);
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 64) = 2;
      *(_QWORD *)(a3 + 16) = *a2;
      v8 = v4[70];
      v9 = 2;
      if (v8)
      {
        *(_DWORD *)(a3 + 4) = v8;
        *(_QWORD *)(a3 + 8) = *((_QWORD *)v4 + 33);
        *(_QWORD *)(a3 + 64) = 3;
        v9 = 3;
      }
      v10 = *((_QWORD *)v4 + 34);
      if (v10)
      {
        *(_QWORD *)(a3 + 32) = v10;
        v9 |= 8uLL;
        *(_QWORD *)(a3 + 64) = v9;
      }
      v11 = *((double *)v4 + 32);
      if (v11 != 0.0)
      {
        *(double *)(a3 + 24) = v11;
        *(_QWORD *)(a3 + 64) = v9 | 0x10;
      }
      __dmb(0xBu);
    }
    while (v7 != v4[1]);
  }
  return result;
}

double CAImageQueueGetLatestTime(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    return 0.0;
  v2 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v2)
    return -1.0;
  v3 = *(_QWORD *)(v1 + 24) + 456;
  result = -1.0;
  do
  {
    if (*(_DWORD *)(v3 + 68))
    {
      if (*(double *)v3 > result)
        result = *(double *)v3;
    }
    v3 += 160;
    --v2;
  }
  while (v2);
  return result;
}

double CAImageQueueGetDisplayTime(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  double result;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    return 0.0;
  v2 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v2)
    return -1.0;
  v3 = (_DWORD *)(*(_QWORD *)(v1 + 24) + 524);
  result = -1.0;
  do
  {
    if (*v3 && *(v3 - 2) && *(double *)(v3 - 17) > result)
      result = *(double *)(v3 - 17);
    v3 += 40;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t CAImageQueueGetDisplayMask()
{
  return 0;
}

unint64_t CAImageQueueGetGPURegistryID(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
    return atomic_load((unint64_t *)(*(_QWORD *)(v1 + 24) + 104));
  else
    return 0;
}

int *CAImageQueueSetMediaTiming(int *a1, double a2, float a3, double a4, double a5)
{
  return CAImageQueueSetMediaTimingClamped(a1, a2, a3, a4, a5, -INFINITY, INFINITY);
}

uint64_t ___ZN2CA12MachPortUtil17call_with_timeoutIPFijjjjjEJjjjEEEijjPKcT_DpT0__block_invoke(uint64_t a1)
{
  mach_error_t v2;
  mach_error_t v4;
  NSObject *v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  mach_error_t v10;
  __int16 v11;
  char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 32))(*(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(unsigned int *)(a1 + 64));
  if (v2)
  {
    v4 = v2;
    if (x_log_hook_p())
    {
      mach_error_string(v4);
      x_log_();
    }
    else
    {
      v5 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
      {
        v6 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315650;
        v8 = v6;
        v9 = 1024;
        v10 = v4;
        v11 = 2080;
        v12 = mach_error_string(v4);
        _os_log_impl(&dword_184457000, v5, OS_LOG_TYPE_ERROR, "%s client message err=0x%x : %s", buf, 0x1Cu);
      }
    }
  }
  return mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(_DWORD *)(a1 + 48));
}

void invoke_display_change_callback(_BYTE *a1)
{
  pthread_mutex_lock(&display_change_mutex);
  while (a1[176])
    pthread_cond_wait(&presented_cond, &display_change_mutex);
  if (*((_QWORD *)a1 + 21))
  {
    a1[176] = 1;
    pthread_mutex_unlock(&display_change_mutex);
    (*(void (**)(void))(*((_QWORD *)a1 + 21) + 16))();
    pthread_mutex_lock(&display_change_mutex);
    a1[176] = 0;
    pthread_cond_broadcast(&display_change_cond);
  }
  pthread_mutex_unlock(&display_change_mutex);
  CFRelease(a1);
}

uint64_t ___ZN2CA12MachPortUtil17call_with_timeoutIPFijjjjdddEJjjdddEEEijjPKcT_DpT0__block_invoke(uint64_t a1)
{
  mach_error_t v2;
  mach_error_t v4;
  NSObject *v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  mach_error_t v10;
  __int16 v11;
  char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, double, double, double))(a1 + 32))(*(unsigned int *)(a1 + 72), *(unsigned int *)(a1 + 76), *(unsigned int *)(a1 + 80), *(unsigned int *)(a1 + 84), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56));
  if (v2)
  {
    v4 = v2;
    if (x_log_hook_p())
    {
      mach_error_string(v4);
      x_log_();
    }
    else
    {
      v5 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
      {
        v6 = *(_QWORD *)(a1 + 64);
        *(_DWORD *)buf = 136315650;
        v8 = v6;
        v9 = 1024;
        v10 = v4;
        v11 = 2080;
        v12 = mach_error_string(v4);
        _os_log_impl(&dword_184457000, v5, OS_LOG_TYPE_ERROR, "%s client message err=0x%x : %s", buf, 0x1Cu);
      }
    }
  }
  return mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(_DWORD *)(a1 + 72));
}

os_log_t ___ZL20CAImageQueueStallLogv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreanimation", "CAImageQueue.Stalls");
  CAImageQueueStallLog(void)::log = (uint64_t)result;
  return result;
}

double **std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **>(double **result, double **a2, double **a3)
{
  double *v3;
  double v4;
  double *v5;
  double v6;
  double *v7;
  double v8;
  double *v9;

  v3 = *a2;
  v4 = **a2;
  v5 = *result;
  v6 = **result;
  v7 = *a3;
  v8 = **a3;
  if (v4 >= v6)
  {
    if (v8 < v4)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (**a2 < **result)
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v4)
    {
      *result = v3;
      *a2 = v5;
      if (**a3 >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v5;
  }
  return result;
}

double **std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **>(double **a1, double **a2, double **a3, double **a4)
{
  double **result;
  double *v9;
  double *v10;
  double *v11;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **>(a1, a2, a3);
  v9 = *a3;
  if (**a4 < **a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (**a3 < **a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (**a2 < **a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **>(double **a1, double **a2)
{
  uint64_t v4;
  _BOOL8 result;
  double *v6;
  double *v7;
  double **v8;
  double **v9;
  int v10;
  uint64_t v11;
  double *v12;
  double v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  double **v17;
  double **v18;
  double **v19;
  double **v20;
  double *v21;
  double *v22;
  double *v23;
  double v24;
  double *v25;
  double *v26;
  double *v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*v6 < **a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **>(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*v21 < *v22)
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = **v20;
        v25 = *v19;
        if (v24 < **v19)
        {
          *v19 = v23;
          *v20 = v25;
          v26 = *v18;
          if (v24 < **v18)
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v24 < **a1)
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = **v9;
    v14 = *v8;
    if (v13 < **v8)
    {
      v15 = v11;
      while (1)
      {
        *(double **)((char *)a1 + v15) = v14;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v14 = *(double **)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v13 >= *v14)
        {
          v17 = (double **)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

void imageQueueFinalize(char *a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **i;
  const void *v11;
  mach_port_name_t v12;

  if (*((_DWORD *)a1 + 5) == 1)
  {
    v2 = a1 + 80;
    if (*((_QWORD *)a1 + 10))
    {
      v3 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v3, "command", 4uLL);
      (*((void (**)(char *, xpc_object_t, _QWORD))a1 + 10))(a1, v3, *((_QWORD *)a1 + 11));
      xpc_release(v3);
      *v2 = 0;
      *((_QWORD *)a1 + 11) = 0;
    }
  }
  CAImageQueueInvalidate((uint64_t)a1);
  os_unfair_lock_lock((os_unfair_lock_t)a1 + 4);
  v4 = (_QWORD *)*((_QWORD *)a1 + 28);
  if (v4)
  {
    v5 = (uint64_t **)*((_QWORD *)a1 + 28);
    do
    {
      ((void (*)(uint64_t *, char *))v5[2])(v5[1], a1);
      v5 = (uint64_t **)*v5;
    }
    while (v5);
    do
    {
      v6 = (_QWORD *)*v4;
      free(v4);
      v4 = v6;
    }
    while (v6);
    *((_QWORD *)a1 + 28) = 0;
  }
  v7 = *((_QWORD *)a1 + 25);
  if (v7)
  {
    v8 = 0;
    v9 = 1 << *(_DWORD *)v7;
    do
    {
      for (i = *(uint64_t ***)(*(_QWORD *)(v7 + 16) + 8 * v8); i; i = (uint64_t **)*i)
        delete_buffer((uint64_t)i[2], (CAImageQueueBuffer *)i[3], a1);
      ++v8;
    }
    while (v8 != v9);
    x_hash_table_free(*((_QWORD **)a1 + 25));
    *((_QWORD *)a1 + 25) = 0;
  }
  v11 = (const void *)*((_QWORD *)a1 + 21);
  if (v11)
    _Block_release(v11);
  v12 = *((_DWORD *)a1 + 53);
  if (v12)
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], v12);
  os_unfair_lock_unlock((os_unfair_lock_t)a1 + 4);
}

CFStringRef imageQueueCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;

  v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, CFSTR("<CAImageQueue %p>"), a1);
}

CFStringRef imageQueueCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CAImageQueue %p>"), a1);
}

void CAImageQueueInvalidate(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  int *v14;
  uint64_t v15;
  int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  uint64_t v22;
  id *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  v2 = (_QWORD *)(a1 + 96);
  if (*(_QWORD *)(a1 + 96))
  {
    pthread_mutex_lock(&collectable_mutex);
    while (*(_BYTE *)(a1 + 112))
      pthread_cond_wait(&collectable_cond, &collectable_mutex);
    collectable_list = (uint64_t)x_list_remove((_QWORD *)collectable_list, a1);
    v3 = *(NSObject **)(a1 + 72);
    if (v3)
      dispatch_release(v3);
    *(_QWORD *)(a1 + 72) = 0;
    *v2 = 0;
    v2[1] = 0;
    v4 = *(_QWORD *)(a1 + 48);
    if (v4)
      *(_DWORD *)(*(_QWORD *)(v4 + 24) + 28) = 0;
    pthread_mutex_unlock(&collectable_mutex);
  }
  if (*(_QWORD *)(a1 + 144))
  {
    pthread_mutex_lock(&composited_mutex);
    while (*(_BYTE *)(a1 + 160))
      pthread_cond_wait(&composited_cond, &composited_mutex);
    composited_list = (uint64_t)x_list_remove((_QWORD *)composited_list, a1);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    v5 = *(_QWORD *)(a1 + 48);
    if (v5)
      *(_DWORD *)(*(_QWORD *)(v5 + 24) + 52) = 0;
    pthread_mutex_unlock(&composited_mutex);
  }
  if (*(_QWORD *)(a1 + 120))
  {
    pthread_mutex_lock(&presented_mutex);
    while (*(_BYTE *)(a1 + 136))
      pthread_cond_wait(&presented_cond, &presented_mutex);
    presented_list = (uint64_t)x_list_remove((_QWORD *)presented_list, a1);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    v6 = *(_QWORD *)(a1 + 48);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 24);
      *(_DWORD *)(v7 + 48) = 0;
      *(_BYTE *)(v7 + 94) = 0;
    }
    pthread_mutex_unlock(&presented_mutex);
  }
  if (*(_QWORD *)(a1 + 168))
  {
    pthread_mutex_lock(&display_change_mutex);
    while (*(_BYTE *)(a1 + 176))
      pthread_cond_wait(&display_change_cond, &display_change_mutex);
    display_change_list = (uint64_t)x_list_remove((_QWORD *)display_change_list, a1);
    _Block_release(*(const void **)(a1 + 168));
    *(_QWORD *)(a1 + 168) = 0;
    pthread_mutex_unlock(&display_change_mutex);
  }
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 24);
    v10 = atomic_load((unint64_t *)(v9 + 8));
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    v11 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = 0;
      v14 = (int *)(v9 + 524);
      v15 = (v10 >> 58) & 1;
      do
      {
        v16 = *v14;
        v14 += 40;
        if (v16)
        {
          v13 = release_image((_QWORD *)a1, v12, v13, v15);
          v11 = *(unsigned int *)(a1 + 40);
        }
        ++v12;
      }
      while (v12 < v11);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
      if (v13)
        release_images(a1, v13);
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
    }
    v17 = *(unsigned int **)(a1 + 48);
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 16))(v17);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v21 = *(void **)(a1 + 64);
  if (v21)
  {
    free(v21);
    *(_QWORD *)(a1 + 64) = 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  v22 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
  if (v22)
  {
    v23 = (id *)(v22 + 200);
    if (*(_QWORD *)(v22 + 200))
    {
      if (*(_BYTE *)(v22 + 208))
        objc_storeWeakOrNil(v23, 0);
      else
        *v23 = 0;
    }
    v24 = (unsigned int *)(v22 + 8);
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  }
}

void CAImageQueueSetOwner()
{
  NSObject *v0;
  uint8_t v1[8];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v0 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v1 = 0;
      _os_log_impl(&dword_184457000, v0, OS_LOG_TYPE_DEFAULT, "CoreAnimation: Warning! CAImageQueueSetOwner() is deprecated and does nothing. Please stop calling this method.\n", v1, 2u);
    }
  }
}

uint64_t CAImageQueueGetCapacity(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t CAImageQueueGetRotationFlags(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + 92);
}

uint64_t CAImageQueueSetIdentifier(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 48);
  if (v2)
    *(_QWORD *)(*(_QWORD *)(v2 + 24) + 80) = a2;
  return result;
}

uint64_t CAImageQueueGetIdentifier(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
    return *(_QWORD *)(*(_QWORD *)(v1 + 24) + 80);
  else
    return 0;
}

_QWORD *CAXPCImageQueueCreate(const __CFDictionary *a1, uint64_t a2, uint64_t a3)
{
  unsigned int Int;
  const __CFDictionary *Int64;
  const __CFDictionary *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  xpc_object_t v12;
  NSObject *v13;
  __int16 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  Int = CA_CFDictionaryGetInt(a1, CFSTR("imageQueueCapacity"));
  Int64 = CA_CFDictionaryGetInt64(a1, CFSTR("imageQueueIdentifier"));
  if (a2)
  {
    v8 = Int64;
    v9 = (_QWORD *)CAImageQueueCreate_(1, Int);
    v10 = v9;
    if (v9)
    {
      v9[10] = a2;
      v9[11] = a3;
      v11 = v9[6];
      if (v11)
        *(_QWORD *)(*(_QWORD *)(v11 + 24) + 80) = v8;
      v12 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v12, "command", 1uLL);
      xpc_dictionary_set_uint64(v12, "capacity", *((unsigned int *)v10 + 10));
      xpc_dictionary_set_uint64(v12, "shmemFlags", (unint64_t)*(unsigned int *)(v10[6] + 12) >> 8);
      xpc_dictionary_set_uint64(v12, "shmemSize", *(_QWORD *)(v10[6] + 16));
      xpc_dictionary_set_uint64(v12, "shmemOffset", (*MEMORY[0x1E0C85AD8] - 1) & *(_QWORD *)(v10[6] + 24));
      CA::Render::Shmem::port((mach_port_t *)v10[6]);
      xpc_dictionary_set_mach_send();
      ((void (*)(_QWORD *, xpc_object_t, _QWORD))v10[10])(v10, v12, v10[11]);
      xpc_release(v12);
    }
  }
  else
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v13 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
      {
        v15 = 0;
        _os_log_impl(&dword_184457000, v13, OS_LOG_TYPE_DEFAULT, "Invalid callback for CAXPCImageQueueCreate!", (uint8_t *)&v15, 2u);
      }
    }
    return 0;
  }
  return v10;
}

uint64_t CAXPCImageQueueCommandForMessage(void *a1)
{
  return xpc_dictionary_get_uint64(a1, "command");
}

void _CAXPCImageQueueSampleInvalidate(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _DWORD *v5;
  unsigned int v6;
  const void *v7;

  if ((*(_BYTE *)(a1 + 64) & 1) == 0)
  {
    *(_BYTE *)(a1 + 64) |= 1u;
    v2 = *(_QWORD *)(a1 + 56);
    if (v2)
    {
      v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 24) + 160 * *(_QWORD *)(a1 + 16) + 608);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      v5 = *(_DWORD **)(a1 + 56);
      if (v4 == 1)
      {
        v6 = v5[6];
        if (v6 <= *(_DWORD *)(a1 + 24))
          v6 = *(_DWORD *)(a1 + 24);
        v5[6] = v6;
      }
      CFRelease(v5);
      *(_QWORD *)(a1 + 56) = 0;
    }
    v7 = *(const void **)(a1 + 32);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
}

void xpcImageQueueSampleFinalize(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t buf[4];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if ((a1[8] & 3) == 2)
  {
    v2 = a1[7];
    if (v2)
    {
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 24) + 160 * a1[2] + 608) <= 1u)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v3 = x_log_category_utilities;
          if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134217984;
            v5 = a1;
            _os_log_impl(&dword_184457000, v3, OS_LOG_TYPE_ERROR, "CAXPCImageQueueSampleRef %p released without calling finish!", buf, 0xCu);
          }
        }
      }
    }
  }
  _CAXPCImageQueueSampleInvalidate((uint64_t)a1);
}

CFStringRef xpcImageQueueSampleCopyFormatDescription(__IOSurface **a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;
  __IOSurface *v5;
  uint64_t ID;

  v4 = CFGetAllocator(a1);
  v5 = a1[4];
  ID = IOSurfaceGetID(v5);
  return CFStringCreateWithFormat(v4, a2, CFSTR("<CAXPCImageQueueSample %p : IOSurfaceRef %p (id 0x%x), read %u, t %g>\n"), a1, v5, ID, *((unsigned int *)a1 + 10), a1[6]);
}

CFStringRef xpcImageQueueSampleCopyDebugDescription(__IOSurface **a1)
{
  return xpcImageQueueSampleCopyFormatDescription(a1, 0);
}

uint64_t CAXPCImageQueueSampleGetIOSurface(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t CAXPCImageQueueSampleGetDisplayCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

double CAXPCImageQueueSampleGetTimestamp(uint64_t a1)
{
  return *(double *)(a1 + 48);
}

void CAXPCImageQueueSampleFinish(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *Value;
  const void *v8;
  double v9;
  const void *v10;
  double v11;
  const void *v12;
  double v13;

  if (a1)
  {
    if (theDict)
    {
      v4 = *(_QWORD *)(a1 + 56);
      if (v4)
      {
        v5 = *(_QWORD *)(a1 + 16);
        if (v5 >= *(_QWORD *)(v4 + 32))
          __assert_rtn("CAXPCImageQueueSampleFinish", "CAImageQueue.cpp", 4937, "sample->index < sample->receiver->capacity");
        v6 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 24);
        if (CFDictionaryContainsKey(theDict, CFSTR("sampleDisplayCount")))
        {
          Value = CFDictionaryGetValue(theDict, CFSTR("sampleDisplayCount"));
          if (Value)
            LODWORD(Value) = CA_CFIntValue(Value);
          *(_DWORD *)(v6 + 160 * v5 + 540) = (_DWORD)Value;
        }
        if (CFDictionaryContainsKey(theDict, CFSTR("sampleDisplayInterval")))
        {
          v8 = CFDictionaryGetValue(theDict, CFSTR("sampleDisplayInterval"));
          if (v8)
            v9 = CA_CFDoubleValue(v8);
          else
            v9 = 0.0;
          *(double *)(v6 + 160 * v5 + 488) = v9;
        }
        if (CFDictionaryContainsKey(theDict, CFSTR("sampleLocalLayerTime")))
        {
          v10 = CFDictionaryGetValue(theDict, CFSTR("sampleLocalLayerTime"));
          if (v10)
            v11 = CA_CFDoubleValue(v10);
          else
            v11 = 0.0;
          *(double *)(v6 + 160 * v5 + 472) = v11;
        }
        if (CFDictionaryContainsKey(theDict, CFSTR("sampleHostMachTime")))
          *(_QWORD *)(v6 + 160 * v5 + 480) = CA_CFDictionaryGetInt64(theDict, CFSTR("sampleHostMachTime"));
        if (CFDictionaryContainsKey(theDict, CFSTR("samplePresentaitonMachTime")))
          *(_QWORD *)(v6 + 160 * v5 + 496) = CA_CFDictionaryGetInt64(theDict, CFSTR("samplePresentaitonMachTime"));
        if (CFDictionaryContainsKey(theDict, CFSTR("duration")))
        {
          v12 = CFDictionaryGetValue(theDict, CFSTR("duration"));
          if (v12)
            v13 = CA_CFDoubleValue(v12);
          else
            v13 = 0.0;
          *(double *)(v6 + 160 * v5 + 504) = v13;
        }
      }
    }
    _CAXPCImageQueueSampleInvalidate(a1);
  }
}

void xpcImageQueueReceiverFinalize(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t **v7;
  _QWORD *v8;
  void **v9;
  _QWORD *v10;
  void *v11;

  v2 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  v3 = *(unsigned int **)&a1[10]._os_unfair_lock_opaque;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  *(_QWORD *)&a1[10]._os_unfair_lock_opaque = 0;
  v7 = *(uint64_t ***)&a1[16]._os_unfair_lock_opaque;
  if (v7)
  {
    do
    {
      CFRelease(v7[3]);
      v7 = (uint64_t **)*v7;
    }
    while (v7);
    v8 = *(_QWORD **)&a1[16]._os_unfair_lock_opaque;
    v9 = (void **)&a1[12];
    if (v8)
    {
      do
      {
        v10 = (_QWORD *)*v8;
        operator delete(v8);
        v8 = v10;
      }
      while (v10);
    }
  }
  else
  {
    v9 = (void **)&a1[12];
  }
  v11 = *v9;
  *v9 = 0;
  if (v11)
    operator delete(v11);
  os_unfair_lock_unlock(v2);
}

__CFString *xpcImageQueueReceiverCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v3;
  __CFString *Mutable;
  _QWORD *i;
  __IOSurface *v6;
  uint64_t v7;
  uint64_t ID;
  uint64_t v9;
  const char *v10;
  char *v11;
  void *v13[4];

  v13[3] = *(void **)MEMORY[0x1E0C80C00];
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<CAXPCImageQueueReceiver %p>\n"), a1);
  os_unfair_lock_lock((os_unfair_lock_t)a1 + 4);
  for (i = (_QWORD *)*((_QWORD *)a1 + 8); i; i = (_QWORD *)*i)
  {
    v7 = i[2];
    v6 = (__IOSurface *)i[3];
    ID = IOSurfaceGetID(v6);
    CFStringAppendFormat(Mutable, 0, CFSTR("{0x%llx : IOSurfaceRef %p (id 0x%x)}\n"), v7, v6, ID);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1 + 4);
  v9 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 24);
  memset(v13, 0, 24);
  x_stream_push((uint64_t)v13);
  CAShmemImageQueueShow(v9, *((_QWORD *)a1 + 4), 0, 0, 0);
  v10 = x_stream_finish((uint64_t)v13);
  if (v10)
  {
    v11 = (char *)v10;
    CFStringAppendCString(Mutable, v10, 0x8000100u);
    free(v11);
  }
  x_stream_pop_((uint64_t)v13);
  if (v13[0])
    free(v13[0]);
  return Mutable;
}

uint64_t CAXPCImageQueueReceiverCreate(void *a1)
{
  uint64_t result;
  uint64_t value;
  int v4;
  mach_vm_size_t v5;
  mem_entry_name_port_t v6;
  _DWORD *v7;
  NSObject *v8;
  uint8_t v9[8];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (xpc_dictionary_get_uint64(a1, "command") != 1)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v8 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_ERROR, "Invalid command in CAXPCImageQueueReceiverCreate message!", v9, 2u);
      }
    }
    return 0;
  }
  result = (uint64_t)xpc_dictionary_get_value(a1, "capacity");
  if (!result)
    return result;
  value = xpc_uint64_get_value((xpc_object_t)result);
  result = (uint64_t)xpc_dictionary_get_value(a1, "shmemFlags");
  if (!result)
    return result;
  v4 = xpc_uint64_get_value((xpc_object_t)result);
  result = (uint64_t)xpc_dictionary_get_value(a1, "shmemSize");
  if (!result)
    return result;
  v5 = xpc_uint64_get_value((xpc_object_t)result);
  result = (uint64_t)xpc_dictionary_get_value(a1, "shmemOffset");
  if (!result)
    return result;
  xpc_uint64_get_value((xpc_object_t)result);
  v6 = xpc_dictionary_copy_mach_send();
  result = 0;
  if (!v6 || !v5 || v5 < value)
    return result;
  v7 = CA::Render::Shmem::new_shmem(v6, v5, 0, v4);
  mach_port_deallocate(*MEMORY[0x1E0C83DA0], v6);
  if (!v7)
    return 0;
  if (!CAXPCImageQueueReceiverGetTypeID(void)::type)
    CAXPCImageQueueReceiverGetTypeID(void)::type = _CFRuntimeRegisterClass();
  result = _CFRuntimeCreateInstance();
  *(_QWORD *)(result + 16) = 0x100000000;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = value;
  *(_QWORD *)(result + 40) = v7;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_DWORD *)(result + 80) = 1065353216;
  return result;
}

void CAXPCImageQueueReceiverSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  os_unfair_lock_s *v6;

  v6 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  if (CFEqual(a2, CFSTR("displayRefreshRate")))
    *(float *)(a1 + 28) = CA_CFFloatValue(a3);
  os_unfair_lock_unlock(v6);
}

uint64_t CAXPCImageQueueReceiverProcessMessage(uint64_t a1, xpc_object_t xdict)
{
  int uint64;
  mach_port_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int8x8_t v12;
  unint64_t v13;
  uint8x8_t v14;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  IOSurfaceRef v19;
  IOSurfaceRef v20;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  unint64_t v26;
  NSObject *v27;
  uint32_t v28;
  NSObject *v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *i;
  unint64_t v34;
  _QWORD *v35;
  float v36;
  float v37;
  _BOOL8 v38;
  unint64_t v39;
  unint64_t v40;
  int8x8_t prime;
  uint64_t v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint8x8_t v48;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint8_t buf[4];
  uint64_t v60;
  __int16 v61;
  _WORD v62[17];

  *(_QWORD *)&v62[13] = *MEMORY[0x1E0C80C00];
  uint64 = xpc_dictionary_get_uint64(xdict, "command");
  if (uint64 == 3)
  {
    v8 = xpc_dictionary_get_uint64(xdict, "iosurfaceRenderId");
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    v9 = (_QWORD *)(a1 + 48);
    v10 = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>((_QWORD *)(a1 + 48), v8);
    if (v10)
    {
      v11 = v10;
      CFRelease((CFTypeRef)v10[3]);
      v12 = *(int8x8_t *)(a1 + 56);
      v13 = v11[1];
      v14 = (uint8x8_t)vcnt_s8(v12);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] > 1uLL)
      {
        if (v13 >= *(_QWORD *)&v12)
          v13 %= *(_QWORD *)&v12;
      }
      else
      {
        v13 &= *(_QWORD *)&v12 - 1;
      }
      v16 = *(_QWORD **)(*v9 + 8 * v13);
      do
      {
        v17 = v16;
        v16 = (_QWORD *)*v16;
      }
      while (v16 != v11);
      if (v17 == (_QWORD *)(a1 + 64))
        goto LABEL_42;
      v18 = v17[1];
      if (v14.u32[0] > 1uLL)
      {
        if (v18 >= *(_QWORD *)&v12)
          v18 %= *(_QWORD *)&v12;
      }
      else
      {
        v18 &= *(_QWORD *)&v12 - 1;
      }
      if (v18 != v13)
      {
LABEL_42:
        if (!*v11)
          goto LABEL_43;
        v26 = *(_QWORD *)(*v11 + 8);
        if (v14.u32[0] > 1uLL)
        {
          if (v26 >= *(_QWORD *)&v12)
            v26 %= *(_QWORD *)&v12;
        }
        else
        {
          v26 &= *(_QWORD *)&v12 - 1;
        }
        if (v26 != v13)
LABEL_43:
          *(_QWORD *)(*v9 + 8 * v13) = 0;
      }
      v30 = *v11;
      if (*v11)
      {
        v31 = *(_QWORD *)(v30 + 8);
        if (v14.u32[0] > 1uLL)
        {
          if (v31 >= *(_QWORD *)&v12)
            v31 %= *(_QWORD *)&v12;
        }
        else
        {
          v31 &= *(_QWORD *)&v12 - 1;
        }
        if (v31 != v13)
        {
          *(_QWORD *)(*v9 + 8 * v31) = v17;
          v30 = *v11;
        }
      }
      *v17 = v30;
      *v11 = 0;
      --*(_QWORD *)(a1 + 72);
      operator delete(v11);
    }
    else if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v29 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        v60 = a1;
        v61 = 2048;
        *(_QWORD *)v62 = v8;
        _os_log_impl(&dword_184457000, v29, OS_LOG_TYPE_ERROR, "CAXPCIQR(%p) unregister: id 0x%llx not found", buf, 0x16u);
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
    return 1;
  }
  if (uint64 != 2)
    return 0;
  v5 = xpc_dictionary_copy_mach_send();
  v6 = xpc_dictionary_get_uint64(xdict, "iosurfaceRenderId");
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  if (v5)
  {
    v7 = (_QWORD *)(a1 + 48);
    if (std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>((_QWORD *)(a1 + 48), v6))
    {
      if (x_log_hook_p())
        goto LABEL_12;
      v24 = x_log_category_utilities;
      if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
        goto LABEL_127;
      *(_DWORD *)buf = 134218240;
      v60 = a1;
      v61 = 2048;
      *(_QWORD *)v62 = v6;
      v25 = "CAXPCIQR(%p) register: id 0x%llx already registered";
      goto LABEL_36;
    }
    v19 = IOSurfaceLookupFromMachPort(v5);
    if (!v19)
    {
      if (x_log_hook_p())
        goto LABEL_12;
      v42 = x_log_category_utilities;
      if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
        goto LABEL_127;
      *(_DWORD *)buf = 134218496;
      v60 = a1;
      v61 = 1024;
      *(_DWORD *)v62 = v5;
      v62[2] = 2048;
      *(_QWORD *)&v62[3] = v6;
      v25 = "CAXPCIQR(%p) register: iosurface lookup for port(%u) failed for id 0x%llx";
      v27 = v42;
      v28 = 28;
LABEL_37:
      _os_log_impl(&dword_184457000, v27, OS_LOG_TYPE_ERROR, v25, buf, v28);
      goto LABEL_127;
    }
    v20 = v19;
    v21 = *(_QWORD *)(a1 + 56);
    if (v21)
    {
      v22 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
      v22.i16[0] = vaddlv_u8(v22);
      if (v22.u32[0] > 1uLL)
      {
        v23 = v6;
        if (v6 >= v21)
          v23 = v6 % v21;
      }
      else
      {
        v23 = (v21 - 1) & v6;
      }
      v32 = *(_QWORD **)(*v7 + 8 * v23);
      if (v32)
      {
        for (i = (_QWORD *)*v32; i; i = (_QWORD *)*i)
        {
          v34 = i[1];
          if (v34 == v6)
          {
            if (i[2] == v6)
              goto LABEL_127;
          }
          else
          {
            if (v22.u32[0] > 1uLL)
            {
              if (v34 >= v21)
                v34 %= v21;
            }
            else
            {
              v34 &= v21 - 1;
            }
            if (v34 != v23)
              break;
          }
        }
      }
    }
    else
    {
      v23 = 0;
    }
    v35 = operator new(0x20uLL);
    *v35 = 0;
    v35[1] = v6;
    v35[2] = v6;
    v35[3] = v20;
    v36 = (float)(unint64_t)(*(_QWORD *)(a1 + 72) + 1);
    v37 = *(float *)(a1 + 80);
    if (v21 && (float)(v37 * (float)v21) >= v36)
    {
LABEL_117:
      v54 = (_QWORD *)*v7;
      v55 = *(_QWORD **)(*v7 + 8 * v23);
      if (v55)
      {
        *v35 = *v55;
      }
      else
      {
        v56 = *(_QWORD *)(a1 + 64);
        *v35 = v56;
        *(_QWORD *)(a1 + 64) = v35;
        v54[v23] = a1 + 64;
        if (!v56)
        {
LABEL_126:
          ++*(_QWORD *)(a1 + 72);
          goto LABEL_127;
        }
        v57 = *(_QWORD *)(v56 + 8);
        if ((v21 & (v21 - 1)) != 0)
        {
          if (v57 >= v21)
            v57 %= v21;
        }
        else
        {
          v57 &= v21 - 1;
        }
        v55 = (_QWORD *)(*v7 + 8 * v57);
      }
      *v55 = v35;
      goto LABEL_126;
    }
    v38 = 1;
    if (v21 >= 3)
      v38 = (v21 & (v21 - 1)) != 0;
    v39 = v38 | (2 * v21);
    v40 = vcvtps_u32_f32(v36 / v37);
    if (v39 <= v40)
      prime = (int8x8_t)v40;
    else
      prime = (int8x8_t)v39;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v21 = *(_QWORD *)(a1 + 56);
    }
    if (*(_QWORD *)&prime > v21)
      goto LABEL_83;
    if (*(_QWORD *)&prime < v21)
    {
      v49 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 72) / *(float *)(a1 + 80));
      if (v21 < 3 || (v50 = (uint8x8_t)vcnt_s8((int8x8_t)v21), v50.i16[0] = vaddlv_u8(v50), v50.u32[0] > 1uLL))
      {
        v49 = std::__next_prime(v49);
      }
      else
      {
        v51 = 1 << -(char)__clz(v49 - 1);
        if (v49 >= 2)
          v49 = v51;
      }
      if (*(_QWORD *)&prime <= v49)
        prime = (int8x8_t)v49;
      if (*(_QWORD *)&prime >= v21)
      {
        v21 = *(_QWORD *)(a1 + 56);
      }
      else
      {
        if (prime)
        {
LABEL_83:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v43 = operator new(8 * *(_QWORD *)&prime);
          v44 = (_QWORD *)*v7;
          *v7 = v43;
          if (v44)
            operator delete(v44);
          v45 = 0;
          *(int8x8_t *)(a1 + 56) = prime;
          do
            *(_QWORD *)(*v7 + 8 * v45++) = 0;
          while (*(_QWORD *)&prime != v45);
          v46 = *(_QWORD **)(a1 + 64);
          if (v46)
          {
            v47 = v46[1];
            v48 = (uint8x8_t)vcnt_s8(prime);
            v48.i16[0] = vaddlv_u8(v48);
            if (v48.u32[0] > 1uLL)
            {
              if (v47 >= *(_QWORD *)&prime)
                v47 %= *(_QWORD *)&prime;
            }
            else
            {
              v47 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*v7 + 8 * v47) = a1 + 64;
            v52 = (_QWORD *)*v46;
            if (*v46)
            {
              do
              {
                v53 = v52[1];
                if (v48.u32[0] > 1uLL)
                {
                  if (v53 >= *(_QWORD *)&prime)
                    v53 %= *(_QWORD *)&prime;
                }
                else
                {
                  v53 &= *(_QWORD *)&prime - 1;
                }
                if (v53 != v47)
                {
                  if (!*(_QWORD *)(*v7 + 8 * v53))
                  {
                    *(_QWORD *)(*v7 + 8 * v53) = v46;
                    goto LABEL_108;
                  }
                  *v46 = *v52;
                  *v52 = **(_QWORD **)(*v7 + 8 * v53);
                  **(_QWORD **)(*v7 + 8 * v53) = v52;
                  v52 = v46;
                }
                v53 = v47;
LABEL_108:
                v46 = v52;
                v52 = (_QWORD *)*v52;
                v47 = v53;
              }
              while (v52);
            }
          }
          v21 = (unint64_t)prime;
          goto LABEL_112;
        }
        v58 = (_QWORD *)*v7;
        *v7 = 0;
        if (v58)
          operator delete(v58);
        v21 = 0;
        *(_QWORD *)(a1 + 56) = 0;
      }
    }
LABEL_112:
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v6 >= v21)
        v23 = v6 % v21;
      else
        v23 = v6;
    }
    else
    {
      v23 = (v21 - 1) & v6;
    }
    goto LABEL_117;
  }
  if (!x_log_hook_p())
  {
    v24 = x_log_category_utilities;
    if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
      goto LABEL_127;
    *(_DWORD *)buf = 134218240;
    v60 = a1;
    v61 = 2048;
    *(_QWORD *)v62 = v6;
    v25 = "CAXPCIQR(%p) register: NULL port for id 0x%llx";
LABEL_36:
    v27 = v24;
    v28 = 22;
    goto LABEL_37;
  }
LABEL_12:
  x_log_();
LABEL_127:
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
  mach_port_deallocate(*MEMORY[0x1E0C83DA0], v5);
  return 1;
}

uint64_t CAXPCImageQueueReceiverCreateSampleForTime(uint64_t a1, char a2, double a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  float v16;
  double v17;
  unsigned int v18;
  int v19;
  _BOOL4 v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  _QWORD *v23;
  CFTypeRef v24;
  CA::Render::LayerNode *v25;
  uint64_t Instance;
  NSObject *v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t buf[4];
  uint64_t v38;
  _BYTE v39[104];
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24);
  v6 = (unsigned int *)(v5 + 248);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 | 0x80000000, v6));
  __dmb(0xBu);
  v8 = *(_DWORD *)(v5 + 248) & 1;
  v9 = (double *)(v5 + 48 * (*(_DWORD *)(v5 + 248) & 1));
  v10 = v9[20];
  v11 = v9[21] + (a3 - v9[19]) * v10;
  if (v9[22] >= v11)
    v12 = v11;
  else
    v12 = v9[22];
  v13 = *((_QWORD *)v9 + 22);
  v14 = v9[23];
  v15 = v9[24];
  __dmb(0xBu);
  *(_DWORD *)(v5 + 248) = v8;
  v16 = v10;
  if (v12 < 0.0)
    v12 = 0.0;
  if ((v13 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    v11 = v12;
  if (v15 < v11)
    v11 = v15;
  if (v14 <= v11)
    v17 = v11;
  else
    v17 = v14;
  v18 = *(_DWORD *)(a1 + 20) + 1;
  *(_DWORD *)(a1 + 20) = v18;
  bzero(v39, 0x430uLL);
  v19 = *(_DWORD *)(a1 + 24);
  v29 = 0uLL;
  CA::Render::Update::Update((CA::Render::Update *)v39, 0, 0, v17, 0, v18, v19, v19, (const CA::Bounds *)&v29, 0);
  v41 = *(float *)(a1 + 28);
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v20 = CAShmemImageQueueCopyImageInfo(0, *(_QWORD *)(a1 + 32), v5, (uint64_t)v39, (uint64_t)&v29, (a2 & 1) == 0, 0, 0, v17, v16);
  if ((a2 & 1) == 0)
    CAShmemImageQueueUpdate(v5, 0, 0, 0, 0, v42, 0, 0, v16, v40);
  v21 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  if (!v20)
    goto LABEL_27;
  v22 = v32;
  v23 = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>((_QWORD *)(a1 + 48), v32);
  if (!v23)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v27 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        v38 = v22;
        _os_log_impl(&dword_184457000, v27, OS_LOG_TYPE_ERROR, "CAXPCImageQueue: buffer id 0x%llx not found!", buf, 0xCu);
      }
    }
LABEL_27:
    os_unfair_lock_unlock(v21);
    goto LABEL_28;
  }
  v24 = CFRetain((CFTypeRef)v23[3]);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
  if (!v24)
  {
LABEL_28:
    Instance = 0;
    goto LABEL_29;
  }
  if (!CAXPCImageQueueSampleGetTypeID(void)::type)
    CAXPCImageQueueSampleGetTypeID(void)::type = _CFRuntimeRegisterClass();
  Instance = _CFRuntimeCreateInstance();
  *(_QWORD *)(Instance + 16) = DWORD2(v35);
  *(_DWORD *)(Instance + 24) = *(_DWORD *)(a1 + 20);
  *(_QWORD *)(Instance + 32) = v24;
  *(_BYTE *)(Instance + 64) = (*(_BYTE *)(Instance + 64) & 0xFD | a2 & 2) ^ 2;
  CFRetain((CFTypeRef)a1);
  *(_QWORD *)(Instance + 56) = a1;
  *(_BYTE *)(Instance + 64) &= ~1u;
  *(_DWORD *)(Instance + 40) = DWORD2(v30);
  *(_QWORD *)(Instance + 48) = *((_QWORD *)&v32 + 1);
LABEL_29:
  CA::Render::Update::~Update((CA::Render::Update *)v39, v25);
  return Instance;
}

uint64_t CAXPCImageQueueReceiverGetImageCount(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  int *v4;
  int v5;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    return 0;
  result = 0;
  v4 = (int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 524);
  do
  {
    v5 = *v4;
    v4 += 40;
    if (v5)
      ++result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t CAXPCImageQueueReceiverSetDisplayedPixelCount(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 24) + 68) = a2;
  return result;
}

uint64_t CAXPCImageQueueReceiverGetIdentifier(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24);
  if (v1)
    return *(_QWORD *)(v1 + 80);
  else
    return 0;
}

void sub_1846CE7C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _Unwind_Resume(exception_object);
}

void sub_1846CE92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  _Unwind_Resume(exception_object);
}

void std::vector<std::tuple<int,unsigned int,int,unsigned int,std::unordered_set<CA::Render::String *>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 56;
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)(v4 - 40));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1846CF350(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D0214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unsigned int *v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  va_list va;

  va_start(va, a2);
  if (v2)
  {
    v4 = v2 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  _Unwind_Resume(a1);
}

void sub_1846D0390(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;
  void *v2;

  if (v2)
    operator delete(v2);
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D0920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, pthread_mutex_t *a13)
{
  pthread_mutex_unlock(a13);
  _Unwind_Resume(a1);
}

void sub_1846D0A94(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D0C10(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;
  void *v2;

  operator delete(v2);
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D0CA4(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D1108(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D1208(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D12D4(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D13A0(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D1648(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D1964(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D19DC(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D1A48(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D1BBC(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D1D9C(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D1E48(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D1F28(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D20F4(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D2164(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D2264(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D2364(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D2414(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D295C(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D2A64(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D31D8(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D3248(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D32B8(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D39F0(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D3A64(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D3AD0(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D3B3C(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D3C7C(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D3CF4(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D3DF0(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1846D4880(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1846D5DC0(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t display_for_server(CA::WindowServer::Server *a1)
{
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[128];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = (void *)objc_msgSend((id)_shared_server, "displays");
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v7, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v9;
LABEL_3:
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)v9 != v5)
        objc_enumerationMutation(v2);
      result = *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * v6);
      if (*(CA::WindowServer::Server **)(*(_QWORD *)(result + 8) + 64) == a1)
        break;
      if (v4 == ++v6)
      {
        result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v7, 16);
        v4 = result;
        if (result)
          goto LABEL_3;
        return result;
      }
    }
  }
  return result;
}

void `anonymous namespace'::ConvertTransform::~ConvertTransform(_anonymous_namespace_::ConvertTransform *this)
{
  CA::Render::LayerNode *v2;
  CA::Render::LayerNode *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void **v11[2];

  v11[1] = *(void ***)MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E1598648;
  v11[0] = (void **)((char *)this + 40);
  std::vector<X::Ref<CA::Render::Handle>>::__destroy_vector::operator()[abi:nn180100](v11);
  v3 = (CA::Render::LayerNode *)*((_QWORD *)this + 4);
  if (v3)
  {
    v4 = (unsigned int *)((char *)v3 + 16);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      CA::Render::LayerNode::delete_node(v3, v2);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 3);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
}

{
  CA::Render::LayerNode *v2;
  CA::Render::LayerNode *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void **v11[2];

  v11[1] = *(void ***)MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E1598648;
  v11[0] = (void **)((char *)this + 40);
  std::vector<X::Ref<CA::Render::Handle>>::__destroy_vector::operator()[abi:nn180100](v11);
  v3 = (CA::Render::LayerNode *)*((_QWORD *)this + 4);
  if (v3)
  {
    v4 = (unsigned int *)((char *)v3 + 16);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      CA::Render::LayerNode::delete_node(v3, v2);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 3);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  JUMPOUT(0x186DBD990);
}

void destroy_impl(CAWindowServerDisplayImpl *a1)
{
  id var3;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Server *var1;
  malloc_zone_t *malloc_zone;
  _BYTE v17[128];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  (**(void (***)(Server *))a1->var1)(a1->var1);
  pthread_mutex_destroy(&a1->var0._m);
  var3 = a1->var3;
  if (var3)
    _Block_release(var3);

  v3 = (void *)MEMORY[0x186DBE2E4]();
  v4 = (void *)objc_msgSend(a1->var6, "allValues");
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v17, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v19;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v19 != v7)
          objc_enumerationMutation(v4);
        _Block_release(*(const void **)(*((_QWORD *)&v18 + 1) + 8 * v8++));
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v17, 16);
    }
    while (v6);
  }

  a1->var6 = 0;
  objc_autoreleasePoolPop(v3);
  v9 = (void *)MEMORY[0x186DBE2E4]();
  v10 = (void *)objc_msgSend(a1->var7, "allValues");
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v18, v17, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v19;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v19 != v13)
          objc_enumerationMutation(v10);
        _Block_release(*(const void **)(*((_QWORD *)&v18 + 1) + 8 * v14++));
      }
      while (v12 != v14);
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v18, v17, 16);
    }
    while (v12);
  }

  a1->var7 = 0;
  objc_autoreleasePoolPop(v9);
  var1 = a1->var1;
  if (var1)
    (*(void (**)(Server *))(*(_QWORD *)var1 + 120))(var1);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, a1);
}

const void *find_display(CFArrayRef *a1, uint64_t a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  const void *ValueAtIndex;

  Count = CFArrayGetCount(*a1);
  if (!Count)
    return 0;
  v5 = Count;
  v6 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*a1, v6);
    if ((*(unsigned int (**)(uint64_t, const void *))(a2 + 16))(a2, ValueAtIndex))
      break;
    if (v5 == ++v6)
      return 0;
  }
  return ValueAtIndex;
}

void shared_server_init(CA::Render::Server *a1)
{
  int v2;
  char *v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t i;
  char *v8;
  double v9;
  double v10;
  void *v11;
  char *v12;
  const char *v13;
  double v14;
  double v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t j;
  unsigned __int8 v20;

  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  CA::Render::Server::start(a1);
  CA::WindowServer::Display::_fetch_frozen_surface_on_creation = objc_msgSend((id)-[CA::Render::Server objectForKeyedSubscript:](a1, "objectForKeyedSubscript:", CFSTR("fetchFrozenSurfaces")), "BOOLValue");
  _shared_server = -[CAWindowServer _init]([CAWindowServer alloc], "_init");
  v2 = objc_msgSend((id)-[CA::Render::Server objectForKeyedSubscript:](a1, "objectForKeyedSubscript:", CFSTR("local")), "BOOLValue");
  if ((v2 & 1) == 0)
    objc_msgSend((id)_shared_server, "_detectDisplays");
  if (objc_msgSend((id)-[CA::Render::Server objectForKeyedSubscript:](a1, "objectForKeyedSubscript:", CFSTR("disableUpdatesOnMainDisplay")), "BOOLValue"))objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)_shared_server, "displays"), "firstObject"), "setDisablesUpdates:", 1);
  v3 = getenv("CA_CLONE_DISPLAY");
  if (v3 && atoi(v3))
  {
    v4 = (void *)objc_msgSend((id)_shared_server, "displays");
    v5 = objc_msgSend(v4, "count");
    if (v5 >= 2)
    {
      v6 = v5;
      for (i = 1; i != v6; ++i)
        objc_msgSend((id)objc_msgSend(v4, "objectAtIndex:", 0), "addClone:", objc_msgSend(v4, "objectAtIndex:", i));
    }
    _force_cloning = 1;
  }
  v8 = getenv("CA_MAIN_DISPLAY_SCALE");
  if (v8)
  {
    v9 = atof(v8);
    if (v9 > 0.0)
    {
      v10 = v9;
      v11 = (void *)objc_msgSend((id)_shared_server, "displays");
      if (objc_msgSend(v11, "count"))
        objc_msgSend((id)objc_msgSend(v11, "objectAtIndex:", 0), "setScale:", v10);
    }
  }
  v12 = getenv("CA_EXTERNAL_DISPLAY_SCALE");
  if (v12)
  {
    v14 = atof(v12);
    if (v14 > 0.0)
    {
      v15 = v14;
      v16 = (void *)objc_msgSend((id)_shared_server, "displays");
      v17 = objc_msgSend(v16, "count");
      if (v17 >= 2)
      {
        v18 = v17;
        for (j = 1; j != v18; ++j)
          objc_msgSend((id)objc_msgSend(v16, "objectAtIndex:", j), "setScale:", v15);
      }
    }
  }
  if (v2)
  {
    if (CADeviceIsPhone::once[0] != -1)
      dispatch_once(CADeviceIsPhone::once, &__block_literal_global_134);
  }
  else
  {
    CA::Render::Server::register_name(0, v13);
    if (CADeviceIsPhone::once[0] != -1)
      dispatch_once(CADeviceIsPhone::once, &__block_literal_global_134);
    if (CADeviceIsPhone::phone)
    {
      {
        shared_server_init(void *)::monitor = objc_msgSend(MEMORY[0x1E0D87D90], "monitorWithConfiguration:", &__block_literal_global_12573);
      }
      CFRetain((CFTypeRef)shared_server_init(void *)::monitor);
    }
  }
  CA::Render::add_observer(0x3Au, 0, (uint64_t)shared_server_init(void *)::$_0::__invoke, 0, 0);
}

void sub_1846D6838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t shared_server_init(void *)::$_0::__invoke(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(_shared_server + 8) + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *a3);
  return result;
}

uint64_t ___ZL18shared_server_initPv_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v3 = (void *)objc_msgSend(MEMORY[0x1E0D87DC0], "descriptor");
  objc_msgSend(v3, "setValues:", 1);
  objc_msgSend(v3, "setEndowmentNamespaces:", &unk_1E15DACF0);
  objc_msgSend(a2, "setStateDescriptor:", v3);
  v5[0] = objc_msgSend(MEMORY[0x1E0D87DA0], "predicateMatchingProcessTypeApplication");
  objc_msgSend(a2, "setPredicates:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v5, 1));
  return objc_msgSend(a2, "setUpdateHandler:", &__block_literal_global_923);
}

void sub_1846D7040(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1846D715C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void CAML::Type::~Type(CAML::Type *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CAML::Type::set_property(const char **this, CAML::Context *a2, const void *a3, unsigned int a4, const void *a5)
{
}

double CAPointToCGPoint(double *a1, double a2, double a3, double a4, double a5)
{
  if (fabs(a5 + -1.0) >= 0.000001)
  {
    if (a5 <= 0.0)
    {
      a5 = INFINITY;
      if (!a1)
        return a5 * a2;
      goto LABEL_5;
    }
    a5 = 1.0 / a5;
  }
  if (a1)
LABEL_5:
    *a1 = a5 * a4;
  return a5 * a2;
}

BOOL CAPointEqualToPoint(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  return a1 == a5 && a2 == a6 && a3 == a7 && a4 == a8;
}

__n128 CAPointApplyTransform_(float64x2_t *a1, float64x2_t *a2)
{
  __n128 result;
  float64x2_t v3;
  float64x2_t v4;

  result = *(__n128 *)a1;
  v3 = a1[1];
  v4 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(a2[1], a1->f64[0]), a2[3], *a1, 1), a2[5], v3.f64[0]), a2[7], v3, 1);
  *a1 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*a2, a1->f64[0]), a2[2], *a1, 1), a2[4], v3.f64[0]), a2[6], v3, 1);
  a1[1] = v4;
  return result;
}

double CAPointApplyTransform(float64x2_t *a1, double a2, double a3, double a4, double a5)
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*a1, a2), a1[2], a3), a1[4], a4), a1[6], a5);
  return result;
}

float64x2_t CAPointArrayApplyTransform(float64x2_t *a1, uint64_t a2, uint64_t a3, float64x2_t *a4)
{
  float64x2_t *v4;
  float64x2_t result;
  float64x2_t v6;

  if (a3)
  {
    v4 = a1 + 1;
    do
    {
      result = v4[-1];
      v6 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(a4[1], result.f64[0]), a4[3], result, 1), a4[5], v4->f64[0]), a4[7], *v4, 1);
      v4[-1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*a4, result.f64[0]), a4[2], result, 1), a4[4], v4->f64[0]), a4[6], *v4, 1);
      *v4 = v6;
      v4 = (float64x2_t *)((char *)v4 + a2);
      --a3;
    }
    while (a3);
  }
  return result;
}

void CA::CG::DrawShadow::~DrawShadow(CA::CG::DrawShadow *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E1591088;
  v2 = (unsigned int *)*((_QWORD *)this + 19);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1591088;
  v2 = (unsigned int *)*((_QWORD *)this + 19);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::CG::DrawShadow::set_op(uint64_t this, CA::CG::DrawOp *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 144);
  if (v2)
    *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(this + 144) = a2;
  return this;
}

void CA::CG::DrawShadow::draw_shadow(CA::CG::DrawShadow *this, CA::CG::Renderer *a2)
{
  uint64_t v4;
  float v5;
  float32x2_t *v6;
  float v7;
  double v8;
  float32x2_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x2_t *v12;
  int32x2_t *v13;
  int32x2_t v14;
  uint32x2_t v15;
  uint32x2_t v16;
  int32x2_t v17;
  uint32x2_t v18;
  int v19;
  int64x2_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int32x2_t v23;
  float64x2_t v24;
  int8x16_t v25;
  int8x16_t v26;
  double v27;
  int8x16_t v28;
  int8x16_t v29;
  int64x2_t v30;
  int64x2_t v31;
  float32x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  int64x2_t v37;
  _DWORD *v38;
  int v39;
  char v40;
  char v41;
  uint64_t v42;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  int64x2_t v55;
  int8x16_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x2_t v59;
  int32x2_t v60;
  int v61;
  int v62;
  int8x8_t v64;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  unsigned int v73;
  __int16 v74;
  unsigned int v75;
  char v76;
  const void *v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  float v81;
  char v82;
  float v83;
  float64x2_t v84;
  float64x2_t v85;
  __int128 v86;
  __int128 v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  __int128 v92;
  float64x2_t v93;
  float v94;
  float64x2_t v95;
  __int128 v96;
  double v97;
  int32x4_t v98;
  float64x2_t v99;
  int8x16_t v100;
  int32x4_t v101;
  _DWORD v102[2];
  float32x2_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  _OWORD v107[3];
  _OWORD v108[4];
  uint64_t v109;
  _QWORD __dst[62];

  __dst[61] = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a2 + 1);
  v5 = *((double *)a2 + 10);
  v6 = (float32x2_t *)*((_QWORD *)this + 19);
  v94 = v5;
  v7 = v6[9].f32[1] * v5;
  v8 = v7;
  v101 = 0uLL;
  v9 = v6[10];
  CA::Shape::get_bounds(*(_QWORD *)(*(_QWORD *)(v4 + 232) + 8), v101.i32);
  v12 = *(int32x2_t **)(v4 + 248);
  if (v12)
    v13 = v12 + 4;
  else
    v13 = (int32x2_t *)(v4 + 184);
  v14 = (int32x2_t)v101.u64[1];
  v11.i32[1] = 1;
  v15 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v101.u64[1]);
  *(uint32x2_t *)v10.i8 = vpmax_u32(v15, v15);
  if ((v10.i32[0] & 0x80000000) == 0)
  {
    *(int32x2_t *)v10.i8 = v13[1];
    v16 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v10.i8);
    *(uint32x2_t *)v11.i8 = vpmax_u32(v16, v16);
    if (v11.i32[0] < 0
      || (v17 = vadd_s32(*v13, *(int32x2_t *)v10.i8),
          *(int32x2_t *)v10.i8 = vmax_s32(*(int32x2_t *)v101.i8, *v13),
          v14 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v101.i8, (int32x2_t)v101.u64[1]), v17), *(int32x2_t *)v10.i8),
          v18 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v14),
          *(uint32x2_t *)v11.i8 = vpmax_u32(v18, v18),
          v11.i32[0] < 0))
    {
      v14 = 0;
      v101.i64[1] = 0;
    }
    else
    {
      v10.u64[1] = (unint64_t)v14;
      v101 = v10;
    }
  }
  v19 = v14.i32[0];
  if (v14.i32[0] <= v14.i32[1])
    v19 = v14.i32[1];
  v10.i32[0] = v19;
  v11.i32[0] = 1073741822;
  v20.i64[0] = v101.i32[0];
  v20.i64[1] = v101.i32[1];
  v21 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v10, v11), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v20));
  v20.i64[0] = v14.i32[0];
  v20.i64[1] = v14.i32[1];
  v22 = (int8x16_t)vcvtq_f64_s64(v20);
  v23 = vdup_n_s32(v19 > 1073741822);
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v99 = (float64x2_t)v21;
  v100 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v20, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v22);
  CA::BoundsImpl::inset(v99.f64, v8 * -2.8, v8 * -2.8);
  v25 = *((int8x16_t *)this + 7);
  v26 = *((int8x16_t *)this + 8);
  v27 = v94;
  if (v94 != 1.0)
  {
    v24.f64[0] = 1.79769313e308;
    v28 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v24, (float64x2_t)v26).i64[0], 0);
    v29.i64[1] = *((_QWORD *)this + 15);
    *(double *)v29.i64 = v27 * *(double *)v25.i64;
    v25 = vbslq_s8(v28, v29, v25);
    v29.i64[1] = *((_QWORD *)this + 17);
    *(double *)v29.i64 = v27 * *(double *)v26.i64;
    v26 = vbslq_s8(v28, v29, v26);
    if (*(double *)&v26.i64[1] < 1.79769313e308)
    {
      v25.i64[1] = vmuld_lane_f64(v27, (float64x2_t)v25, 1);
      *(double *)&v26.i64[1] = *(double *)&v26.i64[1] * v27;
    }
  }
  v30 = vclezq_f64((float64x2_t)v100);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v30, 1), (int8x16_t)v30).u64[0] & 0x8000000000000000) == 0)
  {
    v31 = vclezq_f64((float64x2_t)v26);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v31, 1), (int8x16_t)v31).u64[0] & 0x8000000000000000) == 0)
    {
      v32 = vmul_n_f32(v9, v94);
      v33 = vcvtq_f64_f32(v32);
      v34 = vsubq_f64(v99, v33);
      v35 = vmaxnmq_f64(v34, (float64x2_t)v25);
      v36 = vsubq_f64(vminnmq_f64(vaddq_f64(v34, (float64x2_t)v100), vaddq_f64((float64x2_t)v25, (float64x2_t)v26)), v35);
      v37 = vclezq_f64(v36);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v37, 1), (int8x16_t)v37).u64[0] & 0x8000000000000000) == 0)
      {
        v89 = v33;
        v99 = v35;
        v100 = (int8x16_t)v36;
        v38 = (_DWORD *)*((_QWORD *)this + 18);
        v39 = v38[25];
        if (v7 != 0.0)
          goto LABEL_22;
        if ((v39 & 0x400) != 0)
          goto LABEL_22;
        v91 = v36;
        v95 = v35;
        v40 = (*(uint64_t (**)(_DWORD *, CA::CG::Renderer *))(*(_QWORD *)v38 + 128))(v38, a2);
        v36 = v91;
        v35 = v95;
        if ((v40 & 1) != 0
          || (v41 = (*(uint64_t (**)(_QWORD, CA::CG::Renderer *))(**((_QWORD **)this + 18) + 136))(*((_QWORD *)this + 18), a2), v36 = v91, v35 = v95, (v41 & 5) == 0))
        {
LABEL_22:
          v49 = 64.0;
          if (v7 <= 8.0)
            v49 = 16.0;
          if (v7 <= 4.0)
            v50 = 4.0;
          else
            v50 = v49;
          v51 = v8 * v8;
          if (v8 * v8 <= v50)
          {
            v52 = 1.0;
            v54 = sqrt(v51);
          }
          else
          {
            v52 = 1.0;
            v53 = 3.0625;
            do
            {
              v52 = v52 * 0.5;
              v51 = (v51 - v53) * 0.25;
              v53 = 0.0;
            }
            while (v51 > v50);
            v54 = sqrt(v51);
            if (v52 == 1.0)
            {
              v52 = 1.0;
            }
            else
            {
              if (v36.f64[0] < 1.79769313e308)
              {
                v99.f64[0] = v35.f64[0] * v52;
                *(double *)v100.i64 = v36.f64[0] * v52;
              }
              if (v36.f64[1] < 1.79769313e308)
              {
                v99.f64[1] = v35.f64[1] * v52;
                *(double *)&v100.i64[1] = v36.f64[1] * v52;
              }
            }
          }
          v55 = vceqzq_f64((float64x2_t)v100);
          if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v55, 1), (int8x16_t)v55).u64[0] & 0x8000000000000000) != 0
            || (v56 = vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v100), (int8x16_t)vcgezq_f64((float64x2_t)v100)),
                (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v56), 1), v56).u64[0] & 0x8000000000000000) != 0))
          {
            v98 = 0uLL;
            v60 = 0;
            v59 = (int32x2_t)-1;
          }
          else
          {
            v57 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v99, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
            v58 = (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v99, (float64x2_t)v100), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v57);
            v98 = vuzp1q_s32(v57, v58);
            v59 = vadd_s32(vmovn_s64((int64x2_t)v57), (int32x2_t)-1);
            v60 = vmovn_s64((int64x2_t)v58);
          }
          v97 = v52;
          v61 = v60.i32[0];
          if (v60.i32[0] <= v60.i32[1])
            v62 = v60.i32[1];
          else
            v62 = v60.i32[0];
          if (v60.i32[0] >= v60.i32[1])
            v61 = v60.i32[1];
          if (v62 <= 1073741822 && v61 >= 1)
          {
            v64 = (int8x8_t)vadd_s32(v60, (int32x2_t)0x200000002);
            if (v64.i32[1] < 1 || v64.i32[0] < 1)
              v66 = -1;
            else
              v66 = 0;
            *(int32x2_t *)v98.i8 = v59;
            v98.u64[1] = (unint64_t)vbic_s8(v64, (int8x8_t)vdup_n_s32(v66));
          }
          v67 = (*(uint64_t (**)(uint64_t, uint64_t, int32x4_t *, uint64_t))(*(_QWORD *)v4 + 656))(v4, 1, &v98, 8200);
          if (v67)
          {
            v68 = v67;
            v69 = v97 * v27;
            if (*((double *)a2 + 10) != v97 * v27)
            {
              *((double *)a2 + 10) = v69;
              *((double *)a2 + 11) = v69;
              *((_QWORD *)a2 + 12) = 0;
              *((_QWORD *)a2 + 13) = 0;
              *((double *)a2 + 14) = v69;
              *((_QWORD *)a2 + 15) = 0;
              *((_QWORD *)a2 + 16) = 0;
            }
            v70 = *((float64x2_t *)a2 + 2);
            v71 = *((float64x2_t *)a2 + 3);
            v72 = *((float64x2_t *)a2 + 4);
            *((float64x2_t *)a2 + 2) = vmulq_n_f64(v70, v97);
            *((float64x2_t *)a2 + 3) = vmulq_n_f64(v71, v97);
            *((float64x2_t *)a2 + 4) = vmulq_n_f64(v72, v97);
            v73 = *(unsigned __int16 *)(v4 + 816);
            v74 = v73 & 0x7000;
            v90 = v71;
            v93 = v70;
            v88 = v72;
            if ((v73 & 0x7000) == 0x3000)
            {
              v73 = v73 & 0xFFFF8FFF | 0x2000;
              *(_WORD *)(v4 + 816) = v73;
            }
            v75 = v73 >> 12;
            if ((v75 & 4) != 0)
              v76 = 0;
            else
              v76 = 0x1E1F1400u >> (8 * (v75 & 7));
            *(_BYTE *)(v67 + 73) = *(_BYTE *)(v67 + 73) & 0xC0 | v76;
            v77 = *(const void **)(v4 + 16);
            memcpy(__dst, v77, 0x1E8uLL);
            __dst[0] = v77;
            *(_QWORD *)(v4 + 16) = __dst;
            v109 = 0;
            memset(&v108[2], 0, 32);
            memset(v108, 0, 32);
            v78 = *(_QWORD *)(v4 + 232);
            *(_OWORD *)((char *)v108 + 8) = *(_OWORD *)(v78 + 8);
            v79 = *(_QWORD *)(v78 + 32);
            *((_QWORD *)&v108[1] + 1) = *(_QWORD *)(v78 + 24);
            *(_QWORD *)&v108[2] = v79;
            *(_OWORD *)((char *)&v108[2] + 8) = *(_OWORD *)(v78 + 40);
            *((_QWORD *)&v108[3] + 1) = *(_QWORD *)(v78 + 56);
            v80 = *(_WORD *)(v78 + 68);
            LODWORD(v109) = *(_DWORD *)(v78 + 64);
            HIDWORD(v109) = v80 & 0x5FF;
            memset(v107, 0, sizeof(v107));
            CA::Shape::operator=((uint64_t)v107, &v98);
            *((_QWORD *)&v108[0] + 1) = v107;
            if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 184))(v4, 25))
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 704))(v4, v68, 32, 32);
            *(_QWORD *)&v108[0] = CA::OGL::Context::set_gstate(v4, (uint64_t)v108);
            CA::OGL::Context::push_surface(v4, v68, 1u, 1, 0);
            CA::CG::DrawOp::render_alpha(*((CA::CG::DrawOp **)this + 18), a2, 1);
            CA::OGL::Context::pop_surface((CA::OGL::Context *)v4);
            CA::OGL::Context::set_gstate(v4, **(_QWORD **)(v4 + 232));
            *(_QWORD *)(v4 + 16) = __dst[0];
            __dst[0] = 0;
            *(_WORD *)(v4 + 816) = *(_WORD *)(v4 + 816) & 0x8FFF | v74;
            *((float64x2_t *)a2 + 2) = v93;
            *((float64x2_t *)a2 + 3) = v90;
            *((float64x2_t *)a2 + 4) = v88;
            if (*((double *)a2 + 10) != v27)
            {
              *((double *)a2 + 10) = v27;
              *((double *)a2 + 11) = v27;
              *((_QWORD *)a2 + 12) = 0;
              *((_QWORD *)a2 + 13) = 0;
              *((double *)a2 + 14) = v27;
              *((_QWORD *)a2 + 15) = 0;
              *((_QWORD *)a2 + 16) = 0;
            }
            v106 = 0;
            v105 = 0u;
            v104 = 0u;
            HIDWORD(v105) = 15;
            v81 = v54;
            *(float *)v102 = v81;
            *(float *)&v102[1] = v81;
            v103 = v32;
            if ((v39 & 0x400) != 0)
              v82 = 12;
            else
              v82 = 11;
            *(_BYTE *)(*(_QWORD *)(v4 + 16) + 16) = v82;
            v83 = v97;
            (*(void (**)(uint64_t, uint64_t, _DWORD *, _QWORD, float, float))(*(_QWORD *)v4 + 848))(v4, v68, v102, 0, 1.0, v83);
            *(_BYTE *)(*(_QWORD *)(v4 + 16) + 16) = 0;
            CA::OGL::Context::release_surface(v4, v68);
            if (__dst[0])
              __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
          }
        }
        else
        {
          v92 = *(_OWORD *)((char *)a2 + 104);
          v96 = *(_OWORD *)((char *)a2 + 88);
          v87 = *((_OWORD *)a2 + 2);
          v85 = *(float64x2_t *)((char *)a2 + 120);
          v86 = *((_OWORD *)a2 + 3);
          v84 = *((float64x2_t *)a2 + 4);
          v42 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8);
          *((float64x2_t *)a2 + 4) = vaddq_f64(v84, v89);
          *(float64x2_t *)((char *)a2 + 120) = vaddq_f64(v85, v89);
          _H1 = *(_WORD *)(*((_QWORD *)this + 18) + 94);
          __asm { FCVT            S1, H1 }
          *(float16x4_t *)(*(_QWORD *)(v4 + 16) + 8) = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(*(float16x4_t *)((char *)this + 88)), _S1));
          (*(void (**)(_QWORD, CA::CG::Renderer *))(**((_QWORD **)this + 18) + 160))(*((_QWORD *)this + 18), a2);
          *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8) = v42;
          *((_OWORD *)a2 + 2) = v87;
          *((_OWORD *)a2 + 3) = v86;
          *((float64x2_t *)a2 + 4) = v84;
          *(_OWORD *)((char *)a2 + 88) = v96;
          *(_OWORD *)((char *)a2 + 104) = v92;
          *(float64x2_t *)((char *)a2 + 120) = v85;
        }
      }
    }
  }
}

uint64_t CA::ShapeHandle::grow(CA::ShapeHandle *this, int a2)
{
  _DWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  malloc_zone_t *malloc_zone;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  malloc_zone_t *v17;

  v3 = *(_DWORD **)this;
  v4 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  v5 = v4 >> 2;
  LODWORD(v6) = *(_DWORD *)(*(_QWORD *)this + 8);
  if (v6 <= 0x10)
    LODWORD(v6) = 16;
  v6 = (int)v6;
  do
  {
    v7 = v6;
    v6 *= 2;
  }
  while (v7 < (v5 + a2));
  if (v7 < 0x1FFFFFFF)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    result = (uint64_t)malloc_type_zone_malloc(malloc_zone, 4 * v7, 0x8BB15036uLL);
    v10 = *(_DWORD **)this;
    if (result)
    {
      v11 = result;
      if ((_DWORD)v5)
      {
        v12 = v4 >> 2;
        v13 = *(int **)this;
        v14 = (_DWORD *)result;
        do
        {
          v15 = *v13++;
          *v14++ = v15;
          LODWORD(v12) = v12 - 1;
        }
        while ((_DWORD)v12);
      }
      *(_DWORD *)(result + 4) = v5;
      *(_DWORD *)(result + 8) = v7;
      v16 = result + *((_QWORD *)this + 3) - (_QWORD)v10;
      *((_QWORD *)this + 2) = result + *((_QWORD *)this + 2) - (_QWORD)v10;
      *((_QWORD *)this + 3) = v16;
      *((_QWORD *)this + 1) = result + (v4 & 0x3FFFFFFFCLL);
      if (v10 != (_DWORD *)((char *)this + 32))
      {
        v17 = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(v17, v10);
      }
      *(_QWORD *)this = v11;
      return 1;
    }
    else
    {
      *v10 = 0;
    }
  }
  else
  {
    result = 0;
    *v3 = 0;
  }
  return result;
}

BOOL CA::Shape::is_valid(CA::Shape *this)
{
  int v1;
  int *v3;
  int i;
  int v5;
  uint64_t v6;
  _BOOL8 v7;

  if ((this & 1) != 0)
    return 1;
  v1 = *((_DWORD *)this + 1);
  if (v1 > 11 || v1 == 6)
  {
    v5 = *((_DWORD *)this + 3);
    v3 = (int *)((char *)this + 12);
    for (i = v5; i != 0x7FFFFFFF; i = *v3)
    {
      v6 = v3[1];
      v7 = (int)v6 > 1;
      if ((int)v6 < 2)
        return v7;
      v3 += v6;
    }
    return 1;
  }
  return 0;
}

char *CA::Shape::dump(CA::Shape *this)
{
  size_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  int i;

  if ((this & 1) != 0)
    v2 = 144;
  else
    v2 = 12 * *((int *)this + 1);
  v3 = (char *)malloc_type_malloc(v2, 0x915B4E4DuLL);
  v4 = 0;
  v5 = v3;
  if ((this & 1) != 0)
    goto LABEL_6;
LABEL_5:
  for (i = *((_DWORD *)this + 1); v4 < i; i = 12)
  {
    v5 += snprintf(v5, &v3[v2] - v5, "%d ", *((_DWORD *)this + v4++));
    if ((this & 1) == 0)
      goto LABEL_5;
LABEL_6:
    ;
  }
  return v3;
}

unint64_t CA::Shape::new_shape()
{
  const CA::Bounds *v0;
  unint64_t v1;
  int v2;
  int v3;
  int v4;
  unint64_t result;
  int v6;
  size_t v7;
  malloc_zone_t *malloc_zone;
  int *v9;
  _DWORD *v10;
  int i;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int v15;
  _DWORD v16[4];
  unsigned int v17;
  int *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((CGSRegionIsEmpty() & 1) != 0)
    return 1;
  v18 = 0;
  v17 = 0;
  if (CGSGetRegionData())
    return 1;
  if (v18[1] == 4)
    return 1;
  if (*v18 != 0x80000000)
    return 1;
  v1 = (unint64_t)v17 >> 2;
  if (v18[v1 - 1] != 0x7FFFFFFF)
    return 1;
  if ((_DWORD)v1 == 9)
  {
    v2 = v18[2];
    v3 = v18[5];
    v16[0] = v18[4];
    v16[1] = v2;
    v4 = v18[6] - v2;
    v16[2] = v3 - v16[0];
    v16[3] = v4;
    return CA::Shape::new_shape((CA::Shape *)v16, v0);
  }
  v6 = v1 + 3;
  v7 = 4 * (v1 + 3);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = (unint64_t)malloc_type_zone_malloc(malloc_zone, v7, 0x8BB15036uLL);
  if (!result)
    return 1;
  *(_DWORD *)(result + 4) = v6;
  *(_DWORD *)(result + 8) = v6;
  *(_DWORD *)result = 1;
  v9 = v18;
  v10 = (_DWORD *)(result + 12);
  for (i = *v18; i != 0x7FFFFFFF; i = *v9)
  {
    *v10 = i;
    v10[1] = v9[1];
    v10 += 2;
    v12 = v9[1];
    if ((_DWORD)v12 != 2)
    {
      v13 = v9 + 2;
      v14 = 4 * v12 - 8;
      do
      {
        v15 = *v13++;
        *v10++ = v15;
        v14 -= 4;
      }
      while (v14);
    }
    v9 += v12;
  }
  *v10 = 0x7FFFFFFF;
  return result;
}

BOOL layer_has_background_filters(CALayer *a1)
{
  return -[NSArray count](-[CALayer backgroundFilters](a1, "backgroundFilters"), "count") != 0;
}

BOOL layer_can_disable_group_opacity(CALayer *a1)
{
  _BOOL8 result;
  float v3;
  float v4;

  result = -[CALayer allowsGroupOpacity](a1, "allowsGroupOpacity");
  if (result)
  {
    -[CALayer opacity](a1, "opacity");
    if (v3 == 1.0)
      return 0;
    -[CALayer opacity](a1, "opacity");
    return v4 != 0.0
        && !-[CALayer isHidden](a1, "isHidden")
        && -[NSArray count](-[CALayer sublayers](a1, "sublayers"), "count") > 1;
  }
  return result;
}

uint64_t layer_can_push_blending(CALayer *a1)
{
  uint64_t result;
  uint64_t v3;
  id v4;
  const __CFString *v5;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    result = (uint64_t)flattened_compositing_filter(a1);
    if (!result)
      return result;
    v3 = result;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (destructive_blend_modes(void)::once != -1)
        dispatch_once(&destructive_blend_modes(void)::once, &__block_literal_global_12804);
      if ((objc_msgSend((id)destructive_blend_modes(void)::modes, "containsObject:", v3) & 1) == 0)
      {
        while (a1)
        {
          v4 = flattened_sublayers(a1);
          result = objc_msgSend(v4, "count");
          if (!result)
            return result;
          if ((unint64_t)objc_msgSend(v4, "count") > 1)
            return 1;
          a1 = (CALayer *)objc_msgSend(v4, "firstObject");
          v5 = flattened_compositing_filter(a1);
          result = 0;
          if (v5)
            return result;
        }
      }
    }
  }
  return 0;
}

uint64_t layer_can_disable_allows_group_blending(CALayer *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v8;
  const __CFString *v9;
  _BYTE v11[128];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (-[CALayer allowsGroupBlending](a1, "allowsGroupBlending")
    && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
    && (v14 = 0u,
        v15 = 0u,
        v12 = 0u,
        v13 = 0u,
        v2 = flattened_sublayers(a1),
        (v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v11, 16)) != 0))
  {
    v4 = v3;
    v5 = 0;
    v6 = *(_QWORD *)v13;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v2);
        v8 = flattened_compositing_filter(*(CALayer **)(*((_QWORD *)&v12 + 1) + 8 * v7));
        if (v8)
        {
          v9 = v8;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_17;
          if (destructive_blend_modes(void)::once != -1)
            dispatch_once(&destructive_blend_modes(void)::once, &__block_literal_global_12804);
          if ((objc_msgSend((id)destructive_blend_modes(void)::modes, "containsObject:", v9) & 1) != 0)
            goto LABEL_17;
          v5 = 1;
        }
        ++v7;
      }
      while (v4 != v7);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v11, 16);
    }
    while (v4);
  }
  else
  {
LABEL_17:
    v5 = 0;
  }
  return v5 & 1;
}

id flattened_sublayers(CALayer *a1)
{
  void *v2;
  NSArray *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CALayer *v8;
  _BYTE v10[128];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_opt_new();
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = -[CALayer sublayers](a1, "sublayers");
  v4 = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v11, v10, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        v8 = *(CALayer **)(*((_QWORD *)&v11 + 1) + 8 * v7);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          objc_msgSend(v2, "addObjectsFromArray:", flattened_sublayers(v8));
        else
          objc_msgSend(v2, "addObject:", v8);
        ++v7;
      }
      while (v5 != v7);
      v5 = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v11, v10, 16);
    }
    while (v5);
  }
  return v2;
}

const __CFString *flattened_compositing_filter(CALayer *a1)
{
  __CFString *v2;
  const __CFString *v3;
  id v4;

  v2 = -[CALayer compositingFilter](a1, "compositingFilter");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = (__CFString *)-[__CFString type](v2, "type");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return (const __CFString *)objc_msgSend(MEMORY[0x1E0C99E38], "null");
  if ((-[__CFString isEqualToString:](v2, "isEqualToString:", CFSTR("normalBlendMode")) & 1) != 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    if ((-[__CFString isEqualToString:](v2, "isEqualToString:", CFSTR("sourceOver")) & 1) == 0)
    {
      if (v2)
      {
        v3 = v2;
        if (-[NSArray count](-[CALayer filters](a1, "filters"), "count"))
          return (const __CFString *)objc_msgSend(MEMORY[0x1E0C99E38], "null");
      }
    }
  }
  if (-[NSArray count](-[CALayer filters](a1, "filters"), "count") != 1)
    return v3;
  v4 = -[NSArray firstObject](-[CALayer filters](a1, "filters"), "firstObject");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v3 = CFSTR("vibrantColorMatrix");
    if ((objc_msgSend((id)objc_msgSend(v4, "type"), "isEqualToString:", CFSTR("vibrantColorMatrix")) & 1) != 0)
      return v3;
    v3 = CFSTR("vibrantDark");
    if ((objc_msgSend((id)objc_msgSend(v4, "type"), "isEqualToString:", CFSTR("vibrantDark")) & 1) != 0)
      return v3;
    v3 = CFSTR("vibrantLight");
    if ((objc_msgSend((id)objc_msgSend(v4, "type"), "isEqualToString:", CFSTR("vibrantLight")) & 1) != 0)
      return v3;
  }
  return (const __CFString *)objc_msgSend(MEMORY[0x1E0C99E38], "null");
}

uint64_t ___Z23destructive_blend_modesv_block_invoke()
{
  uint64_t result;

  result = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:", CFSTR("clear"), CFSTR("copy"), CFSTR("sourceIn"), CFSTR("sourceOut"), CFSTR("sourceAtop"), CFSTR("dest"), CFSTR("destOver"), CFSTR("destIn"), CFSTR("destOut"), CFSTR("destAtop"), CFSTR("xor"), CFSTR("subtractS"), CFSTR("subtractD"), CFSTR("multiply"), 0);
  destructive_blend_modes(void)::modes = result;
  return result;
}

BOOL layer_has_dynamic_shadow(CALayer *a1)
{
  float v2;

  -[CALayer shadowOpacity](a1, "shadowOpacity");
  return v2 != 0.0
      && !-[CALayer shadowPathIsBounds](a1, "shadowPathIsBounds")
      && !-[CALayer shadowPath](a1, "shadowPath")
      && CGColorGetAlpha(-[CALayer shadowColor](a1, "shadowColor")) != 0.0;
}

uint64_t layer_has_simple_background_masking(CALayer *a1)
{
  uint64_t result;
  void *v2;
  uint64_t v3;
  __CFString *v4;
  uint64_t v5;
  unint64_t v6;
  float v7;
  float v8;

  result = -[CALayer mask](a1, "mask");
  if (result)
  {
    v2 = (void *)result;
    if (objc_msgSend((id)objc_msgSend((id)result, "sublayers"), "count"))
      return 0;
    result = objc_msgSend(v2, "isMemberOfClass:", objc_opt_class());
    if ((_DWORD)result)
    {
      result = objc_msgSend(v2, "backgroundColor");
      if (result)
      {
        if (!CGColorGetPattern((CGColorRef)objc_msgSend(v2, "backgroundColor")))
        {
          v3 = 0;
          while (1)
          {
            v4 = off_1E15A95F0[v3];
            v5 = objc_msgSend(v2, "valueForKey:", v4);
            v6 = +[CALayer defaultValueForKey:](CALayer, "defaultValueForKey:", v4);
            if (!-[__CFString isEqualToString:](v4, "isEqualToString:", CFSTR("shadowOpacity"))
              || (objc_msgSend((id)v5, "floatValue"), v7 != 0.0))
            {
              if (!-[__CFString isEqualToString:](v4, "isEqualToString:", CFSTR("borderWidth"))
                || (objc_msgSend((id)v5, "floatValue"), v8 != 0.0))
              {
                if ((objc_msgSend((id)v5, "isEqual:", v6) & 1) == 0 && v5 | v6)
                  break;
              }
            }
            ++v3;
            result = 1;
            if (v3 == 5)
              return result;
          }
        }
        return 0;
      }
    }
  }
  return result;
}

CALayer *layer_has_simple_shape_masking(CALayer *a1)
{
  CALayer *result;
  CALayer *v2;
  const CGPath *v3;

  result = -[CALayer mask](a1, "mask");
  if (result)
  {
    v2 = result;
    if (!-[NSArray count](-[CALayer sublayers](result, "sublayers"), "count")
      && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
      && (!-[CALayer strokeColor](v2, "strokeColor")
       || CGColorGetAlpha((CGColorRef)-[CALayer strokeColor](v2, "strokeColor")) == 0.0))
    {
      v3 = (const CGPath *)-[CALayer path](v2, "path");
      if ((CGPathIsRectWithTransform() & 1) != 0
        || (CGPathIsRoundedRectWithTransform() & 1) != 0
        || (CGPathIsEllipseWithTransform() & 1) != 0)
      {
        return (CALayer *)1;
      }
      else
      {
        return (CALayer *)cgpath_is_uibezierpath_rounded_rect(v3);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL layer_is_simple_shape(CALayer *a1)
{
  double v2;
  double v3;
  const CGPath *v5;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 0;
  -[CALayer strokeStart](a1, "strokeStart");
  if (v2 != 0.0)
    return 0;
  -[CALayer strokeEnd](a1, "strokeEnd");
  if (v3 != 1.0)
    return 0;
  v5 = (const CGPath *)-[CALayer path](a1, "path");
  return (CGPathIsRectWithTransform() & 1) != 0
      || (CGPathIsRoundedRectWithTransform() & 1) != 0
      || (CGPathIsEllipseWithTransform() & 1) != 0
      || cgpath_is_uibezierpath_rounded_rect(v5);
}

BOOL cgpath_is_uibezierpath_rounded_rect(const CGPath *a1)
{
  _BOOL8 v2;
  _QWORD block[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  _QWORD v9[3];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (CGPathGetNumberOfElements() != 22 || CGPathGetNumberOfPoints() != 46)
    return 0;
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2020000000;
  v10 = 0;
  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 1;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZL35cgpath_is_uibezierpath_rounded_rectPK6CGPath_block_invoke;
  block[3] = &unk_1E15A9620;
  block[4] = &v5;
  block[5] = v9;
  CGPathApplyWithBlock(a1, block);
  v2 = *((_BYTE *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  _Block_object_dispose(v9, 8);
  return v2;
}

void sub_1846D8DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 56), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL35cgpath_is_uibezierpath_rounded_rectPK6CGPath_block_invoke(uint64_t result, int *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24))
  {
    v2 = *a2;
    v3 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
    v4 = *(int *)(v3 + 24);
    *(_DWORD *)(v3 + 24) = v4 + 1;
    if (v2 != cgpath_is_uibezierpath_rounded_rect(CGPath const*)::types[v4])
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 0;
  }
  return result;
}

void CA::CG::FocusRingStyle::~FocusRingStyle(CA::CG::Renderer **this, const void *a2)
{
  *this = (CA::CG::Renderer *)off_1E1593750;
  CA::CG::Renderer::release_object(this[2], a2);
}

{
  malloc_zone_t *malloc_zone;

  *this = (CA::CG::Renderer *)off_1E1593750;
  CA::CG::Renderer::release_object(this[2], a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

float CA::CG::FocusRingStyle::matrix_changed(CA::CG::FocusRingStyle *this)
{
  uint64_t Data;
  float v3;
  float v4;
  float result;

  Data = CGStyleGetData();
  v3 = *((double *)this + 6) * *((double *)this + 3) + *((double *)this + 5) * *((double *)this + 4);
  if (v3 < 0.0)
    v3 = -v3;
  v4 = sqrtf(v3);
  if (v3 != 1.0)
    v3 = v4;
  result = fmax(*(double *)(Data + 24) * v3, 0.0);
  *((float *)this + 19) = result;
  return result;
}

double *CA::CG::FocusRingStyle::expand_layer_roi(CA::CG::FocusRingStyle *this, CA::Rect *a2)
{
  double v2;

  v2 = (float)(-1.0 - floorf(*((float *)this + 19) + 0.5));
  return CA::BoundsImpl::inset((double *)a2, v2, v2);
}

uint64_t CA::CG::FocusRingStyle::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, a1);
}

_DWORD *CA::CG::FocusRingStyle::copy(CA::CG::FocusRingStyle *this)
{
  malloc_zone_t *malloc_zone;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  __int128 v6;
  __int128 v7;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v3 = malloc_type_zone_malloc(malloc_zone, 0x58uLL, 0x8BB15036uLL);
  v4 = v3;
  if (v3)
  {
    *(_QWORD *)v3 = off_1E1593750;
    v5 = *((_DWORD *)this + 3);
    v3[2] = 0;
    v3[3] = v5;
    *((_QWORD *)v3 + 2) = CGStyleRetain();
    v6 = *(_OWORD *)((char *)this + 56);
    v7 = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)(v4 + 10) = *(_OWORD *)((char *)this + 40);
    *(_OWORD *)(v4 + 6) = v7;
    *(_OWORD *)(v4 + 14) = v6;
    v4[18] = *((_DWORD *)this + 18);
    v4[2] = 1;
    *(_QWORD *)v4 = off_1E15920D8;
    *(_QWORD *)(v4 + 19) = *(_QWORD *)((char *)this + 76);
    v4[21] = *((_DWORD *)this + 21);
  }
  return v4;
}

uint64_t paced_keyframe(double *a1, int a2, double a3, double *a4)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  double *v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;

  v4 = (a2 - 1);
  if (a2 < 1)
  {
    LODWORD(v4) = 0;
    v12 = 0.0;
    v9 = INFINITY;
  }
  else
  {
    v5 = a2;
    v6 = 0.0;
    v7 = a1;
    do
    {
      v8 = *v7++;
      v6 = v8 + v6;
      --v5;
    }
    while (v5);
    v9 = 1.0 / v6;
    if (a2 < 2)
    {
      LODWORD(v4) = 0;
      v12 = 0.0;
    }
    else
    {
      v10 = 0;
      v11 = v6 * a3;
      v12 = 0.0;
      while (1)
      {
        v13 = a1[v10] + v12;
        if (v13 > v11)
          break;
        ++v10;
        v12 = v13;
        if (v4 == v10)
        {
          v12 = v13;
          goto LABEL_12;
        }
      }
      LODWORD(v4) = v10;
    }
  }
LABEL_12:
  v14 = v12 * v9;
  a4[1] = v12 * v9;
  v15 = (a1[v4] + v12) * v9;
  a4[2] = v15;
  if ((_DWORD)v4)
    v16 = (v12 - a1[(v4 - 1)]) * v9;
  else
    v16 = -(v15 + v14 * -2.0);
  *a4 = v16;
  if ((int)v4 + 1 >= a2)
    v17 = -(v14 + v15 * -2.0);
  else
    v17 = (a1[v4] + v12 + a1[(v4 + 1)]) * v9;
  a4[3] = v17;
  return v4;
}

double functionParam(int a1, NSString *a2, id *a3)
{
  uint64_t v3;
  uint64_t v4;
  double result;

  if (!a1)
    goto LABEL_4;
  if (a1 == 1)
  {
    ++a3;
LABEL_4:
    objc_msgSend((id)objc_msgSend(*a3, "valueForKeyPath:", a2, v3, v4), "doubleValue");
    return result;
  }
  return 0.0;
}

void setupHermiteInterpolator(CAKeyframeAnimation *a1, CA::Render::ValueInterpolator *a2, int a3, const double *a4)
{
  NSArray *v8;
  double v9;
  double v10;
  double v11;
  NSArray *v12;
  unint64_t v13;
  double v14;
  double v15;
  NSArray *v16;
  double v17;
  NSArray *v18;
  unint64_t v19;
  double v20;
  double v21;
  NSArray *v22;
  NSArray *v23;
  unint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;

  v8 = -[CAKeyframeAnimation tensionValues](a1, "tensionValues");
  v9 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
  if (v8)
  {
    v12 = v8;
    v13 = -[NSArray count](v8, "count");
    if (v13 > a3)
    {
      objc_msgSend(-[NSArray objectAtIndex:](v12, "objectAtIndex:", a3), "doubleValue");
      v10 = v14;
    }
    if (a3 + 1 < v13)
    {
      objc_msgSend(-[NSArray objectAtIndex:](v12, "objectAtIndex:", a3 + 1), "doubleValue");
      v11 = v15;
    }
  }
  v16 = -[CAKeyframeAnimation continuityValues](a1, "continuityValues");
  v17 = 0.0;
  if (v16)
  {
    v18 = v16;
    v19 = -[NSArray count](v16, "count");
    if (v19 > a3)
    {
      objc_msgSend(-[NSArray objectAtIndex:](v18, "objectAtIndex:", a3), "doubleValue");
      v9 = v20;
    }
    if (a3 + 1 < v19)
    {
      objc_msgSend(-[NSArray objectAtIndex:](v18, "objectAtIndex:", a3 + 1), "doubleValue");
      v17 = v21;
    }
  }
  v22 = -[CAKeyframeAnimation biasValues](a1, "biasValues");
  if (v22)
  {
    v23 = v22;
    v24 = -[NSArray count](v22, "count");
    v25 = 0.0;
    v26 = 0.0;
    if (v24 > a3)
    {
      objc_msgSend(-[NSArray objectAtIndex:](v23, "objectAtIndex:", a3), "doubleValue");
      v26 = v27;
    }
    if (a3 + 1 < v24)
    {
      objc_msgSend(-[NSArray objectAtIndex:](v23, "objectAtIndex:", a3 + 1), "doubleValue");
      v25 = v28;
    }
  }
  else
  {
    v26 = 0.0;
    v25 = 0.0;
  }
  CA::Render::ValueInterpolator::set_hermite(a2, a4[1] - *a4, a4[2] - a4[1], a4[3] - a4[2], v10, v9, v26, v11, v17, v25);
}

uint64_t applyValueFunction(CAValueFunction *a1, objc_object *a2, CAPropertyAnimation *a3, objc_object *a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  _OWORD v17[8];
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[8];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v8 = -[CAValueFunction inputCount](a1, "inputCount");
  if (v8 >= 0x10)
    v9 = 16;
  else
    v9 = v8;
  v10 = -[CAValueFunction outputCount](a1, "outputCount");
  v11 = v10;
  memset(&v27[6], 0, 32);
  if (v10 >= 0x10)
    v12 = 16;
  else
    v12 = v10;
  memset(v27, 0, 96);
  if (v9)
  {
    if (v9 == 1)
    {
      -[objc_object doubleValue](a2, "doubleValue");
      *(_QWORD *)&v27[0] = v13;
    }
    else
    {
      for (i = 0; i != v9; ++i)
      {
        objc_msgSend((id)-[objc_object objectAtIndex:](a2, "objectAtIndex:", i), "doubleValue");
        *((_QWORD *)v27 + i) = v15;
      }
    }
  }
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v18[0] = a3;
  v18[1] = a4;
  -[CAValueFunction apply:result:parameterFunction:context:](a1, "apply:result:parameterFunction:context:", v27, &v19, functionParam, v18);
  if (v12 == 2)
    return objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithPoint:", v19);
  if (v12 == 1)
    return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)&v19);
  if (v11 < 0x10)
    return 0;
  v17[0] = v19;
  v17[1] = v20;
  v17[2] = v21;
  v17[3] = v22;
  v17[4] = v23;
  v17[5] = v24;
  v17[6] = v25;
  v17[7] = v26;
  return objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCATransform3D:", v17);
}

uint64_t set_layer_transform(void *a1, uint64_t a2, int a3)
{
  void *v5;

  v5 = (void *)objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", a2, "{CATransform3D=dddddddddddddddd}");
  if (a3)
    v5 = (void *)objc_msgSend(v5, "CA_addValue:multipliedBy:", objc_msgSend(a1, "valueForKey:", CFSTR("transform")), 1);
  return objc_msgSend(a1, "setValue:forKey:", v5, CFSTR("transform"));
}

double *CA::Render::ValueInterpolator::mix_n<double>(double *result, uint64_t a2, double *a3, double *a4, double *a5, double *a6, double *a7)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  for (; a2; --a2)
  {
    v7 = *a5++;
    v8 = v7;
    v9 = *a6++;
    v10 = v9;
    if (a4)
    {
      v11 = *a4++;
      v12 = v11;
      if (!a7)
        goto LABEL_6;
    }
    else
    {
      v12 = -(v10 + v8 * -2.0);
      if (!a7)
      {
LABEL_6:
        v14 = -(v8 + v10 * -2.0);
        goto LABEL_7;
      }
    }
    v13 = *a7++;
    v14 = v13;
LABEL_7:
    *a3++ = result[2] * v8
          + result[3] * (result[10] * (v8 - v12) + result[11] * (v10 - v8))
          + result[4] * v10
          + result[5] * (result[12] * (v10 - v8) + result[13] * (v14 - v10));
  }
  return result;
}

void sub_1846DBE14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  if (v11)
  {
    v13 = v11 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
  }
  if (a9)
  {
    v16 = a9 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(unsigned int *))(*(_QWORD *)a9 + 16))(a9);
  }
  if (v10)
  {
    v19 = v10 + 2;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 16))(v10);
  }
  if (v9)
  {
    v22 = v9 + 2;
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
  }
  _Unwind_Resume(exception_object);
}

IMP cons_CAAnimation_kCAValueAssignedPointer(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e10_r_v16__0_8l;
    v3 = ___ZL40cons_CAAnimation_kCAValueAssignedPointerjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e13_v24__0_8r_v16l;
    v3 = ___ZL40cons_CAAnimation_kCAValueAssignedPointerjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CAAnimation_kCAValueRetainedPointer(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e10_r_v16__0_8l;
    v3 = ___ZL40cons_CAAnimation_kCAValueRetainedPointerjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e13_v24__0_8r_v16l;
    v3 = ___ZL40cons_CAAnimation_kCAValueRetainedPointerjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CAAnimation_kCAValueCopiedPointer(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e10_r_v16__0_8l;
    v3 = ___ZL38cons_CAAnimation_kCAValueCopiedPointerjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e13_v24__0_8r_v16l;
    v3 = ___ZL38cons_CAAnimation_kCAValueCopiedPointerjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CAAnimation_kCAValueBlock(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e10_r_v16__0_8l;
    v3 = ___ZL30cons_CAAnimation_kCAValueBlockjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e13_v24__0_8r_v16l;
    v3 = ___ZL30cons_CAAnimation_kCAValueBlockjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CAAnimation_kCAValueBool(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_B16__0_8l;
    v3 = ___ZL29cons_CAAnimation_kCAValueBooljb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v20__0_8B16l;
    v3 = ___ZL29cons_CAAnimation_kCAValueBooljb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CAAnimation_kCAValueChar(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_c16__0_8l;
    v3 = ___ZL29cons_CAAnimation_kCAValueCharjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v20__0_8c16l;
    v3 = ___ZL29cons_CAAnimation_kCAValueCharjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CAAnimation_kCAValueUnsignedChar(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_C16__0_8l;
    v3 = ___ZL37cons_CAAnimation_kCAValueUnsignedCharjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v20__0_8C16l;
    v3 = ___ZL37cons_CAAnimation_kCAValueUnsignedCharjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CAAnimation_kCAValueShort(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_s16__0_8l;
    v3 = ___ZL30cons_CAAnimation_kCAValueShortjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v20__0_8s16l;
    v3 = ___ZL30cons_CAAnimation_kCAValueShortjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CAAnimation_kCAValueUnsignedShort(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_S16__0_8l;
    v3 = ___ZL38cons_CAAnimation_kCAValueUnsignedShortjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v20__0_8S16l;
    v3 = ___ZL38cons_CAAnimation_kCAValueUnsignedShortjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CAAnimation_kCAValueInt(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_i16__0_8l;
    v3 = ___ZL28cons_CAAnimation_kCAValueIntjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v20__0_8i16l;
    v3 = ___ZL28cons_CAAnimation_kCAValueIntjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CAAnimation_kCAValueUnsignedInt(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_I16__0_8l;
    v3 = ___ZL36cons_CAAnimation_kCAValueUnsignedIntjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v20__0_8I16l;
    v3 = ___ZL36cons_CAAnimation_kCAValueUnsignedIntjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CAAnimation_kCAValueLong(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_q16__0_8l;
    v3 = ___ZL29cons_CAAnimation_kCAValueLongjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v24__0_8q16l;
    v3 = ___ZL29cons_CAAnimation_kCAValueLongjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CAAnimation_kCAValueUnsignedLong(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_Q16__0_8l;
    v3 = ___ZL37cons_CAAnimation_kCAValueUnsignedLongjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v24__0_8Q16l;
    v3 = ___ZL37cons_CAAnimation_kCAValueUnsignedLongjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CAAnimation_kCAValueLongLong(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_q16__0_8l;
    v3 = ___ZL33cons_CAAnimation_kCAValueLongLongjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v24__0_8q16l;
    v3 = ___ZL33cons_CAAnimation_kCAValueLongLongjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CAAnimation_kCAValueUnsignedLongLong(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_Q16__0_8l;
    v3 = ___ZL41cons_CAAnimation_kCAValueUnsignedLongLongjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v24__0_8Q16l;
    v3 = ___ZL41cons_CAAnimation_kCAValueUnsignedLongLongjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CAAnimation_kCAValueFloat(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_f16__0_8l;
    v3 = ___ZL30cons_CAAnimation_kCAValueFloatjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v20__0_8f16l;
    v3 = ___ZL30cons_CAAnimation_kCAValueFloatjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CAAnimation_kCAValueDouble(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e8_d16__0_8l;
    v3 = ___ZL31cons_CAAnimation_kCAValueDoublejb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e11_v24__0_8d16l;
    v3 = ___ZL31cons_CAAnimation_kCAValueDoublejb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CAAnimation_kCAValuePoint(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e19__CGPoint_dd_16__0_8l;
    v3 = ___ZL30cons_CAAnimation_kCAValuePointjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e22_v32__0_8_CGPoint_dd_16l;
    v3 = ___ZL30cons_CAAnimation_kCAValuePointjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CAAnimation_kCAValueSize(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e18__CGSize_dd_16__0_8l;
    v3 = ___ZL29cons_CAAnimation_kCAValueSizejb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e21_v32__0_8_CGSize_dd_16l;
    v3 = ___ZL29cons_CAAnimation_kCAValueSizejb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CAAnimation_kCAValueRect(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e39__CGRect__CGPoint_dd__CGSize_dd__16__0_8l;
    v3 = ___ZL29cons_CAAnimation_kCAValueRectjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e42_v48__0_8_CGRect__CGPoint_dd__CGSize_dd__16l;
    v3 = ___ZL29cons_CAAnimation_kCAValueRectjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CAAnimation_kCAValueTransform(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e39__CATransform3D_dddddddddddddddd_16__0_8l;
    v3 = ___ZL34cons_CAAnimation_kCAValueTransformjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e43_v144__0_8_CATransform3D_dddddddddddddddd_16l;
    v3 = ___ZL34cons_CAAnimation_kCAValueTransformjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CAAnimation_kCAValueAffineTransform(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e33__CGAffineTransform_dddddd_16__0_8l;
    v3 = ___ZL40cons_CAAnimation_kCAValueAffineTransformjb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e36_v64__0_8_CGAffineTransform_dddddd_16l;
    v3 = ___ZL40cons_CAAnimation_kCAValueAffineTransformjb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CAAnimation_kCAValuePoint3D(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e22__CAPoint3D_ddd_16__0_8l;
    v3 = ___ZL32cons_CAAnimation_kCAValuePoint3Djb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e25_v40__0_8_CAPoint3D_ddd_16l;
    v3 = ___ZL32cons_CAAnimation_kCAValuePoint3Djb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

IMP cons_CAAnimation_kCAValueCornerRadii(int a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD block[6];

  block[5] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e67__CACornerRadii__CGSize_dd__CGSize_dd__CGSize_dd__CGSize_dd__16__0_8l;
    v3 = ___ZL36cons_CAAnimation_kCAValueCornerRadiijb_block_invoke;
    v4 = block;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v2 = &__block_descriptor_36_e70_v80__0_8_CACornerRadii__CGSize_dd__CGSize_dd__CGSize_dd__CGSize_dd__16l;
    v3 = ___ZL36cons_CAAnimation_kCAValueCornerRadiijb_block_invoke_2;
    v4 = &v6;
  }
  v4[1] = 3221225472;
  v4[2] = (uint64_t)v3;
  v4[3] = (uint64_t)v2;
  *((_DWORD *)v4 + 8) = a1;
  return imp_implementationWithBlock(v4);
}

void ___ZL36cons_CAAnimation_kCAValueCornerRadiijb_block_invoke_2(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  const void *v4;
  __int128 v5;
  __int128 v6;
  _OWORD v7[4];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5 = a3[1];
  v7[0] = *a3;
  v7[1] = v5;
  v6 = a3[3];
  v7[2] = a3[2];
  v7[3] = v6;
  CAAnimation_setter(a2, v4, 25, (unsigned __int8 *)v7);
}

void ___ZL36cons_CAAnimation_kCAValueCornerRadiijb_block_invoke(uint64_t a1@<X0>, CA::Transaction *a2@<X1>, CA::Mat4Impl *a3@<X8>)
{
  int v4;

  v4 = *(_DWORD *)(a1 + 32);
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  *((_OWORD *)a3 + 2) = 0u;
  *((_OWORD *)a3 + 3) = 0u;
  CAAnimation_getter(a2, v4, (const CGAffineTransform *)0x19, a3);
}

void ___ZL32cons_CAAnimation_kCAValuePoint3Djb_block_invoke_2(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  const void *v6;
  _QWORD v7[4];

  v7[3] = *MEMORY[0x1E0C80C00];
  v6 = (const void *)*(unsigned int *)(a1 + 32);
  *(double *)v7 = a3;
  *(double *)&v7[1] = a4;
  *(double *)&v7[2] = a5;
  CAAnimation_setter(a2, v6, 24, (unsigned __int8 *)v7);
}

double ___ZL32cons_CAAnimation_kCAValuePoint3Djb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  int v3;
  _QWORD v5[4];

  v5[3] = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 32);
  memset(v5, 0, 24);
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0x18, (CA::Mat4Impl *)v5);
  return *(double *)v5;
}

void ___ZL40cons_CAAnimation_kCAValueAffineTransformjb_block_invoke_2(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  const void *v4;
  __int128 v5;
  _OWORD v6[3];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5 = a3[1];
  v6[0] = *a3;
  v6[1] = v5;
  v6[2] = a3[2];
  CAAnimation_setter(a2, v4, 23, (unsigned __int8 *)v6);
}

void ___ZL40cons_CAAnimation_kCAValueAffineTransformjb_block_invoke(uint64_t a1@<X0>, CA::Transaction *a2@<X1>, CA::Mat4Impl *a3@<X8>)
{
  int v4;

  v4 = *(_DWORD *)(a1 + 32);
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  *((_OWORD *)a3 + 2) = 0u;
  CAAnimation_getter(a2, v4, (const CGAffineTransform *)0x17, a3);
}

void ___ZL34cons_CAAnimation_kCAValueTransformjb_block_invoke_2(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  const void *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[8];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5 = a3[5];
  v9[4] = a3[4];
  v9[5] = v5;
  v6 = a3[7];
  v9[6] = a3[6];
  v9[7] = v6;
  v7 = a3[1];
  v9[0] = *a3;
  v9[1] = v7;
  v8 = a3[3];
  v9[2] = a3[2];
  v9[3] = v8;
  CAAnimation_setter(a2, v4, 22, (unsigned __int8 *)v9);
}

void ___ZL34cons_CAAnimation_kCAValueTransformjb_block_invoke(uint64_t a1@<X0>, CA::Transaction *a2@<X1>, CA::Mat4Impl *a3@<X8>)
{
  int v4;

  v4 = *(_DWORD *)(a1 + 32);
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  *((_OWORD *)a3 + 2) = 0u;
  *((_OWORD *)a3 + 3) = 0u;
  *((_OWORD *)a3 + 4) = 0u;
  *((_OWORD *)a3 + 5) = 0u;
  *((_OWORD *)a3 + 6) = 0u;
  *((_OWORD *)a3 + 7) = 0u;
  CAAnimation_getter(a2, v4, (const CGAffineTransform *)0x16, a3);
}

void ___ZL29cons_CAAnimation_kCAValueRectjb_block_invoke_2(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  const void *v7;
  _QWORD v8[5];

  v8[4] = *MEMORY[0x1E0C80C00];
  v7 = (const void *)*(unsigned int *)(a1 + 32);
  *(double *)v8 = a3;
  *(double *)&v8[1] = a4;
  *(double *)&v8[2] = a5;
  *(double *)&v8[3] = a6;
  CAAnimation_setter(a2, v7, 21, (unsigned __int8 *)v8);
}

double ___ZL29cons_CAAnimation_kCAValueRectjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  int v3;
  _OWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 32);
  memset(v5, 0, sizeof(v5));
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0x15, (CA::Mat4Impl *)v5);
  return *(double *)v5;
}

void ___ZL29cons_CAAnimation_kCAValueSizejb_block_invoke_2(uint64_t a1, uint64_t a2, double a3, double a4)
{
  const void *v5;
  _QWORD v6[3];

  v6[2] = *MEMORY[0x1E0C80C00];
  v5 = (const void *)*(unsigned int *)(a1 + 32);
  *(double *)v6 = a3;
  *(double *)&v6[1] = a4;
  CAAnimation_setter(a2, v5, 20, (unsigned __int8 *)v6);
}

double ___ZL29cons_CAAnimation_kCAValueSizejb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  int v3;
  _QWORD v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 32);
  v5[0] = 0;
  v5[1] = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0x14, (CA::Mat4Impl *)v5);
  return *(double *)v5;
}

void ___ZL30cons_CAAnimation_kCAValuePointjb_block_invoke_2(uint64_t a1, uint64_t a2, double a3, double a4)
{
  const void *v5;
  _QWORD v6[3];

  v6[2] = *MEMORY[0x1E0C80C00];
  v5 = (const void *)*(unsigned int *)(a1 + 32);
  *(double *)v6 = a3;
  *(double *)&v6[1] = a4;
  CAAnimation_setter(a2, v5, 19, (unsigned __int8 *)v6);
}

double ___ZL30cons_CAAnimation_kCAValuePointjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  int v3;
  _QWORD v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 32);
  v5[0] = 0;
  v5[1] = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0x13, (CA::Mat4Impl *)v5);
  return *(double *)v5;
}

void ___ZL31cons_CAAnimation_kCAValueDoublejb_block_invoke_2(uint64_t a1, uint64_t a2, double a3)
{
  const void *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*(unsigned int *)(a1 + 32);
  *(double *)v5 = a3;
  CAAnimation_setter(a2, v4, 18, (unsigned __int8 *)v5);
}

double ___ZL31cons_CAAnimation_kCAValueDoublejb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  int v3;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 32);
  v5[0] = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0x12, (CA::Mat4Impl *)v5);
  return *(double *)v5;
}

void ___ZL30cons_CAAnimation_kCAValueFloatjb_block_invoke_2(uint64_t a1, uint64_t a2, float a3)
{
  const void *v4;
  float v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5 = a3;
  CAAnimation_setter(a2, v4, 17, (unsigned __int8 *)&v5);
}

float ___ZL30cons_CAAnimation_kCAValueFloatjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  int v3;
  float v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 32);
  v5 = 0.0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0x11, (CA::Mat4Impl *)&v5);
  return v5;
}

void ___ZL41cons_CAAnimation_kCAValueUnsignedLongLongjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5[0] = a3;
  CAAnimation_setter(a2, v4, 16, (unsigned __int8 *)v5);
}

uint64_t ___ZL41cons_CAAnimation_kCAValueUnsignedLongLongjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  int v3;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 32);
  v5[0] = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0x10, (CA::Mat4Impl *)v5);
  return v5[0];
}

void ___ZL33cons_CAAnimation_kCAValueLongLongjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5[0] = a3;
  CAAnimation_setter(a2, v4, 15, (unsigned __int8 *)v5);
}

uint64_t ___ZL33cons_CAAnimation_kCAValueLongLongjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  int v3;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 32);
  v5[0] = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0xF, (CA::Mat4Impl *)v5);
  return v5[0];
}

void ___ZL37cons_CAAnimation_kCAValueUnsignedLongjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5[0] = a3;
  CAAnimation_setter(a2, v4, 14, (unsigned __int8 *)v5);
}

uint64_t ___ZL37cons_CAAnimation_kCAValueUnsignedLongjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  int v3;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 32);
  v5[0] = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0xE, (CA::Mat4Impl *)v5);
  return v5[0];
}

void ___ZL29cons_CAAnimation_kCAValueLongjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5[0] = a3;
  CAAnimation_setter(a2, v4, 13, (unsigned __int8 *)v5);
}

uint64_t ___ZL29cons_CAAnimation_kCAValueLongjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  int v3;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 32);
  v5[0] = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0xD, (CA::Mat4Impl *)v5);
  return v5[0];
}

void ___ZL36cons_CAAnimation_kCAValueUnsignedIntjb_block_invoke_2(uint64_t a1, uint64_t a2, int a3)
{
  const void *v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5 = a3;
  CAAnimation_setter(a2, v4, 12, (unsigned __int8 *)&v5);
}

uint64_t ___ZL36cons_CAAnimation_kCAValueUnsignedIntjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  int v3;
  unsigned int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 32);
  v5 = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0xC, (CA::Mat4Impl *)&v5);
  return v5;
}

void ___ZL28cons_CAAnimation_kCAValueIntjb_block_invoke_2(uint64_t a1, uint64_t a2, int a3)
{
  const void *v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5 = a3;
  CAAnimation_setter(a2, v4, 11, (unsigned __int8 *)&v5);
}

uint64_t ___ZL28cons_CAAnimation_kCAValueIntjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  int v3;
  unsigned int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 32);
  v5 = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0xB, (CA::Mat4Impl *)&v5);
  return v5;
}

void ___ZL38cons_CAAnimation_kCAValueUnsignedShortjb_block_invoke_2(uint64_t a1, uint64_t a2, __int16 a3)
{
  const void *v4;
  __int16 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5 = a3;
  CAAnimation_setter(a2, v4, 10, (unsigned __int8 *)&v5);
}

uint64_t ___ZL38cons_CAAnimation_kCAValueUnsignedShortjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  int v3;
  unsigned __int16 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 32);
  v5 = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0xA, (CA::Mat4Impl *)&v5);
  return v5;
}

void ___ZL30cons_CAAnimation_kCAValueShortjb_block_invoke_2(uint64_t a1, uint64_t a2, __int16 a3)
{
  const void *v4;
  __int16 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5 = a3;
  CAAnimation_setter(a2, v4, 9, (unsigned __int8 *)&v5);
}

uint64_t ___ZL30cons_CAAnimation_kCAValueShortjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  int v3;
  __int16 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 32);
  v5 = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)9, (CA::Mat4Impl *)&v5);
  return v5;
}

void ___ZL37cons_CAAnimation_kCAValueUnsignedCharjb_block_invoke_2(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  const void *v4;
  unsigned __int8 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5 = a3;
  CAAnimation_setter(a2, v4, 8, &v5);
}

uint64_t ___ZL37cons_CAAnimation_kCAValueUnsignedCharjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  int v3;
  unsigned __int8 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 32);
  v5 = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)8, (CA::Mat4Impl *)&v5);
  return v5;
}

void ___ZL29cons_CAAnimation_kCAValueCharjb_block_invoke_2(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  const void *v4;
  unsigned __int8 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5 = a3;
  CAAnimation_setter(a2, v4, 7, &v5);
}

uint64_t ___ZL29cons_CAAnimation_kCAValueCharjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  int v3;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 32);
  v5 = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)7, (CA::Mat4Impl *)&v5);
  return v5;
}

void ___ZL29cons_CAAnimation_kCAValueBooljb_block_invoke_2(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  const void *v4;
  unsigned __int8 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5 = a3;
  CAAnimation_setter(a2, v4, 6, &v5);
}

uint64_t ___ZL29cons_CAAnimation_kCAValueBooljb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  int v3;
  unsigned __int8 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 32);
  v5 = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)6, (CA::Mat4Impl *)&v5);
  return v5;
}

void ___ZL30cons_CAAnimation_kCAValueBlockjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5[0] = a3;
  CAAnimation_setter(a2, v4, 5, (unsigned __int8 *)v5);
}

uint64_t ___ZL30cons_CAAnimation_kCAValueBlockjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  int v3;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 32);
  v5[0] = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)5, (CA::Mat4Impl *)v5);
  return v5[0];
}

void ___ZL38cons_CAAnimation_kCAValueCopiedPointerjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5[0] = a3;
  CAAnimation_setter(a2, v4, 3, (unsigned __int8 *)v5);
}

uint64_t ___ZL38cons_CAAnimation_kCAValueCopiedPointerjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  int v3;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 32);
  v5[0] = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)3, (CA::Mat4Impl *)v5);
  return v5[0];
}

void ___ZL40cons_CAAnimation_kCAValueRetainedPointerjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5[0] = a3;
  CAAnimation_setter(a2, v4, 2, (unsigned __int8 *)v5);
}

uint64_t ___ZL40cons_CAAnimation_kCAValueRetainedPointerjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  int v3;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 32);
  v5[0] = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)2, (CA::Mat4Impl *)v5);
  return v5[0];
}

void ___ZL40cons_CAAnimation_kCAValueAssignedPointerjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5[0] = a3;
  CAAnimation_setter(a2, v4, 1, (unsigned __int8 *)v5);
}

uint64_t ___ZL40cons_CAAnimation_kCAValueAssignedPointerjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  int v3;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 32);
  v5[0] = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)1, (CA::Mat4Impl *)v5);
  return v5[0];
}

void *CA::WindowServer::Server::shutdown(CA::WindowServer::Server *this)
{
  pthread_mutex_t *v2;
  uint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  malloc_zone_t *malloc_zone;
  __CFNotificationCenter *LocalCenter;
  uint64_t v10;
  unint64_t v11;
  const void *v12;
  const void *v13;
  CA::Render::Server *v14;
  _QWORD v15[4];

  v15[3] = *MEMORY[0x1E0C80C00];
  v2 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  if (*((_BYTE *)this + 513))
    return (void *)pthread_mutex_unlock(v2);
  *((_BYTE *)this + 513) = 1;
  pthread_mutex_unlock(v2);
  v15[1] = 0;
  v15[2] = 0;
  v15[0] = 0x7FF0000000000000;
  (*(void (**)(CA::WindowServer::Server *, _QWORD *, double))(*(_QWORD *)this + 184))(this, v15, 0.0);
  CA::Render::remove_observer(1u, 0, (uint64_t)CA::WindowServer::Server::context_created, (uint64_t)this);
  CA::Render::remove_observer(0xCu, 0, (uint64_t)CA::WindowServer::Server::ping_server, (uint64_t)this);
  CA::Render::remove_observer(0x13u, 0, (uint64_t)CA::WindowServer::Server::render_display, (uint64_t)this);
  CA::Render::remove_observer(0x14u, 0, (uint64_t)CA::WindowServer::Server::render_display_layer, (uint64_t)this);
  CA::Render::remove_observer(0x15u, 0, (uint64_t)CA::WindowServer::Server::render_display_context_list, (uint64_t)this);
  CA::Render::remove_observer(0x1Au, 0, (uint64_t)CA::WindowServer::Server::get_displays, (uint64_t)this);
  CA::Render::remove_observer(0x1Bu, 0, (uint64_t)CA::WindowServer::Server::get_display_info, (uint64_t)this);
  CA::Render::remove_observer(0x1Cu, 0, (uint64_t)CA::WindowServer::Server::get_display_edr_state, (uint64_t)this);
  CA::Render::remove_observer(0x1Du, 0, (uint64_t)CA::WindowServer::Server::get_display_logical_bounds, (uint64_t)this);
  CA::Render::remove_observer(0x1Eu, 0, (uint64_t)CA::WindowServer::Server::get_display_auto_luminance_boost, (uint64_t)this);
  CA::Render::remove_observer(0x20u, 0, (uint64_t)CA::WindowServer::Server::set_display_properties, (uint64_t)this);
  CA::Render::remove_observer(0x22u, 0, (uint64_t)CA::WindowServer::Server::set_display_user_prefs, (uint64_t)this);
  CA::Render::remove_observer(0x23u, 0, (uint64_t)CA::WindowServer::Server::set_display_latency, (uint64_t)this);
  CA::Render::remove_observer(0x2Fu, 0, (uint64_t)CA::WindowServer::Server::display_changed, (uint64_t)this);
  CA::Render::remove_observer(0x26u, 0, (uint64_t)CA::WindowServer::Server::purge_server, (uint64_t)this);
  CA::Render::remove_observer(0x27u, 0, (uint64_t)CA::WindowServer::Server::set_ax_matrix, (uint64_t)this);
  CA::Render::remove_observer(0x30u, 0, (uint64_t)CA::WindowServer::Server::get_debug_log, (uint64_t)this);
  CA::Render::remove_observer(0x28u, 0, (uint64_t)CA::WindowServer::Server::get_update_histograms, (uint64_t)this);
  CA::Render::remove_observer(0x29u, 0, (uint64_t)CA::WindowServer::Server::get_od_statistics, (uint64_t)this);
  CA::Render::remove_observer(0x2Du, 0, (uint64_t)CA::WindowServer::Server::get_performance_info, (uint64_t)this);
  if ((*(_DWORD *)(*((_QWORD *)this + 12) + 624) & 0x40) != 0)
  {
    CA::Render::remove_observer(0xDu, 0, (uint64_t)CA::WindowServer::Server::flipbook_render, (uint64_t)this);
    CA::Render::remove_observer(0xEu, 0, (uint64_t)CA::WindowServer::Server::flipbook_query_frame, (uint64_t)this);
    CA::Render::remove_observer(0xFu, 0, (uint64_t)CA::WindowServer::Server::flipbook_query_memory_usage, (uint64_t)this);
    CA::Render::remove_observer(0x10u, 0, (uint64_t)CA::WindowServer::Server::flipbook_copy_current_frame, (uint64_t)this);
    CA::Render::remove_observer(0x11u, 0, (uint64_t)CA::WindowServer::Server::flipbook_cancel, (uint64_t)this);
    CA::Render::remove_observer(0x12u, 0, (uint64_t)CA::WindowServer::Server::flipbook_modify, (uint64_t)this);
  }
  CA::Render::remove_observer(0x34u, 0, (uint64_t)CA::WindowServer::Server::get_surface_replaceability, (uint64_t)this);
  CA::Render::remove_observer(0x3Fu, 0, (uint64_t)CA::WindowServer::Server::content_stream_state_changed, (uint64_t)this);
  CA::Render::remove_observer(0x40u, 0, (uint64_t)CA::WindowServer::Server::content_stream_modified, (uint64_t)this);
  CA::Render::remove_observer(0x41u, 0, (uint64_t)CA::WindowServer::Server::get_display_state_shmem, (uint64_t)this);
  CA::Render::remove_observer(0x42u, 0, (uint64_t)CA::WindowServer::Server::set_display_state, (uint64_t)this);
  if ((*(_WORD *)(*((_QWORD *)this + 12) + 656) & 0x1C00) != 0)
    CA::Render::remove_observer(0x3Cu, 0, (uint64_t)CA::WindowServer::Server::get_active_display_count, (uint64_t)this);
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Server::_callback_lock);
  v4 = CA::Render::Server::_callback_list;
  if (CA::Render::Server::_callback_list)
  {
    v5 = 0;
    v6 = &CA::Render::Server::_callback_list;
    do
    {
LABEL_9:
      v7 = (uint64_t *)v4;
      if (*(void (**)(CA::WindowServer::Server *, double, void *))(v4 + 24) == CA::WindowServer::Server::timer_callback)
      {
        while ((CA::WindowServer::Server *)v7[4] == this)
        {
          *v6 = *v7;
          malloc_zone = (malloc_zone_t *)get_malloc_zone();
          malloc_zone_free(malloc_zone, v7);
          v7 = (uint64_t *)*v6;
          if (!*v6)
            goto LABEL_16;
          v5 = 1;
          if ((void (*)(CA::WindowServer::Server *, double, void *))v7[3] != CA::WindowServer::Server::timer_callback)
          {
            v4 = *v7;
            v6 = (uint64_t *)*v6;
            if (*v7)
              goto LABEL_9;
LABEL_16:
            os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Server::_callback_lock);
            goto LABEL_17;
          }
        }
      }
      v4 = *v7;
      v6 = v7;
    }
    while (*v7);
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Server::_callback_lock);
    if ((v5 & 1) != 0)
LABEL_17:
      CA::Render::Server::kick_server(v14);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Server::_callback_lock);
  }
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, this, CFSTR("kCADebugOptionsDidChange"), 0);
  os_unfair_lock_lock((os_unfair_lock_t)this + 4);
  if (*((_QWORD *)this + 16))
  {
    v10 = 0;
    v11 = 0;
    do
    {
      CA::WindowServer::Server::remove_observers(this, *(CA::Render::Context **)(*((_QWORD *)this + 14) + v10));
      ++v11;
      v10 += 16;
    }
    while (v11 < *((_QWORD *)this + 16));
  }
  *((_QWORD *)this + 16) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)this + 4);
  CA::WindowServer::Server::destroy_blank_context(this);
  os_unfair_lock_lock((os_unfair_lock_t)this + 80);
  v12 = (const void *)*((_QWORD *)this + 1);
  if (v12)
  {
    _Block_release(v12);
    *((_QWORD *)this + 1) = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 80);
  v13 = (const void *)*((_QWORD *)this + 31);
  if (v13)
  {
    _Block_release(v13);
    *((_QWORD *)this + 31) = 0;
  }
  CA::WindowServer::Server::set_pre_post_power_callback((uint64_t)this, 0);
  return CA::WindowServer::Server::set_pre_post_flipbook_callback((uint64_t)this, 0);
}

double CA::WindowServer::Server::next_wakeup_time(CA::WindowServer::Server *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Server::vbl_delta(CA::WindowServer::Server *this)
{
  return 0;
}

uint64_t CA::WindowServer::Server::previous_vbl(CA::WindowServer::Server *this)
{
  return 0;
}

uint64_t CA::WindowServer::Server::displayed_surface(CA::WindowServer::Server *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 12) + 480))(*((_QWORD *)this + 12), 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
  return result;
}

void CA::WindowServer::Server::~Server(CA::WindowServer::Server *this)
{
  malloc_zone_t *malloc_zone;

  CA::WindowServer::Server::~Server(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  CA::Shape *v2;
  CA::Render::HitTestTree *v3;
  void *v4;
  malloc_zone_t *malloc_zone;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  malloc_zone_t *v10;
  void *v11;
  malloc_zone_t *v12;
  const void *v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;

  *(_QWORD *)this = &off_1E1590188;
  if (!*((_BYTE *)this + 513))
    __assert_rtn("~Server", "windowserver-server.cpp", 578, "_shutdown_called");
  v2 = (CA::Shape *)*((_QWORD *)this + 22);
  if (v2)
    CA::Shape::unref(v2);
  v3 = (CA::Render::HitTestTree *)*((_QWORD *)this + 41);
  if (v3)
    CA::Render::HitTestTree::unref(v3);
  v4 = (void *)*((_QWORD *)this + 25);
  if (v4)
  {
    CA::OGL::Renderer::~Renderer(*((CA::OGL::Renderer **)this + 25));
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v4);
  }
  v6 = *((_QWORD *)this + 24);
  if (v6)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v6 + 224))(*((_QWORD *)this + 24), 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  v7 = (const void *)*((_QWORD *)this + 13);
  if (v7)
    CFRelease(v7);
  v8 = *((_QWORD *)this + 12);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 12) = 0;
  if (*((_QWORD *)this + 15))
  {
    v9 = (void *)*((_QWORD *)this + 14);
    v10 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v10, v9);
  }
  if (*((_QWORD *)this + 18))
  {
    v11 = (void *)*((_QWORD *)this + 17);
    v12 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v12, v11);
  }
  v13 = (const void *)*((_QWORD *)this + 39);
  if (v13)
    CFRelease(v13);
  v14 = (void *)*((_QWORD *)this + 59);
  if (v14)
  {
    objc_msgSend(*((id *)this + 59), "invalidate");

  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 24));
  v15 = (_QWORD *)*((_QWORD *)this + 60);
  if (v15)
  {
    v16 = (_QWORD *)*((_QWORD *)this + 61);
    v17 = (void *)*((_QWORD *)this + 60);
    if (v16 != v15)
    {
      do
      {
        v16 -= 25;
        std::__destroy_at[abi:nn180100]<CA::Render::ContentStreamConfig,0>(v16);
      }
      while (v16 != v15);
      v17 = (void *)*((_QWORD *)this + 60);
    }
    *((_QWORD *)this + 61) = v15;
    operator delete(v17);
  }
}

uint64_t CA::WindowServer::Server::set_enabled(CA::WindowServer::Server *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 224))(*((_QWORD *)this + 12));
}

uint64_t CA::WindowServer::Server::run_loop(CA::WindowServer::Server *this)
{
  return 0;
}

uint64_t CA::WindowServer::Server::renderer(CA::WindowServer::Server *this)
{
  return 0;
}

uint64_t CA::WindowServer::Server::update_delay(CA::WindowServer::Server *this, float *a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v4 = 990057071;
  result = CA::WindowServer::Display::benchmark_mode((CA::WindowServer::Display *)&v4, a2);
  if ((result & 1) == 0)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 744))(*((_QWORD *)this + 12));
  return result;
}

CA::Shape **CA::WindowServer::Server::render_update(CA::WindowServer::Display **this, CA::Render::Update *a2, unsigned int *a3)
{
  CA::Shape **result;

  result = (CA::Shape **)CA::WindowServer::Server::sw_renderer((CA::WindowServer::Server *)this);
  if (result)
  {
    *(_DWORD *)((char *)this[12] + 745) |= 0x80u;
    return (CA::Shape **)CA::WindowServer::Display::render_display(this[12], result, a2);
  }
  return result;
}

CA::Shape **CA::WindowServer::Server::render_surface(CA::WindowServer::Display **this, CA::Render::Update *a2, CA::WindowServer::Surface *a3, const CA::Bounds *a4, unsigned int a5, int a6)
{
  CA::Shape **result;
  CA::OGL::Renderer *v13;
  uint64_t v14;

  result = (CA::Shape **)CA::WindowServer::Server::sw_renderer((CA::WindowServer::Server *)this);
  if (result)
  {
    v13 = (CA::OGL::Renderer *)result;
    *(_DWORD *)((char *)this[12] + 745) |= 0x80u;
    v14 = CA::WindowServer::Display::render_surface(this[12], result, a3, a2, a4, a5, a6);
    CA::OGL::Renderer::collect(v13, a2, *((double *)a2 + 9));
    return (CA::Shape **)v14;
  }
  return result;
}

uint64_t CA::WindowServer::Server::sw_renderer(CA::WindowServer::Server *this)
{
  malloc_zone_t *malloc_zone;
  CA::OGL::Context *v3;
  CA::OGL::Context *v4;
  malloc_zone_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint8_t v15[16];
  uint8_t buf[8];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 25))
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v3 = (CA::OGL::Context *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x5000uLL, 0x743898A5uLL);
    v4 = v3;
    if (v3)
    {
      bzero(v3, 0x5000uLL);
      CA::OGL::Context::Context(v4);
      *(_QWORD *)v4 = off_1E1595D70;
    }
    *((_QWORD *)this + 24) = v4;
    v5 = (malloc_zone_t *)get_malloc_zone();
    v6 = malloc_type_zone_malloc(v5, 0x68uLL, 0x8BB15036uLL);
    v7 = v6;
    if (v6)
    {
      v8 = *((_QWORD *)this + 24);
      v6[1] = 0;
      v6[2] = 0;
      *v6 = v8;
      v6[6] = malloc_type_malloc(0x40000uLL, 0xA44586FDuLL);
      v7[7] = 0;
      *((_DWORD *)v7 + 24) = 1;
      *((_WORD *)v7 + 50) = 0;
    }
    *((_QWORD *)this + 25) = v7;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v9 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v9, OS_LOG_TYPE_ERROR, "CoreAnimation: Software renderer! Simulating crash!\n", buf, 2u);
      }
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v10 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)v15 = 0;
        _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_FAULT, "CoreAnimation: Failed to initialize Metal or OpenGLES contexts!", v15, 2u);
      }
    }
  }
  v11 = *((_QWORD *)this + 24);
  v12 = *((_DWORD *)this + 46);
  v13 = *(_DWORD *)(v11 + 208);
  *(_DWORD *)(v11 + 208) = v12;
  *(_DWORD *)(v11 + 416) = global_feature_flags | v12;
  if (((v13 ^ v12) & 0x2000200) != 0)
    CA::OGL::Context::update_color_program_cache(v11);
  return *((_QWORD *)this + 25);
}

void CA::WindowServer::Server::timer_callback(CA::WindowServer::Server *this, double a2, void *a3)
{
  __CFRunLoop *v4;
  __CFRunLoop *v5;
  const void *v6;
  uint64_t v7;
  _QWORD v8[6];

  v8[5] = *MEMORY[0x1E0C80C00];
  v4 = (__CFRunLoop *)(*(uint64_t (**)(CA::WindowServer::Server *, void *, double))(*(_QWORD *)this + 384))(this, a3, a2);
  if (v4)
  {
    v5 = v4;
    v6 = (const void *)*MEMORY[0x1E0C9B280];
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 0x40000000;
    v8[2] = ___ZN2CA12WindowServer6Server14timer_callbackEdPv_block_invoke;
    v8[3] = &__block_descriptor_tmp_17;
    v8[4] = this;
    CFRunLoopPerformBlock(v4, v6, v8);
    CFRunLoopWakeUp(v5);
  }
  else
  {
    v7 = mach_absolute_time();
    CATimeWithHostTime(v7);
    CA::WindowServer::Server::render_for_time((uint64_t)this);
  }
}

void ___ZN2CA12WindowServer6Server14timer_callbackEdPv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = mach_absolute_time();
  CATimeWithHostTime(v2);
  CA::WindowServer::Server::render_for_time(v1);
}

os_log_t ___ZN2CA12WindowServer6Server19server_stall_handleEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreanimation", "WindowServer.Stalls");
  CA::WindowServer::Server::server_stall_handle(void)::handle = (uint64_t)result;
  return result;
}

void X::small_vector_base<X::Ref<CA::Render::Context>>::grow(uint64_t a1, unint64_t a2)
{
  unsigned int **v3;
  uint64_t v4;
  unsigned int **v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int **v13;
  unsigned int **v14;
  unsigned int **v15;
  unsigned int **v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  v3 = *(unsigned int ***)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned int ***)(a1 + 16);
  v6 = (*(_QWORD *)(a1 + 24) + 1) | ((unint64_t)(*(_QWORD *)(a1 + 24) + 1) >> 1);
  v7 = v6 | (v6 >> 2) | ((v6 | (v6 >> 2)) >> 4);
  v8 = v7 | (v7 >> 8) | ((v7 | (v7 >> 8)) >> 16);
  v9 = v8 | HIDWORD(v8);
  if (v9 + 1 > a2)
    v10 = v9 + 1;
  else
    v10 = a2;
  v11 = malloc_type_malloc(8 * v10, 0x2004093837F09uLL);
  v12 = v11;
  v13 = *(unsigned int ***)a1;
  v14 = *(unsigned int ***)(a1 + 8);
  if (*(unsigned int ***)a1 != v14)
  {
    v15 = (unsigned int **)v11;
    v16 = *(unsigned int ***)a1;
    do
    {
      *v15++ = *v16;
      *v16++ = 0;
    }
    while (v16 != v14);
    do
    {
      v17 = *v13;
      if (*v13)
      {
        v18 = v17 + 2;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
          (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 16))(v17);
      }
      ++v13;
    }
    while (v13 != v14);
  }
  if (v3 != v5)
    free(*(void **)a1);
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = (char *)v12 + v4 - (_QWORD)v3;
  *(_QWORD *)(a1 + 24) = v10;
}

void CA::WindowServer::`anonymous namespace'::RenderDisplayDelegate::~RenderDisplayDelegate(CA::WindowServer::_anonymous_namespace_::RenderDisplayDelegate *this)
{
  *(_QWORD *)this = &off_1E158D930;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E158D930;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 8);
  JUMPOUT(0x186DBD990);
}

uint64_t CA::Render::UpdateDelegate::update_layer(CA::Render::UpdateDelegate *this, CA::Render::Context *a2, CA::Render::LayerNode *a3, const CA::Render::Layer *a4)
{
  return 1;
}

uint64_t CA::Render::UpdateDelegate::should_decontainer_layer(CA::Render::UpdateDelegate *this, CA::Render::Context *a2, CA::Render::LayerNode *a3, const CA::Render::Layer *a4)
{
  return 0;
}

void CA::WindowServer::`anonymous namespace'::ExcludeDelegate::~ExcludeDelegate(CA::WindowServer::_anonymous_namespace_::ExcludeDelegate *this)
{
  *(_QWORD *)this = &off_1E158D930;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E158D930;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 8);
  JUMPOUT(0x186DBD990);
}

BOOL CA::WindowServer::`anonymous namespace'::ExcludeDelegate::can_include_context(CA::WindowServer::_anonymous_namespace_::ExcludeDelegate *this, CA::Render::Context *a2)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)this + 1, *((_DWORD *)a2 + 4)) == 0;
}

os_log_t ___ZN2CA12WindowServer15server_perf_logEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreanimation", "WindowServer.Performance");
  CA::WindowServer::server_perf_log(void)::log = (uint64_t)result;
  return result;
}

void std::__destroy_at[abi:nn180100]<CA::Render::ContentStreamConfig,0>(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[17];
  if (v2 != (void *)a1[19])
    free(v2);
  v3 = (void *)a1[9];
  if (v3 != (void *)a1[11])
    free(v3);
}

uint64_t CA::WindowServer::Server::ping_server(CA::WindowServer::Server *this, CA::Render::Object *a2, void *a3, void *a4)
{
  pthread_mutex_t *v5;
  uint64_t result;
  pthread_mutex_t *v7;

  v5 = (pthread_mutex_t *)(*((_QWORD *)a2 + 12) + 496);
  result = pthread_mutex_trylock(v5);
  if (!(_DWORD)result)
  {
    v7 = (pthread_mutex_t *)((char *)a2 + 24);
    pthread_mutex_lock(v7);
    pthread_mutex_unlock(v7);
    return pthread_mutex_unlock(v5);
  }
  return result;
}

void CA::WindowServer::Server::render_display(CA::WindowServer::Server *this, CA::Render::Object *a2, unsigned __int8 *a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL *v18;
  uint64_t v20;
  int v21;
  __int128 v22;
  CA::Render::LayerNode *v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v40;
  int v41;
  int v42;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  CA::Render::Layer *v56;
  CA::Render::LayerNode *v57;
  const CA::Shape *v58;
  int64x2_t v59;
  const CA::Shape *v60;
  uint64_t v61;
  CA::Render::RenderTarget *v62;
  float *v63;
  unsigned int v64;
  CA::WindowServer::Surface *v65;
  int v66;
  const CA::Render::LayerNode *v67;
  char v68;
  uint64_t v69;
  __IOSurface *v70;
  char *v71;
  void (*v72)(CA::WindowServer::Surface *);
  uint64_t i;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  pthread_mutex_t *v79;
  __int128 v80;
  unsigned __int8 v81;
  int32x2_t v82[2];
  char v83;
  _QWORD v84[2];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _QWORD v103[2];
  CA::Shape *v104[25];
  _QWORD v105[12];
  int v106;
  uint64_t v107;
  __int128 *v108;
  int v109;
  unsigned int v110;
  unsigned __int16 v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  if (!CA::WindowServer::display_name_matches((CFTypeRef *)a2, *((CA::WindowServer::Server **)a3 + 1), (const __CFString *)((a3[96] >> 4) & 1))|| *((_DWORD *)a3 + 16) > 3u)
  {
    return;
  }
  a3[96] |= 0x20u;
  os_unfair_lock_lock((os_unfair_lock_t)a2 + 4);
  v7 = *((_QWORD *)a2 + 16);
  if (!v7)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)a2 + 4);
    return;
  }
  v8 = 8 * v7;
  if ((unint64_t)(8 * v7) > 0x1000)
  {
    v9 = (char *)malloc_type_malloc(8 * v7, 0x694A60E6uLL);
  }
  else
  {
    MEMORY[0x1E0C80A78](v6);
    v9 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v9, 8 * v7);
  }
  v10 = 0;
  v11 = v7;
  do
  {
    v12 = *(_QWORD *)(*((_QWORD *)a2 + 14) + 16 * v10);
    if (v12)
    {
      v13 = (unsigned int *)(v12 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      if (!v14)
      {
        do
        {
          v12 = 0;
          v15 = __ldaxr(v13);
        }
        while (__stlxr(v15 - 1, v13));
      }
    }
    *(_QWORD *)&v9[8 * v10++] = v12;
  }
  while (v10 != v7);
  os_unfair_lock_unlock((os_unfair_lock_t)a2 + 4);
  v79 = (pthread_mutex_t *)((char *)a2 + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 24));
  v83 = 0;
  v82[0] = 0;
  v82[1] = 0;
  v16 = v7 - 1;
  v81 = 0;
  do
  {
    v17 = *(_QWORD *)&v9[8 * v16];
    pthread_mutex_lock((pthread_mutex_t *)(v17 + 72));
    CA::WindowServer::get_context_logical_bounds((CA::WindowServer *)v17, (CA::Render::Context *)&v83, v82, (CA::Bounds *)&v81, v18);
    pthread_mutex_unlock((pthread_mutex_t *)(v17 + 72));
    _CF = v16-- != 0;
  }
  while (_CF && !v83);
  v20 = *((_QWORD *)a2 + 12);
  if (v83)
  {
    CA::WindowServer::Display::set_logical_bounds((CA::WindowServer::Display *)v20, (const CA::Bounds *)v82, v81);
  }
  else
  {
    v21 = *(_DWORD *)(v20 + 745);
    if ((v21 & 2) != 0)
    {
      *(_QWORD *)(v20 + 184) = 0;
      *(_QWORD *)(v20 + 192) = 0;
      *(_DWORD *)(v20 + 745) = v21 & 0xFFFFFFED;
      CA::WindowServer::Display::update_actual_bounds((CA::WindowServer::Display *)v20);
    }
  }
  *(_QWORD *)&v22 = *(_QWORD *)(a3 + 44);
  *((_QWORD *)&v22 + 1) = *(_QWORD *)(*((_QWORD *)a3 + 2) + 8);
  v80 = v22;
  bzero(v103, 0x430uLL);
  CA::Render::Update::Update((CA::Render::Update *)v103, 0, 0, *((double *)a3 + 7), 0, 0, 0, 0, (const CA::Bounds *)&v80, *((_DWORD *)a3 + 17) | *((_DWORD *)a2 + 46));
  if (v103[0])
  {
    v24 = *((_DWORD *)a3 + 16);
    switch(v24)
    {
      case 3:
        v25 = operator new();
        v26 = *((_DWORD *)a3 + 19);
        *(_OWORD *)(v25 + 8) = 0u;
        *(_OWORD *)(v25 + 24) = 0u;
        *(_DWORD *)(v25 + 40) = 1065353216;
        *(_QWORD *)v25 = &off_1E158D970;
        *(_DWORD *)(v25 + 48) = v26;
        *(_BYTE *)(v25 + 52) = 0;
        break;
      case 2:
        v25 = operator new();
        *(_OWORD *)(v25 + 8) = 0u;
        *(_OWORD *)(v25 + 24) = 0u;
        *(_DWORD *)(v25 + 40) = 1065353216;
        *(_QWORD *)v25 = &off_1E158D8B0;
        break;
      case 1:
        v25 = operator new();
        *(_OWORD *)(v25 + 8) = 0u;
        *(_OWORD *)(v25 + 24) = 0u;
        *(_DWORD *)(v25 + 40) = 1065353216;
        *(_QWORD *)v25 = &off_1E158D8F0;
        *(_BYTE *)(v25 + 48) = 0;
        break;
      default:
        v25 = 0;
        break;
    }
    if (CADeviceNeedsP3ShapeTracking::once != -1)
      dispatch_once(&CADeviceNeedsP3ShapeTracking::once, &__block_literal_global_42);
    if (*((_BYTE *)a2 + 514))
      v27 = (unint64_t)(a3[4] == 0) << 7;
    else
      v27 = 0;
    v28 = v27 | (v110 | ((unint64_t)v111 << 32)) & 0xFFFFEFFF8EFFFE7BLL | ((unint64_t)CADeviceNeedsP3ShapeTracking::p3_tracking << 24) | ((unint64_t)a3[5] << 8) | ((unint64_t)a3[6] << 30);
    v106 = *(_DWORD *)a3;
    v109 = *((_DWORD *)a3 + 10);
    v29 = a3[7];
    v30 = a3[96] & 2;
    v111 = (v28 | (v29 << 44)) >> 32;
    v110 = v28 | (v30 << 28) | 0x10000004;
    v94 = 0;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v85 = 0u;
    v31 = *((_QWORD *)a3 + 10);
    if (v31 && (*(_BYTE *)(v31 + 144) & 0x10) == 0)
    {
      v32 = (_DWORD *)*((_QWORD *)a2 + 12);
      v33 = v32[44];
      v34 = v32[45];
      v35 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v32 + 840))(v32);
      v36 = *(unsigned __int8 *)(*((_QWORD *)a3 + 10) + 144);
      v37 = v35 - (v36 & (2 * v36) & 2 | (v36 >> 2) & 1) + 4;
      v38 = v37 & 3;
      v40 = -v37;
      _NF = v40 < 0;
      v41 = v40 & 3;
      if (_NF)
        v42 = v38;
      else
        v42 = -v41;
      switch(v42)
      {
        case 3:
          __asm { FMOV            V1.2D, #1.0 }
          LOBYTE(v94) = v94 & 0xE0 | 4;
          v86 = 0uLL;
          v89 = 0u;
          v90 = xmmword_18474DF40;
          v92 = xmmword_18474DF50;
          v93 = _Q1;
          v85 = xmmword_18474DF50;
          v87 = xmmword_18474DFF0;
          v88 = 0u;
          *(double *)&v91 = (double)v34;
          *((_QWORD *)&v91 + 1) = 0;
          break;
        case 2:
          CA::Transform::set_affine_rectilinear((CA::Transform *)&v85, -1.0, -1.0, (double)v33, (double)v34);
          break;
        case 1:
          __asm { FMOV            V1.2D, #1.0 }
          LOBYTE(v94) = v94 & 0xE0 | 7;
          v86 = 0uLL;
          v92 = xmmword_18474DF50;
          v93 = _Q1;
          v85 = xmmword_18474E650;
          v89 = 0u;
          v90 = xmmword_18474DF40;
          v87 = xmmword_18474DF40;
          v88 = 0u;
          *(_QWORD *)&v91 = 0;
          *((double *)&v91 + 1) = (double)v33;
          break;
        default:
          v85 = xmmword_18474DF40;
          v86 = 0u;
          v87 = xmmword_18474DF50;
          v88 = 0u;
          v89 = 0u;
          v90 = xmmword_18474DF40;
          v91 = 0u;
          v92 = xmmword_18474DF50;
          __asm { FMOV            V0.2D, #1.0 }
          v93 = _Q0;
          LOBYTE(v94) = v94 & 0xE0;
          break;
      }
      v108 = &v85;
      LODWORD(v29) = a3[7];
    }
    if ((_DWORD)v29)
    {
      v48 = *((_QWORD *)a2 + 12);
      if (v48)
      {
        v101 = 0u;
        v102 = 0u;
        v99 = 0u;
        v100 = 0u;
        v97 = 0u;
        v98 = 0u;
        v95 = 0u;
        v96 = 0u;
        CA::WindowServer::Display::reconciled_display_attributes((CA::WindowServer::Display *)&v95, v48);
        CA::Render::Update::set_display_attributes((uint64_t)v103, (float *)&v95);
      }
    }
    v78 = 8 * v7;
    if (!v25)
      goto LABEL_62;
    if (*((_QWORD *)a3 + 3))
    {
      v49 = 0;
      do
      {
        v50 = *(_DWORD *)(*((_QWORD *)a3 + 4) + 4 * v49);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v25 + 8, v50, v50);
        ++v49;
      }
      while (v49 < *((_QWORD *)a3 + 3));
    }
    else
    {
      if (*((_DWORD *)a3 + 16) != 3)
        goto LABEL_62;
      v51 = v7;
      do
      {
        v52 = v51 - 1;
        v53 = *(_DWORD *)(*(_QWORD *)&v9[8 * v51 - 8] + 16);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v25 + 8, v53, v53);
        v51 = v52;
      }
      while (v52);
    }
    v107 = v25;
LABEL_62:
    v84[0] = 0;
    v84[1] = 0;
    CA::Render::Fence::BatchWaitLock::BatchWaitLock((CA::Render::Fence::BatchWaitLock *)v84);
    do
    {
      v54 = *(_QWORD *)&v9[8 * v11 - 8];
      pthread_mutex_lock((pthread_mutex_t *)(v54 + 72));
      v55 = CA::Render::Context::root_layer_handle((CA::Render::Context *)v54);
      if (v55)
        v56 = *(CA::Render::Layer **)(v55 + 16);
      else
        v56 = 0;
      --v11;
      CA::Render::Update::add_context((CA::Render::Update *)v103, (CA::Render::Context *)v54, v56, *((const CA::Transform **)a3 + 10));
      pthread_mutex_unlock((pthread_mutex_t *)(v54 + 72));
    }
    while (v11);
    CA::Render::Fence::BatchWaitLock::invalidate((uint64_t)v84);
    CA::Render::Update::added_all_contexts((CA::Render::Update *)v103, v57, v58, v59);
    v96 = 0u;
    v97 = 0u;
    v95 = 0u;
    CA::Shape::operator=((uint64_t)&v95, &v80);
    CA::shape_union(v104, (CA::Shape **)&v95, v60);
    v61 = v105[9];
    *((_QWORD *)a3 + 11) = v105[10];
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**((_QWORD **)a3 + 2) + 24))(*((_QWORD *)a3 + 2), v61, *((unsigned int *)a3 + 18), 0, 0);
    v63 = CA::WindowServer::wrap_buffer(*((CA::WindowServer **)a2 + 12), *((CA::WindowServer::Display **)a3 + 2), v62);
    v64 = a3[96];
    if (v63)
    {
      v65 = (CA::WindowServer::Surface *)v63;
      v66 = (*(uint64_t (**)(CA::Render::Object *, _QWORD *, float *, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a2 + 432))(a2, v103, v63, &v80, (v64 >> 2) & 1, *((unsigned int *)a3 + 18));
      v8 = v78;
      if (v66)
        v68 = ~(4 * *((_BYTE *)v65 + 228)) & 0x20;
      else
        v68 = 0;
      a3[96] = a3[96] & 0xDF | v68;
      v69 = *((_QWORD *)a3 + 2);
      CA::Render::Update::render_edr_factor((CA::Render::Update *)v103, v67);
      (*(void (**)(uint64_t))(*(_QWORD *)v69 + 32))(v69);
      if (BYTE5(ca_debug_options))
        CA::WindowServer::print_layer_trees((uint64_t)v105, 1, *(double *)&v104[7]);
      if (initialized[0] != -1)
        dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
      if (*(float *)&dword_1ECDC6948)
      {
        v70 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)v65 + 160))(v65);
        if (v70)
        {
          v71 = CAIOSurfaceWriteToFileWithSuffix(v70, "snapshot-display");
          free(v71);
          if (*(float *)&dword_1ECDC6948 > 0.0)
            *(float *)&dword_1ECDC6948 = *(float *)&dword_1ECDC6948 + -1.0;
        }
      }
      if (*((_QWORD *)v65 + 9))
      {
        v72 = (void (*)(CA::WindowServer::Surface *))*((_QWORD *)v65 + 10);
        if (v72)
          v72(v65);
      }
      *((_QWORD *)v65 + 9) = 0;
      *((_QWORD *)v65 + 10) = 0;
      CA::WindowServer::Surface::unref(v65);
    }
    else
    {
      a3[96] = v64 & 0xDF;
      v8 = v78;
    }
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    CA::Render::Fence::BatchWaitLock::invalidate((uint64_t)v84);
  }
  CA::Render::Update::~Update((CA::Render::Update *)v103, v23);
  pthread_mutex_unlock(v79);
  for (i = 0; i != v7; ++i)
  {
    v74 = *(unsigned int **)&v9[8 * i];
    if (v74)
    {
      v75 = v74 + 2;
      do
      {
        v76 = __ldaxr(v75);
        v77 = v76 - 1;
      }
      while (__stlxr(v77, v75));
      if (!v77)
        (*(void (**)(unsigned int *))(*(_QWORD *)v74 + 16))(v74);
    }
  }
  if (v8 > 0x1000)
    free(v9);
}

uint64_t CA::WindowServer::Server::render_display_context_list(CA::WindowServer::Server *this, CA::Render::Object *a2, unsigned __int8 *a3, void *a4)
{
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  CA::Render::LayerNode *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  const double *v34;
  __n128 v35;
  float64x2_t v36;
  uint64_t v37;
  CA::Render::Layer *v38;
  CA::Render::LayerNode *v39;
  const CA::Shape *v40;
  int64x2_t v41;
  const CA::Shape *v42;
  uint64_t v43;
  CA::Render::RenderTarget *v44;
  float *v45;
  CA::WindowServer::Surface *v46;
  const CA::Render::LayerNode *v47;
  char v48;
  uint64_t v49;
  __IOSurface *v50;
  char *v51;
  void (*v52)(CA::WindowServer::Surface *);
  __int128 v53;
  _OWORD v54[8];
  float64x2_t v55[9];
  _QWORD v56[2];
  _QWORD v57[2];
  CA::Shape *v58[25];
  _QWORD v59[12];
  int v60;
  unsigned int v61;
  unsigned __int16 v62;
  CA::Shape *v63[2];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  result = CA::WindowServer::display_name_matches((CFTypeRef *)a2, *((CA::WindowServer::Server **)a3 + 1), (const __CFString *)((a3[88] >> 4) & 1));
  if ((_DWORD)result)
  {
    v7 = *((_QWORD *)a3 + 3);
    a3[88] |= 0x20u;
    if (v7)
    {
      pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 24));
      *(_QWORD *)&v8 = *((_QWORD *)a3 + 5);
      *((_QWORD *)&v8 + 1) = *(_QWORD *)(*((_QWORD *)a3 + 4) + 8);
      v53 = v8;
      bzero(v57, 0x430uLL);
      CA::Render::Update::Update((CA::Render::Update *)v57, 0, 0, *((double *)a3 + 6), 0, 0, 0, 0, (const CA::Bounds *)&v53, *((_DWORD *)a3 + 14) | *((_DWORD *)a2 + 46));
      if (v57[0])
      {
        if (CADeviceNeedsP3ShapeTracking::once != -1)
          dispatch_once(&CADeviceNeedsP3ShapeTracking::once, &__block_literal_global_42);
        if (*((_BYTE *)a2 + 514))
          v10 = (unint64_t)(a3[4] == 0) << 7;
        else
          v10 = 0;
        v11 = v10 | (v61 | ((unint64_t)v62 << 32)) & 0xFFFFEFFFDEFFFE7FLL | ((unint64_t)CADeviceNeedsP3ShapeTracking::p3_tracking << 24) | ((unint64_t)a3[5] << 8);
        v12 = a3[7];
        v13 = v11 | (v12 << 44);
        v14 = v13 | ((unint64_t)(a3[88] & 2) << 28);
        v62 = WORD2(v13);
        v61 = v14;
        if (v12)
        {
          v15 = *((_QWORD *)a2 + 12);
          if (v15)
          {
            v69 = 0u;
            v70 = 0u;
            v67 = 0u;
            v68 = 0u;
            v65 = 0u;
            v66 = 0u;
            *(_OWORD *)v63 = 0u;
            v64 = 0u;
            CA::WindowServer::Display::reconciled_display_attributes((CA::WindowServer::Display *)v63, v15);
            CA::Render::Update::set_display_attributes((uint64_t)v57, (float *)v63);
            v14 = v61 | ((unint64_t)v62 << 32);
          }
        }
        v16 = *((_QWORD *)a3 + 3);
        v17 = v14 & 0xFFFFAFFF7FFBLL | ((unint64_t)a3[6] << 30);
        v62 = WORD2(v17);
        v61 = v17 | 0x10008004;
        v60 = *(_DWORD *)a3;
        v19 = *((_QWORD *)a3 + 8) != 1
           || (v18 = *((_QWORD *)a3 + 9), (*(_BYTE *)(v18 + 144) & 0x1F) != 0)
           || *(double *)(v18 + 96) != 0.0
           || *(double *)(v18 + 104) != 0.0;
        v56[0] = 0;
        v56[1] = 0;
        CA::Render::Fence::BatchWaitLock::BatchWaitLock((CA::Render::Fence::BatchWaitLock *)v56);
        v20 = *((_QWORD *)a3 + 2);
        if (v20)
        {
          v21 = v20 - 1;
          do
          {
            v22 = *(_QWORD *)(v16 + 8 * v21);
            pthread_mutex_lock((pthread_mutex_t *)(v22 + 72));
            v23 = CA::Render::Context::root_layer_handle((CA::Render::Context *)v22);
            if (v23 && *(_QWORD *)(v23 + 16))
            {
              memset(v54, 0, sizeof(v54));
              v24 = CA::Render::Context::root_layer_handle((CA::Render::Context *)v22);
              if (v24)
                v24 = *(_QWORD *)(v24 + 16);
              CA::Render::Layer::compute_frame_transform(v24, 0, (CA::Mat4Impl *)v54, 0);
              v72 = 0;
              v70 = 0u;
              v71 = 0u;
              v68 = 0u;
              v69 = 0u;
              v66 = 0u;
              v67 = 0u;
              v64 = 0u;
              v65 = 0u;
              *(_OWORD *)v63 = 0u;
              if (v19)
              {
                if (*((_QWORD *)a3 + 8) == 1)
                  v25 = 0;
                else
                  v25 = v21;
                v26 = *((_QWORD *)a3 + 9) + 152 * v25;
                v27 = *(_OWORD *)(v26 + 16);
                v28 = *(_OWORD *)(v26 + 32);
                v29 = *(_OWORD *)(v26 + 48);
                *(_OWORD *)v63 = *(_OWORD *)v26;
                v64 = v27;
                v65 = v28;
                v66 = v29;
                v30 = *(_OWORD *)(v26 + 80);
                v31 = *(_OWORD *)(v26 + 96);
                v32 = *(_OWORD *)(v26 + 112);
                v67 = *(_OWORD *)(v26 + 64);
                v68 = v30;
                v69 = v31;
                v70 = v32;
                v71 = *(_OWORD *)(v26 + 128);
                LOBYTE(v72) = *(_BYTE *)(v26 + 144) & 7;
                LOBYTE(v72) = *(_BYTE *)(v26 + 144) & 8 | v72;
                LOBYTE(v72) = v72 | *(_BYTE *)(v26 + 144) & 0x10;
                CA::Transform::set((uint64_t)v55, (CA::Mat4Impl *)v54, 1);
                v35.n128_f64[0] = CA::Transform::concat_left((CA::Transform *)v63, v55, v33, v34);
              }
              else
              {
                v35 = CA::Transform::set((uint64_t)v63, (CA::Mat4Impl *)v54, 1);
              }
              if ((a3[88] & 4) != 0)
              {
                v35.n128_u32[0] = *(_DWORD *)(*((_QWORD *)a3 + 4) + 12);
                v36 = CA::Transform::translate((CA::Transform *)v63, 0.0, (double)v35.n128_u64[0], 0.0);
                v36.f64[0] = 1.0;
                CA::Transform::scale((float64x2_t *)v63, v36, -1.0, 1.0);
              }
              v37 = CA::Render::Context::root_layer_handle((CA::Render::Context *)v22);
              if (v37)
                v38 = *(CA::Render::Layer **)(v37 + 16);
              else
                v38 = 0;
              CA::Render::Update::add_context((CA::Render::Update *)v57, (CA::Render::Context *)v22, v38, (const CA::Transform *)v63);
            }
            else
            {
              CA::Render::Update::add_context((CA::Render::Update *)v57, (CA::Render::Context *)v22);
            }
            pthread_mutex_unlock((pthread_mutex_t *)(v22 + 72));
            --v21;
          }
          while (v21 != -1);
        }
        CA::Render::Fence::BatchWaitLock::invalidate((uint64_t)v56);
        CA::Render::Update::added_all_contexts((CA::Render::Update *)v57, v39, v40, v41);
        CA::Render::Fence::BatchWaitLock::invalidate((uint64_t)v56);
        v64 = 0u;
        v65 = 0u;
        *(_OWORD *)v63 = 0u;
        CA::Shape::operator=((uint64_t)v63, &v53);
        CA::shape_union(v58, v63, v42);
        v43 = v59[9];
        *((_QWORD *)a3 + 10) = v59[10];
        (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**((_QWORD **)a3 + 4) + 24))(*((_QWORD *)a3 + 4), v43, *((unsigned int *)a3 + 15), 0, 0);
        v45 = CA::WindowServer::wrap_buffer(*((CA::WindowServer **)a2 + 12), *((CA::WindowServer::Display **)a3 + 4), v44);
        if (v45)
        {
          v46 = (CA::WindowServer::Surface *)v45;
          if ((*(unsigned int (**)(CA::Render::Object *, _QWORD *, float *, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a2 + 432))(a2, v57, v45, &v53, a3[88] & 1, *((unsigned int *)a3 + 15)))
          {
            v48 = ~(4 * *((_BYTE *)v46 + 228)) & 0x20;
          }
          else
          {
            v48 = 0;
          }
          a3[88] = a3[88] & 0xDF | v48;
          v49 = *((_QWORD *)a3 + 4);
          CA::Render::Update::render_edr_factor((CA::Render::Update *)v57, v47);
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 32))(v49);
          if (BYTE5(ca_debug_options))
            CA::WindowServer::print_layer_trees((uint64_t)v59, 1, *(double *)&v58[7]);
          if (initialized[0] != -1)
            dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
          if (*(float *)&dword_1ECDC6948)
          {
            v50 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)v46 + 160))(v46);
            if (v50)
            {
              v51 = CAIOSurfaceWriteToFileWithSuffix(v50, "snapshot-contexts");
              free(v51);
              if (*(float *)&dword_1ECDC6948 > 0.0)
                *(float *)&dword_1ECDC6948 = *(float *)&dword_1ECDC6948 + -1.0;
            }
          }
          if (*((_QWORD *)v46 + 9))
          {
            v52 = (void (*)(CA::WindowServer::Surface *))*((_QWORD *)v46 + 10);
            if (v52)
              v52(v46);
          }
          *((_QWORD *)v46 + 9) = 0;
          *((_QWORD *)v46 + 10) = 0;
          CA::WindowServer::Surface::unref(v46);
        }
        else
        {
          a3[88] &= ~0x20u;
        }
      }
      CA::Render::Update::~Update((CA::Render::Update *)v57, v9);
      return pthread_mutex_unlock((pthread_mutex_t *)((char *)a2 + 24));
    }
  }
  return result;
}

_DWORD *CA::WindowServer::Server::get_display_edr_state(CA::WindowServer::Server *this, CA::Render::Object *a2, _QWORD *a3, void *a4)
{
  uint64_t v4;
  _DWORD *result;

  v4 = *((_QWORD *)a2 + 12);
  if (*((_DWORD *)a3 + 1) == *(_DWORD *)(v4 + 24))
  {
    *(_BYTE *)a3 = 1;
    result = CA::WindowServer::Display::initialize_edr_state((_DWORD *)v4);
    a3[1] = *(_QWORD *)(v4 + 680);
  }
  return result;
}

double CA::WindowServer::Server::get_display_logical_bounds(CA::WindowServer::Server *this, CA::Render::Object *a2, char *a3, void *a4)
{
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  int64x2_t v9;
  double result;

  v4 = *((_QWORD *)a2 + 12);
  if (*((_DWORD *)a3 + 1) == *(_DWORD *)(v4 + 24))
  {
    v6 = *(_DWORD *)(v4 + 192);
    v5 = *(_DWORD *)(v4 + 196);
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      *a3 = 1;
      v8 = *(_QWORD *)(v4 + 184);
      v9.i64[0] = (int)v8;
      v9.i64[1] = SHIDWORD(v8);
      *(float64x2_t *)(a3 + 8) = vcvtq_f64_s64(v9);
      result = (double)v6;
      *((double *)a3 + 3) = (double)v6;
      *((double *)a3 + 4) = (double)v5;
    }
  }
  return result;
}

void CA::WindowServer::Server::get_display_auto_luminance_boost(CA::WindowServer::Server *this, CA::Render::Object *a2, float *a3, void *a4)
{
  _DWORD *v4;

  v4 = (_DWORD *)*((_QWORD *)a2 + 12);
  if (*((_DWORD *)a3 + 1) == v4[6])
  {
    *(_BYTE *)a3 = 1;
    a3[2] = (*(float (**)(_DWORD *))(*(_QWORD *)v4 + 1080))(v4);
  }
}

void CA::WindowServer::Server::set_display_properties(CA::WindowServer::Server *this, CA::Render::Object *a2, _QWORD *a3, void *a4)
{
  uint64_t v5;
  int v6;
  char v7;
  char v8;
  int v9;
  uint64_t v10;
  int v11;
  mach_port_name_t v12;
  int v13;
  __CFRunLoop *v14;
  __CFRunLoop *v15;
  _QWORD block[6];
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  mach_port_name_t v22;
  char v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a3[1];
  v6 = *((_DWORD *)a3 + 4);
  v7 = *((_BYTE *)a3 + 20);
  v8 = *((_BYTE *)a3 + 40);
  v9 = *((_DWORD *)a3 + 6);
  v10 = *(_QWORD *)((char *)a3 + 28);
  v11 = *((_DWORD *)a3 + 9);
  v13 = *((_DWORD *)a3 + 11);
  v12 = *((_DWORD *)a3 + 12);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN2CA12WindowServer6Server22set_display_propertiesEPNS_6Render6ObjectEPvS5__block_invoke;
  block[3] = &__block_descriptor_tmp_58_13619;
  v17 = v13;
  v18 = v9;
  block[4] = a2;
  block[5] = v5;
  v19 = v10;
  v20 = v11;
  v21 = v6;
  v23 = v7;
  v24 = v8;
  v22 = v12;
  if (*(_DWORD *)a3 == *(_DWORD *)(*((_QWORD *)a2 + 12) + 24) && !mach_port_mod_refs(*MEMORY[0x1E0C83DA0], v12, 0, 1))
  {
    v14 = (__CFRunLoop *)(*(uint64_t (**)(CA::Render::Object *))(*(_QWORD *)a2 + 384))(a2);
    if (v14)
    {
      v15 = v14;
      CFRunLoopPerformBlock(v14, (CFTypeRef)*MEMORY[0x1E0C9B280], block);
      CFRunLoopWakeUp(v15);
    }
    else
    {
      ___ZN2CA12WindowServer6Server22set_display_propertiesEPNS_6Render6ObjectEPvS5__block_invoke((uint64_t)block);
    }
  }
}

uint64_t CA::WindowServer::Server::set_display_user_prefs(CA::WindowServer::Server *this, CA::Render::Object *a2, _DWORD *a3, void *a4)
{
  uint64_t result;

  result = *((_QWORD *)a2 + 12);
  if (a3[1] == *(_DWORD *)(result + 24))
  {
    result = CA::WindowServer::Display::set_user_preferences(result, a3[2] != 0, a3[3], 0);
    *(_BYTE *)a3 = 1;
  }
  return result;
}

void CA::WindowServer::Server::set_display_latency(CA::WindowServer::Server *this, CA::Render::Object *a2, void *a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __CFRunLoop *v9;
  char *v10;
  const void *v11;
  NSObject *v12;
  _QWORD v13[8];
  uint8_t buf[8];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a3 + 1) == *(_DWORD *)(*((_QWORD *)a2 + 12) + 24))
  {
    v6 = *((_QWORD *)a3 + 9);
    v7 = *((_QWORD *)a3 + 10);
    v8 = (*(uint64_t (**)(CA::Render::Object *))(*(_QWORD *)a2 + 384))(a2);
    if (v8)
    {
      v9 = (__CFRunLoop *)v8;
      v10 = strndup((const char *)a3 + 8, 0x40uLL);
      v11 = (const void *)*MEMORY[0x1E0C9B280];
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 0x40000000;
      v13[2] = ___ZN2CA12WindowServer6Server19set_display_latencyEPNS_6Render6ObjectEPvS5__block_invoke;
      v13[3] = &__block_descriptor_tmp_67;
      v13[4] = a2;
      v13[5] = v10;
      v13[6] = v6;
      v13[7] = v7;
      CFRunLoopPerformBlock(v9, v11, v13);
      CFRunLoopWakeUp(v9);
      *(_BYTE *)a3 = 1;
    }
    else if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v12 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_ERROR, "No display runloop! Ignoring latency update.", buf, 2u);
      }
    }
  }
}

uint64_t CA::WindowServer::Server::purge_server(CA::WindowServer::Server *this, CA::Render::Object *a2, void *a3, void *a4)
{
  pthread_mutex_t *v5;
  uint64_t v6;
  double v7;

  v5 = (pthread_mutex_t *)((char *)a2 + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 24));
  v6 = mach_absolute_time();
  v7 = CATimeWithHostTime(v6);
  CA::Render::collect((CA::Render *)1, v7);
  (*(void (**)(CA::Render::Object *))(*(_QWORD *)a2 + 456))(a2);
  return pthread_mutex_unlock(v5);
}

uint64_t CA::WindowServer::Server::set_ax_matrix(CA::WindowServer::Server *this, CA::Render::Object *a2, float *a3, void *a4)
{
  uint64_t v6;
  int64x2_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  CA::WindowServer::Server::set_accessibility_color_matrix(a2, a3, a3[9]);
  CA::WindowServer::Server::invalidate((os_unfair_lock_s *)a2, *(const CA::Shape **)(*((_QWORD *)a2 + 12) + 216));
  v6 = 0;
  v7 = vdupq_n_s64(0x10000uLL);
  return (*(uint64_t (**)(CA::Render::Object *, uint64_t *, double))(*(_QWORD *)a2 + 184))(a2, &v6, 0.0);
}

void CA::WindowServer::Server::get_debug_log(CA::WindowServer::Server *this, CA::Render::Object *a2, unsigned int *a3, void *a4)
{
  unsigned int *v4;
  uint64_t v6;
  void *v7;
  const __CFString *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t i;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  pid_t v26;
  NSObject *v27;
  uint64_t v28;
  unsigned int v29;
  float v30;
  unsigned int *v31;
  unsigned int v32;
  pid_t v33;
  uint64_t v35;
  unsigned int v36;
  int v37;
  double v38;
  _DWORD *v39;
  __int16 v40;
  const char *v41;
  const char *v42;
  const char *v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  unsigned int **v56;
  unsigned int *v57;
  void *v58;
  CA::Render::Context **v59;
  const char *CString;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  pid_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  CA::Render::Context *v84;
  uint64_t v85;
  uint64_t v86;
  const __CFString *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  size_t v126;
  char *v127;
  uint64_t v128;
  char v129;
  unsigned int *v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t n;
  uint64_t v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  unint64_t v157;
  uint64_t v158;
  double v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  double v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  double v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  double v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  const __CFString *v201;
  uint64_t ID;
  unint64_t v203;
  double v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t k;
  const __CFString *v213;
  uint64_t v214;
  unint64_t v215;
  double v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t m;
  const __CFString *v225;
  uint64_t v226;
  unint64_t v227;
  double v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  __int128 v235;
  unint64_t v236;
  void *v237;
  __int128 v238;
  os_log_t v239;
  os_unfair_lock_t v240;
  const __CFString *v241;
  unsigned int *j;
  uint64_t v243;
  int v244[8];
  _QWORD v245[8];
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  int v258[4];
  __int128 v259;
  uint64_t v260;

  v4 = a3;
  v260 = *MEMORY[0x1E0C80C00];
  v6 = MEMORY[0x186DBE2E4](this, a2, a3, a4);
  v7 = (void *)v6;
  v8 = (const __CFString *)*v4;
  v9 = *((_QWORD *)v4 + 2);
  v243 = v9;
  switch((int)v8)
  {
    case 0:
      os_unfair_lock_lock((os_unfair_lock_t)a2 + 4);
      v52 = *((_QWORD *)a2 + 16);
      if (v52)
      {
        v53 = 0;
        v54 = 0;
        while (2)
        {
          v55 = *((_QWORD *)a2 + 14);
          v56 = (unsigned int **)(v55 + 16 * v53);
          while (1)
          {
            v57 = *v56;
            if ((*((_BYTE *)*v56 + 14) & 2) == 0)
              break;
            ++v53;
            v56 += 2;
            if (v53 >= v52)
            {
              if ((v54 & 1) == 0)
                goto LABEL_118;
              goto LABEL_117;
            }
          }
          v58 = v7;
          v59 = (CA::Render::Context **)(v55 + 16 * v53);
          if ((v54 & 1) == 0)
          {
            v256 = 0u;
            v257 = 0u;
            v254 = 0u;
            v255 = 0u;
            v252 = 0u;
            v253 = 0u;
            v250 = 0u;
            v251 = 0u;
            v248 = 0u;
            v249 = 0u;
            v246 = 0u;
            v247 = 0u;
            memset(v245, 0, sizeof(v245));
            CString = CA_CFStringGetCString(*((const __CFString **)a2 + 13), (char *)v245, 256);
            x_stream_printf(v243, "%s display%s:\n", v61, v62, v63, v64, v65, v66, (uint64_t)CString);
            v57 = (unsigned int *)*v59;
          }
          v67 = v57[4];
          v68 = v57 + 57;
          if (!atomic_load(v57 + 57))
          {
            if (v57[63])
              v70 = 0;
            else
              v70 = getpid();
            while (!__ldaxr(v68))
            {
              if (!__stlxr(v70, v68))
                goto LABEL_94;
            }
            __clrex();
          }
LABEL_94:
          CA::Render::Context::process_path(*v59);
          x_stream_printf(v243, "  %x: level %g; pid %d [%s]", v72, v73, v74, v75, v76, v77, v67);
          v84 = *v59;
          if ((*((_WORD *)*v59 + 276) & 4) != 0)
          {
            x_stream_write(v243, " (secure)", 9uLL);
            v84 = *v59;
          }
          if (*((_DWORD *)v84 + 88))
          {
            x_stream_write(v243, " (visible)", 0xAuLL);
            v84 = *v59;
          }
          if ((*((_WORD *)v84 + 276) & 0x800) != 0)
          {
            x_stream_write(v243, " (decode-error)", 0xFuLL);
            v84 = *v59;
          }
          v85 = *((_QWORD *)v84 + 30);
          if (v85)
            x_stream_printf(v243, " \"%s\"", v78, v79, v80, v81, v82, v83, v85 + 28);
          v54 = 1;
          x_stream_write(v243, "\n", 1uLL);
          v52 = *((_QWORD *)a2 + 16);
          ++v53;
          v7 = v58;
          if (v53 < v52)
            continue;
          break;
        }
LABEL_117:
        x_stream_write(v243, "\n", 1uLL);
      }
LABEL_118:
      os_unfair_lock_unlock((os_unfair_lock_t)a2 + 4);
      break;
    case 1:
    case 9:
    case 10:
    case 14:
      if ((_DWORD)v8 == 9)
        v10 = 6;
      else
        v10 = 4;
      if ((_DWORD)v8 == 14)
        v10 = 5;
      v241 = v8;
      if ((_DWORD)v8 == 10)
        v10 = 0;
      LODWORD(v240) = v10;
      os_unfair_lock_lock((os_unfair_lock_t)a2 + 4);
      v12 = *((_QWORD *)a2 + 16);
      v237 = v7;
      if (v12)
      {
        if ((unint64_t)(8 * v12) > 0x1000)
        {
          v13 = (char *)malloc_type_malloc(8 * v12, 0x36F41934uLL);
        }
        else
        {
          MEMORY[0x1E0C80A78](v11);
          v13 = (char *)&v235 - ((8 * v12 + 15) & 0xFFFFFFFFFFFFFFF0);
          bzero(v13, 8 * v12);
        }
        for (i = 0; i != v12; ++i)
        {
          v15 = *(_QWORD *)(*((_QWORD *)a2 + 14) + 16 * i);
          if (v15)
          {
            v16 = (unsigned int *)(v15 + 8);
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 + 1, v16));
            if (!v17)
            {
              do
              {
                v15 = 0;
                v18 = __ldaxr(v16);
              }
              while (__stlxr(v18 - 1, v16));
            }
          }
          *(_QWORD *)&v13[8 * i] = v15;
        }
        v236 = 8 * v12;
      }
      else
      {
        v13 = 0;
        v236 = 0;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)a2 + 4);
      x_stream_push(v9);
      if (v12)
      {
        v20 = 0;
        *(_QWORD *)&v19 = 67109376;
        v235 = v19;
        *(_QWORD *)&v19 = 67110914;
        v238 = v19;
        j = v4;
        do
        {
          v21 = *(_QWORD *)&v13[8 * v20];
          if ((*(_BYTE *)(v21 + 14) & 2) == 0)
          {
            v22 = *((_QWORD *)v4 + 1);
            if (!v22 || v22 == *(_DWORD *)(v21 + 16))
            {
              pthread_mutex_lock((pthread_mutex_t *)(v21 + 72));
              if (x_log_hook_p())
              {
                v23 = *(_QWORD *)&v13[8 * v20];
                v24 = (unsigned int *)(v23 + 228);
                if (!atomic_load((unsigned int *)(v23 + 228)))
                {
                  if (*(_DWORD *)(v23 + 252))
                    v26 = 0;
                  else
                    v26 = getpid();
                  while (!__ldaxr(v24))
                  {
                    if (!__stlxr(v26, v24))
                      goto LABEL_41;
                  }
                  __clrex();
                }
LABEL_41:
                CA::Render::Context::process_path(*(CA::Render::Context **)&v13[8 * v20]);
                v35 = mach_absolute_time();
                CATimeWithHostTime(v35);
                v4 = j;
                x_log_();
                v9 = v243;
              }
              else
              {
                v27 = x_log_category_windowserver;
                if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
                {
                  v239 = v27;
                  v28 = *(_QWORD *)&v13[8 * v20];
                  v29 = *(_DWORD *)(v28 + 16);
                  v30 = *(float *)(v28 + 192);
                  v31 = (unsigned int *)(v28 + 228);
                  v32 = atomic_load((unsigned int *)(v28 + 228));
                  if (!v32)
                  {
                    if (*(_DWORD *)(v28 + 252))
                      v33 = 0;
                    else
                      v33 = getpid();
                    while (1)
                    {
                      v36 = __ldaxr(v31);
                      if (v36)
                        break;
                      if (!__stlxr(v33, v31))
                      {
                        v37 = 1;
                        goto LABEL_47;
                      }
                    }
                    v37 = 0;
                    __clrex();
LABEL_47:
                    if (v37)
                      v32 = v33;
                    else
                      v32 = v36;
                  }
                  v38 = v30;
                  v39 = CA::Render::Context::process_path(*(CA::Render::Context **)&v13[8 * v20]) + 7;
                  v40 = *(_WORD *)(*(_QWORD *)&v13[8 * v20] + 552);
                  if ((v40 & 4) != 0)
                    v41 = "(secure) ";
                  else
                    v41 = "";
                  if ((v40 & 0x10) != 0)
                    v42 = "(start security analysis) ";
                  else
                    v42 = "";
                  if ((v40 & 0x20) != 0)
                    v43 = "(stop security analysis) ";
                  else
                    v43 = "";
                  v44 = mach_absolute_time();
                  v45 = CATimeWithHostTime(v44);
                  v245[0] = __PAIR64__(v29, v238);
                  LOWORD(v245[1]) = 2048;
                  *(double *)((char *)&v245[1] + 2) = v38;
                  WORD1(v245[2]) = 1024;
                  HIDWORD(v245[2]) = v32;
                  LOWORD(v245[3]) = 2080;
                  *(_QWORD *)((char *)&v245[3] + 2) = v39;
                  WORD1(v245[4]) = 2080;
                  *(_QWORD *)((char *)&v245[4] + 4) = v41;
                  WORD2(v245[5]) = 2080;
                  *(_QWORD *)((char *)&v245[5] + 6) = v42;
                  HIWORD(v245[6]) = 2080;
                  v245[7] = v43;
                  LOWORD(v246) = 2048;
                  *(double *)((char *)&v246 + 2) = v45;
                  _os_log_impl(&dword_184457000, v239, OS_LOG_TYPE_DEFAULT, "== context %x; level %g; pid %d [%s] %s%s%sat time %f ==\n\n",
                    (uint8_t *)v245,
                    0x4Au);
                  v4 = j;
                  v9 = v243;
                }
              }
              v46 = CA::Render::Context::root_layer_handle(*(CA::Render::Context **)&v13[8 * v20]);
              if (v46 && (v47 = *(_QWORD *)(v46 + 16)) != 0)
              {
                if ((_DWORD)v241 == 14)
                {
                  v258[0] = 0;
                  v244[0] = 0;
                  CA::Render::Layer::count_layers(v47, v258, v244, 0);
                  if (x_log_hook_p())
                  {
                    x_log_();
                  }
                  else
                  {
                    v48 = x_log_category_windowserver;
                    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
                    {
                      v245[0] = __PAIR64__(v258[0], v235);
                      LOWORD(v245[1]) = 1024;
                      *(_DWORD *)((char *)&v245[1] + 2) = v244[0];
                      _os_log_impl(&dword_184457000, v48, OS_LOG_TYPE_DEFAULT, "\n*** Total Layers: %d, Hidden/Culled Layers: %d ***\n\n", (uint8_t *)v245, 0xEu);
                    }
                  }
                }
                (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v47 + 40))(v47, 0, v240);
              }
              else
              {
                x_stream_write(v9, "  <null>\n", 9uLL);
              }
              x_stream_write(v9, "\n\n", 2uLL);
              pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)&v13[8 * v20] + 72));
              v21 = *(_QWORD *)&v13[8 * v20];
            }
          }
          v49 = (unsigned int *)(v21 + 8);
          do
          {
            v50 = __ldaxr(v49);
            v51 = v50 - 1;
          }
          while (__stlxr(v51, v49));
          if (!v51)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
          ++v20;
        }
        while (v20 != v12);
      }
      if (v236 > 0x1000)
        free(v13);
      x_stream_pop_(v9);
      v7 = v237;
      break;
    case 5:
      (*(void (**)(CA::Render::Object *, uint64_t))(*(_QWORD *)a2 + 88))(a2, v9);
      break;
    case 11:
      v256 = 0u;
      v257 = 0u;
      v254 = 0u;
      v255 = 0u;
      v252 = 0u;
      v253 = 0u;
      v250 = 0u;
      v251 = 0u;
      v248 = 0u;
      v249 = 0u;
      v246 = 0u;
      v247 = 0u;
      memset(v245, 0, sizeof(v245));
      memset(v244, 0, sizeof(v244));
      if ((*(_DWORD *)(*((_QWORD *)a2 + 12) + 624) & 0x40) != 0)
      {
        v237 = (void *)v6;
        v86 = mach_continuous_time();
        v87 = CACreateDateStringFromHostContinuousTime(v86, 0);
        CA_CFStringGetCString(v87, (char *)v244, 32);
        v88 = CA_CFStringGetCString(*((const __CFString **)a2 + 13), (char *)v245, 256);
        CATimeWithHostTime(v86);
        x_stream_printf(v9, "== %s display @ t %f (%s) ==\n", v89, v90, v91, v92, v93, v94, (uint64_t)v88);
        v95 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 320);
        if (v95)
        {
          v240 = (os_unfair_lock_t)(v95 + 8);
          os_unfair_lock_lock((os_unfair_lock_t)(v95 + 8));
          x_stream_printf(v9, "Server-side flipbook %p\n", v96, v97, v98, v99, v100, v101, v95);
          x_stream_printf(v9, "  State: %s\n", v102, v103, v104, v105, v106, v107, (uint64_t)CA::WindowServer::FlipBook::transition_to_state(CA::WindowServer::FlipBookState,BOOL)::state_to_name[*(_BYTE *)(v95 + 24) & 3]);
          x_stream_printf(v9, "  Maximum size: %u\n", v108, v109, v110, v111, v112, v113, *(_QWORD *)(v95 + 64));
          v120 = *(_QWORD *)(v95 + 80);
          v121 = *(_QWORD *)(v95 + 88);
          if (v120 == v121)
          {
            v122 = 0;
          }
          else
          {
            LODWORD(v122) = 0;
            v123 = *(_QWORD *)(v95 + 80);
            do
            {
              LODWORD(v122) = v122 + *(_DWORD *)(v123 + 88);
              v123 += 104;
            }
            while (v123 != v121);
            v122 = (int)v122;
          }
          v146 = *(_QWORD *)(v95 + 128);
          v147 = *(_QWORD *)(v95 + 136);
          if (v146 == v147)
          {
            v149 = 0;
          }
          else
          {
            v148 = 0;
            do
            {
              v148 += *(_DWORD *)(v146 + 88);
              v146 += 104;
            }
            while (v146 != v147);
            v149 = v148;
          }
          v150 = *(_QWORD *)(v95 + 152);
          v151 = *(_QWORD *)(v95 + 160);
          if (v150 == v151)
          {
            v153 = 0;
          }
          else
          {
            v152 = 0;
            do
            {
              v152 += *(_DWORD *)(v150 + 88);
              v150 += 104;
            }
            while (v150 != v151);
            v153 = v152;
          }
          v154 = *(_QWORD *)(v95 + 104);
          v155 = *(_QWORD *)(v95 + 112);
          v241 = v87;
          if (v154 == v155)
          {
            v157 = 0;
          }
          else
          {
            v156 = 0;
            do
            {
              v156 += *(_DWORD *)(v154 + 88);
              v154 += 104;
            }
            while (v154 != v155);
            v157 = v156;
          }
          v158 = 0x4EC4EC4EC4EC4EC5 * ((v121 - v120) >> 3);
          if (v122 >= 0x400)
          {
            v159 = 1.0;
            do
              v159 = v159 * 0.0009765625;
            while (v159 * (double)v122 >= 1024.0);
          }
          x_stream_printf(v9, "  Enqueued size: %u (%.2lf %s)\n", v114, v115, v116, v117, v118, v119, v158);
          if (v153 >= 0x400)
          {
            v166 = 1.0;
            do
              v166 = v166 * 0.0009765625;
            while (v166 * (double)v153 >= 1024.0);
          }
          x_stream_printf(v9, "  Suppressed size: %u (%.2lf %s)\n", v160, v161, v162, v163, v164, v165, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v95 + 160) - *(_QWORD *)(v95 + 152)) >> 3));
          if (v149 >= 0x400)
          {
            v173 = 1.0;
            do
              v173 = v173 * 0.0009765625;
            while (v173 * (double)v149 >= 1024.0);
          }
          x_stream_printf(v9, "  Swapped size: %u (%.2lf %s)\n", v167, v168, v169, v170, v171, v172, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v95 + 136) - *(_QWORD *)(v95 + 128)) >> 3));
          if (v157 >= 0x400)
          {
            v180 = 1.0;
            do
              v180 = v180 * 0.0009765625;
            while (v180 * (double)v157 >= 1024.0);
          }
          x_stream_printf(v9, "  Free size: %u (%.2lf %s)\n", v174, v175, v176, v177, v178, v179, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v95 + 112) - *(_QWORD *)(v95 + 104)) >> 3));
          x_stream_printf(v9, "  Context ID: 0x%x\n", v181, v182, v183, v184, v185, v186, *(unsigned int *)(v95 + 48));
          x_stream_printf(v9, "  Total frames rendered this activation: %u\n", v187, v188, v189, v190, v191, v192, *(_QWORD *)(v95 + 40));
          x_stream_printf(v9, "  Total frames rendered: %u\n", v193, v194, v195, v196, v197, v198, *(_QWORD *)(v95 + 32));
          *(_OWORD *)v258 = 0u;
          v259 = 0u;
          v199 = *(_QWORD *)(v95 + 80);
          v200 = *(_QWORD *)(v95 + 88);
          for (j = (unsigned int *)v95; v199 != v200; v199 += 104)
          {
            v201 = CACreateDateStringFromHostContinuousTime(*(_QWORD *)(v199 + 40), 0);
            CA_CFStringGetCString(v201, (char *)v258, 32);
            ID = IOSurfaceGetID(*(IOSurfaceRef *)v199);
            v203 = *(_QWORD *)(v199 + 88);
            if (v203 >= 0x400)
            {
              v204 = 1.0;
              do
                v204 = v204 * 0.0009765625;
              while (v204 * (double)v203 >= 1024.0);
            }
            CATimeWithHostTime(*(_QWORD *)(v199 + 40));
            x_stream_printf(v243, "    Surface 0x%x (%.2lf %s) @ %f (%s), seed %u enqueued", v205, v206, v207, v208, v209, v210, ID);
            if (v201)
              CFRelease(v201);
          }
          v211 = *((_QWORD *)j + 19);
          for (k = *((_QWORD *)j + 20); v211 != k; v211 += 104)
          {
            v213 = CACreateDateStringFromHostContinuousTime(*(_QWORD *)(v211 + 40), 0);
            CA_CFStringGetCString(v213, (char *)v258, 32);
            v214 = IOSurfaceGetID(*(IOSurfaceRef *)v211);
            v215 = *(_QWORD *)(v211 + 88);
            if (v215 >= 0x400)
            {
              v216 = 1.0;
              do
                v216 = v216 * 0.0009765625;
              while (v216 * (double)v215 >= 1024.0);
            }
            CATimeWithHostTime(*(_QWORD *)(v211 + 40));
            x_stream_printf(v243, "    Surface 0x%x (%.2lf %s) @ %f (%s), seed %u suppressed\n", v217, v218, v219, v220, v221, v222, v214);
            if (v213)
              CFRelease(v213);
          }
          v223 = *((_QWORD *)j + 16);
          for (m = *((_QWORD *)j + 17); v223 != m; v223 += 104)
          {
            v225 = CACreateDateStringFromHostContinuousTime(*(_QWORD *)(v223 + 40), 0);
            CA_CFStringGetCString(v225, (char *)v258, 32);
            v226 = IOSurfaceGetID(*(IOSurfaceRef *)v223);
            v227 = *(_QWORD *)(v223 + 88);
            if (v227 >= 0x400)
            {
              v228 = 1.0;
              do
                v228 = v228 * 0.0009765625;
              while (v228 * (double)v227 >= 1024.0);
            }
            CATimeWithHostTime(*(_QWORD *)(v223 + 40));
            x_stream_printf(v243, "    Surface 0x%x (%.2lf %s) @ %f (%s), seed %u, swap %u\n", v229, v230, v231, v232, v233, v234, v226);
            if (v225)
              CFRelease(v225);
          }
          v9 = v243;
          x_stream_write(v243, "\n", 1uLL);
          os_unfair_lock_unlock(v240);
          v87 = v241;
        }
        x_stream_write(v9, "\n", 1uLL);
        v7 = v237;
        if (v87)
          CFRelease(v87);
      }
      break;
    case 12:
      os_unfair_lock_lock((os_unfair_lock_t)a2 + 4);
      v125 = *((_QWORD *)a2 + 16);
      if (v125)
      {
        j = (unsigned int *)(8 * v125);
        if ((unint64_t)(8 * v125) > 0x1000)
        {
          v127 = (char *)malloc_type_malloc(8 * v125, 0xC6504830uLL);
        }
        else
        {
          MEMORY[0x1E0C80A78](v124);
          v127 = (char *)&v235 - ((v126 + 15) & 0xFFFFFFFFFFFFFFF0);
          bzero(v127, v126);
        }
        for (n = 0; n != v125; ++n)
        {
          v142 = *(_QWORD *)(*((_QWORD *)a2 + 14) + 16 * n);
          if (v142)
          {
            v143 = (unsigned int *)(v142 + 8);
            do
              v144 = __ldaxr(v143);
            while (__stlxr(v144 + 1, v143));
            if (!v144)
            {
              do
              {
                v142 = 0;
                v145 = __ldaxr(v143);
              }
              while (__stlxr(v145 - 1, v143));
            }
          }
          *(_QWORD *)&v127[8 * n] = v142;
        }
      }
      else
      {
        v127 = 0;
        j = 0;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)a2 + 4);
      x_stream_push(v9);
      if (v125)
      {
        v128 = 0;
        v129 = 0;
        do
        {
          v130 = *(unsigned int **)&v127[8 * v128];
          if ((*((_BYTE *)v130 + 14) & 2) == 0)
          {
            if ((v129 & 1) == 0)
            {
              v256 = 0u;
              v257 = 0u;
              v254 = 0u;
              v255 = 0u;
              v252 = 0u;
              v253 = 0u;
              v250 = 0u;
              v251 = 0u;
              v248 = 0u;
              v249 = 0u;
              v246 = 0u;
              v247 = 0u;
              memset(v245, 0, sizeof(v245));
              v131 = CA_CFStringGetCString(*((const __CFString **)a2 + 13), (char *)v245, 256);
              x_stream_printf(v243, "%s display%s:\n", v132, v133, v134, v135, v136, v137, (uint64_t)v131);
              v130 = *(unsigned int **)&v127[8 * v128];
            }
            CA::Render::Context::show_hosts((CA::Render::Context *)v130);
            v130 = *(unsigned int **)&v127[8 * v128];
            v129 = 1;
          }
          v138 = v130 + 2;
          do
          {
            v139 = __ldaxr(v138);
            v140 = v139 - 1;
          }
          while (__stlxr(v140, v138));
          if (!v140)
            (*(void (**)(unsigned int *))(*(_QWORD *)v130 + 16))(v130);
          ++v128;
        }
        while (v128 != v125);
      }
      x_stream_pop_(v243);
      if (v127 && (unint64_t)j > 0x1000)
        free(v127);
      break;
    case 15:
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 12) + 2088))(*((_QWORD *)a2 + 12), v9);
      break;
    default:
      break;
  }
  objc_autoreleasePoolPop(v7);
}

void CA::WindowServer::Server::get_update_histograms(CA::WindowServer::Server *this, CA::Render::Object *a2, CFMutableArrayRef *a3, void *a4)
{
  __CFArray *Mutable;
  uint64_t i;
  CFNumberRef v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  for (i = 0; i != 1928; i += 8)
  {
    v9[0] = 0;
    v9[0] = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 12) + 25368) + i);
    v8 = CFNumberCreate(0, kCFNumberLongLongType, v9);
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v8);
  }
  CFArrayAppendValue(*a3, Mutable);
  CFRelease(Mutable);
  if (*((_BYTE *)a3 + 8))
    bzero(*(void **)(*((_QWORD *)a2 + 12) + 25368), 0x788uLL);
}

void CA::WindowServer::Server::get_od_statistics(CA::WindowServer::Server *this, CA::Render::Object *a2, __CFArray *a3, void *a4)
{
  __CFArray *Mutable;
  uint64_t i;
  CFNumberRef v8;
  uint64_t j;
  CFNumberRef v10;
  CFNumberRef v11;
  int valuePtr;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  for (i = 0; i != 40; i += 4)
  {
    valuePtr = 0;
    valuePtr = *(_DWORD *)(*((_QWORD *)a2 + 12) + i + 25376);
    v8 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v8);
  }
  for (j = 0; j != 40; j += 4)
  {
    valuePtr = 0;
    valuePtr = *(_DWORD *)(*((_QWORD *)a2 + 12) + j + 25416);
    v10 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFArrayAppendValue(Mutable, v10);
    CFRelease(v10);
  }
  valuePtr = *(_DWORD *)(*((_QWORD *)a2 + 12) + 25456);
  v11 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFArrayAppendValue(Mutable, v11);
  CFRelease(v11);
  CFArrayAppendValue(Mutable, *(const void **)(*((_QWORD *)a2 + 12) + 8));
  CFArrayAppendValue(a3, Mutable);
  CFRelease(Mutable);
}

uint64_t CA::WindowServer::Server::get_performance_info(CA::WindowServer::Server *this, CA::Render::Object *a2, CFMutableArrayRef *a3, void *a4)
{
  pthread_mutex_t *v6;
  const void *v7;

  v6 = (pthread_mutex_t *)((char *)a2 + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 24));
  v7 = (const void *)*((_QWORD *)a2 + 39);
  if (v7)
  {
    *((_QWORD *)a2 + 39) = 0;
    CFArrayAppendValue(*a3, v7);
    CFRelease(v7);
  }
  return pthread_mutex_unlock(v6);
}

void CA::WindowServer::Server::flipbook_render(CA::WindowServer::Server *this, CA::Render::Object *a2, void *a3, void *a4)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v9;
  uint64_t v10;
  pthread_mutex_t *v11;
  CA::Render::Context *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  int v22;
  NSObject *v23;
  unint64_t v24;
  unint64_t v25;
  CA::Render::Context *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  int v31;
  unsigned int v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const CA::Render::Filter **v39;
  uint64_t v40;
  const CA::Render::Filter *v41;
  NSObject *v42;
  NSObject *v43;
  unint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  double v49;
  unint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  const double *v63;
  int v64;
  CA::Render::Context *v69;
  CA::Render::LayerNode *v70;
  const CA::Shape *v71;
  int64x2_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  const __CFString *v78;
  _OWORD *v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  CA::Shape *v95;
  uint64_t v96;
  uint64_t v97;
  CA::Shape *v98;
  uint64_t v99;
  uint64_t v100;
  CA::Shape *v101;
  uint64_t v102;
  const CA::Bounds *v103;
  const CA::Shape *v104;
  const int *v105;
  CA::Shape *v106;
  BOOL v107;
  uint64_t v108;
  int v109;
  const CA::Shape *v110;
  int v111;
  int v112;
  os_unfair_lock_s *v113;
  const CA::Shape *v114;
  const CA::Bounds *v115;
  const CA::Bounds *v116;
  CA::Shape *v117;
  CA::WindowServer::SharedEvent *v118;
  _BOOL4 v119;
  double v120;
  float **v121;
  float v122;
  float v123;
  unsigned int v124;
  int v125;
  int v126;
  uint64_t i;
  double v128;
  NSObject *v129;
  __int32 v130;
  IOSurfaceID ID;
  int v132;
  unsigned int *v133;
  uint64_t v134;
  uint64_t *v135;
  CA::Shape *v136;
  CA::Shape **v137;
  uint64_t *v138;
  _QWORD *v139;
  int v140;
  _QWORD *v141;
  CA::Render::LayerNode *v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  CA::Render::Context *v146;
  int v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  char v152;
  uint64_t v153;
  unint64_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  _OWORD *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  const double *v166;
  uint64_t v167;
  CA::Render::Layer *v168;
  uint64_t v169;
  unsigned int v170;
  unsigned int v171;
  float v172;
  unsigned int v173;
  int v174;
  unsigned int v175;
  unsigned int v176;
  uint64_t v177;
  CA::Shape *v178[2];
  uint64_t v179;
  uint64_t v180;
  void *context;
  int v182;
  __int128 v183;
  int v184;
  uint64_t v185;
  float v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  CA::Render::Context *v194;
  os_unfair_lock_s *lock;
  CA::Shape *v196;
  CA::Shape *v197[2];
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  char v206[4];
  IOSurfaceRef buffer[2];
  __int128 v208;
  __int128 v209;
  _OWORD v210[3];
  uint64_t v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  _BYTE v216[48];
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  float32x2_t v220[2];
  _BYTE v221[72];
  uint64_t v222;
  __int128 v223;
  __int128 v224;
  double v225;
  double v226;
  uint64_t v227;
  uint64_t v228;
  float64x2_t v229;
  uint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  __int128 v237;
  uint64_t v238;
  unint64_t v239[2];
  CA::Shape **v240[29];
  __int32 v241;
  int v242;
  uint64_t v243;
  unsigned int v244;
  unsigned __int16 v245;
  uint8_t buf[48];
  _DWORD v247[5];
  __int128 v248;
  uint64_t v249;
  char v250;
  uint64_t v251;

  MEMORY[0x1E0C80A78](this);
  v251 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(v4 + 96);
  v7 = *(_QWORD *)(v6 + 320);
  if (*v5 != *(_DWORD *)(v6 + 24) || v7 == 0)
    return;
  v9 = v5;
  v10 = v4;
  v11 = (pthread_mutex_t *)(v4 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 24));
  v12 = (CA::Render::Context *)v9[1];
  v13 = *((_QWORD *)v9 + 1);
  v14 = v9[4];
  v15 = *(_QWORD *)(v10 + 96);
  v16 = *(unsigned __int8 *)(*(_QWORD *)(v15 + 728) + 1);
  v17 = *(_DWORD *)(v15 + 745);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v18 = x_log_category_flipbook;
    if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = (_DWORD)v12;
      *(_WORD *)&buf[8] = 2048;
      *(_QWORD *)&buf[10] = v13;
      _os_log_impl(&dword_184457000, v18, OS_LOG_TYPE_DEFAULT, "FlipBook::render (context 0x%x, t %llu)", buf, 0x12u);
    }
  }
  kdebug_trace();
  *((_QWORD *)v9 + 4) = 0;
  if (*(_QWORD *)(v7 + 56) > v13)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v19 = x_log_category_flipbook;
      if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
      {
        v20 = *(_QWORD *)(v7 + 56);
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v13;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v20;
        _os_log_impl(&dword_184457000, v19, OS_LOG_TYPE_DEFAULT, "bad timestamp - %llu is earlier than last timestamp %llu", buf, 0x16u);
      }
    }
    v9[5] = 1;
    goto LABEL_65;
  }
  if ((v17 & 0x2000) != 0)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v21 = x_log_category_flipbook;
      if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v21, OS_LOG_TYPE_DEFAULT, "display not ready (entering flipbook). Dropping render!", buf, 2u);
      }
    }
    v22 = 5;
    goto LABEL_64;
  }
  if (v16 != 1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v7 + 8));
    if (*(_QWORD *)(v7 + 112) == *(_QWORD *)(v7 + 104))
    {
      v24 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v7 + 136) - *(_QWORD *)(v7 + 128)) >> 3)
          + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v7 + 88) - *(_QWORD *)(v7 + 80)) >> 3);
      v25 = *(_QWORD *)(v7 + 64);
      os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 8));
      if (v24 >= v25)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v43 = x_log_category_flipbook;
          if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v43, OS_LOG_TYPE_DEFAULT, "no surface!", buf, 2u);
          }
        }
        v22 = 3;
        goto LABEL_64;
      }
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 8));
    }
    v194 = (CA::Render::Context *)CA::Render::Context::context_by_id(v12);
    if (!v194)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v42 = x_log_category_flipbook;
        if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v42, OS_LOG_TYPE_DEFAULT, "no context!", buf, 2u);
        }
      }
      v22 = 4;
      goto LABEL_64;
    }
    if (!*(_QWORD *)(v7 + 40))
      CA::WindowServer::FlipBook::invalidate_context(v194, v26);
    lock = (os_unfair_lock_s *)(v7 + 8);
    CARecordCurrentDisplay::CARecordCurrentDisplay((CARecordCurrentDisplay *)v206, *(_DWORD *)(*(_QWORD *)(v7 + 16) + 24));
    v27 = pthread_getspecific(current_display_slot);
    if (v27 && *v27)
      --*v27;
    *(_OWORD *)buffer = 0u;
    v208 = 0u;
    v209 = 0u;
    memset(v210, 0, sizeof(v210));
    v211 = 0;
    v28 = *(_QWORD *)(v7 + 16);
    *(_QWORD *)&v205 = 0;
    *((_QWORD *)&v205 + 1) = *(_QWORD *)(v28 + 176);
    v29 = mach_absolute_time();
    v30 = CATimeWithHostTime(v29);
    do
    {
      v31 = __ldaxr(CA::Render::Update::_update_counter);
      v32 = v31 + 1;
    }
    while (__stlxr(v31 + 1, CA::Render::Update::_update_counter));
    if ((*(_BYTE *)(v7 + 24) & 3) == 0)
      v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 16) + 360))(*(_QWORD *)(v7 + 16));
    bzero(v239, 0x430uLL);
    CA::Render::Update::Update((CA::Render::Update *)v239, (const CA::Bounds *)buf, 0x2000uLL, v30, 0, v32, v31, v31, (const CA::Bounds *)&v205, 0x10000u);
    if (!v239[0])
    {
      x_log_crash("Invalid update!");
      abort();
    }
    v33 = v244 & 0xFFEFFFFF | ((unint64_t)v245 << 32);
    v244 = v244 & 0x7FEF7FFF | 0x80008000;
    v245 = WORD2(v33);
    v243 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 16) + 1392))(*(_QWORD *)(v7 + 16));
    if (*(_DWORD *)(v7 + 292) == 1)
      v244 |= 0x4000u;
    pthread_mutex_lock((pthread_mutex_t *)((char *)v194 + 72));
    v34 = *(_DWORD *)(v7 + 292);
    *(_QWORD *)v221 = 0;
    v220[0] = 0;
    v220[1] = 0;
    if (v34 == 1)
    {
      v35 = CA::Render::Context::root_layer_handle(v194);
      if (v35)
      {
        if (*(_QWORD *)(v35 + 16))
        {
          v36 = *(_QWORD *)(*(_QWORD *)(CA::Render::Context::root_layer_handle(v194) + 16) + 128);
          if (v36)
          {
            v37 = *(_QWORD *)(v36 + 96);
            if (v37)
            {
              v38 = *(unsigned int *)(v37 + 16);
              if ((_DWORD)v38)
              {
                v39 = (const CA::Render::Filter **)(v37 + 24);
                v40 = 8 * v38;
                while (1)
                {
                  v41 = *v39;
                  if ((*((_BYTE *)*v39 + 14) & 2) != 0 && *((_DWORD *)v41 + 6) == 343)
                    break;
                  ++v39;
                  v40 -= 8;
                  if (!v40)
                    goto LABEL_91;
                }
                CA::OGL::get_filter_apl_params(v220, v41, 1, 0);
              }
            }
          }
        }
      }
    }
LABEL_91:
    v237 = *(_OWORD *)v220[0].f32;
    v238 = *(_QWORD *)v221;
    if ((v14 & 2) != 0 && (v58 = CA::Render::Context::root_layer_handle(v194)) != 0 && *(_QWORD *)(v58 + 16))
    {
      if (CADeviceInternalDisplayScale::once != -1)
        dispatch_once(&CADeviceInternalDisplayScale::once, &__block_literal_global_206);
      v59 = (int)*(float *)&CADeviceInternalDisplayScale::scale;
      v203 = 0u;
      v204 = 0u;
      v201 = 0u;
      v202 = 0u;
      v199 = 0u;
      v200 = 0u;
      *(_OWORD *)v197 = 0u;
      v198 = 0u;
      v60 = CA::Render::Context::root_layer_handle(v194);
      if (v60)
        v60 = *(_QWORD *)(v60 + 16);
      CA::Render::Layer::compute_frame_transform(v60, 0, (CA::Mat4Impl *)v197, 0);
      v220[1] = 0;
      memset(v221, 0, 24);
      memset(&v221[32], 0, 32);
      v222 = 0;
      v223 = 0u;
      v224 = xmmword_18474DF50;
      *(double *)v220 = (double)v59;
      *(double *)&v221[24] = (double)v59;
      *(_QWORD *)&v221[64] = 0x3FF0000000000000;
      v225 = (double)v59;
      v226 = 1.0 / (double)v59;
      v227 = (8 * (v59 != 1));
      v61 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 16) + 840))(*(_QWORD *)(v7 + 16));
      v219 = 0;
      if ((v14 & 1) != 0)
        v64 = ((_BYTE)v61 + 2) & 3;
      else
        v64 = v61;
      v212 = xmmword_18474DF40;
      v213 = 0u;
      v214 = xmmword_18474DF50;
      v215 = 0u;
      *(_OWORD *)v216 = 0u;
      *(_OWORD *)&v216[16] = xmmword_18474DF40;
      *(_OWORD *)&v216[32] = 0u;
      v217 = xmmword_18474DF50;
      __asm { FMOV            V0.2D, #1.0 }
      v218 = _Q0;
      if (v64 == 3)
      {
        LOBYTE(v219) = 7;
        v213 = 0uLL;
        v215 = 0u;
        *(_OWORD *)v216 = 0u;
        *(_OWORD *)&v216[16] = xmmword_18474DF40;
        v217 = xmmword_18474DF50;
        v212 = xmmword_18474E650;
        v214 = xmmword_18474DF40;
        *(_QWORD *)&v216[32] = 0;
        *(double *)&v216[40] = (double)SHIDWORD(v205);
        v69 = v194;
      }
      else
      {
        v69 = v194;
        if (v64 == 2)
        {
          CA::Transform::set_affine_rectilinear((CA::Transform *)&v212, -1.0, -1.0, (double)SDWORD2(v205), (double)SHIDWORD(v205));
        }
        else if (v64 == 1)
        {
          LOBYTE(v219) = 4;
          v213 = 0uLL;
          v215 = 0u;
          *(_OWORD *)v216 = 0u;
          *(_OWORD *)&v216[16] = xmmword_18474DF40;
          v217 = xmmword_18474DF50;
          v212 = xmmword_18474DF50;
          v214 = xmmword_18474DFF0;
          *(double *)&v216[32] = (double)SDWORD2(v205);
          *(_QWORD *)&v216[40] = 0;
        }
      }
      CA::Transform::concat((CA::Transform *)v220, (float64x2_t *)&v212, v62, v63);
      CA::Transform::set((uint64_t)&v229, (CA::Mat4Impl *)v197, 1);
      CA::Transform::concat_left((CA::Transform *)v220, &v229, v165, v166);
      v167 = CA::Render::Context::root_layer_handle(v69);
      if (v167)
        v168 = *(CA::Render::Layer **)(v167 + 16);
      else
        v168 = 0;
      CA::Render::Update::add_context((CA::Render::Update *)v239, v69, v168, (const CA::Transform *)v220);
    }
    else
    {
      CA::Render::Update::add_context((CA::Render::Update *)v239, v194);
    }
    pthread_mutex_unlock((pthread_mutex_t *)((char *)v194 + 72));
    CA::Render::Update::added_all_contexts((CA::Render::Update *)v239, v70, v71, v72);
    if (byte_1ECDC6AA3)
    {
      v169 = 8;
      if (!*(_DWORD *)(v7 + 292))
        v169 = 24;
      v189 = v169;
      v185 = 2 * (*(_DWORD *)(v7 + 292) == 0);
    }
    else
    {
      v185 = 0;
      v189 = 8;
    }
    context = (void *)MEMORY[0x186DBE2E4]();
    v193 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
    v73 = *v193;
    v74 = *(_QWORD *)(v7 + 16);
    v187 = *(_DWORD *)(v74 + 176);
    v182 = *(_DWORD *)(v74 + 180);
    v196 = 0;
    v197[0] = 0;
    v197[1] = 0;
    CA::Shape::get_bounds((uint64_t)v240[0], (int *)v197);
    v190 = BYTE4(v238);
    if (*(float *)(v7 + 288) != 1.0 && (v238 & 0x100000000) == 0)
    {
      *(_DWORD *)(v7 + 288) = 1065353216;
      *(_OWORD *)v197 = v205;
    }
    v75 = *(_DWORD *)(v7 + 292);
    if (v75 == 1)
    {
      if ((v190 & 1) != 0)
      {
        os_unfair_lock_lock(lock);
        v79 = (_OWORD *)(v7 + 176);
        if (*(_QWORD *)(v7 + 176))
        {
          v80 = *(_DWORD *)(v7 + 228);
          v81 = *(_DWORD *)(v7 + 232);
          v82 = *(_DWORD *)(v7 + 236);
          v83 = *(_DWORD *)(v7 + 240);
          v84 = *(_DWORD *)(v7 + 244);
          v85 = *(_DWORD *)(v7 + 248);
          v86 = *(_DWORD *)(v7 + 252);
          v87 = *(_DWORD *)(v7 + 256);
        }
        else
        {
          CA::WindowServer::FlipBook::allocate_frame((CA::WindowServer::FlipBook *)v220, v7, *(int *)(*(_QWORD *)(v7 + 16) + 176), *(int *)(*(_QWORD *)(v7 + 16) + 180), v76, v77, v78);
          v88 = *(_OWORD *)v221;
          *v79 = *(_OWORD *)v220[0].f32;
          *(_OWORD *)(v7 + 192) = v88;
          *(_OWORD *)(v7 + 208) = *(_OWORD *)&v221[16];
          v80 = *(_DWORD *)&v221[36];
          *(_DWORD *)(v7 + 224) = *(_DWORD *)&v221[32];
          v81 = *(_DWORD *)&v221[40];
          v82 = *(_DWORD *)&v221[44];
          *(_DWORD *)(v7 + 228) = v80;
          *(_DWORD *)(v7 + 232) = v81;
          v83 = *(_DWORD *)&v221[48];
          v84 = *(_DWORD *)&v221[52];
          *(_DWORD *)(v7 + 236) = v82;
          *(_DWORD *)(v7 + 240) = v83;
          v85 = *(_DWORD *)&v221[56];
          v86 = *(_DWORD *)&v221[60];
          *(_DWORD *)(v7 + 244) = v84;
          *(_DWORD *)(v7 + 248) = v85;
          v87 = *(_DWORD *)&v221[64];
          *(_DWORD *)(v7 + 252) = v86;
          *(_DWORD *)(v7 + 256) = v87;
          *(_BYTE *)(v7 + 272) = v223;
          *(_QWORD *)(v7 + 264) = v222;
        }
        v89 = *(_OWORD *)(v7 + 192);
        *(_OWORD *)v220[0].f32 = *v79;
        *(_OWORD *)v221 = v89;
        *(_OWORD *)&v221[16] = *(_OWORD *)(v7 + 208);
        *(_DWORD *)&v221[32] = *(_DWORD *)(v7 + 224);
        *(_DWORD *)&v221[36] = v80;
        *(_DWORD *)&v221[40] = v81;
        *(_DWORD *)&v221[44] = v82;
        *(_DWORD *)&v221[48] = v83;
        *(_DWORD *)&v221[52] = v84;
        *(_DWORD *)&v221[56] = v85;
        *(_DWORD *)&v221[60] = v86;
        *(_DWORD *)&v221[64] = v87;
        v90 = *(_QWORD *)(v7 + 264);
        LOBYTE(v223) = *(_BYTE *)(v7 + 272);
        v222 = v90;
        os_unfair_lock_unlock(lock);
      }
      else
      {
        CA::WindowServer::FlipBook::next_frame((CA::WindowServer::FlipBook *)v220, v7, SLODWORD(v197[1]), SHIDWORD(v197[1]));
      }
      *(_OWORD *)buffer = *(_OWORD *)v220[0].f32;
      v208 = *(_OWORD *)v221;
      v209 = *(_OWORD *)&v221[16];
      LODWORD(v210[0]) = *(_DWORD *)&v221[32];
      *(_OWORD *)((char *)v210 + 4) = *(_OWORD *)&v221[36];
      *(_OWORD *)((char *)&v210[1] + 4) = *(_OWORD *)&v221[52];
      *((_QWORD *)&v210[2] + 1) = v222;
      LOBYTE(v211) = v223;
    }
    else if (!v75)
    {
      CA::WindowServer::FlipBook::next_frame((CA::WindowServer::FlipBook *)v220, v7, 0, 0);
      *(_OWORD *)buffer = *(_OWORD *)v220[0].f32;
      v208 = *(_OWORD *)v221;
      v209 = *(_OWORD *)&v221[16];
      LODWORD(v210[0]) = *(_DWORD *)&v221[32];
      *(_OWORD *)((char *)v210 + 4) = *(_OWORD *)&v221[36];
      *(_OWORD *)((char *)&v210[1] + 4) = *(_OWORD *)&v221[52];
      *((_QWORD *)&v210[2] + 1) = v222;
      LOBYTE(v211) = v223;
    }
    if (*((_QWORD *)&v209 + 1))
      __assert_rtn("render_frame", "windowserver-flipbook.cpp", 1193, "frame.t_continuous == 0");
    if ((_QWORD)v209)
      __assert_rtn("render_frame", "windowserver-flipbook.cpp", 1194, "frame.seed == 0");
    if (LODWORD(v210[0]))
      __assert_rtn("render_frame", "windowserver-flipbook.cpp", 1195, "frame.swap_id == 0");
    if (!buffer[0])
      __assert_rtn("render_frame", "windowserver-flipbook.cpp", 1197, "frame.surface");
    v91 = *(_QWORD *)(v7 + 280);
    *(_QWORD *)(v7 + 280) = v91 + 1;
    v92 = *(_DWORD *)(v7 + 292);
    v179 = v91 + 1;
    if (v92 != 1)
    {
      if (v92)
      {
        v180 = 0;
        v177 = 0;
        v109 = v187;
        goto LABEL_161;
      }
      os_unfair_lock_lock(lock);
      v93 = *(_QWORD *)(v7 + 80);
      v94 = *(_QWORD *)(v7 + 88);
      if (v93 != v94)
      {
        v95 = v197[1];
        do
        {
          CA::BoundsImpl::Union((int32x2_t *)(v93 + 52), (int32x2_t)v197[0], (int32x2_t)v95);
          v93 += 104;
        }
        while (v93 != v94);
      }
      v96 = *(_QWORD *)(v7 + 104);
      v97 = *(_QWORD *)(v7 + 112);
      if (v96 != v97)
      {
        v98 = v197[1];
        do
        {
          CA::BoundsImpl::Union((int32x2_t *)(v96 + 52), (int32x2_t)v197[0], (int32x2_t)v98);
          v96 += 104;
        }
        while (v96 != v97);
      }
      v99 = *(_QWORD *)(v7 + 128);
      v100 = *(_QWORD *)(v7 + 136);
      if (v99 != v100)
      {
        v101 = v197[1];
        do
        {
          CA::BoundsImpl::Union((int32x2_t *)(v99 + 52), (int32x2_t)v197[0], (int32x2_t)v101);
          v99 += 104;
        }
        while (v99 != v100);
      }
      v102 = CA::WindowServer::FlipBook::previous_frame_with_seed((CA::WindowServer::FlipBook *)v7, v91);
      if (v102 && *(_QWORD *)(v102 + v189))
      {
        v196 = (CA::Shape *)CA::Shape::new_shape((CA::Shape *)((char *)v210 + 4), v103);
        CA::shape_subtract(&v196, v240[0], v104, v105);
        v106 = v196;
        if ((v196 & 1) != 0)
          v107 = v196 == (CA::Shape *)1;
        else
          v107 = *((_DWORD *)v196 + 1) == 6;
        v109 = v187;
        if (!v107)
          CA::OGL::Context::copy_surface_region(v73);
        v180 = CA::Shape::area(v106);
      }
      else
      {
        memset(v221, 0, 32);
        *(_OWORD *)v220[0].f32 = 0u;
        CA::Shape::operator=((uint64_t)v220, (_DWORD *)v210 + 1);
        CA::shape_union((CA::Shape **)v240, (CA::Shape **)v220, v110);
        v180 = 0;
        v109 = v187;
      }
      *(_QWORD *)((char *)v210 + 4) = 0;
      *(_QWORD *)((char *)v210 + 12) = 0;
      v177 = CA::Shape::area((CA::Shape *)v240[0]);
      v113 = (os_unfair_lock_s *)(v7 + 8);
LABEL_160:
      os_unfair_lock_unlock(v113);
LABEL_161:
      v188 = v182 * (uint64_t)v109;
      v183 = v205;
      *(_OWORD *)(v73 + 184) = v205;
      *(_WORD *)(v73 + 816) |= 2u;
      *(_QWORD *)(v73 + 176) = CA::WindowServer::Display::ogl_display(*(CA::WindowServer::Display **)(v7 + 16));
      CA::OGL::Renderer::prepare_clip_shape((CA::OGL::Renderer *)v193, (const CA::Render::Update *)v240[0]);
      (*(void (**)(uint64_t, IOSurfaceRef, _QWORD, _QWORD))(*(_QWORD *)v73 + 32))(v73, buffer[v185], 0, 0);
      CA::OGL::Renderer::render((CA::OGL::Renderer *)v193, (const CA::Render::Update *)v239, 0, v118);
      if ((v190 & 1) != 0)
      {
        v121 = (float **)(*(uint64_t (**)(uint64_t, _QWORD, __int128 *))(*(_QWORD *)v73 + 872))(v73, *(IOSurfaceRef *)((char *)buffer + v189), &v237);
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 416))(v73);
        v192 = (uint64_t)v121;
        v122 = **v121;
        v186 = (*v121)[8];
        v123 = vabds_f32(*(float *)(v7 + 288), v122);
        memset(&v216[20], 0, 20);
        v212 = *(_OWORD *)buffer;
        v213 = v208;
        v214 = v209;
        v215 = v210[0];
        v176 = DWORD1(v210[0]);
        v174 = HIDWORD(v210[0]);
        v175 = DWORD2(v210[0]);
        v124 = DWORD1(v210[1]);
        v173 = v210[1];
        *(_DWORD *)v216 = v210[1];
        v125 = HIDWORD(v210[1]);
        v126 = v210[2];
        v216[32] = v211;
        *(_QWORD *)&v216[24] = *((_QWORD *)&v210[2] + 1);
        v172 = v122;
        if (v123 <= 0.01)
        {
          v171 = DWORD2(v210[1]);
        }
        else
        {
          *(float *)(v7 + 288) = v122;
          *(_OWORD *)&v216[4] = v183;
          v171 = DWORD1(v183);
          v124 = v183;
          v125 = DWORD2(v183);
          v180 = v188;
          v126 = HIDWORD(v183);
        }
        v170 = v125;
        v184 = v126;
        CA::WindowServer::FlipBook::next_frame((CA::WindowServer::FlipBook *)v220, v7, v125, v126);
        *(_OWORD *)buffer = *(_OWORD *)v220[0].f32;
        v208 = *(_OWORD *)v221;
        v209 = *(_OWORD *)&v221[16];
        LODWORD(v210[0]) = *(_DWORD *)&v221[32];
        *((_QWORD *)&v210[2] + 1) = v222;
        LOBYTE(v211) = v223;
        v220[0] = 0;
        v228 = 0;
        CA::OGL::Context::prepare_context(v73, (uint64_t)v220);
        v232 = 0x3C003C003C003C00;
        v234 = 0;
        v233 = 0;
        v236 = 0x4013F800000;
        v230 = 0;
        v231 = &CA::identity_transform;
        v229.f64[0] = 0.0;
        *(_QWORD *)&v229.f64[1] = &CA::Shape::_infinite_shape;
        v235 = 0;
        CA::OGL::Context::push_surface(v73, *(uint64_t *)((char *)buffer + v189), 0, 0, 0);
        (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v73 + 1008))(v73, &v229);
        CA::OGL::emit_limit_apl_dimming((_QWORD *)v73, *(int **)((char *)&v212 + v189), v192, 1.0, (float)-v124, (float)-v171);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v73 + 832))(v73, v192);
        (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v73 + 1016))(v73, &v229);
        CA::OGL::Context::pop_surface((CA::OGL::Context *)v73);
        *((_QWORD *)&v210[1] + 1) = __PAIR64__(v170, v171);
        LODWORD(v210[2]) = v184;
        *(_QWORD *)((char *)v210 + 4) = __PAIR64__(v175, v176);
        HIDWORD(v210[0]) = v174;
        *(_QWORD *)&v210[1] = __PAIR64__(v124, v173);
        for (i = 61; i != -61; i -= 61)
        {
          if (v220[i])
            __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
        }
        v191 = __PAIR64__(LODWORD(v172), LODWORD(v186));
        v119 = v123 > 0.01;
        v120 = v186;
      }
      else
      {
        v119 = 0;
        v191 = (unint64_t)vdup_n_s32(0x7FC00000u);
        v120 = -1.0;
      }
      v128 = (double)(int)v188;
      *(_QWORD *)&v209 = v179;
      if (x_log_hook_p())
      {
        IOSurfaceGetID(buffer[0]);
        x_log_();
      }
      else
      {
        v129 = x_log_category_flipbook;
        if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
        {
          v130 = v241;
          ID = IOSurfaceGetID(buffer[0]);
          v220[0].i32[0] = 67111168;
          v220[0].i32[1] = v130;
          v220[1].i16[0] = 1024;
          *(__int32 *)((char *)v220[1].i32 + 2) = ID;
          v220[1].i16[3] = 2048;
          *(_QWORD *)v221 = v180;
          *(_WORD *)&v221[8] = 2048;
          *(double *)&v221[10] = (double)v180 * 100.0 / v128;
          *(_WORD *)&v221[18] = 2048;
          *(_QWORD *)&v221[20] = v177;
          *(_WORD *)&v221[28] = 2048;
          *(double *)&v221[30] = (double)v177 * 100.0 / v128;
          *(_WORD *)&v221[38] = 1024;
          *(_DWORD *)&v221[40] = BYTE4(v238) & 1;
          *(_WORD *)&v221[44] = 2048;
          *(double *)&v221[46] = v120;
          *(_WORD *)&v221[54] = 1024;
          *(_DWORD *)&v221[56] = v119;
          _os_log_impl(&dword_184457000, v129, OS_LOG_TYPE_DEFAULT, "rendering update %u for flipbook to surface 0x%x, copy forward area %6lu[%3.0f%%], render area %6lu[%3.0f%%] root APL filter? %d (apl %.2g, dirty? %d)", (uint8_t *)v220, 0x4Cu);
        }
      }
      if (byte_1ECDC6AA3)
      {
        v132 = *(_DWORD *)(v7 + 292);
        v133 = (unsigned int *)v194;
        if (v132)
          goto LABEL_176;
        (*(void (**)(uint64_t, IOSurfaceRef, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v73 + 720))(v73, buffer[1], *((_QWORD *)&v208 + 1), 0, 0, 0, 0);
        *(_WORD *)(v73 + 816) |= 2u;
        (*(void (**)(uint64_t, IOSurfaceRef, _QWORD, _QWORD))(*(_QWORD *)v73 + 32))(v73, buffer[0], 0, 0);
        if (v196)
        {
          v220[0] = (float32x2_t)0x3804000038040000;
          CA::OGL::Context::paint_region(v73, (uint64_t)v196, (uint64_t *)v220, 1);
        }
        v220[0] = (float32x2_t)0x3804000000003804;
        CA::OGL::Context::paint_region(v73, (uint64_t)v240[0], (uint64_t *)v220, 1);
      }
      v132 = *(_DWORD *)(v7 + 292);
      v133 = (unsigned int *)v194;
LABEL_176:
      v134 = *(_QWORD *)v73;
      if (v132 == 1)
        (*(void (**)(uint64_t))(v134 + 416))(v73);
      else
        (*(void (**)(uint64_t, uint64_t))(v134 + 408))(v73, 1);
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v73 + 32))(v73, 0, 0, 0);
      v135 = v193;
      v136 = (CA::Shape *)v193[2];
      if (v136)
      {
        CA::Shape::unref(v136);
        v135 = v193;
        v193[2] = 0;
      }
      v137 = v240[7];
      v138 = v135;
      v139 = (_QWORD *)*v135;
      v140 = v242;
      *((_DWORD *)v139 + 53) = v241;
      *((_DWORD *)v139 + 54) = v140;
      CA::Render::Update::release_objects(v239);
      v141 = (_QWORD *)*v138;
      v141[28] = v137;
      (*(void (**)(_QWORD *, _QWORD))(*v141 + 216))(v141, 0);
      *(_WORD *)(v73 + 816) &= ~2u;
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v73 + 80))(v73, 0, 0);
      *(_QWORD *)(v73 + 176) = 0;
      if (v196)
        CA::Shape::unref(v196);
      objc_autoreleasePoolPop(context);
      CA::Render::Update::~Update((CA::Render::Update *)v239, v142);
      if (!buffer[0])
        __assert_rtn("render", "windowserver-flipbook.cpp", 140, "frame.surface");
      *((_QWORD *)&v209 + 1) = v13;
      v143 = v133 + 2;
      do
      {
        v144 = __ldaxr(v143);
        v145 = v144 - 1;
      }
      while (__stlxr(v145, v143));
      if (!v145)
        (*(void (**)(unsigned int *))(*(_QWORD *)v133 + 16))(v133);
      v146 = (CA::Render::Context *)*(unsigned int *)(v7 + 48);
      if ((_DWORD)v146 != (_DWORD)v12)
      {
        CA::WindowServer::FlipBook::invalidate_context(v146);
        *(_DWORD *)(v7 + 48) = (_DWORD)v12;
      }
      *(_QWORD *)(v7 + 56) = v13;
      os_unfair_lock_lock(lock);
      v147 = *(_BYTE *)(v7 + 24) & 3;
      if (v147 == 2)
      {
        v153 = v7 + 152;
      }
      else if (v147 == 1)
      {
        if (*(_DWORD *)(v7 + 292) == 1
          && (v148 = CA::WindowServer::FlipBook::previous_frame_with_seed((CA::WindowServer::FlipBook *)v7, v209 - 1)) != 0)
        {
          v149 = *(_OWORD *)v148;
          v150 = *(_OWORD *)(v148 + 16);
          v151 = *(_OWORD *)(v148 + 32);
          v247[0] = *(_DWORD *)(v148 + 48);
          *(_OWORD *)&buf[16] = v150;
          *(_OWORD *)&buf[32] = v151;
          *(_OWORD *)buf = v149;
          *(_OWORD *)&v247[1] = *(_OWORD *)(v148 + 52);
          v248 = *(_OWORD *)(v148 + 68);
          v152 = *(_BYTE *)(v148 + 96);
          v249 = *(_QWORD *)(v148 + 88);
          v250 = v152;
        }
        else
        {
          v249 = 0;
          v250 = 0;
          memset(buf, 0, sizeof(buf));
          v247[0] = 0;
        }
        v153 = v7 + 128;
        (*(void (**)(uint64_t, IOSurfaceRef *, uint8_t *))(*(_QWORD *)v7 + 96))(v7, buffer, buf);
      }
      else
      {
        v153 = v7 + 80;
      }
      v154 = *(_QWORD *)(v153 + 8);
      if (v154 >= *(_QWORD *)(v153 + 16))
      {
        v159 = std::vector<CA::WindowServer::FlipBook::Frame>::__push_back_slow_path<CA::WindowServer::FlipBook::Frame const&>((void **)v153, (__int128 *)buffer);
      }
      else
      {
        v155 = *(_OWORD *)buffer;
        v156 = v208;
        v157 = v209;
        *(_DWORD *)(v154 + 48) = v210[0];
        *(_OWORD *)(v154 + 16) = v156;
        *(_OWORD *)(v154 + 32) = v157;
        *(_OWORD *)v154 = v155;
        *(_OWORD *)(v154 + 52) = *(_OWORD *)((char *)v210 + 4);
        *(_OWORD *)(v154 + 68) = *(_OWORD *)((char *)&v210[1] + 4);
        v158 = *((_QWORD *)&v210[2] + 1);
        *(_BYTE *)(v154 + 96) = v211;
        *(_QWORD *)(v154 + 88) = v158;
        v159 = (void *)(v154 + 104);
      }
      *(_QWORD *)(v153 + 8) = v159;
      v9[5] = 0;
      v160 = *((_QWORD *)&v210[2] + 1);
      *((_QWORD *)v9 + 3) = v209;
      *((_QWORD *)v9 + 5) = v191;
      *((_QWORD *)v9 + 6) = v160;
      if (CADeviceHasInternalDiagnostics::once != -1)
        dispatch_once(&CADeviceHasInternalDiagnostics::once, &__block_literal_global_110_9865);
      if (CADeviceHasInternalDiagnostics::internal)
        v9[14] = IOSurfaceCreateMachPort(buffer[0]);
      v161 = (_OWORD *)((char *)&v210[1] + 4);
      if (*(_DWORD *)(v7 + 292) != 1)
        v161 = (_OWORD *)(*(_QWORD *)(v7 + 16) + 168);
      *(_OWORD *)(v9 + 15) = *v161;
      v162 = *(_QWORD *)(v7 + 128);
      if (v162 != *(_QWORD *)(v7 + 136))
        *((_QWORD *)v9 + 4) = *(_QWORD *)(v162 + 32);
      v163 = *(_QWORD *)(v7 + 80);
      if (v163 != *(_QWORD *)(v7 + 88))
      {
        v164 = *(_QWORD *)(v163 + 32);
        if (v164 >= *((_QWORD *)v9 + 4))
          v164 = *((_QWORD *)v9 + 4);
        *((_QWORD *)v9 + 4) = v164;
      }
      os_unfair_lock_unlock(lock);
      *(int64x2_t *)(v7 + 32) = vaddq_s64(*(int64x2_t *)(v7 + 32), vdupq_n_s64(1uLL));
      CA::WindowServer::FlipBook::recycle((os_unfair_lock_s *)v7);
      goto LABEL_65;
    }
    os_unfair_lock_lock(lock);
    v108 = CA::WindowServer::FlipBook::previous_frame_with_seed((CA::WindowServer::FlipBook *)v7, v91);
    if (v108)
    {
      *(_OWORD *)((char *)v210 + 4) = *(_OWORD *)(v108 + 68);
LABEL_157:
      memset(v221, 0, 32);
      *(_OWORD *)v220[0].f32 = 0u;
      CA::Shape::operator=((uint64_t)v220, v197);
      CA::shape_union((CA::Shape **)v240, (CA::Shape **)v220, v114);
      *(_OWORD *)v178 = *(_OWORD *)v197;
      *(_OWORD *)((char *)&v210[1] + 4) = *(_OWORD *)v197;
      if ((v190 & 1) == 0)
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v73 + 80))(v73, -LODWORD(v197[0]), -HIDWORD(v197[0]));
      v220[0] = (float32x2_t)CA::Shape::new_shape((CA::Shape *)((char *)v210 + 4), v115);
      CA::shape_subtract((CA::Shape **)v220, v197, v116);
      v117 = (CA::Shape *)v220[0];
      v180 = CA::Shape::area(*(CA::Shape **)v220);
      v177 = vmulq_laneq_s32(*(int32x4_t *)v178, *(int32x4_t *)v178, 3).i32[2];
      CA::Shape::unref(v117);
      v113 = (os_unfair_lock_s *)(v7 + 8);
      v109 = v187;
      goto LABEL_160;
    }
    if (LODWORD(v197[0]) == (_DWORD)v205)
    {
      v111 = DWORD2(v205);
      v112 = HIDWORD(v205);
      if (*(CA::Shape **)((char *)v197 + 4) == *(CA::Shape **)((char *)&v205 + 4) && HIDWORD(v197[1]) == HIDWORD(v205))
      {
LABEL_156:
        *(_QWORD *)((char *)v210 + 4) = 0;
        *(_QWORD *)((char *)v210 + 12) = 0;
        goto LABEL_157;
      }
    }
    else
    {
      v111 = DWORD2(v205);
      v112 = HIDWORD(v205);
    }
    v197[0] = (CA::Shape *)v205;
    v197[1] = (CA::Shape *)__PAIR64__(v112, v111);
    if ((v190 & 1) == 0)
    {
      CA::WindowServer::FlipBook::reuse_frame((_QWORD *)v7, buffer);
      os_unfair_lock_unlock(lock);
      CA::WindowServer::FlipBook::next_frame((CA::WindowServer::FlipBook *)v220, v7, v111, v112);
      *(_OWORD *)buffer = *(_OWORD *)v220[0].f32;
      v208 = *(_OWORD *)v221;
      v209 = *(_OWORD *)&v221[16];
      LODWORD(v210[0]) = *(_DWORD *)&v221[32];
      *(_OWORD *)((char *)&v210[1] + 4) = *(_OWORD *)&v221[52];
      *((_QWORD *)&v210[2] + 1) = v222;
      LOBYTE(v211) = v223;
      os_unfair_lock_lock(lock);
    }
    goto LABEL_156;
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v23 = x_log_category_flipbook;
    if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184457000, v23, OS_LOG_TYPE_DEFAULT, "not blanked!", buf, 2u);
    }
  }
  v22 = 2;
LABEL_64:
  v9[5] = v22;
LABEL_65:
  kdebug_trace();
  if (x_log_hook_p())
  {
    v44 = *((_QWORD *)v9 + 6);
    if (v44 >= 0x400)
    {
      v53 = 1.0;
      do
        v53 = v53 * 0.0009765625;
      while (v53 * (double)v44 >= 1024.0);
    }
    x_log_();
  }
  else
  {
    v45 = x_log_category_flipbook;
    if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
    {
      v47 = *((_QWORD *)v9 + 3);
      v46 = *((_QWORD *)v9 + 4);
      v48 = v9[5];
      v49 = *((float *)v9 + 11);
      v50 = *((_QWORD *)v9 + 6);
      v51 = (double)v50;
      if (v50 >= 0x400)
      {
        v54 = 1.0;
        do
        {
          v54 = v54 * 0.0009765625;
          v52 = v54 * v51;
        }
        while (v54 * v51 >= 1024.0);
      }
      else
      {
        v52 = (double)v50;
      }
      v55 = v50 > 0x3FF;
      if ((v50 & 0xFFFFFFFFFFF00000) != 0)
        ++v55;
      if ((v50 & 0xFFFFFFFFC0000000) != 0)
        ++v55;
      if (v50 >> 40)
        ++v55;
      if (v50 >> 50)
        ++v55;
      if (v50 >> 60)
        v56 = v55 + 1;
      else
        v56 = v55;
      v57 = off_1E15AAF00[v56];
      *(_DWORD *)buf = 134219266;
      *(_QWORD *)&buf[4] = v47;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v46;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = v48;
      *(_WORD *)&buf[28] = 2048;
      *(double *)&buf[30] = v49;
      *(_WORD *)&buf[38] = 2048;
      *(double *)&buf[40] = v52;
      LOWORD(v247[0]) = 2080;
      *(_QWORD *)((char *)v247 + 2) = v57;
      _os_log_impl(&dword_184457000, v45, OS_LOG_TYPE_DEFAULT, "frame_id = %llu, oldest = %llu, status = %u, apl_dimming %f, memory_usage %.2lf %s", buf, 0x3Au);
    }
  }
  pthread_mutex_unlock(v11);
}

uint64_t CA::WindowServer::Server::flipbook_query_frame(CA::WindowServer::Server *this, CA::Render::Object *a2, _QWORD *a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  pthread_mutex_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;

  v4 = *((_QWORD *)a2 + 12);
  v5 = *(_QWORD *)(v4 + 320);
  if (*(_DWORD *)a3 == *(_DWORD *)(v4 + 24) && v5 != 0)
  {
    v8 = (pthread_mutex_t *)((char *)a2 + 24);
    pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 24));
    v9 = a3[1];
    os_unfair_lock_lock((os_unfair_lock_t)(v5 + 8));
    v10 = *(_QWORD *)(v5 + 80);
    v11 = *(_QWORD *)(v5 + 88);
    if (v10 == v11)
    {
      v13 = *(_QWORD *)(v5 + 128);
      v14 = *(_QWORD *)(v5 + 136);
      if (v13 == v14)
      {
        a3[2] = 0;
        goto LABEL_27;
      }
      v12 = 0;
    }
    else
    {
      if (*(_QWORD *)(v10 + 40) <= v9)
      {
        v15 = v10 + 104;
        do
        {
          v16 = v15;
          if (v15 == v11)
            break;
          v17 = *(_QWORD *)(v15 + 40);
          v15 += 104;
        }
        while (v17 <= v9);
        v12 = *(_QWORD *)(v16 - 72);
      }
      else
      {
        v12 = 0;
      }
      v13 = *(_QWORD *)(v5 + 128);
      v14 = *(_QWORD *)(v5 + 136);
      if (v13 == v14)
      {
        a3[2] = v12;
        goto LABEL_25;
      }
    }
    if (*(_QWORD *)(v13 + 40) <= v9)
    {
      v18 = v13 + 104;
      do
      {
        v19 = v18;
        if (v18 == v14)
          break;
        v20 = *(_QWORD *)(v18 + 40);
        v18 += 104;
      }
      while (v20 <= v9);
      v12 = *(_QWORD *)(v19 - 72);
    }
    a3[2] = v12;
    if (v10 == v11)
    {
      v21 = *(_QWORD *)(v13 + 32);
LABEL_26:
      a3[3] = v21;
LABEL_27:
      os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 8));
      return pthread_mutex_unlock(v8);
    }
LABEL_25:
    v21 = *(_QWORD *)(v10 + 32);
    goto LABEL_26;
  }
  return result;
}

uint64_t CA::WindowServer::Server::flipbook_query_memory_usage(CA::WindowServer::Server *this, CA::Render::Object *a2, _QWORD *a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  pthread_mutex_t *v8;
  uint64_t result;

  v4 = *((_QWORD *)a2 + 12);
  v5 = *(_QWORD *)(v4 + 320);
  if (*(_DWORD *)a3 == *(_DWORD *)(v4 + 24) && v5 != 0)
  {
    v8 = (pthread_mutex_t *)((char *)a2 + 24);
    pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 24));
    CA::WindowServer::FlipBook::recycle((os_unfair_lock_s *)v5);
    a3[1] = *(_QWORD *)(v5 + 72);
    return pthread_mutex_unlock(v8);
  }
  return result;
}

void CA::WindowServer::Server::flipbook_copy_current_frame(CA::WindowServer::Server *this, CA::Render::Object *a2, _QWORD *a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  pthread_mutex_t *v8;
  NSObject *v9;
  mach_port_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t v15[8];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a2 + 12);
  v5 = *(_QWORD *)(v4 + 320);
  if (*(_DWORD *)a3 != *(_DWORD *)(v4 + 24) || v5 == 0)
    return;
  v8 = (pthread_mutex_t *)((char *)a2 + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 24));
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v9 = x_log_category_flipbook;
    if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_184457000, v9, OS_LOG_TYPE_DEFAULT, "flipbook_copy_current_frame ()", v15, 2u);
    }
  }
  v10 = (mach_port_t *)a3[2];
  if (!v10)
    goto LABEL_22;
  if (CADeviceHasInternalDiagnostics::once != -1)
    dispatch_once(&CADeviceHasInternalDiagnostics::once, &__block_literal_global_110_9865);
  if (!CADeviceHasInternalDiagnostics::internal)
    goto LABEL_22;
  v11 = mach_continuous_time();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 8));
  v12 = *(_QWORD *)(v5 + 128);
  v13 = *(_QWORD *)(v5 + 136);
  if (v13 == v12)
    goto LABEL_21;
  while (1)
  {
    v14 = v13 - 104;
    if (*(_QWORD *)(v13 - 64) < v11)
      break;
LABEL_17:
    v13 -= 104;
    if (v14 == v12)
      goto LABEL_21;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 120))(v5, v13 - 104) & 1) == 0)
  {
    v12 = *(_QWORD *)(v5 + 128);
    goto LABEL_17;
  }
  a3[1] = *(_QWORD *)(v13 - 72);
  if (v13 != *(_QWORD *)(v5 + 128))
    CA::WindowServer::FlipBook::copy_surface(v5, *(IOSurfaceRef *)(v13 - 104), *(_BYTE *)(v13 - 8), v10);
LABEL_21:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 8));
LABEL_22:
  pthread_mutex_unlock(v8);
}

void CA::WindowServer::Server::flipbook_cancel(CA::WindowServer::Server *this, CA::Render::Object *a2, void *a3, void *a4)
{
  uint64_t v4;
  CA::WindowServer::FlipBook *v5;
  pthread_mutex_t *v8;
  NSObject *v9;
  unsigned __int8 v10;
  uint8_t buf[8];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a2 + 12);
  v5 = *(CA::WindowServer::FlipBook **)(v4 + 320);
  if (*(_DWORD *)a3 == *(_DWORD *)(v4 + 24) && v5 != 0)
  {
    v8 = (pthread_mutex_t *)((char *)a2 + 24);
    pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 24));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v9 = x_log_category_flipbook;
      if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v9, OS_LOG_TYPE_DEFAULT, "flipbook_cancel ()", buf, 2u);
      }
    }
    CA::WindowServer::FlipBook::cancel(v5, (unint64_t *)a3 + 1, &v10, *((unsigned int **)a3 + 2), 0);
    pthread_mutex_unlock(v8);
  }
}

void CA::WindowServer::Server::flipbook_modify(CA::WindowServer::Server *this, CA::Render::Object *a2, _DWORD *a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  pthread_mutex_t *v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __IOSurface *v18;
  uint64_t v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  NSObject *v23;
  NSObject *v24;
  char v25;
  NSObject *v26;
  char v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint8_t buf[4];
  _BYTE v34[10];
  double v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a2 + 12);
  v5 = *(_QWORD *)(v4 + 320);
  if (*a3 == *(_DWORD *)(v4 + 24) && v5 != 0)
  {
    v8 = (pthread_mutex_t *)((char *)a2 + 24);
    pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 24));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v9 = x_log_category_flipbook;
      if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v9, OS_LOG_TYPE_DEFAULT, "flipbook_modify ()", buf, 2u);
      }
    }
    v11 = a3[1];
    v10 = a3[2];
    switch(v11)
    {
      case 0:
        v12 = (os_unfair_lock_s *)(v5 + 8);
        os_unfair_lock_lock((os_unfair_lock_t)(v5 + 8));
        *(_QWORD *)(v5 + 64) = v10;
        CA::WindowServer::FlipBook::collect((CA::WindowServer::FlipBook *)v5);
        if (x_log_hook_p())
          goto LABEL_47;
        v19 = x_log_category_flipbook;
        if (!os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
          goto LABEL_51;
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)v34 = v10;
        v20 = "changing max size to %zu";
        v21 = v19;
        v22 = 12;
        goto LABEL_50;
      case 1:
        v13 = mach_absolute_time();
        v14 = CATimeWithHostTime(v13);
        v12 = (os_unfair_lock_s *)(v5 + 8);
        os_unfair_lock_lock((os_unfair_lock_t)(v5 + 8));
        v16 = *(_QWORD *)(v5 + 104);
        v15 = *(_QWORD *)(v5 + 112);
        if (v16 == v15)
        {
          v17 = 0;
        }
        else
        {
          v17 = 0;
          do
          {
            if ((*(_BYTE *)(v16 + 96) & 2) == 0)
            {
              IOSurfaceSetPurgeable(*(IOSurfaceRef *)v16, 1u, 0);
              v18 = *(__IOSurface **)(v16 + 16);
              if (v18)
                IOSurfaceSetPurgeable(v18, 1u, 0);
              *(_BYTE *)(v16 + 96) |= 2u;
              ++v17;
              v15 = *(_QWORD *)(v5 + 112);
            }
            v16 += 104;
          }
          while (v16 != v15);
        }
        if (x_log_hook_p())
        {
          v29 = mach_absolute_time();
          CATimeWithHostTime(v29);
LABEL_47:
          x_log_();
        }
        else
        {
          v30 = x_log_category_flipbook;
          if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
          {
            v31 = mach_absolute_time();
            v32 = CATimeWithHostTime(v31);
            *(_DWORD *)buf = 134218240;
            *(_QWORD *)v34 = v17;
            *(_WORD *)&v34[8] = 2048;
            v35 = (v32 - v14) * 1000.0;
            v20 = "%zu surfaces marked purgeable in %g ms";
            v21 = v30;
            v22 = 22;
LABEL_50:
            _os_log_impl(&dword_184457000, v21, OS_LOG_TYPE_DEFAULT, v20, buf, v22);
          }
        }
        goto LABEL_51;
      case 2:
        CA::WindowServer::FlipBook::free_surfaces((os_unfair_lock_s *)v5);
        break;
      case 3:
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v24 = x_log_category_flipbook;
          if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)v34 = v10 != 0;
            _os_log_impl(&dword_184457000, v24, OS_LOG_TYPE_DEFAULT, "set power saving requested %u", buf, 8u);
          }
        }
        v12 = (os_unfair_lock_s *)(v5 + 12);
        os_unfair_lock_lock((os_unfair_lock_t)(v5 + 12));
        v25 = *(_BYTE *)(v5 + 24);
        *(_BYTE *)(v5 + 24) = v25 & 0xF7 | (8 * ((_DWORD)v10 != 0));
        if ((v25 & 3) == 1)
          (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v5 + 72))(v5, (_DWORD)v10 != 0);
        goto LABEL_51;
      case 4:
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v26 = x_log_category_flipbook;
          if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)v34 = v10 != 0;
            _os_log_impl(&dword_184457000, v26, OS_LOG_TYPE_DEFAULT, "set one hz flipbook requested %u", buf, 8u);
          }
        }
        v12 = (os_unfair_lock_s *)(v5 + 12);
        os_unfair_lock_lock((os_unfair_lock_t)(v5 + 12));
        v27 = *(_BYTE *)(v5 + 24);
        *(_BYTE *)(v5 + 24) = v27 & 0xEF | (16 * ((_DWORD)v10 != 0));
        if ((v27 & 3) == 1)
          (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v5 + 80))(v5, (_DWORD)v10 != 0);
        goto LABEL_51;
      case 5:
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v28 = x_log_category_flipbook;
          if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)v34 = v10 != 0;
            _os_log_impl(&dword_184457000, v28, OS_LOG_TYPE_DEFAULT, "set cache frames on exit %u", buf, 8u);
          }
        }
        v12 = (os_unfair_lock_s *)(v5 + 12);
        os_unfair_lock_lock((os_unfair_lock_t)(v5 + 12));
        *(_BYTE *)(v5 + 24) = *(_BYTE *)(v5 + 24) & 0xDF | (32 * ((_DWORD)v10 != 0));
LABEL_51:
        os_unfair_lock_unlock(v12);
        break;
      default:
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v23 = x_log_category_flipbook;
          if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v34 = v11;
            *(_WORD *)&v34[4] = 1024;
            *(_DWORD *)&v34[6] = v10;
            _os_log_impl(&dword_184457000, v23, OS_LOG_TYPE_DEFAULT, "Unknown command 0x%x, 0x%x", buf, 0xEu);
          }
        }
        break;
    }
    pthread_mutex_unlock(v8);
  }
}

void CA::WindowServer::Server::content_stream_state_changed(CA::WindowServer::Server *this, CA::Render::Object *a2, _BYTE *a3, void *a4)
{
  uint64_t v6;
  uint64_t *stream_and_lock;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _QWORD *v44;
  _BYTE v45[32];
  __int128 v46;
  _BYTE v47[19];
  void *v48[2];
  __int128 v49;
  _OWORD v50[2];
  __int128 v51;
  __int128 v52;
  _BYTE v53[37];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_DWORD *)(*(_QWORD *)a3 + 4))
  {
    if (a3[9])
    {
      if ((*(uint64_t (**)(CA::Render::Object *))(*(_QWORD *)a2 + 392))(a2))
      {
        v6 = *(_QWORD *)(*(uint64_t (**)(CA::Render::Object *))(*(_QWORD *)a2 + 392))(a2);
        stream_and_lock = (uint64_t *)CA::Render::ContentStream::get_or_create_stream_and_lock((CA::Render::ContentStream *)**(unsigned int **)a3, 0, 0);
        if (stream_and_lock)
        {
          v8 = stream_and_lock;
          CA::Render::release_surfaces(stream_and_lock + 39, (uint64_t)(stream_and_lock + 45));
          CA::Render::release_surfaces(v8 + 42, (uint64_t)(v8 + 45));
          CA::Render::release_single_iosurface((uint64_t)(v8 + 36), (uint64_t)(v8 + 45));
          if (((unint64_t)(v8[46] - v8[45]) >> 3))
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
            v8[46] = v8[45];
          }
          pthread_mutex_unlock((pthread_mutex_t *)v8);
        }
      }
    }
    v9 = a3[8];
    v10 = *(_QWORD *)a3;
    pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 24));
    v12 = *((_QWORD *)a2 + 60);
    v11 = (_DWORD *)*((_QWORD *)a2 + 61);
    v13 = *(_DWORD *)v10;
    if (v9)
    {
      v14 = (_DWORD *)*((_QWORD *)a2 + 60);
      if ((_DWORD *)v12 != v11)
      {
        while (*v14 != v13)
        {
          v14 += 50;
          if (v14 == v11)
            goto LABEL_14;
        }
      }
      if (v14 == v11)
      {
LABEL_14:
        v15 = *((_QWORD *)a2 + 62);
        if ((unint64_t)v11 >= v15)
        {
          v29 = 0x8F5C28F5C28F5C29 * (((uint64_t)v11 - v12) >> 3);
          v30 = v29 + 1;
          if (v29 + 1 > 0x147AE147AE147AELL)
            abort();
          v31 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v15 - v12) >> 3);
          if (2 * v31 > v30)
            v30 = 2 * v31;
          if (v31 >= 0xA3D70A3D70A3D7)
            v32 = 0x147AE147AE147AELL;
          else
            v32 = v30;
          if (v32)
          {
            if (v32 > 0x147AE147AE147AELL)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v33 = (char *)operator new(200 * v32);
          }
          else
          {
            v33 = 0;
          }
          v34 = (uint64_t)&v33[200 * v29];
          v35 = &v33[200 * v32];
          std::construct_at[abi:nn180100]<CA::Render::ContentStreamConfig,CA::Render::ContentStreamConfig const&,CA::Render::ContentStreamConfig*>(v34, v10);
          v16 = v34 + 200;
          v37 = (_QWORD *)*((_QWORD *)a2 + 60);
          v36 = (_QWORD *)*((_QWORD *)a2 + 61);
          if (v36 == v37)
          {
            *((_QWORD *)a2 + 60) = v34;
            *((_QWORD *)a2 + 61) = v16;
            *((_QWORD *)a2 + 62) = v35;
          }
          else
          {
            v38 = 0;
            do
            {
              v39 = v34 + v38 * 8;
              *(_OWORD *)(v39 - 200) = *(_OWORD *)&v36[v38 - 25];
              v40 = *(_OWORD *)&v36[v38 - 23];
              v41 = *(_OWORD *)&v36[v38 - 21];
              v42 = *(_OWORD *)&v36[v38 - 19];
              *(_DWORD *)(v39 - 137) = *(_DWORD *)((char *)&v36[v38 - 17] - 1);
              *(_OWORD *)(v39 - 152) = v42;
              *(_OWORD *)(v39 - 168) = v41;
              *(_OWORD *)(v39 - 184) = v40;
              X::small_vector_base<unsigned int>::small_vector_base((int **)(v34 + v38 * 8 - 128), (int **)&v36[v38 - 16], (int *)(v34 + v38 * 8 - 96));
              X::small_vector_base<unsigned int>::small_vector_base((int **)(v39 - 64), (int **)&v36[v38 - 8], (int *)(v39 - 32));
              v38 -= 25;
            }
            while (&v36[v38] != v37);
            v43 = v34 + v38 * 8;
            v44 = (_QWORD *)*((_QWORD *)a2 + 60);
            v36 = (_QWORD *)*((_QWORD *)a2 + 61);
            *((_QWORD *)a2 + 60) = v43;
            *((_QWORD *)a2 + 61) = v16;
            *((_QWORD *)a2 + 62) = v35;
            if (v36 != v44)
            {
              do
              {
                v36 -= 25;
                std::__destroy_at[abi:nn180100]<CA::Render::ContentStreamConfig,0>(v36);
              }
              while (v36 != v44);
              v36 = v44;
            }
          }
          if (v36)
            operator delete(v36);
        }
        else
        {
          std::construct_at[abi:nn180100]<CA::Render::ContentStreamConfig,CA::Render::ContentStreamConfig const&,CA::Render::ContentStreamConfig*>(*((_QWORD *)a2 + 61), v10);
          v16 = (uint64_t)(v11 + 50);
        }
        *((_QWORD *)a2 + 61) = v16;
        *(_DWORD *)(*((_QWORD *)a2 + 12) + 745) |= 0x400u;
        *(_QWORD *)v45 = 0;
        *(int64x2_t *)&v45[8] = vdupq_n_s64(0x20000000000uLL);
        (*(void (**)(CA::Render::Object *, _BYTE *, double))(*(_QWORD *)a2 + 184))(a2, v45, 0.0);
      }
      pthread_mutex_unlock((pthread_mutex_t *)((char *)a2 + 24));
    }
    else
    {
      if ((_DWORD *)v12 != v11)
      {
        while (*(_DWORD *)v12 != v13)
        {
          v12 += 200;
          if ((_DWORD *)v12 == v11)
            goto LABEL_33;
        }
      }
      if ((_DWORD *)v12 != v11)
      {
        v17 = v11 - 50;
        memset(v53, 0, sizeof(v53));
        v52 = 0u;
        v51 = 0u;
        memset(v50, 0, sizeof(v50));
        v49 = 0u;
        *(_OWORD *)v48 = 0u;
        *(_OWORD *)v45 = *(_OWORD *)v12;
        v18 = *(_OWORD *)(v12 + 16);
        v19 = *(_OWORD *)(v12 + 32);
        v20 = *(_OWORD *)(v12 + 48);
        *(_DWORD *)&v47[15] = *(_DWORD *)(v12 + 63);
        v46 = v19;
        *(_OWORD *)v47 = v20;
        *(_OWORD *)&v45[16] = v18;
        X::small_vector_base<unsigned int>::small_vector_base((int **)((char *)v48 + 5), (int **)(v12 + 72), (int *)((char *)v50 + 5));
        X::small_vector_base<unsigned int>::small_vector_base((int **)((char *)&v51 + 5), (int **)(v12 + 136), (int *)&v53[5]);
        *(_OWORD *)v12 = *(_OWORD *)(v11 - 50);
        v21 = *(_OWORD *)(v11 - 46);
        v22 = *(_OWORD *)(v11 - 42);
        v23 = *(_OWORD *)(v11 - 38);
        *(_DWORD *)(v12 + 63) = *(_DWORD *)((char *)v11 - 137);
        *(_OWORD *)(v12 + 32) = v22;
        *(_OWORD *)(v12 + 48) = v23;
        *(_OWORD *)(v12 + 16) = v21;
        if ((_DWORD *)v12 != v11 - 50)
        {
          X::small_vector_base<unsigned int>::move(v12 + 72, (uint64_t)(v11 - 32), (_DWORD *)(v12 + 104));
          X::small_vector_base<unsigned int>::move(v12 + 136, (uint64_t)(v11 - 16), (_DWORD *)(v12 + 168));
        }
        *(_OWORD *)v17 = *(_OWORD *)v45;
        v24 = *(_OWORD *)&v45[16];
        v25 = v46;
        v26 = *(_OWORD *)v47;
        *(_DWORD *)((char *)v11 - 137) = *(_DWORD *)&v47[15];
        *(_OWORD *)(v11 - 42) = v25;
        *(_OWORD *)(v11 - 38) = v26;
        *(_OWORD *)(v11 - 46) = v24;
        if (v45 != v17)
        {
          X::small_vector_base<unsigned int>::move((uint64_t)(v11 - 32), (uint64_t)v48 + 5, v11 - 24);
          X::small_vector_base<unsigned int>::move((uint64_t)(v11 - 16), (uint64_t)&v51 + 5, v11 - 8);
        }
        if (*(_QWORD *)((char *)&v51 + 5) != *(_QWORD *)((char *)&v52 + 5))
          free(*(void **)((char *)&v51 + 5));
        if (*(void **)((char *)v48 + 5) != *(void **)((char *)&v49 + 5))
          free(*(void **)((char *)v48 + 5));
        v27 = (_QWORD *)(*((_QWORD *)a2 + 61) - 200);
        std::__destroy_at[abi:nn180100]<CA::Render::ContentStreamConfig,0>(v27);
        *((_QWORD *)a2 + 61) = v27;
        if ((*(_BYTE *)(v10 + 66) & 1) != 0)
          v28 = 4;
        else
          v28 = 3;
        CA::WindowServer::Server::notify_content_streams((uint64_t)a2, v28);
      }
LABEL_33:
      pthread_mutex_unlock((pthread_mutex_t *)((char *)a2 + 24));
    }
  }
}

void CA::WindowServer::Server::content_stream_modified(CA::WindowServer::Server *this, CA::Render::Object *a2, int *a3, void *a4)
{
  __IOSurface *v4;
  unsigned int *v5;
  const __CFString **v6;
  int v7;
  CA::Render::ContentStream *v8;
  char v9;
  _DWORD *stream_and_lock;
  _DWORD *v11;
  const __CFString **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFStringRef v16;
  unsigned int v17;
  int v18;
  __IOSurface *v19;
  const __CFString *v20;
  CGColorSpace *v21;
  IOSurfaceID ID;
  CGColorSpace *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t *v27;
  uint64_t v28;
  CGColorSpace *v29;
  uint64_t v30;
  const __CFString *v31;
  CGColorSpaceRef v32;
  CGColorSpace *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  char *v39;
  CFStringRef v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  CGColorSpace *v44;
  char v45;
  mach_port_t MachPort;
  IOSurfaceID v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  CGColorSpace *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  __int128 v59;
  NSObject *v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  NSObject *v65;
  uint32_t v66;
  uint64_t v67;
  unsigned int v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  const __CFString *v73;
  void *v74;
  malloc_zone_t *malloc_zone;
  malloc_zone_t *v76;
  const void **v77;
  const void **v78;
  CGColorSpace *v79;
  void *v80;
  void *v81;
  int v82;
  NSObject *v83;
  unsigned int v84;
  unsigned int v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  NSObject *v90;
  const void *v91;
  const __CFString **v92;
  void *v93;
  const __CFString *v94;
  const void *v95;
  const __CFString **v96;
  void *v97;
  const __CFString *v98;
  const void *v99;
  void *v100;
  void *v101;
  void *v102;
  const void *v103;
  void *v104;
  const void *v105;
  const __CFString **v106;
  void *v107;
  const __CFString *v108;
  void *v109;
  CFDataRef v110;
  const void *v111;
  const __CFString **v112;
  void *v113;
  const void *v114;
  const __CFString **v115;
  void *v116;
  const void **v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  NSObject *v124;
  char *v125;
  uint64_t v126;
  IOSurfaceID v127;
  unsigned int *v128;
  CGColorSpace *space;
  __IOSurface *v130;
  BOOL v131;
  const __CFString **v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *__p[2];
  char *v138;
  uint8_t buf[8];
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint8_t v144[16];
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  int v151;
  uint64_t v152;

  v152 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int **)a3;
  if (*(_DWORD *)(*((_QWORD *)a2 + 12) + 24) != *(_DWORD *)(*(_QWORD *)a3 + 4))
    return;
  v6 = (const __CFString **)a3;
  v7 = *((unsigned __int8 *)v5 + 65);
  v8 = (CA::Render::ContentStream *)a3[2];
  if (v7 == 2)
  {
    v9 = CA::Render::ContentStream::destroy_stream(v8, a2, (uint64_t)a3, (int)a4);
    goto LABEL_185;
  }
  stream_and_lock = CA::Render::ContentStream::get_or_create_stream_and_lock(v8, a3[3], *v5);
  if (!stream_and_lock)
  {
    v9 = 0;
    goto LABEL_185;
  }
  v11 = stream_and_lock;
  v12 = (const __CFString **)MEMORY[0x1E0C9D960];
  v131 = v7 == 1;
  if (v5[2] != stream_and_lock[18]
    || *((unsigned __int8 *)v5 + 58) != *((unsigned __int8 *)stream_and_lock + 76)
    || v5[3] != stream_and_lock[20]
    || v5[4] != stream_and_lock[21]
    || *((unsigned __int8 *)v5 + 59) != *((unsigned __int8 *)stream_and_lock + 77)
    || *((unsigned __int8 *)v5 + 60) != *((unsigned __int8 *)stream_and_lock + 78))
  {
    v132 = v6;
    LODWORD(v6) = stream_and_lock[70];
    v4 = (__IOSurface *)&unk_1ECDC6000;
      goto LABEL_190;
    goto LABEL_15;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)stream_and_lock + 40) - *((_QWORD *)stream_and_lock + 39)) >> 3)
     - 0x5555555555555555 * ((uint64_t)(*((_QWORD *)stream_and_lock + 43) - *((_QWORD *)stream_and_lock + 42)) >> 3) != *((unsigned __int16 *)v5 + 28))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v124 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v144 = 0;
        _os_log_impl(&dword_184457000, v124, OS_LOG_TYPE_ERROR, "Inplace modification of queue depth is not supported yet", v144, 2u);
      }
    }
  }
  while (1)
  {
    v11[17] = v5[1];
    v11[31] = v5[13];
    *((_BYTE *)v11 + 128) = v11[32] & 0xFE | ((*((_BYTE *)v5 + 66) & 2) != 0);
    *((_BYTE *)v11 + 129) = *((_BYTE *)v5 + 66) & 1;
    *(_OWORD *)(v11 + 22) = *(_OWORD *)(v5 + 5);
    *(_OWORD *)(v11 + 26) = *(_OWORD *)(v5 + 9);
    *((_BYTE *)v11 + 120) = *((_BYTE *)v5 + 61);
    *((_BYTE *)v11 + 121) = *((_BYTE *)v5 + 62);
    *((_BYTE *)v11 + 122) = *((_BYTE *)v5 + 63);
    *((_BYTE *)v11 + 123) = *((_BYTE *)v5 + 64);
    CGColorSpaceRelease(*((CGColorSpaceRef *)v11 + 33));
    v71 = *((unsigned __int8 *)v11 + 76);
    v144[0] = 0;
    get_colorspace_map(v144);
    if (v144[0] <= v71)
      v72 = 0;
    else
      v72 = get_colorspace_map(unsigned char *)::space_names[v71];
    if (v72)
      v73 = (const __CFString *)v72;
    else
      v73 = *v12;
    *((_QWORD *)v11 + 33) = CGColorSpaceCreateWithName(v73);
    v74 = (void *)*((_QWORD *)v11 + 34);
    if (v74)
    {
      CA::VideoToolbox::~VideoToolbox(*((CFTypeRef **)v11 + 34));
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(malloc_zone, v74);
    }
    v76 = (malloc_zone_t *)get_malloc_zone();
    v77 = (const void **)malloc_type_zone_calloc(v76, 1uLL, 0x10uLL, 0x743898A5uLL);
    v78 = v77;
    if (!v77)
      goto LABEL_183;
    v79 = (CGColorSpace *)*((_QWORD *)v11 + 33);
    v5 = (unsigned int *)*((unsigned __int8 *)v11 + 77);
    *v77 = 0;
    *((_BYTE *)v77 + 8) = 1;
    *(_QWORD *)v144 = 0;
    *(_QWORD *)&v144[8] = v144;
    *(_QWORD *)&v145 = 0x2020000000;
    v80 = getVTPixelTransferSessionCreateSymbolLoc(void)::ptr;
    *((_QWORD *)&v145 + 1) = getVTPixelTransferSessionCreateSymbolLoc(void)::ptr;
    if (!getVTPixelTransferSessionCreateSymbolLoc(void)::ptr)
    {
      v81 = (void *)VideoToolboxLibrary();
      v80 = dlsym(v81, "VTPixelTransferSessionCreate");
      *(_QWORD *)(*(_QWORD *)&v144[8] + 24) = v80;
      getVTPixelTransferSessionCreateSymbolLoc(void)::ptr = v80;
    }
    _Block_object_dispose(v144, 8);
    if (v80)
    {
      v82 = ((uint64_t (*)(_QWORD, const void **))v80)(0, v78);
      if (v82 || (v91 = *v78) == 0)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v90 = x_log_category_utilities;
          if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v144 = 67109120;
            *(_DWORD *)&v144[4] = v82;
            _os_log_impl(&dword_184457000, v90, OS_LOG_TYPE_ERROR, "Failed to allocate VTPixelTransferSession: %d", v144, 8u);
          }
        }
LABEL_183:
        *((_QWORD *)v11 + 34) = v78;
        v9 = 1;
        goto LABEL_184;
      }
      v4 = (__IOSurface *)v6;
      *(_QWORD *)v144 = 0;
      *(_QWORD *)&v144[8] = v144;
      *(_QWORD *)&v145 = 0x2020000000;
      v6 = (const __CFString **)&unk_1EDD13000;
      v92 = (const __CFString **)getkVTPixelTransferPropertyKey_EnableHardwareAcceleratedTransferSymbolLoc(void)::ptr;
      *((_QWORD *)&v145 + 1) = getkVTPixelTransferPropertyKey_EnableHardwareAcceleratedTransferSymbolLoc(void)::ptr;
      if (!getkVTPixelTransferPropertyKey_EnableHardwareAcceleratedTransferSymbolLoc(void)::ptr)
      {
        v93 = (void *)VideoToolboxLibrary();
        v92 = (const __CFString **)dlsym(v93, "kVTPixelTransferPropertyKey_EnableHardwareAcceleratedTransfer");
        *(_QWORD *)(*(_QWORD *)&v144[8] + 24) = v92;
        getkVTPixelTransferPropertyKey_EnableHardwareAcceleratedTransferSymbolLoc(void)::ptr = (uint64_t)v92;
      }
      v12 = (const __CFString **)v144;
      _Block_object_dispose(v144, 8);
      if (v92)
      {
        v94 = *v92;
        v95 = (const void *)*MEMORY[0x1E0C9AE40];
        VTSessionSetPropertyFunc(v91, v94, (const void *)*MEMORY[0x1E0C9AE40]);
        v6 = (const __CFString **)*v78;
        *(_QWORD *)v144 = 0;
        *(_QWORD *)&v144[8] = v144;
        *(_QWORD *)&v145 = 0x2020000000;
        v96 = (const __CFString **)getkVTPixelTransferPropertyKey_EnableGPUAcceleratedTransferSymbolLoc(void)::ptr;
        *((_QWORD *)&v145 + 1) = getkVTPixelTransferPropertyKey_EnableGPUAcceleratedTransferSymbolLoc(void)::ptr;
        if (!getkVTPixelTransferPropertyKey_EnableGPUAcceleratedTransferSymbolLoc(void)::ptr)
        {
          v97 = (void *)VideoToolboxLibrary();
          v96 = (const __CFString **)dlsym(v97, "kVTPixelTransferPropertyKey_EnableGPUAcceleratedTransfer");
          *(_QWORD *)(*(_QWORD *)&v144[8] + 24) = v96;
          getkVTPixelTransferPropertyKey_EnableGPUAcceleratedTransferSymbolLoc(void)::ptr = (uint64_t)v96;
        }
        v12 = (const __CFString **)v144;
        _Block_object_dispose(v144, 8);
        if (v96)
        {
          v98 = *v96;
          v99 = (const void *)*MEMORY[0x1E0C9AE50];
          VTSessionSetPropertyFunc(v6, v98, (const void *)*MEMORY[0x1E0C9AE50]);
          v6 = (const __CFString **)*v78;
          *(_QWORD *)v144 = 0;
          *(_QWORD *)&v144[8] = v144;
          *(_QWORD *)&v145 = 0x2020000000;
          v12 = (const __CFString **)getkVTPixelTransferPropertyKey_EnableSoftwareTransferSymbolLoc(void)::ptr;
          *((_QWORD *)&v145 + 1) = getkVTPixelTransferPropertyKey_EnableSoftwareTransferSymbolLoc(void)::ptr;
          if (!getkVTPixelTransferPropertyKey_EnableSoftwareTransferSymbolLoc(void)::ptr)
          {
            v100 = (void *)VideoToolboxLibrary();
            v12 = (const __CFString **)dlsym(v100, "kVTPixelTransferPropertyKey_EnableSoftwareTransfer");
            *(_QWORD *)(*(_QWORD *)&v144[8] + 24) = v12;
            getkVTPixelTransferPropertyKey_EnableSoftwareTransferSymbolLoc(void)::ptr = (uint64_t)v12;
          }
          _Block_object_dispose(v144, 8);
          if (v12)
          {
            VTSessionSetPropertyFunc(v6, *v12, v95);
            v6 = (const __CFString **)*v78;
            *(_QWORD *)v144 = 0;
            *(_QWORD *)&v144[8] = v144;
            *(_QWORD *)&v145 = 0x2020000000;
            v12 = (const __CFString **)getkVTPixelTransferPropertyKey_RealTimeSymbolLoc(void)::ptr;
            *((_QWORD *)&v145 + 1) = getkVTPixelTransferPropertyKey_RealTimeSymbolLoc(void)::ptr;
            if (!getkVTPixelTransferPropertyKey_RealTimeSymbolLoc(void)::ptr)
            {
              v101 = (void *)VideoToolboxLibrary();
              v12 = (const __CFString **)dlsym(v101, "kVTPixelTransferPropertyKey_RealTime");
              *(_QWORD *)(*(_QWORD *)&v144[8] + 24) = v12;
              getkVTPixelTransferPropertyKey_RealTimeSymbolLoc(void)::ptr = (uint64_t)v12;
            }
            _Block_object_dispose(v144, 8);
            if (v12)
            {
              VTSessionSetPropertyFunc(v6, *v12, v99);
              v6 = (const __CFString **)*v78;
              *(_QWORD *)v144 = 0;
              *(_QWORD *)&v144[8] = v144;
              *(_QWORD *)&v145 = 0x2020000000;
              v12 = (const __CFString **)getkVTPixelTransferPropertyKey_EnableHighSpeedTransferSymbolLoc(void)::ptr;
              *((_QWORD *)&v145 + 1) = getkVTPixelTransferPropertyKey_EnableHighSpeedTransferSymbolLoc(void)::ptr;
              if (!getkVTPixelTransferPropertyKey_EnableHighSpeedTransferSymbolLoc(void)::ptr)
              {
                v102 = (void *)VideoToolboxLibrary();
                v12 = (const __CFString **)dlsym(v102, "kVTPixelTransferPropertyKey_EnableHighSpeedTransfer");
                *(_QWORD *)(*(_QWORD *)&v144[8] + 24) = v12;
                getkVTPixelTransferPropertyKey_EnableHighSpeedTransferSymbolLoc(void)::ptr = (uint64_t)v12;
              }
              _Block_object_dispose(v144, 8);
              if (v12)
              {
                VTSessionSetPropertyFunc(v6, *v12, v99);
                v103 = *v78;
                *(_QWORD *)v144 = 0;
                *(_QWORD *)&v144[8] = v144;
                *(_QWORD *)&v145 = 0x2020000000;
                v6 = (const __CFString **)getkVTPixelTransferPropertyKey_WriteBlackPixelsOutsideDestRectSymbolLoc(void)::ptr;
                *((_QWORD *)&v145 + 1) = getkVTPixelTransferPropertyKey_WriteBlackPixelsOutsideDestRectSymbolLoc(void)::ptr;
                if (!getkVTPixelTransferPropertyKey_WriteBlackPixelsOutsideDestRectSymbolLoc(void)::ptr)
                {
                  v104 = (void *)VideoToolboxLibrary();
                  v6 = (const __CFString **)dlsym(v104, "kVTPixelTransferPropertyKey_WriteBlackPixelsOutsideDestRect");
                  *(_QWORD *)(*(_QWORD *)&v144[8] + 24) = v6;
                  getkVTPixelTransferPropertyKey_WriteBlackPixelsOutsideDestRectSymbolLoc(void)::ptr = (uint64_t)v6;
                }
                v12 = (const __CFString **)v144;
                _Block_object_dispose(v144, 8);
                if (v6)
                {
                  VTSessionSetPropertyFunc(v103, *v6, v95);
                  v105 = *v78;
                  *(_QWORD *)v144 = 0;
                  *(_QWORD *)&v144[8] = v144;
                  *(_QWORD *)&v145 = 0x2020000000;
                  v106 = (const __CFString **)getkVTPixelTransferPropertyKey_DownsamplingModeSymbolLoc(void)::ptr;
                  *((_QWORD *)&v145 + 1) = getkVTPixelTransferPropertyKey_DownsamplingModeSymbolLoc(void)::ptr;
                  if (!getkVTPixelTransferPropertyKey_DownsamplingModeSymbolLoc(void)::ptr)
                  {
                    v107 = (void *)VideoToolboxLibrary();
                    v106 = (const __CFString **)dlsym(v107, "kVTPixelTransferPropertyKey_DownsamplingMode");
                    *(_QWORD *)(*(_QWORD *)&v144[8] + 24) = v106;
                    getkVTPixelTransferPropertyKey_DownsamplingModeSymbolLoc(void)::ptr = (uint64_t)v106;
                  }
                  v6 = (const __CFString **)v144;
                  _Block_object_dispose(v144, 8);
                  if (v106)
                  {
                    v108 = *v106;
                    *(_QWORD *)v144 = 0;
                    *(_QWORD *)&v144[8] = v144;
                    *(_QWORD *)&v145 = 0x2020000000;
                    v6 = (const __CFString **)getkVTDownsamplingMode_AverageSymbolLoc(void)::ptr;
                    *((_QWORD *)&v145 + 1) = getkVTDownsamplingMode_AverageSymbolLoc(void)::ptr;
                    if (!getkVTDownsamplingMode_AverageSymbolLoc(void)::ptr)
                    {
                      v109 = (void *)VideoToolboxLibrary();
                      v6 = (const __CFString **)dlsym(v109, "kVTDownsamplingMode_Average");
                      *(_QWORD *)(*(_QWORD *)&v144[8] + 24) = v6;
                      getkVTDownsamplingMode_AverageSymbolLoc(void)::ptr = (uint64_t)v6;
                    }
                    v12 = (const __CFString **)v144;
                    _Block_object_dispose(v144, 8);
                    if (v6)
                    {
                      VTSessionSetPropertyFunc(v105, v108, *v6);
                      v110 = CGColorSpaceCopyICCData(v79);
                      v111 = *v78;
                      *(_QWORD *)v144 = 0;
                      *(_QWORD *)&v144[8] = v144;
                      *(_QWORD *)&v145 = 0x2020000000;
                      v112 = (const __CFString **)getkVTPixelTransferPropertyKey_DestinationICCProfileSymbolLoc(void)::ptr;
                      *((_QWORD *)&v145 + 1) = getkVTPixelTransferPropertyKey_DestinationICCProfileSymbolLoc(void)::ptr;
                      if (!getkVTPixelTransferPropertyKey_DestinationICCProfileSymbolLoc(void)::ptr)
                      {
                        v113 = (void *)VideoToolboxLibrary();
                        v112 = (const __CFString **)dlsym(v113, "kVTPixelTransferPropertyKey_DestinationICCProfile");
                        *(_QWORD *)(*(_QWORD *)&v144[8] + 24) = v112;
                        getkVTPixelTransferPropertyKey_DestinationICCProfileSymbolLoc(void)::ptr = (uint64_t)v112;
                      }
                      v6 = (const __CFString **)v144;
                      _Block_object_dispose(v144, 8);
                      if (v112)
                      {
                        VTSessionSetPropertyFunc(v111, *v112, v110);
                        CFRelease(v110);
                        v114 = *v78;
                        *(_QWORD *)v144 = 0;
                        *(_QWORD *)&v144[8] = v144;
                        *(_QWORD *)&v145 = 0x2020000000;
                        v115 = (const __CFString **)getkVTPixelTransferPropertyKey_DestinationYCbCrMatrixSymbolLoc(void)::ptr;
                        *((_QWORD *)&v145 + 1) = getkVTPixelTransferPropertyKey_DestinationYCbCrMatrixSymbolLoc(void)::ptr;
                        v6 = (const __CFString **)v4;
                        if (!getkVTPixelTransferPropertyKey_DestinationYCbCrMatrixSymbolLoc(void)::ptr)
                        {
                          v116 = (void *)VideoToolboxLibrary();
                          v115 = (const __CFString **)dlsym(v116, "kVTPixelTransferPropertyKey_DestinationYCbCrMatrix");
                          *(_QWORD *)(*(_QWORD *)&v144[8] + 24) = v115;
                          getkVTPixelTransferPropertyKey_DestinationYCbCrMatrixSymbolLoc(void)::ptr = (uint64_t)v115;
                        }
                        _Block_object_dispose(v144, 8);
                        if (v115)
                        {
                          switch((int)v5)
                          {
                            case 6:
                              v117 = (const void **)MEMORY[0x1E0CA8F10];
                              break;
                            case 7:
                              v117 = (const void **)MEMORY[0x1E0CA8F30];
                              break;
                            case 8:
                            case 10:
                            case 11:
                            case 12:
                            case 13:
                              goto LABEL_177;
                            case 9:
                              v117 = (const void **)MEMORY[0x1E0CA8F00];
                              break;
                            case 14:
                              v117 = (const void **)MEMORY[0x1E0CA8F08];
                              break;
                            default:
                              if ((_DWORD)v5 == 1)
                              {
                                v117 = (const void **)MEMORY[0x1E0CA8F18];
                              }
                              else if ((_DWORD)v5 == 248)
                              {
                                v117 = (const void **)MEMORY[0x1E0CA8EF8];
                              }
                              else
                              {
LABEL_177:
                                v117 = (const void **)MEMORY[0x1E0CA8F20];
                              }
                              break;
                          }
                          VTSessionSetPropertyFunc(v114, *v115, *v117);
                          goto LABEL_183;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v125 = dlerror();
    abort_report_np();
LABEL_190:
LABEL_15:
    v15 = *MEMORY[0x1E0C85AD8];
    v16 = CFStringCreateWithFormat(0, 0, CFSTR("CAContentStreamIntermediateSurf"), v125, v126);
    v17 = v5[3];
    v18 = v5[4];
    *(_QWORD *)v144 = v13;
    *(_QWORD *)&v144[8] = v14;
    *(_QWORD *)&v145 = 1;
    *((_QWORD *)&v145 + 1) = v15;
    *(_QWORD *)&v146 = 0;
    v19 = CA::SurfaceUtil::CAIOSurfaceCreate(v17, v18, 1647534392, 0, 0, 0, 0, v144, v16);
    CFRelease(v16);
    v20 = *v12;
    v21 = CGColorSpaceCreateWithName(*v12);
    if (v19)
    {
      ID = IOSurfaceGetID(v19);
      CA::Render::iosurface_set_colorspace(v19, v21, v23);
      v24 = IOSurfaceSetOwnershipIdentity();
      if (!(_DWORD)v24)
        goto LABEL_26;
      v25 = v24;
      if (x_log_hook_p())
      {
        v126 = v25;
        x_log_();
      }
      else
      {
        v26 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = (_DWORD)v6;
          LOWORD(v140) = 1024;
          *(_DWORD *)((char *)&v140 + 2) = v25;
          _os_log_impl(&dword_184457000, v26, OS_LOG_TYPE_ERROR, "Failed to set ownership on task %u err : 0x%x", buf, 0xEu);
        }
      }
      CFRelease(v19);
LABEL_25:
      v19 = 0;
      ID = 0;
LABEL_26:
      v27 = (uint64_t *)MEMORY[0x1E0C85AD8];
      if (!v21)
        goto LABEL_28;
LABEL_27:
      CFRelease(v21);
      goto LABEL_28;
    }
    if (x_log_hook_p())
    {
      x_log_();
      goto LABEL_25;
    }
    v60 = x_log_category_render;
    v61 = os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR);
    v27 = (uint64_t *)MEMORY[0x1E0C85AD8];
    if (v61)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184457000, v60, OS_LOG_TYPE_ERROR, "Failed to create intermediate iosurface", buf, 2u);
    }
    v19 = 0;
    ID = 0;
    if (v21)
      goto LABEL_27;
LABEL_28:
    v136 = v11[16];
    v133 = v11[70];
    v130 = v19;
    if (*((_QWORD *)v4 + 169) != -1)
    v134 = *v27;
    v29 = CGColorSpaceCreateWithName(v20);
    v30 = *((unsigned __int8 *)v5 + 58);
    v144[0] = 0;
    get_colorspace_map(v144);
    v127 = ID;
    if (v144[0] <= v30)
      goto LABEL_33;
    v31 = (const __CFString *)get_colorspace_map(unsigned char *)::space_names[v30];
    if (v31)
      v32 = CGColorSpaceCreateWithName(v31);
    else
LABEL_33:
      v32 = CGColorSpaceRetain(v29);
    v33 = v32;
    __p[0] = 0;
    __p[1] = 0;
    v138 = 0;
    space = v29;
    if (*((_WORD *)v5 + 28))
    {
      v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(*((unsigned __int16 *)v5 + 28));
      v35 = v34;
      __p[0] = v34;
      __p[1] = v34;
      v138 = &v34[24 * v36];
      v37 = *((unsigned __int16 *)v5 + 28);
      if (*((_WORD *)v5 + 28))
      {
        v38 = 0;
        v39 = v34;
        v128 = v5;
        while (1)
        {
          v126 = v37 + ~v38;
          v40 = CFStringCreateWithFormat(0, 0, CFSTR("CAContentStream(%u)Surf(%u)"), v136);
          v41 = v5[3];
          v42 = v5[4];
          v43 = v5[2];
          *(_QWORD *)buf = v28;
          v140 = v135;
          v141 = 1;
          v142 = v134;
          v143 = 0;
          v4 = CA::SurfaceUtil::CAIOSurfaceCreate(v41, v42, v43, 0, 0, 4u, 0, buf, v40);
          CFRelease(v40);
          if (!v4)
            goto LABEL_76;
          CA::Render::iosurface_set_colorspace(v4, v33, v44);
          if (CA::Render::ycbcr_fourcc_depth((CA::Render *)v5[2]))
          {
            v45 = *((_BYTE *)v5 + 59);
            v151 = 0;
            v149 = 0u;
            v150 = 0u;
            v147 = 0u;
            v148 = 0u;
            v145 = 0u;
            v146 = 0u;
            *(_OWORD *)v144 = 0u;
            BYTE10(v147) = v45;
            IOSurfaceSetBulkAttachments2();
            v151 = 0;
            v149 = 0u;
            v150 = 0u;
            v147 = 0u;
            v148 = 0u;
            v145 = 0u;
            v146 = 0u;
            *(_OWORD *)v144 = 0u;
            *(_WORD *)((char *)&v147 + 13) = 257;
            IOSurfaceSetBulkAttachments2();
          }
          MachPort = IOSurfaceCreateMachPort(v4);
          v47 = IOSurfaceGetID(v4);
          if (MachPort - 1 >= 0xFFFFFFFE)
            break;
          v48 = IOSurfaceSetOwnershipIdentity();
          if ((_DWORD)v48)
          {
            v62 = v48;
            mach_port_deallocate(*MEMORY[0x1E0C83DA0], MachPort);
            CFRelease(v4);
            if (x_log_hook_p())
            {
              v126 = v62;
LABEL_70:
              x_log_();
              goto LABEL_76;
            }
            v67 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v144 = 67109376;
              *(_DWORD *)&v144[4] = v133;
              *(_WORD *)&v144[8] = 1024;
              *(_DWORD *)&v144[10] = v62;
              v64 = "Failed to set ownership on task %u err : 0x%x";
              v65 = v67;
              v66 = 14;
              goto LABEL_75;
            }
            goto LABEL_76;
          }
          if (v39 >= v138)
          {
            v49 = v11;
            v50 = v28;
            v51 = v33;
            v52 = (char *)__p[0];
            v53 = 0xAAAAAAAAAAAAAAABLL * ((v39 - (char *)__p[0]) >> 3);
            v54 = v53 + 1;
            if (v53 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            if (0x5555555555555556 * ((v138 - (char *)__p[0]) >> 3) > v54)
              v54 = 0x5555555555555556 * ((v138 - (char *)__p[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v138 - (char *)__p[0]) >> 3) >= 0x555555555555555)
              v55 = 0xAAAAAAAAAAAAAAALL;
            else
              v55 = v54;
            if (v55)
              v55 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v55);
            else
              v56 = 0;
            v57 = v55 + 8 * ((v39 - (char *)__p[0]) >> 3);
            *(_QWORD *)v57 = v4;
            *(_DWORD *)(v57 + 8) = v47;
            *(_DWORD *)(v57 + 12) = MachPort;
            *(_QWORD *)(v57 + 16) = 0;
            v58 = (char *)(v55 + 24 * v53);
            v33 = v51;
            if (v39 != v52)
            {
              do
              {
                v59 = *(_OWORD *)(v39 - 24);
                *((_QWORD *)v58 - 1) = *((_QWORD *)v39 - 1);
                *(_OWORD *)(v58 - 24) = v59;
                v58 -= 24;
                v39 -= 24;
              }
              while (v39 != v52);
              v39 = (char *)__p[0];
            }
            v28 = v50;
            v35 = (char *)(v57 + 24);
            __p[0] = v58;
            __p[1] = (void *)(v57 + 24);
            v138 = (char *)(v55 + 24 * v56);
            v11 = v49;
            if (v39)
              operator delete(v39);
            v5 = v128;
          }
          else
          {
            *(_QWORD *)v39 = v4;
            *((_DWORD *)v39 + 2) = v47;
            *((_DWORD *)v39 + 3) = MachPort;
            v35 = v39 + 24;
            *((_QWORD *)v39 + 2) = 0;
          }
          __p[1] = v35;
          ++v38;
          v37 = *((unsigned __int16 *)v5 + 28);
          v39 = v35;
          if (v38 >= v37)
            goto LABEL_77;
        }
        CFRelease(v4);
        if (x_log_hook_p())
          goto LABEL_70;
        v63 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v144 = 67109120;
          *(_DWORD *)&v144[4] = v47;
          v64 = "Failed to create machport for IOSurface %u";
          v65 = v63;
          v66 = 8;
LABEL_75:
          _os_log_impl(&dword_184457000, v65, OS_LOG_TYPE_ERROR, v64, v144, v66);
        }
LABEL_76:
        v35 = v39;
      }
    }
    else
    {
      v35 = 0;
    }
LABEL_77:
    CGColorSpaceRelease(v33);
    CGColorSpaceRelease(space);
    if (0xAAAAAAAAAAAAAAABLL * ((v35 - (char *)__p[0]) >> 3) != *((unsigned __int16 *)v5 + 28) || v130 == 0)
      break;
    CA::Render::release_surfaces((uint64_t *)v11 + 39, (uint64_t)(v11 + 90));
    CA::Render::release_surfaces((uint64_t *)v11 + 42, (uint64_t)(v11 + 90));
    CA::Render::release_single_iosurface((uint64_t)(v11 + 72), (uint64_t)(v11 + 90));
    v70 = (void *)*((_QWORD *)v11 + 39);
    v6 = v132;
    if (v70)
    {
      *((_QWORD *)v11 + 40) = v70;
      operator delete(v70);
    }
    *(_OWORD *)(v11 + 78) = *(_OWORD *)__p;
    *((_QWORD *)v11 + 41) = v138;
    *((_QWORD *)v11 + 36) = v130;
    v11[74] = v127;
    v11[75] = 0;
    *((_QWORD *)v11 + 38) = 0;
    v11[18] = v5[2];
    *((_BYTE *)v11 + 76) = *((_BYTE *)v5 + 58);
    *(_WORD *)((char *)v11 + 77) = *(_WORD *)((char *)v5 + 59);
    v11[20] = v5[3];
    v11[21] = v5[4];
    v12 = (const __CFString **)MEMORY[0x1E0C9D960];
  }
  v6 = v132;
  if (x_log_hook_p())
  {
    v69 = v5[2];
    if ((v69 & 0x80000000) != 0)
    {
      __maskrune(HIBYTE(v5[2]), 0x40000uLL);
      v69 = v5[2];
    }
    if (BYTE2(v69) > 0x7Fu)
    {
      __maskrune(BYTE2(v69), 0x40000uLL);
      v69 = v5[2];
    }
    if (BYTE1(v69) > 0x7Fu)
    {
      __maskrune(BYTE1(v69), 0x40000uLL);
      v69 = v5[2];
    }
    if (v69 > 0x7Fu)
      __maskrune(v69, 0x40000uLL);
    x_log_();
    v6 = v132;
  }
  else
  {
    v83 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
    {
      v85 = v5[3];
      v84 = v5[4];
      v86 = v5[2];
      v87 = v86 >> 24;
      v88 = MEMORY[0x1E0C80978];
      if ((v86 & 0x80000000) != 0)
      {
        v89 = __maskrune(v87, 0x40000uLL);
        LODWORD(v86) = v5[2];
      }
      else
      {
        v89 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v87 + 60) & 0x40000;
      }
      if (v89)
        v118 = (int)v86 >> 24;
      else
        v118 = 32;
      if (BYTE2(v86) <= 0x7Fu)
      {
        v119 = *(_DWORD *)(v88 + 4 * BYTE2(v86) + 60) & 0x40000;
      }
      else
      {
        v119 = __maskrune(BYTE2(v86), 0x40000uLL);
        LODWORD(v86) = v5[2];
      }
      if (v119)
        v120 = (int)((_DWORD)v86 << 8) >> 24;
      else
        v120 = 32;
      if (BYTE1(v86) <= 0x7Fu)
      {
        v121 = *(_DWORD *)(v88 + 4 * BYTE1(v86) + 60) & 0x40000;
      }
      else
      {
        v121 = __maskrune(BYTE1(v86), 0x40000uLL);
        LODWORD(v86) = v5[2];
      }
      if (v121)
        v122 = (__int16)v86 >> 8;
      else
        v122 = 32;
      if (v86 <= 0x7Fu)
      {
        v123 = *(_DWORD *)(v88 + 4 * v86 + 60) & 0x40000;
      }
      else
      {
        v123 = __maskrune(v86, 0x40000uLL);
        LODWORD(v86) = v5[2];
      }
      v6 = v132;
      LODWORD(v86) = (char)v86;
      *(_DWORD *)v144 = 67110400;
      if (!v123)
        LODWORD(v86) = 32;
      *(_DWORD *)&v144[4] = v85;
      *(_WORD *)&v144[8] = 1024;
      *(_DWORD *)&v144[10] = v84;
      *(_WORD *)&v144[14] = 1024;
      LODWORD(v145) = v118;
      WORD2(v145) = 1024;
      *(_DWORD *)((char *)&v145 + 6) = v120;
      WORD5(v145) = 1024;
      HIDWORD(v145) = v122;
      LOWORD(v146) = 1024;
      *(_DWORD *)((char *)&v146 + 2) = v86;
      _os_log_impl(&dword_184457000, v83, OS_LOG_TYPE_ERROR, "Failed to create surface pool %ux%u fmt %c%c%c%c", v144, 0x26u);
    }
  }
  CA::Render::release_surfaces((uint64_t *)__p, (uint64_t)(v11 + 90));
  CA::Render::release_single_iosurface((uint64_t)(v11 + 72), (uint64_t)(v11 + 90));
  if (__p[0])
    operator delete(__p[0]);
  v9 = 0;
LABEL_184:
  pthread_mutex_unlock((pthread_mutex_t *)v11);
  *((_BYTE *)v6 + 16) = v131;
LABEL_185:
  *((_BYTE *)v6 + 17) = v9;
}

void sub_1846E63B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void CA::WindowServer::Server::get_display_state_shmem(CA::WindowServer::Server *this, CA::Render::Object *a2, _QWORD *a3, void *a4)
{
  uint64_t v4;

  v4 = *((_QWORD *)a2 + 12);
  if (*(_DWORD *)a3 == *(_DWORD *)(v4 + 24))
    a3[1] = *(_QWORD *)(v4 + 720);
}

uint64_t CA::WindowServer::Server::set_display_state(CA::WindowServer::Server *this, CA::Render::Object *a2, unsigned __int8 *a3, void *a4)
{
  uint64_t result;

  if (*(_DWORD *)a3 == *(_DWORD *)(*((_QWORD *)a2 + 12) + 24))
    return CA::WindowServer::Server::set_display_state((uint64_t)a2, a3[8], a3[9], *((_DWORD *)a3 + 1));
  return result;
}

CA::Render::Context *CA::WindowServer::Server::destroy_blank_context(CA::WindowServer::Server *this)
{
  CA::Render::Context *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = (CA::Render::Context *)*((_QWORD *)this + 21);
  if (result)
  {
    CA::Render::Context::destroy(result);
    result = (CA::Render::Context *)*((_QWORD *)this + 21);
    if (result)
    {
      v3 = (unsigned int *)((char *)result + 8);
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
        result = (CA::Render::Context *)(*(uint64_t (**)(CA::Render::Context *))(*(_QWORD *)result + 16))(result);
    }
    *((_QWORD *)this + 21) = 0;
  }
  return result;
}

void CA::WindowServer::Server::remove_observers(CA::WindowServer::Server *this, CA::Render::Context *a2)
{
  CA::Render::remove_observer(2u, (uint64_t)a2, (uint64_t)CA::WindowServer::Server::context_deleted, (uint64_t)this);
  CA::Render::remove_observer(0, (uint64_t)a2, (uint64_t)CA::WindowServer::Server::context_changed, (uint64_t)this);
  CA::Render::remove_observer(8u, (uint64_t)a2, (uint64_t)CA::WindowServer::Server::context_ordered, (uint64_t)this);
}

void *CA::WindowServer::Server::set_pre_post_power_callback(uint64_t a1, const void *a2)
{
  void *result;

  result = *(void **)(a1 + 264);
  if (result != a2)
  {
    _Block_release(result);
    result = _Block_copy(a2);
    *(_QWORD *)(a1 + 264) = result;
  }
  return result;
}

void *CA::WindowServer::Server::set_pre_post_flipbook_callback(uint64_t a1, const void *a2)
{
  void *result;

  result = *(void **)(a1 + 272);
  if (result != a2)
  {
    _Block_release(result);
    result = _Block_copy(a2);
    *(_QWORD *)(a1 + 272) = result;
  }
  return result;
}

void CA::WindowServer::Server::context_deleted(CA::WindowServer::Server *this, os_unfair_lock_s *a2, void *a3, void *a4)
{
  pthread_mutex_t *v6;
  const CA::Bounds *v7;
  unint64_t v8;
  CA::Shape *v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  const CA::Shape *v12;
  uint64_t v13;
  uint64_t v14;
  CA::WindowServer::Server **v15;
  CA::Shape **v16;
  uint64_t v17;
  int64x2_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = (pthread_mutex_t *)((char *)this + 72);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 72));
  v8 = *((_QWORD *)this + 71);
  if (v8)
    v9 = (CA::Shape *)CA::Shape::ref(v8, v7);
  else
    v9 = 0;
  pthread_mutex_unlock(v6);
  os_unfair_lock_lock(a2 + 38);
  v11 = a2 + 40;
  v10 = *(_QWORD *)&a2[40]._os_unfair_lock_opaque;
  if (v10)
  {
    do
    {
      if (*(CA::WindowServer::Server **)(v10 + 16) == this)
      {
        *(_QWORD *)&v11->_os_unfair_lock_opaque = *(_QWORD *)(v10 + 8);
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      else
      {
        v11 = (os_unfair_lock_s *)(v10 + 8);
      }
      v10 = *(_QWORD *)&v11->_os_unfair_lock_opaque;
    }
    while (*(_QWORD *)&v11->_os_unfair_lock_opaque);
  }
  os_unfair_lock_unlock(a2 + 38);
  os_unfair_lock_lock(a2 + 4);
  v13 = *(_QWORD *)&a2[32]._os_unfair_lock_opaque;
  if (!v13)
    goto LABEL_21;
  v14 = 0;
  v15 = *(CA::WindowServer::Server ***)&a2[28]._os_unfair_lock_opaque;
  while (*v15 != this)
  {
    ++v14;
    v15 += 2;
    if (v13 == v14)
      goto LABEL_21;
  }
  if ((v14 & 0x80000000) != 0)
  {
LABEL_21:
    CA::WindowServer::Server::remove_observers((CA::WindowServer::Server *)a2, this);
    os_unfair_lock_unlock(a2 + 4);
    if (v9)
      CA::Shape::unref(v9);
    *((_DWORD *)this + 3) &= ~0x200u;
    CA::Render::Context::set_display_id(this, 0);
    if (*((_QWORD *)this + 75))
    {
      *((_QWORD *)this + 75) = 0;
      if (*((_DWORD *)this + 64))
        *((_DWORD *)this + 3) |= 0x400000u;
    }
  }
  else
  {
    if ((int)v13 + ~(_DWORD)v14 >= 1)
    {
      memmove((void *)(*(_QWORD *)&a2[28]._os_unfair_lock_opaque + 16 * v14), (const void *)(*(_QWORD *)&a2[28]._os_unfair_lock_opaque + 16 * v14 + 16), 16 * (v13 + ~(_DWORD)v14));
      v13 = *(_QWORD *)&a2[32]._os_unfair_lock_opaque;
    }
    *(_QWORD *)&a2[32]._os_unfair_lock_opaque = v13 - 1;
    if (v9)
    {
      v16 = (CA::Shape **)&a2[44];
      if (!*(_QWORD *)&a2[44]._os_unfair_lock_opaque)
        *v16 = (CA::Shape *)1;
      CA::shape_union(v16, (CA::Shape **)v9, v12);
      CA::WindowServer::Server::remove_observers((CA::WindowServer::Server *)a2, this);
      os_unfair_lock_unlock(a2 + 4);
      CA::Shape::unref(v9);
    }
    else
    {
      CA::WindowServer::Server::remove_observers((CA::WindowServer::Server *)a2, this);
      os_unfair_lock_unlock(a2 + 4);
    }
    *((_DWORD *)this + 3) &= ~0x200u;
    CA::Render::Context::set_display_id(this, 0);
    if (*((_QWORD *)this + 75))
    {
      *((_QWORD *)this + 75) = 0;
      if (*((_DWORD *)this + 64))
        *((_DWORD *)this + 3) |= 0x400000u;
    }
    v17 = 0;
    v18 = vdupq_n_s64(4uLL);
    (*(void (**)(os_unfair_lock_s *, uint64_t *, double))(*(_QWORD *)&a2->_os_unfair_lock_opaque + 184))(a2, &v17, 0.0);
  }
}

void CA::WindowServer::Server::context_ordered(CA::WindowServer::Server *this, CA::Render::Object *a2, CFDictionaryRef theDict, void *a4)
{
  uint64_t v7;
  _QWORD *i;
  const void *Value;
  unsigned int v10;
  const void *v11;
  BOOL v12;
  malloc_zone_t *malloc_zone;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  os_unfair_lock_s *v17;
  malloc_zone_t *v18;
  _QWORD *v19;
  _QWORD *v20;

  v7 = *((_QWORD *)a2 + 12);
  if ((*(_DWORD *)(v7 + 624) & 4) != 0)
  {
    for (i = *(_QWORD **)(v7 + 40); i; i = (_QWORD *)i[1])
    {
      if (*(_QWORD *)(*i + 144) >= 2uLL)
        *(_BYTE *)(*i + 516) = 1;
    }
  }
  if (!theDict)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v14 = malloc_type_zone_malloc(malloc_zone, 0x20uLL, 0x8BB15036uLL);
    v15 = v14;
    if (v14)
    {
      v16 = *((_DWORD *)this + 48);
      v14[2] = this;
      *v14 = off_1E1590160;
      *((_DWORD *)v14 + 6) = v16;
    }
    v17 = (os_unfair_lock_s *)((char *)a2 + 152);
    os_unfair_lock_lock((os_unfair_lock_t)a2 + 38);
    v15[1] = *((_QWORD *)a2 + 20);
    *((_QWORD *)a2 + 20) = v15;
    goto LABEL_18;
  }
  Value = CFDictionaryGetValue(theDict, CFSTR("siblingId"));
  if (Value)
  {
    v10 = CA_CFIntValue(Value);
    v11 = CFDictionaryGetValue(theDict, CFSTR("above"));
    if (v11)
      v12 = CA_CFBoolValue(v11);
    else
      v12 = 0;
    v18 = (malloc_zone_t *)get_malloc_zone();
    v19 = malloc_type_zone_malloc(v18, 0x28uLL, 0x8BB15036uLL);
    v20 = v19;
    if (v19)
    {
      *v19 = off_1E1590138;
      v19[2] = this;
      v19[3] = v10;
      *((_BYTE *)v19 + 32) = v12;
    }
    v17 = (os_unfair_lock_s *)((char *)a2 + 152);
    os_unfair_lock_lock((os_unfair_lock_t)a2 + 38);
    v20[1] = *((_QWORD *)a2 + 20);
    *((_QWORD *)a2 + 20) = v20;
LABEL_18:
    os_unfair_lock_unlock(v17);
  }
}

void CA::WindowServer::Server::PendingOrderAbove::~PendingOrderAbove(CA::WindowServer::Server::PendingOrderAbove *this)
{
  malloc_zone_t *malloc_zone;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::WindowServer::Server::PendingOrderAbove::run(CA::WindowServer::Server::PendingOrderAbove *this, os_unfair_lock_s *a2)
{
  CA::Render::Context *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CA::Render::Context **v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  int v14;
  float *v15;
  uint64_t v16;
  BOOL v17;
  float v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (CA::Render::Context *)*((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 3);
  v5 = *((unsigned __int8 *)this + 32);
  if (!v4 || v4 != *((_DWORD *)v3 + 4))
  {
    os_unfair_lock_lock(a2 + 4);
    v6 = *(_QWORD *)&a2[32]._os_unfair_lock_opaque;
    if (!v6)
      goto LABEL_39;
    v7 = 0;
    v8 = *(_QWORD *)&a2[28]._os_unfair_lock_opaque;
    v9 = (CA::Render::Context **)v8;
    while (*v9 != v3)
    {
      ++v7;
      v9 += 2;
      if (v6 == v7)
        goto LABEL_39;
    }
    if ((v7 & 0x80000000) != 0)
      goto LABEL_39;
    v10 = *(float *)(v8 + 16 * v7 + 8);
    v11 = *(_QWORD *)&a2[32]._os_unfair_lock_opaque;
    if ((int)v6 < 1)
    {
      LODWORD(v12) = 0;
    }
    else
    {
      v12 = 0;
      v13 = (float *)(v8 + 8);
      while (v10 > *v13)
      {
        ++v12;
        v13 += 4;
        if (v11 == v12)
        {
          v12 = *(_QWORD *)&a2[32]._os_unfair_lock_opaque;
          break;
        }
      }
    }
    v14 = v6 & ((int)v6 >> 31);
    v15 = (float *)(v8 + 16 * v11 - 8);
    v16 = *(_QWORD *)&a2[32]._os_unfair_lock_opaque;
    while (1)
    {
      v17 = __OFSUB__((_DWORD)v16, 1);
      LODWORD(v16) = v16 - 1;
      if ((int)v16 < 0 != v17)
        break;
      v18 = *v15;
      v15 -= 4;
      if (v10 >= v18)
      {
        v14 = v16 + 1;
        break;
      }
    }
    if (v5)
      v19 = v14;
    else
      v19 = v12;
    if (v4)
    {
      if ((int)v6 >= 1)
      {
        v20 = 0;
        v21 = *(_QWORD *)&a2[28]._os_unfair_lock_opaque;
        while (v4 != *(_DWORD *)(*(_QWORD *)v21 + 16))
        {
          ++v20;
          v21 += 16;
          if (v11 == v20)
            goto LABEL_29;
        }
        v19 = v20 + v5;
      }
LABEL_29:
      if (v19 > (int)v12)
        LODWORD(v12) = v19;
      if ((int)v12 >= v14)
        v19 = v14;
      else
        v19 = v12;
    }
    if (v19 == (_DWORD)v7 || v19 == (_DWORD)v7 + 1)
    {
LABEL_39:
      os_unfair_lock_unlock(a2 + 4);
    }
    else
    {
      if ((int)v6 + ~(_DWORD)v7 >= 1)
      {
        memmove((void *)(v8 + 16 * v7), (const void *)(v8 + 16 * v7 + 16), 16 * (v6 + ~(_DWORD)v7));
        v6 = *(_QWORD *)&a2[32]._os_unfair_lock_opaque;
      }
      *(_QWORD *)&a2[32]._os_unfair_lock_opaque = v6 - 1;
      CA::WindowServer::Server::context_insert((CA::WindowServer::Server *)a2, v19 - (v19 > (int)v7), v3, v10);
      os_unfair_lock_unlock(a2 + 4);
      CA::WindowServer::Server::invalidate_context(a2, v3);
    }
  }
}

void CA::WindowServer::Server::context_insert(CA::WindowServer::Server *this, unint64_t a2, CA::Render::Context *a3, float a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  malloc_zone_t *v11;
  char *v12;
  uint64_t v13;
  float *v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  void *v18;
  malloc_zone_t *malloc_zone;

  v8 = *((_QWORD *)this + 15);
  v7 = *((_QWORD *)this + 16);
  if (v7 >= a2)
    v9 = a2;
  else
    v9 = *((_QWORD *)this + 16);
  if (v7 + 1 > v8)
  {
    v10 = v8 + 2;
    if ((v8 + 2) >> 60)
    {
      v12 = 0;
      if (!v9)
      {
LABEL_13:
        v14 = (float *)&v12[16 * v9];
        *(_QWORD *)v14 = a3;
        v14[2] = a4;
        v15 = *((_QWORD *)this + 16);
        v16 = v15 > v9;
        v17 = v15 - v9;
        if (v16)
          memcpy(v14 + 4, (const void *)(*((_QWORD *)this + 14) + 16 * v9), 16 * v17);
        v18 = (void *)*((_QWORD *)this + 14);
        if (v18)
        {
          malloc_zone = (malloc_zone_t *)get_malloc_zone();
          malloc_zone_free(malloc_zone, v18);
        }
        *((_QWORD *)this + 14) = v12;
        *((_QWORD *)this + 15) = v10;
        goto LABEL_19;
      }
    }
    else
    {
      v11 = (malloc_zone_t *)get_malloc_zone();
      v12 = (char *)malloc_type_zone_malloc(v11, 16 * v10, 0x8BB15036uLL);
      if (!v9)
        goto LABEL_13;
    }
    memcpy(v12, *((const void **)this + 14), 16 * v9);
    goto LABEL_13;
  }
  if (v7 > a2)
    memmove((void *)(*((_QWORD *)this + 14) + 16 * v9 + 16), (const void *)(*((_QWORD *)this + 14) + 16 * v9), 16 * (v7 - v9));
  v13 = *((_QWORD *)this + 14) + 16 * v9;
  *(_QWORD *)v13 = a3;
  *(float *)(v13 + 8) = a4;
LABEL_19:
  ++*((_QWORD *)this + 16);
}

void CA::WindowServer::Server::invalidate_context(os_unfair_lock_s *this, CA::Render::Context *a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  const CA::Bounds *v6;
  uint64_t v7;
  const CA::Shape *v8;

  v4 = (pthread_mutex_t *)((char *)a2 + 72);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 72));
  v5 = CA::Render::Context::root_layer_handle(a2);
  if (v5)
  {
    v7 = v5;
    v8 = (const CA::Shape *)CA::Shape::new_shape((CA::Shape *)(v5 + 112), v6);
    *(_QWORD *)(v7 + 96) |= 2uLL;
    pthread_mutex_unlock(v4);
    if (v8)
    {
      CA::WindowServer::Server::invalidate(this, v8);
      CA::Shape::unref(v8);
    }
  }
  else
  {
    pthread_mutex_unlock(v4);
  }
}

void CA::WindowServer::Server::PendingOrderLevel::~PendingOrderLevel(CA::WindowServer::Server::PendingOrderLevel *this)
{
  malloc_zone_t *malloc_zone;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::WindowServer::Server::PendingOrderLevel::run(CA::WindowServer::Server::PendingOrderLevel *this, os_unfair_lock_s *a2)
{
  CA::Render::Context *v3;
  float v4;
  os_unfair_lock_s *v5;
  size_t v6;
  uint64_t v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  uint64_t v12;
  size_t v13;
  float v14;
  BOOL v15;

  v3 = (CA::Render::Context *)*((_QWORD *)this + 2);
  v4 = *((float *)this + 6);
  v5 = a2 + 4;
  os_unfair_lock_lock(a2 + 4);
  v6 = *(_QWORD *)&a2[32]._os_unfair_lock_opaque;
  if (v6)
  {
    v7 = 0;
    v8 = *(float **)&a2[28]._os_unfair_lock_opaque;
    v9 = v8;
    while (*(CA::Render::Context **)v9 != v3)
    {
      ++v7;
      v9 += 4;
      if (v6 == v7)
        goto LABEL_8;
    }
    if ((v7 & 0x80000000) == 0)
      v8[4 * v7 + 2] = v4;
LABEL_8:
    if (v6 >= 2)
    {
      v10 = v8[6];
      if (v10 < v8[2])
      {
LABEL_15:
        mergesort(v8, v6, 0x10uLL, (int (__cdecl *)(const void *, const void *))CA::WindowServer::Server::compare_levels);
        os_unfair_lock_unlock(v5);
        CA::WindowServer::Server::invalidate_context(a2, v3);
        return;
      }
      v11 = v8 + 10;
      v12 = 2;
      while (v6 != v12)
      {
        v13 = v12;
        v14 = *v11;
        v11 += 4;
        ++v12;
        v15 = v14 < v10;
        v10 = v14;
        if (v15)
        {
          if (v13 >= v6)
            break;
          goto LABEL_15;
        }
      }
    }
  }
  os_unfair_lock_unlock(v5);
}

unint64_t CA::WindowServer::Server::compare_levels(CA::WindowServer::Server *this, float *a2, const void *a3)
{
  return (__PAIR64__(*((float *)this + 2) > a2[2], *((_DWORD *)this + 2)) - *((unsigned int *)a2 + 2)) >> 32;
}

uint64_t CA::WindowServer::Server::set_display_state(uint64_t a1, unsigned int a2, char a3, mach_port_t a4)
{
  pthread_mutex_t *v8;
  int v9;
  os_unfair_lock_s *v10;
  unsigned __int8 *v11;
  unint64_t v12;
  const char *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  const char *v23;
  unint64_t v24;
  const char *v25;
  int v26;
  const char *v27;
  _DWORD *v28;
  _BYTE *v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  _BOOL4 v38;
  CA::Render::Context *v39;
  unint64_t v40;
  float v41;
  uint64_t *v42;
  uint64_t v43;
  NSObject *v44;
  unint64_t v45;
  const char *v46;
  unint64_t v47;
  const char *v48;
  int v49;
  const char *v50;
  NSObject *v51;
  int v52;
  const char *v53;
  uint64_t v54;
  uint64_t v56;
  const char *v57;
  _QWORD buf[6];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v8 = (pthread_mutex_t *)(a1 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
  CA::WindowServer::Display::flush_display_state_change_reply(*(_QWORD *)(a1 + 96));
  if (*(_BYTE *)(a1 + 512))
  {
    if (!a4)
      return pthread_mutex_unlock(v8);
    LOBYTE(v9) = 4;
    goto LABEL_101;
  }
  v10 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 96) + 716);
  os_unfair_lock_lock(v10);
  v11 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 96) + 728);
  kdebug_trace();
  if (x_log_hook_p())
  {
    v12 = *v11;
    if (v12 > 0xB)
      v13 = "unknown";
    else
      v13 = off_1E159DA10[v12];
    v56 = *(unsigned int *)(*(_QWORD *)(a1 + 96) + 24);
    v57 = v13;
    x_log_();
  }
  else
  {
    v14 = x_log_category_display_state;
    if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
    {
      v22 = *v11;
      if (v22 > 0xB)
        v23 = "unknown";
      else
        v23 = off_1E159DA10[v22];
      v24 = v11[1];
      if (v24 > 0xB)
        v25 = "unknown";
      else
        v25 = off_1E159DA10[v24];
      v26 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 24);
      if (a2 > 0xB)
        v27 = "unknown";
      else
        v27 = off_1E159DA10[a2];
      LODWORD(buf[0]) = 67109890;
      HIDWORD(buf[0]) = v26;
      LOWORD(buf[1]) = 2080;
      *(_QWORD *)((char *)&buf[1] + 2) = v23;
      WORD1(buf[2]) = 2080;
      *(_QWORD *)((char *)&buf[2] + 4) = v25;
      WORD2(buf[3]) = 2080;
      *(_QWORD *)((char *)&buf[3] + 6) = v27;
      _os_log_impl(&dword_184457000, v14, OS_LOG_TYPE_DEFAULT, "Server::set_display_state display_id=%u current_state=%s target_state=%s new_target_state=%s", (uint8_t *)buf, 0x26u);
    }
  }
  if (a2 > 0xA)
    goto LABEL_21;
  v28 = *(_DWORD **)(a1 + 96);
  v29 = (_BYTE *)*((_QWORD *)v28 + 91);
  v30 = a2;
  if (a2 < 5)
    goto LABEL_51;
  if ((a2 - 5) <= 1u)
  {
    v31 = (a2 == 5) ^ (v29[1] != 1);
    if (v31)
      v30 = 1;
    else
      v30 = a2;
    if (a2 == 5 && v31)
    {
      if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v28 + 320))(v28) & 1) != 0)
      {
        v30 = 3;
      }
      else if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 304))(*(_QWORD *)(a1 + 96)))
      {
        v30 = 2;
      }
      else
      {
        v30 = 0;
      }
    }
    if ((v31 & 1) == 0)
    {
      v9 = 0;
      goto LABEL_86;
    }
    goto LABEL_51;
  }
  if ((a2 - 7) <= 1u)
  {
    if ((v28[156] & 0x40) == 0)
      goto LABEL_21;
    if ((a2 == 7) != (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v28 + 304))(v28))
    {
      (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(a1 + 96) + 312))(*(_QWORD *)(a1 + 96), a2 == 7);
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 96) + 328))(*(_QWORD *)(a1 + 96), 0);
      if (a2 != 7 || v29[1])
      {
        v9 = 255;
        if (a2 == 7 || (v29[1] & 0xFE) != 2)
          goto LABEL_86;
        v30 = 0;
        goto LABEL_51;
      }
LABEL_114:
      v30 = 2;
      if (*v29 != 1)
      {
LABEL_80:
        v42 = *(uint64_t **)(a1 + 96);
        if ((v42[78] & 0x40) != 0)
        {
          v29[1] = v30;
          v43 = *v42;
          if (*v29 != 1)
          {
            v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *))(v43 + 2104))(v42, v15, v16, v17, v18, v19, v20, v21, v56, v57);
            goto LABEL_86;
          }
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *))(v43 + 1768))(v42, v15, v16, v17, v18, v19, v20, v21, v56, v57))
          {
            *(_DWORD *)(*(_QWORD *)(a1 + 96) + 745) |= 0x2000u;
            *(_DWORD *)(*(_QWORD *)(a1 + 96) + 745) |= 0x400u;
            CA::WindowServer::Server::invalidate((os_unfair_lock_s *)a1, *(const CA::Shape **)(*(_QWORD *)(a1 + 96) + 216));
            buf[0] = 0;
            *(int64x2_t *)&buf[1] = vdupq_n_s64(0x4000000uLL);
            (*(void (**)(uint64_t, _QWORD *, double))(*(_QWORD *)a1 + 184))(a1, buf, 0.0);
          }
LABEL_84:
          v9 = 255;
          goto LABEL_86;
        }
LABEL_21:
        v9 = 5;
        goto LABEL_86;
      }
      goto LABEL_55;
    }
LABEL_53:
    v9 = 0;
    goto LABEL_86;
  }
  if ((v28[156] & 0x40) == 0)
    goto LABEL_21;
  if ((a2 == 9) == (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v28 + 320))(v28))
    goto LABEL_53;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 304))(*(_QWORD *)(a1 + 96)) & 1) == 0 && a2 == 9)
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 96) + 312))(*(_QWORD *)(a1 + 96), 1);
  (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(a1 + 96) + 328))(*(_QWORD *)(a1 + 96), a2 == 9);
  v32 = v29[1];
  if ((v32 | 2) != 2)
  {
    v9 = 255;
    if (a2 == 9 || v32 != 3)
      goto LABEL_86;
    goto LABEL_114;
  }
  if (a2 != 9)
    goto LABEL_84;
  v30 = 3;
LABEL_51:
  v33 = v29[1];
  if (v33 >= 4)
    __assert_rtn("set_display_state_locked", "windowserver-server.cpp", 6913, "target_state < kDisplayStateCount");
  if (v33 == v30)
    goto LABEL_53;
  if (*v29 == 1)
  {
LABEL_55:
    v34 = *(_QWORD *)(a1 + 96);
    if ((*(_BYTE *)(v34 + 745) & 0x20) != 0)
    {
      v35 = 0;
      v36 = 0;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v59 = 0u;
      memset(buf, 0, sizeof(buf));
      v37 = *(_QWORD **)(v34 + 25368);
      do
      {
        buf[v35] += v37[v36++];
        if (v36 == CA::WindowServer::Server::record_histograms(void)::bucket_upper_bounds[v35])
          ++v35;
      }
      while (v36 != 241);
      if (MEMORY[0x1E0D15478])
      {
        analytics_send_event_lazy();
        v37 = *(_QWORD **)(*(_QWORD *)(a1 + 96) + 25368);
      }
      bzero(v37, 0x788uLL);
    }
    if (!*(_QWORD *)(a1 + 168))
      CA::WindowServer::Server::create_blank_context((CA::WindowServer::Server *)a1);
    CA::WindowServer::Server::notify_content_streams(a1, 5);
    goto LABEL_71;
  }
  if (v30 == 1)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 240))(*(_QWORD *)(a1 + 96));
    if (*(_QWORD *)(a1 + 168)
      && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 520))(*(_QWORD *)(a1 + 96)) & 1) == 0)
    {
      CA::WindowServer::Server::destroy_blank_context((CA::WindowServer::Server *)a1);
    }
    CA::WindowServer::Server::notify_content_streams(a1, 6);
    v38 = 0;
    LOBYTE(v30) = 1;
    goto LABEL_72;
  }
LABEL_71:
  v38 = v30 == 0;
  if (v30 > 1)
  {
    if ((v30 & 0xFE) != 2)
      goto LABEL_21;
    goto LABEL_80;
  }
LABEL_72:
  v39 = *(CA::Render::Context **)(a1 + 168);
  if (v39)
  {
    CA::Render::Context::will_commit(v39);
    v40 = *(_QWORD *)(a1 + 168);
    v41 = -INFINITY;
    if (v38)
      v41 = INFINITY;
    if (*(float *)(v40 + 192) != v41)
    {
      *(float *)(v40 + 192) = v41;
      CA::Render::post_notification(8u, v40, 0, 0);
      v40 = *(_QWORD *)(a1 + 168);
    }
    CA::Render::Context::did_commit(v40, 1, 0, 1, 0, 0);
  }
  v29[1] = v30;
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 2104))(*(_QWORD *)(a1 + 96));
LABEL_86:
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v44 = x_log_category_display_state;
    if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
    {
      v45 = *v11;
      if (v45 > 0xB)
        v46 = "unknown";
      else
        v46 = off_1E159DA10[v45];
      v47 = v11[1];
      if (v47 > 0xB)
        v48 = "unknown";
      else
        v48 = off_1E159DA10[v47];
      v49 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 24);
      if ((v9 + 1) > 6u)
        v50 = "unknown";
      else
        v50 = off_1E159DA70[(v9 + 1)];
      LODWORD(buf[0]) = 67109890;
      HIDWORD(buf[0]) = v49;
      LOWORD(buf[1]) = 2080;
      *(_QWORD *)((char *)&buf[1] + 2) = v46;
      WORD1(buf[2]) = 2080;
      *(_QWORD *)((char *)&buf[2] + 4) = v48;
      WORD2(buf[3]) = 2080;
      *(_QWORD *)((char *)&buf[3] + 6) = v50;
      _os_log_impl(&dword_184457000, v44, OS_LOG_TYPE_DEFAULT, "Server::set_display_state display_id=%u current_state=%s target_state=%s result=%s", (uint8_t *)buf, 0x26u);
    }
  }
  kdebug_trace();
  os_unfair_lock_unlock(v10);
  if (a4)
  {
    if (v9 == 255)
    {
      v54 = *(_QWORD *)(a1 + 96);
      CA::WindowServer::Display::flush_display_state_change_reply(v54);
      *(_BYTE *)(v54 + 736) = a2;
      *(_BYTE *)(v54 + 744) = a3;
      *(_DWORD *)(v54 + 740) = a4;
      return pthread_mutex_unlock(v8);
    }
LABEL_101:
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v51 = x_log_category_display_state;
      if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
      {
        v52 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 24);
        if (a2 > 0xB)
          v53 = "unknown";
        else
          v53 = off_1E159DA10[a2];
        LODWORD(buf[0]) = 67109378;
        HIDWORD(buf[0]) = v52;
        LOWORD(buf[1]) = 2080;
        *(_QWORD *)((char *)&buf[1] + 2) = v53;
        _os_log_impl(&dword_184457000, v51, OS_LOG_TYPE_DEFAULT, "signal clients display %u state changed to %s", (uint8_t *)buf, 0x12u);
      }
    }
    _CACDisplayDidChangeToState(a4, *(_DWORD *)(*(_QWORD *)(a1 + 96) + 24), a2, a3, v9);
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], a4);
  }
  return pthread_mutex_unlock(v8);
}

void CA::WindowServer::Server::create_blank_context(CA::WindowServer::Server *this)
{
  CFNumberRef v2;
  const __CFDictionary *v3;
  malloc_zone_t *malloc_zone;
  CA::Render::Context *v5;
  malloc_zone_t *v6;
  CA::Render::Object *v7;
  CA::Render::Object *v8;
  uint64_t v9;
  unint64_t v10;
  void *values[2];
  const void *valuePtr[3];

  valuePtr[2] = *(const void **)MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 21))
  {
    LODWORD(valuePtr[0]) = *(_DWORD *)(*((_QWORD *)this + 12) + 24);
    v2 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
    valuePtr[0] = CFSTR("displayId");
    valuePtr[1] = CFSTR("name");
    values[0] = v2;
    values[1] = CFSTR("blanking context");
    v3 = CFDictionaryCreate(0, valuePtr, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFRelease(v2);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v5 = (CA::Render::Context *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x2E8uLL, 0x743898A5uLL);
    if (v5)
      v5 = CA::Render::Context::Context(v5, v3, 0, 576, 0);
    *((_QWORD *)this + 21) = v5;
    CFRelease(v3);
    *(_WORD *)(*((_QWORD *)this + 21) + 552) |= 4u;
    v6 = (malloc_zone_t *)get_malloc_zone();
    v7 = (CA::Render::Object *)malloc_type_zone_calloc(v6, 1uLL, 0x98uLL, 0x743898A5uLL);
    v8 = v7;
    if (v7)
    {
      *((_DWORD *)v7 + 2) = 1;
      *((_DWORD *)v7 + 3) = 29;
      ++dword_1ECDC7C9C;
      *(_QWORD *)v7 = off_1E15989E0;
      *((_DWORD *)v7 + 8) = 16843007;
      *((_DWORD *)v7 + 9) = *((_DWORD *)v7 + 9) & 0x80000000 | 0xF9F11;
      *((_QWORD *)v7 + 5) = *((_QWORD *)v7 + 5) & 0xFFFF800000000000 | 0x1030C0004C00;
      *((_OWORD *)v7 + 3) = 0u;
      *((_OWORD *)v7 + 4) = 0u;
      *((_OWORD *)v7 + 5) = 0u;
      *((_QWORD *)v7 + 12) = 0;
      *((_OWORD *)v7 + 7) = 0u;
      *((_OWORD *)v7 + 8) = 0u;
      *((_QWORD *)v7 + 18) = 0;
    }
    *((int64x2_t *)v7 + 4) = vdupq_n_s64(0xC160000000000000);
    *((int64x2_t *)v7 + 5) = vdupq_n_s64(0x4170000000000000uLL);
    *((_QWORD *)v7 + 2) = 0;
    *((_QWORD *)v7 + 3) = 0x3F80000000000000;
    if (1.0 == 0.0)
      v9 = 0;
    else
      v9 = 0x40000000000;
    *((_QWORD *)v7 + 5) = v9 | *((_QWORD *)v7 + 5) & 0xFFFFFBFFFFFFFFFFLL;
    CA::Render::Context::will_commit(*((CA::Render::Context **)this + 21));
    CA::Render::Context::set_object(*((CA::Render::Context **)this + 21), 0x2AuLL, 1u, v8);
    CA::Render::Context::set_layer_id(*((_QWORD *)this + 21), 42);
    v10 = *((_QWORD *)this + 21);
    if (*(float *)(v10 + 192) != -INFINITY)
    {
      *(_DWORD *)(v10 + 192) = -8388608;
      CA::Render::post_notification(8u, v10, 0, 0);
      v10 = *((_QWORD *)this + 21);
    }
    CA::Render::Context::did_commit(v10, 1, 0, 1, 0, 0);
  }
}

uint64_t CA::WindowServer::Server::notify_content_streams(uint64_t a1, int a2)
{
  uint64_t result;
  unsigned int *v5;
  unsigned int *v6;
  pthread_mutex_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v11 = 0u;
  result = mach_absolute_time();
  v8 = result;
  v9 = a2;
  v6 = *(unsigned int **)(a1 + 480);
  v5 = *(unsigned int **)(a1 + 488);
  while (v6 != v5)
  {
    result = (uint64_t)CA::Render::ContentStream::get_or_create_stream_and_lock((CA::Render::ContentStream *)*v6, 0, 0);
    if (result)
    {
      v7 = (pthread_mutex_t *)result;
      v10 = *(_DWORD *)(result + 396);
      CA::Render::ContentStream::produce_surface(result, 0, (uint64_t)&v8, 0);
      result = pthread_mutex_unlock(v7);
    }
    v6 += 50;
  }
  return result;
}

xpc_object_t ___ZN2CA12WindowServer6Server17record_histogramsEv_block_invoke(uint64_t a1)
{
  xpc_object_t v2;
  uint64_t i;

  v2 = xpc_dictionary_create(0, 0, 0);
  for (i = 0; i != 128; i += 8)
    xpc_dictionary_set_uint64(v2, *(const char **)(*(_QWORD *)(a1 + 32) + i), *(_QWORD *)(*(_QWORD *)(a1 + 40) + i));
  return v2;
}

int **X::small_vector_base<unsigned int>::small_vector_base(int **result, int **a2, int *a3)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;

  *result = a3;
  result[1] = a3;
  result[2] = a3;
  v3 = a2[2];
  result[3] = a2[3];
  v4 = *a2;
  if (*a2 == v3)
  {
    result[1] = (int *)((char *)a3 + (char *)a2[1] - (char *)v4);
    v6 = a2[1];
    while (v4 != v6)
    {
      v7 = *v4++;
      *a3++ = v7;
    }
  }
  else
  {
    v5 = a2[1];
    *result = v4;
    result[1] = v5;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

void X::small_vector_base<unsigned int>::move(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  void *v6;
  uint64_t v7;
  int *v8;
  int *v9;
  int v10;

  if (a1 != a2)
  {
    v6 = *(void **)a1;
    if (v6 != *(void **)(a1 + 16))
      free(v6);
    *(_QWORD *)(a1 + 16) = a3;
    if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 16))
    {
      *(_QWORD *)a1 = a3;
      v8 = *(int **)a2;
      *(_QWORD *)(a1 + 8) = (char *)a3 + *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
      v9 = *(int **)(a2 + 8);
      while (v8 != v9)
      {
        v10 = *v8++;
        *a3++ = v10;
      }
    }
    else
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v7;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
    }
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  }
}

uint64_t std::construct_at[abi:nn180100]<CA::Render::ContentStreamConfig,CA::Render::ContentStreamConfig const&,CA::Render::ContentStreamConfig*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 72) = a1 + 104;
  *(_QWORD *)(a1 + 80) = a1 + 104;
  *(_QWORD *)(a1 + 88) = a1 + 104;
  *(_QWORD *)(a1 + 96) = 8;
  X::small_vector_base<unsigned int>::append<unsigned int const*>(a1 + 72, *(int **)(a2 + 72), *(int **)(a2 + 80));
  *(_QWORD *)(a1 + 136) = a1 + 168;
  *(_QWORD *)(a1 + 144) = a1 + 168;
  *(_QWORD *)(a1 + 152) = a1 + 168;
  *(_QWORD *)(a1 + 160) = 8;
  X::small_vector_base<unsigned int>::append<unsigned int const*>(a1 + 136, *(int **)(a2 + 136), *(int **)(a2 + 144));
  return a1;
}

uint64_t CA::WindowServer::Server::set_accessibility_color_matrix(CA::WindowServer::Server *this, float *a2, float a3)
{
  pthread_mutex_t *v6;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v6 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  (*(void (**)(_QWORD, float *, float))(**((_QWORD **)this + 12) + 1448))(*((_QWORD *)this + 12), a2, a3);
  v13 = 0;
  __asm { FMOV            V0.2D, #2.0 }
  v14 = _Q0;
  (*(void (**)(CA::WindowServer::Server *, uint64_t *, double))(*(_QWORD *)this + 184))(this, &v13, 0.0);
  return pthread_mutex_unlock(v6);
}

void ___ZN2CA12WindowServer6Server19set_display_latencyEPNS_6Render6ObjectEPvS5__block_invoke(uint64_t a1)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD, double))(**(_QWORD **)(a1 + 32) + 176))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(double *)(a1 + 56));
  free(*(void **)(a1 + 40));
}

uint64_t ___ZN2CA12WindowServer6Server22set_display_propertiesEPNS_6Render6ObjectEPvS5__block_invoke(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  pthread_mutex_t *v6;
  int v7;
  uint64_t v8;
  double v9;
  float v10;
  float v11;
  int *v12;
  float v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  float v17;
  CA::WindowServer::Server *v18;
  float v19;
  float v20;
  float v21;
  char v22;
  int v23;
  int v24;
  char v25;
  int v26;
  char v27;
  char v28;
  mach_msg_header_t msg;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 48);
  if ((v2 & 8) != 0)
  {
    v3 = *(_DWORD *)(a1 + 52);
    if (v3)
    {
      if (v3 != *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 96) + 32))
      {
        v7 = 1;
        if ((v2 & 0x10) == 0)
          goto LABEL_35;
        goto LABEL_13;
      }
    }
  }
  if ((v2 & 1) == 0 || (v4 = *(_QWORD *)(a1 + 40)) == 0)
  {
    v7 = 0;
    if ((v2 & 0x10) == 0)
      goto LABEL_35;
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(a1 + 32);
  if (!byte_1ECDC6AA2)
  {
    v6 = (pthread_mutex_t *)(*(_QWORD *)(v5 + 96) + 496);
    pthread_mutex_lock(v6);
    pthread_mutex_lock((pthread_mutex_t *)(v5 + 24));
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 96) + 728))(*(_QWORD *)(v5 + 96), a1 + 40);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 400))(v5);
    pthread_mutex_unlock((pthread_mutex_t *)(v5 + 24));
    pthread_mutex_unlock(v6);
    v5 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v2 = *(_DWORD *)(a1 + 48);
  }
  v7 = CA::WindowServer::Display::Mode::operator==(*(_QWORD *)(*(_QWORD *)(v5 + 96) + 640), v4) ^ 1;
  if ((v2 & 0x10) != 0)
  {
LABEL_13:
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96);
    v9 = (*(double (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    v10 = 1.0
        / (*(double (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 96) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 96));
    if ((*(_BYTE *)(v8 + 746) & 0x10) != 0)
    {
      v11 = (float)(unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8);
      if (((*(unsigned __int16 *)(v8 + 656) >> 10) & 3 | 4) == 4)
      {
        v12 = (int *)(v8 + 88);
      }
      else
      {
        v12 = (int *)(v8 + 80);
        if (!*(_DWORD *)(v8 + 80) || !*(_DWORD *)(v8 + 84))
          v12 = (int *)(v8 + 72);
      }
      v13 = v11 / (float)*v12;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8);
      if (((*(unsigned __int16 *)(v8 + 656) >> 10) & 3 | 4) == 4)
      {
        v16 = v8 + 88;
      }
      else
      {
        v16 = v8 + 80;
        if (!*(_DWORD *)(v8 + 80) || !*(_DWORD *)(v8 + 84))
          v16 = v8 + 72;
      }
      v17 = (float)(v14 / v15) / (float)*(int *)(v16 + 4);
      if (v17 >= v13)
        v17 = v13;
      if (v17 < v10)
        v10 = v17;
    }
    v18 = *(CA::WindowServer::Server **)(a1 + 32);
    if ((*(_WORD *)(*((_QWORD *)v18 + 12) + 656) & 0x1C00) == 0x400
      && (v19 = 1.0 / v9, v20 = *(float *)(a1 + 56), v20 >= v19)
      && ((v21 = *(float *)(a1 + 60), v21 > v10) ? (v22 = 1) : (v22 = v7), (v22 & 1) == 0))
    {
      CA::WindowServer::Server::set_scale(v18, v20, v21);
      v7 = 0;
    }
    else
    {
      v7 = 1;
    }
  }
LABEL_35:
  v23 = *(_DWORD *)(a1 + 48);
  if ((v23 & 0x20) != 0)
  {
    v24 = *(_DWORD *)(a1 + 64);
    if ((v24 - 5) < 0xFFFFFFFC)
      v25 = 1;
    else
      v25 = v7;
    if ((v25 & 1) != 0)
    {
      v7 = 1;
      goto LABEL_56;
    }
    v7 = 0;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 96) + 148) = v24;
    v23 = *(_DWORD *)(a1 + 48);
  }
  if ((v7 & 1) == 0 && (v23 & 2) != 0)
  {
    v26 = *(_DWORD *)(a1 + 68);
    if (v26)
    {
      CA::WindowServer::Server::set_overscan_adjustment(*(_QWORD *)(a1 + 32), v26);
      v23 = *(_DWORD *)(a1 + 48);
    }
  }
  if ((v23 & 4) != 0)
    v27 = v7;
  else
    v27 = 1;
  if ((v27 & 1) == 0)
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 96) + 280))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 96), *(unsigned __int8 *)(a1 + 76));
    v23 = *(_DWORD *)(a1 + 48);
  }
  if ((v23 & 0x80) != 0)
    v28 = v7;
  else
    v28 = 1;
  if ((v28 & 1) == 0)
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 496))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 77));
    v7 = 0;
  }
LABEL_56:
  *(_QWORD *)&msg.msgh_voucher_port = 0;
  *(_QWORD *)&msg.msgh_bits = 0x1C00000013;
  msg.msgh_remote_port = *(_DWORD *)(a1 + 72);
  msg.msgh_local_port = 0;
  msg.msgh_id = v7 ^ 1;
  v31 = 0;
  if ((mach_msg(&msg, 1, 0x1Cu, 0, 0, 0, 0) - 268435459) <= 1)
    mach_msg_destroy(&msg);
  return mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(_DWORD *)(a1 + 72));
}

uint64_t CA::WindowServer::Server::set_scale(CA::WindowServer::Server *this, double a2, double a3)
{
  pthread_mutex_t *v6;
  int *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int32x4_t v20;
  double v21;
  double v22;

  v6 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v7 = (int *)*((_QWORD *)this + 12);
  v8 = (double)v7[40];
  v9 = (double)v7[24];
  v10 = 1.0 / (*(double (**)(int *))(*(_QWORD *)v7 + 32))(v7);
  v11 = 1.0 / (*(double (**)(int *))(*(_QWORD *)v7 + 24))(v7);
  if (v8 != v9)
  {
    v10 = v10 * (v8 / v9);
    v11 = v11 * (v8 / v9);
  }
  v12 = (double)v7[41];
  v13 = (double)v7[25];
  v14 = 1.0 / (*(double (**)(int *))(*(_QWORD *)v7 + 32))(v7);
  v15 = 1.0 / (*(double (**)(int *))(*(_QWORD *)v7 + 24))(v7);
  if (v12 != v13)
  {
    v14 = v14 * (v12 / v13);
    v15 = v15 * (v12 / v13);
  }
  if (v11 >= a2)
    v21 = a2;
  else
    v21 = v11;
  if (v10 > v21)
    v21 = v10;
  if (v15 >= a3)
    v15 = a3;
  if (v14 > v15)
    v15 = v14;
  v22 = *((double *)v7 + 16);
  if (v22 != v21 || (v22 = *((double *)v7 + 17), v22 != v15))
  {
    *((double *)v7 + 16) = v21;
    *((double *)v7 + 17) = v15;
    CA::WindowServer::Display::update_geometry((uint64_t)v7, v15, v21, v22, v16, v17, v18, v19, v20);
  }
  CA::WindowServer::Server::invalidate((os_unfair_lock_s *)this, *(const CA::Shape **)(*((_QWORD *)this + 12) + 216));
  return pthread_mutex_unlock(v6);
}

uint64_t CA::WindowServer::Server::set_overscan_adjustment(uint64_t a1, int a2)
{
  pthread_mutex_t *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  int32x4_t v12;
  uint64_t v13;
  unsigned int v14;

  v4 = (pthread_mutex_t *)(a1 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
  v13 = *(_QWORD *)(a1 + 96);
  v14 = *(unsigned __int16 *)(v13 + 656);
  if (((v14 >> 8) & 3) != a2)
  {
    *(_WORD *)(v13 + 656) = v14 & 0xFCFF | ((a2 & 3) << 8);
    CA::WindowServer::Display::update_geometry(v13, v5, v6, v7, v8, v9, v10, v11, v12);
    CA::WindowServer::Display::post_display_changed(v13);
  }
  return pthread_mutex_unlock(v4);
}

BOOL CA::WindowServer::display_name_matches(CFTypeRef *this, CA::WindowServer::Server *value, const __CFString *a3)
{
  const __CFSet *v5;
  int v6;

  if ((_DWORD)a3 && (v5 = (const __CFSet *)*((_QWORD *)this[12] + 2)) != 0)
  {
    v6 = CFSetContainsValue(v5, value);
  }
  else
  {
    if (CFEqual(this[13], value))
      return 1;
    if ((*((_BYTE *)this[12] + 745) & 0x20) == 0)
      return 0;
    v6 = CFEqual(value, CFSTR("defaultDisplay"));
  }
  return v6 != 0;
}

void CA::WindowServer::`anonymous namespace'::StopBeforeSlotDelegate::~StopBeforeSlotDelegate(CA::WindowServer::_anonymous_namespace_::StopBeforeSlotDelegate *this)
{
  *(_QWORD *)this = &off_1E158D930;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E158D930;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 8);
  JUMPOUT(0x186DBD990);
}

BOOL CA::WindowServer::`anonymous namespace'::StopBeforeSlotDelegate::update_layer(CA::WindowServer::_anonymous_namespace_::StopBeforeSlotDelegate *this, CA::Render::Context *a2, CA::Render::LayerNode *a3, const CA::Render::Layer *a4)
{
  int v4;
  uint64_t v6;

  v4 = *((unsigned __int8 *)this + 52);
  if (!*((_BYTE *)this + 52))
  {
    v6 = *((_QWORD *)a4 + 18);
    if (v6)
    {
      if (*(_DWORD *)(v6 + 84) == *((_DWORD *)this + 12))
      {
        *((_QWORD *)a3 + 3) |= 0x2000000uLL;
        *((_BYTE *)this + 52) = 1;
      }
    }
  }
  return v4 == 0;
}

void CA::WindowServer::`anonymous namespace'::StopAfterDelegate::~StopAfterDelegate(CA::WindowServer::_anonymous_namespace_::StopAfterDelegate *this)
{
  *(_QWORD *)this = &off_1E158D930;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E158D930;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 8);
  JUMPOUT(0x186DBD990);
}

BOOL CA::WindowServer::`anonymous namespace'::StopAfterDelegate::update_layer(CA::WindowServer::_anonymous_namespace_::StopAfterDelegate *this, CA::Render::Context *a2, CA::Render::LayerNode *a3, const CA::Render::Layer *a4)
{
  return *((_BYTE *)this + 48) == 0;
}

BOOL CA::WindowServer::`anonymous namespace'::StopAfterDelegate::can_include_context(CA::WindowServer::_anonymous_namespace_::StopAfterDelegate *this, CA::Render::Context *a2)
{
  return *((_BYTE *)this + 48) == 0;
}

uint64_t *CA::WindowServer::`anonymous namespace'::StopAfterDelegate::did_include_context(CA::WindowServer::_anonymous_namespace_::StopAfterDelegate *this, CA::Render::Context *a2)
{
  _QWORD *v3;
  uint64_t *result;

  v3 = (_QWORD *)((char *)this + 8);
  result = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)this + 1, *((_DWORD *)a2 + 4));
  if (result)
    result = (uint64_t *)std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(v3, result);
  if (!*((_QWORD *)this + 4))
    *((_BYTE *)this + 48) = 1;
  return result;
}

CA::WindowServer::Server *CA::WindowServer::Server::Server(CA::WindowServer::Server *this, CA::WindowServer::Display *a2, CFTypeRef cf)
{
  __int16 v5;
  __CFNotificationCenter *LocalCenter;
  __CFString **v7;
  const char *CStringPtr;
  __CFNotificationCenter *DarwinNotifyCenter;
  const __CFString *v10;
  const char *v11;
  uint32_t v12;
  uint32_t v13;
  NSObject *v14;
  char v15;
  uint32_t v17;
  uint32_t v18;
  NSObject *v19;
  _QWORD v20[5];
  _QWORD handler[5];
  int out_token;
  uint8_t buf[4];
  uint32_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E1590188;
  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 12) = a2;
  *((_QWORD *)this + 13) = cf;
  *((_DWORD *)this + 38) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_DWORD *)this + 72) = 1;
  *((_QWORD *)this + 40) = 0;
  *((_OWORD *)this + 21) = xmmword_18474E4E0;
  *((_OWORD *)this + 22) = xmmword_18474E480;
  *((_OWORD *)this + 23) = xmmword_18474E020;
  *((_QWORD *)this + 48) = 0;
  *((_WORD *)this + 196) = 0;
  *(_QWORD *)((char *)this + 396) = 0x100000001;
  *(_OWORD *)((char *)this + 404) = 0u;
  *(_OWORD *)((char *)this + 420) = 0u;
  *((_BYTE *)this + 436) = 0;
  *((_DWORD *)this + 110) = 1065353216;
  *(_QWORD *)((char *)this + 452) = 0;
  *(_QWORD *)((char *)this + 444) = 0;
  *((_DWORD *)this + 115) = -1;
  *((_WORD *)this + 232) = 0;
  *((_BYTE *)this + 466) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 60) = 0;
  *((_BYTE *)this + 515) = 1;
  CFRetain(cf);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 24), 0);
  CA::Render::add_observer(1u, 0, (uint64_t)CA::WindowServer::Server::context_created, (uint64_t)this, 0);
  CA::Render::add_observer(0xCu, 0, (uint64_t)CA::WindowServer::Server::ping_server, (uint64_t)this, 0);
  CA::Render::add_observer(0x13u, 0, (uint64_t)CA::WindowServer::Server::render_display, (uint64_t)this, 0);
  CA::Render::add_observer(0x14u, 0, (uint64_t)CA::WindowServer::Server::render_display_layer, (uint64_t)this, 0);
  CA::Render::add_observer(0x15u, 0, (uint64_t)CA::WindowServer::Server::render_display_context_list, (uint64_t)this, 0);
  CA::Render::add_observer(0x1Au, 0, (uint64_t)CA::WindowServer::Server::get_displays, (uint64_t)this, 0);
  CA::Render::add_observer(0x1Bu, 0, (uint64_t)CA::WindowServer::Server::get_display_info, (uint64_t)this, 0);
  CA::Render::add_observer(0x1Cu, 0, (uint64_t)CA::WindowServer::Server::get_display_edr_state, (uint64_t)this, 0);
  CA::Render::add_observer(0x1Du, 0, (uint64_t)CA::WindowServer::Server::get_display_logical_bounds, (uint64_t)this, 0);
  CA::Render::add_observer(0x1Eu, 0, (uint64_t)CA::WindowServer::Server::get_display_auto_luminance_boost, (uint64_t)this, 0);
  CA::Render::add_observer(0x20u, 0, (uint64_t)CA::WindowServer::Server::set_display_properties, (uint64_t)this, 0);
  CA::Render::add_observer(0x21u, 0, (uint64_t)CA::WindowServer::Server::set_display_preset_properties, (uint64_t)this, 0);
  CA::Render::add_observer(0x23u, 0, (uint64_t)CA::WindowServer::Server::set_display_latency, (uint64_t)this, 0);
  CA::Render::add_observer(0x22u, 0, (uint64_t)CA::WindowServer::Server::set_display_user_prefs, (uint64_t)this, 0);
  CA::Render::add_observer(0x2Fu, 0, (uint64_t)CA::WindowServer::Server::display_changed, (uint64_t)this, 0);
  CA::Render::add_observer(0x26u, 0, (uint64_t)CA::WindowServer::Server::purge_server, (uint64_t)this, 0);
  CA::Render::add_observer(0x27u, 0, (uint64_t)CA::WindowServer::Server::set_ax_matrix, (uint64_t)this, 0);
  CA::Render::add_observer(0x30u, 0, (uint64_t)CA::WindowServer::Server::get_debug_log, (uint64_t)this, 0);
  CA::Render::add_observer(0x28u, 0, (uint64_t)CA::WindowServer::Server::get_update_histograms, (uint64_t)this, 0);
  CA::Render::add_observer(0x29u, 0, (uint64_t)CA::WindowServer::Server::get_od_statistics, (uint64_t)this, 0);
  CA::Render::add_observer(0x2Du, 0, (uint64_t)CA::WindowServer::Server::get_performance_info, (uint64_t)this, 0);
  if ((*((_DWORD *)a2 + 156) & 0x40) != 0)
  {
    CA::Render::add_observer(0xDu, 0, (uint64_t)CA::WindowServer::Server::flipbook_render, (uint64_t)this, 0);
    CA::Render::add_observer(0xEu, 0, (uint64_t)CA::WindowServer::Server::flipbook_query_frame, (uint64_t)this, 0);
    CA::Render::add_observer(0xFu, 0, (uint64_t)CA::WindowServer::Server::flipbook_query_memory_usage, (uint64_t)this, 0);
    CA::Render::add_observer(0x10u, 0, (uint64_t)CA::WindowServer::Server::flipbook_copy_current_frame, (uint64_t)this, 0);
    CA::Render::add_observer(0x11u, 0, (uint64_t)CA::WindowServer::Server::flipbook_cancel, (uint64_t)this, 0);
    CA::Render::add_observer(0x12u, 0, (uint64_t)CA::WindowServer::Server::flipbook_modify, (uint64_t)this, 0);
  }
  CA::Render::add_observer(0x34u, 0, (uint64_t)CA::WindowServer::Server::get_surface_replaceability, (uint64_t)this, 0);
  CA::Render::add_observer(0x3Fu, 0, (uint64_t)CA::WindowServer::Server::content_stream_state_changed, (uint64_t)this, 0);
  CA::Render::add_observer(0x40u, 0, (uint64_t)CA::WindowServer::Server::content_stream_modified, (uint64_t)this, 0);
  CA::Render::add_observer(0x41u, 0, (uint64_t)CA::WindowServer::Server::get_display_state_shmem, (uint64_t)this, 0);
  CA::Render::add_observer(0x42u, 0, (uint64_t)CA::WindowServer::Server::set_display_state, (uint64_t)this, 0);
  v5 = *(_WORD *)(*((_QWORD *)this + 12) + 656);
  if ((v5 & 0x1C00) != 0)
  {
    CA::Render::add_observer(0x3Cu, 0, (uint64_t)CA::WindowServer::Server::get_active_display_count, (uint64_t)this, 0);
    v5 = *(_WORD *)(*((_QWORD *)this + 12) + 656);
  }
  if ((v5 & 0x1C00) == 0)
    CA::Render::add_observer(0x46u, 0, (uint64_t)CA::WindowServer::Server::debug_display_state_old_interface, (uint64_t)this, 0);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, this, (CFNotificationCallback)CA::WindowServer::Server::debug_changed, CFSTR("kCADebugOptionsDidChange"), 0, CFNotificationSuspensionBehaviorCoalesce);
  if (CADeviceNeedsISPWorkaround::once[0] != -1)
    dispatch_once(CADeviceNeedsISPWorkaround::once, &__block_literal_global_73);
  if (CADeviceNeedsISPWorkaround::isp_workaround == 1)
  {
    v7 = &isp_notifications;
    do
    {
      CStringPtr = CFStringGetCStringPtr(*v7, 0);
      *((_BYTE *)v7 + 12) = notify_register_check(CStringPtr, (int *)v7 + 2) == 0;
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      v10 = *v7;
      v7 += 2;
      CFNotificationCenterAddObserver(DarwinNotifyCenter, this, (CFNotificationCallback)CA::WindowServer::Server::isp_state_changed, v10, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    }
    while (v7 != (__CFString **)&CA::WindowServer::Server::check_performance(CA::OGL::Renderer *,CA::Render::Update *)::time_threshold);
  }
  if (CADeviceSupportsAPT::once != -1)
    dispatch_once(&CADeviceSupportsAPT::once, &__block_literal_global_37);
  if (CADeviceSupportsAPT::supports_apt && (*(_DWORD *)(*((_QWORD *)this + 12) + 624) & 0x10) != 0)
  {
    out_token = 0;
    v11 = (const char *)*MEMORY[0x1E0C83A00];
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 0x40000000;
    handler[2] = ___ZN2CA12WindowServer6ServerC2EPNS0_7DisplayEPK10__CFString_block_invoke;
    handler[3] = &__block_descriptor_tmp_13633;
    handler[4] = this;
    v12 = notify_register_dispatch(v11, &out_token, MEMORY[0x1E0C80D38], handler);
    if (v12)
    {
      v13 = v12;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v14 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          v24 = v13;
          _os_log_impl(&dword_184457000, v14, OS_LOG_TYPE_ERROR, "Failed to register for thermal pressure notification: 0x%x", buf, 8u);
        }
      }
    }
    else
    {
      CA::WindowServer::Server::thermal_pressure_level_changed(this, out_token);
    }
  }
  if (CADeviceSupportsAndromeda::once != -1)
    dispatch_once(&CADeviceSupportsAndromeda::once, &__block_literal_global_61_9817);
  if (CADeviceSupportsAndromeda::supports_andromeda)
  {
    if ((*(_WORD *)(*((_QWORD *)this + 12) + 656) & 0x1C00) == 0)
    {
      out_token = 0;
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 0x40000000;
      v20[2] = ___ZN2CA12WindowServer6ServerC2EPNS0_7DisplayEPK10__CFString_block_invoke_6;
      v20[3] = &__block_descriptor_tmp_7_13636;
      v20[4] = this;
      v17 = notify_register_dispatch("com.apple.iokit.hid.displayStatus", &out_token, MEMORY[0x1E0C80D38], v20);
      if (v17)
      {
        v18 = v17;
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v19 = x_log_category_windowserver;
          if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            v24 = v18;
            _os_log_impl(&dword_184457000, v19, OS_LOG_TYPE_ERROR, "Failed to register for display state notification: 0x%x", buf, 8u);
          }
        }
      }
    }
  }
  if (CADeviceSupportsMedina::once != -1)
    dispatch_once(&CADeviceSupportsMedina::once, &__block_literal_global_227);
  v15 = CADeviceSupportsMedina::medina;
  if (CADeviceSupportsMedina::medina)
    v15 = (*(_WORD *)(*((_QWORD *)this + 12) + 656) & 0x1C00) == 0;
  *((_BYTE *)this + 525) = v15;
  if ((*(unsigned int (**)(CA::WindowServer::Display *))(*(_QWORD *)a2 + 520))(a2))
    CA::WindowServer::Server::create_blank_context(this);
  return this;
}

void CA::WindowServer::Server::set_display_preset_properties(CA::WindowServer::Server *this, CA::Render::Object *a2, char *a3, void *a4)
{
  char v5;
  mach_port_name_t v6;
  __int128 v7;
  __CFRunLoop *v8;
  __CFRunLoop *v9;
  _QWORD block[4];
  __int128 v11;
  __int128 v12;
  CA::Render::Object *v13;
  mach_port_name_t v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a3[4];
  v6 = *((_DWORD *)a3 + 10);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN2CA12WindowServer6Server29set_display_preset_propertiesEPNS_6Render6ObjectEPvS5__block_invoke;
  block[3] = &__block_descriptor_tmp_66_13659;
  v15 = v5;
  v7 = *(_OWORD *)(a3 + 24);
  v11 = *(_OWORD *)(a3 + 8);
  v12 = v7;
  v13 = a2;
  v14 = v6;
  if (*(_DWORD *)a3 == *(_DWORD *)(*((_QWORD *)a2 + 12) + 24) && !mach_port_mod_refs(*MEMORY[0x1E0C83DA0], v6, 0, 1))
  {
    v8 = (__CFRunLoop *)(*(uint64_t (**)(CA::Render::Object *))(*(_QWORD *)a2 + 384))(a2);
    if (v8)
    {
      v9 = v8;
      CFRunLoopPerformBlock(v8, (CFTypeRef)*MEMORY[0x1E0C9B280], block);
      CFRunLoopWakeUp(v9);
    }
    else
    {
      ___ZN2CA12WindowServer6Server29set_display_preset_propertiesEPNS_6Render6ObjectEPvS5__block_invoke((uint64_t)block);
    }
  }
}

void CA::WindowServer::Server::debug_display_state_old_interface(CA::WindowServer::Server *this, CA::Render::Object *a2, _BYTE *a3, void *a4)
{
  switch(*a3)
  {
    case 5:
      CA::WindowServer::Server::set_blanked(a2, 1);
      break;
    case 6:
      CA::WindowServer::Server::set_blanked(a2, 0);
      break;
    case 7:
      CA::WindowServer::Server::set_flipbook_enabled(a2, 1);
      break;
    case 8:
      CA::WindowServer::Server::set_flipbook_enabled(a2, 0);
      break;
    case 9:
      CA::WindowServer::Server::set_flipbook_suppressed(a2, 1);
      break;
    case 0xA:
      CA::WindowServer::Server::set_flipbook_suppressed(a2, 0);
      break;
    default:
      return;
  }
}

uint64_t CA::WindowServer::Server::debug_changed(CA::WindowServer::Server *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  pthread_mutex_t *v7;
  uint64_t v9;
  int64x2_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v7 = (pthread_mutex_t *)((char *)a2 + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 24));
  *((_BYTE *)a2 + 520) = 1;
  CA::WindowServer::Server::invalidate((os_unfair_lock_s *)a2, *(const CA::Shape **)(*((_QWORD *)a2 + 12) + 216));
  v9 = 0;
  v10 = vdupq_n_s64(0x2000000000000000uLL);
  (*(void (**)(__CFNotificationCenter *, uint64_t *, double))(*(_QWORD *)a2 + 184))(a2, &v9, 0.0);
  return pthread_mutex_unlock(v7);
}

void CA::WindowServer::Server::isp_state_changed(CA::WindowServer::Server *this, __CFNotificationCenter *a2, CFTypeRef cf1, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  uint64_t v8;
  pthread_mutex_t *v9;
  BOOL v10;
  NSObject *v11;
  uint64_t state64;
  uint8_t buf[8];
  uint64_t v14;

  v8 = 0;
  v14 = *MEMORY[0x1E0C80C00];
  state64 = 0;
  v9 = (pthread_mutex_t *)((char *)a2 + 24);
  do
  {
    if (CFEqual(cf1, *(__CFString **)((char *)&isp_notifications + v8)))
    {
      if (notify_get_state(*(_DWORD *)((char *)&isp_notifications + v8 + 8), &state64))
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v11 = x_log_category_windowserver;
          if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v11, OS_LOG_TYPE_ERROR, "Failed to get camera state.", buf, 2u);
          }
        }
      }
      else
      {
        v10 = state64 == 1;
        pthread_mutex_lock(v9);
        *((_BYTE *)a2 + 522) = v10;
        pthread_mutex_unlock(v9);
      }
    }
    v8 += 16;
  }
  while (v8 != 32);
  if ((*(_WORD *)(*((_QWORD *)a2 + 12) + 656) & 0x1C00) == 0x400)
    CA::WindowServer::Server::set_allows_display_compositing(a2, state64 == 0);
}

void ___ZN2CA12WindowServer6ServerC2EPNS0_7DisplayEPK10__CFString_block_invoke_6(uint64_t a1, int token)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  pthread_mutex_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v12[0] = 0;
  if (!notify_get_state(token, v12) && !byte_1ECDC6B09)
  {
    v3 = v12[0];
    v4 = v12[0] == 0;
    pthread_mutex_lock((pthread_mutex_t *)(v2 + 24));
    v5 = *(_QWORD *)(v2 + 96);
    *(_DWORD *)(v5 + 745) = *(_DWORD *)(v5 + 745) & 0xFFFEFFFF | (v4 << 16);
    if (v3)
    {
      *(_QWORD *)(v5 + 696) = 0;
      pthread_mutex_unlock((pthread_mutex_t *)(v2 + 24));
    }
    else
    {
      v6 = x_list_copy(*(uint64_t **)(*(_QWORD *)(v2 + 96) + 40));
      pthread_mutex_unlock((pthread_mutex_t *)(v2 + 24));
      if (v6)
      {
        v7 = v6;
        do
        {
          v8 = *v7;
          v9 = (pthread_mutex_t *)(*v7 + 24);
          pthread_mutex_lock(v9);
          v10 = *(_QWORD *)(v8 + 96);
          if ((*(_DWORD *)(v10 + 624) & 0x80) != 0 && *(_QWORD *)(v10 + 48) == v2)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 704))(v10);
          pthread_mutex_unlock(v9);
          v7 = (_QWORD *)v7[1];
        }
        while (v7);
        do
        {
          v11 = (_QWORD *)v6[1];
          free(v6);
          v6 = v11;
        }
        while (v11);
      }
    }
    if (BYTE9(xmmword_1ECDC6A90))
      kdebug_trace();
  }
}

uint64_t CA::WindowServer::Server::set_allows_display_compositing(CA::WindowServer::Server *this, int a2)
{
  pthread_mutex_t *v4;
  uint64_t v6;
  int64x2_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  if (*((unsigned __int8 *)this + 515) != a2)
  {
    *((_BYTE *)this + 515) = a2;
    CA::WindowServer::Server::invalidate((os_unfair_lock_s *)this, *(const CA::Shape **)(*((_QWORD *)this + 12) + 216));
    v6 = 0;
    v7 = vdupq_n_s64(0x400000uLL);
    (*(void (**)(CA::WindowServer::Server *, uint64_t *, double))(*(_QWORD *)this + 184))(this, &v6, 0.0);
  }
  return pthread_mutex_unlock(v4);
}

uint64_t CA::WindowServer::Server::set_blanked(CA::WindowServer::Server *this, int a2)
{
  NSObject *v4;
  int v5;
  unsigned int v6;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v4 = x_log_category_display_state;
    if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_DWORD *)(*((_QWORD *)this + 12) + 24);
      *(_DWORD *)buf = 67109376;
      v9 = a2;
      v10 = 1024;
      v11 = v5;
      _os_log_impl(&dword_184457000, v4, OS_LOG_TYPE_DEFAULT, "set_blanked (%i) display_id=%u", buf, 0xEu);
    }
  }
  if (a2)
    v6 = 5;
  else
    v6 = 6;
  return CA::WindowServer::Server::set_display_state((uint64_t)this, v6, 0, 0);
}

uint64_t CA::WindowServer::Server::set_flipbook_enabled(CA::WindowServer::Server *this, int a2)
{
  NSObject *v4;
  unsigned int v5;
  uint8_t buf[4];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v4 = x_log_category_flipbook;
    if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v8 = a2;
      _os_log_impl(&dword_184457000, v4, OS_LOG_TYPE_DEFAULT, "set_flipbook_enabled (%d)", buf, 8u);
    }
  }
  if (a2)
    v5 = 7;
  else
    v5 = 8;
  return CA::WindowServer::Server::set_display_state((uint64_t)this, v5, 0, 0);
}

uint64_t CA::WindowServer::Server::set_flipbook_suppressed(CA::WindowServer::Server *this, int a2)
{
  NSObject *v4;
  unsigned int v5;
  uint8_t buf[4];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v4 = x_log_category_flipbook;
    if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v8 = a2;
      _os_log_impl(&dword_184457000, v4, OS_LOG_TYPE_DEFAULT, "set_flipbook_suppressed (%d)", buf, 8u);
    }
  }
  if (a2)
    v5 = 9;
  else
    v5 = 10;
  return CA::WindowServer::Server::set_display_state((uint64_t)this, v5, 0, 0);
}

uint64_t ___ZN2CA12WindowServer6Server29set_display_preset_propertiesEPNS_6Render6ObjectEPvS5__block_invoke(uint64_t a1)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  mach_msg_id_t v7;
  __int128 v10;
  mach_msg_header_t msg;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *(_BYTE *)(a1 + 76) != 0;
  v10 = *(_OWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD **)(a1 + 64);
  *(_DWORD *)(v5[12] + 745) |= 0x400u;
  *(_QWORD *)&msg.msgh_bits = 0;
  *(int64x2_t *)&msg.msgh_remote_port = vdupq_n_s64(0x8000000000uLL);
  (*(void (**)(_QWORD *, mach_msg_header_t *, double))(*v5 + 184))(v5, &msg, 0.0);
  v6 = v5[12];
  LOBYTE(msg.msgh_bits) = v2;
  *(mach_msg_bits_t *)((char *)&msg.msgh_bits + 1) = 0;
  msg.msgh_size = 0;
  *(_OWORD *)&msg.msgh_remote_port = v10;
  v12 = v3;
  v13 = v4;
  v7 = (*(uint64_t (**)(uint64_t, mach_msg_header_t *))(*(_QWORD *)v6 + 1376))(v6, &msg);
  if (v7
    && *(_BYTE *)(a1 + 76)
    && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 96) + 745) & 0x4000) == 0
    && MEMORY[0x1E0D15478] != 0)
  {
    analytics_send_event_lazy();
  }
  *(_QWORD *)&msg.msgh_voucher_port = 0;
  *(_QWORD *)&msg.msgh_bits = 0x1C00000013;
  msg.msgh_remote_port = *(_DWORD *)(a1 + 72);
  msg.msgh_local_port = 0;
  msg.msgh_id = v7;
  LODWORD(v12) = 0;
  if ((mach_msg(&msg, 1, 0x1Cu, 0, 0, 0, 0) - 268435459) <= 1)
    mach_msg_destroy(&msg);
  return mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(_DWORD *)(a1 + 72));
}

xpc_object_t ___ZN2CA12WindowServer6Server29set_display_preset_propertiesEPNS_6Render6ObjectEPvS5__block_invoke_2(double *a1)
{
  xpc_object_t v2;
  char __str[4];
  __int16 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  *(_DWORD *)__str = 0;
  v2 = xpc_dictionary_create(0, 0, 0);
  snprintf(__str, 6uLL, "%4.2f", a1[4]);
  xpc_dictionary_set_string(v2, "x_delta", __str);
  snprintf(__str, 6uLL, "%4.2f", a1[5]);
  xpc_dictionary_set_string(v2, "y_delta", __str);
  snprintf(__str, 6uLL, "%4.2f", a1[6]);
  xpc_dictionary_set_string(v2, "luminance_scale", __str);
  return v2;
}

uint64_t CA::WindowServer::Server::set_clone_master(CA::WindowServer::Server *this, CA::WindowServer::Server *a2, int a3)
{
  pthread_mutex_t *v6;
  uint64_t v7;

  v6 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v7 = *((_QWORD *)this + 12);
  *(_QWORD *)(v7 + 48) = a2;
  *(_DWORD *)(v7 + 56) = a3;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 680))(v7);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 12) + 264))(*((_QWORD *)this + 12));
  if (a2)
    (*(void (**)(CA::WindowServer::Server *))(*(_QWORD *)this + 392))(this);
  return pthread_mutex_unlock(v6);
}

uint64_t CA::WindowServer::Server::clones(CA::WindowServer::Server *this, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v4 = (pthread_mutex_t *)(a2 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 24));
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  v5 = *(uint64_t **)(*(_QWORD *)(a2 + 96) + 40);
  if (v5)
  {
    v6 = 0;
    do
    {
      v7 = *v5;
      v8 = *((_QWORD *)this + 2);
      if ((unint64_t)v6 >= v8)
      {
        v10 = *(_QWORD **)this;
        v11 = ((uint64_t)v6 - *(_QWORD *)this) >> 3;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          abort();
        v13 = v8 - (_QWORD)v10;
        if (v13 >> 2 > v12)
          v12 = v13 >> 2;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          if (v14 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v15 = (char *)operator new(8 * v14);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[8 * v11];
        *(_QWORD *)v16 = v7;
        v9 = v16 + 8;
        if (v6 != v10)
        {
          do
          {
            v17 = *--v6;
            *((_QWORD *)v16 - 1) = v17;
            v16 -= 8;
          }
          while (v6 != v10);
          v6 = *(_QWORD **)this;
        }
        *(_QWORD *)this = v16;
        *((_QWORD *)this + 1) = v9;
        *((_QWORD *)this + 2) = &v15[8 * v14];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *v6 = v7;
        v9 = v6 + 1;
      }
      *((_QWORD *)this + 1) = v9;
      v5 = (uint64_t *)v5[1];
      v6 = v9;
    }
    while (v5);
  }
  return pthread_mutex_unlock(v4);
}

uint64_t CA::WindowServer::Server::remove_clone(CA::WindowServer::Server *this, CA::WindowServer::Server *a2)
{
  pthread_mutex_t *v4;
  uint64_t v6;
  int64x2_t v7;
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  if (*(CA::WindowServer::Server **)(*((_QWORD *)a2 + 12) + 48) != this)
    return pthread_mutex_unlock(v4);
  CA::WindowServer::Server::clear_replay_contexts(a2);
  v6 = *((_QWORD *)this + 12);
  *(_QWORD *)(v6 + 40) = x_list_remove(*(_QWORD **)(v6 + 40), (uint64_t)a2);
  pthread_mutex_unlock(v4);
  CA::WindowServer::Server::set_clone_master(a2, 0, 0);
  v8 = 0;
  v7 = vdupq_n_s64(0x80000uLL);
  v9 = v7;
  (*(void (**)(CA::WindowServer::Server *, uint64_t *, double))(*(_QWORD *)this + 184))(this, &v8, 0.0);
  v8 = 0;
  v9 = v7;
  return (*(uint64_t (**)(CA::WindowServer::Server *, uint64_t *, double))(*(_QWORD *)a2 + 184))(a2, &v8, 0.0);
}

void CA::WindowServer::Server::clear_replay_contexts(CA::WindowServer::Server *this)
{
  unint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  unint64_t i;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  malloc_zone_t *malloc_zone;

  v2 = (_QWORD *)*((_QWORD *)this + 17);
  v1 = *((_QWORD *)this + 18);
  v3 = (_QWORD *)((char *)this + 136);
  if (v1)
  {
    for (i = 0; i < v1; ++i)
    {
      v6 = (unsigned int *)v2[2 * i];
      if (v6)
      {
        v7 = v6 + 2;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
        v2 = (_QWORD *)*((_QWORD *)this + 17);
        v1 = *((_QWORD *)this + 18);
        v2[2 * i] = 0;
      }
    }
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, v2);
  *v3 = 0;
  v3[1] = 0;
}

uint64_t CA::WindowServer::Server::replay_render(CA::WindowServer::Server *this, double a2, CA::WindowServer::Display *a3, BOOL *a4)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  BOOL *v7;
  BOOL *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  os_unfair_lock_s *v12;
  os_unfair_lock_s *v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  CA::Render::Context **v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  CA::Render::Layer *v28;
  double v29;
  int32x2_t v30;
  float64x2_t v31;
  int8x16_t v32;
  int8x16_t v37;
  int v38;
  int v39;
  BOOL v42;
  int v43;
  __int128 v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t i;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  CA::Render::LayerNode *v57;
  int v58;
  int v59;
  unint64_t v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  CA::Render::Context *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const double *v70;
  uint64_t v71;
  CA::Render::Layer *v72;
  CA::Render::LayerNode *v73;
  const CA::Shape *v74;
  int64x2_t v75;
  const CA::Shape *v76;
  char v77;
  __int128 v78;
  unint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  int v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _BYTE v88[136];
  uint64_t v89;
  int v90;
  int v91;
  float64x2_t v92[9];
  _QWORD v93[2];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  _QWORD v104[2];
  CA::Shape *v105;
  int v106;
  uint64_t v107;
  unsigned int v108;
  unsigned __int16 v109;
  float64x2_t v110;
  float64x2_t v111;
  uint64_t v112;

  v4 = MEMORY[0x1E0C80A78](this);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = v4;
  v13 = v12;
  v112 = *MEMORY[0x1E0C80C00];
  v14 = v12 + 4;
  os_unfair_lock_lock(v12 + 4);
  if (LOBYTE(v13[129]._os_unfair_lock_opaque))
  {
    v15 = mergesort(*(void **)&v13[34]._os_unfair_lock_opaque, *(_QWORD *)&v13[36]._os_unfair_lock_opaque, 0x10uLL, (int (__cdecl *)(const void *, const void *))CA::WindowServer::Server::compare_levels);
    LOBYTE(v13[129]._os_unfair_lock_opaque) = 0;
  }
  v16 = *(_QWORD *)&v13[24]._os_unfair_lock_opaque;
  v17 = *(_BYTE *)(*(_QWORD *)(v16 + 728) + 1) != 1 || *(_QWORD *)(v16 + 640) == 0;
  v18 = *(_QWORD *)&v13[36]._os_unfair_lock_opaque;
  if (v18)
  {
    v19 = 8 * v18;
    if ((unint64_t)(8 * v18) > 0x1000)
    {
      v20 = (CA::Render::Context **)malloc_type_malloc(8 * v18, 0x2302DD04uLL);
    }
    else
    {
      MEMORY[0x1E0C80A78](v15);
      v20 = (CA::Render::Context **)((char *)&v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
      bzero(v20, 8 * v18);
    }
    for (i = 0; i != v18; ++i)
    {
      v52 = *(unsigned int **)(*(_QWORD *)&v13[34]._os_unfair_lock_opaque + 16 * i);
      if (v52)
      {
        v53 = v52 + 2;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 + 1, v53));
        if (!v54)
        {
          do
          {
            v52 = 0;
            v55 = __ldaxr(v53);
          }
          while (__stlxr(v55 - 1, v53));
        }
      }
      v20[i] = (CA::Render::Context *)v52;
    }
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  os_unfair_lock_unlock(v14);
  *v8 = v18 != 0;
  if (v18)
    v21 = v17;
  else
    v21 = 1;
  if ((v21 & 1) != 0 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 216))(v10))
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v13[24]._os_unfair_lock_opaque + 224))(*(_QWORD *)&v13[24]._os_unfair_lock_opaque, 0);
    v22 = 1;
    if (!v18)
      goto LABEL_46;
    goto LABEL_40;
  }
  v22 = 1;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)&v13[24]._os_unfair_lock_opaque + 224))(*(_QWORD *)&v13[24]._os_unfair_lock_opaque, 1);
  if ((*(unsigned int (**)(_QWORD, uint64_t, double, double))(**(_QWORD **)&v13[24]._os_unfair_lock_opaque
                                                                       + 352))(*(_QWORD *)&v13[24]._os_unfair_lock_opaque, v6, 0.0, 0.0))
  {
LABEL_40:
    v45 = 0;
    do
    {
      v46 = (unsigned int *)v20[v45];
      v47 = v46 + 2;
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
        (*(void (**)(unsigned int *))(*(_QWORD *)v46 + 16))(v46);
      ++v45;
    }
    while (v45 != v18);
    goto LABEL_46;
  }
  v23 = *(_QWORD *)&v13[24]._os_unfair_lock_opaque;
  v89 = *(_QWORD *)(v23 + 200);
  v25 = *(_DWORD *)(v23 + 208);
  v24 = *(_DWORD *)(v23 + 212);
  v90 = v25;
  v91 = v24;
  v26 = 0uLL;
  v87 = 0u;
  LOBYTE(v23) = *(_BYTE *)(v23 + 56);
  v81 = v10;
  if ((v23 & 0x40) != 0)
  {
    v84 = 0;
    v56 = 0;
LABEL_61:
    v82 = v26;
    v83 = v26;
    v85 = v26;
    v86 = v26;
    goto LABEL_62;
  }
  v27 = CA::Render::Context::root_layer_handle(*v20);
  if (!v27 || (v28 = *(CA::Render::Layer **)(v27 + 16)) == 0)
  {
    v84 = 0;
    v56 = 0;
    v26 = 0uLL;
    goto LABEL_61;
  }
  CA::Render::Layer::frame((CA::Render::Layer *)&v110, v28);
  if (v111.f64[0] <= v111.f64[1])
    v29 = v111.f64[1];
  else
    v29 = v111.f64[0];
  v30 = (int32x2_t)0xC0000000C0000000;
  if (v29 < 1073741820.0)
  {
    v31.f64[0] = NAN;
    v31.f64[1] = NAN;
    v32 = (int8x16_t)vnegq_f64(v31);
    __asm { FMOV            V3.2D, #0.5 }
    v37 = (int8x16_t)vaddq_f64(v110, v111);
    v30 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8(v32, _Q3, v37), (float64x2_t)v37))), vmovn_s64(vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8(v32, _Q3, (int8x16_t)v110), v110))));
  }
  v38 = v30.i32[0];
  v39 = v30.i32[1];
  if (v30.i32[0])
    _ZF = v30.i32[1] == 0;
  else
    _ZF = 1;
  v42 = _ZF || v30.i32[0] == v25 || v30.i32[1] == v24;
  v43 = v42;
  if (v42)
  {
    v84 = 0;
    v87 = 0u;
    v82 = 0u;
    v83 = 0u;
    v44 = 0uLL;
    v85 = 0u;
  }
  else
  {
    *(double *)&v78 = (double)v25 / (double)v30.i32[0];
    *(_QWORD *)&v44 = 0;
    v85 = (unint64_t)v78;
    if (*(double *)&v78 == (double)v24 / (double)v39)
    {
      *((double *)&v44 + 1) = (double)v25 / (double)v38;
      *((double *)&v78 + 1) = 1.0 / *(double *)&v78;
      v87 = v78;
      v84 = 8 * (*(double *)&v78 != 1.0);
      v82 = xmmword_18474DF40;
      v83 = xmmword_18474DF50;
    }
    else
    {
      *((double *)&v44 + 1) = (double)v24 / (double)v39;
      v82 = xmmword_18474DF40;
      v83 = xmmword_18474DF50;
      __asm { FMOV            V0.2D, #1.0 }
      v87 = _Q0;
      v84 = 16;
    }
  }
  v86 = v44;
  v56 = v43 ^ 1;
LABEL_62:
  bzero(v104, 0x430uLL);
  CA::Render::Update::Update((CA::Render::Update *)v104, (const CA::Bounds *)&v110, 0x2000uLL, v11, 0, 0, 0, 0, (const CA::Bounds *)&v89, v13[46]._os_unfair_lock_opaque | 0x10000);
  if (v104[0])
  {
    v80 = v19;
    v58 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v13[24]._os_unfair_lock_opaque + 1552))(*(_QWORD *)&v13[24]._os_unfair_lock_opaque);
    v59 = 256;
    if (!v58)
      v59 = 0;
    v60 = v108 & 0xFFFFFEFF | ((unint64_t)v109 << 32);
    v108 = v108 & 0xFFFFFEFF | v59;
    v109 = WORD2(v60);
    v61 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v13[24]._os_unfair_lock_opaque + 1576))(*(_QWORD *)&v13[24]._os_unfair_lock_opaque);
    v62 = 512;
    if (!v61)
      v62 = 0;
    v63 = v108 & 0xFFFF797B | v62;
    v64 = 32772;
    if ((_DWORD)v6)
      v64 = 33796;
    v108 = v64 | v63;
    v109 = (((unint64_t)(v106 & 0x80000) << 14) | ((unint64_t)v109 << 32)) >> 32;
    v107 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v13[24]._os_unfair_lock_opaque + 1392))(*(_QWORD *)&v13[24]._os_unfair_lock_opaque);
    v93[0] = 0;
    v93[1] = 0;
    CA::Render::Fence::BatchWaitLock::BatchWaitLock((CA::Render::Fence::BatchWaitLock *)v93);
    v65 = v18;
    do
    {
      v66 = v20[v65 - 1];
      pthread_mutex_lock((pthread_mutex_t *)((char *)v66 + 72));
      if (v56 && (v67 = CA::Render::Context::root_layer_handle(v66)) != 0 && *(_QWORD *)(v67 + 16))
      {
        memset(v88, 0, 128);
        v68 = CA::Render::Context::root_layer_handle(v66);
        if (v68)
          v68 = *(_QWORD *)(v68 + 16);
        CA::Render::Layer::compute_frame_transform(v68, 0, (CA::Mat4Impl *)v88, 0);
        v94 = v85;
        v95 = 0u;
        v97 = 0u;
        v98 = 0u;
        v96 = v86;
        v99 = v82;
        v100 = 0u;
        v101 = v83;
        v102 = v87;
        v103 = v84;
        CA::Transform::set((uint64_t)v92, (CA::Mat4Impl *)v88, 1);
        CA::Transform::concat_left((CA::Transform *)&v94, v92, v69, v70);
        v71 = CA::Render::Context::root_layer_handle(v66);
        if (v71)
          v72 = *(CA::Render::Layer **)(v71 + 16);
        else
          v72 = 0;
        CA::Render::Update::add_context((CA::Render::Update *)v104, v66, v72, (const CA::Transform *)&v94);
      }
      else
      {
        CA::Render::Update::add_context((CA::Render::Update *)v104, v66);
      }
      --v65;
      pthread_mutex_unlock((pthread_mutex_t *)((char *)v66 + 72));
    }
    while (v65);
    CA::Render::Fence::BatchWaitLock::invalidate((uint64_t)v93);
    CA::Render::Update::added_all_contexts((CA::Render::Update *)v104, v73, v74, v75);
    v95 = 0u;
    v96 = 0u;
    v94 = 0u;
    CA::Shape::operator=((uint64_t)&v94, (_DWORD *)(v81 + 168));
    CA::shape_union(&v105, (CA::Shape **)&v94, v76);
    v77 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v13[24]._os_unfair_lock_opaque + 208))(*(_QWORD *)&v13[24]._os_unfair_lock_opaque);
    if ((v77 & 1) != 0)
    {
      LODWORD(v94) = 3;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)&v13[24]._os_unfair_lock_opaque + 408))(*(_QWORD *)&v13[24]._os_unfair_lock_opaque, v104);
      (*(void (**)(os_unfair_lock_s *, _QWORD *, __int128 *))(*(_QWORD *)&v13->_os_unfair_lock_opaque + 424))(v13, v104, &v94);
      (*(void (**)(_QWORD, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)&v13[24]._os_unfair_lock_opaque + 416))(*(_QWORD *)&v13[24]._os_unfair_lock_opaque, v104, v94, 0);
      v22 = 0;
    }
    else
    {
      v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v13[24]._os_unfair_lock_opaque + 216))(*(_QWORD *)&v13[24]._os_unfair_lock_opaque);
    }
    v19 = v80;
    CA::Render::Fence::BatchWaitLock::invalidate((uint64_t)v93);
  }
  else
  {
    v22 = 0;
  }
  CA::Render::Update::~Update((CA::Render::Update *)v104, v57);
  if (v18)
    goto LABEL_40;
LABEL_46:
  if (v19 > 0x1000)
    free(v20);
  CA::Render::collect(0, v11);
  return v22;
}

unsigned int *CA::WindowServer::Server::attach_contexts(CA::WindowServer::Server *this)
{
  unsigned int *result;
  void *v3;
  void *v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  result = CA::Render::Context::copy_all_contexts(this);
  if (result)
  {
    v5 = result;
    if (result[4])
    {
      v6 = 0;
      do
        result = (unsigned int *)CA::WindowServer::Server::context_created(*(_QWORD *)&v5[2 * v6++ + 6], this, v3, v4);
      while (v6 < v5[4]);
    }
    v7 = v5 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
  }
  return result;
}

uint64_t CA::WindowServer::Server::set_server_thread_policy(CA::WindowServer::Server *this)
{
  thread_act_t v1;
  integer_t policy_info;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  policy_info = 0;
  v1 = MEMORY[0x186DBE0B0](this);
  thread_policy_set(v1, 1u, &policy_info, 1u);
  if (proc_setthread_cpupercent())
  {
    policy_info = 1;
    thread_policy_set(v1, 1u, &policy_info, 1u);
  }
  return mach_port_deallocate(*MEMORY[0x1E0C83DA0], v1);
}

void CA::WindowServer::Server::inhibit_clone_render(CA::WindowServer::Server *this, CA::WindowServer::Surface *a2, CA::Render::Update *a3, CA::WindowServer::Display *a4, double a5)
{
  double v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  os_unfair_lock_s *v32;
  CA::Render::LayerNode *v33;
  int v34;
  int v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  CA::Render::LayerNode *v42;
  const CA::Shape *v43;
  int64x2_t v44;
  const CA::Shape *v45;
  os_unfair_lock_s *v46;
  uint64_t i;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  os_unfair_lock_s *v55;
  __int128 v56;
  _QWORD v57[2];
  _QWORD v58[2];
  CA::Shape *v59[58];
  int v60;
  unsigned int v61;
  unsigned __int16 v62;
  uint64_t v63;
  CA::Shape *v64[2];
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v5 = MEMORY[0x1E0C80A78](this);
  v7 = v6;
  v55 = v8;
  v67 = *MEMORY[0x1E0C80C00];
  v9 = *(uint64_t **)(v6 + 336);
  v53 = v10;
  v54 = v11;
  HIDWORD(v52) = v12;
  v13 = 0;
  v14 = 0;
  if (v9)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      if (!*((_BYTE *)v9 + 20))
      {
        v17 = *(_DWORD *)(v9[1] + 16);
        if ((unint64_t)v16 >= v15)
        {
          v18 = (v16 - v13) >> 2;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62)
            abort();
          if ((uint64_t)(v15 - (_QWORD)v13) >> 1 > v19)
            v19 = (uint64_t)(v15 - (_QWORD)v13) >> 1;
          if (v15 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v19;
          if (v20)
          {
            v20 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v20);
            v16 = v14;
          }
          else
          {
            v21 = 0;
          }
          v22 = (char *)(v20 + 4 * v18);
          *(_DWORD *)v22 = v17;
          v14 = v22 + 4;
          while (v16 != v13)
          {
            v23 = *((_DWORD *)v16 - 1);
            v16 -= 4;
            *((_DWORD *)v22 - 1) = v23;
            v22 -= 4;
          }
          v15 = v20 + 4 * v21;
          if (v13)
            operator delete(v13);
          v13 = v22;
          v16 = v14;
        }
        else
        {
          *(_DWORD *)v16 = v17;
          v16 += 4;
          v14 = v16;
        }
      }
      v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  v24 = v55 + 4;
  os_unfair_lock_lock(v55 + 4);
  v26 = v14 - v13;
  if (v14 == v13)
  {
    os_unfair_lock_unlock(v24);
  }
  else
  {
    v27 = v26 >> 2;
    v28 = 2 * v26;
    if ((unint64_t)(2 * v26) > 0x1000)
    {
      v29 = (char *)malloc_type_malloc(2 * v26, 0x2FFA699EuLL);
    }
    else
    {
      MEMORY[0x1E0C80A78](v25);
      v29 = (char *)&v52 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v29, v28);
    }
    v30 = 0;
    if (v27 <= 1)
      v31 = 1;
    else
      v31 = v27;
    do
    {
      *(_QWORD *)&v29[8 * v30] = CA::Render::Context::context_by_id((CA::Render::Context *)*(unsigned int *)&v13[4 * v30]);
      ++v30;
    }
    while (v31 != v30);
    os_unfair_lock_unlock(v24);
    v56 = *(_OWORD *)(v54 + 200);
    bzero(v58, 0x430uLL);
    v32 = v55;
    CA::Render::Update::Update((CA::Render::Update *)v58, (const CA::Bounds *)&v63, 0x2000uLL, v5, 0, 0, 0, 0, (const CA::Bounds *)(v7 + 192), v55[46]._os_unfair_lock_opaque);
    if (v58[0])
    {
      v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v32[24]._os_unfair_lock_opaque + 1552))(*(_QWORD *)&v32[24]._os_unfair_lock_opaque);
      v35 = 256;
      if (!v34)
        v35 = 0;
      v36 = v61 & 0xFFFFFEFF | ((unint64_t)v62 << 32);
      v61 = v61 & 0xFFFFFEFF | v35;
      v62 = WORD2(v36);
      v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v32[24]._os_unfair_lock_opaque + 1576))(*(_QWORD *)&v32[24]._os_unfair_lock_opaque);
      v38 = 512;
      if (!v37)
        v38 = 0;
      v39 = 0x200008004;
      if (HIDWORD(v52))
        v39 = 0x200008404;
      v40 = v39 | (v61 | ((unint64_t)v62 << 32)) & 0xFFFDFFFF797BLL | v38;
      v61 = v39 | v61 & 0xFFFF797B | v38;
      v62 = WORD2(v40);
      v59[33] = (CA::Shape *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)&v32[24]._os_unfair_lock_opaque + 1392))(*(_QWORD *)&v32[24]._os_unfair_lock_opaque);
      CA::Render::Update::set_display_attributes((uint64_t)v58, (float *)(v7 + 352));
      v60 = *(_DWORD *)(v7 + 480);
      v57[0] = 0;
      v57[1] = 0;
      CA::Render::Fence::BatchWaitLock::BatchWaitLock((CA::Render::Fence::BatchWaitLock *)v57);
      do
      {
        v41 = *(_QWORD *)&v29[8 * v27 - 8];
        if (v41)
        {
          pthread_mutex_lock((pthread_mutex_t *)(v41 + 72));
          CA::Render::Update::add_context((CA::Render::Update *)v58, (CA::Render::Context *)v41);
          pthread_mutex_unlock((pthread_mutex_t *)(v41 + 72));
        }
        --v27;
      }
      while (v27);
      CA::Render::Fence::BatchWaitLock::invalidate((uint64_t)v57);
      CA::Render::Update::added_all_contexts((CA::Render::Update *)v58, v42, v43, v44);
      v65 = 0u;
      v66 = 0u;
      *(_OWORD *)v64 = 0u;
      CA::Shape::operator=((uint64_t)v64, &v56);
      CA::shape_union(v59, v64, v45);
      v46 = v55;
      (*(void (**)(os_unfair_lock_s *, _QWORD *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)&v55->_os_unfair_lock_opaque
                                                                                                 + 432))(v55, v58, v53, &v56, 1, 0);
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v46[24]._os_unfair_lock_opaque + 1568))(*(_QWORD *)&v46[24]._os_unfair_lock_opaque, (v62 >> 2) & 1);
      CA::Render::Fence::BatchWaitLock::invalidate((uint64_t)v57);
    }
    CA::Render::Update::~Update((CA::Render::Update *)v58, v33);
    for (i = 0; i != v31; ++i)
    {
      v48 = *(unsigned int **)&v29[8 * i];
      if (v48)
      {
        v49 = v48 + 2;
        do
        {
          v50 = __ldaxr(v49);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, v49));
        if (!v51)
          (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 16))(v48);
      }
    }
    if (v28 > 0x1000)
      free(v29);
  }
  CA::Render::collect(0, v5);
  if (v13)
    operator delete(v13);
}

xpc_object_t ___ZN2CA12WindowServer6Server20set_brightness_limitEf_block_invoke()
{
  return xpc_dictionary_create(0, 0, 0);
}

uint64_t CA::WindowServer::Server::set_irdc_hint(CA::WindowServer::Server *this)
{
  pthread_mutex_t *v2;
  uint64_t v4;
  int64x2_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 12) + 1336))(*((_QWORD *)this + 12));
  v4 = 0;
  v5 = vdupq_n_s64(8uLL);
  (*(void (**)(CA::WindowServer::Server *, uint64_t *, double))(*(_QWORD *)this + 184))(this, &v4, 0.0);
  return pthread_mutex_unlock(v2);
}

void CA::WindowServer::Server::update_display_modes_locked(CA::WindowServer::Server *this)
{
  uint64_t v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD))(**((_QWORD **)this + 12) + 808))(*((_QWORD *)this + 12));
  v2 = *(_QWORD *)(*((_QWORD *)this + 12) + 48);
  if (v2)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 0x40000000;
    v3[2] = ___ZN2CA12WindowServer6Server27update_display_modes_lockedEb_block_invoke;
    v3[3] = &__block_descriptor_tmp_156;
    v3[4] = v2;
    CA::WindowServer::Server::schedule_block(v2, v3);
  }
}

uint64_t ___ZN2CA12WindowServer6Server27update_display_modes_lockedEb_block_invoke(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v4;
  int64x2_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 96) + 745);
  *v1 |= 0x400u;
  v2 = *(_QWORD *)(a1 + 32);
  v4 = 0;
  v5 = vdupq_n_s64(0x1000000000uLL);
  return (*(uint64_t (**)(uint64_t, uint64_t *, double))(*(_QWORD *)v2 + 184))(v2, &v4, 0.0);
}

void CA::WindowServer::Server::schedule_block(uint64_t a1, void *a2)
{
  __CFRunLoop *v3;
  __CFRunLoop *v4;

  v3 = (__CFRunLoop *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1);
  if (v3)
  {
    v4 = v3;
    CFRunLoopPerformBlock(v3, (CFTypeRef)*MEMORY[0x1E0C9B280], a2);
    CFRunLoopWakeUp(v4);
  }
}

void CA::WindowServer::Server::set_frame_info_callback(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *v4;
  const void *v5;

  v4 = (os_unfair_lock_s *)(a1 + 320);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 320));
  v5 = *(const void **)(a1 + 8);
  if (v5)
  {
    _Block_release(v5);
    *(_QWORD *)(a1 + 8) = 0;
  }
  if (a2)
    *(_QWORD *)(a1 + 8) = _Block_copy(a2);
  os_unfair_lock_unlock(v4);
}

void CA::WindowServer::Server::set_brightness_callback(uint64_t a1, void *aBlock)
{
  const void *v4;

  v4 = *(const void **)(a1 + 232);
  if (v4)
  {
    _Block_release(v4);
    *(_QWORD *)(a1 + 232) = 0;
  }
  if (aBlock)
    *(_QWORD *)(a1 + 232) = _Block_copy(aBlock);
}

void CA::WindowServer::Server::post_brightness_notification(CA::WindowServer::Server *this)
{
  uint64_t v2;
  _BOOL4 v3;
  NSObject *v4;
  int v5;
  NSObject *v6;
  int v7;
  uint8_t buf[4];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 29);
  v3 = x_log_hook_p();
  if (v2)
  {
    if (v3)
    {
      x_log_();
    }
    else
    {
      v4 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        v5 = *(_DWORD *)(*((_QWORD *)this + 12) + 24);
        *(_DWORD *)buf = 67109120;
        v9 = v5;
        _os_log_impl(&dword_184457000, v4, OS_LOG_TYPE_DEFAULT, "Display %u posting brightness notification", buf, 8u);
      }
    }
    (*(void (**)(_QWORD))(*((_QWORD *)this + 29) + 16))(*((_QWORD *)this + 29));
  }
  else if (v3)
  {
    x_log_();
  }
  else
  {
    v6 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_DWORD *)(*((_QWORD *)this + 12) + 24);
      *(_DWORD *)buf = 67109120;
      v9 = v7;
      _os_log_impl(&dword_184457000, v6, OS_LOG_TYPE_DEFAULT, "Display %u, no brightness handler registered", buf, 8u);
    }
  }
}

uint64_t CA::WindowServer::Server::set_secure(CA::WindowServer::Server *this, int a2)
{
  pthread_mutex_t *v4;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  if (*((unsigned __int8 *)this + 514) != a2)
  {
    *((_BYTE *)this + 514) = a2;
    *((_BYTE *)this + 521) = 1;
    CA::WindowServer::Server::invalidate((os_unfair_lock_s *)this, *(const CA::Shape **)(*((_QWORD *)this + 12) + 216));
    v11 = 0;
    __asm { FMOV            V0.2D, #2.0 }
    v12 = _Q0;
    (*(void (**)(CA::WindowServer::Server *, uint64_t *, double))(*(_QWORD *)this + 184))(this, &v11, 0.0);
  }
  return pthread_mutex_unlock(v4);
}

uint64_t CA::WindowServer::Server::retain_context(os_unfair_lock_s *this, int a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v11;

  v4 = this + 4;
  os_unfair_lock_lock(this + 4);
  v5 = *(_QWORD *)&this[32]._os_unfair_lock_opaque;
  if (v5)
  {
    v6 = *(uint64_t **)&this[28]._os_unfair_lock_opaque;
    while (1)
    {
      v7 = *v6;
      if (*(_DWORD *)(*v6 + 16) == a2)
        break;
      v6 += 2;
      if (!--v5)
        goto LABEL_5;
    }
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    if (!v9)
    {
      v7 = 0;
      do
        v11 = __ldaxr(v8);
      while (__stlxr(v11 - 1, v8));
    }
  }
  else
  {
LABEL_5:
    v7 = 0;
  }
  os_unfair_lock_unlock(v4);
  return v7;
}

uint64_t *CA::CG::BasicState::SoftMask::SoftMask(uint64_t *a1)
{
  *a1 = CGSoftMaskRetain();
  a1[1] = CGRenderingStateRetain();
  a1[2] = CGGStateRetain();
  return a1;
}

uint64_t CA::CG::StrokeState::StrokeState(uint64_t a1)
{
  double *v2;
  double v3;
  double *CTM;

  v2 = (double *)(a1 + 8);
  CGGStateGetStrokeParameters();
  if (*(_QWORD *)(a1 + 16))
    CGDashRetain();
  if (*v2 == 0.0)
  {
    v3 = *(double *)a1;
  }
  else
  {
    CTM = (double *)CGGStateGetCTM();
    v3 = fmax(*(double *)(a1 + 8) / sqrt(fmax(*CTM * *CTM + CTM[1] * CTM[1], CTM[2] * CTM[2] + CTM[3] * CTM[3])), *(double *)a1);
  }
  *(double *)(a1 + 8) = v3;
  return a1;
}

double CA::CG::stroke_radius(uint64_t a1, float64x2_t a2, float64x2_t a3)
{
  double v3;
  double v4;
  double v5;

  v3 = 0.5;
  if (*(double *)a1 != *MEMORY[0x1E0C9DB10])
  {
    v4 = *(double *)(a1 + 24);
    if (v4 < 1.0)
      v4 = 1.0;
    if (*(_DWORD *)(a1 + 36))
      v4 = 1.0;
    v5 = *(double *)(a1 + 8) * 0.5 * v4;
    if (*(_DWORD *)(a1 + 32) == 2)
      v5 = v5 * 1.41421356;
    *(_QWORD *)&v3 = *(_OWORD *)&vmulq_n_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgezq_f64(a3), (int8x16_t)a3, (int8x16_t)vnegq_f64(a3)), (float64x2_t)vbslq_s8((int8x16_t)vcgezq_f64(a2), (int8x16_t)a2, (int8x16_t)vnegq_f64(a2))), v5);
  }
  return v3;
}

uint64_t CA::CG::create_stroked_path(const CGPath *a1, _OWORD *a2, uint64_t a3, char a4)
{
  const double *v8;
  uint64_t StrokedPath;
  const CGPath *DashedPath;
  __int128 v11;
  _OWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1 || CGPathIsEmpty(a1))
    return 0;
  v14 = 0;
  v15 = 0;
  DashedPath = a1;
  if (*(_QWORD *)(a3 + 16))
  {
    DashedPath = a1;
    if (CGDashGetPattern())
      DashedPath = (const CGPath *)CGPathCreateDashedPath();
  }
  if (*(double *)a3 != *MEMORY[0x1E0C9DB10] && (a4 & 1) == 0)
  {
    v11 = a2[1];
    v13[0] = *a2;
    v13[1] = v11;
    v13[2] = a2[2];
    CA::Mat2Impl::mat2_get_scale_2d((CA::Mat2Impl *)v13, v8);
  }
  StrokedPath = CGPathCreateStrokedPath();
  if (DashedPath != a1)
    CGPathRelease(DashedPath);
  return StrokedPath;
}

void CA::Render::MeshTransform::show(os_unfair_lock_s *this, int a2, char a3)
{
  int v6;
  NSObject *v7;
  uint64_t v8;
  unint64_t v9;
  NSObject *v10;
  float *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  NSObject *v19;
  int *v20;
  int v21;
  int v22;
  int v23;
  float *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  const char *v30;
  NSObject *v31;
  uint32_t v32;
  uint64_t v33;
  uint32_t os_unfair_lock_opaque;
  uint8_t buf[4];
  int v36;
  __int16 v37;
  _BYTE v38[10];
  double v39;
  _BYTE v40[34];
  __int16 v41;
  double v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = CA::Render::MeshTransform::validate(this);
  if ((a3 & 1) != 0)
  {
    if (v6)
    {
      CA::Render::MeshTransform::update(this, 2);
      if (x_log_hook_p())
      {
LABEL_24:
        x_log_();
        return;
      }
      v33 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        os_unfair_lock_opaque = this[26]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 67109120;
        v36 = os_unfair_lock_opaque;
        v30 = "(meshTransform-subdivide-level %d)";
        v31 = v33;
        v32 = 8;
        goto LABEL_30;
      }
    }
  }
  else if ((v6 & 1) != 0)
  {
    os_unfair_lock_lock(this + 4);
    CA::Render::MeshTransform::update_locked((CA::Render::MeshTransform *)this, 2);
    os_unfair_lock_unlock(this + 4);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_DEFAULT, "(meshTransform", buf, 2u);
      }
    }
    if (*(_QWORD *)&this[8]._os_unfair_lock_opaque != *(_QWORD *)&this[6]._os_unfair_lock_opaque)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        CA::Render::show_newline((CA::Render *)(a2 + 1));
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v10 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            v11 = (float *)(*(_QWORD *)&this[6]._os_unfair_lock_opaque + v8);
            v12 = *v11;
            v13 = v11[1];
            v14 = v11[4];
            v15 = v11[5];
            v16 = v11[6];
            *(_DWORD *)buf = 67110400;
            v36 = v9;
            v37 = 2048;
            *(double *)v38 = v12;
            *(_WORD *)&v38[8] = 2048;
            v39 = v13;
            *(_WORD *)v40 = 2048;
            *(double *)&v40[2] = v14;
            *(_WORD *)&v40[10] = 2048;
            *(double *)&v40[12] = v15;
            *(_WORD *)&v40[20] = 2048;
            *(double *)&v40[22] = v16;
            _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_DEFAULT, "(vertex %d (%g %g) (%g %g %g))", buf, 0x3Au);
          }
        }
        ++v9;
        v8 += 32;
      }
      while (v9 < (uint64_t)(*(_QWORD *)&this[8]._os_unfair_lock_opaque - *(_QWORD *)&this[6]._os_unfair_lock_opaque) >> 5);
    }
    if (*(_QWORD *)&this[14]._os_unfair_lock_opaque != *(_QWORD *)&this[12]._os_unfair_lock_opaque)
    {
      v17 = 0;
      v18 = 0;
      do
      {
        CA::Render::show_newline((CA::Render *)(a2 + 1));
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v19 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            v20 = (int *)(*(_QWORD *)&this[12]._os_unfair_lock_opaque + v17);
            v21 = *v20;
            v22 = v20[1];
            v23 = v20[2];
            LODWORD(v20) = v20[3];
            v24 = (float *)(*(_QWORD *)&this[18]._os_unfair_lock_opaque + 4 * v17);
            v25 = v24[1];
            v26 = v24[5];
            v27 = v24[9];
            v28 = v24[13];
            *(_DWORD *)buf = 67111168;
            v36 = v18;
            v37 = 1024;
            *(_DWORD *)v38 = v21;
            *(_WORD *)&v38[4] = 1024;
            *(_DWORD *)&v38[6] = v22;
            LOWORD(v39) = 1024;
            *(_DWORD *)((char *)&v39 + 2) = v23;
            HIWORD(v39) = 1024;
            *(_DWORD *)v40 = (_DWORD)v20;
            *(_WORD *)&v40[4] = 2048;
            *(double *)&v40[6] = v25;
            *(_WORD *)&v40[14] = 2048;
            *(double *)&v40[16] = v26;
            *(_WORD *)&v40[24] = 2048;
            *(double *)&v40[26] = v27;
            v41 = 2048;
            v42 = v28;
            _os_log_impl(&dword_184457000, v19, OS_LOG_TYPE_DEFAULT, "(face %d (%d %d %d %d) (%g %g %g %g))", buf, 0x48u);
          }
        }
        ++v18;
        v17 += 16;
      }
      while (v18 < (uint64_t)(*(_QWORD *)&this[14]._os_unfair_lock_opaque - *(_QWORD *)&this[12]._os_unfair_lock_opaque) >> 4);
    }
    if (x_log_hook_p())
      goto LABEL_24;
    v29 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v30 = ")";
      goto LABEL_29;
    }
  }
  else
  {
    if (x_log_hook_p())
    {
      x_log_();
      return;
    }
    v29 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v30 = "(meshTransform [invalid])";
LABEL_29:
      v31 = v29;
      v32 = 2;
LABEL_30:
      _os_log_impl(&dword_184457000, v31, OS_LOG_TYPE_DEFAULT, v30, buf, v32);
    }
  }
}

uint64_t CA::Render::MeshTransform::mix@<X0>(CA::Render::MeshTransform *this@<X0>, CA::Render::Object *a2@<X1>, const CA::Render::ValueInterpolator *a3@<X2>, _QWORD *a4@<X8>)
{
  malloc_zone_t *malloc_zone;
  uint64_t result;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = (uint64_t)malloc_type_zone_malloc(malloc_zone, 0xA8uLL, 0x8BB15036uLL);
  if (result)
    result = CA::Render::Interpolator::Interpolator(result, this, a2, *(double *)a3);
  *a4 = result;
  return result;
}

_DWORD *CA::Render::MeshTransform::mix@<X0>(CA::Render::MeshTransform *this@<X0>, CA::Render::Object *a2@<X1>, CA::Render::Object *a3@<X2>, CA::Render::Object *a4@<X3>, const CA::Render::ValueInterpolator *a5@<X4>, _QWORD *a6@<X8>)
{
  malloc_zone_t *malloc_zone;
  _DWORD *result;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = malloc_type_zone_malloc(malloc_zone, 0xA8uLL, 0x8BB15036uLL);
  if (result)
  {
    result[2] = 1;
    result[3] = 26;
    ++dword_1ECDC7C90;
    *(_QWORD *)result = off_1E1596A78;
    if (a2)
    {
      v14 = (unsigned int *)((char *)a2 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      if (!v15)
      {
        a2 = 0;
        do
          v28 = __ldaxr(v14);
        while (__stlxr(v28 - 1, v14));
      }
    }
    *((_QWORD *)result + 2) = a2;
    if (this)
    {
      v16 = (unsigned int *)((char *)this + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      if (!v17)
      {
        this = 0;
        do
          v29 = __ldaxr(v16);
        while (__stlxr(v29 - 1, v16));
      }
    }
    *((_QWORD *)result + 3) = this;
    if (a3)
    {
      v18 = (unsigned int *)((char *)a3 + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      if (!v19)
      {
        a3 = 0;
        do
          v30 = __ldaxr(v18);
        while (__stlxr(v30 - 1, v18));
      }
    }
    *((_QWORD *)result + 4) = a3;
    if (a4)
    {
      v20 = (unsigned int *)((char *)a4 + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
      if (!v21)
      {
        a4 = 0;
        do
          v31 = __ldaxr(v20);
        while (__stlxr(v31 - 1, v20));
      }
    }
    *((_QWORD *)result + 5) = a4;
    v22 = *(_OWORD *)a5;
    v23 = *((_OWORD *)a5 + 1);
    v24 = *((_OWORD *)a5 + 3);
    *((_OWORD *)result + 5) = *((_OWORD *)a5 + 2);
    *((_OWORD *)result + 6) = v24;
    *((_OWORD *)result + 3) = v22;
    *((_OWORD *)result + 4) = v23;
    v25 = *((_OWORD *)a5 + 4);
    v26 = *((_OWORD *)a5 + 5);
    v27 = *((_OWORD *)a5 + 6);
    *((_QWORD *)result + 20) = *((_QWORD *)a5 + 14);
    *((_OWORD *)result + 8) = v26;
    *((_OWORD *)result + 9) = v27;
    *((_OWORD *)result + 7) = v25;
  }
  *a6 = result;
  return result;
}

double CA::Render::MeshTransform::distance_to(CA::Render::MeshTransform *this, const CA::Render::Object *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  float32x2_t *v5;
  float *v6;
  double result;
  float v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  double v14;

  v2 = *((_QWORD *)this + 3);
  v3 = (*((_QWORD *)this + 4) - v2) >> 5;
  v4 = *((_QWORD *)a2 + 3);
  if (v3 >= (*((_QWORD *)a2 + 4) - v4) >> 5)
    v3 = (*((_QWORD *)a2 + 4) - v4) >> 5;
  if (!v3)
    return 0.0;
  v5 = (float32x2_t *)(v2 + 20);
  v6 = (float *)(v4 + 20);
  result = 0.0;
  do
  {
    v8 = *(v6 - 1) - v5[-1].f32[1];
    v9 = *(float32x2_t *)v6;
    v6 += 8;
    v10 = v9;
    v11 = *v5;
    v5 += 4;
    v12 = vsub_f32(v10, v11);
    v13 = vmul_f32(v12, v12);
    v14 = sqrtf((float)(v13.f32[0] + (float)(v8 * v8)) + v13.f32[1]);
    if (result <= v14)
      result = v14;
    --v3;
  }
  while (v3);
  return result;
}

void CA::Render::MeshTransform::update(os_unfair_lock_s *this, int a2)
{
  os_unfair_lock_s *v4;

  v4 = this + 4;
  os_unfair_lock_lock(this + 4);
  CA::Render::MeshTransform::update_locked((CA::Render::MeshTransform *)this, a2);
  os_unfair_lock_unlock(v4);
}

char *std::vector<CA::Render::MeshVertex>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Render::MeshVertex>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

char *std::vector<CA::Render::MeshFace>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Render::MeshFace>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

float64x2_t CA::Render::MeshTransform::apply_rect(CA::Render::MeshTransform *this, const CA::Rect *a2, const CA::Rect *a3, float64x2_t result, int8x16_t a5, float64x2_t a6, float64x2_t a7, double a8, double a9, int32x4_t a10)
{
  int8x16_t v11;
  int32x4_t v12;
  int8x16_t v13;
  float64x2_t v19;
  int8x16_t v20;
  float64x2_t v21;
  int8x16_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v11 = (int8x16_t)vclezq_f64(a7);
  v12 = (int32x4_t)vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v11, 1), v11);
  if (v12.i64[0] < 0)
    goto LABEL_13;
  v12.i32[0] = 0;
  a10.i32[0] = *((_DWORD *)a2 + 24);
  v13 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(a10, v12), 0);
  __asm { FMOV            V6.2D, #1.0 }
  v19 = vmulq_f64(*(float64x2_t *)((char *)a2 + 136), (float64x2_t)vbslq_s8(v13, _Q6, a5));
  v20 = (int8x16_t)vclezq_f64(v19);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v20, 1), v20).u64[0] & 0x8000000000000000) != 0
    || (v21 = (float64x2_t)vbslq_s8(v13, *(int8x16_t *)((char *)a2 + 120), (int8x16_t)vmlaq_f64(result, (float64x2_t)a5, *(float64x2_t *)((char *)a2 + 120))), v22 = (int8x16_t)vclezq_f64(vsubq_f64(vminnmq_f64(vaddq_f64(a6, a7), vaddq_f64(v21, v19)), vmaxnmq_f64(a6, v21))), (vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v22, 1), v22).u64[0] & 0x8000000000000000) != 0))
  {
LABEL_13:
    LOWORD(result.f64[0]) = 0;
    BYTE2(result.f64[0]) = 0;
    BYTE3(result.f64[0]) = 0;
    BYTE4(result.f64[0]) = 0;
    BYTE5(result.f64[0]) = 0;
    BYTE6(result.f64[0]) = 0;
    HIBYTE(result.f64[0]) = 0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    CA::Render::MeshTransform::frame((CA::Render::MeshTransform *)&v28, (const Rect *)a2, result, (float64x2_t)a5);
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
    result.f64[0] = v28;
    v23 = v29;
    v24 = v30 - v28;
    v25 = v31 - v29;
    if (v30 - v28 >= v31 - v29)
      v26 = v31 - v29;
    else
      v26 = v30 - v28;
    if (v26 > 0.0)
    {
      if (v24 <= v25)
        v27 = v31 - v29;
      else
        v27 = v30 - v28;
      if (v27 >= 1.79769313e308)
      {
        result = (float64x2_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
        *(float64x2_t *)this = result;
        *((int64x2_t *)this + 1) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      }
      else
      {
        *(double *)this = v28;
        *((double *)this + 1) = v23;
        *((double *)this + 2) = v24;
        *((double *)this + 3) = v25;
      }
    }
  }
  return result;
}

CA::Render::MeshTransform *CA::Render::MeshTransform::eval_interpolator(CA::Render::MeshTransform *this, float64x2_t *a2, const CA::Rect *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CA::Render::MeshTransform *v10;
  uint64_t v11;
  uint64_t v12;
  CA::Render::MeshTransform *v13;
  CA::Render::MeshTransform *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  double *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float v57;
  uint64_t v58;
  float64x2_t v59;
  float v60;
  float v61;
  float32x2_t *v62;
  float32x2_t v63;
  float32x2_t v64;
  float64x2_t v65;
  float32_t v66;
  float32x2_t v71;
  unint64_t v72;
  float32x2_t v73;
  float v74;
  float *v75;
  float v76;
  float v77;
  unsigned int v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float32x2_t v113;
  float v114;
  uint64_t v115;
  float v116;
  float32x2_t v117;
  float v118;
  uint64_t v119;
  float v120;
  float32x2_t v121;
  float v122;
  float32x2_t v123;
  float v124;
  float32x2_t v125;
  float v126;
  float32x2_t v127;
  float v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 2);
  v5 = *((_QWORD *)this + 3);
  v7 = *((_QWORD *)this + 4);
  v8 = *((_QWORD *)this + 5);
  if (v6)
  {
    if (*(_BYTE *)(v6 + 12) != 33)
      return 0;
    if (!CA::Render::MeshTransform::validate(*((os_unfair_lock_s **)this + 2)) || v5 == 0)
      return 0;
  }
  else if (!v5)
  {
    return 0;
  }
  if (*(_BYTE *)(v5 + 12) != 33)
    return 0;
  v10 = 0;
  if (!CA::Render::MeshTransform::validate((os_unfair_lock_s *)v5) || !v7)
    return v10;
  if (*(_BYTE *)(v7 + 12) != 33
    || !CA::Render::MeshTransform::validate((os_unfair_lock_s *)v7)
    || v8 && (*(_BYTE *)(v8 + 12) != 33 || !CA::Render::MeshTransform::validate((os_unfair_lock_s *)v8)))
  {
    return 0;
  }
  v11 = (uint64_t)(*(_QWORD *)(v5 + 32) - *(_QWORD *)(v5 + 24)) >> 5;
  if (v11 == (uint64_t)(*(_QWORD *)(v7 + 32) - *(_QWORD *)(v7 + 24)) >> 5
    && (v12 = (uint64_t)(*(_QWORD *)(v5 + 56) - *(_QWORD *)(v5 + 48)) >> 4,
        v12 == (uint64_t)(*(_QWORD *)(v7 + 56) - *(_QWORD *)(v7 + 48)) >> 4)
    && (!v6
     || v11 == (uint64_t)(*(_QWORD *)(v6 + 32) - *(_QWORD *)(v6 + 24)) >> 5
     && v12 == (uint64_t)(*(_QWORD *)(v6 + 56) - *(_QWORD *)(v6 + 48)) >> 4)
    && (!v8
     || v11 == (uint64_t)(*(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24)) >> 5
     && v12 == (uint64_t)(*(_QWORD *)(v8 + 56) - *(_QWORD *)(v8 + 48)) >> 4))
  {
    CA::Render::MeshTransform::update((os_unfair_lock_s *)v7, 2);
    v13 = (CA::Render::MeshTransform *)x_mem_alloc0(0xD0uLL);
    if (v13)
    {
      v10 = v13;
      v14 = CA::Render::MeshTransform::MeshTransform(v13, (uint64_t)(*(_QWORD *)(v7 + 32) - *(_QWORD *)(v7 + 24)) >> 5, (uint64_t)(*(_QWORD *)(v7 + 56) - *(_QWORD *)(v7 + 48)) >> 4, *(_DWORD *)(v7 + 100));
      *((_BYTE *)v14 + 108) = *(_BYTE *)(v7 + 108);
      *((_DWORD *)v14 + 24) = 0;
      v15 = *(_BYTE **)(v7 + 48);
      v16 = *(_BYTE **)(v7 + 56);
      if (v16 != v15)
        memmove(*((void **)v10 + 6), v15, v16 - v15);
      v17 = *(_BYTE **)(v7 + 72);
      v18 = *(_BYTE **)(v7 + 80);
      if (v18 != v17)
        memmove(*((void **)v10 + 9), v17, v18 - v17);
      v19 = (double *)((char *)this + 48);
      *((_DWORD *)v10 + 28) = *(_DWORD *)(v7 + 112);
      *((_DWORD *)v10 + 3) |= 0x200u;
      v128 = 0.0;
      v127 = 0;
      v126 = 0.0;
      v125 = 0;
      v124 = 0.0;
      v123 = 0;
      v122 = 0.0;
      v121 = 0;
      CA::Render::MeshTransform::vertex_transform(*(_DWORD *)(v5 + 96), a2, (uint64_t)&v127, &v125);
      v20 = *(_DWORD *)(v7 + 96);
      CA::Render::MeshTransform::vertex_transform(v20, a2, (uint64_t)&v123, &v121);
      v120 = 0.0;
      v119 = 0;
      v118 = 0.0;
      v117 = 0;
      v116 = 0.0;
      v115 = 0;
      v114 = 0.0;
      v113 = 0;
      if (v6)
      {
        CA::Render::MeshTransform::vertex_transform(*(_DWORD *)(v6 + 96), a2, (uint64_t)&v119, &v117);
        if (v8)
        {
          CA::Render::MeshTransform::vertex_transform(*(_DWORD *)(v8 + 96), a2, (uint64_t)&v115, &v113);
          if (*((_BYTE *)this + 160))
          {
            v21 = *((_QWORD *)v10 + 3);
            v79 = *((_QWORD *)v10 + 4);
            if (v79 != v21)
            {
              v22 = 0;
              v103 = v127.f32[1];
              v104 = v127.f32[0];
              v101 = v125.f32[0];
              v102 = v128;
              v99 = v126;
              v100 = v125.f32[1];
              v97 = v123.f32[1];
              v98 = v123.f32[0];
              v95 = v121.f32[0];
              v96 = v124;
              v93 = v122;
              v94 = v121.f32[1];
              v91 = *((float *)&v119 + 1);
              v92 = *(float *)&v119;
              v89 = v117.f32[0];
              v90 = v120;
              v87 = v118;
              v88 = v117.f32[1];
              v85 = *((float *)&v115 + 1);
              v86 = *(float *)&v115;
              v83 = v113.f32[0];
              v84 = v116;
              v82 = v113.f32[1];
              v23 = *(_QWORD *)(v5 + 24);
              if ((unint64_t)((v79 - v21) >> 5) <= 1)
                v24 = 1;
              else
                v24 = (v79 - v21) >> 5;
              v81 = v23 + 24;
              v25 = *(_QWORD *)(v8 + 24);
              v26 = *(_QWORD *)(v7 + 24) + 24;
              v27 = *(_QWORD *)(v6 + 24) + 24;
              v28 = v25 + 24;
              v80 = v114;
              do
              {
                v29 = v100 + (float)(v103 * *(float *)(v81 + v22 - 20));
                v108 = v101 + (float)(v104 * *(float *)(v81 + v22 - 8));
                v110 = v100 + (float)(v103 * *(float *)(v81 + v22 - 4));
                v112 = v99 + (float)(v102 * *(float *)(v81 + v22));
                v30 = v94 + (float)(v97 * *(float *)(v26 + v22 - 20));
                v107 = v95 + (float)(v98 * *(float *)(v26 + v22 - 8));
                v109 = v94 + (float)(v97 * *(float *)(v26 + v22 - 4));
                v111 = v93 + (float)(v96 * *(float *)(v26 + v22));
                v31 = v88 + (float)(v91 * *(float *)(v27 + v22 - 20));
                v32 = v89 + (float)(v92 * *(float *)(v27 + v22 - 8));
                v33 = v88 + (float)(v91 * *(float *)(v27 + v22 - 4));
                v106 = v87 + (float)(v90 * *(float *)(v27 + v22));
                v34 = v82 + (float)(v85 * *(float *)(v28 + v22 - 20));
                v35 = v83 + (float)(v86 * *(float *)(v28 + v22 - 8));
                v36 = v82 + (float)(v85 * *(float *)(v28 + v22 - 4));
                v105 = v80 + (float)(v84 * *(float *)(v28 + v22));
                v37 = v21 + v22;
                *(float *)v37 = CA::Render::ValueInterpolator::mix<float>(v19, v89 + (float)(v92 * *(float *)(v27 + v22 - 24)), v101 + (float)(v104 * *(float *)(v81 + v22 - 24)), v95 + (float)(v98 * *(float *)(v26 + v22 - 24)), v83 + (float)(v86 * *(float *)(v28 + v22 - 24)));
                *(float *)(v37 + 4) = CA::Render::ValueInterpolator::mix<float>(v19, v31, v29, v30, v34);
                *(float *)(v37 + 16) = CA::Render::ValueInterpolator::mix<float>(v19, v32, v108, v107, v35);
                *(float *)(v37 + 20) = CA::Render::ValueInterpolator::mix<float>(v19, v33, v110, v109, v36);
                *(float *)(v37 + 24) = CA::Render::ValueInterpolator::mix<float>(v19, v106, v112, v111, v105);
                *(_DWORD *)(v37 + 28) = 1065353216;
                v22 += 32;
                --v24;
              }
              while (v24);
              v20 = *(_DWORD *)(v7 + 96);
              v38 = v79;
              goto LABEL_65;
            }
            v38 = *((_QWORD *)v10 + 4);
LABEL_64:
            v21 = v38;
LABEL_65:
            if (v20)
            {
              if (v38 != v21)
              {
                __asm { FMOV            V1.2S, #1.0 }
                v71 = vdiv_f32(_D1, v123);
                v72 = (v38 - v21) >> 5;
                v73 = v121;
                v74 = v122;
                if (v72 <= 1)
                  v72 = 1;
                v75 = (float *)(v21 + 24);
                v76 = 1.0 / v124;
                do
                {
                  v77 = *v75 - v74;
                  *((float32x2_t *)v75 - 3) = vmul_f32(vsub_f32(*(float32x2_t *)(v75 - 6), v73), v71);
                  *((float32x2_t *)v75 - 1) = vmul_f32(vsub_f32(*(float32x2_t *)(v75 - 2), v73), v71);
                  *v75 = v77 * v76;
                  v75 += 8;
                  --v72;
                }
                while (v72);
              }
              *((_DWORD *)v10 + 24) = v20;
            }
            v78 = *((_DWORD *)v10 + 3) & 0xFFFFFEFF;
            *((_DWORD *)v10 + 3) = v78;
            if ((*(_DWORD *)(v7 + 12) & 0x2000) != 0)
              *((_DWORD *)v10 + 3) = *(_DWORD *)(v7 + 12) & 0x3000 | v78;
            return v10;
          }
        }
      }
      else if (v8)
      {
        CA::Render::MeshTransform::vertex_transform(*(_DWORD *)(v8 + 96), a2, (uint64_t)&v115, &v113);
      }
      v21 = *((_QWORD *)v10 + 3);
      v38 = *((_QWORD *)v10 + 4);
      if (v38 != v21)
      {
        v46 = 0;
        v47 = (v38 - v21) >> 5;
        v48 = *(_QWORD *)(v5 + 24);
        v49 = *(_QWORD *)(v7 + 24);
        v50 = v128;
        v51 = v126;
        v52 = v124;
        v53 = v127;
        v54 = v125;
        v55 = v123;
        v56 = v121;
        v57 = v122;
        v58 = *(uint64_t *)v19;
        if (v47 <= 1)
          v47 = 1;
        v59 = (float64x2_t)vdupq_lane_s64(v58, 0);
        do
        {
          v60 = *(float *)(v49 + v46 + 24);
          v61 = v51 + (float)(v50 * *(float *)(v48 + v46 + 24));
          v62 = (float32x2_t *)(v21 + v46);
          v63 = vmla_f32(v54, *(float32x2_t *)(v48 + v46), v53);
          v64 = vmla_f32(v54, *(float32x2_t *)(v48 + v46 + 16), v53);
          v65 = vmlaq_f64(vcvtq_f64_f32(v64), vcvtq_f64_f32(vadd_f32(vmla_f32(vneg_f32(v64), *(float32x2_t *)(v49 + v46 + 16), v55), v56)), v59);
          *v62 = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(v63), vcvtq_f64_f32(vadd_f32(vmla_f32(vneg_f32(v63), *(float32x2_t *)(v49 + v46), v55), v56)), v59));
          v62[2] = vcvt_f32_f64(v65);
          v66 = v61 + *(double *)&v58 * (float)(v57 - (float)(v61 - (float)(v52 * v60)));
          v62[3].f32[0] = v66;
          v62[3].i32[1] = 1065353216;
          v46 += 32;
          --v47;
        }
        while (v47);
        goto LABEL_65;
      }
      goto LABEL_64;
    }
    v43 = (unsigned int *)(v7 + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 + 1, v43));
    v10 = (CA::Render::MeshTransform *)v7;
    if (!v44)
    {
      v10 = 0;
      do
        v45 = __ldaxr(v43);
      while (__stlxr(v45 - 1, v43));
    }
  }
  else
  {
    v40 = (unsigned int *)(v7 + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 + 1, v40));
    v10 = (CA::Render::MeshTransform *)v7;
    if (!v41)
    {
      v10 = 0;
      do
        v42 = __ldaxr(v40);
      while (__stlxr(v42 - 1, v40));
    }
  }
  return v10;
}

float CA::Render::ValueInterpolator::mix<float>(double *a1, float a2, float a3, float a4, float a5)
{
  double v5;
  float v6;
  float v7;

  v5 = (float)(a4 - a3);
  v6 = a1[10] * (float)(a3 - a2) + a1[11] * v5;
  v7 = a1[12] * v5 + a1[13] * (float)(a5 - a4);
  return a1[2] * a3 + a1[3] * v6 + a1[4] * a4 + a1[5] * v7;
}

uint64_t CA::CG::PathInverseDetector::detect_rect(CA::CG::PathInverseDetector *this, CGRect *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  double v6;
  double v7;
  double v8;
  double v9;

  if (*((_QWORD *)this + 1) != 4 || *((_BYTE *)this + 16))
    return 0;
  v2 = 0;
  while (v2 != 4)
  {
    v3 = v2 + 1;
    v4 = *((unsigned __int8 *)this + v2 + 17);
    v5 = dword_18475E8A8[++v2];
    if (v5 != v4)
    {
      if ((unint64_t)(v3 - 1) < 4)
        return 0;
      break;
    }
  }
  v6 = *((double *)this + 5);
  if (v6 != *((double *)this + 11))
    return 0;
  v7 = *((double *)this + 16);
  if (*((double *)this + 10) != v7)
    return 0;
  v8 = *((double *)this + 17);
  if (v8 != *((double *)this + 23))
    return 0;
  v9 = *((double *)this + 4);
  if (*((double *)this + 22) != v9)
    return 0;
  a2->origin.x = v9;
  a2->origin.y = v8;
  a2->size.width = v7 - v9;
  a2->size.height = v6 - v8;
  return 1;
}

uint64_t ___ZN2CA2CG19PathInverseDetector6detectEPK6CGPathNS_4RectE_block_invoke(uint64_t result, int *a2, _BYTE *a3)
{
  int *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v4 = *(int **)(result + 32);
  v5 = *v4;
  if (*v4 != 2)
  {
    if (v5 == 1)
    {
      v8 = *((_QWORD *)v4 + 1);
      if (v8 < 0xA)
      {
        *((_BYTE *)v4 + v8 + 16) = *a2;
        v9 = *a2;
        if ((_DWORD)v9 != 4)
        {
          v11 = 0;
          LODWORD(v9) = cgpath_counts[v9];
          if (v9 <= 1)
            LOBYTE(v9) = 1;
          v9 = (char)v9;
          do
          {
            *(_OWORD *)&v4[12 * *((_QWORD *)v4 + 1) + 8 + v11] = *(_OWORD *)(*((_QWORD *)a2 + 1) + v11 * 4);
            v11 += 4;
            --v9;
          }
          while (v9);
          v7 = *((_QWORD *)v4 + 1);
          goto LABEL_20;
        }
        v10 = 2;
LABEL_25:
        *v4 = v10;
        goto LABEL_26;
      }
    }
    else
    {
      if (v5)
        goto LABEL_27;
      *((_BYTE *)v4 + *((_QWORD *)v4 + 1) + 16) = *a2;
      v6 = *a2;
      if (*a2 == 4)
      {
        if (*((_QWORD *)v4 + 1) == 4)
        {
          result = CA::CG::PathInverseDetector::detect_rect((CA::CG::PathInverseDetector *)v4, (CGRect *)v4 + 16);
          if ((_DWORD)result)
          {
            *v4 = 1;
            *((_QWORD *)v4 + 1) = 0;
            goto LABEL_26;
          }
        }
      }
      else if (v6 == 1)
      {
        v7 = *((_QWORD *)v4 + 1);
        if (v7 <= 3)
        {
LABEL_14:
          *(_OWORD *)&v4[12 * v7 + 8] = *(_OWORD *)*((_QWORD *)a2 + 1);
LABEL_20:
          *((_QWORD *)v4 + 1) = v7 + 1;
LABEL_26:
          v5 = *v4;
LABEL_27:
          if (v5 != 3)
            return result;
          goto LABEL_28;
        }
      }
      else if (!v6)
      {
        v7 = *((_QWORD *)v4 + 1);
        if (!v7)
          goto LABEL_14;
      }
    }
    v10 = 3;
    goto LABEL_25;
  }
  *v4 = 3;
LABEL_28:
  *a3 = 1;
  return result;
}

uint64_t ___ZN2CA2CG19PathInverseDetector6detectEPK6CGPathNS_4RectE_block_invoke_2(uint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  double *v6;
  double *v7;

  v3 = *(_QWORD *)(result + 32);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 > 9 || (v5 = *(unsigned __int8 *)(v3 + v4 + 16), *(_DWORD *)a2 != (_DWORD)v5))
  {
LABEL_13:
    *(_DWORD *)v3 = 3;
    goto LABEL_14;
  }
  if ((_DWORD)v5 != 4)
  {
    LODWORD(v5) = cgpath_counts[v5];
    if (v5 <= 1)
      LOBYTE(v5) = 1;
    v5 = (char)v5;
    v6 = (double *)(v3 + 48 * v4 + 40);
    v7 = (double *)(*(_QWORD *)(a2 + 8) + 8);
    while (vabdd_f64(*(v7 - 1), *(v6 - 1)) <= 0.000001
         && (vabdd_f64(*v7, *v6) <= 0.000001
          || vabdd_f64(*v6 + *v7, *(double *)(v3 + 544) + *(double *)(v3 + 544)) <= 0.000001))
    {
      v6 += 2;
      v7 += 2;
      if (!--v5)
        goto LABEL_11;
    }
    goto LABEL_13;
  }
LABEL_11:
  *(_QWORD *)(v3 + 8) = v4 + 1;
  if (*(_DWORD *)v3 == 3)
LABEL_14:
    *a3 = 1;
  return result;
}

uint64_t CA::WindowServer::IOMFBServer::shutdown(CA::WindowServer::IOMFBServer *this)
{
  __CFRunLoopSource *v2;
  CFRunLoopMode *v3;

  CA::WindowServer::Server::shutdown(this);
  CA::Render::remove_observer(0x19u, 0, (uint64_t)CA::WindowServer::IOMFBServer::flush_irdc, (uint64_t)this);
  CA::Render::remove_observer(0x2Au, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_power_log, (uint64_t)this);
  CA::Render::remove_observer(0x2Bu, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_max_rate_power_log, (uint64_t)this);
  CA::Render::remove_observer(0x2Eu, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_render_statistics_power_log, (uint64_t)this);
  CA::Render::remove_observer(0x35u, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_brightness_hotplug, (uint64_t)this);
  CA::Render::remove_observer(0x3Du, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_flipbook_state_notification, (uint64_t)this);
  CA::Render::remove_observer(0x3Eu, 0, (uint64_t)CA::WindowServer::IOMFBServer::check_display_blanked, (uint64_t)this);
  if ((*(_DWORD *)(*((_QWORD *)this + 12) + 624) & 0x10) != 0)
  {
    CA::Render::remove_observer(0x37u, 0, (uint64_t)CA::WindowServer::IOMFBServer::register_frame_interval_range, (uint64_t)this);
    CA::Render::remove_observer(0x38u, 0, (uint64_t)CA::WindowServer::IOMFBServer::register_frame_interval_reasons, (uint64_t)this);
    CA::Render::remove_observer(0x39u, 0, (uint64_t)CA::WindowServer::IOMFBServer::request_frame_phase_shift, (uint64_t)this);
    CA::Render::remove_observer(0x2Cu, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_frame_rate_power_log, (uint64_t)this);
    CA::Render::remove_observer(0x47u, 0, (uint64_t)CA::WindowServer::IOMFBServer::get_display_debug_properties, (uint64_t)this);
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 544));
  CA::WindowServer::IOMFBServer::remove_vsync_source(this);
  v2 = (__CFRunLoopSource *)*((_QWORD *)this + 99);
  v3 = (CFRunLoopMode *)MEMORY[0x1E0C9B280];
  if (v2)
  {
    if (*(_QWORD *)(*((_QWORD *)this + 12) + 25536))
    {
      IOMobileFramebufferDisableHotPlugDetectNotifications();
      v2 = (__CFRunLoopSource *)*((_QWORD *)this + 99);
    }
    CFRunLoopRemoveSource(*((CFRunLoopRef *)this + 96), v2, *v3);
    *((_QWORD *)this + 99) = 0;
  }
  if (*((_QWORD *)this + 106))
  {
    CA::WindowServer::IOMFBDisplay::set_frame_info_enabled(*((CA::WindowServer::IOMFBDisplay **)this + 12), 0);
    if (*(_QWORD *)(*((_QWORD *)this + 12) + 25536))
      IOMobileFramebufferFrameInfo();
    CFRunLoopRemoveSource(*((CFRunLoopRef *)this + 97), *((CFRunLoopSourceRef *)this + 106), *v3);
    *((_QWORD *)this + 106) = 0;
  }
  CA::WindowServer::IOMFBServer::remove_power_log_timer(this);
  CA::WindowServer::IOMFBServer::unregister_libedr_callbacks(this);
  if (*(_BYTE *)(*((_QWORD *)this + 12) + 28123))
    IOMobileFramebufferSetBrightnessControlCallback();
  if (*((_QWORD *)this + 102))
  {
    IOHIDEventSystemClientUnregisterDeviceMatchingBlock();
    IOHIDEventSystemClientUnscheduleWithRunLoop();
  }
  CA::WindowServer::IOMFBDisplay::post_power_log(*((CA::WindowServer::IOMFBDisplay **)this + 12));
  if (*((_QWORD *)this + 67))
  {
    CFRunLoopStop(*((CFRunLoopRef *)this + 97));
    while (*((_QWORD *)this + 97))
      pthread_cond_wait((pthread_cond_t *)this + 15, (pthread_mutex_t *)((char *)this + 544));
  }
  if (*((_QWORD *)this + 66))
  {
    CFRunLoopStop(*((CFRunLoopRef *)this + 96));
    while (*((_QWORD *)this + 96))
      pthread_cond_wait((pthread_cond_t *)this + 14, (pthread_mutex_t *)((char *)this + 544));
  }
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 544));
}

uint64_t CA::WindowServer::IOMFBServer::begin_skylight_update(CA::WindowServer::IOMFBServer *this, CA::Render::Update *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 544));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 12) + 216))(*((_QWORD *)this + 12)))
    CA::WindowServer::IOMFBServer::set_vsync_enabled(this);
  return (*(uint64_t (**)(_QWORD, CA::Render::Update *))(**((_QWORD **)this + 12) + 408))(*((_QWORD *)this + 12), a2);
}

uint64_t CA::WindowServer::IOMFBServer::finish_skylight_update(CA::WindowServer::IOMFBServer *this, CA::Render::Update *a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(_QWORD, CA::Render::Update *))(**((_QWORD **)this + 12) + 416))(*((_QWORD *)this + 12), a2);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 544));
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 24));
  return v3;
}

uint64_t CA::WindowServer::IOMFBServer::activate_replay(CA::WindowServer::IOMFBServer *this)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)((char *)this + 544);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 544));
  CA::WindowServer::IOMFBServer::set_vsync_disabled(this);
  pthread_mutex_unlock(v2);
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 440))(*((_QWORD *)this + 12));
}

double CA::WindowServer::IOMFBServer::next_wakeup_time(os_unfair_lock_s **this)
{
  int v2;
  int v3;
  uint64_t v4;

  v2 = CA::WindowServer::IOMFBDisplay::timing_granularity(this[12], 0);
  v3 = (*(uint64_t (**)(os_unfair_lock_s *))(*(_QWORD *)&this[12]->_os_unfair_lock_opaque + 768))(this[12]);
  v4 = (*(uint64_t (**)(os_unfair_lock_s **))&(*this)[14]._os_unfair_lock_opaque)(this);
  if (v4)
    return CATimeWithHostTime(v4 + (v3 * v2));
  else
    return *((double *)this + 123);
}

os_unfair_lock_s *CA::WindowServer::IOMFBServer::previous_vbl(os_unfair_lock_s **this)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  os_unfair_lock_s *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = mach_absolute_time();
  v3 = CA::WindowServer::IOMFBDisplay::timing_granularity(this[12], 0);
  v4 = (*(unsigned int (**)(os_unfair_lock_s *))(*(_QWORD *)&this[12]->_os_unfair_lock_opaque + 768))(this[12])
     * v3;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  CA::WindowServer::IOMFBDisplay::timing_reference((CA::WindowServer::IOMFBDisplay *)&v10, (uint64_t)this[12], 0);
  result = this[114];
  if (((unint64_t)result + v4 <= v2 || !this[12][6788]._os_unfair_lock_opaque) && v11)
  {
    v6 = v11 - v2;
    if (v2 > v11)
      v6 = v2 - v11;
    v7 = v6 % v4;
    if (v7)
    {
      v8 = v2 - v7;
      v9 = v2 - v4 + v7;
      if (v2 <= v11)
        return (os_unfair_lock_s *)v9;
      else
        return (os_unfair_lock_s *)v8;
    }
    else
    {
      return (os_unfair_lock_s *)v2;
    }
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBServer::current_surface(CA::WindowServer::IOMFBServer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 448))(*((_QWORD *)this + 12));
}

uint64_t CA::WindowServer::IOMFBServer::displayed_surface(CA::WindowServer::IOMFBServer *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 12) + 480))(*((_QWORD *)this + 12), 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
  return result;
}

uint64_t CA::WindowServer::IOMFBServer::set_creates_cached_surfaces(uint64_t this, int a2)
{
  int v2;

  if (a2)
    v2 = 128;
  else
    v2 = 0;
  *(_DWORD *)(*(_QWORD *)(this + 96) + 745) = *(_DWORD *)(*(_QWORD *)(this + 96) + 745) & 0xFFFFFF7F | v2;
  return this;
}

uint64_t CA::WindowServer::IOMFBServer::cancel_all_swaps(CA::WindowServer::IOMFBServer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 472))(*((_QWORD *)this + 12));
}

void CA::WindowServer::IOMFBServer::~IOMFBServer(CA::WindowServer::IOMFBServer *this)
{
  malloc_zone_t *malloc_zone;

  CA::WindowServer::IOMFBServer::~IOMFBServer(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  const void *v2;
  const void *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E158C410;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 544));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 608));
  pthread_cond_destroy((pthread_cond_t *)this + 14);
  pthread_cond_destroy((pthread_cond_t *)this + 15);
  v2 = (const void *)*((_QWORD *)this + 102);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 103);
  if (v3)
    CFRelease(v3);
  CA::WindowServer::IOMFBServer::unregister_libedr_callbacks(this);
  v4 = *((_QWORD *)this + 104);
  if (v4)
  {
    pthread_mutex_lock(*((pthread_mutex_t **)this + 104));
    if (*(_DWORD *)(v4 + 136))
      EDRReleaseClient();
    dispatch_release(*(dispatch_object_t *)(v4 + 128));
    pthread_mutex_unlock((pthread_mutex_t *)v4);
    MEMORY[0x186DBD990](v4, 0x1020C40FE7D54AALL);
    *((_QWORD *)this + 104) = 0;
  }
  CA::WindowServer::Server::~Server(this);
}

__CFRunLoop *CA::WindowServer::IOMFBServer::set_calibration_phase(CA::WindowServer::IOMFBServer *this, int a2, int a3)
{
  __CFRunLoop *result;
  __CFRunLoop *v7;
  const void *v8;
  _QWORD block[5];
  int v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  result = (__CFRunLoop *)(*(uint64_t (**)(CA::WindowServer::IOMFBServer *))(*(_QWORD *)this + 384))(this);
  if (result)
  {
    v7 = result;
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 544));
    v8 = (const void *)*MEMORY[0x1E0C9B280];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN2CA12WindowServer11IOMFBServer21set_calibration_phaseEjj_block_invoke;
    block[3] = &__block_descriptor_tmp_13_14109;
    block[4] = this;
    v10 = a2;
    v11 = a3;
    CFRunLoopPerformBlock(v7, v8, block);
    CFRunLoopWakeUp(v7);
    return (__CFRunLoop *)pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 544));
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBServer::set_allows_edr(CA::WindowServer::IOMFBServer *this, uint64_t a2)
{
  uint64_t result;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  pthread_mutex_t *v8;
  int v9;
  NSObject *sig;
  NSObject *v11;
  _BYTE block[24];
  void *v13;
  int v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  result = CA::WindowServer::IOMFBServer::edr_client(this);
  if (result)
  {
    v6 = *((_QWORD *)this + 12);
    if (!*(_BYTE *)(v6 + 28052) && (*(_WORD *)(v6 + 656) & 0x1C00) != 0x1000)
    {
      if (*(_BYTE *)(v6 + 28123))
      {
        v7 = *((_QWORD *)this + 31);
        if ((_DWORD)a2)
        {
          if (v7)
          {
            v5.n128_u32[0] = *((_DWORD *)this + 210);
            (*(void (**)(__n128))(v7 + 16))(v5);
          }
        }
        else if (v7)
        {
          v5.n128_u32[0] = 1.0;
          (*(void (**)(__n128))(v7 + 16))(v5);
        }
      }
      else
      {
        v8 = (pthread_mutex_t *)CA::WindowServer::IOMFBServer::edr_client(this);
        if (CADeviceHasBacklight::once != -1)
          dispatch_once(&CADeviceHasBacklight::once, &__block_literal_global_85);
        if (CADeviceHasBacklight::has_backlight == 1)
        {
          pthread_mutex_lock(v8 + 1);
          if (v8[2].__opaque[10] != (a2 ^ 1))
          {
            v8[2].__opaque[10] = a2 ^ 1;
            v9 = CA::EDRClient::client(v8);
            if (v9)
            {
              sig = v8[2].__sig;
              *(_QWORD *)block = MEMORY[0x1E0C809B0];
              *(_QWORD *)&block[8] = 0x40000000;
              *(_QWORD *)&block[16] = ___ZN2CA9EDRClient26set_accessibility_overrideEb_block_invoke;
              v13 = &__block_descriptor_tmp_13_14824;
              v14 = v9;
              v15 = a2 ^ 1;
              dispatch_async(sig, block);
            }
          }
          pthread_mutex_unlock(v8 + 1);
        }
      }
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 12) + 880))(*((_QWORD *)this + 12), a2);
      CA::WindowServer::Server::invalidate((os_unfair_lock_s *)this, *(const CA::Shape **)(*((_QWORD *)this + 12) + 216));
      if (byte_1ECDC6B04)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v11 = x_log_category_CADebug;
          if (os_log_type_enabled((os_log_t)x_log_category_CADebug, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)block = 136315138;
            *(_QWORD *)&block[4] = "set_allows_edr";
            _os_log_impl(&dword_184457000, v11, OS_LOG_TYPE_INFO, "kUpdateReasonDisplayBrightness %s", block, 0xCu);
          }
        }
      }
      *(_QWORD *)block = 0;
      *(int64x2_t *)&block[8] = vdupq_n_s64(8uLL);
      return (*(uint64_t (**)(CA::WindowServer::IOMFBServer *, _BYTE *, double))(*(_QWORD *)this + 184))(this, block, 0.0);
    }
  }
  return result;
}

void CA::WindowServer::IOMFBServer::set_latency(_QWORD *a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  CADisplayPersistedData *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((*(double (**)(_QWORD *))(*a1 + 168))(a1) != a4)
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v8 = (uint64_t *)a1[12];
    if (CA::WindowServer::Display::Mode::operator==(a3, v8[80]))
    {
      if ((*(unsigned int (**)(uint64_t *, _QWORD, __int128 *, uint64_t, _QWORD))(*v8 + 800))(v8, 0, &v20, 64, 0))
      {
        v9 = strncmp((const char *)&v20, a2, 0x40uLL);
        if (!(_DWORD)v9)
        {
          v17 = a1[12];
          if (*(double *)(v17 + 27096) != a4)
          {
            *(double *)(v17 + 27096) = a4;
            if (a2)
            {
              v18 = (void *)MEMORY[0x186DBE2E4](v9, v10, v11, v12, v13, v14, v15, v16);
              v19 = +[CADisplayPersistedData sharedInstance](CADisplayPersistedData, "sharedInstance", v20, v21, v22, v23);
              -[CADisplayPersistedData setLatency:forUUID:andMode:](v19, "setLatency:forUUID:andMode:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2), a3, a4);
              objc_autoreleasePoolPop(v18);
            }
            CA::WindowServer::Display::post_display_changed(v17);
          }
        }
      }
    }
  }
}

void sub_1846ED278(_Unwind_Exception *a1)
{
  void *v1;

  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::WindowServer::IOMFBServer::set_cursor_position(CA::WindowServer::IOMFBServer *a1)
{
  (*(void (**)(_QWORD *))(**((_QWORD **)a1 + 12) + 1672))(*((_QWORD **)a1 + 12));
  return CA::WindowServer::IOMFBServer::async_set_vsync_enabled(a1);
}

uint64_t CA::WindowServer::IOMFBServer::set_cursor_dictionary(CA::WindowServer::IOMFBServer *this, const __CFDictionary *a2)
{
  (*(void (**)(_QWORD, const __CFDictionary *))(**((_QWORD **)this + 12) + 1688))(*((_QWORD *)this + 12), a2);
  return CA::WindowServer::IOMFBServer::async_set_vsync_enabled(this);
}

uint64_t CA::WindowServer::IOMFBServer::set_cursor_hidden(CA::WindowServer::IOMFBServer *this, char a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 1696))(*((_QWORD *)this + 12));
  if ((a2 & 1) == 0)
    return CA::WindowServer::IOMFBServer::async_set_vsync_enabled(this);
  return result;
}

uint64_t CA::WindowServer::IOMFBServer::set_cursor_enabled(CA::WindowServer::IOMFBServer *this, int a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 1712))(*((_QWORD *)this + 12));
  if (a2)
    return CA::WindowServer::IOMFBServer::async_set_vsync_enabled(this);
  return result;
}

uint64_t CA::WindowServer::IOMFBServer::set_privacy_indicator_surface(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 1728))(*(_QWORD *)(a1 + 96));
}

uint64_t CA::WindowServer::IOMFBServer::remove_privacy_indicator(CA::WindowServer::IOMFBServer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 1736))(*((_QWORD *)this + 12));
}

uint64_t CA::WindowServer::IOMFBServer::set_privacy_indicator_enable_hint(CA::WindowServer::IOMFBServer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 1744))(*((_QWORD *)this + 12));
}

uint64_t CA::WindowServer::IOMFBServer::did_set_mode(os_unfair_lock_s **this)
{
  pthread_mutex_t *v2;
  float *v3;

  v2 = (pthread_mutex_t *)(this + 68);
  pthread_mutex_lock((pthread_mutex_t *)(this + 68));
  if ((*((_BYTE *)this + 1006) & 2) == 0)
  {
    CA::WindowServer::IOMFBServer::remove_vsync_source((CA::WindowServer::IOMFBServer *)this);
    CA::WindowServer::IOMFBDisplay::reset_timings(this[12]);
    CA::WindowServer::IOMFBServer::add_vsync_source((CA::WindowServer::IOMFBServer *)this, v3);
  }
  return pthread_mutex_unlock(v2);
}

uint64_t CA::WindowServer::IOMFBServer::immediate_render(CA::WindowServer::IOMFBServer *this, char a2)
{
  uint64_t v4;
  double v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  _BOOL4 v9;
  double v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  double v21;
  __CFRunLoop *v22;
  _QWORD block[11];
  _QWORD v25[6];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = mach_absolute_time();
  os_unfair_lock_lock((os_unfair_lock_t)this + 4);
  v5 = *((double *)this + 35);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 4);
  v6 = CAHostTimeWithTime(v5);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 544));
  v7 = *((_QWORD *)this + 12);
  *(double *)(v7 + 26104) = CATimeWithHostTime(v4) + 0.5;
  if (BYTE9(xmmword_1ECDC6A90))
  {
    kdebug_trace();
    v7 = *((_QWORD *)this + 12);
  }
  if (v6 == *((_QWORD *)this + 112)
    && ((*(_DWORD *)(v7 + 624) & 0x100) == 0
     || (v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 136))(v7), v7 = *((_QWORD *)this + 12), v8 == 2)))
  {
    v9 = 1;
  }
  else if ((*(_DWORD *)(v7 + 624) & 0x100) != 0)
  {
    v10 = (*(double (**)(uint64_t))(*(_QWORD *)v7 + 760))(v7);
    v11 = CAHostTimeWithTime(v10);
    v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 768))(*((_QWORD *)this + 12));
    v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 136))(*((_QWORD *)this + 12));
    if (!v13)
      v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 784))(*((_QWORD *)this + 12));
    LODWORD(v14) = v13 - v12;
    if (v13 >= v12)
      v14 = v14;
    else
      v14 = 0;
    v9 = v4 >= v6 + v11 * v14;
    v7 = *((_QWORD *)this + 12);
  }
  else
  {
    v9 = v4 >= v6;
  }
  v15 = (*(double (**)(uint64_t))(*(_QWORD *)v7 + 760))(v7);
  v16 = CAHostTimeWithTime(v15);
  v17 = v16 * (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 12) + 768))(*((_QWORD *)this + 12));
  if (v4 <= v17 + *((_QWORD *)this + 114))
    v18 = v17 + *((_QWORD *)this + 114);
  else
    v18 = v4;
  v19 = v9 && *((_BYTE *)this + 519) == 0;
  v20 = MEMORY[0x1E0C809B0];
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 0x40000000;
  v25[2] = ___ZN2CA12WindowServer11IOMFBServer16immediate_renderEb_block_invoke;
  v25[3] = &__block_descriptor_tmp_88;
  v25[4] = this;
  v25[5] = v18;
  v26 = a2;
  if (v19)
  {
    v21 = CATimeWithHostTime(v18);
    *((_QWORD *)this + 112) = v18;
    *((_DWORD *)this + 250) = 3
                            * (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 768))(*((_QWORD *)this + 12));
    block[0] = v20;
    block[1] = 0x40000000;
    block[2] = ___ZN2CA12WindowServer11IOMFBServer16immediate_renderEb_block_invoke_2;
    block[3] = &unk_1E15AA230;
    block[5] = this;
    block[6] = v18;
    *(double *)&block[7] = v21;
    block[4] = v25;
    block[8] = v6;
    block[9] = v17;
    block[10] = v4;
    v22 = (__CFRunLoop *)*((_QWORD *)this + 96);
    if (v22)
    {
      CFRunLoopPerformBlock(v22, (CFTypeRef)*MEMORY[0x1E0C9B280], block);
      CFRunLoopWakeUp(*((CFRunLoopRef *)this + 96));
    }
  }
  else
  {
    ___ZN2CA12WindowServer11IOMFBServer16immediate_renderEb_block_invoke((uint64_t)v25);
    if (BYTE9(xmmword_1ECDC6A90))
      kdebug_trace();
  }
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 544));
}

uint64_t CA::WindowServer::IOMFBServer::update_vbl_threshold(uint64_t this, unint64_t a2)
{
  if (*(_QWORD *)(this + 904) < a2)
    *(_QWORD *)(this + 904) = a2;
  return this;
}

uint64_t CA::WindowServer::IOMFBServer::enable_fixed_rate_display_links(CA::WindowServer::IOMFBServer *this, uint64_t a2)
{
  pthread_mutex_t *v4;
  NSObject *v5;
  int v6;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = (pthread_mutex_t *)((char *)this + 544);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 544));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 12) + 288))(*((_QWORD *)this + 12)) != (_DWORD)a2)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v5 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *(_DWORD *)(*((_QWORD *)this + 12) + 24);
        *(_DWORD *)buf = 67109376;
        v9 = v6;
        v10 = 1024;
        v11 = a2;
        _os_log_impl(&dword_184457000, v5, OS_LOG_TYPE_DEFAULT, "Display %u setting fixed rate links = %d", buf, 0xEu);
      }
    }
    CA::WindowServer::IOMFBServer::set_throttle_reason((uint64_t)this, 3u, a2);
    CA::WindowServer::IOMFBServer::update_throttle((uint64_t)this);
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 12) + 296))(*((_QWORD *)this + 12), a2);
  }
  return pthread_mutex_unlock(v4);
}

void CA::WindowServer::IOMFBServer::set_throttle_reason(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  int v7;
  int v8;
  char v9;
  uint64_t v10;
  NSObject *v11;
  char *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (CADeviceSupportsAPT::once != -1)
    dispatch_once(&CADeviceSupportsAPT::once, &__block_literal_global_37);
  if (CADeviceSupportsAPT::supports_apt && (*(_DWORD *)(*(_QWORD *)(a1 + 96) + 624) & 0x10) != 0)
  {
    v6 = 1 << a2;
    v7 = *(unsigned __int8 *)(a1 + 944);
    v8 = (1 << a2) & v7;
    if (a3)
    {
      if (v8)
        return;
      v9 = v7 | v6;
    }
    else
    {
      if (!v8)
        return;
      v9 = v7 & ~(_BYTE)v6;
    }
    *(_BYTE *)(a1 + 944) = v9;
    if (x_log_hook_p())
    {
      v10 = a2;
      x_log_();
    }
    else
    {
      v11 = x_log_category_windowserver;
      v10 = a2;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        v12 = CA::WindowServer::IOMFBServer::throttle_reason_string[a2];
        v13 = *(unsigned __int8 *)(a1 + 944);
        v14 = (*(unsigned __int8 *)(a1 + 1006) >> 3) & 1;
        *(_DWORD *)buf = 136315906;
        v17 = v12;
        v18 = 1024;
        v19 = a3;
        v20 = 1024;
        v21 = v13;
        v22 = 1024;
        v23 = v14;
        _os_log_impl(&dword_184457000, v11, OS_LOG_TYPE_DEFAULT, "Setting throttle reason %s=%i (throttle_reasons=%u, disable_throttle=%i)", buf, 0x1Eu);
      }
    }
    v15 = mach_absolute_time();
    *(double *)(a1 + 8 * v10 + 952) = CATimeWithHostTime(v15);
  }
}

uint64_t CA::WindowServer::IOMFBServer::update_throttle(uint64_t this)
{
  unsigned int v1;
  _BOOL4 v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  os_unfair_lock_s *v6;
  uint8_t buf[4];
  _BOOL4 v8;
  __int16 v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = *(_BYTE *)(this + 1006) & 8;
  v2 = (*(_BYTE *)(this + 1006) & 8) == 0 && *(_BYTE *)(this + 944) != 0;
  if (v2 != (*(_DWORD *)(*(_QWORD *)(this + 96) + 27152) != 0))
  {
    v3 = this;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v4 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        v5 = *(unsigned __int8 *)(v3 + 944);
        *(_DWORD *)buf = 67109632;
        v8 = v2;
        v9 = 1024;
        v10 = v5;
        v11 = 1024;
        v12 = v1 >> 3;
        _os_log_impl(&dword_184457000, v4, OS_LOG_TYPE_DEFAULT, "Updating frame rate throttle=%i (throttle_reasons=%u, disable_throttle=%i)", buf, 0x14u);
      }
    }
    v6 = *(os_unfair_lock_s **)(v3 + 96);
    v6[6788]._os_unfair_lock_opaque = v2;
    if (*(_QWORD *)(v3 + 800))
    {
      CA::WindowServer::IOMFBServer::refresh_timer_interval((CA::WindowServer::IOMFBServer *)v3);
      v6 = *(os_unfair_lock_s **)(v3 + 96);
    }
    return CA::WindowServer::IOMFBDisplay::minimum_frame_duration_changed(v6);
  }
  return this;
}

void CA::WindowServer::IOMFBServer::unregister_libedr_callbacks(CA::WindowServer::IOMFBServer *this)
{
  pthread_mutex_t *v2;

  if (CA::WindowServer::IOMFBServer::edr_client(this))
  {
    if ((*((_BYTE *)this + 1006) & 4) != 0)
    {
      v2 = (pthread_mutex_t *)CA::WindowServer::IOMFBServer::edr_client(this);
      CA::EDRClient::unregister_callback(v2);
      *((_BYTE *)this + 1006) &= ~4u;
    }
  }
}

void ___ZN2CA12WindowServer11IOMFBServer25register_libedr_callbacksEv_block_invoke(uint64_t a1, char a2, float a3, float a4, float a5)
{
  uint64_t v5;
  __CFRunLoop *v6;
  const void *v7;
  _QWORD v8[5];
  float v9;
  float v10;
  float v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(__CFRunLoop **)(v5 + 768);
  if (v6)
  {
    v7 = (const void *)*MEMORY[0x1E0C9B280];
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 0x40000000;
    v8[2] = ___ZN2CA12WindowServer11IOMFBServer25register_libedr_callbacksEv_block_invoke_2;
    v8[3] = &__block_descriptor_tmp_74_14092;
    v8[4] = v5;
    v12 = a2;
    v9 = a3;
    v10 = a4;
    v11 = a5;
    CFRunLoopPerformBlock(v6, v7, v8);
    CFRunLoopWakeUp(*(CFRunLoopRef *)(v5 + 768));
  }
}

uint64_t ___ZN2CA12WindowServer11IOMFBServer25register_libedr_callbacksEv_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, float, float, float))(**(_QWORD **)(a1 + 32) + 152))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 52), *(float *)(a1 + 40), *(float *)(a1 + 44), *(float *)(a1 + 48));
}

unint64_t ___ZN2CA12WindowServer11IOMFBServer16immediate_renderEb_block_invoke(uint64_t a1)
{
  uint64_t v1;
  double v3;
  double v4;
  double v5;
  _BOOL4 v6;
  _BOOL4 v7;
  int v8;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 519))
    return 0;
  v3 = (*(double (**)(_QWORD))(**(_QWORD **)(v1 + 96) + 760))(*(_QWORD *)(v1 + 96));
  v4 = CATimeWithHostTime(*(_QWORD *)(a1 + 40)) + v3 * 0.125;
  v5 = *(double *)(v1 + 936);
  v6 = *(_BYTE *)(a1 + 48) && *(double *)(v1 + 888) + v5 < v4;
  v7 = (~*(unsigned __int8 *)(v1 + 1004) & 0xF) == 0 && *(double *)(v1 + 888) + v5 * 0.5 < v4;
  v8 = v6 || v7;
  CAHostTimeWithTime(v5);
  kdebug_trace();
  if (v8 != 1)
    return 0;
  v9 = CAHostTimeWithTime(v4);
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v1 + 488))(v1, v9);
  *(double *)(v1 + 888) = v4;
  return (unint64_t)v4;
}

void ___ZN2CA12WindowServer11IOMFBServer16immediate_renderEb_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  double v3;
  unint64_t v4;

  v2 = a1[5];
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 16));
  v3 = *(double *)(v2 + 280);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 16));
  v4 = CAHostTimeWithTime(v3);
  mach_absolute_time();
  if (v4 == a1[8] && (*(_BYTE *)(v2 + 1006) & 1) != 0)
  {
    *(_BYTE *)(v2 + 1006) &= ~1u;
    CATimeWithHostTime(a1[9]);
    *(_QWORD *)(v2 + 856) = 0x7FF0000000000000;
    *(_QWORD *)(v2 + 872) = 0;
    *(_QWORD *)(v2 + 864) = 0;
    if (BYTE9(xmmword_1ECDC6A90))
      kdebug_trace();
    CA::WindowServer::Server::render_for_time(v2);
  }
  else
  {
    (*(void (**)(void))(a1[4] + 16))();
    if (BYTE9(xmmword_1ECDC6A90))
      kdebug_trace();
  }
}

void CA::WindowServer::IOMFBServer::remove_vsync_source(CA::WindowServer::IOMFBServer *this)
{
  char *v2;
  __CFRunLoopSource *v3;

  if ((*((_BYTE *)this + 1006) & 2) != 0)
  {
    v3 = (__CFRunLoopSource *)*((_QWORD *)this + 98);
    if (!v3)
      return;
    v2 = (char *)this + 784;
    if (*(_QWORD *)(*((_QWORD *)this + 12) + 25536))
    {
      CA::WindowServer::IOMFBServer::set_vsync_disabled(this);
      v3 = (__CFRunLoopSource *)*((_QWORD *)this + 98);
    }
    CFRunLoopRemoveSource(*((CFRunLoopRef *)this + 96), v3, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
  }
  else
  {
    if (!*((_QWORD *)this + 100))
      return;
    v2 = (char *)this + 800;
    CA::WindowServer::IOMFBServer::set_vsync_disabled(this);
    CADisplayTimerInvalidate(*((_QWORD *)this + 100));
    CFRelease(*((CFTypeRef *)this + 100));
  }
  *(_QWORD *)v2 = 0;
}

void CA::WindowServer::IOMFBServer::add_runloop_source(CA::WindowServer::IOMFBServer *this, CFRunLoopSourceRef source, int a3)
{
  uint64_t v5;
  uint64_t v6;
  pthread_cond_t *v7;
  uint64_t (*v8)(CA::WindowServer::IOMFBServer *, void *);
  _opaque_pthread_t *v9;
  __CFRunLoop *i;

  if (a3)
    v5 = 536;
  else
    v5 = 528;
  if (a3)
    v6 = 776;
  else
    v6 = 768;
  if (a3)
    v7 = (pthread_cond_t *)((char *)this + 720);
  else
    v7 = (pthread_cond_t *)((char *)this + 672);
  if (!*(_QWORD *)((char *)this + v5))
  {
    if (a3)
      v8 = CA::WindowServer::IOMFBServer::frame_info_thread_body;
    else
      v8 = CA::WindowServer::IOMFBServer::thread_body;
    v9 = x_thread_create((uint64_t)v8, (uint64_t)this, 1);
    *(_QWORD *)((char *)this + v5) = v9;
    CA::Render::Server::set_thread_priority(v9, (_opaque_pthread_t *)0xFFFFFFFFLL);
  }
  for (i = *(__CFRunLoop **)((char *)this + v6); !i; i = *(__CFRunLoop **)((char *)this + v6))
    pthread_cond_wait(v7, (pthread_mutex_t *)((char *)this + 544));
  if (source)
    CFRunLoopAddSource(i, source, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
}

uint64_t CA::WindowServer::IOMFBServer::brightness_callback(uint64_t a1, int a2, CA::WindowServer::Server *a3)
{
  pthread_mutex_t *v6;
  NSObject *v7;
  int v8;
  uint8_t buf[4];
  uint64_t v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = (pthread_mutex_t *)((char *)a3 + 544);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a3 + 544));
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v7 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_DWORD *)(*((_QWORD *)a3 + 12) + 24);
      *(_DWORD *)buf = 134218496;
      v11 = a1;
      v12 = 1024;
      v13 = v8;
      v14 = 1024;
      v15 = a2;
      _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_DEFAULT, "Framebuffer %p, DisplayID: %u, brightness callback enabled: %d", buf, 0x18u);
    }
  }
  (*(void (**)(CA::WindowServer::Server *, _QWORD))(*(_QWORD *)a3 + 320))(a3, 0);
  CA::WindowServer::Server::post_brightness_notification(a3);
  return pthread_mutex_unlock(v6);
}

uint64_t CA::WindowServer::IOMFBServer::frame_info_thread_body(CA::WindowServer::IOMFBServer *this, void *a2)
{
  const char *CString;
  CA::WindowServer::Server *v4;
  int v5;
  NSObject *v6;
  char *v7;
  int v8;
  CFAbsoluteTime Current;
  __CFRunLoopTimer *v10;
  const __CFString *v11;
  char __str[32];
  __int128 v14;
  __int128 v15;
  _OWORD v16[16];
  int v17;
  char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  memset(v16, 0, sizeof(v16));
  CString = CA_CFStringGetCString(*(const __CFString **)(*((_QWORD *)this + 12) + 8), (char *)v16, 256);
  if (CString)
  {
    v14 = 0u;
    v15 = 0u;
    memset(__str, 0, sizeof(__str));
    snprintf(__str, 0x40uLL, "com.apple.coreanimation.frameinfo.%s", CString);
    v4 = (CA::WindowServer::Server *)pthread_setname_np(__str);
    if ((_DWORD)v4)
    {
      v5 = (int)v4;
      v6 = x_log_category_utilities;
      v4 = (CA::WindowServer::Server *)os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v4)
      {
        v17 = 136315394;
        v18 = __str;
        v19 = 1024;
        v20 = v5;
        v7 = (char *)&v17;
LABEL_9:
        _os_log_error_impl(&dword_184457000, v6, OS_LOG_TYPE_ERROR, "pthread_setname_np(%s) returned %d\n", (uint8_t *)v7, 0x12u);
      }
    }
  }
  else
  {
    v4 = (CA::WindowServer::Server *)pthread_setname_np("com.apple.coreanimation.frameinfo");
    if ((_DWORD)v4)
    {
      v8 = (int)v4;
      v6 = x_log_category_utilities;
      v4 = (CA::WindowServer::Server *)os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v4)
      {
        *(_DWORD *)__str = 136315394;
        *(_QWORD *)&__str[4] = "com.apple.coreanimation.frameinfo";
        *(_WORD *)&__str[12] = 1024;
        *(_DWORD *)&__str[14] = v8;
        v7 = __str;
        goto LABEL_9;
      }
    }
  }
  CA::WindowServer::Server::set_server_thread_policy(v4);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 544));
  *((_QWORD *)this + 97) = CFRunLoopGetCurrent();
  Current = CFAbsoluteTimeGetCurrent();
  v10 = CFRunLoopTimerCreate(0, Current + 3153600000.0, 3153600000.0, 0, 0, (CFRunLoopTimerCallBack)CA::WindowServer::null_timer, 0);
  v11 = (const __CFString *)*MEMORY[0x1E0C9B280];
  CFRunLoopAddTimer(*((CFRunLoopRef *)this + 97), v10, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
  pthread_cond_signal((pthread_cond_t *)this + 15);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 544));
  CFRunLoopRun();
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 544));
  CFRunLoopRemoveTimer(*((CFRunLoopRef *)this + 97), v10, v11);
  CFRelease(v10);
  *((_QWORD *)this + 97) = 0;
  *((_QWORD *)this + 67) = 0;
  pthread_cond_signal((pthread_cond_t *)this + 15);
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 544));
}

uint64_t CA::WindowServer::IOMFBServer::thread_body(CA::WindowServer::IOMFBServer *this, void *a2)
{
  const char *CString;
  CA::WindowServer::Server *v4;
  int v5;
  NSObject *v6;
  char *v7;
  int v8;
  CFAbsoluteTime Current;
  __CFRunLoopTimer *v10;
  const __CFString *v11;
  char __str[32];
  __int128 v14;
  __int128 v15;
  _OWORD v16[16];
  int v17;
  char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  memset(v16, 0, sizeof(v16));
  CString = CA_CFStringGetCString(*(const __CFString **)(*((_QWORD *)this + 12) + 8), (char *)v16, 256);
  if (CString)
  {
    v14 = 0u;
    v15 = 0u;
    memset(__str, 0, sizeof(__str));
    snprintf(__str, 0x40uLL, "com.apple.coreanimation.display.%s", CString);
    v4 = (CA::WindowServer::Server *)pthread_setname_np(__str);
    if ((_DWORD)v4)
    {
      v5 = (int)v4;
      v6 = x_log_category_utilities;
      v4 = (CA::WindowServer::Server *)os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v4)
      {
        v17 = 136315394;
        v18 = __str;
        v19 = 1024;
        v20 = v5;
        v7 = (char *)&v17;
LABEL_9:
        _os_log_error_impl(&dword_184457000, v6, OS_LOG_TYPE_ERROR, "pthread_setname_np(%s) returned %d\n", (uint8_t *)v7, 0x12u);
      }
    }
  }
  else
  {
    v4 = (CA::WindowServer::Server *)pthread_setname_np("com.apple.coreanimation.display");
    if ((_DWORD)v4)
    {
      v8 = (int)v4;
      v6 = x_log_category_utilities;
      v4 = (CA::WindowServer::Server *)os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v4)
      {
        *(_DWORD *)__str = 136315394;
        *(_QWORD *)&__str[4] = "com.apple.coreanimation.display";
        *(_WORD *)&__str[12] = 1024;
        *(_DWORD *)&__str[14] = v8;
        v7 = __str;
        goto LABEL_9;
      }
    }
  }
  CA::WindowServer::Server::set_server_thread_policy(v4);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 544));
  *((_QWORD *)this + 96) = CFRunLoopGetCurrent();
  (*(void (**)(_QWORD))(**((_QWORD **)this + 12) + 400))(*((_QWORD *)this + 12));
  Current = CFAbsoluteTimeGetCurrent();
  v10 = CFRunLoopTimerCreate(0, Current + 3153600000.0, 3153600000.0, 0, 0, (CFRunLoopTimerCallBack)CA::WindowServer::null_timer, 0);
  v11 = (const __CFString *)*MEMORY[0x1E0C9B280];
  CFRunLoopAddTimer(*((CFRunLoopRef *)this + 96), v10, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
  pthread_cond_signal((pthread_cond_t *)this + 14);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 544));
  CFRunLoopRun();
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 544));
  CFRunLoopRemoveTimer(*((CFRunLoopRef *)this + 96), v10, v11);
  CFRelease(v10);
  *((_QWORD *)this + 96) = 0;
  *((_QWORD *)this + 66) = 0;
  pthread_cond_signal((pthread_cond_t *)this + 14);
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 544));
}

uint64_t CA::WindowServer::IOMFBServer::async_set_vsync_enabled(CA::WindowServer::IOMFBServer *this)
{
  pthread_mutex_t *v2;
  __CFRunLoop *v3;
  const void *v4;
  _QWORD v6[6];

  v6[5] = *MEMORY[0x1E0C80C00];
  v2 = (pthread_mutex_t *)((char *)this + 608);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 608));
  v3 = (__CFRunLoop *)*((_QWORD *)this + 96);
  if (v3 && !*((_BYTE *)this + 1005))
  {
    v4 = (const void *)*MEMORY[0x1E0C9B280];
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 0x40000000;
    v6[2] = ___ZN2CA12WindowServer11IOMFBServer23async_set_vsync_enabledEv_block_invoke;
    v6[3] = &__block_descriptor_tmp_94_14103;
    v6[4] = this;
    CFRunLoopPerformBlock(v3, v4, v6);
    CFRunLoopWakeUp(*((CFRunLoopRef *)this + 96));
  }
  return pthread_mutex_unlock(v2);
}

uint64_t ___ZN2CA12WindowServer11IOMFBServer23async_set_vsync_enabledEv_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 544));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 96) + 216))(*(_QWORD *)(v1 + 96)))
    CA::WindowServer::IOMFBServer::set_vsync_enabled((CA::WindowServer::IOMFBServer *)v1);
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 544));
}

void CA::WindowServer::IOMFBServer::remove_power_log_timer(CA::WindowServer::IOMFBServer *this)
{
  __CFRunLoopTimer *v1;

  v1 = (__CFRunLoopTimer *)*((_QWORD *)this + 101);
  if (v1)
  {
    CFRunLoopRemoveTimer(*((CFRunLoopRef *)this + 96), v1, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
    CFRelease(*((CFTypeRef *)this + 101));
    *((_QWORD *)this + 101) = 0;
  }
}

uint64_t CA::WindowServer::IOMFBServer::add_power_log_timer(void)::$_0::__invoke(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v3;

  v3 = (pthread_mutex_t *)(a2 + 544);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 544));
  CA::WindowServer::IOMFBDisplay::post_power_log(*(CA::WindowServer::IOMFBDisplay **)(a2 + 96));
  return pthread_mutex_unlock(v3);
}

uint64_t CA::WindowServer::IOMFBServer::flush_irdc(CA::WindowServer::IOMFBServer *this, CA::Render::Object *a2, void *a3, void *a4)
{
  return CA::WindowServer::Server::set_irdc_hint(a2);
}

uint64_t CA::WindowServer::IOMFBServer::post_power_log(CA::WindowServer::IOMFBServer *this, CA::WindowServer::IOMFBDisplay **a2, void *a3, void *a4)
{
  pthread_mutex_t *v5;

  v5 = (pthread_mutex_t *)(a2 + 68);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 68));
  CA::WindowServer::IOMFBDisplay::post_power_log(a2[12]);
  return pthread_mutex_unlock(v5);
}

void CA::WindowServer::IOMFBServer::post_brightness_hotplug(CA::WindowServer::IOMFBServer *this, CA::Render::Object *a2, void *a3, void *a4)
{
  (*(void (**)(CA::Render::Object *))(*(_QWORD *)a2 + 304))(a2);
  CA::WindowServer::Server::post_brightness_notification(a2);
}

void CA::WindowServer::IOMFBServer::post_flipbook_state_notification(CA::WindowServer::IOMFBServer *this, CA::Render::Object *a2, unsigned __int8 *a3, void *a4)
{
  int v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a3[4];
  v6 = a3[6];
  if (*((_QWORD *)a2 + 34))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v7 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_INFO))
      {
        v8 = *(_DWORD *)(*((_QWORD *)a2 + 12) + 24);
        *(_DWORD *)buf = 67109632;
        v11 = v8;
        v12 = 1024;
        v13 = v6;
        v14 = 1024;
        v15 = v5;
        _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_INFO, "Display %u posting flipbook state %d notification (pre? %u) ", buf, 0x14u);
      }
    }
    (*(void (**)(_QWORD, BOOL, uint64_t))(*((_QWORD *)a2 + 34) + 16))(*((_QWORD *)a2 + 34), v5 != 0, v6);
  }
  if (!v5)
  {
    v9 = *((_QWORD *)a2 + 32);
    if (v9)
      (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v9, v6);
  }
}

void CA::WindowServer::IOMFBServer::request_frame_phase_shift(CA::WindowServer::IOMFBServer *this, CA::Render::Object *a2, _DWORD *a3, void *a4)
{
  uint64_t v4;
  int v6;
  int v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unint64_t v29;

  v4 = *((_QWORD *)a2 + 12);
  if ((*(_DWORD *)(v4 + 624) & 0x100) != 0)
  {
    v6 = a3[1];
    if (!v6 || *(_DWORD *)(v4 + 24) == v6)
    {
      v7 = a3[2];
      v8 = *((_QWORD *)a3 + 2);
      v9 = (os_unfair_lock_s *)(v4 + 27356);
      os_unfair_lock_lock((os_unfair_lock_t)(v4 + 27356));
      os_unfair_lock_lock((os_unfair_lock_t)(v4 + 26016));
      for (i = *(_QWORD *)(v4 + 27360); i != *(_QWORD *)(v4 + 27368); i += 24)
      {
        if ((*(_BYTE *)(i + 20) & 1) == 0 && *(_DWORD *)i != v7)
          goto LABEL_17;
      }
      v11 = atomic_load((unsigned int *)(*(_QWORD *)(v4 + 26032) + 4));
      v12 = llround((double)v8 / (double)v11);
      if (v12 >= 0)
        v13 = v12;
      else
        v13 = -v12;
      if (v12)
        v14 = v13 >= 2;
      else
        v14 = 1;
      if (v14)
      {
LABEL_17:
        kdebug_trace();
        v15 = 0;
        goto LABEL_31;
      }
      v16 = atomic_load((unsigned int *)(*(_QWORD *)(v4 + 26032) + 36));
      if (!v16)
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 784))(v4);
      v17 = v16;
      if (v12 < 0)
        v17 = 0;
      v18 = v17 - v12;
      v19 = atomic_load((unint64_t *)(*(_QWORD *)(v4 + 26032) + 48));
      v20 = atomic_load((unint64_t *)(*(_QWORD *)(v4 + 26032) + 24));
      v21 = atomic_load((unint64_t *)(*(_QWORD *)(v4 + 26032) + 56));
      if (atomic_load((unint64_t *)(*(_QWORD *)(v4 + 26032) + 24)))
      {
        v23 = atomic_load((unsigned int *)(*(_QWORD *)(v4 + 26032) + 40));
        if (!v23)
        {
          v29 = v19;
          v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 784))(v4);
          v19 = v29;
        }
        v24 = v23;
        if (v12 < 0)
          v24 = 0;
        v21 = v21 - v12 + v24;
        v20 += v12 * v11;
      }
      v25 = v18 + v19;
      *(_QWORD *)(v4 + 26064) += v18;
      v26 = *(_QWORD *)(v4 + 26032);
      v27 = (unsigned int *)(v26 + 16);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 + 1, v27));
      atomic_store(v20, (unint64_t *)(v26 + 24));
      atomic_store(v25, (unint64_t *)(v26 + 48));
      atomic_store(v21, (unint64_t *)(v26 + 56));
      atomic_store(v28 + 2, (unsigned int *)(v26 + 16));
      __dmb(0xBu);
      v15 = 1;
      kdebug_trace();
      atomic_load((unsigned __int8 *)(*(_QWORD *)(v4 + 26032) + 32));
      atomic_load((unsigned __int8 *)(*(_QWORD *)(v4 + 26032) + 33));
      atomic_load((unint64_t *)(*(_QWORD *)(v4 + 26032) + 24));
      atomic_load((unsigned int *)(*(_QWORD *)(v4 + 26032) + 36));
      atomic_load((unsigned int *)(*(_QWORD *)(v4 + 26032) + 40));
      kdebug_trace();
      atomic_load((unint64_t *)(*(_QWORD *)(v4 + 26032) + 48));
      atomic_load((unint64_t *)(*(_QWORD *)(v4 + 26032) + 64));
      atomic_load((unint64_t *)(*(_QWORD *)(v4 + 26032) + 56));
      kdebug_trace();
      v9 = (os_unfair_lock_s *)(v4 + 27356);
LABEL_31:
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 26016));
      os_unfair_lock_unlock(v9);
      *(_BYTE *)a3 = v15;
    }
  }
}

void CA::WindowServer::IOMFBServer::get_display_debug_properties(CA::WindowServer::IOMFBServer *this, CA::Render::Object *a2, CFMutableDictionaryRef *a3, void *a4)
{
  __CFDictionary *Mutable;
  uint64_t i;
  uint64_t v8;
  double v9;
  CFStringRef v10;
  char cStr[16];
  __int128 v12;
  char __str[16];
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a3 == *(_DWORD *)(*((_QWORD *)a2 + 12) + 24) && *((_BYTE *)a2 + 944))
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    for (i = 0; i != 4; ++i)
    {
      if (((*((unsigned __int8 *)a2 + 944) >> i) & 1) != 0)
      {
        *(_OWORD *)__str = 0u;
        v14 = 0u;
        *(_OWORD *)cStr = 0u;
        v12 = 0u;
        snprintf(__str, 0x20uLL, "%s", CA::WindowServer::IOMFBServer::throttle_reason_string[i]);
        v8 = mach_absolute_time();
        v9 = CATimeWithHostTime(v8);
        snprintf(cStr, 0x20uLL, "YES, since %.0f seconds ago", v9 - *((double *)a2 + i + 119));
        v10 = CFStringCreateWithCString(0, __str, 0x8000100u);
        CA_CFDictionarySetCString(Mutable, v10, cStr);
        CFRelease(v10);
      }
    }
    CFDictionarySetValue(a3[1], CFSTR("throttleReasons"), Mutable);
    CFRelease(Mutable);
  }
}

os_log_t ___ZN2CA12WindowServer11IOMFBServer17server_log_handleEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreanimation", "IOMFBServer");
  CA::WindowServer::IOMFBServer::server_log_handle(void)::in_memory_handle = (uint64_t)result;
  return result;
}

os_log_t ___ZN2CA12WindowServer11IOMFBServer23server_stall_log_handleEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreanimation", "IOMFBServer.Stalls");
  CA::WindowServer::IOMFBServer::server_stall_log_handle(void)::handle = (uint64_t)result;
  return result;
}

uint64_t CA::WindowServer::IOMFBServer::hotplug_callback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  uint64_t v14;
  BOOL v15;
  CFStringRef v16;
  CFStringRef v17;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  CFTypeID v20;
  const void *Value;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _WORD *v27;
  uint8_t buf[32];
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v5 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_DWORD *)(*(_QWORD *)(a3 + 96) + 24);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v6;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = a2;
      _os_log_impl(&dword_184457000, v5, OS_LOG_TYPE_DEFAULT, "Display %u hot plug %d\n", buf, 0xEu);
    }
  }
  pthread_mutex_lock((pthread_mutex_t *)(a3 + 24));
  pthread_mutex_lock((pthread_mutex_t *)(a3 + 544));
  v7 = *(_QWORD *)(a3 + 96);
  v8 = a2 != 0;
  if (*(unsigned __int8 *)(v7 + 28082) != v8)
  {
    *(_BYTE *)(v7 + 28082) = v8;
    if ((*(_WORD *)(v7 + 656) & 0x1C00) == 0x400)
    {
      v9 = *(_QWORD *)(v7 + 728);
      v10 = *(unsigned __int8 *)(v9 + 2);
      v11 = *(unsigned __int8 *)(v9 + 3);
      v12 = !v10 && v11 == 0;
      if (v12 && a2 != 0)
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 2112))(v7, 1, 0, 1);
    }
  }
  CA::WindowServer::Server::update_display_modes_locked((CA::WindowServer::Server *)a3);
  CA::WindowServer::IOMFBDisplay::enable_hotplug_info(*(CA::WindowServer::IOMFBDisplay **)(a3 + 96));
  if (*(_QWORD *)(*(_QWORD *)(a3 + 96) + 27040))
    CA::WindowServer::IOMFBServer::update_orientation_from_hid((__IOHIDServiceClient **)a3);
  if (!a2)
  {
    CA::WindowServer::IOMFBServer::unregister_libedr_callbacks((CA::WindowServer::IOMFBServer *)a3);
    (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 96) + 48))(*(_QWORD *)(a3 + 96));
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(a3 + 96);
  if ((*(_WORD *)(v14 + 656) & 0x1C00) != 0)
  {
    *(_BYTE *)(v14 + 28112) = 0;
    v30 = 0u;
    v31 = 0u;
    memset(buf, 0, sizeof(buf));
    v15 = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint8_t *, uint64_t, _QWORD))(*(_QWORD *)v14 + 800))(v14, 1, buf, 64, 0))
    {
      v16 = CFStringCreateWithCString(0, (const char *)buf, 0x8000100u);
      if (v16)
      {
        v17 = v16;
        v18 = (const __CFDictionary *)CFPreferencesCopyAppValue(CFSTR("CABrightnessPreferences"), (CFStringRef)*MEMORY[0x1E0C9B248]);
        if (v18)
        {
          v19 = v18;
          v20 = CFGetTypeID(v18);
          if (v20 == CFDictionaryGetTypeID())
          {
            Value = CFDictionaryGetValue(v19, v17);
            if (Value)
            {
              v22 = Value;
              if (CA_CFBoolValue(Value))
              {
                (*(void (**)(uint64_t, float))(*(_QWORD *)v14 + 928))(v14, 0.01);
                v23 = mach_absolute_time();
                *(double *)(v14 + 26488) = CATimeWithHostTime(v23) + 2.0;
              }
              CFRelease(v19);
              v15 = !CA_CFBoolValue(v22);
              CFRelease(v17);
LABEL_33:
              *(_BYTE *)(v14 + 28112) = v15;
              *(_QWORD *)(v14 + 27192) = 0;
              v14 = *(_QWORD *)(a3 + 96);
              goto LABEL_34;
            }
          }
          CFRelease(v19);
        }
        CFRelease(v17);
        v15 = 1;
      }
      else
      {
        v15 = 0;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 952))(v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 928))(v14);
    os_unfair_lock_lock((os_unfair_lock_t)(v14 + 27208));
    v24 = *(_QWORD *)(v14 + 27216);
    os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 27208));
    if (!v24)
      *(_DWORD *)(v14 + 745) &= ~0x200u;
    goto LABEL_33;
  }
LABEL_34:
  *(_DWORD *)(v14 + 745) |= 0x400u;
  *(_QWORD *)buf = 0;
  *(int64x2_t *)&buf[8] = vdupq_n_s64(0x20000000uLL);
  (*(void (**)(uint64_t, uint8_t *, double))(*(_QWORD *)a3 + 184))(a3, buf, 0.0);
  CA::WindowServer::IOMFBDisplay::post_hotplug_log(*(CA::WindowServer::IOMFBDisplay **)(a3 + 96));
  *(_QWORD *)(*(_QWORD *)(a3 + 96) + 27344) = 0;
LABEL_35:
  v25 = *(_QWORD *)(a3 + 224);
  if (v25)
    (*(void (**)(uint64_t, BOOL))(v25 + 16))(v25, a2 != 0);
  if (a2)
    v26 = 8;
  else
    v26 = 7;
  CA::WindowServer::Server::notify_content_streams(a3, v26);
  v27 = *(_WORD **)(a3 + 96);
  if ((v27[328] & 0x1C00) == 0x400 && !a2)
    (*(void (**)(_WORD *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v27 + 2112))(v27, 0, 0, 1);
  pthread_mutex_unlock((pthread_mutex_t *)(a3 + 544));
  return pthread_mutex_unlock((pthread_mutex_t *)(a3 + 24));
}

void CA::WindowServer::IOMFBServer::update_orientation_from_hid(__IOHIDServiceClient **this)
{
  uint64_t v2;
  const void *v3;

  if (this[103])
  {
    v2 = IOHIDServiceClientCopyEvent();
    if (v2)
    {
      v3 = (const void *)v2;
      CA::WindowServer::IOMFBServer::update_orientation_with_hid_event(this, this[103]);
      CFRelease(v3);
    }
  }
}

void CA::WindowServer::IOMFBServer::update_orientation_with_hid_event(_QWORD *a1, __IOHIDServiceClient *a2)
{
  const void *v2;
  const __CFString *v5;
  const __CFString *v6;
  CFUUIDRef v7;
  CFUUIDRef v8;
  double v9;
  int v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  _QWORD v16[5];
  uint8_t buf[8];
  int64x2_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(const void **)(a1[12] + 27040);
  if (v2)
  {
    if (IOHIDEventGetIntegerValue() == 2)
    {
      v5 = (const __CFString *)IOHIDServiceClientCopyProperty(a2, CFSTR("kUSBContainerID"));
      if (v5)
      {
        v6 = v5;
        v7 = CFUUIDCreateFromString(0, v5);
        if (v7)
        {
          v8 = v7;
          if (CFEqual(v7, v2))
          {
            IOHIDEventGetFloatValue();
            if (v9 <= 60.0 || v9 >= 120.0)
            {
              if (v9 <= 150.0 || v9 >= 210.0)
                v10 = v9 < 300.0 && v9 > 240.0;
              else
                v10 = 2;
            }
            else
            {
              v10 = 3;
            }
            if (v10 != *(unsigned __int8 *)(a1[12] + 656))
            {
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                v11 = x_log_category_windowserver;
                if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_INFO))
                {
                  v12 = *(_DWORD *)(a1[12] + 24);
                  *(_DWORD *)buf = 67109376;
                  *(_DWORD *)&buf[4] = v12;
                  v18.i16[0] = 1024;
                  *(__int32 *)((char *)v18.i32 + 2) = v10;
                  _os_log_impl(&dword_184457000, v11, OS_LOG_TYPE_INFO, "display id %u changed orientation %d", buf, 0xEu);
                }
              }
              v13 = a1[12];
              v14 = *(_WORD *)(v13 + 656);
              if (v10 != v14)
              {
                *(_WORD *)(v13 + 656) = v14 & 0xFF00 | v10;
                CA::WindowServer::Display::post_display_changed(v13);
                v13 = a1[12];
              }
              *(_DWORD *)(v13 + 745) |= 0x400u;
              *(_QWORD *)buf = 0;
              v18 = vdupq_n_s64(0x800000uLL);
              (*(void (**)(_QWORD *, uint8_t *, double))(*a1 + 184))(a1, buf, 0.0);
              v15 = *(_QWORD *)(a1[12] + 48);
              if (v15)
              {
                v16[0] = MEMORY[0x1E0C809B0];
                v16[1] = 0x40000000;
                v16[2] = ___ZN2CA12WindowServer11IOMFBServer33update_orientation_with_hid_eventEP20__IOHIDServiceClientP12__IOHIDEvent_block_invoke;
                v16[3] = &__block_descriptor_tmp_80;
                v16[4] = v15;
                CA::WindowServer::Server::schedule_block(v15, v16);
              }
            }
          }
          CFRelease(v8);
        }
        CFRelease(v6);
      }
    }
  }
}

uint64_t ___ZN2CA12WindowServer11IOMFBServer33update_orientation_with_hid_eventEP20__IOHIDServiceClientP12__IOHIDEvent_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int64x2_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v3 = 0;
  v4 = vdupq_n_s64(0x800000uLL);
  return (*(uint64_t (**)(uint64_t, uint64_t *, double))(*(_QWORD *)v1 + 184))(v1, &v3, 0.0);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::PreviousMCTRecord>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::PreviousMCTRecord>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::PreviousMCTRecord>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::PreviousMCTRecord>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v5 = a2;
  v6 = *((_QWORD *)a1 + 1);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6)
                v11 %= v6;
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v10 = operator new(0x28uLL);
  *v10 = 0;
  v10[1] = v5;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v14 = 1;
    if (v6 >= 3)
      v14 = (v6 & (v6 - 1)) != 0;
    v15 = v14 | (2 * v6);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v6)
    {
      v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v6 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v21)
          {
            v22 = v21[1];
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
            v27 = (_QWORD *)*v21;
            if (*v21)
            {
              do
              {
                v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(_QWORD *)&prime)
                    v28 %= *(_QWORD *)&prime;
                }
                else
                {
                  v28 &= *(_QWORD *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  *v21 = *v27;
                  *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
                  v27 = v21;
                }
                v28 = v22;
LABEL_55:
                v21 = v27;
                v27 = (_QWORD *)*v27;
                v22 = v28;
              }
              while (v27);
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_59;
        }
        v33 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v33)
          operator delete(v33);
        v6 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v8 = v5 % v6;
      else
        v8 = v5;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & v5;
    }
  }
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v8] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v31 >= v6)
        v31 %= v6;
    }
    else
    {
      v31 &= v6 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void CA::WindowServer::IOMFBServer::enable_frame_info_tag_list(CA::WindowServer::IOMFBServer *this, const char **a2, uint64_t a3, const char **a4, uint64_t a5)
{
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char **v12;
  NSObject *v13;
  const char *v14;
  uint8_t buf[4];
  const char *v16;
  uint64_t v17;

  v9 = 0;
  v17 = *MEMORY[0x1E0C80C00];
  do
  {
    if (a5)
    {
      v10 = a2[v9];
      v11 = a5;
      v12 = a4;
      while (strcmp(v10, *v12))
      {
        ++v12;
        if (!--v11)
          goto LABEL_12;
      }
      if (IOMobileFramebufferChangeFrameInfo())
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v13 = x_log_category_windowserver;
          if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
          {
            v14 = a2[v9];
            *(_DWORD *)buf = 136315138;
            v16 = v14;
            _os_log_impl(&dword_184457000, v13, OS_LOG_TYPE_ERROR, "failed to enable frame info tag '%s'", buf, 0xCu);
          }
        }
      }
    }
LABEL_12:
    ++v9;
  }
  while (v9 != a3);
}

void ___ZN2CA12WindowServer11IOMFBServerC2EPNS0_12IOMFBDisplayEPK10__CFString_block_invoke(uint64_t a1)
{
  __IOHIDServiceClient **v2;
  const __CFArray *v3;
  const __CFArray *v4;
  int Count;
  CFIndex v6;
  uint64_t v7;
  __IOHIDServiceClient *ValueAtIndex;
  _QWORD v9[2];
  void (*v10)(uint64_t, int, __IOHIDServiceClient **, IOHIDServiceClientRef);
  void *v11;
  __IOHIDServiceClient **v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(__IOHIDServiceClient ***)(a1 + 32);
  v2[102] = (__IOHIDServiceClient *)IOHIDEventSystemClientCreate();
  IOHIDEventSystemClientSetMatchingMultiple();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v10 = ___ZN2CA12WindowServer11IOMFBServerC2EPNS0_12IOMFBDisplayEPK10__CFString_block_invoke_3;
  v11 = &__block_descriptor_tmp_85;
  v12 = v2;
  IOHIDEventSystemClientRegisterDeviceMatchingBlock();
  v3 = IOHIDEventSystemClientCopyServices(v2[102]);
  if (v3)
  {
    v4 = v3;
    Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      v6 = 0;
      v7 = Count;
      do
      {
        ValueAtIndex = (__IOHIDServiceClient *)CFArrayGetValueAtIndex(v4, v6);
        if (ValueAtIndex)
          v10((uint64_t)v9, 0, v2, ValueAtIndex);
        ++v6;
      }
      while (v7 != v6);
    }
    CFRelease(v4);
  }
  IOHIDEventSystemClientRegisterEventBlock();
  IOHIDEventSystemClientScheduleWithRunLoop();
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void CA::WindowServer::IOMFBServer::post_power_notification(CA::WindowServer::IOMFBServer *this, CA::Render::Object *a2, unsigned __int8 *a3, void *a4)
{
  int v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  const char *v9;
  uint64_t v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a3 == *(_DWORD *)(*((_QWORD *)a2 + 12) + 24))
  {
    v5 = a3[4];
    v6 = a3[6];
    if (*((_QWORD *)a2 + 33))
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v7 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
        {
          v8 = *(_DWORD *)(*((_QWORD *)a2 + 12) + 24);
          v9 = "post";
          if (v5)
            v9 = "pre";
          *(_DWORD *)buf = 67109634;
          v12 = v8;
          v13 = 1024;
          v14 = v6;
          v15 = 2080;
          v16 = v9;
          _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_DEFAULT, "Display %u posting power %d %s-notification ", buf, 0x18u);
        }
      }
      (*(void (**)(_QWORD, BOOL, uint64_t))(*((_QWORD *)a2 + 33) + 16))(*((_QWORD *)a2 + 33), v5 != 0, v6);
    }
    if (!v5)
    {
      v10 = *((_QWORD *)a2 + 30);
      if (v10)
        (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v10, v6);
    }
  }
}

void ___ZN2CA12WindowServer11IOMFBServerC2EPNS0_12IOMFBDisplayEPK10__CFString_block_invoke_3(uint64_t a1, int a2, __IOHIDServiceClient **a3, IOHIDServiceClientRef service)
{
  uint64_t v6;
  const void *v7;

  v6 = *(_QWORD *)(a1 + 32);
  if (IOHIDServiceClientConformsTo(service, 0x20u, 0x8Au))
  {
    v7 = *(const void **)(v6 + 824);
    if (v7)
      CFRelease(v7);
    *(_QWORD *)(v6 + 824) = CFRetain(service);
    CA::WindowServer::IOMFBServer::update_orientation_from_hid(a3);
  }
}

void ___ZN2CA12WindowServer11IOMFBServerC2EPNS0_12IOMFBDisplayEPK10__CFString_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, __IOHIDServiceClient *a4)
{
  int Type;
  double v7;
  float v8;

  Type = IOHIDEventGetType();
  if (Type == 10)
  {
    CA::WindowServer::IOMFBServer::update_orientation_with_hid_event((_QWORD *)a3, a4);
  }
  else if (Type == 15)
  {
    IOHIDEventGetFloatValue();
    v8 = v7;
    pthread_mutex_lock((pthread_mutex_t *)(a3 + 24));
    (*(void (**)(_QWORD, float))(**(_QWORD **)(a3 + 96) + 992))(*(_QWORD *)(a3 + 96), v8);
    pthread_mutex_unlock((pthread_mutex_t *)(a3 + 24));
  }
}

void CA::Render::Surface::show(CA::Render::Surface *this, unsigned int a2, char a3)
{
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  uint32_t v11;
  NSObject *v12;
  int v13;
  int v14;
  int v15;
  NSObject *v16;
  float v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  const char *v22;
  uint64_t v23;
  unsigned int v24;
  const char *v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  char v36;
  const char *v37;
  NSObject *v38;
  uint32_t v39;
  unint64_t v40;
  NSObject *v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  char *v47;
  NSObject *v48;
  const __CFString *v49;
  const __CFString *v50;
  NSObject *v51;
  NSObject *v52;
  NSObject *v53;
  double v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  const char *v61;
  double v62;
  double v63;
  double v64;
  double v65;
  uint64_t v66;
  char *v67;
  uint8_t v68[4];
  double v69;
  uint8_t buf[48];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  if ((a3 & 1) != 0)
  {
    v56 = (*(uint64_t (**)(CA::Render::Surface *))(*(_QWORD *)this + 168))(this);
    if (x_log_hook_p())
    {
      (*(uint64_t (**)(CA::Render::Surface *))(*(_QWORD *)this + 104))(this);
      if (v56 >= 0x400)
      {
        v62 = 1.0;
        do
          v62 = v62 * 0.0009765625;
        while (v62 * (double)v56 >= 1024.0);
      }
      goto LABEL_117;
    }
    v57 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v59 = *((_DWORD *)this + 4);
      v58 = *((_DWORD *)this + 5);
      v60 = (*(uint64_t (**)(CA::Render::Surface *))(*(_QWORD *)this + 104))(this);
      if (v60 > 0x23)
        v61 = "UNKNOWN";
      else
        v61 = off_1E159CBE8[v60];
      v63 = (double)v56;
      if (v56 >= 0x400)
      {
        v65 = 1.0;
        do
        {
          v65 = v65 * 0.0009765625;
          v64 = v65 * v63;
        }
        while (v65 * v63 >= 1024.0);
      }
      else
      {
        v64 = (double)v56;
      }
      v66 = v56 > 0x3FF;
      if ((v56 & 0xFFFFFFFFFFF00000) != 0)
        ++v66;
      if ((v56 & 0xFFFFFFFFC0000000) != 0)
        ++v66;
      if (v56 >> 40)
        ++v66;
      if (v56 >> 50)
        ++v66;
      if (v56 >> 60)
        ++v66;
      v67 = off_1E15AAF00[v66];
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v59;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v58;
      *(_WORD *)&buf[14] = 2080;
      *(_QWORD *)&buf[16] = v61;
      *(_WORD *)&buf[24] = 2048;
      *(double *)&buf[26] = v64;
      *(_WORD *)&buf[34] = 2080;
      *(_QWORD *)&buf[36] = v67;
      v8 = "<surface [%d %d] [%s] [%.2lf %s]>";
      v9 = buf;
      v10 = v57;
      v11 = 44;
      goto LABEL_120;
    }
    return;
  }
  v4 = *((_QWORD *)this + 15);
  v5 = x_log_hook_p();
  if (v4)
  {
    if (v5)
    {
LABEL_117:
      x_log_();
      return;
    }
    v6 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *((_QWORD *)this + 15);
      if (v7)
        LODWORD(v7) = *(_DWORD *)(v7 + 16);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v7;
      v8 = "(surface machport %u)";
      v9 = buf;
      v10 = v6;
      v11 = 8;
      goto LABEL_120;
    }
    return;
  }
  if (v5)
  {
    x_log_();
  }
  else
  {
    v12 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *((_DWORD *)this + 26);
      v14 = *((_DWORD *)this + 4);
      v15 = *((_DWORD *)this + 5);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v14;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&buf[16] = v15;
      _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_DEFAULT, "(surface 0x%x [%d %d] ", buf, 0x14u);
    }
  }
  if (*((_QWORD *)this + 14))
  {
    if ((*(float (**)(CA::Render::Surface *))(*(_QWORD *)this + 152))(this) != 1.0)
    {
      if (x_log_hook_p())
      {
        (*(float (**)(CA::Render::Surface *))(*(_QWORD *)this + 152))(this);
        x_log_();
      }
      else
      {
        v16 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v17 = (*(float (**)(CA::Render::Surface *))(*(_QWORD *)this + 152))(this);
          *(_DWORD *)buf = 134217984;
          *(double *)&buf[4] = v17;
          _os_log_impl(&dword_184457000, v16, OS_LOG_TYPE_DEFAULT, "edr %g ", buf, 0xCu);
        }
      }
    }
    if ((*(uint64_t (**)(CA::Render::Surface *))(*(_QWORD *)this + 240))(this))
    {
      if (x_log_hook_p())
      {
        (*(void (**)(CA::Render::Surface *))(*(_QWORD *)this + 240))(this);
        x_log_();
      }
      else
      {
        v18 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v19 = (*(uint64_t (**)(CA::Render::Surface *))(*(_QWORD *)this + 240))(this);
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v19;
          _os_log_impl(&dword_184457000, v18, OS_LOG_TYPE_DEFAULT, "protected 0x%llx ", buf, 0xCu);
        }
      }
    }
    if (x_log_hook_p())
    {
      (*(uint64_t (**)(CA::Render::Surface *))(*(_QWORD *)this + 104))(this);
      v26 = *((_DWORD *)this + 32);
      if (v26 < 0)
      {
        __maskrune(HIBYTE(*((_DWORD *)this + 32)), 0x40000uLL);
        v26 = *((_DWORD *)this + 32);
      }
      if (BYTE2(v26) > 0x7Fu)
      {
        __maskrune(BYTE2(v26), 0x40000uLL);
        v26 = *((_DWORD *)this + 32);
      }
      if (BYTE1(v26) > 0x7Fu)
      {
        __maskrune(BYTE1(v26), 0x40000uLL);
        v26 = *((_DWORD *)this + 32);
      }
      if (v26 > 0x7Fu)
        __maskrune(v26, 0x40000uLL);
      goto LABEL_42;
    }
    v20 = x_log_category_render;
    if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      goto LABEL_71;
    v21 = (*(uint64_t (**)(CA::Render::Surface *))(*(_QWORD *)this + 104))(this);
    if (v21 > 0x23)
      v22 = "UNKNOWN";
    else
      v22 = off_1E159CBE8[v21];
    v27 = *((unsigned int *)this + 32);
    v28 = v27 >> 24;
    v29 = MEMORY[0x1E0C80978];
    if ((v27 & 0x80000000) != 0)
    {
      v30 = __maskrune(v28, 0x40000uLL);
      LODWORD(v27) = *((_DWORD *)this + 32);
    }
    else
    {
      v30 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v28 + 60) & 0x40000;
    }
    if (v30)
      v31 = (int)v27 >> 24;
    else
      v31 = 32;
    if (BYTE2(v27) <= 0x7Fu)
    {
      v32 = *(_DWORD *)(v29 + 4 * BYTE2(v27) + 60) & 0x40000;
    }
    else
    {
      v32 = __maskrune(BYTE2(v27), 0x40000uLL);
      LODWORD(v27) = *((_DWORD *)this + 32);
    }
    if (v32)
      v33 = (int)((_DWORD)v27 << 8) >> 24;
    else
      v33 = 32;
    if (BYTE1(v27) <= 0x7Fu)
    {
      v34 = *(_DWORD *)(v29 + 4 * BYTE1(v27) + 60) & 0x40000;
    }
    else
    {
      v34 = __maskrune(BYTE1(v27), 0x40000uLL);
      LODWORD(v27) = *((_DWORD *)this + 32);
    }
    if (v34)
      v35 = (__int16)v27 >> 8;
    else
      v35 = 32;
    if (v27 <= 0x7Fu)
    {
      if ((*(_DWORD *)(v29 + 4 * v27 + 60) & 0x40000) != 0)
        goto LABEL_64;
    }
    else if (__maskrune(v27, 0x40000uLL))
    {
LABEL_64:
      v36 = *((_BYTE *)this + 128);
LABEL_67:
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = v22;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v31;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v33;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v35;
      *(_WORD *)&buf[30] = 1024;
      *(_DWORD *)&buf[32] = v36;
      v37 = "%s %c%c%c%c";
      v38 = v20;
      v39 = 36;
      goto LABEL_70;
    }
    v36 = 32;
    goto LABEL_67;
  }
  if (x_log_hook_p())
  {
    (*(uint64_t (**)(CA::Render::Surface *))(*(_QWORD *)this + 104))(this);
LABEL_42:
    x_log_();
    goto LABEL_71;
  }
  v23 = x_log_category_render;
  if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    goto LABEL_71;
  v24 = (*(uint64_t (**)(CA::Render::Surface *))(*(_QWORD *)this + 104))(this);
  if (v24 > 0x23)
    v25 = "UNKNOWN";
  else
    v25 = off_1E159CBE8[v24];
  *(_DWORD *)buf = 136315138;
  *(_QWORD *)&buf[4] = v25;
  v37 = "%s";
  v38 = v23;
  v39 = 12;
LABEL_70:
  _os_log_impl(&dword_184457000, v38, OS_LOG_TYPE_DEFAULT, v37, buf, v39);
LABEL_71:
  v40 = (*(uint64_t (**)(CA::Render::Surface *))(*(_QWORD *)this + 168))(this);
  if (x_log_hook_p())
  {
    if (v40 >= 0x400)
    {
      v44 = 1.0;
      do
        v44 = v44 * 0.0009765625;
      while (v44 * (double)v40 >= 1024.0);
    }
    x_log_();
  }
  else
  {
    v41 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v42 = (double)v40;
      if (v40 >= 0x400)
      {
        v45 = 1.0;
        do
        {
          v45 = v45 * 0.0009765625;
          v43 = v45 * v42;
        }
        while (v45 * v42 >= 1024.0);
      }
      else
      {
        v43 = (double)v40;
      }
      v46 = v40 > 0x3FF;
      if ((v40 & 0xFFFFFFFFFFF00000) != 0)
        ++v46;
      if ((v40 & 0xFFFFFFFFC0000000) != 0)
        ++v46;
      if (v40 >> 40)
        ++v46;
      if (v40 >> 50)
        ++v46;
      if (v40 >> 60)
        ++v46;
      v47 = off_1E15AAF00[v46];
      *(_DWORD *)buf = 134218242;
      *(double *)&buf[4] = v43;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v47;
      _os_log_impl(&dword_184457000, v41, OS_LOG_TYPE_DEFAULT, " (%.2lf %s)", buf, 0x16u);
    }
  }
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v71 = 0u;
  memset(buf, 0, sizeof(buf));
  if (*((_QWORD *)this + 6))
  {
    if ((*((_BYTE *)this + 14) & 8) != 0)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v48 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v68 = 0;
          _os_log_impl(&dword_184457000, v48, OS_LOG_TYPE_DEFAULT, " colormatching-disabled", v68, 2u);
        }
      }
    }
    v49 = (const __CFString *)CGColorSpaceCopyICCProfileDescription();
    if (v49)
    {
      v50 = v49;
      CFStringGetCString(v49, (char *)buf, 255, 0x8000100u);
      if (buf[0])
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v51 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v68 = 136315138;
            v69 = COERCE_DOUBLE(buf);
            _os_log_impl(&dword_184457000, v51, OS_LOG_TYPE_DEFAULT, " (colorspace \"%s\")", v68, 0xCu);
          }
        }
      }
      CFRelease(v50);
    }
  }
  if ((*((_BYTE *)this + 14) & 0x40) != 0)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v52 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v68 = 0;
        _os_log_impl(&dword_184457000, v52, OS_LOG_TYPE_DEFAULT, " placeholder", v68, 2u);
      }
    }
  }
  if (*((float *)this + 14) > 1.0)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v53 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v54 = *((float *)this + 14);
        *(_DWORD *)v68 = 134217984;
        v69 = v54;
        _os_log_impl(&dword_184457000, v53, OS_LOG_TYPE_DEFAULT, " headroom %.3g", v68, 0xCu);
      }
    }
  }
  if (x_log_hook_p())
    goto LABEL_117;
  v55 = x_log_category_render;
  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v68 = 0;
    v8 = ")";
    v9 = v68;
    v10 = v55;
    v11 = 2;
LABEL_120:
    _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_DEFAULT, v8, v9, v11);
  }
}

CGColorSpace *CA::Render::Surface::set_default_colorspace(CA::Render::Surface *this)
{
  CA::Render *v2;
  CGColorSpace *v3;

  v2 = (CA::Render *)(*(uint64_t (**)(CA::Render::Surface *))(*(_QWORD *)this + 104))(this);
  v3 = (CGColorSpace *)CA::Render::format_default_colorspace(v2);
  return CA::Render::Texture::set_colorspace(this, v3);
}

uint64_t CA::Render::Surface::has_linear_edr(CA::Render::Surface *this)
{
  return (*((unsigned __int16 *)this + 168) >> 4) & 1;
}

__IOSurface *CA::Render::Surface::data_size(CA::Render::Surface *this)
{
  __IOSurface *result;

  result = (__IOSurface *)*((_QWORD *)this + 14);
  if (result)
    return (__IOSurface *)IOSurfaceGetAllocSize(result);
  return result;
}

uint64_t CA::Render::Surface::set_data_volatile(CA::Render::Surface *this, __IOSurface *a2)
{
  CA::Render *v2;

  v2 = (CA::Render *)*((_QWORD *)this + 14);
  if (v2)
    return CA::Render::set_iosurface_volatile(v2, a2);
  else
    return a2 ^ 1;
}

float CA::Render::Surface::opacity_at(IOSurfaceRef *this, int a2, int a3)
{
  float v3;
  CA::Render *v7;
  BOOL v8;
  char *BaseAddress;
  char *v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  size_t BytesPerRow;
  float *v18;
  float v19;
  int v20;
  _BYTE *BaseAddressOfPlane;
  unsigned int v22;
  unsigned __int8 v24[4];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = 1.0;
  if ((*((_BYTE *)this + 13) & 0x10) == 0
    && ((*((uint64_t (**)(IOSurfaceRef *))*this + 15))(this) & 1) == 0
    && this[14])
  {
    v7 = (CA::Render *)(*((uint64_t (**)(IOSurfaceRef *))*this + 13))(this);
    v8 = (_DWORD)v7 != 35 && ((v7 < 0x23) & (0x419A4EB03uLL >> (char)v7)) == 0;
    if (!v8 && !IOSurfaceLock(this[14], 1u, 0))
    {
      *(_DWORD *)v24 = 1065353216;
      BaseAddress = (char *)IOSurfaceGetBaseAddress(this[14]);
      if (BaseAddress)
      {
        v10 = BaseAddress;
        v11 = *((_DWORD *)this + 4);
        v12 = *((_DWORD *)this + 5);
        v13 = v11 - 1;
        if (v11 <= 0)
          v13 = 0;
        if (v11 > a2)
          v14 = a2 & ~(a2 >> 31);
        else
          v14 = v13;
        v15 = v12 - 1;
        if (v12 <= 0)
          v15 = 0;
        if (v12 > a3)
          v16 = a3 & ~(a3 >> 31);
        else
          v16 = v15;
        BytesPerRow = IOSurfaceGetBytesPerRow(this[14]);
        v20 = CA::Render::format_opacity_at_value(v7, (__int16 *)&v10[BytesPerRow * v16 + dword_184750480[v7] * v14], (float *)v24, v18, v19);
        if ((_DWORD)v7 != 35 || v20)
        {
          v3 = *(float *)v24;
        }
        else
        {
          BaseAddressOfPlane = IOSurfaceGetBaseAddressOfPlane(this[14], 1uLL);
          LOBYTE(v22) = BaseAddressOfPlane[IOSurfaceGetBytesPerRowOfPlane(this[14], 1uLL) * v16 + v14];
          v3 = (float)v22 * 0.0039216;
        }
      }
      IOSurfaceUnlock(this[14], 1u, 0);
    }
  }
  return v3;
}

BOOL CA::Render::Surface::is_fp16(CA::Render::Surface *this)
{
  int v1;

  v1 = *((_DWORD *)this + 32);
  return v1 == 1380411457 || v1 == 642934849;
}

uint64_t CA::Render::set_iosurface_volatile(CA::Render *this, __IOSurface *a2)
{
  unsigned int v2;
  uint32_t oldState;
  uint64_t v5;

  v2 = a2;
  v5 = *MEMORY[0x1E0C80C00];
  oldState = 0;
  if (IOSurfaceSetPurgeable(this, (uint32_t)a2, &oldState))
    return v2 ^ 1;
  if (oldState == 2)
    return v2;
  return 1;
}

void CA::Render::iosurface_get_edr_headroom(CA::Render *this, __IOSurface *a2)
{
  CFTypeRef v2;
  const void *v3;

  if (this)
  {
    v2 = IOSurfaceCopyValue(this, (CFStringRef)*MEMORY[0x1E0CBBF98]);
    if (v2)
    {
      v3 = v2;
      CA_CFFloatValue(v2);
      CFRelease(v3);
    }
  }
}

CA::Render::Texture *CA::Render::Surface::Surface(CA::Render::Texture *a1, const void *a2)
{
  CA::Render::Texture *v4;
  unsigned int v5;

  v4 = CA::Render::Texture::Texture(a1, 0, 0);
  v5 = *((_DWORD *)v4 + 3) & 0xFFFFFF03;
  ++dword_1ECDC7CF4;
  *(_QWORD *)v4 = off_1E1598F88;
  *((_QWORD *)v4 + 12) = 0;
  *((_QWORD *)v4 + 13) = 0xFFFFFFFF00000000;
  *((_QWORD *)v4 + 14) = 0;
  *((_QWORD *)v4 + 15) = a2;
  *((_DWORD *)v4 + 32) = 0;
  *((_DWORD *)v4 + 33) = 1065353216;
  *(_OWORD *)((char *)v4 + 136) = 0u;
  *(_OWORD *)((char *)v4 + 152) = 0u;
  *(_OWORD *)((char *)v4 + 168) = 0u;
  *((_DWORD *)v4 + 46) = 0;
  *(_OWORD *)((char *)v4 + 188) = xmmword_18474E010;
  *((_DWORD *)v4 + 51) = 1065353216;
  *((_OWORD *)v4 + 13) = xmmword_18474E020;
  *((_QWORD *)v4 + 28) = 0;
  *((_WORD *)v4 + 116) = 0;
  *(_QWORD *)((char *)v4 + 236) = 0x100000001;
  *((_BYTE *)v4 + 276) = 0;
  *(_OWORD *)((char *)v4 + 260) = 0u;
  *(_OWORD *)((char *)v4 + 244) = 0u;
  *((_DWORD *)v4 + 70) = 1065353216;
  *(_QWORD *)((char *)v4 + 292) = 0;
  *(_QWORD *)((char *)v4 + 284) = 0;
  *((_DWORD *)v4 + 75) = -1;
  *((_QWORD *)v4 + 39) = 0;
  *((_QWORD *)v4 + 40) = 0;
  *((_BYTE *)v4 + 328) = 0;
  *((_BYTE *)v4 + 329) &= 0x80u;
  *((_DWORD *)v4 + 83) = -1;
  *((_WORD *)v4 + 168) &= 0xF840u;
  *((_DWORD *)v4 + 3) = v5 | 0x840033;
  *((_DWORD *)v4 + 81) = 1;
  CFRetain(a2);
  return a1;
}

void CA::Render::Surface::ensure_scheduled_block(CA::Render::Surface *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 39);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(v2 + 16))(v2, 0);
    _Block_release(*((const void **)this + 39));
    *((_QWORD *)this + 39) = 0;
  }
}

CA::Render *CA::Render::Surface::reload_iosurface_color_attributes(CA::Render::Surface *this, __IOSurface *a2)
{
  CA::Render *result;
  __IOSurface *v4;
  int v5;

  result = (CA::Render *)*((_QWORD *)this + 14);
  if (result)
  {
    *((float *)this + 33) = CA::Render::iosurface_get_edr_factor(result, a2);
    CA::Render::iosurface_get_edr_headroom(*((CA::Render **)this + 14), v4);
    *((_DWORD *)this + 14) = v5;
    *((_QWORD *)this + 17) = IOSurfaceGetProtectionOptions();
    result = (CA::Render *)CA::Render::iosurface_load_attachments(this, (CA::Render::Surface *)0x3E);
    if (*((float *)this + 33) != 1.0)
      *((_WORD *)this + 168) |= 4u;
  }
  return result;
}

CFStringRef CA::Render::iosurface_set_bulk_from_colorspace(CA::Render *this, CGColorSpaceRef space, CGColorSpace *a3, unsigned __int8 *a4)
{
  CFStringRef result;
  unsigned __int8 v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  *(_WORD *)v5 = 0;
  result = CA::Render::iosurface_color_tags_for_colorspace(space, (CGColorSpace *)&v5[1], v5, a4);
  if ((_DWORD)result)
    return (CFStringRef)IOSurfaceSetBulkAttachments2();
  return result;
}

__IOSurface *CA::Render::create_iosurface(CA::Render *this, CA::Render *a2, unsigned int a3, const void *a4, unsigned int a5, const __CFString *a6)
{
  unsigned int v8;
  int v9;
  _BOOL4 v10;
  const __CFString *v11;
  uint64_t v12;

  if ((_DWORD)a2
    && a3
    && (v8 = a2, v9 = (int)this, v10 = CA::Render::iosurface_size_supported(a2, a3), !((a3 | v8) >> 13))
    && v10
    && (v9 != 17 ? (LODWORD(v12) = v9) : (LODWORD(v12) = 13),
        v9 == 3 ? (v12 = 1) : (v12 = v12),
        v12 <= 0x23 && ((0x61CB910CuLL >> v12) & 1) == 0))
  {
    return CA::Render::create_iosurface_with_pixel_format((CA::Render *)dword_184750604[v12], v8, a3, 0, 0, a4, v11);
  }
  else
  {
    return 0;
  }
}

uint64_t CA::Render::Surface::set_edr_factor(uint64_t this, float a2)
{
  *(_WORD *)(this + 336) |= 4u;
  if (*(float *)(this + 132) != a2)
  {
    *(float *)(this + 132) = a2;
    this = *(_QWORD *)(this + 112);
    if (this)
      return IOSurfaceSetBulkAttachments2();
  }
  return this;
}

void CA::Render::Timing::show(CA::Render::Timing *this, CA::Render *a2, char a3)
{
  double *v5;
  int v6;
  char *v7;
  float *v8;
  double *v9;
  uint64_t *v10;
  NSObject *v11;
  double v12;
  NSObject *v13;
  double v14;
  NSObject *v15;
  NSObject *v16;
  const char *v17;
  const char *v18;
  NSObject *v19;
  double v20;
  NSObject *v21;
  double v22;
  double v23;
  const char *v24;
  NSObject *v25;
  uint64_t v26;
  uint8_t buf[4];
  double v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if ((a3 & 1) != 0)
    return;
  if (*((double *)this + 5) == 0.0)
  {
    v5 = (double *)((char *)this + 32);
    if ((*((_QWORD *)this + 4) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      v7 = (char *)this + 12;
      v6 = *((_DWORD *)this + 3);
      if ((v6 & 0x100) == 0)
      {
        if ((v6 & 0x600) == 0)
        {
          v8 = (float *)((char *)this + 16);
          if (*((float *)this + 4) == 1.0)
          {
            v9 = (double *)((char *)this + 48);
            if (*((double *)this + 6) == 0.0)
            {
              v10 = (uint64_t *)((char *)this + 24);
              if (*((double *)this + 3) == 0.0)
                return;
              goto LABEL_51;
            }
            goto LABEL_45;
          }
          goto LABEL_39;
        }
        goto LABEL_28;
      }
      goto LABEL_22;
    }
  }
  else
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v11 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *((double *)this + 5);
        *(_DWORD *)buf = 134217984;
        v28 = v12;
        _os_log_impl(&dword_184457000, v11, OS_LOG_TYPE_DEFAULT, "(beginTime %f)", buf, 0xCu);
      }
    }
    v5 = (double *)((char *)this + 32);
    if ((*((_QWORD *)this + 4) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      goto LABEL_20;
    CA::Render::show_newline(a2);
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v13 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *v5;
      *(_DWORD *)buf = 134217984;
      v28 = v14;
      _os_log_impl(&dword_184457000, v13, OS_LOG_TYPE_DEFAULT, "(duration %f)", buf, 0xCu);
    }
  }
LABEL_20:
  v7 = (char *)this + 12;
  if ((*((_BYTE *)this + 13) & 1) == 0)
    goto LABEL_26;
  CA::Render::show_newline(a2);
LABEL_22:
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v15 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184457000, v15, OS_LOG_TYPE_DEFAULT, "(autoreverses true)", buf, 2u);
    }
  }
LABEL_26:
  if ((v7[1] & 6) != 0)
  {
    CA::Render::show_newline(a2);
LABEL_28:
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v16 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v17 = "both";
        if ((*(_DWORD *)v7 & 0x400) == 0)
          v17 = "forwards";
        if ((*(_DWORD *)v7 & 0x200) != 0)
          v18 = v17;
        else
          *(double *)&v18 = COERCE_DOUBLE("backwards");
        *(_DWORD *)buf = 136315138;
        v28 = *(double *)&v18;
        _os_log_impl(&dword_184457000, v16, OS_LOG_TYPE_DEFAULT, "(fillMode %s)", buf, 0xCu);
      }
    }
  }
  v8 = (float *)((char *)this + 16);
  if (*((float *)this + 4) == 1.0)
    goto LABEL_43;
  CA::Render::show_newline(a2);
LABEL_39:
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v19 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *v8;
      *(_DWORD *)buf = 134217984;
      v28 = v20;
      _os_log_impl(&dword_184457000, v19, OS_LOG_TYPE_DEFAULT, "(speed %f)", buf, 0xCu);
    }
  }
LABEL_43:
  v9 = (double *)((char *)this + 48);
  if (*((double *)this + 6) != 0.0)
  {
    CA::Render::show_newline(a2);
LABEL_45:
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v21 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v22 = *v9;
        *(_DWORD *)buf = 134217984;
        v28 = v22;
        _os_log_impl(&dword_184457000, v21, OS_LOG_TYPE_DEFAULT, "(timeOffset %f)", buf, 0xCu);
      }
    }
  }
  v23 = *((double *)this + 3);
  v10 = (uint64_t *)((char *)this + 24);
  if (v23 == 0.0)
    return;
  CA::Render::show_newline(a2);
  v6 = *(_DWORD *)v7;
LABEL_51:
  if ((v6 & 0x800) != 0)
    *(double *)&v24 = COERCE_DOUBLE("repeatDuration");
  else
    *(double *)&v24 = COERCE_DOUBLE("repeatCount");
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v25 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v26 = *v10;
      *(_DWORD *)buf = 136315394;
      v28 = *(double *)&v24;
      v29 = 2048;
      v30 = v26;
      _os_log_impl(&dword_184457000, v25, OS_LOG_TYPE_DEFAULT, "(%s %f)", buf, 0x16u);
    }
  }
}

uint64_t CADebugColorOptionAtIndex(unint64_t a1)
{
  if (a1 > 0x23)
    return 0xFFFFFFFFLL;
  else
    return color_options[a1];
}

uint64_t CADebugPrintOptionAtIndex(unint64_t a1)
{
  if (a1 > 0x22)
    return 0xFFFFFFFFLL;
  else
    return print_options[a1];
}

uint64_t CADebugFeatureOptionAtIndex(unint64_t a1)
{
  if (a1 > 0x76)
    return 0xFFFFFFFFLL;
  else
    return feature_options[a1];
}

uint64_t CADebugClientOptionAtIndex(unint64_t a1)
{
  if (a1 > 5)
    return 0xFFFFFFFFLL;
  else
    return client_options[a1];
}

BOOL CADebugOptionIsColor(__int32 __c)
{
  __int32 *v1;
  unsigned int *v2;

  v1 = wmemchr(color_options, __c, 0x24uLL);
  v2 = print_options;
  if (v1)
    v2 = (unsigned int *)v1;
  return (char *)v2 - (char *)color_options != 144;
}

BOOL CADebugOptionIsPrint(__int32 __c)
{
  __int32 *v1;
  unsigned int *v2;

  v1 = wmemchr((__int32 *)print_options, __c, 0x23uLL);
  v2 = feature_options;
  if (v1)
    v2 = (unsigned int *)v1;
  return (char *)v2 - (char *)print_options != 140;
}

BOOL CADebugOptionIsFeature(__int32 __c)
{
  __int32 *v1;
  unsigned int *v2;

  v1 = wmemchr((__int32 *)feature_options, __c, 0x77uLL);
  v2 = client_options;
  if (v1)
    v2 = (unsigned int *)v1;
  return (char *)v2 - (char *)feature_options != 476;
}

BOOL CADebugOptionIsClient(__int32 __c)
{
  __int32 *v1;
  __int32 *v2;

  v1 = wmemchr((__int32 *)client_options, __c, 6uLL);
  v2 = (__int32 *)&CADebugOptionForceWalkTree::walking_options;
  if (v1)
    v2 = v1;
  return (char *)v2 - (char *)client_options != 24;
}

BOOL CADebugOptionForceWalkTree(__int32 __c)
{
  __int32 *v1;
  int *v2;

  v1 = wmemchr(&CADebugOptionForceWalkTree::walking_options, __c, 1uLL);
  v2 = dword_18475EC84;
  if (v1)
    v2 = v1;
  return (char *)v2 - (char *)&CADebugOptionForceWalkTree::walking_options != 4;
}

char *CAGetDebugOptionEnvVariableName(unsigned int a1)
{
  if (a1 <= 0xC3)
    return debug_option_env_vars[a1];
  else
    return 0;
}

char *CAGetDebugValueEnvVariableName(unsigned int a1)
{
  if (a1 <= 0x40)
    return debug_value_env_vars[a1];
  else
    return 0;
}

BOOL CAGetDebugOption(unsigned int a1)
{
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  return a1 <= 0xC3 && *((_BYTE *)&ca_debug_options + a1) != 0;
}

void CASetDebugOption(unsigned __int32 a1, char a2)
{
  uint64_t v4;
  __CFNotificationCenter *LocalCenter;
  __int32 *v6;
  int *v7;

  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  if (a1 <= 0xC3)
  {
    v4 = 0;
    *((_BYTE *)&ca_debug_options + a1) = a2;
    options_are_visual = 0;
    while (!*((_BYTE *)&ca_debug_options + dword_18475EC84[v4]))
    {
      if (++v4 == 39)
        goto LABEL_9;
    }
    options_are_visual = 1;
LABEL_9:
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterPostNotification(LocalCenter, CFSTR("kCADebugOptionsDidChange"), 0, 0, 1u);
    v6 = wmemchr(&CADebugOptionForceWalkTree::walking_options, a1, 1uLL);
    v7 = dword_18475EC84;
    if (v6)
      v7 = v6;
    if ((char *)v7 - (char *)&CADebugOptionForceWalkTree::walking_options != 4)
    {
      if (initialized[0] != -1)
        dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
      CASetDebugValueFloat(0x3Du, (float)(*(float *)&dword_1ECDC6A14 + 1));
    }
  }
}

void CASetDebugValueFloat(unsigned int a1, float a2)
{
  __CFNotificationCenter *LocalCenter;

  if (a1 <= 0x40)
  {
    if (initialized[0] != -1)
      dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
    *(float *)&debug_values[a1] = a2;
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterPostNotification(LocalCenter, CFSTR("kCADebugOptionsDidChange"), 0, 0, 1u);
  }
}

uint64_t CAGetDebugValue(unsigned int a1)
{
  return CAGetDebugValueFloat(a1);
}

void CASetDebugValue(unsigned int a1, unsigned int a2)
{
  CASetDebugValueFloat(a1, (float)a2);
}

void CAClearDebugOptions()
{
  uint64_t v0;

  v0 = 0;
  dword_1ECDC6B10 = 0;
  xmmword_1ECDC6AF0 = 0u;
  *(_OWORD *)&byte_1ECDC6B00 = 0u;
  xmmword_1ECDC6AD0 = 0u;
  unk_1ECDC6AE0 = 0u;
  xmmword_1ECDC6AB0 = 0u;
  *(_OWORD *)&byte_1ECDC6AC0 = 0u;
  xmmword_1ECDC6A90 = 0u;
  *(_OWORD *)&byte_1ECDC6AA0 = 0u;
  xmmword_1ECDC6A70 = 0u;
  *(_OWORD *)&byte_1ECDC6A80 = 0u;
  ca_debug_options = 0u;
  *(_OWORD *)&byte_1ECDC6A60 = 0u;
  options_are_visual = 0;
  while (!*((_BYTE *)&ca_debug_options + dword_18475EC84[v0]))
  {
    if (++v0 == 39)
      return;
  }
  options_are_visual = 1;
}

void CAClearColorDebugOptions()
{
  uint64_t i;
  uint64_t v1;

  for (i = 0; i != 36; ++i)
    *((_BYTE *)&ca_debug_options + color_options[i]) = 0;
  v1 = 0;
  options_are_visual = 0;
  while (!*((_BYTE *)&ca_debug_options + dword_18475EC84[v1]))
  {
    if (++v1 == 39)
      return;
  }
  options_are_visual = 1;
}

uint64_t CAGetDebugFlags(uint8x8_t a1)
{
  int8x8_t v1;
  int v2;
  int8x16_t v3;
  uint16x8_t v4;
  int16x8_t v5;
  int16x4_t v6;
  int8x16_t v7;
  int8x16_t v8;
  __int32 v9;
  unint64_t v10;
  __int32 v11;
  int8x16x2_t v13;

  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  a1.i32[0] = *(_DWORD *)((char *)&ca_debug_options + 1);
  v1 = vand_s8((int8x8_t)*(_OWORD *)&vsubw_u8((uint16x8_t)0, a1), (int8x8_t)0x10000800040002);
  v2 = (v1.i8[0] | v1.i8[4] | ((v1.i32[0] | v1.i32[1]) >> 16) | -BYTE5(ca_debug_options) & 0x20 | -BYTE6(ca_debug_options) & 0x40 | -BYTE7(ca_debug_options) & 0x80 | ca_debug_options);
  v13.val[0] = *(int8x16_t *)((char *)&ca_debug_options + 8);
  v13.val[1] = *(int8x16_t *)&word_1ECDC6A66;
  v13.val[0].i32[2] = *(_DWORD *)&byte_1ECDC6A60;
  v13.val[0].i16[6] = word_1ECDC6A66;
  v3 = vnegq_s8(vqtbl2q_s8(v13, (int8x16_t)xmmword_18474E680));
  v4 = (uint16x8_t)vmovl_s8(*(int8x8_t *)v3.i8);
  v5 = vmovl_high_s8(v3);
  v6.i32[0] = 4096;
  v6.i8[0] = BYTE8(xmmword_1ECDC6A70);
  v6.i8[2] = BYTE6(xmmword_1ECDC6A70);
  v6.i16[2] = BYTE5(xmmword_1ECDC6A70);
  v6.i16[3] = BYTE4(xmmword_1ECDC6A70);
  v7 = vandq_s8((int8x16_t)vshrq_n_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vneg_s16(v6)), 0x18uLL), 0x18uLL), (int8x16_t)xmmword_18474E6D0);
  v8 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v4.i8), (int8x16_t)xmmword_18474E6A0), vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v5.i8), (int8x16_t)xmmword_18474E690)), vorrq_s8(vandq_s8((int8x16_t)vmovl_high_u16(v4), (int8x16_t)xmmword_18474E6C0), vandq_s8((int8x16_t)vmovl_high_s16(v5), (int8x16_t)xmmword_18474E6B0)));
  *(int8x8_t *)v8.i8 = vorr_s8(*(int8x8_t *)v8.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
  v9 = v8.i32[0];
  v10 = HIDWORD(v8.i64[0]);
  *(int8x8_t *)v8.i8 = vorr_s8(*(int8x8_t *)v7.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  v11 = v8.i32[0] | v8.i32[1];
  v8.i32[0] = xmmword_1ECDC6A70;
  v8.i32[1] = byte_1ECDC6A6C;
  v13.val[1].i32[0] = v11;
  v13.val[1].i32[1] = (char)-byte_1ECDC6A6B & 0x2000000;
  *(int8x8_t *)v13.val[0].i8 = vorr_s8(*(int8x8_t *)v13.val[1].i8, vand_s8((int8x8_t)vshr_n_s32(vshl_n_s32(vneg_s32(*(int32x2_t *)v8.i8), 0x18uLL), 0x18uLL), (int8x8_t)0x400000008000000));
  return vorr_s8(*(int8x8_t *)v13.val[0].i8, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v13.val[0].i8, 1)).u32[0] | v9 | v2 | v10;
}

void CASetDebugFlags(unsigned int a1, int a2)
{
  char v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  __CFNotificationCenter *LocalCenter;

  if (!a1)
    return;
  if (initialized[0] == -1)
  {
    if ((a1 & 1) != 0)
    {
LABEL_8:
      v4 = a2 & a1 & 1;
      goto LABEL_9;
    }
  }
  else
  {
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
    if ((a1 & 1) != 0)
      goto LABEL_8;
  }
  if (!(_BYTE)ca_debug_options)
    goto LABEL_8;
  v4 = 1;
LABEL_9:
  LOBYTE(ca_debug_options) = v4;
  if ((a1 & 2) != 0 || !BYTE1(ca_debug_options))
    v5 = ((a2 & a1) >> 1) & 1;
  else
    LOBYTE(v5) = 1;
  BYTE1(ca_debug_options) = v5;
  if ((a1 & 4) != 0 || !BYTE2(ca_debug_options))
    v6 = ((a2 & a1) >> 2) & 1;
  else
    LOBYTE(v6) = 1;
  BYTE2(ca_debug_options) = v6;
  if ((a1 & 8) != 0 || !BYTE3(ca_debug_options))
    v7 = ((a2 & a1) >> 3) & 1;
  else
    LOBYTE(v7) = 1;
  BYTE3(ca_debug_options) = v7;
  if ((a1 & 0x10) != 0 || !BYTE4(ca_debug_options))
    v8 = ((a2 & a1) >> 4) & 1;
  else
    LOBYTE(v8) = 1;
  BYTE4(ca_debug_options) = v8;
  if ((a1 & 0x20) != 0 || !BYTE5(ca_debug_options))
    v9 = ((a2 & a1) >> 5) & 1;
  else
    LOBYTE(v9) = 1;
  BYTE5(ca_debug_options) = v9;
  if ((a1 & 0x40) != 0 || !BYTE6(ca_debug_options))
    v10 = ((a2 & a1) >> 6) & 1;
  else
    LOBYTE(v10) = 1;
  BYTE6(ca_debug_options) = v10;
  if ((a1 & 0x80) != 0 || !BYTE7(ca_debug_options))
    v11 = ((a2 & a1) >> 7) & 1;
  else
    LOBYTE(v11) = 1;
  BYTE7(ca_debug_options) = v11;
  if ((a1 & 0x100) != 0 || !BYTE8(ca_debug_options))
    v12 = ((a2 & a1) >> 8) & 1;
  else
    LOBYTE(v12) = 1;
  BYTE8(ca_debug_options) = v12;
  if ((a1 & 0x200) != 0 || !BYTE9(ca_debug_options))
    v13 = ((a2 & a1) >> 9) & 1;
  else
    LOBYTE(v13) = 1;
  BYTE9(ca_debug_options) = v13;
  if ((a1 & 0x400) != 0 || !BYTE10(ca_debug_options))
    v14 = ((a2 & a1) >> 10) & 1;
  else
    LOBYTE(v14) = 1;
  BYTE10(ca_debug_options) = v14;
  if ((a1 & 0x800) != 0 || !BYTE11(ca_debug_options))
    v15 = ((a2 & a1) >> 11) & 1;
  else
    LOBYTE(v15) = 1;
  BYTE11(ca_debug_options) = v15;
  if ((a1 & 0x1000) != 0 || !BYTE12(ca_debug_options))
    v16 = ((a2 & a1) >> 12) & 1;
  else
    LOBYTE(v16) = 1;
  BYTE12(ca_debug_options) = v16;
  if ((a1 & 0x2000) != 0 || !BYTE13(ca_debug_options))
    v17 = ((a2 & a1) >> 13) & 1;
  else
    LOBYTE(v17) = 1;
  BYTE13(ca_debug_options) = v17;
  if ((a1 & 0x4000) != 0 || !BYTE14(ca_debug_options))
    v18 = ((a2 & a1) >> 14) & 1;
  else
    LOBYTE(v18) = 1;
  BYTE14(ca_debug_options) = v18;
  if ((a1 & 0x8000) != 0 || !HIBYTE(ca_debug_options))
    v19 = ((a2 & a1) >> 15) & 1;
  else
    LOBYTE(v19) = 1;
  HIBYTE(ca_debug_options) = v19;
  if ((a1 & 0x10000) != 0 || !byte_1ECDC6A60)
    v20 = ((a2 & a1) >> 16) & 1;
  else
    LOBYTE(v20) = 1;
  byte_1ECDC6A60 = v20;
  if ((a1 & 0x20000) != 0 || !byte_1ECDC6A61)
    v21 = ((a2 & a1) >> 17) & 1;
  else
    LOBYTE(v21) = 1;
  byte_1ECDC6A61 = v21;
  if ((a1 & 0x40000) != 0 || !byte_1ECDC6A62)
    v22 = ((a2 & a1) >> 18) & 1;
  else
    LOBYTE(v22) = 1;
  byte_1ECDC6A62 = v22;
  if ((a1 & 0x80000) != 0 || !byte_1ECDC6A63)
    v23 = ((a2 & a1) >> 19) & 1;
  else
    LOBYTE(v23) = 1;
  byte_1ECDC6A63 = v23;
  if ((a1 & 0x100000) != 0 || !(_BYTE)word_1ECDC6A66)
    v24 = ((a2 & a1) >> 20) & 1;
  else
    LOBYTE(v24) = 1;
  LOBYTE(word_1ECDC6A66) = v24;
  if ((a1 & 0x200000) != 0 || !HIBYTE(word_1ECDC6A66))
    v25 = ((a2 & a1) >> 21) & 1;
  else
    LOBYTE(v25) = 1;
  HIBYTE(word_1ECDC6A66) = v25;
  if ((a1 & 0x400000) != 0 || !byte_1ECDC6A68)
    v26 = ((a2 & a1) >> 22) & 1;
  else
    LOBYTE(v26) = 1;
  byte_1ECDC6A68 = v26;
  if ((a1 & 0x800000) != 0 || !byte_1ECDC6A6A)
    v27 = ((a2 & a1) >> 23) & 1;
  else
    LOBYTE(v27) = 1;
  byte_1ECDC6A6A = v27;
  if ((a1 & 0x2000000) != 0 || !byte_1ECDC6A6B)
    v28 = ((a2 & a1) >> 25) & 1;
  else
    LOBYTE(v28) = 1;
  byte_1ECDC6A6B = v28;
  if ((a1 & 0x4000000) != 0 || !byte_1ECDC6A6C)
    v29 = ((a2 & a1) >> 26) & 1;
  else
    LOBYTE(v29) = 1;
  byte_1ECDC6A6C = v29;
  if ((a1 & 0x8000000) != 0 || !(_BYTE)xmmword_1ECDC6A70)
    v30 = ((a2 & a1) >> 27) & 1;
  else
    LOBYTE(v30) = 1;
  LOBYTE(xmmword_1ECDC6A70) = v30;
  if ((a1 & 0x1000000) != 0 || !BYTE4(xmmword_1ECDC6A70))
    v31 = ((a2 & a1) >> 24) & 1;
  else
    LOBYTE(v31) = 1;
  BYTE4(xmmword_1ECDC6A70) = v31;
  if ((a1 & 0x10000000) != 0 || !BYTE5(xmmword_1ECDC6A70))
    v32 = ((a2 & a1) >> 28) & 1;
  else
    LOBYTE(v32) = 1;
  BYTE5(xmmword_1ECDC6A70) = v32;
  if ((a1 & 0x20000000) != 0 || !BYTE6(xmmword_1ECDC6A70))
    v33 = ((a2 & a1) >> 29) & 1;
  else
    LOBYTE(v33) = 1;
  BYTE6(xmmword_1ECDC6A70) = v33;
  if ((a1 & 0x40000000) != 0 || !BYTE8(xmmword_1ECDC6A70))
    v34 = ((a2 & a1) >> 30) & 1;
  else
    LOBYTE(v34) = 1;
  v35 = 0;
  BYTE8(xmmword_1ECDC6A70) = v34;
  options_are_visual = 0;
  while (!*((_BYTE *)&ca_debug_options + dword_18475EC84[v35]))
  {
    if (++v35 == 39)
      goto LABEL_134;
  }
  options_are_visual = 1;
LABEL_134:
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("kCADebugOptionsDidChange"), 0, 0, 1u);
}

float CAGetDebugValueOSType(unsigned int a1)
{
  return CAGetDebugValueFloat(a1);
}

void CASetDebugValueOSType(unsigned int a1, int a2)
{
  CASetDebugValueFloat(a1, *(float *)&a2);
}

float CADecrementDebugValue(unsigned int a1, float result)
{
  if (a1 <= 0x40)
  {
    result = *(float *)&debug_values[a1];
    if (result > 0.0)
    {
      result = result + -1.0;
      *(float *)&debug_values[a1] = result;
    }
  }
  return result;
}

void *CASetMessageFunction(void *result, uint64_t a2)
{
  x_log_function = result;
  x_log_function_info = a2;
  return result;
}

void CASetLUTFile(const char *a1)
{
  __CFNotificationCenter *LocalCenter;

  free((void *)lut_file);
  lut_file = (uint64_t)strdup(a1);
  ca_debug_lut_changed = 1;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("kCADebugOptionsDidChange"), 0, 0, 1u);
}

uint64_t CAGetLUTFile()
{
  return lut_file;
}

void CASetDebugMessage(char *__source, int a2)
{
  __CFNotificationCenter *LocalCenter;

  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  strlcpy(&debug_message, __source, 0x100uLL);
  debug_message_color = a2;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("kCADebugOptionsDidChange"), 0, 0, 1u);
}

uint64_t CAGetDebugMessageColor()
{
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  return debug_message_color;
}

uint64_t CAGetTransactionCounter()
{
  return CAGetStatsStruct(0)[4];
}

uint64_t CAGetFrameCounter()
{
  return CAGetStatsStruct(0)[5];
}

uint64_t ___ZL26CARecordCurrentDisplayPushj_block_invoke()
{
  uint64_t result;
  pthread_key_t v1[2];

  v1[1] = *MEMORY[0x1E0C80C00];
  v1[0] = 0;
  result = pthread_key_create(v1, (void (__cdecl *)(void *))_ZZZL26CARecordCurrentDisplayPushjEUb_EN3__08__invokeEPv);
  current_display_slot = v1[0];
  return result;
}

uint64_t _ZZZL26CARecordCurrentDisplayPushjEUb_EN3__08__invokeEPv(uint64_t result)
{
  if (result)
    JUMPOUT(0x186DBD990);
  return result;
}

void sub_1846F2AD4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&_all_hosts_lock);
  _Unwind_Resume(a1);
}

uint64_t CA::EDRClient::client(pthread_mutex_t *this)
{
  uint64_t v2;

  if (CADeviceHasBacklight::once != -1)
    dispatch_once(&CADeviceHasBacklight::once, &__block_literal_global_85);
  if (CADeviceHasBacklight::has_backlight != 1)
    return 0;
  pthread_mutex_lock(this);
  v2 = *(unsigned int *)this[2].__opaque;
  if (!(_DWORD)v2 && !this[2].__opaque[8])
  {
    this[2].__opaque[8] = 1;
    pthread_mutex_unlock(this);
    EDRCreateClientForDisplayWithTimeoutAndCallback();
    pthread_mutex_lock(this);
  }
  pthread_mutex_unlock(this);
  return v2;
}

uint64_t ___ZN2CA9EDRClient6clientEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  float v4;

  v3 = *(_QWORD *)(a1 + 32);
  pthread_mutex_lock((pthread_mutex_t *)v3);
  *(_DWORD *)(v3 + 136) = a2;
  *(_BYTE *)(v3 + 144) = 0;
  if (libedr_min_scale_factor_f)
  {
    v4 = libedr_min_scale_factor_f(a2);
    if (v4 > 0.0)
      *(float *)(v3 + 152) = 1.0 / v4;
  }
  return pthread_mutex_unlock((pthread_mutex_t *)v3);
}

uint64_t ___ZN2CA9EDRClient15set_edr_enabledEb_block_invoke(uint64_t a1)
{
  int v2;
  _BOOL4 v3;
  NSObject *v4;
  int v5;
  const char *v6;
  int v7;
  uint8_t buf[4];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(a1 + 36);
  v3 = x_log_hook_p();
  if (v2)
  {
    if (v3)
      goto LABEL_5;
    v4 = x_log_category_utilities;
    if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEBUG))
      return EDREnable();
    v5 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)buf = 67109120;
    v10 = v5;
    v6 = "EDR client %u Enabled\n";
LABEL_10:
    _os_log_impl(&dword_184457000, v4, OS_LOG_TYPE_DEBUG, v6, buf, 8u);
    return EDREnable();
  }
  if (!v3)
  {
    v4 = x_log_category_utilities;
    if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEBUG))
      return EDREnable();
    v7 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)buf = 67109120;
    v10 = v7;
    v6 = "EDR client %u Disabled\n";
    goto LABEL_10;
  }
LABEL_5:
  x_log_();
  return EDREnable();
}

uint64_t ___ZN2CA9EDRClient20set_edr_max_headroomEf_block_invoke()
{
  return EDRRequestDisplayHeadroomLimit();
}

uint64_t ___ZN2CA9EDRClient26set_accessibility_overrideEb_block_invoke(uint64_t a1)
{
  NSObject *v2;
  int v3;
  const char *v4;
  uint8_t buf[4];
  int v7;
  __int16 v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v2 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEBUG))
    {
      v3 = *(_DWORD *)(a1 + 32);
      v4 = "ON";
      if (!*(_BYTE *)(a1 + 36))
        v4 = "OFF";
      *(_DWORD *)buf = 67109378;
      v7 = v3;
      v8 = 2080;
      v9 = v4;
      _os_log_impl(&dword_184457000, v2, OS_LOG_TYPE_DEBUG, "EDR client %u accessibility override %s\n", buf, 0x12u);
    }
  }
  return EDRRequestAccessibilityLimit();
}

void CA::EDRClient::unregister_callback(pthread_mutex_t *this)
{
  if (CADeviceHasBacklight::once != -1)
    dispatch_once(&CADeviceHasBacklight::once, &__block_literal_global_85);
  if (CADeviceHasBacklight::has_backlight == 1 && CA::EDRClient::client(this))
  {
    pthread_mutex_lock(this + 1);
    if (this[2].__opaque[11])
    {
      this[2].__opaque[11] = 0;
      CA::EDRClient::client(this);
      EDRUnregisterCallbackBlock();
    }
    pthread_mutex_unlock(this + 1);
  }
}

uint64_t ___ZN2CA9EDRClient17register_callbackEU13block_pointerFvbfffE_block_invoke(uint64_t a1)
{
  pthread_mutex_t *v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  __n128 v11;
  float v12;

  v2 = *(pthread_mutex_t **)(a1 + 40);
  CA::EDRClient::client(v2);
  EDRGetDisplayHeadroom();
  v4 = v3;
  CA::EDRClient::client(v2);
  EDRGetAmbientIlluminance();
  v6 = v5;
  CA::EDRClient::client(v2);
  EDRGetDisplayMaxLuminance();
  v8 = v7;
  CA::EDRClient::client(v2);
  EDRGetDisplayBacklightBrightness();
  v10 = v9;
  pthread_mutex_lock(v2 + 1);
  if (v2[2].__opaque[11])
  {
    v11.n128_u32[0] = 16.0;
    if (v4 <= 16.0)
      v11.n128_f32[0] = v4;
    if (v11.n128_f32[0] < 1.0)
      v11.n128_f32[0] = 1.0;
    v12 = v6 * 0.318309886;
    (*(void (**)(__n128, float, float))(*(_QWORD *)(a1 + 32) + 16))(v11, (float)(v11.n128_f32[0] * (float)(v8 * v10)) / v4, v12);
  }
  return pthread_mutex_unlock(v2 + 1);
}

BOOL CASupportsFeature(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

float CAFrameRateRangeForVelocity(float a1, char a2)
{
  float v4;
  float *v5;
  float v6;
  float *v8;
  float *v9;
  float *v10;
  uint64_t v11;
  _OWORD v12[6];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((LODWORD(a1) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    return 0.0;
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  if (vfd_table(void)::once[0] != -1)
    dispatch_once(vfd_table(void)::once, &__block_literal_global_9);
  v8 = (float *)v12;
  v9 = (float *)v12;
  v10 = (float *)v12;
  v11 = 5;
  X::small_vector_base<VFDEntry>::append<VFDEntry const*>(&v8, vfd_table(void)::vfd_table[0], off_1EDD0FA60[0]);
  if (v8 == v9)
  {
LABEL_10:
    v6 = 0.0;
  }
  else
  {
    v4 = fabsf(a1);
    v5 = v8;
    while ((a2 & 1) == 0 && *((_BYTE *)v5 + 16) || v4 < *v5)
    {
      v5 += 5;
      if (v5 == v9)
        goto LABEL_10;
    }
    v6 = v5[1];
  }
  if (v8 != v10)
    free(v8);
  return v6;
}

void X::small_vector_base<VFDEntry>::append<VFDEntry const*>(_QWORD *a1, __int128 *a2, __int128 *a3)
{
  __int128 *v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;

  v4 = a2;
  v6 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a3 - (char *)a2) >> 2);
  v7 = a1[1];
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 2);
  if (v6 > a1[3] - v8)
  {
    X::small_vector_base<VFDEntry>::grow((uint64_t)a1, v8 - 0x3333333333333333 * (((char *)a3 - (char *)a2) >> 2));
    v7 = a1[1];
  }
  if (v4 != a3)
  {
    do
    {
      v9 = *v4;
      *(_DWORD *)(v7 + 16) = *((_DWORD *)v4 + 4);
      *(_OWORD *)v7 = v9;
      v7 += 20;
      v4 = (__int128 *)((char *)v4 + 20);
    }
    while (v4 != a3);
    v7 = a1[1];
  }
  a1[1] = v7 + 20 * v6;
}

void X::small_vector_base<VFDEntry>::grow(uint64_t a1, unint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  _DWORD *v13;
  _DWORD *v14;
  char *v15;
  __int128 v16;

  v3 = *(_DWORD **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD **)(a1 + 16);
  v6 = (*(_QWORD *)(a1 + 24) + 1) | ((unint64_t)(*(_QWORD *)(a1 + 24) + 1) >> 1);
  v7 = v6 | (v6 >> 2) | ((v6 | (v6 >> 2)) >> 4);
  v8 = v7 | (v7 >> 8) | ((v7 | (v7 >> 8)) >> 16);
  v9 = v8 | HIDWORD(v8);
  if (v9 + 1 > a2)
    v10 = v9 + 1;
  else
    v10 = a2;
  v11 = (char *)malloc_type_malloc(20 * v10, 0x1000040C46099A0uLL);
  v12 = v11;
  v13 = *(_DWORD **)a1;
  v14 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 != v14)
  {
    v15 = v11;
    do
    {
      v16 = *(_OWORD *)v13;
      *((_DWORD *)v15 + 4) = v13[4];
      *(_OWORD *)v15 = v16;
      v15 += 20;
      v13 += 5;
    }
    while (v13 != v14);
  }
  if (v3 != v5)
    free(*(void **)a1);
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = &v12[v4 - (_QWORD)v3];
  *(_QWORD *)(a1 + 24) = v10;
}

void ___ZL9vfd_tablev_block_invoke()
{
  char *v0;
  char *v1;
  void **v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  int v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  const char *v14;
  float v15;
  const char *v16;
  float v17;
  const char *v18;
  float v19;
  const char *v20;
  float v21;
  void **p_data;
  _BYTE *size;
  BOOL v24;
  char *v25;
  unint64_t v26;
  const char **v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void ***v36;
  void *__p[2];
  _BYTE v38[20];
  char v39;
  __int128 v40;
  char v41;
  __int128 v42;
  char v43;
  __int128 v44;
  char v45;
  int v46;
  void *v47;
  char *v48;
  _OWORD *v49;
  unint64_t v50;
  _OWORD v51[6];
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v52 = 0;
  memset(v51, 0, sizeof(v51));
  v47 = v51;
  v48 = (char *)v51;
  v49 = v51;
  v50 = 5;
  if (CADeviceHasInternalBuild::once != -1)
    dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
  if (CADeviceHasInternalBuild::internal)
  {
    v0 = getenv("CA_VFD_TABLE");
    if (v0)
    {
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)v38 = 0;
      std::string::basic_string[abi:nn180100]<0>(__p, v0);
      v1 = (char *)v38[7];
      v2 = (void **)__p[0];
      if (v38[7] < 0)
        v1 = (char *)__p[1];
      else
        v2 = __p;
      if (!v1)
        goto LABEL_16;
      v3 = 0;
      do
      {
        v4 = *(unsigned __int8 *)v2;
        v2 = (void **)((char *)v2 + 1);
        if (v4 == 58)
          ++v3;
        --v1;
      }
      while (v1);
      if (v3)
      {
        v33 = 0;
        v34 = 0;
        v35 = 0;
        load_dynamic_vfd_table(void)::$_0::operator()(&v33, (std::string *)__p, 0x20u);
        v5 = v33;
        v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - v33) >> 3);
        v7 = v6 == v3;
        v8 = v6 != v3;
        if (v7)
        {
          if (v34 != v33)
          {
            v12 = 0;
            v13 = 0;
            while (1)
            {
              v30 = 0;
              v31 = 0;
              v32 = 0;
              load_dynamic_vfd_table(void)::$_0::operator()((unint64_t *)&v30, (std::string *)(v5 + v12), 0x3Au);
              if (v31 - (_QWORD)v30 != 48)
                break;
              v27 = 0;
              v28 = 0;
              v29 = 0;
              load_dynamic_vfd_table(void)::$_0::operator()((unint64_t *)&v27, v30 + 1, 0x2Cu);
              if (v28 - (_QWORD)v27 != 72)
              {
                v36 = (void ***)&v27;
                std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v36);
                break;
              }
              if ((v30->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v14 = (const char *)v30;
              else
                v14 = (const char *)v30->__r_.__value_.__r.__words[0];
              v15 = strtof(v14, 0);
              if (*((char *)v27 + 23) >= 0)
                v16 = (const char *)v27;
              else
                v16 = *v27;
              v17 = strtof(v16, 0);
              if (*((char *)v27 + 47) >= 0)
                v18 = (const char *)(v27 + 3);
              else
                v18 = v27[3];
              v19 = strtof(v18, 0);
              if (*((char *)v27 + 71) >= 0)
                v20 = (const char *)(v27 + 6);
              else
                v20 = v27[6];
              v21 = strtof(v20, 0);
              p_data = (void **)&v30->__r_.__value_.__l.__data_;
              if (SHIBYTE(v30->__r_.__value_.__r.__words[2]) < 0)
              {
                p_data = (void **)v30->__r_.__value_.__r.__words[0];
                size = (_BYTE *)v30->__r_.__value_.__l.__size_;
              }
              else
              {
                size = (_BYTE *)HIBYTE(v30->__r_.__value_.__r.__words[2]);
              }
              v24 = size[(_QWORD)p_data - 1] == 42;
              v25 = v48;
              v26 = 1 - 0x3333333333333333 * ((v48 - (_BYTE *)v47) >> 2);
              if (v50 < v26)
              {
                X::small_vector_base<VFDEntry>::grow((uint64_t)&v47, v26);
                v25 = v48;
              }
              *(float *)v25 = v15;
              *((float *)v25 + 1) = v17;
              *((float *)v25 + 2) = v19;
              *((float *)v25 + 3) = v21;
              v25[16] = v24;
              v48 = v25 + 20;
              v36 = (void ***)&v27;
              std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v36);
              v27 = (const char **)&v30;
              std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v27);
              ++v13;
              v5 = v33;
              v12 += 24;
              if (v13 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - v33) >> 3))
                goto LABEL_60;
            }
            v27 = (const char **)&v30;
            std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v27);
          }
LABEL_60:
          v9 = 0;
        }
        else
        {
          v9 = 1;
        }
        v30 = (std::string *)&v33;
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v30);
        if ((v38[7] & 0x80) == 0)
          goto LABEL_18;
      }
      else
      {
LABEL_16:
        v9 = 1;
        v8 = 1;
        if ((v38[7] & 0x80) == 0)
          goto LABEL_18;
      }
      operator delete(__p[0]);
LABEL_18:
      if (v9)
        v10 = v8;
      else
        v10 = 1;
      if ((v10 & 1) == 0 && v47 != v49)
        free(v47);
    }
  }
  X::small_vector_base<VFDEntry>::move((uint64_t)&v47);
  if (v47 != v49)
    free(v47);
  if (vfd_table(void)::vfd_table[0] == off_1EDD0FA60[0])
  {
    if (CADeviceIsPhone::once[0] != -1)
      dispatch_once(CADeviceIsPhone::once, &__block_literal_global_134);
    if (CADeviceIsPhone::phone)
    {
      *(_OWORD *)__p = xmmword_18474E6E0;
      v38[0] = 1;
      v11 = xmmword_18474E6F0;
    }
    else
    {
      *(_OWORD *)__p = xmmword_18474E730;
      v38[0] = 1;
      v11 = xmmword_18474E740;
    }
    *(_OWORD *)&v38[4] = v11;
    v39 = 0;
    v40 = xmmword_18474E700;
    v41 = 0;
    v42 = xmmword_18474E710;
    v43 = 0;
    v44 = xmmword_18474E720;
    v45 = 0;
    v47 = v51;
    v48 = (char *)v51;
    v49 = v51;
    v50 = 5;
    X::small_vector_base<VFDEntry>::append<VFDEntry const*>(&v47, (__int128 *)__p, (__int128 *)&v46);
    X::small_vector_base<VFDEntry>::move((uint64_t)&v47);
    if (v47 != v49)
      free(v47);
  }
}

void load_dynamic_vfd_table(void)::$_0::operator()(unint64_t *a1, std::string *__str, unsigned __int8 a3)
{
  std::string::size_type v6;
  int v7;
  std::allocator<std::string> *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string::size_type size;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  int64x2_t v27;
  unint64_t v28;
  std::string *v29;
  int v30;
  std::string v31;
  std::__split_buffer<std::string> v32;
  uint64_t v33;

  v6 = 0;
  v33 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  a1[2] = 0;
  v8 = (std::allocator<std::string> *)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
LABEL_2:
  v9 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((v9 & 0x80u) == 0)
    v10 = __str;
  else
    v10 = (std::string *)__str->__r_.__value_.__r.__words[0];
  v11 = v6;
  if ((v9 & 0x80) != 0)
  {
    while (1)
    {
      size = __str->__r_.__value_.__l.__size_;
      if (v11 > size)
        break;
LABEL_9:
      if (v11 == size || v10->__r_.__value_.__s.__data_[v11] == v7)
      {
        if (v11 > v6)
        {
          std::string::basic_string(&v31, __str, v6, v11 - v6, (std::allocator<char> *)&v32);
          v14 = a1[1];
          v13 = a1[2];
          if (v14 >= v13)
          {
            v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *a1) >> 3);
            v17 = v16 + 1;
            if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *a1) >> 3);
            if (2 * v18 > v17)
              v17 = 2 * v18;
            if (v18 >= 0x555555555555555)
              v19 = 0xAAAAAAAAAAAAAAALL;
            else
              v19 = v17;
            v32.__end_cap_.__value_ = v8;
            if (v19)
              v19 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v19);
            else
              v20 = 0;
            v21 = v19 + 24 * v16;
            v22 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
            *(_QWORD *)(v21 + 16) = *((_QWORD *)&v31.__r_.__value_.__l + 2);
            *(_OWORD *)v21 = v22;
            memset(&v31, 0, sizeof(v31));
            v24 = *a1;
            v23 = a1[1];
            if (v23 == *a1)
            {
              v27 = vdupq_n_s64(v23);
              v25 = v19 + 24 * v16;
            }
            else
            {
              v25 = v19 + 24 * v16;
              do
              {
                v26 = *(_OWORD *)(v23 - 24);
                *(_QWORD *)(v25 - 8) = *(_QWORD *)(v23 - 8);
                *(_OWORD *)(v25 - 24) = v26;
                v25 -= 24;
                *(_QWORD *)(v23 - 16) = 0;
                *(_QWORD *)(v23 - 8) = 0;
                *(_QWORD *)(v23 - 24) = 0;
                v23 -= 24;
              }
              while (v23 != v24);
              v27 = *(int64x2_t *)a1;
            }
            v28 = v21 + 24;
            *a1 = v25;
            a1[1] = v21 + 24;
            *(int64x2_t *)&v32.__begin_ = v27;
            v29 = (std::string *)a1[2];
            a1[2] = v19 + 24 * v20;
            v32.__end_cap_.__value_ = v29;
            v32.__first_ = (std::__split_buffer<std::string>::pointer)v27.i64[0];
            std::__split_buffer<std::string>::~__split_buffer(&v32);
            v30 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
            a1[1] = v28;
            if (v30 < 0)
              operator delete(v31.__r_.__value_.__l.__data_);
          }
          else
          {
            v15 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
            *(_QWORD *)(v14 + 16) = *((_QWORD *)&v31.__r_.__value_.__l + 2);
            *(_OWORD *)v14 = v15;
            a1[1] = v14 + 24;
          }
        }
        v6 = v11 + 1;
        goto LABEL_2;
      }
      ++v11;
      if ((v9 & 0x80) == 0)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v11 <= v9)
      goto LABEL_9;
  }
}

void X::small_vector_base<VFDEntry>::move(uint64_t a1)
{
  __int128 *v2;
  __int128 *v3;
  __int128 *v4;
  __int128 *v5;
  __int128 v6;

  if ((__int128 **)a1 != vfd_table(void)::vfd_table)
  {
    if (vfd_table(void)::vfd_table[0] != off_1EDD0FA68)
      free(vfd_table(void)::vfd_table[0]);
    off_1EDD0FA68 = &xmmword_1EDD0FA78;
    if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 16))
    {
      vfd_table(void)::vfd_table[0] = &xmmword_1EDD0FA78;
      v3 = *(__int128 **)a1;
      off_1EDD0FA60[0] = (__int128 *)((char *)&xmmword_1EDD0FA78 + *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
      v4 = *(__int128 **)(a1 + 8);
      if (v3 != v4)
      {
        v5 = &xmmword_1EDD0FA78;
        do
        {
          v6 = *v3;
          *((_DWORD *)v5 + 4) = *((_DWORD *)v3 + 4);
          *v5 = v6;
          v5 = (__int128 *)((char *)v5 + 20);
          v3 = (__int128 *)((char *)v3 + 20);
        }
        while (v3 != v4);
      }
    }
    else
    {
      v2 = *(__int128 **)(a1 + 8);
      vfd_table(void)::vfd_table[0] = *(__int128 **)a1;
      off_1EDD0FA60[0] = v2;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
    }
    qword_1EDD0FA70 = *(_QWORD *)(a1 + 24);
  }
}

void ___ZL30initialize_velocity_thresholdsv_block_invoke()
{
  uint64_t v0;
  _BYTE *v1;
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE v11[96];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (vfd_table(void)::once[0] != -1)
    dispatch_once(vfd_table(void)::once, &__block_literal_global_9);
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v7 = v11;
  v8 = v11;
  v9 = v11;
  v10 = 5;
  X::small_vector_base<VFDEntry>::append<VFDEntry const*>(&v7, vfd_table(void)::vfd_table[0], off_1EDD0FA60[0]);
  v0 = 0;
  v1 = v7;
  v2 = v8;
  v3 = v7;
  do
  {
    v4 = v3;
    v3 = v2;
    if (v4 != v2)
    {
      while (v4[16] || *((float *)v4 + 3) != flt_18474EA60[v0])
      {
        v4 += 20;
        if (v4 == v2)
        {
          v3 = v2;
          goto LABEL_10;
        }
      }
      *((_DWORD *)&velocity_thresholds + v0) = *(_DWORD *)v4;
      v5 = (char *)&velocity_threshold_frame_rate_ranges + 12 * v0;
      v6 = *(_QWORD *)(v4 + 4);
      *((_DWORD *)v5 + 2) = *((_DWORD *)v4 + 3);
      *(_QWORD *)v5 = v6;
      v3 = v4;
    }
LABEL_10:
    ++v0;
  }
  while (v0 != 4);
  has_velocity_thresholds = v3 != v2;
  if (v1 != v9)
    free(v1);
}

void CA::Render::GainMapLayer::show(CA::Render::GainMapLayer *this, int a2, char a3)
{
  _BOOL4 v6;
  NSObject *v7;
  NSObject *v8;
  char *v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  NSObject *v14;
  uint64_t v15;
  char *v16;
  uint8_t buf[4];
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = x_log_hook_p();
  if ((a3 & 1) != 0)
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      v14 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v14, OS_LOG_TYPE_DEFAULT, "gain-map-layer", buf, 2u);
      }
    }
    if (*((unsigned __int8 *)this + 16) <= 3u)
    {
      if (x_log_hook_p())
      {
LABEL_12:
        x_log_();
        return;
      }
      v15 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v16 = CA::Render::GainMapLayer::show(unsigned int,unsigned int)const::mode_names[*((unsigned __int8 *)this + 16)];
        *(_DWORD *)buf = 136315138;
        v18 = v16;
        v11 = " %s";
        v12 = v15;
        v13 = 12;
        goto LABEL_15;
      }
    }
  }
  else
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_DEFAULT, "(gain-map-layer", buf, 2u);
      }
    }
    if (*((unsigned __int8 *)this + 16) <= 3u)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v8 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v9 = CA::Render::GainMapLayer::show(unsigned int,unsigned int)const::mode_names[*((unsigned __int8 *)this + 16)];
          *(_DWORD *)buf = 136315138;
          v18 = v9;
          _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_DEFAULT, "(mode %s)", buf, 0xCu);
        }
      }
    }
    if (x_log_hook_p())
      goto LABEL_12;
    v10 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v11 = ")";
      v12 = v10;
      v13 = 2;
LABEL_15:
      _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_DEFAULT, v11, buf, v13);
    }
  }
}

_DWORD *CA::Render::GainMapLayer::copy@<X0>(CA::Render::GainMapLayer *this@<X0>, _QWORD *a2@<X8>)
{
  malloc_zone_t *malloc_zone;
  _DWORD *result;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x18uLL, 0x743898A5uLL);
  if (result)
  {
    result[2] = 1;
    result[3] = 19;
    ++dword_1ECDC7C74;
    *(_QWORD *)result = off_1E1596968;
    *((_BYTE *)result + 16) = *((_BYTE *)this + 16);
  }
  *a2 = result;
  return result;
}

double *CA::CG::ShadowStyle::expand_layer_roi(float32x2_t *this, float64x2_t *a2)
{
  double v4;
  double *result;
  float64x2_t v6;
  float64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int32x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v12 = *a2;
  v13 = a2[1];
  v14 = *a2;
  v15 = v13;
  v4 = this[9].f32[1] * -2.8 + -1.0;
  result = CA::BoundsImpl::inset(v14.f64, v4, v4);
  v6 = v15;
  v7 = vsubq_f64(v14, vcvtq_f64_f32(this[10]));
  v8 = vclezq_f64(v13);
  v9 = vclezq_f64(v15);
  v10 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v9, v8), (int8x16_t)vzip2q_s64(v9, v8))));
  if ((v10.i8[4] & 1) == 0)
  {
    if ((v10.i8[0] & 1) != 0)
      return result;
    v11 = vaddq_f64(v7, v15);
    v7 = vminnmq_f64(v12, v7);
    v6 = vsubq_f64(vmaxnmq_f64(vaddq_f64(v12, v13), v11), v7);
    goto LABEL_6;
  }
  if ((v10.i8[0] & 1) == 0)
  {
LABEL_6:
    *a2 = v7;
    a2[1] = v6;
  }
  return result;
}

_DWORD *CA::CG::ShadowStyle::copy(CA::CG::ShadowStyle *this)
{
  malloc_zone_t *malloc_zone;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  __int128 v6;
  __int128 v7;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v3 = malloc_type_zone_malloc(malloc_zone, 0x60uLL, 0x8BB15036uLL);
  v4 = v3;
  if (v3)
  {
    *(_QWORD *)v3 = off_1E1593750;
    v5 = *((_DWORD *)this + 3);
    v3[2] = 0;
    v3[3] = v5;
    *((_QWORD *)v3 + 2) = CGStyleRetain();
    v6 = *(_OWORD *)((char *)this + 56);
    v7 = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)(v4 + 10) = *(_OWORD *)((char *)this + 40);
    *(_OWORD *)(v4 + 6) = v7;
    *(_OWORD *)(v4 + 14) = v6;
    v4[18] = *((_DWORD *)this + 18);
    v4[2] = 1;
    *(_QWORD *)v4 = off_1E15915C8;
    v4[19] = *((_DWORD *)this + 19);
    *((_QWORD *)v4 + 10) = *((_QWORD *)this + 10);
    *((_WORD *)v4 + 44) = *((_WORD *)this + 44);
  }
  return v4;
}

void CA::CG::AccelRenderer::~AccelRenderer(CA::CG::AccelRenderer *this)
{
  CA::CG::AccelRenderer::~AccelRenderer(this);
  JUMPOUT(0x186DBD990);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t j;
  char *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;

  *(_QWORD *)this = &off_1E1591C00;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_QWORD *)this + 319))
    {
      (*(void (**)(_QWORD))(**((_QWORD **)this + 318) + 832))(*((_QWORD *)this + 318));
      *((_QWORD *)this + 319) = 0;
    }
    CA::CG::Renderer::end_rendering(this);
    v3 = *((_QWORD *)this + 1);
    if (v3)
    {
      v4 = mach_absolute_time();
      *(double *)(v3 + 224) = CATimeWithHostTime(v4);
    }
    CA::CG::Renderer::update_finished_seed((uint64_t)this);
    for (i = 0; i != 1152; i += 192)
      CA::OGL::Mosaic::purge((CA::CG::AccelRenderer *)((char *)this + i + 1392));
    for (j = 0; j != 24; ++j)
    {
      v7 = (char *)this + 64 * j;
      v8 = (unsigned int *)*((_QWORD *)v7 + 334);
      if (v8)
      {
        v9 = v8 + 2;
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
      }
      *((_QWORD *)v7 + 334) = 0;
      *((_DWORD *)v7 + 671) = 0;
    }
    v12 = *((_QWORD *)this + 1);
    if (v12)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 224))(v12, 1);
    *((_QWORD *)this + 1) = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v13 = (_QWORD *)*((_QWORD *)this + 530);
  if (v13)
  {
    *v13 = 0;
    *((_QWORD *)this + 530) = 0;
  }
  CA::CG::Renderer::~Renderer(this);
}

BOOL CA::CG::AccelRenderer::attached_to_drawable(CA::CG::AccelRenderer *this, const CA::CG::AccelDrawable *a2)
{
  return *((_QWORD *)this + 533) == (_QWORD)a2;
}

uint64_t CA::CG::AccelRenderer::start_command_buffer(uint64_t this)
{
  if (!*(_DWORD *)(this + 4232))
    return (*(uint64_t (**)(_QWORD, _QWORD, const char *))(**(_QWORD **)(this + 8) + 136))(*(_QWORD *)(this + 8), 0, "whippet");
  return this;
}

void CA::CG::AccelRenderer::will_suspend(CA::CG::AccelRenderer *this, CA::Render::Object *a2, void *a3, void *a4)
{
  if (CA::CG::Queue::queue(void)::once[0] != -1)
    dispatch_once_f(CA::CG::Queue::queue(void)::once, 0, (dispatch_function_t)CA::CG::Queue::create_queue);
  dispatch_sync_f((dispatch_queue_t)CA::CG::Queue::_queue, 0, (dispatch_function_t)CA::CG::AccelRenderer::will_suspend_callback);
}

void CA::CG::AccelRenderer::will_suspend_callback(CA::CG::AccelRenderer *this, void *a2)
{
  uint64_t v2;

  while (1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
    v2 = CA::CG::AccelRenderer::_list;
    if (!CA::CG::AccelRenderer::_list)
      break;
    CA::CG::AccelRenderer::_list = *(_QWORD *)(CA::CG::AccelRenderer::_list + 4272);
    os_unfair_lock_lock((os_unfair_lock_t)(v2 + 4224));
    if (*(_QWORD *)(v2 + 4264))
      CA::CG::AccelRenderer::detach_surface((CFTypeRef *)v2, 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
}

_QWORD *CA::CG::MosaicDelegate_::synchronize(_QWORD *this, unsigned int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = this[1];
  if (*(_DWORD *)(v2 + 156) < a2)
  {
    this = *(_QWORD **)(v2 + 8);
    if (this)
    {
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 416))(this);
      v3 = *(_DWORD *)(v2 + 152);
      *(_DWORD *)(v2 + 152) = v3 + 1;
      *(_DWORD *)(v2 + 156) = v3;
      v4 = *(_QWORD *)(v2 + 8);
      *(_DWORD *)(v4 + 212) = v3 + 1;
      *(_DWORD *)(v4 + 216) = v3;
    }
  }
  return this;
}

char *CA::CG::DrawOp::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  malloc_zone_t *malloc_zone;
  char *v11;
  CGColor *Color;
  __int128 v13;
  __int128 v14;
  malloc_zone_t *v15;
  uint64_t *v16;
  unsigned int *v17;
  unsigned int v18;
  int ShouldAntialias;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  double v24[2];

  v24[1] = *(double *)MEMORY[0x1E0C80C00];
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v11 = (char *)malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
  if (v11)
  {
    Color = (CGColor *)CGStyleGetColor();
    *(_QWORD *)v11 = off_1E1593790;
    v13 = *(_OWORD *)(a1 + 8);
    v14 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(v11 + 40) = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(v11 + 24) = v14;
    *(_OWORD *)(v11 + 8) = v13;
    *((_DWORD *)v11 + 14) = *(_DWORD *)(a1 + 56);
    if (*(_QWORD *)(a1 + 64))
    {
      v15 = (malloc_zone_t *)get_malloc_zone();
      v16 = (uint64_t *)malloc_type_zone_malloc(v15, 0x18uLL, 0x8BB15036uLL);
      if (v16)
        v16 = CA::CG::BasicState::SoftMask::SoftMask(v16);
    }
    else
    {
      v16 = 0;
    }
    *((_QWORD *)v11 + 8) = v16;
    v17 = *(unsigned int **)(a1 + 72);
    if (v17)
    {
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
    }
    *((_QWORD *)v11 + 9) = v17;
    v24[0] = 1.10008428e-19;
    CA::CG::DeviceColor::DeviceColor((double *)v11 + 10, Color, a4, a5, a2, v24);
    ShouldAntialias = CGGStateGetShouldAntialias();
    if (ShouldAntialias)
      ShouldAntialias = CGRenderingStateGetAllowsAntialiasing();
    if (Color)
      v20 = 2114;
    else
      v20 = 2112;
    *((_DWORD *)v11 + 25) = v20 | ShouldAntialias | *(_DWORD *)(a1 + 100) & 0x1100;
    *((_QWORD *)v11 + 13) = 0;
    *(_QWORD *)v11 = off_1E1591088;
    *((_QWORD *)v11 + 18) = a1;
    v21 = (unsigned int *)(a3 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
    *((_QWORD *)v11 + 19) = a3;
  }
  return v11;
}

float16x4_t *CA::CG::DrawOp::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  malloc_zone_t *malloc_zone;
  float16x4_t *result;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = (float16x4_t *)malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
  if (result)
    return CA::CG::DrawFocusRing::DrawFocusRing(result, a2, a1, a4, a5, a3);
  return result;
}

_QWORD *CA::CG::DrawOp::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  malloc_zone_t *malloc_zone;
  _QWORD *v11;
  CGColor *Color;
  unsigned int *v13;
  unsigned int v14;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v11 = malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
  if (v11)
  {
    Color = (CGColor *)CGStyleGetColor();
    CA::CG::DrawOp::DrawOp((uint64_t)v11, a2, a1, a4, a5, Color, 2048);
    *v11 = off_1E15925A8;
    v11[14] = a1;
    v13 = (unsigned int *)(a3 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    v11[15] = a3;
  }
  return v11;
}

_QWORD *CA::CG::DrawOp::styled_op(uint64_t a1, const double *a2, float *a3, uint64_t a4, uint64_t a5)
{
  malloc_zone_t *malloc_zone;
  _QWORD *v11;
  CGColor *Color;
  unsigned int *v13;
  unsigned int v14;
  float v24;
  float v26;
  float v28;
  float v30;
  float v31;
  float v32;
  float v33;

  if ((*(_BYTE *)(a1 + 101) & 0x20) != 0 || *(_QWORD *)(a1 + 80))
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v11 = malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
    if (v11)
    {
      Color = (CGColor *)CGStyleGetColor();
      CA::CG::DrawOp::DrawOp((uint64_t)v11, a2, a1, a4, a5, Color, 2048);
      *v11 = off_1E1592230;
      v11[14] = a1;
      v13 = (unsigned int *)(a3 + 2);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      v11[15] = a3;
    }
  }
  else
  {
    v11 = 0;
    _H0 = *(_WORD *)(a1 + 88);
    _H1 = *(_WORD *)(a1 + 90);
    _H2 = *(_WORD *)(a1 + 92);
    _H3 = *(_WORD *)(a1 + 94);
    __asm { FCVT            S3, H3 }
    v24 = 1.0 / _S3;
    if (_S3 <= 0.0)
      v24 = 0.0;
    __asm { FCVT            S0, H0 }
    v26 = v24 * _S0;
    __asm { FCVT            S1, H1 }
    v28 = v24 * _S1;
    __asm { FCVT            S2, H2 }
    v30 = v24 * _S2;
    v31 = (float)((float)((float)(a3[23] + (float)(a3[19] * v26)) + (float)(a3[20] * v28)) + (float)(a3[21] * v30))
        + (float)(a3[22] * _S3);
    v32 = (float)((float)((float)(a3[28] + (float)(a3[24] * v26)) + (float)(a3[25] * v28)) + (float)(a3[26] * v30))
        + (float)(a3[27] * _S3);
    v33 = (float)((float)((float)(a3[33] + (float)(a3[29] * v26)) + (float)(a3[30] * v28)) + (float)(a3[31] * v30))
        + (float)(a3[32] * _S3);
    _S0 = (float)((float)((float)(a3[38] + (float)(a3[34] * v26)) + (float)(a3[35] * v28)) + (float)(a3[36] * v30))
        + (float)(a3[37] * _S3);
    if (_S0 > 1.0)
      _S0 = 1.0;
    if (_S0 < 0.0)
      _S0 = 0.0;
    _S1 = _S0 * v31;
    _S2 = _S0 * v32;
    _S3 = _S0 * v33;
    __asm
    {
      FCVT            H1, S1
      FCVT            H2, S2
      FCVT            H3, S3
    }
    *(_WORD *)(a1 + 88) = LOWORD(_S1);
    *(_WORD *)(a1 + 90) = LOWORD(_S2);
    __asm { FCVT            H0, S0 }
    *(_WORD *)(a1 + 92) = LOWORD(_S3);
    *(_WORD *)(a1 + 94) = _H0;
  }
  return v11;
}

void CA::CG::DrawOp::draw_shape(CA::CG::DrawOp *this, CA::CG::Renderer *a2)
{
  uint64_t v2;
  CA::Shape *v3;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)a2 + 1);
  v3 = *(CA::Shape **)(*(_QWORD *)(v2 + 232) + 8);
  v4[0] = 0;
  v4[1] = 0;
  CA::OGL::emit_combine(v2, 0, 0, 0, v3, (unsigned int *)v4);
}

void CA::CG::DrawOp::draw_color(CA::CG::DrawOp *this, CA::CG::Renderer *a2)
{
  uint64_t v3;
  CA::Render::Pattern *v4;
  int IsColored;
  char v6;
  uint64_t v7;
  float16x4_t v8;
  float16x4_t *v10;
  float16x4_t v11;
  float64x2_t v12;
  int8x16_t v13;
  int8x16_t v14;
  double v15;
  double v16;
  int Type;
  uint64_t v18;
  CA::Shape *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  double v25;
  double v26;
  double v27;
  double v28;
  float64x2_t v37;
  const double *v38;
  BOOL v41;
  double v42;
  int CachingFlags;
  double v44;
  double v45;
  int32x2_t *v46;
  int32x2_t *v47;
  int32x2_t v48;
  uint32x2_t v49;
  int32x2_t v50;
  uint32x2_t v51;
  int32x2_t v52;
  __int128 v53;
  uint32x2_t v54;
  signed int v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  size_t v59;
  CA::Render *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  CGColorSpace *v64;
  CGColorSpace *v65;
  CGContextRef *v66;
  void *v67;
  CGContext *v68;
  int64x2_t v69;
  CGColorSpace *v70;
  void (*v71)(const void *, void *);
  CA::Render *v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _BOOL4 v76;
  CGColorSpace *Pattern;
  CGColor *v78;
  int32x4_t v79;
  int32x4_t v80;
  int v81;
  int8x16_t v82;
  double v83;
  double v84;
  uint64_t v85;
  double v86;
  double v87;
  void (*v88)(const void *, void *);
  CA::Render::Texture *v89;
  unsigned int *v90;
  _OWORD *v91;
  double *v92;
  _OWORD *v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  const double *v97;
  _BOOL4 v98;
  int32x4_t v99;
  int32x4_t v100;
  CA::ColorProgram::Cache *v101;
  CA::ColorProgram::Cache *v102;
  BOOL v103;
  uint64_t v104;
  char v105;
  BOOL v106;
  int *v107;
  int *v108;
  int *v109;
  int *v110;
  int *v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int64x2_t v116;
  int8x16_t v117;
  double v118;
  double v119;
  double *v120;
  uint64_t v121;
  uint64_t v124;
  int v125;
  unsigned int v126;
  int Tiling;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  char v138;
  int v139;
  double *v140;
  _OWORD *v141;
  _OWORD *v142;
  double *v143;
  char v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int v147;
  void *v148;
  int8x16_t v149;
  int8x16_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  BOOL v154;
  __n128 v155;
  int8x16_t v156;
  int8x16_t v157;
  float64x2_t v158;
  float64x2_t v159;
  void (*v160[2])(const void *, void *);
  _OWORD v161[3];
  float64x2_t v162;
  int8x16_t v163;
  int8x16_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  _OWORD v174[4];
  int8x16_t v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  _QWORD v185[2];
  float32x4_t v186;
  float32x4_t v187[3];
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 10);
  if (!v3)
  {
    v18 = *((_QWORD *)a2 + 1);
    v19 = *(CA::Shape **)(*(_QWORD *)(v18 + 232) + 8);
    v165 = 0uLL;
    CA::OGL::emit_combine(v18, 0, 0, 0, v19, (unsigned int *)&v165);
    return;
  }
  v4 = *(CA::Render::Pattern **)v3;
  IsColored = CGPatternIsColored();
  v6 = IsColored;
  v7 = *((_QWORD *)a2 + 1);
  v8 = *(float16x4_t *)(v3 + 72);
  if (IsColored)
    _ZF = *(_QWORD *)&v8 == 0x3C003C003C003C00;
  else
    _ZF = 0;
  if (!_ZF)
  {
    v10 = *(float16x4_t **)(v7 + 16);
    v11 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16(v10[1]), vcvtq_f32_f16(v8)));
    if (*(_QWORD *)&v10[1] != 0x3C003C003C003C00)
      v8 = v11;
    v10[1] = v8;
  }
  v12 = *(float64x2_t *)(v3 + 8);
  v13 = *(int8x16_t *)(v3 + 24);
  v162 = v12;
  v163 = v13;
  v14 = *(int8x16_t *)(v3 + 40);
  v164 = v14;
  v15 = *((double *)a2 + 10);
  if (v15 != 1.0)
  {
    v12 = vmulq_n_f64(v12, v15);
    v13 = (int8x16_t)vmulq_n_f64((float64x2_t)v13, v15);
    v162 = v12;
    v163 = v13;
    v14 = (int8x16_t)vmulq_n_f64((float64x2_t)v14, v15);
    v164 = v14;
  }
  v153 = (float64x2_t)v14;
  v155 = (__n128)v12;
  v16 = v12.f64[1];
  v150 = vextq_s8(v13, v13, 8uLL);
  v151 = (float64x2_t)v13;
  v149 = vextq_s8(v14, v14, 8uLL);
  Type = CGPatternGetType();
  if (!Type)
  {
    CGPatternGetBounds();
    v21 = v20;
    v23 = v22;
    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 184))(v7, 4);
    CGPatternGetStep();
    v26 = v25;
    v28 = v27;
    CGPatternGetMatrix();
    _D2 = v165.f64[1];
    _D4 = v166.f64[1];
    _V16.D[1] = v151.f64[1];
    __asm
    {
      FMLA            D1, D2, V16.D[1]; double
      FMLA            D3, D4, V16.D[1]; double
    }
    v184 = 0;
    v37 = vmlaq_n_f64(vmlaq_n_f64(v153, (float64x2_t)v155, v167.f64[0]), v151, v167.f64[1]);
    v182 = 0u;
    v183 = 0u;
    v180 = 0u;
    v181 = 0u;
    v178 = 0u;
    v179 = 0u;
    v176 = 0u;
    v177 = 0u;
    v175 = 0u;
    CA::Transform::set_affine((CA::Transform *)&v175, vmlad_n_f64(v165.f64[0] * v155.n128_f64[0], v165.f64[1], v151.f64[0]), _D1, vmlad_n_f64(v166.f64[0] * v155.n128_f64[0], v166.f64[1], v151.f64[0]), _D3, v37.f64[0], v37.f64[1]);
    v41 = v24 < (int)v21 || v24 < (int)v23 || v21 > v26 || v23 > v28;
    if (v41 || (v184 & 0x10) != 0 && !CA::Mat4Impl::mat4_is_rectilinear((CA::Mat4Impl *)&v175, v38))
      goto LABEL_31;
    v42 = *(double *)(v7 + 224);
    if (CGPatternGetImage())
    {
      CachingFlags = CGImageGetCachingFlags();
      v44 = 0.1;
      if (CachingFlags != 1)
        v44 = 1.0;
      v45 = v44 + v42;
    }
    else
    {
      v45 = v42 + 1.0;
    }
    v161[0] = v155;
    v161[1] = v151;
    v161[2] = v153;
    v73 = CA::Render::Pattern::new_pattern(v4, *(CGPattern **)(v7 + 144), (CGColorSpace *)v161, (CGAffineTransform *)0xC, v45);
    if (!v73)
      return;
    v74 = (uint64_t)v73;
    v75 = *((_QWORD *)v73 + 16);
    v76 = *(float *)(v75 + 56) <= 1.0 && CGColorSpaceUsesExtendedRange(*(CGColorSpaceRef *)(v75 + 48));
    v98 = CGColorSpaceUsesITUR_2100TF(*(CGColorSpaceRef *)(v75 + 48));
    if (v98 || v76 || *(float *)(v3 + 80) > 1.0)
    {
      v101 = CA::OGL::Context::color_program_cache((CA::OGL::Context *)v7);
      v102 = v101;
      if (v101)
      {
        v103 = *((_BYTE *)v101 + 65) != 0;
        v154 = *((_BYTE *)v101 + 64) != 0;
        v104 = *((_QWORD *)v101 + 6);
        *((_DWORD *)v101 + 13) = *(_DWORD *)(v75 + 56);
        *((_DWORD *)v101 + 12) = *(_DWORD *)(v3 + 80);
        if (v98)
        {
          v105 = 1;
          *((_BYTE *)v101 + 64) = 1;
        }
        else
        {
          if (v76)
            *((_BYTE *)v101 + 65) = 0;
          v105 = 1;
        }
        v106 = v103;
      }
      else
      {
        v106 = 0;
        v154 = 0;
        v104 = 0;
        v105 = 1;
      }
    }
    else
    {
      v105 = 0;
      v102 = 0;
      v106 = 0;
      v154 = 0;
      v104 = 0;
    }
    v152 = *(float64x2_t *)(v3 + 56);
    *(float64x2_t *)v160 = v152;
    v107 = *(int **)(*((_QWORD *)a2 + 1) + 248);
    if (v107)
    {
      v108 = v107 + 8;
      v109 = v107 + 9;
      v110 = v107 + 10;
      v111 = v107 + 11;
    }
    else
    {
      v108 = (int *)((char *)a2 + 16);
      v109 = (int *)((char *)a2 + 20);
      v110 = (int *)((char *)a2 + 24);
      v111 = (int *)((char *)a2 + 28);
    }
    v112 = *v111;
    v113 = *v110;
    v114 = *v108;
    if (v113 <= v112)
      v115 = v112;
    else
      v115 = v113;
    v99.i32[0] = 1073741822;
    v100.i32[0] = v115;
    v116.i64[0] = v114;
    v116.i64[1] = *v109;
    v117 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v100, v99), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v116));
    v118 = 1.79769313e308;
    if (v115 <= 1073741822)
      v119 = (double)v113;
    else
      v119 = 1.79769313e308;
    if (v115 <= 1073741822)
      v118 = (double)v112;
    v158 = (float64x2_t)v117;
    v159.f64[0] = v119;
    v159.f64[1] = v118;
    memset(v187, 0, sizeof(v187));
    CA::Mat2Impl::mat2_invert((CA::Mat2Impl *)v187, v162.f64, v97);
    CA::Mat2Impl::mat2_apply_to_rect((uint64_t)v187, v158.f64, v120);
    v121 = *(_QWORD *)(v7 + 16);
    _H0 = *(_WORD *)(v121 + 14);
    __asm { FCVT            S0, H0 }
    if (_S0 != 1.0)
      goto LABEL_110;
    v124 = *(_QWORD *)(v74 + 128);
    if (!v124)
      goto LABEL_111;
    if ((*(_BYTE *)(v124 + 13) & 0x10) != 0
      && *(double *)(v74 + 96) <= *(double *)(v74 + 80)
      && *(double *)(v74 + 104) <= *(double *)(v74 + 88))
    {
      LODWORD(v124) = 1;
    }
    else
    {
LABEL_110:
      LODWORD(v124) = 0;
    }
LABEL_111:
    if ((*(_BYTE *)(v121 + 481) & 1) != 0
      && ((v126 = *(unsigned __int8 *)(v121 + 480), v126 < 2) || v126 == 3 && (_DWORD)v124))
    {
      *(_BYTE *)(v121 + 481) &= ~1u;
      v125 = 1;
    }
    else
    {
      v125 = 0;
    }
    Tiling = CGPatternGetTiling();
    v128 = v155.n128_f64[0];
    if (!Tiling)
      goto LABEL_139;
    if ((*(_DWORD *)(v74 + 12) & 0x100) == 0)
      goto LABEL_138;
    v129 = *(double *)(v74 + 16);
    if (v129 < 0.0)
      v129 = -v129;
    v130 = -v155.n128_f64[0];
    if (v155.n128_f64[0] >= 0.0)
      v130 = v155.n128_f64[0];
    if (v129 != v130)
      goto LABEL_138;
    v131 = *(double *)(v74 + 24);
    if (v131 < 0.0)
      v131 = -v131;
    v132 = -v16;
    if (v16 >= 0.0)
      v132 = v16;
    if (v131 != v132)
      goto LABEL_138;
    v133 = *(double *)(v74 + 32);
    if (v133 >= 0.0)
      v134 = *(double *)(v74 + 32);
    else
      v134 = -v133;
    v135 = *(double *)&v150.i64[1];
    if (*(double *)&v150.i64[1] < 0.0)
      v135 = -*(double *)&v150.i64[1];
    if (v134 != v135)
      goto LABEL_138;
    v136 = *(double *)(v74 + 40);
    if (v136 < 0.0)
      v136 = -v136;
    v137 = -*(double *)v150.i64;
    if (*(double *)v150.i64 >= 0.0)
      v137 = *(double *)v150.i64;
    if (v136 == v137)
    {
LABEL_139:
      if ((*(_DWORD *)(v74 + 12) & 0x300) == 0x100)
      {
        if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t, __n128))(*(_QWORD *)v7 + 608))(v7, *(_QWORD *)(v74 + 128), 1, v155))
        {
          v139 = CA::CG::mat2_filter_bits((uint64_t)&v162) | 0x1000;
          if ((*(_DWORD *)(v7 + 416) & 2) != 0)
            v139 ^= 0x800u;
          v140 = (double *)(v139 | ((*(_BYTE *)(*(_QWORD *)(v7 + 16) + 481) & 1) << 8));
          v186 = 0uLL;
          v185[0] = 0;
          v185[1] = 0;
          v141 = CA::OGL::Context::bind_image(v7, 0, *(uint32x2_t **)(v74 + 128), v140, 1u, 1, 1, 0, 0.0, &v186, 0);
          if (v141)
          {
            v142 = v141;
            CA::OGL::pattern_texcoords((float64x2_t *)v74, v186.f32, (uint64_t)v185, v158, v159, v152);
            v173 = 0u;
            memset(v174, 0, 56);
            v171 = 0u;
            v172 = 0u;
            v169 = 0u;
            v170 = 0u;
            v167 = 0u;
            v168 = 0u;
            v165 = 0u;
            v166 = 0u;
            CA::Transform::set_affine((CA::Transform *)&v165, v155.n128_f64[0], v16, *(double *)&v150.i64[1], *(double *)v150.i64, *(double *)&v149.i64[1], *(double *)v149.i64);
            *((_QWORD *)&v174[0] + 1) = &v158;
            *(_QWORD *)&v174[1] = &v165;
            memset((char *)&v174[1] + 12, 0, 28);
            DWORD2(v174[1]) = (_DWORD)v140;
            CA::OGL::fill_rect_tex((CA::OGL::Context *)v7, (uint64_t)v174 + 8, (uint64_t)v185, v143);
            (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v7 + 520))(v7, v142, 0);
          }
          goto LABEL_151;
        }
        v138 = 0;
        v128 = v155.n128_f64[0];
      }
      else
      {
        v138 = 0;
      }
    }
    else
    {
LABEL_138:
      v138 = 1;
    }
    CA::Transform::set_affine((CA::Transform *)&v165, v128, v16, *(double *)&v150.i64[1], *(double *)v150.i64, *(double *)&v149.i64[1], *(double *)v149.i64);
    CA::OGL::fill_pattern_rect(v7, v74, (uint64_t)&v158, (float64x2_t *)v160, (uint64_t)&v165, CA::RectTraits<double>::infinity, 1u, 1, 0.0, 0, v138);
LABEL_151:
    if (v125)
      *(_BYTE *)(*(_QWORD *)(v7 + 16) + 481) |= 1u;
    v144 = v105 ^ 1;
    if (!v102)
      v144 = 1;
    if ((v144 & 1) == 0)
    {
      *((_BYTE *)v102 + 65) = v106;
      *((_BYTE *)v102 + 64) = v154;
      *((_QWORD *)v102 + 6) = v104;
    }
    v145 = (unsigned int *)(v74 + 8);
    do
    {
      v146 = __ldaxr(v145);
      v147 = v146 - 1;
    }
    while (__stlxr(v147, v145));
    if (!v147)
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 16))(v74);
    return;
  }
  if (Type == 1)
  {
    CGPatternGetMatrix();
    v165 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v155, *(double *)v175.i64), v151, *(double *)&v175.i64[1]);
    v166 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v155, *(double *)&v176), v151, *((double *)&v176 + 1));
    v167 = vmlaq_n_f64(vmlaq_n_f64(v153, (float64x2_t)v155, *(double *)&v177), v151, *((double *)&v177 + 1));
    CGPatternGetShading();
    CA::CG::fill_shading((uint64_t)a2);
    return;
  }
LABEL_31:
  v161[0] = 0uLL;
  CA::Shape::get_bounds(*(_QWORD *)(*(_QWORD *)(v7 + 232) + 8), (int *)v161);
  v46 = *(int32x2_t **)(v7 + 248);
  if (v46)
    v47 = v46 + 4;
  else
    v47 = (int32x2_t *)(v7 + 184);
  v48 = *(int32x2_t *)((char *)v161 + 8);
  v49 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)v161 + 8));
  if ((vpmax_u32(v49, v49).u32[0] & 0x80000000) == 0)
  {
    v50 = v47[1];
    v51 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v50);
    if ((vpmax_u32(v51, v51).u32[0] & 0x80000000) != 0
      || (v52 = vadd_s32(*v47, v50),
          *(int32x2_t *)&v53 = vmax_s32(*(int32x2_t *)&v161[0], *v47),
          v48 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&v161[0], *(int32x2_t *)((char *)v161 + 8)), v52), *(int32x2_t *)&v53), v54 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v48), (vpmax_u32(v54, v54).u32[0] & 0x80000000) != 0))
    {
      v48 = 0;
      *((_QWORD *)&v161[0] + 1) = 0;
    }
    else
    {
      *((int32x2_t *)&v53 + 1) = v48;
      v161[0] = v53;
    }
  }
  v55 = v48.i32[0];
  v56 = v48.u32[1];
  if (v48.i32[0] >= v48.i32[1])
    v57 = v48.i32[1];
  else
    v57 = v48.i32[0];
  if (v57 >= 1)
  {
    v58 = CA::Render::format_rowbytes((CA::Render *)1, v48.u32[0]);
    v59 = v58;
    *(_QWORD *)&v158.f64[0] = v58;
    v60 = is_mul_ok(v58, v56) ? (CA::Render *)(v58 * v56) : 0;
    v160[0] = 0;
    v61 = CA::Render::aligned_malloc(v60, (unint64_t *)v160, 0);
    if (v61)
    {
      v62 = v61;
      v63 = *((_QWORD *)a2 + 1);
      if (v63)
        v64 = *(CGColorSpace **)(v63 + 144);
      else
        v64 = 0;
      if (CGColorSpaceGetModel(v64))
        v65 = *(CGColorSpace **)(v7 + 144);
      else
        v65 = (CGColorSpace *)CAGetColorSpace(0x1Du);
      v66 = (CGContextRef *)CAGetCachedCGBitmapContext_(v62, v55, v56, 1u, v59, v65);
      if (v66 && (v68 = v66[2]) != 0)
      {
        CGContextTranslateCTM(v66[2], (double)-LODWORD(v161[0]), (double)-DWORD1(v161[0]));
        v69.i64[0] = SLODWORD(v161[0]);
        v69.i64[1] = SDWORD1(v161[0]);
        v156 = (int8x16_t)vcvtq_f64_s64(v69);
        CGContextSetBaseCTM();
        CGContextSetCompositeOperation();
        CGContextSetPatternPhase(v68, *(CGSize *)(v3 + 56));
        if ((v6 & 1) != 0)
          v70 = 0;
        else
          v70 = (CGColorSpace *)CAGetColorSpace(0x1Du);
        Pattern = CGColorSpaceCreatePattern(v70);
        v78 = CGColorCreateWithPattern(Pattern, v4, CA::CG::fill_pattern(CA::CG::Renderer &,CA::CG::DeviceColor::Pattern *)::components);
        CGColorSpaceRelease(Pattern);
        CGContextSetFillColorWithColor(v68, v78);
        CGColorRelease(v78);
        if (v55 <= (int)v56)
          v81 = v56;
        else
          v81 = v55;
        v79.i32[0] = 1073741822;
        v80.i32[0] = v81;
        v82 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v80, v79), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), v156);
        if (v81 <= 1073741822)
          v83 = (double)v55;
        else
          v83 = 1.79769313e308;
        if (v81 <= 1073741822)
          v84 = (double)(int)v56;
        else
          v84 = 1.79769313e308;
        v85 = v82.i64[1];
        v157 = v82;
        v86 = v83;
        v87 = v84;
        CGContextFillRect(v68, *(CGRect *)v82.i8);
        CAReleaseCachedCGContext(v68);
        v88 = v160[0];
        v89 = CA::Render::Image::new_image((CA::Render::Image *)1, v55, v56, 1u, *(CGColorSpace **)(v7 + 144), (CGColorSpace *)v62, (unint64_t *)&v158, (const unint64_t *)CA::Render::aligned_free, v160[0], v148);
        if (v89)
        {
          v90 = (unsigned int *)v89;
          v187[0] = 0uLL;
          v91 = CA::OGL::Context::bind_image(v7, 0, (uint32x2_t *)v89, (double *)0x100, 0, 0, 0, 0, 0.0, v187, 0);
          if (v91)
          {
            v93 = v91;
            v175 = v157;
            *(double *)&v176 = v83;
            *((double *)&v176 + 1) = v84;
            *(_QWORD *)&v165.f64[0] = &v175;
            *(_QWORD *)&v165.f64[1] = &CA::identity_transform;
            v166 = 0u;
            v167 = 0u;
            CA::OGL::fill_rect_tex((CA::OGL::Context *)v7, (uint64_t)&v165, (uint64_t)v187, v92);
            (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v7 + 520))(v7, v93, 0);
          }
          v94 = v90 + 2;
          do
          {
            v95 = __ldaxr(v94);
            v96 = v95 - 1;
          }
          while (__stlxr(v96, v94));
          if (!v96)
            (*(void (**)(unsigned int *))(*(_QWORD *)v90 + 16))(v90);
          return;
        }
        v72 = (CA::Render *)v62;
        v71 = v88;
      }
      else
      {
        v71 = v160[0];
        v72 = (CA::Render *)v62;
      }
      CA::Render::aligned_free(v72, (size_t)v71, v67);
    }
  }
}

uint64_t CA::CG::DrawOp::render_alpha(CA::CG::DrawOp *this, CA::CG::Renderer *a2, int a3)
{
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  char v20;
  uint64_t v21;
  BOOL v22;
  _WORD *v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  _WORD *v30;
  _OWORD v31[4];
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a2 + 1);
  v7 = (*(uint64_t (**)(CA::CG::DrawOp *))(*(_QWORD *)this + 128))(this);
  v8 = (*(uint64_t (**)(CA::CG::DrawOp *, CA::CG::Renderer *))(*(_QWORD *)this + 136))(this, a2);
  v9 = v8;
  if (a3)
  {
    v10 = *((_WORD *)this + 44);
    v11 = *((_WORD *)this + 45);
    v12 = *((_WORD *)this + 46);
    v13 = *((_WORD *)this + 47);
  }
  else
  {
    v10 = 15360;
    v11 = 15360;
    v12 = 15360;
    v13 = 15360;
  }
  *(_BYTE *)(*(_QWORD *)(v6 + 16) + 481) &= ~1u;
  if (v8 & 2 | v7 & 1)
  {
    v32 = 0;
    memset(&v31[2], 0, 32);
    memset(v31, 0, 32);
    v17 = *(_QWORD *)(v6 + 232);
    *(_OWORD *)((char *)v31 + 8) = *(_OWORD *)(v17 + 8);
    v18 = *(_QWORD *)(v17 + 32);
    *((_QWORD *)&v31[1] + 1) = *(_QWORD *)(v17 + 24);
    *(_QWORD *)&v31[2] = v18;
    *(_OWORD *)((char *)&v31[2] + 8) = *(_OWORD *)(v17 + 40);
    *((_QWORD *)&v31[3] + 1) = *(_QWORD *)(v17 + 56);
    v19 = *(_WORD *)(v17 + 68);
    LODWORD(v32) = *(_DWORD *)(v17 + 64);
    HIDWORD(v32) = v19 & 0x100 | 0xF;
    *(_QWORD *)&v31[0] = CA::OGL::Context::set_gstate(v6, (uint64_t)v31);
    if ((v7 & 2) != 0)
    {
      if ((v7 & 1) != 0)
        v20 = 18;
      else
        v20 = 12;
      v21 = *(_QWORD *)(v6 + 16);
      *(_BYTE *)(v21 + 480) = v20;
      *(_BYTE *)(v21 + 481) |= 1u;
    }
    v22 = (v7 & 1 | v9 & 3) == 0;
    v23 = *(_WORD **)(v6 + 16);
    if (v22)
      v24 = v10;
    else
      v24 = 15360;
    if (v22)
      v25 = v11;
    else
      v25 = 15360;
    if (v22)
      v26 = v12;
    else
      v26 = 15360;
    if (v22)
      v27 = v13;
    else
      v27 = 15360;
    v28 = 160;
    if (v22)
      v28 = 176;
    v23[4] = v24;
    v23[5] = v25;
    v23[6] = v26;
    v23[7] = v27;
    (*(void (**)(CA::CG::DrawOp *, CA::CG::Renderer *))(*(_QWORD *)this + v28))(this, a2);
    *(_BYTE *)(*(_QWORD *)(v6 + 16) + 481) |= 1u;
    v29 = WORD2(v32);
    if ((v7 & 2) != 0)
      *(_BYTE *)(*(_QWORD *)(v6 + 16) + 480) = BYTE4(v32);
    WORD2(v32) = v29 | 0x400;
    if (!v22)
    {
      v30 = *(_WORD **)(v6 + 16);
      v30[4] = v10;
      v30[5] = v11;
      v30[6] = v12;
      v30[7] = v13;
      (*(void (**)(CA::CG::DrawOp *, CA::CG::Renderer *))(*(_QWORD *)this + 168))(this, a2);
      *(_BYTE *)(*(_QWORD *)(v6 + 16) + 481) |= 1u;
    }
    return CA::OGL::Context::set_gstate(v6, **(_QWORD **)(v6 + 232));
  }
  else
  {
    v14 = *(_WORD **)(v6 + 16);
    v14[4] = v10;
    v14[5] = v11;
    v14[6] = v12;
    v14[7] = v13;
    if ((v7 & 2) != 0)
    {
      v15 = *(_QWORD *)(v6 + 16);
      *(_BYTE *)(v15 + 480) = 12;
      *(_BYTE *)(v15 + 481) |= 1u;
    }
    result = (*(uint64_t (**)(CA::CG::DrawOp *, CA::CG::Renderer *))(*(_QWORD *)this + 176))(this, a2);
    *(_BYTE *)(*(_QWORD *)(v6 + 16) + 481) |= 1u;
  }
  return result;
}

void CA::CG::DrawOp::shape_line_width(uint64_t a1, const double *a2, double a3)
{
  __int128 v3;
  _OWORD v4[3];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C9DB10] != a3 && a3 > 0.0 && (*(_BYTE *)(a1 + 100) & 4) != 0)
  {
    v3 = *(_OWORD *)(a1 + 24);
    v4[0] = *(_OWORD *)(a1 + 8);
    v4[1] = v3;
    v4[2] = *(_OWORD *)(a1 + 40);
    CA::Mat2Impl::mat2_get_scale_2d((CA::Mat2Impl *)v4, a2);
  }
}

_QWORD *std::__deque_iterator<std::pair<unsigned long long,unsigned long long>,std::pair<unsigned long long,unsigned long long>*,std::pair<unsigned long long,unsigned long long>&,std::pair<unsigned long long,unsigned long long>**,long,256l>::operator+[abi:nn180100](_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
  {
    v3 = a3 + ((a2 - *result) >> 4);
    if (v3 < 1)
      result -= (unint64_t)(255 - v3) >> 8;
    else
      result += (unint64_t)v3 >> 8;
  }
  return result;
}

char **std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::pair<unsigned long long,unsigned long long> *,std::__deque_iterator<std::pair<unsigned long long,unsigned long long>,std::pair<unsigned long long,unsigned long long> *,std::pair<unsigned long long,unsigned long long>&,std::pair<unsigned long long,unsigned long long> **,long,256l>,0>(char **result, char *a2, char *a3, char *a4, char *a5)
{
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  char *v10;

  if (a2 == a3)
  {
    a3 = a2;
  }
  else
  {
    v5 = *(_QWORD **)a4;
    while (1)
    {
      v6 = (char *)(v5 + 512);
      if ((a3 - a2) >> 4 >= (v6 - a5) >> 4)
        v7 = (v6 - a5) >> 4;
      else
        v7 = (a3 - a2) >> 4;
      if (v7)
      {
        v8 = &a2[16 * v7];
        do
        {
          *(_QWORD *)a5 = *(_QWORD *)a2;
          *((_QWORD *)a5 + 1) = *((_QWORD *)a2 + 1);
          a5 += 16;
          a2 += 16;
        }
        while (a2 != v8);
        a2 = v8;
      }
      if (a2 == a3)
        break;
      v9 = (_QWORD *)*((_QWORD *)a4 + 1);
      a4 += 8;
      v5 = v9;
      a5 = (char *)v9;
    }
    if (v6 == a5)
    {
      v10 = (char *)*((_QWORD *)a4 + 1);
      a4 += 8;
      a5 = v10;
    }
  }
  *result = a3;
  result[1] = a4;
  result[2] = a5;
  return result;
}

_QWORD *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::pair<unsigned long long,unsigned long long> *,std::__deque_iterator<std::pair<unsigned long long,unsigned long long>,std::pair<unsigned long long,unsigned long long> *,std::pair<unsigned long long,unsigned long long>&,std::pair<unsigned long long,unsigned long long> **,long,256l>,0>(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 == a3)
  {
    a3 = a2;
  }
  else
  {
    v5 = *a4;
    v6 = a3;
    while (1)
    {
      if ((v6 - a2) >> 4 >= (a5 - v5) >> 4)
        v7 = (a5 - v5) >> 4;
      else
        v7 = (v6 - a2) >> 4;
      if (v7)
      {
        v8 = (uint64_t *)(v6 - 8);
        v9 = -16 * v7;
        do
        {
          *(_QWORD *)(a5 - 16) = *(v8 - 1);
          a5 -= 16;
          v10 = *v8;
          v8 -= 2;
          *(_QWORD *)(a5 + 8) = v10;
          v9 += 16;
        }
        while (v9);
      }
      v6 -= 16 * v7;
      if (v6 == a2)
        break;
      v11 = *--a4;
      v5 = v11;
      a5 = v11 + 4096;
    }
    if (v5 + 4096 == a5)
    {
      v12 = a4[1];
      ++a4;
      a5 = v12;
    }
  }
  *result = a3;
  result[1] = a4;
  result[2] = a5;
  return result;
}

void CATailspinEmit(uint64_t a1, uint64_t a2, char a3, uint64_t a4, const char *a5)
{
  void *v9;
  uint64_t v10;
  double v11;
  mach_port_name_t ServerPort;
  void *v13;
  void *v14;
  const __CFString *v15;
  uint64_t v16;
  NSString *v17;
  FILE *v18;
  FILE *v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  dispatch_time_t v23;
  NSObject *v24;
  dispatch_time_t v25;
  dispatch_time_t v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  id v31;
  __int128 block;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  _QWORD v39[4];
  _QWORD v40[5];

  v40[4] = *MEMORY[0x1E0C80C00];
  if (a4)
    v9 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a4), "lastPathComponent");
  else
    v9 = 0;
  v10 = mach_absolute_time();
  v11 = CATimeWithHostTime(v10);
  if (emit_tailspin(NSString *,unsigned int,unsigned int,int,unsigned int,char const*)::onceToken != -1)
    dispatch_once(&emit_tailspin(NSString *,unsigned int,unsigned int,int,unsigned int,char const*)::onceToken, &__block_literal_global_14991);
  if (emit_tailspin(NSString *,unsigned int,unsigned int,int,unsigned int,char const*)::show_HUD)
    ServerPort = CARenderServerGetServerPort(0);
  else
    ServerPort = 0;
  v13 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v14 = v13;
  if ((a3 & 1) != 0)
    objc_msgSend(v13, "appendFormat:", CFSTR("Force Triggered: "));
  if ((a3 & 2) != 0)
  {
    objc_msgSend(v14, "appendFormat:", CFSTR("Long Render Interval with update seed 0x%x"), a2);
    v15 = CFSTR("LongRenderInterval");
    if ((a3 & 4) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
  v15 = CFSTR("Unknown");
  if ((a3 & 4) != 0)
  {
LABEL_15:
    objc_msgSend(v14, "appendFormat:", CFSTR("Long Commit from %s [%d]"), objc_msgSend(v9, "UTF8String"), 0xFFFFFFFFLL);
    v15 = CFSTR("LongCommit");
  }
LABEL_16:
  if ((a3 & 8) != 0)
  {
    objc_msgSend(v14, "appendFormat:", CFSTR("Long frame latency at swap 0x%x"), a1);
    v15 = CFSTR("LongFrameLatency");
    if ((a3 & 0x10) == 0)
    {
LABEL_18:
      if ((a3 & 0x20) == 0)
        goto LABEL_19;
      goto LABEL_29;
    }
  }
  else if ((a3 & 0x10) == 0)
  {
    goto LABEL_18;
  }
  objc_msgSend(v14, "appendFormat:", CFSTR("Glitch at swap 0x%x, update_seed 0x%x with long pole process name %@"), a1, a2, v9);
  v15 = CFSTR("Glitch");
  if ((a3 & 0x20) == 0)
  {
LABEL_19:
    if ((a3 & 0x40) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_29:
  objc_msgSend(v14, "appendFormat:", CFSTR("First frame glitch at swap 0x%x, update_seed 0x%x with long pole process name %@"), a1, a2, v9);
  v15 = CFSTR("FirstFrameGlitch");
  if ((a3 & 0x40) != 0)
  {
LABEL_20:
    objc_msgSend(v14, "appendFormat:", CFSTR("Skip requested glitch at swap 0x%x, update_seed 0x%x with long pole process name %@"), a1, a2, v9);
    v15 = CFSTR("SkipRequestedGlitch");
  }
LABEL_21:
  v39[0] = CFSTR("type");
  v39[1] = CFSTR("longPoleProcessName");
  v40[0] = v15;
  v40[1] = v9;
  v39[2] = CFSTR("swapID");
  v40[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1);
  v39[3] = CFSTR("updateSeed");
  v40[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a2);
  v16 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v40, v39, 4);
  if (!a5)
  {
    v26 = dispatch_time(0, 100000000);
    if (ca_tailspin_request_queue(void)::once[0] != -1)
      dispatch_once(ca_tailspin_request_queue(void)::once, &__block_literal_global_65);
    v24 = ca_tailspin_request_queue(void)::ws_hitches_tailspin_request_queue;
    *(_QWORD *)&block = MEMORY[0x1E0C809B0];
    *((_QWORD *)&block + 1) = 3221225472;
    v33 = ___ZL13emit_tailspinP8NSStringjjijPKc_block_invoke_62;
    v34 = &unk_1E15AAE28;
    v35 = (uint64_t)v14;
    v36 = v16;
    v25 = v26;
    goto LABEL_34;
  }
  v17 = -[NSString stringByAppendingPathComponent:](NSTemporaryDirectory(), "stringByAppendingPathComponent:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("layer-dump-%f.txt"), *(_QWORD *)&v11));
  v18 = fopen(-[NSString UTF8String](v17, "UTF8String"), "wb");
  if (v18)
  {
    v19 = v18;
    v20 = strlen(a5);
    fwrite(a5, 1uLL, v20, v19);
    fclose(v19);
    v31 = 0;
    v21 = objc_msgSend(objc_alloc(MEMORY[0x1E0D1D250]), "initWithPath:transferOwnership:errorOut:", v17, 1, &v31);
    if (v21)
    {
      v22 = v21;
      v23 = dispatch_time(0, 100000000);
      if (ca_tailspin_request_queue(void)::once[0] != -1)
        dispatch_once(ca_tailspin_request_queue(void)::once, &__block_literal_global_65);
      v24 = ca_tailspin_request_queue(void)::ws_hitches_tailspin_request_queue;
      *(_QWORD *)&block = MEMORY[0x1E0C809B0];
      *((_QWORD *)&block + 1) = 3221225472;
      v33 = ___ZL13emit_tailspinP8NSStringjjijPKc_block_invoke_2;
      v34 = &unk_1E15AAE00;
      v35 = v22;
      v36 = (uint64_t)v14;
      v37 = v16;
      v38 = a5;
      v25 = v23;
LABEL_34:
      dispatch_after(v25, v24, &block);
      goto LABEL_45;
    }
    if (x_log_hook_p())
    {
      objc_msgSend((id)objc_msgSend(v31, "localizedDescription"), "UTF8String");
      goto LABEL_39;
    }
    v27 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
    {
      v29 = objc_msgSend((id)objc_msgSend(v31, "localizedDescription"), "UTF8String");
      LODWORD(block) = 136315138;
      *(_QWORD *)((char *)&block + 4) = v29;
      v28 = "Diagnostics (tailspin) failed to create client log with error: %s";
      goto LABEL_44;
    }
  }
  else
  {
    if (x_log_hook_p())
    {
      -[NSString UTF8String](v17, "UTF8String");
LABEL_39:
      x_log_();
      goto LABEL_45;
    }
    v27 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
    {
      LODWORD(block) = 136315138;
      *(_QWORD *)((char *)&block + 4) = -[NSString UTF8String](v17, "UTF8String");
      v28 = "Diagnostics (tailspin) failed to create layer tree file at %s";
LABEL_44:
      _os_log_impl(&dword_184457000, v27, OS_LOG_TYPE_ERROR, v28, (uint8_t *)&block, 0xCu);
    }
  }
LABEL_45:
  if (ServerPort)
  {
    if (CADeviceHasInternalBuild::once != -1)
      dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
    if (CADeviceHasInternalBuild::internal)
    {
      v30 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Frametracer - %@"), v15);
      if ((CA::Render::Server::add_callback(1, (uint64_t)emit_tailspin(NSString *,unsigned int,unsigned int,int,unsigned int,char const*)::$_0::__invoke, (uint64_t)v30, 0.0) & 1) == 0)v30;
    }
    if (ServerPort != -1)
    {
      CA::Render::Server::add_callback(0, (uint64_t)emit_tailspin(NSString *,unsigned int,unsigned int,int,unsigned int,char const*)::$_1::__invoke, 0, 0.0);
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], ServerPort);
    }
  }
}

void ___ZL13emit_tailspinP8NSStringjjijPKc_block_invoke_2(uint64_t a1)
{
  char v2;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  v3[0] = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v3, 1);
  v2 = DRTailspinRequestWithLogs();

  ca_tailspin_log_request_result(v2, *(_QWORD *)(a1 + 56) != 0, 0);
}

void ___ZL13emit_tailspinP8NSStringjjijPKc_block_invoke_62()
{
  char v0;

  v0 = DRTailspinRequest();
  ca_tailspin_log_request_result(v0, 0, 0);
}

void emit_tailspin(NSString *,unsigned int,unsigned int,int,unsigned int,char const*)::$_0::__invoke(void *a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x186DBE2E4]();
  CASetDebugMessage((char *)objc_msgSend(a1, "UTF8String"), 16711935);

  objc_autoreleasePoolPop(v2);
}

void emit_tailspin(NSString *,unsigned int,unsigned int,int,unsigned int,char const*)::$_1::__invoke()
{
  CASetDebugMessage("", 0);
}

void ca_tailspin_log_request_result(char a1, int a2, NSError *a3)
{
  _BOOL4 v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t buf[4];
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v6 = x_log_hook_p();
  if (!a3 || (a1 & 1) != 0)
  {
    if (v6)
      goto LABEL_6;
    v11 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_INFO))
    {
      v12 = ".";
      if (a2)
        v12 = " with layer-tree log";
      *(_DWORD *)buf = 136315138;
      v14 = v12;
      v8 = "Diagnostics (tailspin) request successful%s";
      v9 = v11;
      v10 = OS_LOG_TYPE_INFO;
      goto LABEL_13;
    }
  }
  else
  {
    if (v6)
    {
      -[NSString UTF8String](-[NSError localizedDescription](a3, "localizedDescription"), "UTF8String");
LABEL_6:
      x_log_();
      return;
    }
    v7 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v14 = -[NSString UTF8String](-[NSError localizedDescription](a3, "localizedDescription"), "UTF8String");
      v8 = "Diagnostics (tailspin) request failed with the error: %s.";
      v9 = v7;
      v10 = OS_LOG_TYPE_ERROR;
LABEL_13:
      _os_log_impl(&dword_184457000, v9, v10, v8, buf, 0xCu);
    }
  }
}

dispatch_queue_t ___ZL25ca_tailspin_request_queuev_block_invoke()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("com.apple.coreanimation.TailspinRequest", 0);
  ca_tailspin_request_queue(void)::ws_hitches_tailspin_request_queue = (uint64_t)result;
  return result;
}

uint64_t ___ZL13emit_tailspinP8NSStringjjijPKc_block_invoke()
{
  uint64_t result;

  result = CFPreferencesGetAppBooleanValue(CFSTR("FrameTracerHUD"), CFSTR("com.apple.coreanimation"), 0);
  emit_tailspin(NSString *,unsigned int,unsigned int,int,unsigned int,char const*)::show_HUD = result;
  return result;
}

void CAUpdateEarliestTailspinEmissionTime(int a1)
{
  uint64_t v2;
  double v3;

  v2 = mach_absolute_time();
  v3 = CATimeWithHostTime(v2);
  if (a1 == 1 || a1 == 2 && arc4random_uniform(0x64u) <= 0x54)
    *(double *)&CATailspinMinimumTimestamp = v3 + 10.0;
}

void CA::Render::DistanceFieldLayer::~DistanceFieldLayer(CA::Render::DistanceFieldLayer *this, const CA::Render::Object *a2)
{
  --dword_1ECDC7C58;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

{
  malloc_zone_t *malloc_zone;

  --dword_1ECDC7C58;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void *CA::Render::DistanceFieldLayer::encode(CA::Render::DistanceFieldLayer *this, CA::Render::Encoder *a2)
{
  void *result;
  int v5;
  _BYTE *v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = CA::Render::Object::encode(this, a2);
  v5 = *((_DWORD *)this + 4);
  v6 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v6 + 1) > *((_QWORD *)a2 + 5))
  {
    result = CA::Render::Encoder::grow(a2, 1);
    v6 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = v6 + 1;
  *v6 = v5;
  v7 = *((_DWORD *)this + 5);
  v8 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v8 + 1) > *((_QWORD *)a2 + 5))
  {
    result = CA::Render::Encoder::grow(a2, 4);
    v8 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v8 = v7;
  v9 = *((_QWORD *)a2 + 4);
  v10 = *((_QWORD *)a2 + 5);
  v11 = v9 + 4;
  *((_QWORD *)a2 + 4) = v9 + 4;
  if (v9 + 16 > v10)
  {
    result = CA::Render::Encoder::grow(a2, 12);
    v11 = *((_QWORD *)a2 + 4);
  }
  v12 = *((_QWORD *)this + 3);
  *(_DWORD *)(v11 + 8) = *((_DWORD *)this + 8);
  *(_QWORD *)v11 = v12;
  *((_QWORD *)a2 + 4) += 12;
  return result;
}

void CA::Render::DistanceFieldLayer::show(CA::Render::DistanceFieldLayer *this, int a2, char a3)
{
  _BOOL4 v6;
  NSObject *v7;
  unsigned int v8;
  char *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  double v15;
  NSObject *v16;
  double v17;
  NSObject *v18;
  double v19;
  NSObject *v20;
  const char *v21;
  uint8_t buf[4];
  double v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = x_log_hook_p();
  if ((a3 & 1) != 0)
  {
    if (v6)
    {
      x_log_();
      return;
    }
    v20 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v21 = "distance-field-layer";
      goto LABEL_40;
    }
  }
  else
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_DEFAULT, "(distance-field-layer", buf, 2u);
      }
    }
    v8 = *((_DWORD *)this + 4) - 1;
    if (v8 <= 3)
    {
      v9 = off_1E15AAE70[v8];
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v10 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v23 = *(double *)&v9;
          _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_DEFAULT, "(renderMode %s)", buf, 0xCu);
        }
      }
    }
    if ((*((_BYTE *)this + 13) & 1) != 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v11 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v11, OS_LOG_TYPE_DEFAULT, "(invertsShape true)", buf, 2u);
        }
      }
    }
    if (*((_DWORD *)this + 5))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v12 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v13 = *((_DWORD *)this + 5);
          *(_DWORD *)buf = 67109120;
          LODWORD(v23) = v13;
          _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_DEFAULT, "(foregroundColor #%08x)", buf, 8u);
        }
      }
    }
    if (*((float *)this + 7) != 0.0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v14 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v15 = *((float *)this + 7);
          *(_DWORD *)buf = 134217984;
          v23 = v15;
          _os_log_impl(&dword_184457000, v14, OS_LOG_TYPE_DEFAULT, "(offset %g)", buf, 0xCu);
        }
      }
    }
    if (*((float *)this + 8) != 0.0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v16 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v17 = *((float *)this + 8);
          *(_DWORD *)buf = 134217984;
          v23 = v17;
          _os_log_impl(&dword_184457000, v16, OS_LOG_TYPE_DEFAULT, "(sharpness %g)", buf, 0xCu);
        }
      }
    }
    if (*((float *)this + 6) != 0.0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v18 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v19 = *((float *)this + 6);
          *(_DWORD *)buf = 134217984;
          v23 = v19;
          _os_log_impl(&dword_184457000, v18, OS_LOG_TYPE_DEFAULT, "(lineWidth %g)", buf, 0xCu);
        }
      }
    }
    if (x_log_hook_p())
    {
      x_log_();
      return;
    }
    v20 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v21 = ")";
LABEL_40:
      _os_log_impl(&dword_184457000, v20, OS_LOG_TYPE_DEFAULT, v21, buf, 2u);
    }
  }
}

_DWORD *CA::Render::DistanceFieldLayer::copy@<X0>(CA::Render::DistanceFieldLayer *this@<X0>, _QWORD *a2@<X8>)
{
  malloc_zone_t *malloc_zone;
  _DWORD *result;
  uint64_t v6;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x28uLL, 0x743898A5uLL);
  if (result)
  {
    result[2] = 1;
    result[3] = 12;
    ++dword_1ECDC7C58;
    *(_QWORD *)result = off_1E1597F88;
    *((_QWORD *)result + 2) = *((_QWORD *)this + 2);
    result[3] = *((_DWORD *)this + 3) & 0xFFFFFF00 | 0xC;
    v6 = *((_QWORD *)this + 3);
    result[8] = *((_DWORD *)this + 8);
    *((_QWORD *)result + 3) = v6;
  }
  *a2 = result;
  return result;
}

uint64_t CA::Render::DistanceFieldLayer::get_property(CA::Render::DistanceFieldLayer *this, uint64_t a2, const unsigned int *a3, unint64_t a4, float64x2_t *a5, double **a6)
{
  uint64_t result;
  int v8;
  double v9;
  unsigned int v10;
  float v11;
  float32x2_t v12;
  float v13;

  if (a2 != 1)
    return 0;
  result = 0;
  v8 = *a3;
  if (*(int *)a3 > 348)
  {
    if (v8 != 349)
    {
      if (v8 == 395)
      {
        result = 1;
      }
      else
      {
        if (v8 != 496)
          return result;
        result = 2;
      }
    }
    v9 = *((float *)this + result + 6);
    goto LABEL_15;
  }
  if (v8 == 230)
  {
    v10 = *((_DWORD *)this + 5);
    v13 = (float)v10 * 0.0039216;
    v11 = (float)HIBYTE(v10) * 0.0039216;
    v12 = vmul_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v10), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x3B808081u));
    *a5 = vcvtq_f64_f32(*(float32x2_t *)&v11);
    a5[1] = vcvtq_f64_f32(*(float32x2_t *)(&v13 - 1));
    return 4;
  }
  if (v8 == 327)
  {
    v9 = 0.0;
    if ((*((_DWORD *)this + 3) & 0x100) != 0)
      v9 = 1.0;
LABEL_15:
    a5->f64[0] = v9;
    return 1;
  }
  return result;
}

float CA::Render::DistanceFieldLayer::set_property(CA::Render::DistanceFieldLayer *this, uint64_t a2, const unsigned int *a3, BOOL a4, unint64_t a5, const double *a6, double a7)
{
  int v7;
  int v8;
  int v9;
  int v15;
  unsigned int v16;
  uint64_t v17;

  if (a2 == 1)
  {
    v7 = *a3;
    if (a5 >= 4 && v7 == 230)
    {
      v8 = (int)(*a6 * 255.0 + 0.5) & ~((int)(*a6 * 255.0 + 0.5) >> 31);
      v9 = (int)(a6[3] * 255.0 + 0.5) & ~((int)(a6[3] * 255.0 + 0.5) >> 31);
      if (v8 >= 255)
        v8 = 255;
      __asm { FMOV            V2.2D, #0.5 }
      a7 = COERCE_DOUBLE(vshl_u32((uint32x2_t)vmin_s32(vmax_s32(vmovn_s64(vcvtq_s64_f64(vmlaq_f64(_Q2, (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL), *(float64x2_t *)(a6 + 1)))), 0), (int32x2_t)0xFF000000FFLL), (uint32x2_t)0x800000010));
      if (_NF == _VF)
        v9 = 255;
      *((_DWORD *)this + 5) = LODWORD(a7) | (v8 << 24) | v9 | HIDWORD(a7);
    }
    else if (a5 && v7 == 327)
    {
      a7 = *a6;
      v15 = *((_DWORD *)this + 3);
      if (*a6 <= 0.5)
        v16 = v15 & 0xFFFFFEFF;
      else
        v16 = v15 | 0x100;
      *((_DWORD *)this + 3) = v16;
    }
    else if (a5)
    {
      switch(v7)
      {
        case 349:
          v17 = 0;
          break;
        case 496:
          v17 = 2;
          break;
        case 395:
          v17 = 1;
          break;
        default:
          return *(float *)&a7;
      }
      *(float *)&a7 = *a6;
      *((_DWORD *)this + v17 + 6) = LODWORD(a7);
    }
  }
  return *(float *)&a7;
}

uint64_t CA::Render::DistanceFieldLayer::preserves_contents_opacity(CA::Render::DistanceFieldLayer *this, const CA::Render::Layer *a2)
{
  return 0;
}

uint64_t CA::Render::DistanceFieldLayer::visit_subclass(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a1);
}

CA::Render::DistanceFieldLayer *CA::Render::DistanceFieldLayer::DistanceFieldLayer(CA::Render::DistanceFieldLayer *this, CA::Render::Decoder *a2)
{
  unsigned int v4;

  *(_QWORD *)this = off_1E1598C30;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = (CA::Render::Decoder::decode_int32(a2) << 8) | 0xC;
  ++dword_1ECDC7C58;
  *(_QWORD *)this = off_1E1597F88;
  v4 = CA::Render::Decoder::decode_int8(a2);
  if (v4 >= 5)
  {
    CA::Render::Decoder::set_fatal_error(a2, "%s - enum %u out of range of %u", "decode_int8_enum", v4, 5);
    v4 = 0;
  }
  *((_DWORD *)this + 4) = v4;
  *((_DWORD *)this + 5) = CA::Render::Decoder::decode_int32(a2);
  CA::Render::Decoder::decode_bytes(a2, (char *)this + 24, 0xCuLL);
  return this;
}

CFStringRef CACreateDateStringFromHostContinuousTime(unint64_t a1, const __CFString *a2)
{
  double v3;
  uint64_t v4;
  double v5;
  CFAbsoluteTime Current;
  const __CFDate *v7;
  void *v8;
  const __CFLocale *v9;
  const __CFString *v10;
  CFStringRef StringWithDate;

  v3 = CATimeWithHostTime(a1);
  v4 = mach_continuous_time();
  v5 = v3 - CATimeWithHostTime(v4);
  Current = CFAbsoluteTimeGetCurrent();
  v7 = CFDateCreate(0, v5 + Current);
  if (CACreateDateStringFromCFDate(__CFDate const*,__CFString const*)::once[0] != -1)
    dispatch_once(CACreateDateStringFromCFDate(__CFDate const*,__CFString const*)::once, &__block_literal_global_15093);
  v8 = pthread_getspecific(CACreateDateStringFromCFDate(__CFDate const*,__CFString const*)::thread_slot);
  if (!v8)
  {
    v9 = CFLocaleCreate(0, CFSTR("en_US_POSIX"));
    v8 = CFDateFormatterCreate(0, v9, kCFDateFormatterShortStyle, kCFDateFormatterShortStyle);
    CFRelease(v9);
    pthread_setspecific(CACreateDateStringFromCFDate(__CFDate const*,__CFString const*)::thread_slot, v8);
  }
  if (a2)
    v10 = a2;
  else
    v10 = CFSTR("HH:mm:ss.SSS");
  CFDateFormatterSetFormat((CFDateFormatterRef)v8, v10);
  StringWithDate = CFDateFormatterCreateStringWithDate(0, (CFDateFormatterRef)v8, v7);
  CFRelease(v7);
  return StringWithDate;
}

uint64_t ___ZL28CACreateDateStringFromCFDatePK8__CFDatePK10__CFString_block_invoke()
{
  uint64_t result;
  pthread_key_t v1[2];

  v1[1] = *MEMORY[0x1E0C80C00];
  v1[0] = 0;
  result = pthread_key_create(v1, (void (__cdecl *)(void *))_ZZZL28CACreateDateStringFromCFDatePK8__CFDatePK10__CFStringEUb_EN3__08__invokeEPv);
  CACreateDateStringFromCFDate(__CFDate const*,__CFString const*)::thread_slot = v1[0];
  return result;
}

void _ZZZL28CACreateDateStringFromCFDatePK8__CFDatePK10__CFStringEUb_EN3__08__invokeEPv(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void CA::CG::StrokeArc::~StrokeArc(CA::CG::StrokeArc *this)
{
  *(_QWORD *)this = off_1E158A6A0;
  if (*((_QWORD *)this + 16))
    CGDashRelease();
  CA::CG::DrawOp::~DrawOp(this);
}

{
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E158A6A0;
  if (*((_QWORD *)this + 16))
    CGDashRelease();
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

double *CA::CG::StrokeArc::compute_dod(CA::CG::StrokeArc *this, float64x2_t *a2)
{
  uint64_t v4;
  double v5;
  double v6;

  v4 = *((uint64_t *)this + 21);
  *a2 = vsubq_f64(*(float64x2_t *)((char *)this + 152), (float64x2_t)vdupq_lane_s64(v4, 0));
  a2[1].f64[0] = *(double *)&v4 + *(double *)&v4;
  a2[1].f64[1] = *(double *)&v4 + *(double *)&v4;
  if ((*((_BYTE *)this + 100) & 4) == 0)
    CA::Rect::apply_transform(a2, (const CGAffineTransform *)((char *)this + 8));
  v5 = CA::CG::stroke_radius((uint64_t)this + 112, *(float64x2_t *)((char *)this + 8), *(float64x2_t *)((char *)this + 24));
  return CA::BoundsImpl::inset_point(a2->f64, -v5, -v6);
}

uint64_t CA::CG::StrokeArc::debug_color(CA::CG::StrokeArc *this)
{
  return 3695562720;
}

void CA::CG::StrokeArc::draw_shape(CA::CG::StrokeArc *this, CA::CG::Renderer *a2)
{
  char *v4;
  double v5;
  double v6;
  double v7;
  _QWORD *v8;
  double *v9;
  float32x2_t *v10;
  int v11;
  BOOL v12;
  CGPath *Mutable;
  uint64_t v14;
  float64x2_t v15;
  float64x2_t *v16;
  float64x2_t v17;
  float64x2_t v18;
  double v19;
  double v20;
  _BOOL4 v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  int v31;
  int v32;
  double v33;
  double v34;
  float32x2_t v35;
  double v36;
  double v37;
  float v38;
  double v39;
  double v40;
  float v41;
  double v42;
  uint64_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float32x2_t *v47;
  double v48;
  float32_t v49;
  float32_t v50;
  float32_t v51;
  float32_t v52;
  double v53;
  __double2 v54;
  float sinval;
  float cosval;
  float v57;
  float v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  _DWORD v62[4];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v4 = (char *)this + 112;
  CA::CG::DrawOp::shape_line_width((uint64_t)this, (const double *)a2, *((double *)this + 14));
  v6 = v5;
  if (v5 >= 0.001)
  {
    v7 = v5 * 0.5;
    if (v5 * 0.5 > *((double *)this + 21)
      || (v8 = (_QWORD *)*((_QWORD *)a2 + 1), !(*(unsigned int (**)(_QWORD *, uint64_t))(*v8 + 184))(v8, 9))|| ((v10 = (float32x2_t *)v8[2], v11 = v10[60].u8[0], v11 != 12)? (v12 = (v11 - 1) >= 0x19): (v12 = 1), v12))
    {
      Mutable = CGPathCreateMutable();
      CGPathAddArc(Mutable, 0, *((CGFloat *)this + 19), *((CGFloat *)this + 20), *((CGFloat *)this + 21), *((CGFloat *)this + 22), *((double *)this + 23) + *((double *)this + 22), *((double *)this + 23) < 0.0);
      CA::CG::stroke_path((uint64_t)a2, (uint64_t)Mutable, 0, (uint64_t)this + 8, (uint64_t)v4);
      CGPathRelease(Mutable);
    }
    else
    {
      v14 = 88;
      if ((*((_DWORD *)this + 25) & 4) == 0)
        v14 = 32;
      v15 = *(float64x2_t *)((char *)a2 + v14);
      if ((*((_DWORD *)this + 25) & 4) != 0)
        v16 = (float64x2_t *)((char *)a2 + 88);
      else
        v16 = (float64x2_t *)((char *)a2 + 32);
      v17 = v16[1];
      v18 = v16[2];
      v59 = v15;
      v60 = v17;
      v61 = v18;
      v19 = vaddvq_f64(vmulq_f64(v15, v15));
      v20 = vaddvq_f64(vmulq_f64(v17, v17));
      v21 = v19 != 1.0;
      if (v20 != 1.0)
        v21 = 1;
      v22 = sqrt(v19);
      v23 = sqrt(v20);
      if (v21)
      {
        v20 = v23;
        v19 = v22;
      }
      if (v19 >= v20)
        v24 = v20;
      else
        v24 = v19;
      v25 = *((double *)this + 23);
      if (v25 < 0.0)
      {
        v59 = vnegq_f64(v15);
        v60 = vnegq_f64(v17);
      }
      v26 = *((double *)this + 22);
      if (v26 != 0.0)
        CA::Mat2Impl::mat2_rotate(&v59, v9, v26);
      v27 = fabs(v25);
      if (v27 <= 6.28318531)
        v28 = v27;
      else
        v28 = 6.28318531;
      v29 = -v28;
      if (v25 >= 0.0)
        v29 = v28;
      v30 = -0.5;
      v31 = vcvtpd_s64_f64(v28 * 1.90985932 + 0.6);
      if (v29 > 0.0)
        v30 = 0.5;
      if (v31 >= 12)
        v32 = 12;
      else
        v32 = v31;
      v33 = *((double *)this + 21);
      v34 = v33 + v7;
      if ((v32 & 0x80000000) == 0)
      {
        v35 = v10[1];
        v36 = (v34 + 0.5 / v24) * 1.15470054;
        v37 = v33 - (v7 + 0.5 / v24);
        v38 = 0.5 / v24 * 1.15470054 / v34 + 1.15470054;
        v39 = v38;
        v40 = dbl_18474E7A0[v29 > 0.0];
        v41 = v37 * v39 / v36;
        v42 = v41;
        v43 = (v32 + 1);
        v44 = v59;
        v45 = v60;
        v46 = v61;
        v47 = (float32x2_t *)(v8[15] + 48);
        v48 = 0.965925826;
        do
        {
          v47[-6] = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(v46, v44, v48 * v37), v45, v40 * v37));
          v47[-5] = (float32x2_t)0x3F80000000000000;
          v49 = v48 * v42;
          v50 = v40 * v42;
          v47[-4].f32[0] = v49;
          v47[-4].f32[1] = v50;
          v47[-2] = v35;
          *v47 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(v46, v44, v48 * v36), v45, v40 * v36));
          v47[1] = (float32x2_t)0x3F80000000000000;
          v51 = v48 * v39;
          v52 = v40 * v39;
          v47[2].f32[0] = v51;
          v47[2].f32[1] = v52;
          v47[4] = v35;
          v53 = v40 * v30;
          v40 = v40 * 0.866025404 + v48 * v30;
          v48 = -(v53 - v48 * 0.866025404);
          v47 += 12;
          --v43;
        }
        while (v43);
        v10 = (float32x2_t *)v8[2];
      }
      v54 = __sincos_stret(v29);
      sinval = v54.__sinval;
      cosval = v54.__cosval;
      *(float *)v62 = sinval;
      *(float *)&v62[1] = -cosval;
      v58 = 0.0;
      if (v28 >= 3.14159265)
        v58 = 1.0;
      v57 = 1.0 - v6 / v34;
      *(float *)&v62[2] = v57;
      *(float *)&v62[3] = v58;
      v10[2].i8[0] = 81;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, _DWORD *))(*v8 + 1000))(v8, 0, 4, 1, v62);
      (*(void (**)(_QWORD *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*v8 + 280))(v8, 2, (2 * v32 + 2), 0, v8[15], 0, (2 * v32 + 2), 0);
    }
  }
}

double CA_CFDoubleValue(const void *a1)
{
  CFTypeID v2;
  double result;
  CFTypeID TypeID;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v2 = CFGetTypeID(a1);
  if (v2 == CFBooleanGetTypeID())
  {
    result = 0.0;
    if ((const void *)*MEMORY[0x1E0C9AE40] != a1)
      return 1.0;
  }
  else
  {
    TypeID = CFNumberGetTypeID();
    result = 0.0;
    if (v2 == TypeID)
    {
      v5[0] = 0;
      CFNumberGetValue((CFNumberRef)a1, kCFNumberDoubleType, v5);
      return *(double *)v5;
    }
  }
  return result;
}

BOOL CA_CFDictionaryGetBool(const __CFDictionary *a1, const void *a2)
{
  const void *Value;

  return a1 && (Value = CFDictionaryGetValue(a1, a2)) != 0 && CA_CFBoolValue(Value);
}

BOOL CA_CFDictionaryGetBoolIfExists(const __CFDictionary *a1, BOOL *a2)
{
  const void *Value;
  const void *v4;

  Value = CFDictionaryGetValue(a1, CFSTR("DefaultColorSpaceIsSRGB"));
  v4 = Value;
  if (Value)
    *a2 = CA_CFBoolValue(Value);
  return v4 != 0;
}

double CA_CFDictionaryGetDouble(const __CFDictionary *a1, const void *a2)
{
  const void *Value;

  if (a1 && (Value = CFDictionaryGetValue(a1, a2)) != 0)
    return CA_CFDoubleValue(Value);
  else
    return 0.0;
}

const void *CA_CFDictionaryGetArray(const __CFDictionary *a1, const void *a2)
{
  const void *Value;
  const void *v3;
  CFTypeID v4;

  Value = CFDictionaryGetValue(a1, a2);
  if (!Value)
    return 0;
  v3 = Value;
  v4 = CFGetTypeID(Value);
  if (v4 != CFArrayGetTypeID())
    return 0;
  return v3;
}

const void *CA_CFDictionaryGetString(const __CFDictionary *a1, const void *a2)
{
  const void *Value;
  const void *v3;
  CFTypeID v4;

  Value = CFDictionaryGetValue(a1, a2);
  if (!Value)
    return 0;
  v3 = Value;
  v4 = CFGetTypeID(Value);
  if (v4 != CFStringGetTypeID())
    return 0;
  return v3;
}

const void *CA_CFDictionaryGetDictionary(const __CFDictionary *a1, const void *a2)
{
  const void *Value;
  const void *v3;
  CFTypeID v4;

  if (!a1)
    return 0;
  Value = CFDictionaryGetValue(a1, a2);
  if (!Value)
    return 0;
  v3 = Value;
  v4 = CFGetTypeID(Value);
  if (v4 != CFDictionaryGetTypeID())
    return 0;
  return v3;
}

void CA_CFDictionarySetFloat(__CFDictionary *a1, const void *a2, float a3)
{
  CFNumberRef v5;
  float valuePtr;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

void CA_CFDictionarySetDouble(__CFDictionary *a1, const void *a2, double a3)
{
  CFNumberRef v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  *(double *)v6 = a3;
  v5 = CFNumberCreate(0, kCFNumberDoubleType, v6);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

void CA_CFDictionarySetCString(__CFDictionary *a1, const void *a2, char *cStr)
{
  CFStringRef v5;

  v5 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

const void *CA_CFArrayGetDictionary(const __CFArray *a1, CFIndex a2)
{
  const void *ValueAtIndex;
  const void *v3;
  CFTypeID v4;

  ValueAtIndex = CFArrayGetValueAtIndex(a1, a2);
  if (!ValueAtIndex)
    return 0;
  v3 = ValueAtIndex;
  v4 = CFGetTypeID(ValueAtIndex);
  if (v4 != CFDictionaryGetTypeID())
    return 0;
  return v3;
}

void CA_CFArrayAppendDouble(__CFArray *a1, double a2)
{
  CFNumberRef v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  *(double *)v4 = a2;
  v3 = CFNumberCreate(0, kCFNumberDoubleType, v4);
  CFArrayAppendValue(a1, v3);
  CFRelease(v3);
}

char *CA_CFDataWriteTempFile(const __CFData *a1, const char *a2, int a3)
{
  const UInt8 *BytePtr;
  size_t Length;
  char *result;
  int v9;
  int v10;
  NSObject *v11;
  char *v12;
  uint8_t buf[4];
  char *v14;
  char v15[1024];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  BytePtr = CFDataGetBytePtr(a1);
  Length = CFDataGetLength(a1);
  result = 0;
  if (BytePtr && Length)
  {
    bzero(v15, 0x400uLL);
    if (getuid())
    {
      result = (char *)confstr(65537, v15, 0x400uLL);
      if (!result)
        return result;
    }
    else
    {
      strcpy(v15, "/tmp/");
    }
    v12 = 0;
    asprintf(&v12, "%s%s", v15, a2);
    v9 = mkstemps(v12, a3);
    if (v9 < 0)
    {
      free(v12);
      return 0;
    }
    else
    {
      v10 = v9;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v11 = x_log_category_utilities;
        if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v14 = v12;
          _os_log_impl(&dword_184457000, v11, OS_LOG_TYPE_DEFAULT, "Writing to '%s'", buf, 0xCu);
        }
      }
      fchmod(v10, 0x1A4u);
      write(v10, BytePtr, Length);
      close(v10);
      return v12;
    }
  }
  return result;
}

pthread_t x_thread_create(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  int v7;
  char *v9;
  size_t v10;
  pthread_t v11;
  pthread_attr_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  memset(&v12, 0, sizeof(v12));
  v11 = 0;
  v6 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v6 = a1;
  v6[1] = a2;
  pthread_attr_init(&v12);
  pthread_attr_setscope(&v12, 1);
  pthread_attr_setdetachstate(&v12, 2);
  v10 = 0;
  pthread_attr_getstacksize(&v12, &v10);
  if (a3 && !(v10 >> 20))
    pthread_attr_setstacksize(&v12, 0x100000uLL);
  v7 = pthread_create(&v11, &v12, (void *(__cdecl *)(void *))thread_fun, v6);
  pthread_attr_destroy(&v12);
  if (v7)
  {
    v9 = strerror(v7);
    x_log_crash("Failed to create thread (%d) - %s", v7, v9);
    abort();
  }
  return v11;
}

uint64_t thread_fun(void (**a1)(uint64_t))
{
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);

  v2 = *a1;
  v1 = a1[1];
  free(a1);
  v2((uint64_t)v1);
  return 0;
}

Class ___Z22CACarPlayMarshalCreatev_block_invoke()
{
  Class result;

  dlopen("/System/Library/PrivateFrameworks/CarKit.framework/CarKit", 1);
  result = NSClassFromString(CFSTR("CARLayerPropertyMarshal"));
  CACarPlayMarshalCreate(void)::cls = (uint64_t)result;
  return result;
}

uint64_t CA::CG::AccelDrawable::texture(CA::CG::AccelDrawable *this)
{
  return 0;
}

BOOL CA::CG::IOSurfaceDrawable::needs_gpu(CA::CG::IOSurfaceDrawable *this)
{
  int IsTiled;
  NSObject *v2;
  uint8_t v4[8];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  IsTiled = IOSurfaceIsTiled();
  if (IsTiled && (CA::CG::IOSurfaceDrawable::needs_gpu(void)const::_before & 1) == 0)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v2 = x_log_category_cg;
      if (os_log_type_enabled((os_log_t)x_log_category_cg, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v4 = 0;
        _os_log_impl(&dword_184457000, v2, OS_LOG_TYPE_DEFAULT, "CoreAnimation: sw renderer doesn't support tiling\n", v4, 2u);
      }
    }
    CA::CG::IOSurfaceDrawable::needs_gpu(void)const::_before = 1;
  }
  return IsTiled != 0;
}

void CA::CG::IOSurfaceDrawable::retain_shared_texture(os_unfair_lock_s *this@<X0>, _QWORD *a2@<X8>)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = this + 3;
  os_unfair_lock_lock(this + 3);
  if (LOBYTE(this[17]._os_unfair_lock_opaque))
  {
    v5 = 0;
  }
  else
  {
    CA::CG::IOSurfaceDrawable::ensure_shared_surface(this);
    v5 = *(_QWORD *)&this[26]._os_unfair_lock_opaque;
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      if (!v7)
      {
        v5 = 0;
        do
          v8 = __ldaxr(v6);
        while (__stlxr(v8 - 1, v6));
      }
    }
  }
  *a2 = v5;
  os_unfair_lock_unlock(v4);
}

uint64_t CA::CG::IOSurfaceDrawable::set_volatile_(CA::Render **this, __IOSurface *a2)
{
  return CA::Render::set_iosurface_volatile(this[12], a2);
}

__IOSurface *CA::CG::IOSurfaceDrawable::is_purged_(CA::CG::IOSurfaceDrawable *this)
{
  __IOSurface *result;
  uint32_t oldState;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (__IOSurface *)*((_QWORD *)this + 12);
  if (result)
  {
    oldState = 0;
    return (__IOSurface *)(!IOSurfaceSetPurgeable(result, 3u, &oldState) && oldState == 2);
  }
  return result;
}

_QWORD *CA::CG::IOSurfaceDrawable::ensure_shared_surface(_QWORD *this)
{
  _QWORD *v1;
  malloc_zone_t *malloc_zone;
  CA::Render::Texture *v3;
  CA::Render::Texture *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  if (!this[13])
  {
    v1 = this;
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v3 = (CA::Render::Texture *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x158uLL, 0x743898A5uLL);
    v4 = v3;
    if (v3)
      v3 = (CA::Render::Texture *)CA::Render::Surface::Surface((uint64_t)v3, (IOSurfaceRef)v1[12], *((_DWORD *)v1 + 4), 1, 0, 0, 0);
    CA::Render::Texture::set_colorspace(v3, (CGColorSpace *)v1[3]);
    this = (_QWORD *)v1[13];
    v1[13] = v4;
    if (this)
    {
      v5 = (unsigned int *)(this + 1);
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 16))(this);
    }
  }
  return this;
}

CGImageRef CA::CG::IOSurfaceDrawable::copy_cgimage(CA::CG::IOSurfaceDrawable *this)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  CGImageRef v4;
  uint64_t v5;
  malloc_zone_t *malloc_zone;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  size_t AllocSize;
  CGDataProvider *Direct;
  size_t v12;
  size_t v13;
  size_t BytesPerRow;
  CGImageRef v15;
  size_t v16;
  size_t v17;
  size_t v18;
  CGImage *v19;
  CGFloat decode[3];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 9);
  if (v2)
    CA::CG::Queue::flush(v2, 3, 1);
  v3 = (os_unfair_lock_s *)((char *)this + 12);
  os_unfair_lock_lock((os_unfair_lock_t)this + 3);
  if (!*((_BYTE *)this + 68))
  {
    if (!*((_QWORD *)this + 10))
    {
      v5 = *((unsigned int *)this + 4);
      os_unfair_lock_unlock((os_unfair_lock_t)this + 3);
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v7 = malloc_type_zone_malloc(malloc_zone, 0x38uLL, 0x8BB15036uLL);
      if (v7)
      {
        v8 = *((_QWORD *)this + 9);
        if (v8
          || (v8 = (*(uint64_t (**)(CA::CG::IOSurfaceDrawable *))(*(_QWORD *)this + 72))(this),
              (*((_QWORD *)this + 9) = v8) != 0))
        {
          v9 = *(_DWORD *)(v8 + 48);
        }
        else
        {
          v9 = 0;
        }
        CA::CG::AccelDataProvider::AccelDataProvider((uint64_t)v7, (uint64_t)this, v9);
        *v7 = &off_1E1593250;
      }
      AllocSize = IOSurfaceGetAllocSize(*((IOSurfaceRef *)this + 12));
      Direct = CGDataProviderCreateDirect(v7, AllocSize, &CA::CG::AccelDataProvider::callbacks(void)::vtable);
      v12 = *((unsigned int *)this + 13);
      v13 = *((unsigned int *)this + 14);
      if ((_DWORD)v5 == 9)
      {
        BytesPerRow = IOSurfaceGetBytesPerRow(*((IOSurfaceRef *)this + 12));
        *(_OWORD *)decode = xmmword_18474DF40;
        v15 = CGImageMaskCreate(v12, v13, 8uLL, 8uLL, BytesPerRow, Direct, decode, 1);
      }
      else
      {
        if (v5 > 0x23)
        {
          v16 = 0;
          v17 = 0;
        }
        else
        {
          v16 = dword_184750518[v5];
          v17 = dword_1847503F0[v5];
        }
        v18 = IOSurfaceGetBytesPerRow(*((IOSurfaceRef *)this + 12));
        v15 = CGImageCreate(v12, v13, v16, v17, v18, *((CGColorSpaceRef *)this + 3), *((_DWORD *)this + 8), Direct, 0, 1, kCGRenderingIntentDefault);
      }
      v19 = v15;
      CGDataProviderRelease(Direct);
      if (v19)
      {
        CA::CG::AccelDataProvider::set_image((CA::CG::AccelDataProvider *)v7, v19);
        os_unfair_lock_lock((os_unfair_lock_t)this + 3);
        if (!*((_QWORD *)this + 10))
        {
          *((_QWORD *)this + 10) = v19;
          goto LABEL_22;
        }
        os_unfair_lock_unlock((os_unfair_lock_t)this + 3);
        CGImageRelease(v19);
      }
      os_unfair_lock_lock((os_unfair_lock_t)this + 3);
    }
LABEL_22:
    v4 = CGImageRetain(*((CGImageRef *)this + 10));
    goto LABEL_23;
  }
  v4 = 0;
LABEL_23:
  os_unfair_lock_unlock(v3);
  return v4;
}

__CFBundle *init_gpu_access(void)
{
  __CFBundle *result;

  gpu_access_override = 0;
  result = CFBundleGetMainBundle();
  if (result)
  {
    result = (__CFBundle *)CFBundleGetValueForInfoDictionaryKey(result, CFSTR("CAProcessCanAccessGPU"));
    if (result)
    {
      gpu_access_override = 1;
      result = (__CFBundle *)CA_CFBoolValue(result);
      gpu_access_allowed = (char)result;
    }
  }
  return result;
}

void CA::OGL::`anonymous namespace'::RotateTransition::DOD(const CA::Render::Transition *a1@<X1>, const CA::Rect *a2@<X2>, float64x2_t *a3@<X3>, const CA::Rect *a4@<X4>, float64x2_t *a5@<X5>, uint64_t a6@<X8>)
{
  __int128 v10;
  float64x2_t v11;
  double *v12;
  double *v13;
  float64x2_t v14;
  float64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int32x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23[8];
  float64x2_t v24[8];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  memset(v24, 0, sizeof(v24));
  memset(v23, 0, sizeof(v23));
  v10 = *((_OWORD *)a4 + 1);
  *(_OWORD *)a6 = *(_OWORD *)a4;
  *(_OWORD *)(a6 + 16) = v10;
  v11 = a5[1];
  v21 = *a5;
  v22 = v11;
  CA::Mat4Impl::mat4_apply_to_rect(v23, (int8x16_t *)a6, v12);
  CA::Mat4Impl::mat4_apply_to_rect(v24, (int8x16_t *)&v21, v13);
  v14 = *(float64x2_t *)(a6 + 16);
  v15 = v22;
  v16 = vclezq_f64(v14);
  v17 = vclezq_f64(v22);
  v18 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v17, v16), (int8x16_t)vzip2q_s64(v17, v16))));
  if ((v18.i8[4] & 1) != 0)
  {
    if ((v18.i8[0] & 1) != 0)
      return;
    v19 = v21;
  }
  else
  {
    if ((v18.i8[0] & 1) != 0)
      return;
    v20 = vaddq_f64(*(float64x2_t *)a6, v14);
    v19 = vminnmq_f64(*(float64x2_t *)a6, v21);
    v15 = vsubq_f64(vmaxnmq_f64(v20, vaddq_f64(v21, v22)), v19);
  }
  *(float64x2_t *)a6 = v19;
  *(float64x2_t *)(a6 + 16) = v15;
}

__n128 CA::OGL::`anonymous namespace'::RotateTransition::ROI(uint64_t a1, uint64_t a2, __n128 *a3, uint64_t a4, uint64_t a5, __n128 *a6, __n128 *a7)
{
  __n128 result;

  *a6 = *a3;
  a6[1] = a3[1];
  *a7 = *a3;
  result = a3[1];
  a7[1] = result;
  return result;
}

void CA::OGL::`anonymous namespace'::RotateTransition::render(uint64_t a1, uint64_t a2, CA::OGL::Context *a3, float64x2_t *a4, CA::Transform *a5, uint64_t a6, uint64_t a7)
{
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  *(_BYTE *)(*((_QWORD *)a3 + 2) + 481) |= 1u;
  __asm { FMOV            V4.2D, #1.0 }
  if (a6)
  {
    _D0.i32[0] = v35;
    __asm { FCVT            H0, S0 }
    *(int16x4_t *)(*((_QWORD *)a3 + 2) + 8) = vdup_lane_s16(_D0, 0);
    v45 = 16;
    v36 = v19;
    v37 = v20;
    v38 = v21;
    v39 = v22;
    v40 = v23;
    v41 = v24;
    v42 = v25;
    v43 = v26;
    v44 = _Q4;
    v18 = _Q4;
    CA::OGL::fill_surface_rect(a3, a6, a5, (uint64_t)&v36, *a4, a4[1]);
    _Q4 = v18;
  }
  if (a7)
  {
    _D0.i32[0] = HIDWORD(v35);
    __asm { FCVT            H0, S0 }
    *(int16x4_t *)(*((_QWORD *)a3 + 2) + 8) = vdup_lane_s16(_D0, 0);
    v45 = 16;
    v36 = v27;
    v37 = v28;
    v38 = v29;
    v39 = v30;
    v40 = v31;
    v41 = v32;
    v42 = v33;
    v43 = v34;
    v44 = _Q4;
    CA::OGL::fill_surface_rect(a3, a7, a5, (uint64_t)&v36, *a4, a4[1]);
  }
  *(_BYTE *)(*((_QWORD *)a3 + 2) + 481) &= ~1u;
}

uint64_t CA::OGL::`anonymous namespace'::RotateTransition::source_requirement()
{
  return 3;
}

void CA::OGL::`anonymous namespace'::RotateTransition::set_state(uint64_t a1, uint64_t a2, double *a3, float64x2_t *a4)
{
  int v6;
  double v7;
  float v8;
  double v9;
  double v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  const double *v19;
  int8x16_t v20;
  int8x16_t v21;
  __double2 v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  const double *v36;
  int8x16_t v37;
  int8x16_t v38;
  __double2 v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  double v43;
  float64x2_t v44;
  float64x2_t v45;
  double v46;
  float64x2_t v47;
  float64x2_t v48;
  double v49;
  uint64_t v50;
  __int128 v51;
  double v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a2 + 20);
  {
    v7 = 3.14159265;
  }
  {
    v7 = -3.14159265;
  }
  else
  {
  }
  v8 = *(float *)(a2 + 48);
  v9 = *a3 + a3[2] * 0.5;
  v10 = a3[1] + a3[3] * 0.5;
  v11 = *a4;
  v12 = a4[1];
  v13 = a4[2];
  v14 = a4[3];
  *(float64x2_t *)a1 = *a4;
  *(float64x2_t *)(a1 + 16) = v12;
  *(float64x2_t *)(a1 + 32) = v13;
  *(float64x2_t *)(a1 + 48) = v14;
  v15 = a4[4];
  v16 = a4[5];
  v17 = a4[6];
  v18 = a4[7];
  *(float64x2_t *)(a1 + 64) = v15;
  *(float64x2_t *)(a1 + 80) = v16;
  v43 = v9;
  v47 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10, 0);
  v48 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v9, 0);
  v46 = v10;
  *(float64x2_t *)(a1 + 96) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v17, v11, v9), v13, v10), (float64x2_t)0, v15);
  *(float64x2_t *)(a1 + 112) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v18, v12, v9), v14, v10), (float64x2_t)0, v16);
  v51 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = xmmword_18474DF40;
  v57 = 0u;
  v58 = xmmword_18474DF50;
  v22 = __sincos_stret(v7 * v8);
  *(double *)v21.i64 = v22.__cosval;
  *(double *)v20.i64 = v22.__sinval;
  if (fabs(v22.__sinval) >= 0.0000001)
  {
    if (fabs(v22.__cosval) < 0.0000001)
    {
      v21.i64[0] = 1.0;
      v24.f64[0] = NAN;
      v24.f64[1] = NAN;
      v20.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v24), v21, v20).u64[0];
      v21.i64[0] = 0;
    }
  }
  else
  {
    v20.i64[0] = 1.0;
    v23.f64[0] = NAN;
    v23.f64[1] = NAN;
    v21.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v23), v20, v21).u64[0];
    v20.i64[0] = 0;
  }
  v49 = *(double *)v21.i64;
  v50 = v20.i64[0];
  v52 = -*(double *)v20.i64;
  v53 = v21.i64[0];
  CA::Mat4Impl::mat4_concat((float64x2_t *)a1, &v49, (const double *)a1, v19);
  v45 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(-v43), 0);
  v25 = vmlsq_lane_f64(*(float64x2_t *)(a1 + 96), *(float64x2_t *)a1, v43, 0);
  v26 = vmlsq_lane_f64(*(float64x2_t *)(a1 + 112), *(float64x2_t *)(a1 + 16), v43, 0);
  v44 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(-v46), 0);
  v27 = vmlaq_f64(vmlsq_lane_f64(v26, *(float64x2_t *)(a1 + 48), v46, 0), (float64x2_t)0, *(float64x2_t *)(a1 + 80));
  *(float64x2_t *)(a1 + 96) = vmlaq_f64(vmlsq_lane_f64(v25, *(float64x2_t *)(a1 + 32), v46, 0), (float64x2_t)0, *(float64x2_t *)(a1 + 64));
  *(float64x2_t *)(a1 + 112) = v27;
  v28 = *a4;
  v29 = a4[1];
  v30 = a4[2];
  v31 = a4[3];
  *(float64x2_t *)(a1 + 128) = *a4;
  *(float64x2_t *)(a1 + 144) = v29;
  *(float64x2_t *)(a1 + 160) = v30;
  *(float64x2_t *)(a1 + 176) = v31;
  v32 = a4[4];
  v33 = a4[5];
  v34 = a4[6];
  v35 = a4[7];
  *(float64x2_t *)(a1 + 192) = v32;
  *(float64x2_t *)(a1 + 208) = v33;
  *(float64x2_t *)(a1 + 224) = vmlaq_f64(vmlaq_f64(vmlaq_f64(v34, v48, v28), v47, v30), (float64x2_t)0, v32);
  *(float64x2_t *)(a1 + 240) = vmlaq_f64(vmlaq_f64(vmlaq_f64(v35, v48, v29), v47, v31), (float64x2_t)0, v33);
  v51 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = xmmword_18474DF40;
  v57 = 0u;
  v58 = xmmword_18474DF50;
  v39 = __sincos_stret(v7 * v8 - v7);
  *(double *)v38.i64 = v39.__cosval;
  *(double *)v37.i64 = v39.__sinval;
  if (fabs(v39.__sinval) >= 0.0000001)
  {
    if (fabs(v39.__cosval) < 0.0000001)
    {
      v38.i64[0] = 1.0;
      v41.f64[0] = NAN;
      v41.f64[1] = NAN;
      v37.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v41), v38, v37).u64[0];
      v38.i64[0] = 0;
    }
  }
  else
  {
    v37.i64[0] = 1.0;
    v40.f64[0] = NAN;
    v40.f64[1] = NAN;
    v38.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v40), v37, v38).u64[0];
    v37.i64[0] = 0;
  }
  v49 = *(double *)v38.i64;
  v50 = v37.i64[0];
  v52 = -*(double *)v37.i64;
  v53 = v38.i64[0];
  CA::Mat4Impl::mat4_concat((float64x2_t *)(a1 + 128), &v49, (const double *)(a1 + 128), v36);
  v42 = vmlaq_f64(vmlaq_f64(vmlaq_f64(*(float64x2_t *)(a1 + 240), v45, *(float64x2_t *)(a1 + 144)), v44, *(float64x2_t *)(a1 + 176)), (float64x2_t)0, *(float64x2_t *)(a1 + 208));
  *(float64x2_t *)(a1 + 224) = vmlaq_f64(vmlaq_f64(vmlaq_f64(*(float64x2_t *)(a1 + 224), v45, *(float64x2_t *)(a1 + 128)), v44, *(float64x2_t *)(a1 + 160)), (float64x2_t)0, *(float64x2_t *)(a1 + 192));
  *(float64x2_t *)(a1 + 240) = v42;
  *(float *)(a1 + 256) = 1.0 - v8;
  *(float *)(a1 + 260) = v8;
}

uint64_t CA::CG::IOSurfaceContext::get_display_mask()
{
  return 0xFFFFFFFFLL;
}

CGImageRef CA::CG::IOSurfaceContext::create_image_by_reference()
{
  uint64_t Info;

  Info = CGContextDelegateGetInfo();
  return CA::CG::IOSurfaceDrawable::copy_cgimage_iosurface(*(CA::CG::IOSurfaceDrawable **)(Info + 336));
}

uint64_t CA::CG::IOSurfaceContext::get_surface_limits(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = MEMORY[0x186DBD438](*MEMORY[0x1E0CBC1E0]);
  v6 = MEMORY[0x186DBD438](*MEMORY[0x1E0CBC008]);
  v7 = 0x2000;
  if (v6 < 0x2000)
    v7 = v6;
  if (a2)
  {
    v8 = 0x2000;
    if (v5 < 0x2000)
      v8 = v5;
    *a2 = v8;
  }
  if (a3)
    *a3 = v7;
  return 1;
}

uint64_t CA::CG::IOSurfaceContext::set_gpu_registry_id(uint64_t a1, uint64_t a2)
{
  uint64_t Info;
  uint64_t result;

  Info = CGContextDelegateGetInfo();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Info + 16))(Info);
  if (result)
    *(_QWORD *)(result + 200) = a2;
  return result;
}

uint64_t CA::CG::IOSurfaceContext::get_gpu_registry_id()
{
  uint64_t Info;
  uint64_t result;

  Info = CGContextDelegateGetInfo();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Info + 16))(Info);
  if (result)
    return *(_QWORD *)(result + 200);
  return result;
}

void CA::AttrList::append_description(CA::AttrList *this, CFMutableStringRef theString)
{
  CA::AttrList *v3;
  char v4;
  const __CFString *String;
  const __CFString *v6;
  uint64_t v7;
  const __CFString *Weak;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (this)
  {
    v3 = this;
    v4 = 1;
    do
    {
      if ((v4 & 1) == 0)
        CFStringAppend(theString, CFSTR("; "));
      String = CAAtomGetString(*((_DWORD *)v3 + 2) & 0xFFFFFF);
      CFStringAppendFormat(theString, 0, CFSTR("%@ = "), String);
      switch(*((_BYTE *)v3 + 11) & 0x7F)
      {
        case 1:
          v6 = (const __CFString *)**((_QWORD **)v3 + 2);
          goto LABEL_17;
        case 2:
        case 3:
          v6 = (const __CFString *)*((_QWORD *)v3 + 2);
          goto LABEL_17;
        case 4:
          v7 = *((_QWORD *)v3 + 2);
          if (*(_BYTE *)(v7 + 8))
            Weak = (const __CFString *)objc_loadWeak((id *)v7);
          else
            Weak = *(const __CFString **)v7;
          v12 = Weak;
          goto LABEL_18;
        case 5:
          CFStringAppendFormat(theString, 0, CFSTR("^%p"), *((_QWORD *)v3 + 2), v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
          break;
        case 6:
          v6 = CFSTR("YES");
          if (!*((_QWORD *)v3 + 2))
            v6 = CFSTR("NO");
LABEL_17:
          v12 = v6;
LABEL_18:
          CFStringAppendFormat(theString, 0, CFSTR("%@"), v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
          break;
        case 7:
        case 9:
        case 0xB:
        case 0xD:
          CFStringAppendFormat(theString, 0, CFSTR("%ld"), *((_QWORD *)v3 + 2), v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
          break;
        case 8:
        case 0xA:
        case 0xC:
        case 0xE:
          CFStringAppendFormat(theString, 0, CFSTR("%lu"), *((_QWORD *)v3 + 2), v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
          break;
        case 0xF:
          CFStringAppendFormat(theString, 0, CFSTR("%lld"), *((_QWORD *)v3 + 2), v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
          break;
        case 0x10:
          CFStringAppendFormat(theString, 0, CFSTR("%llu"), *((_QWORD *)v3 + 2), v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
          break;
        case 0x11:
        case 0x12:
          CFStringAppendFormat(theString, 0, CFSTR("%g"), *((_QWORD *)v3 + 2), v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
          break;
        case 0x13:
          CFStringAppendFormat(theString, 0, CFSTR("CGPoint (%g %g)"), **((_QWORD **)v3 + 2), *(_QWORD *)(*((_QWORD *)v3 + 2) + 8), v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
          break;
        case 0x14:
          CFStringAppendFormat(theString, 0, CFSTR("CGSize (%g %g)"), **((_QWORD **)v3 + 2), *(_QWORD *)(*((_QWORD *)v3 + 2) + 8), v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
          break;
        case 0x15:
          CFStringAppendFormat(theString, 0, CFSTR("CGRect (%g %g; %g %g)"),
            **((_QWORD **)v3 + 2),
            *(_QWORD *)(*((_QWORD *)v3 + 2) + 8),
            *(_QWORD *)(*((_QWORD *)v3 + 2) + 16),
            *(_QWORD *)(*((_QWORD *)v3 + 2) + 24),
            v16,
            v17,
            v18,
            v19,
            v20,
            v21,
            v22,
            v23,
            v24,
            v25,
            v26,
            v27);
          break;
        case 0x16:
          v9 = (_QWORD *)*((_QWORD *)v3 + 2);
          CFStringAppendFormat(theString, 0, CFSTR("CATransform3D (%g %g %g %g; %g %g %g %g; %g %g %g %g; %g %g %g %g)"),
            *v9,
            v9[1],
            v9[2],
            v9[3],
            v9[4],
            v9[5],
            v9[6],
            v9[7],
            v9[8],
            v9[9],
            v9[10],
            v9[11],
            v9[12],
            v9[13],
            v9[14],
            v9[15]);
          break;
        case 0x17:
          v10 = (_QWORD *)*((_QWORD *)v3 + 2);
          CFStringAppendFormat(theString, 0, CFSTR("CGAffineTransform (%g %g; %g %g; %g %g)"),
            *v10,
            v10[1],
            v10[2],
            v10[3],
            v10[4],
            v10[5],
            v18,
            v19,
            v20,
            v21,
            v22,
            v23,
            v24,
            v25,
            v26,
            v27);
          break;
        case 0x18:
          CFStringAppendFormat(theString, 0, CFSTR("CAPoint3D (%g %g %g)"), **((_QWORD **)v3 + 2), *(_QWORD *)(*((_QWORD *)v3 + 2) + 8), *(_QWORD *)(*((_QWORD *)v3 + 2) + 16), v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
          break;
        case 0x19:
          v11 = (_QWORD *)*((_QWORD *)v3 + 2);
          CFStringAppendFormat(theString, 0, CFSTR("CACornerRadii (%g %g; %g %g; %g %g; %g %g)"),
            *v11,
            v11[1],
            v11[2],
            v11[3],
            v11[4],
            v11[5],
            v11[6],
            v11[7],
            v20,
            v21,
            v22,
            v23,
            v24,
            v25,
            v26,
            v27);
          break;
        default:
          CFStringAppend(theString, CFSTR("<undefined>"));
          break;
      }
      v4 = 0;
      v3 = *(CA::AttrList **)v3;
    }
    while (v3);
  }
}

void CA::CG::DrawFocusRing::~DrawFocusRing(CA::CG::DrawFocusRing *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E1591C48;
  v2 = (unsigned int *)*((_QWORD *)this + 15);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1591C48;
  v2 = (unsigned int *)*((_QWORD *)this + 15);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

double *CA::CG::DrawFocusRing::compute_dod(CA::CG::DrawFocusRing *this, CA::Rect *a2)
{
  unsigned int v4;

  (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 14) + 24))(*((_QWORD *)this + 14), (char *)this + 128);
  v4 = vcvtms_s32_f32(*(float *)(*((_QWORD *)this + 15) + 76) + 0.5);
  *(_OWORD *)a2 = *((_OWORD *)this + 8);
  *((_OWORD *)a2 + 1) = *((_OWORD *)this + 9);
  return CA::BoundsImpl::inset((double *)a2, (double)(int)~v4, (double)(int)~v4);
}

uint64_t CA::CG::DrawFocusRing::set_op(uint64_t this, CA::CG::DrawOp *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 112);
  if (v2)
    *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(this + 112) = a2;
  return this;
}

uint64_t CA::CG::DrawFocusRing::debug_color(CA::CG::DrawFocusRing *this)
{
  return 4056100576;
}

_QWORD *CA::CG::DrawFocusRing::draw_shape(_QWORD *this, CA::CG::Renderer *a2)
{
  if (*(int *)(this[15] + 84) <= 0)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, CA::CG::Renderer *))(*this + 184))(this, a2);
  return this;
}

_QWORD *CA::CG::DrawFocusRing::draw_shape_and_color(_QWORD *this, CA::CG::Renderer *a2)
{
  if (*(int *)(this[15] + 84) <= 0)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, CA::CG::Renderer *))(*this + 184))(this, a2);
  return this;
}

void CA::CG::DrawFocusRing::draw_focus_ring(CA::CG::DrawFocusRing *this, CA::CG::Renderer *a2)
{
  uint64_t v4;
  float v5;
  uint64_t bounds;
  float64x2_t v7;
  int32x2_t *v8;
  int32x2_t *v9;
  int32x2_t v10;
  uint32x2_t v11;
  int32x2_t v12;
  uint32x2_t v13;
  int32x2_t v14;
  __int128 v15;
  uint32x2_t v16;
  int v17;
  int64x2_t v18;
  int8x16_t v19;
  int32x2_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  float64x2_t v25;
  float64x2_t v26;
  double v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  float64x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float64x2_t v35;
  float64x2_t v36;
  int32x4_t v37;
  uint64_t v38;
  CA::CG::ClipItem **v39;
  size_t v40;
  double v41;
  double v42;
  int64x2_t v43;
  double v44;
  float64x2_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int64x2_t v48;
  int32x2_t v49;
  __int32 v50;
  int32x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  void (*v54)(_QWORD);
  int64x2_t v55;
  int64x2_t v56;
  int32x4_t v57;
  int64x2_t v58;
  int64x2_t v59;
  void (*v60)(_QWORD);
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x2_t v81;
  int32x2_t v82;
  int v83;
  int v84;
  int8x8_t v85;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  __int16 v91;
  unsigned int v92;
  char v93;
  const void *v94;
  uint64_t v95;
  uint64_t v96;
  __int16 v97;
  int32x4_t v98;
  int32x4_t v99;
  int v100;
  int64x2_t v101;
  double v102;
  int8x16_t v103;
  double v104;
  uint64_t v105;
  float v106;
  double v107;
  double v108;
  int8x16_t v109;
  int8x16_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int64x2_t v113;
  int64x2_t v114;
  float64x2_t v115;
  float16x4_t v116;
  double v117;
  float64x2_t v118;
  double v119;
  double v120;
  int32x4_t v121;
  __int128 v122;
  _BYTE v123[48];
  _OWORD v124[4];
  uint64_t v125;
  int32x2_t v126[62];

  v126[61] = *(int32x2_t *)MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a2 + 1);
  v5 = *((double *)a2 + 10);
  v122 = 0uLL;
  bounds = CA::Shape::get_bounds(*(_QWORD *)(*(_QWORD *)(v4 + 232) + 8), (int *)&v122);
  v8 = *(int32x2_t **)(v4 + 248);
  if (v8)
    v9 = v8 + 4;
  else
    v9 = (int32x2_t *)(v4 + 184);
  v10 = *(int32x2_t *)((char *)&v122 + 8);
  v11 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v122 + 8));
  if ((vpmax_u32(v11, v11).u32[0] & 0x80000000) == 0)
  {
    v12 = v9[1];
    v13 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v12);
    if ((vpmax_u32(v13, v13).u32[0] & 0x80000000) != 0
      || (v14 = vadd_s32(*v9, v12),
          *(int32x2_t *)&v15 = vmax_s32(*(int32x2_t *)&v122, *v9),
          v10 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&v122, *(int32x2_t *)((char *)&v122 + 8)), v14), *(int32x2_t *)&v15), v16 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v10), (vpmax_u32(v16, v16).u32[0] & 0x80000000) != 0))
    {
      v10 = 0;
    }
    else
    {
      *((int32x2_t *)&v15 + 1) = v10;
      v122 = v15;
    }
  }
  if (v10.i32[0] <= v10.i32[1])
    v17 = v10.i32[1];
  else
    v17 = v10.i32[0];
  v18.i64[0] = v10.i32[0];
  v18.i64[1] = v10.i32[1];
  v19 = (int8x16_t)vcvtq_f64_s64(v18);
  v20 = vdup_n_s32(v17 > 1073741822);
  v18.i64[0] = v20.u32[0];
  v18.i64[1] = v20.u32[1];
  v21 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v18, 0x3FuLL));
  v22 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v23 = *((int8x16_t *)this + 8);
  v24 = *((int8x16_t *)this + 9);
  v25 = (float64x2_t)v24;
  v26 = (float64x2_t)v23;
  if (v5 != 1.0)
  {
    v27 = v5;
    v7.f64[0] = 1.79769313e308;
    v28 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v7, (float64x2_t)v24).i64[0], 0);
    v29.i64[1] = v23.i64[1];
    *(double *)v29.i64 = v5 * *(double *)v23.i64;
    v26 = (float64x2_t)vbslq_s8(v28, v29, v23);
    v30.i64[1] = *((_QWORD *)this + 19);
    *(double *)v30.i64 = v5 * *(double *)v24.i64;
    v25 = (float64x2_t)vbslq_s8(v28, v30, v24);
    if (v25.f64[1] < 1.79769313e308)
    {
      v26.f64[1] = vmuld_lane_f64(v27, v26, 1);
      v25.f64[1] = v25.f64[1] * v27;
    }
  }
  v31 = v122;
  v32 = (float64x2_t)vbslq_s8(v21, v22, v19);
  if ((*(_DWORD *)(*((_QWORD *)this + 15) + 84) & 0x80000000) == 0)
  {
    v33 = (int8x16_t)vceqzq_f64((float64x2_t)v24);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v33, 1), v33).u64[0] & 0x8000000000000000) != 0
      || (v34 = vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v24), (int8x16_t)vcgezq_f64((float64x2_t)v24)),
          (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v34), 1), v34).u64[0] & 0x8000000000000000) != 0))
    {
      v124[0] = 0uLL;
    }
    else
    {
      v35 = vmaxnmq_f64((float64x2_t)v23, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000));
      v36 = vminnmq_f64(vaddq_f64((float64x2_t)v23, (float64x2_t)v24), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
      v37 = (int32x4_t)vcvtmq_s64_f64(v35);
      v124[0] = vuzp1q_s32(v37, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v36), (int64x2_t)v37));
    }
    v115 = v32;
    MEMORY[0x1E0C80A78](bounds);
    v39 = (CA::CG::ClipItem **)((char *)&v109 - v38);
    bzero((char *)&v109 - v38, v40);
    memset(v126, 0, 56);
    CA::CG::ClipOp::ClipOp(v126, a2, *((const CA::CG::DrawOp **)this + 14), (int32x2_t *)v124, v39, 0.0, v41, v42, v43, v44, v45);
    v49 = v126[0];
    *(int32x2_t *)v48.i8 = v126[1];
    v50 = v126[1].i32[1];
    if (v126[1].i32[0] > v126[1].i32[1])
      v50 = v126[1].i32[0];
    v46.i32[0] = v50;
    v47.i32[0] = 1073741822;
    v51 = vdup_n_s32(v50 > 1073741822);
    v52.i64[0] = v51.u32[0];
    v52.i64[1] = v51.u32[1];
    v53 = v52;
    if (v126[3])
    {
      v54 = *(void (**)(_QWORD))(**(_QWORD **)&v126[3] + 8);
      v113 = v53;
      v114 = v48;
      v111 = v47;
      v112 = v46;
      v54(*(_QWORD *)&v126[3]);
      v47 = v111;
      v46 = v112;
      v53 = v113;
      v48.i64[0] = v114.i64[0];
    }
    v55.i64[0] = v49.i32[0];
    v55.i64[1] = v49.i32[1];
    v56 = v55;
    v57 = vcgtq_s32(v46, v47);
    v55.i64[0] = v48.i32[0];
    v55.i64[1] = v48.i32[1];
    v58 = v55;
    v59 = vshlq_n_s64(v53, 0x3FuLL);
    if (v126[4])
    {
      v60 = *(void (**)(_QWORD))(**(_QWORD **)&v126[4] + 8);
      v113 = (int64x2_t)v57;
      v114 = v56;
      v111 = (int32x4_t)v59;
      v112 = (int32x4_t)v58;
      v60(*(_QWORD *)&v126[4]);
      v59 = (int64x2_t)v111;
      v58 = (int64x2_t)v112;
      v57.i64[0] = v113.i64[0];
      v56 = v114;
    }
    v61 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v57.i8, 0);
    v62 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
    v63 = (int8x16_t)vcvtq_f64_s64(v56);
    v64 = (int8x16_t)vcvtq_f64_s64(v58);
    v65 = (int8x16_t)vcltzq_s64(v59);
    v66 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    if (v126[2])
    {
      v113 = (int64x2_t)v62;
      v114 = (int64x2_t)v61;
      v111 = (int32x4_t)v63;
      v112 = (int32x4_t)v64;
      v109 = v66;
      v110 = v65;
      CA::Shape::unref(*(CA::Shape **)&v126[2]);
      v66 = v109;
      v65 = v110;
      v63 = (int8x16_t)v111;
      v64 = (int8x16_t)v112;
      v62 = (int8x16_t)v113;
      v61 = (int8x16_t)v114;
    }
    v26 = (float64x2_t)vbslq_s8(v61, v62, v63);
    v25 = (float64x2_t)vbslq_s8(v65, v66, v64);
    v32 = v115;
  }
  v67 = (int8x16_t)vclezq_f64(v32);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v67, 1), v67).u64[0] & 0x8000000000000000) == 0)
  {
    v68 = (int8x16_t)vclezq_f64(v25);
    v69 = (int32x4_t)vdupq_laneq_s64((int64x2_t)v68, 1);
    v70 = (int32x4_t)vorrq_s8((int8x16_t)v69, v68);
    if ((v70.i64[0] & 0x8000000000000000) == 0)
    {
      v70.i32[0] = v17;
      v69.i32[0] = 1073741822;
      v71.i64[0] = (int)v31;
      v71.i64[1] = SHIDWORD(v31);
      v72 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v70, v69), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v71));
      v73 = vmaxnmq_f64(v72, v26);
      v74 = vminnmq_f64(vaddq_f64(v72, v32), vaddq_f64(v26, v25));
      v75 = vsubq_f64(v74, v73);
      v76 = (int8x16_t)vclezq_f64(v75);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v76, 1), v76).u64[0] & 0x8000000000000000) == 0)
      {
        v77 = (int8x16_t)vceqzq_f64(v75);
        if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v77, 1), v77).u64[0] & 0x8000000000000000) != 0
          || (v78 = vorrq_s8((int8x16_t)vcltzq_f64(v75), (int8x16_t)vcgezq_f64(v75)),
              (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v78), 1), v78).u64[0] & 0x8000000000000000) != 0))
        {
          v121 = 0uLL;
          v82 = 0;
          v81 = (int32x2_t)-1;
        }
        else
        {
          v79 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v73, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
          v80 = (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(v74, (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v79);
          v121 = vuzp1q_s32(v79, v80);
          v81 = vadd_s32(vmovn_s64((int64x2_t)v79), (int32x2_t)-1);
          v82 = vmovn_s64((int64x2_t)v80);
        }
        v83 = v82.i32[1];
        if (v82.i32[0] <= v82.i32[1])
          v84 = v82.i32[1];
        else
          v84 = v82.i32[0];
        if (v82.i32[0] < v82.i32[1])
          v83 = v82.i32[0];
        if (v84 <= 1073741822 && v83 >= 1)
        {
          v85 = (int8x8_t)vadd_s32(v82, (int32x2_t)0x200000002);
          if (v85.i32[1] < 1 || v85.i32[0] < 1)
            v87 = -1;
          else
            v87 = 0;
          *(int32x2_t *)v121.i8 = v81;
          v121.u64[1] = (unint64_t)vbic_s8(v85, (int8x8_t)vdup_n_s32(v87));
        }
        v88 = (*(uint64_t (**)(uint64_t, uint64_t, int32x4_t *, uint64_t))(*(_QWORD *)v4 + 656))(v4, 1, &v121, 8200);
        if (v88)
        {
          v89 = v88;
          v90 = *(unsigned __int16 *)(v4 + 816);
          v91 = v90 & 0x7000;
          if ((v90 & 0x7000) == 0x3000)
          {
            v90 = v90 & 0xFFFF8FFF | 0x2000;
            *(_WORD *)(v4 + 816) = v90;
          }
          v92 = v90 >> 12;
          if ((v92 & 4) != 0)
            v93 = 0;
          else
            v93 = 0x1E1F1400u >> (8 * (v92 & 7));
          *(_BYTE *)(v88 + 73) = *(_BYTE *)(v88 + 73) & 0xC0 | v93;
          v94 = *(const void **)(v4 + 16);
          memcpy(v126, v94, 0x1E8uLL);
          v126[0] = (int32x2_t)v94;
          *(_QWORD *)(v4 + 16) = v126;
          v125 = 0;
          memset(&v124[2], 0, 32);
          memset(v124, 0, 32);
          v95 = *(_QWORD *)(v4 + 232);
          *(_OWORD *)((char *)v124 + 8) = *(_OWORD *)(v95 + 8);
          v96 = *(_QWORD *)(v95 + 32);
          *((_QWORD *)&v124[1] + 1) = *(_QWORD *)(v95 + 24);
          *(_QWORD *)&v124[2] = v96;
          *(_OWORD *)((char *)&v124[2] + 8) = *(_OWORD *)(v95 + 40);
          *((_QWORD *)&v124[3] + 1) = *(_QWORD *)(v95 + 56);
          v97 = *(_WORD *)(v95 + 68);
          LODWORD(v125) = *(_DWORD *)(v95 + 64);
          HIDWORD(v125) = v97 & 0x5FF;
          memset(v123, 0, sizeof(v123));
          CA::Shape::operator=((uint64_t)v123, &v121);
          *((_QWORD *)&v124[0] + 1) = v123;
          *(_QWORD *)&v124[0] = CA::OGL::Context::set_gstate(v4, (uint64_t)v124);
          CA::OGL::Context::push_surface(v4, v89, 1u, 64, 0);
          CA::CG::DrawOp::render_alpha(*((CA::CG::DrawOp **)this + 14), a2, 0);
          CA::OGL::Context::pop_surface((CA::OGL::Context *)v4);
          CA::OGL::Context::set_gstate(v4, **(_QWORD **)(v4 + 232));
          *(int32x2_t *)(v4 + 16) = v126[0];
          v126[0] = 0;
          *(_WORD *)(v4 + 816) = *(_WORD *)(v4 + 816) & 0x8FFF | v91;
          if (v121.i32[2] <= v121.i32[3])
            v100 = v121.i32[3];
          else
            v100 = v121.i32[2];
          v98.i32[0] = 1073741822;
          v99.i32[0] = v100;
          v101.i64[0] = v121.i32[0];
          v101.i64[1] = v121.i32[1];
          v102 = (double)v121.i32[2];
          v103 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v99, v98), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v101));
          v104 = (double)v121.i32[3];
          if (v100 > 1073741822)
          {
            v102 = 1.79769313e308;
            v104 = 1.79769313e308;
          }
          v118 = (float64x2_t)v103;
          v119 = v102;
          v120 = v104;
          v105 = *((_QWORD *)this + 15);
          v106 = *(float *)(v105 + 80);
          v107 = (float)(*(float *)(v105 + 76) * v5);
          v108 = *((double *)this + 11);
          v116 = 0;
          v117 = v108;
          CA::OGL::emit_large_brim((CA::OGL::Context *)v4, v89, &v118, &v117, &v116, (CA::Mat4Impl *)&CA::identity_transform, 1, v107, 0.0, 0.0, v106);
          CA::OGL::Context::release_surface(v4, v89);
          if (v126[0])
            __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
        }
      }
    }
  }
}

void CA::CG::DrawFocusRingTransparencyLayer::~DrawFocusRingTransparencyLayer(CA::CG::DrawFocusRingTransparencyLayer *this)
{
  CA::CG::TransparencyLayer *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = off_1E1593488;
  v2 = (CA::CG::TransparencyLayer *)*((_QWORD *)this + 20);
  if (v2)
    CA::CG::TransparencyLayer::unref(v2);
  *(_QWORD *)this = off_1E1591C48;
  v3 = (unsigned int *)*((_QWORD *)this + 15);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  CA::CG::DrawOp::~DrawOp(this);
}

{
  CA::CG::TransparencyLayer *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1593488;
  v2 = (CA::CG::TransparencyLayer *)*((_QWORD *)this + 20);
  if (v2)
    CA::CG::TransparencyLayer::unref(v2);
  *(_QWORD *)this = off_1E1591C48;
  v3 = (unsigned int *)*((_QWORD *)this + 15);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::CG::DrawFocusRingTransparencyLayer::draw_shape_and_color(CA::CG::DrawFocusRingTransparencyLayer *this, CA::CG::Renderer *a2)
{
  uint64_t v2;
  int32x2_t *v5;
  float v6;
  uint64_t bounds;
  float64x2_t v8;
  int32x2_t *v9;
  int32x2_t *v10;
  int32x2_t v11;
  uint32x2_t v12;
  int32x2_t v13;
  uint32x2_t v14;
  int32x2_t v15;
  __int128 v16;
  uint32x2_t v17;
  int v18;
  int64x2_t v19;
  int8x16_t v20;
  int32x2_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float64x2_t v26;
  float64x2_t v27;
  double v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  uint64_t v32;
  float64x2_t v33;
  int8x16_t v34;
  int8x16_t v35;
  float64x2_t v36;
  float64x2_t v37;
  int32x4_t v38;
  uint64_t v39;
  CA::CG::ClipItem **v40;
  size_t v41;
  double v42;
  double v43;
  int64x2_t v44;
  double v45;
  float64x2_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int64x2_t v49;
  float64_t v50;
  int v51;
  int32x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  void (*v55)(_QWORD);
  int64x2_t v56;
  int64x2_t v57;
  int32x4_t v58;
  int64x2_t v59;
  int64x2_t v60;
  void (*v61)(_QWORD);
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int64x2_t v72;
  float64x2_t v73;
  int8x16_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int v77;
  int v78;
  int v79;
  int8x16_t v80;
  uint64_t v81;
  int64x2_t v82;
  double v83;
  int8x16_t v84;
  double v85;
  uint64_t v86;
  float v87;
  double v88;
  uint64_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int64x2_t v94;
  int64x2_t v95;
  float64x2_t v96;
  float16x4_t v97;
  uint64_t v98;
  float64x2_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  int32x4_t v103;
  __int128 v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*((_QWORD *)this + 20) + 40);
  if (v2)
  {
    v5 = (int32x2_t *)*((_QWORD *)a2 + 1);
    v6 = *((double *)a2 + 10);
    v104 = 0uLL;
    bounds = CA::Shape::get_bounds(*(_QWORD *)(*(_QWORD *)&v5[29] + 8), (int *)&v104);
    v9 = (int32x2_t *)v5[31];
    if (v9)
      v10 = v9 + 4;
    else
      v10 = v5 + 23;
    v11 = *(int32x2_t *)((char *)&v104 + 8);
    v12 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v104 + 8));
    if ((vpmax_u32(v12, v12).u32[0] & 0x80000000) == 0)
    {
      v13 = v10[1];
      v14 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v13);
      if ((vpmax_u32(v14, v14).u32[0] & 0x80000000) != 0
        || (v15 = vadd_s32(*v10, v13),
            *(int32x2_t *)&v16 = vmax_s32(*(int32x2_t *)&v104, *v10),
            v11 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&v104, *(int32x2_t *)((char *)&v104 + 8)), v15), *(int32x2_t *)&v16), v17 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v11), (vpmax_u32(v17, v17).u32[0] & 0x80000000) != 0))
      {
        v11 = 0;
      }
      else
      {
        *((int32x2_t *)&v16 + 1) = v11;
        v104 = v16;
      }
    }
    if (v11.i32[0] <= v11.i32[1])
      v18 = v11.i32[1];
    else
      v18 = v11.i32[0];
    v19.i64[0] = v11.i32[0];
    v19.i64[1] = v11.i32[1];
    v20 = (int8x16_t)vcvtq_f64_s64(v19);
    v21 = vdup_n_s32(v18 > 1073741822);
    v19.i64[0] = v21.u32[0];
    v19.i64[1] = v21.u32[1];
    v22 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v19, 0x3FuLL));
    v23 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v24 = *((int8x16_t *)this + 8);
    v25 = *((int8x16_t *)this + 9);
    v26 = (float64x2_t)v25;
    v27 = (float64x2_t)v24;
    if (v6 != 1.0)
    {
      v28 = v6;
      v8.f64[0] = 1.79769313e308;
      v29 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v8, (float64x2_t)v25).i64[0], 0);
      v30.i64[1] = v24.i64[1];
      *(double *)v30.i64 = v6 * *(double *)v24.i64;
      v27 = (float64x2_t)vbslq_s8(v29, v30, v24);
      v31.i64[1] = *((_QWORD *)this + 19);
      *(double *)v31.i64 = v6 * *(double *)v25.i64;
      v26 = (float64x2_t)vbslq_s8(v29, v31, v25);
      if (v26.f64[1] < 1.79769313e308)
      {
        v27.f64[1] = vmuld_lane_f64(v28, v27, 1);
        v26.f64[1] = v26.f64[1] * v28;
      }
    }
    v32 = v104;
    v33 = (float64x2_t)vbslq_s8(v22, v23, v20);
    if ((*(_DWORD *)(*((_QWORD *)this + 15) + 84) & 0x80000000) == 0)
    {
      v34 = (int8x16_t)vceqzq_f64((float64x2_t)v25);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v34, 1), v34).u64[0] & 0x8000000000000000) != 0
        || (v35 = vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v25), (int8x16_t)vcgezq_f64((float64x2_t)v25)),
            (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v35), 1), v35).u64[0] & 0x8000000000000000) != 0))
      {
        v103 = 0uLL;
      }
      else
      {
        v36 = vmaxnmq_f64((float64x2_t)v24, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000));
        v37 = vminnmq_f64(vaddq_f64((float64x2_t)v24, (float64x2_t)v25), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
        v38 = (int32x4_t)vcvtmq_s64_f64(v36);
        v103 = vuzp1q_s32(v38, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v37), (int64x2_t)v38));
      }
      v96 = v33;
      MEMORY[0x1E0C80A78](bounds);
      v40 = (CA::CG::ClipItem **)((char *)&v90 - v39);
      bzero((char *)&v90 - v39, v41);
      v102 = 0;
      v100 = 0u;
      v101 = 0u;
      v99 = 0u;
      CA::CG::ClipOp::ClipOp((int32x2_t *)&v99, a2, *((const CA::CG::DrawOp **)this + 14), (int32x2_t *)&v103, v40, 0.0, v42, v43, v44, v45, v46);
      v49.i64[0] = *(_QWORD *)&v99.f64[1];
      v50 = v99.f64[0];
      v51 = HIDWORD(v99.f64[1]);
      if (SLODWORD(v99.f64[1]) > SHIDWORD(v99.f64[1]))
        v51 = LODWORD(v99.f64[1]);
      v47.i32[0] = v51;
      v48.i32[0] = 1073741822;
      v52 = vdup_n_s32(v51 > 1073741822);
      v53.i64[0] = v52.u32[0];
      v53.i64[1] = v52.u32[1];
      v54 = v53;
      if (*((_QWORD *)&v100 + 1))
      {
        v55 = *(void (**)(_QWORD))(**((_QWORD **)&v100 + 1) + 8);
        v95 = v49;
        v94 = v54;
        v93 = v47;
        v92 = v48;
        v55(*((_QWORD *)&v100 + 1));
        v48 = v92;
        v47 = v93;
        v54 = v94;
        v49.i64[0] = v95.i64[0];
      }
      v56.i64[0] = SLODWORD(v50);
      v56.i64[1] = SHIDWORD(v50);
      v57 = v56;
      v58 = vcgtq_s32(v47, v48);
      v56.i64[0] = v49.i32[0];
      v56.i64[1] = v49.i32[1];
      v59 = v56;
      v60 = vshlq_n_s64(v54, 0x3FuLL);
      if ((_QWORD)v101)
      {
        v61 = *(void (**)(_QWORD))(*(_QWORD *)v101 + 8);
        v95 = v57;
        v94 = (int64x2_t)v58;
        v93 = (int32x4_t)v59;
        v92 = (int32x4_t)v60;
        v61(v101);
        v60 = (int64x2_t)v92;
        v59 = (int64x2_t)v93;
        v58.i64[0] = v94.i64[0];
        v57 = v95;
      }
      v62 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v58.i8, 0);
      v63 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
      v64 = (int8x16_t)vcvtq_f64_s64(v57);
      v65 = (int8x16_t)vcvtq_f64_s64(v59);
      v66 = (int8x16_t)vcltzq_s64(v60);
      v67 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      if ((_QWORD)v100)
      {
        v95 = (int64x2_t)v62;
        v94 = (int64x2_t)v63;
        v93 = (int32x4_t)v65;
        v92 = (int32x4_t)v64;
        v91 = v66;
        v90 = v67;
        CA::Shape::unref((CA::Shape *)v100);
        v67 = v90;
        v66 = v91;
        v64 = (int8x16_t)v92;
        v65 = (int8x16_t)v93;
        v63 = (int8x16_t)v94;
        v62 = (int8x16_t)v95;
      }
      v27 = (float64x2_t)vbslq_s8(v62, v63, v64);
      v26 = (float64x2_t)vbslq_s8(v66, v67, v65);
      v33 = v96;
    }
    v68 = (int8x16_t)vclezq_f64(v33);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v68, 1), v68).u64[0] & 0x8000000000000000) == 0)
    {
      v69 = (int8x16_t)vclezq_f64(v26);
      v70 = (int32x4_t)vdupq_laneq_s64((int64x2_t)v69, 1);
      v71 = (int32x4_t)vorrq_s8((int8x16_t)v70, v69);
      if ((v71.i64[0] & 0x8000000000000000) == 0)
      {
        v71.i32[0] = v18;
        v70.i32[0] = 1073741822;
        v72.i64[0] = (int)v32;
        v72.i64[1] = SHIDWORD(v32);
        v73 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v71, v70), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v72));
        v74 = (int8x16_t)vclezq_f64(vsubq_f64(vminnmq_f64(vaddq_f64(v73, v33), vaddq_f64(v27, v26)), vmaxnmq_f64(v73, v27)));
        v75 = (int32x4_t)vdupq_laneq_s64((int64x2_t)v74, 1);
        v76 = (int32x4_t)vorrq_s8((int8x16_t)v75, v74);
        if ((v76.i64[0] & 0x8000000000000000) == 0)
        {
          v77 = *(_DWORD *)(v2 + 40);
          v78 = *(_DWORD *)(v2 + 44);
          if (v77 <= v78)
            v79 = *(_DWORD *)(v2 + 44);
          else
            v79 = *(_DWORD *)(v2 + 40);
          v76.i32[0] = 1073741822;
          v75.i32[0] = v79;
          v80 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v75, v76), 0);
          v81 = *(_QWORD *)(v2 + 32);
          v82.i64[0] = (int)v81;
          v82.i64[1] = SHIDWORD(v81);
          v83 = (double)v77;
          v84 = vbslq_s8(v80, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v82));
          v85 = (double)v78;
          if (v79 > 1073741822)
          {
            v83 = 1.79769313e308;
            v85 = 1.79769313e308;
          }
          v99 = (float64x2_t)v84;
          *(double *)&v100 = v83;
          *((double *)&v100 + 1) = v85;
          v86 = *((_QWORD *)this + 15);
          v87 = *(float *)(v86 + 80);
          v88 = (float)(*(float *)(v86 + 76) * v6);
          v89 = *((_QWORD *)this + 11);
          v97 = 0;
          v98 = v89;
          CA::OGL::emit_large_brim((CA::OGL::Context *)v5, v2, &v99, (double *)&v98, &v97, (CA::Mat4Impl *)&CA::identity_transform, 1, v88, 0.0, 0.0, v87);
        }
      }
    }
  }
}

float16x4_t *CA::CG::DrawFocusRing::DrawFocusRing(float16x4_t *a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CGColor *Color;
  unsigned int *v13;
  unsigned int v14;
  uint64_t Data;
  float v16;
  uint64_t v17;
  int8x16_t v18;
  float64x2_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float64x2_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  double v30;
  float64x2_t v31;
  int8x16_t v32;
  int8x16_t v33;
  char *v34;
  unsigned int *v35;
  int32x4_t *v36;
  int8x16_t v37;
  int8x16_t v38;
  int32x4_t v39;
  unsigned int v40;
  unsigned int v41;
  float64x2_t v43;
  float64x2_t v44;

  Color = (CGColor *)CGStyleGetColor();
  CA::CG::DrawOp::DrawOp((uint64_t)a1, a2, a3, a4, a5, Color, 2048);
  *a1 = (float16x4_t)off_1E1591C48;
  a1[14] = (float16x4_t)a3;
  v13 = (unsigned int *)(a6 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  a1[15] = (float16x4_t)a6;
  Data = CGStyleGetData();
  a1[7].i32[0] = 2;
  v16 = *(double *)(Data + 16);
  if (v16 != 1.0)
    a1[11] = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(a1[11]), v16));
  if ((*(_DWORD *)(*(_QWORD *)&a1[15] + 84) & 0x80000000) == 0)
  {
    v17 = CGStyleGetData();
    v18 = *(int8x16_t *)(v17 + 56);
    v19.f64[0] = 0.0;
    v20 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v19, (float64x2_t)v18).i64[0], 0);
    v21.i64[1] = *(_QWORD *)(v17 + 64);
    *(double *)v21.i64 = -*(double *)v18.i64;
    v22 = vbslq_s8(v20, v21, v18);
    v23 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v19, (float64x2_t)vdupq_laneq_s64((int64x2_t)v18, 1)).i64[0], 0);
    v26 = vnegq_f64((float64x2_t)v18);
    v24.i64[0] = v22.i64[0];
    v24.i64[1] = *(_QWORD *)&v26.f64[1];
    v25 = vbslq_s8(v23, v24, v22);
    *(_QWORD *)&v26.f64[0] = v25.i64[1];
    if (*(double *)v25.i64 < *(double *)&v25.i64[1])
      v26.f64[0] = *(double *)v25.i64;
    v27 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vcgtq_f64(v26, v19)).i64[0], 0);
    v28 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v29 = vbslq_s8(v27, v28, v25);
    v30 = *(double *)&v29.i64[1];
    if (*(double *)v29.i64 > *(double *)&v29.i64[1])
      v30 = *(double *)v29.i64;
    if (v30 < 1.79769313e308)
    {
      v31 = *(float64x2_t *)(v17 + 40);
      v28.i64[0] = 0x8000000000000000;
      v32.i64[0] = *(_OWORD *)&vaddq_f64(v31, (float64x2_t)vbslq_s8(v20, v18, v28));
      v33.i64[0] = v32.i64[0];
      v33.i64[1] = *(_QWORD *)(v17 + 48);
      v32.i64[1] = *(_QWORD *)&vaddq_f64(*(float64x2_t *)&v18, v31).f64[1];
      v43 = (float64x2_t)vbslq_s8(v27, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), vbslq_s8(v23, v32, v33));
      v44 = (float64x2_t)v29;
      v34 = (char *)malloc_type_malloc(0x38uLL, 0x100004021716A34uLL);
      v35 = (unsigned int *)v34;
      v36 = (int32x4_t *)(v34 + 40);
      *(_DWORD *)v34 = 1;
      *(float64x2_t *)(v34 + 8) = v43;
      *(float64x2_t *)(v34 + 24) = v44;
      v37 = (int8x16_t)vceqzq_f64(v44);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v37, 1), v37).u64[0] & 0x8000000000000000) != 0
        || (v38 = vorrq_s8((int8x16_t)vcltzq_f64(v44), (int8x16_t)vcgezq_f64(v44)),
            (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v38), 1), v38).u64[0] & 0x8000000000000000) != 0))
      {
        v36->i64[0] = 0;
        *((_QWORD *)v34 + 6) = 0;
      }
      else
      {
        v39 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v43, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        *v36 = vuzp1q_s32(v39, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v43, v44), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v39));
      }
      *((_DWORD *)v34 + 1) = 0;
      CA::CG::DrawOp::set_clip_stack((CA::CG::DrawOp *)a1, (const CA::CG::ClipStack *)v34);
      do
      {
        v40 = __ldaxr(v35);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v35));
      if (!v41)
        CA::CG::ClipStack::destroy_clip_stack((void (***)(char *))v35);
    }
    else
    {
      CA::CG::DrawOp::set_clip_stack((CA::CG::DrawOp *)a1, 0);
    }
  }
  return a1;
}

void CA::CG::FillRects::~FillRects(CA::CG::FillRects *this)
{
  malloc_zone_t *malloc_zone;

  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::CG::FillRects::compute_dod_corners(uint64_t a1, float64x2_t *a2, float64x2_t a3, double a4, double a5, double a6, int8x16_t a7)
{
  float64x2_t v7;
  int8x16_t v8;
  float64x2_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  float64x2_t v16;
  float64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float64x2_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float64x2_t v26;
  float64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int32x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  uint64_t v34;
  const double *v35;
  const double *v36;
  const double *v37;
  const double *v38;
  const double *v39;
  const double *v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  double *f64;
  float64x2x2_t v49;
  float64x2x2_t v50;

  v7 = *(float64x2_t *)(a1 + 136);
  a3.f64[0] = 0.0;
  v8 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a3, v7).i64[0], 0);
  v9 = *(float64x2_t *)(a1 + 120);
  v10.i64[1] = *(_QWORD *)(a1 + 144);
  *(double *)v10.i64 = -v7.f64[0];
  a7.i64[0] = 0x8000000000000000;
  v11.i64[0] = *(_OWORD *)&vaddq_f64(v9, (float64x2_t)vbslq_s8(v8, (int8x16_t)v7, a7));
  v12.i64[0] = v11.i64[0];
  v12.i64[1] = *(_QWORD *)(a1 + 128);
  v13 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a3, (float64x2_t)vdupq_laneq_s64((int64x2_t)v7, 1)).i64[0], 0);
  v14 = vbslq_s8(v8, v10, (int8x16_t)v7);
  v15.i64[0] = v14.i64[0];
  v15.i64[1] = *(_QWORD *)&vnegq_f64(v7).f64[1];
  v16 = (float64x2_t)vbslq_s8(v13, v15, v14);
  v11.i64[1] = *(_QWORD *)&vaddq_f64(v7, v9).f64[1];
  v17 = (float64x2_t)vbslq_s8(v13, v11, v12);
  v18 = *(_QWORD *)(a1 + 112);
  if (v18 >= 2)
  {
    v19 = a1 + 168;
    v20 = v18 - 1;
    while (1)
    {
      v21 = *(float64x2_t *)(v19 - 16);
      v22 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a3, *(float64x2_t *)v19).i64[0], 0);
      v23.i64[1] = *(_QWORD *)(v19 + 8);
      *(double *)v23.i64 = -*(double *)v19;
      v24 = vbslq_s8(v22, v23, *(int8x16_t *)v19);
      v23.i64[0] = 0x8000000000000000;
      v22.i64[0] = *(_OWORD *)&vaddq_f64(v21, (float64x2_t)vbslq_s8(v22, *(int8x16_t *)v19, v23));
      v23.i64[0] = v22.i64[0];
      v23.i64[1] = *(_QWORD *)(v19 - 8);
      v25 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a3, (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)v19, 1)).i64[0], 0);
      v22.i64[1] = *(_QWORD *)&vaddq_f64(*(float64x2_t *)v19, v21).f64[1];
      *(_QWORD *)&v21.f64[0] = v24.i64[0];
      v21.f64[1] = vnegq_f64(*(float64x2_t *)v19).f64[1];
      v26 = (float64x2_t)vbslq_s8(v25, v22, v23);
      v27 = (float64x2_t)vbslq_s8(v25, (int8x16_t)v21, v24);
      v28 = vclezq_f64(v16);
      v29 = vclezq_f64(v27);
      v30 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v29, v28), (int8x16_t)vzip2q_s64(v29, v28))));
      if ((v30.i8[4] & 1) != 0)
        break;
      if ((v30.i8[0] & 1) == 0)
      {
        v31 = vaddq_f64(v26, v27);
        v26 = vminnmq_f64(v17, v26);
        v27 = vsubq_f64(vmaxnmq_f64(vaddq_f64(v17, v16), v31), v26);
LABEL_8:
        v16 = v27;
        v17 = v26;
      }
LABEL_9:
      v19 += 32;
      if (!--v20)
        goto LABEL_10;
    }
    if ((v30.i8[0] & 1) != 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_10:
  v32 = vaddq_f64(v16, v17);
  v33.f64[0] = v32.f64[0];
  v33.f64[1] = v17.f64[1];
  *a2 = v17;
  a2[1] = v33;
  v17.f64[1] = v32.f64[1];
  a2[2] = v32;
  a2[3] = v17;
  if ((*(_BYTE *)(a1 + 100) & 4) == 0)
  {
    v34 = 0;
    v35 = (const double *)(a1 + 48);
    v36 = (const double *)(a1 + 8);
    v37 = (const double *)(a1 + 32);
    v38 = (const double *)(a1 + 16);
    v39 = (const double *)(a1 + 40);
    v40 = (const double *)(a1 + 24);
    v41 = vld1q_dup_f64(v36);
    v42 = vld1q_dup_f64(v40);
    v43 = vld1q_dup_f64(v39);
    v44 = vld1q_dup_f64(v38);
    v45 = vld1q_dup_f64(v37);
    v46 = vld1q_dup_f64(v35);
    do
    {
      f64 = a2[v34].f64;
      v49 = vld2q_f64(f64);
      v50.val[0] = vmlaq_f64(vmlaq_f64(v43, v49.val[0], v41), v49.val[1], v42);
      v50.val[1] = vmlaq_f64(vmlaq_f64(v46, v49.val[0], v44), v49.val[1], v45);
      vst2q_f64(f64, v50);
      v34 += 2;
    }
    while (v34 != 4);
  }
  return 1;
}

char *CA::CG::FillRects::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  malloc_zone_t *malloc_zone;
  _QWORD *v13;
  CGColor *Color;
  unsigned int *v15;
  unsigned int v16;

  if (vabdd_f64(*(double *)(a1 + 8) * *(double *)(a1 + 8) + *(double *)(a1 + 16) * *(double *)(a1 + 16), *(double *)(a1 + 24) * *(double *)(a1 + 24) + *(double *)(a1 + 32) * *(double *)(a1 + 32)) >= 0.001)return CA::CG::DrawOp::styled_op(a1, a2, a3, a4, a5);
  v10 = *(_DWORD *)(a1 + 100);
  if ((v10 & 0x1000000) == 0
    && CA::CG::rects_intersect((CA::CG *)(a1 + 120), *(const CGRect **)(a1 + 112), *(float *)(a3 + 76)))
  {
    return CA::CG::DrawOp::styled_op(a1, a2, a3, a4, a5);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v13 = malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
  if (v13)
  {
    Color = (CGColor *)CGStyleGetColor();
    CA::CG::DrawOp::DrawOp((uint64_t)v13, a2, a1, a4, a5, Color, v10 & 4 | 0x840);
    *v13 = off_1E1591088;
    v13[18] = a1;
    v15 = (unsigned int *)(a3 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    v13[19] = a3;
    *v13 = off_1E15923C8;
  }
  return (char *)v13;
}

{
  malloc_zone_t *malloc_zone;
  char *v11;
  CGColor *Color;
  unsigned int *v13;
  unsigned int v14;
  double *BaseCTM;
  double v16;
  double v17;
  double v18;
  double v19;
  malloc_zone_t *v20;
  char *v21;
  unsigned int *v22;
  float v23;
  double v24;
  __int128 v25;
  __int128 v26;
  float v27;
  malloc_zone_t *v28;
  CGColor *v29;
  __int128 v30;
  __int128 v31;
  malloc_zone_t *v32;
  uint64_t *v33;
  unsigned int *v34;
  unsigned int v35;
  int ShouldAntialias;
  int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  double v43[2];

  v43[1] = *(double *)MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 80))
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v11 = (char *)malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
    if (v11)
    {
      Color = (CGColor *)CGStyleGetColor();
      CA::CG::DrawOp::DrawOp((uint64_t)v11, a2, a1, a4, a5, Color, 2048);
      *(_QWORD *)v11 = off_1E15925A8;
      *((_QWORD *)v11 + 14) = a1;
      v13 = (unsigned int *)(a3 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      *((_QWORD *)v11 + 15) = a3;
    }
  }
  else
  {
    BaseCTM = (double *)CGRenderingStateGetBaseCTM();
    v16 = *BaseCTM;
    v17 = BaseCTM[1];
    v18 = BaseCTM[2];
    v19 = BaseCTM[3];
    v20 = (malloc_zone_t *)get_malloc_zone();
    v21 = (char *)malloc_type_zone_malloc(v20, 0x60uLL, 0x8BB15036uLL);
    v22 = (unsigned int *)v21;
    if (v21)
    {
      v23 = v18 * v17 + v19 * v16;
      if (v23 < 0.0)
        v23 = -v23;
      v24 = *(double *)(a3 + 80);
      *((_QWORD *)v21 + 1) = 0;
      *((_QWORD *)v21 + 2) = 0;
      *(_QWORD *)v21 = off_1E1593750;
      v26 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
      v25 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
      *(_OWORD *)(v21 + 24) = *MEMORY[0x1E0C9BAA8];
      *(_OWORD *)(v21 + 40) = v26;
      *(_OWORD *)(v21 + 56) = v25;
      *((_DWORD *)v21 + 18) = 0;
      *((_DWORD *)v21 + 2) = 1;
      *(_QWORD *)v21 = off_1E15915C8;
      v27 = v24 * sqrtf(v23);
      *((float *)v21 + 19) = v27;
      *((_QWORD *)v21 + 10) = 0;
      *((_WORD *)v21 + 44) = 0;
    }
    v28 = (malloc_zone_t *)get_malloc_zone();
    v11 = (char *)malloc_type_zone_malloc(v28, 0xA0uLL, 0x8BB15036uLL);
    if (v11)
    {
      v29 = (CGColor *)CGStyleGetColor();
      *(_QWORD *)v11 = off_1E1593790;
      v30 = *(_OWORD *)(a1 + 8);
      v31 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)(v11 + 40) = *(_OWORD *)(a1 + 40);
      *(_OWORD *)(v11 + 24) = v31;
      *(_OWORD *)(v11 + 8) = v30;
      *((_DWORD *)v11 + 14) = *(_DWORD *)(a1 + 56);
      if (*(_QWORD *)(a1 + 64))
      {
        v32 = (malloc_zone_t *)get_malloc_zone();
        v33 = (uint64_t *)malloc_type_zone_malloc(v32, 0x18uLL, 0x8BB15036uLL);
        if (v33)
          v33 = CA::CG::BasicState::SoftMask::SoftMask(v33);
      }
      else
      {
        v33 = 0;
      }
      *((_QWORD *)v11 + 8) = v33;
      v34 = *(unsigned int **)(a1 + 72);
      if (v34)
      {
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 + 1, v34));
      }
      *((_QWORD *)v11 + 9) = v34;
      v43[0] = 1.10008428e-19;
      CA::CG::DeviceColor::DeviceColor((double *)v11 + 10, v29, a4, a5, a2, v43);
      ShouldAntialias = CGGStateGetShouldAntialias();
      if (ShouldAntialias)
        ShouldAntialias = CGRenderingStateGetAllowsAntialiasing();
      if (v29)
        v37 = 2114;
      else
        v37 = 2112;
      *((_DWORD *)v11 + 25) = v37 | ShouldAntialias | *(_DWORD *)(a1 + 100) & 0x1100;
      *((_QWORD *)v11 + 13) = 0;
      *(_QWORD *)v11 = off_1E1591088;
      *((_QWORD *)v11 + 18) = a1;
      v38 = v22 + 2;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 + 1, v38));
      *((_QWORD *)v11 + 19) = v22;
      *(_QWORD *)v11 = off_1E15923C8;
    }
    *((_QWORD *)v11 + 11) = *(_QWORD *)(a1 + 88);
    v40 = v22 + 2;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (v22 && v41 == 1)
      (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
  }
  return v11;
}

uint64_t CA::CG::DrawRects::debug_color(CA::CG::DrawRects *this)
{
  return 2376676064;
}

BOOL CA::CG::rects_intersect(CA::CG *this, const CGRect *a2, double a3)
{
  uint64_t v3;
  unint64_t v4;
  double v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  BOOL v9;
  double v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD v21[2];
  void ***v22;
  _QWORD v23[2];
  __int128 v24;
  _QWORD v25[509];

  v5 = MEMORY[0x1E0C80A78](this);
  v25[508] = *MEMORY[0x1E0C80C00];
  if (v4 >= 2)
  {
    v10 = v5;
    v11 = v4;
    v12 = 0;
    v23[0] = 0;
    v23[1] = v25;
    v24 = xmmword_18474E260;
    v21[1] = v23;
    v22 = (void ***)v23;
    v20 = 0;
    v21[0] = 0;
    v18 = v21;
    v19 = 0;
    v13 = v5 * -2.0;
    v14 = v3 + 16;
    v9 = 1;
    do
    {
      v7.n128_u64[0] = *(_QWORD *)v14;
      v8.n128_u64[0] = *(_QWORD *)(v14 + 8);
      v15 = *(double *)(v14 - 16) + fmin(*(double *)v14, -0.0);
      if (*(double *)v14 < 0.0)
        v7.n128_f64[0] = -*(double *)v14;
      v6.n128_f64[0] = *(double *)(v14 - 8) + fmin(v8.n128_f64[0], -0.0);
      if (v8.n128_f64[0] < 0.0)
        v8.n128_f64[0] = -v8.n128_f64[0];
      if (v10 > 0.0)
      {
        v16 = v7.n128_f64[0] <= v8.n128_f64[0] ? v8.n128_f64[0] : v7.n128_f64[0];
        if (v16 < 1.79769313e308)
        {
          v15 = v15 - v10;
          v6.n128_f64[0] = v6.n128_f64[0] - v10;
          v7.n128_f64[0] = v7.n128_f64[0] - v13;
          v8.n128_f64[0] = v8.n128_f64[0] - v13;
          if (v7.n128_f64[0] <= 0.0 || v8.n128_f64[0] <= 0.0)
          {
            v7.n128_f64[0] = 0.0;
            v8.n128_f64[0] = 0.0;
          }
        }
      }
      v7.n128_f64[0] = v7.n128_f64[0] + v15;
      v8.n128_f64[0] = v8.n128_f64[0] + v6.n128_f64[0];
      CA::GenericRectTree<CA::Rect>::insert_node((uint64_t)&v18, (uint64_t *)&v19, v15, v6, v7, v8);
      if ((_BYTE)v20)
        break;
      v9 = ++v12 < v11;
      v14 += 32;
    }
    while (v11 != v12);
    if (v19)
      CA::GenericRectTree<CA::Rect>::Pool::delete_node((uint64_t)v18, v19);
    x_heap_free(v22);
  }
  else
  {
    return 0;
  }
  return v9;
}

void CA::CG::StrokeRects::~StrokeRects(CA::CG::StrokeRects *this)
{
  *(_QWORD *)this = off_1E1591610;
  if (*((_QWORD *)this + 17))
    CGDashRelease();
  CA::CG::DrawOp::~DrawOp(this);
}

{
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1591610;
  if (*((_QWORD *)this + 17))
    CGDashRelease();
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

double *CA::CG::StrokeRects::compute_dod(CA::CG::StrokeRects *this, CA::Rect *a2)
{
  float64x2_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  int8x16_t v8;
  float64x2_t *v9;
  float64x2_t v10;
  float64x2_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  float64x2_t v17;
  BOOL v18;
  int8x16_t v19;
  int8x16_t v20;
  float64x2_t v21;
  double v22;
  double v23;

  if (!*((_QWORD *)this + 14))
  {
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
LABEL_17:
    *((_QWORD *)a2 + 2) = 0x3EB0C6F7A0B5ED8DLL;
    goto LABEL_18;
  }
  CA::Rect::operator=((double *)a2, (double *)this + 20);
  v5 = *((_QWORD *)this + 14);
  v6 = v5 > 1;
  v7 = v5 - 1;
  if (v6)
  {
    v8 = *(int8x16_t *)a2;
    v21 = *((float64x2_t *)a2 + 1);
    v9 = (float64x2_t *)((char *)this + 208);
    v4.f64[0] = 0.0;
    v10 = v21;
    while (1)
    {
      v11 = v9[-1];
      v12 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v4, *v9).i64[0], 0);
      v13.i64[1] = *(_QWORD *)&v9->f64[1];
      *(double *)v13.i64 = -v9->f64[0];
      v14 = vbslq_s8(v12, v13, *(int8x16_t *)v9);
      v13.i64[0] = 0x8000000000000000;
      v12.i64[0] = *(_OWORD *)&vaddq_f64(v11, (float64x2_t)vbslq_s8(v12, *(int8x16_t *)v9, v13));
      v13.i64[0] = v12.i64[0];
      v13.i64[1] = *(_QWORD *)&v9[-1].f64[1];
      v15 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v4, (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)v9, 1)).i64[0], 0);
      v12.i64[1] = *(_QWORD *)&vaddq_f64(*v9, v11).f64[1];
      v16 = vbslq_s8(v15, v12, v13);
      v12.i64[0] = v14.i64[0];
      v12.i64[1] = *(_QWORD *)&vnegq_f64(*v9).f64[1];
      v17 = (float64x2_t)vbslq_s8(v15, v12, v14);
      v18 = v17.f64[0] < 0.0;
      if (v17.f64[1] < 0.0)
        v18 = 1;
      if (v10.f64[0] < 0.0 || v10.f64[1] < 0.0)
      {
        if (!v18)
          goto LABEL_12;
      }
      else if (!v18)
      {
        v19 = (int8x16_t)vaddq_f64((float64x2_t)v8, v10);
        v20 = (int8x16_t)vaddq_f64((float64x2_t)v16, v17);
        v16 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v16, (float64x2_t)v8), v8, v16);
        v17 = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v19, (float64x2_t)v20), v19, v20), (float64x2_t)v16);
LABEL_12:
        *(int8x16_t *)a2 = v16;
        *((float64x2_t *)a2 + 1) = v17;
        v21.f64[0] = v17.f64[0];
        v8 = v16;
        v10 = v17;
      }
      v9 += 2;
      if (!--v7)
        goto LABEL_16;
    }
  }
  v21.f64[0] = *((float64_t *)a2 + 2);
LABEL_16:
  if (v21.f64[0] == 0.0)
    goto LABEL_17;
LABEL_18:
  if (*((double *)a2 + 3) == 0.0)
    *((_QWORD *)a2 + 3) = 0x3EB0C6F7A0B5ED8DLL;
  if ((*((_BYTE *)this + 100) & 4) == 0)
    CA::Rect::apply_transform((float64x2_t *)a2, (const CGAffineTransform *)((char *)this + 8));
  v22 = CA::CG::stroke_radius((uint64_t)this + 120, *(float64x2_t *)((char *)this + 8), *(float64x2_t *)((char *)this + 24));
  return CA::BoundsImpl::inset_point((double *)a2, -v22, -v23);
}

BOOL CA::CG::StrokeRects::shape_type(CA::CG::StrokeRects *this, CA::CG::Renderer *a2)
{
  const CGRect *v2;

  v2 = (const CGRect *)*((_QWORD *)this + 14);
  return (unint64_t)v2 >= 2
      && (*((_BYTE *)this + 103) & 1) == 0
      && CA::CG::rects_intersect((CA::CG::StrokeRects *)((char *)this + 160), v2, *((double *)this + 16) * 0.5);
}

void CA::CG::StrokeRects::draw_shape(CA::CG::StrokeRects *this, CA::CG::Renderer *a2)
{
  uint64_t v4;
  int v5;
  double v6;
  CGPath *Mutable;
  int8x16_t v8;
  int8x16_t v9;
  unint64_t v10;
  double *v11;
  float64x2_t v12;
  int8x16_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  unint64_t v19;
  double v20;
  CGFloat v21;
  CGFloat v22;
  double v23;
  uint64_t v24;
  double *v25;
  unint64_t v26;
  unint64_t v27;
  double *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int v42;
  int v43;
  double v44;
  double *v45;
  double *v46;
  int8x16_t v47;
  int8x16_t v48;
  uint64_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  _OWORD v54[9];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 17))
    goto LABEL_3;
  v4 = *((_QWORD *)a2 + 1);
  v5 = *((_DWORD *)this + 25);
  CA::CG::DrawOp::shape_line_width((uint64_t)this, (const double *)a2, *((double *)this + 15));
  if (v6 < 0.0)
    goto LABEL_3;
  v23 = v6;
  if (v6 < 0.001)
    return;
  if (!*((_DWORD *)this + 39))
  {
    if (v6 <= 1.5 || *((double *)this + 18) >= 1.41421356)
      goto LABEL_22;
LABEL_3:
    Mutable = CGPathCreateMutable();
    if (*((_QWORD *)this + 14))
    {
      v10 = 0;
      v11 = (double *)((char *)this + 184);
      v8.i64[0] = 0x3F50624DD2F1A9FCLL;
      v48 = v8;
      v12.f64[0] = NAN;
      v12.f64[1] = NAN;
      v13 = (int8x16_t)vnegq_f64(v12);
      v47 = v13;
      do
      {
        v14 = *(v11 - 3);
        v15 = *(v11 - 2);
        v13.i64[0] = *(uint64_t *)(v11 - 1);
        v9.i64[0] = *(uint64_t *)v11;
        v16 = -*(double *)v13.i64;
        if (*(double *)v13.i64 >= 0.0)
          v16 = *(v11 - 1);
        *(_QWORD *)&v17 = vbslq_s8(v47, v48, v13).u64[0];
        if (v16 < *(double *)v48.i64)
          *(double *)v13.i64 = v17;
        v18 = -*(double *)v9.i64;
        if (*(double *)v9.i64 >= 0.0)
          v18 = *v11;
        v19 = vbslq_s8(v47, v48, v9).u64[0];
        if (v18 >= *(double *)v48.i64)
          v20 = *v11;
        else
          v20 = *(double *)&v19;
        v21 = *(double *)v13.i64 + v14;
        CGPathMoveToPoint(Mutable, 0, *(double *)v13.i64 + v14, *(v11 - 2));
        CGPathAddLineToPoint(Mutable, 0, v14, v15);
        v22 = v20 + v15;
        CGPathAddLineToPoint(Mutable, 0, v14, v22);
        CGPathAddLineToPoint(Mutable, 0, v21, v22);
        CGPathCloseSubpath(Mutable);
        ++v10;
        v11 += 4;
      }
      while (v10 < *((_QWORD *)this + 14));
    }
    CA::CG::stroke_path((uint64_t)a2, (uint64_t)Mutable, 0, (uint64_t)this + 8, (uint64_t)this + 120);
    CFRelease(Mutable);
    return;
  }
  if (v6 > 1.5)
    goto LABEL_3;
LABEL_22:
  v24 = 88;
  if ((v5 & 4) == 0)
    v24 = 32;
  v49 = v24;
  if ((v5 & 4) != 0)
    v25 = (double *)((char *)a2 + 88);
  else
    v25 = (double *)((char *)a2 + 32);
  v26 = *((_QWORD *)this + 14);
  if (v26)
  {
    v27 = 0;
    v28 = (double *)((char *)this + 184);
    do
    {
      v29 = *(v28 - 3);
      v30 = *(v28 - 2);
      v50 = v29;
      v51 = v30;
      v31 = *(v28 - 1);
      v32 = *v28;
      v52 = v31;
      v53 = v32;
      if (v31 < 0.0)
      {
        v29 = v31 + v29;
        v31 = -v31;
        v50 = v29;
        v52 = v31;
      }
      if (v32 < 0.0)
      {
        v30 = v32 + v30;
        v32 = -v32;
        v51 = v30;
        v53 = v32;
      }
      if (v31 <= v32)
        v33 = v32;
      else
        v33 = v31;
      if (v33 < 1.79769313e308)
      {
        if (v31 == 0.0)
          v34 = v31;
        else
          v34 = v23 * -0.5;
        if (v32 == 0.0)
          v35 = v32;
        else
          v35 = v23 * -0.5;
        v50 = v29 + v35;
        v51 = v30 + v34;
        v52 = v31 - v35 * 2.0;
        v53 = v32 - v34 * 2.0;
        if (v52 <= 0.0 || v32 - v34 * 2.0 <= 0.0)
        {
          v52 = 0.0;
          v53 = 0.0;
        }
        v36 = CA::CG::mat2_filter_bits((uint64_t)v25);
        v42 = CA::CG::rect_filter_bits((uint64_t)&v50, v25, v36, v37, v38, v39, v40, v41);
        v58 = 0;
        v43 = v42 | 0x100000;
        v56 = 0u;
        v57 = 0u;
        v55 = 0u;
        v44 = *(double *)((char *)a2 + v49);
        memset(v54, 0, sizeof(v54));
        CA::Transform::set_affine((CA::Transform *)v54, v44, v25[1], v25[2], v25[3], v25[4], v25[5]);
        *((_QWORD *)&v55 + 1) = &v50;
        *(_QWORD *)&v56 = v54;
        DWORD2(v56) = v43;
        HIDWORD(v56) = (v5 << 31 >> 31);
        v58 = 0;
        v57 = 0uLL;
        CA::OGL::stroke_rect(v4, (const CA::Transform **)&v55 + 1, v45, v46, v23);
        v26 = *((_QWORD *)this + 14);
      }
      ++v27;
      v28 += 4;
    }
    while (v27 < v26);
  }
}

void CA::CG::DrawTransparencyLayer::~DrawTransparencyLayer(CA::CG::DrawTransparencyLayer *this)
{
  CA::CG::TransparencyLayer *v2;

  *(_QWORD *)this = off_1E1592FD8;
  v2 = (CA::CG::TransparencyLayer *)*((_QWORD *)this + 14);
  if (v2)
    CA::CG::TransparencyLayer::unref(v2);
  CA::CG::DrawOp::~DrawOp(this);
}

{
  CA::CG::TransparencyLayer *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1592FD8;
  v2 = (CA::CG::TransparencyLayer *)*((_QWORD *)this + 14);
  if (v2)
    CA::CG::TransparencyLayer::unref(v2);
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::CG::DrawTransparencyLayer::invalidate(CA::CG::DrawTransparencyLayer *this, CA::CG::Renderer *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *((_QWORD *)this + 13);
  if (v4)
    (*(void (**)(uint64_t, CA::CG::Renderer *))(*(_QWORD *)v4 + 16))(v4, a2);
  v5 = *((_QWORD *)this + 14);
  v6 = *(_QWORD *)(v5 + 40);
  if (v6)
  {
    CA::OGL::Context::release_surface(*((_QWORD *)a2 + 1), v6);
    *(_QWORD *)(v5 + 40) = 0;
  }
}

__n128 CA::CG::DrawTransparencyLayer::compute_dod(CA::CG::DrawTransparencyLayer *this, __n128 *a2)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  __n128 result;

  v2 = *((_QWORD *)this + 14);
  if (*(_QWORD *)(v2 + 40)
    || ((v3 = *((_DWORD *)this + 14), v3 <= 9) ? (v4 = ((0x164u >> v3) & 1) == 0) : (v4 = 0), v4))
  {
    *a2 = *(__n128 *)(v2 + 8);
    result = *(__n128 *)(v2 + 24);
    a2[1] = result;
  }
  return result;
}

float16x4_t *CA::CG::DrawTransparencyLayer::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  malloc_zone_t *malloc_zone;
  float16x4_t *result;
  unsigned int *v12;
  unsigned int v13;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = (float16x4_t *)malloc_type_zone_malloc(malloc_zone, 0xA8uLL, 0x8BB15036uLL);
  if (result)
  {
    v12 = *(unsigned int **)(a1 + 112);
    result = CA::CG::DrawFocusRing::DrawFocusRing(result, a2, a1, a4, a5, a3);
    *result = (float16x4_t)off_1E1593488;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    result[20] = (float16x4_t)v12;
  }
  return result;
}

_QWORD *CA::CG::DrawTransparencyLayer::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  malloc_zone_t *malloc_zone;
  _QWORD *v11;
  unsigned int *v12;
  CGColor *Color;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v11 = malloc_type_zone_malloc(malloc_zone, 0xA8uLL, 0x8BB15036uLL);
  if (v11)
  {
    v12 = *(unsigned int **)(a1 + 112);
    Color = (CGColor *)CGStyleGetColor();
    CA::CG::DrawOp::DrawOp((uint64_t)v11, a2, a1, a4, a5, Color, 2048);
    *v11 = off_1E15925A8;
    v11[14] = a1;
    v14 = (unsigned int *)(a3 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    v11[15] = a3;
    *v11 = off_1E1593620;
    do
      v16 = __ldaxr(v12);
    while (__stlxr(v16 + 1, v12));
    v11[20] = v12;
  }
  return v11;
}

{
  malloc_zone_t *malloc_zone;
  _QWORD *v11;
  unsigned int *v12;
  CGColor *Color;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v11 = malloc_type_zone_malloc(malloc_zone, 0xA8uLL, 0x8BB15036uLL);
  if (v11)
  {
    v12 = *(unsigned int **)(a1 + 112);
    Color = (CGColor *)CGStyleGetColor();
    CA::CG::DrawOp::DrawOp((uint64_t)v11, a2, a1, a4, a5, Color, 2048);
    *v11 = off_1E1592230;
    v11[14] = a1;
    v14 = (unsigned int *)(a3 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    v11[15] = a3;
    *v11 = off_1E1593558;
    do
      v16 = __ldaxr(v12);
    while (__stlxr(v16 + 1, v12));
    v11[20] = v12;
  }
  return v11;
}

BOOL CA::CG::DrawTransparencyLayer::shape_extent_contains(CA::CG::DrawTransparencyLayer *this, CA::CG::Renderer *a2, const CA::Shape *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*((_QWORD *)this + 14) + 40);
  return v3 && CA::Bounds::contains((CA::Bounds *)(v3 + 32), (uint64_t)a3);
}

uint64_t CA::CG::DrawTransparencyLayer::debug_color(CA::CG::DrawTransparencyLayer *this)
{
  return 0;
}

uint64_t CA::CG::DrawTransparencyLayer::color_type(CA::CG::DrawTransparencyLayer *this, CA::CG::Renderer *a2)
{
  return 0;
}

uint64_t CA::CG::DrawTransparencyLayer::draw_color(CA::CG::DrawTransparencyLayer *this, CA::CG::Renderer *a2, const CA::Shape *a3)
{
  CA::OGL::Context *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  double v15;
  double v16;
  int32x4_t v17;
  int32x4_t v18;
  int v19;
  int v20;
  int v21;
  int8x16_t v22;
  uint64_t v23;
  int64x2_t v24;
  int8x16_t v25;
  double v26;
  double v27;
  double *v28;
  int8x16_t v29;
  float64x2_t v30;
  _QWORD v31[6];
  _BYTE v32[200];
  _QWORD v33[3];

  v33[2] = *MEMORY[0x1E0C80C00];
  v3 = (CA::OGL::Context *)*((_QWORD *)a2 + 1);
  v4 = *((_QWORD *)v3 + 2);
  if ((*(_BYTE *)(v4 + 481) & 1) != 0 && *(unsigned __int8 *)(v4 + 480) <= 1u)
  {
    *(_BYTE *)(v4 + 481) &= ~1u;
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  v6 = *((_QWORD *)this + 14);
  v7 = *(_QWORD *)(v6 + 40);
  if (v7)
  {
    v8 = *(double *)(v6 + 48) * *((double *)a2 + 10);
    *(double *)v31 = v8;
    v31[1] = 0;
    v31[2] = 0;
    *(double *)&v31[3] = v8;
    v31[4] = 0;
    v31[5] = 0;
    if (v8 == 1.0)
    {
      v13 = 1;
      v14 = 5;
      while (v13 != 6)
      {
        v15 = *(double *)&v31[v13];
        v16 = CA::Mat2Impl::mat2_identity_double[v13++];
        if (v15 != v16)
        {
          v14 = v13 - 2;
          break;
        }
      }
      v9 = v14 < 5;
    }
    else
    {
      v9 = 1;
    }
    CA::OGL::Context::bind_surface((uint64_t)v3, v7, 0, v9, v9, 0.0);
    v19 = *(_DWORD *)(v7 + 40);
    v20 = *(_DWORD *)(v7 + 44);
    if (v19 <= v20)
      v21 = *(_DWORD *)(v7 + 44);
    else
      v21 = *(_DWORD *)(v7 + 40);
    v17.i32[0] = 1073741822;
    v18.i32[0] = v21;
    v22 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v18, v17), 0);
    v23 = *(_QWORD *)(v7 + 32);
    v24.i64[0] = (int)v23;
    v24.i64[1] = SHIDWORD(v23);
    v25 = vbslq_s8(v22, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v24));
    v26 = (double)v19;
    if (v21 > 1073741822)
      v26 = 1.79769313e308;
    v29 = v25;
    if (v21 <= 1073741822)
      v27 = (double)v20;
    else
      v27 = 1.79769313e308;
    v30.f64[0] = v26;
    v30.f64[1] = v27;
    v33[0] = 0;
    v33[1] = vcvt_f32_f64(v30);
    memset(v32, 0, sizeof(v32));
    CA::Transform::set_affine((CA::Transform *)v32, v8, 0.0, 0.0, v8, 0.0, 0.0);
    *(_QWORD *)&v32[152] = &v29;
    *(_QWORD *)&v32[160] = v32;
    memset(&v32[168], 0, 32);
    CA::OGL::fill_rect_tex(v3, (uint64_t)&v32[152], (uint64_t)v33, v28);
    result = CA::OGL::Context::unbind_surface(v3, v7, 0);
    if (v5)
      goto LABEL_24;
  }
  else
  {
    v10 = *((_QWORD *)v3 + 2);
    v11 = *(_QWORD *)(v10 + 8);
    *(_QWORD *)(v10 + 8) = 0;
    result = CA::OGL::emit_shape(v3, *(CA::OGL::Context **)(*((_QWORD *)v3 + 29) + 8), a3);
    *(_QWORD *)(*((_QWORD *)v3 + 2) + 8) = v11;
    if (v5)
LABEL_24:
      *(_BYTE *)(*((_QWORD *)v3 + 2) + 481) |= 1u;
  }
  return result;
}

uint64_t CA::CG::DrawTransparencyLayer::draw_shape_and_color(CA::CG::DrawTransparencyLayer *this, CA::CG::Renderer *a2)
{
  return (*(uint64_t (**)(CA::CG::DrawTransparencyLayer *, CA::CG::Renderer *))(*(_QWORD *)this + 168))(this, a2);
}

BOOL CAPoint3DEqualToPoint(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return a1 == a4 && a2 == a5 && a3 == a6;
}

void sub_1846FC61C(_Unwind_Exception *a1)
{
  void *v1;

  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

uint64_t foreachLayer(void *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[128];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t, void *))(a2 + 16))(a2, a1);
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v4 = (void *)objc_msgSend(a1, "sublayers");
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v20, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v22;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v22 != v7)
          objc_enumerationMutation(v4);
        foreachLayer(*(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * v8++), a2);
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v20, 16);
    }
    while (v6);
  }
  v9 = objc_msgSend(a1, "mask");
  if (v9)
    foreachLayer(v9, a2);
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v10 = (void *)objc_msgSend(a1, "states");
  result = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v15, 16);
  if (result)
  {
    v12 = result;
    v13 = *(_QWORD *)v17;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v17 != v13)
          objc_enumerationMutation(v10);
        objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * v14++), "foreachLayer:", a2);
      }
      while (v12 != v14);
      result = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v15, 16);
      v12 = result;
    }
    while (result);
  }
  return result;
}

uint64_t CA::emit_package_parse_error(CA *this, NSError **a2, NSString *a3)
{
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  result = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unable to parse CAPackage: %@"), a2);
  if (this)
  {
    if (!*(_QWORD *)this)
    {
      v5 = *MEMORY[0x1E0CB2D50];
      v6[0] = result;
      result = objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("CoreAnimationErrorDomain"), 3, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v6, &v5, 1));
      *(_QWORD *)this = result;
    }
  }
  return result;
}

CALayer *recursively_prepare_contents(CALayer *a1)
{
  NSArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CALayer *result;
  _BYTE v8[128];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[CALayer prepareContents](a1, "prepareContents");
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = -[CALayer sublayers](a1, "sublayers");
  v3 = -[NSArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v9, v8, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        recursively_prepare_contents(*(CALayer **)(*((_QWORD *)&v9 + 1) + 8 * v6++));
      }
      while (v4 != v6);
      v4 = -[NSArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v9, v8, 16);
    }
    while (v4);
  }
  result = -[CALayer mask](a1, "mask");
  if (result)
    return (CALayer *)recursively_prepare_contents(result);
  return result;
}

void CA::CG::MetalQueue::~MetalQueue(CA::CG::MetalQueue *this)
{
  malloc_zone_t *malloc_zone;

  CA::CG::AccelQueue::~AccelQueue(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

_QWORD *CA::OGL::BackdropBuffer::copy(CA::OGL::BackdropBuffer *this)
{
  malloc_zone_t *malloc_zone;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v3 = malloc_type_zone_malloc(malloc_zone, 0xE0uLL, 0x8BB15036uLL);
  v4 = v3;
  if (v3)
  {
    v5 = *((_QWORD *)this + 2);
    v3[1] = *((_QWORD *)this + 1);
    v3[2] = v5;
    *v3 = off_1E1595050;
    v3[3] = *((_QWORD *)this + 3);
    v6 = (_DWORD *)*((_QWORD *)this + 4);
    if (v6)
      ++*v6;
    v3[4] = v6;
    v7 = (_DWORD *)*((_QWORD *)this + 5);
    if (v7)
      ++*v7;
    v3[5] = v7;
    *((_OWORD *)v3 + 3) = *((_OWORD *)this + 3);
    CA::Transform::operator=((uint64_t)(v3 + 8), (uint64_t)this + 64);
    v8 = v4[27] & 0xFE | *((_BYTE *)this + 216) & 1;
    *((_BYTE *)v4 + 216) = v8;
    *((_BYTE *)v4 + 216) = *((_BYTE *)this + 216) & 2 | v8 & 0xF9 | 4;
  }
  return v4;
}

float CA::OGL::BackdropBuffer::get_size(CA::OGL::BackdropBuffer *this, unsigned int *a2, unsigned int *a3, float *a4)
{
  uint64_t v4;
  float result;

  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    *a2 = *(_DWORD *)(v4 + 40);
    *a3 = *(_DWORD *)(v4 + 44);
  }
  else
  {
    *a3 = 0;
    *a2 = 0;
  }
  result = *((float *)this + 6);
  *a4 = result;
  return result;
}

uint64_t CA::OGL::`anonymous namespace'::replicate_backdrop_edges(uint64_t a1, uint64_t a2, CA::Shape **a3, int32x2_t *a4, uint64_t *a5, float a6)
{
  const CA::Bounds *v14;
  uint64_t v15;
  int32x2_t v16;
  int64x2_t v17;
  float64x2_t v18;
  int32x2_t v19;
  float v20;
  float v21;
  int32x2_t v22;
  const CA::Shape *v23;
  const int *v24;
  float *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  float64x2_t v39;
  int v40;
  CA::Shape *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  CA::Shape *v48;
  int32x2_t v49;
  uint64_t v50;
  uint64_t v51[3];
  float v52[3];
  int32x2_t v53;
  float v54;
  int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float32x4_t v65;
  __int32 v66;
  float v67;
  __int32 v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  __int32 v75;
  float v76;
  int v77;
  _DWORD v78[14];
  unint64_t v79;
  __int32 v80;
  __int32 v81;
  int v82;
  int v83;
  __int32 v84;
  __int32 v85;
  int v86;
  int v87;
  int v88;
  __int32 v89;
  int v90;
  int v91;
  int v92;
  __int32 v93;
  int v94;
  int v95;
  uint64_t v96[5];

  v96[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 128) = 0;
  v45 = a1 + 818;
  *(_QWORD *)(a1 + 96) = a1 + 818;
  *(_OWORD *)(a1 + 104) = xmmword_18474E060;
  v40 = (int)(16.0 / a6 + 1.0);
  v49 = 0;
  v50 = 0;
  v96[1] = 0;
  v96[2] = 0;
  v96[0] = a2;
  __asm { FMOV            V0.2D, #0.5 }
  v39 = _Q0;
  while (CA::ShapeIterator::iterate(v96, (int *)&v49))
  {
    v15 = 0;
    v16 = vsub_s32(v49, *a4);
    v17.i64[0] = v16.i32[0];
    v17.i64[1] = v16.i32[1];
    v18 = vaddq_f64(vcvtq_f64_s64(v17), v39);
    v19 = (int32x2_t)vcvt_f32_f64(v18);
    v20 = *(float *)v19.i32 + (float)(int)v50;
    v52[1] = *(float *)&v19.i32[1];
    v54 = *(float *)&v19.i32[1] + -0.5;
    v75 = v19.i32[1];
    v77 = HIDWORD(*(_QWORD *)&v19);
    v55 = (int)v19;
    v78[6] = v40;
    v78[7] = HIDWORD(v50);
    v79 = __PAIR64__(HIDWORD(v50), v40);
    v82 = v40;
    v83 = v40;
    v86 = v40;
    v87 = v40;
    v90 = v40;
    v91 = v40;
    v94 = v40;
    v95 = v40;
    v21 = *(float *)&v19.i32[1] + (float)SHIDWORD(v50);
    v78[5] = v49.i32[1];
    v22 = v49;
    v78[13] = HIDWORD(*(_QWORD *)&v22);
    v78[0] = v22;
    v78[8] = v49.i32[0];
    v78[2] = v50;
    v78[1] = v49.i32[1] - v40;
    v78[3] = v40;
    v78[4] = v49.i32[0] - v40;
    v78[10] = v50;
    v78[9] = HIDWORD(v50) + v49.i32[1];
    v78[11] = v40;
    v78[12] = v50 + v49.i32[0];
    v80 = v49.i32[0] - v40;
    v81 = v49.i32[1] - v40;
    v84 = v49.i32[0] - v40;
    v85 = HIDWORD(v50) + v49.i32[1];
    v88 = v50 + v49.i32[0];
    v89 = HIDWORD(v50) + v49.i32[1];
    v92 = v50 + v49.i32[0];
    v93 = v49.i32[1] - v40;
    v52[0] = *(float *)v19.i32 + -0.5;
    v52[2] = v20 + -0.5;
    v53 = vrev64_s32(v19);
    v56 = v21 + -0.5;
    v57 = *(float *)v19.i32 + -0.5;
    v58 = v21 + -1.0;
    v59 = v20 + -0.5;
    v60 = v21 + -1.0;
    v61 = v20 + -1.0;
    v62 = *(float *)&v19.i32[1] + -0.5;
    v63 = v20 + -1.0;
    v64 = v21 + -0.5;
    v65 = vcvt_hight_f32_f64(v19, v18);
    v66 = v19.i32[0];
    v67 = v21 + -1.0;
    v68 = v19.i32[0];
    v69 = v21 + -1.0;
    v70 = v20 + -1.0;
    v71 = v21 + -1.0;
    v72 = v20 + -1.0;
    v73 = v21 + -1.0;
    v74 = v20 + -1.0;
    v76 = v20 + -1.0;
    do
    {
      v48 = (CA::Shape *)CA::Shape::new_shape((CA::Shape *)&v78[4 * v15], v14);
      CA::shape_subtract(&v48, a3, v23, v24);
      v46 = 0;
      v47 = 0;
      v43 = v48;
      v44 = v15;
      v51[0] = (uint64_t)v48;
      v51[1] = 0;
      v51[2] = 0;
      v25 = &v52[4 * v15];
      while (CA::ShapeIterator::iterate(v51, (int *)&v46))
      {
        v26 = v46;
        v27 = HIDWORD(v46);
        v29 = v47;
        v28 = HIDWORD(v47);
        v30 = 6;
        if (!*(_DWORD *)(a1 + 92))
          v30 = 4;
        if ((unint64_t)(*(_QWORD *)(a1 + 128) + 4) > *(_QWORD *)(a1 + 136)
          || (v31 = *(_QWORD *)(a1 + 112)) != 0 && *(_QWORD *)(a1 + 104) + v30 > v31)
        {
          *(_WORD *)(a1 + 816) |= 0x20u;
          CA::OGL::Context::array_flush(a1);
          *(_QWORD *)(a1 + 128) = 0;
          *(_QWORD *)(a1 + 96) = v45;
          *(_OWORD *)(a1 + 104) = xmmword_18474E060;
        }
        CA::OGL::Context::array_rect((_QWORD *)a1, (float)v26 * a6, (float)v27 * a6, (float)(v29 + v26) * a6, (float)(v28 + v27) * a6);
        v32 = *a5;
        v33 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
        *(_QWORD *)(v33 - 160) = *a5;
        *(_QWORD *)(v33 - 112) = v32;
        *(_QWORD *)(v33 - 64) = v32;
        *(_QWORD *)(v33 - 16) = v32;
        v34 = *((_DWORD *)v25 + 2);
        v35 = *((_DWORD *)v25 + 3);
        v36 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
        v37 = *(_QWORD *)v25;
        *(_QWORD *)(v36 - 176) = *(_QWORD *)v25;
        *(_DWORD *)(v36 - 128) = v34;
        *(_DWORD *)(v36 - 124) = HIDWORD(v37);
        *(_DWORD *)(v36 - 80) = v34;
        *(_DWORD *)(v36 - 76) = v35;
        *(_DWORD *)(v36 - 32) = v37;
        *(_DWORD *)(v36 - 28) = v35;
      }
      CA::Shape::unref(v43);
      v15 = v44 + 1;
    }
    while (v44 != 7);
  }
  return CA::OGL::Context::array_flush(a1);
}

void CA::OGL::render_in_place_backdrop_with_color_matrix(CA::OGL::Renderer &,CA::OGL::Layer const*,CA::Render::BackdropGroup *,CA::Rect)::$_0::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  *a4 = 1;
}

void CA::OGL::`anonymous namespace'::BackdropRectState::post_map(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float *v3;
  float v4;
  float v5;

  if (a3)
  {
    v3 = (float *)(a2 + 8);
    do
    {
      v4 = v3[1];
      if (v4 != 1.0)
      {
        v5 = 1.0 / v4;
        *((float32x2_t *)v3 - 1) = vmul_n_f32(*(float32x2_t *)(v3 - 2), v5);
        *v3 = *v3 * v5;
        v3[1] = 1.0;
      }
      v3 += 12;
      --a3;
    }
    while (a3);
  }
}

void CA::Render::Vector::show(CA::Render::Vector *this, unsigned int a2, char a3)
{
  NSObject *v4;
  unint64_t v5;
  uint64_t *v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if ((a3 & 1) == 0)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v4 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v4, OS_LOG_TYPE_DEFAULT, "(vector", buf, 2u);
      }
    }
    if (*((_DWORD *)this + 4))
    {
      v5 = 0;
      v6 = (uint64_t *)((char *)this + 24);
      do
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v7 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            v8 = *v6;
            *(_DWORD *)buf = 134217984;
            v11 = v8;
            _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_DEFAULT, " %.10g", buf, 0xCu);
          }
        }
        ++v5;
        ++v6;
      }
      while (v5 < *((unsigned int *)this + 4));
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v9 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v9, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
      }
    }
  }
}

_DWORD *CA::Render::Vector::mix@<X0>(CA::Render::Vector *this@<X0>, CA::Render::Object *a2@<X1>, const CA::Render::ValueInterpolator *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  _DWORD *result;
  BOOL v12;
  double *v13;
  double *v14;
  double *v15;
  double v16;
  double v17;
  double v18;

  v8 = *((_DWORD *)this + 4);
  v9 = *((_DWORD *)a2 + 4);
  if (v8 >= v9)
    v10 = v9;
  else
    v10 = v8;
  result = CA::Render::Vector::new_vector((CA::Render::Vector *)v10, 0, (const double *)a3);
  if (result)
    v12 = (_DWORD)v10 == 0;
  else
    v12 = 1;
  if (!v12)
  {
    v13 = (double *)((char *)a2 + 24);
    v14 = (double *)((char *)this + 24);
    v15 = (double *)(result + 6);
    do
    {
      v16 = *v14++;
      v17 = v16;
      v18 = *v13++;
      *v15++ = v17 + *(double *)a3 * (v18 - v17);
      --v10;
    }
    while (v10);
  }
  *a4 = result;
  return result;
}

double *CA::Render::Vector::mix@<X0>(CA::Render::Vector *this@<X0>, CA::Render::Object *a2@<X1>, CA::Render::Object *a3@<X2>, CA::Render::Object *a4@<X3>, const CA::Render::ValueInterpolator *a5@<X4>, double **a6@<X8>)
{
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  double *result;
  double *v18;
  double *v19;
  double *v20;

  v12 = *((_DWORD *)this + 4);
  v13 = *((_DWORD *)a3 + 4);
  if (v12 >= v13)
    v14 = v13;
  else
    v14 = v12;
  if (a2)
  {
    v15 = *((_DWORD *)a2 + 4);
    if (v14 >= v15)
      v14 = v15;
    else
      v14 = v14;
  }
  if (a4)
  {
    v16 = *((_DWORD *)a4 + 4);
    if (v14 >= v16)
      v14 = v16;
    else
      v14 = v14;
  }
  result = (double *)CA::Render::Vector::new_vector((CA::Render::Vector *)v14, 0, (const double *)a3);
  v18 = result;
  if (result)
  {
    if (a2)
      v19 = (double *)((char *)a2 + 24);
    else
      v19 = 0;
    if (a4)
      v20 = (double *)((char *)a4 + 24);
    else
      v20 = 0;
    result = CA::Render::ValueInterpolator::mix_n<double>((double *)a5, v14, result + 3, v19, (double *)this + 3, (double *)a3 + 3, v20);
  }
  *a6 = v18;
  return result;
}

double CA::Render::Vector::distance_to(CA::Render::Vector *this, const CA::Render::Object *a2)
{
  uint64_t v2;
  unsigned int v3;
  double *v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  double v9;

  LODWORD(v2) = *((_DWORD *)this + 4);
  v3 = *((_DWORD *)a2 + 4);
  if (v2 >= v3)
    v2 = v3;
  else
    v2 = v2;
  if ((_DWORD)v2)
  {
    v4 = (double *)((char *)this + 24);
    v5 = (double *)((char *)a2 + 24);
    v6 = 0.0;
    do
    {
      v7 = *v5++;
      v8 = v7;
      v9 = *v4++;
      v6 = v6 + (v8 - v9) * (v8 - v9);
      --v2;
    }
    while (v2);
  }
  else
  {
    v6 = 0.0;
  }
  return sqrt(v6);
}

char *CA::Render::Vector::new_rect(CA::Render::Vector *this, const CA::Rect *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  malloc_zone_t *malloc_zone;
  char *result;

  v2 = *(double *)this;
  v3 = *((double *)this + 1);
  v4 = *((double *)this + 2);
  v5 = *((double *)this + 3);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = (char *)malloc_type_zone_malloc(malloc_zone, 0x38uLL, 0x8BB15036uLL);
  if (result)
  {
    *((_DWORD *)result + 2) = 1;
    ++dword_1ECDC7D08;
    *(_QWORD *)result = off_1E1598DC0;
    *(_QWORD *)(result + 12) = 0x400000038;
    *((double *)result + 3) = v2;
    *((double *)result + 4) = v3;
    *((double *)result + 5) = v4 + v2;
    *((double *)result + 6) = v5 + v3;
  }
  return result;
}

char *CA::Render::Vector::new_affine_transform(CA::Render::Vector *this, const CGAffineTransform *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  malloc_zone_t *malloc_zone;
  char *result;

  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 4);
  v7 = *((_QWORD *)this + 5);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = (char *)malloc_type_zone_malloc(malloc_zone, 0x48uLL, 0x8BB15036uLL);
  if (result)
  {
    *((_DWORD *)result + 2) = 1;
    ++dword_1ECDC7D08;
    *(_QWORD *)result = off_1E1598DC0;
    *(_QWORD *)(result + 12) = 0x600000038;
    *((_QWORD *)result + 3) = v2;
    *((_QWORD *)result + 4) = v3;
    *((_QWORD *)result + 5) = v4;
    *((_QWORD *)result + 6) = v5;
    *((_QWORD *)result + 7) = v6;
    *((_QWORD *)result + 8) = v7;
  }
  return result;
}

void CA::Render::SecureIndicatorLayer::show(CA::Render::SecureIndicatorLayer *this, int a2)
{
  NSObject *v4;
  CA::Render *v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  int v9;
  NSObject *v10;
  uint8_t buf[4];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v4 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184457000, v4, OS_LOG_TYPE_DEFAULT, "(secure-indicator-layer", buf, 2u);
    }
  }
  v5 = (CA::Render *)(a2 + 1);
  CA::Render::show_newline(v5);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v6 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *((_DWORD *)this + 4);
      *(_DWORD *)buf = 67109120;
      v12 = v7;
      _os_log_impl(&dword_184457000, v6, OS_LOG_TYPE_DEFAULT, "(privacy-indicator %u)", buf, 8u);
    }
  }
  if (*((_DWORD *)this + 4) >= 3u)
  {
    CA::Render::show_newline(v5);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v8 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *((unsigned __int16 *)this + 10);
        *(_DWORD *)buf = 67109120;
        v12 = v9;
        _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_DEFAULT, "(frame-number %hu)", buf, 8u);
      }
    }
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v10 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
    }
  }
}

void sub_1846FDBB4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Transaction::presentation_handler_lock);
  _Unwind_Resume(a1);
}

uint64_t ___Z23CATransactionDidPresentjjdyyh_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, double))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 48), *(double *)(a1 + 40));
}

void CA::Render::Animation::show(CA::Render::Animation *this, int a2, char a3)
{
  int v3;
  _BOOL4 v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  double v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  CA::Render *v21;
  void *const *v22;
  NSObject *v23;
  const __CFString *v24;
  const __CFString *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  CA::Render *v29;
  NSObject *v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;
  NSObject *v38;
  uint64_t v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  uint64_t v44;
  const char *v45;
  NSObject *v46;
  uint32_t v47;
  NSObject *v48;
  double v49;
  NSObject *v50;
  double v51;
  NSObject *v52;
  double v53;
  NSObject *v54;
  double v55;
  NSObject *v56;
  const char *v57;
  NSObject *v58;
  char *v59;
  NSObject *v60;
  NSObject *v61;
  NSObject *v62;
  NSObject *v63;
  NSObject *v64;
  NSObject *v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint8_t buf[4];
  double v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)this + 3);
  if ((v3 & 0x20000) != 0)
    return;
  v7 = x_log_hook_p();
  if ((a3 & 1) == 0)
  {
    if (v7)
    {
      x_log_();
    }
    else
    {
      v8 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *((unsigned __int8 *)this + 12);
        if (v9 > 0x38 || (v10 = CA::Render::type_names[v9], !*v10))
          *(double *)&v10 = COERCE_DOUBLE("<unknown>");
        *(_DWORD *)buf = 136315138;
        v71 = *(double *)&v10;
        _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_DEFAULT, "(%s", buf, 0xCu);
      }
    }
    if (*((_QWORD *)this + 5))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      CA::Render::show_object(*((CA::Render **)this + 5), (const CA::Render::Object *)(a2 + 1));
    }
    if (*((float *)this + 6) != 0.0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v11 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v12 = 1.0 / *((float *)this + 8);
          *(_DWORD *)buf = 134217984;
          v71 = v12;
          _os_log_impl(&dword_184457000, v11, OS_LOG_TYPE_DEFAULT, "(frameInterval %f)", buf, 0xCu);
        }
      }
    }
    if ((*((_BYTE *)this + 13) & 0x80) != 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v13 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v13, OS_LOG_TYPE_DEFAULT, "(discretizesTime true)", buf, 2u);
        }
      }
    }
    if (*((_QWORD *)this + 6))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v14 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v14, OS_LOG_TYPE_DEFAULT, "(timingFunction ", buf, 2u);
        }
      }
      CA::Render::show_object(*((CA::Render **)this + 6), (const CA::Render::Object *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v15 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v15, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
    if ((*((_BYTE *)this + 13) & 1) == 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v16 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v16, OS_LOG_TYPE_DEFAULT, "(enabled false)", buf, 2u);
        }
      }
    }
    if ((*((_BYTE *)this + 13) & 2) != 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v17 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v17, OS_LOG_TYPE_DEFAULT, "(additive true)", buf, 2u);
        }
      }
    }
    if ((*((_BYTE *)this + 13) & 4) != 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v18 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v18, OS_LOG_TYPE_DEFAULT, "(cumulative true)", buf, 2u);
        }
      }
    }
    if ((*((_BYTE *)this + 13) & 8) == 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v19 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v19, OS_LOG_TYPE_DEFAULT, "(removedOnCompletion false)", buf, 2u);
        }
      }
    }
    if (CA::Render::Animation::affects_velocity(this))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v20 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v20, OS_LOG_TYPE_DEFAULT, "(affectsVelocity true)", buf, 2u);
        }
      }
    }
    if (v3 <= 0x1Au)
    {
      if (v3 != 5)
      {
        if (v3 != 21)
          goto LABEL_149;
        v21 = (CA::Render *)(a2 + 1);
LABEL_85:
        CA::Render::show_newline(v21);
        v29 = (CA::Render *)*((_QWORD *)this + 12);
LABEL_148:
        CA::Render::show_object(v29, v21);
        goto LABEL_149;
      }
    }
    else if (v3 != 27 && v3 != 48)
    {
      if (v3 != 55)
        goto LABEL_149;
      v21 = (CA::Render *)(a2 + 1);
      CA::Render::show_newline(v21);
      if (x_log_hook_p())
      {
        -[__CFString cStringUsingEncoding:]((id)CAAtomGetString(*((_DWORD *)this + 23)), "cStringUsingEncoding:", 4);
        x_log_();
      }
      else
      {
        v30 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(double *)&v31 = COERCE_DOUBLE(-[__CFString cStringUsingEncoding:]((id)CAAtomGetString(*((_DWORD *)this + 23)), "cStringUsingEncoding:", 4));
          *(_DWORD *)buf = 136315138;
          v71 = *(double *)&v31;
          _os_log_impl(&dword_184457000, v30, OS_LOG_TYPE_DEFAULT, "(type %s)", buf, 0xCu);
        }
      }
      if (*((_DWORD *)this + 24))
      {
        CA::Render::show_newline(v21);
        if (x_log_hook_p())
        {
          -[__CFString cStringUsingEncoding:]((id)CAAtomGetString(*((_DWORD *)this + 24)), "cStringUsingEncoding:", 4);
          x_log_();
        }
        else
        {
          v38 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(double *)&v39 = COERCE_DOUBLE(-[__CFString cStringUsingEncoding:]((id)CAAtomGetString(*((_DWORD *)this + 24)), "cStringUsingEncoding:", 4));
            *(_DWORD *)buf = 136315138;
            v71 = *(double *)&v39;
            _os_log_impl(&dword_184457000, v38, OS_LOG_TYPE_DEFAULT, "(subtype %s)", buf, 0xCu);
          }
        }
      }
      if (*((_QWORD *)this + 14))
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v40 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v40, OS_LOG_TYPE_DEFAULT, "(filter ", buf, 2u);
          }
        }
        CA::Render::show_newline(v21);
        CA::Render::show_object(*((CA::Render **)this + 14), v21);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v41 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v41, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
          }
        }
      }
      if (*((_QWORD *)this + 15))
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v42 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v42, OS_LOG_TYPE_DEFAULT, "(options ", buf, 2u);
          }
        }
        CA::Render::show_newline(v21);
        CA::Render::show_object(*((CA::Render **)this + 15), v21);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v43 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v43, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
          }
        }
      }
      CA::Render::show_newline(v21);
      v29 = (CA::Render *)*((_QWORD *)this + 16);
      goto LABEL_148;
    }
    v21 = (CA::Render *)(a2 + 1);
    CA::Render::show_newline(v21);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v23 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v23, OS_LOG_TYPE_DEFAULT, "(keyPath ", buf, 2u);
      }
    }
    v24 = CA::Render::key_path_copy_string(*((_QWORD *)this + 12), v22);
    CA::Render::show_cfstring(v24, v25);
    CFRelease(v24);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v26 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v26, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
      }
    }
    if (*((_QWORD *)this + 13))
    {
      CA::Render::show_newline(v21);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v27 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v27, OS_LOG_TYPE_DEFAULT, "(function ", buf, 2u);
        }
      }
      CA::Render::show_object(*((CA::Render **)this + 13), v21);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v28 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v28, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
    if (v3 > 0x1Au)
    {
      if (v3 == 27)
      {
        if (*((unsigned __int8 *)this + 144) <= 4u)
        {
          CA::Render::show_newline(v21);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v58 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              v59 = CA::Render::Animation::show(unsigned int,unsigned int)const::calc_modes[*((unsigned __int8 *)this
                                                                                            + 144)];
              *(_DWORD *)buf = 136315138;
              v71 = *(double *)&v59;
              _os_log_impl(&dword_184457000, v58, OS_LOG_TYPE_DEFAULT, "(calculationMode %s)", buf, 0xCu);
            }
          }
        }
        if (*((_QWORD *)this + 14))
        {
          CA::Render::show_newline(v21);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v60 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184457000, v60, OS_LOG_TYPE_DEFAULT, "(values ", buf, 2u);
            }
          }
          CA::Render::show_object(*((CA::Render **)this + 14), v21);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v61 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184457000, v61, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
            }
          }
        }
        if (*((_QWORD *)this + 15))
        {
          CA::Render::show_newline(v21);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v62 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184457000, v62, OS_LOG_TYPE_DEFAULT, "(keyTimes ", buf, 2u);
            }
          }
          CA::Render::show_object(*((CA::Render **)this + 15), v21);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v63 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184457000, v63, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
            }
          }
        }
        if (*((_QWORD *)this + 16))
        {
          CA::Render::show_newline(v21);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v64 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184457000, v64, OS_LOG_TYPE_DEFAULT, "(timingFunctions ", buf, 2u);
            }
          }
          CA::Render::show_object(*((CA::Render **)this + 16), v21);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v65 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184457000, v65, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
            }
          }
        }
        if (*((_QWORD *)this + 17))
        {
          CA::Render::show_newline(v21);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v66 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184457000, v66, OS_LOG_TYPE_DEFAULT, "(path ", buf, 2u);
            }
          }
          CA::Render::show_object(*((CA::Render **)this + 17), v21);
          if (!x_log_hook_p())
          {
            v56 = x_log_category_render;
            if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              goto LABEL_149;
            *(_WORD *)buf = 0;
            v57 = ")";
            goto LABEL_214;
          }
LABEL_211:
          x_log_();
        }
LABEL_149:
        if (x_log_hook_p())
        {
LABEL_150:
          x_log_();
          return;
        }
        v44 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          v45 = ")";
          v46 = v44;
          v47 = 2;
LABEL_153:
          _os_log_impl(&dword_184457000, v46, OS_LOG_TYPE_DEFAULT, v45, buf, v47);
          return;
        }
        return;
      }
      if (v3 != 48)
        goto LABEL_149;
    }
    else if (v3 != 5)
    {
      if (v3 != 21)
        goto LABEL_149;
      goto LABEL_85;
    }
    if (*((_QWORD *)this + 14))
    {
      CA::Render::show_newline(v21);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v32 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v32, OS_LOG_TYPE_DEFAULT, "(from ", buf, 2u);
        }
      }
      CA::Render::show_object(*((CA::Render **)this + 14), v21);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v33 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v33, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
    if (*((_QWORD *)this + 15))
    {
      CA::Render::show_newline(v21);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v34 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v34, OS_LOG_TYPE_DEFAULT, "(to ", buf, 2u);
        }
      }
      CA::Render::show_object(*((CA::Render **)this + 15), v21);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v35 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v35, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
    if (*((_QWORD *)this + 16))
    {
      CA::Render::show_newline(v21);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v36 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v36, OS_LOG_TYPE_DEFAULT, "(by ", buf, 2u);
        }
      }
      CA::Render::show_object(*((CA::Render **)this + 16), v21);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v37 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v37, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
    if (v3 == 48)
    {
      if (*((double *)this + 19) != 1.0)
      {
        CA::Render::show_newline(v21);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v48 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            v49 = *((double *)this + 19);
            *(_DWORD *)buf = 134217984;
            v71 = v49;
            _os_log_impl(&dword_184457000, v48, OS_LOG_TYPE_DEFAULT, "(mass %g)", buf, 0xCu);
          }
        }
      }
      if (*((double *)this + 20) != 100.0)
      {
        CA::Render::show_newline(v21);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v50 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            v51 = *((double *)this + 20);
            *(_DWORD *)buf = 134217984;
            v71 = v51;
            _os_log_impl(&dword_184457000, v50, OS_LOG_TYPE_DEFAULT, "(stiffness %g)", buf, 0xCu);
          }
        }
      }
      if (*((double *)this + 21) != 10.0)
      {
        CA::Render::show_newline(v21);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v52 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            v53 = *((double *)this + 21);
            *(_DWORD *)buf = 134217984;
            v71 = v53;
            _os_log_impl(&dword_184457000, v52, OS_LOG_TYPE_DEFAULT, "(damping %g)", buf, 0xCu);
          }
        }
      }
      if (*((double *)this + 22) != 0.0)
      {
        CA::Render::show_newline(v21);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v54 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            v55 = *((double *)this + 22);
            *(_DWORD *)buf = 134217984;
            v71 = v55;
            _os_log_impl(&dword_184457000, v54, OS_LOG_TYPE_DEFAULT, "(velocity %g)", buf, 0xCu);
          }
        }
      }
      if (*((_BYTE *)this + 184))
      {
        CA::Render::show_newline(v21);
        if (!x_log_hook_p())
        {
          v56 = x_log_category_render;
          if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            goto LABEL_149;
          *(_WORD *)buf = 0;
          v57 = "(allowsOverdamping true)";
LABEL_214:
          _os_log_impl(&dword_184457000, v56, OS_LOG_TYPE_DEFAULT, v57, buf, 2u);
          goto LABEL_149;
        }
        goto LABEL_211;
      }
    }
    goto LABEL_149;
  }
  if (v7)
    goto LABEL_150;
  v67 = x_log_category_render;
  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
  {
    v68 = *((unsigned __int8 *)this + 12);
    if (v68 > 0x38 || (v69 = CA::Render::type_names[v68], !*v69))
      *(double *)&v69 = COERCE_DOUBLE("<unknown>");
    *(_DWORD *)buf = 136315138;
    v71 = *(double *)&v69;
    v45 = "%s;";
    v46 = v67;
    v47 = 12;
    goto LABEL_153;
  }
}

uint64_t CA::Render::Animation::validate(CA::Render::Animation *this, CA::Render::Layer *a2)
{
  return 1;
}

void CA::Render::BasicAnimation0::~BasicAnimation0(CA::Render::BasicAnimation0 *this, void **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  *(_QWORD *)this = off_1E15974E8;
  v3 = (unsigned int *)*((_QWORD *)this + 16);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 15);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  v11 = (unsigned int *)*((_QWORD *)this + 14);
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
  }
  CA::Render::PropertyAnimation::~PropertyAnimation((CA::Render **)this, a2);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E15974E8;
  v3 = (unsigned int *)*((_QWORD *)this + 16);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 15);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  v11 = (unsigned int *)*((_QWORD *)this + 14);
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
  }
  CA::Render::PropertyAnimation::~PropertyAnimation((CA::Render **)this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::Render::`anonymous namespace'::add_transforms(float64x2_t *this, double *a2, double *a3, const double *a4, int a5)
{
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  _OWORD v30[8];
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (a4 == (const double *)6)
  {
    v20 = *(float64x2_t *)a2;
    v21 = *(float64x2_t *)(a2 + 2);
    v22 = *(float64x2_t *)(a2 + 4);
    v23 = *(float64x2_t *)a3;
    v24 = *(float64x2_t *)(a3 + 2);
    v31 = *(float64x2_t *)a3;
    v32 = v24;
    v25 = *(float64x2_t *)(a3 + 4);
    v33 = v25;
    if (a5)
    {
      v28 = v21;
      v29 = v22;
      v27 = v20;
      CA::Mat2Impl::mat2_invert((CA::Mat2Impl *)&v31, v31.f64, a3);
      v20 = v27;
      v21 = v28;
      v22 = v29;
      v23 = v31;
      v24 = v32;
      v25 = v33;
    }
    *this = vmlaq_laneq_f64(vmulq_n_f64(v23, v20.f64[0]), v24, v20, 1);
    this[1] = vmlaq_laneq_f64(vmulq_n_f64(v23, v21.f64[0]), v24, v21, 1);
    this[2] = vmlaq_laneq_f64(vmlaq_n_f64(v25, v23, v22.f64[0]), v24, v22, 1);
    return 1;
  }
  if (a4 == (const double *)16)
  {
    v6 = *(float64x2_t *)(a2 + 10);
    v35 = *(float64x2_t *)(a2 + 8);
    v36 = v6;
    v7 = *(float64x2_t *)(a2 + 14);
    v37 = *(float64x2_t *)(a2 + 12);
    v38 = v7;
    v8 = *(float64x2_t *)(a2 + 2);
    v31 = *(float64x2_t *)a2;
    v32 = v8;
    v9 = *(float64x2_t *)(a2 + 6);
    v33 = *(float64x2_t *)(a2 + 4);
    v34 = v9;
    v10 = *(_OWORD *)a3;
    v11 = *((_OWORD *)a3 + 1);
    v12 = *((_OWORD *)a3 + 3);
    v30[2] = *((_OWORD *)a3 + 2);
    v30[3] = v12;
    v30[0] = v10;
    v30[1] = v11;
    v13 = *((_OWORD *)a3 + 4);
    v14 = *((_OWORD *)a3 + 5);
    v15 = *((_OWORD *)a3 + 7);
    v30[6] = *((_OWORD *)a3 + 6);
    v30[7] = v15;
    v30[4] = v13;
    v30[5] = v14;
    if (a5)
      CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)v30, (CA::Mat4Impl *)v30, a3);
    CA::Mat4Impl::mat4_concat(&v31, v31.f64, (const double *)v30, a4);
    v16 = v36;
    this[4] = v35;
    this[5] = v16;
    v17 = v38;
    this[6] = v37;
    this[7] = v17;
    v18 = v32;
    *this = v31;
    this[1] = v18;
    v19 = v34;
    this[2] = v33;
    this[3] = v19;
    return 1;
  }
  return 0;
}

double CA::Render::animation_get_function_param(CA::Render *this, const unsigned int *a2, const unsigned int *a3, uint64_t a4, void *a5)
{
  double result;
  uint64_t property_value;
  _OWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  result = 0.0;
  if ((_DWORD)this == 1)
  {
    memset(v7, 0, sizeof(v7));
    property_value = CA::Render::Layer::get_property_value(*(CA::Render::Layer **)(a4 + 8), a2, (uint64_t)a3, 4uLL, (double *)v7, 0, 0.0);
    result = *(double *)v7;
    if (!property_value)
      return 0.0;
  }
  return result;
}

double ___ZNK2CA6Render17KeyframeAnimation9next_timeEdfPKvNS0_26AnimationFrameRateOverrideEjbRdPKNS0_5LayerEPKNS_4Vec2IdEERj_block_invoke_2(uint64_t a1, const double *a2, double a3)
{
  double result;

  if (*(_BYTE *)(a1 + 64))
  {
    a3 = CA::Render::TimingFunction::evaluate_inverse(*(CA::Render::TimingFunction **)(a1 + 32), a2, a3, 0.001 / *(double *)(a1 + 40));
    if (a3 > 1.0)
      a3 = 1.0;
    if (a3 < 0.0)
      a3 = 0.0;
  }
  result = *(double *)(a1 + 56) + (*(double *)(a1 + 48) - *(double *)(a1 + 56)) * a3;
  if (result > 1.0)
    result = 1.0;
  if (result < 0.0)
    return 0.0;
  return result;
}

void CA::Render::PresentationModifier::show(CA::Render::PresentationModifier *this, int a2, char a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *v15;
  CA::Render *v16;
  void *const *v17;
  NSObject *v18;
  const __CFString *v19;
  const __CFString *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t *v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  const char *v30;
  uint8_t buf[4];
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if ((a3 & 1) != 0)
  {
    if (x_log_hook_p())
    {
      x_log_();
      return;
    }
    v29 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v30 = "presentation modifier;";
      goto LABEL_49;
    }
  }
  else
  {
    v4 = *((_QWORD *)this + 2);
    v5 = *(_QWORD *)(v4 + 16);
    v6 = v5 - 40;
    if (v5 >= 0x28)
    {
      v7 = *((unsigned int *)this + 6);
      if (v7 < v6 >> 3)
      {
        v8 = *(_QWORD *)(v4 + 24);
        v9 = v8 + v5 - 8 * v7;
        v10 = *(unsigned int *)(v9 - 8);
        if ((_DWORD)v10)
        {
          v11 = (16 * v10) | 8;
          v12 = *(unsigned int *)(v9 - 4);
          if (v6 >= v12 && 3 * v11 + v12 <= v6)
          {
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v15 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v15, OS_LOG_TYPE_DEFAULT, "(modifier", buf, 2u);
              }
            }
            v16 = (CA::Render *)(a2 + 1);
            CA::Render::show_newline(v16);
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v18 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v18, OS_LOG_TYPE_DEFAULT, "(keyPath ", buf, 2u);
              }
            }
            v19 = CA::Render::key_path_copy_string(*((_QWORD *)this + 4), v17);
            CA::Render::show_cfstring(v19, v20);
            CFRelease(v19);
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v21 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v21, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
              }
            }
            if ((*((_BYTE *)this + 13) & 1) != 0)
            {
              CA::Render::show_newline(v16);
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                v22 = x_log_category_render;
                if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_184457000, v22, OS_LOG_TYPE_DEFAULT, "(additive true)", buf, 2u);
                }
              }
            }
            if (!*(_WORD *)(v8 + v12 + 40 + 2 * v11))
            {
              CA::Render::show_newline(v16);
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                v23 = x_log_category_render;
                if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_184457000, v23, OS_LOG_TYPE_DEFAULT, "(enabled false)", buf, 2u);
                }
              }
            }
            CA::Render::show_newline(v16);
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v24 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v24, OS_LOG_TYPE_DEFAULT, "(values", buf, 2u);
              }
            }
            v25 = (uint64_t *)(v12 + 32 * v10 + v8 + 64);
            do
            {
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                v26 = x_log_category_render;
                if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                {
                  v27 = *v25;
                  *(_DWORD *)buf = 134217984;
                  v32 = v27;
                  _os_log_impl(&dword_184457000, v26, OS_LOG_TYPE_DEFAULT, " %.10g", buf, 0xCu);
                }
              }
              ++v25;
              --v10;
            }
            while (v10);
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v28 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v28, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
              }
            }
            if (x_log_hook_p())
            {
              x_log_();
              return;
            }
            v29 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              v30 = ")";
LABEL_49:
              _os_log_impl(&dword_184457000, v29, OS_LOG_TYPE_DEFAULT, v30, buf, 2u);
            }
          }
        }
      }
    }
  }
}

void CA::Render::KeyframeAnimation::update_paced_key_times(CA::Render::KeyframeAnimation *this)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  size_t v5;
  char *v6;
  unsigned __int8 *v7;
  __n128 v8;
  unsigned int *v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  size_t v17;
  _QWORD *v18;
  const double *v19;
  _QWORD *v20;
  uint64_t v21;
  double v22;
  _DWORD *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 14);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 16);
    v4 = (v3 - 1);
    if (v4 >= 0x201)
    {
      v6 = (char *)malloc_type_malloc(8 * (v3 - 1), 0x100004000313F17uLL);
      if (!v6)
        return;
    }
    else
    {
      MEMORY[0x1E0C80A78](this);
      v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFF0);
      bzero(v6, v5);
      if (!(_DWORD)v4)
        goto LABEL_22;
    }
    for (i = 0; i != v4; ++i)
    {
      v11 = v2 + 8 * i;
      v7 = *(unsigned __int8 **)(v11 + 24);
      v12 = *(_QWORD *)(v11 + 32);
      v8.n128_u64[0] = 0;
      if (v7)
        v13 = v12 == 0;
      else
        v13 = 1;
      if (!v13 && *(unsigned __int8 *)(v12 + 12) == v7[12])
        v8.n128_f64[0] = (*(double (**)(unsigned __int8 *, __n128))(*(_QWORD *)v7 + 72))(v7, v8);
      *(_QWORD *)&v6[8 * i] = v8.n128_u64[0];
    }
  }
  else
  {
    v9 = (unsigned int *)*((_QWORD *)this + 17);
    if (!v9)
      return;
    v4 = v9[4];
    v7 = (unsigned __int8 *)CA::Render::Path::keyframe_lengths((CA::Render::Path *)v9);
    if (!v7)
      return;
    v6 = (char *)v7;
  }
  if (!v4)
  {
LABEL_22:
    MEMORY[0x1E0C80A78](v7);
    v18 = &v28[-2];
    v4 = 0;
    v28[-2] = 0;
    v16 = 1;
LABEL_27:
    v23 = CA::Render::Vector::new_vector((CA::Render::Vector *)v16, v18, v19);
    v24 = (unsigned int *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v23;
    if (v4 >= 0x200)
      free(v18);
    *((_DWORD *)this + 3) |= 0x4000000u;
    if (v24)
    {
      v25 = v24 + 2;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
        (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
    }
    goto LABEL_34;
  }
  v14 = 0;
  v15 = 0.0;
  do
    v15 = *(double *)&v6[8 * v14++] + v15;
  while (v4 != v14);
  v16 = v4 + 1;
  if (v4 < 0x200)
  {
    MEMORY[0x1E0C80A78](v7);
    v18 = (_QWORD *)((char *)v28 - ((v17 + 15) & 0x1FFFFFFFF0));
    bzero(v18, v17);
    goto LABEL_25;
  }
  v20 = malloc_type_malloc(8 * (v4 + 1), 0x89AD1D66uLL);
  if (v20)
  {
    v18 = v20;
LABEL_25:
    *v18 = 0;
    v21 = 0;
    v22 = 0.0;
    do
    {
      v22 = *(double *)&v6[8 * v21] + v22;
      *(double *)&v18[++v21] = v22 * (1.0 / v15);
    }
    while (v4 != v21);
    goto LABEL_27;
  }
LABEL_34:
  if (v2)
  {
    if (v4 >= 0x201)
      free(v6);
  }
}

void ___ZN2CA6Render18AnimationEvaluator13velocity_passENS_4Vec2IdEES3_bRNS2_IfEERf_block_invoke()
{
  if (initialize_velocity_thresholds(void)::once[0] != -1)
    dispatch_once(initialize_velocity_thresholds(void)::once, &__block_literal_global_14_14871);
  if (has_velocity_thresholds)
    CA::Render::AnimationEvaluator::velocity_pass(CA::Vec2<double>,CA::Vec2<double>,BOOL,CA::Vec2<float> &,float &)::thresholds = velocity_thresholds;
  CA::Render::AnimationEvaluator::velocity_pass(CA::Vec2<double>,CA::Vec2<double>,BOOL,CA::Vec2<float> &,float &)::has_thresholds = has_velocity_thresholds;
}

void sub_184700FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CA::CG::AccelDrawable::needs_gpu(CA::CG::AccelDrawable *this)
{
  return 0;
}

void CA::CG::detach_provider_callback(os_unfair_lock_s *this, void *a2)
{
  unsigned int *p_os_unfair_lock_opaque;
  unsigned int v4;

  CA::CG::AccelDataProvider::detach(this);
  p_os_unfair_lock_opaque = &this[3]._os_unfair_lock_opaque;
  do
    v4 = __ldaxr(p_os_unfair_lock_opaque);
  while (__stlxr(v4 - 1, p_os_unfair_lock_opaque));
  if (this)
  {
    if (v4 == 1)
      (*(void (**)(os_unfair_lock_s *))(*(_QWORD *)&this->_os_unfair_lock_opaque + 16))(this);
  }
}

uint64_t CA::CG::AccelDrawable::set_volatile(os_unfair_lock_s *this, uint64_t a2)
{
  uint64_t v5;

  if (LOBYTE(this[17]._os_unfair_lock_opaque) == (_DWORD)a2)
    return 1;
  if ((_DWORD)a2)
    CA::CG::AccelDrawable::detach((CA::CG::AccelDrawable *)this, 0);
  os_unfair_lock_lock(this + 3);
  LOBYTE(this[17]._os_unfair_lock_opaque) = a2;
  v5 = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t))(*(_QWORD *)&this->_os_unfair_lock_opaque + 80))(this, a2);
  os_unfair_lock_unlock(this + 3);
  return v5;
}

void set_attr(CA::Transaction *a1, uint64_t a2, uint64_t a3)
{
  CA::Transaction *v5;
  const void *v6;
  int v7;
  CA::AttrList *v8;
  malloc_zone_t *malloc_zone;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v10[0] = a2;
  v5 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
  if (!v5)
    v5 = (CA::Transaction *)CA::Transaction::create(a1);
  v6 = (const void *)CAInternAtom((const __CFString *)a1, 1);
  v7 = *((_DWORD *)v5 + 25);
  *((_DWORD *)v5 + 25) = v7 + 1;
  if (!v7)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v8 = *(CA::AttrList **)(a3 + 24);
  if (!v8)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v8 = (CA::AttrList *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x10uLL, 0x743898A5uLL);
  }
  *(_QWORD *)(a3 + 24) = CA::AttrList::set(v8, v6, 2, (unsigned __int8 *)v10);
  CA::Transaction::unlock(v5);
}

unsigned int *copy_attr(unsigned int *result, id *a2, int a3, uint64_t *a4)
{
  unsigned int v5;
  unsigned int *v6;
  malloc_zone_t *malloc_zone;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  if ((a3 - 1) <= 3)
  {
    v5 = result;
    result = (unsigned int *)objc_msgSend(*a2, "CA_copyRenderValue");
    if (result)
    {
      v6 = result;
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      result = (unsigned int *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x20uLL, 0x743898A5uLL);
      if (result)
      {
        result[2] = 1;
        result[3] = 28;
        ++dword_1ECDC7C98;
        *(_QWORD *)result = off_1E1599568;
        result[4] = v5;
        v8 = v6 + 2;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        v10 = v6;
        if (!v9)
        {
          v10 = 0;
          do
            v16 = __ldaxr(v8);
          while (__stlxr(v16 - 1, v8));
        }
        *((_QWORD *)result + 3) = v10;
      }
      v12 = *a4;
      v11 = a4[1];
      ++*a4;
      *(_QWORD *)(v11 + 8 * v12) = result;
      v13 = v6 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    }
  }
  return result;
}

void CA::OGL::Mosaic::delete_image(uint64_t a1, _DWORD *a2)
{
  unsigned int v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  malloc_zone_t *malloc_zone;

  v3 = a2[7];
  if (v3)
  {
    v4 = (_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * ((*(_DWORD *)(a1 + 64) - 1) & v3));
    v5 = (_QWORD *)*v4;
    if (*v4)
    {
      if (v5 == (_QWORD *)a2)
      {
LABEL_7:
        *v4 = *((_QWORD *)a2 + 2);
        --*(_QWORD *)(a1 + 80);
      }
      else
      {
        while (1)
        {
          v6 = v5;
          v5 = (_QWORD *)v5[2];
          if (!v5)
            break;
          if (v5 == (_QWORD *)a2)
          {
            v4 = v6 + 2;
            goto LABEL_7;
          }
        }
      }
    }
  }
  v8 = *(_QWORD *)a2;
  v7 = (_QWORD *)*((_QWORD *)a2 + 1);
  *(_QWORD *)(v8 + 8) = v7;
  *v7 = v8;
  *(_QWORD *)a2 = a2;
  *((_QWORD *)a2 + 1) = a2;
  v9 = (_QWORD *)*((_QWORD *)a2 + 5);
  if (v9)
  {
    do
    {
      v10 = (_QWORD *)*v9;
      v11 = (_QWORD *)v9[1];
      *v9 = 0;
      v12 = v11 + 4;
      v13 = v11[6];
      if (v11[5])
        v12 = (_QWORD *)v11[5];
      *v12 = v9;
      v11[5] = v9;
      v11[6] = v13 - 1;
      v9 = v10;
    }
    while (v10);
  }
  v14 = *((_QWORD *)a2 + 4);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, a2);
}

void CA::Render::Array::show(CA::Render::Array *this, int a2, uint64_t a3)
{
  NSObject *v6;
  unint64_t v7;
  CA::Render *v8;
  char *v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((a3 & 1) != 0)
  {
    if (*((_DWORD *)this + 4))
    {
      v13 = 0;
      v14 = (a2 + 1);
      v15 = (char *)this + 24;
      do
      {
        if ((*((_BYTE *)this + 13) & 1) != 0)
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v16 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              v17 = *(_QWORD *)&v15[8 * v13];
              *(_DWORD *)buf = 134217984;
              v19 = v17;
              _os_log_impl(&dword_184457000, v16, OS_LOG_TYPE_DEFAULT, "%p", buf, 0xCu);
            }
          }
        }
        else
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&v15[8 * v13] + 40))(*(_QWORD *)&v15[8 * v13], v14, a3);
        }
        ++v13;
      }
      while (v13 < *((unsigned int *)this + 4));
    }
  }
  else
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v6 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v6, OS_LOG_TYPE_DEFAULT, "(array", buf, 2u);
      }
    }
    if (*((_DWORD *)this + 4))
    {
      v7 = 0;
      v8 = (CA::Render *)(a2 + 1);
      v9 = (char *)this + 24;
      do
      {
        CA::Render::show_newline(v8);
        if ((*((_BYTE *)this + 13) & 1) != 0)
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v10 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              v11 = *(_QWORD *)&v9[8 * v7];
              *(_DWORD *)buf = 134217984;
              v19 = v11;
              _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_DEFAULT, "%p", buf, 0xCu);
            }
          }
        }
        else
        {
          (*(void (**)(_QWORD, CA::Render *, uint64_t))(**(_QWORD **)&v9[8 * v7] + 40))(*(_QWORD *)&v9[8 * v7], v8, a3);
        }
        ++v7;
      }
      while (v7 < *((unsigned int *)this + 4));
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v12 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
      }
    }
  }
}

uint64_t CA::CG::`anonymous namespace'::iosurface_max_init(CA::CG::_anonymous_namespace_ *this)
{
  uint64_t result;

  result = MEMORY[0x186DBD438](*MEMORY[0x1E0CBC008]);
  return result;
}

CA::Render::Texture *CA::OGL::TiledImageGeometry::lanczos_image(CA::OGL::Context **this, CA::Render::Texture *a2, double a3, double a4, double a5, unsigned int *a6, float32x4_t *a7)
{
  CA::Render::Texture *v8;
  CA::Render::TileCache *v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  double v19;
  CA::Render::Texture *image;
  unsigned int v21;
  float64x2_t v22;
  float64x2_t v23;
  uint64_t v24;
  uint64x2_t v25;
  float64x2_t v26;
  double v28;
  double v29;

  v8 = a2;
  if (a5 < 1.0 && *((_BYTE *)a2 + 12) == 23)
  {
    v15 = (CA::Render::TileCache *)CA::OGL::Context::tile_cache(this[1]);
    if (v15)
    {
      LODWORD(v16) = *((_DWORD *)v8 + 4);
      LODWORD(v17) = *((_DWORD *)v8 + 5);
      v18 = (double)v16 * a5;
      v19 = (double)v17 * a5;
      v28 = a4 - floor(a4);
      v29 = a3 - floor(a3);
      image = CA::Render::TileCache::get_image(v15, v8, v29, v28, v18, v19, *((double *)this[1] + 28));
      if (image)
      {
        v21 = *a6 & 0xFFFFFFC0;
        *a6 = v21;
        v22.f64[0] = v29;
        v23.f64[0] = v18 + v29;
        v24 = *((_QWORD *)image + 2);
        v25.i64[0] = v24;
        v25.i64[1] = HIDWORD(v24);
        v26 = vcvtq_f64_u64(v25);
        v22.f64[1] = v28;
        v23.f64[1] = v19 + v28;
        *a7 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v22, v26)), vdivq_f64(v23, v26));
        *a6 = v21 | 0x400;
        return image;
      }
    }
  }
  return v8;
}

uint64_t CA::OGL::TiledImageGeometry::TiledImageGeometry(uint64_t a1, CA::Render::TiledTexture *a2, uint64_t a3, double *a4, char a5, char a6, CA::OGL::ContentsGeometry *this, float a8)
{
  float v13;
  double scale;
  double v15;
  uint64_t v16;
  int v17;
  int v18;
  int v24;
  __int16 v25;
  unsigned int v26;
  unsigned int v27;
  double v28;
  unsigned int v29;
  unsigned int v30;
  double v31;
  double v32;
  int v33;
  int v34;
  double v35;
  double v36;
  float v37;
  int v38;
  int v39;
  double v40;
  int32x4_t *v41;
  const CA::Transform *v42;
  int32x2_t *v43;
  int32x2_t *v44;
  const double *v45;
  int32x4_t v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  int64x2_t v51;
  int8x16_t v52;
  double v53;
  double v54;
  uint64_t v55;
  const double *v56;
  float64x2_t v57;
  int64x2_t v58;
  float64x2_t v59;
  int64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  int64x2_t v64;
  float64x2_t v65;
  double v66;
  double v67;
  double v68;
  float64x2_t v69;
  int64x2_t v70;
  int8x16_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int v75;
  _DWORD *v76;
  int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  signed __int32 v81;
  signed __int32 v82;
  unsigned int v83;
  signed __int32 v84;
  unsigned __int32 v85;
  int v86;
  unsigned __int32 v87;
  int v88;
  double v89;
  double v91;
  double v92;
  double v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  int v100;
  uint64_t v101;
  double v102;
  double v103;
  float64x2_t v105;
  float64x2_t v106;
  uint64_t v107;
  int8x16_t v108;
  int32x4_t v109;
  float64x2_t v110;
  float64x2_t v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = (_DWORD)a4;
  *(_BYTE *)(a1 + 20) = a5;
  *(_BYTE *)(a1 + 21) = a6;
  *(_QWORD *)(a1 + 24) = this;
  *(_BYTE *)(a1 + 146) = 1;
  v107 = *(_QWORD *)(a3 + 232);
  if (this)
  {
    CA::OGL::ContentsGeometry::scale(this, (uint64_t)a2, (double *)a3);
    scale = v13;
    *(double *)(a1 + 32) = v13;
    v15 = *((double *)this + 33);
    if (v15 == 1.0)
      goto LABEL_8;
    scale = scale / v15;
  }
  else
  {
    v16 = *(_QWORD *)(*(_QWORD *)(a3 + 232) + 24);
    if ((*(_BYTE *)(v16 + 144) & 0x10) != 0)
      scale = CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v16, 0, 0, a4);
    else
      scale = *(double *)(v16 + 128);
  }
  *(double *)(a1 + 32) = scale;
LABEL_8:
  v18 = *((_DWORD *)a2 + 26);
  v17 = *((_DWORD *)a2 + 27);
  if (__PAIR64__(v17, v18) == 1)
  {
    __asm { FMOV            V0.2D, #1.0 }
    *(int32x4_t *)(a1 + 40) = _Q0;
    v24 = *(unsigned __int16 *)(a1 + 144) | (*(unsigned __int8 *)(a1 + 146) << 16);
    *(_QWORD *)(a1 + 72) = 1065353216;
    if (scale >= 1.0)
      v25 = 0;
    else
      v25 = (*(_BYTE *)(a1 + 20) == 11) << 8;
    *(_WORD *)(a1 + 144) = v25;
    *(_BYTE *)(a1 + 146) = BYTE2(v24);
    if (scale <= 0.999)
    {
      *(double *)(a1 + 56) = scale;
      *(double *)(a1 + 64) = scale;
    }
    else
    {
      *(int32x4_t *)(a1 + 56) = _Q0;
    }
  }
  else
  {
    if (v17)
    {
      if (v18 < 1)
      {
        v28 = 0.0;
      }
      else
      {
        v26 = *((_DWORD *)a2 + 4);
        if (v17 >= 1)
          v27 = v26 << v17;
        else
          v27 = v26 >> -(char)v17;
        v28 = (double)v27 / (double)v26;
      }
    }
    else
    {
      v28 = 1.0;
    }
    if (scale >= v28)
      v29 = *(unsigned __int8 *)(a1 + 146) << 16;
    else
      v29 = (*(_BYTE *)(a1 + 20) == 2) | (*(unsigned __int8 *)(a1 + 146) << 16) | ((*(_BYTE *)(a1 + 20) == 11) << 8);
    *(_WORD *)(a1 + 144) = v29;
    v30 = HIWORD(v29);
    *(_BYTE *)(a1 + 146) = BYTE2(v29);
    v31 = 0.0;
    if (scale != 1.0)
      v31 = -log2(scale);
    v32 = v31 + a8;
    v33 = *((_DWORD *)a2 + 26);
    v34 = *((_DWORD *)a2 + 27);
    v35 = (double)-v34;
    v36 = (double)(v33 - v34);
    if (v32 <= v36)
    {
      if (v32 >= v35)
        v35 = v32;
    }
    else if (v36 >= v35)
    {
      v35 = (double)(v33 - v34);
    }
    if ((v29 & 1) != 0)
    {
      v37 = 1.0 - v35 + floor(v35);
      *(float *)(a1 + 72) = v37;
      if (v37 > 0.999)
      {
        v29 &= 0xFFFF00u;
        *(_BYTE *)(a1 + 146) = v30;
        *(_WORD *)(a1 + 144) = v29;
        *(_DWORD *)(a1 + 72) = 1065353216;
        v33 = *((_DWORD *)a2 + 26);
        v34 = *((_DWORD *)a2 + 27);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 72) = 1065353216;
    }
    v38 = vcvtmd_s64_f64(v35 + (double)v34);
    if (v33 <= v38)
    {
      if (v33 <= 0)
        v39 = 0;
      else
        v39 = v33 - 1;
    }
    else
    {
      v39 = v38 & ~(v38 >> 31);
    }
    *(_DWORD *)(a1 + 76) = v39;
    *(double *)_Q0.i64 = CA::Render::TiledTexture::lod_scale(a2, v39);
    v40 = 1.0 / *(double *)_Q0.i64;
    *(_QWORD *)(a1 + 40) = _Q0.i64[0];
    *(double *)(a1 + 48) = 1.0 / *(double *)_Q0.i64;
    if (!v39 && scale > *(double *)_Q0.i64 * 0.999)
    {
      *(_BYTE *)(a1 + 146) = BYTE2(v29);
      *(_WORD *)(a1 + 144) = v29 & 0xFF00;
      scale = *(double *)_Q0.i64;
    }
    *(double *)_Q0.i64 = scale * v40;
    *(double *)(a1 + 56) = scale;
    *(double *)(a1 + 64) = scale * v40;
  }
  v41 = (int32x4_t *)(a1 + 80);
  v42 = (CA::OGL::ContentsGeometry *)((char *)this + 104);
  _Q0.i32[0] = 1073741822;
  v109 = _Q0;
  v108 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
  v105 = (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL);
  v106 = (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000);
  while (1)
  {
    CA::Shape::get_bounds(*(_QWORD *)(*(_QWORD *)(a3 + 232) + 8), (int *)(a1 + 80));
    v43 = *(int32x2_t **)(a3 + 248);
    if (v43)
      v44 = v43 + 4;
    else
      v44 = (int32x2_t *)(a3 + 184);
    CA::BoundsImpl::intersect((int32x2_t *)(a1 + 80), *v44, v44[1]);
    v47 = *(_DWORD *)(a1 + 88);
    v48 = *(_DWORD *)(a1 + 92);
    if (v47 <= v48)
      v49 = *(_DWORD *)(a1 + 92);
    else
      v49 = *(_DWORD *)(a1 + 88);
    v46.i32[0] = v49;
    v50 = *(_QWORD *)(a1 + 80);
    v51.i64[0] = (int)v50;
    v51.i64[1] = SHIDWORD(v50);
    v52 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v46, v109), 0), v108, (int8x16_t)vcvtq_f64_s64(v51));
    v53 = (double)v47;
    v54 = (double)v48;
    if (v49 > 1073741822)
    {
      v53 = 1.79769313e308;
      v54 = 1.79769313e308;
    }
    v110 = (float64x2_t)v52;
    v111.f64[0] = v53;
    v111.f64[1] = v54;
    v55 = *(_QWORD *)(a1 + 24);
    if (v55)
    {
      CA::Rect::unapply_transform((CA::Rect *)&v110, v42, v45);
      v57 = v111;
      v58 = vclezq_f64(v111);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v58, 1), (int8x16_t)v58).u64[0] & 0x8000000000000000) == 0)
      {
        v59 = *(float64x2_t *)(v55 + 24);
        v60 = vclezq_f64(v59);
        if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v60, 1), (int8x16_t)v60).u64[0] & 0x8000000000000000) != 0
          || (v61 = *(float64x2_t *)(v55 + 8),
              v62 = vaddq_f64(v61, v59),
              v63 = vmaxnmq_f64(v110, v61),
              v57 = vsubq_f64(vminnmq_f64(vaddq_f64(v110, v111), v62), v63),
              v64 = vclezq_f64(v57),
              (vorrq_s8((int8x16_t)vdupq_laneq_s64(v64, 1), (int8x16_t)v64).u64[0] & 0x8000000000000000) != 0))
        {
          v111 = 0uLL;
          v57 = 0uLL;
        }
        else
        {
          v110 = v63;
          v111 = v57;
        }
      }
      v65 = vsubq_f64(v110, *(float64x2_t *)(v55 + 8));
      v110 = v65;
      v66 = *(double *)(v55 + 264);
      if (v66 != 1.0)
      {
        v65 = vmulq_n_f64(v65, v66);
        v110 = v65;
        v111 = vmulq_n_f64(v57, v66);
      }
      if ((*(_BYTE *)(v55 + 309) & 4) != 0)
        v110 = vaddq_f64(v65, vcvtq_f64_f32(vmul_f32(*(float32x2_t *)(v55 + 276), vcvt_f32_s32(*(int32x2_t *)v55))));
    }
    else
    {
      CA::Rect::unapply_transform((CA::Rect *)&v110, *(const CA::Transform **)(v107 + 24), v45);
    }
    v67 = *(double *)(a1 + 40);
    if (v67 == 1.0)
    {
      v69 = v110;
    }
    else
    {
      if (v111.f64[0] <= v111.f64[1])
        v68 = v111.f64[1];
      else
        v68 = v111.f64[0];
      v69 = v110;
      if (v68 < 1.79769313e308)
      {
        v69 = vmulq_n_f64(v110, v67);
        v110 = v69;
        v111.f64[0] = v111.f64[0] * v67;
        v111.f64[1] = v111.f64[1] * v67;
      }
    }
    v70 = vceqzq_f64(v111);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v70, 1), (int8x16_t)v70).u64[0] & 0x8000000000000000) != 0
      || (v71 = vorrq_s8((int8x16_t)vcltzq_f64(v111), (int8x16_t)vcgezq_f64(v111)),
          (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v71), 1), v71).u64[0] & 0x8000000000000000) != 0))
    {
      v41->i64[0] = 0;
      *(_QWORD *)(a1 + 88) = 0;
      v74 = 0uLL;
    }
    else
    {
      v72 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v69, v106));
      v73 = (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v69, v111), v105)), (int64x2_t)v72);
      *v41 = vuzp1q_s32(v72, v73);
      v74 = vrev64q_s32(vuzp1q_s32(v73, v72));
    }
    v75 = *(_DWORD *)(a1 + 76);
    if (v75 < 0 || (v76 = *(_DWORD **)a1, *(_DWORD *)(*(_QWORD *)a1 + 104) <= v75))
    {
      v82 = 0;
      v84 = 0;
      *(_DWORD *)(a1 + 96) = 0;
    }
    else
    {
      v77 = v76[27];
      _VF = __OFSUB__(v75, v77);
      v78 = v75 - v77;
      v79 = v76[4];
      v80 = v79 >> v78;
      v81 = v79 << -(char)v78;
      if (v78 < 0 != _VF)
        v82 = v81;
      else
        v82 = v80;
      *(_DWORD *)(a1 + 96) = v82;
      v83 = v76[5];
      if (v78 < 0)
        v84 = v83 << -(char)v78;
      else
        v84 = v83 >> v78;
    }
    *(_DWORD *)(a1 + 100) = v84;
    v85 = v74.u32[3];
    v86 = v74.i32[1];
    if (v74.i32[3] < 0)
    {
      v86 = v74.i32[1] + v74.i32[3];
      *(_DWORD *)(a1 + 88) = v74.i32[1] + v74.i32[3];
      *(_DWORD *)(a1 + 80) = 0;
      v85 = 0;
    }
    v87 = v74.u32[2];
    v88 = v74.i32[0];
    if (v74.i32[2] < 0)
    {
      v88 = v74.i32[0] + v74.i32[2];
      *(_DWORD *)(a1 + 92) = v74.i32[0] + v74.i32[2];
      *(_DWORD *)(a1 + 84) = 0;
      v87 = 0;
    }
    if ((int)(v86 + v85) > v82)
    {
      v86 = v82 - v85;
      *(_DWORD *)(a1 + 88) = v82 - v85;
    }
    if ((int)(v88 + v87) > v84)
    {
      v88 = v84 - v87;
      *(_DWORD *)(a1 + 92) = v84 - v87;
    }
    if (v86 < 1 || v88 <= 0)
    {
      v87 = 0;
      v85 = 0;
      v88 = 0;
      v86 = 0;
      v41->i64[0] = 0;
      *(_QWORD *)(a1 + 88) = 0;
    }
    if (v75 >= *((_DWORD *)a2 + 26) - 1)
      break;
    v89 = *(double *)(a1 + 64);
    if (v89 * (double)v86 <= 4096.0 || v89 * (double)v88 <= 4096.0)
      break;
    *(_DWORD *)(a1 + 76) = v75 + 1;
    v91 = CA::Render::TiledTexture::lod_scale(a2, v75 + 1);
    v92 = 1.0 / v91;
    *(double *)(a1 + 40) = v91;
    *(double *)(a1 + 48) = 1.0 / v91;
    v93 = *(double *)(a1 + 32);
    *(double *)(a1 + 56) = v93;
    *(double *)(a1 + 64) = v93 * v92;
  }
  v94 = *((_DWORD *)a2 + 24);
  v95 = *((_DWORD *)a2 + 25);
  v96 = v85 / v94;
  *(_DWORD *)(a1 + 104) = v85 / v94;
  *(_DWORD *)(a1 + 108) = v87 / v95;
  v97 = (v94 + v85 + v86 - 1) / v94;
  v98 = (v95 + v87 + v88 - 1) / v95;
  *(_DWORD *)(a1 + 112) = v97;
  *(_DWORD *)(a1 + 116) = v98;
  *(_DWORD *)(a1 + 120) = v96 + ((int)(v97 - v96) >> 1);
  *(_DWORD *)(a1 + 124) = v87 / v95 + ((int)(v98 - v87 / v95) >> 1);
  v99 = *(unsigned __int8 *)(a1 + 20);
  if (v99 == 2 || v99 == 11)
  {
    v100 = *(unsigned __int8 *)(a1 + 21);
    *(_BYTE *)(a1 + 20) = 1;
    if (v100 != 3)
      goto LABEL_110;
    goto LABEL_109;
  }
  if (*(_BYTE *)(a1 + 21) == 3)
  {
    *(_BYTE *)(a1 + 20) = 1;
LABEL_109:
    *(_BYTE *)(a1 + 21) = 1;
  }
LABEL_110:
  if ((*(_WORD *)(a1 + 144) & 0x100) != 0
    && ((v101 = *(_QWORD *)(v107 + 24), (*(_BYTE *)(v101 + 144) & 0x10) == 0)
     || CA::Mat4Impl::mat4_is_rectilinear(*(CA::Mat4Impl **)(v107 + 24), v56)))
  {
    v102 = *(double *)(v101 + 96);
    *(double *)(a1 + 128) = v102;
    v103 = *(double *)(v101 + 104) - floor(*(double *)(v101 + 104));
    *(double *)(a1 + 128) = v102 - floor(v102);
    *(double *)(a1 + 136) = v103;
  }
  else
  {
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
  }
  return a1;
}

uint64_t CA::OGL::TiledImageGeometry::draw_tiles(uint64_t this, int a2, int a3)
{
  int v3;
  int *v4;
  int v5;
  int v6;
  int32x2_t *v7;
  CA::OGL *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int32x2_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  char v17;
  int v18;
  int v19;
  uint32x2_t v20;
  double v21;
  double *v22;
  int v23;
  uint64_t v24;
  uint32x2_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  double *v35;
  float *v36;
  uint64_t v37;
  int v38;
  BOOL v40;
  float v41;
  _OWORD *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  double *v47;
  double *v48;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t v54;
  char *v55;
  int32x2_t *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int32x2_t v62;
  int32x2_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  _OWORD *v74;
  float64x2_t v75;
  double v76;
  float64x2_t v77;
  uint64x2_t v78;
  unsigned int v79;
  int8x16_t v80;
  int32x4_t v81;
  int v82;
  uint64_t v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  int v91;
  double v92;
  double v93;
  double v94;
  float v95;
  float v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  _DWORD *v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  double v115;
  uint64_t v116;
  double v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  double v121;
  double v122;
  uint64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  double v126;
  unsigned __int8 *v127;
  BOOL v128;
  uint64_t v129;
  const float *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  int8x16_t v134;
  int32x4_t v135;
  unsigned int v136;
  CA::OGL *v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  int32x4_t v147;
  unint64_t v148;
  unsigned int v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  double *v156;
  float32x4_t v157;
  _BOOL4 v158;
  unsigned int v159;
  unsigned int v160;
  uint64_t v161;
  double *v163;
  int v164;
  float v165;
  char v166;
  unsigned int v167;
  double *v168;
  int v169;
  __int32 v170;
  unsigned int v171;
  int32x2_t v172;
  double v173;
  unsigned int v174;
  char v175;
  unsigned int v176;
  int v177;
  int32x2_t v178;
  int v179;
  float32x4_t v180;
  float32x4_t v181;
  int32x4_t v182;
  unsigned int *v183;
  int32x2_t v184[2];
  float32x4_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int v191[2];
  double v192;
  float64x2_t v193;
  _OWORD v194[4];
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;

  v199 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(this + 112) - *(_DWORD *)(this + 104);
  if (v3 > 1024)
    return this;
  v4 = (int *)this;
  v5 = *(_DWORD *)(this + 116) - *(_DWORD *)(this + 108);
  if (v5 > 1024 || v5 * v3 > 0x2000)
    return this;
  v6 = a2;
  v7 = *(int32x2_t **)this;
  v8 = *(CA::OGL **)(this + 8);
  if (a2)
    v9 = 10752;
  else
    v9 = 10761;
  v10 = *((_QWORD *)v8 + 2);
  v158 = (*(_BYTE *)(v10 + 481) & 1) != 0 && *(unsigned __int8 *)(v10 + 480) == 3;
  v11 = *(_DWORD *)(this + 16);
  v178 = v7[12];
  v12 = v7[15];
  if (*(_QWORD *)&v12
    && (*(_DWORD *)(*(_QWORD *)&v12 + 12) & 0x300) == 0x100
    && (this = (*(uint64_t (**)(CA::OGL *, _QWORD, uint64_t))(*(_QWORD *)v8 + 608))(v8, *(_QWORD *)(*(_QWORD *)&v12 + 128), 1), (_DWORD)this))
  {
    v161 = *(_QWORD *)(*(_QWORD *)v4 + 120);
  }
  else
  {
    v161 = 0;
  }
  v13 = v4[27];
  v14 = v4[29];
  v183 = (unsigned int *)v4;
  if ((int)v13 >= v14)
  {
    *(_BYTE *)(*((_QWORD *)v8 + 2) + 16) = 0;
    goto LABEL_161;
  }
  v175 = 0;
  v15 = v11 & v9;
  v163 = (double *)(v4 + 8);
  v168 = (double *)(v4 + 16);
  if (a3)
    v16 = 1;
  else
    v16 = 2;
  v177 = v16;
  v164 = v15 | 0x100;
  v167 = v15 | 0x124;
  if (v161)
    v17 = a3;
  else
    v17 = 1;
  v166 = v17;
  v18 = v4[28];
  v160 = (v11 >> 11) & 1;
  v157 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v169 = v6;
  do
  {
    v19 = v4[26];
    if (v19 >= v18)
      goto LABEL_157;
    v170 = v13 * v178.i32[1] + v178.i32[1];
    v173 = (double)(v13 * v178.i32[1]);
    v159 = v13 * v178.i32[1];
    v165 = (float)(v13 * v178.i32[1]);
    v174 = v13;
    do
    {
      v20 = *(uint32x2_t *)(v4 + 24);
      v197 = 0u;
      v198 = 0u;
      v195 = 0u;
      v196 = 0u;
      v21 = 1.0;
      v22 = v168;
      memset(v194, 0, sizeof(v194));
      if ((v6 & 1) == 0)
      {
        v21 = *((double *)v4 + 5);
        v22 = v163;
      }
      v176 = v19;
      if (*v22 >= v21 * 0.999)
      {
        if (*v22 <= v21 * 1.001)
        {
          v179 = 0;
          goto LABEL_33;
        }
        v23 = 36;
      }
      else
      {
        v23 = 18;
      }
      v179 = v23;
LABEL_33:
      v24 = 0;
      v171 = v176 * v178.i32[0];
      v25.i32[0] = v176 * v178.i32[0] + v178.i32[0];
      v25.i32[1] = v170;
      v172 = (int32x2_t)vmin_u32(v25, v20);
      v26 = v4[19];
      v27 = 1;
      v28 = 0.0;
      v29 = v13;
      v30 = v176;
      while ((int)v26 < *(_DWORD *)(*(_QWORD *)v4 + 104))
      {
        v31 = v4[19];
        if ((_DWORD)v26 == v31 || (v32 = 0xFFFFFFFFLL, (v4[36] & 1) != 0) && (_DWORD)v26 == v31 + 1)
          v32 = (v176 - v4[30]) * (v176 - v4[30]) + (v174 - v4[31]) * (v174 - v4[31]);
        v33 = *((_QWORD *)v8 + 25);
        v34 = (double *)(v33 + 72);
        _ZF = v33 == 0;
        v35 = (double *)((char *)v8 + 224);
        if (!_ZF)
          v35 = v34;
        v36 = (float *)&v194[4 * v24];
        v37 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL, _QWORD, double, _OWORD *, float *))(**(_QWORD **)v4 + 256))(*(_QWORD *)v4, v26, v30, v29, v32, v27, v24 != 0, *((unsigned int *)v8 + 53), *v35, (_OWORD *)v36 + 1, v36 + 5);
        *(_QWORD *)v36 = v37;
        if (v37)
        {
          if (!v24
            || ((v38 = *((_DWORD *)v36 + 5), v38 != DWORD1(v194[1])) ? (_ZF = v38 == 0) : (_ZF = 1),
                !_ZF ? (v40 = DWORD1(v194[1]) == 0) : (v40 = 1),
                v40))
          {
            v41 = v36[4];
            if ((_DWORD)v26 == v183[19])
              v41 = *((float *)v183 + 18) * v41;
            v42 = &v194[4 * v24];
            *((_DWORD *)v42 + 6) = v26;
            *((_DWORD *)v42 + 7) = v27;
            v28 = v41 + v28;
            *((_BYTE *)v42 + 32) = 1;
            *((_DWORD *)v42 + 9) = v30;
            *((_DWORD *)v42 + 10) = v29;
            ++v24;
            goto LABEL_58;
          }
          v43 = (unsigned int *)(v37 + 8);
          do
          {
            v44 = __ldaxr(v43);
            v45 = v44 - 1;
          }
          while (__stlxr(v45, v43));
          if (!v45)
            (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
        }
        *(_QWORD *)v36 = 0;
        v175 |= (int)v32 >= 0;
LABEL_58:
        v4 = (int *)v183;
        if ((int)v24 < v177)
        {
          v26 = (v26 + 1);
          v27 = (2 * v27);
          v30 = v30 >> 1;
          v29 = v29 >> 1;
          if (v28 < 1.0)
            continue;
        }
        break;
      }
      if (v24)
      {
LABEL_65:
        v52 = 0;
        v53 = v179 | v164;
        v54.f32[0] = (float)v171;
        v54.f32[1] = v165;
        *(float32x2_t *)&v54.u32[2] = vcvt_f32_u32((uint32x2_t)v172);
        v180 = v54;
        v55 = (char *)&v194[1] + 8;
        do
        {
          v56 = (int32x2_t *)*((_QWORD *)v55 - 3);
          v185 = 0uLL;
          v57 = *(_DWORD *)v55;
          if (*(_DWORD *)v55 == v4[19])
          {
            v191[0] = v53;
            if ((v4[36] & 0x100) != 0 && v55[8])
            {
              v56 = (int32x2_t *)CA::OGL::TiledImageGeometry::lanczos_image((CA::OGL::Context **)v4, (CA::Render::Texture *)v56, *((double *)v4 + 16) + *((double *)v4 + 8) * (double)v171, *((double *)v4 + 17) + *((double *)v4 + 8) * v173, *((double *)v4 + 8), v191, &v185);
              v58 = v191[0];
              v57 = *(_DWORD *)v55;
            }
            else
            {
              v58 = v53;
            }
          }
          else
          {
            v58 = v167;
          }
          v59 = *((unsigned __int8 *)v4 + 20);
          if (!v57)
            v59 = *((unsigned __int8 *)v4 + 21);
          v60 = CA::OGL::Context::bind_image(v8, v52, v56, v58, *((unsigned __int8 *)v4 + 20), v59, 0, 0, 0.0, &v185, 0);
          *((_QWORD *)v55 - 2) = v60;
          if (v60)
          {
            v61 = *((_QWORD *)v4 + 3);
            if (v61 && *(_QWORD *)(*((_QWORD *)v8 + 2) + 8 * v52 + 40))
              *(_BYTE *)(v61 + 495) = 1;
            v62.i32[0] = *((_DWORD *)v55 + 3);
            v62.i32[1] = *((_DWORD *)v55 + 1);
            v63.i32[0] = v62.i32[1];
            v63.i32[1] = *((_DWORD *)v55 + 4);
            *(float32x2_t *)v64.f32 = vcvt_f32_u32((uint32x2_t)vmul_s32(vmul_s32(v62, v178), v63));
            v64.i64[1] = v64.i64[0];
            *(float32x2_t *)_Q1.f32 = vcvt_f32_u32((uint32x2_t)vmul_s32(v56[2], vdup_n_s32(*((_DWORD *)v55 + 1))));
            _Q1.i64[1] = _Q1.i64[0];
            v65.i64[0] = v185.i64[0];
            *(float32x2_t *)v66.f32 = vsub_f32(*(float32x2_t *)&v185.u32[2], *(float32x2_t *)v185.f32);
            v66.i64[1] = v66.i64[0];
            v65.i64[1] = v185.i64[0];
            _Q0 = vaddq_f32(vdivq_f32(vmulq_f32(v66, vsubq_f32(v180, v64)), _Q1), v65);
            *(float32x4_t *)(v55 + 20) = _Q0;
          }
          ++v52;
          v55 += 64;
        }
        while (v24 != v52);
        _Q1.i32[0] = v194[1];
        if (v24 == 2)
        {
          v6 = v169;
          v13 = v174;
          if (DWORD2(v194[1]) == v4[19])
          {
            _Q0.i32[0] = v4[18];
            _Q1.f32[0] = _Q0.f32[0] * *(float *)&v194[1];
          }
          v67 = 2;
        }
        else
        {
          v67 = 1;
          v6 = v169;
          v13 = v174;
        }
      }
      else
      {
        v46 = *((_QWORD *)v8 + 25);
        v47 = (double *)(v46 + 72);
        _ZF = v46 == 0;
        v48 = (double *)((char *)v8 + 224);
        if (!_ZF)
          v48 = v47;
        v13 = v174;
        *(_QWORD *)&v194[0] = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char *, double))(**(_QWORD **)v4 + 264))(*(_QWORD *)v4, v4[19], v176, v174, v160, *((unsigned int *)v8 + 53), (char *)&v194[1] + 4, *v48);
        if (*(_QWORD *)&v194[0])
        {
          v51 = v4[19];
          LODWORD(v194[1]) = 1065353216;
          *((_QWORD *)&v194[1] + 1) = v51 | 0x100000000;
          LOBYTE(v194[2]) = 0;
          *(_QWORD *)((char *)&v194[2] + 4) = __PAIR64__(v174, v176);
          v24 = 1;
          goto LABEL_65;
        }
        v67 = 0;
        _Q1.i32[0] = 1.0;
        v6 = v169;
      }
      if ((v166 & 1) != 0)
      {
LABEL_99:
        if ((_DWORD)v67 == 2)
        {
LABEL_106:
          *(_BYTE *)(*((_QWORD *)v8 + 2) + 16) = 7;
          __asm { FCVT            H0, S1 }
          *(int16x4_t *)(*((_QWORD *)v8 + 2) + 8) = vdup_lane_s16(*(int16x4_t *)_Q0.f32, 0);
          if ((*(_BYTE *)(*(_QWORD *)&v194[0] + 13) & 0x10) == 0)
          {
            LODWORD(v67) = 2;
            goto LABEL_118;
          }
          v89 = v195;
          LODWORD(v67) = 2;
          goto LABEL_117;
        }
        if ((_DWORD)v67 == 1)
          goto LABEL_108;
        if ((_DWORD)v67)
          goto LABEL_118;
        *(_BYTE *)(*((_QWORD *)v8 + 2) + 16) = 0;
        if ((a3 & 1) != 0)
          goto LABEL_118;
        LODWORD(v67) = 0;
        v79 = bswap32(*(_DWORD *)(*(_QWORD *)v4 + 112));
        _Q1.i32[0] = v79;
        _Q1.i32[1] = v79 >> 8;
        _Q1.i32[2] = HIWORD(v79);
        v80.i64[0] = 0xFF000000FFLL;
        v80.i64[1] = 0xFF000000FFLL;
        v81 = (int32x4_t)vandq_s8((int8x16_t)_Q1, v80);
        v81.i32[3] = vshrq_n_u32((uint32x4_t)vdupq_n_s32(v79), 0x18uLL).i32[3];
        *(float16x4_t *)(*((_QWORD *)v8 + 2) + 8) = vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v81), v157));
        v82 = *(unsigned __int8 *)(*(_QWORD *)v4 + 112);
        goto LABEL_104;
      }
      if (!(_DWORD)v67)
        goto LABEL_90;
      if ((_DWORD)v67 != 1)
        goto LABEL_106;
      if (_Q1.f32[0] <= 0.999)
      {
LABEL_90:
        v181 = _Q1;
        v68 = *(_QWORD *)(v161 + 128);
        v69 = &v194[4 * (unint64_t)v67];
        *v69 = v68;
        v185 = 0uLL;
        v70 = CA::OGL::Context::bind_image(v8, v67, v68, 256, 0, 0, 1, 0, 0.0, &v185, 0);
        v69[1] = v70;
        if (v70)
        {
          v71 = *((_QWORD *)v4 + 3);
          if (v71 && *(_QWORD *)(*((_QWORD *)v8 + 2) + 8 * v67 + 40))
            *(_BYTE *)(v71 + 495) = 1;
          v72 = (unsigned int *)(*v69 + 8);
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 + 1, v72));
          if (!v73)
          {
            do
              v136 = __ldaxr(v72);
            while (__stlxr(v136 - 1, v72));
          }
          v74 = &v194[4 * (unint64_t)v67];
          *((_DWORD *)v74 + 4) = 1065353216;
          *((_DWORD *)v74 + 5) = 0;
          *((_DWORD *)v74 + 6) = 0;
          *((_DWORD *)v74 + 7) = 1;
          *((_BYTE *)v74 + 32) = 0;
          *((_DWORD *)v74 + 9) = v176;
          *((_DWORD *)v74 + 10) = v13;
          v75.f64[0] = (double)v171;
          v76 = *((double *)v4 + 6) * *((double *)v4 + 4);
          v75.f64[1] = v173;
          v77 = vmulq_n_f64(v75, v76);
          *(int32x2_t *)&v75.f64[0] = vsub_s32(v172, (int32x2_t)__PAIR64__(v159, v171));
          v78.i64[0] = LODWORD(v75.f64[0]);
          v78.i64[1] = HIDWORD(v75.f64[0]);
          _Q0.f32[0] = CA::OGL::pattern_texcoords((float64x2_t *)v161, v185.f32, (uint64_t)v74 + 44, v77, vmulq_n_f64(vcvtq_f64_u64(v78), v76), (float64x2_t)0);
          LODWORD(v67) = v67 + 1;
        }
        _Q1 = v181;
        goto LABEL_99;
      }
LABEL_108:
      if ((a3 & 1) == 0)
      {
        _D0 = _Q1.f32[0];
        if (_Q1.f32[0] > 0.999)
        {
          LODWORD(v67) = 1;
          *(_BYTE *)(*((_QWORD *)v8 + 2) + 16) = 1;
          v89 = *(_QWORD *)&v194[0];
LABEL_117:
          if ((*(_BYTE *)(v89 + 13) & 0x10) == 0)
            goto LABEL_118;
LABEL_148:
          v91 = 0;
          if (v158)
            *(_BYTE *)(*((_QWORD *)v8 + 2) + 481) &= ~1u;
          goto LABEL_119;
        }
        v131 = *((_QWORD *)v8 + 2);
        if (!*(_DWORD *)(*(_QWORD *)v4 + 112))
        {
          *(_BYTE *)(v131 + 16) = 3;
          __asm { FCVT            H0, S1 }
          *(int16x4_t *)(*((_QWORD *)v8 + 2) + 8) = vdup_lane_s16(*(int16x4_t *)&_D0, 0);
          goto LABEL_113;
        }
        *(_BYTE *)(v131 + 16) = 8;
        v132 = *((_QWORD *)v8 + 2);
        *(int32x4_t *)(v132 + 24) = vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0);
        v133 = bswap32(*(_DWORD *)(*(_QWORD *)v4 + 112));
        _Q1.i32[0] = v133;
        _Q1.i32[1] = v133 >> 8;
        _Q1.i32[2] = HIWORD(v133);
        v134.i64[0] = 0xFF000000FFLL;
        v134.i64[1] = 0xFF000000FFLL;
        v135 = (int32x4_t)vandq_s8((int8x16_t)_Q1, v134);
        v135.i32[3] = vshrq_n_u32((uint32x4_t)vdupq_n_s32(v133), 0x18uLL).i32[3];
        *(float16x4_t *)(v132 + 8) = vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v135), v157));
        if ((*(_BYTE *)(*(_QWORD *)&v194[0] + 13) & 0x10) == 0)
          goto LABEL_113;
        v82 = *(unsigned __int8 *)(*(_QWORD *)v4 + 112);
        LODWORD(v67) = 1;
LABEL_104:
        if (v82 != 0xFF)
          goto LABEL_118;
        goto LABEL_148;
      }
      v86 = *((_QWORD *)v8 + 2);
      v87 = *(_QWORD *)(v86 + 16) & 0xFFFFFF00FF00FF00;
      if (*(_QWORD *)(v86 + 8) == 0x3C003C003C003C00)
        v88 = 1;
      else
        v88 = 3;
      *(_DWORD *)(v86 + 16) = v88 | v87;
      *(_DWORD *)(v86 + 20) = HIDWORD(v87);
LABEL_113:
      LODWORD(v67) = 1;
LABEL_118:
      *((_BYTE *)v4 + 146) = 0;
      v91 = 1;
LABEL_119:
      if (v6)
      {
        *((_QWORD *)v8 + 16) = 0;
        *((_QWORD *)v8 + 12) = (char *)v8 + 818;
        *(_OWORD *)((char *)v8 + 104) = xmmword_18474E060;
        v92 = *((double *)v4 + 8);
        v93 = *((double *)v4 + 16);
        v94 = *((double *)v4 + 17);
        v95 = v93 + v92 * (double)v171;
        v96 = v94 + v92 * v173;
        *(float *)&v93 = v93 + v92 * (double)v172.u32[0];
        *(float *)&v92 = v94 + v92 * (double)v172.u32[1];
        CA::OGL::Context::array_rect(v8, v95, v96, *(float *)&v93, *(float *)&v92);
        v97 = *(_QWORD *)(*((_QWORD *)v8 + 2) + 8);
        v98 = *((_QWORD *)v8 + 15) + 48 * *((_QWORD *)v8 + 16);
        *(_QWORD *)(v98 - 160) = v97;
        *(_QWORD *)(v98 - 112) = v97;
        *(_QWORD *)(v98 - 64) = v97;
        *(_QWORD *)(v98 - 16) = v97;
        if ((int)v67 >= 1)
        {
          v99 = HIDWORD(v194[2]);
          v100 = *(_QWORD *)&v194[3];
          v101 = DWORD2(v194[3]);
          v102 = *((_QWORD *)v8 + 15);
          v103 = *((_QWORD *)v8 + 16) - 4;
          v104 = (_DWORD *)(v102 + 48 * v103);
          v104[4] = HIDWORD(v194[2]);
          v104[5] = v100;
          v104[16] = HIDWORD(v100);
          v104[17] = v100;
          v104[28] = HIDWORD(v100);
          v104[29] = v101;
          v104[40] = v99;
          v104[41] = v101;
          if ((_DWORD)v67 != 1)
          {
            v105 = HIDWORD(v197);
            v106 = v198;
            v107 = DWORD2(v198);
            v108 = v102 + 48 * v103;
            *(_DWORD *)(v108 + 24) = HIDWORD(v197);
            *(_DWORD *)(v108 + 28) = v106;
            v104[18] = HIDWORD(v106);
            v104[19] = v106;
            v104[30] = HIDWORD(v106);
            v104[31] = v107;
            v104[42] = v105;
            v104[43] = v107;
          }
        }
        this = CA::OGL::Context::array_flush((uint64_t)v8);
        v109 = v176;
      }
      else
      {
        v114 = *((_QWORD *)v8 + 29);
        v184[0] = 0;
        v184[1] = 0;
        v115 = *((double *)v4 + 6);
        v116 = *((_QWORD *)v4 + 3);
        if (v116)
        {
          v117 = *(double *)(v116 + 264);
          v109 = v176;
          if (v117 != 1.0)
            v115 = v115 / v117;
        }
        else
        {
          v109 = v176;
        }
        v121 = v115 * (double)v171;
        v122 = v115 * v173;
        *(double *)v191 = v121;
        v192 = v115 * v173;
        v123.i64[0] = v172.u32[0];
        v123.i64[1] = v172.u32[1];
        v124 = vmulq_n_f64(vcvtq_f64_u64(v123), v115);
        v193 = v124;
        if (v116)
        {
          v125 = *(float64x2_t *)(v116 + 8);
          v126 = *(double *)(v116 + 16) + v122;
          *(double *)v191 = v125.f64[0] + v121;
          v192 = v126;
          v193 = vaddq_f64(v125, v124);
          v127 = (unsigned __int8 *)(v116 + 104);
        }
        else
        {
          v127 = *(unsigned __int8 **)(v114 + 24);
        }
        v188 = 0;
        v189 = 0;
        v190 = 0;
        v128 = ((v127[144] >> 4) & 1) == 0;
        v129 = *(_QWORD *)(v114 + 8);
        v185.i64[0] = (uint64_t)v8;
        v185.i64[1] = v129;
        v186 = 0;
        v187 = 0;
        LOBYTE(v188) = v128;
        BYTE1(v188) = 1;
        CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v185);
        while (1)
        {
          this = CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v185, v184);
          if (!(_DWORD)this)
            break;
          CA::OGL::emit_quad(v8, (CA::OGL::Context *)v191, (const double *)v184, (const CA::Bounds *)v127, (const CA::Transform *)((char *)&v194[2] + 12), (float *)&v197 + 3, v130);
        }
      }
      if (((v91 | !v158) & 1) == 0)
        *(_BYTE *)(*((_QWORD *)v8 + 2) + 481) |= 1u;
      if ((int)v67 < 2)
      {
        if ((_DWORD)v67 == 1)
          goto LABEL_135;
      }
      else
      {
        (*(void (**)(CA::OGL *, _QWORD, uint64_t))(*(_QWORD *)v8 + 520))(v8, *((_QWORD *)&v195 + 1), 1);
        v110 = v195;
        v111 = (unsigned int *)(v195 + 8);
        do
        {
          v112 = __ldaxr(v111);
          v113 = v112 - 1;
        }
        while (__stlxr(v113, v111));
        if (!v113)
          (*(void (**)(uint64_t))(*(_QWORD *)v110 + 16))(v110);
LABEL_135:
        (*(void (**)(CA::OGL *, _QWORD, _QWORD))(*(_QWORD *)v8 + 520))(v8, *((_QWORD *)&v194[0] + 1), 0);
        this = *(_QWORD *)&v194[0];
        v118 = (unsigned int *)(*(_QWORD *)&v194[0] + 8);
        do
        {
          v119 = __ldaxr(v118);
          v120 = v119 - 1;
        }
        while (__stlxr(v120, v118));
        if (!v120)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
      }
      v19 = v109 + 1;
      v18 = v4[28];
    }
    while (v19 < v18);
    v14 = v4[29];
LABEL_157:
    v13 = (v13 + 1);
  }
  while ((int)v13 < v14);
  *(_BYTE *)(*((_QWORD *)v8 + 2) + 16) = 0;
  if ((v175 & 1) != 0)
    return this;
LABEL_161:
  this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v4 + 280))(*(_QWORD *)v4);
  if ((int)this >= 1)
  {
    v137 = v8;
    v138 = v183[26];
    LODWORD(v194[0]) = v138 - (*(uint64_t (**)(_QWORD))(**(_QWORD **)v183 + 280))(*(_QWORD *)v183);
    v139 = v183[28];
    DWORD1(v194[0]) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v183 + 280))(*(_QWORD *)v183) + v139;
    v140 = v183[27];
    v141 = v140 - (*(uint64_t (**)(_QWORD))(**(_QWORD **)v183 + 280))(*(_QWORD *)v183);
    v142 = v183[26];
    *((_QWORD *)&v194[0] + 1) = __PAIR64__(v183[27], v141);
    LODWORD(v194[1]) = v142 - (*(uint64_t (**)(_QWORD))(**(_QWORD **)v183 + 280))(*(_QWORD *)v183);
    v143 = v183[28];
    v144 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v183 + 280))(*(_QWORD *)v183) + v143;
    v145 = v183[29];
    *(_QWORD *)((char *)&v194[1] + 4) = __PAIR64__(v145, v144);
    HIDWORD(v194[1]) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v183 + 280))(*(_QWORD *)v183) + v145;
    v146 = v183[26];
    LODWORD(v194[2]) = v146 - (*(uint64_t (**)(_QWORD))(**(_QWORD **)v183 + 280))(*(_QWORD *)v183);
    v182 = *(int32x4_t *)(v183 + 26);
    v147 = vrev64q_s32(v182);
    v147.i64[0] = *((_QWORD *)v183 + 13);
    *(int32x4_t *)((char *)&v194[2] + 4) = v147;
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v183 + 280))(*(_QWORD *)v183);
    v148 = 0;
    v149 = v183[27];
    DWORD1(v194[3]) = this + v182.i32[2];
    DWORD2(v194[3]) = v149;
    HIDWORD(v194[3]) = v183[29];
    do
    {
      v150 = *(unsigned int *)((char *)v194 + ((1 * v148) | 8));
      v151 = *(_DWORD *)((char *)v194 + ((1 * v148) | 0xC));
      if ((int)v150 < v151)
      {
        v152 = LODWORD(v194[v148]);
        v153 = *(_DWORD *)((char *)v194 + ((1 * v148) | 4));
        do
        {
          v154 = v152;
          if ((int)v152 < v153)
          {
            do
            {
              v155 = *((_QWORD *)v137 + 25);
              if (v155)
                v156 = (double *)(v155 + 72);
              else
                v156 = (double *)((char *)v137 + 224);
              this = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, double))(**(_QWORD **)v183 + 272))(*(_QWORD *)v183, v183[19], v154, v150, ((_DWORD)v154 - v183[30]) * ((_DWORD)v154 - v183[30])+ ((_DWORD)v150 - v183[31]) * ((_DWORD)v150 - v183[31]), *((unsigned int *)v137 + 53), *v156);
              v154 = (v154 + 1);
            }
            while (v153 != (_DWORD)v154);
          }
          v150 = (v150 + 1);
        }
        while ((_DWORD)v150 != v151);
      }
    }
    while (v148++ < 3);
  }
  return this;
}

_OWORD *CA::OGL::TiledImageGeometry::bind_image(int32x2_t **this, uint64_t a2, float32x4_t *a3)
{
  int v3;
  int v5;
  uint64_t v8;
  uint64_t v9;
  int32x2_t *v10;
  int32x2_t v11;
  uint64_t v12;
  double *v13;
  CA::Render::Texture *v14;
  unsigned int *v15;
  _BOOL4 v16;
  _OWORD *v17;
  BOOL v18;
  uint64_t v19;
  CA::Render::Texture *v20;
  uint64_t v21;
  uint64_t v22;
  int32x2_t v23;
  float32x4_t v24;
  uint32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  double v36;
  float v37;
  __int16 v38;
  double v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  double *v43;
  int32x4_t v44;
  int32x4_t v45;
  unsigned int v46;
  uint64_t v47;
  malloc_zone_t *malloc_zone;
  _OWORD *v49;
  int v50;
  int32x2_t v51;
  int64x2_t v52;
  float32x2_t v53;
  int32x2_t *v54;
  int v56;
  int8x16_t v57;
  int64x2_t v58;
  int8x16_t v59;
  int8x16_t v60;
  double v61;
  _QWORD v62[2];
  __int128 v63;
  __int128 v64;
  int8x16_t v65;
  uint64_t v66;
  double v67;
  int32x2_t v68;
  signed __int32 v69;
  signed __int32 v70;
  _OWORD v71[2];
  uint64_t v72;
  double v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  double v79;
  double v80;
  uint64_t v81;
  _QWORD __dst[61];
  _OWORD v83[3];
  unsigned int v84[2];
  __int128 v85;
  _OWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)this + 22);
  if (v3 < 1)
    return 0;
  v5 = *((_DWORD *)this + 23);
  if (v5 < 1)
    return 0;
  v8 = (uint64_t)this[1];
  v9 = *(_QWORD *)(v8 + 232);
  if (((_WORD)this[18] & 1) != 0
    || *((_DWORD *)this + 26) != *((_DWORD *)this + 28) - 1
    || *((_DWORD *)this + 27) != *((_DWORD *)this + 29) - 1)
  {
    goto LABEL_34;
  }
  v10 = *this;
  v11 = (*this)[12];
  LODWORD(__dst[0]) = 0;
  LODWORD(v71[0]) = 0;
  v12 = *(_QWORD *)(v8 + 200);
  if (v12)
    v13 = (double *)(v12 + 72);
  else
    v13 = (double *)(v8 + 224);
  v14 = (CA::Render::Texture *)(*(uint64_t (**)(int32x2_t *, _QWORD, double))(*(_QWORD *)v10 + 256))(v10, *((unsigned int *)this + 19), *v13);
  v15 = (unsigned int *)v14;
  if ((*(_BYTE *)(v8 + 416) & 0x40) != 0)
  {
    LODWORD(__dst[0]) = 1065353216;
    v16 = 1;
  }
  else
  {
    v16 = *(float *)__dst == 1.0;
  }
  if (v14)
    v18 = !v16;
  else
    v18 = 1;
  if (!v18)
  {
    v19 = (_DWORD)this[2] & 0x2B3F;
    v84[0] = (_DWORD)this[2] & 0x2B3F;
    v20 = v14;
    if (((_WORD)this[18] & 0x100) != 0)
    {
      v20 = CA::OGL::TiledImageGeometry::lanczos_image((CA::OGL::Context **)this, v14, 0.0, 0.0, *((double *)this + 6) * *((double *)this + 4), v84, a3);
      v19 = v84[0];
    }
    v21 = 20;
    if (*((double *)this + 4) > 1.001)
      v21 = 21;
    v22 = CA::OGL::Context::bind_image(v8, a2, v20, v19, *((unsigned __int8 *)this + v21), *((unsigned __int8 *)this + v21), 0, 0, 0.0, a3, 0);
    if (v22)
    {
      v17 = (_OWORD *)v22;
      v23 = *(int32x2_t *)(v15 + 4);
      *(float32x2_t *)v24.f32 = vdiv_f32(vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a3, *(int8x16_t *)a3, 8uLL), *(float32x2_t *)a3->f32), vcvt_f32_u32((uint32x2_t)v23));
      *(int32x2_t *)v25.i8 = vmul_s32((int32x2_t)this[13], v11);
      v24.i64[1] = v24.i64[0];
      v25.u64[1] = (unint64_t)vsub_s32((int32x2_t)this[12], vadd_s32(*(int32x2_t *)v25.i8, v23));
      v26 = vmulq_f32(v24, vcvtq_f32_u32(v25));
      v27.i64[0] = vsubq_f32(*a3, v26).u64[0];
      v27.i64[1] = vaddq_f32(*a3, v26).i64[1];
      *a3 = v27;
      v28 = v15 + 2;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
        (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
      return v17;
    }
    goto LABEL_29;
  }
  if (v14)
  {
LABEL_29:
    v31 = v15 + 2;
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
  }
  v3 = *((_DWORD *)this + 22);
  v5 = *((_DWORD *)this + 23);
LABEL_34:
  v34 = *((_DWORD *)this + 20);
  v35 = *((_DWORD *)this + 21);
  v36 = *((double *)this + 8);
  v68 = (int32x2_t)__PAIR64__(vcvtmd_s64_f64(v36 * (double)v35), vcvtmd_s64_f64(v36 * (double)v34));
  v69 = vcvtpd_s64_f64(v36 * (double)(v3 + v34)) - v68.i32[0];
  v70 = vcvtpd_s64_f64(v36 * (double)(v5 + v35)) - v68.i32[1];
  v86 = 0;
  v90 = 0u;
  v85 = 0u;
  v87 = 0x3C003C003C003C00;
  v88 = 0;
  v89 = 0;
  *(_QWORD *)&v90 = 0;
  *(_QWORD *)v84 = 0;
  if (v9)
  {
    v85 = *(_OWORD *)(v9 + 8);
    v86 = *(_OWORD **)(v9 + 24);
    v37 = *(float *)(v9 + 64);
    v38 = *(_WORD *)(v9 + 68) & 0x500 | 1;
  }
  else
  {
    v85 = 0uLL;
    v38 = 1025;
    v37 = 1.0;
    v86 = 0;
  }
  *((float *)&v90 + 2) = v37;
  WORD6(v90) = v38;
  v81 = 0;
  v39 = *((double *)this + 7);
  v71[1] = 0u;
  v75 = 0u;
  v72 = 0;
  v74 = 0u;
  v77 = 0u;
  v78 = xmmword_18474DF50;
  v71[0] = *(unint64_t *)&v39;
  v73 = v39;
  v76 = 0x3FF0000000000000uLL;
  v79 = v39;
  v80 = 1.0 / v39;
  v81 = (8 * (v39 != 1.0));
  *((_QWORD *)&v85 + 1) = 0;
  v86 = v71;
  memset(v83, 0, sizeof(v83));
  CA::Shape::operator=((uint64_t)v83, &v68);
  *(_QWORD *)&v85 = v83;
  *(_QWORD *)v84 = CA::OGL::Context::set_gstate(v8, (uint64_t)v84);
  v40 = *(const void **)(v8 + 16);
  memcpy(__dst, v40, sizeof(__dst));
  __dst[0] = v40;
  *(_QWORD *)(v8 + 16) = __dst;
  LOBYTE(__dst[2]) = 0;
  BYTE1(__dst[60]) &= ~1u;
  v41 = (*(uint64_t (**)(uint64_t, uint64_t, int32x2_t *, uint64_t))(*(_QWORD *)v8 + 656))(v8, 1, &v68, 15);
  if (v41)
  {
    v42 = v41;
    CA::OGL::Context::push_surface(v8, v41, 1u, 4, 0);
    CA::OGL::TiledImageGeometry::draw_tiles((uint64_t)this, 1, 0);
    if (byte_1ECDC6A61)
    {
      if (v69 <= v70)
        v56 = v70;
      else
        v56 = v69;
      v44.i32[0] = 1073741822;
      v45.i32[0] = v56;
      v57 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v45, v44), 0);
      v58.i64[0] = v68.i32[0];
      v58.i64[1] = v68.i32[1];
      v60 = (int8x16_t)vcvtq_f64_s64(v58);
      v59 = vbslq_s8(v57, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), v60);
      *(double *)v60.i64 = (double)v69;
      v61 = (double)v70;
      if (v56 > 1073741822)
      {
        *(double *)v60.i64 = 1.79769313e308;
        v61 = 1.79769313e308;
      }
      v65 = v59;
      v66 = v60.i64[0];
      v67 = v61;
      v62[0] = &v65;
      v62[1] = v86;
      v63 = 0u;
      v64 = 0u;
      CA::OGL::fill_color_rect(v8, (uint64_t)v62, (double *)0x80800080, v43, 0.0, v60);
    }
    CA::OGL::Context::pop_surface((CA::OGL::Context *)v8);
    *(_QWORD *)(v8 + 16) = __dst[0];
    __dst[0] = 0;
    CA::OGL::Context::set_gstate(v8, **(_QWORD **)(v8 + 232));
    if (((_BYTE)this[2] & 0x3F) != 0)
    {
      v46 = *((unsigned __int8 *)this + 20);
      v47 = *((unsigned __int8 *)this + 21);
    }
    else
    {
      v46 = 0;
      v47 = 0;
    }
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v49 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x40uLL, 0x743898A5uLL);
    v17 = v49;
    if (v49)
    {
      v49[2] = 0u;
      v49[3] = 0u;
      *v49 = 0u;
      v49[1] = 0u;
    }
    *((_QWORD *)v49 + 3) = v42;
    CA::OGL::Context::bind_surface(v8, v42, a2, v46, v47, 0.0);
    v50 = *(unsigned __int16 *)(*(_QWORD *)(v8 + 16) + 2 * a2 + 144) | (*((unsigned __int16 *)v17 + 27) << 16);
    *((_DWORD *)v17 + 13) = v50;
    *((_WORD *)v17 + 29) = *((_WORD *)v17 + 29) & 0xFEFF | (16 * *(_WORD *)(v42 + 75)) & 0x100;
    *((_DWORD *)v17 + 13) = v50 & 0xFF00FFFF | ((v46 & 0xF) << 16) & 0xFF0FFFFF | ((v47 & 0xF) << 20);
    v51 = vneg_s32(v68);
    v52.i64[0] = v51.i32[0];
    v52.i64[1] = v51.i32[1];
    v53 = vcvt_f32_f64(vaddq_f64(*((float64x2_t *)this + 8), vcvtq_f64_s64(v52)));
    *(float32x2_t *)a3->f32 = v53;
    v54 = this[12];
    v52.i64[0] = v54;
    v52.i64[1] = HIDWORD(v54);
    *(float32x2_t *)&a3->u32[2] = vcvt_f32_f64(vmlaq_n_f64(vcvtq_f64_f32(v53), vcvtq_f64_u64((uint64x2_t)v52), *((double *)this + 8)));
  }
  else
  {
    *(_QWORD *)(v8 + 16) = __dst[0];
    __dst[0] = 0;
    CA::OGL::Context::set_gstate(v8, **(_QWORD **)(v8 + 232));
    v17 = 0;
  }
  if (__dst[0])
    __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
  return v17;
}

_OWORD *CA::OGL::bind_tiled_image(uint64_t a1, uint64_t a2, CA::Render::TiledTexture *a3, double *a4, char a5, char a6, CA::OGL::ContentsGeometry *a7, float32x4_t *a8, float a9)
{
  _OWORD v12[9];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  CA::OGL::TiledImageGeometry::TiledImageGeometry((uint64_t)v12, a3, a1, a4, a5, a6, a7, a9);
  return CA::OGL::TiledImageGeometry::bind_image((int32x2_t **)v12, a2, a8);
}

uint64_t CA::OGL::draw_tiled_image(uint64_t a1, CA::Render::TiledTexture *a2, char a3, char a4, CA::OGL::ContentsGeometry *this, int a6, float a7)
{
  _OWORD v9[9];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  CA::OGL::TiledImageGeometry::TiledImageGeometry((uint64_t)v9, a2, a1, (double *)*((unsigned int *)this + 77), a3, a4, this, a7);
  return CA::OGL::TiledImageGeometry::draw_tiles((uint64_t)v9, 0, a6);
}

uint64_t CA::OGL::PathFiller::mark_spans(uint64_t result, float a2, float a3, float a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  float v16;
  char v17;
  unsigned int v18;
  int v19;
  _DWORD *v20;

  v5 = *(unsigned int *)(result + 56);
  if ((int)v5 < 2)
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = v5 - 1;
    do
    {
      v10 = *(float *)(result + 68 + 4 * v6++);
      if (v10 < a2)
        v7 = v6;
      if (v10 < a4)
        v8 = v6;
    }
    while (v9 != v6);
  }
  v11 = *(unsigned int *)(result + 60);
  if ((int)v11 < 2)
  {
    v13 = 0;
    v17 = 31;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = v11 - 1;
    do
    {
      v16 = *(float *)(result + 200 + 4 * v12++);
      if (v16 < a3)
        v13 = v12;
      if (v16 < a5)
        v14 = v12;
    }
    while (v15 != v12);
    v17 = 31 - v14;
  }
  if (v7 <= v8)
  {
    v18 = (0xFFFFFFFF >> v17) & (-1 << v13);
    v19 = v8 - v7 + 1;
    v20 = (_DWORD *)(result + 4 * v7 + 328);
    do
    {
      *v20++ |= v18;
      --v19;
    }
    while (v19);
  }
  return result;
}

_DWORD *CA::OGL::PathFiller::add_cube(CA::OGL::PathFiller *this, _DWORD *a2, float a3)
{
  uint64_t v4;
  int v5;
  float v6;
  _DWORD *v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _DWORD *result;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;

  v4 = *((_QWORD *)this + 73);
  v5 = *((_DWORD *)this + 161);
  v6 = *((float *)a2 + 1);
  v7 = a2 + 6;
  v8 = *((float *)a2 + 7);
  v9 = 1.0;
  v10 = 1;
  v11 = 2;
  v12 = v8 < v6;
  if (v8 < v6)
  {
    result = a2 + 6;
  }
  else
  {
    v9 = -1.0;
    result = a2;
  }
  if (v8 >= v6)
    v11 = 1;
  else
    v6 = *((float *)a2 + 7);
  if (v12)
    v7 = a2;
  else
    v10 = 2;
  *(float *)(v4 + 40 * v5) = v9;
  LODWORD(v14) = *result;
  *((float *)&v14 + 1) = v6;
  v15 = v4 + 40 * v5;
  *(_QWORD *)(v15 + 8) = v14;
  *(_QWORD *)(v15 + 16) = *(_QWORD *)&a2[2 * v11];
  if (v12)
    v16 = a2 + 1;
  else
    v16 = a2 + 7;
  *(_QWORD *)(v15 + 24) = *(_QWORD *)&a2[2 * v10];
  LODWORD(v17) = *v7;
  HIDWORD(v17) = *v16;
  *(float *)(v15 + 4) = a3;
  *(_QWORD *)(v15 + 32) = v17;
  v18 = *((_DWORD *)this + 161) + 1;
  *((_DWORD *)this + 161) = v18;
  if (v18 >= *((_DWORD *)this + 152))
  {
    *((_BYTE *)this + 664) = 1;
    CA::OGL::PathFiller::emit_span_rect_coverage((int *)this);
    return (_DWORD *)CA::OGL::PathFiller::flush_cube((uint64_t)this);
  }
  return result;
}

int *CA::OGL::PathFiller::emit_span_rect_coverage(int *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;

  v1 = (uint64_t)this;
  if (this[14] >= 1)
  {
    v2 = 0;
    do
    {
      v3 = v2;
      this = (int *)CA::OGL::PathFiller::emit_rects_from_points((CA::OGL::PathFiller *)v1, v2, v2);
      ++v2;
      v4 = *(unsigned int *)(v1 + 56);
      v5 = *(_DWORD *)(v1 + 644);
      if (v5 >= 1)
      {
        v6 = 0;
        v7 = *(float *)(v1 + 64 + 4 * v3);
        v8 = *(float *)(v1 + 64 + 4 * v2);
        v9 = 16;
        do
        {
          v10 = 0;
          v11 = *(_QWORD *)(v1 + 584);
          v12 = *(_QWORD *)(v11 + 40 * v6 + 8);
          v13 = *(float *)&v12;
          v14 = *(float *)&v12;
          do
          {
            v15 = *(_QWORD *)(v11 + v9 + v10);
            if (v14 <= *(float *)&v15)
              LODWORD(v14) = *(_QWORD *)(v11 + v9 + v10);
            if (v13 >= *(float *)&v15)
              LODWORD(v13) = *(_QWORD *)(v11 + v9 + v10);
            v10 += 8;
          }
          while (v10 != 24);
          if (v13 <= v8 && (v14 > v7 || v3 == 0) && v14 <= v8)
          {
            *(float *)(v11 + 40 * v6 + 4) = v8;
            if (v2 != v4)
            {
              this = (int *)CA::OGL::PathFiller::add_points((float *)v1, *((float *)&v12 + 1), *(float *)(v11 + 40 * v6 + 36), *(float *)(v11 + 40 * v6), v2);
              v5 = *(_DWORD *)(v1 + 644);
            }
          }
          ++v6;
          v9 += 40;
        }
        while (v6 < v5);
        LODWORD(v4) = *(_DWORD *)(v1 + 56);
      }
    }
    while (v2 < (int)v4);
  }
  *(_DWORD *)(v1 + 652) = 0;
  return this;
}

uint64_t CA::OGL::PathFiller::flush_cube(uint64_t this)
{
  int v1;
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  float32x2_t *v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  char v14;

  v1 = *(_DWORD *)(this + 644);
  if (v1)
  {
    v2 = (_DWORD *)this;
    if (v1 >= 1)
    {
      v3 = 0;
      v4 = 0;
      __asm { FMOV            V0.2S, #3.0 }
      do
      {
        v10 = (float32x2_t *)(*(_QWORD *)(this + 584) + v3);
        v11 = v10[1];
        v12 = v10[2];
        v13 = v10[3];
        v10[1] = vmla_f32(vsub_f32(v10[4], v11), _D0, vsub_f32(v12, v13));
        v10[2] = vmul_f32(vadd_f32(vsub_f32(v11, vadd_f32(v12, v12)), v13), _D0);
        v10[3] = vmul_f32(vsub_f32(v12, v11), _D0);
        v10[4] = v11;
        ++v4;
        v3 += 40;
      }
      while (v4 < *(int *)(this + 644));
    }
    if (*(_BYTE *)(this + 641))
      v14 = 83;
    else
      v14 = 82;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)this + 16) + 16) = v14;
    this = (*(uint64_t (**)(void))(**(_QWORD **)this + 320))();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v2 + 16) + 481) |= 4u;
    v2[161] = 0;
  }
  return this;
}

void *CA::OGL::PathFiller::emit_rects_from_points(CA::OGL::PathFiller *this, int a2, int a3)
{
  float *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *result;
  float *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float *v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  float *v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  float v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  char *v35;
  int v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  int v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;

  v4 = (float *)*((_QWORD *)this + 75);
  v5 = *((int *)this + 163);
  v6 = 126 - 2 * __clz(v5);
  if ((_DWORD)v5)
    v7 = v6;
  else
    v7 = 0;
  result = std::__introsort<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *,false>(v4, &v4[2 * v5], v7, 1);
  v9 = (float *)*((_QWORD *)this + 75);
  v10 = *((int *)this + 163);
  *(_QWORD *)&v9[2 * v10] = 2139095040;
  if ((int)v10 <= 0)
  {
    *((_DWORD *)this + 163) = 0;
  }
  else
  {
    v11 = 0;
    *(float *)&v12 = *v9;
    v13 = 8 * v10 + 8;
    v14 = 8;
    do
    {
      v15 = *(float *)&v12;
      v12 = *(_QWORD *)&v9[(unint64_t)v14 / 4];
      v16 = &v9[2 * v11];
      v18 = v16[1];
      v17 = v16 + 1;
      v19 = v18;
      if (*(float *)&v12 == v15)
      {
        *v17 = v19 + *((float *)&v12 + 1);
      }
      else
      {
        if (v19 != 0.0)
          ++v11;
        *(_QWORD *)&v9[2 * v11] = v12;
      }
      v14 += 8;
    }
    while (v13 != v14);
    *((_DWORD *)this + 163) = v11;
    if (v11 >= 2)
    {
      v20 = *v9;
      v21 = v9[1];
      v22 = 1;
      do
      {
        v23 = v20;
        v24 = (float *)(*((_QWORD *)this + 75) + 8 * v22);
        v20 = *v24;
        v25 = v24[1];
        if (v21 != 0.0)
        {
          v26 = *((unsigned int *)this + 15);
          if ((int)v26 < 2)
          {
            v28 = 0;
            v29 = 0;
          }
          else
          {
            v27 = 0;
            v28 = 0;
            v29 = 0;
            v30 = v26 - 1;
            do
            {
              v31 = *((float *)this + v27++ + 50);
              if (v31 < v23)
                v29 = v27;
              if (v31 < v20)
                v28 = v27;
            }
            while (v30 != v27);
          }
          v32 = (0xFFFFFFFF >> ~v28) & (-1 << v29);
          if (a2 != a3 || *((_BYTE *)this + 664))
          {
            v50 = (_DWORD *)((char *)this + 4 * a2 + 328);
            v51 = a3 + 1 - a2;
            if (a2 <= a3)
            {
              do
              {
                *v50++ |= v32;
                --v51;
              }
              while (v51);
            }
            result = CA::OGL::PathFiller::add_rect(this, *((float *)this + a2 + 16), v23, *((float *)this + a3 + 17), v20, -v21);
          }
          else
          {
            v33 = (1 << v29) | (1 << v28);
            v34 = a2;
            do
            {
              v35 = (char *)this + 4 * v34;
              v36 = v33 | *((_DWORD *)v35 + 82);
              *((_DWORD *)v35 + 82) = v36;
              v37 = v36 & v32;
              if (*((_BYTE *)this + 640))
                v38 = ((int)v21 & 1) == 0;
              else
                v38 = 0;
              if (!v38)
                *((_DWORD *)v35 + 114) |= v37 ^ v32;
              v39 = v34 + 1;
              v40 = *((_DWORD *)this + 15);
              if ((v40 & 0x80000000) == 0)
              {
                v41 = *((float *)this + v34 + 16);
                v42 = *((float *)this + v39 + 16);
                v43 = *((float *)this + 49);
                v44 = 50;
                v45 = v43;
                do
                {
                  v46 = *((float *)this + v44);
                  if ((v37 & 1) == 0)
                  {
                    if (v43 != v45)
                    {
                      if (v23 <= v43)
                        v47 = v23;
                      else
                        v47 = v43;
                      if (v47 < v45)
                        v47 = v45;
                      if (v20 <= v43)
                        v43 = v20;
                      if (v43 >= v45)
                        v48 = v43;
                      else
                        v48 = v45;
                      result = CA::OGL::PathFiller::add_rect(this, v41, v47, v42, v48, -v21);
                    }
                    if (v37 < 2)
                      break;
                    v40 = *((_DWORD *)this + 15);
                    v45 = v46;
                  }
                  v37 >>= 1;
                  v49 = v44 - 50;
                  ++v44;
                  v43 = v46;
                }
                while (v49 < v40);
              }
              v34 = v39;
            }
            while (a3 + 1 != (_DWORD)v39);
          }
        }
        v21 = v25 + v21;
        ++v22;
      }
      while (v22 < *((int *)this + 163));
    }
  }
  return result;
}

float *CA::OGL::PathFiller::add_points(float *this, float a2, float a3, float a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;

  if (this[7] >= a2)
    a2 = this[7];
  v5 = *((_QWORD *)this + 75);
  v6 = *((int *)this + 163);
  v7 = (float *)(v5 + 8 * v6);
  *v7 = a2;
  v7[1] = -a4;
  v8 = this[9];
  if (v8 > a3)
    v8 = a3;
  *((_DWORD *)this + 163) = v6 + 2;
  v9 = (float *)(v5 + 8 * ((int)v6 + 1));
  *v9 = v8;
  v9[1] = a4;
  if ((int)v6 + 5 >= *((_DWORD *)this + 154))
  {
    v10 = this;
    *((_BYTE *)this + 664) = 1;
    this = (float *)CA::OGL::PathFiller::emit_rects_from_points((CA::OGL::PathFiller *)this, a5, *((_DWORD *)this + 14) - 1);
    v10[163] = 0.0;
  }
  return this;
}

float *std::__introsort<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *,false>(float *result, float *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  float *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  float *v13;
  uint64_t v14;
  float v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  float *v20;
  float v21;
  float v22;
  float *v23;
  uint64_t v24;
  float v25;
  float v26;
  BOOL v27;
  float v28;
  unint64_t v29;
  float *v30;
  float v31;
  int v32;
  uint64_t v33;
  float v34;
  float v35;
  uint64_t v36;
  float *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float *v44;
  BOOL v46;
  uint64_t v47;
  unint64_t v48;
  float *v49;
  float v50;
  int v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  int64_t v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  float *v59;
  unint64_t v60;
  float v61;
  int v62;
  float *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  float v76;
  int v77;
  _QWORD *v78;
  uint64_t v80;
  float v81;
  int v82;
  float *v83;
  uint64_t v84;

  v7 = (uint64_t)result;
LABEL_2:
  v8 = a2 - 2;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (uint64_t)a2 - v9;
    v11 = (uint64_t)((uint64_t)a2 - v9) >> 3;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*v8 < *(float *)v9)
        {
          v36 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *(_QWORD *)v8;
          *(_QWORD *)v8 = v36;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>((float *)v9, (float *)(v9 + 8), a2 - 2);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>((float *)v9, (float *)(v9 + 8), (float *)(v9 + 16), (_QWORD *)a2 - 1);
      case 5uLL:
        v37 = (float *)(v9 + 16);
        v38 = (uint64_t *)(v9 + 24);
        result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>((float *)v9, (float *)(v9 + 8), (float *)(v9 + 16), (_QWORD *)(v9 + 24));
        if (*v8 < *(float *)(v9 + 24))
        {
          v39 = *v38;
          *v38 = *(_QWORD *)v8;
          *(_QWORD *)v8 = v39;
          if (*(float *)v38 < *v37)
          {
            v40 = *(_QWORD *)v37;
            v41 = *v38;
            *(_QWORD *)v37 = *v38;
            *v38 = v40;
            if (*(float *)(v9 + 8) > *(float *)&v41)
            {
              v42 = *(_QWORD *)(v9 + 8);
              *(_QWORD *)(v9 + 8) = v41;
              *(_QWORD *)(v9 + 16) = v42;
              if (*(float *)v9 > *(float *)&v41)
              {
                v43 = *(_QWORD *)v9;
                *(_QWORD *)v9 = v41;
                *(_QWORD *)(v9 + 8) = v43;
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 191)
        {
          v44 = (float *)(v9 + 8);
          v46 = (float *)v9 == a2 || v44 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v46)
            {
              v47 = 0;
              v48 = v9;
              do
              {
                v49 = v44;
                v50 = *(float *)(v48 + 8);
                if (v50 < *(float *)v48)
                {
                  v51 = *(_DWORD *)(v48 + 12);
                  v52 = v47;
                  while (1)
                  {
                    *(_QWORD *)(v9 + v52 + 8) = *(_QWORD *)(v9 + v52);
                    if (!v52)
                      break;
                    v53 = *(float *)(v9 + v52 - 8);
                    v52 -= 8;
                    if (v53 <= v50)
                    {
                      v54 = v9 + v52 + 8;
                      goto LABEL_80;
                    }
                  }
                  v54 = v9;
LABEL_80:
                  *(float *)v54 = v50;
                  *(_DWORD *)(v54 + 4) = v51;
                }
                v44 = v49 + 2;
                v47 += 8;
                v48 = (unint64_t)v49;
              }
              while (v49 + 2 != a2);
            }
          }
          else if (!v46)
          {
            do
            {
              v80 = (uint64_t)v44;
              v81 = *(float *)(v7 + 8);
              if (v81 < *(float *)v7)
              {
                v82 = *(_DWORD *)(v7 + 12);
                do
                {
                  v83 = v44;
                  v84 = *((_QWORD *)v44 - 1);
                  v44 -= 2;
                  *(_QWORD *)v83 = v84;
                }
                while (*(v83 - 4) > v81);
                *v44 = v81;
                *((_DWORD *)v44 + 1) = v82;
              }
              v44 = (float *)(v80 + 8);
              v7 = v80;
            }
            while ((float *)(v80 + 8) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((float *)v9 != a2)
          {
            v55 = (v11 - 2) >> 1;
            v56 = v55;
            do
            {
              v57 = v56;
              if (v55 >= v56)
              {
                v58 = (2 * v56) | 1;
                v59 = (float *)(v9 + 8 * v58);
                if (2 * v57 + 2 < (uint64_t)v11 && *v59 < v59[2])
                {
                  v59 += 2;
                  v58 = 2 * v57 + 2;
                }
                v60 = v9 + 8 * v57;
                v61 = *(float *)v60;
                if (*v59 >= *(float *)v60)
                {
                  v62 = *(_DWORD *)(v60 + 4);
                  do
                  {
                    v63 = v59;
                    *(_QWORD *)v60 = *(_QWORD *)v59;
                    if (v55 < v58)
                      break;
                    v64 = 2 * v58;
                    v58 = (2 * v58) | 1;
                    v59 = (float *)(v9 + 8 * v58);
                    v65 = v64 + 2;
                    if (v65 < (uint64_t)v11 && *v59 < v59[2])
                    {
                      v59 += 2;
                      v58 = v65;
                    }
                    v60 = (unint64_t)v63;
                  }
                  while (*v59 >= v61);
                  *v63 = v61;
                  *((_DWORD *)v63 + 1) = v62;
                }
              }
              v56 = v57 - 1;
            }
            while (v57);
            v66 = (unint64_t)v10 >> 3;
            do
            {
              v67 = 0;
              v68 = *(_QWORD *)v9;
              v69 = v9;
              do
              {
                v70 = (_QWORD *)v69;
                v69 += 8 * v67 + 8;
                v71 = 2 * v67;
                v67 = (2 * v67) | 1;
                v72 = v71 + 2;
                if (v72 < v66 && *(float *)v69 < *(float *)(v69 + 8))
                {
                  v69 += 8;
                  v67 = v72;
                }
                *v70 = *(_QWORD *)v69;
              }
              while (v67 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
              a2 -= 2;
              if ((float *)v69 == a2)
              {
                *(_QWORD *)v69 = v68;
              }
              else
              {
                *(_QWORD *)v69 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v68;
                v73 = v69 - v9 + 8;
                if (v73 >= 9)
                {
                  v74 = (((unint64_t)v73 >> 3) - 2) >> 1;
                  v75 = (_QWORD *)(v9 + 8 * v74);
                  v76 = *(float *)v69;
                  if (*(float *)v75 < *(float *)v69)
                  {
                    v77 = *(_DWORD *)(v69 + 4);
                    do
                    {
                      v78 = v75;
                      *(_QWORD *)v69 = *v75;
                      if (!v74)
                        break;
                      v74 = (v74 - 1) >> 1;
                      v75 = (_QWORD *)(v9 + 8 * v74);
                      v69 = (unint64_t)v78;
                    }
                    while (*(float *)v75 < v76);
                    *(float *)v78 = v76;
                    *((_DWORD *)v78 + 1) = v77;
                  }
                }
              }
            }
            while (v66-- > 2);
          }
          return result;
        }
        v12 = v11 >> 1;
        v13 = (float *)(v9 + 8 * (v11 >> 1));
        if ((unint64_t)v10 < 0x401)
        {
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>((float *)(v7 + 8 * (v11 >> 1)), (float *)v7, a2 - 2);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>((float *)v7, (float *)(v7 + 8 * (v11 >> 1)), a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>((float *)(v7 + 8), v13 - 2, a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>((float *)(v7 + 16), (float *)(v7 + 8 + 8 * v12), a2 - 6);
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>(v13 - 2, v13, (float *)(v7 + 8 + 8 * v12));
          v14 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v13;
          *(_QWORD *)v13 = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *(float *)v7;
          if (*(float *)(v7 - 8) < *(float *)v7)
            goto LABEL_12;
          if (*v8 <= v15)
          {
            v29 = v7 + 8;
            do
            {
              v9 = v29;
              if (v29 >= (unint64_t)a2)
                break;
              v29 += 8;
            }
            while (*(float *)v9 <= v15);
          }
          else
          {
            v9 = v7;
            do
            {
              v28 = *(float *)(v9 + 8);
              v9 += 8;
            }
            while (v28 <= v15);
          }
          v30 = a2;
          if (v9 < (unint64_t)a2)
          {
            v30 = a2;
            do
            {
              v31 = *(v30 - 2);
              v30 -= 2;
            }
            while (v31 > v15);
          }
          v32 = *(_DWORD *)(v7 + 4);
          while (v9 < (unint64_t)v30)
          {
            v33 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v30;
            *(_QWORD *)v30 = v33;
            do
            {
              v34 = *(float *)(v9 + 8);
              v9 += 8;
            }
            while (v34 <= v15);
            do
            {
              v35 = *(v30 - 2);
              v30 -= 2;
            }
            while (v35 > v15);
          }
          if (v9 - 8 != v7)
            *(_QWORD *)v7 = *(_QWORD *)(v9 - 8);
          a4 = 0;
          *(float *)(v9 - 8) = v15;
          *(_DWORD *)(v9 - 4) = v32;
          continue;
        }
        v15 = *(float *)v7;
LABEL_12:
        v16 = *(_DWORD *)(v7 + 4);
        v17 = v7;
        do
        {
          v18 = v17;
          v19 = *(float *)(v17 + 8);
          v17 += 8;
        }
        while (v19 < v15);
        v20 = a2;
        if (v18 == v7)
        {
          v20 = a2;
          do
          {
            if (v17 >= (unint64_t)v20)
              break;
            v22 = *(v20 - 2);
            v20 -= 2;
          }
          while (v22 >= v15);
        }
        else
        {
          do
          {
            v21 = *(v20 - 2);
            v20 -= 2;
          }
          while (v21 >= v15);
        }
        if (v17 >= (unint64_t)v20)
        {
          v9 = v17;
        }
        else
        {
          v23 = v20;
          v9 = v17;
          do
          {
            v24 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v23;
            *(_QWORD *)v23 = v24;
            do
            {
              v25 = *(float *)(v9 + 8);
              v9 += 8;
            }
            while (v25 < v15);
            do
            {
              v26 = *(v23 - 2);
              v23 -= 2;
            }
            while (v26 >= v15);
          }
          while (v9 < (unint64_t)v23);
        }
        if (v9 - 8 != v7)
          *(_QWORD *)v7 = *(_QWORD *)(v9 - 8);
        *(float *)(v9 - 8) = v15;
        *(_DWORD *)(v9 - 4) = v16;
        if (v17 < (unint64_t)v20)
        {
LABEL_33:
          result = (float *)std::__introsort<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *,false>(v7, v9 - 8, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v27 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>(v7, v9 - 8);
        result = (float *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>(v9, (uint64_t)a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_33;
        }
        a2 = (float *)(v9 - 8);
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

_DWORD *CA::OGL::PathFiller::add_rect(_DWORD *this, float a2, float a3, float a4, float a5, float a6)
{
  int v6;
  float *v7;

  v6 = this[162];
  v7 = (float *)(*((_QWORD *)this + 74) + 20 * v6);
  *v7 = a2;
  v7[1] = a3;
  v7[2] = a4;
  v7[3] = a5;
  v7[4] = a6;
  this[162] = v6 + 1;
  if (v6 + 1 >= this[153])
  {
    *((_BYTE *)this + 664) = 1;
    return CA::OGL::PathFiller::flush_rect(this);
  }
  return this;
}

_DWORD *CA::OGL::PathFiller::flush_rect(_DWORD *this)
{
  _DWORD *v1;

  if (this[162])
  {
    v1 = this;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)this + 16) + 16) = 84;
    this = (_DWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)this + 328))(*(_QWORD *)this, v1[162], *((_QWORD *)v1 + 74));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v1 + 16) + 481) |= 4u;
    v1[162] = 0;
  }
  return this;
}

float *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = *a3;
  if (*a2 >= *result)
  {
    if (v4 < v3)
    {
      v6 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
      if (*a2 < *result)
      {
        v7 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v7;
      }
    }
  }
  else
  {
    v5 = *(_QWORD *)result;
    if (v4 >= v3)
    {
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v5;
      if (*a3 >= *(float *)&v5)
        return result;
      *(_QWORD *)a2 = *(_QWORD *)a3;
    }
    else
    {
      *(_QWORD *)result = *(_QWORD *)a3;
    }
    *(_QWORD *)a3 = v5;
  }
  return result;
}

float *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>(float *a1, float *a2, float *a3, _QWORD *a4)
{
  float *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>(a1, a2, a3);
  if (*(float *)a4 < *a3)
  {
    v9 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *a4;
    *a4 = v9;
    if (*a3 < *a2)
    {
      v10 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v10;
      if (*a2 < *a1)
      {
        v11 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v11;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float v11;
  int v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) < *(float *)a1)
      {
        v6 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (_QWORD *)(a2 - 8));
      return 1;
    case 5:
      v16 = (float *)(a1 + 16);
      v17 = (uint64_t *)(a1 + 24);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (_QWORD *)(a1 + 24));
      if (*(float *)(a2 - 8) < *(float *)(a1 + 24))
      {
        v18 = *v17;
        *v17 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v18;
        if (*(float *)v17 < *v16)
        {
          v19 = *(_QWORD *)v16;
          v20 = *v17;
          *(_QWORD *)v16 = *v17;
          *v17 = v19;
          if (*(float *)(a1 + 8) > *(float *)&v20)
          {
            v21 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v20;
            *(_QWORD *)(a1 + 16) = v21;
            if (*(float *)a1 > *(float *)&v20)
            {
              v22 = *(_QWORD *)a1;
              *(_QWORD *)a1 = v20;
              *(_QWORD *)(a1 + 8) = v22;
            }
          }
        }
      }
      return 1;
    default:
      v7 = (float *)(a1 + 16);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      v8 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = *(float *)v8;
    if (*(float *)v8 < *v7)
    {
      v12 = *(_DWORD *)(v8 + 4);
      v13 = v9;
      while (1)
      {
        *(_QWORD *)(a1 + v13 + 24) = *(_QWORD *)(a1 + v13 + 16);
        if (v13 == -16)
          break;
        v14 = *(float *)(a1 + v13 + 8);
        v13 -= 8;
        if (v14 <= v11)
        {
          v15 = a1 + v13 + 24;
          goto LABEL_13;
        }
      }
      v15 = a1;
LABEL_13:
      *(float *)v15 = v11;
      *(_DWORD *)(v15 + 4) = v12;
      if (++v10 == 8)
        return v8 + 8 == a2;
    }
    v7 = (float *)v8;
    v9 += 8;
    v8 += 8;
    if (v8 == a2)
      return 1;
  }
}

float *CA::OGL::PathFiller::close(float *this)
{
  float *v1;
  unsigned int v2;
  float v3;
  int v4;
  float v5;
  unint64_t v6;
  int v7;
  float v8;
  uint64_t v9;

  v1 = this;
  v9 = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)this + 10);
  v3 = this[11];
  v4 = *((_DWORD *)this + 12);
  v5 = this[13];
  *((_DWORD *)this + 10) = v4;
  this[11] = v5;
  if (v3 != v5)
  {
    v6 = __PAIR64__(LODWORD(v3), v2);
    v7 = v4;
    v8 = v5;
    this = CA::OGL::PathFiller::emit_line(this, (float32x2_t *)&v6);
  }
  if (v1[165] < v1[6] && !*((_BYTE *)v1 + 664))
    v1[163] = v1[164];
  return this;
}

float *CA::OGL::PathFiller::emit_line(float *this, float32x2_t *a2)
{
  float *v3;
  uint64_t v4;
  char i;
  char v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  int v14;
  int v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  BOOL v19;
  float v20;
  float32x2_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x2_t v24;
  uint64_t v25;

  v3 = this;
  v4 = 0;
  v25 = *MEMORY[0x1E0C80C00];
  for (i = 1; ; i = 0)
  {
    v6 = i;
    if ((a2[v4].i32[0] & 0x7FFFFFFFu) > 0x7F7FFFFF || (a2[v4].i32[1] & 0x7FFFFFFFu) > 0x7F7FFFFF)
      break;
    v4 = 1;
    if ((v6 & 1) == 0)
    {
      v7 = a2->f32[1];
      v8 = a2[1].f32[1];
      if (v7 >= v8)
        v9 = a2[1].f32[1];
      else
        v9 = a2->f32[1];
      if (v7 <= v8)
        v10 = a2[1].f32[1];
      else
        v10 = a2->f32[1];
      if (v9 <= this[9] && v10 >= this[7])
      {
        v11 = a2[1].f32[0];
        v12 = a2->f32[0] >= v11 ? a2[1].f32[0] : a2->f32[0];
        if (v12 <= this[8])
        {
          if (a2->f32[0] <= v11)
            v13 = a2[1].f32[0];
          else
            v13 = a2->f32[0];
          if (v13 <= this[6])
          {
            v19 = v7 <= v8;
            v20 = 1.0;
            if (v19)
              v20 = -1.0;
            return CA::OGL::PathFiller::add_points(this, v9, v10, v20, 0);
          }
          else
          {
            CA::OGL::PathFiller::mark_spans((uint64_t)this, v12, v9, v13, v10);
            v14 = 0;
            v15 = vcvtps_s32_f32((float)((float)(v13 - v12) * (float)*((int *)v3 + 14)) / v3[4]);
            if (v15 >= 128)
              v15 = 128;
            if (v15 <= 1)
              v16 = 1;
            else
              v16 = v15;
            *(float32x2_t *)v17.f32 = *a2;
            do
            {
              ++v14;
              v22 = v17.i64[0];
              v17.i64[1] = v17.i64[0];
              v21 = vmla_n_f32(*a2, vsub_f32(a2[1], *a2), (float)v14 * (float)(1.0 / (float)v16));
              *(float32x2_t *)v18.f32 = v21;
              *(float32x2_t *)&v18.u32[2] = v21;
              v23 = vmlaq_f32(vmulq_f32(v17, (float32x4_t)xmmword_18474E800), (float32x4_t)xmmword_18474E810, v18);
              v24 = v21;
              this = (float *)CA::OGL::PathFiller::add_cube((CA::OGL::PathFiller *)v3, &v22, v13);
              *(float32x2_t *)v17.f32 = v21;
            }
            while (v16 != v14);
          }
        }
      }
      return this;
    }
  }
  return this;
}

float *CA::OGL::PathFiller::line_to(float *result, float a2, float a3)
{
  unsigned int v3;
  float v4;
  float v5;
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)result + 10);
  v4 = result[11];
  result[10] = a2;
  result[11] = a3;
  v5 = result[165];
  if (v5 <= a2)
    v5 = a2;
  result[165] = v5;
  if (a3 != v4)
  {
    v6 = __PAIR64__(LODWORD(v4), v3);
    v7 = a2;
    v8 = a3;
    return CA::OGL::PathFiller::emit_line(result, (float32x2_t *)&v6);
  }
  return result;
}

void CA::OGL::PathFiller::quad_to(uint64_t a1, float a2, float a3, float a4, float a5)
{
  uint64_t v6;
  float v7;
  unint64_t v8;
  float v9;
  float v10;
  BOOL v11;
  uint64_t v12;
  float v13;
  float v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 40);
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v26 = v6;
  v27 = a2;
  v28 = a3;
  v29 = __PAIR64__(LODWORD(a5), LODWORD(a4));
  v7 = *(float *)(a1 + 660);
  if (v7 <= a2)
    v7 = a2;
  if (v7 > a4)
    a4 = v7;
  *(float *)(a1 + 660) = a4;
  v8 = v29;
  *(_QWORD *)(a1 + 40) = v29;
  v9 = (float)(*((float *)&v6 + 1) + (float)(a3 * -2.0)) + *((float *)&v8 + 1);
  if (v9 != 0.0 && ((v10 = (float)(*((float *)&v6 + 1) - a3) / v9, v10 > 0.0) ? (v11 = v10 < 1.0) : (v11 = 0), v11))
  {
    v13 = (float)((float)(1.0 - v10) * *(float *)&v6) + (float)(a2 * v10);
    v14 = (float)(v10 * a3) + (float)((float)(1.0 - v10) * *((float *)&v6 + 1));
    *(float *)&v15 = (float)(a2 * (float)(1.0 - v10)) + (float)(v10 * *(float *)&v8);
    *(float *)&v16 = (float)(v10 * *((float *)&v8 + 1)) + (float)((float)(1.0 - v10) * a3);
    v27 = v13;
    v28 = v14;
    *(float *)&v29 = (float)(v13 * (float)(1.0 - v10)) + (float)(*(float *)&v15 * v10);
    *((float *)&v29 + 1) = (float)(*(float *)&v16 * v10) + (float)(v14 * (float)(1.0 - v10));
    v30 = v29;
    v31 = __PAIR64__(v16, v15);
    v32 = v8;
    v12 = 2;
  }
  else
  {
    v12 = 1;
  }
  v17 = 0;
  v18 = 24 * v12;
  do
  {
    v19 = (char *)&v26 + v17;
    if (*(float *)((char *)&v26 + v17 + 4) != *(float *)((char *)&v29 + v17 + 4))
    {
      v20.i64[0] = *((_QWORD *)v19 + 1);
      v20.i32[2] = *((_DWORD *)v19 + 4);
      v20.i32[3] = v20.i32[1];
      v21.i64[0] = *(_QWORD *)v19;
      v21.i32[2] = v20.i32[0];
      v21.i32[3] = *(_DWORD *)((char *)&v29 + v17 + 4);
      v24 = vmlaq_f32(vmulq_f32(v21, (float32x4_t)xmmword_18474E830), (float32x4_t)xmmword_18474E820, v20);
      v22 = *((_QWORD *)v19 + 2);
      v23 = v21.i64[0];
      v25 = v22;
      CA::OGL::PathFiller::emit_cube(a1, (float *)&v23, 0);
    }
    v17 += 24;
  }
  while (v18 != v17);
}

void CA::OGL::PathFiller::emit_cube(uint64_t a1, float *a2, unint64_t a3)
{
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  __int128 v19;
  BOOL v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v36;
  float32x2_t v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  NSObject *v41;
  uint8_t buf[4];
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  __int128 v58;
  _BYTE v59[24];
  __int128 v60;
  uint64_t v61;
  uint64_t v62;

  v5 = 0;
  v62 = *MEMORY[0x1E0C80C00];
  while ((LODWORD(a2[v5]) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(a2[v5 + 1]) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v5 += 2;
    if (v5 == 8)
    {
      v6 = a2[1];
      v7 = a2[7];
      if (v6 >= v7)
        v8 = a2[7];
      else
        v8 = a2[1];
      if (v6 <= v7)
        v9 = a2[7];
      else
        v9 = a2[1];
      if (v8 <= *(float *)(a1 + 36) && v9 >= *(float *)(a1 + 28))
      {
        v10 = 2;
        v11 = *a2;
        do
        {
          if (v11 >= a2[v10])
            v11 = a2[v10];
          v10 += 2;
        }
        while (v10 != 8);
        if (v11 <= *(float *)(a1 + 32))
        {
          v12 = 2;
          v13 = *a2;
          do
          {
            if (v13 <= a2[v12])
              v13 = a2[v12];
            v12 += 2;
          }
          while (v12 != 8);
          if (v13 <= *(float *)(a1 + 24))
          {
            v20 = v6 <= v7;
            v21 = 1.0;
            if (v20)
              v21 = -1.0;
            CA::OGL::PathFiller::add_points((float *)a1, v8, v9, v21, 0);
          }
          else
          {
            v14 = 6.0;
            if (*(_BYTE *)(a1 + 641))
              v14 = 100.0;
            v15 = a2[5];
            v16 = a2[4];
            v17 = sqrtf((float)((float)(a2[6] - v16) * (float)(a2[6] - v16))+ (float)((float)(v7 - v15) * (float)(v7 - v15)));
            v18 = a2[3];
            if ((float)((float)(sqrtf((float)((float)(v16 - a2[2]) * (float)(v16 - a2[2]))+ (float)((float)(v15 - v18) * (float)(v15 - v18)))+ v17)+ sqrtf((float)((float)(a2[2] - *a2) * (float)(a2[2] - *a2))+ (float)((float)(v18 - v6) * (float)(v18 - v6)))) <= v14)
            {
              if (v9 >= v18)
                v22 = a2[3];
              else
                v22 = v9;
              if (v8 > v22)
                v22 = v8;
              a2[3] = v22;
              if (v9 >= v15)
                v23 = v15;
              else
                v23 = v9;
              if (v8 > v23)
                v23 = v8;
              a2[5] = v23;
              CA::OGL::PathFiller::mark_spans(a1, v11, v8, v13, v9);
              CA::OGL::PathFiller::add_cube((CA::OGL::PathFiller *)a1, a2, v13);
            }
            else
            {
              *(_QWORD *)&v59[16] = 0;
              v19 = *((_OWORD *)a2 + 1);
              v58 = *(_OWORD *)a2;
              *(_OWORD *)v59 = v19;
              if (a3 < 0x200)
              {
                v24 = *(_QWORD *)&v59[8];
                v25 = vadd_f32(*(float32x2_t *)((char *)&v58 + 8), *(float32x2_t *)&v58);
                v26 = vmul_f32(v25, (float32x2_t)0x3F0000003F000000);
                v27 = vadd_f32(*(float32x2_t *)v59, *(float32x2_t *)((char *)&v58 + 8));
                v28 = vadd_f32(*(float32x2_t *)&v59[8], *(float32x2_t *)v59);
                v29 = vmul_f32(v28, (float32x2_t)0x3F0000003F000000);
                v30 = vadd_f32(v27, v25);
                __asm { FMOV            V6.2S, #0.25 }
                v36 = vmul_f32(v30, _D6);
                v37 = vadd_f32(v28, v27);
                *(float32x2_t *)&v38 = vmul_f32(v37, _D6);
                *(float32x2_t *)&v39 = vmul_f32(vadd_f32(v37, v30), (float32x2_t)0x3E0000003E000000);
                *((_QWORD *)&v39 + 1) = v39;
                *((float32x2_t *)&v58 + 1) = v26;
                *(float32x2_t *)v59 = v36;
                *((float32x2_t *)&v38 + 1) = v29;
                *(_OWORD *)&v59[8] = v39;
                v60 = v38;
                v61 = v24;
                v40 = a3 + 1;
                CA::OGL::PathFiller::emit_cube(a1, &v58, a3 + 1);
                CA::OGL::PathFiller::emit_cube(a1, &v59[16], v40);
              }
              else if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                v41 = x_log_category_ogl;
                if (os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 134219776;
                  v43 = *(float *)&v58;
                  v44 = 2048;
                  v45 = *((float *)&v58 + 1);
                  v46 = 2048;
                  v47 = *((float *)&v58 + 2);
                  v48 = 2048;
                  v49 = *((float *)&v58 + 3);
                  v50 = 2048;
                  v51 = *(float *)v59;
                  v52 = 2048;
                  v53 = *(float *)&v59[4];
                  v54 = 2048;
                  v55 = *(float *)&v59[8];
                  v56 = 2048;
                  v57 = *(float *)&v59[12];
                  _os_log_impl(&dword_184457000, v41, OS_LOG_TYPE_DEFAULT, "CoreAnimation: too many subdivisions in cubic curve (%a, %a) (%a, %a) (%a, %a) (%a, %a). Stack will most likely overflow. bail out.", buf, 0x52u);
                }
              }
            }
          }
        }
      }
      return;
    }
  }
}

void CA::OGL::PathFiller::cube_to(uint64_t a1, double a2, float a3, double a4, float a5, float a6, float a7)
{
  float32x2_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  __int128 v31;
  float32x2_t v32;
  __int128 v33;
  float v35;
  __int128 v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  int8x16_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float *v50;
  float32x2_t v51;
  _BYTE v52[56];
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v51 = *(float32x2_t *)(a1 + 40);
  v8 = v51;
  v54 = 0u;
  v53 = 0u;
  memset(&v52[24], 0, 32);
  *(_DWORD *)v52 = LODWORD(a2);
  *(float *)&v52[4] = a3;
  *(_DWORD *)&v52[8] = LODWORD(a4);
  *(float *)&v52[12] = a5;
  *(float *)&v52[16] = a6;
  *(float *)&v52[20] = a7;
  v9 = *(float *)(a1 + 660);
  if (v9 <= *(float *)&a2)
    v9 = *(float *)&a2;
  if (v9 <= *(float *)&a4)
    v9 = *(float *)&a4;
  if (v9 <= a6)
    v9 = a6;
  *(float *)(a1 + 660) = v9;
  *(float *)(a1 + 40) = a6;
  *(float *)(a1 + 44) = a7;
  v10 = a7 - (float)(v8.f32[1] + (float)((float)(a5 - a3) * 3.0));
  v11 = (float)(v8.f32[1] + (float)(a3 * -2.0)) + a5;
  v12 = a3 - v8.f32[1];
  v13 = -(float)((float)(v10 * (float)(a3 - v8.f32[1])) - (float)(v11 * v11));
  if (v13 < 0.0)
    goto LABEL_28;
  if (v10 == 0.0)
  {
    if (v11 != 0.0)
    {
      v14 = v12 * -0.5;
      v15 = INFINITY;
      v16 = v14 / v11;
      goto LABEL_20;
    }
  }
  else if (v11 != 0.0 || v13 != 0.0)
  {
    v17 = sqrtf(v13);
    if (v11 < 0.0)
      v17 = -v17;
    v18 = -(float)(v17 + v11);
    v19 = v18 / v10;
    v15 = v12 / v18;
    if (v19 >= v15)
      v16 = v15;
    else
      v16 = v19;
    if (v19 > v15)
      v15 = v19;
LABEL_20:
    if (v16 > 0.0 && v16 < 1.0)
    {
      v25 = (float32x2_t)__PAIR64__(LODWORD(a3), LODWORD(a2));
      v26.f32[0] = (float)(*(float *)&a2 * (float)(1.0 - v16)) + (float)(*(float *)&a4 * v16);
      v27 = (float)(v16 * a5) + (float)((float)(1.0 - v16) * a3);
      *((float *)&a4 + 1) = a5;
      v28 = vmla_n_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(a7), LODWORD(a6)), v16), *(float32x2_t *)&a4, 1.0 - v16);
      v26.f32[1] = v27;
      v29 = vmla_n_f32(vmul_n_f32(v26, 1.0 - v16), v28, v16);
      v30 = vmla_n_f32(vmul_n_f32(v25, v16), v8, 1.0 - v16);
      *(float32x2_t *)&v31 = vmla_n_f32(vmul_n_f32(v26, v16), v30, 1.0 - v16);
      v32 = vmla_n_f32(vmul_n_f32(v29, v16), *(float32x2_t *)&v31, 1.0 - v16);
      *(float32x2_t *)v52 = v30;
      *((float32x2_t *)&v31 + 1) = v32;
      *(float32x2_t *)&v33 = v32;
      *((float32x2_t *)&v33 + 1) = v29;
      *(_OWORD *)&v52[8] = v31;
      *(_OWORD *)&v52[24] = v33;
      *(float32x2_t *)&v52[40] = v28;
      *(float *)&v52[48] = a6;
      *(float *)&v52[52] = a7;
      v22 = 2;
      if (v16 == v15)
        goto LABEL_29;
      if (v15 <= 0.0 || v15 >= 1.0)
        goto LABEL_29;
      v35 = (float)(v15 - v16) / (float)(1.0 - v16);
      *(float32x2_t *)&v36 = vmla_n_f32(vmul_n_f32(v29, v35), v32, 1.0 - v35);
      v37 = vmla_n_f32(vmul_n_f32(v28, v35), v29, 1.0 - v35);
      v38 = vmla_n_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(a7), LODWORD(a6)), v35), v28, 1.0 - v35);
      v39 = vmla_n_f32(vmul_n_f32(v37, v35), *(float32x2_t *)&v36, 1.0 - v35);
      *(float32x2_t *)v41.i8 = vmla_n_f32(vmul_n_f32(v38, v35), v37, 1.0 - v35);
      v40 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)v41.i8, v35), v39, 1.0 - v35);
      *((float32x2_t *)&v36 + 1) = v39;
      *(_OWORD *)&v52[32] = v36;
      *(float32x2_t *)&v52[48] = v40;
      v22 = 3;
      v41.u64[1] = (unint64_t)v38;
      v42 = 11;
      v43 = 10;
      v44 = 9;
      v45 = 8;
    }
    else
    {
      if (v15 <= 0.0 || v15 >= 1.0)
        goto LABEL_28;
      *((float *)&a2 + 1) = a3;
      *((float *)&a4 + 1) = a5;
      *(float32x2_t *)&v46 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)&a2, v15), v8, 1.0 - v15);
      v47 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)&a4, v15), *(float32x2_t *)&a2, 1.0 - v15);
      v48 = vmla_n_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(a7), LODWORD(a6)), v15), *(float32x2_t *)&a4, 1.0 - v15);
      v49 = vmla_n_f32(vmul_n_f32(v47, v15), *(float32x2_t *)&v46, 1.0 - v15);
      *(float32x2_t *)v41.i8 = vmla_n_f32(vmul_n_f32(v47, 1.0 - v15), v48, v15);
      v40 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)v41.i8, v15), v49, 1.0 - v15);
      *((float32x2_t *)&v46 + 1) = v49;
      *(_OWORD *)v52 = v46;
      *(float32x2_t *)&v52[16] = v40;
      v22 = 2;
      v41.u64[1] = (unint64_t)v48;
      v42 = 7;
      v43 = 6;
      v44 = 5;
      v45 = 4;
    }
    *(&v51 + v45) = v40;
    *(&v51 + v44) = *(float32x2_t *)v41.i8;
    *((_QWORD *)&v51 + v43) = vextq_s8(v41, v41, 8uLL).u64[0];
    v50 = (float *)(&v51 + v42);
    *v50 = a6;
    v50[1] = a7;
    goto LABEL_29;
  }
LABEL_28:
  v22 = 1;
LABEL_29:
  v23 = 0;
  v24 = 32 * v22;
  do
  {
    if (*(float *)&v52[v23 + 20] != v51.f32[v23 / 4 + 1])
      CA::OGL::PathFiller::emit_cube(a1, (float *)((char *)&v51 + v23), 0);
    v23 += 32;
  }
  while (v24 != v23);
}

uint64_t CA::OGL::PathFiller::finish(CA::OGL::PathFiller *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __n128 v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  unsigned int v14;
  unsigned int v15;
  float v16;
  uint64_t v17;
  float *v18;
  float v19;
  float v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  unsigned __int16 v24;
  char v25;
  uint64_t v26;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  _QWORD v54[1538];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v54[1536] = *MEMORY[0x1E0C80C00];
  CA::OGL::PathFiller::close((float *)v1);
  CA::OGL::PathFiller::emit_span_rect_coverage((int *)v1);
  CA::OGL::PathFiller::flush_rect(v1);
  CA::OGL::PathFiller::flush_cube((uint64_t)v1);
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = (*(unsigned __int16 *)(*v1 + 816) >> 12) & 7;
  v6 = HIWORD(v4);
  if (v5 != 2)
  {
    if (v5 != 1)
      goto LABEL_5;
    v4 = v4 & 0xFFFFFFFFFFFF0000 | v6;
  }
  v4 = v4 & 0xFFFF00000000FFFFLL | (v6 << 16) | (v6 << 32);
LABEL_5:
  v7 = *((unsigned int *)v1 + 14);
  if ((int)v7 >= 1)
  {
    v8 = 0;
    v9 = 0;
    v10 = (__n128)vcvtq_f32_f16((float16x4_t)v4);
    v10.n128_u64[0] = (unint64_t)vcvt_f16_f32((float32x4_t)v10);
    do
    {
      v11 = *((_DWORD *)v1 + v8 + 82);
      if (v11)
      {
        v12 = *((unsigned int *)v1 + 15);
        if ((v12 & 0x80000000) == 0)
        {
          v13 = (char *)v1 + 4 * v8;
          v15 = *((_DWORD *)v13 + 16);
          v14 = *((_DWORD *)v13 + 17);
          v16 = *((float *)v1 + 49);
          v17 = v12 + 1;
          v18 = (float *)(v1 + 25);
          v19 = v16;
          do
          {
            v20 = *v18;
            if ((v11 & 1) == 0)
            {
              if (v16 != v19)
              {
                v21 = &v54[3 * v9++];
                *v21 = __PAIR64__(LODWORD(v19), v15);
                v21[1] = __PAIR64__(LODWORD(v16), v14);
                v21[2] = v10.n128_u64[0];
              }
              v19 = v20;
              if (v11 < 2)
                break;
            }
            v11 >>= 1;
            ++v18;
            v16 = v20;
            --v17;
          }
          while (v17);
        }
      }
      ++v8;
    }
    while (v8 != v7);
    if (v9)
    {
      if (*((_BYTE *)v1 + 640))
        v22 = 91;
      else
        v22 = 90;
      *(_BYTE *)(v3 + 16) = v22;
      (*(void (**)(_QWORD, __n128))(*(_QWORD *)*v1 + 360))(*v1, v10);
      v2 = *v1;
    }
  }
  *(_BYTE *)(*(_QWORD *)(v2 + 16) + 481) &= ~4u;
  v23 = *(_QWORD *)(*v1 + 16);
  v24 = *(_WORD *)(v23 + 14);
  v25 = *(_BYTE *)(v23 + 481);
  if (*(unsigned __int8 *)(v23 + 480) < 2u)
    goto LABEL_22;
  _H0 = *(_WORD *)(v23 + 14);
  __asm { FCVT            S0, H0 }
  _ZF = _ZF && _S0 == 1.0;
  if (_ZF)
  {
LABEL_22:
    *(_BYTE *)(v23 + 481) = v25 & 0xFE;
    v26 = *(_QWORD *)(*v1 + 16);
  }
  else
  {
    v26 = *(_QWORD *)(*v1 + 16);
  }
  v33 = *(unsigned __int16 *)(v23 + 12);
  v34 = *(unsigned int *)(v23 + 8);
  *(_BYTE *)(v26 + 16) = 0;
  v35 = *v1;
  *(_QWORD *)(v35 + 128) = 0;
  *(_QWORD *)(v35 + 96) = v35 + 818;
  *(_OWORD *)(v35 + 104) = xmmword_18474E060;
  v36 = *((_DWORD *)v1 + 14);
  if (v36 >= 1)
  {
    v37 = 0;
    v38 = (v34 | (v33 << 32)) & 0xFFFFFFFFFFFFLL | ((unint64_t)v24 << 48);
    do
    {
      v39 = *((_DWORD *)v1 + v37 + 114);
      if (v39)
      {
        v40 = v37 + 1;
        v41 = *((_DWORD *)v1 + 15);
        if (v41 < 0)
          goto LABEL_48;
        v42 = *((float *)v1 + v37 + 16);
        v43 = *((float *)v1 + v40 + 16);
        v44 = *((float *)v1 + 49);
        v45 = 50;
        v46 = v44;
        while (1)
        {
          v47 = *((float *)v1 + v45);
          if ((v39 & 1) == 0)
          {
            if (v44 != v46)
            {
              v48 = *v1;
              if (*(_DWORD *)(*v1 + 92))
                v49 = 6;
              else
                v49 = 4;
              if ((unint64_t)(*(_QWORD *)(v48 + 128) + 4) > *(_QWORD *)(v48 + 136)
                || (v50 = *(_QWORD *)(v48 + 112)) != 0 && *(_QWORD *)(v48 + 104) + v49 > v50)
              {
                *(_WORD *)(v48 + 816) |= 0x20u;
                CA::OGL::Context::array_flush(v48);
                *(_QWORD *)(v48 + 128) = 0;
                *(_QWORD *)(v48 + 96) = v48 + 818;
                *(_OWORD *)(v48 + 104) = xmmword_18474E060;
                v48 = *v1;
              }
              CA::OGL::Context::array_rect((_QWORD *)v48, v42, v46, v43, v44);
              v51 = *(_QWORD *)(*v1 + 120) + 48 * *(_QWORD *)(*v1 + 128);
              *(_QWORD *)(v51 - 160) = v38;
              *(_QWORD *)(v51 - 112) = v38;
              *(_QWORD *)(v51 - 64) = v38;
              *(_QWORD *)(v51 - 16) = v38;
            }
            if (v39 < 2)
            {
LABEL_46:
              v36 = *((_DWORD *)v1 + 14);
              goto LABEL_48;
            }
            v41 = *((_DWORD *)v1 + 15);
            v46 = v47;
          }
          v39 >>= 1;
          v52 = v45 - 50;
          ++v45;
          v44 = v47;
          if (v52 >= v41)
            goto LABEL_46;
        }
      }
      v40 = v37 + 1;
LABEL_48:
      v37 = v40;
    }
    while (v40 < v36);
    v35 = *v1;
  }
  result = CA::OGL::Context::array_flush(v35);
  if ((v25 & 1) != 0)
    *(_BYTE *)(*(_QWORD *)(*v1 + 16) + 481) |= 1u;
  *(_BYTE *)(*(_QWORD *)(*v1 + 16) + 16) = 0;
  return result;
}

void CA::OGL::PathRenderer::cgpath_apply<CA::OGL::PathFiller>(float32x2_t *this, uint64_t a2)
{
  double *v3;
  float v4;
  float v5;
  double *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  double *v11;
  double v12;
  float v13;
  double v14;
  float v15;
  float v16;
  float v17;
  float32x2_t v18;

  switch(*(_DWORD *)a2)
  {
    case 0:
      v18 = vcvt_f32_f64(*(float64x2_t *)*(_QWORD *)(a2 + 8));
      CA::OGL::PathFiller::close((float *)this);
      this[82].i32[0] = this[81].i32[1];
      this[5] = v18;
      this[6] = v18;
      this[82].i32[1] = v18.i32[0];
      break;
    case 1:
      v3 = *(double **)(a2 + 8);
      v4 = *v3;
      v5 = v3[1];
      CA::OGL::PathFiller::line_to((float *)this, v4, v5);
      break;
    case 2:
      v6 = *(double **)(a2 + 8);
      v7 = *v6;
      v8 = v6[1];
      v9 = v6[2];
      v10 = v6[3];
      CA::OGL::PathFiller::quad_to((uint64_t)this, v7, v8, v9, v10);
      break;
    case 3:
      v11 = *(double **)(a2 + 8);
      v12 = *v11;
      *(float *)&v12 = *v11;
      v13 = v11[1];
      v14 = v11[2];
      *(float *)&v14 = v14;
      v15 = v11[3];
      v16 = v11[4];
      v17 = v11[5];
      CA::OGL::PathFiller::cube_to((uint64_t)this, v12, v13, v14, v15, v16, v17);
      break;
    case 4:
      CA::OGL::PathFiller::close((float *)this);
      break;
    default:
      return;
  }
}

void CA::OGL::PathRenderer::cgpath_apply_transform<CA::OGL::PathFiller>(CA::OGL::PathFiller *this, uint64_t a2)
{
  float32x2_t v3;
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  float32x2_t v39;

  switch(*(_DWORD *)a2)
  {
    case 0:
      v39 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(*((_QWORD *)this + 1) + 32), *(float64x2_t *)*((_QWORD *)this + 1), **(double **)(a2 + 8)), *(float64x2_t *)(*((_QWORD *)this + 1) + 16), *(double *)(*(_QWORD *)(a2 + 8) + 8)));
      CA::OGL::PathFiller::close((float *)this);
      *((_DWORD *)this + 164) = *((_DWORD *)this + 163);
      *((float32x2_t *)this + 5) = v39;
      *((float32x2_t *)this + 6) = v39;
      *((_DWORD *)this + 165) = v39.i32[0];
      break;
    case 1:
      v3 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(*((_QWORD *)this + 1) + 32), *(float64x2_t *)*((_QWORD *)this + 1), **(double **)(a2 + 8)), *(float64x2_t *)(*((_QWORD *)this + 1) + 16), *(double *)(*(_QWORD *)(a2 + 8) + 8)));
      CA::OGL::PathFiller::line_to((float *)this, v3.f32[0], v3.f32[1]);
      break;
    case 2:
      v4 = *(double **)(a2 + 8);
      v5 = *v4;
      v6 = v4[1];
      v7 = v4[2];
      v8 = v4[3];
      v9 = (double *)*((_QWORD *)this + 1);
      v10 = v9[1];
      v11 = v9[4];
      v12 = v9[5];
      v13 = v9[2];
      v14 = v9[3];
      v15 = v11 + *v9 * v5 + v13 * v6;
      v16 = v12 + v10 * v5 + v14 * v6;
      v17 = v11 + *v9 * v7 + v13 * v8;
      v18 = v12 + v10 * v7 + v14 * v8;
      *(float *)&v5 = v15;
      *(float *)&v16 = v16;
      *(float *)&v7 = v17;
      *(float *)&v18 = v18;
      CA::OGL::PathFiller::quad_to((uint64_t)this, *(float *)&v5, *(float *)&v16, *(float *)&v7, *(float *)&v18);
      break;
    case 3:
      v19 = *(double **)(a2 + 8);
      v20 = *v19;
      v21 = v19[1];
      v22 = v19[2];
      v23 = v19[3];
      v24 = v19[4];
      v25 = v19[5];
      v26 = (double *)*((_QWORD *)this + 1);
      v27 = v26[1];
      v28 = v26[4];
      v29 = v26[5];
      v30 = v26[2];
      v31 = v26[3];
      v32 = v28 + *v26 * v20 + v30 * v21;
      v33 = v29 + v27 * v20 + v31 * v21;
      v34 = v28 + *v26 * v22 + v30 * v23;
      v35 = v29 + v27 * v22 + v31 * v23;
      v36 = v28 + *v26 * v24 + v30 * v25;
      v37 = v29 + v27 * v24;
      v38 = v37 + v31 * v25;
      *(float *)&v37 = v32;
      *(float *)&v33 = v33;
      *(float *)&v22 = v34;
      *(float *)&v35 = v35;
      *(float *)&v24 = v36;
      *(float *)&v38 = v38;
      CA::OGL::PathFiller::cube_to((uint64_t)this, v37, *(float *)&v33, v22, *(float *)&v35, *(float *)&v24, *(float *)&v38);
      break;
    case 4:
      CA::OGL::PathFiller::close((float *)this);
      break;
    default:
      return;
  }
}

double CA::OGL::PathStroker::add_line_points(CA::OGL::PathStroker *this, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  double result;

  v4 = *((_DWORD *)this + 39);
  v5 = *((_DWORD *)this + 18);
  if (2 * v4 + 4 * *((_DWORD *)this + 40) + 2 > v5)
  {
    CA::OGL::PathStroker::flush_points(this);
    v4 = *((_DWORD *)this + 39);
    v5 = *((_DWORD *)this + 18);
  }
  v6 = v4 + 1;
  *((_DWORD *)this + 39) = v6;
  v7 = *((_QWORD *)this + 7) + 8 * v5 - 16 * v6;
  *(_QWORD *)v7 = *(_QWORD *)a2;
  result = *(double *)(a2 + 8);
  *(double *)(v7 + 8) = result;
  return result;
}

uint64_t CA::OGL::PathStroker::flush_points(CA::OGL::PathStroker *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;

  *((float *)this + 32) = (float)*((int *)this + 40);
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, char *))(**(_QWORD **)this + 1000))(*(_QWORD *)this, 0, 4, 1, (char *)this + 116);
  v3 = *((int *)this + 40);
  if ((_DWORD)v3)
  {
    v4 = *((int *)this + 39);
    v5 = *((_QWORD *)this + 7);
    if ((_DWORD)v4)
    {
      v6 = 4 * v3;
      v7 = 2 * v4;
      v8 = v7 + v6;
      v9 = *((_DWORD *)this + 18);
      if ((int)v7 + (int)v6 < v9)
      {
        if ((int)v7 <= (int)v6)
        {
          memcpy((void *)(v5 + 8 * v6), (const void *)(v5 + 8 * v9 - 8 * v7), 8 * v7);
        }
        else
        {
          memcpy((void *)(v5 + 8 * v9 - 8 * v8), *((const void **)this + 7), 8 * (int)v6);
          v5 = *((_QWORD *)this + 7) + 8 * *((int *)this + 18) - 8 * v8;
        }
      }
    }
  }
  else
  {
    v10 = *((int *)this + 39);
    if (!(_DWORD)v10)
      return result;
    v5 = *((_QWORD *)this + 7) + 8 * *((int *)this + 18) - 16 * v10;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)this + 16) + 16) = 86;
  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)this + 344))(*(_QWORD *)this, *((unsigned int *)this + 40), *((unsigned int *)this + 39), v5);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)this + 16) + 481) |= 4u;
  *(_QWORD *)((char *)this + 156) = 0;
  return result;
}

_DWORD *CA::OGL::PathStroker::add_join(_DWORD *this)
{
  float v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;

  if (*((_BYTE *)this + 115))
  {
    if ((float)(fabsf(*((float *)this + 36) + *((float *)this + 34))
               + fabsf(*((float *)this + 35) + *((float *)this + 33))) >= 0.00002)
    {
      v1 = *((float *)this + 22);
      v2 = *((_QWORD *)this + 5);
      if ((float)(*(float *)&v2 + v1) >= *((float *)this + 6)
        && (float)(*((float *)&v2 + 1) + v1) >= *((float *)this + 7)
        && (float)(*(float *)&v2 - v1) <= *((float *)this + 8)
        && (float)(*((float *)&v2 + 1) - v1) <= *((float *)this + 9))
      {
        v3 = *((_QWORD *)this + 8);
        if (*((_BYTE *)this + 112))
        {
          v4 = this[42];
          v5 = (_QWORD *)(v3 + 24 * v4);
          this[42] = v4 + 1;
        }
        else
        {
          v6 = (int)this[41];
          v5 = (_QWORD *)(v3 + 24 * (int)this[19] - 24 * v6 - 24);
          this[41] = v6 + 1;
        }
        *v5 = v2;
        v5[1] = *(_QWORD *)(this + 33);
        v5[2] = *(_QWORD *)(this + 35);
        if (this[42] + this[41] >= this[19])
          return CA::OGL::PathStroker::flush_joins(this);
      }
    }
  }
  return this;
}

_DWORD *CA::OGL::PathStroker::flush_joins(_DWORD *this)
{
  _DWORD *v1;

  v1 = this;
  if (this[42])
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)this + 16) + 16) = 88;
    this = (_DWORD *)(*(uint64_t (**)(void))(**(_QWORD **)this + 352))();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v1 + 16) + 481) |= 4u;
    v1[42] = 0;
  }
  if (v1[41])
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v1 + 16) + 16) = 87;
    this = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v1 + 352))(*(_QWORD *)v1);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v1 + 16) + 481) |= 4u;
    v1[41] = 0;
  }
  return this;
}

void CA::OGL::PathStroker::move_to(CA::OGL::PathStroker *this, double a2, float a3)
{
  int v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  float32x2_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  char v19;
  float32x2_t v20;
  char v21;
  float32x2_t *v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  uint32x2_t v26;
  _QWORD v27[5];

  v4 = LODWORD(a2);
  v27[4] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 115))
  {
    if (*((_BYTE *)this + 114) == 1)
    {
      v6 = *((_DWORD *)this + 42);
      if (*((_DWORD *)this + 41) + v6 + 2 >= *((_DWORD *)this + 19))
      {
        CA::OGL::PathStroker::flush_joins(this);
        v6 = *((_DWORD *)this + 42);
      }
      v7 = *((_QWORD *)this + 5);
      v8 = *(_QWORD *)((char *)this + 132);
      v9 = *((_QWORD *)this + 8);
      *((_DWORD *)this + 42) = v6 + 1;
      v10 = (_QWORD *)(v9 + 24 * v6);
      *v10 = v7;
      v10[1] = v8;
      v10[2] = v8;
      v11 = *((_QWORD *)this + 6);
      v12 = vneg_f32(*(float32x2_t *)((char *)this + 148));
      v13 = *((_QWORD *)this + 8);
      LODWORD(v9) = *((_DWORD *)this + 42);
      *((_DWORD *)this + 42) = v9 + 1;
      v14 = (_QWORD *)(v13 + 24 * (int)v9);
      *v14 = v11;
      v14[1] = v12;
      v14[2] = v12;
    }
    else
    {
      LODWORD(a2) = *((_DWORD *)this + 20);
      if (*(float *)&a2 > 0.0)
      {
        v15 = 0;
        v16 = *(float32x2_t *)((char *)this + 40);
        v17 = vmls_lane_f32(*(float32x2_t *)((char *)this + 48), *(float32x2_t *)((char *)this + 148), *(float32x2_t *)&a2, 0);
        v27[0] = *((_QWORD *)this + 6);
        v27[2] = v16;
        v18 = vmla_n_f32(v16, *(float32x2_t *)((char *)this + 132), *(float *)&a2);
        v27[1] = v17;
        v27[3] = v18;
        v19 = 1;
        v20 = (float32x2_t)vdup_n_s32(0x7F800000u);
        do
        {
          v21 = v19;
          v22 = (float32x2_t *)&v27[2 * v15];
          v23 = v22[1];
          v24 = vminnm_f32(*v22, v23);
          v25 = vmaxnm_f32(*v22, v23);
          v26 = (uint32x2_t)vorr_s8(vorr_s8(vorn_s8((int8x8_t)vceq_f32(vabs_f32(v24), v20), vorr_s8((int8x8_t)vcgt_f32(v25, v24), (int8x8_t)vcge_f32(v24, v25))), vorr_s8((int8x8_t)vceq_f32(vabs_f32(v25), v20), (int8x8_t)vcgt_f32(*(float32x2_t *)((char *)this + 96), v25))), (int8x8_t)vcgt_f32(v24, *(float32x2_t *)((char *)this + 104)));
          if ((vpmax_u32(v26, v26).u32[0] & 0x80000000) == 0)
            CA::OGL::PathStroker::add_line_points(this, (uint64_t)v22);
          v19 = 0;
          v15 = 1;
        }
        while ((v21 & 1) != 0);
      }
    }
    *((_BYTE *)this + 115) = 0;
  }
  *((_DWORD *)this + 12) = v4;
  *((float *)this + 13) = a3;
  *((_DWORD *)this + 10) = v4;
  *((float *)this + 11) = a3;
}

void CA::OGL::PathStroker::line_to(CA::OGL::PathStroker *this, float a2, float a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float32x2_t v10;
  float v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  uint32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = *((float *)this + 10) - a2;
  v7 = *((float *)this + 11) - a3;
  v8 = (float)(v6 * v6) + (float)(v7 * v7);
  if (v8 >= 0.000001)
  {
    v9 = 1.0 / sqrtf(v8);
    *((float *)this + 35) = v9 * v6;
    *((float *)this + 36) = v9 * v7;
    CA::OGL::PathStroker::add_join(this);
    v10 = *(float32x2_t *)((char *)this + 40);
    v16 = v10;
    v17 = (float32x2_t)__PAIR64__(LODWORD(a3), LODWORD(a2));
    if (!*((_BYTE *)this + 115))
    {
      *((_BYTE *)this + 115) = 1;
      v11 = 1.0
          / sqrtf((float)((float)(a2 - v10.f32[0]) * (float)(a2 - v10.f32[0]))+ (float)((float)(a3 - v10.f32[1]) * (float)(a3 - v10.f32[1])));
      *((float *)this + 37) = v11 * (float)(a2 - v10.f32[0]);
      *((float *)this + 38) = v11 * (float)(a3 - v10.f32[1]);
    }
    v12 = vminnm_f32(v10, v17);
    v13 = vmaxnm_f32(v10, v17);
    v14 = (float32x2_t)vdup_n_s32(0x7F800000u);
    v15 = (uint32x2_t)vorr_s8(vorr_s8(vorn_s8((int8x8_t)vceq_f32(vabs_f32(v12), v14), vorr_s8((int8x8_t)vcgt_f32(v13, v12), (int8x8_t)vcge_f32(v12, v13))), vorr_s8((int8x8_t)vceq_f32(vabs_f32(v13), v14), (int8x8_t)vcgt_f32(*(float32x2_t *)((char *)this + 96), v13))), (int8x8_t)vcgt_f32(v12, *(float32x2_t *)((char *)this + 104)));
    if ((vpmax_u32(v15, v15).u32[0] & 0x80000000) == 0)
      CA::OGL::PathStroker::add_line_points(this, (uint64_t)&v16);
    *(float32x2_t *)((char *)this + 132) = vneg_f32(*(float32x2_t *)((char *)this + 140));
    *((float *)this + 10) = a2;
    *((float *)this + 11) = a3;
  }
  else if (*((_BYTE *)this + 113))
  {
    if (*((_BYTE *)this + 114))
      CA::OGL::PathStroker::line_to_axis_aligned(this, a2, a3);
  }
}

void CA::OGL::PathStroker::line_to_axis_aligned(CA::OGL::PathStroker *this, float a2, float a3)
{
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  uint32x2_t v10;
  float32x2_t v11[3];

  v11[2] = *(float32x2_t *)MEMORY[0x1E0C80C00];
  v6 = (float32x2_t)0x3F80000000000000;
  *(_QWORD *)((char *)this + 140) = 0x3F80000000000000;
  if (!*((_BYTE *)this + 115))
  {
    *((_BYTE *)this + 115) = 1;
    *(_QWORD *)((char *)this + 148) = 0xBF80000000000000;
  }
  v11[0] = *(float32x2_t *)((char *)this + 40);
  v11[1] = (float32x2_t)__PAIR64__(LODWORD(a3), LODWORD(a2));
  v7 = vminnm_f32(v11[0], (float32x2_t)__PAIR64__(LODWORD(a3), LODWORD(a2)));
  v8 = vmaxnm_f32(v11[0], (float32x2_t)__PAIR64__(LODWORD(a3), LODWORD(a2)));
  v9 = (float32x2_t)vdup_n_s32(0x7F800000u);
  v10 = (uint32x2_t)vorr_s8(vorr_s8(vorn_s8((int8x8_t)vceq_f32(vabs_f32(v7), v9), vorr_s8((int8x8_t)vcgt_f32(v8, v7), (int8x8_t)vcge_f32(v7, v8))), vorr_s8((int8x8_t)vceq_f32(vabs_f32(v8), v9), (int8x8_t)vcgt_f32(*(float32x2_t *)((char *)this + 96), v8))), (int8x8_t)vcgt_f32(v7, *(float32x2_t *)((char *)this + 104)));
  if ((vpmax_u32(v10, v10).u32[0] & 0x80000000) == 0)
  {
    CA::OGL::PathStroker::add_line_points(this, (uint64_t)v11);
    v6 = *(float32x2_t *)((char *)this + 140);
  }
  *(float32x2_t *)((char *)this + 132) = vneg_f32(v6);
  *((float *)this + 10) = a2;
  *((float *)this + 11) = a3;
}

void CA::OGL::PathStroker::quad_to(CA::OGL::PathStroker *this, float a2, float a3, float a4, float a5)
{
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float32x2_t v18;
  char v19;
  float32x2_t v20;
  uint64_t v21;
  unsigned int v22;
  float v23;
  unsigned __int8 v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  uint32x2_t v29;
  float32x4_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float32x2_t v35;
  float32x4_t v36;
  float32x2_t v37;
  float32x4_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v10 = *((float *)this + 10);
  v11 = *((float *)this + 11);
  v12 = v10 - a2;
  v13 = v11 - a3;
  v14 = (float)(v12 * v12) + (float)(v13 * v13);
  if (v14 >= 0.000001)
  {
    v16 = sqrtf(v14);
  }
  else
  {
    v12 = v10 - a4;
    v13 = v11 - a5;
    v15 = (float)(v12 * v12) + (float)(v13 * v13);
    if (v15 < 0.000001)
    {
      if (*((_BYTE *)this + 113))
      {
        if (*((_BYTE *)this + 114))
          CA::OGL::PathStroker::line_to_axis_aligned(this, a4, a5);
      }
      return;
    }
    v16 = sqrtf(v15);
  }
  v17 = 1.0 / v16;
  *((float *)this + 35) = v17 * v12;
  *((float *)this + 36) = v17 * v13;
  CA::OGL::PathStroker::add_join(this);
  v18 = *(float32x2_t *)((char *)this + 40);
  v35 = v18;
  v36.i64[0] = __PAIR64__(LODWORD(a3), LODWORD(a2));
  v36.i64[1] = __PAIR64__(LODWORD(a5), LODWORD(a4));
  if (!*((_BYTE *)this + 115))
  {
    v19 = 0;
    v20 = *(float32x2_t *)((char *)this + 48);
    v21 = 1;
    while (1)
    {
      v22 = v21;
      if (v20.f32[0] != v35.f32[2 * v21])
        break;
      v23 = v35.f32[2 * v21 + 1];
      v24 = v19 ^ 1;
      v19 = 1;
      v21 = 2;
      if (((v20.f32[1] == v23) & v24) == 0)
      {
        if (v20.f32[1] == v23)
          v22 = 3;
        break;
      }
    }
    *((_BYTE *)this + 115) = 1;
    v25 = vsub_f32(*(&v35 + v22), v20);
    *(float32x2_t *)((char *)this + 148) = vmul_n_f32(v25, 1.0 / sqrtf(vaddv_f32(vmul_f32(v25, v25))));
  }
  if ((float)((float)((float)(v18.f32[0] - a2) * (float)(v18.f32[0] - a2))
             + (float)((float)(v18.f32[1] - a3) * (float)(v18.f32[1] - a3))) >= 0.000001
    && (float)((float)((float)(a2 - a4) * (float)(a2 - a4)) + (float)((float)(a3 - a5) * (float)(a3 - a5))) >= 0.000001)
  {
    *(float32x2_t *)v30.f32 = v18;
    v30.i64[1] = v36.i64[0];
    v37 = v18;
    v38 = vmlaq_f32(vmulq_f32(v30, (float32x4_t)xmmword_18474E840), (float32x4_t)xmmword_18474E850, v36);
    v39 = v36.i64[1];
    CA::OGL::PathStroker::emit_cube((float32x2_t *)this, &v37, 0, INFINITY);
  }
  else
  {
    v37 = v18;
    v38.i64[0] = v36.i64[1];
    v26 = vminnm_f32(v18, *(float32x2_t *)&v36.u32[2]);
    v27 = vmaxnm_f32(v18, *(float32x2_t *)&v36.u32[2]);
    v28 = (float32x2_t)vdup_n_s32(0x7F800000u);
    v29 = (uint32x2_t)vorr_s8(vorr_s8(vorn_s8((int8x8_t)vceq_f32(vabs_f32(v26), v28), vorr_s8((int8x8_t)vcgt_f32(v27, v26), (int8x8_t)vcge_f32(v26, v27))), vorr_s8((int8x8_t)vceq_f32(vabs_f32(v27), v28), (int8x8_t)vcgt_f32(*(float32x2_t *)((char *)this + 96), v27))), (int8x8_t)vcgt_f32(v26, *(float32x2_t *)((char *)this + 104)));
    if ((vpmax_u32(v29, v29).u32[0] & 0x80000000) == 0)
      CA::OGL::PathStroker::add_line_points(this, (uint64_t)&v37);
  }
  v31 = a4 - a2;
  v32 = a5 - a3;
  v33 = (float)(v31 * v31) + (float)(v32 * v32);
  if (v33 < 0.000001)
  {
    v31 = a4 - *((float *)this + 10);
    v32 = a5 - *((float *)this + 11);
    v33 = (float)(v31 * v31) + (float)(v32 * v32);
  }
  v34 = 1.0 / sqrtf(v33);
  *((float *)this + 33) = v34 * v31;
  *((float *)this + 34) = v34 * v32;
  *((float *)this + 10) = a4;
  *((float *)this + 11) = a5;
}

void CA::OGL::PathStroker::emit_cube(float32x2_t *a1, float32x2_t *a2, unint64_t a3, float a4)
{
  float32x2_t v7;
  uint64_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  uint32x2_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float32x2_t v18;
  float v19;
  __int32 v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v30;
  float32x2_t v31;
  __int128 v32;
  uint64_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  __int128 v43;
  int8x8_t v44;
  BOOL v46;
  BOOL v47;
  NSObject *v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  uint8_t buf[4];
  double v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;
  __int128 v68;
  _QWORD v69[8];

  v69[7] = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  v8 = 1;
  v9 = *a2;
  v10 = *a2;
  do
  {
    v11 = a2[v8];
    v9 = vminnm_f32(v9, v11);
    v10 = vmaxnm_f32(v10, v11);
    ++v8;
  }
  while (v8 != 4);
  v12 = (float32x2_t)vdup_n_s32(0x7F800000u);
  v13 = (uint32x2_t)vorr_s8(vorr_s8(vorn_s8((int8x8_t)vceq_f32(vabs_f32(v9), v12), vorr_s8((int8x8_t)vcgt_f32(v10, v9), (int8x8_t)vcge_f32(v9, v10))), vorr_s8((int8x8_t)vceq_f32(vabs_f32(v10), v12), (int8x8_t)vcgt_f32(a1[12], v10))), (int8x8_t)vcgt_f32(v9, a1[13]));
  if ((vpmax_u32(v13, v13).u32[0] & 0x80000000) == 0)
  {
    v14 = a2[2].f32[0];
    v15 = a2[2].f32[1];
    v16 = a2[3].f32[0];
    v17 = a2[3].f32[1];
    v18 = a2[1];
    v19 = (float)(vaddv_f32(vabd_f32(v18, v7)) + vabds_f32(v16, v14))
        + (float)((float)(vabds_f32(v14, v18.f32[0]) + vabds_f32(v15, v18.f32[1])) + vabds_f32(v17, v15));
    if (v19 >= 15000.0 && v19 < a4)
    {
      v32 = *(_OWORD *)a2[2].f32;
      v68 = *(_OWORD *)a2->f32;
      *(_OWORD *)v69 = v32;
      if (a3 >= 0x80)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v48 = x_log_category_ogl;
          if (os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134219776;
            v53 = *(float *)&v68;
            v54 = 2048;
            v55 = *((float *)&v68 + 1);
            v56 = 2048;
            v57 = *((float *)&v68 + 2);
            v58 = 2048;
            v59 = *((float *)&v68 + 3);
            v60 = 2048;
            v61 = *(float *)v69;
            v62 = 2048;
            v63 = *((float *)v69 + 1);
            v64 = 2048;
            v65 = *(float *)&v69[1];
            v66 = 2048;
            v67 = *((float *)&v69[1] + 1);
            _os_log_impl(&dword_184457000, v48, OS_LOG_TYPE_DEFAULT, "CoreAnimation: too many subdivisions in cubic curve (%a, %a) (%a, %a) (%a, %a) (%a, %a). Stack will most likely overflow. bail out.", buf, 0x52u);
          }
        }
      }
      else
      {
        v33 = v69[1];
        v34 = vmul_f32(*(float32x2_t *)((char *)&v68 + 8), (float32x2_t)0x3F0000003F000000);
        v35 = vmul_f32((float32x2_t)v69[0], (float32x2_t)0x3F0000003F000000);
        v36 = vadd_f32(v35, v34);
        v37 = vmla_f32(v34, (float32x2_t)0x3F0000003F000000, *(float32x2_t *)&v68);
        v38 = vmla_f32(v35, (float32x2_t)0x3F0000003F000000, (float32x2_t)v69[1]);
        v39 = vmul_f32(v36, (float32x2_t)0x3F0000003F000000);
        v40 = vmla_f32(v39, (float32x2_t)0x3F0000003F000000, v37);
        v41 = vmla_f32(v39, (float32x2_t)0x3F0000003F000000, v38);
        v42 = vmul_f32(vadd_f32(v41, v40), (float32x2_t)0x3F0000003F000000);
        *(float32x2_t *)&v43 = v42;
        *((float32x2_t *)&v43 + 1) = v42;
        *((float32x2_t *)&v68 + 1) = v37;
        v69[0] = v40;
        *(_OWORD *)&v69[1] = v43;
        v49 = v38;
        v50 = v41;
        *(float32x2_t *)&v43 = v41;
        *((float32x2_t *)&v43 + 1) = v38;
        *(_OWORD *)&v69[3] = v43;
        v69[5] = v33;
        v44 = vmvn_s8((int8x8_t)vceq_f32(v37, v18));
        if (((v44.i32[0] | v44.i32[1]) & 1) != 0
          || (v40.f32[0] == v14 ? (_ZF = v40.f32[1] == v15) : (_ZF = 0),
              _ZF ? (v46 = v42.f32[0] == v16) : (v46 = 0),
              v46 ? (v47 = v42.f32[1] == v17) : (v47 = 0),
              !v47))
        {
          v51 = v42;
          CA::OGL::PathStroker::emit_cube(a1, &v68, a3 + 1, v19);
          v42 = v51;
          v7.i32[0] = a2->i32[0];
        }
        if (v42.f32[0] != v7.f32[0]
          || v42.f32[1] != a2->f32[1]
          || v50.f32[0] != a2[1].f32[0]
          || v50.f32[1] != a2[1].f32[1]
          || v49.f32[0] != a2[2].f32[0]
          || v49.f32[1] != a2[2].f32[1])
        {
          CA::OGL::PathStroker::emit_cube(a1, &v69[2], a3 + 1, v19);
        }
      }
    }
    else
    {
      v21 = a1[20].i32[0];
      v22 = 4 * v21;
      if (4 * v21 + 2 * a1[19].i32[1] + 4 > a1[9].i32[0])
      {
        CA::OGL::PathStroker::flush_points((CA::OGL::PathStroker *)a1);
        v21 = a1[20].i32[0];
        v22 = 4 * v21;
      }
      v23 = *(_QWORD *)&a1[7] + 8 * v22;
      a1[20].i32[0] = v21 + 1;
      v24 = *(_OWORD *)a2[2].f32;
      *(_OWORD *)v23 = *(_OWORD *)a2->f32;
      *(_OWORD *)(v23 + 16) = v24;
      *(_QWORD *)&v24 = *(_QWORD *)v23;
      v25 = *(float32x2_t *)(v23 + 8);
      v26 = *(float32x2_t *)(v23 + 16);
      __asm { FMOV            V5.2S, #3.0 }
      v30 = vmla_f32(vsub_f32(*(float32x2_t *)(v23 + 24), *(float32x2_t *)v23), _D5, vsub_f32(v25, v26));
      v31 = vmul_f32(vadd_f32(vsub_f32(*(float32x2_t *)v23, vadd_f32(v25, v25)), v26), _D5);
      *(float32x2_t *)v23 = v30;
      *(float32x2_t *)(v23 + 8) = v31;
      *(float32x2_t *)(v23 + 16) = vmul_f32(vsub_f32(v25, *(float32x2_t *)&v24), _D5);
      *(_QWORD *)(v23 + 24) = v24;
    }
  }
}

void CA::OGL::PathStroker::cube_to(CA::OGL::PathStroker *this, float a2, float a3, float a4, float a5, float a6, float a7)
{
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float32x2_t v25;
  float32x2_t v26;
  float *v27;
  uint64_t i;
  float32x2_t v29;
  float v30;
  float v31;
  BOOL v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  uint32x2_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  _QWORD v42[2];
  float32x2_t v43;
  float v44;
  _DWORD v45[3];
  float32x2_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v14 = *((float *)this + 10);
  v15 = *((float *)this + 11);
  v16 = v14 - a2;
  v17 = v15 - a3;
  v18 = (float)(v16 * v16) + (float)(v17 * v17);
  if (v18 >= 0.000001
    || (v16 = v14 - a4, v17 = v15 - a5, v18 = (float)(v16 * v16) + (float)(v17 * v17), v18 >= 0.000001))
  {
    v22 = 1.0 / sqrtf(v18);
    v23 = v22 * v16;
    v24 = v22 * v17;
    goto LABEL_8;
  }
  v19 = v14 - a6;
  v20 = v15 - a7;
  v21 = (float)(v19 * v19) + (float)(v20 * v20);
  if (v21 >= 0.000001)
  {
    v41 = 1.0 / sqrtf(v21);
    v23 = v41 * v19;
    v24 = v41 * v20;
LABEL_8:
    *((float *)this + 35) = v23;
    *((float *)this + 36) = v24;
    CA::OGL::PathStroker::add_join(this);
    v25 = *(float32x2_t *)((char *)this + 40);
    v43 = v25;
    v44 = a2;
    *(float *)v45 = a3;
    *(float *)&v45[1] = a4;
    *(float *)&v45[2] = a5;
    v46 = (float32x2_t)__PAIR64__(LODWORD(a7), LODWORD(a6));
    if (!*((_BYTE *)this + 115))
    {
      v26 = *(float32x2_t *)((char *)this + 48);
      v27 = (float *)v45;
      for (i = 1; i != 4; ++i)
      {
        if (v26.f32[0] != *(v27 - 1))
          break;
        if (COERCE_FLOAT(HIDWORD(*((_QWORD *)this + 6))) != *v27)
          break;
        v27 += 2;
      }
      *((_BYTE *)this + 115) = 1;
      v29 = vsub_f32(*(&v43 + i), v26);
      *(float32x2_t *)((char *)this + 148) = vmul_n_f32(v29, 1.0 / sqrtf(vaddv_f32(vmul_f32(v29, v29))));
    }
    v30 = (float)((float)(v25.f32[0] - a2) * (float)(v25.f32[0] - a2))
        + (float)((float)(v25.f32[1] - a3) * (float)(v25.f32[1] - a3));
    v31 = (float)((float)(a4 - a6) * (float)(a4 - a6)) + (float)((float)(a5 - a7) * (float)(a5 - a7));
    if (v30 < 0.000001 && v31 < 0.000001)
      goto LABEL_20;
    v32 = v30 >= 0.000001;
    if (v31 < 0.000001)
      v32 = 0;
    if ((float)((float)((float)(a2 - a4) * (float)(a2 - a4)) + (float)((float)(a3 - a5) * (float)(a3 - a5))) >= 0.000001
      || v32)
    {
      CA::OGL::PathStroker::emit_cube((float32x2_t *)this, &v43, 0, INFINITY);
    }
    else
    {
LABEL_20:
      v42[0] = v25;
      v42[1] = v46;
      v33 = vminnm_f32(v25, v46);
      v34 = vmaxnm_f32(v25, v46);
      v35 = (float32x2_t)vdup_n_s32(0x7F800000u);
      v36 = (uint32x2_t)vorr_s8(vorr_s8(vorn_s8((int8x8_t)vceq_f32(vabs_f32(v33), v35), vorr_s8((int8x8_t)vcgt_f32(v34, v33), (int8x8_t)vcge_f32(v33, v34))), vorr_s8((int8x8_t)vceq_f32(vabs_f32(v34), v35), (int8x8_t)vcgt_f32(*(float32x2_t *)((char *)this + 96), v34))), (int8x8_t)vcgt_f32(v33, *(float32x2_t *)((char *)this + 104)));
      if ((vpmax_u32(v36, v36).u32[0] & 0x80000000) == 0)
        CA::OGL::PathStroker::add_line_points(this, (uint64_t)v42);
    }
    if (v31 < 0.000001)
    {
      v37 = a6 - a2;
      v38 = a7 - a3;
      v39 = (float)(v37 * v37) + (float)(v38 * v38);
      if (v39 >= 0.000001)
      {
LABEL_28:
        v40 = 1.0 / sqrtf(v39);
        *((float *)this + 33) = v40 * v37;
        *((float *)this + 34) = v40 * v38;
        *((float *)this + 10) = a6;
        *((float *)this + 11) = a7;
        return;
      }
      v37 = a6 - *((float *)this + 10);
      v38 = a7 - *((float *)this + 11);
    }
    else
    {
      v37 = a6 - a4;
      v38 = a7 - a5;
    }
    v39 = (float)(v37 * v37) + (float)(v38 * v38);
    goto LABEL_28;
  }
  if (*((_BYTE *)this + 113))
  {
    if (*((_BYTE *)this + 114))
      CA::OGL::PathStroker::line_to_axis_aligned(this, a6, a7);
  }
}

_DWORD *CA::OGL::PathStroker::close(CA::OGL::PathStroker *this)
{
  float32x2_t v2;
  float v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  uint32x2_t v8;
  _DWORD *result;
  float32x2_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = vsub_f32(*(float32x2_t *)((char *)this + 40), *(float32x2_t *)((char *)this + 48));
  v3 = vaddv_f32(vmul_f32(v2, v2));
  if (v3 >= 0.000001)
  {
    *(float32x2_t *)((char *)this + 140) = vmul_n_f32(v2, 1.0 / sqrtf(v3));
    CA::OGL::PathStroker::add_join(this);
    v4 = *(float32x2_t *)((char *)this + 48);
    *(_OWORD *)v10[0].f32 = *(_OWORD *)((char *)this + 40);
    v5 = vminnm_f32(v10[0], v4);
    v6 = vmaxnm_f32(v10[0], v4);
    v7 = (float32x2_t)vdup_n_s32(0x7F800000u);
    v8 = (uint32x2_t)vorr_s8(vorr_s8(vorn_s8((int8x8_t)vceq_f32(vabs_f32(v5), v7), vorr_s8((int8x8_t)vcgt_f32(v6, v5), (int8x8_t)vcge_f32(v5, v6))), vorr_s8((int8x8_t)vceq_f32(vabs_f32(v6), v7), (int8x8_t)vcgt_f32(*(float32x2_t *)((char *)this + 96), v6))), (int8x8_t)vcgt_f32(v5, *(float32x2_t *)((char *)this + 104)));
    if ((vpmax_u32(v8, v8).u32[0] & 0x80000000) == 0)
    {
      CA::OGL::PathStroker::add_line_points(this, (uint64_t)v10);
      v4 = *(float32x2_t *)((char *)this + 48);
    }
    *(float32x2_t *)((char *)this + 132) = vneg_f32(*(float32x2_t *)((char *)this + 140));
  }
  else
  {
    v4 = *(float32x2_t *)((char *)this + 48);
  }
  *(float32x2_t *)((char *)this + 140) = vneg_f32(*(float32x2_t *)((char *)this + 148));
  *((float32x2_t *)this + 5) = v4;
  result = CA::OGL::PathStroker::add_join(this);
  *((_BYTE *)this + 115) = 0;
  return result;
}

uint64_t CA::OGL::PathStroker::finish(CA::OGL::PathStroker *this, double a2)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  LODWORD(a2) = 2139095040;
  CA::OGL::PathStroker::move_to(this, a2, INFINITY);
  CA::OGL::PathStroker::flush_points(this);
  CA::OGL::PathStroker::flush_joins(this);
  v3 = *(_QWORD *)(*(_QWORD *)this + 16);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = (*(unsigned __int16 *)(*(_QWORD *)this + 816) >> 12) & 7;
  v6 = HIWORD(v4);
  if (v5 == 2)
    goto LABEL_4;
  if (v5 == 1)
  {
    v4 = v4 & 0xFFFFFFFFFFFF0000 | v6;
LABEL_4:
    v4 = v4 & 0xFFFF00000000FFFFLL | (v6 << 16) | (v6 << 32);
  }
  v7 = *((_QWORD *)this + 4);
  v9[0] = *((_QWORD *)this + 3);
  v9[1] = v7;
  v9[2] = vcvt_f16_f32(vcvtq_f32_f16((float16x4_t)v4));
  *(_BYTE *)(v3 + 16) = 90;
  result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *))(**(_QWORD **)this + 360))(*(_QWORD *)this, 1, v9);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)this + 16) + 481) &= ~4u;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)this + 16) + 16) = 0;
  return result;
}

void CA::OGL::PathRenderer::cgpath_apply<CA::OGL::PathStroker>(CA::OGL::PathStroker *a1, uint64_t a2)
{
  double *v2;
  double v3;
  float v4;
  double *v5;
  float v6;
  float v7;
  double *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  double *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;

  switch(*(_DWORD *)a2)
  {
    case 0:
      v2 = *(double **)(a2 + 8);
      v3 = *v2;
      *(float *)&v3 = *v2;
      v4 = v2[1];
      CA::OGL::PathStroker::move_to(a1, v3, v4);
      break;
    case 1:
      v5 = *(double **)(a2 + 8);
      v6 = *v5;
      v7 = v5[1];
      CA::OGL::PathStroker::line_to(a1, v6, v7);
      break;
    case 2:
      v8 = *(double **)(a2 + 8);
      v9 = *v8;
      v10 = v8[1];
      v11 = v8[2];
      v12 = v8[3];
      CA::OGL::PathStroker::quad_to(a1, v9, v10, v11, v12);
      break;
    case 3:
      v13 = *(double **)(a2 + 8);
      v14 = *v13;
      v15 = v13[1];
      v16 = v13[2];
      v17 = v13[3];
      v18 = v13[4];
      v19 = v13[5];
      CA::OGL::PathStroker::cube_to(a1, v14, v15, v16, v17, v18, v19);
      break;
    case 4:
      CA::OGL::PathStroker::close(a1);
      break;
    default:
      return;
  }
}

void CA::OGL::PathRenderer::cgpath_apply_transform<CA::OGL::PathStroker>(float64x2_t **a1, uint64_t a2)
{
  double v2;
  float32x2_t v3;
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;

  switch(*(_DWORD *)a2)
  {
    case 0:
      v2 = COERCE_DOUBLE(vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(a1[1][2], *a1[1], **(double **)(a2 + 8)), a1[1][1], *(double *)(*(_QWORD *)(a2 + 8) + 8))));
      CA::OGL::PathStroker::move_to((CA::OGL::PathStroker *)a1, v2, *((float *)&v2 + 1));
      break;
    case 1:
      v3 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(a1[1][2], *a1[1], **(double **)(a2 + 8)), a1[1][1], *(double *)(*(_QWORD *)(a2 + 8) + 8)));
      CA::OGL::PathStroker::line_to((CA::OGL::PathStroker *)a1, v3.f32[0], v3.f32[1]);
      break;
    case 2:
      v4 = *(double **)(a2 + 8);
      v5 = *v4;
      v6 = v4[1];
      v7 = v4[2];
      v8 = v4[3];
      v9 = (double *)a1[1];
      v10 = v9[1];
      v11 = v9[4];
      v12 = v9[5];
      v13 = v9[2];
      v14 = v9[3];
      v15 = v11 + *v9 * v5 + v13 * v6;
      v16 = v12 + v10 * v5 + v14 * v6;
      v17 = v11 + *v9 * v7 + v13 * v8;
      v18 = v12 + v10 * v7 + v14 * v8;
      *(float *)&v5 = v15;
      *(float *)&v16 = v16;
      *(float *)&v7 = v17;
      *(float *)&v18 = v18;
      CA::OGL::PathStroker::quad_to((CA::OGL::PathStroker *)a1, *(float *)&v5, *(float *)&v16, *(float *)&v7, *(float *)&v18);
      break;
    case 3:
      v19 = *(double **)(a2 + 8);
      v20 = *v19;
      v21 = v19[1];
      v22 = v19[2];
      v23 = v19[3];
      v24 = v19[4];
      v25 = v19[5];
      v26 = (double *)a1[1];
      v27 = v26[1];
      v28 = v26[4];
      v29 = v26[5];
      v30 = v26[2];
      v31 = v26[3];
      v32 = v28 + *v26 * v20 + v30 * v21;
      v33 = v29 + v27 * v20 + v31 * v21;
      v34 = v28 + *v26 * v22 + v30 * v23;
      v35 = v29 + v27 * v22 + v31 * v23;
      v36 = v28 + *v26 * v24 + v30 * v25;
      v37 = v29 + v27 * v24 + v31 * v25;
      *(float *)&v20 = v32;
      *(float *)&v33 = v33;
      *(float *)&v22 = v34;
      *(float *)&v35 = v35;
      *(float *)&v24 = v36;
      *(float *)&v37 = v37;
      CA::OGL::PathStroker::cube_to((CA::OGL::PathStroker *)a1, *(float *)&v20, *(float *)&v33, *(float *)&v22, *(float *)&v35, *(float *)&v24, *(float *)&v37);
      break;
    case 4:
      CA::OGL::PathStroker::close((CA::OGL::PathStroker *)a1);
      break;
    default:
      return;
  }
}

void CA::OGL::PathStroker::render(CA::OGL::PathStroker *this, const CGPath *a2, const CGAffineTransform *a3, double a4, const double *a5, unint64_t a6)
{
  uint64_t v11;
  int64x2_t v12;
  int64x2_t v13;
  double *v14;
  float64x2_t v15;
  double v16;
  _BOOL4 v17;
  double v18;
  double v19;
  float64x2_t v20;
  float64x2_t v21;
  int8x16_t v22;
  unsigned int v23;
  int32x2_t v24;
  int64x2_t v25;
  float64x2_t v26;
  double v27;
  double v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  float v33;
  double v34;
  float v35;
  float v36;
  double v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  const double *v41;
  double v42;
  float v43;
  const double *v44;
  double v45;
  double v46;
  BOOL v47;
  float v48;
  double *v49;
  void (__cdecl *v50)(void *, const CGPathElement *);
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  _QWORD v56[2];

  v56[1] = *MEMORY[0x1E0C80C00];
  if (a3 && a5)
  {
    v11 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, char *))(**(_QWORD **)this + 1000))(*(_QWORD *)this, 0, 4, 1, (char *)this + 116);
    v12 = *(int64x2_t *)&a3->a;
    v13 = *(int64x2_t *)&a3->c;
    v14 = (double *)*((_QWORD *)this + 1);
    v15.f64[0] = *v14 * *v14 + v14[1] * v14[1];
    v16 = v14[2] * v14[2] + v14[3] * v14[3];
    v17 = v15.f64[0] != 1.0;
    if (v16 != 1.0)
      v17 = 1;
    v18 = sqrt(v15.f64[0]);
    v19 = sqrt(v16);
    if (v17)
    {
      v16 = v19;
      v15.f64[0] = v18;
    }
    v15.f64[1] = v16;
    v20 = (float64x2_t)vzip1q_s64(v12, v13);
    v21 = (float64x2_t)vzip2q_s64(v12, v13);
    v22 = (int8x16_t)vmlaq_f64(vmulq_f64(v20, v20), v21, v21);
    v23 = *(double *)v22.i64 != 1.0;
    if (*(double *)&v22.i64[1] != 1.0)
      v23 = 1;
    v24 = vdup_n_s32(v23);
    v25.i64[0] = v24.u32[0];
    v25.i64[1] = v24.u32[1];
    v26 = vmulq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v25, 0x3FuLL)), (int8x16_t)vsqrtq_f64((float64x2_t)v22), v22), v15);
    if (v26.f64[1] >= v26.f64[0])
      v27 = v26.f64[0];
    else
      v27 = v26.f64[1];
    if (v26.f64[1] >= v26.f64[0])
      v28 = v26.f64[1];
    else
      v28 = v26.f64[0];
    v29 = a6 << (a6 & 1);
    v30 = 8 * v29;
    if (8 * v29 > 0x1000)
    {
      v31 = (char *)malloc_type_malloc(8 * v29, 0xBB62C910uLL);
      if (!v31)
        return;
    }
    else
    {
      MEMORY[0x1E0C80A78](v11);
      v31 = (char *)v56 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v31, 8 * v29);
    }
    if (v29)
    {
      v32 = 0;
      v33 = v27;
      v34 = v33;
      v35 = 0.0;
      v36 = 0.0;
      v37 = 0.00200000009 / v34;
      do
      {
        if (v32 >= a6)
          v38 = a6;
        else
          v38 = 0;
        v39 = v32 + 1;
        if (v32 + 1 >= a6)
          v40 = a6;
        else
          v40 = 0;
        v41 = &a5[-v38];
        v42 = v41[v32];
        if (*((_BYTE *)this + 114) == 2
          && (v43 = v42 * v34, v43 < 0.002)
          && (v44 = &a5[v32 - v40], v44[1] * v34 > 0.00200000009 - v43))
        {
          *(double *)&v31[8 * v32] = v37;
          v45 = v44[1] - v37 + v41[v32];
        }
        else
        {
          *(double *)&v31[8 * v32] = v42;
          v45 = a5[v32 - v40 + 1];
        }
        *(double *)&v31[8 * v32 + 8] = v45;
        v46 = a5[v32 - v40 + 1];
        v35 = v46 + v35;
        v36 = v46 + v36 + v41[v32];
        v32 += 2;
      }
      while (v39 + 1 < v29);
      v47 = v35 == 0.0;
    }
    else
    {
      v47 = 1;
      v36 = 0.0;
    }
    v49 = (double *)*((_QWORD *)this + 1);
    if (*v49 == 1.0)
    {
      v51 = 1;
      while (v51 != 6)
      {
        v52 = v51;
        v53 = v49[v51];
        v54 = CA::Mat2Impl::mat2_identity_double[v51++];
        if (v53 != v54)
        {
          if ((unint64_t)(v52 - 1) < 5)
            goto LABEL_35;
          break;
        }
      }
      v50 = (void (__cdecl *)(void *, const CGPathElement *))CA::OGL::PathRenderer::cgpath_apply<CA::OGL::PathStroker>;
    }
    else
    {
LABEL_35:
      v50 = (void (__cdecl *)(void *, const CGPathElement *))CA::OGL::PathRenderer::cgpath_apply_transform<CA::OGL::PathStroker>;
    }
    if (v29 > a6)
      v36 = v36 * 0.5;
    v48 = v28;
    if ((float)(v36 * v48) < 0.0005)
      v47 = 1;
    if (v47)
      CGPathApply(a2, this, v50);
    else
      CGPathApplyDashedPath();
    CA::OGL::PathStroker::finish(this, v55);
    if (v30 > 0x1000)
      free(v31);
  }
}

BOOL CA::Render::Texture::can_mix_with_object(CA::Render::Texture *this, CA::Render::Object *a2)
{
  return (*(uint64_t (**)(CA::Render::Object *))(*(_QWORD *)a2 + 80))(a2) != 0;
}

uint64_t CA::Render::Texture::data_size(CA::Render::Texture *this)
{
  return 0;
}

uint64_t CA::Render::Texture::set_data_volatile(CA::Render::Texture *this, int a2)
{
  return a2 ^ 1u;
}

void CA::Render::Subtexture::show(CA::Render::Subtexture *this, int a2, uint64_t a3)
{
  _BOOL4 v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  CA::Render *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v6 = x_log_hook_p();
  if ((a3 & 1) != 0)
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      v16 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *((_DWORD *)this + 6);
        v18 = *((_DWORD *)this + 7);
        v19 = *((_DWORD *)this + 8);
        v20 = *((_DWORD *)this + 9);
        *(_DWORD *)buf = 67109888;
        v23 = v17;
        v24 = 1024;
        v25 = v18;
        v26 = 1024;
        v27 = v19;
        v28 = 1024;
        v29 = v20;
        _os_log_impl(&dword_184457000, v16, OS_LOG_TYPE_DEFAULT, "(subtexture [%d %d %d %d] ", buf, 0x1Au);
      }
    }
    v21 = *((_QWORD *)this + 2);
    if (v21)
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v21 + 40))(v21, (a2 + 1), a3);
    if (x_log_hook_p())
      goto LABEL_16;
    v15 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      goto LABEL_19;
    }
  }
  else
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *((_DWORD *)this + 6);
        v9 = *((_DWORD *)this + 7);
        v10 = *((_DWORD *)this + 8);
        v11 = *((_DWORD *)this + 9);
        *(_DWORD *)buf = 67109888;
        v23 = v8;
        v24 = 1024;
        v25 = v9;
        v26 = 1024;
        v27 = v10;
        v28 = 1024;
        v29 = v11;
        _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_DEFAULT, "(subtexture [%d %d %d %d] ", buf, 0x1Au);
      }
    }
    if (*((_QWORD *)this + 2))
    {
      v12 = (CA::Render *)(a2 + 1);
      CA::Render::show_newline(v12);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v13 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v13, OS_LOG_TYPE_DEFAULT, "(texture ", buf, 2u);
        }
      }
      (*(void (**)(_QWORD, CA::Render *, uint64_t))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2), v12, a3);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v14 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v14, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
    if (x_log_hook_p())
    {
LABEL_16:
      x_log_();
      return;
    }
    v15 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
LABEL_19:
      _os_log_impl(&dword_184457000, v15, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
    }
  }
}

uint64_t CA::Render::Subtexture::mix@<X0>(CA::Render::Subtexture *this@<X0>, CA::Render::Object *a2@<X1>, const CA::Render::ValueInterpolator *a3@<X2>, _QWORD *a4@<X8>)
{
  malloc_zone_t *malloc_zone;
  uint64_t result;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = (uint64_t)malloc_type_zone_malloc(malloc_zone, 0xA8uLL, 0x8BB15036uLL);
  if (result)
    result = CA::Render::Interpolator::Interpolator(result, this, a2, *(double *)a3);
  *a4 = result;
  return result;
}

_QWORD *CA::Render::Fence::Transaction::Observer::free_batch_handlers(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = this;
  v2 = this[4];
  if (v2)
  {
    do
    {
      _Block_release(*(const void **)v2);
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2);
    this = (_QWORD *)v1[4];
    if (this)
    {
      do
      {
        v3 = (_QWORD *)this[1];
        free(this);
        this = v3;
      }
      while (v3);
    }
  }
  v1[4] = 0;
  return this;
}

uint64_t __Block_byref_object_copy__16702(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__16703(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(a1 + 40);
}

uint64_t ___ZN2CA6Render5Fence11Transaction8Observer8activateENSt3__113unordered_setIyNS4_4hashIyEENS4_8equal_toIyEENS4_9allocatorIyEEEEPFvPS3_RKSC_djyEPFvSD_SF_jjEPFvSD_SF_E_block_invoke_7(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 56);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v3 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_DWORD *)(a1 + 80);
      v5 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 67109376;
      v9 = v4;
      v10 = 2048;
      v11 = v5;
      _os_log_impl(&dword_184457000, v3, OS_LOG_TYPE_DEFAULT, "fence tx observer %x timed out after %f\n", buf, 0x12u);
    }
  }
  result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (result)
  {
    result = dispatch_mach_cancel();
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (!*(_BYTE *)(v7 + 24))
  {
    *(_BYTE *)(v7 + 24) = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 72))(v2, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  }
  return result;
}

_QWORD *CA::Render::Fence::Transaction::Observer::notify_batch_handlers(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)result[4];
  if (v1)
  {
    v2 = result;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(*v1 + 16))();
      v1 = (_QWORD *)v1[1];
    }
    while (v1);
    if (v2[4])
      return CA::Render::Fence::Transaction::Observer::free_batch_handlers(v2);
  }
  return result;
}

void CA::Render::Fence::fence_info_init(CA::Render::Fence *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Fence::_lock);
  v1 = operator new();
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_DWORD *)(v1 + 32) = 1065353216;
  CA::Render::Fence::fcontexts_by_id = v1;
  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_DWORD *)(v2 + 32) = 1065353216;
  CA::Render::Fence::fences_by_port = v2;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_DWORD *)(v3 + 32) = 1065353216;
  CA::Render::Fence::fences_by_name = v3;
  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_DWORD *)(v4 + 32) = 1065353216;
  CA::Render::Fence::cleared_f_names = v4;
  v5 = (_QWORD *)operator new();
  v5[1] = 0;
  v5[2] = 0;
  *v5 = 0;
  CA::Render::Fence::transactions = (uint64_t)v5;
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  CA::Render::Fence::bcontexts_by_id = v6;
  v7 = operator new();
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_DWORD *)(v7 + 32) = 1065353216;
  CA::Render::Fence::batches_by_port = v7;
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  CA::Render::Fence::cleared_b_ports = v8;
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Fence::_lock);
}

void std::vector<std::unordered_set<unsigned long long>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void CA::Render::Fence::send_rmfc_msg(uint64_t a1, size_t size, uint64_t a3)
{
  uint64_t v3;
  int v5;
  int v6;
  size_t v7;
  _BYTE *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  mach_msg_return_t v12;
  mach_msg_return_t v13;
  NSObject *v14;
  _BYTE msg[28];
  _BYTE *v17;
  int v18;
  int v19;
  pid_t v20;
  int v21;
  uint8_t buf[4];
  mach_msg_return_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a3 + 24);
  if (!v3)
    __assert_rtn("send_rmfc_msg", "render-fence.cpp", 167, "!f_names.empty ()");
  v5 = size;
  v6 = a1;
  if ((unint64_t)(8 * v3) > 0x1000)
  {
    v8 = malloc_type_malloc(8 * v3, 0x14686EEAuLL);
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v8 = &msg[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
    bzero(v8, v7);
  }
  v9 = *(_QWORD **)(a3 + 16);
  if (v9)
  {
    v10 = v8;
    do
    {
      *v10++ = v9[2];
      v9 = (_QWORD *)*v9;
    }
    while (v9);
  }
  *(_QWORD *)msg = 0x3480000013;
  *(_DWORD *)&msg[8] = v6;
  *(_OWORD *)&msg[12] = xmmword_18474E870;
  v17 = v8;
  v11 = 8 * *(_DWORD *)(a3 + 24);
  v18 = 16777472;
  v19 = v11;
  v20 = getpid();
  v21 = v5;
  v12 = mach_msg((mach_msg_header_t *)msg, 17, 0x34u, 0, 0, 0x64u, 0);
  if (v12)
  {
    v13 = v12;
    if ((v12 - 268435459) <= 1)
      mach_msg_destroy((mach_msg_header_t *)msg);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v14 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v23 = v13;
        _os_log_impl(&dword_184457000, v14, OS_LOG_TYPE_DEFAULT, "failed to send rmfc reply: %x\n", buf, 8u);
      }
    }
  }
}

void CA::CG::DrawShading::~DrawShading(CA::CG::Renderer **this, const void *a2)
{
  *this = (CA::CG::Renderer *)off_1E1591428;
  CA::CG::Renderer::release_object(this[14], a2);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
}

{
  malloc_zone_t *malloc_zone;

  *this = (CA::CG::Renderer *)off_1E1591428;
  CA::CG::Renderer::release_object(this[14], a2);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

int64x2_t CA::CG::DrawShading::compute_dod(CA::CG::DrawShading *this, int64x2_t *a2)
{
  int64x2_t result;

  result = vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
  *a2 = result;
  a2[1] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  return result;
}

uint64_t CA::CG::DrawShading::shape_extent_contains(CA::CG::DrawShading *this, CA::CG::Renderer *a2, const CA::Shape *a3)
{
  return 1;
}

uint64_t CA::CG::DrawShading::debug_color(CA::CG::DrawShading *this)
{
  return 1967734240;
}

uint64_t CA::CG::DrawShading::color_type(CA::CG::_anonymous_namespace_ **this, CA::CG::Renderer *a2)
{
    return 8;
  else
    return 0;
}

uint64_t CA::CG::DrawShading::supports_complex_blend_modes(CA::CG::DrawShading *this)
{
  return 0;
}

char *CA::CG::DrawShading::clipping_planes(CA::CG::DrawShading *this, float64x2_t *a2)
{
  uint64_t Descriptor;

  if (CGShadingGetType() != 1)
    return 0;
  Descriptor = CGShadingGetDescriptor();
}

void CA::CG::DrawShading::draw_color(CA::CG::DrawShading *this, CA::CG::Renderer *a2)
{
  CA::CG::fill_shading((uint64_t)a2);
}

uint64_t CA::CG::DrawShading::draw_shape_and_color(CA::CG::DrawShading *this, CA::CG::Renderer *a2)
{
  return (*(uint64_t (**)(CA::CG::DrawShading *, CA::CG::Renderer *))(*(_QWORD *)this + 168))(this, a2);
}

void CA::CG::fill_shading(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  CA::CG::_anonymous_namespace_ *v3;
  CA::CG::_anonymous_namespace_ *v4;
  double v5;
  float64_t v6;
  int Type;
  CGColorSpace *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t Descriptor;
  CGColorSpace *ColorSpace;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  uint64_t Background;
  uint64_t v23;
  uint64_t v24;
  CGColorSpace *v25;
  __n128 v26;
  uint64_t v27;
  int v28;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  char v36;
  char v37;
  int v38;
  int v39;
  uint64_t v41;
  uint64_t v42;
  CGShading *v43;
  char has_background;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t Identifier;
  char v52;
  uint64_t v53;
  CGShading *v54;
  int32x2_t *v55;
  int32x2_t *v56;
  uint32x2_t v57;
  int32x2_t v58;
  uint32x2_t v59;
  int32x2_t v60;
  int8x16_t v61;
  int32x2_t v62;
  uint32x2_t v63;
  int32x2_t v64;
  int32x2_t v65;
  double *v66;
  double v67;
  double v68;
  double v69;
  double v70;
  int64x2_t v71;
  unint64_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int32x4_t v75;
  uint32x2_t v76;
  int32x2_t v77;
  uint32x2_t v78;
  int32x2_t v79;
  uint32x2_t v80;
  int v81;
  unint64_t v82;
  uint64_t v83;
  CGColorSpace *v84;
  CA::Shape *v85;
  uint64_t v86;
  unint64_t v87;
  size_t v88;
  CA::Render *v89;
  CGColorSpace *v90;
  CGColorSpace *v91;
  CGContextRef *v92;
  void *v93;
  CGContext *v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  _DWORD *v102;
  int v103;
  float64x2_t v104;
  double v105;
  double v106;
  double v107;
  void (*v108)(const void *, void *);
  CA::Render *v109;
  __int32 v110;
  __int32 v111;
  double v112;
  double v113;
  double v114;
  double v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  void (*v119)(const void *, void *);
  CA::Render::Texture *v120;
  unsigned int *v121;
  _OWORD *v122;
  double *v123;
  int32x4_t v124;
  int32x4_t v125;
  _OWORD *v126;
  int v127;
  int64x2_t v128;
  int8x16_t v129;
  int32x2_t v130;
  int8x16_t v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int v134;
  void *v135;
  int32x2_t v136;
  int32x2_t v137;
  int32x2_t v138;
  int32x2_t v139;
  CGAffineTransform transform;
  void (*v141)(const void *, void *);
  unint64_t v142;
  int8x16_t v143;
  int8x16_t v144;
  float64x2_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  CA::CG::_anonymous_namespace_ *v149;
  __int32 v150;
  __int32 v151;
  uint64_t v152;
  int8x16_t v153;
  float64x2_t v154;
  float64x2_t v155;
  __int128 v156;
  uint64_t v157;
  _BYTE v158[48];
  __int128 v159;
  __int128 v160;
  void (**v161)(CA::CG::_anonymous_namespace_::ShadingKey *__hidden);
  _BYTE v162[48];
  double v163;
  double v164;
  uint64_t v165;

  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v165 = *MEMORY[0x1E0C80C00];
  Type = CGShadingGetType();
  switch(Type)
  {
    case 3:
      Descriptor = CGShadingGetDescriptor();
      ColorSpace = (CGColorSpace *)CGShadingGetColorSpace();
      if (CGColorSpaceGetModel(ColorSpace) > kCGColorSpaceModelRGB)
        goto LABEL_50;
      v9 = *(_QWORD **)(*(_QWORD *)&v6 + 8);
      *(_BYTE *)(v9[2] + 16) = 46;
      v17 = (*(uint64_t (**)(_QWORD *))(*v9 + 984))(v9);
      v18 = v9[2];
      if (!v17)
        goto LABEL_49;
      v19 = *(unsigned __int8 *)(v18 + 480);
      if (v19 == 12 || (v19 - 1) > 0x18)
        goto LABEL_50;
      {
        *(_BYTE *)(v9[2] + 481) |= 2u;
        *(_DWORD *)(v9[2] + 352) = 1065353216;
      }
      v21 = *(_QWORD *)(Descriptor + 40);
      v143.i64[0] = (uint64_t)&off_1E1591B50;
      v143.i64[1] = v21;
      Background = CGShadingGetBackground();
      *(_QWORD *)v158 = 2048;
      v23 = *(_QWORD *)(Descriptor + 16);
      *(_QWORD *)&v155.f64[0] = v9;
      *(_QWORD *)&v155.f64[1] = v2;
      *(_QWORD *)&v156 = &v143;
      *((_QWORD *)&v156 + 1) = ColorSpace;
      v157 = Background;
      *(_QWORD *)&v154.f64[0] = &off_1E1591A70;
      v154.f64[1] = v6;
      *(_OWORD *)&v158[8] = *(_OWORD *)Descriptor;
      *(_QWORD *)&v158[24] = v23;
      break;
    case 2:
      v24 = CGShadingGetDescriptor();
      v25 = (CGColorSpace *)CGShadingGetColorSpace();
      if (CGColorSpaceGetModel(v25) > kCGColorSpaceModelRGB)
        goto LABEL_50;
      v9 = *(_QWORD **)(*(_QWORD *)&v6 + 8);
      v27 = v9[2];
      v28 = *(unsigned __int8 *)(v27 + 480);
      if (v28 == 12 || (v28 - 1) > 0x18)
        goto LABEL_50;
      v26.n128_u64[0] = *(_QWORD *)v24;
      if (*(double *)v24 == *(double *)(v24 + 32)
        && (v26.n128_u64[0] = *(_QWORD *)(v24 + 8), v26.n128_f64[0] == *(double *)(v24 + 40)))
      {
        v31 = 0;
        v30 = 44;
      }
      else
      {
        v30 = 45;
        v31 = 1;
      }
      *(_BYTE *)(v27 + 16) = v30;
      if (((*(uint64_t (**)(_QWORD *, __n128))(*v9 + 984))(v9, v26) & 1) == 0)
      {
        v18 = v9[2];
        goto LABEL_49;
      }
      {
        *(_BYTE *)(v9[2] + 481) |= 2u;
        *(_DWORD *)(v9[2] + 352) = 1065353216;
      }
      v32 = *(_QWORD *)(v24 + 80);
      v143.i64[0] = (uint64_t)&off_1E1591B50;
      v143.i64[1] = v32;
      v33 = CGShadingGetBackground();
      v159 = 0u;
      *(_OWORD *)&v158[32] = 0u;
      *(_OWORD *)&v158[16] = 0u;
      *(_OWORD *)v158 = 0u;
      v34 = *(double *)(v24 + 16);
      v35 = *(double *)(v24 + 48);
      v36 = *(_BYTE *)(v24 + 24);
      v37 = *(_BYTE *)(v24 + 56);
      *(_QWORD *)&v155.f64[0] = v9;
      *(_QWORD *)&v155.f64[1] = v2;
      *(_QWORD *)&v156 = &v143;
      *((_QWORD *)&v156 + 1) = v25;
      v157 = v33;
      *(_DWORD *)v158 = 2048;
      *(_QWORD *)&v154.f64[0] = &off_1E1591AB8;
      v154.f64[1] = v6;
      *(_OWORD *)&v158[8] = *(_OWORD *)v24;
      *(_OWORD *)&v158[24] = *(_OWORD *)(v24 + 32);
      *(_QWORD *)&v158[40] = fabs(v34);
      *(_QWORD *)&v159 = fabs(v35);
      BYTE8(v159) = v36;
      BYTE9(v159) = v37;
      BYTE10(v159) = v31;
      break;
    case 1:
      v8 = (CGColorSpace *)CGShadingGetColorSpace();
      if (CGColorSpaceGetModel(v8) > kCGColorSpaceModelRGB)
        goto LABEL_50;
      v9 = *(_QWORD **)(*(_QWORD *)&v6 + 8);
      v10 = CGShadingGetDescriptor();
      v11 = v10;
      if (*(_BYTE *)(v10 + 16) && *(_BYTE *)(v10 + 40))
      {
        v12 = v9[2];
        v13 = *(_QWORD *)(v12 + 16) & 0xFFFFFF00FF00FF00;
        if (*(_QWORD *)(v12 + 8) == 0x3C003C003C003C00)
          v14 = 1;
        else
          v14 = 3;
        *(_DWORD *)(v12 + 16) = v14 | v13;
        *(_DWORD *)(v12 + 20) = HIDWORD(v13);
LABEL_41:
        {
          *(_BYTE *)(v9[2] + 481) |= 2u;
          *(_DWORD *)(v9[2] + 352) = 1065353216;
        }
        v41 = *(_QWORD *)(v11 + 64);
        v143.i64[0] = (uint64_t)&off_1E1591B50;
        v143.i64[1] = v41;
        v42 = CGShadingGetBackground();
        v160 = 0u;
        v159 = 0u;
        *(_OWORD *)&v158[32] = 0u;
        *(_OWORD *)&v158[16] = 0u;
        *(_OWORD *)v158 = 0u;
        CGShadingGetBounds();
        v45 = *(_BYTE *)(v11 + 16);
        v46 = *(_BYTE *)(v11 + 40);
        *(_QWORD *)&v155.f64[0] = v9;
        *(_QWORD *)&v155.f64[1] = v2;
        *(_QWORD *)&v156 = &v143;
        *((_QWORD *)&v156 + 1) = v8;
        v157 = v42;
        *(_DWORD *)v158 = 2048;
        *(_QWORD *)&v154.f64[0] = &off_1E1591A28;
        v154.f64[1] = v6;
        *(_OWORD *)&v158[8] = *(_OWORD *)v11;
        *(_OWORD *)&v158[24] = *(_OWORD *)(v11 + 24);
        *(_QWORD *)&v158[40] = v47;
        *(_QWORD *)&v159 = v48;
        *((_QWORD *)&v159 + 1) = v49;
        *(_QWORD *)&v160 = v50;
        BYTE8(v160) = has_background;
        BYTE9(v160) = v45;
        BYTE10(v160) = v46;
        break;
      }
      *(_BYTE *)(v9[2] + 16) = 43;
      v38 = (*(uint64_t (**)(_QWORD *))(*v9 + 984))(v9);
      v18 = v9[2];
      if (v38)
      {
        v39 = *(unsigned __int8 *)(v18 + 480);
        if (v39 == 12 || (v39 - 1) > 0x18)
          goto LABEL_50;
        goto LABEL_41;
      }
LABEL_49:
      *(_BYTE *)(v18 + 16) = 0;
      goto LABEL_50;
    default:
      goto LABEL_50;
  }
  Identifier = CGShadingGetIdentifier();
  *(_BYTE *)(v9[2] + 481) &= ~2u;
  *(_BYTE *)(v9[2] + 16) = 0;
  if ((v52 & 1) != 0)
    return;
LABEL_50:
  v53 = *(_QWORD *)(*(_QWORD *)&v6 + 8);
  v153 = 0uLL;
  CA::Shape::get_bounds(*(_QWORD *)(*(_QWORD *)(v53 + 232) + 8), v153.i32);
  v55 = *(int32x2_t **)(v53 + 248);
  if (v55)
    v56 = v55 + 4;
  else
    v56 = (int32x2_t *)(v53 + 184);
  v57 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v153.u64[1]);
  if ((vpmax_u32(v57, v57).u32[0] & 0x80000000) != 0)
  {
    v136 = (int32x2_t)v153.u64[1];
    v138 = (int32x2_t)v153.u64[1];
  }
  else
  {
    v58 = v56[1];
    v59 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v58);
    if ((vpmax_u32(v59, v59).u32[0] & 0x80000000) != 0
      || (v60 = vadd_s32(*v56, v58),
          *(int32x2_t *)v61.i8 = vmax_s32(*(int32x2_t *)v153.i8, *v56),
          v62 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v153.i8, (int32x2_t)v153.u64[1]), v60), *(int32x2_t *)v61.i8),
          v63 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v62),
          (vpmax_u32(v63, v63).u32[0] & 0x80000000) != 0))
    {
      v136 = 0;
      v138 = 0;
      v153.i64[1] = 0;
    }
    else
    {
      v61.u64[1] = (unint64_t)v62;
      v153 = v61;
      v136 = v62;
      v138 = v62;
    }
  }
  {
    v64 = v136;
    v65 = v138;
  }
  else
  {
    CGShadingGetBounds();
    v154.f64[0] = v67;
    v154.f64[1] = v68;
    v155.f64[0] = v69;
    v155.f64[1] = v70;
    if (v69 < 0.0)
    {
      v154.f64[0] = v69 + v67;
      v155.f64[0] = -v69;
    }
    if (v70 < 0.0)
    {
      v154.f64[1] = v70 + v68;
      v155.f64[1] = -v70;
    }
    CA::Mat2Impl::mat2_apply_to_rect(v2, v154.f64, v66);
    v71 = vceqzq_f64(v155);
    v72 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v71, 1), (int8x16_t)v71).u64[0];
    v73 = 0uLL;
    if ((v72 & 0x8000000000000000) == 0)
    {
      v74 = vorrq_s8((int8x16_t)vcltzq_f64(v155), (int8x16_t)vcgezq_f64(v155));
      if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v74), 1), v74).u64[0] & 0x8000000000000000) == 0)
      {
        v75 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v154, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        v73 = (int8x16_t)vuzp1q_s32(v75, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v154, v155), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v75));
      }
    }
    v65 = v138;
    v76 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v138);
    if ((vpmax_u32(v76, v76).u32[0] & 0x80000000) != 0)
    {
      v64 = v136;
    }
    else
    {
      v77 = (int32x2_t)vextq_s8(v73, v73, 8uLL).u64[0];
      v78 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v77);
      if ((vpmax_u32(v78, v78).u32[0] & 0x80000000) != 0
        || (v79 = vadd_s32(*(int32x2_t *)v73.i8, v77),
            *(int32x2_t *)v73.i8 = vmax_s32(*(int32x2_t *)v153.i8, *(int32x2_t *)v73.i8),
            v64 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v153.i8, v138), v79), *(int32x2_t *)v73.i8),
            v80 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v64),
            (vpmax_u32(v80, v80).u32[0] & 0x80000000) != 0))
      {
        v65 = 0;
        v153.i64[1] = 0;
        v64 = 0;
      }
      else
      {
        v73.u64[1] = (unint64_t)v64;
        v153 = v73;
        v65 = v64;
      }
    }
  }
  v81 = v64.i32[0];
  v82 = v64.u32[1];
  if (!*(_QWORD *)&v64)
  {
    *(_QWORD *)(*(_QWORD *)(v53 + 16) + 8) = 0;
    v85 = *(CA::Shape **)(*(_QWORD *)(v53 + 232) + 8);
    v154 = 0uLL;
    CA::OGL::emit_combine(v53, 0, 0, 0, v85, (unsigned int *)&v154);
    return;
  }
  v83 = *(_QWORD *)(*(_QWORD *)&v6 + 8);
  v137 = v64;
  v139 = v65;
  if (v83)
    v84 = *(CGColorSpace **)(v83 + 144);
  else
    v84 = 0;
  if (CGColorSpaceGetModel(v84))
    v86 = 2;
  else
    v86 = 1;
  if ((v82 + *(_DWORD *)(*(_QWORD *)&v6 + 192 * v86 + 1400) - 1)
     / *(_DWORD *)(*(_QWORD *)&v6 + 192 * v86 + 1400)
     * ((v81 + *(_DWORD *)(*(_QWORD *)&v6 + 192 * v86 + 1396) - 1)
      / *(_DWORD *)(*(_QWORD *)&v6 + 192 * v86 + 1396)) > *((_DWORD *)&CA::CG::Renderer::_max_mosaic_cells + v86))
  {
    v87 = CA::Render::format_rowbytes((CA::Render *)0xB, v81);
    v88 = v87;
    v141 = 0;
    v142 = v87;
    if (is_mul_ok(v87, v82))
      v89 = (CA::Render *)(v87 * v82);
    else
      v89 = 0;
    v90 = (CGColorSpace *)CA::Render::aligned_malloc(v89, (unint64_t *)&v141, 0);
    if (!v90)
      return;
    v91 = v90;
    v92 = (CGContextRef *)CAGetCachedCGBitmapContext_(v90, v81, v82, 0xBu, v88, *(CGColorSpaceRef *)(v53 + 144));
    if (v92 && (v94 = v92[2]) != 0)
    {
      CGContextTranslateCTM(v92[2], (double)-v153.i32[0], (double)-v153.i32[1]);
      v95 = *(_OWORD *)(v2 + 16);
      v96 = *(_OWORD *)(v2 + 32);
      *(_OWORD *)&transform.a = *(_OWORD *)v2;
      *(_OWORD *)&transform.c = v95;
      *(_OWORD *)&transform.tx = v96;
      CGContextConcatCTM(v94, &transform);
      if (CGShadingGetType())
      {
        CGContextSetCompositeOperation();
      }
      else
      {
        CGContextSetCompositeOperation();
        CGContextClear();
      }
      CGContextDrawShading(v94, v4);
      CAReleaseCachedCGContext(v94);
      v119 = v141;
      v120 = CA::Render::Image::new_image((CA::Render::Image *)0xB, v81, v82, 1u, *(CGColorSpace **)(v53 + 144), v91, &v142, (const unint64_t *)CA::Render::aligned_free, v141, v135);
      if (v120)
      {
        v121 = (unsigned int *)v120;
        v161 = 0;
        *(_QWORD *)v162 = 0;
        v122 = CA::OGL::Context::bind_image(v53, 0, (uint32x2_t *)v120, (double *)0x100, 0, 0, 0, 0, 0.0, (float32x4_t *)&v161, 0);
        if (v122)
        {
          v126 = v122;
          if (v81 <= (int)v82)
            v127 = v82;
          else
            v127 = v81;
          v124.i32[0] = 1073741822;
          v125.i32[0] = v127;
          v128.i64[0] = v153.i32[0];
          v128.i64[1] = v153.i32[1];
          v129 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v125, v124), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v128));
          v128.i64[0] = v137.i32[0];
          v128.i64[1] = v137.i32[1];
          v130 = vdup_n_s32(v127 > 1073741822);
          v131 = (int8x16_t)vcvtq_f64_s64(v128);
          v128.i64[0] = v130.u32[0];
          v128.i64[1] = v130.u32[1];
          v143 = v129;
          v144 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v128, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v131);
          *(_QWORD *)&v154.f64[0] = &v143;
          *(_QWORD *)&v154.f64[1] = &CA::identity_transform;
          v155 = 0u;
          v156 = 0u;
          CA::OGL::fill_rect_tex((CA::OGL::Context *)v53, (uint64_t)&v154, (uint64_t)&v161, v123);
          (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v53 + 520))(v53, v126, 0);
        }
        v132 = v121 + 2;
        do
        {
          v133 = __ldaxr(v132);
          v134 = v133 - 1;
        }
        while (__stlxr(v134, v132));
        if (!v134)
          (*(void (**)(unsigned int *))(*(_QWORD *)v121 + 16))(v121);
        return;
      }
      v109 = v91;
      v108 = v119;
    }
    else
    {
      v108 = v141;
      v109 = v91;
    }
    CA::Render::aligned_free(v109, (size_t)v108, v93);
    return;
  }
  v97 = *(_QWORD *)&v6 + 192 * v86;
  v98 = *(_QWORD *)(v53 + 16);
  v99 = *(_QWORD *)(v98 + 16) & 0xFFFFFF00FF00FF00;
  if (*(_QWORD *)(v98 + 8) == 0x3C003C003C003C00)
    v100 = 1;
  else
    v100 = 3;
  *(_DWORD *)(v98 + 16) = v100 | v99;
  *(_DWORD *)(v98 + 20) = HIDWORD(v99);
  if ((*(_DWORD *)(v97 + 1536) & 0x80000000) != 0)
  {
    v101 = v97 + 1392;
    v102 = (_DWORD *)(v97 + 1536);
    *(_DWORD *)(v97 + 1536) = 0;
    *(_WORD *)(*(_QWORD *)&v6 + 192 * v86 + 1540) = 0;
    memset(&v162[8], 0, 40);
    v161 = off_1E15919C0;
    v103 = CGShadingGetIdentifier();
    *(_DWORD *)v162 = v103;
    *(int32x2_t *)&v162[4] = v139;
    if (&v162[16] == (_BYTE *)v2)
    {
      v105 = 0.0;
      v106 = 0.0;
      v107 = 0.0;
    }
    else
    {
      v104 = *(float64x2_t *)(v2 + 16);
      *(_OWORD *)&v162[16] = *(_OWORD *)v2;
      *(float64x2_t *)&v162[32] = v104;
      v104.f64[0] = 256.0 * v104.f64[0]
                  + vaddvq_f64(vmulq_f64(*(float64x2_t *)&v162[16], (float64x2_t)xmmword_18474E880)) * 33.0;
      v106 = *(double *)(v2 + 32);
      v105 = *(double *)(v2 + 40);
      v107 = vaddvq_f64(vmulq_f64(v104, (float64x2_t)xmmword_18474E890)) * 33.0;
    }
    v110 = v153.i32[0];
    v111 = v153.i32[1];
    v112 = v106 - (double)v153.i32[0];
    v113 = v105 - (double)v153.i32[1];
    v163 = v112;
    v164 = v113;
    *(float64_t *)&v143.i64[1] = v6;
    v144.i64[0] = v53;
    *(_QWORD *)(v53 + 128) = 0;
    *(_QWORD *)(v53 + 96) = v53 + 818;
    *(_OWORD *)(v53 + 104) = xmmword_18474E060;
    v144.u64[1] = (unint64_t)v137;
    v145 = &v154;
    v146 = 0x2000;
    v147 = 0;
    v148 = 0;
    v143.i64[0] = (uint64_t)&off_1E1591B00;
    v149 = v4;
    v150 = v110;
    v151 = v111;
    v152 = v2;
    v114 = v113 + (v107 + v112) * 33.0;
    v115 = -v114;
    if (v114 >= 0.0)
      v115 = v114;
    CA::OGL::Mosaic::draw(v101, (uint64_t *)v53, 6, 33 * (33 * (33 * v115 + v139.i32[0]) + v139.i32[1]) + v103, (uint64_t)&v161, v81, v82, 1, (uint64_t)&v143, 0);
    CA::CG::MosaicBitmapDelegate::~MosaicBitmapDelegate((CA::CG::MosaicBitmapDelegate *)&v143);
    v116 = *(_QWORD *)&v6 + 192 * v86;
    v117 = *(_QWORD *)(v116 + 1552);
    if (v117)
    {
      v118 = (_QWORD *)(v116 + 1552);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v53 + 520))(v53, v117, 0);
      *v118 = 0;
      *(_DWORD *)(*(_QWORD *)&v6 + 192 * v86 + 1544) = -1;
    }
    *v102 = -1;
    *(_QWORD *)(*(_QWORD *)&v6 + 192 * v86 + 1504) = 0;
  }
  *(_BYTE *)(*(_QWORD *)(v53 + 16) + 16) = 0;
}

uint64_t CA::CG::`anonymous namespace'::shading_has_background(CA::CG::_anonymous_namespace_ *this, CGShading *a2)
{
  uint64_t result;
  uint64_t v3;
  CGColorSpace *ColorSpace;

  result = CGShadingGetBackground();
  if (result)
  {
    v3 = result;
    ColorSpace = (CGColorSpace *)CGShadingGetColorSpace();
    return *(double *)(v3 + 8 * CGColorSpaceGetNumberOfComponents(ColorSpace)) > 0.0;
  }
  return result;
}

uint64_t CA::CG::`anonymous namespace'::draw_shading_delegate(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 16);
  v5 = v3[31];
  if (v5)
    LODWORD(v5) = (*(_WORD *)(v5 + 68) & 0x130) != 0;
  if (a2 == 5)
    LODWORD(v5) = 1;
  if ((_DWORD)v5)
    v6 = 5;
  else
    v6 = 3;
  v7 = v4 + 192 * v6;
  v8 = *(_DWORD *)(v7 + 1536);
  if ((v8 & 0x80000000) != 0)
  {
    v9 = (_DWORD *)(v7 + 1536);
    v10 = v4 + 192 * v6;
    *(_DWORD *)(v7 + 1536) = 0;
    *(_BYTE *)(v10 + 1540) = a2 == 7;
    *(_BYTE *)(v10 + 1541) = a2 == 7;
    CA::OGL::Mosaic::draw(v10 + 1392, v3, a2, a3, 0, *(_DWORD *)(a1 + 56), 1, 0, a1, 0);
    v11 = *(_QWORD *)(v10 + 1552);
    if (v11)
    {
      (*(void (**)(uint64_t *, uint64_t, _QWORD))(*v3 + 520))(v3, v11, 0);
      *(_QWORD *)(v10 + 1552) = 0;
      *(_DWORD *)(v4 + 192 * v6 + 1544) = -1;
    }
    *v9 = -1;
    *(_QWORD *)(v4 + 192 * v6 + 1504) = 0;
  }
  return v8 >> 31;
}

void CA::CG::`anonymous namespace'::ShadingBitmapDelegate::~ShadingBitmapDelegate(CA::CG::_anonymous_namespace_::ShadingBitmapDelegate *this)
{
  CA::CG::MosaicBitmapDelegate::~MosaicBitmapDelegate(this);
  JUMPOUT(0x186DBD990);
}

float CA::CG::`anonymous namespace'::ShadingBitmapDelegate::quad(CA::CG::_anonymous_namespace_::ShadingBitmapDelegate *this, const CA::Bounds *a2, float *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  float v11;
  float v12;
  float result;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *((_QWORD *)this + 2);
  v7 = 6;
  if (!*(_DWORD *)(v6 + 92))
    v7 = 4;
  if ((unint64_t)(*(_QWORD *)(v6 + 128) + 4) > *(_QWORD *)(v6 + 136)
    || (v8 = *(_QWORD *)(v6 + 112)) != 0 && *(_QWORD *)(v6 + 104) + v7 > v8)
  {
    CA::CG::MosaicDelegate::draw_array(*((CA::CG::MosaicDelegate **)this + 2));
  }
  v9 = *(_DWORD *)a2 + *((_DWORD *)this + 18);
  v10 = *((_DWORD *)a2 + 1) + *((_DWORD *)this + 19);
  v11 = (double)*((int *)a2 + 2) + (double)v9;
  v12 = (double)*((int *)a2 + 3) + (double)v10;
  CA::OGL::Context::array_rect((_QWORD *)v6, (float)v9, (float)v10, v11, v12);
  result = *a3;
  v14 = *((_DWORD *)a3 + 1);
  v15 = *((_DWORD *)a3 + 2);
  v16 = *((_DWORD *)a3 + 3);
  v17 = *(_QWORD *)(v6 + 120) + 48 * *(_QWORD *)(v6 + 128);
  *(float *)(v17 - 176) = *a3;
  *(_DWORD *)(v17 - 172) = v14;
  *(_DWORD *)(v17 - 128) = v15;
  *(_DWORD *)(v17 - 124) = v14;
  *(_DWORD *)(v17 - 80) = v15;
  *(_DWORD *)(v17 - 76) = v16;
  *(float *)(v17 - 32) = result;
  *(_DWORD *)(v17 - 28) = v16;
  v18 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8);
  *(_QWORD *)(v17 - 160) = v18;
  *(_QWORD *)(v17 - 112) = v18;
  *(_QWORD *)(v17 - 64) = v18;
  *(_QWORD *)(v17 - 16) = v18;
  return result;
}

void CA::CG::`anonymous namespace'::ShadingBitmapDelegate::draw(CA::CG::_anonymous_namespace_::ShadingBitmapDelegate *this, CGContextRef c, double a3)
{
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  CGAffineTransform v8;
  CGAffineTransform transform;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  LODWORD(a3) = *((_DWORD *)this + 7);
  transform.c = 0.0;
  *(_OWORD *)&transform.a = 0x3FF0000000000000uLL;
  *(_OWORD *)&transform.d = xmmword_18474DFF0;
  transform.ty = (double)*(unint64_t *)&a3;
  CGContextConcatCTM(c, &transform);
  CGContextTranslateCTM(c, (double)-*((_DWORD *)this + 18), (double)-*((_DWORD *)this + 19));
  v5 = (_OWORD *)*((_QWORD *)this + 10);
  v6 = v5[1];
  v7 = v5[2];
  *(_OWORD *)&v8.a = *v5;
  *(_OWORD *)&v8.c = v6;
  *(_OWORD *)&v8.tx = v7;
  CGContextConcatCTM(c, &v8);
  if (CGShadingGetType())
  {
    CGContextSetCompositeOperation();
  }
  else
  {
    CGContextSetCompositeOperation();
    CGContextClear();
  }
  CGContextDrawShading(c, *((CGShadingRef *)this + 8));
}

void CA::CG::`anonymous namespace'::ShadingKey::~ShadingKey(CA::CG::_anonymous_namespace_::ShadingKey *this)
{
  malloc_zone_t *malloc_zone;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

BOOL CA::CG::`anonymous namespace'::ShadingKey::equal(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  double v5;
  double v6;

  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)
    || *(double *)(a1 + 24) != *(double *)(a2 + 24))
  {
    return 0;
  }
  v3 = 0;
  v4 = 5;
  while (v3 != 5)
  {
    v5 = *(double *)(a1 + 32 + 8 * v3);
    v6 = *(double *)(a2 + 32 + 8 * v3++);
    if (v5 != v6)
    {
      v4 = v3 - 1;
      return v4 > 4;
    }
  }
  return v4 > 4;
}

__n128 CA::CG::`anonymous namespace'::ShadingKey::copy(CA::CG::_anonymous_namespace_::ShadingKey *this)
{
  malloc_zone_t *malloc_zone;
  CA::CG::_anonymous_namespace_::ShadingKey *v3;
  __n128 result;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v3 = (CA::CG::_anonymous_namespace_::ShadingKey *)malloc_type_zone_malloc(malloc_zone, 0x48uLL, 0x8BB15036uLL);
  if (v3)
  {
    *(_QWORD *)v3 = off_1E15919C0;
    result.n128_u64[0] = *((_QWORD *)this + 1);
    *((_QWORD *)v3 + 1) = result.n128_u64[0];
    *((_DWORD *)v3 + 4) = *((_DWORD *)this + 4);
    if (v3 != this)
    {
      *(_OWORD *)((char *)v3 + 24) = *(_OWORD *)((char *)this + 24);
      *(_OWORD *)((char *)v3 + 40) = *(_OWORD *)((char *)this + 40);
      result = *(__n128 *)((char *)this + 56);
      *(__n128 *)((char *)v3 + 56) = result;
    }
  }
  return result;
}

void CA::CG::`anonymous namespace'::ConicShadingDelegate::~ConicShadingDelegate(CA::CG::_anonymous_namespace_::ConicShadingDelegate *this)
{
  JUMPOUT(0x186DBD990);
}

uint64_t CA::CG::`anonymous namespace'::ShadingDelegate::read(uint64_t this, int a2, const CA::Bounds *a3, unsigned __int8 *a4)
{
  BOOL v4;
  BOOL v5;

  if (a2 == 13 || a2 == 11)
  {
    if (*(_DWORD *)a3)
      v4 = 0;
    else
      v4 = *((_DWORD *)a3 + 1) == 0;
    v5 = v4 && *((_DWORD *)a3 + 3) == 1;
    if (v5 && *((_DWORD *)a3 + 2) == *(_DWORD *)(this + 56))
      return (***(uint64_t (****)(_QWORD, _QWORD, _QWORD, unsigned __int8 *))(this + 32))(*(_QWORD *)(this + 32), *(_QWORD *)(this + 8), *(_QWORD *)(this + 40), a4);
  }
  return this;
}

uint64_t CA::CG::`anonymous namespace'::ConicShadingDelegate::quad(CA::CG::_anonymous_namespace_::ConicShadingDelegate *this, const CA::Bounds *a2, float *a3)
{
  int32x2_t *v5;
  uint64_t result;
  const double *v7;
  int32x2_t *v8;
  int32x2_t *v9;
  uint32x2_t v10;
  int32x2_t v11;
  uint32x2_t v12;
  int32x2_t v13;
  int32x2_t v14;
  uint32x2_t v15;
  int64x2_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  const double *v21;
  const double *v22;
  float v23;
  __float2 v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  int32x4_t v51;
  int64x2_t v52;
  int32x4_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  int32x2_t v58;
  int32x2_t v59;
  _QWORD v60[3];
  __int128 v61;
  __int128 v62;
  float v63[4];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v5 = (int32x2_t *)*((_QWORD *)this + 2);
  v58 = 0;
  v59 = 0;
  result = CA::Shape::get_bounds(*(_QWORD *)(*(_QWORD *)&v5[29] + 8), (int *)&v58);
  v8 = (int32x2_t *)v5[31];
  if (v8)
    v9 = v8 + 4;
  else
    v9 = v5 + 23;
  v10 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v59);
  if ((vpmax_u32(v10, v10).u32[0] & 0x80000000) == 0)
  {
    v11 = v9[1];
    v12 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v11);
    if ((vpmax_u32(v12, v12).u32[0] & 0x80000000) == 0)
    {
      v13 = vmax_s32(v58, *v9);
      v14 = vmin_s32(vadd_s32(v58, v59), vadd_s32(*v9, v11));
      v15 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, vsub_s32(v14, v13));
      if ((vpmax_u32(v15, v15).u32[0] & 0x80000000) == 0)
      {
        v16.i64[0] = v13.i32[0];
        v16.i64[1] = v13.i32[1];
        v17 = v14.i32[0];
        v49 = (double)v14.i32[0];
        v18 = v13.i32[1];
        v19 = v14.i32[1];
        *(double *)&v50 = (double)v14.i32[1];
        v52 = (int64x2_t)vcvtq_f64_s64(v16);
        v20 = v13.i32[0];
        v56 = 0u;
        v57 = 0u;
        v55 = 0u;
        CA::Mat2Impl::mat2_invert((CA::Mat2Impl *)&v55, *((double **)this + 3), v7);
        v44 = *((_QWORD *)&v57 + 1);
        v43 = v57;
        v48 = *((double *)&v56 + 1);
        v46 = *(double *)&v56;
        v47 = *((double *)&v55 + 1);
        v45 = *(double *)&v55;
        v23 = *((double *)this + 10);
        v24 = __sincosf_stret(v23);
        v25 = (float64x2_t)vdupq_lane_s64(v43, 0);
        v26 = (float64x2_t)vdupq_lane_s64(v44, 0);
        v22 = (const double *)((char *)this + 64);
        v27 = vld1q_dup_f64(v22);
        v21 = (const double *)((char *)this + 72);
        v28 = vld1q_dup_f64(v21);
        *(_QWORD *)&v29.f64[0] = v52.i64[0];
        v30.f64[0] = v49;
        v29.f64[1] = v49;
        *(_QWORD *)&v30.f64[1] = v52.i64[0];
        v31 = v30;
        v32 = (float64x2_t)vdupq_lane_s64(v50, 0);
        v33 = (float64x2_t)vdupq_laneq_s64(v52, 1);
        v34 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(v27, vmlaq_n_f64(vmlaq_n_f64(v25, v29, v45), v33, v46))), vsubq_f64(v27, vmlaq_n_f64(vmlaq_n_f64(v25, v31, v45), v32, v46)));
        v35 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(v26, v29, v47), v33, v48), v28)), vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(v26, v31, v47), v32, v48), v28));
        v36 = (int32x4_t)vmlaq_n_f32(vnegq_f32(vmulq_n_f32(v35, v24.__sinval)), v34, v24.__cosval);
        v37 = (int32x4_t)vmlaq_n_f32(vmulq_n_f32(v34, v24.__sinval), v35, v24.__cosval);
        v51 = vzip1q_s32(v36, v37);
        v53 = vzip2q_s32(v36, v37);
        v38 = a3[1];
        v36.i32[0] = (__int32)a3[2];
        v35.f32[0] = a3[3];
        v34.f32[0] = (float)((float)(*(float *)v36.i32 - *a3) * 0.5) / (float)*((int *)this + 14);
        *(float *)v37.i32 = v34.f32[0] + *a3;
        *a3 = *(float *)v37.i32;
        *(float *)v36.i32 = *(float *)v36.i32 - v34.f32[0];
        a3[2] = *(float *)v36.i32;
        v63[0] = *(float *)v36.i32 - *(float *)v37.i32;
        v63[1] = *(float *)v37.i32;
        v63[2] = (float)(v35.f32[0] + v38) * 0.5;
        v63[3] = *(float *)v36.i32;
        (*(void (**)(int32x2_t *, _QWORD, uint64_t, uint64_t, float *))(*(_QWORD *)v5 + 1000))(v5, 0, 4, 1, v63);
        v54 = 0u;
        v62 = 0u;
        v39 = *(_QWORD *)(*(_QWORD *)&v5[29] + 8);
        v60[0] = v5;
        v60[1] = v39;
        v61 = 0u;
        v60[2] = 0;
        WORD4(v61) = 256;
        CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v60);
        while (1)
        {
          result = CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v60, (int32x2_t *)&v54);
          if (!(_DWORD)result)
            break;
          CA::OGL::Context::array_rect(v5, (float)v20, (float)v18, (float)v17, (float)v19);
          v40 = *(_QWORD *)&v5[15] + 48 * *(_QWORD *)&v5[16];
          *(_QWORD *)(v40 - 176) = v51.i64[0];
          *(_QWORD *)(v40 - 128) = v51.i64[1];
          *(_QWORD *)(v40 - 80) = v53.i64[0];
          *(_QWORD *)(v40 - 32) = v53.i64[1];
          v41 = *(_QWORD *)(*(_QWORD *)&v5[2] + 8);
          v42 = *(_QWORD *)&v5[15] + 48 * *(_QWORD *)&v5[16];
          *(_QWORD *)(v42 - 160) = v41;
          *(_QWORD *)(v42 - 112) = v41;
          *(_QWORD *)(v42 - 64) = v41;
          *(_QWORD *)(v42 - 16) = v41;
        }
      }
    }
  }
  return result;
}

void CA::CG::`anonymous namespace'::RadialShadingDelegate::~RadialShadingDelegate(CA::CG::_anonymous_namespace_::RadialShadingDelegate *this)
{
  JUMPOUT(0x186DBD990);
}

uint64_t CA::CG::`anonymous namespace'::RadialShadingDelegate::quad(CA::CG::_anonymous_namespace_::RadialShadingDelegate *this, const CA::Bounds *a2, float *a3)
{
  int32x2_t *v5;
  uint64_t result;
  const double *v7;
  int32x2_t *v8;
  int32x2_t *v9;
  uint32x2_t v10;
  int32x2_t v11;
  uint32x2_t v12;
  int32x2_t v13;
  int32x2_t v14;
  uint32x2_t v15;
  double v16;
  double v17;
  double v18;
  int64x2_t v19;
  int v20;
  int v21;
  const double *v22;
  const double *v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  int32x2_t v37;
  int32x2_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float64x2_t *v43;
  int32x4_t v44;
  int32x4_t v45;
  int v46;
  int v47;
  float v48;
  float v49;
  int32x4_t v50;
  int32x4_t v51;
  float64x2_t v52;
  double v53;
  double v54;
  unsigned int v55;
  float v56;
  unsigned int v57;
  unsigned int v58;
  double v59;
  BOOL v60;
  double v61;
  float v62;
  int32x2_t v63;
  float v64;
  float v65;
  float32x2_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float64x2_t v70;
  int64x2_t v71;
  float64x2_t v72;
  double v73;
  int32x2_t v74;
  uint64_t v75;
  int32x2_t v76;
  int32x4_t v77;
  int32x2_t v78;
  int32x4_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  int32x2_t v83;
  int32x2_t v84;
  unint64_t v85;
  float32x2_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  float v91;
  float v92;
  float v93;
  float v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v5 = (int32x2_t *)*((_QWORD *)this + 2);
  v83 = 0;
  v84 = 0;
  result = CA::Shape::get_bounds(*(_QWORD *)(*(_QWORD *)&v5[29] + 8), (int *)&v83);
  v8 = (int32x2_t *)v5[31];
  if (v8)
    v9 = v8 + 4;
  else
    v9 = v5 + 23;
  v10 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v84);
  if ((vpmax_u32(v10, v10).u32[0] & 0x80000000) == 0)
  {
    v11 = v9[1];
    v12 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v11);
    if ((vpmax_u32(v12, v12).u32[0] & 0x80000000) == 0)
    {
      v13 = vmax_s32(v83, *v9);
      v14 = vmin_s32(vadd_s32(v83, v84), vadd_s32(*v9, v11));
      v15 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, vsub_s32(v14, v13));
      if ((vpmax_u32(v15, v15).u32[0] & 0x80000000) == 0)
      {
        v16 = *((double *)this + 12);
        v17 = *((double *)this + 13);
        if (v16 - v17 >= 0.0)
          v18 = v16 - v17;
        else
          v18 = -(v16 - v17);
        v19.i64[0] = v13.i32[0];
        v19.i64[1] = v13.i32[1];
        v20 = v14.i32[0];
        v21 = v14.i32[1];
        *(double *)&v75 = (double)v14.i32[1];
        v78 = v13;
        v71 = (int64x2_t)vcvtq_f64_s64(v19);
        v73 = (double)v14.i32[0];
        v81 = 0u;
        v82 = 0u;
        v80 = 0u;
        CA::Mat2Impl::mat2_invert((CA::Mat2Impl *)&v80, *((double **)this + 3), v7);
        v22 = (const double *)((char *)this + 64);
        v23 = (const double *)((char *)this + 72);
        v24 = (float64x2_t)vdupq_lane_s64(v82, 0);
        v25 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v82 + 1), 0);
        v26 = vld1q_dup_f64(v22);
        v27 = vld1q_dup_f64(v23);
        v28.f64[0] = v73;
        *(_QWORD *)&v29.f64[0] = v71.i64[0];
        v29.f64[1] = v73;
        *(_QWORD *)&v28.f64[1] = v71.i64[0];
        v30 = v28;
        v31 = (float64x2_t)vdupq_lane_s64(v75, 0);
        v32 = (float64x2_t)vdupq_laneq_s64(v71, 1);
        v33 = vmlaq_n_f64(vmlaq_n_f64(v24, v29, *(double *)&v80), v32, *(double *)&v81);
        v34 = vmlaq_n_f64(vmlaq_n_f64(v25, v29, *((double *)&v80 + 1)), v32, *((double *)&v81 + 1));
        v35 = vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(v24, v30, *(double *)&v80), v31, *(double *)&v81), v26);
        v36 = vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(v25, v30, *((double *)&v80 + 1)), v31, *((double *)&v81 + 1)), v27);
        v37 = (int32x2_t)vcvt_f32_f64(vsubq_f64(v33, v26));
        v38 = (int32x2_t)vcvt_f32_f64(vsubq_f64(v34, v27));
        if (v18 < 0.000001)
          v17 = v17 + 0.000001;
        v39 = a3[2];
        v40 = (float)((float)(v39 - *a3) * 0.5) / (float)*((int *)this + 14);
        v41 = v40 + *a3;
        *a3 = v41;
        v42 = v39 - v40;
        a3[2] = v42;
        v95 = 0;
        v96 = 0;
        v43 = (float64x2_t *)*((_QWORD *)this + 6);
        if (v43)
        {
          v74 = v38;
          v76 = v37;
          v70 = v36;
          v72 = v35;
          CA::OGL::Context::device_float_color((CA::OGL::Context *)v5, (float *)&v95, *((CGColorSpaceRef *)this + 5), v43, v42);
          v36 = v70;
          v35 = v72;
          v38 = v74;
          v37 = v76;
          v42 = a3[2];
          v41 = *a3;
        }
        else
        {
          v95 = 0;
          v96 = 0;
        }
        v44 = (int32x4_t)vcvt_hight_f32_f64(v37, v35);
        v45 = (int32x4_t)vcvt_hight_f32_f64(v38, v36);
        v46 = v78.i32[0];
        v47 = v78.i32[1];
        v48 = v42 - v41;
        v91 = v42 - v41;
        v92 = v41;
        v93 = (float)(a3[3] + a3[1]) * 0.5;
        v49 = 1.0 / (v17 - v16);
        if (*((_BYTE *)this + 114))
        {
          v50 = (int32x4_t)vmulq_n_f32((float32x4_t)v44, v49);
          v51 = (int32x4_t)vmulq_n_f32((float32x4_t)v45, v49);
          v77 = vzip1q_s32(v50, v51);
          v79 = vzip2q_s32(v50, v51);
          v52 = vmulq_n_f64(vsubq_f64(*((float64x2_t *)this + 5), *((float64x2_t *)this + 4)), v49);
          v53 = vaddvq_f64(vmulq_f64(v52, v52));
          if (v53 < 0.00000001)
            v53 = 0.00000001;
          v54 = sqrt(v53);
          v86 = vcvt_f32_f64(vdivq_f64(v52, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v54, 0)));
          v56 = 1.0;
          if (v49 < 0.0)
            v56 = -1.0;
          *(float *)&v55 = v16 * v49;
          *(_QWORD *)&v90 = __PAIR64__(LODWORD(v56), v55);
          *(float *)&v57 = v54;
          *(float *)&v58 = 1.0 / (v53 + -1.0);
          *((_QWORD *)&v90 + 1) = __PAIR64__(v58, v57);
          v59 = 1.0 - v53;
          if (1.0 - v53 < 0.0)
            v59 = -(1.0 - v53);
          v60 = v59 < 0.00001;
          v61 = 0.0;
          if (v60)
            v61 = 1.0;
          v62 = v61;
          v94 = v62;
          (*(void (**)(int32x2_t *, uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)v5 + 1000))(v5, 3, 4, 1, &v90);
          v63.i32[0] = *((unsigned __int8 *)this + 112);
          v63.i32[1] = *((unsigned __int8 *)this + 113);
          v85 = (unint64_t)vbsl_s8((int8x8_t)vceqz_s32(v63), (int8x8_t)0x3F80000000000000, (int8x8_t)0x49742400C9742400);
          (*(void (**)(int32x2_t *, _QWORD, uint64_t, uint64_t, unint64_t *))(*(_QWORD *)v5 + 1000))(v5, 0, 4, 1, &v85);
        }
        else
        {
          v77 = vzip1q_s32(v44, v45);
          v79 = vzip2q_s32(v44, v45);
          v64 = v48 * v49;
          v65 = v41 - v16 * (float)(v48 * v49);
          v91 = v64;
          v92 = v65;
          v94 = v42;
          if (*((_BYTE *)this + 112))
            v41 = -1000000.0;
          if (*((_BYTE *)this + 113))
            v42 = 1000000.0;
          v85 = __PAIR64__(LODWORD(v42), LODWORD(v41));
          (*(void (**)(int32x2_t *, _QWORD, uint64_t, uint64_t, unint64_t *))(*(_QWORD *)v5 + 1000))(v5, 0, 2, 1, &v85);
        }
        (*(void (**)(int32x2_t *, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v5 + 1000))(v5, 1, 4, 1, &v95);
        (*(void (**)(int32x2_t *, uint64_t, uint64_t, uint64_t, float *))(*(_QWORD *)v5 + 1000))(v5, 2, 4, 1, &v91);
        v90 = 0u;
        v89 = 0u;
        v66 = *(float32x2_t *)(*(_QWORD *)&v5[29] + 8);
        v85 = (unint64_t)v5;
        v86 = v66;
        v88 = 0u;
        v87 = 0;
        WORD4(v88) = 256;
        CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v85);
        while (1)
        {
          result = CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v85, (int32x2_t *)&v90);
          if (!(_DWORD)result)
            break;
          CA::OGL::Context::array_rect(v5, (float)v46, (float)v47, (float)v20, (float)v21);
          v67 = *(_QWORD *)&v5[15] + 48 * *(_QWORD *)&v5[16];
          *(_QWORD *)(v67 - 176) = v77.i64[0];
          *(_QWORD *)(v67 - 128) = v77.i64[1];
          *(_QWORD *)(v67 - 80) = v79.i64[0];
          *(_QWORD *)(v67 - 32) = v79.i64[1];
          v68 = *(_QWORD *)(*(_QWORD *)&v5[2] + 8);
          v69 = *(_QWORD *)&v5[15] + 48 * *(_QWORD *)&v5[16];
          *(_QWORD *)(v69 - 160) = v68;
          *(_QWORD *)(v69 - 112) = v68;
          *(_QWORD *)(v69 - 64) = v68;
          *(_QWORD *)(v69 - 16) = v68;
        }
      }
    }
  }
  return result;
}

void CA::CG::`anonymous namespace'::AxialShadingDelegate::~AxialShadingDelegate(CA::CG::_anonymous_namespace_::AxialShadingDelegate *this)
{
  JUMPOUT(0x186DBD990);
}

uint64_t CA::CG::`anonymous namespace'::AxialShadingDelegate::quad(CA::CG::_anonymous_namespace_::AxialShadingDelegate *this, const CA::Bounds *a2, float *a3)
{
  int32x2_t *v5;
  uint64_t result;
  double *v7;
  int32x2_t *v8;
  int32x2_t *v9;
  uint32x2_t v10;
  int32x2_t v11;
  uint32x2_t v12;
  int32x2_t v13;
  int32x2_t v14;
  uint32x2_t v15;
  int32x2_t v16;
  int v17;
  int v18;
  __int32 v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  float v30;
  float v31;
  float v32;
  float v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  int32x2_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float64x2_t *v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  int8x16_t v63;
  unint64_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int32x4_t v67;
  uint32x2_t v68;
  int32x2_t v69;
  uint32x2_t v70;
  int32x2_t v71;
  int32x2_t v72;
  int32x2_t v73;
  uint32x2_t v74;
  float v75;
  int32x2_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  int32x2_t v80;
  int32x2_t v81;
  _QWORD v82[7];
  __int128 v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v5 = (int32x2_t *)*((_QWORD *)this + 2);
  v80 = 0;
  v81 = 0;
  result = CA::Shape::get_bounds(*(_QWORD *)(*(_QWORD *)&v5[29] + 8), (int *)&v80);
  v8 = (int32x2_t *)v5[31];
  if (v8)
    v9 = v8 + 4;
  else
    v9 = v5 + 23;
  v10 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v81);
  if ((vpmax_u32(v10, v10).u32[0] & 0x80000000) == 0)
  {
    v11 = v9[1];
    v12 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v11);
    if ((vpmax_u32(v12, v12).u32[0] & 0x80000000) == 0)
    {
      v13 = vmax_s32(v80, *v9);
      v14 = vsub_s32(vmin_s32(vadd_s32(v80, v81), vadd_s32(*v9, v11)), v13);
      v15 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v14);
      if ((vpmax_u32(v15, v15).u32[0] & 0x80000000) == 0)
      {
        v16 = v14;
        v17 = v13.i32[0];
        v18 = v13.i32[1];
        v19 = v14.i32[1];
        if (*((_BYTE *)this + 128))
        {
          v20 = (double *)*((_QWORD *)this + 3);
        }
        else
        {
          v60 = *((double *)this + 12);
          v59 = *((double *)this + 13);
          *(double *)v82 = v60;
          *(double *)&v82[1] = v59;
          v62 = *((double *)this + 14);
          v61 = *((double *)this + 15);
          *(double *)&v82[2] = v62;
          *(double *)&v82[3] = v61;
          if (v62 < 0.0)
          {
            *(double *)v82 = v62 + v60;
            *(double *)&v82[2] = -v62;
          }
          v76 = v13;
          if (v61 < 0.0)
          {
            *(double *)&v82[1] = v61 + v59;
            *(double *)&v82[3] = -v61;
          }
          v20 = (double *)*((_QWORD *)this + 3);
          CA::Mat2Impl::mat2_apply_to_rect((uint64_t)v20, (double *)v82, v7);
          v63 = (int8x16_t)vceqzq_f64(*(float64x2_t *)&v82[2]);
          v64 = vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v63, 1), v63).u64[0];
          v65 = 0uLL;
          if ((v64 & 0x8000000000000000) == 0)
          {
            v66 = vorrq_s8((int8x16_t)vcltzq_f64(*(float64x2_t *)&v82[2]), (int8x16_t)vcgezq_f64(*(float64x2_t *)&v82[2]));
            if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v66), 1), v66).u64[0] & 0x8000000000000000) == 0)
            {
              v67 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(*(float64x2_t *)v82, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
              v65 = (int8x16_t)vuzp1q_s32(v67, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(*(float64x2_t *)v82, *(float64x2_t *)&v82[2]), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v67));
            }
          }
          v68 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v16);
          if ((vpmax_u32(v68, v68).u32[0] & 0x80000000) == 0)
          {
            v69 = (int32x2_t)vextq_s8(v65, v65, 8uLL).u64[0];
            v70 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v69);
            if ((vpmax_u32(v70, v70).u32[0] & 0x80000000) != 0
              || (v71 = vadd_s32(*(int32x2_t *)v65.i8, v69),
                  v72 = vmax_s32(v76, *(int32x2_t *)v65.i8),
                  v73 = vsub_s32(vmin_s32(vadd_s32(v76, v16), v71), v72),
                  v74 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v73),
                  (vpmax_u32(v74, v74).u32[0] & 0x80000000) != 0))
            {
              v19 = 0;
              v16.i32[0] = 0;
            }
            else
            {
              v17 = v72.i32[0];
              v18 = v72.i32[1];
              v16.i32[0] = v73.i32[0];
              v19 = v73.i32[1];
            }
          }
        }
        v21 = (double)v18;
        v22 = (double)(v16.i32[0] + v17);
        v23 = (double)(v19 + v18);
        v78 = 0u;
        v79 = 0u;
        v77 = 0u;
        CA::Mat2Impl::mat2_invert((CA::Mat2Impl *)&v77, v20, v7);
        v24 = *(double *)&v78 * v23;
        v25 = *((double *)&v78 + 1) * v23;
        v26 = *((double *)this + 8);
        v27 = *((double *)this + 9);
        v28 = *((double *)this + 10) - v26;
        v29 = *((double *)this + 11) - v27;
        v30 = *a3;
        v31 = a3[2];
        v32 = (float)(v31 - *a3) / (v28 * v28 + v29 * v29);
        v33 = a3[3] + a3[1];
        v34 = *(double *)&v79 + *(double *)&v77 * (double)v17;
        v35 = *((double *)&v79 + 1) + *((double *)&v77 + 1) * (double)v17;
        v36 = v32;
        v37 = *a3;
        v38 = v37 + (v28 * (v34 + *(double *)&v78 * v21 - v26) + v29 * (v35 + *((double *)&v78 + 1) * v21 - v27)) * v36;
        v39 = *(double *)&v79 + *(double *)&v77 * v22;
        v40 = *((double *)&v79 + 1) + *((double *)&v77 + 1) * v22;
        v41 = v37 + (v28 * (v39 + *(double *)&v78 * v21 - v26) + v29 * (v40 + *((double *)&v78 + 1) * v21 - v27)) * v36;
        v42 = v37 + (v28 * (v39 + v24 - v26) + v29 * (v40 + v25 - v27)) * v36;
        v43 = v37 + (v28 * (v34 + v24 - v26) + v29 * (v35 + v25 - v27)) * v36;
        v44 = v5[2];
        if (*(_BYTE *)(*(_QWORD *)&v44 + 16) == 43)
        {
          *(_OWORD *)v82 = 0uLL;
          v45 = -1000000.0;
          if (!*((_BYTE *)this + 129))
            v45 = v30;
          v46 = v30 + v31;
          if (*((_BYTE *)this + 130))
            v46 = 1000000.0;
          v47 = *(float *)(*(_QWORD *)&v44 + 96);
          v48 = *(float *)(*(_QWORD *)&v44 + 104);
          v49 = v48 + (float)(v46 * v47);
          *(float *)&v83 = v48 + (float)(v47 * v45);
          *((float *)&v83 + 1) = v49;
          v50 = (float64x2_t *)*((_QWORD *)this + 6);
          if (v50)
            CA::OGL::Context::device_float_color((CA::OGL::Context *)v5, (float *)v82, *((CGColorSpaceRef *)this + 5), v50, v49);
          (*(void (**)(int32x2_t *, _QWORD, uint64_t, uint64_t, __int128 *))(*(_QWORD *)v5 + 1000))(v5, 0, 2, 1, &v83);
          (*(void (**)(int32x2_t *, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v5 + 1000))(v5, 1, 4, 1, v82);
        }
        v51 = v33 * 0.5;
        v52 = v38;
        v75 = v52;
        v83 = 0u;
        v56 = *(_QWORD *)(*(_QWORD *)&v5[29] + 8);
        v82[0] = v5;
        v82[1] = v56;
        memset(&v82[2], 0, 40);
        LOWORD(v82[4]) = 256;
        CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v82);
        while (1)
        {
          result = CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v82, (int32x2_t *)&v83);
          if (!(_DWORD)result)
            break;
          CA::OGL::Context::array_rect(v5, (float)v17, (float)v18, (float)(v16.i32[0] + v17), (float)(v19 + v18));
          v57 = *(_QWORD *)&v5[15] + 48 * *(_QWORD *)&v5[16];
          *(float *)(v57 - 176) = v75;
          *(float *)(v57 - 172) = v51;
          v53 = v41;
          *(float *)(v57 - 128) = v53;
          *(float *)(v57 - 124) = v51;
          v54 = v42;
          *(float *)(v57 - 80) = v54;
          *(float *)(v57 - 76) = v51;
          v55 = v43;
          *(float *)(v57 - 32) = v55;
          *(float *)(v57 - 28) = v51;
          v58 = *(_QWORD *)(*(_QWORD *)&v5[2] + 8);
          *(_QWORD *)(v57 - 160) = v58;
          *(_QWORD *)(v57 - 112) = v58;
          *(_QWORD *)(v57 - 64) = v58;
          *(_QWORD *)(v57 - 16) = v58;
        }
      }
    }
  }
  return result;
}

void CA::CG::`anonymous namespace'::FunctionColormapGenerator::generate(CA::CG::_anonymous_namespace_::FunctionColormapGenerator *this, CA::CG::Renderer *a2, CGColorSpace *a3, unsigned __int8 *a4, int a5, char a6)
{
  uint64_t v10;
  uint64_t Domain;
  double v12;
  int v13;
  int v14;
  uint64_t v15;
  float32x4_t v16;
  uint64_t v17;
  __int128 v18;
  _BYTE v19[32];
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v18 = 0u;
  v21 = 0u;
  v20 = 0u;
  *(_OWORD *)&v19[16] = 0u;
  *(_OWORD *)v19 = 0u;
  v10 = *((_QWORD *)this + 1);
  v17 = *((_QWORD *)a2 + 1);
  LOBYTE(v18) = (*((_BYTE *)a2 + 136) & 0x40) != 0;
  *((_QWORD *)&v18 + 1) = v10;
  *(_QWORD *)v19 = CGFunctionGetRangeDimension();
  *(_OWORD *)&v19[8] = xmmword_18474E8A0;
  *(_QWORD *)&v19[24] = a3;
  LODWORD(v20) = CGColorSpaceGetModel(a3);
  *((_QWORD *)&v20 + 1) = a4;
  LODWORD(v21) = a5;
  BYTE4(v21) = a6;
  DWORD2(v21) = 0;
  Domain = CGFunctionGetDomain();
  if (Domain)
  {
    v12 = *(double *)Domain;
    *(double *)&v19[8] = (*(double *)(Domain + 8) - *(double *)Domain) * 0.00048828125;
    *(double *)&v19[16] = v12;
  }
  if ((int)v21 >= 2)
  {
    v13 = 0;
    v14 = v21 - 1;
    do
    {
      if (v13 + 19 >= v14)
        v15 = v14;
      else
        v15 = (v13 + 19);
      if (BYTE4(v21))
      else
      v14 = v21 - 1;
      v13 = v15;
    }
    while ((int)v15 < (int)v21 - 1);
  }
}

uint64_t CA::CG::`anonymous namespace'::FunctionSampler::sample(CA::CG::_anonymous_namespace_::FunctionSampler *this, int a2)
{
  double v4;
  double v5;
  int v6;
  double v7;
  float v8;
  unint64_t v9;
  uint64_t v10;
  CA::OGL::Context *v11;
  CGColorSpace *v12;
  uint64_t result;
  _WORD *v22;
  _WORD v27[4];
  double v28;
  float64x2_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = *((double *)this + 4);
  v5 = *((double *)this + 5);
  v28 = v5 + v4 * ((double)a2 + 0.5);
  if (!*((_BYTE *)this + 8))
  {
    if (a2)
    {
      v6 = *((_DWORD *)this + 18);
      if (v6 - 1 != a2)
        goto LABEL_7;
      v7 = (double)v6;
    }
    else
    {
      v7 = 0.0;
    }
    v28 = v5 + v7 * v4;
  }
LABEL_7:
  memset(&v29, 0, 32);
  CGFunctionEvaluate();
  v9 = *((_QWORD *)this + 3);
  if (*((_DWORD *)this + 14) == 1)
  {
    if (v9 >= 4)
      goto LABEL_13;
    v10 = 3;
  }
  else
  {
    if (v9 > 1)
      goto LABEL_13;
    v10 = 1;
  }
  v29.f64[v10] = 1.0;
LABEL_13:
  v11 = *(CA::OGL::Context **)this;
  v12 = (CGColorSpace *)*((_QWORD *)this + 6);
  if (*((_BYTE *)this + 76))
  {
    v30 = 0;
    v31 = 0;
    result = CA::OGL::Context::device_float_color(v11, (float *)&v30, v12, &v29, v8);
    _S2 = HIDWORD(v31);
    _S0 = *((float *)&v31 + 1) * *(float *)&v30;
    _S1 = *((float *)&v30 + 1) * *((float *)&v31 + 1);
    _S3 = *(float *)&v31 * *((float *)&v31 + 1);
    __asm
    {
      FCVT            H0, S0
      FCVT            H1, S1
      FCVT            H3, S3
      FCVT            H2, S2
    }
    v22 = (_WORD *)(*((_QWORD *)this + 8) + 8 * a2);
    *v22 = LOWORD(_S0);
    v22[1] = LOWORD(_S1);
    v22[2] = LOWORD(_S3);
    v22[3] = _S2;
  }
  else
  {
    v30 = 0;
    v31 = 0;
    CA::OGL::Context::device_float_color(v11, (float *)&v30, v12, &v29, v8);
    _S2 = HIDWORD(v31);
    _S0 = *((float *)&v31 + 1) * *(float *)&v30;
    _S1 = *((float *)&v30 + 1) * *((float *)&v31 + 1);
    _S3 = *(float *)&v31 * *((float *)&v31 + 1);
    __asm { FCVT            H0, S0 }
    v27[0] = LOWORD(_S0);
    __asm { FCVT            H0, S1 }
    v27[1] = LOWORD(_S0);
    __asm { FCVT            H0, S3 }
    v27[2] = LOWORD(_S0);
    __asm { FCVT            H0, S2 }
    v27[3] = LOWORD(_S0);
    result = CA::OGL::ExtendedColor::word32((CA::OGL::ExtendedColor *)v27);
    *(_DWORD *)(*((_QWORD *)this + 8) + 4 * a2) = result;
  }
  ++*((_DWORD *)this + 20);
  return result;
}

float32_t CA::CG::`anonymous namespace'::FunctionSampler::bisect_fp16(CA::CG::_anonymous_namespace_::FunctionSampler *this, int a2, uint64_t a3, float32x4_t a4)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  CA::CG::_anonymous_namespace_::FunctionSampler *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float16x4_t v11;
  unint64_t v12;
  float16x4_t v13;
  int16x4_t v16;
  float16x4_t v17;
  float v18;
  float32x4_t v19;
  float32x2_t v30;
  float32x2_t v31;
  int8x8_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float32x4_t v36;
  float v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  float32x4_t v43;
  uint64_t v44;
  float v45;

  while (1)
  {
    v4 = a3 - a2;
    if ((int)a3 - a2 < 2)
      break;
    v5 = a3;
    v6 = a2;
    v7 = this;
    v8 = v4 >> 1;
    v9 = v8 + a2;
    v10 = *((_QWORD *)v7 + 8);
    v11 = *(float16x4_t *)(v10 + 8 * v6);
    v12 = *(_QWORD *)(v10 + 8 * v9);
    v13 = *(float16x4_t *)(v10 + 8 * (int)v5);
    _H2 = v12;
    _S3 = v12 >> 16;
    v16 = (int16x4_t)vmovn_s64((int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v12), (uint64x2_t)xmmword_18474E8B0));
    v17 = (float16x4_t)vuzp1_s16(v16, v16);
    v18 = 0.5;
    if ((_DWORD)v8 != (_DWORD)v5 - (_DWORD)v9)
      v18 = (float)(int)v8 / (float)(int)v4;
    v19 = vcvtq_f32_f16(v11);
    a4 = vcvtq_f32_f16(v13);
    _D5 = (int32x2_t)vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(v19, 1.0 - v18), a4, v18));
    __asm
    {
      FCVT            S2, H2
      FCVT            S6, H5
      FCVT            S3, H3
    }
    _H7 = _D5.i16[1];
    __asm { FCVT            S7, H7 }
    v30 = vabd_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v17), (float32x2_t)*(_OWORD *)&vcvtq_f32_f16((float16x4_t)vdup_lane_s32(_D5, 1)));
    v31 = (float32x2_t)vdup_lane_s32((int32x2_t)v30, 0);
    v31.i32[0] = vabds_f32(_S2, _S6);
    v30.i32[0] = vabds_f32(_S3, _S7);
    v32 = vbsl_s8((int8x8_t)vcgt_f32(v31, v30), (int8x8_t)v31, (int8x8_t)v30);
    if (*(float *)v32.i32 <= *(float *)&v32.i32[1])
      v32.i32[0] = v32.i32[1];
    if (*(float *)v32.i32 <= 0.031373)
    {
      if (*(_QWORD *)&v11 == v12)
      {
        if (v4 >= 4)
        {
          v33 = v6 + 1;
          do
            *(float16x4_t *)(v10 + 8 * v33++) = v11;
          while (v33 < v9);
        }
      }
      else
      {
        v11 = *(float16x4_t *)(v10 + 8 * v9);
        if (v4 >= 4)
        {
          v34 = 0;
          v35 = v6 + 1;
          v36 = vcvtq_f32_f16((float16x4_t)v12);
          do
          {
            v37 = (float)(v34 + 1) * (float)(1.0 / (float)(int)v8);
            *(float16x4_t *)(v10 + 8 * v35 + 8 * v34) = vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(v19, 1.0 - v37), v36, v37));
            v38 = v35 + ++v34;
          }
          while (v38 < v9);
          v11 = (float16x4_t)v12;
        }
      }
      v39 = v9 + 1;
      if (*(_QWORD *)&v11 == *(_QWORD *)&v13)
      {
        if (v39 < (int)v5)
        {
          v40 = (int)v5 - (uint64_t)v39;
          v41 = (unint64_t *)(v10 + 8 * v39);
          do
          {
            *v41++ = v12;
            --v40;
          }
          while (v40);
        }
      }
      else if (v39 < (int)v5)
      {
        v42 = 0;
        v43 = vcvtq_f32_f16((float16x4_t)v12);
        v44 = v10 + 8 * v39;
        do
        {
          v45 = (float)(v42 + 1) * (float)(1.0 / (float)(v5 - v9));
          *(float16x4_t *)(v44 + 8 * v42++) = vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(v43, 1.0 - v45), a4, v45));
        }
        while ((int)v5 - (uint64_t)v39 != v42);
      }
      return a4.f32[0];
    }
    this = v7;
    a2 = v9;
    a3 = v5;
  }
  return a4.f32[0];
}

uint64_t CA::CG::`anonymous namespace'::FunctionSampler::bisect(uint64_t this, signed int a2, signed int a3)
{
  unsigned int v3;
  signed int v5;
  CA::CG::_anonymous_namespace_::FunctionSampler *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t v10;
  int32x4_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  signed int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64x2_t v35;
  unint64_t v36;
  int32x4_t v37;
  int32x4_t v38;
  _DWORD *v39;
  int32x4_t v40;
  int8x16_t v41;
  float32x4_t v42;
  uint32x4_t v43;
  int32x2_t v44;
  int64x2_t v45;
  signed int v46;
  uint64_t v47;
  unsigned int *v48;
  unint64_t v49;
  uint64_t v50;
  uint64x2_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  unint64_t v57;
  int32x4_t v58;
  int32x4_t v59;
  float32x4_t v60;
  unsigned __int32 *v61;
  int32x4_t v62;
  int8x16_t v63;
  float32x4_t v64;
  uint32x4_t v65;
  int32x2_t v66;
  int64x2_t v67;

  v3 = a3 - a2;
  if (a3 - a2 >= 2)
  {
    v5 = a2;
    v6 = (CA::CG::_anonymous_namespace_::FunctionSampler *)this;
    v7 = a3;
    while (1)
    {
      v8 = v3 >> 1;
      v9 = v8 + v5;
      v12 = a3 - v9;
      if ((_DWORD)v8 == a3 - (_DWORD)v9)
        v13 = 128;
      else
        v13 = (int)(float)((float)((float)((float)(int)v8 * 256.0) / (float)(int)v3) + 0.5);
      v14 = *((_QWORD *)v6 + 8);
      v15 = *(_DWORD *)(v14 + 4 * v5);
      v16 = *(_DWORD *)(v14 + 4 * v9);
      v17 = *(_DWORD *)(v14 + 4 * v7);
      v18 = v15 & 0xFF00FF;
      this = (v15 >> 8) & 0xFF00FF;
      v19 = v17 & 0xFF00FF;
      v20 = (v17 >> 8) & 0xFF00FF;
      v21 = v18 + ((v13 * ((v17 & 0xFF00FF) - v18)) >> 8);
      v22 = v13 * (v20 - this) + ((_DWORD)this << 8);
      v23 = HIBYTE(v16) - HIBYTE(v22);
      v24 = BYTE2(v16) - BYTE2(v21);
      v25 = BYTE1(v16) - BYTE1(v22);
      v26 = v16 - v21;
      if (v23 < 0)
        v23 = -v23;
      if (v24 < 0)
        v24 = -v24;
      if ((v25 & 0x80000000) != 0)
        v25 = -v25;
      if (v26 < 0)
        v26 = -v26;
      if (v23 <= v24)
        v23 = v24;
      if (v25 <= v26)
        v25 = v26;
      if (v23 > v25)
        v25 = v23;
      if (v25 < 9)
        break;
      v3 = a3 - v9;
      v5 += v8;
      if (v12 < 2)
        return this;
    }
    v27 = v16 >> 8;
    if (v15 == v16)
    {
      if (v3 >= 4)
      {
        v28 = v5 + 1;
        do
          *(_DWORD *)(v14 + 4 * v28++) = v15;
        while (v28 < v9);
      }
    }
    else if (v3 >= 4)
    {
      v29 = 0;
      v30 = (_DWORD)this << 8;
      v31 = v5 + 1;
      this = (v27 & 0xFF00FF) - this;
      v32 = (v16 & 0xFF00FF) - v18;
      if (v9 <= v5 + 1 + 1)
        v33 = v31 + 1;
      else
        v33 = v8 + v5;
      v34 = v33 - v31;
      v35 = (uint64x2_t)vdupq_n_s64(v34 - 1);
      v36 = (v34 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v37 = vaddq_s32(vdupq_n_s32(v31), (int32x4_t)xmmword_18474E1B0);
      v38 = vdupq_n_s32(v5);
      v10.f32[0] = 256.0 / (float)(int)v8;
      v10 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0);
      v39 = (_DWORD *)(v14 + 4 * v31 + 8);
      v40.i64[0] = 0x400000004;
      v40.i64[1] = 0x400000004;
      do
      {
        v41 = (int8x16_t)vdupq_n_s64(v29);
        *(int32x2_t *)v11.i8 = vmovn_s64((int64x2_t)vcgeq_u64(v35, (uint64x2_t)vorrq_s8(v41, (int8x16_t)xmmword_18474E1C0)));
        v42.i64[0] = 0x3F0000003F000000;
        v42.i64[1] = 0x3F0000003F000000;
        v43 = vcvtq_u32_f32(vmlaq_f32(v42, vcvtq_f32_s32(vsubq_s32(v37, v38)), v10));
        if ((vmovn_s32(v11).u8[0] & 1) != 0)
          *(v39 - 2) = (v18 + ((v32 * v43.i32[0]) >> 8)) & 0xFF00FF | (v30 + this * v43.i32[0]) & 0xFF00FF00;
        v44 = (int32x2_t)vmovn_s32(v11);
        if ((v44.i8[2] & 1) != 0)
          *(v39 - 1) = (v18 + ((v32 * v43.i32[1]) >> 8)) & 0xFF00FF | (v30 + this * v43.i32[1]) & 0xFF00FF00;
        v45 = (int64x2_t)vcgeq_u64(v35, (uint64x2_t)vorrq_s8(v41, (int8x16_t)xmmword_18474E440));
        v11 = vmovn_hight_s64(v44, v45);
        if ((vmovn_s32(v11).i32[1] & 1) != 0)
          *v39 = (v18 + ((v32 * v43.i32[2]) >> 8)) & 0xFF00FF | (v30 + this * v43.i32[2]) & 0xFF00FF00;
        if ((vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v45, v45)).i8[6] & 1) != 0)
          v39[1] = (v18 + ((v32 * v43.i32[3]) >> 8)) & 0xFF00FF | (v30 + this * v43.i32[3]) & 0xFF00FF00;
        v29 += 4;
        v37 = vaddq_s32(v37, v40);
        v39 += 4;
      }
      while (v36 != v29);
    }
    v46 = v9 + 1;
    if (v16 == v17)
    {
      if (v46 < a3)
      {
        v47 = v7 - v46;
        v48 = (unsigned int *)(v14 + 4 * v46);
        do
        {
          *v48++ = v16;
          --v47;
        }
        while (v47);
      }
    }
    else if (v46 < a3)
    {
      v49 = 0;
      v50 = v7 - v46;
      v51 = (uint64x2_t)vdupq_n_s64(v50 - 1);
      v52 = v16 & 0xFF00FF;
      v53 = v27 & 0xFF00FF;
      v54 = v19 - v52;
      v55 = v20 - v53;
      v56 = v53 << 8;
      v57 = (v50 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v58 = vaddq_s32(vdupq_n_s32(v46), (int32x4_t)xmmword_18474E1B0);
      v59 = vdupq_n_s32(v9);
      v10.f32[0] = 256.0 / (float)v12;
      v60 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0);
      v61 = (unsigned __int32 *)(v14 + 4 * v46 + 8);
      v62.i64[0] = 0x400000004;
      v62.i64[1] = 0x400000004;
      do
      {
        v63 = (int8x16_t)vdupq_n_s64(v49);
        *(int32x2_t *)v11.i8 = vmovn_s64((int64x2_t)vcgeq_u64(v51, (uint64x2_t)vorrq_s8(v63, (int8x16_t)xmmword_18474E1C0)));
        v64.i64[0] = 0x3F0000003F000000;
        v64.i64[1] = 0x3F0000003F000000;
        v65 = vcvtq_u32_f32(vmlaq_f32(v64, vcvtq_f32_s32(vsubq_s32(v58, v59)), v60));
        if ((vmovn_s32(v11).u8[0] & 1) != 0)
          *(v61 - 2) = (v52 + ((v54 * v65.i32[0]) >> 8)) & 0xFF00FF | (v56 + v55 * v65.i32[0]) & 0xFF00FF00;
        v66 = (int32x2_t)vmovn_s32(v11);
        if ((v66.i8[2] & 1) != 0)
          *(v61 - 1) = (v52 + ((v54 * v65.i32[1]) >> 8)) & 0xFF00FF | (v56 + v55 * v65.i32[1]) & 0xFF00FF00;
        v67 = (int64x2_t)vcgeq_u64(v51, (uint64x2_t)vorrq_s8(v63, (int8x16_t)xmmword_18474E440));
        v11 = vmovn_hight_s64(v66, v67);
        if ((vmovn_s32(v11).i32[1] & 1) != 0)
          *v61 = (v52 + ((v54 * v65.i32[2]) >> 8)) & 0xFF00FF | (v56 + v55 * v65.i32[2]) & 0xFF00FF00;
        if ((vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v67, v67)).i8[6] & 1) != 0)
          v61[1] = (v52 + ((v54 * v65.i32[3]) >> 8)) & 0xFF00FF | (v56 + v55 * v65.i32[3]) & 0xFF00FF00;
        v49 += 4;
        v58 = vaddq_s32(v58, v62);
        v61 += 4;
      }
      while (v57 != v49);
    }
  }
  return this;
}

char *CA::CG::`anonymous namespace'::axial_clipping_planes(float64x2_t *this, CA::CG::Renderer *a2, const CGPoint *a3, const CGPoint *a4, int a5)
{
  int v6;
  uint64_t v7;
  __int128 v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  char v12;
  char v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  char v19;
  double v20;
  char v21;
  double *v22;
  double v23;
  double v24;
  uint64_t v25;
  char v26;
  double v27;
  char v28;
  char *v29;
  uint64_t v30;
  double v31;
  double v32;
  char v33;
  char v34;
  double *v35;
  double v36;
  double v37;
  int v38;
  uint64_t v39;
  char *v40;
  int v41;
  char v42;
  malloc_zone_t *malloc_zone;
  char *v44;
  int v45;
  float64x2_t *v46;
  float v47;
  _OWORD v49[3];
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v6 = (int)a4;
  v7 = 0;
  v52 = *MEMORY[0x1E0C80C00];
  v8 = (__int128)*a3;
  v50 = *(_OWORD *)a2;
  v51 = v8;
  v9 = this[2];
  v10 = this[3];
  v11 = this[4];
  v12 = 1;
  do
  {
    v13 = v12;
    *(&v50 + v7) = (__int128)vmlaq_n_f64(vmlaq_n_f64(v11, v9, *((double *)&v50 + 2 * v7)), v10, *((double *)&v50 + 2 * v7 + 1));
    v7 = 1;
    v12 = 0;
  }
  while ((v13 & 1) != 0);
  memset(v49, 0, sizeof(v49));
  v14 = *(double *)&v50;
  v15 = *(double *)&v51 - *(double *)&v50;
  if (*(double *)&v51 - *(double *)&v50 == 0.0)
  {
    v25 = 0;
    v18 = *((double *)&v50 + 1);
    v24 = *((double *)&v51 + 1) - *((double *)&v50 + 1);
    v26 = 1;
    v27 = -v15 / (*((double *)&v51 + 1) - *((double *)&v50 + 1));
    do
    {
      v28 = v26;
      v29 = (char *)v49 + 24 * v25;
      *(double *)v29 = v27;
      *((_QWORD *)v29 + 1) = 0xBFF0000000000000;
      *((double *)v29 + 2) = *((double *)&v50 + 2 * v25 + 1) - *((double *)&v50 + 2 * v25) * v27;
      v25 = 1;
      v26 = 0;
    }
    while ((v28 & 1) != 0);
  }
  else
  {
    v16 = 0;
    v17 = *((double *)&v51 + 1);
    v18 = *((double *)&v50 + 1);
    v19 = 1;
    v20 = (*((double *)&v50 + 1) - *((double *)&v51 + 1)) / v15;
    do
    {
      v21 = v19;
      v22 = (double *)v49 + 3 * v16;
      *v22 = -1.0;
      v23 = *((double *)&v50 + 2 * v16) - *((double *)&v50 + 2 * v16 + 1) * v20;
      v22[1] = v20;
      v22[2] = v23;
      v16 = 1;
      v19 = 0;
    }
    while ((v21 & 1) != 0);
    v24 = v17 - v18;
  }
  v30 = 0;
  v31 = v14 + v15 * 0.5;
  v32 = v18 + v24 * 0.5;
  v33 = 1;
  do
  {
    v34 = v33;
    v35 = (double *)v49 + 3 * v30;
    v36 = v35[1];
    v37 = v35[2];
    if (v37 + *v35 * v31 + v36 * v32 < 0.0)
    {
      *v35 = -*v35;
      v35[1] = -v36;
      v35[2] = -v37;
    }
    v33 = 0;
    v30 = 1;
  }
  while ((v34 & 1) != 0);
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 1;
  do
  {
    v42 = v41;
    if (((v38 | v6) & 1) == 0 || ((v41 | a5) & 1) == 0)
    {
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v44 = (char *)malloc_type_zone_malloc(malloc_zone, 0x20uLL, 0x8BB15036uLL);
      *(_QWORD *)v44 = v40;
      if (v40)
        v45 = *((_DWORD *)v40 + 2);
      else
        v45 = 0;
      *((_DWORD *)v44 + 2) = v45 + 1;
      v46 = (float64x2_t *)((char *)v49 + 24 * v39);
      *(float32x2_t *)(v44 + 12) = vcvt_f32_f64(*v46);
      *((_DWORD *)v44 + 5) = 0;
      v47 = v46[1].f64[0];
      *((float *)v44 + 6) = v47;
      v40 = v44;
    }
    v41 = 0;
    v38 = 1;
    v39 = 1;
  }
  while ((v42 & 1) != 0);
  return v40;
}

void CA::CG::DrawGradient::~DrawGradient(CA::CG::Renderer **this, const void *a2)
{
  *this = (CA::CG::Renderer *)off_1E1591710;
  CA::CG::Renderer::release_object(this[14], a2);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
}

{
  malloc_zone_t *malloc_zone;

  *this = (CA::CG::Renderer *)off_1E1591710;
  CA::CG::Renderer::release_object(this[14], a2);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::CG::DrawGradient::may_flush()
{
  return 1;
}

BOOL CA::CG::DrawGradient::shape_extent_contains(CA::CG::DrawGradient *this, CA::CG::Renderer *a2, const CA::Shape *a3)
{
  return (~*((_DWORD *)this + 25) & 0x3000000) == 0;
}

uint64_t CA::CG::DrawGradient::debug_color(CA::CG::DrawGradient *this)
{
  return 4002524128;
}

uint64_t CA::CG::DrawGradient::supports_complex_blend_modes(CA::CG::DrawGradient *this)
{
  return 0;
}

BOOL *CA::CG::DrawGradient::color_type(CA::CG::Renderer &)const::$_0::__invoke(BOOL *result, uint64_t a2)
{
  BOOL v3;

  v3 = *(double *)(a2 + 8) == 1.0 && *result;
  *result = v3;
  return result;
}

char *CA::CG::DrawLinearGradient::clipping_planes(CA::CG::DrawLinearGradient *this, float64x2_t *a2)
{
  unsigned int v2;

  v2 = *((_DWORD *)this + 25);
  if ((v2 & 0x4000000) != 0)
    return 0;
  else
}

void CA::CG::`anonymous namespace'::GradientStripeRenderer::draw(void)::$_0::__invoke(uint64_t a1, float64x2_t *a2, double a3)
{
  float32x4_t v5;
  double v6;
  double v7;
  double v8;
  double v15;
  int8x8_t v16;
  double v17;
  double v18;
  float32x4_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v19 = 0uLL;
  CA::OGL::Context::device_float_color(*(CA::OGL::Context **)a1, v19.f32, *(CGColorSpaceRef *)(a1 + 16), a2, *(float *)&a3);
  v16 = (int8x8_t)vcvt_f16_f32(v19);
  if (CGGradientUsesPremultipliedInterpolation())
  {
    v5 = vcvtq_f32_f16((float16x4_t)vdup_lane_s16((int16x4_t)v16, 3));
    LOWORD(v6) = vcvt_f16_f32(vmulq_f32(v5, vcvtq_f32_f16((float16x4_t)v16))).u16[0];
    *(_DWORD *)((char *)&v6 + 2) = vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16((float16x4_t)vext_s8(v16, *(int8x8_t *)v5.f32, 2uLL)), v5)).u32[0];
    HIWORD(v6) = v16.i16[3];
    v7 = v6;
  }
  else
  {
    v7 = *(double *)&v16;
  }
  v8 = COERCE_DOUBLE(vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16(*(float16x4_t *)(a1 + 136)), vcvtq_f32_f16(*(float16x4_t *)&v7))));
  if (*(_QWORD *)(a1 + 136) != 0x3C003C003C003C00)
    v7 = v8;
  _H0 = HIWORD(v7);
  __asm { FCVT            S0, H0 }
  if (_S0 != 1.0)
    *(_BYTE *)(a1 + 39) = 0;
  if (*(double *)(a1 + 88) * *(double *)(a1 + 88) + *(double *)(a1 + 96) * *(double *)(a1 + 96) == 0.0)
  {
    if (*(_BYTE *)(a1 + 36) && *(_BYTE *)(a1 + 37) && *(_BYTE *)(a1 + 38))
      goto LABEL_12;
  }
  else
  {
    v15 = *(double *)(a1 + 48);
    if (v15 >= 0.0)
    {
      if (*(double *)(a1 + 40) <= a3 && *(double *)(a1 + 56) <= v15)
      {
        if (*(_BYTE *)(a1 + 36))
        {
          if (!*(_BYTE *)(a1 + 37))
            goto LABEL_20;
          *(double *)(a1 + 64) = v7;
        }
        v18 = v7;
        v17 = v7;
        goto LABEL_19;
      }
    }
    else if (*(_BYTE *)(a1 + 36) && *(_BYTE *)(a1 + 37))
    {
LABEL_12:
      v18 = v7;
      v17 = v7;
LABEL_19:
      v7 = v17;
    }
  }
LABEL_20:
  *(double *)(a1 + 56) = a3;
  *(double *)(a1 + 64) = v7;
  *(_BYTE *)(a1 + 36) = 0;
}

float CA::CG::`anonymous namespace'::GradientStripeRenderer::draw_quad(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  float result;
  float v12;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_DWORD *)(a1 + 32);
  v4 = v2 + 48 * v3;
  v5 = v2 + 48 * (v3 + 1);
  v6 = v2 + 48 * (v3 + 2);
  *(_DWORD *)(a1 + 32) = v3 + 4;
  v7 = v2 + 48 * (v3 + 3);
  v8 = *a2;
  *(_QWORD *)(v7 + 32) = *a2;
  *(_QWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v5 + 32) = v8;
  *(_QWORD *)(v4 + 32) = v8;
  LODWORD(v8) = *(_DWORD *)(a1 + 144);
  v9 = *(_DWORD *)(a1 + 148);
  v10 = *(_DWORD *)(a1 + 156);
  result = (float)(*(_DWORD *)(a1 + 152) + v8);
  *(float *)v4 = result;
  *(float *)(v4 + 4) = (float)v9;
  *(_QWORD *)(v4 + 8) = 0x3F80000000000000;
  *(float *)v5 = (float)(int)v8;
  *(float *)(v5 + 4) = (float)v9;
  *(_QWORD *)(v5 + 8) = 0x3F80000000000000;
  v12 = (float)(v10 + v9);
  *(float *)v6 = result;
  *(float *)(v6 + 4) = v12;
  *(_QWORD *)(v6 + 8) = 0x3F80000000000000;
  *(float *)v7 = (float)(int)v8;
  *(float *)(v7 + 4) = v12;
  *(_QWORD *)(v7 + 8) = 0x3F80000000000000;
  return result;
}

void CA::CG::DrawRadialGradient::~DrawRadialGradient(CA::CG::Renderer **this, const void *a2)
{
  *this = (CA::CG::Renderer *)off_1E1591710;
  CA::CG::Renderer::release_object(this[14], a2);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
}

{
  malloc_zone_t *malloc_zone;

  *this = (CA::CG::Renderer *)off_1E1591710;
  CA::CG::Renderer::release_object(this[14], a2);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::CG::DrawRadialGradient::draw_color(CA::CG::DrawRadialGradient *this, CA::CG::Renderer *a2)
{
  _QWORD *v4;
  CGColorSpace *ColorSpace;
  uint64_t v6;
  int v7;
  char v9;
  char v10;
  CGGradient *v11;
  CA::CG *v12;
  int v13;
  int v14;
  __int128 v15;
  uint64_t Identifier;
  char v17;
  _QWORD v18[2];
  _QWORD v19[16];

  v19[15] = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)*((_QWORD *)a2 + 1);
  ColorSpace = (CGColorSpace *)CGGradientGetColorSpace();
  if (CGColorSpaceGetModel(ColorSpace) >= kCGColorSpaceModelCMYK)
    goto LABEL_18;
  v6 = v4[2];
  v7 = *(unsigned __int8 *)(v6 + 480);
  if (v7 == 12 || (v7 - 1) >= 0x19)
    goto LABEL_18;
  if (*((double *)this + 15) == *((double *)this + 17) && *((double *)this + 16) == *((double *)this + 18))
  {
    v10 = 0;
    v9 = 44;
  }
  else
  {
    v9 = 45;
    v10 = 1;
  }
  *(_BYTE *)(v6 + 16) = v9;
  if (((*(uint64_t (**)(_QWORD *))(*v4 + 984))(v4) & 1) == 0)
  {
    *(_BYTE *)(v4[2] + 16) = 0;
LABEL_18:
    CA::CG::DrawRadialGradient::draw_as_shading(this, a2);
    return;
  }
  {
    *(_BYTE *)(v4[2] + 481) |= 2u;
    *(_DWORD *)(v4[2] + 352) = 1065353216;
  }
  v12 = (CA::CG *)*((_QWORD *)this + 14);
  v18[0] = &off_1E1591B70;
  v18[1] = v12;
  v13 = CA::CG::gradient_pixel_size(v12, v11);
  memset(&v19[7], 0, 64);
  v14 = *((_DWORD *)this + 25);
  v19[2] = v4;
  v19[3] = (char *)a2 + 32;
  v19[4] = v18;
  v19[5] = ColorSpace;
  v19[6] = 0;
  LODWORD(v19[7]) = v13;
  v19[0] = &off_1E1591AB8;
  v19[1] = a2;
  v15 = *(_OWORD *)((char *)this + 136);
  *(_OWORD *)&v19[8] = *(_OWORD *)((char *)this + 120);
  *(_OWORD *)&v19[10] = v15;
  *(float64x2_t *)&v19[12] = vabsq_f64(*(float64x2_t *)((char *)this + 152));
  LOBYTE(v19[14]) = HIBYTE(v14) & 1;
  BYTE1(v19[14]) = (v14 & 0x2000000) != 0;
  BYTE2(v19[14]) = v10;
  Identifier = CGGradientGetIdentifier();
  *(_BYTE *)(v4[2] + 481) &= ~2u;
  *(_BYTE *)(v4[2] + 16) = 0;
  if ((v17 & 1) == 0)
    CA::CG::DrawRadialGradient::draw_as_shading(this, a2);
}

void CA::CG::DrawRadialGradient::draw_as_shading(CA::CG::DrawRadialGradient *this, CA::CG::Renderer *a2)
{
  CGColorSpace *ColorSpace;
  CGFunction *Function;
  CGShadingRef Radial;
  CGShading *v7;

  ColorSpace = (CGColorSpace *)CGGradientGetColorSpace();
  Function = (CGFunction *)CGGradientGetFunction();
  Radial = CGShadingCreateRadial(ColorSpace, *(CGPoint *)((char *)this + 120), *((CGFloat *)this + 19), *(CGPoint *)((char *)this + 136), *((CGFloat *)this + 20), Function, *((_DWORD *)this + 25) & 0x1000000, (*((_DWORD *)this + 25) & 0x2000000) != 0);
  if (Radial)
  {
    v7 = Radial;
    CA::CG::fill_shading((uint64_t)a2);
    CGShadingRelease(v7);
  }
}

unint64_t CA::CG::gradient_pixel_size(CA::CG *this, CGGradient *a2)
{
  unint64_t LocationCount;
  unint64_t result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  double *v7;
  double v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double v13;
  _OWORD v14[8];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  LocationCount = CGGradientGetLocationCount();
  if (LocationCount < 3)
    return 2;
  v4 = LocationCount;
  if (LocationCount > 0x10)
    return 2048;
  memset(v14, 0, sizeof(v14));
  CGGradientApply();
  v5 = 0;
  v6 = v4 - 1;
  while (v6 != v5)
  {
    v7 = (double *)v14 + v5;
    v8 = round((v7[1] - *v7) * 4096.0);
    *v7 = v8;
    result = 2048;
    if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      ++v5;
      if (v8 != 0.0)
        continue;
    }
    return result;
  }
  v9 = (unint64_t)*(double *)v14;
  v10 = 1;
  do
  {
    v11 = (unint64_t)*((double *)v14 + v10);
    if (v11)
    {
      v12 = v9;
      do
      {
        v9 = v11;
        v11 = v12 % v11;
        v12 = v9;
      }
      while (v11);
    }
    ++v10;
  }
  while (v10 != v6);
  v13 = round(4096.0 / (double)v9) + 1.0;
  if ((unint64_t)v13 >= 0x800)
    return 2048;
  else
    return (unint64_t)v13;
}

double **CA::CG::gradient_pixel_size(CGGradient *)::$_0::__invoke(double **result, double a2)
{
  double *v2;

  v2 = *result;
  *v2 = a2;
  *result = v2 + 1;
  return result;
}

uint64_t CA::CG::`anonymous namespace'::GradientColormapGenerator::generate(CA::CG::_anonymous_namespace_::GradientColormapGenerator *this, CA::CG::Renderer *a2, CGColorSpaceRef space, unsigned __int8 *a4)
{
  CGColorSpaceGetModel(space);
  return CGGradientApply();
}

uint64_t CA::CG::`anonymous namespace'::GradientSampler::callback(CA::CG::_anonymous_namespace_::GradientSampler *this, float64x2_t *a2, double a3, const double *a4)
{
  uint64_t result;
  double v8;
  float64x2_t *v9;
  int v10;
  unsigned int v11;
  float64x2_t v12;
  float64x2_t *v13;
  int v14;
  double v15;
  unsigned int v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  CA::OGL::Context *v20;
  CGColorSpace *v21;
  CA::OGL::Context *v22;
  CGColorSpace *v23;
  uint64_t v33;
  float16x4_t *v34;
  unsigned int v35;
  unsigned int v36;
  double v37;
  int v38;
  double v39;
  double v40;
  float16x4_t v46;
  float16x4_t v47;
  float32x4_t v50;
  float32x4_t v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  CA::OGL::Context *v55;
  CGColorSpace *v56;
  CA::OGL::Context *v57;
  CGColorSpace *v58;
  float16x4_t v59;
  float32x4_t v60;
  int8x8_t v61;
  uint64_t v62;
  int8x8_t *v63;
  float32x4_t v64;
  float16x4_t v65;
  float32x4_t v66;
  double v67;
  double v68;
  uint64_t v69;
  float32x4_t v70;
  float32x4_t v71;
  uint64_t v72;
  double v73;
  float v74;
  double v75;
  double v76;
  uint64_t v77;
  CA::OGL::Context *v78;
  CGColorSpace *v79;
  unsigned int v80;
  CA::OGL::Context *v81;
  CGColorSpace *v82;
  float v83;
  unint64_t v84;
  int v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  CA::OGL::Context *v91;
  CGColorSpace *v92;
  unsigned int v93;
  CA::OGL::Context *v94;
  CGColorSpace *v95;
  float v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  _DWORD *v100;
  unint64_t v101;
  unsigned int v102;
  double v103;
  unint64_t v104;
  unsigned int v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64x2_t v110;
  double v111;
  unint64_t v112;
  float64x2_t v113;
  float64x2_t v114;
  int32x2_t v115;
  uint64_t v116;
  int32x2_t v118;
  uint64x2_t v119;
  int32x2_t v120;
  double v121;
  double v122;
  double v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  int v127;
  unsigned int v128;
  unint64_t v129;
  int v130;
  unsigned int v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  uint64x2_t v136;
  unint64_t v137;
  int32x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  uint64_t v141;
  int32x2_t v142;
  uint64x2_t v143;
  int32x2_t v144;
  float32x4_t v145;
  float32x4_t v146;
  uint64_t v147;
  float v148;
  __int16 v154;
  unint64_t v160;
  uint64_t v161;
  int v162;
  uint64x2_t v163;
  unint64_t v164;
  int32x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  int32x2_t v168;
  int32x2_t v169;
  uint32x2_t v170;
  int32x2_t v171;
  uint64_t v172;
  int8x16_t v173;
  int32x2_t v174;
  uint64x2_t v175;
  int32x2_t v176;
  int8x8_t v177;
  uint32x2_t v178;
  uint32x2_t v179;
  unsigned __int128 v180;
  int8x16_t v181;
  float16x4_t v182;
  float16x4_t v183;
  float16x4_t v184;
  float32x4_t v185;
  uint64_t v186;

  v186 = *MEMORY[0x1E0C80C00];
  result = CGGradientUsesPremultipliedInterpolation();
  v8 = *((double *)this + 6);
  if ((_DWORD)result)
  {
    if (v8 >= 0.0)
    {
      v9 = (float64x2_t *)((char *)this + 56);
      v10 = *((_DWORD *)this + 10);
      if (*((_BYTE *)this + 44))
      {
        if (v8 <= 0.0)
          v11 = 0;
        else
          v11 = vcvtpd_u64_f64(v8 * (double)(v10 - 1));
        if (a3 >= 1.0)
          v37 = (double)v10;
        else
          v37 = ceil((double)(v10 - 1) * a3);
        v54 = v37;
        v55 = *(CA::OGL::Context **)this;
        v56 = (CGColorSpace *)*((_QWORD *)this + 2);
        v185 = 0uLL;
        CA::OGL::Context::device_float_color(v55, v185.f32, v56, v9, *(float *)&v37);
        v183 = vcvt_f16_f32(v185);
        v57 = *(CA::OGL::Context **)this;
        v58 = (CGColorSpace *)*((_QWORD *)this + 2);
        v185 = 0uLL;
        result = CA::OGL::Context::device_float_color(v57, v185.f32, v58, a2, *(float *)v183.i32);
        v59 = vcvt_f16_f32(v185);
        if (*(_QWORD *)&v183 == *(_QWORD *)&v59)
        {
          if (v11 < v54)
          {
            v60 = vcvtq_f32_f16((float16x4_t)vdup_lane_s16((int16x4_t)v183, 3));
            v61 = (int8x8_t)vcvt_f16_f32(vmulq_f32(v60, vcvtq_f32_f16(v183)));
            *(__int32 *)((char *)v61.i32 + 2) = vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16((float16x4_t)vext_s8((int8x8_t)v183, v61, 2uLL)), v60)).u32[0];
            v61.i16[3] = v183.i16[3];
            v62 = v54 - v11;
            v63 = (int8x8_t *)(*((_QWORD *)this + 4) + 8 * v11);
            do
            {
              *v63++ = v61;
              --v62;
            }
            while (v62);
          }
        }
        else if (v11 < v54)
        {
          v64 = vcvtq_f32_f16((float16x4_t)vdup_lane_s16((int16x4_t)v59, 3));
          v65.i16[0] = vcvt_f16_f32(vmulq_f32(v64, vcvtq_f32_f16(v59))).u16[0];
          *(__int32 *)((char *)v65.i32 + 2) = vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16((float16x4_t)vext_s8((int8x8_t)v59, (int8x8_t)v59, 2uLL)), v64)).u32[0];
          v65.i16[3] = v59.i16[3];
          v66 = vcvtq_f32_f16((float16x4_t)vdup_lane_s16((int16x4_t)v183, 3));
          v64.i16[0] = vcvt_f16_f32(vmulq_f32(v66, vcvtq_f32_f16(v183))).u16[0];
          *(__int32 *)((char *)v64.i32 + 2) = vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16((float16x4_t)vext_s8((int8x8_t)v183, *(int8x8_t *)v66.f32, 2uLL)), v66)).u32[0];
          v64.i16[3] = v183.i16[3];
          v67 = (double)(*((_DWORD *)this + 10) - 1);
          v68 = v8 * v67;
          v69 = v11;
          v70 = vcvtq_f32_f16(*(float16x4_t *)v64.f32);
          v71 = vcvtq_f32_f16(v65);
          v72 = *((_QWORD *)this + 4);
          v73 = 1.0 / ((a3 - v8) * v67);
          do
          {
            v74 = ((double)v69 - v68) * v73;
            *(float16x4_t *)(v72 + 8 * v69++) = vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(v70, 1.0 - v74), v71, v74));
          }
          while (v54 != v69);
        }
      }
      else
      {
        if (v8 <= 0.0)
          v35 = 0;
        else
          v35 = vcvtpd_u64_f64(v8 * (double)(v10 - 1));
        if (a3 >= 1.0)
          v75 = (double)v10;
        else
          v75 = ceil((double)(v10 - 1) * a3);
        v77 = v75;
        v78 = *(CA::OGL::Context **)this;
        v79 = (CGColorSpace *)*((_QWORD *)this + 2);
        v185 = 0uLL;
        CA::OGL::Context::device_float_color(v78, v185.f32, v79, v9, *(float *)&v75);
        v184 = vcvt_f16_f32(v185);
        v80 = CA::OGL::ExtendedColor::word32((CA::OGL::ExtendedColor *)&v184);
        v81 = *(CA::OGL::Context **)this;
        v82 = (CGColorSpace *)*((_QWORD *)this + 2);
        v185 = 0uLL;
        CA::OGL::Context::device_float_color(v81, v185.f32, v82, a2, v83);
        v184 = vcvt_f16_f32(v185);
        result = CA::OGL::ExtendedColor::word32((CA::OGL::ExtendedColor *)&v184);
        v84 = ((((v80 | ((unint64_t)v80 << 24)) & 0xFF00FF00FF00FFLL) * (HIBYTE(v80) + 1)) >> 8) & 0xFF00FF00FF00FFLL;
        v85 = (v84 >> 24) | v84;
        v86 = v80 & 0xFF000000;
        if (v80 == (_DWORD)result)
        {
          if (v35 < v77)
          {
            v87 = v85 & 0xFFFFFF | v86;
            v88 = v77 - v35;
            v89 = (int *)(*((_QWORD *)this + 4) + 4 * v35);
            do
            {
              *v89++ = v87;
              --v88;
            }
            while (v88);
          }
        }
        else if (v35 < v77)
        {
          v101 = 0;
          v102 = v85 & 0xFF00 | v86;
          v103 = (double)(*((_DWORD *)this + 10) - 1);
          v104 = ((((result | ((unint64_t)result << 24)) & 0xFF00FF00FF00FFLL)
                 * (BYTE3(result) + 1)) >> 8) & 0xFF00FF00FF00FFLL;
          LODWORD(v104) = (v104 >> 24) | v104;
          v105 = result & 0xFF000000 | (unsigned __int16)v104;
          v106 = v85 & 0xFF00FF;
          v107 = (v104 & 0xFF00FF) - v106;
          v108 = (v105 >> 8) - (v102 >> 8);
          v109 = v77 - v35;
          v110 = (uint64x2_t)vdupq_n_s64(v109 - 1);
          v111 = (a3 - v8) * v103;
          v112 = (v109 + 1) & 0xFFFFFFFFFFFFFFFELL;
          v113 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v8 * v103), 0);
          v114 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(256.0 / v111), 0);
          v115 = vadd_s32(vdup_n_s32(v35), (int32x2_t)0x100000000);
          v116 = *((_QWORD *)this + 4) + 4 * v35;
          __asm { FMOV            V5.2D, #0.5 }
          do
          {
            v118 = vmovn_s64((int64x2_t)vcgeq_u64(v110, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v101), (int8x16_t)xmmword_18474E1C0)));
            v119.i64[0] = v115.u32[0];
            v119.i64[1] = v115.u32[1];
            v120 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vmlaq_f64(_Q5, vsubq_f64(vcvtq_f64_u64(v119), v113), v114)));
            if ((v118.i8[0] & 1) != 0)
            {
              result = (v106 + ((v107 * v120.i32[0]) >> 8)) & 0xFF00FF;
              *(_DWORD *)(v116 + 4 * v101) = result | (v102 + v108 * v120.i32[0]) & 0xFF00FF00;
            }
            if ((v118.i8[4] & 1) != 0)
            {
              result = (v106 + ((v107 * v120.i32[1]) >> 8)) & 0xFF00FF;
              *(_DWORD *)(v116 + 4 * v101 + 4) = result | (v102 + v108 * v120.i32[1]) & 0xFF00FF00;
            }
            v101 += 2;
            v115 = vadd_s32(v115, (int32x2_t)0x200000002);
          }
          while (v112 != v101);
        }
      }
    }
  }
  else if (v8 >= 0.0)
  {
    v13 = (float64x2_t *)((char *)this + 56);
    v14 = *((_DWORD *)this + 10);
    if (*((_BYTE *)this + 44))
    {
      v15 = (double)(v14 - 1);
      v16 = vcvtpd_u64_f64(v8 * v15);
      if (v8 > 0.0)
        v17 = v16;
      else
        v17 = 0;
      v18 = ceil(v15 * a3);
      if (a3 >= 1.0)
        v18 = (double)v14;
      v19 = v18;
      v20 = *(CA::OGL::Context **)this;
      v21 = (CGColorSpace *)*((_QWORD *)this + 2);
      v185 = 0uLL;
      CA::OGL::Context::device_float_color(v20, v185.f32, v21, v13, *(float *)&v18);
      v182 = vcvt_f16_f32(v185);
      v22 = *(CA::OGL::Context **)this;
      v23 = (CGColorSpace *)*((_QWORD *)this + 2);
      v185 = 0uLL;
      result = CA::OGL::Context::device_float_color(v22, v185.f32, v23, a2, *(float *)v182.i32);
      _D7 = v182;
      _D0.i32[1] = v185.i32[1];
      _D2 = vcvt_f16_f32(v185);
      _H3 = v182.i16[3];
      if (*(_QWORD *)&v182 == *(_QWORD *)&_D2)
      {
        if (v17 < v19)
        {
          __asm
          {
            FCVT            S0, H7
            FCVT            S1, H3
          }
          *(float *)_D0.i32 = *(float *)_D0.i32 * _S1;
          __asm { FCVT            H0, S0 }
          _D7.i16[0] = _D0.i16[0];
          *(__int32 *)((char *)_D7.i32 + 2) = vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16((float16x4_t)vext_s8((int8x8_t)v182, _D0, 2uLL)), vcvtq_f32_f16((float16x4_t)vdup_lane_s16((int16x4_t)v182, 3)))).u32[0];
          v33 = v19 - v17;
          v34 = (float16x4_t *)(*((_QWORD *)this + 4) + 8 * v17);
          do
          {
            *v34++ = _D7;
            --v33;
          }
          while (v33);
        }
      }
      else
      {
        v38 = *((_DWORD *)this + 10) - 1;
        v39 = 1.0 / ((a3 - v8) * (double)v38);
        v40 = -(v8 * (double)v38) * v39;
        _H4 = _D2.i16[3];
        __asm
        {
          FCVT            S4, H4
          FCVT            S3, H3
        }
        if (_S4 == _S3)
        {
          if (v17 < v19)
          {
            __asm { FCVT            S5, H2 }
            _S4 = _S5 * _S4;
            __asm { FCVT            H4, S4 }
            v46 = (float16x4_t)vext_s8((int8x8_t)_D2, *(int8x8_t *)&v39, 2uLL);
            v47 = (float16x4_t)vdup_lane_s16((int16x4_t)_D2, 3);
            _D2.i16[0] = LOWORD(_S4);
            *(__int32 *)((char *)_D2.i32 + 2) = vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16(v46), vcvtq_f32_f16(v47))).u32[0];
            __asm { FCVT            S4, H7 }
            _S3 = _S4 * _S3;
            __asm { FCVT            H3, S3 }
            _D7.i16[0] = LOWORD(_S3);
            *(__int32 *)((char *)_D7.i32 + 2) = vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16((float16x4_t)vext_s8((int8x8_t)v182, *(int8x8_t *)&v39, 2uLL)), vcvtq_f32_f16((float16x4_t)vdup_lane_s16((int16x4_t)v182, 3)))).u32[0];
            v50 = vcvtq_f32_f16(_D7);
            v51 = vcvtq_f32_f16(_D2);
            v52 = *((_QWORD *)this + 4);
            do
            {
              v53 = v40 + v39 * (double)v17;
              *(float16x4_t *)(v52 + 8 * v17++) = vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(v50, 1.0 - v53), v51, v53));
            }
            while (v19 != v17);
          }
        }
        else if (v17 < v19)
        {
          v145 = vcvtq_f32_f16(v182);
          v146 = vcvtq_f32_f16(_D2);
          v147 = *((_QWORD *)this + 4);
          do
          {
            v148 = v40 + v39 * (double)v17;
            _D5 = vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(v145, 1.0 - v148), v146, v148));
            _H6 = _D5.i16[3];
            __asm
            {
              FCVT            S6, H6
              FCVT            S7, H5
            }
            _S7 = _S7 * _S6;
            __asm { FCVT            H7, S7 }
            v154 = LOWORD(_S7);
            LOWORD(_S7) = _D5.i16[1];
            _H16 = _D5.i16[2];
            _D5.i16[0] = v154;
            __asm { FCVT            S7, H7 }
            _S7 = _S7 * _S6;
            __asm { FCVT            H7, S7 }
            _D5.i16[1] = LOWORD(_S7);
            __asm { FCVT            S7, H16 }
            _S6 = _S7 * _S6;
            __asm { FCVT            H6, S6 }
            _D5.i16[2] = LOWORD(_S6);
            *(float16x4_t *)(v147 + 8 * v17++) = _D5;
          }
          while (v19 != v17);
        }
      }
    }
    else
    {
      if (v8 <= 0.0)
        v36 = 0;
      else
        v36 = vcvtpd_u64_f64(v8 * (double)(v14 - 1));
      if (a3 >= 1.0)
        v76 = (double)v14;
      else
        v76 = ceil((double)(v14 - 1) * a3);
      v90 = v76;
      v91 = *(CA::OGL::Context **)this;
      v92 = (CGColorSpace *)*((_QWORD *)this + 2);
      v185 = 0uLL;
      CA::OGL::Context::device_float_color(v91, v185.f32, v92, v13, *(float *)&v76);
      v184 = vcvt_f16_f32(v185);
      v93 = CA::OGL::ExtendedColor::word32((CA::OGL::ExtendedColor *)&v184);
      v94 = *(CA::OGL::Context **)this;
      v95 = (CGColorSpace *)*((_QWORD *)this + 2);
      v185 = 0uLL;
      CA::OGL::Context::device_float_color(v94, v185.f32, v95, a2, v96);
      v184 = vcvt_f16_f32(v185);
      result = CA::OGL::ExtendedColor::word32((CA::OGL::ExtendedColor *)&v184);
      if (v93 == (_DWORD)result)
      {
        if (v36 < v90)
        {
          v97 = ((((v93 | ((unint64_t)v93 << 24)) & 0xFF00FF00FF00FFLL) * (HIBYTE(v93) + 1)) >> 8) & 0xFF00FF00FF00FFLL;
          v98 = v93 & 0xFF000000 | ((v97 >> 24) | v97) & 0xFFFFFF;
          v99 = v90 - v36;
          v100 = (_DWORD *)(*((_QWORD *)this + 4) + 4 * v36);
          do
          {
            *v100++ = v98;
            --v99;
          }
          while (v99);
        }
      }
      else
      {
        v121 = (double)(*((_DWORD *)this + 10) - 1);
        v122 = 256.0 / ((a3 - v8) * v121);
        v123 = -(v8 * v121 * v122 + -0.5);
        if (HIBYTE(v93) == BYTE3(result))
        {
          if (v36 < v90)
          {
            v124 = 0;
            v125 = HIBYTE(v93) + 1;
            v126 = ((((v93 | ((unint64_t)v93 << 24)) & 0xFF00FF00FF00FFLL) * v125) >> 8) & 0xFF00FF00FF00FFLL;
            v127 = (v126 >> 24) | v126;
            v128 = v127 & 0xFF00 | v93 & 0xFF000000;
            v129 = ((((result | ((unint64_t)result << 24)) & 0xFF00FF00FF00FFLL)
                   * v125) >> 8) & 0xFF00FF00FF00FFLL;
            v130 = (v129 >> 24) | v129;
            v131 = result & 0xFF000000 | (unsigned __int16)((v129 >> 24) | v129);
            v132 = v127 & 0xFF00FF;
            v133 = (v130 & 0xFF00FF) - (v127 & 0xFF00FF);
            v134 = (v131 >> 8) - (v128 >> 8);
            v135 = v90 - v36;
            v136 = (uint64x2_t)vdupq_n_s64(v135 - 1);
            v137 = (v135 + 1) & 0xFFFFFFFFFFFFFFFELL;
            v138 = vadd_s32(vdup_n_s32(v36), (int32x2_t)0x100000000);
            v139 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v122, 0);
            v140 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v123, 0);
            v141 = *((_QWORD *)this + 4) + 4 * v36;
            do
            {
              v142 = vmovn_s64((int64x2_t)vcgeq_u64(v136, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v124), (int8x16_t)xmmword_18474E1C0)));
              v143.i64[0] = v138.u32[0];
              v143.i64[1] = v138.u32[1];
              v144 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vmlaq_f64(v140, vcvtq_f64_u64(v143), v139)));
              if ((v142.i8[0] & 1) != 0)
              {
                result = (v132 + ((v133 * v144.i32[0]) >> 8)) & 0xFF00FF;
                *(_DWORD *)(v141 + 4 * v124) = result | (v128 + v134 * v144.i32[0]) & 0xFF00FF00;
              }
              if ((v142.i8[4] & 1) != 0)
              {
                result = (v132 + ((v133 * v144.i32[1]) >> 8)) & 0xFF00FF;
                *(_DWORD *)(v141 + 4 * v124 + 4) = result | (v128 + v134 * v144.i32[1]) & 0xFF00FF00;
              }
              v124 += 2;
              v138 = vadd_s32(v138, (int32x2_t)0x200000002);
            }
            while (v137 != v124);
          }
        }
        else if (v36 < v90)
        {
          v160 = 0;
          v161 = v90 - v36;
          v162 = (v93 >> 8) & 0xFF00FF;
          v163 = (uint64x2_t)vdupq_n_s64(v161 - 1);
          v164 = (v161 + 1) & 0xFFFFFFFFFFFFFFFELL;
          v165 = vadd_s32(vdup_n_s32(v36), (int32x2_t)0x100000000);
          v166 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v122, 0);
          v167 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v123, 0);
          v168 = vdup_n_s32((result & 0xFF00FF) - (v93 & 0xFF00FF));
          v169 = vdup_n_s32(((result >> 8) & 0xFF00FF) - v162);
          v170 = (uint32x2_t)vdup_n_s32(v93 & 0xFF00FF);
          v171 = vdup_n_s32(v162 << 8);
          v172 = *((_QWORD *)this + 4) + 4 * v36;
          v173.i64[0] = 0xFF00FF00FF00FFLL;
          v173.i64[1] = 0xFF00FF00FF00FFLL;
          do
          {
            v174 = vmovn_s64((int64x2_t)vcgeq_u64(v163, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v160), (int8x16_t)xmmword_18474E1C0)));
            v175.i64[0] = v165.u32[0];
            v175.i64[1] = v165.u32[1];
            v176 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vmlaq_f64(v167, vcvtq_f64_u64(v175), v166)));
            v177 = (int8x8_t)vmla_s32(v171, v169, v176);
            v178 = (uint32x2_t)vbsl_s8((int8x8_t)0xFF00FF00FF00FFLL, (int8x8_t)vsra_n_u32(v170, (uint32x2_t)vmul_s32(v168, v176), 8uLL), v177);
            v175.i64[0] = v178.u32[0];
            v175.i64[1] = v178.u32[1];
            v179 = vsra_n_u32((uint32x2_t)0x100000001, (uint32x2_t)v177, 0x18uLL);
            v180 = *(_OWORD *)&vorrq_s8((int8x16_t)vshll_n_u32(v178, 0x18uLL), (int8x16_t)v175) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
            *(_QWORD *)&v180 = v180 * v179.u32[0];
            *((_QWORD *)&v180 + 1) *= v179.u32[1];
            v181 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v180, 8uLL), v173);
            if ((v174.i8[0] & 1) != 0)
              *(_DWORD *)(v172 + 4 * v160) = v177.i32[0] & 0xFF000000 | (((unint64_t)v181.i64[0] >> 24) | v181.i32[0]) & 0xFFFFFF;
            if ((v174.i8[4] & 1) != 0)
              *(_DWORD *)(v172 + 4 * v160 + 4) = v177.i32[1] & 0xFF000000 | (((unint64_t)v181.i64[1] >> 24) | v181.i32[2]) & 0xFFFFFF;
            v160 += 2;
            v165 = vadd_s32(v165, (int32x2_t)0x200000002);
          }
          while (v164 != v160);
        }
      }
    }
  }
  *((double *)this + 6) = a3;
  v12 = *a2;
  if (*((_DWORD *)this + 6) == 1)
    *(float64x2_t *)((char *)this + 72) = a2[1];
  *(float64x2_t *)((char *)this + 56) = v12;
  return result;
}

void CA::CG::DrawConicGradient::~DrawConicGradient(CA::CG::Renderer **this, const void *a2)
{
  *this = (CA::CG::Renderer *)off_1E1591710;
  CA::CG::Renderer::release_object(this[14], a2);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
}

{
  malloc_zone_t *malloc_zone;

  *this = (CA::CG::Renderer *)off_1E1591710;
  CA::CG::Renderer::release_object(this[14], a2);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::CG::DrawConicGradient::draw_color(CA::CG::DrawConicGradient *this, CA::CG::Renderer *a2)
{
  _QWORD *v4;
  CGColorSpace *ColorSpace;
  char v6;
  CGGradient *v7;
  uint64_t v8;
  int v9;
  CA::CG *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t Identifier;
  char v15;
  _QWORD v16[8];
  __int128 v17;
  uint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)*((_QWORD *)a2 + 1);
  ColorSpace = (CGColorSpace *)CGGradientGetColorSpace();
  if (CGColorSpaceGetModel(ColorSpace) >= kCGColorSpaceModelCMYK)
    goto LABEL_15;
  *(_BYTE *)(v4[2] + 16) = 46;
  v6 = (*(uint64_t (**)(_QWORD *))(*v4 + 984))(v4);
  v8 = v4[2];
  if ((v6 & 1) == 0)
  {
    *(_BYTE *)(v8 + 16) = 0;
LABEL_15:
    CA::CG::DrawConicGradient::draw_as_shading(this, a2);
    return;
  }
  v9 = *(unsigned __int8 *)(v8 + 480);
  if (v9 == 12 || (v9 - 1) >= 0x19)
    goto LABEL_15;
  {
    *(_BYTE *)(v4[2] + 481) |= 2u;
    *(_DWORD *)(v4[2] + 352) = 1065353216;
  }
  v11 = (CA::CG *)*((_QWORD *)this + 14);
  v19[0] = &off_1E1591B70;
  v19[1] = v11;
  v12 = CA::CG::gradient_pixel_size(v11, v7);
  v13 = *((_QWORD *)this + 17);
  v16[2] = v4;
  v16[3] = (char *)a2 + 32;
  v16[4] = v19;
  v16[5] = ColorSpace;
  v16[6] = 0;
  v16[7] = v12;
  v16[0] = &off_1E1591A70;
  v16[1] = a2;
  v17 = *(_OWORD *)((char *)this + 120);
  v18 = v13;
  Identifier = CGGradientGetIdentifier();
  *(_BYTE *)(v4[2] + 481) &= ~2u;
  *(_BYTE *)(v4[2] + 16) = 0;
  if ((v15 & 1) == 0)
    CA::CG::DrawConicGradient::draw_as_shading(this, a2);
}

void CA::CG::DrawConicGradient::draw_as_shading(CA::CG::DrawConicGradient *this, CA::CG::Renderer *a2)
{
  uint64_t Conic;
  CGShading *v4;

  CGGradientGetColorSpace();
  CGGradientGetFunction();
  Conic = CGShadingCreateConic();
  if (Conic)
  {
    v4 = (CGShading *)Conic;
    CA::CG::fill_shading((uint64_t)a2);
    CGShadingRelease(v4);
  }
}

char *CA::CG::FillGlyphs::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  malloc_zone_t *malloc_zone;
  char *v11;
  CGColor *Color;
  __int128 v13;
  __int128 v14;
  malloc_zone_t *v15;
  uint64_t *v16;
  unsigned int *v17;
  unsigned int v18;
  int ShouldAntialias;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  double v24[2];

  v24[1] = *(double *)MEMORY[0x1E0C80C00];
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v11 = (char *)malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
  if (v11)
  {
    Color = (CGColor *)CGStyleGetColor();
    *(_QWORD *)v11 = off_1E1593790;
    v13 = *(_OWORD *)(a1 + 8);
    v14 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(v11 + 40) = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(v11 + 24) = v14;
    *(_OWORD *)(v11 + 8) = v13;
    *((_DWORD *)v11 + 14) = *(_DWORD *)(a1 + 56);
    if (*(_QWORD *)(a1 + 64))
    {
      v15 = (malloc_zone_t *)get_malloc_zone();
      v16 = (uint64_t *)malloc_type_zone_malloc(v15, 0x18uLL, 0x8BB15036uLL);
      if (v16)
        v16 = CA::CG::BasicState::SoftMask::SoftMask(v16);
    }
    else
    {
      v16 = 0;
    }
    *((_QWORD *)v11 + 8) = v16;
    v17 = *(unsigned int **)(a1 + 72);
    if (v17)
    {
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
    }
    *((_QWORD *)v11 + 9) = v17;
    v24[0] = 1.10008428e-19;
    CA::CG::DeviceColor::DeviceColor((double *)v11 + 10, Color, a4, a5, a2, v24);
    ShouldAntialias = CGGStateGetShouldAntialias();
    if (ShouldAntialias)
      ShouldAntialias = CGRenderingStateGetAllowsAntialiasing();
    if (Color)
      v20 = 2114;
    else
      v20 = 2112;
    *((_DWORD *)v11 + 25) = v20 | ShouldAntialias | *(_DWORD *)(a1 + 100) & 0x1100;
    *((_QWORD *)v11 + 13) = 0;
    *(_QWORD *)v11 = off_1E1591088;
    *((_QWORD *)v11 + 18) = a1;
    v21 = (unsigned int *)(a3 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
    *((_QWORD *)v11 + 19) = a3;
    *(_QWORD *)v11 = off_1E1592678;
  }
  return v11;
}

void CA::CG::draw_glyph_paths(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t GlyphPath;
  const CGPath *v10;

  CGFontGetUnitsPerEm(*(CGFontRef *)(a2 + 112));
  if (*(_QWORD *)(a2 + 184))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      GlyphPath = CGFontCreateGlyphPath();
      if (GlyphPath)
      {
        v10 = (const CGPath *)GlyphPath;
        if (a4)
          CA::CG::stroke_path(a1, GlyphPath, 0, a2 + 8, a4);
        else
          CA::CG::fill_path(a1);
        CGPathRelease(v10);
      }
      ++v8;
      v7 += 16;
    }
    while (v8 < *(_QWORD *)(a2 + 184));
  }
}

void CA::CG::GlyphKey::~GlyphKey(CA::CG::GlyphKey *this)
{
  malloc_zone_t *malloc_zone;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::CG::FillGlyphsShadow::~FillGlyphsShadow(CA::CG::FillGlyphsShadow *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E1591088;
  v2 = (unsigned int *)*((_QWORD *)this + 19);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1591088;
  v2 = (unsigned int *)*((_QWORD *)this + 19);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::CG::FillGlyphsShadow::shape_type(CA::CG::FillGlyphsShadow *this, CA::CG::Renderer *a2)
{
  return (*(uint64_t (**)(_QWORD, CA::CG::Renderer *))(**((_QWORD **)this + 18) + 128))(*((_QWORD *)this + 18), a2);
}

void CA::CG::FillGlyphsShadow::draw_shadow(CA::CG::FillGlyphsShadow *this, CA::CG::Renderer *a2)
{
  uint64_t v4;
  const CA::CG::ShadowStyle *v5;
  float32x4_t v7;
  double v8;
  double v9;
  double v10;
  int64x2_t v11;
  float16x4_t *v12;
  float16x4_t v13;
  CA::CG::Renderer *v14;
  char v20;

  v4 = *((_QWORD *)a2 + 1);
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 136))(*((_QWORD *)this + 18)) & 5) == 0)
    goto LABEL_5;
  v12 = *(float16x4_t **)(v4 + 16);
  v13 = v12[1];
  v14 = (CA::CG::Renderer *)*((_QWORD *)this + 18);
  _H0 = *((_WORD *)v14 + 47);
  __asm { FCVT            S0, H0 }
  v7.i32[0] = 1.0;
  if (*(float *)&_D0 != 1.0)
  {
    v7 = vcvtq_f32_f16(v13);
    _D0 = COERCE_DOUBLE(vcvt_f16_f32(vmulq_n_f32(v7, *(float *)&_D0)));
    *(double *)&v12[1] = _D0;
    v14 = (CA::CG::Renderer *)*((_QWORD *)this + 18);
  }
  v20 = CA::CG::draw_glyph_bitmaps(a2, v14, *((float32x2_t **)this + 19), v5, _D0, (int64x2_t)v7, v8, v9, v10, v11);
  *(float16x4_t *)(*(_QWORD *)(v4 + 16) + 8) = v13;
  if ((v20 & 1) == 0)
LABEL_5:
    CA::CG::DrawShadow::draw_shadow(this, a2);
}

void CA::CG::StrokeGlyphs::~StrokeGlyphs(CA::CG::StrokeGlyphs *this)
{
  const void *v2;

  *(_QWORD *)this = off_1E15918F0;
  if (*((_QWORD *)this + 26))
    CGDashRelease();
  *(_QWORD *)this = off_1E1590FB8;
  v2 = (const void *)*((_QWORD *)this + 14);
  if (v2)
    CFRelease(v2);
  CA::CG::DrawOp::~DrawOp(this);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E15918F0;
  if (*((_QWORD *)this + 26))
    CGDashRelease();
  *(_QWORD *)this = off_1E1590FB8;
  v2 = (const void *)*((_QWORD *)this + 14);
  if (v2)
    CFRelease(v2);
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

float64x2_t *CA::CG::StrokeGlyphs::compute_dod(CA::CG::StrokeGlyphs *this, float64x2_t *a2)
{
  return CA::CG::DrawGlyphs::compute_dod_(this, a2, *((double *)this + 25) * 0.5, 232);
}

uint64_t CA::CG::StrokeGlyphs::shape_type(CA::CG::StrokeGlyphs *this, CA::CG::Renderer *a2)
{
  return 2 * (*((_QWORD *)this + 23) != 0);
}

void CA::CG::StrokeGlyphs::draw_shape(CA::CG::StrokeGlyphs *this, CA::CG::Renderer *a2)
{
  CA::CG::draw_glyph_paths((uint64_t)a2, (uint64_t)this, 232, (uint64_t)this + 192);
}

void CA::Render::PortalLayer::show(CA::Render::PortalLayer *this, int a2, int a3)
{
  _BOOL4 v6;
  NSObject *v7;
  uint64_t v8;
  CA::Render *v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  const char *v26;
  NSObject *v27;
  uint32_t v28;
  uint64_t v29;
  int v30;
  uint8_t buf[4];
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = x_log_hook_p();
  if ((a3 & 1) != 0)
  {
    if (v6)
    {
LABEL_62:
      x_log_();
      return;
    }
    v29 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v30 = *((_DWORD *)this + 10);
      *(_DWORD *)buf = 67109120;
      LODWORD(v32) = v30;
      v26 = "portal-layer %x";
      v27 = v29;
      v28 = 8;
      goto LABEL_65;
    }
  }
  else
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *((_QWORD *)this + 3);
        *(_DWORD *)buf = 134217984;
        v32 = v8;
        _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_DEFAULT, "(portal-layer 0x%lx", buf, 0xCu);
      }
    }
    v9 = (CA::Render *)(a2 + 1);
    CA::Render::show_newline(v9);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v10 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *((_QWORD *)this + 4);
        *(_DWORD *)buf = 134217984;
        v32 = v11;
        _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_DEFAULT, "(sourceLayer 0x%lx)", buf, 0xCu);
      }
    }
    CA::Render::show_newline(v9);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v12 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *((_DWORD *)this + 10);
        *(_DWORD *)buf = 67109120;
        LODWORD(v32) = v13;
        _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_DEFAULT, "(sourceContext %x)", buf, 8u);
      }
    }
    if ((*((_BYTE *)this + 13) & 1) != 0)
    {
      CA::Render::show_newline(v9);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v14 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v14, OS_LOG_TYPE_DEFAULT, "(hidesSourceLayer true)", buf, 2u);
        }
      }
    }
    if ((*((_BYTE *)this + 13) & 2) != 0)
    {
      CA::Render::show_newline(v9);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v15 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v15, OS_LOG_TYPE_DEFAULT, "(matchesOpacity true)", buf, 2u);
        }
      }
    }
    if ((*((_BYTE *)this + 13) & 4) != 0)
    {
      CA::Render::show_newline(v9);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v16 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v16, OS_LOG_TYPE_DEFAULT, "(matchesPosition true)", buf, 2u);
        }
      }
    }
    if ((*((_BYTE *)this + 13) & 8) != 0)
    {
      CA::Render::show_newline(v9);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v17 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v17, OS_LOG_TYPE_DEFAULT, "(matchesTransform true)", buf, 2u);
        }
      }
    }
    if ((*((_BYTE *)this + 13) & 0x10) != 0)
    {
      CA::Render::show_newline(v9);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v18 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v18, OS_LOG_TYPE_DEFAULT, "(allowsBackdropGroups true)", buf, 2u);
        }
      }
    }
    if ((*((_BYTE *)this + 13) & 0x20) != 0)
    {
      CA::Render::show_newline(v9);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v19 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v19, OS_LOG_TYPE_DEFAULT, "(crossDisplay true)", buf, 2u);
        }
      }
    }
    if ((*((_BYTE *)this + 13) & 0x80) != 0)
    {
      CA::Render::show_newline(v9);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v20 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v20, OS_LOG_TYPE_DEFAULT, "(allowedInContextTransform true)", buf, 2u);
        }
      }
    }
    v21 = *((_QWORD *)this + 7);
    if (v21)
    {
      if (!*(_BYTE *)(v21 + 213))
      {
        CA::Render::show_newline(v9);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v22 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v22, OS_LOG_TYPE_DEFAULT, "(source layer not found)", buf, 2u);
          }
        }
      }
      v23 = *((_QWORD *)this + 7);
      if (v23 && (*(_BYTE *)(v23 + 13) & 0x10) != 0)
      {
        CA::Render::show_newline(v9);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v24 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v24, OS_LOG_TYPE_DEFAULT, "(stop-secure-superlayers-validation true)", buf, 2u);
          }
        }
      }
    }
    CA::Render::Context::show_source_layer(*((unsigned int *)this + 10), *((CA::Render::Object **)this + 4), v9, a3);
    if (x_log_hook_p())
      goto LABEL_62;
    v25 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v26 = ")";
      v27 = v25;
      v28 = 2;
LABEL_65:
      _os_log_impl(&dword_184457000, v27, OS_LOG_TYPE_DEFAULT, v26, buf, v28);
    }
  }
}

void *CA::Render::PortalState::match_cross_display_layer(uint64_t a1, _OWORD *a2, _DWORD *a3, _QWORD *a4)
{
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  malloc_zone_t *malloc_zone;
  void *v16;
  void *v17;

  os_unfair_lock_lock(&CA::Render::_cross_display_sources_lock);
  v8 = (char *)CA::Render::_cross_display_sources;
  if (CA::Render::_cross_display_sources != (_UNKNOWN *)qword_1EDD109D0)
  {
    while (*(_QWORD *)v8 != a1)
    {
      v8 += 160;
      if (v8 == (char *)qword_1EDD109D0)
        goto LABEL_8;
    }
  }
  if (v8 == (char *)qword_1EDD109D0)
  {
LABEL_8:
    v17 = 0;
  }
  else
  {
    v9 = *((_OWORD *)v8 + 2);
    v10 = *((_OWORD *)v8 + 3);
    v11 = *((_OWORD *)v8 + 4);
    *a2 = *((_OWORD *)v8 + 1);
    a2[1] = v9;
    a2[2] = v10;
    a2[3] = v11;
    v12 = *((_OWORD *)v8 + 6);
    v13 = *((_OWORD *)v8 + 7);
    v14 = *((_OWORD *)v8 + 8);
    a2[4] = *((_OWORD *)v8 + 5);
    a2[5] = v12;
    a2[6] = v13;
    a2[7] = v14;
    *a3 = *((_DWORD *)v8 + 36);
    *a4 = *((_QWORD *)v8 + 19);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v16 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x98uLL, 0x743898A5uLL);
    v17 = v16;
    if (v16)
      CA::Render::Layer::Layer((uint64_t)v16, *((const CA::Render::Layer **)v8 + 1));
  }
  os_unfair_lock_unlock(&CA::Render::_cross_display_sources_lock);
  return v17;
}

CA::Render::PortalLayer *CA::Render::PortalLayer::PortalLayer(CA::Render::PortalLayer *this, CA::Render::Decoder *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E1598C30;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = (CA::Render::Decoder::decode_int32(a2) << 8) | 0x28;
  ++dword_1ECDC7CC8;
  *(_QWORD *)this = off_1E1596640;
  *((_QWORD *)this + 3) = CA::Render::Decoder::decode_size_t(a2);
  *((_QWORD *)this + 4) = CA::Render::Decoder::decode_size_t(a2);
  *((_DWORD *)this + 10) = CA::Render::Decoder::decode_int32(a2);
  v12 = 28;
  v4 = CA::Render::Decoder::decode_array_object(a2, 1, &v12, 0);
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = v4;
    if (!v6)
    {
      v7 = 0;
      do
        v11 = __ldaxr(v5);
      while (__stlxr(v11 - 1, v5));
    }
    *((_QWORD *)this + 6) = v7;
    do
    {
      v8 = __ldaxr(v5);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v5));
    if (!v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  else
  {
    *((_QWORD *)this + 6) = 0;
  }
  *((_QWORD *)this + 7) = 0;
  return this;
}

void CAMLWriterFreeElementList(_CAMLWriterElement *a1)
{
  _CAMLWriterElement *v1;
  _CAMLWriterElement *v2;
  _CAMLWriterElement *var1;
  void *var4;
  __CFString *var5;
  _CAMLWriterElement *var2;

  if (a1)
  {
    v1 = a1;
    v2 = a1;
    do
    {
      var1 = v2->var1;
      if (var1)
        CAMLWriterFreeElementList(var1);
      var4 = v2->var4;
      if (var4)
        CFRelease(var4);
      var5 = v2->var5;
      if (var5)
        CFRelease(var5);
      CAMLWriterFreeAttributeList(v2->var6);
      v2 = v2->var2;
    }
    while (v2);
    do
    {
      var2 = v1->var2;
      free(v1);
      v1 = var2;
    }
    while (var2);
  }
}

void CAMLWriterFreeAttributeList(_CAMLWriterAttribute *a1)
{
  _CAMLWriterAttribute *v1;
  _CAMLWriterAttribute *v2;
  const void *v3;
  _CAMLWriterAttribute *v4;

  if (a1)
  {
    v1 = a1;
    v2 = a1;
    do
    {
      v3 = (const void *)*((_QWORD *)v2 + 2);
      if (v3)
        CFRelease(v3);
      v2 = *(_CAMLWriterAttribute **)v2;
    }
    while (v2);
    do
    {
      v4 = *(_CAMLWriterAttribute **)v1;
      free(v1);
      v1 = v4;
    }
    while (v4);
  }
}

void CAMLWriterNewline(_CAMLWriterPriv *a1, unsigned int a2)
{
  size_t v3;
  size_t v4;
  size_t v5;
  uint64_t v6;
  UInt8 *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v3 = (a2 >> 2) & 0x1FFFFFFF;
  v4 = (2 * a2) & 6;
  v5 = v4 + ((2 * a2) >> 3) + 1;
  MEMORY[0x1E0C80A78](a1);
  v7 = (UInt8 *)v8 - v6;
  bzero((char *)v8 - v6, v5);
  *v7 = 10;
  memset(v7 + 1, 9, v3);
  memset(&v7[v3 + 1], 32, v4);
  CFDataAppendBytes((CFMutableDataRef)a1, v7, v5);
}

void CAMLWriterPrintf(_CAMLWriterPriv *a1, char *__s, ...)
{
  char *v4;
  char *v5;
  CFIndex v6;
  int v7;
  __CFData *var0;
  const UInt8 *v9;
  CFIndex v10;
  void *v11;
  const char *v12;
  int64_t v13;
  const char *v14;
  unsigned int v16;
  const char *v17;
  size_t v18;
  const char *v19;
  size_t v20;
  size_t v21;
  va_list v22;
  va_list va;

  va_start(va, __s);
  va_copy(v22, va);
  while (1)
  {
    v4 = strchr(__s, 37);
    if (!v4)
      break;
    v5 = v4;
    v6 = v4 - __s;
    if (v4 != __s)
      CFDataAppendBytes(a1->var0, (const UInt8 *)__s, v6);
    v7 = v5[1];
    if (v7 == 115)
    {
      v19 = va_arg(v22, const char *);
      v20 = strlen(v19);
      if (!v20)
        goto LABEL_38;
      v10 = v20;
      var0 = a1->var0;
      v9 = (const UInt8 *)v19;
      goto LABEL_37;
    }
    if (v7 != 83)
    {
      if (v7 != 37)
        goto LABEL_38;
      var0 = a1->var0;
      v9 = (const UInt8 *)"%";
      v10 = 1;
      goto LABEL_37;
    }
    v11 = va_arg(v22, void *);
    v12 = (const char *)objc_msgSend(v11, "UTF8String", v6);
    v13 = strlen(v12);
    if (!v13)
      goto LABEL_38;
    if (v13 >= 1)
    {
      v14 = &v12[v13];
      v9 = (const UInt8 *)v12;
      while (*v12 > 0x3E || ((1 << *v12) & 0x500000C400000000) == 0)
      {
        ++v12;
LABEL_30:
        if (v12 >= v14)
          goto LABEL_35;
      }
      if (v12 - (const char *)v9 >= 1)
        CFDataAppendBytes(a1->var0, v9, v12 - (const char *)v9);
      v16 = *(unsigned __int8 *)v12;
      if (v16 > 0x3B)
      {
        if (v16 == 62)
        {
          v17 = "&gt;";
        }
        else
        {
          if (v16 != 60)
            goto LABEL_28;
          v17 = "&lt;";
        }
      }
      else if (v16 == 34)
      {
        v17 = "&quot;";
      }
      else
      {
        v17 = "&amp;";
        if (v16 != 38)
LABEL_28:
          v17 = "&apos;";
      }
      v18 = strlen(v17);
      CFDataAppendBytes(a1->var0, (const UInt8 *)v17, v18);
      v9 = (const UInt8 *)++v12;
      goto LABEL_30;
    }
    v9 = (const UInt8 *)v12;
LABEL_35:
    v10 = v12 - (const char *)v9;
    if (v12 - (const char *)v9 >= 1)
    {
      var0 = a1->var0;
LABEL_37:
      CFDataAppendBytes(var0, v9, v10);
    }
LABEL_38:
    __s = v5 + 2;
  }
  if (*__s)
  {
    v21 = strlen(__s);
    if (v21)
      CFDataAppendBytes(a1->var0, (const UInt8 *)__s, v21);
  }
}

BOOL CAMLWriterTypesEqual(const __CFString *a1, const __CFString *a2)
{
  return CFEqual(a1, a2)
      || CFEqual(a1, CFSTR("integer")) && (CFEqual(a2, CFSTR("real")) || CFEqual(a2, CFSTR("BOOL")))
      || CFEqual(a1, CFSTR("string")) && CFEqual(a2, CFSTR("NSString"));
}

void CAMLWriterElementRemoveAttribute(_CAMLWriterElement *a1, int a2)
{
  _CAMLWriterAttribute *p_var6;
  _CAMLWriterAttribute *v4;
  _CAMLWriterAttribute *v5;

  p_var6 = (_CAMLWriterAttribute *)&a1->var6;
  while (1)
  {
    v4 = p_var6;
    p_var6 = *(_CAMLWriterAttribute **)p_var6;
    if (!p_var6)
      break;
    if (*((_DWORD *)p_var6 + 2) == a2)
    {
      v5 = *(_CAMLWriterAttribute **)p_var6;
      *(_QWORD *)v4 = *(_QWORD *)p_var6;
      if (!v5)
        a1->var7 = (_CAMLWriterAttribute **)p_var6;
      *(_QWORD *)p_var6 = 0;
      CAMLWriterFreeAttributeList(p_var6);
      return;
    }
  }
}

BOOL CAMLWriterIdentifierNeedsQuoting(CFStringRef theString)
{
  __CFCharacterSet *Mutable;
  const __CFCharacterSet *Predefined;
  CFRange v5;

  if (!CAMLWriterIdentifierNeedsQuoting(__CFString const*)::quoted_set)
  {
    Mutable = CFCharacterSetCreateMutable(0);
    Predefined = CFCharacterSetGetPredefined(kCFCharacterSetAlphaNumeric);
    CFCharacterSetUnion(Mutable, Predefined);
    CFCharacterSetAddCharactersInString(Mutable, CFSTR("_"));
    CFCharacterSetInvert(Mutable);
    CAMLWriterIdentifierNeedsQuoting(__CFString const*)::quoted_set = (uint64_t)CFCharacterSetCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  v5.length = CFStringGetLength(theString);
  v5.location = 0;
  return CFStringFindCharacterFromSet(theString, (CFCharacterSetRef)CAMLWriterIdentifierNeedsQuoting(__CFString const*)::quoted_set, v5, 0, 0) != 0;
}

void path_callback(void *a1, const CGPathElement *a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  CFStringRef v7;
  CFStringRef v8;

  v4 = 1;
  v5 = 109;
  v6 = 2;
  switch(a2->type)
  {
    case kCGPathElementMoveToPoint:
      goto LABEL_6;
    case kCGPathElementAddLineToPoint:
      v5 = 108;
      v6 = 2;
      goto LABEL_6;
    case kCGPathElementAddQuadCurveToPoint:
      v5 = 113;
      v6 = 4;
      goto LABEL_6;
    case kCGPathElementAddCurveToPoint:
      v5 = 99;
      v6 = 6;
      goto LABEL_6;
    case kCGPathElementCloseSubpath:
      v4 = 0;
      v6 = 0;
      v5 = 104;
LABEL_6:
      if (objc_msgSend(a1, "length"))
        objc_msgSend(a1, "appendString:", CFSTR(" "));
      if (v4)
      {
        v7 = CACreateStringWithDoubleArray((uint64_t)a2->points, v6, 1.0e-12);
        if (v7)
        {
          v8 = v7;
          objc_msgSend(a1, "appendFormat:", CFSTR("%@ %c"), v7, v5);
          CFRelease(v8);
        }
      }
      else
      {
        objc_msgSend(a1, "appendFormat:", CFSTR("%c"), v5);
      }
      break;
    default:
      return;
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::max_layer_bandwidth(CA::WindowServer::IOMFBDisplay *this)
{
  unsigned int *v1;
  const __CFNumber *v2;
  const __CFNumber *v3;

  v1 = (unsigned int *)((char *)this + 25512);
  if (!*((_DWORD *)this + 6378))
  {
    v2 = (const __CFNumber *)IOMobileFramebufferCopyProperty();
    if (v2)
    {
      v3 = v2;
      CFNumberGetValue(v2, kCFNumberIntType, v1);
      CFRelease(v3);
    }
  }
  return *v1;
}

void CA::WindowServer::IOMFBDisplay::will_unblank(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = this + 179;
  os_unfair_lock_lock(this + 179);
  if (!*(_BYTE *)(*(_QWORD *)&this[182]._os_unfair_lock_opaque + 2))
  {
    (*(void (**)(os_unfair_lock_s *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)&this->_os_unfair_lock_opaque
                                                                        + 2120))(this, 1, 0, 0);
    v3 = mach_absolute_time();
    *(double *)&CATailspinMinimumTimestamp = CATimeWithHostTime(v3) + 10.0;
    if (LOBYTE(this[7013]._os_unfair_lock_opaque) || (this[164]._os_unfair_lock_opaque & 0x1C00) == 0x1000)
    {
      LOBYTE(this[7012]._os_unfair_lock_opaque) = 1;
      v4 = mach_absolute_time();
      *(double *)&this[6618]._os_unfair_lock_opaque = CATimeWithHostTime(v4) + 1.0;
    }
  }
  os_unfair_lock_unlock(v2);
}

uint64_t CA::WindowServer::IOMFBDisplay::will_enable(uint64_t this)
{
  if (!*(_BYTE *)(this + 28052) && (*(_WORD *)(this + 656) & 0x1C00) != 0x1000)
    *(_BYTE *)(this + 28045) = 1;
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_dmrr_enabled(uint64_t this, int a2)
{
  if (a2)
    __assert_rtn("set_dmrr_enabled", "windowserver-iomfb-display.cpp", 10334, "!enabled || CADeviceDMRRCapable ()");
  *(_BYTE *)(this + 28131) = *(_BYTE *)(this + 28130);
  *(_BYTE *)(this + 28130) = 0;
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_force_fixed_display_links(CA::WindowServer::IOMFBDisplay *this, int a2)
{
  *((_DWORD *)this + 6789) = a2;
  if (*((_DWORD *)this + 6789))
    CA::WindowServer::IOMFBDisplay::update_server_source_frame_interval_range((os_unfair_lock_s *)this, (const CAFrameIntervalRange *)this + 2282, *((unsigned __int8 *)this + 28128), 1);
  return CA::WindowServer::Display::post_display_changed((uint64_t)this);
}

uint64_t CA::WindowServer::IOMFBDisplay::set_flipbook_enabled(uint64_t this, char a2)
{
  *(_BYTE *)(this + 28096) = a2;
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_flipbook_suppressed(uint64_t this, char a2)
{
  *(_BYTE *)(this + 28097) = a2;
  return this;
}

_QWORD *CA::WindowServer::IOMFBDisplay::work_interval(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v1;
  _QWORD *v4;
  malloc_zone_t *malloc_zone;

  v1 = *((_QWORD *)this + 6);
  if (v1)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 96) + 400))(*(_QWORD *)(v1 + 96));
  v4 = (_QWORD *)*((_QWORD *)this + 3188);
  if (!v4)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v4 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x30uLL, 0x743898A5uLL);
    if (v4)
    {
      if (work_interval_create() != -1)
        v4[5] = work_interval_instance_alloc();
    }
    *((_QWORD *)this + 3188) = v4;
  }
  return v4;
}

uint64_t CA::WindowServer::IOMFBDisplay::finish_update(CA::WindowServer::IOMFBDisplay *this, CA::Render::Update *a2, unsigned int a3)
{
  void *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  void (***v11)(_QWORD);
  uint64_t v12;
  _BOOL4 is_hdr;
  unint64_t v15;
  int v16;
  int v17;
  _BYTE *v18;
  char v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  int v23;
  double v24;
  double v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  BOOL v31;
  int v32;
  int v34;
  int v35;
  int v36;
  double v37;
  int v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  CA::Render::LayerNode *v43;
  uint64_t v44;
  CA::Render::LayerNode *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  double v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  double v56;
  unint64_t v57;
  double v58;
  __n128 v59;
  double updated;
  NSObject *v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  float64_t v66;
  uint64_t v67;
  char v68;
  int v69;
  unsigned int *v70;
  unsigned int v71;
  const CA::Rect *v72;
  __IOSurface *v73;
  float64x2_t v74;
  float64x2_t v75;
  char *v76;
  int v77;
  IOSurfaceID ID;
  uint64_t v79;
  IOSurfaceID v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  char *v84;
  CA::IOMobileFramebuffer **v85;
  CA::Shape *v86;
  const CA::Shape *v87;
  int32x4_t v88;
  int32x4_t v89;
  char v90;
  float *v91;
  uint64_t v92;
  _DWORD *v93;
  uint64_t v94;
  CA::WindowServer::Surface *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  CA::Render::Update *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  CA::WindowServer::Surface *v104;
  uint64_t v105;
  unsigned int v106;
  _QWORD *v107;
  float *v108;
  CA::Render::Update *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  CA::WindowServer::Surface *v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  CA::WindowServer::Surface *surface;
  int32x4_t v119;
  int32x4_t v120;
  int v121;
  int64x2_t v122;
  int32x2_t v123;
  int8x16_t v124;
  uint64_t v125;
  uint8_t *v126;
  float (***v127)(_QWORD);
  int v128;
  CA::WindowServer::Surface *v129;
  NSObject *v130;
  _QWORD *v131;
  __int128 v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  CA::WindowServer::Surface *v140;
  int32x4_t v141;
  int32x4_t v142;
  int64x2_t v143;
  int8x16_t v144;
  int v145;
  int64x2_t v146;
  float64x2_t v147;
  int32x2_t v148;
  int64x2_t v149;
  float64x2_t v150;
  __int128 v151;
  __int128 v152;
  int v153;
  unsigned int v154;
  int v155;
  CA::WindowServer::Surface *v156;
  CA::WindowServer::Surface *v157;
  unint64_t v158;
  int v159;
  uint64_t v160;
  uint64x2_t v161;
  float64x2_t v162;
  int v163;
  int64x2_t v164;
  int8x16_t v165;
  int8x16_t v166;
  int32x2_t v167;
  const CA::Rect *v168;
  uint64_t v169;
  uint64_t v170;
  double v171;
  double v172;
  int32x4_t v173;
  int32x4_t v174;
  int v175;
  int64x2_t v176;
  int64x2_t v177;
  int64x2_t v178;
  int8x16_t v179;
  int8x16_t v180;
  int32x2_t v181;
  int64x2_t v182;
  int8x16_t v183;
  BOOL v184;
  int8x16_t v185;
  int8x16_t v186;
  unint64_t v187;
  int8x16_t v188;
  int8x16_t v189;
  float64x2_t v190;
  __IOSurface *v191;
  int v192;
  __IOSurface *v193;
  __IOSurface *v194;
  char v195;
  float64x2_t v196;
  float64x2_t v197;
  double v198;
  uint64_t v199;
  uint64_t v200;
  int64x2_t v201;
  float64x2_t v202;
  uint64_t v203;
  uint64_t v204;
  float64x2_t v205;
  uint64_t v206;
  int32x4_t v207;
  int32x4_t v208;
  int v209;
  int64x2_t v210;
  int8x16_t v211;
  double v212;
  double v213;
  float64x2_t v214;
  double v215;
  double v216;
  double v217;
  int v218;
  int v219;
  NSObject *v220;
  BOOL v221;
  _BOOL4 v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  int8x16_t v226;
  int32x4_t v227;
  int8x16_t v228;
  uint64_t v229;
  float64x2_t v230;
  uint8_t *v231;
  int64x2_t v232;
  uint64_t v233;
  int64x2_t v234;
  int8x16_t v235;
  __int32 v236;
  int64x2_t v237;
  float64x2_t v238;
  int32x2_t v239;
  int64x2_t v240;
  int8x16_t v241;
  int8x16_t v242;
  int64x2_t v243;
  uint64_t v244;
  int8x16_t v245;
  int8x16_t v246;
  double v247;
  int active;
  int v249;
  NSObject *v250;
  uint64_t v251;
  void (***v252)(_QWORD);
  int v253;
  uint64_t v254;
  double v255;
  _QWORD *v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  double v260;
  char v261;
  float64x2_t *v262;
  uint64_t v263;
  uint64_t v264;
  int64x2_t v265;
  float64x2_t v266;
  uint64_t v267;
  uint64_t v268;
  float64x2_t v269;
  float64x2_t v270;
  double *v271;
  double *v272;
  uint64_t v273;
  unsigned int v274;
  int v275;
  float32x2_t v279;
  float64x2_t v281;
  float64_t v282;
  float64x2_t v283;
  uint64_t v284;
  float v285;
  char v286;
  double scale;
  double v288;
  double v290;
  float64x2_t v291;
  double v292;
  double v293;
  double v294;
  double v296;
  float64x2_t v297;
  int64x2_t v298;
  int64x2_t v299;
  int32x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  int v303;
  float v304;
  char v305;
  __int128 v306;
  float64x2_t v307;
  float32x2_t v308;
  float v309;
  double v310;
  float32x2_t v311;
  float32x2_t v312;
  uint8_t *v313;
  double v314;
  double v315;
  float64x2_t v316;
  void *v317;
  int8x16_t v318;
  int8x16_t v319;
  int8x16_t v320;
  int32x4_t v321;
  int32x2_t v322;
  uint32x2_t v323;
  int32x2_t v324;
  uint32x2_t v325;
  int32x2_t v326;
  int32x2_t v327;
  int8x16_t v328;
  int32x2_t v329;
  uint32x2_t v330;
  int v331;
  int v332;
  unsigned int v333;
  int v334;
  int v335;
  double v336;
  double v337;
  int v338;
  float v339;
  int v340;
  float v341;
  unint64_t v342;
  uint64_t v343;
  float v344;
  float32x2_t *v345;
  float v346;
  unint64_t v347;
  unint64_t v348;
  float v349;
  unint64_t v350;
  unint64_t v351;
  int v353;
  uint64_t v354;
  unsigned int v355;
  __int16 v356;
  int v357;
  float *v358;
  int v359;
  CA::WindowServer::Surface *v360;
  _QWORD *v361;
  _QWORD *v362;
  float *v363;
  uint64_t v364;
  __IOSurface *v365;
  _WORD *v366;
  int v367;
  unsigned int v368;
  CA::WindowServer::IOMFBDisplay *v369;
  uint64_t v370;
  __int16 v372;
  double *v373;
  __int16 v374;
  unint64_t v375;
  __int16 v376;
  unint64_t v377;
  unint64_t v378;
  NSObject *v379;
  int v380;
  __int16 v381;
  __int16 v382;
  __int16 v383;
  uint64_t v384;
  int v385;
  uint64_t v386;
  int wireless_surface_options;
  char v388;
  void (***v389)(_QWORD);
  uint64_t v390;
  _BOOL4 v391;
  int32x4_t v392;
  int32x4_t v393;
  int v394;
  int64x2_t v395;
  int32x2_t v396;
  int8x16_t v397;
  uint8_t *v398;
  float v399;
  uint64_t v400;
  char v401;
  unint64_t v402;
  unint64_t v403;
  char v404;
  float *v405;
  uint64_t v406;
  int v407;
  _BOOL4 v408;
  CA::Render::Update *v409;
  CA::WindowServer::Surface *v410;
  char *v411;
  CA::WindowServer::Surface *v412;
  unsigned int *v413;
  _QWORD *v414;
  __n128 v415;
  uint64_t v416;
  uint64_t v417;
  int v418;
  _BYTE v419[5];
  unsigned int v420;
  _BYTE v421[5];
  unsigned int v422;
  BOOL v423;
  BOOL v424;
  unsigned int v425;
  unsigned int v426;
  float64x2_t v427;
  CA::WindowServer::Surface *v428;
  float64x2_t v429;
  CA::WindowServer::IOMFBDisplay *v430;
  CA::WindowServer::Surface *v431;
  uint64_t v432;
  unsigned int v433;
  unint64_t v434;
  _DWORD *v435;
  __int128 v436;
  int64x2_t v437;
  _BOOL4 v438;
  float64x2_t v439;
  float v440;
  int v441;
  uint64_t v442;
  CA::Shape *v443[2];
  CA::Shape *v444[2];
  uint64_t v445;
  pthread_mutex_t *v446;
  char v447;
  CA::WindowServer::Display::Mode *v448;
  uint64_t v449;
  CA::WindowServer::Display::Mode *v450[2];
  int v451;
  BOOL v452;
  uint64_t v453;
  float64x2_t v454;
  int v455;
  _BOOL4 v456;
  _BYTE *v457;
  CA::Render::Update *v458;
  unsigned int v459;
  _DWORD *v460;
  double v461;
  unsigned int v462;
  unsigned int v463;
  char *v464;
  char *v465;
  unsigned int *v466;
  CA::IOMobileFramebuffer **v467;
  float *v468;
  unsigned int v469;
  float64x2_t v470;
  float v471;
  _BOOL4 v472;
  int8x16_t v473;
  float64x2_t v474;
  float v475;
  uint64_t v476;
  int v477;
  _QWORD *v478;
  float64x2_t v479;
  int32x4_t v480;
  float64x2_t v481;
  float64x2_t v482;
  uint64_t v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  uint64_t v488;
  __int128 v489;
  __int128 v490;
  uint8_t v491[16];
  float64x2_t v492;
  _BYTE v493[32];
  uint8_t v494[16];
  __int128 v495;
  float64x2_t v496[2];
  uint8_t buf[16];
  int8x16_t v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  uint64_t v505;
  CGSize v506;

  v505 = *MEMORY[0x1E0C80C00];
  v6 = (void *)MEMORY[0x186DBE2E4]();
  v7 = byte_1ECDC6AC3;
  v8 = *((_DWORD *)a2 + 67);
  v9 = *((_QWORD *)this + 3251);
  if (v9 && (*(_BYTE *)(v9 + 292) & 1) != 0)
    CA::WindowServer::IOMFBDisplay::delete_detached_layer(this);
  if (!(*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 216))(this)
    || !*((_QWORD *)this + 80)
    || *((_BYTE *)this + 28076))
  {
    goto LABEL_16;
  }
  if ((a3 & 8) != 0)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25688));
    v10 = (_DWORD *)((char *)this + 48 * *((unsigned int *)this + 6418) + 25776);
    if (*v10)
    {
      IOMobileFramebufferSwapCancel();
      *v10 = 0;
    }
    v11 = (void (***)(_QWORD))*((_QWORD *)this + 3307);
    if (v11)
      (**v11)(v11);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 25688));
LABEL_16:
    v12 = 0;
    goto LABEL_17;
  }
  v456 = *((_BYTE *)this + 28107)
      && (*(float (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 920))(this) == 0.0
      && *((double *)this + 3399) != 0.0;
  v448 = (CA::WindowServer::IOMFBDisplay *)((char *)this + 640);
  if (*((_BYTE *)this + 28075))
    *((_BYTE *)this + 28076) = 1;
  if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1536))(this))
    is_hdr = CA::WindowServer::Display::Mode::is_hdr(v448);
  else
    is_hdr = 0;
  if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 80))(this))
    v438 = *((_BYTE *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6600, *((_QWORD *)this + 80), (uint64_t *)v448)+ 40) != 0;
  else
    v438 = 0;
  v472 = is_hdr;
  v433 = v8;
  v468 = (float *)((char *)this + 26328);
  v459 = a3;
  v458 = a2;
  v436 = *(_OWORD *)((char *)this + 152);
  v446 = (pthread_mutex_t *)((char *)this + 25688);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25688));
  if (*((_DWORD *)this + 6420))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = (char *)this + 25792;
    do
    {
      v19 = *v18;
      if (!*((_DWORD *)v18 - 10)
        || !*((_DWORD *)v18 - 4)
        || !CA::IOMobileFramebuffer::swap_wait((CA::WindowServer::IOMFBDisplay *)((char *)this + 25536)))
      {
        ++v17;
      }
      v16 |= (v19 & 0x20) >> 5;
      ++v15;
      v18 += 48;
    }
    while (v15 < *((unsigned int *)this + 6420));
  }
  else
  {
    v17 = 0;
    LOBYTE(v16) = 0;
  }
  v465 = (char *)this + 25672;
  v20 = *((_QWORD *)this + 3251);
  v476 = v20;
  if (v20)
    v21 = (*(_BYTE *)(v20 + 292) & 1) == 0;
  else
    v21 = 0;
  v22 = (uint64_t)v458;
  v23 = byte_1ECDC6B05;
  v24 = (*(double (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 760))(this);
  v25 = *((double *)v458 + 9);
  if ((*((_DWORD *)this + 156) & 0x100) == 0)
    goto LABEL_48;
  if (CAPrefers60HzAPT(void)::once[0] != -1)
    dispatch_once(CAPrefers60HzAPT(void)::once, &__block_literal_global_2);
  if (CAPrefers60HzAPT(void)::enabled)
  {
    if (v21
      && (*(_BYTE *)(v476 + 292) & 4) != 0
      && (*(_BYTE *)(v476 + 37) & 8) != 0
      && (*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 136))(this) == 2)
    {
      v26 = 0;
    }
    else
    {
      v26 = *((_DWORD *)this + 6788) == 0;
      if (!v21)
      {
LABEL_52:
        v27 = 0;
        goto LABEL_54;
      }
    }
  }
  else
  {
LABEL_48:
    v26 = 0;
    if (!v21)
      goto LABEL_52;
  }
  if ((*((_DWORD *)this + 156) & 0x10) == 0)
    goto LABEL_52;
  v27 = (*(unsigned __int8 *)(v476 + 45) >> 5) & 1;
LABEL_54:
  v434 = __PAIR64__(v26, v27);
  if (*((double *)this + 3263) >= *((double *)v458 + 9))
  {
    v34 = 1;
  }
  else
  {
    if (CADeviceNeedsTripleBufferedTTL::once != -1)
    {
      v385 = v27;
      dispatch_once(&CADeviceNeedsTripleBufferedTTL::once, &__block_literal_global_265);
      v27 = v385;
      v26 = HIDWORD(v434);
    }
    v28 = CADeviceNeedsTripleBufferedTTL::wants_triple_buffered_ttl;
    if (initialized[0] != -1)
    {
      dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
      v27 = v434;
      v26 = HIDWORD(v434);
    }
    v29 = *(float *)&dword_1ECDC6A0C;
    if (v28)
      _ZF = 1;
    else
      _ZF = v29 == 1;
    v31 = !_ZF || v29 == 2;
    v32 = !v31;
    if (!v31 && v21)
    {
      if ((*(_BYTE *)(v476 + 292) & 4) != 0)
        v34 = (*(unsigned __int8 *)(v476 + 37) >> 3) & 1;
      else
        v34 = 0;
    }
    else
    {
      v34 = v32 ^ 1;
    }
  }
  if (v17 == 1 || v23)
  {
    v36 = !v21;
    if ((*((_DWORD *)v458 + 266) & 0x400) == 0)
      v36 = 1;
    v35 = v36 | v26 | v27;
  }
  else
  {
    v35 = v26 | v27;
  }
  if (((v35 | v34) & 1) == 0)
    v35 = *((_BYTE *)this + 28099) != 0;
  v37 = v24 * 0.125;
  v452 = (v459 & 4 | v7) != 0;
  if (*((_BYTE *)this + 28100))
    v38 = 0;
  else
    v38 = v35;
  os_unfair_lock_lock((os_unfair_lock_t)this + 6504);
  CA::WindowServer::IOMFBDisplay::initialize_timings(this);
  v39 = *((_QWORD *)this + 3254);
  if (v39)
    atomic_store(v38, (unsigned __int8 *)(v39 + 2));
  v40 = v25 - v37;
  os_unfair_lock_unlock((os_unfair_lock_t)this + 6504);
  if (v38)
  {
    v41 = (*(double (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 760))(this);
    v40 = v40
        + v41
        * (double)(*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 768))(this);
  }
  v447 = v38;
  *((_BYTE *)this + 28102) = v38;
  if (v21)
  {
    if (*(_QWORD *)v476)
    {
      v42 = CA::Render::Handle::lock_context(*(CA::Render::Handle **)v476);
      if (v42)
      {
        v44 = v42;
        v45 = *(CA::Render::LayerNode **)(v42 + 384);
        if (v45)
        {
          v46 = (unsigned int *)((char *)v45 + 16);
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
            CA::Render::LayerNode::delete_node(v45, v43);
          *(_QWORD *)(v44 + 384) = 0;
        }
        pthread_mutex_unlock((pthread_mutex_t *)(v44 + 72));
        v49 = (unsigned int *)(v44 + 8);
        do
        {
          v50 = __ldaxr(v49);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, v49));
        if (!v51)
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
      }
    }
  }
  v52 = *((double *)v458 + 15) + 0.0001;
  if (v40 < v52)
    v40 = *((double *)v458 + 15) + 0.0001;
  if (*((unsigned __int8 *)this + 28099) != v38)
  {
    v384 = *((_QWORD *)this + 3188);
    if (v384)
    {
      if (v40 + -0.001 >= v52)
        v52 = v40 + -0.001;
      *(_QWORD *)(v384 + 16) = CAHostTimeWithTime(v52);
    }
  }
  v53 = *(_DWORD *)v465;
  v435 = (_DWORD *)((char *)this + 48 * *(unsigned int *)v465 + 25752);
  v54 = (unsigned int *)((char *)this + 48 * *(unsigned int *)v465 + 25776);
  v469 = *(_DWORD *)v465;
  if (!*v54)
  {
    CA::IOMobileFramebuffer::swap_begin((CA::WindowServer::IOMFBDisplay *)((char *)this + 25536), (unsigned int *)this + 12 * v53 + 6444);
    v53 = v469;
  }
  v457 = (char *)this + 48 * v53 + 25792;
  *v457 &= ~0x20u;
  v55 = v459;
  if (*((_BYTE *)this + 28106))
    v56 = CACurrentMediaTimeDelta();
  else
    v56 = 0.0;
  *((double *)v458 + 98) = v56 + v40;
  *(_DWORD *)v491 = 1;
  *(_QWORD *)buf = CAHostTimeWithTime(v56 + v40);
  IOMobileFramebufferSwapSetTimestamps();
  v57 = CAHostTimeWithTime(*((double *)this + 3310) + v56);
  *(_DWORD *)v491 = 2;
  *(_QWORD *)buf = v57;
  IOMobileFramebufferSwapSetTimestamps();
  v58 = *((double *)v458 + 95);
  if (v58 != 0.0)
  {
    *(_DWORD *)v491 = 3;
    *(_QWORD *)buf = CAHostTimeWithTime(v58 + v56);
    IOMobileFramebufferSwapSetTimestamps();
  }
  v467 = (CA::IOMobileFramebuffer **)((char *)this + 25536);
  v464 = (char *)this + 25361;
  if (*((_BYTE *)this + 28063) || *((_BYTE *)this + 28050) != ((*((_DWORD *)this + 156) >> 2) & 1))
    IOMobileFramebufferSwapSetBackgroundColor();
  *((_BYTE *)this + 28050) = (*((_DWORD *)this + 156) & 4) != 0;
  if (*((_BYTE *)this + 28115))
  {
    IOMobileFramebufferSwapSetColorRemapMode();
    *((_BYTE *)this + 28115) = 0;
  }
  if (*v464)
  {
    if (CADeviceNeedsIRDCFlush::once != -1)
      dispatch_once(&CADeviceNeedsIRDCFlush::once, &__block_literal_global_288);
    if (CADeviceNeedsIRDCFlush::b)
    {
      IOMobileFramebufferSwapSetParams();
      if (BYTE9(xmmword_1ECDC6A90))
LABEL_587:
        kdebug_trace();
    }
    *v464 = 0;
  }
  v466 = v54;
  CA::WindowServer::IOMFBDisplay::update_blend_display_color_spaces(this);
  CA::WindowServer::IOMFBDisplay::update_system_gamma(this, v59);
  CA::WindowServer::IOMFBDisplay::update_blackpoint_adaptation(this);
  CA::WindowServer::IOMFBDisplay::update_gamma_adjustment(this);
  updated = CA::WindowServer::IOMFBDisplay::update_user_adjustment(this);
  if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, double))(*(_QWORD *)this + 1536))(this, updated) & 1) == 0
    && *((_BYTE *)this + 28066)
    && CA::WindowServer::IOMFBDisplay::set_framebuffer_ax_matrix(this))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v61 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v61, OS_LOG_TYPE_ERROR, "IOMFB was not able to set accessibility matrix.\n", buf, 2u);
      }
    }
  }
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  v62 = (char *)this + 26328;
  if (*(float *)&dword_1ECDC6950)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::flattened_lock);
    if (CA::Render::flattened_cache)
    {
      if (initialized[0] != -1)
        dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
      v22 = 0;
      *(_DWORD *)v494 = *(float *)&dword_1ECDC6950;
      v54 = (unsigned int *)CA::Render::flattened_cache;
      *(_QWORD *)buf = &off_1E159A450;
      *(_QWORD *)&buf[8] = v494;
      v498.i64[1] = (uint64_t)buf;
      v63 = 1 << *(_DWORD *)CA::Render::flattened_cache;
      do
      {
        v64 = *(_QWORD **)(*((_QWORD *)v54 + 2) + 8 * v22);
        if (v64)
        {
          while (1)
          {
            v65 = v64[3];
            LODWORD(v496[0].f64[0]) = v64[2];
            *(_QWORD *)v491 = v65;
            if (!v498.i64[1])
              break;
            (*(void (**)(uint64_t, float64x2_t *, uint8_t *))(*(_QWORD *)v498.i64[1] + 48))(v498.i64[1], v496, v491);
            v64 = (_QWORD *)*v64;
            if (!v64)
              goto LABEL_143;
          }
          std::__throw_bad_function_call[abi:nn180100]();
          goto LABEL_587;
        }
LABEL_143:
        ++v22;
      }
      while (v22 != v63);
      v66 = *(double *)&v498.i64[1];
      v55 = v459;
      v62 = (char *)this + 26328;
      if ((uint8_t *)v498.i64[1] == buf)
      {
        v67 = 4;
        v66 = COERCE_DOUBLE(buf);
        v22 = (uint64_t)v458;
      }
      else
      {
        v22 = (uint64_t)v458;
        if (!v498.i64[1])
          goto LABEL_149;
        v67 = 5;
      }
      (*(void (**)(void))(**(_QWORD **)&v66 + 8 * v67))();
    }
LABEL_149:
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::flattened_lock);
    if (*(float *)&dword_1ECDC6950 > 0.0)
      *(float *)&dword_1ECDC6950 = *(float *)&dword_1ECDC6950 + -1.0;
  }
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  if (*(float *)&dword_1ECDC6954 && *(float *)&dword_1ECDC6954 > 0.0)
    *(float *)&dword_1ECDC6954 = *(float *)&dword_1ECDC6954 + -1.0;
  v68 = v452 | v16;
  if (v21)
  {
    v69 = v472;
    if (!v472 && (v62[1723] || (v62[1735] != 0) | v68 & 1))
    {
      v72 = (const CA::Rect *)*(unsigned int *)(v476 + 40);
      v73 = (__IOSurface *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v476 + 24) + 160))(*(_QWORD *)(v476 + 24));
      v74 = *(float64x2_t *)(v476 + 208);
      *(_OWORD *)buf = *(_OWORD *)(v476 + 192);
      v498 = (int8x16_t)v74;
      v75 = *(float64x2_t *)(v476 + 240);
      *(_OWORD *)v491 = *(_OWORD *)(v476 + 224);
      v492 = v75;
      if (initialized[0] != -1)
        dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
      if (*(float *)&dword_1ECDC693C)
      {
        v76 = CAIOSurfaceWriteToFileWithSuffix(v73, "detached-src");
        if (v76)
        {
          if (*(float *)&dword_1ECDC693C > 0.0)
            *(float *)&dword_1ECDC693C = *(float *)&dword_1ECDC693C + -1.0;
          free(v76);
        }
      }
      CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)*((unsigned __int8 *)this + 26385), *(CA::Render::Update **)(v476 + 24), (CA::WindowServer::Surface *)buf, (const CA::Rect *)v491, v72, *v466, *(_DWORD *)(v22 + 248), *(unsigned int *)v419, v419[4]);
      v77 = *((_DWORD *)this + *((unsigned __int8 *)this + 26385) + 6792);
      ID = IOSurfaceGetID(v73);
      v79 = *((unsigned __int8 *)this + 26385);
      if (v77 == ID)
      {
        v453 = 0;
      }
      else
      {
        v453 = CA::WindowServer::layer_value[v79 + 3];
        v80 = IOSurfaceGetID(v73);
        LODWORD(v79) = *((unsigned __int8 *)this + 26385);
        *((_DWORD *)this + *((unsigned __int8 *)this + 26385) + 6792) = v80;
      }
      v69 = v472;
      memset(v496, 0, sizeof(v496));
      *(_OWORD *)v494 = 0u;
      v495 = 0u;
      v70 = v466;
      CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)(2 * ((_DWORD)v79 == 0)), 0, (CA::WindowServer::Surface *)v496, (const CA::Rect *)v494, 0, *v466, *(_DWORD *)(v22 + 248), *(unsigned int *)v421, v421[4]);
    }
    else
    {
      v453 = 0;
      v70 = v466;
    }
    v81 = *(_QWORD *)(v476 + 24);
    *(_DWORD *)(v81 + 224) = *(_DWORD *)(v81 + 224) & 0xFFFF0000 | (unsigned __int16)(*(_DWORD *)(v81 + 224) + 1);
    v71 = v469;
    *((_QWORD *)this + 6 * v469 + 3221) = v81;
    if ((*(_BYTE *)(v476 + 292) & 4) != 0)
      *v457 |= 2u;
  }
  else
  {
    v69 = v472;
    if (v62[1723] || (v62[1735] != 0) | v68 & 1)
    {
      *(_OWORD *)buf = 0u;
      v498 = 0u;
      *(_OWORD *)v491 = 0u;
      v492 = 0u;
      v70 = v466;
      CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)1, 0, (CA::WindowServer::Surface *)buf, (const CA::Rect *)v491, 0, *v466, *(_DWORD *)(v22 + 248), *(unsigned int *)v419, v419[4]);
      *(_OWORD *)buf = 0u;
      v498 = 0u;
      *(_OWORD *)v491 = 0u;
      v492 = 0u;
      CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)2, 0, (CA::WindowServer::Surface *)buf, (const CA::Rect *)v491, 0, *v466, *(_DWORD *)(v22 + 248), v420, v423);
      v453 = 0;
    }
    else
    {
      v453 = 0;
      v70 = v466;
    }
    v71 = v469;
  }
  v82 = *((_QWORD *)this + 6 * v71 + 3220);
  *(_DWORD *)(v82 + 12) = *v70;
  if ((options_are_visual & 1) != 0 || !*(_QWORD *)(v82 + 32) || (*(_BYTE *)(v82 + 132) & 4) != 0)
  {
    v84 = (char *)this + 25672;
    v85 = (CA::IOMobileFramebuffer **)((char *)this + 25536);
    goto LABEL_184;
  }
  v83 = *(_DWORD *)(v22 + 268);
  if ((v21 & (v83 >> 3)) == 1)
  {
    v84 = (char *)this + 25672;
    v85 = (CA::IOMobileFramebuffer **)((char *)this + 25536);
    if ((*(_BYTE *)(v476 + 37) & 1) == 0)
      goto LABEL_184;
  }
  else
  {
    v84 = (char *)this + 25672;
    v85 = (CA::IOMobileFramebuffer **)((char *)this + 25536);
    if ((v83 & 8) != 0)
      goto LABEL_184;
  }
  *(_BYTE *)(v82 + 132) |= 4u;
LABEL_184:
  v86 = *(CA::Shape **)(v82 + 16);
  if (!v86)
  {
LABEL_190:
    *(_QWORD *)(v82 + 16) = 1;
    goto LABEL_191;
  }
  if ((v86 & 1) != 0)
  {
    if (v86 == (CA::Shape *)1)
      goto LABEL_191;
    goto LABEL_189;
  }
  if (*((_DWORD *)v86 + 1) != 6)
  {
LABEL_189:
    CA::Shape::unref(v86);
    goto LABEL_190;
  }
LABEL_191:
  if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1496))(this))
    CA::shape_union((CA::Shape **)(v82 + 16), *(CA::Shape ***)(v22 + 24), v87);
  v90 = *(_BYTE *)(v82 + 132);
  *(_BYTE *)(v82 + 132) = v90 & 0xF7;
  if (v476)
  {
    v91 = (float *)((char *)this + 26328);
    if ((*(_BYTE *)(v476 + 292) & 1) != 0
      || (*(_DWORD *)(v22 + 1064) & 0x800000) == 0
      || (*(_BYTE *)(v22 + 268) & 4) != 0)
    {
      v92 = 0;
    }
    else
    {
      v92 = *(_QWORD *)(v22 + 32);
    }
  }
  else
  {
    v92 = 0;
    v91 = (float *)((char *)this + 26328);
  }
  if (options_are_visual == 1)
    v92 = 0;
  v445 = v82;
  if ((v69 & 1) == 0)
  {
    if ((*(_QWORD *)(v82 + 32) || *(_QWORD *)(v82 + 40)) && (v90 & 4) == 0)
    {
      if (!v92)
        goto LABEL_203;
      if ((v92 & 1) != 0)
      {
        if (v92 != 1)
          goto LABEL_203;
      }
      else if (*(_DWORD *)(v92 + 4) != 6)
      {
        goto LABEL_203;
      }
    }
    v109 = (CA::Render::Update *)*((unsigned __int8 *)v91 + 56);
    *(_OWORD *)buf = 0u;
    v498 = 0u;
    *(_OWORD *)v491 = 0u;
    v492 = 0u;
    CA::WindowServer::IOMFBDisplay::swap_set_layer(this, v109, 0, (CA::WindowServer::Surface *)buf, (const CA::Rect *)v491, 0, *v466, *(_DWORD *)(v22 + 248), *(unsigned int *)v419, v419[4]);
    v441 = 0;
    v106 = v55;
    goto LABEL_396;
  }
LABEL_203:
  v93 = (_DWORD *)((char *)this + 745);
  v442 = v92;
  if ((v90 & 2) != 0 && (*v457 & 0x10) == 0)
  {
    *(_BYTE *)(v82 + 132) = v90 & 0xF5;
    v94 = CA::WindowServer::IOMFBDisplay::current_page_surface(this, 1, 0, 0, 0, *(_QWORD *)(v22 + 288));
    if (!v94)
    {
      v99 = -536870212;
      goto LABEL_633;
    }
    v95 = (CA::WindowServer::Surface *)v94;
    if (!*((_BYTE *)v91 + 1740))
      goto LABEL_593;
    v96 = byte_1ECDC6B0D;
    v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v94 + 216))(v94);
    v98 = v97;
    if (v96)
    {
      v386 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1392))(this);
      if ((v386 | v98) != v386)
        goto LABEL_209;
    }
    else if (v97)
    {
LABEL_209:
      v94 = 0;
      v99 = -536870212;
      v91 = (float *)((char *)this + 26328);
LABEL_633:
      v405 = v91;
      v406 = *((unsigned __int8 *)v91 + 56);
      v407 = *((unsigned __int8 *)v405 + 1740);
      if (*((_QWORD *)this + 3251) || (_DWORD)v406 == 2)
      {
        v408 = v407 != 0;
      }
      else
      {
        if (!v407)
          goto LABEL_650;
        if ((*((_DWORD *)this + 14) & 0x10) != 0)
          v406 = v406;
        else
          v406 = 2;
        v408 = 1;
      }
      if (v99 == -536870191 && v408)
      {
        if (v94)
        {
          v409 = (CA::Render::Update *)v94;
          if ((*(uint64_t (**)(void))(*(_QWORD *)v94 + 160))())
          {
            *(_OWORD *)buf = 0u;
            v498 = 0u;
            *(_OWORD *)v491 = 0u;
            v492 = 0u;
            CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)v406, v409, (CA::WindowServer::Surface *)buf, (const CA::Rect *)v491, 0, *v466, *(_DWORD *)(v22 + 248), *(unsigned int *)v419, v419[4]);
          }
        }
        v410 = *(CA::WindowServer::Surface **)(v82 + 32);
        if (v410)
        {
          CA::WindowServer::Surface::unref(v410);
          *(_QWORD *)(v82 + 32) = 0;
        }
        v411 = (char *)this + 48 * v469;
        v412 = (CA::WindowServer::Surface *)*((_QWORD *)v411 + 3221);
        v413 = v466;
        if (v412)
        {
          v414 = v411 + 25768;
          CA::WindowServer::Surface::unref(v412);
          *v414 = 0;
        }
        goto LABEL_651;
      }
LABEL_650:
      *(_OWORD *)buf = 0u;
      v498 = 0u;
      *(_OWORD *)v491 = 0u;
      v492 = 0u;
      v413 = v466;
      CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)v406, 0, (CA::WindowServer::Surface *)buf, (const CA::Rect *)v491, 0, *v466, *(_DWORD *)(v22 + 248), *(unsigned int *)v419, v419[4]);
LABEL_651:
      IOMobileFramebufferSwapCancel();
      *v413 = 0;
      v416 = *((_QWORD *)this + 3307);
      if (v416)
      {
        if (v99 == -536870184
          && (v55 & 1) != 0
          && *((_BYTE *)this + 28068)
          && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v416 + 8))(*((_QWORD *)this + 3307)))
        {
          v417 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v416 + 16))(v416);
          v418 = *(_DWORD *)(v22 + 248);
          *(_QWORD *)buf = v417;
          *(_DWORD *)&buf[8] = v418;
          v415 = X::small_vector_base<std::pair<unsigned long,unsigned int>>::push_back((uint64_t)this + 27936, (__n128 *)buf);
        }
        (**(void (***)(uint64_t, __n128))v416)(v416, v415);
      }
      v12 = v99 != -536870184;
      goto LABEL_659;
    }
    v91 = (float *)((char *)this + 26328);
    if (!*((_BYTE *)this + 28068))
    {
LABEL_593:
      v94 = CA::WindowServer::IOMFBDisplay::current_page_surface(this, 0, 1, 0, v69, *(_QWORD *)(v22 + 288));
      v441 = 0;
      if (v94)
        v99 = 0;
      else
        v99 = -536870212;
      goto LABEL_596;
    }
    v506.width = (double)(int)((*((_DWORD *)this + 40) + 1) & 0xFFFFFFFE);
    v506.height = (double)(int)((*((_DWORD *)this + 41) + 1) & 0xFFFFFFFE);
    *(_QWORD *)buf = 0;
    wireless_surface_options = CA::IOMobileFramebuffer::get_wireless_surface_options(*v85, *(double *)(v22 + 72), v506, (__IOSurface **)buf);
    if (wireless_surface_options)
    {
      v99 = wireless_surface_options;
      v441 = 0;
      v94 = 0;
      goto LABEL_596;
    }
    v94 = (uint64_t)CA::WindowServer::IOSurface::wrap_buffer(this, *(IOSurfaceRef *)buf, 0, 0);
    *(_QWORD *)(v82 + 32) = v94;
    if (!v94)
    {
      v441 = 0;
      v99 = -536870211;
      goto LABEL_596;
    }
    v402 = *(_QWORD *)(v22 + 304);
    v403 = *((_QWORD *)this + 3418);
    if (v402 == -1 || v402 <= v403)
    {
      if (!v403)
      {
        v99 = 0;
        v441 = 1;
        goto LABEL_596;
      }
    }
    else
    {
      *((_QWORD *)this + 3418) = v402;
    }
    v432 = v94;
    if ((*(uint64_t (**)(void))(*(_QWORD *)v94 + 160))())
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v82 + 32) + 160))(*(_QWORD *)(v82 + 32));
      IOSurfaceSetIndexedTimestamp();
    }
    v99 = 0;
    v441 = 1;
    v94 = v432;
LABEL_596:
    if (v99)
      v388 = 1;
    else
      v388 = v69;
    if ((v388 & 1) != 0)
    {
      v93 = (_DWORD *)((char *)this + 745);
      if (v99)
        goto LABEL_633;
      goto LABEL_211;
    }
    v431 = (CA::WindowServer::Surface *)v94;
    v389 = (void (***)(_QWORD))*((_QWORD *)this + 3307);
    if (v389)
      (**v389)(v389);
    if ((*((_BYTE *)this + 745) & 0x10) != 0)
      v390 = 1536;
    else
      v390 = 1024;
    if (*((_BYTE *)v91 + 1740))
    {
      v391 = CA::WindowServer::Display::Mode::is_hdr(v448);
      if (!CA::WindowServer::Display::has_hdr_clone(this))
      {
        if (v391)
        {
          v391 = 1;
LABEL_619:
          v503 = 0u;
          v504 = 0u;
          v501 = 0u;
          v502 = 0u;
          v499 = 0u;
          v500 = 0u;
          *(_OWORD *)buf = 0u;
          v498 = 0u;
          CA::WindowServer::Display::display_attributes((CA::WindowServer::Display *)buf, (uint64_t)this);
          if ((*(_DWORD *)(v22 + 268) & 0x38000) != 0
            || v391 && (*(unsigned int (**)(CA::WindowServer::Surface *))(*(_QWORD *)v95 + 128))(v95))
          {
            v400 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)v431 + 216))(v431);
            v401 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, CA::WindowServer::Surface *, CA::WindowServer::Surface *, uint8_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 640))(this, v431, v95, buf, v22, v390, v400, 1);
          }
          else
          {
            v401 = CA::WindowServer::IOMFBDisplay::copy_surface(this, v431, v95, v390, 0, 0, 0, 0, v399);
          }
          v69 = v472;
          goto LABEL_631;
        }
LABEL_615:
        v393 = 0uLL;
        *(_OWORD *)buf = 0u;
        v498 = 0u;
        if (v438)
        {
          v394 = DWORD2(v436);
          if (SDWORD2(v436) <= SHIDWORD(v436))
            v394 = HIDWORD(v436);
          v393.i32[0] = 1073741822;
          v392.i32[0] = v394;
          v395.i64[0] = (int)v436;
          v395.i64[1] = SDWORD1(v436);
          v393 = (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v392, v393), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v395));
          v395.i64[0] = SDWORD2(v436);
          v395.i64[1] = SHIDWORD(v436);
          v396 = vdup_n_s32(v394 > 1073741822);
          v397 = (int8x16_t)vcvtq_f64_s64(v395);
          v395.i64[0] = v396.u32[0];
          v395.i64[1] = v396.u32[1];
          *(int32x4_t *)buf = v393;
          v498 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v395, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v397);
          v390 = v390 | 0x10000;
          v398 = buf;
        }
        else
        {
          v398 = 0;
        }
        v69 = v472;
        v401 = CA::WindowServer::IOMFBDisplay::copy_surface(this, v431, v95, v390, 0, (CA::Rect *)v398, 0, 0, *(float *)v393.i32);
LABEL_631:
        v404 = *v457 & 0xFE | v401;
        *v457 = v404;
        v93 = (_DWORD *)((char *)this + 745);
        v94 = (uint64_t)v431;
        if ((v404 & 1) == 0)
        {
          v99 = -536870191;
          goto LABEL_633;
        }
        goto LABEL_211;
      }
    }
    else
    {
      if (!CA::WindowServer::Display::has_hdr_clone(this))
        goto LABEL_615;
      v391 = 0;
    }
    if ((*(_DWORD *)(v22 + 412) - 2) < 4 || v391)
      goto LABEL_619;
    goto LABEL_615;
  }
  v441 = 0;
LABEL_211:
  if ((v55 & 1) != 0 && (*(_BYTE *)(v82 + 132) & 1) != 0)
    *v457 |= 1u;
  v100 = *(CA::Render::Update **)(v82 + 32);
  if (!v69)
    goto LABEL_229;
  v101 = *(_QWORD *)(v22 + 16);
  memset(buf, 0, sizeof(buf));
  CA::Shape::get_bounds(v101, (int *)buf);
  v102 = *(_DWORD *)&buf[8];
  if (*(int *)&buf[8] >= *(int *)&buf[12])
    v102 = *(_DWORD *)&buf[12];
  if (v102 > 0)
  {
    v103 = v442;
    goto LABEL_227;
  }
  v103 = v442;
  if (!*((_BYTE *)v91 + 1723))
  {
LABEL_229:
    v106 = v55;
    goto LABEL_294;
  }
LABEL_227:
  v104 = *(CA::WindowServer::Surface **)(v82 + 40);
  if (v476)
    v105 = *(_QWORD *)(v476 + 24);
  else
    v105 = 0;
  v449 = v105;
  if (((v105 != 0) & (*(unsigned __int8 *)(v82 + 132) >> 2)) != 0)
    v107 = 0;
  else
    v107 = *(_QWORD **)(v82 + 40);
  v106 = v55;
  v460 = v93;
  if (v103)
  {
    if ((v103 & 1) != 0)
    {
      if (v103 == 1)
        goto LABEL_238;
    }
    else if (*(_DWORD *)(v103 + 4) == 6)
    {
LABEL_238:
      v100 = (CA::Render::Update *)CA::WindowServer::IOMFBDisplay::current_page_surface(this, 0, 1, 0, 1, *(_QWORD *)(v22 + 288));
LABEL_247:
      v114 = 0;
      v113 = 0;
LABEL_261:
      v69 = v472;
      goto LABEL_270;
    }
  }
  v428 = v104;
  v110 = CA::WindowServer::IOMFBDisplay::current_page_surface(this, 0, 1, 0, 1, *(_QWORD *)(v22 + 288));
  v100 = (CA::Render::Update *)v110;
  if (!v107)
    goto LABEL_247;
  v112 = *(unsigned int *)(v110 + 56);
  v111 = *(unsigned int *)(v110 + 60);
  if (__PAIR64__(v111, v112) == v107[7])
  {
    v113 = 0;
    v69 = v472;
  }
  else
  {
    if ((*v93 & 0x10) != 0)
      v115 = 4608;
    else
      v115 = 4096;
    v426 = *((_DWORD *)v107 + 16);
    v425 = (*(uint64_t (**)(_QWORD *))(*v107 + 24))(v107);
    v116 = (*(uint64_t (**)(_QWORD *))(*v107 + 56))(v107);
    v117 = (*(uint64_t (**)(_QWORD *))(*v107 + 216))(v107);
    surface = (CA::WindowServer::Surface *)CA::WindowServer::Display::allocate_surface((uint64_t)this, v112, v111, (CA::Render *)v426, v425, v116, 0, v117, (uint64_t)CFSTR("CA Backward DM"), 0);
    v120 = 0uLL;
    *(_OWORD *)buf = 0u;
    v498 = 0u;
    if (v438)
    {
      v121 = DWORD2(v436);
      if (SDWORD2(v436) <= SHIDWORD(v436))
        v121 = HIDWORD(v436);
      v120.i32[0] = 1073741822;
      v119.i32[0] = v121;
      v122.i64[0] = (int)v436;
      v122.i64[1] = SDWORD1(v436);
      v120 = (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v119, v120), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v122));
      v122.i64[0] = SDWORD2(v436);
      v122.i64[1] = SHIDWORD(v436);
      v123 = vdup_n_s32(v121 > 1073741822);
      v124 = (int8x16_t)vcvtq_f64_s64(v122);
      v122.i64[0] = v123.u32[0];
      v122.i64[1] = v123.u32[1];
      *(int32x4_t *)buf = v120;
      v498 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v122, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v124);
      v125 = v115 | 0x10000;
      v126 = buf;
    }
    else
    {
      v126 = 0;
      v125 = v115;
    }
    v127 = (float (***)(_QWORD))*((_QWORD *)this + 3307);
    v93 = v460;
    if (v127)
      *(float *)v120.i32 = (**v127)(v127);
    v128 = CA::WindowServer::IOMFBDisplay::copy_surface(this, surface, (CA::WindowServer::Surface *)v107, v125, 0, (CA::Rect *)v126, 0, 0, *(float *)v120.i32);
    v129 = surface;
    v113 = v128;
    if ((v128 & 1) != 0)
    {
      v114 = v129;
      v91 = (float *)((char *)this + 26328);
      goto LABEL_261;
    }
    v69 = v472;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v130 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v491 = 0;
        _os_log_impl(&dword_184457000, v130, OS_LOG_TYPE_DEFAULT, "Failed to copy surface prior to backwardDM\n", v491, 2u);
      }
    }
    if (v129)
      CA::WindowServer::Surface::unref(v129);
    v91 = (float *)((char *)this + 26328);
  }
  v114 = v428;
LABEL_270:
  v131 = (_QWORD *)*((_QWORD *)this + 39);
  if (v131)
  {
    v488 = 0x3C00000000000000;
    if (v476)
    {
      v132 = *(_OWORD *)(v476 + 192);
      v133 = *(float64x2_t *)(v476 + 208);
      v134 = *(float64x2_t *)(v476 + 224);
      v135 = *(float64x2_t *)(v476 + 240);
    }
    else
    {
      v132 = 0uLL;
      v133 = 0uLL;
      v134 = 0uLL;
      v135 = 0uLL;
    }
    *(_OWORD *)v491 = v132;
    v492 = v133;
    v496[0] = v134;
    v496[1] = v135;
    if (v114)
    {
      v137 = *((_DWORD *)v114 + 14);
      v136 = *((_DWORD *)v114 + 15);
      memset(v494, 0, sizeof(v494));
      *(double *)&v495 = (double)v137;
      *((double *)&v495 + 1) = (double)v136;
      v139 = *((_DWORD *)v100 + 14);
      v138 = *((_DWORD *)v100 + 15);
      v489 = 0uLL;
      *(double *)&v490 = (double)v139;
      *((double *)&v490 + 1) = (double)v138;
      if (v442)
      {
        if ((v442 & 1) == 0)
        {
          if (*(_DWORD *)(v442 + 4) == 6)
            goto LABEL_286;
LABEL_281:
          if (v137 == v139 && v136 == v138)
          {
            memset(buf, 0, sizeof(buf));
            v477 = v113;
            v140 = v114;
            CA::Shape::get_bounds(v442, (int *)buf);
            v142.i32[1] = *(_DWORD *)&buf[12];
            v143.i64[0] = *(int *)buf;
            v143.i64[1] = *(int *)&buf[4];
            v144 = (int8x16_t)vcvtq_f64_s64(v143);
            v145 = *(_DWORD *)&buf[12];
            v143.i64[0] = *(int *)&buf[8];
            v143.i64[1] = *(int *)&buf[12];
            v146 = v143;
            if (*(int *)&buf[8] > *(int *)&buf[12])
              v145 = *(_DWORD *)&buf[8];
            v142.i32[0] = v145;
            v141.i32[0] = 1073741822;
            v147 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v142, v141), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), v144);
            v148 = vdup_n_s32(v145 > 1073741822);
            v149.i64[0] = v148.u32[0];
            v149.i64[1] = v148.u32[1];
            v427 = v147;
            v429 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v149, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), (int8x16_t)vcvtq_f64_s64(v146));
            CA::BoundsImpl::intersect((uint64_t)v494, v147, v429);
            CA::BoundsImpl::intersect((uint64_t)&v489, v427, v429);
            v114 = v140;
            v113 = v477;
          }
          goto LABEL_286;
        }
        if (v442 != 1)
          goto LABEL_281;
      }
    }
    else
    {
      *(_OWORD *)v494 = 0u;
      v495 = 0u;
      v489 = 0u;
      v490 = 0u;
    }
LABEL_286:
    v499 = 0u;
    v500 = 0u;
    *(_OWORD *)buf = 0u;
    v498 = 0u;
    if (!*((_BYTE *)v91 + 604))
    {
      v150 = *((float64x2_t *)this + 1680);
      v151 = *((_OWORD *)this + 1681);
      v152 = *((_OWORD *)this + 1682);
      *(_OWORD *)buf = *((_OWORD *)this + 1679);
      v498 = (int8x16_t)v150;
      v499 = v151;
      v500 = v152;
      v478 = v131;
      v153 = v69;
      v154 = v106;
      v155 = v113;
      v156 = v114;
      CA::Mat4Impl::mat4_scale((CA::Mat4Impl *)buf, v108, v91[150], v91[150], v91[150]);
      v114 = v156;
      v113 = v155;
      v106 = v154;
      v69 = v153;
      v131 = v478;
      *((_BYTE *)v91 + 604) = 1;
    }
    v157 = v114;
    (*(void (**)(_QWORD, CA::Render::Update *, uint64_t, uint8_t *, float64x2_t *, CA::WindowServer::Surface *, uint8_t *, __int128 *))(*(_QWORD *)*v131 + 976))(*v131, v100, v449, v491, v496, v114, v494, &v489);
    v158 = (*((unsigned int *)v100 + 56) | ((unint64_t)*((unsigned __int8 *)v100 + 228) << 32)) & 0xFFFFFFFDFFFFFFFFLL;
    *((_DWORD *)v100 + 56) = *((_DWORD *)v100 + 56);
    *((_BYTE *)v100 + 228) = BYTE4(v158);
    v106 |= 3u;
    *((_BYTE *)v91 + 56) = 0;
    v486 = 0u;
    v487 = 0u;
    v484 = 0u;
    v485 = 0u;
    CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)1, 0, (CA::WindowServer::Surface *)&v486, (const CA::Rect *)&v484, 0, *v466, *(_DWORD *)(v22 + 248), &v488, (unint64_t)&v488 >> 32);
    v486 = 0u;
    v487 = 0u;
    v484 = 0u;
    v485 = 0u;
    CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)2, 0, (CA::WindowServer::Surface *)&v486, (const CA::Rect *)&v484, 0, *v466, *(_DWORD *)(v22 + 248), v422, v424);
    v114 = v157;
    v93 = v460;
  }
  if (v114)
    v159 = v113;
  else
    v159 = 0;
  if (v159 == 1)
    CA::WindowServer::Surface::unref(v114);
LABEL_294:
  if (!v100)
  {
LABEL_395:
    v84 = (char *)this + 25672;
    v85 = (CA::IOMobileFramebuffer **)((char *)this + 25536);
    goto LABEL_396;
  }
  memset(v491, 0, sizeof(v491));
  v160 = *((_QWORD *)v100 + 7);
  v161.i64[0] = v160;
  v161.i64[1] = HIDWORD(v160);
  v162 = vcvtq_f64_u64(v161);
  v163 = DWORD2(v436);
  v492 = v162;
  if (SDWORD2(v436) <= SHIDWORD(v436))
    v163 = HIDWORD(v436);
  v88.i32[0] = 1073741822;
  v89.i32[0] = v163;
  v164.i64[0] = (int)v436;
  v164.i64[1] = SDWORD1(v436);
  v165 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v89, v88), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v164));
  v164.i64[0] = SDWORD2(v436);
  v164.i64[1] = SHIDWORD(v436);
  v166 = (int8x16_t)vcvtq_f64_s64(v164);
  v167 = vdup_n_s32(v163 > 1073741822);
  v164.i64[0] = v167.u32[0];
  v164.i64[1] = v167.u32[1];
  v496[0] = (float64x2_t)v165;
  v496[1] = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v164, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v166);
  if (v438)
  {
    v496[0] = 0uLL;
    v496[1] = v162;
  }
  v168 = (const CA::Rect *)(32 * *((unsigned __int8 *)v91 + 1748));
  if ((*((_DWORD *)v100 + 56) & 0x40000000) != 0)
    v169 = (*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1544))(this) ^ 1;
  else
    v169 = 1;
  (*(void (**)(CA::Render::Update *, uint64_t))(*(_QWORD *)v100 + 120))(v100, v169);
  if ((*(_DWORD *)(v22 + 1064) & 0x2000000) != 0)
  {
    v170 = *(_QWORD *)(v22 + 56);
    if (v170)
    {
      if ((v170 & 1) != 0)
      {
        if (v170 == 1)
          goto LABEL_320;
      }
      else if (*(_DWORD *)(v170 + 4) == 6)
      {
        goto LABEL_320;
      }
      v171 = v492.f64[0] / v496[1].f64[0];
      memset(buf, 0, sizeof(buf));
      v172 = v492.f64[1] / v496[1].f64[1];
      CA::Shape::get_bounds(v170, (int *)buf);
      v174.i32[1] = *(_DWORD *)&buf[12];
      v175 = *(_DWORD *)&buf[12];
      v176.i64[0] = *(int *)buf;
      v176.i64[1] = *(int *)&buf[4];
      v177 = v176;
      v176.i64[0] = *(int *)&buf[8];
      v176.i64[1] = *(int *)&buf[12];
      v178 = v176;
      if (*(int *)&buf[8] > *(int *)&buf[12])
        v175 = *(_DWORD *)&buf[8];
      v174.i32[0] = v175;
      v173.i32[0] = 1073741822;
      v179 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v174, v173), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v177));
      v180 = (int8x16_t)vcvtq_f64_s64(v178);
      v181 = vdup_n_s32(v175 > 1073741822);
      v182.i64[0] = v181.u32[0];
      v182.i64[1] = v181.u32[1];
      v183 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v182, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v180);
      v496[0] = (float64x2_t)v179;
      v496[1] = (float64x2_t)v183;
      v184 = *(double *)v183.i64 >= 1.79769313e308 || v171 == 1.0;
      v185.i64[1] = v179.i64[1];
      v186.i64[1] = v183.i64[1];
      if (v184)
        v187 = 0;
      else
        v187 = -1;
      v188 = (int8x16_t)vdupq_n_s64(v187);
      *(double *)v186.i64 = v171 * *(double *)v183.i64;
      v189 = vbslq_s8(v188, v186, v183);
      *(double *)v185.i64 = v171 * *(double *)v179.i64;
      v190 = (float64x2_t)vbslq_s8(v188, v185, v179);
      if (v172 != 1.0 && *(double *)&v189.i64[1] < 1.79769313e308)
      {
        v190.f64[1] = vmuld_lane_f64(v172, v190, 1);
        *(double *)&v189.i64[1] = *(double *)&v189.i64[1] * v172;
      }
      *(float64x2_t *)v491 = v190;
      v492 = (float64x2_t)v189;
    }
  }
LABEL_320:
  CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)*((unsigned __int8 *)this + 26384), v100, (CA::WindowServer::Surface *)v491, (const CA::Rect *)v496, v168, *v466, *(_DWORD *)(v22 + 248), *(unsigned int *)v419, v419[4]);
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  v91 = (float *)((char *)this + 26328);
  if (*(float *)&dword_1ECDC6940)
  {
    v191 = (__IOSurface *)(*(uint64_t (**)(CA::Render::Update *))(*(_QWORD *)v100 + 160))(v100);
    CA::WindowServer::IOMFBDisplay::dump_framebuffer(this, v191);
  }
  v192 = *((_DWORD *)this + *((unsigned __int8 *)this + 26384) + 6792);
  v193 = (__IOSurface *)(*(uint64_t (**)(CA::Render::Update *))(*(_QWORD *)v100 + 160))(v100);
  if (v192 != IOSurfaceGetID(v193))
  {
    v453 |= CA::WindowServer::layer_value[*((unsigned __int8 *)this + 26384)];
    v194 = (__IOSurface *)(*(uint64_t (**)(CA::Render::Update *))(*(_QWORD *)v100 + 160))(v100);
    *((_DWORD *)this + *((unsigned __int8 *)this + 26384) + 6792) = IOSurfaceGetID(v194);
  }
  v195 = *(_BYTE *)v93;
  v84 = (char *)this + 25672;
  v85 = (CA::IOMobileFramebuffer **)((char *)this + 25536);
  if ((v195 & 4) != 0)
  {
    v200 = *((_QWORD *)this + 19);
    v199 = *((_QWORD *)this + 20);
    v201.i64[0] = (int)v199;
    v201.i64[1] = SHIDWORD(v199);
    v202 = vcvtq_f64_s64(v201);
    v204 = *((_QWORD *)this + 25);
    v203 = *((_QWORD *)this + 26);
    v201.i64[0] = (int)v203;
    v201.i64[1] = SHIDWORD(v203);
    v197 = vdivq_f64(v202, vcvtq_f64_s64(v201));
    v201.i64[0] = (int)v200;
    v201.i64[1] = SHIDWORD(v200);
    v205 = vcvtq_f64_s64(v201);
    v201.i64[0] = (int)v204;
    v201.i64[1] = SHIDWORD(v204);
    v196 = vmlsq_f64(v205, vcvtq_f64_s64(v201), v197);
    v198 = v197.f64[1];
  }
  else
  {
    v196 = 0uLL;
    v197.f64[0] = 1.0;
    v198 = 1.0;
  }
  v206 = *(_QWORD *)(v22 + 24);
  if (v206)
  {
    v461 = v197.f64[0];
    v479 = v196;
    memset(v494, 0, sizeof(v494));
    CA::Shape::get_bounds(v206, (int *)v494);
    if (*(int *)&v494[8] <= *(int *)&v494[12])
      v209 = *(_DWORD *)&v494[12];
    else
      v209 = *(_DWORD *)&v494[8];
    v207.i32[0] = 1073741822;
    v208.i32[0] = v209;
    v210.i64[0] = *(int *)v494;
    v210.i64[1] = *(int *)&v494[4];
    v211 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v208, v207), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v210));
    v212 = (double)*(int *)&v494[12];
    if (v209 <= 1073741822)
      v213 = (double)*(int *)&v494[8];
    else
      v213 = 1.79769313e308;
    if (v209 > 1073741822)
      v212 = 1.79769313e308;
    *(int8x16_t *)buf = v211;
    *(double *)v498.i64 = v213;
    *(double *)&v498.i64[1] = v212;
    if (!*((_BYTE *)this + 28093))
    {
      if (v461 != 1.0 && v213 < 1.79769313e308)
      {
        *(double *)buf = *(double *)v211.i64 * v461;
        *(double *)v498.i64 = v213 * v461;
      }
      if (v198 != 1.0 && v212 < 1.79769313e308)
      {
        *(double *)&buf[8] = *(double *)&v211.i64[1] * v198;
        *(double *)&v498.i64[1] = v212 * v198;
      }
      v214 = vaddq_f64(*(float64x2_t *)buf, v479);
      *(float64x2_t *)buf = v214;
      v215 = *(double *)&v498.i64[1];
      if (*(double *)v498.i64 <= *(double *)&v498.i64[1])
        v216 = *(double *)&v498.i64[1];
      else
        v216 = *(double *)v498.i64;
      if (v216 < 1.79769313e308)
      {
        if (*(double *)v498.i64 < *(double *)&v498.i64[1])
          v215 = *(double *)v498.i64;
        if (v215 > 0.0)
        {
          *(float64x2_t *)buf = vrndmq_f64(v214);
          v498 = (int8x16_t)vsubq_f64(vrndpq_f64(vaddq_f64(v214, (float64x2_t)v498)), *(float64x2_t *)buf);
        }
      }
      CA::BoundsImpl::intersect((uint64_t)buf, v496[0], v496[1]);
      v212 = *(double *)&v498.i64[1];
      v213 = *(double *)v498.i64;
    }
    if (v213 >= v212)
      v217 = v212;
    else
      v217 = v213;
    if (v217 > 0.0)
    {
      v218 = IOMobileFramebufferSwapDirtyRegion();
      if (v218)
      {
        v219 = v218;
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v220 = x_log_category_windowserver;
          if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v494 = 67109120;
            *(_DWORD *)&v494[4] = v219;
            _os_log_impl(&dword_184457000, v220, OS_LOG_TYPE_ERROR, "CADisplayIOMFB: swap_dirty_region returned error %x\n", v494, 8u);
          }
        }
      }
    }
    v91 = (float *)((char *)this + 26328);
    v69 = v472;
  }
  if (v442)
  {
    v221 = (v442 & 1) != 0 ? v442 == 1 : *(_DWORD *)(v442 + 4) == 6;
    v222 = v221;
    if (((v222 | v69) & 1) == 0)
    {
      v462 = v106;
      v499 = 0u;
      v500 = 0u;
      *(_OWORD *)buf = 0u;
      v498 = 0u;
      if (CA::Shape::rect_count((CA::Shape *)v442) >= 32)
        v223 = 1;
      else
        v223 = 4;
      v224 = CA::Shape::coalesce((CA::Shape *)v442, (CA::Bounds *)buf, v223);
      if (v224)
      {
        v225 = v224;
        v226 = (int8x16_t)vclezq_f64(v492);
        v227 = (int32x4_t)vdupq_laneq_s64((int64x2_t)v226, 1);
        v228 = vorrq_s8((int8x16_t)v227, v226);
        v229 = v228.i64[0];
        *(_OWORD *)v443 = *(_OWORD *)v491;
        v230 = vaddq_f64(*(float64x2_t *)v491, v492);
        v439 = v230;
        v231 = &buf[8];
        LODWORD(v230.f64[0]) = 1073741822;
        v480 = (int32x4_t)v230;
        v473 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
        v232 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
        *(int64x2_t *)v450 = v232;
        v232.i64[0] = -1;
        v437 = v232;
        do
        {
          v228.i64[0] = 0;
          v233 = *((_QWORD *)v231 - 1);
          v227.i64[0] = *(_QWORD *)v231;
          v234.i64[0] = (int)v233;
          v234.i64[1] = SHIDWORD(v233);
          v235 = (int8x16_t)vcvtq_f64_s64(v234);
          v236 = HIDWORD(*(_QWORD *)v231);
          v234.i64[0] = (int)*(_QWORD *)v231;
          v234.i64[1] = v236;
          v237 = v234;
          if (v234.i32[0] > v236)
            v236 = *(_QWORD *)v231;
          v227.i32[0] = v236;
          v238 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v227, v480), 0), v473, v235);
          v239 = vdup_n_s32(v236 > 1073741822);
          v240.i64[0] = v239.u32[0];
          v240.i64[1] = v239.u32[1];
          v241 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v240, 0x3FuLL)), *(int8x16_t *)v450, (int8x16_t)vcvtq_f64_s64(v237));
          v242 = (int8x16_t)vclezq_f64((float64x2_t)v241);
          v243 = (int64x2_t)vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v242, 1), v242);
          v244 = v243.i64[0];
          v228 = (int8x16_t)vdupq_lane_s64(vcgtq_s64((int64x2_t)v228, v243).i64[0], 0);
          v227 = (int32x4_t)vandq_s8(v241, v228);
          if ((v244 & 0x8000000000000000) == 0 && (v229 & 0x8000000000000000) == 0)
          {
            v228 = (int8x16_t)vmaxnmq_f64(v238, *(float64x2_t *)v443);
            v245 = (int8x16_t)vsubq_f64(vminnmq_f64(vaddq_f64(v238, (float64x2_t)v241), v439), (float64x2_t)v228);
            v246 = (int8x16_t)vclezq_f64((float64x2_t)v245);
            v227 = (int32x4_t)vandq_s8(v245, (int8x16_t)vdupq_lane_s64(vcgtq_s64((int64x2_t)vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v246, 1), v246), v437).i64[0], 0));
          }
          if (*(double *)v227.i64 >= *(double *)&v227.i64[1])
            v247 = *(double *)&v227.i64[1];
          else
            v247 = *(double *)v227.i64;
          if (v247 > 0.0)
          {
            if (BYTE9(xmmword_1ECDC6A90))
              kdebug_trace();
            active = IOMobileFramebufferSwapActiveRegion();
            if (active)
            {
              v249 = active;
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                v250 = x_log_category_windowserver;
                if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)v494 = 67109120;
                  *(_DWORD *)&v494[4] = v249;
                  _os_log_impl(&dword_184457000, v250, OS_LOG_TYPE_ERROR, "CADisplayIOMFB: swap_active_region returned error %x\n", v494, 8u);
                }
              }
            }
          }
          v231 += 16;
          --v225;
        }
        while (v225);
      }
      v22 = (uint64_t)v458;
      v106 = v462;
      v91 = (float *)((char *)this + 26328);
      goto LABEL_395;
    }
  }
LABEL_396:
  if ((v106 & 1) != 0)
  {
    v251 = *((_QWORD *)this + 3307);
    if (v251 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v251 + 8))(*((_QWORD *)this + 3307)))
    {
      *((_QWORD *)this + 6 * v469 + 3223) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v251 + 16))(v251);
      v106 |= 2u;
    }
    v91 = (float *)((char *)this + 26328);
  }
  if ((v106 & 2) != 0)
  {
    v252 = (void (***)(_QWORD))*((_QWORD *)this + 3307);
    if (v252)
      (**v252)(v252);
  }
  if (*((_BYTE *)v91 + 1761))
  {
    *(_QWORD *)&buf[8] = 0;
    v253 = 1 << *((_BYTE *)v91 + 56);
    *(_DWORD *)buf = 1;
    *(_DWORD *)&buf[4] = v253;
LABEL_408:
    IOMobileFramebufferSwapWorkaroundSettings();
    goto LABEL_409;
  }
  if (*((_BYTE *)v91 + 1762))
  {
    *(_QWORD *)&buf[4] = 0;
    *(_DWORD *)&buf[12] = 0;
    *(_DWORD *)buf = 2;
    goto LABEL_408;
  }
LABEL_409:
  v254 = mach_absolute_time();
  v255 = CATimeWithHostTime(v254);
  *(double *)(v22 + 128) = v255;
  *(_QWORD *)(v22 + 880) = v453;
  v256 = (_QWORD *)*((_QWORD *)this + 3188);
  if (v256)
  {
    v256[3] = CAHostTimeWithTime(v255);
    *v256 |= v453;
    (*(void (**)(CA::WindowServer::IOMFBDisplay *, uint64_t))(*(_QWORD *)this + 392))(this, 1);
  }
  v257 = CAHostTimeWithTime(*(double *)(v22 + 120));
  *(_DWORD *)v491 = 4;
  *(_QWORD *)buf = v257;
  IOMobileFramebufferSwapSetTimestamps();
  v258 = CAHostTimeWithTime(*(double *)(v22 + 128));
  *(_DWORD *)v491 = 5;
  *(_QWORD *)buf = v258;
  IOMobileFramebufferSwapSetTimestamps();
  if (!v456)
    CA::WindowServer::IOMFBDisplay::swap_brightness(this);
  CA::WindowServer::IOMFBDisplay::swap_display_edr_factor((uint64_t)this);
  CA::WindowServer::IOMFBDisplay::swap_display_headroom_used(this, (const CA::Render::Update *)v22);
  if (CADeviceSupportsReferenceMode::once[0] != -1)
    dispatch_once(CADeviceSupportsReferenceMode::once, &__block_literal_global_159);
  if (CADeviceSupportsReferenceMode::supports_ref)
  {
    v259 = mach_absolute_time();
    v260 = CATimeWithHostTime(v259);
    if (v260 - *((double *)this + 3190) > 180.0)
    {
      v261 = *(_BYTE *)v91;
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 0x40000000;
      v498.i64[0] = (uint64_t)___ZN2CA12WindowServer12IOMFBDisplay32send_refmode_residency_telemetryEv_block_invoke;
      v498.i64[1] = (uint64_t)&__block_descriptor_tmp_86_17624;
      LOBYTE(v499) = v261;
      analytics_send_event_lazy();
      *((double *)this + 3190) = v260;
    }
  }
  CA::WindowServer::IOMFBDisplay::swap_hdr_metadata(this, (const CA::Render::Update *)v22);
  if (CADeviceSupportsHWGainMap::once != -1)
    dispatch_once(&CADeviceSupportsHWGainMap::once, &__block_literal_global_57);
  if (!CADeviceSupportsHWGainMap::supports_gain_map)
    goto LABEL_537;
  v262 = *(float64x2_t **)(v22 + 1032);
  if (!v262
    || BYTE10(xmmword_1ECDC6AD0)
    || (*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 80))(this))
  {
    if (*((_DWORD *)v91 + 154))
    {
      v91[154] = 0.0;
      IOMobileFramebufferSwapSetGainMap();
    }
    goto LABEL_537;
  }
  v463 = v106;
  v264 = *((_QWORD *)this + 19);
  v263 = *((_QWORD *)this + 20);
  v265.i64[0] = (int)v263;
  v265.i64[1] = SHIDWORD(v263);
  v266 = vcvtq_f64_s64(v265);
  v268 = *((_QWORD *)this + 25);
  v267 = *((_QWORD *)this + 26);
  v430 = this;
  v265.i64[0] = (int)v267;
  v265.i64[1] = SHIDWORD(v267);
  v269 = vdivq_f64(v266, vcvtq_f64_s64(v265));
  v265.i64[0] = (int)v264;
  v265.i64[1] = SHIDWORD(v264);
  v270 = vcvtq_f64_s64(v265);
  v265.i64[0] = (int)v268;
  v265.i64[1] = SHIDWORD(v268);
  v470 = vmlsq_f64(v270, vcvtq_f64_s64(v265), v269);
  v474 = v269;
  bzero(buf, 0x500uLL);
  v273 = 0;
  v274 = 0;
  v275 = BYTE11(xmmword_1ECDC6AD0);
  *(_OWORD *)v444 = 0u;
  __asm { FMOV            V0.2D, #0.5 }
  v454 = _Q0;
  v279 = (float32x2_t)vdup_n_s32(0x40390F46u);
  __asm { FMOV            V15.2S, #1.0 }
  v281 = 0uLL;
  while (1)
  {
    v282 = v262->f64[1];
    v283 = *(float64x2_t *)(*(_QWORD *)&v282 + 80);
    *(_OWORD *)v491 = *(_OWORD *)(*(_QWORD *)&v282 + 64);
    v492 = v283;
    v284 = *(_QWORD *)(*(_QWORD *)&v282 + 128);
    v285 = 0.0;
    if (v284)
      v285 = *(float *)(v284 + 228);
    v286 = *(_BYTE *)(*(_QWORD *)&v282 + 40);
    v481 = v281;
    if ((LOBYTE(v262[10].f64[0]) & 0x10) != 0)
      scale = CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)&v262[1], 0, 0, v272);
    else
      scale = v262[9].f64[0];
    CA::Mat4Impl::mat4_apply_to_rect(v262 + 1, (int8x16_t *)v491, v271);
    if (v474.f64[0] != 1.0 && v492.f64[0] < 1.79769313e308)
    {
      *(double *)v491 = *(double *)v491 * v474.f64[0];
      v492.f64[0] = v492.f64[0] * v474.f64[0];
    }
    v288 = v492.f64[1];
    _NF = v474.f64[1] != 1.0 && v492.f64[1] < 1.79769313e308;
    v281 = v481;
    if (_NF)
    {
      v288 = v492.f64[1] * v474.f64[1];
      *(double *)&v491[8] = *(double *)&v491[8] * v474.f64[1];
      v492.f64[1] = v492.f64[1] * v474.f64[1];
    }
    v290 = v474.f64[0] * v285 * scale;
    v291 = vaddq_f64(v470, *(float64x2_t *)v491);
    *(float64x2_t *)v491 = v291;
    if (v290 != 0.0)
      v290 = v290 + 1.0;
    v292 = v492.f64[0];
    if (v492.f64[0] <= v288)
      v293 = v288;
    else
      v293 = v492.f64[0];
    if (v293 < 1.79769313e308)
    {
      v294 = v492.f64[0] >= v288 ? v288 : v492.f64[0];
      if (v294 > 0.0)
      {
        __asm { FMOV            V4.2D, #-1.0 }
        *(float64x2_t *)v491 = vaddq_f64(v291, _Q4);
        v296 = v288 + 2.0;
        v492.f64[0] = v492.f64[0] + 2.0;
        v492.f64[1] = v296;
        if (v292 + 2.0 <= 0.0 || v296 <= 0.0)
          v492 = 0uLL;
      }
    }
    v297 = v492;
    if (v275)
    {
      v314 = v492.f64[1];
      if (v492.f64[0] <= v492.f64[1])
        v315 = v492.f64[1];
      else
        v315 = v492.f64[0];
      if (v315 < 1.79769313e308)
      {
        if (v492.f64[0] < v492.f64[1])
          v314 = v492.f64[0];
        if (v314 > 0.0)
        {
          v316 = vrndaq_f64(*(float64x2_t *)v491);
          v297 = vsubq_f64(vrndaq_f64(vaddq_f64(*(float64x2_t *)v491, v492)), v316);
          *(float64x2_t *)v491 = v316;
          v492 = v297;
        }
      }
      v22 = (uint64_t)v458;
      v281 = v481;
    }
    v298 = vclezq_f64(v281);
    v299 = vclezq_f64(v297);
    v300 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v299, v298), (int8x16_t)vzip2q_s64(v299, v298))));
    if ((v300.i8[4] & 1) == 0)
    {
      if ((v300.i8[0] & 1) != 0)
        goto LABEL_461;
      v302 = vminnmq_f64(*(float64x2_t *)v444, *(float64x2_t *)v491);
      v301 = vsubq_f64(vmaxnmq_f64(vaddq_f64(*(float64x2_t *)v444, v281), vaddq_f64(*(float64x2_t *)v491, v297)), v302);
LABEL_460:
      *(float64x2_t *)v444 = v302;
      v281 = v301;
      goto LABEL_461;
    }
    v301 = v297;
    v302 = *(float64x2_t *)v491;
    if ((v300.i8[0] & 1) == 0)
      goto LABEL_460;
LABEL_461:
    v303 = v286 & 3;
    v304 = 0.0;
    if (!LOBYTE(v262[10].f64[1]))
      v304 = 1.0;
    v496[0] = (float64x2_t)xmmword_18474E8C0;
    LODWORD(v496[1].f64[0]) = 1065353216;
    if (v303 == 3)
    {
      v496[0].f64[0] = 15.8284855;
      *(float64_t *)((char *)&v496[0].f64[1] + 4) = 0.000761708822;
      v306 = xmmword_18474E8E0;
      v305 = 1;
    }
    else if (v303 == 2)
    {
      v305 = 0;
      v496[0] = (float64x2_t)xmmword_18474E8F0;
      LODWORD(v496[1].f64[0]) = 1061197339;
      v306 = xmmword_18474E900;
    }
    else
    {
      v305 = 0;
      v306 = xmmword_18474E8D0;
    }
    v307 = vmulq_f64(v297, v454);
    v308 = vcvt_f32_f64(vaddq_f64(v307, *(float64x2_t *)v491));
    v309 = v290;
    v310 = v290 * 1.52866495;
    *(float *)&v310 = v310;
    *(float32x2_t *)&v307.f64[0] = vcvt_f32_f64(v307);
    v311 = vsub_f32(v279, vdiv_f32(vmul_f32(*(float32x2_t *)&v307.f64[0], v279), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v310, 0)));
    v312 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v311, _D15), (int8x8_t)_D15, (int8x8_t)v311);
    v313 = &buf[v273];
    *(float32x2_t *)v313 = v308;
    *((_QWORD *)v313 + 1) = *(_QWORD *)&v307.f64[0];
    *((float *)v313 + 4) = v309;
    *((_DWORD *)v313 + 5) = LODWORD(v310);
    *((float *)v313 + 6) = 1.0 / *(float *)&v310;
    *(int8x8_t *)(v313 + 28) = vbic_s8((int8x8_t)v312, (int8x8_t)vcltz_f32(v312));
    *((float *)v313 + 9) = v304;
    *(_OWORD *)(v313 + 40) = v306;
    *(float64x2_t *)(v313 + 56) = v496[0];
    *((_DWORD *)v313 + 18) = LODWORD(v496[1].f64[0]);
    v313[76] = v305;
    if (v273 == 1200)
      break;
    v262 = *(float64x2_t **)&v262->f64[0];
    v273 += 80;
    ++v274;
    if (!v262)
    {
      v482 = v281;
      goto LABEL_481;
    }
  }
  v482 = v281;
  v274 = 16;
LABEL_481:
  v85 = (CA::IOMobileFramebuffer **)((char *)this + 25536);
  v317 = (void *)*((_QWORD *)this + 3367);
  v106 = v463;
  v84 = (char *)this + 25672;
  if (v274 != *((_DWORD *)this + 6736) || memcmp(buf, *((const void **)this + 3367), 80 * v274))
  {
    memcpy(v317, buf, 80 * v274);
    *((_DWORD *)this + 6736) = v274;
    v318 = (int8x16_t)vceqzq_f64(v482);
    v319 = 0uLL;
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v318, 1), v318).u64[0] & 0x8000000000000000) == 0)
    {
      v320 = vorrq_s8((int8x16_t)vcltzq_f64(v482), (int8x16_t)vcgezq_f64(v482));
      if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v320), 1), v320).u64[0] & 0x8000000000000000) == 0)
      {
        v321 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(*(float64x2_t *)v444, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        v319 = (int8x16_t)vuzp1q_s32(v321, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(*(float64x2_t *)v444, v482), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v321));
      }
    }
    v322 = (int32x2_t)vextq_s8(v319, v319, 8uLL).u64[0];
    v323 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v322);
    if ((vpmax_u32(v323, v323).u32[0] & 0x80000000) == 0)
    {
      v324 = *(int32x2_t *)((char *)this + 160);
      v325 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v324);
      if ((vpmax_u32(v325, v325).u32[0] & 0x80000000) != 0
        || (v326 = *(int32x2_t *)((char *)this + 152),
            v327 = vadd_s32(*(int32x2_t *)v319.i8, v322),
            *(int32x2_t *)v328.i8 = vmax_s32(*(int32x2_t *)v319.i8, v326),
            v329 = vsub_s32(vmin_s32(v327, vadd_s32(v326, v324)), *(int32x2_t *)v328.i8),
            v330 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v329),
            (vpmax_u32(v330, v330).u32[0] & 0x80000000) != 0))
      {
        v319.i64[1] = 0;
      }
      else
      {
        v328.u64[1] = (unint64_t)v329;
        v319 = v328;
      }
    }
    v331 = v319.i32[2];
    v332 = v319.i32[3];
    v455 = v319.i32[2];
    if (v319.i32[2] >= v319.i32[3])
      v331 = v319.i32[3];
    if (v331 <= 0)
    {
      IOMobileFramebufferSwapSetGainMap();
    }
    else
    {
      v483 = v319.i64[0];
      v333 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1056))(this) - 1;
      v471 = 0.5;
      v440 = 0.5;
      if (v333 <= 7)
      {
        v471 = flt_18475F458[v333];
        v440 = flt_18475F478[v333];
      }
      v496[0].f64[0] = 0.0;
      v334 = HIDWORD(v483);
      IOMFBGainEncoderCreate();
      if (v332 >= 1)
      {
        v335 = v455 + v483;
        v451 = v332 + HIDWORD(v483);
        do
        {
          IOMFBGainEncoderStartRow();
          if (v455 < 1)
          {
            v346 = -1.0;
            v344 = -1.0;
          }
          else
          {
            v338 = 0;
            v339 = -1.0;
            v340 = v483;
            v341 = -1.0;
            do
            {
              v475 = v339;
              LODWORD(v342) = v335 - v340;
              if (v274)
              {
                v343 = 0;
                v344 = 1.0;
                v345 = (float32x2_t *)buf;
                v346 = 1.0;
                while (1)
                {
                  v347 = CA::GainMapGenerator::Element::gain(v345, (float)v340 + 0.5, (float)v334 + 0.5, v336, v337);
                  v348 = HIDWORD(v347);
                  v349 = *(float *)&v347;
                  if (*(float *)&v347 == -1.0)
                  {
                    v346 = *((float *)&v499 + 20 * v343 + 1);
                    v344 = v346;
                    v342 = HIDWORD(v347);
                    goto LABEL_518;
                  }
                  v350 = CA::GainMapGenerator::Element::gain(v345, v471 + (float)v340, v440 + (float)v334, v336, v337);
                  v351 = HIDWORD(v350);
                  if (*(float *)&v350 == -1.0)
                    break;
                  if (v346 > *(float *)&v350)
                    v346 = *(float *)&v350;
                  if (v344 > v349)
                    v344 = v349;
                  if ((int)v342 < SHIDWORD(v350))
                    LODWORD(v351) = v342;
                  if ((int)v351 >= (int)v348)
                    LODWORD(v342) = v348;
                  else
                    LODWORD(v342) = v351;
                  ++v343;
                  v345 += 10;
                  if (v274 == v343)
                    goto LABEL_518;
                }
                v346 = *((float *)&v499 + 20 * v343 + 1);
                v344 = v346;
                v342 = HIDWORD(v350);
              }
              else
              {
                v346 = 1.0;
                v344 = 1.0;
              }
LABEL_518:
              if (v344 == v475 && v346 == v341)
              {
                v346 = v341;
                v344 = v475;
              }
              else if (v338)
              {
                *(float *)v491 = v341;
                *(float *)&v491[4] = v475;
                *(float *)&v491[8] = v341;
                IOMFBGainEncoderEmitRun();
                v338 = 0;
              }
              if ((int)v342 <= 1)
                v353 = 1;
              else
                v353 = v342;
              v340 += v353;
              v338 += v353;
              v339 = v344;
              v341 = v346;
            }
            while (v340 < v335);
          }
          *(float *)v491 = v346;
          *(float *)&v491[4] = v344;
          *(float *)&v491[8] = v346;
          IOMFBGainEncoderEmitRun();
          ++v334;
        }
        while (v334 < v451);
      }
      v85 = v467;
      v354 = IOMFBGainEncoderFinishEncoding();
      IOMobileFramebufferSwapSetGainMap();
      if (v354)
        IOMFBGainMapRelease();
      MEMORY[0x186DBCEBC](*(_QWORD *)&v496[0].f64[0]);
      this = v430;
      v22 = (uint64_t)v458;
      v106 = v463;
      v84 = v465;
    }
  }
  v91 = v468;
LABEL_537:
  v355 = v106;
  IOMobileFramebufferSwapDebugInfo();
  v356 = v464[191];
  v357 = IOMobileFramebufferSwapEnd();
  v358 = v91;
  v359 = v357;
  if (*((_BYTE *)v358 + 1748))
    CA::IOMobileFramebuffer::swap_wait((CA::IOMobileFramebuffer *)v85);
  if (v456)
  {
    CA::IOMobileFramebuffer::swap_wait((CA::IOMobileFramebuffer *)v85);
    *(_DWORD *)buf = 0;
    CA::IOMobileFramebuffer::swap_begin((CA::IOMobileFramebuffer *)v85, (unsigned int *)buf);
    CA::WindowServer::IOMFBDisplay::swap_brightness(this);
    IOMobileFramebufferSwapEnd();
    CA::IOMobileFramebuffer::swap_wait((CA::IOMobileFramebuffer *)v85);
  }
  if (v441)
  {
    v360 = *(CA::WindowServer::Surface **)(v445 + 32);
    if (v360)
    {
      CA::WindowServer::Surface::unref(v360);
      *(_QWORD *)(v445 + 32) = 0;
    }
  }
  if (v359)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v379 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
      {
        v380 = *((_DWORD *)this + 6);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v380;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v359;
        _os_log_impl(&dword_184457000, v379, OS_LOG_TYPE_ERROR, "display %u swap_end returned error %x\n", buf, 0xEu);
      }
    }
    if (BYTE9(xmmword_1ECDC6A90))
      kdebug_trace();
    *v466 = 0;
    v12 = 1;
  }
  else
  {
    if (!*((_BYTE *)v468 + 1738))
    {
      CA::WindowServer::IOMFBDisplay::fetch_default_framebuffer(this);
      CA::IOMobileFramebuffer::swap_wait((CA::IOMobileFramebuffer *)v85);
    }
    v361 = x_mem_alloc0(0xC8uLL);
    v362 = v361;
    if (v361)
    {
      v361[13] = 0;
      v361[10] = 0;
      v361[9] = v361 + 10;
      v361[11] = 0;
      v361[12] = v361 + 13;
      v361[14] = 0;
      v361[15] = v361 + 19;
      v361[16] = v361 + 19;
      v361[17] = v361 + 19;
      v361[18] = 4;
    }
    *(_QWORD *)&v496[0].f64[0] = v361;
    v363 = v468;
    if (*((_BYTE *)v468 + 1753))
    {
      *((_DWORD *)v361 + 1) = *(_DWORD *)(v22 + 248);
      v361[1] = *(_QWORD *)(v22 + 72);
      *(_DWORD *)v361 = *v466;
      v364 = *(_QWORD *)(v445 + 32);
      if (v364)
      {
        v365 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v364 + 160))(v364);
        if (v365)
          *((_DWORD *)v362 + 48) = IOSurfaceGetID(v365);
      }
      *((_BYTE *)v362 + 196) = *((_DWORD *)v84 + 2) - (v447 ^ 1);
      v366 = (_WORD *)(v22 + 1064);
      v367 = *(_WORD *)((_BYTE *)v362 + 197) & 0xFFDF | (32 * ((*(unsigned __int16 *)(v22 + 1064) >> 5) & 1));
      *(_WORD *)((char *)v362 + 197) = v367;
      v362[2] = *(_QWORD *)(v22 + 760);
      v362[3] = *(_QWORD *)(v22 + 112);
      *((double *)v362 + 23) = v37;
      v368 = v367 & 0xFFFFFDFF | (((v433 >> 21) & 1) << 9);
      *(_WORD *)((char *)v362 + 197) = v368;
      v369 = this;
      v370 = *((_QWORD *)this + 91);
      if (*(_BYTE *)(v370 + 3) == 1 && *(_BYTE *)(v370 + 2) == 1)
        v372 = 16;
      else
        v372 = 0;
      v373 = (double *)v22;
      v374 = v368 & 0xFFEF | v372;
      *(_WORD *)((char *)v362 + 197) = v374;
      v375 = CAHostTimeWithTime(v373[96]);
      memset(buf, 0, sizeof(buf));
      mach_get_times();
      v362[4] = *(_QWORD *)&buf[8] - *(_QWORD *)buf + v375;
      v376 = v374 & 0xFFF0 | *(_WORD *)(v464 + 139) & 0xF;
      *(_WORD *)((char *)v362 + 197) = v376;
      v377 = CAHostTimeWithTime(v373[15]);
      memset(buf, 0, sizeof(buf));
      mach_get_times();
      v362[5] = *(_QWORD *)&buf[8] - *(_QWORD *)buf + v377;
      if (((_QWORD)v373[97] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        v378 = -1;
      else
        v378 = CAHostTimeWithTime(v373[97]);
      v362[7] = v378;
      v363 = v468;
      if (v434)
        v381 = 128;
      else
        v381 = 0;
      v382 = v376 & 0xFF3F | v381 | ((*((_BYTE *)v468 + 1751) & 3) << 6);
      *(_WORD *)((char *)v362 + 197) = v382;
      v22 = (uint64_t)v458;
      v362[8] = *((_QWORD *)v458 + 99);
      v383 = v382 & 0xF7FF | (v356 << 11);
      *(_WORD *)((char *)v362 + 197) = v383;
      *(_WORD *)((char *)v362 + 197) = (4 * *v366) & 0x1000 | v383 & 0xEFFF;
      std::__tree<CA::Render::Object *>::swap((uint64_t *)v458 + 107, (uint64_t)(v362 + 9));
      CA::Render::Update::swap_displayable_contexts(v458, (uint64_t)(v362 + 12));
      this = v369;
    }
    *((_BYTE *)v363 + 1751) = 0;
    v12 = CA::WindowServer::IOMFBDisplay::finish_update_((uint64_t)this, v435, v22, v355);
    if (*((_BYTE *)v363 + 1753))
    {
      v362[6] = mach_continuous_time();
      os_unfair_lock_lock((os_unfair_lock_t)this + 6477);
      *(_QWORD *)v491 = v493;
      *(_QWORD *)&v491[8] = v493;
      *(_QWORD *)&v492.f64[0] = v493;
      *(_QWORD *)&v492.f64[1] = 4;
      std::exchange[abi:nn180100]<X::small_vector<void({block_pointer})(__CFDictionary const*),4ul>,X::small_vector<void({block_pointer})(__CFDictionary const*),4ul>>((uint64_t)buf, (uint64_t)this + 25936, (uint64_t)v491);
      if (v362 + 15 != (_QWORD *)buf)
        X::small_vector_base<void({block_pointer})(__CFDictionary const*)>::move((uint64_t)(v362 + 15), (uint64_t)buf, v362 + 19);
      if (*(_QWORD *)buf != v498.i64[0])
        free(*(void **)buf);
      if (*(_QWORD *)v491 != *(_QWORD *)&v492.f64[0])
        free(*(void **)v491);
      std::vector<std::unique_ptr<CA::WindowServer::IOMFBDisplay::FrameInfo>>::push_back[abi:nn180100]((_QWORD *)this + 3239, (uint64_t *)v496);
      os_unfair_lock_unlock((os_unfair_lock_t)this + 6477);
    }
    std::unique_ptr<CA::WindowServer::IOMFBDisplay::FrameInfo>::reset[abi:nn180100]((CA::WindowServer::IOMFBDisplay::FrameInfo **)v496, 0);
  }
LABEL_659:
  pthread_mutex_unlock(v446);
LABEL_17:
  objc_autoreleasePoolPop(v6);
  return v12;
}

uint64_t CA::WindowServer::IOMFBDisplay::current_surface(CA::WindowServer::IOMFBDisplay *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 488))(this, 1, a2, a3, a4);
}

uint64_t CA::WindowServer::IOMFBDisplay::current_surface_is_read_only(CA::WindowServer::IOMFBDisplay *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;

  v2 = (pthread_mutex_t *)((char *)this + 25688);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25688));
  v3 = (*((unsigned __int8 *)this + 48 * *((unsigned int *)this + 6418) + 25792) >> 4) & 1;
  pthread_mutex_unlock(v2);
  return v3;
}

uint64_t CA::WindowServer::IOMFBDisplay::present_surface(CA::WindowServer::IOMFBDisplay *this, __IOSurface *a2)
{
  CA::IOMobileFramebuffer *v4;
  uint64_t result;
  int64x2_t *v6;
  double Width;
  size_t Height;
  uint64_t v9;
  int64x2_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  double v14;
  double v15;
  unsigned int v16;
  int v17;
  int v18;
  NSObject *v19;
  malloc_zone_t *malloc_zone;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  int64x2_t v36;
  uint64_t v37;
  _BYTE v38[5];
  unsigned int v39;
  void *v40[2];
  float64x2_t v41;
  _BYTE v42[32];
  uint8_t buf[32];
  _OWORD v44[2];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v39 = 0;
  v4 = (CA::WindowServer::IOMFBDisplay *)((char *)this + 25536);
  result = CA::IOMobileFramebuffer::swap_begin((CA::WindowServer::IOMFBDisplay *)((char *)this + 25536), &v39);
  if (!(_DWORD)result)
  {
    v6 = (int64x2_t *)((char *)this + 25912);
    IOMobileFramebufferSwapSetBackgroundColor();
    if (a2)
    {
      Width = (double)IOSurfaceGetWidth(a2);
      Height = IOSurfaceGetHeight(a2);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      *(double *)&buf[16] = Width;
      *(double *)&buf[24] = (double)Height;
      v40[0] = 0;
      v40[1] = 0;
      v9 = *((_QWORD *)this + 20);
      v10.i64[0] = (int)v9;
      v10.i64[1] = SHIDWORD(v9);
      v41 = vcvtq_f64_s64(v10);
      CA::WindowServer::IOMFBDisplay::fb_swap_set_layer((CA::WindowServer::IOMFBDisplay *)*((unsigned int *)this + 6), v4, 0, a2, (const CA::Rect *)buf, (const CA::Rect *)v40, 0x200u, v39, 0);
    }
    else
    {
      memset(buf, 0, sizeof(buf));
      *(_OWORD *)v40 = 0u;
      v41 = 0u;
      kdebug_trace();
      CA::IOMobileFramebuffer::swap_set_layer(v4, 0, 0, (const CA::Rect *)buf, (const CA::Rect *)v40);
    }
    if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1648))(this))
      v11 = 4;
    else
      v11 = 3;
    for (i = 1; i != v11; ++i)
    {
      memset(buf, 0, sizeof(buf));
      *(_OWORD *)v40 = 0u;
      v41 = 0u;
      CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)i, 0, (CA::WindowServer::Surface *)buf, (const CA::Rect *)v40, 0, v39, 0, *(unsigned int *)v38, v38[4]);
    }
    v13 = mach_absolute_time();
    v14 = CATimeWithHostTime(v13);
    v15 = (*(double (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 760))(this);
    v16 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 768))(this);
    CA::WindowServer::IOMFBDisplay::update_color_matrix(this, v14 + v15 * (double)v16);
    CA::WindowServer::IOMFBDisplay::update_user_adjustment(this);
    CA::WindowServer::IOMFBDisplay::swap_brightness(this);
    v17 = IOMobileFramebufferSwapEnd();
    if (v17)
    {
      v18 = v17;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v19 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v18;
          _os_log_impl(&dword_184457000, v19, OS_LOG_TYPE_ERROR, "present_surface: swap_end returned error 0x%x", buf, 8u);
        }
      }
    }
    if (*((_BYTE *)this + 28081))
    {
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v21 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0xC8uLL, 0x743898A5uLL);
      v22 = v21;
      if (v21)
      {
        v21[13] = 0;
        v21[10] = 0;
        v21[9] = v21 + 10;
        v21[11] = 0;
        v21[12] = v21 + 13;
        v21[14] = 0;
        v21[15] = v21 + 19;
        v21[16] = v21 + 19;
        v21[17] = v21 + 19;
        v21[18] = 4;
      }
      *(_DWORD *)v21 = v39;
      *((_DWORD *)v21 + 48) = IOSurfaceGetID(a2);
      *(_WORD *)((char *)v22 + 197) |= 0x400u;
      os_unfair_lock_lock((os_unfair_lock_t)this + 6477);
      v40[0] = v42;
      v40[1] = v42;
      *(_QWORD *)&v41.f64[0] = v42;
      *(_QWORD *)&v41.f64[1] = 4;
      memset(buf, 0, sizeof(buf));
      memset(v44, 0, sizeof(v44));
      X::small_vector_base<void({block_pointer})(__CFDictionary const*)>::small_vector_base((uint64_t **)buf, (uint64_t)this + 25936, (uint64_t *)v44);
      if ((void **)((char *)this + 25936) != v40)
        X::small_vector_base<void({block_pointer})(__CFDictionary const*)>::move((uint64_t)this + 25936, (uint64_t)v40, (_QWORD *)this + 3246);
      if (v22 + 15 != (_QWORD *)buf)
        X::small_vector_base<void({block_pointer})(__CFDictionary const*)>::move((uint64_t)(v22 + 15), (uint64_t)buf, v22 + 19);
      if (*(_QWORD *)buf != *(_QWORD *)&buf[16])
        free(*(void **)buf);
      if (v40[0] != *(void **)&v41.f64[0])
        free(v40[0]);
      v23 = (_QWORD *)*((_QWORD *)this + 3240);
      v24 = *((_QWORD *)this + 3241);
      if ((unint64_t)v23 >= v24)
      {
        v26 = ((uint64_t)v23 - v6->i64[0]) >> 3;
        if ((unint64_t)(v26 + 1) >> 61)
          abort();
        v27 = v24 - v6->i64[0];
        v28 = v27 >> 2;
        if (v27 >> 2 <= (unint64_t)(v26 + 1))
          v28 = v26 + 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v28;
        *(_QWORD *)&v44[0] = (char *)this + 25928;
        if (v29)
          v29 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v29);
        else
          v30 = 0;
        v31 = (_QWORD *)(v29 + 8 * v26);
        v32 = v29 + 8 * v30;
        *(_QWORD *)&buf[24] = v32;
        *v31 = v22;
        v25 = v31 + 1;
        *(_QWORD *)&buf[16] = v31 + 1;
        v33 = (_QWORD *)*((_QWORD *)this + 3240);
        v34 = (_QWORD *)*((_QWORD *)this + 3239);
        if (v33 == v34)
        {
          v36 = vdupq_n_s64((unint64_t)v33);
        }
        else
        {
          do
          {
            v35 = *--v33;
            *v33 = 0;
            *--v31 = v35;
          }
          while (v33 != v34);
          v36 = *v6;
          v32 = *(_QWORD *)&buf[24];
          v25 = *(_QWORD **)&buf[16];
        }
        *((_QWORD *)this + 3239) = v31;
        *((_QWORD *)this + 3240) = v25;
        *(int64x2_t *)&buf[8] = v36;
        v37 = *((_QWORD *)this + 3241);
        *((_QWORD *)this + 3241) = v32;
        *(_QWORD *)&buf[24] = v37;
        *(_QWORD *)buf = v36.i64[0];
        std::__split_buffer<std::unique_ptr<CA::WindowServer::IOMFBDisplay::FrameInfo>>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        *v23 = v22;
        v25 = v23 + 1;
      }
      *((_QWORD *)this + 3240) = v25;
      os_unfair_lock_unlock((os_unfair_lock_t)this + 6477);
    }
    CA::WindowServer::IOMFBDisplay::collect_buffers(this, 0);
    return CA::WindowServer::Display::purge_surfaces((os_unfair_lock_s *)this, 0);
  }
  return result;
}

void CA::WindowServer::IOMFBDisplay::cancel_all_swaps(CA::WindowServer::IOMFBDisplay *this)
{
  unsigned int *v1;
  pthread_mutex_t *v2;
  uint64_t v3;
  int *v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  uint8_t buf[4];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = (unsigned int *)((char *)this + 25680);
  v2 = (pthread_mutex_t *)((char *)this + 25688);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25688));
  v3 = *v1;
  if ((_DWORD)v3)
  {
    v4 = (int *)(v1 + 24);
    while (1)
    {
      v5 = *v4;
      v4 += 12;
      if (v5)
        break;
      if (!--v3)
        goto LABEL_5;
    }
    pthread_mutex_unlock(v2);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v9 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v9, OS_LOG_TYPE_ERROR, "cancel_all_swaps() called with user-swaps in queue", buf, 2u);
      }
    }
  }
  else
  {
LABEL_5:
    pthread_mutex_unlock(v2);
  }
  v6 = IOMobileFramebufferSwapCancelAll();
  if (v6)
  {
    v7 = v6;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v8 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v11 = v7;
        _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_ERROR, "swap_cancel_all() returned 0x%x", buf, 8u);
      }
    }
  }
}

BOOL CA::WindowServer::IOMFBDisplay::update_surface_has_alpha(CA::WindowServer::IOMFBDisplay *this)
{
  return *((_BYTE *)this + 26384) == 1;
}

uint64_t CA::WindowServer::IOMFBDisplay::needs_backstop_window(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28052);
}

uint64_t CA::WindowServer::IOMFBDisplay::color_flush_color(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v2;
  pthread_mutex_t *v3;
  uint64_t v4;

  v2 = 3768639712;
  v3 = (pthread_mutex_t *)((char *)this + 25688);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25688));
  v4 = *((_QWORD *)this + 6 * *((unsigned int *)this + 6418) + 3220);
  if (!v4 || (*(_BYTE *)(v4 + 132) & 0x20) == 0)
    v2 = 3772776672;
  pthread_mutex_unlock(v3);
  return v2;
}

uint64_t CA::WindowServer::IOMFBDisplay::needs_cloning_termination(CA::WindowServer::IOMFBDisplay *this)
{
  return (*((_DWORD *)this + 156) >> 2) & 1;
}

uint64_t CA::WindowServer::IOMFBDisplay::allocate_cloning_termination_surface(CA::WindowServer::IOMFBDisplay *this)
{
  CA::WindowServer::Surface *v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  CA::Render *v7;
  uint64_t v8;
  uint64_t result;

  v2 = (CA::WindowServer::Surface *)*((_QWORD *)this + 3314);
  if (v2)
    CA::WindowServer::Surface::unref(v2);
  *((_QWORD *)this + 3314) = 0;
  v3 = *((_QWORD *)this + 6 * *((unsigned int *)this + 6418) + 3220);
  if (!v3)
    return 0;
  v4 = *(unsigned int **)(v3 + 40);
  if (!v4)
  {
    v4 = *(unsigned int **)(v3 + 32);
    if (!v4)
      return 0;
  }
  v5 = v4[14];
  v6 = v4[15];
  v7 = (CA::Render *)CA::WindowServer::IOMFBDisplay::framebuffer_pixel_format(this);
  v8 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 216))(v4);
  result = CA::WindowServer::Display::allocate_surface((uint64_t)this, v5, v6, v7, 0, 2u, 0, v8, (uint64_t)CFSTR("CA Cloning Terminator Surface"), 0);
  *(_DWORD *)(result + 224) |= 0x2000000u;
  *((_QWORD *)this + 3314) = result;
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::cloning_termination_surface(CA::WindowServer::IOMFBDisplay *this)
{
  return *((_QWORD *)this + 3314);
}

CA::CAHDRProcessor *CA::WindowServer::IOMFBDisplay::tonemap_surface(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  CA::CAHDRProcessor *result;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  result = 0;
  if (a2 && a3)
  {
    if (CADeviceHasHardwareAcceleratedHDR::once != -1)
      dispatch_once(&CADeviceHasHardwareAcceleratedHDR::once, &__block_literal_global_93);
    if (CADeviceHasHardwareAcceleratedHDR::has_capability)
    {
      if (!*(_QWORD *)(a1 + 26376))
        *(_QWORD *)(a1 + 26376) = CA::CAHDRProcessor::new_hdr_processor(result);
      if (a4 && !*(_DWORD *)(a4 + 60))
        (*(void (**)(uint64_t, float))(*(_QWORD *)a2 + 200))(a2, 1.0 / *(float *)(a4 + 20));
      v16 = (*(unsigned int *)(a2 + 224) | ((unint64_t)*(unsigned __int8 *)(a2 + 228) << 32)) & 0xFFFFFFFDFFFFFFFFLL;
      *(_DWORD *)(a2 + 224) = *(_DWORD *)(a2 + 224);
      *(_BYTE *)(a2 + 228) = BYTE4(v16);
      v17 = *(_QWORD *)(a1 + 26376);
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2);
      v19 = (*(uint64_t (**)(_QWORD *))(*a3 + 160))(a3);
      result = (CA::CAHDRProcessor *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, char, _QWORD))(*(_QWORD *)v17 + 16))(v17, v18, v19, *(_QWORD *)(a2 + 16), a3[2], a4, a5, 0, a7, a8, 0);
      v20 = 0x800000000;
      if ((_DWORD)result)
        v20 = 0;
      v21 = (*(unsigned int *)(a2 + 224) | ((unint64_t)*(unsigned __int8 *)(a2 + 228) << 32)) & 0xFFFFFFF7FFFFFFFFLL | v20;
      *(_BYTE *)(a2 + 228) = BYTE4(v21);
      if ((_DWORD)result)
      {
        v22 = 0;
        v23 = (unint64_t)(*(_DWORD *)(a5 + 480) == 2) << 36;
      }
      else
      {
        v23 = 0;
        v22 = 0x2000000000;
      }
      v24 = v22 | v23 | v21 & 0xCFFFFFFFFFLL;
      *(_DWORD *)(a2 + 224) = v24;
      *(_BYTE *)(a2 + 228) = BYTE4(v24);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

double CA::WindowServer::IOMFBDisplay::detaching_rect@<D0>(CA::WindowServer::IOMFBDisplay *this@<X0>, int8x16_t *a2@<X8>)
{
  float64x2_t *v2;
  float64x2_t v3;
  int64x2_t v4;
  float64x2_t v5;
  unint64_t v6;
  int32x4_t v7;
  int8x16_t v8;
  float64x2_t v9;
  float64x2_t v10;
  int v11;
  int64x2_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int32x2_t v15;
  int8x16_t v16;

  v2 = (float64x2_t *)*((_QWORD *)this + 3251);
  if (v2)
  {
    v3 = v2[7];
    v4 = vceqzq_f64(v3);
    v5 = (float64x2_t)vdupq_laneq_s64(v4, 1);
    v6 = vorrq_s8((int8x16_t)v5, (int8x16_t)v4).u64[0];
    v7 = 0uLL;
    if ((v6 & 0x8000000000000000) == 0)
    {
      v8 = vorrq_s8((int8x16_t)vcltzq_f64(v3), (int8x16_t)vcgezq_f64(v3));
      v5 = (float64x2_t)vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v8), 1), v8);
      if ((*(_QWORD *)&v5.f64[0] & 0x8000000000000000) == 0)
      {
        v9 = v2[6];
        v5 = vmaxnmq_f64(v9, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000));
        v10 = vminnmq_f64(vaddq_f64(v9, v3), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
        v3 = (float64x2_t)vcvtmq_s64_f64(v5);
        v7 = vuzp1q_s32((int32x4_t)v3, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v10), (int64x2_t)v3));
      }
    }
    v11 = v7.i32[2];
    if (v7.i32[2] <= v7.i32[3])
      v11 = v7.i32[3];
    LODWORD(v3.f64[0]) = 1073741822;
    LODWORD(v5.f64[0]) = v11;
    v12.i64[0] = v7.i32[0];
    v12.i64[1] = v7.i32[1];
    v13 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32((int32x4_t)v5, (int32x4_t)v3), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v12));
    v12.i64[0] = v7.i32[2];
    v12.i64[1] = v7.i32[3];
    v14 = (int8x16_t)vcvtq_f64_s64(v12);
    v15 = vdup_n_s32(v11 > 1073741822);
    v12.i64[0] = v15.u32[0];
    v12.i64[1] = v15.u32[1];
    v16 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v12, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v14);
    *a2 = v13;
    a2[1] = v16;
  }
  else
  {
    v16.i64[0] = 0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return *(double *)v16.i64;
}

BOOL CA::WindowServer::IOMFBDisplay::presents_metal_layer_on_finish(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3251);
  if (!v1 || (*(_BYTE *)(v1 + 292) & 1) != 0)
    return 1;
  v2 = *((_QWORD *)this + 6 * *((unsigned int *)this + 6419) + 3220);
  return v2 && (*(_BYTE *)(v2 + 132) & 4) == 0;
}

uint64_t CA::WindowServer::IOMFBDisplay::clone_update(CA::WindowServer::IOMFBDisplay *this, CA::WindowServer::Server *a2, CA::WindowServer::Display *a3, CA::Render::Update *a4, unsigned int *a5, BOOL *a6)
{
  char *v11;
  char *v12;
  CA::WindowServer::Display *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t (*v18)(CA::WindowServer::IOMFBDisplay *);
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  int v22;
  NSObject *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  _QWORD *v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  char v41;
  _BOOL4 v42;
  int v43;
  int v45;
  signed int v46;
  double v51;
  double v52;
  double v53;
  float v54;
  float v55;
  double v56;
  int v57;
  int v58;
  int v59;
  int32x2_t v60;
  int v61;
  int v62;
  int v63;
  float v64;
  float v65;
  float v66;
  float32x2_t v67;
  double v68;
  _BOOL4 v69;
  int v70;
  CA::ScalerUtil::ScalerLimits *v71;
  float v72;
  CA::ScalerUtil::ScalerLimits *v73;
  float v74;
  float v75;
  double v76;
  signed int v77;
  signed int v78;
  int v79;
  int v80;
  int v81;
  BOOL v83;
  unsigned int *v85;
  unsigned int *v86;
  double v87;
  uint64_t v88;
  CA::WindowServer::Surface *v89;
  char *v90;
  char *v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _DWORD *buffer;
  int32x4_t v99;
  _DWORD *v100;
  char v101;
  int32x4_t v102;
  CA::Render::Update *v103;
  _BOOL4 v104;
  uint64_t v105;
  uint64_t v106;
  CA::Render::Update *v107;
  uint64_t v108;
  uint64x2_t v109;
  int8x16_t v110;
  uint64_t v111;
  int32x4_t v112;
  int v113;
  uint64_t v114;
  _BOOL4 v115;
  uint64_t v116;
  int v117;
  unsigned int v118;
  int v119;
  _BOOL4 v120;
  char *v121;
  unsigned int *v122;
  uint64_t v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int *v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  CA::Render *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  CA::WindowServer::Surface *v140;
  uint64_t v141;
  CA::WindowServer::Surface *v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64x2_t v146;
  int32x4_t v147;
  int v148;
  int64x2_t v149;
  int8x16_t v150;
  int32x2_t v151;
  int8x16_t v152;
  __IOSurface *v153;
  __n128 v154;
  int v155;
  int v156;
  double v157;
  uint64_t v158;
  double v159;
  uint64_t v160;
  CA::WindowServer::Surface *v161;
  CA::WindowServer::Surface *v162;
  NSObject *v163;
  int v164;
  int v165;
  int v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  float v172;
  float v173;
  CA::WindowServer::Surface *v174;
  double v175;
  double v176;
  int v177;
  __int128 v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  int v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  int v208;
  int64x2_t v209;
  int8x16_t v210;
  int8x16_t v211;
  int32x2_t v212;
  const CA::Rect *v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  int32x4_t v219;
  uint64_t v220;
  unsigned int *v221;
  int32x2_t v222;
  uint64x2_t v223;
  float64x2_t v224;
  int32x2_t v225;
  float64x2_t v226;
  int v227;
  double v228;
  uint64_t v229;
  double v230;
  uint64_t v231;
  CA::WindowServer::Surface *v232;
  int v233;
  int v234;
  int v235;
  uint64_t v236;
  double v237;
  _BOOL4 is_hdr;
  _BOOL4 v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  _DWORD *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int wireless_surface_options;
  int v249;
  _DWORD *v250;
  CA::WindowServer::Surface *v251;
  int v252;
  float *v253;
  uint64_t v254;
  uint64_t surface;
  int v256;
  CA::WindowServer::Surface *v257;
  _BOOL4 v258;
  uint64_t v259;
  uint64_t v260;
  int32x4_t v261;
  int32x4_t v262;
  int v263;
  int64x2_t v264;
  int32x2_t v265;
  int8x16_t v266;
  uint8_t *v267;
  NSObject *v268;
  uint64_t v269;
  unsigned int v270;
  NSObject *v271;
  int v272;
  uint8_t *v273;
  NSObject *v274;
  CA::Render::Update *v275;
  CA::Render::Update *v276;
  CA::WindowServer::Surface *v277;
  CA::WindowServer::Surface *v278;
  _DWORD *v279;
  int v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  unsigned int v284;
  uint64_t v285;
  double v287;
  double v288;
  NSObject *v289;
  CA::Render::Update *v290;
  CA::Render::Update *v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  _BOOL4 v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  NSObject *v299;
  int v300;
  NSObject *v301;
  int v302;
  unsigned int v303[2];
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  BOOL v308;
  BOOL v309;
  BOOL v310;
  BOOL v311;
  unsigned int *v312;
  unsigned int *v313;
  CA::WindowServer::Surface *v314;
  char v315;
  unsigned int v316;
  int v317;
  int v318;
  float64x2_t v319;
  unsigned int v320;
  int v321;
  int v322;
  signed int v323;
  _DWORD *v324;
  unsigned int v325;
  _BOOL4 v326;
  float64x2_t v327;
  unsigned int v328;
  int v329;
  unsigned int v330;
  int v331;
  pthread_mutex_t *v332;
  unint64_t v333;
  unsigned int v334;
  _BOOL4 v335;
  CA::IOMobileFramebuffer **v336;
  int32x2_t v337;
  int v338;
  unsigned int v339;
  _DWORD *v340;
  uint64_t v341;
  int v342;
  unsigned int v343;
  _BOOL4 v344;
  int32x4_t v345;
  int v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  uint64_t v350;
  uint8_t v351[16];
  __int128 v352;
  uint8_t buf[16];
  int8x16_t v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  uint8_t v361[16];
  int8x16_t v362;
  uint64_t v363;
  CGSize v364;
  CGSize v365;

  v363 = *MEMORY[0x1E0C80C00];
  v11 = (char *)this + 25344;
  v12 = (char *)a3 + 745;
  if ((*(_DWORD *)((_BYTE *)a3 + 745) & 0x1000) != 0)
    v13 = a3;
  else
    v13 = 0;
  if (CA::WindowServer::IOMFBDisplay::set_framebuffer_ax_matrix(this))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v14 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v14, OS_LOG_TYPE_ERROR, "IOMFB was not able to clone accessibility matrix on external display.\n", buf, 2u);
      }
    }
  }
  if (v11[2704])
  {
    v15 = mach_absolute_time();
    if (CATimeWithHostTime(v15) > *((double *)this + 3309))
    {
      v11[2704] = 0;
      *((_QWORD *)this + 3309) = 0;
    }
  }
  if (a4)
    CA::WindowServer::IOMFBDisplay::update_brightness_deadline((double *)this, *((double *)a4 + 9));
  if (!*((_QWORD *)this + 80))
    goto LABEL_58;
  v16 = *((_QWORD *)this + 6);
  if (!v16 || (*(_BYTE *)(*(_QWORD *)(v16 + 96) + 747) & 1) != 0)
  {
    LOBYTE(v17) = -21;
    return v17;
  }
  if (v11[2700] || v11[2704])
  {
    LOBYTE(v17) = -1;
    return v17;
  }
  if (!(*(unsigned int (**)(CA::WindowServer::Display *))(*(_QWORD *)a3 + 216))(a3)
    || *((_BYTE *)this + 636) != 2)
  {
    CA::WindowServer::IOMFBDisplay::set_enabled_(this, 0);
    LOBYTE(v17) = -20;
    return v17;
  }
  if (!a4)
  {
    LOBYTE(v17) = -19;
    return v17;
  }
  v18 = *(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1392);
  if (HIBYTE(dword_1ECDC6B10))
  {
    v293 = *((_QWORD *)a4 + 37);
    v294 = v18(this);
    v295 = (((*(uint64_t (**)(CA::WindowServer::Display *))(*(_QWORD *)a3 + 1392))(a3) ^ v294) & v293) != 0;
    if (v11[2724])
    {
      v296 = *((_QWORD *)a4 + 36);
      v297 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1392))(this);
      if ((v297 | v296) != v297)
        v295 = 1;
    }
    v21 = v295;
    goto LABEL_27;
  }
  v19 = *((_QWORD *)a4 + 36);
  v20 = v18(this);
  if ((v20 | v19) == v20)
  {
    v21 = 0;
LABEL_27:
    if (v11[2789])
    {
      if (x_log_hook_p())
      {
        *(_QWORD *)v303 = *((unsigned int *)this + 6);
        x_log_();
      }
      else
      {
        v299 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
        {
          v300 = *((_DWORD *)this + 6);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v300;
          _os_log_impl(&dword_184457000, v299, OS_LOG_TYPE_DEFAULT, "resuming display %d cloning", buf, 8u);
        }
      }
      v22 = 0;
      v11[2789] = 0;
    }
    else
    {
      v22 = 0;
    }
    goto LABEL_37;
  }
  if (x_log_hook_p())
  {
    *(_QWORD *)v303 = *((unsigned int *)this + 6);
    x_log_();
  }
  else
  {
    v23 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      v24 = *((_DWORD *)this + 6);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v24;
      _os_log_impl(&dword_184457000, v23, OS_LOG_TYPE_DEFAULT, "display %d cloning failed due to protection mismatch", buf, 8u);
    }
  }
  if (v11[2789])
  {
    v21 = 0;
    v22 = 1;
  }
  else
  {
    if (x_log_hook_p())
    {
      *(_QWORD *)v303 = *((unsigned int *)this + 6);
      x_log_();
    }
    else
    {
      v301 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        v302 = *((_DWORD *)this + 6);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v302;
        _os_log_impl(&dword_184457000, v301, OS_LOG_TYPE_DEFAULT, "stopping display %d cloning due to protection mismatch", buf, 8u);
      }
    }
    v21 = 0;
    v22 = 1;
    v11[2789] = 1;
  }
LABEL_37:
  if (!v11[2705])
    v11[2719] = 1;
  v11[2705] = 1;
  v25 = *((_QWORD *)this + 3383);
  v350 = v25;
  v26 = *((_QWORD *)this + 81);
  if (v26 && !v25)
  {
    *((_QWORD *)this + 3383) = v26;
    CA::WindowServer::IOMFBDisplay::update_framebuffer(this, 4);
LABEL_57:
    v11[2705] = 0;
    CA::WindowServer::IOMFBDisplay::set_enabled_(this, 0);
LABEL_58:
    LOBYTE(v17) = -2;
    return v17;
  }
  if (!v25)
    goto LABEL_57;
  v344 = v21;
  ++*(_DWORD *)v11;
  v27 = v22;
  CA::WindowServer::IOMFBDisplay::set_enabled_(this, 1);
  v342 = v27;
  if ((v27 & 1) == 0)
    *a6 = 1;
  v28 = *((double *)a4 + 9) - *((double *)this + 3308);
  v29 = (*(double (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 744))(this) * 0.95;
  if (CA::WindowServer::IOMFBDisplay::can_update_(this, (*((_DWORD *)a4 + 266) & 0x400) != 0, 0.0, 0.0, v30, v31, v32)
    && v28 >= v29)
  {
    CA::WindowServer::IOMFBDisplay::update_color_matrix(this, *((double *)a4 + 9));
    v33 = std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6600, v25, &v350);
    if (byte_1ECDC6AE2)
      v331 = 0;
    else
      v331 = v344 | ((*((_BYTE *)a4 + 270) & 8) >> 3);
    v34 = *((unsigned __int8 *)v33 + 40);
    v332 = (pthread_mutex_t *)((char *)this + 25688);
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25688));
    v35 = *((_DWORD *)v11 + 82);
    v36 = *((_DWORD *)a3 + 52);
    v37 = *((_DWORD *)this + 14);
    v38 = *((unsigned __int8 *)a3 + 656) + 4;
    v39 = 4;
    if ((v37 & 4) != 0)
      v38 = 4;
    v40 = v38
        - *((unsigned __int8 *)this + 656)
        - ((v38
          - *((unsigned __int8 *)this + 656)
          + ((unsigned __int16)((v38 - *((unsigned __int8 *)this + 656)) & 0xC000) >> 14)) & 0xFFFC);
    v41 = v40;
    v329 = v40;
    switch(v40)
    {
      case 1:
        goto LABEL_55;
      case 2:
        v325 = 3;
        break;
      case 3:
        v39 = 7;
LABEL_55:
        v42 = (v40 & 1) == 0;
LABEL_56:
        v325 = v39;
        v43 = *((_DWORD *)a3 + 53);
LABEL_67:
        v45 = v25 & 0x3FFF;
        v46 = (v25 >> 14) & 0x3FFF;
        __asm { FMOV            V0.2D, #1.0 }
        v349 = _Q0;
        v323 = v46;
        v334 = v35;
        if ((v37 & 2) != 0)
        {
          v51 = (double)v43;
          v337 = 0;
          v52 = (double)v36;
          v53 = 1.0;
          v333 = 0;
          v56 = 1.0;
        }
        else
        {
          v51 = (double)v43;
          v52 = (double)v36;
          v53 = (double)v45 / (double)v43;
          if (v53 >= (double)v46 / (double)v36)
            v53 = (double)v46 / (double)v36;
          *(double *)&v349 = v53;
          *((double *)&v349 + 1) = v53;
          if (!v34 || (v37 & 8) != 0)
          {
            v56 = v53;
          }
          else
          {
            v54 = *(float *)&CA::WindowServer::clone_overscan_amounts_x;
            if (*(float *)&CA::WindowServer::clone_overscan_amounts_x == 0.0
              || (v55 = *(float *)&CA::WindowServer::clone_overscan_amounts_y,
                  *(float *)&CA::WindowServer::clone_overscan_amounts_y == 0.0))
            {
              v54 = *((float *)this + 15);
              v55 = *((float *)this + 16);
            }
            v56 = v53 * v54;
            v53 = v53 * v55;
            *(double *)&v349 = v56;
            *((double *)&v349 + 1) = v53;
          }
          v57 = vcvtmd_s64_f64(v56 * v51 + 0.5);
          v58 = vcvtmd_s64_f64(v53 * v52 + 0.5);
          v333 = __PAIR64__(v58, v57);
          v59 = (v46 - v58) >> 1;
          v60.i32[0] = (v45 - v57) >> 1;
          v60.i32[1] = v59;
          v337 = v60;
          v61 = *((_DWORD *)this + 17);
          if (v61 >= 1)
          {
            _VF = __OFSUB__(v61, v59);
            v62 = v61 - v59;
            if (!((v62 < 0) ^ _VF | (v62 == 0)))
            {
              v63 = v61 + v58 - v46;
              if (v63 < 1)
              {
                v66 = 1.0;
                v67.i32[0] = 0;
              }
              else
              {
                v64 = (float)v63 / (float)v58;
                v65 = v64 * (float)(0.5 * (float)v57);
                v66 = 1.0 - v64;
                v67.f32[0] = truncf(v65);
              }
              v67.f32[1] = (float)v62;
              v333 = (unint64_t)vcvt_s32_f32(vrnda_f32(vmul_n_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v58, v57)), v66)));
              v337 = vcvt_s32_f32(vadd_f32(v67, vcvt_f32_s32(v337)));
              v68 = v66;
              v56 = v56 * v68;
              v53 = v53 * v68;
              *(double *)&v349 = v56;
              *((double *)&v349 + 1) = v53;
            }
          }
          if (!HIBYTE(xmmword_1ECDC6AF0) && v11[2723])
          {
            v69 = v42;
            v70 = v25 & 0x3FFF;
            v71 = (CA::ScalerUtil::ScalerLimits *)(*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 80))(this);
            if ((_DWORD)v71)
            {
              v53 = *((double *)&v349 + 1);
              v56 = *(double *)&v349;
            }
            else
            {
              CA::ScalerUtil::ScalerLimits::limits(v71);
              v72 = *(float *)&xmmword_1EDD11090;
              CA::ScalerUtil::ScalerLimits::limits(v73);
              v74 = *((float *)&xmmword_1EDD11090 + 1);
              if (v69)
                v75 = v72;
              else
                v75 = *((float *)&xmmword_1EDD11090 + 1);
              if (!v69)
                v74 = v72;
              v56 = v75;
              v76 = *((double *)&v349 + 1);
              if (*(double *)&v349 >= v56)
              {
                v56 = *(double *)&v349;
              }
              else
              {
                v76 = *((double *)&v349 + 1) * v56 / *(double *)&v349;
                *(double *)&v349 = v56;
                *((double *)&v349 + 1) = v76;
              }
              v53 = v74;
              if (v76 >= v53)
              {
                v53 = v76;
              }
              else
              {
                v56 = v56 * v53 / v76;
                *(double *)&v349 = v56;
                *((double *)&v349 + 1) = v53;
              }
            }
            v45 = v70;
            v46 = v323;
            v35 = v334;
          }
        }
        v77 = vcvtmd_s64_f64(v56 * v51 + 0.5);
        v78 = vcvtmd_s64_f64(v53 * v52 + 0.5);
        v317 = v45;
        v79 = v45 - v77;
        if (v45 < v77)
          ++v79;
        v80 = v46 - v78;
        if (v46 < v78)
          ++v80;
        if ((HIBYTE(xmmword_1ECDC6AF0) || !v11[2723]) && !v11[2724])
        {
          v81 = v80 >> 1;
          _ZF = v79 >> 1 == v337.i32[0] && v81 == v337.i32[1];
          v83 = _ZF && (_DWORD)v333 == v77;
          if (!v83 || HIDWORD(v333) != v78)
          {
            *((_DWORD *)this + 12 * v35 + 6444) = 0;
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v268 = x_log_category_windowserver;
              if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&buf[4] = v333;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = HIDWORD(v333);
                _os_log_impl(&dword_184457000, v268, OS_LOG_TYPE_ERROR, "Requested size (%i x %i) requires scaling on display that can't scale!", buf, 0xEu);
              }
            }
            LOBYTE(v17) = -12;
            goto LABEL_259;
          }
        }
        v321 = v78;
        v322 = v77;
        v85 = (unsigned int *)((char *)this + 48 * v35);
        v86 = v85 + 6444;
        v336 = (CA::IOMobileFramebuffer **)((char *)this + 25536);
        CA::IOMobileFramebuffer::swap_begin((CA::WindowServer::IOMFBDisplay *)((char *)this + 25536), v85 + 6444);
        if (v11[2762])
          v87 = CACurrentMediaTimeDelta();
        else
          v87 = 0.0;
        v340 = v85 + 6438;
        CA::IOMobileFramebuffer::swap_set_time(*((double *)a4 + 9) + v87);
        if ((v12[1] & 0x10) != 0)
        {
          v90 = (char *)v13 + 48 * *((unsigned int *)v13 + 6419);
          v91 = (char *)this + 48 * v334;
          v92 = v91[25792] & 0xFE | v90[25792] & 1;
          v91[25792] = v92;
          v91[25792] = v92 & 0xFD | v90[25792] & 2;
          v93 = *((_QWORD *)v90 + 3220);
          v338 = (*(unsigned __int8 *)(v93 + 132) >> 2) & 1;
          if (*(_DWORD *)(v93 + 8) >= 2u && *((_DWORD *)v11 + 84) >= 2u && !v11[2724])
          {
            v254 = *((_QWORD *)this + 6 * *((unsigned int *)v11 + 83) + 3220);
            if (v254)
            {
              if ((*(_BYTE *)(v254 + 132) & 0x40) != 0
                && *(double *)(v254 + 48) == *(double *)&v349
                && *(double *)(v254 + 56) == *((double *)&v349 + 1))
              {
                ++*(_DWORD *)(v254 + 8);
                *((_QWORD *)this + 6 * v334 + 3220) = v254;
              }
            }
          }
          v88 = *((_QWORD *)v13 + 3251);
          v318 = *((unsigned __int8 *)v13 + 26385);
          v315 = *((_BYTE *)v13 + 26384);
          v94 = *(_QWORD *)(v93 + 32);
          v89 = *(CA::WindowServer::Surface **)(v93 + 40);
          v316 = CA::WindowServer::IOMFBDisplay::color_remap_mode(v13);
          if (v94)
            v95 = v94;
          else
            v95 = (uint64_t)v89;
          v341 = v95;
        }
        else
        {
          v341 = (*(uint64_t (**)(CA::WindowServer::Display *, uint64_t))(*(_QWORD *)a3 + 480))(a3, 1);
          v338 = 0;
          v88 = 0;
          v315 = 0;
          v316 = 0;
          v89 = 0;
          v318 = 2;
        }
        if (((*((unsigned int *)a4 + 266) | ((unint64_t)*((unsigned __int16 *)a4 + 534) << 32)) & 0x10000000000) != 0
          && (*(unsigned int (**)(CA::WindowServer::Display *))(*(_QWORD *)a3 + 616))(a3))
        {
          v96 = (*(uint64_t (**)(CA::WindowServer::Display *))(*(_QWORD *)a3 + 632))(a3);
          v97 = v341;
          if (v96)
            v97 = v96;
          v341 = v97;
          if (v96)
            v89 = 0;
        }
        v314 = v89;
        buffer = CA::WindowServer::IOMFBDisplay::allocate_buffer((uint64_t)this, (uint64_t)v340, 0, *((_QWORD *)a4 + 36));
        v100 = buffer;
        if (v338)
          v101 = 68;
        else
          v101 = 64;
        *((_BYTE *)buffer + 132) = v101 | buffer[33] & 0xAA;
        v102.i64[1] = *((_QWORD *)&v349 + 1);
        *((_OWORD *)buffer + 3) = v349;
        if (v11[2719])
        {
          IOMobileFramebufferSwapSetBackgroundColor();
          *(_OWORD *)buf = 0u;
          v354 = 0u;
          *(_OWORD *)v361 = 0u;
          v362 = 0u;
          CA::WindowServer::IOMFBDisplay::swap_set_layer(this, 0, 0, (CA::WindowServer::Surface *)buf, (const CA::Rect *)v361, 0, *v86, *((_DWORD *)a4 + 62), v303[0], v303[1]);
          *(_OWORD *)buf = 0u;
          v354 = 0u;
          *(_OWORD *)v361 = 0u;
          v362 = 0u;
          CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)1, 0, (CA::WindowServer::Surface *)buf, (const CA::Rect *)v361, 0, *v86, *((_DWORD *)a4 + 62), v304, v308);
          *(_OWORD *)buf = 0u;
          v354 = 0u;
          *(_OWORD *)v361 = 0u;
          v362 = 0u;
          CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)2, 0, (CA::WindowServer::Surface *)buf, (const CA::Rect *)v361, 0, *v86, *((_DWORD *)a4 + 62), v305, v309);
          if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1648))(this))
          {
            v103 = (CA::Render::Update *)v11[1043];
            *(_OWORD *)buf = 0u;
            v354 = 0u;
            *(_OWORD *)v361 = 0u;
            v362 = 0u;
            CA::WindowServer::IOMFBDisplay::swap_set_layer(this, v103, 0, (CA::WindowServer::Surface *)buf, (const CA::Rect *)v361, 0, *v86, *((_DWORD *)a4 + 62), v303[0], v303[1]);
          }
        }
        v324 = v100;
        if ((*((_BYTE *)this + 745) & 0x40) == 0 || !v88 || ((v342 | *(unsigned __int8 *)(v88 + 292)) & 1) != 0)
        {
          CA::WindowServer::IOMFBDisplay::delete_detached_layer(this);
          v104 = 0;
LABEL_148:
          v105 = v11[1040];
          v106 = *((_QWORD *)this + 3251);
          if (!v106 && (_DWORD)v105 != 2 && v11[2724])
          {
            if ((*((_DWORD *)this + 14) & 0x10) != 0)
              v105 = v11[1040];
            else
              v105 = 2;
          }
          if (v11[2707] || v11[2719])
          {
            if (v106)
            {
              v107 = *(CA::Render::Update **)(v106 + 24);
              memset(buf, 0, sizeof(buf));
              v108 = *((_QWORD *)v107 + 7);
              v109.i64[0] = v108;
              v109.i64[1] = HIDWORD(v108);
              v354 = (int8x16_t)vcvtq_f64_u64(v109);
              v110 = *(int8x16_t *)(v106 + 240);
              *(_OWORD *)v361 = *(_OWORD *)(v106 + 224);
              v362 = v110;
              CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)v11[1041], v107, (CA::WindowServer::Surface *)buf, (const CA::Rect *)v361, (const CA::Rect *)*(unsigned int *)(v106 + 40), *v86, *((_DWORD *)a4 + 62), v303[0], v303[1]);
              *(_OWORD *)v351 = 0u;
              v352 = 0u;
              v347 = 0u;
              v348 = 0u;
              CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)((_DWORD)v105 == 0), 0, (CA::WindowServer::Surface *)v351, (const CA::Rect *)&v347, 0, *v86, *((_DWORD *)a4 + 62), v306, v310);
              v111 = *(_QWORD *)(v106 + 24);
              *(_DWORD *)(v111 + 224) = *(_DWORD *)(v111 + 224) & 0xFFFF0000 | (unsigned __int16)(*(_DWORD *)(v111 + 224)
                                                                                                + 1);
              *((_QWORD *)this + 6 * v334 + 3221) = v111;
              if ((*(_BYTE *)(v106 + 292) & 4) != 0)
                *((_BYTE *)this + 48 * v334 + 25792) |= 2u;
            }
            else
            {
              *(_OWORD *)buf = 0u;
              v354 = 0u;
              *(_OWORD *)v361 = 0u;
              v362 = 0u;
              CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)1, 0, (CA::WindowServer::Surface *)buf, (const CA::Rect *)v361, 0, *v86, *((_DWORD *)a4 + 62), v303[0], v303[1]);
              *(_OWORD *)buf = 0u;
              v354 = 0u;
              *(_OWORD *)v361 = 0u;
              v362 = 0u;
              CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)(2 * ((_DWORD)v105 == 0)), 0, (CA::WindowServer::Surface *)buf, (const CA::Rect *)v361, 0, *v86, *((_DWORD *)a4 + 62), v307, v311);
            }
          }
          if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 2192))(this) & 1) != 0)
          {
            v113 = v329;
            v114 = v341;
            if (!v341)
              goto LABEL_173;
          }
          else
          {
            v113 = v329;
            v114 = v341;
            if (*((_QWORD *)this + 3251) || !v341)
              goto LABEL_173;
          }
          if (((v342 | v338) & 1) != 0)
          {
LABEL_173:
            *(_OWORD *)buf = 0u;
            v354 = 0u;
            *(_OWORD *)v361 = 0u;
            v362 = 0u;
            CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)v105, 0, (CA::WindowServer::Surface *)buf, (const CA::Rect *)v361, 0, *v86, *((_DWORD *)a4 + 62), v303[0], v303[1]);
            v120 = 0;
LABEL_219:
            v100[3] = *v86;
            CA::WindowServer::IOMFBDisplay::update_color_matrix(this, *((double *)a4 + 9));
            CA::WindowServer::IOMFBDisplay::update_blend_display_color_spaces(this);
            CA::WindowServer::IOMFBDisplay::update_system_gamma(this, v154);
            CA::WindowServer::IOMFBDisplay::update_blackpoint_adaptation(this);
            CA::WindowServer::IOMFBDisplay::update_gamma_adjustment(this);
            CA::WindowServer::IOMFBDisplay::update_user_adjustment(this);
            CA::WindowServer::IOMFBDisplay::swap_brightness(this);
            CA::WindowServer::IOMFBDisplay::update_display_edr_factor(this);
            CA::WindowServer::IOMFBDisplay::swap_display_edr_factor((uint64_t)this);
            CA::WindowServer::IOMFBDisplay::swap_display_headroom_used(this, a4);
            CA::WindowServer::IOMFBDisplay::swap_hdr_metadata(this, a4);
            if (v11[2770])
            {
              v155 = v11[2715];
              if (v155 != (*(unsigned int (**)(CA::WindowServer::Display *))(*(_QWORD *)a3 + 848))(a3))
              {
                v11[2715] = (*(uint64_t (**)(CA::WindowServer::Display *))(*(_QWORD *)a3 + 848))(a3);
                IOMobileFramebufferSwapSetColorRemapMode();
              }
            }
            if ((v331 & 1) == 0)
            {
              if (v322 <= v321)
                v156 = v321;
              else
                v156 = v322;
              if (v156 <= 1073741822)
                v157 = (double)v321 * (double)v322;
              else
                v157 = INFINITY;
              v158 = mach_absolute_time();
              v159 = CATimeWithHostTime(v158);
              CARecordFrame(0, 0, 0, 0, v159, v157, 0.0);
            }
            v17 = IOMobileFramebufferSwapEnd();
            if (v104)
            {
              v160 = *((_QWORD *)this + 3251);
              if (v160)
              {
                v161 = *(CA::WindowServer::Surface **)(v160 + 24);
                if (v161)
                {
                  CA::WindowServer::Surface::unref(v161);
                  *(_QWORD *)(*((_QWORD *)this + 3251) + 24) = 0;
                }
              }
            }
            if (v120)
            {
              v162 = (CA::WindowServer::Surface *)*((_QWORD *)v100 + 4);
              if (v162)
              {
                CA::WindowServer::Surface::unref(v162);
                *((_QWORD *)v100 + 4) = 0;
              }
            }
            if (v17)
            {
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                v163 = x_log_category_windowserver;
                if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
                {
                  v164 = *((_DWORD *)this + 6);
                  *(_DWORD *)buf = 67109376;
                  *(_DWORD *)&buf[4] = v164;
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v17;
                  _os_log_impl(&dword_184457000, v163, OS_LOG_TYPE_ERROR, "display %u swap_end returned error %x\n", buf, 0xEu);
                }
              }
              if (BYTE9(xmmword_1ECDC6A90))
                kdebug_trace();
              *v86 = 0;
              LOBYTE(v17) = -16;
            }
            else
            {
              *((_QWORD *)this + 3308) = *((_QWORD *)a4 + 9);
            }
            CA::WindowServer::IOMFBDisplay::finish_update_((uint64_t)this, v340, (uint64_t)a4, 0);
            v165 = 0;
            if (!v11[2770])
            {
              v166 = v11[2715];
              if (v166 == (*(unsigned int (**)(CA::WindowServer::Display *))(*(_QWORD *)a3 + 848))(a3))
              {
                v165 = 0;
              }
              else
              {
                v11[2715] = (*(uint64_t (**)(CA::WindowServer::Display *))(*(_QWORD *)a3 + 848))(a3);
                v165 = 16;
              }
            }
            v172 = *((float *)v11 + 198);
            if (v172 != (*(float (**)(CA::WindowServer::Display *))(*(_QWORD *)a3 + 904))(a3))
            {
              *((float *)v11 + 198) = (*(float (**)(CA::WindowServer::Display *))(*(_QWORD *)a3 + 904))(a3);
              v165 |= 0x20u;
            }
            v173 = *((float *)v11 + 217);
            if (v173 != (*(float (**)(CA::WindowServer::Display *))(*(_QWORD *)a3 + 1000))(a3))
            {
              *((float *)v11 + 217) = (*(float (**)(CA::WindowServer::Display *))(*(_QWORD *)a3 + 1000))(a3);
              v165 |= 0x100u;
            }
            CA::WindowServer::IOMFBDisplay::update_framebuffer(this, v165);
            goto LABEL_259;
          }
          if ((v113 - 1) > 2)
          {
            v343 = 0;
            v119 = 0;
          }
          else
          {
            v115 = v104;
            v116 = dword_18475F498[v113 - 1];
            v117 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, uint64_t, uint64_t))(*(_QWORD *)this
                                                                                                 + 2272))(this, v116, v114);
            v118 = 2 * v116;
            if (!v117)
              v118 = 0;
            v343 = v118;
            if (v117)
              v119 = 0;
            else
              v119 = v116;
            v104 = v115;
            v100 = v324;
          }
          if (HIBYTE(xmmword_1ECDC6AF0))
          {
            v135 = v119 | 0x400;
          }
          else if (v11[2723])
          {
            v135 = v119;
          }
          else
          {
            v135 = v119 | 0x400;
          }
          if (v100[2] != 1)
          {
            v143 = 0;
            goto LABEL_209;
          }
          v339 = v135;
          v326 = v104;
          v312 = v86;
          if (!v331)
          {
            v174 = (CA::WindowServer::Surface *)*((_QWORD *)v100 + 5);
            if (v174)
            {
              CA::WindowServer::Surface::unref(v174);
              *((_QWORD *)v100 + 5) = 0;
            }
            (*(void (**)(CA::WindowServer::IOMFBDisplay *, _QWORD))(*(_QWORD *)this + 1568))(this, 0);
LABEL_327:
            is_hdr = CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::Display::Mode *)&v350);
            v239 = is_hdr;
            if ((_DWORD)v105 == 2)
              v240 = 875704422;
            else
              v240 = 1380411457;
            if ((_DWORD)v105 != 2 && !is_hdr)
              v240 = CA::WindowServer::IOMFBDisplay::framebuffer_pixel_format(this);
            v335 = v239;
            v330 = v240;
            if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 80))(this))
            {
              v339 |= 0x10000u;
              v241 = v317;
              v242 = v323;
            }
            else
            {
              if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, uint64_t, __int128 *))(*(_QWORD *)this + 2296))(this, v105, &v349) & 1) == 0&& !HIBYTE(xmmword_1ECDC6AF0)&& v11[2723])
              {
                v243 = (_DWORD *)v341;
                if ((v339 & 4) != 0)
                  v241 = *(_DWORD *)(v341 + 60);
                else
                  v241 = *(_DWORD *)(v341 + 56);
                if ((v339 & 4) != 0)
                  v242 = *(_DWORD *)(v341 + 56);
                else
                  v242 = *(_DWORD *)(v341 + 60);
LABEL_351:
                if ((_DWORD)v105 == 2)
                  v244 = (v241 + 1) & 0xFFFFFFFE;
                else
                  v244 = v241;
                if ((_DWORD)v105 == 2)
                  v245 = (v242 + 1) & 0xFFFFFFFE;
                else
                  v245 = v242;
                v246 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v243 + 216))(v243);
                if (v344)
                  v247 = 0;
                else
                  v247 = v246;
                v346 = v11[2724];
                if (v11[2724])
                {
                  if (v11[2721])
                  {
                    LODWORD(v244) = v243[14];
                    LODWORD(v245) = v243[15];
                  }
                  *(_QWORD *)v361 = 0;
                  v364.width = (double)v244;
                  v364.height = (double)v245;
                  wireless_surface_options = CA::IOMobileFramebuffer::get_wireless_surface_options(*v336, *((double *)a4 + 9), v364, (__IOSurface **)v361);
                  if (wireless_surface_options)
                  {
                    v249 = wireless_surface_options;
                    IOMobileFramebufferSwapCancel();
                    *v312 = 0;
                    if (v249 != -536870184)
                    {
                      if (x_log_hook_p())
                        goto LABEL_464;
                      v271 = x_log_category_windowserver;
                      if (!os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
                      {
LABEL_469:
                        LOBYTE(v17) = -14;
                        goto LABEL_259;
                      }
                      v272 = *((_DWORD *)this + 6);
                      *(_DWORD *)buf = 67109376;
                      *(_DWORD *)&buf[4] = v272;
                      *(_WORD *)&buf[8] = 1024;
                      *(_DWORD *)&buf[10] = v249;
                      v273 = buf;
                      goto LABEL_468;
                    }
LABEL_455:
                    LOBYTE(v17) = -13;
LABEL_259:
                    pthread_mutex_unlock(v332);
                    return v17;
                  }
                  v253 = CA::WindowServer::IOSurface::wrap_buffer(this, *(IOSurfaceRef *)v361, 0, 0);
                  *((_QWORD *)v324 + 4) = v253;
                  v143 = 1;
                  if (!v253)
                    goto LABEL_482;
                  goto LABEL_384;
                }
                v250 = v324;
                v251 = (CA::WindowServer::Surface *)*((_QWORD *)v324 + 4);
                if (!v251)
                  goto LABEL_383;
                if (*((_DWORD *)v251 + 14) == (_DWORD)v244
                  && *((_DWORD *)v251 + 15) == (_DWORD)v245
                  && *((_DWORD *)v251 + 16) == v330)
                {
                  v252 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)v251 + 24))(v251);
                  v251 = (CA::WindowServer::Surface *)*((_QWORD *)v324 + 4);
                  if (!v252)
                  {
                    if ((*(unsigned int (**)(CA::WindowServer::Surface *))(*(_QWORD *)v251 + 56))(v251) == 2
                      || ((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1832))(this) & 1) != 0)
                    {
                      v298 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v324 + 4) + 216))(*((_QWORD *)v324 + 4));
                      v251 = (CA::WindowServer::Surface *)*((_QWORD *)v324 + 4);
                      if (v298 == v247)
                      {
                        v143 = 0;
                        if (v251)
                          goto LABEL_384;
                        goto LABEL_482;
                      }
                    }
                    else
                    {
                      v251 = (CA::WindowServer::Surface *)*((_QWORD *)v324 + 4);
                    }
                  }
                  v250 = v324;
                  if (!v251)
                  {
LABEL_383:
                    surface = CA::WindowServer::Display::allocate_surface((uint64_t)this, v244, v245, (CA::Render *)v330, 0, 2u, 0, v247, (uint64_t)CFSTR("CA Clone Surface"), 0);
                    v143 = 0;
                    *((_QWORD *)v250 + 4) = surface;
                    if (surface)
                    {
LABEL_384:
                      v256 = v331;
                      if (!v314)
                        v256 = 1;
                      if (v256)
                        v257 = (CA::WindowServer::Surface *)v341;
                      else
                        v257 = v314;
                      v258 = v335;
                      if (!v11[2724])
                        v258 = 0;
                      if (v258
                        && (*(unsigned int (**)(CA::WindowServer::Surface *))(*(_QWORD *)v257 + 128))(v257))
                      {
                        v359 = 0u;
                        v360 = 0u;
                        v357 = 0u;
                        v358 = 0u;
                        v355 = 0u;
                        v356 = 0u;
                        *(_OWORD *)buf = 0u;
                        v354 = 0u;
                        CA::WindowServer::Display::display_attributes((CA::WindowServer::Display *)buf, (uint64_t)this);
                        v259 = *((_QWORD *)v324 + 4);
                        v260 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v259 + 216))(v259);
                        if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, uint64_t, CA::WindowServer::Surface *, uint8_t *, CA::Render::Update *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 640))(this, v259, v257, buf, a4, v339, v260, 1) & 1) == 0)
                        {
LABEL_394:
                          if (x_log_hook_p())
                          {
                            x_log_();
                          }
                          else
                          {
                            v274 = x_log_category_windowserver;
                            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
                            {
                              *(_WORD *)buf = 0;
                              _os_log_impl(&dword_184457000, v274, OS_LOG_TYPE_DEFAULT, "CoreAnimation: failed to copy main layer", buf, 2u);
                            }
                          }
                          if (v346
                            && (*(uint64_t (**)(_QWORD))(**((_QWORD **)v324 + 4) + 160))(*((_QWORD *)v324 + 4)))
                          {
                            v275 = (CA::Render::Update *)v11[1040];
                            v276 = (CA::Render::Update *)*((_QWORD *)v324 + 4);
                            *(_OWORD *)buf = 0u;
                            v354 = 0u;
                            *(_OWORD *)v361 = 0u;
                            v362 = 0u;
                            CA::WindowServer::IOMFBDisplay::swap_set_layer(this, v275, v276, (CA::WindowServer::Surface *)buf, (const CA::Rect *)v361, 0, *v312, *((_DWORD *)a4 + 62), v303[0], v303[1]);
                          }
                          v277 = (CA::WindowServer::Surface *)*((_QWORD *)v324 + 4);
                          if (v277)
                            CA::WindowServer::Surface::unref(v277);
                          *((_QWORD *)v324 + 4) = 0;
                          IOMobileFramebufferSwapCancel();
                          *v312 = 0;
LABEL_462:
                          LOBYTE(v17) = -15;
                          goto LABEL_259;
                        }
                      }
                      else
                      {
                        *(_OWORD *)buf = 0u;
                        v354 = 0u;
                        if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 80))(this))
                        {
                          v263 = v333;
                          if ((int)v333 <= SHIDWORD(v333))
                            v263 = HIDWORD(v333);
                          v261.i32[0] = v263;
                          v262.i32[0] = 1073741822;
                          v264.i64[0] = v337.i32[0];
                          v264.i64[1] = v337.i32[1];
                          v261 = (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v261, v262), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v264));
                          v264.i64[0] = (int)v333;
                          v264.i64[1] = SHIDWORD(v333);
                          v265 = vdup_n_s32(v263 > 1073741822);
                          v266 = (int8x16_t)vcvtq_f64_s64(v264);
                          v264.i64[0] = v265.u32[0];
                          v264.i64[1] = v265.u32[1];
                          *(int32x4_t *)buf = v261;
                          v354 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v264, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v266);
                          v339 |= 0x400u;
                          v267 = buf;
                        }
                        else
                        {
                          v267 = 0;
                        }
                        if (CA::ScalerUtil::get_io_service(void)::once != -1)
                          dispatch_once(&CA::ScalerUtil::get_io_service(void)::once, &__block_literal_global_52);
                        if (CA::ScalerUtil::get_io_service(void)::scaler_service)
                          v269 = v339;
                        else
                          v269 = v339 | 0x800;
                        if (!v335)
                        {
                          v270 = v316;
                          if (!v11[2724])
                            v270 = 0;
                          v316 = v270;
                        }
                        if (CADeviceIsVirtualized::once[0] != -1)
                          dispatch_once(CADeviceIsVirtualized::once, &__block_literal_global_204);
                        if ((CA::WindowServer::IOMFBDisplay::copy_surface(this, *((CA::WindowServer::Surface **)v324 + 4), v257, v269, v316, (CA::Rect *)v267, 0, 0, *(float *)v261.i32) & 1) == 0)goto LABEL_394;
                      }
                      v100 = v324;
                      *((_BYTE *)v324 + 132) = v324[33] & 0xF6 | 1;
                      v86 = v312;
                      v104 = v326;
LABEL_209:
                      v144 = *((_QWORD *)v100 + 4);
                      if (v144)
                      {
                        memset(buf, 0, sizeof(buf));
                        v145 = *(_QWORD *)(v144 + 56);
                        v146.i64[0] = v145;
                        v146.i64[1] = HIDWORD(v145);
                        v147 = (int32x4_t)vcvtq_f64_u64(v146);
                        v345 = v147;
                        v354 = (int8x16_t)v147;
                        v148 = v333;
                        if ((int)v333 <= SHIDWORD(v333))
                          v148 = HIDWORD(v333);
                        v147.i32[0] = v148;
                        v112.i32[0] = 1073741822;
                        v149.i64[0] = v337.i32[0];
                        v149.i64[1] = v337.i32[1];
                        v150 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v147, v112), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v149));
                        v149.i64[0] = (int)v333;
                        v149.i64[1] = SHIDWORD(v333);
                        v151 = vdup_n_s32(v148 > 1073741822);
                        v152 = (int8x16_t)vcvtq_f64_s64(v149);
                        v149.i64[0] = v151.u32[0];
                        v149.i64[1] = v151.u32[1];
                        *(int8x16_t *)v361 = v150;
                        v362 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v149, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v152);
                        if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 80))(this))
                        {
                          memset(v361, 0, sizeof(v361));
                          v362 = (int8x16_t)v345;
                        }
                        CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)v105, *((CA::Render::Update **)v100 + 4), (CA::WindowServer::Surface *)buf, (const CA::Rect *)v361, (const CA::Rect *)v343, *v86, *((_DWORD *)a4 + 62), v303[0], v303[1]);
                        if (initialized[0] != -1)
                          dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
                        if (*(float *)&dword_1ECDC6940)
                        {
                          v153 = (__IOSurface *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v100 + 4) + 160))(*((_QWORD *)v100 + 4));
                          CA::WindowServer::IOMFBDisplay::dump_framebuffer(this, v153);
                        }
                      }
                      v120 = v143 != 0;
                      goto LABEL_219;
                    }
LABEL_482:
                    v86 = v312;
                    v104 = v326;
                    v100 = v324;
                    goto LABEL_209;
                  }
                }
                else
                {
                  v250 = v324;
                }
                CA::WindowServer::Surface::unref(v251);
                *((_QWORD *)v250 + 4) = 0;
                goto LABEL_383;
              }
              if ((v343 & 8) != 0)
                v241 = v321;
              else
                v241 = v322;
              if ((v343 & 8) != 0)
                v242 = v322;
              else
                v242 = v321;
            }
            v243 = (_DWORD *)v341;
            goto LABEL_351;
          }
          v136 = (CA::Render *)CA::WindowServer::IOMFBDisplay::framebuffer_pixel_format(this);
          v137 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v114 + 216))(v114);
          if (v344)
            v138 = 0;
          else
            v138 = v137;
          v139 = *((_QWORD *)v100 + 5);
          if (!v139)
            goto LABEL_325;
          v140 = (CA::WindowServer::Surface *)*((_QWORD *)v100 + 5);
          if (*(_DWORD *)(v139 + 56) == *((_DWORD *)a3 + 52)
            && *((_DWORD *)v140 + 15) == *((_DWORD *)a3 + 53)
            && *((_DWORD *)v140 + 16) == (_DWORD)v136)
          {
            v141 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)v140 + 216))(v140);
            v142 = (CA::WindowServer::Surface *)*((_QWORD *)v324 + 5);
            if (v141 == v138)
            {
LABEL_326:
              v236 = mach_absolute_time();
              v237 = CATimeWithHostTime(v236);
              v341 = (uint64_t)v142;
              CA::WindowServer::Server::inhibit_clone_render(a2, v142, a4, a3, v237);
              goto LABEL_327;
            }
            v140 = (CA::WindowServer::Surface *)*((_QWORD *)v324 + 5);
            v100 = v324;
            if (!v142)
            {
LABEL_325:
              v142 = (CA::WindowServer::Surface *)CA::WindowServer::Display::allocate_surface((uint64_t)this, *((unsigned int *)a3 + 52), *((unsigned int *)a3 + 53), v136, 0, 2u, 0, v138, (uint64_t)CFSTR("CA Clone Surface"), 0);
              *((_QWORD *)v100 + 5) = v142;
              goto LABEL_326;
            }
          }
          else
          {
            v100 = v324;
          }
          CA::WindowServer::Surface::unref(v140);
          goto LABEL_325;
        }
        v121 = (char *)*((_QWORD *)this + 3251);
        if (!v121)
        {
          v121 = (char *)x_mem_alloc0(0x128uLL);
          *((_QWORD *)this + 3251) = v121;
        }
        v122 = *(unsigned int **)v121;
        v123 = v325;
        if (*(_QWORD *)v121)
        {
          v124 = v122 + 2;
          do
          {
            v125 = __ldaxr(v124);
            v126 = v125 - 1;
          }
          while (__stlxr(v126, v124));
          if (!v126)
            (*(void (**)(unsigned int *, _QWORD))(*(_QWORD *)v122 + 16))(v122, v325);
          *(_QWORD *)v121 = 0;
          *((_DWORD *)v121 + 72) = 0;
          v123 = v325;
        }
        v127 = (unsigned int *)*((_QWORD *)v121 + 1);
        if (v127)
        {
          v128 = v127 + 2;
          do
          {
            v129 = __ldaxr(v128);
            v130 = v129 - 1;
          }
          while (__stlxr(v130, v128));
          if (!v130)
            (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v127 + 16))(v127, v123);
          *((_QWORD *)v121 + 1) = 0;
          v123 = v325;
        }
        v121[292] = v121[292] & 0xFB | *(_BYTE *)(v88 + 292) & 4;
        *((_DWORD *)v121 + 8) = *(_DWORD *)(v88 + 32);
        v131 = *(_DWORD *)(v88 + 36) & 0xFFFFFF78 | 0x80;
        *((_DWORD *)v121 + 9) = v131;
        if ((_DWORD)v123
          && (v132 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, uint64_t, _QWORD))(*(_QWORD *)this
                                                                                                  + 2272))(this, v123, *(_QWORD *)(v88 + 16)), v131 = *((_DWORD *)v121 + 9), v132))
        {
          v133 = v325;
          *((_DWORD *)v121 + 10) = 2 * v325;
          v134 = v131 | *(_DWORD *)(v88 + 36) & 7;
          *((_DWORD *)v121 + 9) = v134;
        }
        else
        {
          v134 = v131 | CA::WindowServer::IOMFBDisplay::clone_update(CA::WindowServer::Server *,CA::WindowServer::Display *,CA::Render::Update *,unsigned int &,BOOL &)::concat_rot[(8 * v329) | (unint64_t)(*(_DWORD *)(v88 + 36) & 7)];
          *(_QWORD *)(v121 + 36) = v134;
          v133 = v325;
        }
        v167 = *(double *)(v88 + 96);
        *((double *)v121 + 20) = v167;
        v168 = *(double *)(v88 + 104);
        *((double *)v121 + 21) = v168;
        v169 = *(double *)(v88 + 112);
        *((double *)v121 + 22) = v169;
        v170 = *(double *)(v88 + 120);
        *((double *)v121 + 23) = v170;
        *((_OWORD *)v121 + 4) = *(_OWORD *)(v88 + 64);
        *((_OWORD *)v121 + 5) = *(_OWORD *)(v88 + 80);
        *((_OWORD *)v121 + 6) = *(_OWORD *)(v88 + 96);
        *((_OWORD *)v121 + 7) = *(_OWORD *)(v88 + 112);
        v313 = v86;
        if (v133)
        {
          if (v133 >= 4)
          {
            v175 = v168 + v170;
            v168 = v167;
            v167 = v51 - v175;
            v171 = v169;
            v169 = v170;
            v170 = v171;
          }
          else
          {
            v171 = v170;
          }
          if ((v325 & 2) != 0)
            v167 = v51 - (v167 + v169);
          v176 = v52 - (v168 + v171);
          if ((v325 & 1) != 0)
            v168 = v176;
        }
        v177 = v318;
        v178 = v349;
        v179 = (double)v337.i32[0] + *(double *)&v349 * v167;
        v180 = (double)v337.i32[1] + *((double *)&v349 + 1) * v168;
        *((double *)v121 + 20) = v179;
        *((double *)v121 + 21) = v180;
        v181 = v169 * *(double *)&v178;
        v182 = v170 * *((double *)&v178 + 1);
        *((double *)v121 + 22) = v181;
        *((double *)v121 + 23) = v182;
        v183 = *(double *)(v88 + 112);
        v184 = *(_DWORD *)(v88 + 36);
        if ((v184 & 4) != 0)
          v185 = *(double *)(v88 + 120);
        else
          v185 = *(double *)(v88 + 112);
        if ((v184 & 4) == 0)
          v183 = *(double *)(v88 + 120);
        v186 = v185 * *(double *)&v178;
        v187 = *(double *)(v88 + 144);
        v188 = *(double *)(v88 + 152);
        v189 = v186 / v187;
        v190 = v183 * *((double *)&v178 + 1) / v188;
        v191 = v189 * *(double *)(v88 + 128);
        v192 = *(double *)(v88 + 136) * v190;
        v193 = v189 * v187;
        v194 = v190 * v188;
        if ((v134 & 7) != 0)
        {
          v195 = v191 + v193;
          v196 = v192 + v194;
          if ((v134 & 4) != 0)
            v197 = v196;
          else
            v197 = v191;
          if ((v134 & 4) == 0)
          {
            v191 = v192;
            v192 = v195;
            v195 = v196;
          }
          if ((v134 & 2) != 0)
            v198 = v192;
          else
            v198 = v197;
          if ((v134 & 2) == 0)
            v197 = v192;
          if ((v134 & 1) != 0)
            v199 = v195;
          else
            v199 = v191;
          if ((v134 & 1) != 0)
            v200 = v191;
          else
            v200 = v195;
          if (v198 >= v197)
            v191 = v197;
          else
            v191 = v198;
          if (v199 >= v200)
            v192 = v200;
          else
            v192 = v199;
          v193 = v197 - v198;
          v201 = -(v197 - v198);
          if (v193 < 0.0)
            v193 = v201;
          v194 = v200 - v199;
          if (v200 - v199 < 0.0)
            v194 = -(v200 - v199);
        }
        v202 = floor(v179 + 0.5);
        v203 = floor(v191 + 0.5);
        *((double *)v121 + 24) = v203;
        v204 = floor(v180 + 0.5);
        *((double *)v121 + 20) = v202;
        *((double *)v121 + 21) = v204;
        *(double *)v99.i64 = floor(v181 + 0.5);
        *(double *)v102.i64 = floor(v182 + 0.5);
        *((_QWORD *)v121 + 22) = v99.i64[0];
        *((_QWORD *)v121 + 23) = v102.i64[0];
        v205 = floor(v192 + 0.5);
        *((double *)v121 + 16) = v203;
        *((double *)v121 + 17) = v205;
        v206 = floor(v193 + 0.5);
        v207 = floor(v194 + 0.5);
        *((double *)v121 + 18) = v206;
        *((double *)v121 + 19) = v207;
        *((double *)v121 + 25) = v205;
        *((double *)v121 + 26) = v206;
        *((double *)v121 + 28) = v202;
        *((double *)v121 + 27) = v207;
        *((double *)v121 + 29) = v204;
        *((_QWORD *)v121 + 30) = v99.i64[0];
        *((_QWORD *)v121 + 31) = v102.i64[0];
        v208 = HIDWORD(v333);
        if ((int)v333 > SHIDWORD(v333))
          v208 = v333;
        v102.i32[0] = v208;
        v99.i32[0] = 1073741822;
        v209.i64[0] = v337.i32[0];
        v209.i64[1] = v337.i32[1];
        v210 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v102, v99), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v209));
        v209.i64[0] = (int)v333;
        v209.i64[1] = SHIDWORD(v333);
        v211 = (int8x16_t)vcvtq_f64_s64(v209);
        v212 = vdup_n_s32(v208 > 1073741822);
        v209.i64[0] = v212.u32[0];
        v209.i64[1] = v212.u32[1];
        v327 = (float64x2_t)v210;
        *(int8x16_t *)buf = v210;
        v354 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v209, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v211);
        v319 = (float64x2_t)v354;
        if (!CA::BoundsImpl::contains((double *)buf, (double *)v121 + 28))
          CA::OGL::clip_detached_rects((float64x2_t *)v121 + 12, (float64x2_t *)v121 + 14, 0, v213, v327, v319, v214, v215, v216, v217, v218, v219);
        if (v177 == 2)
          goto LABEL_310;
        if (*((double *)v121 + 18) == *((double *)v121 + 22) && *((double *)v121 + 19) == *((double *)v121 + 23))
          *((_OWORD *)v121 + 15) = *((_OWORD *)v121 + 13);
        if (!v11[2724])
        {
LABEL_310:
          v221 = *(unsigned int **)(v88 + 16);
          v220 = v221[16];
          v328 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v221 + 24))(v221);
        }
        else
        {
          v328 = 0;
          v220 = 875704422;
        }
        v320 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v88 + 16) + 56))(*(_QWORD *)(v88 + 16));
        v222 = vadd_s32(vmovn_s64((int64x2_t)vcvtq_u64_f64(*((float64x2_t *)v121 + 13))), (int32x2_t)0x100000001);
        v223.i64[0] = v222.i32[0] & 0xFFFFFFFE;
        v223.i64[1] = v222.i32[1] & 0xFFFFFFFE;
        v224 = vcvtq_f64_u64(v223);
        *((float64x2_t *)v121 + 13) = v224;
        v225 = vadd_s32(vmovn_s64((int64x2_t)vcvtq_u64_f64(*((float64x2_t *)v121 + 15))), (int32x2_t)0x100000001);
        v223.i64[0] = v225.i32[0] & 0xFFFFFFFE;
        v223.i64[1] = v225.i32[1] & 0xFFFFFFFE;
        v226 = vcvtq_f64_u64(v223);
        *((float64x2_t *)v121 + 15) = v226;
        v227 = *((_DWORD *)v121 + 10);
        if (v227)
          v228 = v224.f64[0];
        else
          v228 = v226.f64[0];
        v229 = v228;
        v230 = v224.f64[1];
        if (!v227)
          v230 = v226.f64[1];
        v231 = v230;
        v232 = (CA::WindowServer::Surface *)*((_QWORD *)v121 + 3);
        if (v232)
        {
          if (*((_QWORD *)v121 + 2) != *(_QWORD *)(v88 + 16)
            || *((_DWORD *)v232 + 14) != (_DWORD)v229
            || *(_QWORD *)((char *)v232 + 60) != __PAIR64__(v220, v231))
          {
            goto LABEL_428;
          }
          v233 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)v232 + 24))(v232);
          v232 = (CA::WindowServer::Surface *)*((_QWORD *)v121 + 3);
          if (v233 == v328)
          {
            v234 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)v232 + 56))(v232);
            v232 = (CA::WindowServer::Surface *)*((_QWORD *)v121 + 3);
            if (v234 == v320)
            {
              v235 = 0;
              goto LABEL_447;
            }
          }
          if (v232)
          {
LABEL_428:
            CA::WindowServer::Surface::unref(v232);
            *((_QWORD *)v121 + 3) = 0;
          }
        }
        v278 = (CA::WindowServer::Surface *)*((_QWORD *)v121 + 2);
        if (v278)
          CA::WindowServer::Surface::unref(v278);
        v279 = *(_DWORD **)(v88 + 16);
        v279[56] = v279[56] & 0xFFFF0000 | (unsigned __int16)(v279[56] + 1);
        *((_QWORD *)v121 + 2) = v279;
        if (v11[2724])
        {
          *(_QWORD *)v351 = 0;
          v365.width = (double)v229;
          v365.height = (double)v231;
          v280 = CA::IOMobileFramebuffer::get_wireless_surface_options(*v336, *((double *)a4 + 9), v365, (__IOSurface **)v351);
          if (v280)
          {
            v281 = v280;
            if (!(*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 2192))(this))
            {
              CA::WindowServer::IOMFBDisplay::delete_detached_layer(this);
              IOMobileFramebufferSwapCancel();
              *v313 = 0;
              if (v281 != -536870184)
              {
                if (x_log_hook_p())
                {
LABEL_464:
                  x_log_();
                  goto LABEL_469;
                }
                v271 = x_log_category_windowserver;
                if (!os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
                  goto LABEL_469;
                v292 = *((_DWORD *)this + 6);
                *(_DWORD *)v361 = 67109376;
                *(_DWORD *)&v361[4] = v292;
                *(_WORD *)&v361[8] = 1024;
                *(_DWORD *)&v361[10] = v281;
                v273 = v361;
LABEL_468:
                _os_log_impl(&dword_184457000, v271, OS_LOG_TYPE_ERROR, "display %u get_wireless_surface_options returned error %x\n", v273, 0xEu);
                goto LABEL_469;
              }
              goto LABEL_455;
            }
            v235 = 0;
            v282 = *((_QWORD *)v121 + 3);
          }
          else
          {
            v282 = (uint64_t)CA::WindowServer::IOSurface::wrap_buffer(this, *(IOSurfaceRef *)v351, 0, 0);
            *((_QWORD *)v121 + 3) = v282;
            v235 = 1;
          }
        }
        else
        {
          v283 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v279 + 216))(v279);
          v282 = CA::WindowServer::Display::allocate_surface((uint64_t)this, v229, v231, (CA::Render *)v220, v328, v320, 0, v283, (uint64_t)CFSTR("CA Clone Surface"), 0);
          v235 = 0;
          *((_QWORD *)v121 + 3) = v282;
        }
        if (!v282)
        {
          v11[2707] = 1;
          goto LABEL_450;
        }
        v11[1041] = 2;
        v11[1040] = v315;
        v284 = *((_DWORD *)v121 + 9) & 7 | (((*((_DWORD *)v121 + 9) >> 3) & 1) << 9);
        if (HIBYTE(xmmword_1ECDC6AF0))
        {
          v285 = v284 | 0x400;
        }
        else if (v11[2723])
        {
          v285 = v284;
        }
        else
        {
          v285 = v284 | 0x400;
        }
        *(_OWORD *)v361 = 0u;
        v362 = 0u;
        if ((*(_DWORD *)(v88 + 36) & 0x8000080) != 0 || (*(_BYTE *)(v88 + 44) & 7) != 0)
        {
          __asm { FMOV            V1.2D, #0.5 }
          *(float64x2_t *)v361 = vrndq_f64(vaddq_f64(*(float64x2_t *)(v88 + 128), _Q1));
          v287 = *(double *)(v88 + 152);
          v362.i64[0] = trunc(*(double *)(v88 + 144) + 0.5);
          v288 = trunc(v287 + 0.5);
        }
        else
        {
          *(_OWORD *)v361 = *(_OWORD *)(v88 + 192);
          v288 = *(double *)(v88 + 216);
          v362.i64[0] = *(_QWORD *)(v88 + 208);
        }
        *(double *)&v362.i64[1] = v288;
        if (!CA::WindowServer::IOMFBDisplay::copy_surface(this, *((CA::WindowServer::Surface **)v121 + 3), *((CA::WindowServer::Surface **)v121 + 2), v285, 0, 0, (CA::Rect *)v361, 0, *(float *)&v288))
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v289 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v351 = 0;
              _os_log_impl(&dword_184457000, v289, OS_LOG_TYPE_DEFAULT, "CoreAnimation: failed to copy detached layer", v351, 2u);
            }
          }
          if (v235 && (*(uint64_t (**)(_QWORD))(**((_QWORD **)v121 + 3) + 160))(*((_QWORD *)v121 + 3)))
          {
            v290 = (CA::Render::Update *)v11[1041];
            v291 = (CA::Render::Update *)*((_QWORD *)v121 + 3);
            *(_OWORD *)v351 = 0u;
            v352 = 0u;
            v347 = 0u;
            v348 = 0u;
            CA::WindowServer::IOMFBDisplay::swap_set_layer(this, v290, v291, (CA::WindowServer::Surface *)v351, (const CA::Rect *)&v347, 0, *v313, *((_DWORD *)a4 + 62), v303[0], v303[1]);
          }
          CA::WindowServer::IOMFBDisplay::delete_detached_layer(this);
          IOMobileFramebufferSwapCancel();
          *v313 = 0;
          goto LABEL_462;
        }
        v232 = (CA::WindowServer::Surface *)*((_QWORD *)v121 + 3);
LABEL_447:
        v11[2707] = 1;
        if (v232)
        {
LABEL_451:
          v121[292] &= ~1u;
          v104 = v235 != 0;
          v86 = v313;
          v100 = v324;
          goto LABEL_148;
        }
LABEL_450:
        CA::WindowServer::IOMFBDisplay::delete_detached_layer(this);
        goto LABEL_451;
      default:
        v42 = 0;
        if ((v41 & 1) != 0)
        {
          v39 = 0;
          goto LABEL_56;
        }
        v325 = 0;
        break;
    }
    v42 = 1;
    v43 = *((_DWORD *)a3 + 52);
    v36 = *((_DWORD *)a3 + 53);
    goto LABEL_67;
  }
  ++*((_DWORD *)v11 + 1);
  if (v28 < v29)
    LOBYTE(v17) = -22;
  else
    LOBYTE(v17) = -6;
  return v17;
}

uint64_t CA::WindowServer::IOMFBDisplay::update_cloning_flag(CA::WindowServer::IOMFBDisplay *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  unsigned int *v13;
  unsigned int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  CA::Render::Context **v30;
  uint64_t v31;
  CA::Render::Context *v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  __int128 v38;

  if (*((_QWORD *)this + 6) && *((_QWORD *)this + 81))
  {
    if ((*((_DWORD *)this + 156) & 2) == 0)
    {
      v1 = (unsigned int *)((char *)this + 624);
      do
        v2 = __ldaxr(v1);
      while (__stlxr(v2 | 2, v1));
      goto LABEL_11;
    }
    return 0;
  }
  if ((*((_DWORD *)this + 156) & 2) == 0)
    return 0;
  v4 = (unsigned int *)((char *)this + 624);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 & 0xFFFFFFFD, v4));
LABEL_11:
  v6 = *((_QWORD *)this + 6);
  if (v6)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v6 + 16));
    if (*(_QWORD *)(v6 + 128))
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0uLL;
      do
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v6 + 112) + 16 * v9);
        v12 = (char *)*((_QWORD *)&v10 + 1);
        if (v11)
        {
          v13 = (unsigned int *)(v11 + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 + 1, v13));
          if (!v14)
          {
            do
            {
              v11 = 0;
              v28 = __ldaxr(v13);
            }
            while (__stlxr(v28 - 1, v13));
          }
          v8 = (char *)*((_QWORD *)&v10 + 1);
        }
        if (v8 >= v7)
        {
          v16 = (char *)v10;
          v17 = (uint64_t)&v8[-v10] >> 3;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 61)
            abort();
          if ((uint64_t)&v7[-v10] >> 2 > v18)
            v18 = (uint64_t)&v7[-v10] >> 2;
          if ((unint64_t)&v7[-v10] >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          if (v19)
          {
            if (v19 >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v20 = (char *)operator new(8 * v19);
            v8 = v12;
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[8 * v17];
          *(_QWORD *)v21 = v11;
          v15 = v21 + 8;
          while (v8 != v16)
          {
            v22 = *((_QWORD *)v8 - 1);
            v8 -= 8;
            *((_QWORD *)v21 - 1) = v22;
            v21 -= 8;
            *(_QWORD *)v8 = 0;
          }
          while (v12 != v16)
          {
            v24 = (unsigned int *)*((_QWORD *)v12 - 1);
            v12 -= 8;
            v23 = v24;
            if (v24)
            {
              v25 = v23 + 2;
              do
              {
                v26 = __ldaxr(v25);
                v27 = v26 - 1;
              }
              while (__stlxr(v27, v25));
              if (!v27)
                (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 16))(v23);
            }
          }
          v7 = &v20[8 * v19];
          *(_QWORD *)&v10 = v21;
          if (v16)
          {
            operator delete(v16);
            *(_QWORD *)&v10 = v21;
          }
        }
        else
        {
          *(_QWORD *)v8 = v11;
          v15 = v8 + 8;
        }
        *((_QWORD *)&v10 + 1) = v15;
        ++v9;
        v8 = v15;
      }
      while (v9 < *(_QWORD *)(v6 + 128));
    }
    else
    {
      v10 = 0uLL;
    }
    v38 = v10;
    os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 16));
    v29 = *((_QWORD *)&v38 + 1);
    if ((_QWORD)v38 != *((_QWORD *)&v38 + 1))
    {
      v30 = (CA::Render::Context **)v38;
      do
      {
        pthread_mutex_lock((pthread_mutex_t *)((char *)*v30 + 72));
        v31 = CA::Render::Context::root_layer_handle(*v30);
        if (v31)
          *(_QWORD *)(v31 + 96) |= 8uLL;
        v32 = *v30++;
        pthread_mutex_unlock((pthread_mutex_t *)((char *)v32 + 72));
      }
      while (v30 != *((CA::Render::Context ***)&v38 + 1));
      if (!(_QWORD)v38)
        return 1;
      if ((_QWORD)v38 != *((_QWORD *)&v38 + 1))
      {
        do
        {
          v34 = *(unsigned int **)(v29 - 8);
          v29 -= 8;
          v33 = v34;
          if (v34)
          {
            v35 = v33 + 2;
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
              (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 16))(v33);
          }
        }
        while (v29 != (_QWORD)v38);
      }
      goto LABEL_62;
    }
    if ((_QWORD)v38)
LABEL_62:
      operator delete((void *)v38);
  }
  return 1;
}

double CA::WindowServer::IOMFBDisplay::clone_scale(CA::WindowServer::IOMFBDisplay *this, CA::WindowServer::Display *a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  double result;
  int v12;
  float v13;
  uint64_t v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 3383);
  v14[0] = v4;
  if ((v4 & 0x10000000) != 0)
    v5 = *((_DWORD *)this + 40);
  else
    v5 = v4 & 0x3FFF;
  v6 = std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6600, v4, v14);
  v7 = *((_QWORD *)a2 + 80);
  if ((v7 & 0x10000000) != 0)
  {
    v8 = *((_DWORD *)a2 + 40);
    v9 = *((_DWORD *)a2 + 41);
  }
  else
  {
    v8 = v7 & 0x3FFF;
    v9 = (v7 >> 14) & 0x3FFF;
  }
  v10 = *((_DWORD *)this + 14);
  result = 1.0;
  if ((v10 & 2) == 0)
  {
    v12 = (v10 >> 2) & 1;
    if ((*((_WORD *)a2 + 328) & 1) == 0)
      v12 = 1;
    if (!v12)
      v8 = v9;
    result = (double)v5 / (double)v8;
    if (*((_BYTE *)v6 + 40) && (v10 & 8) == 0)
    {
      v13 = *(float *)&CA::WindowServer::clone_overscan_amounts_x;
      if (*(float *)&CA::WindowServer::clone_overscan_amounts_x == 0.0
        || *(float *)&CA::WindowServer::clone_overscan_amounts_y == 0.0)
      {
        v13 = *((float *)this + 15);
      }
      return result * v13;
    }
  }
  return result;
}

BOOL CA::WindowServer::IOMFBDisplay::clone_exceeds_display_bandwidth_limits_p(CA::WindowServer::IOMFBDisplay *this, CA::WindowServer::Display *a2, CA::WindowServer::Surface *a3, unsigned int a4, const CA::Rect *a5, const CA::Rect *a6)
{
  _BOOL8 result;
  int v12;
  int v13;
  const CA::Rect *v14;
  int v15;
  int v16;
  int v17;
  double v18;
  float v19;
  float v20;
  double v21;
  CA::ScalerUtil::ScalerLimits *v22;
  float v23;
  CA::ScalerUtil::ScalerLimits *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  __int128 v31;
  double v32;
  double v33;
  float64x2_t v34;
  double v35;
  double v36;
  uint64_t v37[2];

  result = 0;
  v37[1] = *MEMORY[0x1E0C80C00];
  if (a5 && a6)
  {
    v37[0] = *((_QWORD *)this + 3383);
    v12 = v37[0] & 0x3FFF;
    v13 = (LODWORD(v37[0]) >> 14) & 0x3FFF;
    v15 = *((unsigned __int8 *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6600, v37[0], v37)+ 40);
    v16 = *((_DWORD *)a2 + 52);
    v17 = *((_DWORD *)a2 + 53);
    if ((double)v12 / (double)v16 >= (double)v13 / (double)v17)
      v18 = (double)v13 / (double)v17;
    else
      v18 = (double)v12 / (double)v16;
    if (!v15 || (*((_BYTE *)this + 56) & 8) != 0)
    {
      v21 = v18;
    }
    else
    {
      v19 = *(float *)&CA::WindowServer::clone_overscan_amounts_x;
      if (*(float *)&CA::WindowServer::clone_overscan_amounts_x == 0.0
        || (v20 = *(float *)&CA::WindowServer::clone_overscan_amounts_y,
            *(float *)&CA::WindowServer::clone_overscan_amounts_y == 0.0))
      {
        v19 = *((float *)this + 15);
        v20 = *((float *)this + 16);
      }
      v21 = v18 * v20;
      v18 = v18 * v19;
    }
    if (!HIBYTE(xmmword_1ECDC6AF0))
    {
      if (*((_BYTE *)this + 28067))
      {
        v22 = (CA::ScalerUtil::ScalerLimits *)(*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 80))(this);
        if ((v22 & 1) == 0)
        {
          CA::ScalerUtil::ScalerLimits::limits(v22);
          v23 = *(float *)&xmmword_1EDD11090;
          CA::ScalerUtil::ScalerLimits::limits(v24);
          v25 = v23;
          if (v18 >= v23)
            v25 = v18;
          else
            v21 = v21 * v25 / v18;
          v26 = *((float *)&xmmword_1EDD11090 + 1);
          if (v21 < *((float *)&xmmword_1EDD11090 + 1))
          {
            v18 = v25 * v26 / v21;
LABEL_23:
            v34 = *(float64x2_t *)a5;
            v27 = *((double *)a5 + 2);
            v28 = *((double *)a5 + 3);
            v31 = *(_OWORD *)a6;
            v29 = *((double *)a6 + 2) * v18;
            v30 = *((double *)a6 + 3) * v26;
            v35 = (double)(((v29 * v27 / v27) + 1) & 0xFFFFFFFE);
            v36 = (double)(((v30 * v28 / v28) + 1) & 0xFFFFFFFE);
            v32 = (double)((vcvtmd_u64_f64(v29 + 0.5) + 1) & 0xFFFFFFFE);
            v33 = (double)((vcvtmd_u64_f64(v30 + 0.5) + 1) & 0xFFFFFFFE);
            return CA::WindowServer::IOMFBDisplay::detach_exceeds_display_bandwidth_limits_p(this, a3, &v34, (const CA::Rect *)&v31, v14);
          }
          v18 = v25;
        }
      }
    }
    v26 = v21;
    goto LABEL_23;
  }
  return result;
}

void CA::WindowServer::IOMFBDisplay::set_mode(CA::WindowServer::IOMFBDisplay *this, const CA::WindowServer::Display::Mode *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  double v9;
  double v10;
  uint8_t v11[8];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*(unsigned __int8 *)(*((_QWORD *)this + 91) + 2) | *(unsigned __int8 *)(*((_QWORD *)this + 91) + 3))
  {
    if ((CA::WindowServer::Display::Mode::operator==(*((_QWORD *)this + 80), *(_QWORD *)a2) & 1) == 0)
    {
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 560));
      v4 = *((unsigned __int8 *)this + 672);
      *((_BYTE *)this + 672) = v4 + 1;
      if (!v4)
        *((_QWORD *)this + 83) = mach_continuous_time();
      CA::WindowServer::Display::set_mode(this, a2);
      if (*((_QWORD *)this + 6) && (*((_BYTE *)this + 56) & 1) != 0
        || (v5 = *(_QWORD *)a2, CA::WindowServer::Display::Mode::operator==(*((_QWORD *)this + 3383), v5))
        && !*((_BYTE *)this + 28131))
      {
        v7 = 128;
      }
      else
      {
        *((_QWORD *)this + 3383) = v5;
        if (!*((_BYTE *)this + 28044))
        {
          *((_BYTE *)this + 28048) = 1;
          v6 = mach_absolute_time();
          *((double *)this + 3309) = CATimeWithHostTime(v6) + 1.0;
        }
        v7 = 132;
      }
      CA::WindowServer::IOMFBDisplay::update_framebuffer_locked(this, v7);
      os_unfair_lock_lock((os_unfair_lock_t)this + 6504);
      v9 = CA::WindowServer::IOMFBDisplay::initialize_timings(this);
      if (*((_QWORD *)this + 3254))
      {
        v10 = (*(double (**)(CA::WindowServer::IOMFBDisplay *, double))(*(_QWORD *)this + 760))(this, v9);
        if (v10 != 0.0)
          atomic_store(CAHostTimeWithTime(v10), (unsigned int *)(*((_QWORD *)this + 3254) + 4));
      }
      os_unfair_lock_unlock((os_unfair_lock_t)this + 6504);
      CA::WindowServer::Display::end_display_changes((uint64_t)this);
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 560));
    }
  }
  else if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v8 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_ERROR, "Cannot switch display modes while powered off.", v11, 2u);
    }
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::update_display_modes(CA::WindowServer::IOMFBDisplay *this, int a2)
{
  BOOL *v4;
  const void *v5;
  const void *v6;
  int v7;

  v4 = (BOOL *)this + 28065;
  if (*((_BYTE *)this + 28068))
  {
    v5 = (const void *)IOMobileFramebufferCopyProperty();
    if (v5)
    {
      v6 = v5;
      *v4 = CA_CFBoolValue(v5);
      CFRelease(v6);
    }
  }
  if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 80))(this))
    *v4 = 0;
  if (a2)
    v7 = 70;
  else
    v7 = 66;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 560));
  CA::WindowServer::IOMFBDisplay::update_framebuffer_locked(this, v7);
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 560));
}

uint64_t CA::WindowServer::IOMFBDisplay::set_inverse_color(uint64_t this, int a2)
{
  CA::WindowServer::IOMFBDisplay *v2;
  pthread_mutex_t *v3;

  if (*(unsigned __int8 *)(this + 28053) != a2)
  {
    *(_BYTE *)(this + 28053) = a2;
    if (!*(_BYTE *)(this + 28049) && !*(_BYTE *)(this + 28114))
    {
      v2 = (CA::WindowServer::IOMFBDisplay *)this;
      *(_BYTE *)(this + 28059) = a2;
      v3 = (pthread_mutex_t *)(this + 560);
      pthread_mutex_lock((pthread_mutex_t *)(this + 560));
      CA::WindowServer::IOMFBDisplay::update_framebuffer_locked(v2, 16);
      return pthread_mutex_unlock(v3);
    }
  }
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_allows_edr(uint64_t this, char a2)
{
  *(_BYTE *)(this + 28060) = a2;
  if ((a2 & 1) == 0)
    *(_QWORD *)(this + 696) = 0;
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_grayscale(uint64_t this, int a2)
{
  CA::WindowServer::IOMFBDisplay *v2;
  pthread_mutex_t *v3;

  if (*(unsigned __int8 *)(this + 28061) != a2)
  {
    *(_BYTE *)(this + 28061) = a2;
    if (!*(_BYTE *)(this + 28049) && !*(_BYTE *)(this + 28114))
    {
      v2 = (CA::WindowServer::IOMFBDisplay *)this;
      *(_BYTE *)(this + 28062) = a2;
      v3 = (pthread_mutex_t *)(this + 560);
      pthread_mutex_lock((pthread_mutex_t *)(this + 560));
      CA::WindowServer::IOMFBDisplay::update_framebuffer_locked(v2, 16);
      return pthread_mutex_unlock(v3);
    }
  }
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_contrast(uint64_t this, float a2)
{
  CA::WindowServer::IOMFBDisplay *v2;
  pthread_mutex_t *v3;

  if (*(float *)(this + 26132) != a2)
  {
    *(float *)(this + 26132) = a2;
    if (!*(_BYTE *)(this + 28049))
    {
      v2 = (CA::WindowServer::IOMFBDisplay *)this;
      *(float *)(this + 26136) = a2;
      v3 = (pthread_mutex_t *)(this + 560);
      pthread_mutex_lock((pthread_mutex_t *)(this + 560));
      CA::WindowServer::IOMFBDisplay::update_framebuffer_locked(v2, 32);
      return pthread_mutex_unlock(v3);
    }
  }
  return this;
}

float CA::WindowServer::IOMFBDisplay::default_ui_nits(CA::WindowServer::IOMFBDisplay *this)
{
  float result;
  float v2;
  _BOOL4 v3;

  result = *((float *)this + 6558);
  if (result <= 0.0)
    return 200.0;
  v2 = 5.0;
  v3 = result > 200.0 || result < 5.0;
  if (result >= 5.0 || result > 200.0)
    v2 = 200.0;
  if (v3)
    return v2;
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_maximum_brightness(uint64_t this, float a2)
{
  CA::WindowServer::IOMFBDisplay *v2;
  pthread_mutex_t *v3;

  if (*(float *)(this + 26208) != a2)
  {
    *(float *)(this + 26208) = a2;
    if (!*(_BYTE *)(this + 28049))
    {
      v2 = (CA::WindowServer::IOMFBDisplay *)this;
      *(float *)(this + 26212) = a2;
      v3 = (pthread_mutex_t *)(this + 560);
      pthread_mutex_lock((pthread_mutex_t *)(this + 560));
      CA::WindowServer::IOMFBDisplay::update_framebuffer_locked(v2, 256);
      return pthread_mutex_unlock(v3);
    }
  }
  return this;
}

_BYTE *CA::WindowServer::IOMFBDisplay::set_brightness_control_disabled(_BYTE *this, int a2)
{
  if (this[28125] != a2)
  {
    this[28125] = a2;
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)this + 968))(this, 1);
  }
  return this;
}

_BYTE *CA::WindowServer::IOMFBDisplay::set_force_brightness_control(_BYTE *this)
{
  if (!this[28126])
  {
    this[28126] = 1;
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)this + 968))(this, 1);
  }
  return this;
}

float CA::WindowServer::IOMFBDisplay::auto_luminance_boost(CA::WindowServer::IOMFBDisplay *this)
{
  float result;

  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  result = *(float *)&dword_1ECDC69C8;
  if (*(float *)&dword_1ECDC69C8 == 0.0)
    return 1.0;
  return result;
}

BOOL CA::WindowServer::IOMFBDisplay::set_preset(CA::WindowServer::IOMFBDisplay *this)
{
  CA::WindowServer::SILMgr *v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = (CA::WindowServer::SILMgr *)*((_QWORD *)this + 3200);
  if (v2)
  {
    if (*(_QWORD *)v2)
    {
LABEL_5:
      CA::WindowServer::SILMgr::turn_off_all_regions(v2, 1);
      *((_BYTE *)this + 25608) = 2;
      goto LABEL_6;
    }
    sil_mgr_instance(0, 0xFFFFFFFFLL);
    *(_QWORD *)v2 = v3;
    if (v3)
    {
      v2 = (CA::WindowServer::SILMgr *)*((_QWORD *)this + 3200);
      goto LABEL_5;
    }
  }
LABEL_6:
  v4 = IOMobileFramebufferSetPreset();
  v5 = (_QWORD *)*((_QWORD *)this + 3200);
  if (v5 && !*v5)
  {
    sil_mgr_instance(0, 0xFFFFFFFFLL);
    *v5 = v6;
  }
  return v4 == 0;
}

uint64_t CA::WindowServer::IOMFBDisplay::flush_irdc(uint64_t this)
{
  *(_BYTE *)(this + 25361) = 1;
  return this;
}

#error "184718568: call analysis failed (funcsize=769)"

uint64_t CA::WindowServer::IOMFBDisplay::protection_options(CA::WindowServer::IOMFBDisplay *this)
{
  int v1;
  int i;
  int ProtectionOptions;

  v1 = (*((unsigned __int16 *)this + 328) >> 10) & 7;
  if (!v1)
    return 7;
  if (v1 == 2)
  {
    if (byte_1ECDC6B0D)
      IOMobileFramebufferGetProtectionOptions();
    return 0;
  }
  else
  {
    for (i = 5; ; --i)
    {
      ProtectionOptions = IOMobileFramebufferGetProtectionOptions();
      if (!ProtectionOptions || i == 0)
        break;
      usleep(0x186A0u);
    }
    if (ProtectionOptions)
    {
      if (CADeviceSupportsUniversalCompression::once[0] != -1)
        dispatch_once(CADeviceSupportsUniversalCompression::once, &__block_literal_global_27);
      if (CADeviceSupportsUniversalCompression::universal)
        return 7;
      else
        return 0;
    }
    else
    {
      return (*((_WORD *)this + 328) & 0x1C00) == 1024;
    }
  }
}

float CA::WindowServer::IOMFBDisplay::abort_color_matrix_ramp(CA::WindowServer::IOMFBDisplay *this, float *a2, float *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  int v7;
  float result;

  if (a2)
  {
    v3 = *((_OWORD *)this + 1673);
    v4 = *((_OWORD *)this + 1674);
    a2[8] = *((float *)this + 6700);
    *(_OWORD *)a2 = v3;
    *((_OWORD *)a2 + 1) = v4;
  }
  if (a3)
    *a3 = *((float *)this + 6703);
  *((_BYTE *)this + 26816) = 1;
  v5 = *((_OWORD *)this + 1673);
  v6 = *((_OWORD *)this + 1674);
  *(_OWORD *)((char *)this + 26696) = v5;
  *(_OWORD *)((char *)this + 26712) = v6;
  v7 = *((_DWORD *)this + 6700);
  *((_DWORD *)this + 6682) = v7;
  *(_OWORD *)((char *)this + 26732) = v5;
  *(_OWORD *)((char *)this + 26748) = v6;
  *((_DWORD *)this + 6691) = v7;
  result = *((float *)this + 6703);
  *((float *)this + 6702) = result;
  *((_QWORD *)this + 3336) = 0;
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_user_adjustment(uint64_t this, float *a2, float a3)
{
  _OWORD *v3;
  __int128 v4;
  __int128 v5;

  v3 = (_OWORD *)(this + 26820);
  if (a2)
  {
    v4 = *(_OWORD *)a2;
    v5 = *((_OWORD *)a2 + 1);
    *(float *)(this + 26852) = a2[8];
    *v3 = v4;
    *(_OWORD *)(this + 26836) = v5;
  }
  else
  {
    *v3 = xmmword_18474DFB0;
    *(_OWORD *)(this + 26836) = xmmword_18474DFB0;
    *(_DWORD *)(this + 26852) = 1065353216;
    a3 = 1.0;
  }
  *(float *)(this + 26856) = a3;
  *(_BYTE *)(this + 26860) = 0;
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_accessibility_color_matrix(uint64_t this, float *a2, float a3)
{
  *(_OWORD *)(this + 26864) = xmmword_18474DFB0;
  *(_OWORD *)(this + 26880) = xmmword_18474DFC0;
  *(_OWORD *)(this + 26896) = xmmword_18474DFD0;
  *(_OWORD *)(this + 26912) = xmmword_18474DFE0;
  if (a2)
  {
    *(float *)(this + 26864) = *a2;
    *(float *)(this + 26868) = a2[1];
    *(float *)(this + 26872) = a2[2];
    *(float *)(this + 26880) = a2[3];
    *(float *)(this + 26884) = a2[4];
    *(float *)(this + 26888) = a2[5];
    *(float *)(this + 26896) = a2[6];
    *(float *)(this + 26900) = a2[7];
    *(float *)(this + 26904) = a2[8];
  }
  *(float *)(this + 26928) = a3;
  *(_BYTE *)(this + 26932) = 0;
  *(_BYTE *)(this + 26676) = 1;
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::ax_ns_color_matrix(CA::WindowServer::IOMFBDisplay *this, float *a2)
{
  char *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (char *)this + 26612;
  if (*((_BYTE *)this + 26676))
  {
    v4 = *((_OWORD *)this + 1680);
    v5 = *((_OWORD *)this + 1681);
    v6 = *((_OWORD *)this + 1682);
    v11 = *((_OWORD *)this + 1679);
    v12 = v4;
    v13 = v5;
    v14 = v6;
    CA::Mat4Impl::mat4_scale((CA::Mat4Impl *)&v11, a2, *((float *)this + 6732), *((float *)this + 6732), *((float *)this + 6732));
    v3[64] = 0;
    v7 = v12;
    v8 = v13;
    v9 = v14;
    *(_OWORD *)v3 = v11;
    *((_OWORD *)v3 + 1) = v7;
    *((_OWORD *)v3 + 2) = v8;
    *((_OWORD *)v3 + 3) = v9;
  }
  return (uint64_t)this + 26612;
}

void CA::WindowServer::IOMFBDisplay::post_notification_of_disallowed_cloning_layers(CA::WindowServer::IOMFBDisplay *this, mach_port_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t (*v6)(_QWORD);
  mach_port_t v7;
  NSObject *v8;
  mach_msg_size_t v9;
  int v10;
  mach_msg_header_t out_token;
  uint64_t v12;
  int v13;
  char v14;
  __int16 v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1560))(this))
  {
    if ((*((_BYTE *)this + 28056) != 0) != a2)
    {
      out_token.msgh_bits = 0;
      if (!notify_register_check("com.apple.CoreAnimation.CADisplay.DisallowedLayersChanged", (int *)&out_token))
      {
        notify_set_state(out_token.msgh_bits, a2);
        notify_post("com.apple.CoreAnimation.CADisplay.DisallowedLayersChanged");
        *((_BYTE *)this + 28056) = a2;
      }
    }
  }
  os_unfair_lock_lock((os_unfair_lock_t)this + 6972);
  v4 = (uint64_t *)*((_QWORD *)this + 3489);
  if (v4)
  {
    v5 = (uint64_t *)MEMORY[0x1E0C804E8];
    v6 = MEMORY[0x1E0C85B60];
    do
    {
      v7 = *((_DWORD *)v4 + 4);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v8 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
        {
          v9 = *((_DWORD *)this + 6);
          out_token.msgh_bits = 67109376;
          out_token.msgh_size = v9;
          LOWORD(out_token.msgh_remote_port) = 1024;
          *(mach_port_t *)((char *)&out_token.msgh_remote_port + 2) = a2;
          _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_DEFAULT, "signal clients display %u disallowed layers state changed to %d", (uint8_t *)&out_token, 0xEu);
        }
      }
      v10 = *((_DWORD *)this + 6);
      v12 = *v5;
      v13 = v10;
      v14 = a2;
      v15 = 0;
      v16 = 0;
      *(_QWORD *)&out_token.msgh_bits = 19;
      out_token.msgh_voucher_port = 0;
      out_token.msgh_id = 40413;
      out_token.msgh_remote_port = v7;
      out_token.msgh_local_port = 0;
      if (v6)
        voucher_mach_msg_set(&out_token);
      if ((mach_msg(&out_token, 17, 0x28u, 0, 0, 0, 0) - 268435459) <= 1)
      {
        if ((out_token.msgh_bits & 0x1F00) == 0x1100)
          mach_port_deallocate(*MEMORY[0x1E0C83DA0], out_token.msgh_local_port);
        mach_msg_destroy(&out_token);
      }
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 6972);
}

uint64_t CA::WindowServer::IOMFBDisplay::acquire_frozen_surface(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3398);
  *((_QWORD *)this + 3398) = 0;
  return v1;
}

void CA::WindowServer::IOMFBDisplay::set_update_request_callback(uint64_t a1, void *aBlock)
{
  const void *v4;

  v4 = *(const void **)(a1 + 26504);
  if (v4)
  {
    _Block_release(v4);
    *(_QWORD *)(a1 + 26504) = 0;
  }
  if (aBlock)
    *(_QWORD *)(a1 + 26504) = _Block_copy(aBlock);
}

uint64_t CA::WindowServer::IOMFBDisplay::compositing_color_space(CA::WindowServer::IOMFBDisplay *this)
{
  return CAGetColorSpace(0x1Du);
}

uint64_t CA::WindowServer::IOMFBDisplay::blend_color_space(CA::WindowServer::IOMFBDisplay *this)
{
  return *((_QWORD *)this + 3404);
}

void CA::WindowServer::IOMFBDisplay::set_blend_color_space(const void **this, CGColorSpace *a2)
{
  _BYTE *v2;
  NSObject *v5;
  uint8_t v6[8];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 28116;
  if (*((_BYTE *)this + 28121))
  {
    if (!CFEqual(this[3404], a2))
    {
      X::CFRef<__CFDictionary const*>::operator=(this + 3404, a2);
      *v2 = 1;
    }
  }
  else if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v5 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_184457000, v5, OS_LOG_TYPE_DEFAULT, "Setting blend space failed, display does not support ICC", v6, 2u);
    }
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::display_color_space(CA::WindowServer::IOMFBDisplay *this)
{
  return *((_QWORD *)this + 3405);
}

void CA::WindowServer::IOMFBDisplay::set_display_color_space(const void **this, CGColorSpace *a2)
{
  _BYTE *v2;
  NSObject *v5;
  uint8_t v6[8];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 28117;
  if (*((_BYTE *)this + 28121))
  {
    if (!CFEqual(this[3405], a2))
    {
      X::CFRef<__CFDictionary const*>::operator=(this + 3405, a2);
      *v2 = 1;
    }
  }
  else if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v5 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_184457000, v5, OS_LOG_TYPE_DEFAULT, "Setting display space failed, display does not support ICC", v6, 2u);
    }
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::set_system_gamma_curve(CA::WindowServer::IOMFBDisplay *this, CGColorTRC *__s2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *((_QWORD *)this + 3415);
  if (!v4)
  {
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_DWORD *)(v4 + 32) = 0;
    *((_QWORD *)this + 3415) = v4;
  }
  result = CA::WindowServer::IOMFBDisplay::set_cg_curve(this, (CGColorTRC *)v4, __s2);
  if ((_DWORD)result)
    *((_BYTE *)this + 28118) = 1;
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_blackpoint_curve(CA::WindowServer::IOMFBDisplay *this, CGColorTRC *__s2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *((_QWORD *)this + 3416);
  if (!v4)
  {
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_DWORD *)(v4 + 32) = 0;
    *((_QWORD *)this + 3416) = v4;
  }
  result = CA::WindowServer::IOMFBDisplay::set_cg_curve(this, (CGColorTRC *)v4, __s2);
  if ((_DWORD)result)
    *((_BYTE *)this + 28119) = 1;
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_gamma_adjustment_curves(CA::WindowServer::IOMFBDisplay *this, CGColorTRC *__s2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *((_QWORD *)this + 3417);
  if (!v4)
  {
    v4 = operator new[]();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 92) = 0u;
    *((_QWORD *)this + 3417) = v4;
  }
  if (CA::WindowServer::IOMFBDisplay::set_cg_curve(this, (CGColorTRC *)v4, __s2))
    *((_BYTE *)this + 28120) = 1;
  if (CA::WindowServer::IOMFBDisplay::set_cg_curve(this, (CGColorTRC *)(*((_QWORD *)this + 3417) + 36), (CGColorTRC *)&__s2->var1.var1.var3.var1))*((_BYTE *)this + 28120) = 1;
  result = CA::WindowServer::IOMFBDisplay::set_cg_curve(this, (CGColorTRC *)(*((_QWORD *)this + 3417) + 72), (CGColorTRC *)((char *)__s2 + 72));
  if ((_DWORD)result)
    *((_BYTE *)this + 28120) = 1;
  return result;
}

void CA::WindowServer::IOMFBDisplay::update_secure_indicators_statistics(os_unfair_lock_s *this, const CA::Render::Update *a2, char a3)
{
  uint64_t v3;
  os_unfair_lock_s *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;

  v3 = *((_QWORD *)a2 + 128);
  if (!v3)
    __assert_rtn("update_secure_indicators_statistics", "windowserver-iomfb-display.cpp", 16031, "indicators");
  v6 = this + 6910;
  os_unfair_lock_lock(this + 6910);
  if ((a3 & 1) == 0)
    *(_QWORD *)&this[6916]._os_unfair_lock_opaque = mach_absolute_time();
  v7 = 0;
  v8 = (unsigned __int8 *)(v3 + 26);
  do
  {
    v9 = *v8;
    v8 += 28;
    if (v9)
      ++this[v7 + 6911]._os_unfair_lock_opaque;
    ++v7;
  }
  while (v7 != 4);
  ++this[6918]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v6);
}

void CA::WindowServer::IOMFBDisplay::emit_mode_set_signpost(CA::WindowServer::IOMFBDisplay *this, uint64_t a2)
{
  unint64_t v2;
  os_signpost_id_t v5;
  NSObject *v6;
  int v7;
  unsigned int v8;
  const char *v9;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  unsigned int v16;
  __int16 v17;
  double v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  _BOOL4 v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 3383);
  if (v2 + 1 >= 2)
  {
    if (CA::WindowServer::Display::get_display_perf_log(void)::once_token[0] != -1)
      dispatch_once(CA::WindowServer::Display::get_display_perf_log(void)::once_token, &__block_literal_global_61);
    v5 = *((unsigned int *)this + 6);
    if ((_DWORD)v5)
    {
      v6 = CA::WindowServer::Display::get_display_perf_log(void)::log;
      if (os_signpost_enabled((os_log_t)CA::WindowServer::Display::get_display_perf_log(void)::log))
      {
        v7 = *((unsigned __int8 *)this + 28082);
        v8 = ((v2 >> 55) & 0x1F) - 1;
        if (v8 > 0x1B)
          v9 = "";
        else
          v9 = off_1E159D930[v8];
        v10[0] = 67241986;
        v10[1] = v5;
        v11 = 1026;
        v12 = v7;
        v13 = 1026;
        v14 = v2 & 0x3FFF;
        v15 = 1026;
        v16 = (v2 >> 14) & 0x3FFF;
        v17 = 2050;
        v18 = (double)((v2 >> 29) & 0x1FFFFFF) * 0.0000152587891;
        v19 = 2082;
        v20 = v9;
        v21 = 1026;
        v22 = (v2 & 0x4000000000000000) != 0;
        v23 = 2050;
        v24 = a2;
        _os_signpost_emit_with_name_impl(&dword_184457000, v6, OS_SIGNPOST_EVENT, v5, "ModeSet", "displayId=%{public, name=displayId}u state=%{public, name=state}u width=%{public, name=width}d height=%{public, name=height}d refreshRate=%{public, name=refreshRate}.3f format=%{public, name=format}s highBandwidth=%{public, BOOL, name=highBandwidth}d begin=%{public,signpost.description:begin_time}llu", (uint8_t *)v10, 0x3Eu);
      }
    }
  }
}

void CA::WindowServer::IOMFBDisplay::set_secure_indicator_state(CA::WindowServer::IOMFBDisplay *this, int a2, int a3)
{
  _QWORD *v3;
  uint64_t v7;
  int v8;
  int v9;
  _BYTE *v10;
  NSObject *v11;
  int v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)*((_QWORD *)this + 3200);
  if (v3)
  {
    if (*v3 || (sil_mgr_instance(0, 0xFFFFFFFFLL), (*v3 = v7) != 0))
    {
      v8 = a2 ? 3 : 2;
      v9 = a3 ? 4 : v8;
      v10 = (char *)this + 25608;
      if (v9 != *((unsigned __int8 *)this + 25608))
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v11 = x_log_category_windowserver;
          if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_INFO))
          {
            v12 = *v10;
            *(_DWORD *)buf = 67109376;
            v14 = v12;
            v15 = 1024;
            v16 = v9;
            _os_log_impl(&dword_184457000, v11, OS_LOG_TYPE_INFO, "Secure indicator state going from %u to %u", buf, 0xEu);
          }
        }
        if (*v10 > 1u
          || CA::WindowServer::SILMgr::set_power(*((CA::WindowServer::SILMgr **)this + 3200), 1, 0))
        {
          *v10 = v9;
        }
      }
    }
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::swap_secure_indicator(int32x2_t *a1, int a2, int a3, _BYTE *a4, float a5, float a6, float32x2_t a7, float32_t a8, float a9, float a10)
{
  int32x2_t v10;
  uint64_t v19;
  float32x2_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int32x2_t v24;
  NSObject *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  float v31;
  float v32;
  float v33;
  __int32 v34;
  __int32 v35;
  __int32 v36;
  uint8_t buf[4];
  int v38;
  __int16 v39;
  int v40;
  _BYTE v41[12];
  float v42;
  float v43;
  __int16 v44;
  __int16 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v10 = a1[3200];
  if (!*(_QWORD *)&v10)
    return 0;
  if (!**(_QWORD **)&v10)
  {
    v31 = a8;
    v34 = a7.i32[0];
    sil_mgr_instance(0, 0xFFFFFFFFLL);
    **(_QWORD **)&v10 = v19;
    if (v19)
    {
      v10 = a1[3200];
      a8 = v31;
      a7.i32[0] = v34;
      goto LABEL_5;
    }
    return 0;
  }
LABEL_5:
  if (initialized[0] != -1)
  {
    v33 = a8;
    v36 = a7.i32[0];
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
    a8 = v33;
    a7.i32[0] = v36;
  }
  if (*(unsigned __int8 *)(*(_QWORD *)&v10 + 122) != *(float *)&dword_1ECDC6A1C)
  {
    v32 = a8;
    v35 = a7.i32[0];
    SILManagerSetLogLevel();
    a8 = v32;
    a7.i32[0] = v35;
  }
  v20 = vdiv_f32(vcvt_f32_s32(a1[20]), vcvt_f32_s32(a1[26]));
  v21 = COERCE_UNSIGNED_INT(a5 * v20.f32[0]);
  v22 = COERCE_UNSIGNED_INT(vmuls_lane_f32(a6, v20, 1));
  if (a3 == 0xFFFF)
  {
    a7.f32[1] = a8;
    *(float32x2_t *)v41 = vmul_f32(v20, a7);
    if (MEMORY[0x1E0D897A8])
      LOWORD(a3) = SILManagerFrameNumberFromBounds();
    else
      LOWORD(a3) = -1;
  }
  v24 = a1[3200];
  *(_DWORD *)v41 = a2;
  *(_QWORD *)&v41[4] = v21 | (v22 << 32);
  v42 = a10;
  v43 = a9;
  v44 = a3;
  v45 = 0;
  v23 = CA::WindowServer::SILMgr::swap_region_private(*(uint64_t **)&v24, a2, (unsigned int *)v41, a4);
  if ((_DWORD)v23
    && *(_BYTE *)(*(_QWORD *)&v24 + 120)
    && *(unsigned __int8 *)(*(_QWORD *)&v24 + 121) > *(unsigned __int8 *)(*(_QWORD *)&v24 + 120))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v25 = x_log_category_secure_indicators;
      if (os_log_type_enabled((os_log_t)x_log_category_secure_indicators, OS_LOG_TYPE_INFO))
      {
        v26 = *(unsigned __int8 *)(*(_QWORD *)&v24 + 120);
        v27 = *(unsigned __int8 *)(*(_QWORD *)&v24 + 121);
        *(_DWORD *)buf = 67109376;
        v38 = v26;
        v39 = 1024;
        v40 = v27;
        _os_log_impl(&dword_184457000, v25, OS_LOG_TYPE_INFO, "visible regions %u active regions %u. turning off invisible regions", buf, 0xEu);
      }
    }
    v28 = 0;
    v29 = 28;
    do
    {
      if (*(float *)(*(_QWORD *)&v24 + v29) == 0.0)
        CA::WindowServer::SILMgr::turn_off_region(*(CA::WindowServer::SILMgr **)&v24, v28);
      ++v28;
      v29 += 24;
    }
    while (v28 != 4);
  }
  return v23;
}

void CA::WindowServer::IOMFBDisplay::hide_secure_indicator(CA::WindowServer::IOMFBDisplay *this, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint8_t buf[4];
  float v11;
  float v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 3200);
  if (v2)
  {
    if (!*(_QWORD *)v2)
    {
      sil_mgr_instance(0, 0xFFFFFFFFLL);
      *(_QWORD *)v2 = v5;
      if (!v5)
        return;
      v2 = *((_QWORD *)this + 3200);
    }
    v6 = v2 + 24 * a2;
    if (*(float *)(v6 + 28) > 0.0)
    {
      v7 = v6 + 16;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v8 = x_log_category_secure_indicators;
        if (os_log_type_enabled((os_log_t)x_log_category_secure_indicators, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v11) = a2;
          _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_INFO, "Hiding region %u", buf, 8u);
        }
      }
      v9 = *(_QWORD *)(v7 + 16);
      *(_DWORD *)buf = *(_DWORD *)v7;
      v11 = (float)(50 * a2) + 200.0;
      v12 = v11;
      v13 = 0;
      v14 = v9;
      if (CA::WindowServer::SILMgr::swap_region_private((uint64_t *)v2, a2, (unsigned int *)buf, 0)
        && (!*(_QWORD *)(v2 + 8) || *(_BYTE *)(v2 + 120)))
      {
        CA::WindowServer::SILMgr::turn_off_region((CA::WindowServer::SILMgr *)v2, a2);
      }
    }
  }
}

void CA::WindowServer::IOMFBDisplay::set_secure_indicator_callback(uint64_t a1, const void *a2)
{
  uint64_t v2;
  const void *v4;
  NSObject *v5;
  uint8_t v6[8];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 25600);
  if (v2)
  {
    v4 = *(const void **)(v2 + 8);
    if (v4 != a2)
    {
      _Block_release(v4);
      *(_QWORD *)(v2 + 8) = _Block_copy(a2);
    }
  }
  else if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v5 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_184457000, v5, OS_LOG_TYPE_ERROR, "Failed to set indicator callback! SILMgr was not created", v6, 2u);
    }
  }
}

void CA::WindowServer::IOMFBDisplay::set_secure_indicator_animating_deadline(CA::WindowServer::IOMFBDisplay *this, double a2)
{
  double v2;

  v2 = *((double *)this + 3312);
  *((double *)this + 3312) = a2;
  if (v2 == 0.0 && (*((_DWORD *)this + 156) & 0x100) != 0)
    CA::WindowServer::IOMFBDisplay::update_server_source_frame_interval_range((os_unfair_lock_s *)this, (const CAFrameIntervalRange *)this + 2282, *((unsigned __int8 *)this + 28128), 1);
}

void CA::WindowServer::IOMFBDisplay::reset_secure_indicator_animating_deadline(CA::WindowServer::IOMFBDisplay *this)
{
  if (*((double *)this + 3312) != 0.0)
  {
    *((_QWORD *)this + 3312) = 0;
    if ((*((_DWORD *)this + 156) & 0x100) != 0)
      CA::WindowServer::IOMFBDisplay::update_server_source_frame_interval_range((os_unfair_lock_s *)this, (const CAFrameIntervalRange *)this + 2282, *((unsigned __int8 *)this + 28128), 0);
  }
}

void CA::WindowServer::IOMFBDisplay::print_secure_indicator_state(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = *(_QWORD **)(a1 + 25600);
  if (v8)
  {
    if (*v8 || (sil_mgr_instance(0, 0xFFFFFFFFLL), (*v8 = v11) != 0))
    {
      x_stream_printf(a2, "Secure Indicator State for Display %d\n", a3, a4, a5, a6, a7, a8, *(unsigned int *)(a1 + 24));
      v18 = 0;
      v19 = *(_QWORD *)(a1 + 25600) + 36;
      do
      {
        if (*(float *)(v19 - 8) >= 0.0)
          x_stream_printf(a2, "  Region[%u] : %s %s ([%f %f] opacity %f frame: %u rot %f)\n", v12, v13, v14, v15, v16, v17, v18);
        else
          x_stream_printf(a2, "  Region[%u] : inactive\n", v12, v13, v14, v15, v16, v17, v18);
        ++v18;
        v19 += 24;
      }
      while (v18 != 4);
    }
  }
}

void CA::WindowServer::IOMFBDisplay::post_secure_indicator_statistics_power_log(CA::WindowServer::IOMFBDisplay *this)
{
  os_unfair_lock_s *v2;
  int *v3;
  const CFDictionaryKeyCallBacks *v4;
  const CFDictionaryValueCallBacks *v5;
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(void);
  int v12;
  const char *v13;
  CFStringRef v14;
  CFStringRef v15;
  os_unfair_lock_s *lock;

  v2 = (os_unfair_lock_s *)((char *)this + 27640);
  os_unfair_lock_lock((os_unfair_lock_t)this + 6910);
  v3 = (int *)((char *)this + 27672);
  if (*((_DWORD *)this + 6918))
  {
    lock = v2;
    v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v7 = CFDictionaryCreateMutable(0, 0, v4, v5);
    CA_CFDictionarySetLongLong(Mutable, CFSTR("indicator_start_time"), *((_QWORD *)this + 3458));
    v8 = mach_absolute_time();
    CA_CFDictionarySetLongLong(Mutable, CFSTR("indicator_end_time"), v8);
    CA_CFDictionarySetInt(Mutable, CFSTR("indicator_frame_count"), *v3);
    v9 = 0;
    v10 = (_QWORD *)((char *)this + 27644);
    v11 = MEMORY[0x1E0D897C0];
    do
    {
      v12 = *((_DWORD *)v10 + v9);
      if (v12 >= 1)
      {
        if (v11)
        {
          v13 = (const char *)SILManagerIndicatorNameFromType();
        }
        else
        {
          v13 = "Unknown Indicator";
          if (v9 <= 3)
            v13 = off_1E159DCF8[v9];
        }
        v14 = CFStringCreateWithCString(0, v13, 0x8000100u);
        if (v14)
        {
          v15 = v14;
          CA_CFDictionarySetInt(v7, v14, v12);
          CFRelease(v15);
        }
      }
      ++v9;
    }
    while (v9 != 4);
    *v10 = 0;
    v10[1] = 0;
    *v3 = 0;
    os_unfair_lock_unlock(lock);
    if (CA::WindowServer::IOMFBDisplay::post_secure_indicator_statistics_power_log(void)::once != -1)
      dispatch_once(&CA::WindowServer::IOMFBDisplay::post_secure_indicator_statistics_power_log(void)::once, &__block_literal_global_354);
    if (CA::WindowServer::IOMFBDisplay::post_secure_indicator_statistics_power_log(void)::secure_indicator_interval_telemetry_id)
      pps_send_telemetry();
    if (CA::WindowServer::IOMFBDisplay::post_secure_indicator_statistics_power_log(void)::secure_indicator_types_telemetry_id)
      pps_send_telemetry();
    if (v7)
      CFRelease(v7);
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    os_unfair_lock_unlock(v2);
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::set_display_state_locked(CA::WindowServer::IOMFBDisplay *this)
{
  unsigned __int8 *v2;
  NSObject *v3;
  unint64_t v4;
  const char *v5;
  int v6;
  unint64_t v7;
  const char *v8;
  int v9;
  unsigned __int8 v10;
  NSObject *v11;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = (unsigned __int8 *)*((_QWORD *)this + 91);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v3 = x_log_category_display_state;
    if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *v2;
      if (v4 > 0xB)
        v5 = "unknown";
      else
        v5 = off_1E159DA10[v4];
      v6 = *((_DWORD *)this + 6);
      v7 = v2[1];
      if (v7 > 0xB)
        v8 = "unknown";
      else
        v8 = off_1E159DA10[v7];
      *(_DWORD *)buf = 67109634;
      v14 = v6;
      v15 = 2080;
      v16 = v5;
      v17 = 2080;
      v18 = v8;
      _os_log_impl(&dword_184457000, v3, OS_LOG_TYPE_DEFAULT, "IOMFBDisplay::set_display_state display_id=%u current_state=%s target_state=%s", buf, 0x1Cu);
    }
  }
  switch(v2[1])
  {
    case 0u:
      v9 = *v2;
      if ((v9 - 2) < 2)
      {
        CA::WindowServer::FlipBook::transition_to_state(*((unsigned __int8 **)this + 40), 0, 0);
        CA::WindowServer::FlipBook::free_surfaces(*((os_unfair_lock_s **)this + 40));
        CA::IOMobileFramebuffer::swap_wait((CA::WindowServer::IOMFBDisplay *)((char *)this + 25536));
        goto LABEL_21;
      }
      if (v9 == 1)
        v10 = -1;
      else
        v10 = 0;
      break;
    case 1u:
      if (*v2 == 1)
        v10 = 0;
      else
        v10 = -1;
      break;
    case 2u:
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v11 = x_log_category_flipbook;
        if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v11, OS_LOG_TYPE_DEFAULT, "powering on display and entering flipbook", buf, 2u);
        }
      }
      (*(void (**)(CA::WindowServer::IOMFBDisplay *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 2120))(this, 1, 1, 0);
      CA::WindowServer::FlipBook::transition_to_state(*((unsigned __int8 **)this + 40), 1u, 0);
      goto LABEL_28;
    case 3u:
      CA::WindowServer::FlipBook::transition_to_state(*((unsigned __int8 **)this + 40), 2u, 0);
LABEL_21:
      (*(void (**)(CA::WindowServer::IOMFBDisplay *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 2120))(this, 0, 0, 0);
LABEL_28:
      v10 = 0;
      *v2 = v2[1];
      break;
    default:
      v10 = 5;
      break;
  }
  return v10;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_power_state_locked(CA::WindowServer::IOMFBDisplay *a1, char a2, int a3, char a4)
{
  *((_BYTE *)a1 + 27884) = a2;
  return CA::WindowServer::IOMFBDisplay::update_power_state_locked(a1, a3, a4);
}

void CA::WindowServer::IOMFBDisplay::announce_next_swap_timestamp(CA::WindowServer::IOMFBDisplay *this, CA::Render::Update *a2, double a3)
{
  double v5;
  double v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  if (!*((_BYTE *)this + 28099))
  {
    v5 = *((double *)a2 + 9);
    v6 = v5 + (*(double (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 760))(this) * -0.125;
    if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 136))(this) != 2
      || v6 - a3 >= (*(double (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 744))(this))
    {
      v7 = CAHostTimeWithTime(v6);
      v8 = *((_QWORD *)this + 3192);
      if (init_iomfb(void)::once != -1)
      {
        v9 = v7;
        dispatch_once(&init_iomfb(void)::once, &__block_literal_global_10917);
        v7 = v9;
      }
      if (iomfb_announce_next_swap_timestamp_f)
        iomfb_announce_next_swap_timestamp_f(v8, v7);
    }
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::set_signal_type(uint64_t result, int a2)
{
  uint64_t v2;
  void *__p[2];
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*(unsigned __int8 *)(result + 636) != a2)
  {
    v2 = result;
    *(_BYTE *)(result + 636) = a2;
    v8 = 0u;
    *(_OWORD *)__p = 0u;
    v4 = 0;
    v6 = 0u;
    memset(v7, 0, sizeof(v7));
    v5 = &v6;
    LODWORD(v8) = 1065353216;
    CA::WindowServer::Display::set_all_modes(result, (uint64_t)__p, 0, 0);
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v7);
    std::__tree<std::tuple<unsigned short,unsigned short>>::destroy((_QWORD *)v6);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_QWORD *)(v2 + 27064) = 0;
    pthread_mutex_lock((pthread_mutex_t *)(v2 + 560));
    CA::WindowServer::IOMFBDisplay::update_framebuffer_locked((CA::WindowServer::IOMFBDisplay *)v2, 582);
    return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 560));
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::release_resources(CA::WindowServer::IOMFBDisplay *this)
{
  CA::WindowServer::IOMFBDisplay::release_everything(this);
  return CA::WindowServer::Display::release_resources((os_unfair_lock_s *)this);
}

uint64_t CA::WindowServer::IOMFBDisplay::idle(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  pthread_mutex_t *v3;
  uint64_t os_unfair_lock_opaque;
  os_unfair_lock_s *v5;

  v2 = this + 6419;
  v3 = (pthread_mutex_t *)&this[6422];
  pthread_mutex_lock((pthread_mutex_t *)&this[6422]);
  if (this[12 * v2->_os_unfair_lock_opaque + 6444]._os_unfair_lock_opaque)
    CA::IOMobileFramebuffer::swap_wait((CA::IOMobileFramebuffer *)&this[6384]);
  os_unfair_lock_opaque = v2[1]._os_unfair_lock_opaque;
  if ((_DWORD)os_unfair_lock_opaque)
  {
    v5 = v2 + 25;
    do
    {
      v5->_os_unfair_lock_opaque = 0;
      v5 += 12;
      --os_unfair_lock_opaque;
    }
    while (os_unfair_lock_opaque);
  }
  CA::WindowServer::Display::idle(this);
  return pthread_mutex_unlock(v3);
}

float *CA::WindowServer::IOMFBDisplay::create_surface(CA::WindowServer::IOSurface *a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, const void *a9)
{
  int v10;

  v10 = 1024;
  if ((*((_BYTE *)a1 + 745) & 0x80) == 0)
  {
    if ((MEMORY[0xFFFFFC021] & 8) != 0)
      v10 = 1792;
    else
      v10 = 1024;
  }
  return CA::WindowServer::IOSurface::allocate_iosurface(a1, a2, a3, a4, a5, a6, v10, a7, a8, a9);
}

uint64_t CA::WindowServer::IOMFBDisplay::valid_clocking_p(CA::WindowServer::IOMFBDisplay *this)
{
  return 1;
}

uint64_t CA::WindowServer::IOMFBDisplay::valid_bandwidth_p(CA::WindowServer::IOMFBDisplay *this, float a2, float a3)
{
  return 1;
}

uint64_t CA::WindowServer::IOMFBDisplay::max_src_rect_width_by_pipes(CA::WindowServer::IOMFBDisplay *this)
{
  return 0;
}

uint64_t CA::WindowServer::IOMFBDisplay::max_src_rect_height_by_pipes(CA::WindowServer::IOMFBDisplay *this)
{
  return 0;
}

uint64_t CA::WindowServer::IOMFBDisplay::max_src_bandwidth_per_pipe(CA::WindowServer::IOMFBDisplay *this)
{
  return 0;
}

BOOL CA::WindowServer::IOMFBDisplay::display_supports_rotation_p(CA::WindowServer::IOMFBDisplay *this, int a2, CA::WindowServer::Surface *a3)
{
  return !a2 || *((_BYTE *)this + 28065) != 0;
}

uint64_t CA::WindowServer::IOMFBDisplay::compressed_pixel_format(CA::WindowServer::IOMFBDisplay *this, uint64_t a2)
{
  return a2;
}

uint64_t CA::WindowServer::IOMFBDisplay::detachable_layer_impl()
{
  return 1;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_physical_and_canvas_sizes(__n128 *this, float64x2_t a2, double a3, double a4, double a5, double a6, double a7, double a8, int32x4_t a9)
{
  __int8 *v10;
  int v11;
  char *v12;
  int v13;
  int v14;
  char *v15;
  int v16;
  double v17;
  BOOL v18;
  double v19;
  char *v21;
  char *v22;

  v10 = &this[1602].n128_i8[8];
  if (!this[1630].n128_u8[9])
  {
    IOMobileFramebufferGetDisplaySize();
    v11 = (int)0.0;
    v12 = getenv("CA_LCD_WIDTH");
    if (v12)
      v13 = atoi(v12);
    else
      v13 = (int)0.0;
    v14 = (int)0.0;
    *(_DWORD *)v10 = v13;
    v15 = getenv("CA_LCD_HEIGHT");
    if (v15)
      v16 = atoi(v15);
    else
      v16 = (int)0.0;
    *((_DWORD *)v10 + 1) = v16;
    v17 = 1.0;
    v18 = v11 < 1 || v13 == v11;
    v19 = 1.0;
    if (!v18)
      v19 = (double)v13 / (double)v11;
    this[1603].n128_f64[1] = v19;
    if (v14 >= 1 && v16 != v14)
      v17 = (double)v16 / (double)v14;
    this[1604].n128_f64[0] = v17;
    IOMobileFramebufferGetCanvasSizes();
    this[1603].n128_u64[0] = (unint64_t)vmovn_s64(vcvtq_s64_f64(MEMORY[0xFFFFFFFF0]));
    v21 = getenv("CA_CANVAS_WIDTH");
    if (v21)
      *((_DWORD *)v10 + 2) = atoi(v21);
    v22 = getenv("CA_CANVAS_HEIGHT");
    if (v22)
      *((_DWORD *)v10 + 3) = atoi(v22);
    IOMobileFramebufferGetDisplayArea();
    a2 = vcvtq_f64_f32(0);
    this[1632] = (__n128)a2;
    v10[449] = 1;
  }
  return CA::WindowServer::Display::set_size((uint64_t)this, (uint64_t)&this[1602].n128_i64[1], (uint64_t)&this[1603], &this[1603].n128_f64[1], a2.f64[0], a3, a4, a5, a6, a7, a8, a9);
}

_QWORD *std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>(float *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v36;

  v5 = (int)a2;
  v6 = *((_QWORD *)a1 + 1);
  if (v6)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v8.i16[0] = vaddlv_u8(v8);
    v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      v10 = (int)a2;
      if ((int)a2 >= v6)
        v10 = (int)a2 % v6;
    }
    else
    {
      v10 = (v6 - 1) & (int)a2;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v10);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v5)
          {
            if ((CA::WindowServer::Display::Mode::operator==(v12[2], a2) & 1) != 0)
              return v12;
          }
          else
          {
            if (v9 > 1)
            {
              if (v13 >= v6)
                v13 %= v6;
            }
            else
            {
              v13 &= v6 - 1;
            }
            if (v13 != v10)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  else
  {
    v10 = 0;
  }
  v12 = operator new(0x30uLL);
  *v12 = 0;
  v12[1] = v5;
  v14 = *a3;
  v12[3] = 0;
  v12[4] = 0;
  v12[2] = v14;
  *((_DWORD *)v12 + 10) = 0;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v6 || (float)(v16 * (float)v6) < v15)
  {
    v17 = 1;
    if (v6 >= 3)
      v17 = (v6 & (v6 - 1)) != 0;
    v18 = v17 | (2 * v6);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v6)
    {
      v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v6 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v24)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = a1 + 4;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_55:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_59;
        }
        v36 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v36)
          operator delete(v36);
        v6 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v10 = v5 % v6;
      else
        v10 = v5;
    }
    else
    {
      v10 = (v6 - 1) & v5;
    }
  }
  v32 = *(_QWORD **)a1;
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
  if (v33)
  {
    *v12 = *v33;
LABEL_72:
    *v33 = v12;
    goto LABEL_73;
  }
  *v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v32[v10] = a1 + 4;
  if (*v12)
  {
    v34 = *(_QWORD *)(*v12 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v34 >= v6)
        v34 %= v6;
    }
    else
    {
      v34 &= v6 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v12;
}

void CA::WindowServer::IOMFBDisplay::update_display_bandwidth_limits(CA::WindowServer::IOMFBDisplay *this, CA::WindowServer::Display::Mode *a2)
{
  char *v4;
  void *v5;
  PerModeInfo v6;
  void *__p[2];
  __int128 v8;
  _QWORD *v9;
  _QWORD v10[8];

  v10[7] = *MEMORY[0x1E0C80C00];
  v4 = (char *)this + 26952;
  *(_OWORD *)__p = 0u;
  v8 = 0u;
  if (IOMobileFramebufferGetBandwidth())
  {
    if (!*(_QWORD *)v4)
      goto LABEL_8;
  }
  else
  {
    v5 = __p[0];
    *(_OWORD *)v4 = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 26968) = v8;
    if (!v5)
    {
LABEL_8:
      v4[32] = 0;
      goto LABEL_9;
    }
  }
  if (!*((_QWORD *)this + 3370) || !*((_QWORD *)this + 3371) || *((double *)this + 3372) == 0.0)
    goto LABEL_8;
LABEL_9:
  if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 2264))(this))
  {
    *(_DWORD *)&v6.var2 = 0;
    *(_QWORD *)&v6.var0 = 0;
    os_unfair_lock_lock((os_unfair_lock_t)this + 98);
    CA::WindowServer::Display::ModeSet::ModeSet((CA::WindowServer::Display::ModeSet *)__p, (CA::WindowServer::IOMFBDisplay *)((char *)this + 400));
    os_unfair_lock_unlock((os_unfair_lock_t)this + 98);
    CA::WindowServer::Display::ModeSet::get_per_mode_info((uint64_t)__p, *(_QWORD *)a2, &v6);
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v10);
    std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(v9);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_WORD *)(v4 + 57) = *(_WORD *)&v6.var2;
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::update_timing_info(uint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;

  v1 = *(_QWORD *)(this + 26408);
  if (v1)
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 27064);
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)v1);
    v4.i16[0] = vaddlv_u8(v4);
    v5 = v4.u32[0];
    if (v4.u32[0] > 1uLL)
    {
      v6 = (int)v3;
      if ((int)v3 >= v1)
        v6 = (int)v3 % v1;
    }
    else
    {
      v6 = (v1 - 1) & (int)v3;
    }
    v7 = *(_QWORD **)(*(_QWORD *)(this + 26400) + 8 * v6);
    if (v7)
    {
      v8 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v9 = v8[1];
          if (v9 == (int)v3)
          {
            this = CA::WindowServer::Display::Mode::operator==(v8[2], v3);
            if ((this & 1) != 0)
            {
              if (!*(_QWORD *)(v2 + 27080))
              {
                IOMobileFramebufferGetSupportedDigitalOutModes();
                return (uint64_t)X::CFRef<__CFDictionary const*>::operator=((const void **)(v2 + 27080), 0);
              }
              return this;
            }
          }
          else
          {
            if (v5 > 1)
            {
              if (v9 >= v1)
                v9 %= v1;
            }
            else
            {
              v9 &= v1 - 1;
            }
            if (v9 != v6)
              return this;
          }
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
    }
  }
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_all_layers_to_null(uint64_t this, int a2)
{
  unsigned int *v2;
  uint64_t v4;
  CA::IOMobileFramebuffer *v5;
  CA::Render::Update *v6;
  uint64_t v7;
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  malloc_zone_t *malloc_zone;
  char *v13;
  char *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int64x2_t v29;
  uint64_t v30;
  pthread_mutex_t *v31;
  uint64_t v32;
  _DWORD *v33;
  _BYTE v34[5];
  _OWORD v35[2];
  unsigned int v36;
  uint8_t buf[32];
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v2 = (unsigned int *)(this + 25680);
  if (!*(_BYTE *)(this + 28076))
  {
    v4 = this;
    v36 = 0;
    v5 = (CA::IOMobileFramebuffer *)(this + 25536);
    CA::IOMobileFramebuffer::swap_begin((CA::IOMobileFramebuffer *)(this + 25536), &v36);
    IOMobileFramebufferSwapSetBackgroundColor();
    v6 = 0;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 1648))(v4))
      v7 = 4;
    else
      v7 = 3;
    do
    {
      memset(buf, 0, sizeof(buf));
      memset(v35, 0, sizeof(v35));
      CA::WindowServer::IOMFBDisplay::swap_set_layer((CA::WindowServer::IOMFBDisplay *)v4, v6, 0, (CA::WindowServer::Surface *)buf, (const CA::Rect *)v35, 0, v36, 0, *(unsigned int *)v34, v34[4]);
      v6 = (CA::Render::Update *)((char *)v6 + 1);
    }
    while ((CA::Render::Update *)v7 != v6);
    v8 = IOMobileFramebufferSwapEnd();
    if (v8)
    {
      v9 = v8;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v10 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
        {
          v11 = *(_DWORD *)(v4 + 24);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = v11;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v9;
          _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_ERROR, "display %u swap_end returned error %x\n", buf, 0xEu);
        }
      }
    }
    if (*((_BYTE *)v2 + 2401))
    {
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v13 = (char *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0xC8uLL, 0x743898A5uLL);
      v14 = v13;
      if (v13)
      {
        *((_QWORD *)v13 + 13) = 0;
        *((_QWORD *)v13 + 10) = 0;
        *((_QWORD *)v13 + 9) = v13 + 80;
        *((_QWORD *)v13 + 11) = 0;
        *((_QWORD *)v13 + 12) = v13 + 104;
        *((_QWORD *)v13 + 14) = 0;
        *((_QWORD *)v13 + 15) = v13 + 152;
        *((_QWORD *)v13 + 16) = v13 + 152;
        *((_QWORD *)v13 + 17) = v13 + 152;
        *((_QWORD *)v13 + 18) = 4;
      }
      *(_DWORD *)v13 = v36;
      *(_WORD *)(v13 + 197) |= 0x100u;
      os_unfair_lock_lock((os_unfair_lock_t)(v4 + 25908));
      v15 = *(_QWORD **)(v4 + 25920);
      v16 = *(_QWORD *)(v4 + 25928);
      if ((unint64_t)v15 >= v16)
      {
        v18 = *((_QWORD *)v2 + 29);
        v19 = ((uint64_t)v15 - v18) >> 3;
        if ((unint64_t)(v19 + 1) >> 61)
          abort();
        v20 = v16 - v18;
        v21 = v20 >> 2;
        if (v20 >> 2 <= (unint64_t)(v19 + 1))
          v21 = v19 + 1;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        v38 = v4 + 25928;
        if (v22)
          v22 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v22);
        else
          v23 = 0;
        v24 = (_QWORD *)(v22 + 8 * v19);
        v25 = v22 + 8 * v23;
        *(_QWORD *)&buf[24] = v25;
        *v24 = v14;
        v17 = v24 + 1;
        *(_QWORD *)&buf[16] = v24 + 1;
        v26 = *(_QWORD **)(v4 + 25920);
        v27 = *(_QWORD **)(v4 + 25912);
        if (v26 == v27)
        {
          v29 = vdupq_n_s64((unint64_t)v26);
        }
        else
        {
          do
          {
            v28 = *--v26;
            *v26 = 0;
            *--v24 = v28;
          }
          while (v26 != v27);
          v29 = *(int64x2_t *)(v2 + 58);
          v25 = *(_QWORD *)&buf[24];
          v17 = *(_QWORD **)&buf[16];
        }
        *(_QWORD *)(v4 + 25912) = v24;
        *(_QWORD *)(v4 + 25920) = v17;
        *(int64x2_t *)&buf[8] = v29;
        v30 = *(_QWORD *)(v4 + 25928);
        *(_QWORD *)(v4 + 25928) = v25;
        *(_QWORD *)&buf[24] = v30;
        *(_QWORD *)buf = v29.i64[0];
        std::__split_buffer<std::unique_ptr<CA::WindowServer::IOMFBDisplay::FrameInfo>>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        *v15 = v14;
        v17 = v15 + 1;
      }
      *(_QWORD *)(v4 + 25920) = v17;
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 25908));
    }
    if (a2)
      CA::IOMobileFramebuffer::swap_wait(v5);
    v31 = (pthread_mutex_t *)(v4 + 25688);
    pthread_mutex_lock(v31);
    v32 = *v2;
    if ((_DWORD)v32)
    {
      v33 = v2 + 24;
      do
      {
        *v33 = 0;
        v33 += 12;
        --v32;
      }
      while (v32);
    }
    *((_BYTE *)v2 + 2383) = 1;
    return pthread_mutex_unlock(v31);
  }
  return this;
}

void CA::WindowServer::IOMFBDisplay::post_hotplug_log(CA::WindowServer::IOMFBDisplay *this)
{
  int *v1;
  unint64_t v3;
  uint64_t v4;
  double v5;
  unsigned int v6;
  const char *v7;
  const char *v8;
  CFStringRef v9;
  const void *v10;
  int64_t v11;
  void *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  const char *v18;
  CFStringRef v19;
  int v20;
  int v21;
  os_signpost_id_t v22;
  NSObject *v23;
  void *__p[2];
  _OWORD v25[2];
  uint64_t v26;
  uint8_t buf[4];
  CFStringRef v28;
  __int16 v29;
  CFStringRef v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v1 = (int *)((char *)this + 27056);
  if (*((_BYTE *)this + 28052))
  {
    if (!*((_BYTE *)this + 28068))
    {
      v3 = *((_QWORD *)this + 3383);
      if (v3 + 1 >= 2 && (v3 & 0x10000000) == 0)
      {
        v4 = (v3 >> 14) & 0x3FFF;
        v5 = (double)((v3 >> 29) & 0x1FFFFFF) * 0.0000152587891;
        v6 = ((v3 >> 55) & 0x1F) - 1;
        if (v6 > 0x1B)
          v7 = "";
        else
          v7 = off_1E159D930[v6];
        if ((v3 & 0x4000000000000000) != 0)
          v8 = "high";
        else
          v8 = "low";
        v9 = CFStringCreateWithFormat(0, 0, CFSTR("%dx%d@%.3f %s, %s bandwidth"), *((_QWORD *)this + 3383) & 0x3FFFLL, v4, *(_QWORD *)&v5, v7, v8);
        os_unfair_lock_lock((os_unfair_lock_t)this + 98);
        CA::WindowServer::Display::ModeSet::ModeSet((CA::WindowServer::Display::ModeSet *)__p, (CA::WindowServer::IOMFBDisplay *)((char *)this + 400));
        os_unfair_lock_unlock((os_unfair_lock_t)this + 98);
        v10 = __p[0];
        v11 = (char *)__p[1] - (char *)__p[0];
        if (__p[1] == __p[0])
        {
          v12 = 0;
        }
        else
        {
          if ((char *)__p[1] - (char *)__p[0] < 0)
            abort();
          v12 = std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v11 >> 3);
          memmove(v12, v10, v11);
          v11 += (int64_t)v12;
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v26);
        std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*(_QWORD **)&v25[1]);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if ((void *)v11 != v12)
        {
          v13 = (unint64_t *)((char *)v12 + 8);
          v14 = (unint64_t *)v12;
          if ((char *)v12 + 8 != (void *)v11)
          {
            v14 = (unint64_t *)v12;
            while (1)
            {
              v15 = *v13;
              if (((*v14 >> 54) & 1) != ((*v13 >> 54) & 1))
                break;
              if (((*v14 >> 14) & 0x3FFF) * (*v14 & 0x3FFF) < ((v15 >> 14) & 0x3FFF)
                                                                           * (v15 & 0x3FFF))
                goto LABEL_25;
LABEL_26:
              if (++v13 == (unint64_t *)v11)
                goto LABEL_27;
            }
            if ((v15 & 0x40000000000000) != 0)
              goto LABEL_26;
LABEL_25:
            v14 = v13;
            goto LABEL_26;
          }
LABEL_27:
          v16 = *v14;
          *(_OWORD *)__p = 0u;
          memset(v25, 0, 28);
          (*(void (**)(void **__return_ptr, CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1360))(__p, this);
          v17 = (*((unsigned __int16 *)this + 328) >> 13) - 1;
          if (v17 > 4)
            v18 = "Unspecified";
          else
            v18 = off_1E15AB7B0[v17];
          v19 = CFStringCreateWithFormat(0, 0, CFSTR("%dx%d@%.3f, %d, %d, %s"), v16 & 0x3FFF, (v16 >> 14) & 0x3FFF, (double)((v16 >> 29) & 0x1FFFFFF) * 0.0000152587891, LODWORD(__p[0]), BYTE4(v25[0]), v18);
          v21 = *v1;
          v20 = v1[1];
          if (CA::WindowServer::Display::get_display_log(void)::once != -1)
            dispatch_once(&CA::WindowServer::Display::get_display_log(void)::once, &__block_literal_global_3972);
          v22 = *((unsigned int *)this + 6);
          if ((_DWORD)v22)
          {
            v23 = CA::WindowServer::Display::get_display_log(void)::log;
            if (os_signpost_enabled((os_log_t)CA::WindowServer::Display::get_display_log(void)::log))
            {
              *(_DWORD *)buf = 138544130;
              v28 = v9;
              v29 = 2114;
              v30 = v19;
              v31 = 1026;
              v32 = v21;
              v33 = 1026;
              v34 = v20;
              _os_signpost_emit_with_name_impl(&dword_184457000, v23, OS_SIGNPOST_EVENT, v22, "Connected", "mode=%{public, name=mode, signpost.telemetry:string1}@ displayAttributes=%{public, name=displayAttributes, signpost.telemetry:string2}@ vendorId=%{public, name=vendorId, signpost.telemetry:number1}u modelId=%{public, name=modelId, signpost.telemetry:number2}u enableTelemetry=YES ", buf, 0x22u);
            }
          }
          if (v19)
            CFRelease(v19);
        }
        if (v12)
          operator delete(v12);
        if (v9)
          CFRelease(v9);
      }
    }
  }
}

void CA::WindowServer::IOMFBDisplay::update_brightness_capabilities(CA::WindowServer::IOMFBDisplay *this, const __CFDictionary *a2)
{
  float *v2;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t BrightnessControlCapabilities;
  CFTypeID v8;
  const __CFDictionary *v9;
  double Double;
  uint64_t v11;
  unsigned int v12;
  const __CFString *v13;
  _DWORD *v14;
  int v15;
  float v16;
  _BOOL4 is_hdr;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  _BOOL4 v21;
  double v22;
  double v23;
  _BOOL4 v24;
  float v25;
  CFNumberRef v26;
  const __CFString *v27;
  NSObject *v28;
  int v29;
  const char *CStringPtr;
  int v31;
  __CFDictionary *MutableCopy;
  double v33;
  double v34;
  double v35;
  int v36;
  NSObject *v37;
  int v38;
  uint64_t v39;
  float v40;
  float v41;
  double v42;
  uint64_t v43;
  unsigned int v44;
  const __CFString *v45;
  NSObject *v46;
  int v47;
  const char *v48;
  NSObject *v49;
  int v50;
  const char *v51;
  uint64_t v52;
  const void *v53;
  uint8_t buf[4];
  int v55;
  __int16 v56;
  const char *v57;
  const void *valuePtr[3];
  _BYTE keys[24];
  int v60;
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v2 = (float *)((char *)this + 26216);
  if (!*((_BYTE *)this + 28123))
    return;
  v5 = (os_unfair_lock_s *)((char *)this + 27208);
  os_unfair_lock_lock((os_unfair_lock_t)this + 6802);
  v6 = *((_QWORD *)this + 3402);
  os_unfair_lock_unlock(v5);
  if (v6)
  {
    if (!a2 && (*((_WORD *)this + 328) & 0x1C00) == 0)
      return;
  }
  BrightnessControlCapabilities = IOMobileFramebufferGetBrightnessControlCapabilities();
  if (a2)
  {
    v8 = CFGetTypeID(a2);
    if (v8 != CFDictionaryGetTypeID())
      return;
    v9 = (const __CFDictionary *)CFRetain(a2);
    Double = CA_CFDictionaryGetDouble(v9, CFSTR("EDRPotentialHeadroom"));
    CA::WindowServer::Display::initialize_edr_state(this);
    v11 = *((_QWORD *)this + 86);
    if (v11)
    {
      *(float *)&v12 = Double;
      atomic_store(v12, (unsigned int *)(v11 + 4));
    }
    if (!x_log_hook_p() && !os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      goto LABEL_105;
    v13 = CFCopyDescription(v9);
    if (x_log_hook_p())
    {
      if (v13)
        CFStringGetCStringPtr(v13, 0x8000100u);
      x_log_();
    }
    else
    {
      v28 = x_log_category_brightness;
      if (os_log_type_enabled((os_log_t)x_log_category_brightness, OS_LOG_TYPE_DEFAULT))
      {
        v29 = *((_DWORD *)this + 6);
        if (v13)
          CStringPtr = CFStringGetCStringPtr(v13, 0x8000100u);
        else
          CStringPtr = "(null)";
        *(_DWORD *)keys = 67109378;
        *(_DWORD *)&keys[4] = v29;
        *(_WORD *)&keys[8] = 2080;
        *(_QWORD *)&keys[10] = CStringPtr;
        _os_log_impl(&dword_184457000, v28, OS_LOG_TYPE_DEFAULT, "DisplayID: %u brightness capabilities set to %s", keys, 0x12u);
      }
    }
LABEL_103:
    if (v13)
      CFRelease(v13);
LABEL_105:
    v24 = 1;
    goto LABEL_106;
  }
  v9 = (const __CFDictionary *)BrightnessControlCapabilities;
  v14 = (_DWORD *)((char *)this + 745);
  v15 = (*((unsigned __int16 *)this + 328) >> 10) & 7;
  if (!BrightnessControlCapabilities)
  {
    v24 = v15 == 1;
    if (v15 != 1 || !CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::IOMFBDisplay *)((char *)this + 640)))
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v37 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEBUG))
        {
          v38 = *((_DWORD *)this + 6);
          *(_DWORD *)keys = 67109120;
          *(_DWORD *)&keys[4] = v38;
          _os_log_impl(&dword_184457000, v37, OS_LOG_TYPE_DEBUG, "DisplayID: %u got NULL brightness capabilities", keys, 8u);
        }
      }
      *v14 &= ~0x200u;
      CA::WindowServer::Display::initialize_edr_state(this);
      v39 = *((_QWORD *)this + 86);
      v9 = 0;
      if (v39)
        atomic_store(0x3F800000u, (unsigned int *)(v39 + 4));
      goto LABEL_106;
    }
    *(_OWORD *)keys = xmmword_1E15AB6F0;
    *(_QWORD *)&keys[16] = CFSTR("ReferenceSDRBrightness");
    v25 = (*(float (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 952))(this);
    LODWORD(valuePtr[0]) = 1092616192;
    v13 = (const __CFString *)CFNumberCreate(0, kCFNumberFloatType, valuePtr);
    *(float *)valuePtr = v25;
    v26 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
    valuePtr[0] = *(const void **)MEMORY[0x1E0C9AE40];
    valuePtr[1] = v13;
    valuePtr[2] = v26;
    v9 = CFDictionaryCreate(0, (const void **)keys, valuePtr, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (x_log_hook_p() || os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      v27 = CFCopyDescription(v9);
      if (x_log_hook_p())
      {
        if (v27)
          CFStringGetCStringPtr(v27, 0x8000100u);
        x_log_();
      }
      else
      {
        v49 = x_log_category_brightness;
        if (os_log_type_enabled((os_log_t)x_log_category_brightness, OS_LOG_TYPE_DEFAULT))
        {
          v50 = *((_DWORD *)this + 6);
          if (v27)
            v51 = CFStringGetCStringPtr(v27, 0x8000100u);
          else
            v51 = "(null)";
          *(_DWORD *)buf = 67109378;
          v55 = v50;
          v56 = 2080;
          v57 = v51;
          _os_log_impl(&dword_184457000, v49, OS_LOG_TYPE_DEFAULT, "DisplayID: %u simulating HDR10 brightness capabilities %s", buf, 0x12u);
        }
      }
      if (v27)
        CFRelease(v27);
    }
    CA::WindowServer::Display::initialize_edr_state(this);
    v52 = *((_QWORD *)this + 86);
    if (v52)
      atomic_store(0x41200000u, (unsigned int *)(v52 + 4));
    *v14 &= ~0x200u;
    if (v26)
      CFRelease(v26);
    goto LABEL_103;
  }
  *v14 |= 0x200u;
  if (!v15)
  {
    if (CADeviceSupportsReferenceMode::once[0] != -1)
      dispatch_once(CADeviceSupportsReferenceMode::once, &__block_literal_global_159);
    if (CADeviceSupportsReferenceMode::supports_ref)
    {
      v31 = *((unsigned __int8 *)v2 + 112);
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v9);
      v9 = MutableCopy;
      v33 = 16.0;
      if (v31)
      {
        v33 = 10.0;
        v34 = 10.0;
      }
      else
      {
        v34 = 0.0;
      }
      CA_CFDictionarySetDouble(MutableCopy, CFSTR("EDRPotentialHeadroom"), v33);
      CA_CFDictionarySetDouble(v9, CFSTR("EDRReferenceHeadroom"), v34);
      if (v31)
      {
        CA_CFDictionarySetDouble(v9, CFSTR("MinNits"), 100.0);
        CA_CFDictionarySetDouble(v9, CFSTR("MaxNits"), 100.0);
        v35 = 1000.0;
      }
      else
      {
        v35 = 1600.0;
      }
      CA_CFDictionarySetDouble(v9, CFSTR("MaxNitsEDR"), v35);
      v36 = 1;
      goto LABEL_73;
    }
LABEL_60:
    CFRetain(v9);
    v36 = 0;
LABEL_73:
    v40 = CA_CFDictionaryGetDouble(v9, CFSTR("MinNits"));
    *v2 = v40;
    v41 = CA_CFDictionaryGetDouble(v9, CFSTR("MaxNits"));
    v2[1] = v41;
    goto LABEL_74;
  }
  if (v15 != 1)
    goto LABEL_60;
  (*(void (**)(_BYTE *__return_ptr, CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1360))(keys, this);
  if (v61 == 1552 && (v60 - 44577) <= 0xE && ((1 << (v60 - 33)) & 0x7007) != 0)
  {
    v9 = CFDictionaryCreateMutableCopy(0, 0, v9);
    (*(void (**)(_BYTE *__return_ptr, CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1216))(keys, this);
    v16 = *(float *)&keys[4];
    is_hdr = CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::IOMFBDisplay *)((char *)this + 640));
    CA::WindowServer::Display::initialize_edr_state(this);
    v18 = *((_QWORD *)this + 86);
    if (v18)
    {
      v19 = (unsigned int *)(v18 + 4);
      if (is_hdr)
        v20 = 1098907648;
      else
        v20 = 1084227584;
      atomic_store(v20, v19);
    }
    if (v16 == 0.0)
    {
      if (CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::IOMFBDisplay *)((char *)this + 640)))
        v16 = 1600.0;
      else
        v16 = 500.0;
      v2[1] = v16;
    }
    v21 = (float)(v16 * 0.01) > 16.0 || (float)(v16 * 0.01) < 1.0;
    v22 = 16.0;
    if ((float)(v16 * 0.01) < 1.0 && (float)(v16 * 0.01) <= 16.0)
      v22 = 1.0;
    v23 = (float)(v16 * 0.01);
    if (v21)
      v23 = v22;
    CA_CFDictionarySetDouble(v9, CFSTR("EDRPotentialHeadroom"), v23);
    if (v16 > 550.0)
      CA_CFDictionarySetDouble(v9, CFSTR("EDRReferenceHeadroom"), 10.0);
    CA_CFDictionarySetDouble(v9, CFSTR("ReferenceSDRBrightness"), 100.0);
  }
  else
  {
    CFRetain(v9);
  }
  v36 = 0;
LABEL_74:
  v42 = CA_CFDictionaryGetDouble(v9, CFSTR("EDRPotentialHeadroom"));
  CA::WindowServer::Display::initialize_edr_state(this);
  v43 = *((_QWORD *)this + 86);
  if (v43)
  {
    *(float *)&v44 = v42;
    atomic_store(v44, (unsigned int *)(v43 + 4));
  }
  if (!x_log_hook_p())
  {
    v24 = v36 != 0;
    if (!os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      goto LABEL_106;
  }
  v45 = CFCopyDescription(v9);
  if (x_log_hook_p())
  {
    if (v45)
      CFStringGetCStringPtr(v45, 0x8000100u);
    x_log_();
  }
  else
  {
    v46 = x_log_category_brightness;
    if (os_log_type_enabled((os_log_t)x_log_category_brightness, OS_LOG_TYPE_DEFAULT))
    {
      v47 = *((_DWORD *)this + 6);
      if (v45)
        v48 = CFStringGetCStringPtr(v45, 0x8000100u);
      else
        v48 = "(null)";
      *(_DWORD *)keys = 67109378;
      *(_DWORD *)&keys[4] = v47;
      *(_WORD *)&keys[8] = 2080;
      *(_QWORD *)&keys[10] = v48;
      _os_log_impl(&dword_184457000, v46, OS_LOG_TYPE_DEFAULT, "DisplayID: %u got brightness capabilities %s", keys, 0x12u);
      if (!v45)
        goto LABEL_87;
      goto LABEL_86;
    }
  }
  if (v45)
LABEL_86:
    CFRelease(v45);
LABEL_87:
  v24 = v36 != 0;
LABEL_106:
  os_unfair_lock_lock(v5);
  v53 = (const void *)*((_QWORD *)this + 3402);
  *((_QWORD *)this + 3402) = v9;
  os_unfair_lock_unlock(v5);
  if (v53)
    CFRelease(v53);
  if (v24)
  {
    if (*((_BYTE *)v2 + 1907))
      CA::Render::post_notification(0x35u, 0, 0, 0);
  }
}

void CA::WindowServer::IOMFBDisplay::set_needs_icc_reload(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v2;
  char *v3;
  const void *v4;

  if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1832))(this))
  {
    v2 = 0;
    *((_WORD *)this + 14058) = 257;
    *((_BYTE *)this + 28118) = 1;
    *((_DWORD *)this + 6825) = -1;
    v3 = (char *)this + 27248;
    do
    {
      v4 = *(const void **)&v3[v2];
      if (v4)
      {
        CFRelease(v4);
        *(_QWORD *)&v3[v2] = 0;
      }
      v2 += 8;
    }
    while (v2 != 32);
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::swap_set_layer(CA::WindowServer::IOMFBDisplay *this, CA::Render::Update *a2, CA::Render::Update *a3, CA::WindowServer::Surface *a4, const CA::Rect *a5, const CA::Rect *a6, unsigned int a7, unsigned int a8, unsigned int a9, BOOL a10)
{
  unsigned int v12;
  int v18;
  CGColorSpace **v19;
  int v20;
  const void *v21;
  NSObject *v23;
  int v24;
  unsigned int v25;
  const void *v26;
  unsigned int v27;
  const void *v28;
  int *v29;
  CGColorSpace **v30;
  CA::WindowServer::Surface *v31;
  int v32;
  const CA::Rect *v33;
  int v34;
  int v35;
  int v36;
  char *v37;
  CGColorSpace **v38;
  int v39;
  int v40;
  unsigned int v41;
  CGColorSpace *v42;
  _DWORD *v43;
  __IOSurface *v44;
  BOOL v45;
  uint64_t *v46;
  const CA::Rect *v47;
  int v48;
  _DWORD *v49;
  int v50;
  int v51;
  __IOSurface *v52;
  NSObject *v53;
  __IOSurface *v54;
  IOSurfaceID v55;
  uint64_t v56;
  int v57;
  int v58;
  __IOSurface *v59;
  NSObject *v60;
  __IOSurface *v61;
  IOSurfaceID v62;
  uint64_t v63;
  __IOSurface *v64;
  NSObject *v65;
  __IOSurface *v66;
  IOSurfaceID ID;
  uint64_t v68;
  uint64_t v69;
  const __CFString *v70;
  const CA::Rect *v71;
  NSObject *v72;
  NSObject *v73;
  int v74;
  const char *CString;
  float v76;
  CA::WindowServer::Surface *v77;
  CA::WindowServer::Surface *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  CA::IOMobileFramebuffer *v82;
  CFTypeRef cf;
  uint8_t v84[4];
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  const char *v89;
  __int16 v90;
  double v91;
  uint8_t buf[16];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;

  v12 = a6;
  v100 = *MEMORY[0x1E0C80C00];
  v82 = (CA::WindowServer::IOMFBDisplay *)((char *)this + 25536);
  v18 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1832))(this);
  if (HIBYTE(xmmword_1ECDC6AB0))
    v20 = 0;
  else
    v20 = v18;
  if (a3)
  {
    v80 = a8;
    v81 = a7;
    if (!v20)
    {
LABEL_56:
      v44 = (__IOSurface *)(*(uint64_t (**)(CA::Render::Update *))(*(_QWORD *)a3 + 160))(a3);
      if (v44)
        v45 = (a2 & 0xFFFFFFFD) == 0;
      else
        v45 = 0;
      if (v45)
        v12 |= 0x200u;
      if (BYTE6(xmmword_1ECDC6AF0))
      {
        if (x_log_hook_p())
        {
          v64 = (__IOSurface *)(*(uint64_t (**)(CA::Render::Update *))(*(_QWORD *)a3 + 160))(a3);
          IOSurfaceGetID(v64);
          x_log_();
        }
        else
        {
          v65 = x_log_category_sharedevent;
          if (os_log_type_enabled((os_log_t)x_log_category_sharedevent, OS_LOG_TYPE_DEBUG))
          {
            v66 = (__IOSurface *)(*(uint64_t (**)(CA::Render::Update *))(*(_QWORD *)a3 + 160))(a3);
            ID = IOSurfaceGetID(v66);
            v68 = *((_QWORD *)a3 + 2);
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)&buf[4] = ID;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = (_DWORD)a2;
            *(_WORD *)&buf[14] = 2048;
            *(_QWORD *)&v93 = v68;
            _os_log_impl(&dword_184457000, v65, OS_LOG_TYPE_DEBUG, "IOSurfaceID: 0x%x  layer: %d  SharedEvent: %p", buf, 0x18u);
          }
        }
      }
      v46 = (uint64_t *)*((_QWORD *)a3 + 2);
      if (v46 && v46[1])
      {
        v77 = a4;
        v47 = a5;
        if (a2 > 3)
          v48 = 0;
        else
          v48 = dword_18474EA70[a2];
        v49 = (_DWORD *)v46[8];
        if (v49)
          CA::WindowServer::SharedEvent::History::add(v49, *v46, v48, 1, 1, v46[5]);
        v50 = IOMobileFramebufferSwapSetEventWait();
        if (v50)
        {
          v51 = v50;
          if (x_log_hook_p())
          {
            v52 = (__IOSurface *)(*(uint64_t (**)(CA::Render::Update *))(*(_QWORD *)a3 + 160))(a3);
            IOSurfaceGetID(v52);
            x_log_();
          }
          else
          {
            v53 = x_log_category_sharedevent;
            if (os_log_type_enabled((os_log_t)x_log_category_sharedevent, OS_LOG_TYPE_ERROR))
            {
              v54 = (__IOSurface *)(*(uint64_t (**)(CA::Render::Update *))(*(_QWORD *)a3 + 160))(a3);
              v55 = IOSurfaceGetID(v54);
              v56 = *((_QWORD *)a3 + 2);
              *(_DWORD *)buf = 67109888;
              *(_DWORD *)&buf[4] = v55;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = (_DWORD)a2;
              *(_WORD *)&buf[14] = 2048;
              *(_QWORD *)&v93 = v56;
              WORD4(v93) = 1024;
              *(_DWORD *)((char *)&v93 + 10) = v51;
              _os_log_impl(&dword_184457000, v53, OS_LOG_TYPE_ERROR, "IOSurfaceID: 0x%x  layer: %d  SharedEvent: %p wait returned error: %x", buf, 0x1Eu);
            }
          }
        }
        CA::WindowServer::SharedEvent::inc_signal_value((uint64_t)v46, v48, 1);
        v57 = IOMobileFramebufferSwapSetEventSignal();
        a5 = v47;
        a4 = v77;
        if (v57)
        {
          v58 = v57;
          if (x_log_hook_p())
          {
            v59 = (__IOSurface *)(*(uint64_t (**)(CA::Render::Update *))(*(_QWORD *)a3 + 160))(a3);
            IOSurfaceGetID(v59);
            x_log_();
          }
          else
          {
            v60 = x_log_category_sharedevent;
            if (os_log_type_enabled((os_log_t)x_log_category_sharedevent, OS_LOG_TYPE_ERROR))
            {
              v61 = (__IOSurface *)(*(uint64_t (**)(CA::Render::Update *))(*(_QWORD *)a3 + 160))(a3);
              v62 = IOSurfaceGetID(v61);
              v63 = *((_QWORD *)a3 + 2);
              *(_DWORD *)buf = 67109888;
              *(_DWORD *)&buf[4] = v62;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = (_DWORD)a2;
              *(_WORD *)&buf[14] = 2048;
              *(_QWORD *)&v93 = v63;
              WORD4(v93) = 1024;
              *(_DWORD *)((char *)&v93 + 10) = v58;
              _os_log_impl(&dword_184457000, v60, OS_LOG_TYPE_ERROR, "IOSurfaceID: 0x%x  layer: %d  SharedEvent: %p signal returned error: %x", buf, 0x1Eu);
            }
          }
        }
      }
      return CA::WindowServer::IOMFBDisplay::fb_swap_set_layer((CA::WindowServer::IOMFBDisplay *)*((unsigned int *)this + 6), v82, a2, v44, a4, a5, v12, v81, v80);
    }
    v21 = (const void *)(*(uint64_t (**)(CA::Render::Update *))(*(_QWORD *)a3 + 88))(a3);
    cf = v21;
    if (!v21)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v23 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v23, OS_LOG_TYPE_DEBUG, "source surface has no colorspace, setting to sRGB", buf, 2u);
        }
      }
      v21 = (const void *)CAGetColorSpace(0x1Du);
      cf = v21;
    }
    if ((CACGColorSpaceIsRec709((uint64_t)v21) & 1) != 0)
    {
      CA::WindowServer::Display::display_attributes((CA::WindowServer::Display *)buf, (uint64_t)this);
      if (HIDWORD(v95) == 2
        || HIDWORD(v95) == 6
        && (CA::WindowServer::Display::display_attributes((CA::WindowServer::Display *)buf, (uint64_t)this), BYTE6(v95)))
      {
        v24 = 1;
        v25 = 19;
      }
      else
      {
        v24 = 0;
        v25 = 29;
      }
      v26 = (const void *)CAGetColorSpace(v25);
      cf = v26;
    }
    else
    {
      v24 = 0;
      v26 = cf;
    }
    if ((CACGColorSpaceIsRec601NTSC((uint64_t)v26) & 1) == 0 && (CACGColorSpaceIsRec601PAL((uint64_t)cf) & 1) == 0)
    {
      v28 = cf;
      goto LABEL_35;
    }
    CA::WindowServer::Display::display_attributes((CA::WindowServer::Display *)buf, (uint64_t)this);
    if (HIDWORD(v95) == 6)
    {
      CA::WindowServer::Display::display_attributes((CA::WindowServer::Display *)buf, (uint64_t)this);
      if (BYTE6(v95))
      {
LABEL_28:
        if (CACGColorSpaceIsRec601NTSC((uint64_t)cf))
          v27 = 24;
        else
          v27 = 25;
        v28 = (const void *)CAGetColorSpace(v27);
        cf = v28;
        v24 = 1;
LABEL_35:
        v29 = (int *)((char *)this + 27296);
        if (v28 == (const void *)CAGetColorSpace(9u) || CGColorSpaceEqualToColorSpaceIgnoringRange())
        {
          CA::WindowServer::Display::display_attributes((CA::WindowServer::Display *)buf, (uint64_t)this);
          if (!BYTE6(v95))
            cf = (CFTypeRef)CAGetColorSpace(0x1Fu);
        }
        CA::WindowServer::IOMFBDisplay::set_tonemapping_state(this, a3, a2, (uint64_t)&cf, v30);
        v79 = v12;
        if (cf)
        {
          v31 = a4;
          if (cf == *((CFTypeRef *)this + a2 + 3406))
            v32 = 1;
          else
            v32 = CGColorSpaceEqualToColorSpaceIgnoringRange();
          v33 = a5;
          v34 = v32 ^ 1;
        }
        else
        {
          v31 = a4;
          v33 = a5;
          v34 = 0;
        }
        v35 = *((_DWORD *)this + 6826);
        v36 = 1 << (char)a2;
        if ((v35 & (1 << (char)a2)) != 0)
        {
          *((_DWORD *)this + 6826) = v35 ^ v36;
          v34 = 1;
        }
        v37 = CA::WindowServer::IOMFBDisplay::color_program_cache(this);
        v38 = (CGColorSpace **)v37;
        v39 = *v29;
        if (((BYTE6(xmmword_1ECDC6AB0) == 0) & ~v24) != 0)
        {
          v41 = *((unsigned __int8 *)this + 746);
          v40 = (v41 >> 6) & 1;
          if (((((v39 & v36) == 0) ^ ((v41 & 0x40) >> 6)) & 1) != 0)
          {
LABEL_49:
            v37[63] = v40;
            a5 = v33;
            a4 = v31;
            v12 = v79;
            if (!v34)
              goto LABEL_56;
LABEL_53:
            if (BYTE8(xmmword_1ECDC6AB0))
            {
              v69 = CGColorSpaceCopyICCProfileDescription();
              if (v69)
              {
                v70 = (const __CFString *)v69;
                v78 = a4;
                v71 = a5;
                v98 = 0u;
                v99 = 0u;
                v97 = 0u;
                v95 = 0u;
                v96 = 0u;
                v93 = 0u;
                v94 = 0u;
                *(_OWORD *)buf = 0u;
                if (x_log_hook_p())
                {
                  CA_CFStringGetCString(v70, (char *)buf, 128);
                  (*(float (**)(CA::Render::Update *))(*(_QWORD *)a3 + 192))(a3);
                  x_log_();
                }
                else
                {
                  v73 = x_log_category_color;
                  if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
                  {
                    v74 = *((_DWORD *)this + 6);
                    CString = CA_CFStringGetCString(v70, (char *)buf, 128);
                    v76 = (*(float (**)(CA::Render::Update *))(*(_QWORD *)a3 + 192))(a3);
                    *(_DWORD *)v84 = 67109890;
                    v85 = v74;
                    v86 = 1024;
                    v87 = (int)a2;
                    v88 = 2080;
                    v89 = CString;
                    v90 = 2048;
                    v91 = v76;
                    _os_log_impl(&dword_184457000, v73, OS_LOG_TYPE_DEFAULT, "Display %u setting IOMFB source layer %u colorspace to '%s' with EDR factor: %g", v84, 0x22u);
                  }
                }
                CFRelease(v70);
                a5 = v71;
                a4 = v78;
                v12 = v79;
              }
            }
            v42 = (CGColorSpace *)CAGetColorSpace(0x1Eu);
            CA::ColorProgram::Cache::set_colorspace(v38, v42);
            v43 = CA::ColorProgram::Cache::lookup((uint64_t)v38, (CGColorSpace *)cf, 0, 0);
            if (v43)
            {
              CA::WindowServer::IOMFBDisplay::set_icc_matrix_and_trc((uint64_t)this, (uint64_t)v43, 0, 0, (int)a2);
              X::CFRef<__CFDictionary const*>::operator=((const void **)this + a2 + 3406, cf);
            }
            goto LABEL_56;
          }
        }
        else
        {
          LOBYTE(v40) = 1;
          if ((v39 & v36) != 0)
            goto LABEL_49;
        }
        *v29 = v39 ^ v36;
        v37[63] = v40;
        a5 = v33;
        a4 = v31;
        v12 = v79;
        goto LABEL_53;
      }
    }
    else if (v24)
    {
      goto LABEL_28;
    }
    v28 = (const void *)CAGetColorSpace(0x1Du);
    v24 = 0;
    cf = v28;
    goto LABEL_35;
  }
  if (v20)
    CA::WindowServer::IOMFBDisplay::set_tonemapping_state(this, 0, a2, 0, v19);
  if (BYTE6(xmmword_1ECDC6AF0))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v72 = x_log_category_sharedevent;
      if (os_log_type_enabled((os_log_t)x_log_category_sharedevent, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = (_DWORD)a2;
        _os_log_impl(&dword_184457000, v72, OS_LOG_TYPE_DEBUG, "layer: %d  surface: nullptr", buf, 8u);
      }
    }
  }
  kdebug_trace();
  return CA::IOMobileFramebuffer::swap_set_layer(v82, a2, 0, a4, a5);
}

void CA::WindowServer::IOMFBDisplay::set_tonemapping_state(CA::WindowServer::IOMFBDisplay *this, CA::Render::Update *a2, const CA::WindowServer::Surface *a3, uint64_t a4, CGColorSpace **a5)
{
  int v9;
  int v10;
  CA::Render *v11;
  CGColorSpace *v12;
  CGColorSpace *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD v18[5];
  int v19;
  int v20;
  _QWORD v21[5];
  int v22;
  int v23;
  _QWORD v24[5];
  int v25;
  _OWORD v26[4];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (CA::WindowServer::IOMFBDisplay::set_tonemapping_state(CA::Render::Update *,CA::WindowServer::Surface const*,unsigned int,CGColorSpace **)::identity_once != -1)
    dispatch_once(&CA::WindowServer::IOMFBDisplay::set_tonemapping_state(CA::Render::Update *,CA::WindowServer::Surface const*,unsigned int,CGColorSpace **)::identity_once, &__block_literal_global_17369);
  v9 = *((_DWORD *)this + 6);
  if (a2
    && ((*((unsigned int *)a2 + 56) | ((unint64_t)*((unsigned __int8 *)a2 + 228) << 32)) & 0x2000000000) != 0
    && *((_QWORD *)a2 + 11)
    && ((*(unsigned int (**)(CA::Render::Update *))(*(_QWORD *)a2 + 40))(a2) == 18
     || (*(unsigned int (**)(CA::Render::Update *))(*(_QWORD *)a2 + 40))(a2) == 16))
  {
    v10 = *((_DWORD *)this + 6825);
    if ((v10 & (1 << (char)a3)) == 0)
      *((_DWORD *)this + 6825) = v10 ^ (1 << (char)a3);
    if ((*(uint64_t (**)(CA::Render::Update *))(*(_QWORD *)a2 + 88))(a2))
    {
      v11 = (CA::Render *)(*(uint64_t (**)(CA::Render::Update *))(*(_QWORD *)a2 + 160))(a2);
      v12 = (CGColorSpace *)(*(uint64_t (**)(CA::Render::Update *))(*(_QWORD *)a2 + 88))(a2);
      CA::Render::iosurface_set_bulk_from_colorspace(v11, v12, v13, v14);
    }
    v15 = *((_QWORD *)a2 + 11);
    v16 = (*(uint64_t (**)(CA::Render::Update *))(*(_QWORD *)a2 + 160))(a2);
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 0x40000000;
    v24[2] = ___ZN2CA12WindowServer12IOMFBDisplay21set_tonemapping_stateEPNS_6Render6UpdateEPKNS0_7SurfaceEjPP12CGColorSpace_block_invoke_2;
    v24[3] = &__block_descriptor_tmp_47;
    v24[4] = this;
    v25 = (int)a3;
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 0x40000000;
    v21[2] = ___ZN2CA12WindowServer12IOMFBDisplay21set_tonemapping_stateEPNS_6Render6UpdateEPKNS0_7SurfaceEjPP12CGColorSpace_block_invoke_3;
    v21[3] = &__block_descriptor_tmp_50;
    v21[4] = this;
    v22 = v9;
    v23 = (int)a3;
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 0x40000000;
    v18[2] = ___ZN2CA12WindowServer12IOMFBDisplay21set_tonemapping_stateEPNS_6Render6UpdateEPKNS0_7SurfaceEjPP12CGColorSpace_block_invoke_51;
    v18[3] = &__block_descriptor_tmp_54;
    v18[4] = this;
    v19 = v9;
    v20 = (int)a3;
    (*(void (**)(uint64_t, uint64_t, const CA::WindowServer::Surface *, char *, uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v15 + 32))(v15, v16, a3, (char *)a2 + 96, a4, v24, v21, v18);
  }
  else
  {
    v17 = *((_DWORD *)this + 6825);
    if ((v17 & (1 << (char)a3)) != 0)
    {
      *((_DWORD *)this + 6825) = v17 ^ (1 << (char)a3);
      v27 = 0;
      memset(v26, 0, sizeof(v26));
      iomfb_swap_set_tonemap_config(*((_QWORD *)this + 3192), (uint64_t)v26, (uint64_t)a3);
      CA::IOMobileFramebuffer::swap_set_icc_curve((_DWORD)this + 25536, 3u, v9, (int)a3, 7, CA::WindowServer::IOMFBDisplay::set_tonemapping_state(CA::Render::Update *,CA::WindowServer::Surface const*,unsigned int,CGColorSpace **)::bypass_curve);
      CA::IOMobileFramebuffer::swap_set_icc_curve((_DWORD)this + 25536, 7u, v9, (int)a3, 7, CA::WindowServer::IOMFBDisplay::set_tonemapping_state(CA::Render::Update *,CA::WindowServer::Surface const*,unsigned int,CGColorSpace **)::bypass_curve);
      CA::IOMobileFramebuffer::swap_set_icc_curve((_DWORD)this + 25536, 6u, v9, (int)a3, 7, CA::WindowServer::IOMFBDisplay::set_tonemapping_state(CA::Render::Update *,CA::WindowServer::Surface const*,unsigned int,CGColorSpace **)::bypass_curve);
      CA::IOMobileFramebuffer::swap_set_icc_curve((_DWORD)this + 25536, 0xBu, v9, (int)a3, 7, CA::WindowServer::IOMFBDisplay::set_tonemapping_state(CA::Render::Update *,CA::WindowServer::Surface const*,unsigned int,CGColorSpace **)::bypass_curve);
      CA::IOMobileFramebuffer::swap_set_icc_matrix((uint64_t)this + 25536, 2u, v9, (int)a3, (float *)&CA::WindowServer::IOMFBDisplay::set_tonemapping_state(CA::Render::Update *,CA::WindowServer::Surface const*,unsigned int,CGColorSpace **)::identity_matrix);
      CA::IOMobileFramebuffer::swap_set_icc_matrix((uint64_t)this + 25536, 3u, v9, (int)a3, (float *)&CA::WindowServer::IOMFBDisplay::set_tonemapping_state(CA::Render::Update *,CA::WindowServer::Surface const*,unsigned int,CGColorSpace **)::identity_matrix);
    }
  }
}

char *CA::WindowServer::IOMFBDisplay::color_program_cache(CA::WindowServer::IOMFBDisplay *this)
{
  char *v1;
  malloc_zone_t *malloc_zone;
  CGColorSpace *v4;

  v1 = (char *)*((_QWORD *)this + 3414);
  if (!v1)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v1 = (char *)malloc_type_zone_malloc(malloc_zone, 0x50uLL, 0x8BB15036uLL);
    if (v1)
    {
      v4 = (CGColorSpace *)CAGetColorSpace(0x1Du);
      CA::ColorProgram::Cache::Cache((CA::ColorProgram::Cache *)v1, v4);
      *((_QWORD *)this + 3414) = v1;
      *((_QWORD *)v1 + 9) = 0x180000000ELL;
      if (!v1[62])
        v1[62] = 1;
      *(_WORD *)(v1 + 63) = 1;
      v1[65] = 0;
    }
    else
    {
      *((_QWORD *)this + 3414) = 0;
    }
  }
  return v1;
}

void CA::WindowServer::IOMFBDisplay::set_icc_matrix_and_trc(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  int v5;
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  NSObject *v23;
  NSObject *v24;
  BOOL v25;
  unint64_t v26;
  int v27;
  float *v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t i;
  int v36;
  int v37;
  float v38;
  float v39;
  const void *v40;
  float v41;
  float v42;
  float v43;
  float v44;
  int v45;
  uint64_t v46;
  int v47;
  uint8_t *v48;
  uint8_t *v49;
  float v50;
  uint8_t *v51;
  float *v52;
  float v53;
  uint8_t *v54;
  float *v55;
  float v56;
  uint8_t *v57;
  float *v58;
  float v59;
  uint8_t *v60;
  uint8_t *v61;
  int v62;
  int j;
  unint64_t v64;
  int v65;
  unsigned int *v66;
  int v67;
  int v68;
  int v69;
  NSObject *v70;
  _BOOL4 v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  NSObject *v79;
  size_t v81;
  const void *v82;
  uint64_t v83;
  _BOOL4 v84;
  char v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  int v91;
  _BOOL4 v92;
  int v93;
  uint8_t v95[8];
  float v96;
  float v97;
  const void *v98;
  float v99;
  float v100;
  _DWORD v101[4];
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  uint8_t buf[4];
  int v107;
  uint64_t v108;

  v5 = a5;
  v108 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a2 + 48);
  if (a3 > 1)
  {
    v9 = a5 == -1;
    if (a4 < 2 && v9)
      v10 = 3;
    else
      v10 = 1;
    if (a4 > 1)
    {
      v5 = 0;
      v10 = 1;
    }
  }
  else
  {
    v9 = a5 == -1;
    if (a5 == -1)
      v10 = 3;
    else
      v10 = 1;
  }
  v11 = a1 + 25536;
  v84 = a4 == 15 && CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::Display::Mode *)(a1 + 640));
  v83 = a2;
  v12 = *(_DWORD *)(a2 + 36);
  v93 = v5;
  if (!v12)
  {
LABEL_113:
    v73 = v10;
    if (v84)
      v74 = 6;
    else
      v74 = 0;
    bzero(v95, 0x218uLL);
    v75 = 0;
    *(_DWORD *)v95 = v74;
    do
    {
      if (v9)
        v76 = v75;
      else
        v76 = v93;
      v77 = CA::IOMobileFramebuffer::swap_set_icc_curve(v11, a4, *(_DWORD *)(a1 + 24), v76, 7, (unsigned int *)v95);
      if (v77)
      {
        v78 = v77;
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v79 = x_log_category_color;
          if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            v107 = v78;
            _os_log_impl(&dword_184457000, v79, OS_LOG_TYPE_ERROR, "Failed to set ICC curve, error = 0x%X", buf, 8u);
          }
        }
      }
      ++v75;
    }
    while (v73 != v75);
    return;
  }
  v13 = 0;
  v14 = *(_DWORD *)(a1 + 24);
  v91 = v10;
  v92 = v9;
  while (2)
  {
    v85 = v13;
    while (1)
    {
      v15 = v12 & 0x1F;
      v89 = v12 >> 5;
      v90 = v12 & 0x1F;
      if (v15 > 0x10)
        goto LABEL_30;
      if (v15 != 1)
        break;
      v87 = v12;
      v16 = 0;
      v96 = 0.0;
      *(_QWORD *)v95 = 0;
      v17 = *(_DWORD *)(v8 + 16);
      v97 = *(float *)v8;
      LODWORD(v98) = v17;
      v18 = *(_DWORD *)(v8 + 36);
      HIDWORD(v98) = *(_DWORD *)(v8 + 32);
      v99 = *(float *)(v8 + 4);
      v100 = *(float *)(v8 + 20);
      v101[0] = v18;
      v101[1] = *(_DWORD *)(v8 + 8);
      v101[2] = *(_DWORD *)(v8 + 24);
      v101[3] = *(_DWORD *)(v8 + 40);
      v102 = *(_QWORD *)(v8 + 48);
      v19 = v8;
      v103 = *(_DWORD *)(v8 + 56);
      do
      {
        if (v9)
          v20 = v16;
        else
          v20 = v5;
        v21 = CA::IOMobileFramebuffer::swap_set_icc_matrix(v11, a3, v14, v20, (float *)v95);
        if (v21)
        {
          v22 = v21;
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v23 = x_log_category_color;
            if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109120;
              v107 = v22;
              _os_log_impl(&dword_184457000, v23, OS_LOG_TYPE_ERROR, "Failed to set ICC matrix, error = 0x%X", buf, 8u);
            }
          }
        }
        ++v16;
      }
      while (v10 != v16);
      v8 = v19;
      v12 = v87;
LABEL_34:
      v8 += 16 * CA::ColorProgram::kOpcodeParamCount[v90];
      v25 = v12 >= 0x20;
      v12 = v89;
      if (!v25)
      {
        if ((v85 & 1) != 0)
          return;
        goto LABEL_113;
      }
    }
    if (((1 << v15) & 0x180FC) == 0)
    {
LABEL_30:
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v24 = x_log_category_color;
        if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v95 = 67109120;
          *(_DWORD *)&v95[4] = v12 & 0x1F;
          _os_log_impl(&dword_184457000, v24, OS_LOG_TYPE_ERROR, "Unexpected opcode %d for blending space", v95, 8u);
        }
      }
      goto LABEL_34;
    }
    bzero(v95, 0x648uLL);
    v26 = 0;
    v27 = CA::ColorProgram::kOpcodeParamCount[v12 & 0x1F];
    v28 = (float *)v8;
    do
    {
      v29 = 1;
      switch(v12 & 0x1F)
      {
        case 2u:
          goto LABEL_42;
        case 3u:
          v29 = 2;
          goto LABEL_42;
        case 4u:
          v29 = 3;
          goto LABEL_42;
        case 5u:
          v29 = 4;
          goto LABEL_42;
        case 6u:
          v29 = 5;
LABEL_42:
          *(_DWORD *)&v95[v26] = v29;
          switch(v27)
          {
            case 1:
              goto LABEL_49;
            case 2:
              goto LABEL_48;
            case 3:
              goto LABEL_47;
            case 4:
              goto LABEL_46;
            case 5:
              goto LABEL_45;
            case 6:
              goto LABEL_44;
            case 7:
              v101[v26 / 4] = *((_DWORD *)v28 + 24);
LABEL_44:
              *(float *)&v101[v26 / 4 - 1] = v28[20];
LABEL_45:
              *(float *)((char *)&v99 + v26) = v28[16];
LABEL_46:
              *(float *)((char *)&v98 + v26 + 4) = v28[12];
LABEL_47:
              *(float *)((char *)&v98 + v26) = v28[8];
LABEL_48:
              *(float *)((char *)&v97 + v26) = v28[4];
LABEL_49:
              *(float *)&v95[v26 + 8] = *v28;
              break;
            default:
              goto LABEL_50;
          }
          break;
        case 7u:
          v30 = *(_QWORD *)(v83 + 64);
          v31 = (int)(float)(*v28 * (float)*(unsigned int *)(v30 + 16));
          v32 = *(_QWORD *)(v30 + 160);
          v33 = (int)(float)(v28[4] * (float)*(int *)(v83 + 56));
          v34 = &v95[v26];
          *(_DWORD *)v34 = 8;
          *((_DWORD *)v34 + 2) = v31;
          *((_DWORD *)v34 + 3) = 1065353216;
          *((_QWORD *)v34 + 2) = *(_QWORD *)(v30 + 96) + v32 * v33;
          break;
        case 0xFu:
          *(_DWORD *)&v95[v26] = 7;
          break;
        case 0x10u:
          *(_DWORD *)&v95[v26] = 6;
          break;
        default:
          break;
      }
LABEL_50:
      v26 += 536;
      ++v28;
    }
    while (v26 != 1608);
    if (v84)
    {
      for (i = 0; i != 1608; i += 536)
        *(_DWORD *)&v95[i] = 6;
    }
    v86 = v8;
    v88 = v12;
    v36 = *(_DWORD *)v95;
    if (*(_DWORD *)v95 == v104)
    {
      v37 = 0;
      v38 = v96;
      v39 = v97;
      v40 = v98;
      v41 = v99;
      v42 = v100;
      v43 = *(float *)v101;
      v44 = v96;
      v81 = 4 * LODWORD(v96);
      v82 = v98;
      v45 = v105;
      v46 = 1;
      do
      {
        v47 = v37;
        switch(v36)
        {
          case 1:
            if (v38 != *(float *)&v95[536 * v46 + 8])
              goto LABEL_91;
            break;
          case 2:
            v48 = &v95[536 * v46];
            v50 = *((float *)v48 + 2);
            v49 = v48 + 8;
            if (v38 != v50 || v39 != *((float *)v49 + 1) || *(float *)&v40 != *((float *)v49 + 2))
              goto LABEL_91;
            break;
          case 3:
            v51 = &v95[536 * v46];
            v53 = *((float *)v51 + 2);
            v52 = (float *)(v51 + 8);
            if (v38 != v53 || v39 != v52[1] || *(float *)&v40 != v52[2] || *((float *)&v40 + 1) != v52[3])
              goto LABEL_91;
            break;
          case 4:
            v54 = &v95[536 * v46];
            v56 = *((float *)v54 + 2);
            v55 = (float *)(v54 + 8);
            if (v38 != v56
              || v39 != v55[1]
              || *(float *)&v40 != v55[2]
              || *((float *)&v40 + 1) != v55[3]
              || v41 != v55[4])
            {
              goto LABEL_91;
            }
            break;
          case 5:
            v57 = &v95[536 * v46];
            v59 = *((float *)v57 + 2);
            v58 = (float *)(v57 + 8);
            if (v38 != v59
              || v39 != v58[1]
              || *(float *)&v40 != v58[2]
              || *((float *)&v40 + 1) != v58[3]
              || v41 != v58[4]
              || v42 != v58[5]
              || v43 != v58[6])
            {
              goto LABEL_91;
            }
            break;
          case 8:
            v60 = &v95[536 * v46];
            v62 = *((_DWORD *)v60 + 2);
            v61 = v60 + 8;
            if (v62 != LODWORD(v44) || v39 != *((float *)v61 + 1) || !memcmp(v82, *((const void **)v61 + 1), v81))
              goto LABEL_91;
            break;
          default:
            break;
        }
        v37 = 1;
        v46 = 2;
      }
      while (!(v47 & 1 | (v36 != v45)));
    }
    else
    {
LABEL_91:
      v47 = 0;
    }
    for (j = 0; j != v91; ++j)
    {
      v64 = 0;
      if (v9)
        v65 = j;
      else
        v65 = v93;
      v66 = (unsigned int *)v95;
      do
      {
        if ((v47 & 1) != 0)
          v67 = 7;
        else
          v67 = 1 << v64;
        v68 = CA::IOMobileFramebuffer::swap_set_icc_curve(v11, a4, v14, v65, v67, v66);
        if (v68)
        {
          v69 = v68;
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v70 = x_log_category_color;
            if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109120;
              v107 = v69;
              _os_log_impl(&dword_184457000, v70, OS_LOG_TYPE_ERROR, "Failed to set ICC curve, error = 0x%X", buf, 8u);
            }
          }
        }
        v72 = v64++ > 1;
        v66 += 134;
      }
      while (((v72 | v47) & 1) == 0);
      v10 = v91;
      v9 = v92;
    }
    v8 = v86 + 16 * CA::ColorProgram::kOpcodeParamCount[v90];
    v13 = 1;
    v12 = v89;
    v5 = v93;
    if (v88 >= 0x20)
      continue;
    break;
  }
}

void ___ZN2CA12WindowServer12IOMFBDisplay21set_tonemapping_stateEPNS_6Render6UpdateEPKNS0_7SurfaceEjPP12CGColorSpace_block_invoke_2(uint64_t a1, uint64_t a2)
{
  iomfb_swap_set_tonemap_config(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 25536), a2, *(unsigned int *)(a1 + 40));
}

void ___ZN2CA12WindowServer12IOMFBDisplay21set_tonemapping_stateEPNS_6Render6UpdateEPKNS0_7SurfaceEjPP12CGColorSpace_block_invoke_3(_DWORD *a1, signed int a2, unsigned int *a3)
{
  unsigned int *v4;
  NSObject *v5;
  uint8_t buf[4];
  signed int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2 > 18)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v5 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v7 = a2;
        _os_log_impl(&dword_184457000, v5, OS_LOG_TYPE_ERROR, "unexpected ICC curve location %d", buf, 8u);
      }
    }
  }
  else
  {
    if (a3)
      v4 = a3;
    else
      v4 = (unsigned int *)&CA::WindowServer::IOMFBDisplay::set_tonemapping_state(CA::Render::Update *,CA::WindowServer::Surface const*,unsigned int,CGColorSpace **)::bypass_curve;
    CA::IOMobileFramebuffer::swap_set_icc_curve(a1[8] + 25536, a2, a1[10], a1[11], 7, v4);
  }
}

void ___ZN2CA12WindowServer12IOMFBDisplay21set_tonemapping_stateEPNS_6Render6UpdateEPKNS0_7SurfaceEjPP12CGColorSpace_block_invoke_51(uint64_t a1, signed int a2, float *a3)
{
  float *v4;
  NSObject *v5;
  uint8_t buf[4];
  signed int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2 > 8)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v5 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v7 = a2;
        _os_log_impl(&dword_184457000, v5, OS_LOG_TYPE_ERROR, "unexpected ICC matrix location %d", buf, 8u);
      }
    }
  }
  else
  {
    if (a3)
      v4 = a3;
    else
      v4 = (float *)&CA::WindowServer::IOMFBDisplay::set_tonemapping_state(CA::Render::Update *,CA::WindowServer::Surface const*,unsigned int,CGColorSpace **)::identity_matrix;
    CA::IOMobileFramebuffer::swap_set_icc_matrix(*(_QWORD *)(a1 + 32) + 25536, a2, *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44), v4);
  }
}

double ___ZN2CA12WindowServer12IOMFBDisplay21set_tonemapping_stateEPNS_6Render6UpdateEPKNS0_7SurfaceEjPP12CGColorSpace_block_invoke()
{
  double result;

  dword_1EDD14658 = 0;
  qword_1EDD14650 = 0;
  result = 0.0;
  CA::WindowServer::IOMFBDisplay::set_tonemapping_state(CA::Render::Update *,CA::WindowServer::Surface const*,unsigned int,CGColorSpace **)::identity_matrix = xmmword_18474DFE0;
  *(_OWORD *)algn_1EDD14630 = xmmword_18474DFE0;
  xmmword_1EDD14640 = xmmword_18474DFE0;
  return result;
}

void CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::IOMFBDisplay *this, CA::WindowServer::Display::ModeSet *a2, CA::WindowServer::Display::Mode *a3, const __CFArray *a4, const __CFArray *a5)
{
  NSObject *v10;
  int v11;
  int v12;
  CFIndex Count;
  CFIndex v14;
  NSObject *v15;
  int v16;
  char *v17;
  int AppBooleanValue;
  BOOL v19;
  char v20;
  int v21;
  BOOL v22;
  char v23;
  int v24;
  BOOL v25;
  char v26;
  int v27;
  BOOL v28;
  char v29;
  int v30;
  BOOL v31;
  char v32;
  CFTypeID v33;
  CFIndex v34;
  const __CFArray *v35;
  CFIndex i;
  CA::WindowServer *Dictionary;
  const __CFString *v38;
  CA::WindowServer *v39;
  const __CFDictionary *v40;
  const __CFString *v41;
  const __CFDictionary *v42;
  const __CFDictionary *v43;
  const void *Value;
  const void *v45;
  const __CFDictionary *v46;
  const __CFDictionary *v47;
  CFTypeID v48;
  const void *v49;
  const void *v50;
  CFIndex j;
  const __CFDictionary *v52;
  unsigned int Int;
  unsigned int v54;
  uint64_t *v55;
  uint64_t **v56;
  uint64_t **v57;
  unsigned int v58;
  _DWORD *v59;
  uint64_t *v60;
  CFIndex v61;
  CFIndex v62;
  _BYTE *v63;
  const __CFArray *v64;
  CA::WindowServer *v65;
  const __CFString *v66;
  CA::WindowServer *v67;
  const __CFDictionary *v68;
  const __CFString *v69;
  const __CFDictionary *v70;
  const __CFDictionary *v71;
  const void *v72;
  _BOOL4 v73;
  const void *v74;
  BOOL v75;
  const void *v77;
  const void *v78;
  BOOL v79;
  int v80;
  const void *v81;
  int v82;
  const void *v83;
  const void *v84;
  unsigned int v85;
  const void *v86;
  unsigned int v87;
  const void *v88;
  char v89;
  const __CFArray *Array;
  const __CFArray *v91;
  const __CFArray *v92;
  const __CFArray *v93;
  CFTypeID v94;
  CFIndex v95;
  CFIndex v96;
  CFIndex k;
  const void *ValueAtIndex;
  unsigned int v99;
  CFIndex v100;
  const __CFDictionary *v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  BOOL v107;
  BOOL v108;
  int v109;
  BOOL v111;
  CFIndex v112;
  int v113;
  int v114;
  BOOL v117;
  int v118;
  double v119;
  const __CFDictionary *v120;
  unsigned int v121;
  const __CFDictionary *v122;
  const __CFDictionary *v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  unsigned int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  BOOL v136;
  BOOL v137;
  BOOL v138;
  int v139;
  BOOL v140;
  BOOL v141;
  int v142;
  int v143;
  int v144;
  _BOOL4 v145;
  unsigned int v146;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  int v151;
  uint64_t *v152;
  uint64_t **v153;
  uint64_t *v154;
  uint64_t **v155;
  unsigned int v156;
  uint64_t **v157;
  _BOOL4 v158;
  CA::WindowServer::IOMFBDisplay *v159;
  uint64_t *v160;
  char v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  const void *v168;
  unsigned __int8 v169;
  const void *v170;
  unsigned __int8 v171;
  int v172;
  int v173;
  _QWORD *v174;
  unint64_t v175;
  unint64_t v176;
  BOOL v177;
  int v178;
  int v179;
  NSObject *v180;
  unint64_t v181;
  int v182;
  int v183;
  _QWORD *v184;
  signed int v185;
  int v186;
  BOOL v187;
  uint64_t v188;
  NSObject *v189;
  int v190;
  int v191;
  unsigned int v192;
  int v193;
  unint64_t v194;
  int v195;
  uint64_t v196;
  int v197;
  int v198;
  uint64_t *v199;
  char v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  int v204;
  int v205;
  uint64_t v206;
  const __CFArray *v207;
  float *v208;
  BOOL v209;
  CA::WindowServer::Display::Mode *v210;
  const __CFDictionary *v211;
  int v212;
  uint64_t v213;
  __int128 v214;
  int v215;
  CFIndex v216;
  const __CFArray *v217;
  _BOOL4 v218;
  CA::WindowServer::IOMFBDisplay *v219;
  unsigned int v220;
  CA::WindowServer::Display::ModeSet *v221;
  _BOOL4 Bool;
  unint64_t v223;
  char v224;
  uint64_t v225;
  CFTypeRef cf;
  int v227;
  unsigned int v228;
  CFIndex v229;
  char v230;
  const __CFArray *v231;
  char *v232;
  unint64_t v233;
  uint64_t **v234;
  uint64_t *v235;
  uint64_t v236;
  uint8_t v237[16];
  _OWORD v238[2];
  uint64_t v239;
  uint8_t buf[8];
  __int16 v241;
  _BYTE v242[24];
  uint64_t v243;

  v243 = *MEMORY[0x1E0C80C00];
  v232 = (char *)this + 28052;
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v10 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *((_DWORD *)this + 6);
      v12 = v232[30];
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)&buf[4] = v11;
      v241 = 1024;
      *(_DWORD *)v242 = v12;
      *(_WORD *)&v242[4] = 2048;
      *(_QWORD *)&v242[6] = a4;
      *(_WORD *)&v242[14] = 2048;
      *(_QWORD *)&v242[16] = a5;
      _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_DEFAULT, "Display %u hotplug-state %d updating digital modes: color %p; timing %p\n",
        buf,
        0x22u);
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear((_QWORD *)this + 3300);
  if (a4 && a5 && v232[30])
  {
    Count = CFArrayGetCount(a5);
    v14 = CFArrayGetCount(a4);
    v217 = a5;
    v216 = Count;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v15 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *((_DWORD *)this + 6);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v16;
        v241 = 2048;
        *(_QWORD *)v242 = Count;
        *(_WORD *)&v242[8] = 2048;
        *(_QWORD *)&v242[10] = v14;
        _os_log_impl(&dword_184457000, v15, OS_LOG_TYPE_DEFAULT, "Display %u %zu timing modes, %zu color modes\n", buf, 0x1Cu);
      }
    }
    *(_QWORD *)a3 = 0;
    if ((CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::initialized & 1) == 0)
    {
      v17 = getenv("CA_DISPLAY_OVERSCANNED");
      if (v17)
      {
        CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::value = atoi(v17) != 0;
        CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::override = 1;
      }
      buf[0] = 0;
      AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("FilterYUVDisplayModes"), CFSTR("com.apple.coreanimation"), buf);
      if (buf[0])
        v19 = AppBooleanValue == 0;
      else
        v19 = 1;
      v20 = !v19;
      CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_yuv = v20;
      v21 = CFPreferencesGetAppBooleanValue(CFSTR("FilterDisplayModes"), CFSTR("com.apple.coreanimation"), buf);
      if (buf[0])
        v22 = v21 == 0;
      else
        v22 = 1;
      v23 = !v22;
      CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_timing = v23;
      CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_resolution = v23;
      v24 = CFPreferencesGetAppBooleanValue(CFSTR("Filter420DisplayModes"), CFSTR("com.apple.coreanimation"), buf);
      if (buf[0])
        v25 = v24 == 0;
      else
        v25 = 1;
      v26 = !v25;
      CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_420 = v26;
      v27 = CFPreferencesGetAppBooleanValue(CFSTR("FilterHighBitDepthDisplayModes"), CFSTR("com.apple.coreanimation"), buf);
      if (buf[0])
        v28 = v27 == 0;
      else
        v28 = 0;
      v29 = !v28;
      CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_high_bit_depths = v29;
      v30 = CFPreferencesGetAppBooleanValue(CFSTR("IgnoreUnsafeDisplayModes"), CFSTR("com.apple.coreanimation"), buf);
      if (buf[0])
        v31 = v30 == 0;
      else
        v31 = 1;
      v32 = !v31;
      CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::ignore_unsafe = v32;
      CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::initialized = 1;
    }
    if (CADeviceSupportsAPT::once != -1)
      dispatch_once(&CADeviceSupportsAPT::once, &__block_literal_global_37);
    v221 = a2;
    v208 = (float *)((char *)this + 26400);
    if (CADeviceSupportsAPT::supports_apt)
      v209 = (*((_WORD *)this + 328) & 0x1C00) == 0;
    else
      v209 = 0;
    v210 = a3;
    cf = (CFTypeRef)IOMobileFramebufferCopyProperty();
    if (cf)
    {
      v33 = CFGetTypeID(cf);
      if (v33 == CFArrayGetTypeID())
      {
        v34 = CFArrayGetCount((CFArrayRef)cf);
        v35 = (const __CFArray *)cf;
        if (v34)
        {
          for (i = 0; i != v34; ++i)
          {
            Dictionary = (CA::WindowServer *)CA_CFArrayGetDictionary(v35, i);
            if (Dictionary)
            {
              v39 = Dictionary;
              v40 = (const __CFDictionary *)CA::WindowServer::dictionary_dict(Dictionary, (const __CFDictionary *)CFSTR("HorizontalAttributes"), v38);
              v42 = (const __CFDictionary *)CA::WindowServer::dictionary_dict(v39, (const __CFDictionary *)CFSTR("VerticalAttributes"), v41);
              if (v40)
              {
                v43 = v42;
                if (v42)
                {
                  Value = CFDictionaryGetValue(v40, CFSTR("Active"));
                  if (Value)
                    CA_CFIntValue(Value);
                  v45 = CFDictionaryGetValue(v43, CFSTR("Active"));
                  if (v45)
                    CA_CFIntValue(v45);
                }
              }
            }
            v35 = (const __CFArray *)cf;
          }
        }
      }
    }
    v46 = (const __CFDictionary *)IOMobileFramebufferCopyProperty();
    v47 = v46;
    if (v46)
    {
      v48 = CFGetTypeID(v46);
      if (v48 == CFDictionaryGetTypeID())
      {
        v49 = CFDictionaryGetValue(v47, CFSTR("NativeFormatHorizontalPixels"));
        if (v49)
          CA_CFIntValue(v49);
        v50 = CFDictionaryGetValue(v47, CFSTR("NativeFormatVerticalPixels"));
        if (v50)
          CA_CFIntValue(v50);
      }
    }
    v211 = v47;
    v235 = 0;
    v236 = 0;
    v234 = &v235;
    if (v14)
    {
      for (j = 0; j != v14; ++j)
      {
        v52 = (const __CFDictionary *)CA_CFArrayGetDictionary(a4, j);
        Int = CA_CFDictionaryGetInt(v52, CFSTR("ID"));
        v54 = Int;
        v55 = v235;
        v56 = &v235;
        v57 = &v235;
        if (v235)
        {
          while (1)
          {
            while (1)
            {
              v57 = (uint64_t **)v55;
              v58 = *((_DWORD *)v55 + 7);
              if (Int >= v58)
                break;
              v55 = *v57;
              v56 = v57;
              if (!*v57)
                goto LABEL_79;
            }
            if (v58 >= Int)
              break;
            v55 = v57[1];
            if (!v55)
            {
              v56 = v57 + 1;
              goto LABEL_79;
            }
          }
        }
        else
        {
LABEL_79:
          v59 = operator new(0x20uLL);
          v59[7] = v54;
          *(_QWORD *)v59 = 0;
          *((_QWORD *)v59 + 1) = 0;
          *((_QWORD *)v59 + 2) = v57;
          *v56 = (uint64_t *)v59;
          if (*v234)
          {
            v234 = (uint64_t **)*v234;
            v60 = *v56;
          }
          else
          {
            v60 = (uint64_t *)v59;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v235, v60);
          ++v236;
        }
      }
    }
    v219 = this;
    v61 = v216;
    if (v216)
    {
      v207 = a4;
      v62 = 0;
      DWORD1(v214) = 0;
      *((_QWORD *)&v214 + 1) = 0;
      v215 = 0;
      v213 = 0;
      v206 = 0;
      v63 = v232;
      v64 = v217;
      while (1)
      {
        v65 = (CA::WindowServer *)CA_CFArrayGetDictionary(v64, v62);
        if (!v65)
          goto LABEL_463;
        v67 = v65;
        v68 = (const __CFDictionary *)CA::WindowServer::dictionary_dict(v65, (const __CFDictionary *)CFSTR("HorizontalAttributes"), v66);
        v70 = (const __CFDictionary *)CA::WindowServer::dictionary_dict(v67, (const __CFDictionary *)CFSTR("VerticalAttributes"), v69);
        if (!v68)
          goto LABEL_463;
        v71 = v70;
        if (!v70)
          goto LABEL_463;
        v72 = CFDictionaryGetValue(v67, CFSTR("IsVirtual"));
        if (v72)
          v73 = CA_CFBoolValue(v72);
        else
          v73 = 0;
        v74 = CFDictionaryGetValue(v67, CFSTR("Score"));
        if (v74)
          LODWORD(v74) = CA_CFIntValue(v74);
        v220 = v74;
        v75 = *v63 && (_DWORD)v74 == 0;
        if (v75 && !v73)
          goto LABEL_463;
        v77 = CFDictionaryGetValue(v71, CFSTR("PreciseSyncRate"));
        if (!v77 || (LODWORD(v78) = CA_CFIntValue(v77), !(_DWORD)v78))
        {
          v78 = CFDictionaryGetValue(v71, CFSTR("SyncRate"));
          if (v78)
            LODWORD(v78) = CA_CFIntValue(v78);
        }
        v218 = v73;
        v79 = !*v63 && (*((_WORD *)v219 + 328) & 0x1C00) != 4096;
        v80 = v79 && (int)v78 < 121 ? (_DWORD)v78 << 16 : (int)v78;
        if ((v80 - 3211264) > 0xC0000
          && CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_timing)
        {
          goto LABEL_463;
        }
        v81 = CFDictionaryGetValue(v71, CFSTR("PixelRepetition"));
        if (v81)
          v82 = CA_CFIntValue(v81);
        else
          v82 = 0;
        v83 = CFDictionaryGetValue(v68, CFSTR("PixelRepetition"));
        if (v83)
          LODWORD(v83) = CA_CFIntValue(v83);
        if (!*v63 || !(v82 | v83))
        {
          v84 = CFDictionaryGetValue(v68, CFSTR("Active"));
          v85 = v84 ? CA_CFIntValue(v84) : 0;
          v86 = CFDictionaryGetValue(v71, CFSTR("Active"));
          v87 = v86 ? CA_CFIntValue(v86) : 0;
          if (!*v63
            || v85 < 0xF01
            || v87 < 0x870
            || !CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_resolution)
          {
            v88 = CFDictionaryGetValue(v67, CFSTR("IsOverscanned"));
            if (v88)
              LOBYTE(v88) = CA_CFBoolValue(v88);
            v89 = CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::override
                ? CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::value != 0
                : (char)v88;
            Array = (const __CFArray *)CA_CFDictionaryGetArray(v67, CFSTR("ColorModes"));
            if (Array)
            {
              v91 = Array;
              if (CFArrayGetCount(Array))
                break;
            }
            v91 = v207;
            if ((*((_WORD *)v219 + 328) & 0x1C00) != 0x400)
              break;
          }
        }
        v64 = v217;
LABEL_463:
        if (++v62 == v61)
          goto LABEL_466;
      }
      v200 = v89;
      *((_DWORD *)v221 + 22) = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)v219 + 2264))(v219);
      v92 = (const __CFArray *)CA_CFDictionaryGetArray(v67, CFSTR("UnsafeColorElementIDs"));
      v239 = 1065353216;
      memset(v238, 0, sizeof(v238));
      if (!CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::ignore_unsafe)
      {
        v93 = v92;
        if (v92)
        {
          v94 = CFGetTypeID(v92);
          if (v94 == CFArrayGetTypeID())
          {
            v95 = CFArrayGetCount(v93);
            if (v95)
            {
              v96 = v95;
              for (k = 0; k != v96; ++k)
              {
                ValueAtIndex = CFArrayGetValueAtIndex(v93, k);
                v99 = CA_CFIntValue(ValueAtIndex);
                std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v238, v99, v99);
              }
            }
          }
        }
      }
      v229 = CFArrayGetCount(v91);
      if (!v229)
      {
LABEL_462:
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v238);
        v64 = v217;
        v61 = v216;
        goto LABEL_463;
      }
      v100 = 0;
      v225 = 0;
      v230 = 0;
      v224 = 0;
      v231 = v91;
      do
      {
        v101 = (const __CFDictionary *)CA_CFArrayGetDictionary(v91, v100);
        v102 = CA_CFDictionaryGetInt(v101, CFSTR("PixelEncoding"));
        v103 = CA_CFDictionaryGetInt(v101, CFSTR("Colorimetry"));
        if (v102 == 3)
        {
          v104 = *((_QWORD *)v221 + 1);
          if (*(_QWORD *)v221 == v104)
          {
            v106 = 0;
          }
          else
          {
            v105 = *(_QWORD *)v221 + 8;
            do
            {
              v106 = ((*(_QWORD *)(v105 - 8) >> 29) & 0x1FFFFFF) == v80;
              v107 = ((*(_QWORD *)(v105 - 8) >> 29) & 0x1FFFFFF) == v80 || v105 == v104;
              v105 += 8;
            }
            while (!v107);
          }
          v224 |= v106;
        }
        v108 = v103 == 1;
        if (v63[33] && v103 == 16 && !v102)
        {
          v109 = CA_CFDictionaryGetInt(v101, CFSTR("EOTF"));
          v111 = (int)CA_CFDictionaryGetInt(v101, CFSTR("Depth")) > 9 && v109 == 2;
          BYTE4(v225) |= !v111;
          LOBYTE(v225) = v111 | v225;
        }
        v230 |= v108;
        ++v100;
        v91 = v231;
      }
      while (v100 != v229);
      v112 = 0;
      if ((v225 & 0x100000000) != 0)
        v113 = 0;
      else
        v113 = 8;
      v195 = v113;
      if ((v225 & 0x100000000) != 0)
        v114 = 0;
      else
        v114 = 4;
      v193 = v114;
      v117 = v85 == 3840 || v85 == 1920 || v87 == 2160 || v87 == 1080;
      v202 = v85 & 0x3FFF | ((v87 & 0x3FFF) << 14);
      v118 = !v117;
      v212 = v118;
      v119 = fabs((float)((float)v80 * -0.00000012716) + 1.0);
      v201 = (unint64_t)(v80 & 0x1FFFFFF) << 29;
      while (1)
      {
        v120 = (const __CFDictionary *)CA_CFArrayGetDictionary(v91, v112);
        v121 = CA_CFDictionaryGetInt(v120, CFSTR("ID"));
        v122 = (const __CFDictionary *)CA_CFDictionaryGetDictionary(v120, CFSTR("DownstreamFormat"));
        if (v122)
          v123 = v122;
        else
          v123 = v120;
        Bool = CA_CFDictionaryGetBool(v123, CFSTR("IsVirtual"));
        v124 = CA_CFDictionaryGetInt(v123, CFSTR("PixelEncoding"));
        v125 = CA_CFDictionaryGetInt(v123, CFSTR("Depth"));
        v227 = CA_CFDictionaryGetInt(v123, CFSTR("Colorimetry"));
        v126 = CA_CFDictionaryGetInt(v123, CFSTR("EOTF"));
        v127 = CA_CFDictionaryGetInt(v123, CFSTR("DynamicRange"));
        v128 = v127;
        v129 = 128;
        v130 = 27;
        switch(v124)
        {
          case 0:
            if (*((_BYTE *)v219 + 636) == 1)
            {
              v91 = v231;
              v131 = v227;
              if (CADeviceIsVirtualized::once[0] != -1)
              {
                dispatch_once(CADeviceIsVirtualized::once, &__block_literal_global_204);
                v131 = v227;
              }
              v129 = 0;
              v130 = 1;
              if (CADeviceIsVirtualized::is_virtualized && v125 >= 10 && v126 == 2 && !v128)
              {
                v130 = 22;
                goto LABEL_323;
              }
            }
            else
            {
              v91 = v231;
              v131 = v227;
              if (v125 >= 10
                && v126 == 2
                && !v127
                && v232[33]
                && CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_high_bit_depths)
              {
                if ((v225 & 1) != 0)
                {
                  if (v227 != 16)
                    goto LABEL_460;
                  v130 = 24;
                }
                else
                {
                  v130 = 22;
                }
LABEL_322:
                v129 = 32;
LABEL_323:
                if (v212 && !v232[33])
                {
                  v91 = v231;
                  if (CADeviceIsVirtualized::once[0] != -1)
                  {
                    v191 = v129;
                    v192 = v130;
                    dispatch_once(CADeviceIsVirtualized::once, &__block_literal_global_204);
                    v130 = v192;
                    v131 = v227;
                    v129 = v191;
                  }
                  if (!CADeviceIsVirtualized::is_virtualized)
                    goto LABEL_460;
                }
                else
                {
                  v91 = v231;
                }
                goto LABEL_326;
              }
              v136 = v125 == 12 || v125 == 10;
              if (v136 && !v127)
              {
                if (!v232[33]
                  || CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_high_bit_depths)
                {
                  goto LABEL_460;
                }
                if (((v126 == 2) & v225) != 0)
                {
                  if (v227 != 16)
                    goto LABEL_460;
                  goto LABEL_391;
                }
                if (((v126 != 2) & BYTE4(v225)) == 1 && v227 != 16)
                  goto LABEL_460;
                if (((v126 != 2) & BYTE4(v225)) != 0)
                {
LABEL_391:
                  v177 = v126 == 2;
                  if (v125 == 10)
                  {
                    v178 = 14;
                    v179 = 24;
                  }
                  else
                  {
                    v178 = 15;
                    v179 = 25;
                  }
                }
                else
                {
                  v177 = v126 == 2;
                  if (v125 == 10)
                  {
                    v178 = 2;
                    v179 = 22;
                  }
                  else
                  {
                    v178 = 3;
                    v179 = 23;
                  }
                }
                if (v177)
                  v130 = v179;
                else
                  v130 = v178;
                if (v126 == 2)
                  v129 = 32;
                else
                  v129 = 16;
                goto LABEL_455;
              }
              if (v125 > 8)
                goto LABEL_460;
              if ((v225 & 0x100000000) != 0)
              {
                if (v227 != 16)
                  goto LABEL_460;
                v129 = 8;
                v130 = 13;
              }
              else
              {
                v129 = 0;
                v130 = 1;
              }
            }
            goto LABEL_458;
          case 1:
            if (CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_yuv | CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_420)
              goto LABEL_239;
            if (v227 == 7
              && v125 >= 10
              && v126 == 2
              && v127 == 1
              && CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_high_bit_depths)
            {
              v132 = CA_CFDictionaryGetInt(v120, CFSTR("Depth"));
              v133 = CA_CFDictionaryGetInt(v120, CFSTR("Colorimetry"));
              v134 = CA_CFDictionaryGetInt(v120, CFSTR("EOTF"));
              v135 = CA_CFDictionaryGetInt(v120, CFSTR("DynamicRange"));
              if (v132 < 10)
                goto LABEL_239;
              v91 = v231;
              if (v133 == 7 && v134 == 2 && v135 == 1)
              {
                v129 = 0;
                v130 = 20;
                v131 = 7;
                goto LABEL_323;
              }
LABEL_460:
              v63 = v232;
              goto LABEL_461;
            }
            v141 = v125 == 12 || v125 == 10;
            if (!v141
              || v127 != 1
              || CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_high_bit_depths)
            {
              v91 = v231;
              if (v227 != 1 || v125 != 8 || v126 || v127 != 1)
                goto LABEL_460;
              v129 = 0;
              v130 = 4;
LABEL_327:
              v129 += 2;
              v145 = v218;
              goto LABEL_342;
            }
            v204 = CA_CFDictionaryGetInt(v120, CFSTR("Depth"));
            v142 = CA_CFDictionaryGetInt(v120, CFSTR("Colorimetry"));
            v143 = CA_CFDictionaryGetInt(v120, CFSTR("EOTF"));
            v144 = CA_CFDictionaryGetInt(v120, CFSTR("DynamicRange"));
            if (v204 != v125)
              goto LABEL_239;
            v131 = v227;
            if (v142 != v227 || v143 != v126)
              goto LABEL_239;
            v91 = v231;
            if (v144 != 1)
              goto LABEL_460;
            if (v227 == 7 && v126 == 2)
            {
              v129 = 0;
              if (v125 == 10)
                v130 = 20;
              else
                v130 = 21;
              goto LABEL_323;
            }
            if (v125 == 10)
              v130 = 5;
            else
              v130 = 6;
            if (v126 || v227 != 1)
              goto LABEL_460;
            v129 = 0;
LABEL_455:
            v190 = 1 << v130;
            if (((1 << v130) & 0xFB6C) != 0)
              goto LABEL_458;
            if ((v190 & 0x3FF0000) != 0)
            {
LABEL_228:
              v131 = v227;
              if (v126 == 2)
                goto LABEL_323;
LABEL_239:
              v91 = v231;
              v63 = v232;
              goto LABEL_461;
            }
            if ((v190 & 0x490) != 0)
            {
LABEL_458:
              if (*((_BYTE *)v219 + 636) != 1 && v126)
                goto LABEL_460;
            }
LABEL_326:
            switch(v131)
            {
              case 0:
                v145 = v218;
                if ((v230 & 1) != 0)
                  goto LABEL_460;
                goto LABEL_342;
              case 1:
              case 10:
              case 16:
                goto LABEL_327;
              case 7:
                v145 = v218;
                if (v130 > 0x1C || ((1 << v130) & 0x101D0000) == 0)
                  goto LABEL_460;
                goto LABEL_342;
              case 8:
              case 14:
                v146 = v130 - 28;
                break;
              case 9:
                v146 = v130 - 24;
                break;
              default:
                v145 = v218;
                if (!*v232)
                  goto LABEL_342;
                goto LABEL_460;
            }
            v145 = v218;
            if (v146 < 0xFFFFFFFE)
              goto LABEL_460;
LABEL_342:
            v228 = v130;
            v147 = v129;
            v148 = CA_CFDictionaryGetInt(v123, CFSTR("DynamicRange"));
            if (v148)
            {
              if (v148 == 1)
              {
                v149 = v147 + 1;
                v150 = 0x2000000000000000;
                v151 = 1;
              }
              else
              {
                if (*v232)
                  goto LABEL_460;
                v149 = v147;
                v151 = 0;
                v150 = 0x1000000000000000;
              }
            }
            else
            {
              v151 = 0;
              v150 = 0x1000000000000000;
              v149 = v147;
            }
            v152 = v235;
            if (!v235)
              goto LABEL_460;
            v153 = &v235;
            do
            {
              v154 = v152;
              v155 = v153;
              v156 = *((_DWORD *)v152 + 7);
              v157 = (uint64_t **)(v152 + 1);
              if (v156 >= v121)
              {
                v157 = (uint64_t **)v154;
                v153 = (uint64_t **)v154;
              }
              v152 = *v157;
            }
            while (v152);
            if (v153 == &v235)
              goto LABEL_460;
            if (v156 < v121)
              v154 = (uint64_t *)v155;
            if (v121 < *((_DWORD *)v154 + 7))
              goto LABEL_460;
            v197 = v151;
            v198 = v149;
            if (*v232)
            {
              v158 = 0;
              v159 = v219;
            }
            else
            {
              v159 = v219;
              v158 = (*((_WORD *)v219 + 328) & 0x1C00) != 4096;
            }
            v160 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v238, v121);
            v199 = v160;
            v161 = v209 & ~(v145 || Bool);
            if (v119 >= 0.001)
              v161 = 0;
            v162 = 0x10000000;
            if (!v158)
              v162 = 0;
            v163 = v162 | v202 | v201;
            v205 = v145 || Bool;
            v164 = 0x40000000000000;
            if (!v145 && !Bool)
              v164 = 0;
            v19 = (v161 & 1) == 0;
            v165 = 0x8000000000000000;
            if (v19)
              v165 = 0;
            v203 = v163;
            v166 = v164 & 0xF07FFFFFFFFFFFFFLL | ((unint64_t)(v228 & 0x1F) << 55) | v163;
            v196 = v160 != 0;
            v167 = v150 & 0xBFFFFFFFFFFFFFFFLL | (v196 << 62);
            v223 = v167 | v166 | v165;
            v233 = v223;
            if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)v159 + 2264))(v159))
            {
              v168 = CFDictionaryGetValue(v67, CFSTR("HorizontalPipeCount"));
              if (v168)
                v169 = CA_CFIntValue(v168);
              else
                v169 = 0;
              v170 = CFDictionaryGetValue(v67, CFSTR("VerticalPipeCount"));
              v194 = v166;
              if (v170)
                v171 = CA_CFIntValue(v170);
              else
                v171 = 0;
              v172 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, _QWORD))(*(_QWORD *)v219 + 2248))(v219, v169);
              v173 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, _QWORD))(*(_QWORD *)v219 + 2256))(v219, v171);
              *(_QWORD *)buf = v223;
              v174 = std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v221 + 48, v223, buf);
              *((_DWORD *)v174 + 6) = v172;
              *((_DWORD *)v174 + 7) = v173;
              *((_BYTE *)v174 + 32) = v169;
              *((_BYTE *)v174 + 33) = v171;
              *((_WORD *)v174 + 17) = 0;
              v91 = v231;
              v166 = v194;
            }
            v175 = v167 | ((unint64_t)(v228 & 0x1F) << 55) | v203;
            if (v205)
            {
              if (CA::WindowServer::Display::ModeSet::contains_mode(*(CA::WindowServer::Display::ModeSet **)v221, *((const CA::WindowServer::Display::Mode **)v221 + 1), v175))
              {
                goto LABEL_460;
              }
            }
            else
            {
              *(_QWORD *)buf = v175 | 0x40000000000000;
              CA::WindowServer::Display::ModeSet::remove_mode((uint64_t)v221, (const CA::WindowServer::Display::Mode *)buf);
            }
            if (v199)
            {
              *(_QWORD *)buf = v166 | v150;
              if (CA::WindowServer::Display::ModeSet::contains_mode(*(CA::WindowServer::Display::ModeSet **)v221, *((const CA::WindowServer::Display::Mode **)v221 + 1), v166 | v150))
              {
                v176 = v166;
                if (x_log_hook_p())
                {
                  x_log_();
                }
                else
                {
                  v180 = x_log_category_windowserver;
                  if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)v237 = 0;
                    _os_log_impl(&dword_184457000, v180, OS_LOG_TYPE_ERROR, "Mode set already contains low-bandwidth version of same mode", v237, 2u);
                  }
                }
                CA::WindowServer::Display::ModeSet::remove_mode((uint64_t)v221, (const CA::WindowServer::Display::Mode *)buf);
                v166 = v176;
              }
            }
            else if (CA::WindowServer::Display::ModeSet::contains_mode(*(CA::WindowServer::Display::ModeSet **)v221, *((const CA::WindowServer::Display::Mode **)v221 + 1), v150 | v166 | 0x4000000000000000))
            {
              if (!x_log_hook_p())
              {
                v189 = x_log_category_windowserver;
                v63 = v232;
                if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_184457000, v189, OS_LOG_TYPE_ERROR, "Mode set already contains high-bandwidth version of same mode", buf, 2u);
                }
                goto LABEL_461;
              }
              x_log_();
              goto LABEL_460;
            }
            (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)v219 + 1360))(buf);
            if (*(_DWORD *)&v242[18] == 1552 && v228 <= 0x19 && ((1 << v228) & 0x3C0E00E) != 0)
            {
              v181 = v166 | (v196 << 62);
              if (v197)
              {
                if (CA::WindowServer::Display::ModeSet::contains_mode(*(CA::WindowServer::Display::ModeSet **)v221, *((const CA::WindowServer::Display::Mode **)v221 + 1), v181 | 0x1000000000000000))
                {
                  goto LABEL_460;
                }
              }
              else
              {
                *(_QWORD *)buf = v181 | 0x2000000000000000;
                if (CA::WindowServer::Display::ModeSet::contains_mode(*(CA::WindowServer::Display::ModeSet **)v221, *((const CA::WindowServer::Display::Mode **)v221 + 1), v181 | 0x2000000000000000))
                {
                  CA::WindowServer::Display::ModeSet::remove_mode((uint64_t)v221, (const CA::WindowServer::Display::Mode *)buf);
                }
              }
            }
            if (CA::WindowServer::Display::ModeSet::contains_mode(*(CA::WindowServer::Display::ModeSet **)v221, *((const CA::WindowServer::Display::Mode **)v221 + 1), v223))
            {
              if (*((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>(v208, v223, (uint64_t *)&v233)+ 8) >= v220)goto LABEL_460;
            }
            else
            {
              if (CADeviceSupportsHDRProcessing::once[0] != -1)
                dispatch_once(CADeviceSupportsHDRProcessing::once, &__block_literal_global_122);
              if (!CADeviceSupportsHDRProcessing::supports_hdr
                && CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::Display::Mode *)&v233))
              {
                goto LABEL_460;
              }
              CA::WindowServer::Display::ModeSet::add_mode(v221, (const CA::WindowServer::Display::Mode *)&v233);
            }
            v182 = CA_CFDictionaryGetInt(v67, CFSTR("ID"));
            v183 = CA_CFDictionaryGetInt(v67, CFSTR("preferredUIScale"));
            v184 = std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>(v208, v223, (uint64_t *)&v233);
            *((_DWORD *)v184 + 6) = v121;
            *((_DWORD *)v184 + 7) = v182;
            *((_DWORD *)v184 + 8) = v220;
            *((_DWORD *)v184 + 9) = v183;
            *((_BYTE *)v184 + 40) = v200;
            *(_WORD *)((char *)v184 + 41) = 0;
            *((_BYTE *)v184 + 43) = 0;
            if (v198 + v220 <= HIDWORD(v206))
            {
              v63 = v232;
              if ((v205 & 1) == 0)
                goto LABEL_428;
            }
            else
            {
              v63 = v232;
              if ((v205 & 1) == 0)
              {
                *(_QWORD *)v210 = v223;
                HIDWORD(v206) = v198 + v220;
LABEL_428:
                v185 = (v203 >> 14) & 0x3FFF;
                if ((unsigned __int16)(v203 & 0x3FFF) > v215)
                {
                  v186 = v215;
                  v187 = v185 <= (int)v213;
                  if (v185 <= (int)v213)
                    v188 = v213;
                  else
                    v188 = v185;
                  v213 = v188;
                  if (!v187)
                    v186 = v203 & 0x3FFF;
                  v215 = v186;
                }
                if (CA::WindowServer::IOMFBDisplay::compare_native_modes((float *)v219, v223, v214 >> 32, v206))
                {
                  LODWORD(v206) = ((double)((v223 >> 29) & 0x1FFFFFF) * 0.0000152587891 + 0.5);
                  *((_QWORD *)&v214 + 1) = (v203 >> 14) & 0x3FFF;
                  DWORD1(v214) = v203 & 0x3FFF;
                }
              }
            }
LABEL_461:
            if (++v112 == v229)
              goto LABEL_462;
            break;
          case 2:
            if (CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_yuv)
              goto LABEL_239;
            v131 = v227;
            if (v227 == 7
              && v125 >= 10
              && v126 == 2
              && v127 == 1
              && v232[33]
              && CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_high_bit_depths)
            {
              v130 = 19;
              goto LABEL_322;
            }
            v137 = v125 == 12 || v125 == 10;
            if (v137 && v127 == 1)
            {
              v91 = v231;
              if (v232[33]
                && !CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_high_bit_depths
                && (v126 & 0xFFFFFFFD) == 0)
              {
                if (v227 == 7 && v126 == 2)
                {
                  v138 = v125 == 10;
                  v139 = 18;
                  goto LABEL_288;
                }
                if (!v126 && (v224 & 1) == 0)
                {
                  if (v125 == 10)
                    v130 = 8;
                  else
                    v130 = 9;
                  v129 = v193;
                  goto LABEL_326;
                }
              }
            }
            else
            {
              v91 = v231;
              if (v125 <= 8 && (v224 & 1) == 0)
              {
                v130 = 7;
                v129 = v193;
                goto LABEL_458;
              }
            }
            goto LABEL_460;
          case 3:
            if (CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_yuv)
              goto LABEL_239;
            v131 = v227;
            if (v227 == 7
              && v125 >= 10
              && v126 == 2
              && v127 == 1
              && v232[33]
              && CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_high_bit_depths)
            {
              v130 = 16;
              goto LABEL_322;
            }
            v140 = v125 == 12 || v125 == 10;
            if (!v140 || v127 != 1)
            {
              v91 = v231;
              if (v125 >= 9)
                goto LABEL_460;
              v130 = 10;
              v129 = v195;
              goto LABEL_458;
            }
            v91 = v231;
            if (!v232[33]
              || CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_high_bit_depths
              || (v126 & 0xFFFFFFFD) != 0)
            {
              goto LABEL_460;
            }
            if (v227 == 7 && v126 == 2)
            {
              v138 = v125 == 10;
              v139 = 16;
LABEL_288:
              if (v138)
                v130 = v139;
              else
                v130 = v139 + 1;
              goto LABEL_322;
            }
            if (v126)
              goto LABEL_460;
            if (v125 == 10)
              v130 = 11;
            else
              v130 = 12;
            v129 = v195;
            goto LABEL_326;
          case 4:
            v130 = 26;
            goto LABEL_228;
          case 5:
            goto LABEL_228;
          case 6:
            if (CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_yuv)
              goto LABEL_239;
            v131 = v227;
            v91 = v231;
            if (v227 != 7 || v125 < 10 || v126 != 2 || v127 != 1)
              goto LABEL_460;
            v130 = 19;
            v129 = 16;
            goto LABEL_323;
          case 9:
            if (CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_yuv)
              goto LABEL_239;
            v131 = v227;
            v91 = v231;
            if (v227 != 7 || v125 < 10 || v126 != 2 || v127 != 1)
              goto LABEL_460;
            v130 = 28;
            v129 = 64;
            goto LABEL_323;
          default:
            if (*v232)
              goto LABEL_239;
            v130 = 0;
            v129 = 0;
            v91 = v231;
            v131 = v227;
            goto LABEL_326;
        }
      }
    }
    v213 = 0;
    v215 = 0;
    *((_QWORD *)&v214 + 1) = 0;
    DWORD1(v214) = 0;
    v63 = v232;
LABEL_466:
    *((_QWORD *)v219 + 9) = v215 | (unint64_t)(v213 << 32);
    *((_QWORD *)v219 + 10) = v214 >> 32;
    if (v63[33])
      *(_QWORD *)v210 = CA::WindowServer::Display::ModeSet::preferred_mode_with_criteria((unint64_t **)v221, 0, *((unsigned __int16 *)v219 + 328) >> 13, 0, (unsigned int *)v219 + 6571, 0.0, 0.0, 0.0);
    CA::WindowServer::Display::ModeSet::sort(v221);
    std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(v235);
    if (v211)
      CFRelease(v211);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    CA::WindowServer::IOMFBDisplay::release_everything(this);
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::fetch_current_iomfb_mode(CA::WindowServer::IOMFBDisplay *this)
{
  int DigitalOutMode;
  int v3;
  uint64_t *v4;
  NSObject *v6;
  int v7;
  uint64_t *v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  DigitalOutMode = IOMobileFramebufferGetDigitalOutMode();
  if (DigitalOutMode)
  {
    v3 = DigitalOutMode;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v6 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *((_DWORD *)this + 6);
        *(_DWORD *)buf = 67109376;
        v10 = v7;
        v11 = 1024;
        v12 = v3;
        _os_log_impl(&dword_184457000, v6, OS_LOG_TYPE_DEFAULT, "Display %d error 0x%x fetching current digital mode", buf, 0xEu);
      }
    }
    return 0;
  }
  v4 = (uint64_t *)((char *)this + 27064);
  if (!*((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6600, *((_QWORD *)this + 3383), (uint64_t *)this + 3383)+ 6)&& !*((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6600, *v4, (uint64_t *)this + 3383)+ 7))
  {
    return *v4;
  }
  v8 = (uint64_t *)*((_QWORD *)this + 3302);
  if (!v8)
    return 0;
  while (*((_DWORD *)v8 + 6) || *((_DWORD *)v8 + 7))
  {
    v8 = (uint64_t *)*v8;
    if (!v8)
      return 0;
  }
  return v8[2];
}

uint64_t CA::WindowServer::IOMFBDisplay::release_everything(CA::WindowServer::IOMFBDisplay *this)
{
  unsigned int *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  CA::WindowServer::Surface **v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = (unsigned int *)((char *)this + 25680);
  (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 2152))(this);
  *((_BYTE *)v2 + 2398) = 0;
  v3 = *((_QWORD *)this + 3299);
  if (v3)
  {
    --*(_DWORD *)(v3 + 8);
    *((_QWORD *)this + 3299) = 0;
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25688));
  v4 = *v2;
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (CA::WindowServer::Surface **)((char *)this + 25768);
    do
    {
      *(v6 - 1) = 0;
      if (*v6)
      {
        CA::WindowServer::Surface::unref(*v6);
        *v6 = 0;
        v4 = *v2;
      }
      ++v5;
      v6 += 6;
    }
    while (v5 < v4);
  }
  v7 = (uint64_t *)*((_QWORD *)this + 3250);
  if (v7)
  {
    do
    {
      *((_DWORD *)v7 + 2) = 0;
      CA::WindowServer::IOMFBDisplay::release_buffer(v7);
      v7 = (uint64_t *)*v7;
    }
    while (v7);
    v8 = (_QWORD *)*((_QWORD *)this + 3250);
    if (v8)
    {
      do
      {
        v9 = (_QWORD *)*v8;
        free(v8);
        v8 = v9;
      }
      while (v9);
    }
  }
  *((_QWORD *)this + 3250) = 0;
  if (*((_QWORD *)this + 3251))
    CA::WindowServer::IOMFBDisplay::delete_detached_layer(this);
  v10 = *((_QWORD *)this + 3297);
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    *((_QWORD *)this + 3297) = 0;
  }
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 25688));
}

const void *CA::WindowServer::dictionary_dict(CA::WindowServer *this, const __CFDictionary *a2, const __CFString *a3)
{
  const void *Value;
  const void *v4;
  CFTypeID v5;

  Value = CFDictionaryGetValue(this, a2);
  if (!Value)
    return 0;
  v4 = Value;
  v5 = CFGetTypeID(Value);
  if (v5 != CFDictionaryGetTypeID())
    return 0;
  return v4;
}

BOOL CA::WindowServer::IOMFBDisplay::compare_native_modes(float *a1, unint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8;
  BOOL is_hdr;
  _BOOL8 result;
  float v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _OWORD v20[3];
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v21[0] = a2;
  memset(v20, 0, 44);
  (*(void (**)(_OWORD *__return_ptr))(*(_QWORD *)a1 + 1360))(v20);
  if (HIDWORD(v20[1]) == 1552)
  {
    v8 = (0x7007u >> (BYTE8(v20[1]) - 33)) & 1;
    if ((DWORD2(v20[1]) - 44577) > 0xE)
      LOBYTE(v8) = 0;
    if (!a2)
      return 0;
  }
  else
  {
    LOBYTE(v8) = 0;
    if (!a2)
      return 0;
  }
  if ((v8 & 1) != 0)
    goto LABEL_11;
  if (CADeviceSupportsHDRTVModes::once != -1)
    dispatch_once(&CADeviceSupportsHDRTVModes::once, &__block_literal_global_124);
  if ((CADeviceSupportsHDRTVModes::supports_hdr_modes & 1) != 0)
  {
LABEL_11:
    if ((a2 & 0xFFFFFFF) == 0x21C1000)
      return 0;
  }
  else
  {
    is_hdr = CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::Display::Mode *)v21);
    result = 0;
    if (is_hdr || (a2 & 0xFFFFFFF) == 0x21C1000)
      return result;
  }
  if (CA::WindowServer::Display::Mode::hdr_type(a2) == 1 && (a2 & 0x4000000000000000) != 0)
    return 0;
  v11 = a1[6532];
  if (v11 == 0.0)
    return 0;
  result = 0;
  v12 = a2 & 0x3FFF;
  v13 = (a2 >> 14) & 0x3FFF;
  if (vabds_f32(v11, (float)v12 / (float)v13) <= (float)(v11 * 0.05) && v12 >= 0x780 && v13 >= 0x438)
  {
    v14 = ((double)((a2 >> 29) & 0x1FFFFFF) * 0.0000152587891 + 0.5);
    if (v14 < 0x3C && a4 > 0x3B || (int)v12 < (int)a3 || (int)v13 < SHIDWORD(a3))
      return 0;
    return v12 != (_DWORD)a3 || v13 != HIDWORD(a3) || v14 >= a4;
  }
  return result;
}

void CA::WindowServer::IOMFBDisplay::release_buffer(_QWORD *a1)
{
  CA::Shape *v2;
  CA::Shape *v3;
  CA::WindowServer::Surface *v4;
  CA::WindowServer::Surface *v5;

  v2 = (CA::Shape *)a1[2];
  if (v2)
  {
    CA::Shape::unref(v2);
    a1[2] = 0;
  }
  v3 = (CA::Shape *)a1[3];
  if (v3)
  {
    CA::Shape::unref(v3);
    a1[3] = 0;
  }
  v4 = (CA::WindowServer::Surface *)a1[4];
  if (v4)
  {
    CA::WindowServer::Surface::unref(v4);
    a1[4] = 0;
  }
  v5 = (CA::WindowServer::Surface *)a1[5];
  if (v5)
  {
    CA::WindowServer::Surface::unref(v5);
    a1[5] = 0;
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::update_power_state_locked(CA::WindowServer::IOMFBDisplay *this, int a2, char a3)
{
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  int v10;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  NSObject *v20;
  int v21;
  uint64_t current_iomfb_mode;
  CA::WindowServer::IOMFBDisplay::FrameInfo *v23;
  malloc_zone_t *malloc_zone;
  CA::WindowServer::IOMFBDisplay::FrameInfo *v26;
  uint64_t v27;
  uint8_t v28[4];
  int v29;
  __int16 v30;
  _BOOL4 v31;
  uint8_t buf[8];
  _BYTE *v33;
  _BYTE v34[10];
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  _BOOL4 v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v6 = (char *)this + 25608;
  v7 = *((_QWORD *)this + 91);
  v8 = (_BYTE *)(v7 + 2);
  v9 = (_BYTE *)(v7 + 3);
  if (*((_DWORD *)this + 6970))
    v10 = 1;
  else
    v10 = *((unsigned __int8 *)this + 27884);
  kdebug_trace();
  if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 696))(this) & 1) == 0)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v11 = x_log_category_display_state;
      if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *((_DWORD *)this + 6);
        v13 = *v8;
        v14 = *v9;
        v15 = v6[2276];
        v16 = *((_DWORD *)v6 + 568) != 0;
        *(_DWORD *)buf = 67110656;
        *(_DWORD *)&buf[4] = v12;
        LOWORD(v33) = 1024;
        *(_DWORD *)((char *)&v33 + 2) = v13;
        HIWORD(v33) = 1024;
        *(_DWORD *)v34 = v14;
        *(_WORD *)&v34[4] = 1024;
        *(_DWORD *)&v34[6] = v10;
        v35 = 1024;
        v36 = a2;
        v37 = 1024;
        v38 = v15;
        v39 = 1024;
        v40 = v16;
        _os_log_impl(&dword_184457000, v11, OS_LOG_TYPE_DEFAULT, "IOMFBDisplay::update_power_state display_id=%u current_power_state=%i target_power_state=%i new_target_power_state=%i sync=%i raw_power_state=%i power_assertions=%i", buf, 0x2Cu);
      }
    }
  }
  *(_QWORD *)buf = this;
  v33 = v8;
  *(_QWORD *)v34 = v9;
  if (*v9 == v10)
  {
    if (a2 && v10 == 1 && *v8 != 1)
      CA::WindowServer::IOMFBDisplay::update_power_state_locked(BOOL,BOOL)::$_0::operator()((_BYTE **)buf);
  }
  else
  {
    CA::WindowServer::IOMFBDisplay::update_fastest_display(this);
    *v9 = v10;
    os_unfair_lock_lock((os_unfair_lock_t)this + 6504);
    CA::WindowServer::IOMFBDisplay::initialize_timings(this);
    v17 = *((_QWORD *)this + 3254);
    if (v17)
      atomic_store(v10 == 1, (unsigned __int8 *)(v17 + 1));
    os_unfair_lock_unlock((os_unfair_lock_t)this + 6504);
    v27 = 0x100000000;
    LODWORD(v27) = *((_DWORD *)this + 6);
    BYTE5(v27) = a3;
    HIWORD(v27) = v10 == 1;
    CA::Render::post_notification(0x36u, 0, (uint64_t)&v27, 0);
    v18 = (uint64_t *)*((_QWORD *)this + 3200);
    if (v18)
    {
      v19 = *v18;
      if (!*v18)
      {
        sil_mgr_instance(0, 0xFFFFFFFFLL);
        *v18 = v19;
      }
      if (v10 != 1 && v19)
      {
        iomfb_swap_set_indicator_brightness(*((_QWORD *)this + 3192), 0, 0.0);
        CA::WindowServer::SILMgr::set_power(*((CA::WindowServer::SILMgr **)this + 3200), 0, 1);
        *v6 = 1;
        (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 2096))(this);
      }
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v20 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        v21 = *((_DWORD *)this + 6);
        *(_DWORD *)v28 = 67109376;
        v29 = v21;
        v30 = 1024;
        v31 = v10 == 1;
        _os_log_impl(&dword_184457000, v20, OS_LOG_TYPE_DEFAULT, "Display %u set power state %d", v28, 0xEu);
      }
    }
    CA::IOMobileFramebuffer::set_power_state((CA::WindowServer::IOMFBDisplay *)((char *)this + 25536));
    if (*v9)
    {
      *((_QWORD *)this + 3384) = 0;
      if ((*((_WORD *)this + 328) & 0x1C00) == 0 && *((_QWORD *)this + 3303) >= 2uLL)
      {
        current_iomfb_mode = CA::WindowServer::IOMFBDisplay::fetch_current_iomfb_mode(this);
        if (CA::WindowServer::Display::Mode::operator==(current_iomfb_mode, 0))
          current_iomfb_mode = *((_QWORD *)this + 81);
        if (!CA::WindowServer::Display::Mode::operator==(*((_QWORD *)this + 3383), current_iomfb_mode)
          || v6[2523])
        {
          *((_QWORD *)this + 3383) = current_iomfb_mode;
          pthread_mutex_lock((pthread_mutex_t *)((char *)this + 560));
          CA::WindowServer::IOMFBDisplay::update_framebuffer_locked(this, 4);
          pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 560));
          CA::WindowServer::IOMFBDisplay::reset_timings((os_unfair_lock_s *)this);
        }
      }
    }
    else
    {
      *v8 = 0;
      v6[2472] = 0;
      CA::WindowServer::IOMFBDisplay::collect_frame_info(&v26, (uint64_t)this, 0);
      v23 = v26;
      if (v26)
      {
        CA::WindowServer::IOMFBDisplay::FrameInfo::~FrameInfo(v26);
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(malloc_zone, v23);
      }
    }
    CA::WindowServer::IOMFBDisplay::set_timings_enabled(this, v10 == 1);
    if (v10 == 1)
      notify_post("com.apple.CoreAnimation.CAWindowServer.DisplayPower");
    BYTE4(v27) = 0;
    CA::Render::post_notification(0x36u, 0, (uint64_t)&v27, 0);
    CA::WindowServer::IOMFBDisplay::set_needs_icc_reload(this);
    CA::WindowServer::IOMFBDisplay::update_fastest_display(this);
    if (a2 && *v9 == 1)
      CA::WindowServer::IOMFBDisplay::update_power_state_locked(BOOL,BOOL)::$_0::operator()((_BYTE **)buf);
  }
  return kdebug_trace();
}

uint64_t CA::WindowServer::IOMFBDisplay::update_power_state_locked(BOOL,BOOL)::$_0::operator()(_BYTE **a1)
{
  CA::IOMobileFramebuffer *v2;
  uint64_t result;
  int v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  uint8_t buf[4];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = (CA::IOMobileFramebuffer *)(*a1 + 25536);
  result = CA::IOMobileFramebuffer::swap_wait(v2);
  if ((_DWORD)result)
  {
    v4 = result;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v5 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v9 = v4;
        _os_log_impl(&dword_184457000, v5, OS_LOG_TYPE_ERROR, "Wait Power On failed with error 0x%x. Retrying...", buf, 8u);
      }
    }
    result = CA::IOMobileFramebuffer::swap_wait(v2);
    if ((_DWORD)result)
    {
      v6 = result;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v7 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67109120;
          v9 = v6;
          _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_FAULT, "Wait Power On failed with error 0x%x", buf, 8u);
        }
      }
      result = sleep(0x1Eu);
    }
  }
  *a1[1] = *a1[2];
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::update_fastest_display(CA::WindowServer::IOMFBDisplay *this)
{
  unsigned int v2;
  unsigned int v3;
  NSObject *v4;
  uint8_t buf[4];
  int v7;
  __int16 v8;
  int v9;
  pthread_mutex_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  memset(&v10, 0, sizeof(v10));
  pthread_mutex_init(&v10, 0);
  v11 = 0;
  CA::Render::post_notification(0x3Bu, 0, (uint64_t)&v10, 0);
  v2 = v11;
  do
    v3 = __ldaxr(CA::WindowServer::IOMFBDisplay::_fastest_display_id);
  while (__stlxr(v2, CA::WindowServer::IOMFBDisplay::_fastest_display_id));
  if (v3 != (_DWORD)v11)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v4 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109376;
        v7 = v11;
        v8 = 1024;
        v9 = HIDWORD(v11);
        _os_log_impl(&dword_184457000, v4, OS_LOG_TYPE_DEBUG, "AGX vsync hints will track display %u with %u Hz refresh rate\n", buf, 0xEu);
      }
    }
  }
  if (*(unsigned __int8 *)(*((_QWORD *)this + 91) + 2) | *(unsigned __int8 *)(*((_QWORD *)this + 91) + 3)
    && (_DWORD)v11 == *((_DWORD *)this + 6))
  {
    atomic_store(6u, CA::WindowServer::IOMFBDisplay::_latching_vsync);
  }
  return pthread_mutex_destroy(&v10);
}

void CA::IOMobileFramebuffer::set_power_state(CA::IOMobileFramebuffer *this)
{
  _QWORD v1[3];
  int v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 8))
  {
    v1[0] = 0;
    v1[1] = v1;
    v1[2] = 0x2000000000;
    v2 = 0;
    BMMonitorBlockExecutionWithSignature();
    _Block_object_dispose(v1, 8);
  }
  else
  {
    IOMobileFramebufferRequestPowerChange();
  }
}

void CA::WindowServer::IOMFBDisplay::reset_timings(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;

  v2 = this + 6504;
  os_unfair_lock_lock(this + 6504);
  LOBYTE(this[6505]._os_unfair_lock_opaque) = 0;
  CA::WindowServer::IOMFBDisplay::initialize_timings((CA::WindowServer::IOMFBDisplay *)this);
  os_unfair_lock_unlock(v2);
}

uint64_t ___ZN2CA19IOMobileFramebuffer15set_power_stateEb_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = IOMobileFramebufferRequestPowerChange();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ___ZN2CA12WindowServer12IOMFBDisplay42post_secure_indicator_statistics_power_logEv_block_invoke()
{
  uint64_t result;

  CA::WindowServer::IOMFBDisplay::post_secure_indicator_statistics_power_log(void)::secure_indicator_interval_telemetry_id = pps_create_telemetry_identifier();
  result = pps_create_telemetry_identifier();
  CA::WindowServer::IOMFBDisplay::post_secure_indicator_statistics_power_log(void)::secure_indicator_types_telemetry_id = result;
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v10 = *((_QWORD *)a1 + 2);
      v11 = *a1;
      v12 = *((_QWORD *)a3 + 2);
      *a1 = *a3;
      *((_QWORD *)a1 + 2) = v12;
    }
    else
    {
      v19 = *((_QWORD *)a1 + 2);
      v20 = *a1;
      v21 = *((_QWORD *)a2 + 2);
      *a1 = *a2;
      *((_QWORD *)a1 + 2) = v21;
      *a2 = v20;
      *((_QWORD *)a2 + 2) = v19;
      result = (*a4)(a3, a2);
      if (!(_DWORD)result)
        return result;
      v10 = *((_QWORD *)a2 + 2);
      v11 = *a2;
      v22 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v22;
    }
    *a3 = v11;
    *((_QWORD *)a3 + 2) = v10;
  }
  else if ((_DWORD)result)
  {
    v13 = *((_QWORD *)a2 + 2);
    v14 = *a2;
    v15 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v15;
    *a3 = v14;
    *((_QWORD *)a3 + 2) = v13;
    result = (*a4)(a2, a1);
    if ((_DWORD)result)
    {
      v16 = *((_QWORD *)a1 + 2);
      v17 = *a1;
      v18 = *((_QWORD *)a2 + 2);
      *a1 = *a2;
      *((_QWORD *)a1 + 2) = v18;
      *a2 = v17;
      *((_QWORD *)a2 + 2) = v16;
    }
  }
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5);
  if ((*a5)((__int128 *)a4, (__int128 *)a3))
  {
    v11 = *(_QWORD *)(a3 + 16);
    v12 = *(_OWORD *)a3;
    v13 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v13;
    *(_OWORD *)a4 = v12;
    *(_QWORD *)(a4 + 16) = v11;
    if ((*a5)((__int128 *)a3, (__int128 *)a2))
    {
      v14 = *(_QWORD *)(a2 + 16);
      v15 = *(_OWORD *)a2;
      v16 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v16;
      *(_OWORD *)a3 = v15;
      *(_QWORD *)(a3 + 16) = v14;
      if ((*a5)((__int128 *)a2, (__int128 *)a1))
      {
        v17 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v18 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  __n128 v12;
  __n128 result;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v12 = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>((uint64_t)a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    v14 = *(_QWORD *)(a4 + 16);
    v15 = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = v16;
    *(_OWORD *)a5 = v15;
    *(_QWORD *)(a5 + 16) = v14;
    if ((*a6)((__int128 *)a4, (__int128 *)a3))
    {
      v17 = *(_QWORD *)(a3 + 16);
      v18 = *(_OWORD *)a3;
      v19 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = v19;
      *(_OWORD *)a4 = v18;
      *(_QWORD *)(a4 + 16) = v17;
      if ((*a6)((__int128 *)a3, (__int128 *)a2))
      {
        v20 = *(_QWORD *)(a2 + 16);
        v21 = *(__n128 *)a2;
        v22 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v22;
        *(__n128 *)a3 = v21;
        *(_QWORD *)(a3 + 16) = v20;
        if ((*a6)((__int128 *)a2, (__int128 *)a1))
        {
          v23 = a1[1].n128_u64[0];
          result = *a1;
          v24 = *(_QWORD *)(a2 + 16);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v24;
          *(__n128 *)a2 = result;
          *(_QWORD *)(a2 + 16) = v23;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (__int128 *)(a2 - 24);
      if ((*a3)((__int128 *)(a2 - 24), (__int128 *)a1))
      {
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v8;
        *(_QWORD *)(a1 + 16) = v11;
        *v8 = v10;
        *(_QWORD *)(a2 - 8) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>((__n128 *)a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      v12 = (__int128 *)(a1 + 48);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a3);
      v13 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v13, v12))
    {
      v19 = *(_OWORD *)v13;
      v20 = *(_QWORD *)(v13 + 16);
      v16 = v14;
      while (1)
      {
        v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(_QWORD *)(v17 + 88) = *(_QWORD *)(a1 + v16 + 64);
        if (v16 == -48)
          break;
        v16 -= 24;
        if (((*a3)(&v19, (__int128 *)(v17 + 24)) & 1) == 0)
        {
          v18 = a1 + v16 + 72;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_OWORD *)v18 = v19;
      *(_QWORD *)(v18 + 16) = v20;
      if (++v15 == 8)
        return v13 + 24 == a2;
    }
    v12 = (__int128 *)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2)
      return 1;
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::set_cg_curve(CA::WindowServer::IOMFBDisplay *this, CGColorTRC *__s1, CGColorTRC *__s2)
{
  uint64_t result;
  void *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  NSObject *v11;
  _BOOL4 v12;
  uint8_t v13[8];
  uint64_t v14;

  result = 0;
  v14 = *MEMORY[0x1E0C80C00];
  if (__s1 && __s2)
  {
    if (*((_BYTE *)this + 28121))
    {
      result = memcmp(__s1, __s2, 0x24uLL);
      if ((_DWORD)result)
      {
        if (__s2->var0 == 5 && *(_QWORD *)(&__s2->var0 + 1))
        {
          v7 = (void *)operator new[]();
          memcpy(v7, *(const void **)((char *)&__s2->var1.var1.var0 + 4), 4 * *(_QWORD *)(&__s2->var0 + 1));
        }
        else
        {
          v7 = 0;
        }
        if (__s1->var0 == 5)
        {
          v8 = *(unint64_t *)((char *)&__s1->var1.var1.var0 + 4);
          if (v8)
            MEMORY[0x186DBD990](v8, 0x1000C4052888210);
        }
        v9 = *(_OWORD *)&__s2->var0;
        v10 = *(_OWORD *)&__s2->var1.var1.var1;
        __s1->var1.var0.var6 = __s2->var1.var0.var6;
        *(_OWORD *)&__s1->var0 = v9;
        *(_OWORD *)&__s1->var1.var1.var1 = v10;
        if (v7)
          *(unint64_t *)((char *)&__s1->var1.var1.var0 + 4) = (unint64_t)v7;
        return 1;
      }
    }
    else
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v11 = x_log_category_windowserver;
        v12 = os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT);
        result = 0;
        if (!v12)
          return result;
        *(_WORD *)v13 = 0;
        _os_log_impl(&dword_184457000, v11, OS_LOG_TYPE_DEFAULT, "Setting system gamma failed, display does not support ICC", v13, 2u);
      }
      return 0;
    }
  }
  return result;
}

_OWORD *RGBXYZConversionMatrices<double>::RGBXYZConversionMatrices(_OWORD *a1, float64x2_t *a2, float64x2_t *a3, double a4, float64x2_t a5, double a6, double a7, double a8, float64x2_t a9, double a10, float64x2_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,float64x2_t a33,float64x2_t a34,float64x2_t a35,float64x2_t a36,float64x2_t a37,float64x2_t a38)
{
  double v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t vars0;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;

  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  a5.f64[0] = a2[1].f64[0];
  v39 = a2->f64[1];
  v40.f64[0] = a5.f64[0] * a2->f64[0] / v39;
  a9.f64[0] = (1.0 - vaddvq_f64(*a2)) * a5.f64[0] / v39;
  v40.f64[1] = a5.f64[0];
  v53 = v40;
  v41 = a2[2];
  a5.f64[0] = a2[3].f64[0];
  v40.f64[0] = a2[2].f64[1];
  v42.f64[0] = a5.f64[0] * v41.f64[0] / v40.f64[0];
  a11.f64[0] = (1.0 - vaddvq_f64(v41)) * a5.f64[0] / v40.f64[0];
  v55 = a11;
  v56 = a9;
  v42.f64[1] = a5.f64[0];
  v52 = v42;
  v43 = a2[4];
  a5.f64[0] = a2[5].f64[0];
  v40.f64[0] = a2[4].f64[1];
  v42.f64[0] = a5.f64[0] * v43.f64[0] / v40.f64[0];
  v40.f64[0] = (1.0 - vaddvq_f64(v43)) * a5.f64[0] / v40.f64[0];
  v57 = v40;
  v42.f64[1] = a5.f64[0];
  v54 = v42;
  v44 = *a3;
  v45 = a3[1];
  v42.f64[0] = a3->f64[1];
  a5.f64[0] = vmuld_n_f64(a3->f64[0], v45.f64[0]) / v42.f64[0];
  v50 = v45;
  v51 = a5;
  v44.f64[0] = (1.0 - vaddvq_f64(*a3)) * v45.f64[0] / v42.f64[0];
  vars0 = v44;
  __invert_d3();
  v46 = vmlaq_f64(vmlaq_f64(vmulq_f64(a34, v51), v50, a36), vars0, a38);
  v47 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a33, v51.f64[0]), a35, v50.f64[0]), a37, vars0.f64[0]);
  *a1 = vmulq_n_f64(v53, v47.f64[0]);
  a1[1] = vmulq_f64(v47, v56);
  a1[2] = vmulq_laneq_f64(v52, v47, 1);
  a1[3] = vmulq_laneq_f64(v55, v47, 1);
  a1[4] = vmulq_n_f64(v54, v46.f64[0]);
  a1[5] = vmulq_f64(v46, v57);
  __invert_d3();
  a1[8] = a35;
  a1[9] = a36;
  a1[10] = a37;
  a1[11] = a38;
  a1[6] = a33;
  a1[7] = a34;
  return a1;
}

uint64_t ___ZN2CA12WindowServer12IOMFBDisplay21set_preset_propertiesENS0_7Display16PresetPropertiesE_block_invoke()
{
  uint64_t result;

  if (MGIsDeviceOneOfType())
    CA::WindowServer::IOMFBDisplay::set_preset_properties(CA::WindowServer::Display::PresetProperties)::is_d65a_ipad = 1;
  result = MGIsDeviceOneOfType();
  if ((_DWORD)result)
  {
    CA::WindowServer::IOMFBDisplay::set_preset_properties(CA::WindowServer::Display::PresetProperties)::adaptation = 1;
    CA::WindowServer::IOMFBDisplay::set_preset_properties(CA::WindowServer::Display::PresetProperties)::cone_response = 1;
  }
  return result;
}

void CA::WindowServer::IOMFBDisplay::save_brightness_preferences(CA::WindowServer::IOMFBDisplay *this, int a2)
{
  CFStringRef v3;
  CFStringRef v4;
  const __CFString *v5;
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  CFTypeID v8;
  __CFDictionary *MutableCopy;
  __CFDictionary *v10;
  const void **v11;
  _OWORD v12[4];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  memset(v12, 0, sizeof(v12));
  if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *, uint64_t, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)this + 800))(this, 1, v12, 64, 0))
  {
    v3 = CFStringCreateWithCString(0, (const char *)v12, 0x8000100u);
    if (v3)
    {
      v4 = v3;
      v5 = (const __CFString *)*MEMORY[0x1E0C9B248];
      v6 = (const __CFDictionary *)CFPreferencesCopyAppValue(CFSTR("CABrightnessPreferences"), (CFStringRef)*MEMORY[0x1E0C9B248]);
      v7 = v6;
      if (v6 && (v8 = CFGetTypeID(v6), v8 == CFDictionaryGetTypeID()))
        MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v7);
      else
        MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v10 = MutableCopy;
      if (MutableCopy)
      {
        v11 = (const void **)MEMORY[0x1E0C9AE50];
        if (!a2)
          v11 = (const void **)MEMORY[0x1E0C9AE40];
        CFDictionarySetValue(MutableCopy, v4, *v11);
        CFPreferencesSetAppValue(CFSTR("CABrightnessPreferences"), v10, v5);
        CFRelease(v10);
      }
      if (v7)
        CFRelease(v7);
      CFRelease(v4);
    }
  }
}

BOOL CA::WindowServer::IOMFBDisplay::detach_exceeds_display_bandwidth_limits_p(CA::WindowServer::IOMFBDisplay *this, CA::WindowServer::Surface *a2, float64x2_t *a3, const CA::Rect *a4, const CA::Rect *a5)
{
  unsigned int *v6;
  unint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  const CA::Rect *v10;
  const CA::Rect *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64x2_t v15;
  int v16;
  int v17;
  double v18;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  NSObject *v27;
  uint32_t v28;
  NSObject *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE buf[38];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = (unsigned int *)((char *)this + 25672);
  if ((unint64_t)a3 | (unint64_t)a4)
  {
    if (a3 && a4)
      *((_QWORD *)this + 3375) = CA::WindowServer::IOMFBDisplay::compute_layer_bw((CA::WindowServer::IOMFBDisplay *)*((unsigned int *)a2 + 16), a3, (const CA::Rect *)a3, a4, *((double *)this + 3372), *((double *)a4 + 3));
  }
  else if (!*((_BYTE *)this + 27008))
  {
    return 0;
  }
  v7 = *((_QWORD *)this + 3375);
  if (v7 > *((_QWORD *)this + 3369))
  {
    if (!byte_1ECDC6A6E)
      return 1;
    if (x_log_hook_p())
    {
LABEL_36:
      x_log_();
      return 1;
    }
    v22 = x_log_category_CADebug;
    v8 = 1;
    if (!os_log_type_enabled((os_log_t)x_log_category_CADebug, OS_LOG_TYPE_INFO))
      return v8;
    v23 = *((_DWORD *)this + 6);
    v24 = *((_QWORD *)this + 3375);
    v25 = *((_QWORD *)this + 3369);
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v23;
    *(_WORD *)&buf[8] = 2048;
    *(_QWORD *)&buf[10] = v24;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v25;
    v26 = "Display %d gpBandwidth Exceeded. Detach disabled. Req BW:%llu gpBW limit:%llu";
    v27 = v22;
    v28 = 28;
LABEL_39:
    _os_log_impl(&dword_184457000, v27, OS_LOG_TYPE_INFO, v26, buf, v28);
    return v8;
  }
  *((_BYTE *)v6 + 1336) = 0;
  if (*((_BYTE *)v6 + 2420))
  {
    v9 = 0;
  }
  else
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25688));
    v12 = *((_QWORD *)this + 6 * *v6 + 3220);
    if (v12 && (v13 = *(_QWORD *)(v12 + 32)) != 0)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v14 = *(_QWORD *)(v13 + 56);
      v15.i64[0] = v14;
      v15.i64[1] = HIDWORD(v14);
      *(float64x2_t *)&buf[16] = vcvtq_f64_u64(v15);
      v16 = *((_DWORD *)this + 40);
      v17 = *((_DWORD *)this + 41);
      if (v16 <= v17)
        v16 = *((_DWORD *)this + 41);
      v18 = 1.79769313e308;
      if (v16 <= 1073741822)
        v18 = (double)v17;
      v9 = CA::WindowServer::IOMFBDisplay::compute_layer_bw((CA::WindowServer::IOMFBDisplay *)*(unsigned int *)(v13 + 64), (float64x2_t *)buf, v10, v11, *((double *)this + 3372), v18);
    }
    else
    {
      v9 = 0;
    }
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 25688));
    v7 = *((_QWORD *)this + 3375);
  }
  v8 = v7 + v9 > *((_QWORD *)this + 3371);
  if (v7 + v9 > *((_QWORD *)this + 3371) && byte_1ECDC6A6E != 0)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v29 = x_log_category_CADebug;
      if (os_log_type_enabled((os_log_t)x_log_category_CADebug, OS_LOG_TYPE_INFO))
      {
        v30 = *((_DWORD *)this + 6);
        v31 = *((_QWORD *)this + 3369);
        v32 = *((_QWORD *)this + 3370);
        v33 = *((_QWORD *)this + 3371);
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)&buf[4] = v30;
        *(_WORD *)&buf[8] = 2048;
        *(_QWORD *)&buf[10] = v31;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v32;
        *(_WORD *)&buf[28] = 2048;
        *(_QWORD *)&buf[30] = v33;
        _os_log_impl(&dword_184457000, v29, OS_LOG_TYPE_INFO, "Display %d BW limits gpBW:%llu gpliteBW:%llu gpSumBW:%llu", buf, 0x26u);
      }
    }
    if (x_log_hook_p())
      goto LABEL_36;
    v34 = x_log_category_CADebug;
    v8 = 1;
    if (!os_log_type_enabled((os_log_t)x_log_category_CADebug, OS_LOG_TYPE_INFO))
      return v8;
    v35 = *((_QWORD *)this + 3375);
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v35;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = 0;
    v26 = "gpSumBandwidth Exceeded. Detach disabled UI-BW:%llu, Detach-BW:%llu gplite-BW:%llu";
    v27 = v34;
    v28 = 32;
    goto LABEL_39;
  }
  return v8;
}

unsigned int CA::WindowServer::IOMFBDisplay::compute_layer_bw(CA::WindowServer::IOMFBDisplay *this, float64x2_t *a2, const CA::Rect *a3, const CA::Rect *a4, double a5, double a6)
{
  float v10;
  unsigned __int16 v11;
  float64x2_t v17;
  float64x2_t v19;
  double v20;
  int v21;
  double v22;
  double v23;
  double v24;
  double v25;
  float v26;

  v10 = ceil((double)(unint64_t)CA::WindowServer::Surface::bits_per_pixel(this) * 0.125);
  if (CA::Render::fourcc_compressed_of_type(this, 0, 0) == (_DWORD)this)
  {
    if ((int)this <= 1885746227)
    {
      if ((int)this <= 1882469427)
      {
        if ((_DWORD)this != 1882468912)
        {
          v21 = 1882468914;
LABEL_17:
          if ((_DWORD)this != v21)
          {
            v20 = (ceil(v10 * (0.0078125 * a2[1].f64[0])) * 128.0 + 128.0) * a2[1].f64[1];
            goto LABEL_20;
          }
        }
      }
      else if ((_DWORD)this != 1882469428 && (_DWORD)this != 1885745712)
      {
        v11 = 12850;
LABEL_12:
        v21 = v11 | 0x70660000;
        goto LABEL_17;
      }
      v22 = a2[1].f64[1];
      v23 = ceil(a2[1].f64[0] * 0.333333333);
      v24 = v10;
      v25 = 0.0234375;
      goto LABEL_19;
    }
    if (((_DWORD)this - 1886676528) <= 4 && ((1 << ((_BYTE)this - 48)) & 0x15) != 0
      || ((_DWORD)this - 1886680624) <= 4 && ((1 << ((_BYTE)this - 48)) & 0x15) != 0)
    {
      v22 = a2[1].f64[1];
      v23 = ceil(a2[1].f64[0] * 0.2);
      v24 = v10;
      v25 = 0.0390625;
LABEL_19:
      v20 = (ceil(v24 * (v25 * v23)) * 128.0 + 1.0) * v22;
      goto LABEL_20;
    }
    v11 = 13364;
    goto LABEL_12;
  }
  __asm { FMOV            V1.2D, #0.125 }
  v17 = vrndpq_f64(vmulq_f64(a2[1], _Q1));
  __asm { FMOV            V1.2D, #1.0 }
  v19 = vaddq_f64(v17, _Q1);
  v20 = vmuld_lane_f64((float)(v10 * 64.0) * v19.f64[0], v19, 1);
LABEL_20:
  v26 = a5;
  return vcvtpd_u64_f64(v20 / (v26 * a6));
}

void CA::WindowServer::IOMFBDisplay::set_enabled_(CA::WindowServer::IOMFBDisplay *this, int a2)
{
  char *v4;
  os_unfair_lock_s *v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  int v14;
  NSObject *v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  int v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = (char *)this + 28045;
  *((_BYTE *)this + 28045) = 0;
  v5 = (os_unfair_lock_s *)((char *)this + 716);
  os_unfair_lock_lock((os_unfair_lock_t)this + 179);
  v6 = (_BYTE *)*((_QWORD *)this + 91);
  if (!a2)
  {
    v7 = v6[1];
    if (v7 == 2)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v12 = x_log_category_flipbook;
        if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_DEFAULT, "entering flipbook", buf, 2u);
        }
      }
      CA::WindowServer::FlipBook::transition_to_state(*((unsigned __int8 **)this + 40), 1u, 1);
      *v6 = 2;
      if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 696))(this) & 1) != 0)
        goto LABEL_52;
      if (!x_log_hook_p())
      {
        v13 = x_log_category_display_state;
        if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
        {
          v14 = *((_DWORD *)this + 6);
          *(_DWORD *)buf = 67109378;
          v21 = v14;
          v22 = 2080;
          v23 = "flipbook";
          _os_log_impl(&dword_184457000, v13, OS_LOG_TYPE_DEFAULT, "IOMFBDisplay::set_enabled_ display_id=%u, current_state=%s", buf, 0x12u);
        }
        goto LABEL_51;
      }
      goto LABEL_45;
    }
    if (!v6[3])
    {
LABEL_35:
      if (v7 != 3)
      {
        *v6 = 0;
        if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 696))(this) & 1) != 0)
        {
LABEL_52:
          CA::WindowServer::Display::send_display_state_change_reply((uint64_t)this);
          *((_QWORD *)this + 87) = 0;
          goto LABEL_53;
        }
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v16 = x_log_category_display_state;
          if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
          {
            v17 = *((_DWORD *)this + 6);
            *(_DWORD *)buf = 67109378;
            v21 = v17;
            v22 = 2080;
            v23 = "off";
            _os_log_impl(&dword_184457000, v16, OS_LOG_TYPE_DEFAULT, "IOMFBDisplay::set_enabled_ display_id=%u, current_state=%s", buf, 0x12u);
          }
        }
LABEL_51:
        kdebug_trace();
        goto LABEL_52;
      }
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v15 = x_log_category_flipbook;
        if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v15, OS_LOG_TYPE_DEFAULT, "entering suppression", buf, 2u);
        }
      }
      CA::WindowServer::FlipBook::transition_to_state(*((unsigned __int8 **)this + 40), 2u, 0);
      *v6 = 3;
      if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 696))(this) & 1) != 0)
        goto LABEL_52;
      if (!x_log_hook_p())
      {
        v18 = x_log_category_display_state;
        if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
        {
          v19 = *((_DWORD *)this + 6);
          *(_DWORD *)buf = 67109378;
          v21 = v19;
          v22 = 2080;
          v23 = "suppressed";
          _os_log_impl(&dword_184457000, v18, OS_LOG_TYPE_DEFAULT, "IOMFBDisplay::set_enabled_ display_id=%u, current_state=%s", buf, 0x12u);
        }
        goto LABEL_51;
      }
LABEL_45:
      x_log_();
      goto LABEL_51;
    }
    (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 2152))(this);
    (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 2144))(this);
    CA::WindowServer::IOMFBDisplay::set_all_layers_to_null((uint64_t)this, 1);
    if (v4[3])
    {
      v8 = mach_absolute_time();
      if (CATimeWithHostTime(v8) <= *((double *)this + 3309))
      {
        if (v4[3])
        {
LABEL_34:
          v4[18] = 1;
          v7 = v6[1];
          goto LABEL_35;
        }
      }
      else
      {
        v4[3] = 0;
        *((_QWORD *)this + 3309) = 0;
      }
    }
    if (!v4[7] || (*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 248))(this))
      (*(void (**)(CA::WindowServer::IOMFBDisplay *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 2120))(this, 0, 0, 0);
    goto LABEL_34;
  }
  if (v6[3] == 1)
    CAUpdateEarliestTailspinEmissionTime(2);
  (*(void (**)(CA::WindowServer::IOMFBDisplay *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 2120))(this, 1, 0, 0);
  v4[3] = 0;
  *((_QWORD *)this + 3309) = 0;
  if ((*v6 & 0xFE) == 2)
  {
    CA::WindowServer::FlipBook::transition_to_state(*((unsigned __int8 **)this + 40), 0, 0);
    *(_DWORD *)((char *)this + 745) |= 0x400u;
  }
  *v6 = 1;
  if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 696))(this) & 1) == 0)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v9 = x_log_category_display_state;
      if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *((_DWORD *)this + 6);
        *(_DWORD *)buf = 67109378;
        v21 = v10;
        v22 = 2080;
        v23 = "on";
        _os_log_impl(&dword_184457000, v9, OS_LOG_TYPE_DEFAULT, "IOMFBDisplay::set_enabled_ display_id=%u, current_state=%s", buf, 0x12u);
      }
    }
    kdebug_trace();
  }
  CA::WindowServer::Display::send_display_state_change_reply((uint64_t)this);
  if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 696))(this) & 1) == 0)
  {
    v11 = *((_QWORD *)this + 80);
    if (!CA::WindowServer::Display::Mode::operator==(*((_QWORD *)this + 3383), v11) || v4[86])
    {
      *((_QWORD *)this + 3383) = v11;
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 560));
      CA::WindowServer::IOMFBDisplay::update_framebuffer_locked(this, 4);
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 560));
    }
  }
LABEL_53:
  os_unfair_lock_unlock(v5);
}

uint64_t CA::WindowServer::IOMFBDisplay::update_framebuffer(CA::WindowServer::IOMFBDisplay *this, int a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)((char *)this + 560);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 560));
  CA::WindowServer::IOMFBDisplay::update_framebuffer_locked(this, a2);
  return pthread_mutex_unlock(v4);
}

uint64_t CA::IOMobileFramebuffer::swap_set_time(double a1)
{
  CAHostTimeWithTime(a1);
  return IOMobileFramebufferSwapSetTimestamps();
}

uint64_t CA::WindowServer::IOMFBDisplay::color_remap_mode(CA::WindowServer::IOMFBDisplay *this)
{
  if (*((_BYTE *)this + 28052) || (*((_WORD *)this + 328) & 0x1C00) == 0x1000)
    return 0;
  IOMobileFramebufferGetColorRemapMode();
  return 0;
}

uint64_t CA::IOMobileFramebuffer::get_wireless_surface_options(CA::IOMobileFramebuffer *this, double a2, CGSize a3, __IOSurface **a4)
{
  uint64_t WirelessSurfaceWithOptions;

  CAHostTimeWithTime(a2);
  WirelessSurfaceWithOptions = IOMobileFramebufferGetWirelessSurfaceWithOptions();
  if (!(_DWORD)WirelessSurfaceWithOptions && !IOSurfaceGetBulkAttachments())
    IOSurfaceSetBulkAttachments2();
  return WirelessSurfaceWithOptions;
}

uint64_t CA::WindowServer::IOMFBDisplay::copy_surface(CA::WindowServer::IOMFBDisplay *this, CA::WindowServer::Surface *a2, CA::WindowServer::Surface *a3, uint64_t a4, uint64_t a5, CA::Rect *a6, CA::Rect *a7, CA::ScalerStatistics *a8, float a9)
{
  uint64_t v9;
  float v18;
  float v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  CA::Rect *v38;
  uint64_t v39;
  _BOOL4 v40;
  _BOOL4 v41;
  _BOOL4 v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  char *v59;
  CA::Rect *v60;

  v9 = 0;
  if (!a2 || !a3)
    return v9;
  v18 = (*(float (**)(CA::WindowServer::Surface *, float))(*(_QWORD *)a3 + 192))(a3, a9);
  if (v18 != (*(float (**)(CA::WindowServer::Surface *))(*(_QWORD *)a2 + 192))(a2))
  {
    (*(void (**)(CA::WindowServer::Surface *))(*(_QWORD *)a3 + 192))(a3);
    (*(void (**)(CA::WindowServer::Surface *))(*(_QWORD *)a2 + 200))(a2);
  }
  v19 = *((float *)a3 + 17);
  if (v19 != *((float *)a2 + 17))
    *((float *)a2 + 17) = v19;
  v20 = *((unsigned int *)a2 + 56);
  v21 = (v20 | ((unint64_t)*((unsigned __int8 *)a2 + 228) << 32)) & 0xFFFFFFEFFFFFFFFFLL | ((((unint64_t)*((unsigned __int8 *)a3 + 228) >> 4) & 1) << 36);
  *((_DWORD *)a2 + 56) = v20;
  *((_BYTE *)a2 + 228) = BYTE4(v21);
  v22 = v21 & 0xDFFFFFFFFFLL | ((((unint64_t)*((unsigned __int8 *)a3 + 228) >> 5) & 1) << 37);
  *((_DWORD *)a2 + 56) = v20;
  *((_BYTE *)a2 + 228) = BYTE4(v22);
  v23 = (unsigned int *)*((_QWORD *)a3 + 11);
  v24 = (unsigned int *)*((_QWORD *)a2 + 11);
  if (v24 != v23)
  {
    if (v24)
    {
      v25 = v24 + 4;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
        (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
    }
    if (v23)
    {
      v28 = v23 + 4;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 + 1, v28));
    }
    *((_QWORD *)a2 + 11) = v23;
  }
  v30 = *((_OWORD *)a3 + 6);
  v31 = *((_OWORD *)a3 + 7);
  v32 = *((_OWORD *)a3 + 9);
  *((_OWORD *)a2 + 8) = *((_OWORD *)a3 + 8);
  *((_OWORD *)a2 + 9) = v32;
  *((_OWORD *)a2 + 6) = v30;
  *((_OWORD *)a2 + 7) = v31;
  v33 = *((_OWORD *)a3 + 10);
  v34 = *((_OWORD *)a3 + 11);
  v35 = *((_OWORD *)a3 + 13);
  *((_OWORD *)a2 + 12) = *((_OWORD *)a3 + 12);
  *((_OWORD *)a2 + 13) = v35;
  *((_OWORD *)a2 + 10) = v33;
  *((_OWORD *)a2 + 11) = v34;
  v36 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)a3 + 40))(a3);
  (*(void (**)(CA::WindowServer::Surface *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v36);
  (*(void (**)(CA::WindowServer::Surface *, CA::WindowServer::Surface *))(*(_QWORD *)a2 + 104))(a2, a3);
  if ((a4 & 0x4000) != 0)
    (*(void (**)(CA::WindowServer::Surface *, CA::WindowServer::Surface *))(*(_QWORD *)a2 + 112))(a2, a3);
  v37 = (*((unsigned int *)a2 + 56) | ((unint64_t)*((unsigned __int8 *)a2 + 228) << 32)) & 0xFFFFFFFDFFFFFFFFLL;
  *((_DWORD *)a2 + 56) = *((_DWORD *)a2 + 56);
  *((_BYTE *)a2 + 228) = BYTE4(v37);
  if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1832))(this))
  {
    v39 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)a3 + 88))(a3);
    (*(void (**)(CA::WindowServer::Surface *, uint64_t, _QWORD))(*(_QWORD *)a2 + 96))(a2, v39, 0);
  }
  v40 = (a4 & 0xC00) != 0;
  v60 = a7;
  if (a4 & 0xB000 | a5)
  {
    v40 = 0;
LABEL_23:
    v41 = 1;
    goto LABEL_28;
  }
  if (BYTE4(xmmword_1ECDC6AF0))
    goto LABEL_23;
  if ((a4 & 0xC00) != 0 && BYTE5(xmmword_1ECDC6AF0))
  {
    v41 = 0;
    v40 = 1;
  }
  else
  {
    v41 = (a4 & 0x800) == 0;
  }
LABEL_28:
  if (CA::ScalerUtil::get_io_service(void)::once != -1)
    dispatch_once(&CA::ScalerUtil::get_io_service(void)::once, &__block_literal_global_52);
  if (CA::ScalerUtil::get_io_service(void)::scaler_service)
    v42 = v41;
  else
    v42 = 0;
  if (!a6)
    goto LABEL_43;
  if (*(double *)a6 == 0.0)
  {
    v43 = *((double *)a6 + 1);
    if (v43 == 0.0)
    {
      LODWORD(v43) = *((_DWORD *)a2 + 14);
      v44 = (double)*(unint64_t *)&v43;
      if (*((double *)a6 + 2) == v44)
      {
        LODWORD(v44) = *((_DWORD *)a2 + 15);
        if (*((double *)a6 + 3) == (double)*(unint64_t *)&v44)
          goto LABEL_43;
      }
    }
  }
  v45 = a4;
  if (!byte_1ECDC6B03)
  {
    v45 = a4;
    if (*(double *)a6 == *((double *)a2 + 3))
    {
      v45 = a4;
      if (*((double *)a6 + 1) == *((double *)a2 + 4))
      {
        v45 = a4;
        if (*((double *)a6 + 2) == *((double *)a2 + 5))
        {
          v45 = a4;
          if (*((double *)a6 + 3) == *((double *)a2 + 6))
LABEL_43:
            v45 = a4 & 0xFFFEFFFF;
        }
      }
    }
  }
  if (v42)
  {
    v46 = (*(uint64_t (**)(CA::WindowServer::Surface *, CA::WindowServer::Surface *, uint64_t, uint64_t, CA::Rect *, CA::Rect *, CA::ScalerStatistics *, float))(*(_QWORD *)a2 + 176))(a2, a3, v45, a5, a6, v60, a8, 1.0);
    v9 = v46;
    if (!byte_1ECDC6AAD)
      goto LABEL_48;
    if ((_DWORD)v46)
      v59 = "Succeeded";
    else
      v59 = "Failed";
    goto LABEL_70;
  }
  v9 = 0;
  if (byte_1ECDC6AAD)
  {
    v59 = "Skipped";
LABEL_70:
    CA::WindowServer::copy_surface_log((CA::WindowServer *)v59, (const char *)1, (uint64_t)a2, a3, a6, v60, v38);
  }
LABEL_48:
  if ((v9 & 1) == 0 && v40)
  {
    v47 = (_QWORD *)*((_QWORD *)this + 39);
    if (v47)
    {
      v48 = (_QWORD *)*v47;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v47 + 936))(*v47, *((_QWORD *)a3 + 2));
      (*(void (**)(_QWORD *, _QWORD))(*v48 + 952))(v48, *((_QWORD *)a2 + 2));
      v49 = v48[23];
      v50 = v48[24];
      v51 = *((_QWORD *)a2 + 7);
      v48[23] = 0;
      v48[24] = v51;
      v52 = (*(uint64_t (**)(_QWORD *, CA::WindowServer::Surface *, uint64_t))(*v48 + 928))(v48, a2, 1);
      v53 = *((_QWORD *)a3 + 7);
      v48[23] = 0;
      v48[24] = v53;
      v54 = (*(uint64_t (**)(_QWORD *, CA::WindowServer::Surface *, _QWORD))(*v48 + 928))(v48, a3, 0);
      v9 = 0;
      if (v52 && v54)
      {
        (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, CA::Rect *, CA::Rect *))(*v48 + 720))(v48, v52, v54, WORD1(v45) & 1, v45, a6, v60);
        (*(void (**)(_QWORD *, _QWORD))(*v48 + 944))(v48, *((_QWORD *)a3 + 2));
        (*(void (**)(_QWORD *, _QWORD))(*v48 + 960))(v48, *((_QWORD *)a2 + 2));
        (***((void (****)(_QWORD))this + 3307))(*((_QWORD *)this + 3307));
        v48[23] = v49;
        v48[24] = v50;
        v9 = 1;
      }
    }
    else
    {
      v9 = 0;
    }
    if (!byte_1ECDC6AAD)
      goto LABEL_58;
    if ((_DWORD)v9)
      v55 = "Succeeded";
    else
      v55 = "Failed";
    goto LABEL_74;
  }
  if (byte_1ECDC6AAD)
  {
    v55 = "Skipped";
LABEL_74:
    CA::WindowServer::copy_surface_log((CA::WindowServer *)v55, 0, (uint64_t)a2, a3, a6, v60, v38);
  }
LABEL_58:
  v56 = 0x800000000;
  if ((_DWORD)v9)
    v56 = 0;
  v57 = (*((unsigned int *)a2 + 56) | ((unint64_t)*((unsigned __int8 *)a2 + 228) << 32)) & 0xFFFFFFF7FFFFFFFFLL | v56;
  *((_DWORD *)a2 + 56) = *((_DWORD *)a2 + 56);
  *((_BYTE *)a2 + 228) = BYTE4(v57);
  if ((a4 & 0x10000) != 0 && a6 && (_DWORD)v9)
  {
    *(_OWORD *)((char *)a2 + 24) = *(_OWORD *)a6;
    *(_OWORD *)((char *)a2 + 40) = *((_OWORD *)a6 + 1);
    return 1;
  }
  else
  {
    *(_OWORD *)((char *)a2 + 24) = 0u;
    *(_OWORD *)((char *)a2 + 40) = 0u;
  }
  return v9;
}

void CA::WindowServer::IOMFBDisplay::dump_framebuffer(CA::WindowServer::IOMFBDisplay *this, __IOSurface *a2)
{
  void (***v4)(_QWORD);
  const char *v5;
  char *v6;

  v4 = (void (***)(_QWORD))*((_QWORD *)this + 3307);
  if (v4)
    (**v4)(v4);
  if (*((_BYTE *)this + 28068))
    v5 = "wireless-framebuffer";
  else
    v5 = "framebuffer";
  v6 = CAIOSurfaceWriteToFileWithSuffix(a2, v5);
  if (v6)
  {
    if (*(float *)&dword_1ECDC6940 > 0.0)
      *(float *)&dword_1ECDC6940 = *(float *)&dword_1ECDC6940 + -1.0;
    free(v6);
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::set_icc_curve_with_cg_trc(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  bzero(&v11, 0x218uLL);
  if (a2)
  {
    switch(*(_DWORD *)a2)
    {
      case 0:
        LODWORD(v12) = *(_DWORD *)(a2 + 4);
        v11 = *(float *)&v12 != 1.0;
        return CA::IOMobileFramebuffer::swap_set_icc_curve((int)a1 + 25536, a3, *(_DWORD *)(a1 + 24), 0, a4, &v11);
      case 1:
        v11 = 2;
        goto LABEL_10;
      case 2:
        v11 = 3;
        goto LABEL_9;
      case 3:
        v11 = 4;
        goto LABEL_8;
      case 4:
        v11 = 5;
        v15 = *(_QWORD *)(a2 + 24);
LABEL_8:
        v14 = *(_DWORD *)(a2 + 20);
LABEL_9:
        HIDWORD(v13) = *(_DWORD *)(a2 + 16);
LABEL_10:
        LODWORD(v13) = *(_DWORD *)(a2 + 12);
        v12 = *(_QWORD *)(a2 + 4);
        return CA::IOMobileFramebuffer::swap_set_icc_curve((int)a1 + 25536, a3, *(_DWORD *)(a1 + 24), 0, a4, &v11);
      case 5:
        v8 = *(_QWORD *)(a2 + 4);
        v11 = 8;
        v13 = *(_QWORD *)(a2 + 12);
        v12 = v8 | 0x3F80000000000000;
        return CA::IOMobileFramebuffer::swap_set_icc_curve((int)a1 + 25536, a3, *(_DWORD *)(a1 + 24), 0, a4, &v11);
      case 6:
        v9 = 7;
        goto LABEL_14;
      case 7:
        v9 = 6;
LABEL_14:
        v11 = v9;
        break;
      default:
        return CA::IOMobileFramebuffer::swap_set_icc_curve((int)a1 + 25536, a3, *(_DWORD *)(a1 + 24), 0, a4, &v11);
    }
  }
  return CA::IOMobileFramebuffer::swap_set_icc_curve((int)a1 + 25536, a3, *(_DWORD *)(a1 + 24), 0, a4, &v11);
}

void CA::WindowServer::copy_surface_log(CA::WindowServer *this, const char *a2, uint64_t a3, CA::WindowServer::Surface *a4, CA::WindowServer::Surface *a5, CA::Rect *a6, CA::Rect *a7)
{
  int v10;
  uint64_t v12;
  uint64_t v13;
  size_t Width;
  size_t Height;
  uint64_t v16;
  uint64_t v17;
  double v18;
  size_t v19;
  size_t v20;
  __IOSurface *v21;
  __IOSurface *v22;
  __IOSurface *v23;
  __IOSurface *v24;
  __IOSurface *v25;
  __IOSurface *v26;
  __IOSurface *v27;
  __IOSurface *v28;
  NSObject *v29;
  const char *v30;
  __IOSurface *v31;
  size_t v32;
  __IOSurface *v33;
  size_t v34;
  __IOSurface *v35;
  size_t v36;
  __IOSurface *v37;
  CA::WindowServer *v38;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  CA::WindowServer *v42;
  __int16 v43;
  size_t v44;
  __int16 v45;
  size_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  size_t v52;
  __int16 v53;
  size_t v54;
  __int16 v55;
  size_t v56;
  __int16 v57;
  size_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  size_t v64;
  __int16 v65;
  size_t v66;
  uint64_t v67;

  v10 = (int)a2;
  v67 = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    v12 = *(_QWORD *)a5;
    v13 = *((_QWORD *)a5 + 1);
    Width = (unint64_t)*((double *)a5 + 2);
    Height = (unint64_t)*((double *)a5 + 3);
    if (a6)
    {
LABEL_3:
      v16 = *(_QWORD *)a6;
      v17 = *((_QWORD *)a6 + 1);
      v18 = *((double *)a6 + 3);
      v19 = (unint64_t)*((double *)a6 + 2);
      v20 = (unint64_t)v18;
      goto LABEL_6;
    }
  }
  else
  {
    v21 = (__IOSurface *)(*(uint64_t (**)(uint64_t, const char *, uint64_t, CA::WindowServer::Surface *, _QWORD, CA::Rect *, CA::Rect *))(*(_QWORD *)a3 + 160))(a3, a2, a3, a4, 0, a6, a7);
    Width = IOSurfaceGetWidth(v21);
    v22 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 160))(a3);
    Height = IOSurfaceGetHeight(v22);
    v12 = 0;
    v13 = 0;
    if (a6)
      goto LABEL_3;
  }
  v23 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)a4 + 160))(a4);
  v19 = IOSurfaceGetWidth(v23);
  v24 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)a4 + 160))(a4);
  v20 = IOSurfaceGetHeight(v24);
  v16 = 0;
  v17 = 0;
LABEL_6:
  if (x_log_hook_p())
  {
    v25 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 160))(a3);
    IOSurfaceGetWidth(v25);
    v26 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 160))(a3);
    IOSurfaceGetHeight(v26);
    v27 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)a4 + 160))(a4);
    IOSurfaceGetWidth(v27);
    v28 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)a4 + 160))(a4);
    IOSurfaceGetHeight(v28);
    x_log_();
  }
  else
  {
    v29 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      v38 = this;
      if (v10)
        v30 = "MSR";
      else
        v30 = "GPU";
      v31 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 160))(a3);
      v32 = IOSurfaceGetWidth(v31);
      v33 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 160))(a3);
      v34 = IOSurfaceGetHeight(v33);
      v35 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)a4 + 160))(a4);
      v36 = IOSurfaceGetWidth(v35);
      v37 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)a4 + 160))(a4);
      *(_DWORD *)buf = 136318466;
      v40 = v30;
      v41 = 2080;
      v42 = v38;
      v43 = 2048;
      v44 = v32;
      v45 = 2048;
      v46 = v34;
      v47 = 2048;
      v48 = v12;
      v49 = 2048;
      v50 = v13;
      v51 = 2048;
      v52 = Width;
      v53 = 2048;
      v54 = Height;
      v55 = 2048;
      v56 = v36;
      v57 = 2048;
      v58 = IOSurfaceGetHeight(v37);
      v59 = 2048;
      v60 = v16;
      v61 = 2048;
      v62 = v17;
      v63 = 2048;
      v64 = v19;
      v65 = 2048;
      v66 = v20;
      _os_log_impl(&dword_184457000, v29, OS_LOG_TYPE_DEFAULT, "Copy with %s: %s  dst: %ldx%ld subcoords: %f,%f %ldx%ld  src: %ldx%ld subcoords: %f,%f %ldx%ld", buf, 0x8Eu);
    }
  }
}

uint64_t ___ZN2CA19IOMobileFramebuffer10set_matrixE20IOMFB_MatrixLocationPA3_A3_Ky_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = IOMobileFramebufferSetMatrix();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

float CA::WindowServer::layer_bandwidth_v2(CA::WindowServer *this, CA::WindowServer::Surface *a2, const CA::Rect *a3, const CA::Rect *a4, double a5, float *a6, float *a7, double a8, double a9, float a10)
{
  int v13;
  int v14;
  float v15;
  float v16;
  float result;

  v13 = (int)a8;
  v14 = (int)a9;
  v15 = (float)(unint64_t)CA::WindowServer::Surface::bits_per_pixel(this) * (float)(int)a5;
  v16 = (float)((float)(v15 * (float)v13) / (float)v14) / (a10 * 8.0) + *(float *)a2;
  *(float *)a2 = v16;
  result = *(float *)a3 + (float)((float)(v15 * (float)((v13 + v14 - 1) / v14)) / (float)(a10 * 8.0));
  *(float *)a3 = result;
  return result;
}

void CA::WindowServer::rotate_surface_log(CA::WindowServer *this, CA::WindowServer::Surface *a2, const char *a3)
{
  int v3;
  __IOSurface *v5;
  __IOSurface *v6;
  OSType PixelFormat;
  unsigned int v8;
  __IOSurface *v9;
  NSObject *v10;
  __IOSurface *v11;
  IOSurfaceID ID;
  __IOSurface *v13;
  OSType v14;
  unsigned int v15;
  uint64_t v16;
  __IOSurface *v17;
  int v18;
  __IOSurface *v19;
  unsigned int v20;
  __IOSurface *v21;
  __IOSurface *v22;
  unsigned int v23;
  __IOSurface *v24;
  __IOSurface *v25;
  unsigned int v26;
  __IOSurface *v27;
  __IOSurface *v28;
  __IOSurface *v29;
  __IOSurface *v30;
  unsigned int v31;
  __IOSurface *v32;
  int v33;
  __IOSurface *v34;
  unsigned int v35;
  __IOSurface *v36;
  int v37;
  __IOSurface *v38;
  unsigned int v39;
  __IOSurface *v40;
  int v41;
  __IOSurface *v42;
  size_t Width;
  __IOSurface *v44;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  IOSurfaceID v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  size_t v58;
  __int16 v59;
  size_t Height;
  __int16 v61;
  int v62;
  uint64_t v63;

  v3 = (int)a2;
  v63 = *MEMORY[0x1E0C80C00];
  if (x_log_hook_p())
  {
    v5 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(_QWORD *)this + 160))(this);
    IOSurfaceGetID(v5);
    v6 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(_QWORD *)this + 160))(this);
    PixelFormat = IOSurfaceGetPixelFormat(v6);
    v8 = HIBYTE(PixelFormat);
    if ((PixelFormat & 0x80000000) != 0)
    {
      if (!__maskrune(v8, 0x40000uLL))
      {
LABEL_10:
        v19 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(_QWORD *)this + 160))(this);
        v20 = (IOSurfaceGetPixelFormat(v19) >> 16);
        if (v20 <= 0x7F)
        {
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v20 + 60) & 0x40000) == 0)
          {
LABEL_14:
            v22 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(_QWORD *)this + 160))(this);
            v23 = ((unsigned __int16)IOSurfaceGetPixelFormat(v22) >> 8);
            if (v23 <= 0x7F)
            {
              if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v23 + 60) & 0x40000) == 0)
              {
LABEL_18:
                v25 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(_QWORD *)this + 160))(this);
                v26 = IOSurfaceGetPixelFormat(v25);
                if (v26 <= 0x7F)
                {
                  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v26 + 60) & 0x40000) == 0)
                    goto LABEL_22;
                }
                else if (!__maskrune(v26, 0x40000uLL))
                {
LABEL_22:
                  v28 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(_QWORD *)this + 160))(this);
                  IOSurfaceGetWidth(v28);
                  v29 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(_QWORD *)this + 160))(this);
                  IOSurfaceGetHeight(v29);
                  x_log_();
                  return;
                }
                v27 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(_QWORD *)this + 160))(this);
                IOSurfaceGetPixelFormat(v27);
                goto LABEL_22;
              }
            }
            else if (!__maskrune(v23, 0x40000uLL))
            {
              goto LABEL_18;
            }
            v24 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(_QWORD *)this + 160))(this);
            IOSurfaceGetPixelFormat(v24);
            goto LABEL_18;
          }
        }
        else if (!__maskrune(v20, 0x40000uLL))
        {
          goto LABEL_14;
        }
        v21 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(_QWORD *)this + 160))(this);
        IOSurfaceGetPixelFormat(v21);
        goto LABEL_14;
      }
    }
    else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v8 + 60) & 0x40000) == 0)
    {
      goto LABEL_10;
    }
    v9 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(_QWORD *)this + 160))(this);
    IOSurfaceGetPixelFormat(v9);
    goto LABEL_10;
  }
  v10 = x_log_category_windowserver;
  if (!os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    return;
  v11 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(_QWORD *)this + 160))(this);
  ID = IOSurfaceGetID(v11);
  v13 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(_QWORD *)this + 160))(this);
  v14 = IOSurfaceGetPixelFormat(v13);
  v15 = HIBYTE(v14);
  v16 = MEMORY[0x1E0C80978];
  if ((v14 & 0x80000000) != 0)
  {
    if (__maskrune(v15, 0x40000uLL))
      goto LABEL_8;
  }
  else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v15 + 60) & 0x40000) != 0)
  {
LABEL_8:
    v17 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(_QWORD *)this + 160))(this);
    v18 = (int)IOSurfaceGetPixelFormat(v17) >> 24;
    goto LABEL_25;
  }
  v18 = 32;
LABEL_25:
  v30 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(_QWORD *)this + 160))(this);
  v31 = (IOSurfaceGetPixelFormat(v30) >> 16);
  if (v31 <= 0x7F)
  {
    if ((*(_DWORD *)(v16 + 4 * v31 + 60) & 0x40000) != 0)
      goto LABEL_27;
  }
  else if (__maskrune(v31, 0x40000uLL))
  {
LABEL_27:
    v32 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(_QWORD *)this + 160))(this);
    v33 = (int)(IOSurfaceGetPixelFormat(v32) << 8) >> 24;
    goto LABEL_30;
  }
  v33 = 32;
LABEL_30:
  v34 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(_QWORD *)this + 160))(this);
  v35 = ((unsigned __int16)IOSurfaceGetPixelFormat(v34) >> 8);
  if (v35 <= 0x7F)
  {
    if ((*(_DWORD *)(v16 + 4 * v35 + 60) & 0x40000) != 0)
      goto LABEL_32;
  }
  else if (__maskrune(v35, 0x40000uLL))
  {
LABEL_32:
    v36 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(_QWORD *)this + 160))(this);
    v37 = (__int16)IOSurfaceGetPixelFormat(v36) >> 8;
    goto LABEL_35;
  }
  v37 = 32;
LABEL_35:
  v38 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(_QWORD *)this + 160))(this);
  v39 = IOSurfaceGetPixelFormat(v38);
  if (v39 <= 0x7F)
  {
    if ((*(_DWORD *)(v16 + 4 * v39 + 60) & 0x40000) != 0)
      goto LABEL_37;
LABEL_39:
    v41 = 32;
    goto LABEL_40;
  }
  if (!__maskrune(v39, 0x40000uLL))
    goto LABEL_39;
LABEL_37:
  v40 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(_QWORD *)this + 160))(this);
  v41 = (char)IOSurfaceGetPixelFormat(v40);
LABEL_40:
  v42 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(_QWORD *)this + 160))(this);
  Width = IOSurfaceGetWidth(v42);
  v44 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(_QWORD *)this + 160))(this);
  *(_DWORD *)buf = 136317186;
  v46 = "Display";
  v47 = 1024;
  v48 = ID;
  v49 = 1024;
  v50 = v18;
  v51 = 1024;
  v52 = v33;
  v53 = 1024;
  v54 = v37;
  v55 = 1024;
  v56 = v41;
  v57 = 2048;
  v58 = Width;
  v59 = 2048;
  Height = IOSurfaceGetHeight(v44);
  v61 = 1024;
  v62 = v3;
  _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_DEFAULT, "Rotate with %s: Surface 0x%x %c%c%c%c [%zu x %zu] rotation_flags 0x%x", buf, 0x44u);
}

__n128 X::small_vector_base<std::pair<unsigned long,unsigned int>>::push_back(uint64_t a1, __n128 *a2)
{
  __n128 *v4;
  __int128 *v5;
  uint64_t v6;
  unint64_t v7;
  __int128 *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 *v15;
  __int128 *v16;
  _OWORD *v17;
  __int128 v18;
  __n128 result;

  v5 = *(__int128 **)a1;
  v4 = *(__n128 **)(a1 + 8);
  v6 = ((uint64_t)v4 - *(_QWORD *)a1) >> 4;
  v7 = *(_QWORD *)(a1 + 24);
  if (v7 < v6 + 1)
  {
    v8 = *(__int128 **)(a1 + 16);
    v9 = (v7 + 1) | ((v7 + 1) >> 1) | (((v7 + 1) | ((v7 + 1) >> 1)) >> 2);
    v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
    v11 = v10 | (v10 >> 16) | ((v10 | (v10 >> 16)) >> 32);
    if (v11 + 1 > v6 + 1)
      v12 = v11 + 1;
    else
      v12 = v6 + 1;
    v13 = malloc_type_malloc(16 * v12, 0x1000040D9A13B51uLL);
    v14 = v13;
    v15 = *(__int128 **)a1;
    v16 = *(__int128 **)(a1 + 8);
    if (*(__int128 **)a1 != v16)
    {
      v17 = v13;
      do
      {
        v18 = *v15++;
        *v17++ = v18;
      }
      while (v15 != v16);
    }
    if (v5 != v8)
      free(*(void **)a1);
    v4 = (__n128 *)&v14[v6];
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 24) = v12;
  }
  result = *a2;
  *v4 = *a2;
  *(_QWORD *)(a1 + 8) += 16;
  return result;
}

double CA::WindowServer::IOMFBDisplay::fetch_default_framebuffer(CA::WindowServer::IOMFBDisplay *this)
{
  double result;

  *((_BYTE *)this + 28066) = 1;
  IOMobileFramebufferGetLayerDefaultSurface();
  return result;
}

void std::exchange[abi:nn180100]<X::small_vector<void({block_pointer})(__CFDictionary const*),4ul>,X::small_vector<void({block_pointer})(__CFDictionary const*),4ul>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  X::small_vector_base<void({block_pointer})(__CFDictionary const*)>::small_vector_base((uint64_t **)a1, a2, (uint64_t *)(a1 + 32));
  if (a2 != a3)
    X::small_vector_base<void({block_pointer})(__CFDictionary const*)>::move(a2, a3, (_QWORD *)(a2 + 32));
}

_QWORD *std::vector<std::unique_ptr<CA::WindowServer::IOMFBDisplay::FrameInfo>>::push_back[abi:nn180100](_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v3 = result;
  v26 = *MEMORY[0x1E0C80C00];
  v4 = result + 2;
  v5 = result[2];
  v6 = (_QWORD *)result[1];
  if ((unint64_t)v6 >= v5)
  {
    v9 = ((uint64_t)v6 - *result) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v10 = v5 - *result;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v25 = v4;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v12);
    else
      v13 = 0;
    v14 = (_QWORD *)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v24 = v15;
    v16 = *a2;
    *a2 = 0;
    *v14 = v16;
    v8 = v14 + 1;
    v23.i64[1] = (uint64_t)(v14 + 1);
    v18 = (_QWORD *)*v3;
    v17 = (_QWORD *)v3[1];
    if (v17 == (_QWORD *)*v3)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *--v17;
        *v17 = 0;
        *--v14 = v19;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)v3;
      v8 = (_QWORD *)v23.i64[1];
      v15 = v24;
    }
    *v3 = v14;
    v3[1] = v8;
    v23 = v20;
    v21 = v3[2];
    v3[2] = v15;
    v24 = v21;
    v22 = v20.i64[0];
    result = (_QWORD *)std::__split_buffer<std::unique_ptr<CA::WindowServer::IOMFBDisplay::FrameInfo>>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    v7 = *a2;
    *a2 = 0;
    *v6 = v7;
    v8 = v6 + 1;
  }
  v3[1] = v8;
  return result;
}

xpc_object_t ___ZN2CA12WindowServer12IOMFBDisplay32send_refmode_residency_telemetryEv_block_invoke(uint64_t a1)
{
  xpc_object_t v2;

  v2 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v2, "is_in_reference_mode_BOOL", *(_BYTE *)(a1 + 32));
  return v2;
}

CA::WindowServer::Display *CA::WindowServer::IOMFBDisplay::IOMFBDisplay(uint64_t a1)
{
  int v1;
  int v2;
  char v3;
  char v4;
  CA::WindowServer::Display *v5;
  CA::WindowServer::Display *v6;
  char *v7;
  char *v8;
  int32x4_t *v9;
  _DWORD *v10;
  const __CFString *v11;
  CA::WindowServer::Display *v12;
  __int128 v13;
  float *v19;
  char *v20;
  int v21;
  _BYTE *v22;
  _BYTE *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  CFTypeRef cf;
  uint64_t v31;

  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v31 = *MEMORY[0x1E0C80C00];
  v7 = (char *)v5 + 27300;
  v8 = (char *)v5 + 27009;
  v9 = (int32x4_t *)((char *)v5 + 25512);
  v10 = (_DWORD *)((char *)v5 + 745);
  v12 = CA::WindowServer::Display::Display(v5, v11);
  *(_QWORD *)v12 = off_1E158CF30;
  *((_QWORD *)v12 + 3188) = 0;
  v9->i32[0] = 0;
  v9[1].i32[0] = 0;
  *((_QWORD *)v12 + 3192) = 0;
  v9[2].i8[0] = 0;
  v9[2].i8[8] = 0;
  *((_QWORD *)v12 + 3195) = 0;
  *(_QWORD *)&v13 = -1;
  *((_QWORD *)&v13 + 1) = -1;
  *((_OWORD *)v12 + 1598) = v13;
  *((_OWORD *)v12 + 1599) = v13;
  *((_QWORD *)v12 + 3202) = 0;
  v9[7].i32[0] = 0;
  *(_OWORD *)((char *)v12 + 25752) = 0u;
  *(_OWORD *)((char *)v12 + 25768) = 0u;
  *(_OWORD *)((char *)v12 + 25784) = 0u;
  *(_OWORD *)((char *)v12 + 25800) = 0u;
  *(_OWORD *)((char *)v12 + 25816) = 0u;
  *(_OWORD *)((char *)v12 + 25832) = 0u;
  *(_OWORD *)((char *)v12 + 25848) = 0u;
  *(_OWORD *)((char *)v12 + 25864) = 0u;
  *(_OWORD *)((char *)v12 + 25880) = 0u;
  *((_DWORD *)v12 + 6483) = 0;
  *(_QWORD *)((char *)v12 + 25924) = 0;
  *(_OWORD *)((char *)v12 + 25908) = 0u;
  *((_QWORD *)v12 + 3242) = (char *)v12 + 25968;
  *((_QWORD *)v12 + 3243) = (char *)v12 + 25968;
  *((_QWORD *)v12 + 3244) = (char *)v12 + 25968;
  *((_QWORD *)v12 + 3245) = 4;
  v9[31].i32[2] = 0;
  v9[36].i16[0] = 10;
  v9[39].i32[1] = 1065353216;
  _Q1 = vdupq_n_s32(0x7FC00000u);
  *(_QWORD *)((char *)v12 + 26148) = _Q1.i64[0];
  v9[41] = _Q1;
  v9[42] = _Q1;
  *(_OWORD *)((char *)v12 + 26216) = 0u;
  v9[43] = (int32x4_t)xmmword_18474E9E0;
  *((_QWORD *)v12 + 3279) = 0;
  *(_OWORD *)((char *)v12 + 26244) = 0u;
  *(_OWORD *)((char *)v12 + 26260) = 0u;
  *((_BYTE *)v12 + 26276) = 0;
  v9[48].i32[0] = 1074580685;
  *(_QWORD *)((char *)v12 + 26297) = 0;
  *(_OWORD *)((char *)v12 + 26284) = 0u;
  *((_OWORD *)v12 + 1646) = 0u;
  *(_QWORD *)((char *)v12 + 26322) = 0;
  *(_OWORD *)((char *)v12 + 26308) = 0u;
  *((_OWORD *)v12 + 1647) = xmmword_18474DF40;
  v9[53].i32[2] = 0;
  *((_QWORD *)v12 + 3297) = 0;
  v9[54].i8[8] = v4;
  v9[54].i8[10] = v4;
  *((_OWORD *)v12 + 1650) = 0u;
  *((_OWORD *)v12 + 1651) = 0u;
  v9[57].i32[2] = 1065353216;
  v9[58].i32[0] = 0;
  *((_OWORD *)v12 + 1654) = 0u;
  *((_OWORD *)v12 + 1655) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *((_QWORD *)v12 + 3325) = _Q1.i64[0];
  *(_OWORD *)((char *)v12 + 26680) = 0u;
  *((_DWORD *)v12 + 6682) = 1065353216;
  *(_OWORD *)((char *)v12 + 26696) = xmmword_18475F220;
  *(_OWORD *)((char *)v12 + 26712) = unk_18475F230;
  *((_DWORD *)v12 + 6691) = 1065353216;
  *(_OWORD *)((char *)v12 + 26732) = xmmword_18475F220;
  *(_OWORD *)((char *)v12 + 26748) = unk_18475F230;
  *((_DWORD *)v12 + 6700) = 1065353216;
  *((_OWORD *)v12 + 1674) = unk_18475F230;
  *((_OWORD *)v12 + 1673) = xmmword_18475F220;
  *(_QWORD *)((char *)v12 + 26804) = _Q1.i64[0];
  v9[81].i32[1] = 1065353216;
  v9[81].i8[8] = 0;
  *((_DWORD *)v12 + 6713) = 1065353216;
  *(_OWORD *)((char *)v12 + 26820) = xmmword_18475F220;
  *(_OWORD *)((char *)v12 + 26836) = unk_18475F230;
  v9[84].i32[0] = 1065353216;
  v9[84].i8[4] = 1;
  *((_OWORD *)v12 + 1679) = xmmword_18474DFB0;
  *((_OWORD *)v12 + 1680) = xmmword_18474DFC0;
  *((_OWORD *)v12 + 1681) = xmmword_18474DFD0;
  *((_OWORD *)v12 + 1682) = xmmword_18474DFE0;
  v9[88].i32[2] = 1065353216;
  v9[88].i8[12] = 1;
  v9[92].i8[0] = 0;
  *((_BYTE *)v12 + 27008) = 0;
  *((_OWORD *)v12 + 1687) = 0u;
  *(_WORD *)v8 = 257;
  *((_QWORD *)v12 + 3382) = 0;
  *(_OWORD *)((char *)v12 + 27027) = 0u;
  *(_OWORD *)((char *)v12 + 27043) = 0u;
  *(_OWORD *)((char *)v12 + 27011) = 0u;
  *((_QWORD *)v12 + 3383) = -1;
  *(_OWORD *)((char *)v12 + 27112) = 0u;
  *(_OWORD *)((char *)v12 + 27128) = 0u;
  *((_OWORD *)v12 + 1693) = 0u;
  *((_OWORD *)v12 + 1692) = 0u;
  *(_DWORD *)(v8 + 135) = 1065353216;
  *((_OWORD *)v12 + 1697) = 0u;
  *((_DWORD *)v12 + 6802) = 0;
  *(_OWORD *)((char *)v12 + 27192) = 0u;
  *((_DWORD *)v12 + 6824) = 0;
  *((_OWORD *)v12 + 1705) = 0u;
  *((_OWORD *)v12 + 1704) = 0u;
  *((_OWORD *)v12 + 1703) = 0u;
  *((_OWORD *)v12 + 1702) = 0u;
  *((_OWORD *)v12 + 1701) = 0u;
  *(_QWORD *)v7 = 0xFFFFFFFFLL;
  *((_DWORD *)v7 + 27) = 0;
  *(_OWORD *)((char *)v12 + 27448) = 0u;
  *(_OWORD *)((char *)v12 + 27464) = 0u;
  *((_OWORD *)v12 + 1708) = 0u;
  *((_OWORD *)v12 + 1707) = 0u;
  *((_DWORD *)v12 + 6845) = 0;
  *(_QWORD *)((char *)v12 + 27372) = 0;
  *(_OWORD *)((char *)v12 + 27356) = 0u;
  *((_DWORD *)v12 + 6860) = 0;
  *((_QWORD *)v12 + 3429) = 0;
  *(_OWORD *)((char *)v12 + 27416) = 0u;
  *((_DWORD *)v7 + 45) = 1065353216;
  *((_QWORD *)v12 + 3437) = 0;
  *((_DWORD *)v7 + 51) = 0;
  *((_DWORD *)v7 + 85) = 0;
  *((_DWORD *)v7 + 111) = 0;
  *(_OWORD *)((char *)v12 + 27722) = 0u;
  *((_OWORD *)v12 + 1732) = 0u;
  *((_OWORD *)v12 + 1731) = 0u;
  *((_QWORD *)v12 + 3469) = (char *)v12 + 27784;
  *((_QWORD *)v12 + 3470) = (char *)v12 + 27784;
  *((_QWORD *)v12 + 3471) = (char *)v12 + 27784;
  *((_QWORD *)v12 + 3472) = 4;
  *((_DWORD *)v7 + 145) = 0;
  *((_DWORD *)v7 + 147) = 0;
  *(_OWORD *)((char *)v12 + 27896) = 0u;
  *(_OWORD *)((char *)v12 + 27912) = 0u;
  *((_DWORD *)v7 + 157) = 1065353216;
  *((_QWORD *)v12 + 3492) = (char *)v12 + 27968;
  *((_QWORD *)v12 + 3493) = (char *)v12 + 27968;
  *((_QWORD *)v12 + 3494) = (char *)v12 + 27968;
  *((_QWORD *)v12 + 3495) = 4;
  v7[744] = 0;
  v7[748] = 0;
  v7[752] = (v2 - 1) < 2;
  v7[760] = 1;
  v7[763] = 1;
  *(_WORD *)((char *)v12 + 28065) = 0;
  v7[767] = 0;
  v7[768] = v2 == 2;
  *((_WORD *)v7 + 390) = 0;
  *(_WORD *)((char *)v12 + 28077) = 0;
  *(_QWORD *)((char *)v12 + 28069) = 0;
  v7[782] = 1;
  *(_WORD *)((char *)v12 + 28093) = 0;
  v7[796] = 0;
  v7[799] = 0;
  v7[803] = 0;
  *(_WORD *)((char *)v12 + 28105) = 0;
  v7[807] = 0;
  *((_WORD *)v7 + 406) = 0;
  *(_WORD *)((char *)v12 + 28135) = 0;
  *((_BYTE *)v12 + 28087) = 0;
  *(_DWORD *)((char *)v12 + 28083) = 0;
  x_thread_init_mutex((pthread_mutex_t *)((char *)v12 + 25688), 1);
  *v10 |= 0x1040u;
  if ((CA::WindowServer::IOMFBDisplay::IOMFBDisplay(__CFString const*,unsigned int,unsigned int,IOMFBDisplayType)::initialized & 1) == 0)
  {
    if (CA::WindowServer::Display::benchmark_mode(0, v19))
      CA::WindowServer::page_flipping_disabled = 1;
    v20 = getenv("CA_CLONE_OVERSCAN_AMOUNT");
    if (v20)
    {
      *(float *)&v21 = atof(v20);
      CA::WindowServer::clone_overscan_amounts_y = v21;
      CA::WindowServer::clone_overscan_amounts_x = v21;
    }
    CA::WindowServer::IOMFBDisplay::IOMFBDisplay(__CFString const*,unsigned int,unsigned int,IOMFBDisplayType)::initialized = 1;
  }
  v22 = (_BYTE *)*((_QWORD *)v6 + 3420);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v6 + 3422) - (_QWORD)v22) >> 3) <= 0x3F)
  {
    v23 = (_BYTE *)*((_QWORD *)v6 + 3421);
    v24 = (char *)operator new(0x600uLL);
    v25 = &v24[24 * ((v23 - v22) / 24)];
    v26 = v25;
    if (v23 != v22)
    {
      v27 = &v24[24 * ((v23 - v22) / 24)];
      do
      {
        v28 = *(_OWORD *)(v23 - 24);
        v26 = v27 - 24;
        *((_QWORD *)v27 - 1) = *((_QWORD *)v23 - 1);
        *(_OWORD *)(v27 - 24) = v28;
        v23 -= 24;
        v27 -= 24;
      }
      while (v23 != v22);
    }
    *((_QWORD *)v6 + 3420) = v26;
    *((_QWORD *)v6 + 3421) = v25;
    *((_QWORD *)v6 + 3422) = v24 + 1536;
    if (v22)
      operator delete(v22);
  }
  cf = 0;
  if (v9[1].i32[0])
    IOMobileFramebufferOpen();
  else
    IOMobileFramebufferOpenByName();
  return v6;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_aot_service_property(CA::WindowServer::IOMFBDisplay *this, int a2)
{
  unsigned int *v3;
  NSObject *v4;
  uint64_t result;
  CFTypeRef *v6;
  uint8_t buf[4];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = (unsigned int *)((char *)this + 25528);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v4 = x_log_category_flipbook;
    if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v8 = a2;
      _os_log_impl(&dword_184457000, v4, OS_LOG_TYPE_DEFAULT, "set aot service property: %d", buf, 8u);
    }
  }
  *((_BYTE *)v3 + 2575) = a2;
  result = *v3;
  if ((_DWORD)result)
  {
    v6 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (!a2)
      v6 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    return IORegistryEntrySetCFProperty(result, CFSTR("AOTEnable"), *v6);
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_aot_power_saving_mode_enabled(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  NSObject *v4;
  uint8_t buf[8];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = this + 28104;
  if (*(_BYTE *)(this + 28104))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v4 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = a2;
        _os_log_impl(&dword_184457000, v4, OS_LOG_TYPE_DEFAULT, "set aot power saving mode enabled: %d", buf, 8u);
      }
    }
    *(_BYTE *)(v2 + 1) = a2;
    *(_QWORD *)buf = a2;
    return IOMobileFramebufferSetParameter();
  }
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::find_fastest_display(CA::WindowServer::IOMFBDisplay *this, CA::Render::Object *a2, pthread_mutex_t *a3, void *a4)
{
  float v6;
  unsigned int v7;
  unsigned int sig_high;
  uint64_t result;

  if (*(unsigned __int8 *)(*((_QWORD *)a2 + 91) + 2) | *(unsigned __int8 *)(*((_QWORD *)a2 + 91) + 3))
  {
    v6 = 1.0 / (*(double (**)(CA::Render::Object *))(*(_QWORD *)a2 + 744))(a2);
    v7 = vcvtas_u32_f32(v6);
    pthread_mutex_lock(a3);
    sig_high = HIDWORD(a3[1].__sig);
    if (sig_high <= v7 && (sig_high != v7 || *((_BYTE *)a2 + 28052) || (*((_WORD *)a2 + 328) & 0x1C00) == 0x1000))
    {
      LODWORD(a3[1].__sig) = *((_DWORD *)a2 + 6);
      HIDWORD(a3[1].__sig) = v7;
    }
    return pthread_mutex_unlock(a3);
  }
  return result;
}

uint64_t ___ZN2CA12WindowServer12IOMFBDisplayC2EPK10__CFStringjj16IOMFBDisplayType_block_invoke(uint64_t a1, int token)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v4[0] = 0;
  result = notify_get_state(token, v4);
  if (!(_DWORD)result)
    *(_BYTE *)(v2 + 28134) = v4[0] != 0;
  return result;
}

void CA::WindowServer::IOMFBDisplay::create_power_assertion(CA::WindowServer::IOMFBDisplay *this, CA::Render::Object *a2, char *a3, void *a4)
{
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL (*v15);
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 *v26;
  __int128 *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t buf[4];
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a3 == *((_DWORD *)a2 + 6) && (*((_DWORD *)a3 + 2) + 1) >= 2)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v6 = x_log_category_display_state;
      if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *((_DWORD *)a2 + 6);
        v8 = *((_DWORD *)a3 + 1);
        v9 = *((_DWORD *)a3 + 2);
        v10 = *((_DWORD *)a3 + 3);
        *(_DWORD *)buf = 67109888;
        v35 = v7;
        v36 = 1024;
        v37 = v8;
        v38 = 1024;
        v39 = v9;
        v40 = 1024;
        v41 = v10;
        _os_log_impl(&dword_184457000, v6, OS_LOG_TYPE_DEFAULT, "Creating power assertion for display=%u pid=%i port=%u reason=%i", buf, 0x1Au);
      }
    }
    os_unfair_lock_lock((os_unfair_lock_t)a2 + 6936);
    v11 = *(_QWORD *)(a3 + 4);
    v12 = *((unsigned int *)a3 + 3);
    v13 = mach_absolute_time();
    v14 = (unint64_t)CATimeWithHostTime(v13);
    *(_DWORD *)buf = 0;
    CA::Render::Server::add_dead_name_watch((CA::Render::Server *)*((unsigned int *)a3 + 2), (mach_port_t *)buf, (unsigned int *)CA::WindowServer::handle_power_assertion_dead_name, v15);
    v16 = (char *)*((_QWORD *)a2 + 3470);
    v17 = *((_QWORD *)a2 + 3469);
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v16[-v17] >> 3);
    v19 = *((_QWORD *)a2 + 3472);
    if (v19 < v18 + 1)
    {
      v33 = *((_QWORD *)a2 + 3471);
      v20 = (v19 + 1) | ((v19 + 1) >> 1) | (((v19 + 1) | ((v19 + 1) >> 1)) >> 2);
      v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
      v22 = v21 | (v21 >> 16) | ((v21 | (v21 >> 16)) >> 32);
      if (v22 + 1 > v18 + 1)
        v23 = v22 + 1;
      else
        v23 = v18 + 1;
      v24 = (char *)malloc_type_malloc(24 * v23, 0x10000401E56706BuLL);
      v25 = v24;
      v26 = (__int128 *)*((_QWORD *)a2 + 3469);
      v27 = (__int128 *)*((_QWORD *)a2 + 3470);
      if (v26 != v27)
      {
        v28 = v24;
        do
        {
          v29 = *v26;
          *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
          *(_OWORD *)v28 = v29;
          v28 += 24;
          v26 = (__int128 *)((char *)v26 + 24);
        }
        while (v26 != v27);
      }
      if (v17 != v33)
        free(*((void **)a2 + 3469));
      *((_QWORD *)a2 + 3469) = v25;
      v16 = &v25[24 * v18];
      *((_QWORD *)a2 + 3470) = v16;
      *((_QWORD *)a2 + 3472) = v23;
    }
    *(_QWORD *)v16 = v11;
    *((_QWORD *)v16 + 1) = v12;
    *((_QWORD *)v16 + 2) = v14;
    v30 = *((_QWORD *)a2 + 3470) + 24;
    *((_QWORD *)a2 + 3470) = v30;
    if (v30 - *((_QWORD *)a2 + 3469) == 24 || a3[16])
    {
      *((_DWORD *)a2 + 6970) = 1;
      CA::WindowServer::IOMFBDisplay::power_assertion_changed((os_unfair_lock_s *)a2, a3[16]);
    }
    if ((_DWORD)v12 == 1)
    {
      v31 = mach_absolute_time();
      *(double *)&CATailspinMinimumTimestamp = CATimeWithHostTime(v31) + 10.0;
      if (*((_BYTE *)a2 + 28052) || (*((_WORD *)a2 + 328) & 0x1C00) == 0x1000)
      {
        *((_BYTE *)a2 + 28048) = 1;
        v32 = mach_absolute_time();
        *((double *)a2 + 3309) = CATimeWithHostTime(v32) + 1.0;
      }
    }
    a3[17] = 1;
    os_unfair_lock_unlock((os_unfair_lock_t)a2 + 6936);
  }
}

void CA::WindowServer::IOMFBDisplay::destroy_power_assertion(CA::WindowServer::IOMFBDisplay *this, os_unfair_lock_s *a2, unsigned int *a3, void *a4)
{
  unsigned int *v6;
  unsigned int *v7;
  NSObject *v8;
  uint32_t os_unfair_lock_opaque;
  unsigned int v10;
  NSObject *v11;
  uint32_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint8_t buf[4];
  uint32_t v20;
  __int16 v21;
  unsigned int v22;
  __int16 v23;
  unsigned int v24;
  __int16 v25;
  unsigned int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if ((*a3 == 0xFFFF || *a3 == a2[6]._os_unfair_lock_opaque) && a3[1] + 1 >= 2)
  {
    os_unfair_lock_lock(a2 + 6936);
    v6 = *(unsigned int **)&a2[6938]._os_unfair_lock_opaque;
    v7 = *(unsigned int **)&a2[6940]._os_unfair_lock_opaque;
    if (v6 == v7)
    {
LABEL_7:
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v8 = x_log_category_display_state;
        if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_ERROR))
        {
          os_unfair_lock_opaque = a2[6]._os_unfair_lock_opaque;
          v10 = a3[1];
          *(_DWORD *)buf = 67109376;
          v20 = os_unfair_lock_opaque;
          v21 = 1024;
          v22 = v10;
          _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_ERROR, "No power assertion found on display %u for port %u", buf, 0xEu);
        }
      }
    }
    else
    {
      while (v6[1] != a3[1])
      {
        v6 += 6;
        if (v6 == v7)
          goto LABEL_7;
      }
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v11 = x_log_category_display_state;
        if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
        {
          v12 = a2[6]._os_unfair_lock_opaque;
          v13 = *v6;
          v14 = v6[1];
          v15 = v6[2];
          *(_DWORD *)buf = 67109888;
          v20 = v12;
          v21 = 1024;
          v22 = v13;
          v23 = 1024;
          v24 = v14;
          v25 = 1024;
          v26 = v15;
          _os_log_impl(&dword_184457000, v11, OS_LOG_TYPE_DEFAULT, "Destroying power assertion for display=%u pid=%i port=%u reason=%i", buf, 0x1Au);
        }
      }
      v16 = *(_QWORD *)&a2[6940]._os_unfair_lock_opaque;
      v17 = *(_OWORD *)(v16 - 24);
      *((_QWORD *)v6 + 2) = *(_QWORD *)(v16 - 8);
      *(_OWORD *)v6 = v17;
      v18 = *(_QWORD *)&a2[6940]._os_unfair_lock_opaque;
      if (v18 <= *(_QWORD *)&a2[6938]._os_unfair_lock_opaque)
        __assert_rtn("pop_back", "x-small-vector.h", 410, "_end > _begin && \"pop_back on empty container\"");
      *(_QWORD *)&a2[6940]._os_unfair_lock_opaque = v18 - 24;
      CA::Render::Server::remove_dead_name_watch((CA::Render::Server *)a3[1]);
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], a3[1]);
      if (*(_QWORD *)&a2[6938]._os_unfair_lock_opaque == *(_QWORD *)&a2[6940]._os_unfair_lock_opaque)
      {
        a2[6970]._os_unfair_lock_opaque = 0;
        CA::WindowServer::IOMFBDisplay::power_assertion_changed(a2, 0);
      }
      *((_BYTE *)a3 + 8) = 1;
    }
    os_unfair_lock_unlock(a2 + 6936);
  }
}

void CA::WindowServer::IOMFBDisplay::copy_power_assertion_info(CA::WindowServer::IOMFBDisplay *this, os_unfair_lock_s *a2, _QWORD *a3, void *a4)
{
  int *v6;
  int *i;
  uint64_t v8;
  int v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *lock;
  _OWORD buffer[2];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a3 == a2[6]._os_unfair_lock_opaque)
  {
    lock = a2 + 6936;
    os_unfair_lock_lock(a2 + 6936);
    v6 = *(int **)&a2[6938]._os_unfair_lock_opaque;
    for (i = *(int **)&a2[6940]._os_unfair_lock_opaque; v6 != i; v6 += 6)
    {
      memset(buffer, 0, sizeof(buffer));
      proc_name(*v6, buffer, 0x20u);
      v8 = a3[1];
      v9 = v6[2];
      v10 = "Unblank";
      switch(v9)
      {
        case 1:
          break;
        case 2:
          v10 = "Audio";
          break;
        case 3:
          v10 = "SecureIndicator";
          break;
        case 4:
          v10 = "BIM";
          break;
        default:
          v11 = "Debug";
          if (v9 != 0xFFFF)
            v11 = "Unknown";
          if (v9 == 65534)
            v10 = "BLSAssertion";
          else
            v10 = v11;
          break;
      }
      v12 = mach_absolute_time();
      CATimeWithHostTime(v12);
      x_stream_printf(v8, "\t\t %sPowerAssertion from %s[%d] since %.0f seconds ago\n", v13, v14, v15, v16, v17, v18, (uint64_t)v10);
    }
    os_unfair_lock_unlock(lock);
  }
}

void CA::WindowServer::IOMFBDisplay::register_for_disallowed_layers_notification(CA::WindowServer::IOMFBDisplay *this, os_unfair_lock_s *a2, unsigned int *a3, void *a4)
{
  NSObject *v6;
  uint32_t os_unfair_lock_opaque;
  unsigned int v8;
  os_unfair_lock_s *v9;
  os_unfair_lock_s *v10;
  CA::Render::Server *v11;
  BOOL (*v12);
  uint8_t buf[4];
  uint32_t v14;
  __int16 v15;
  unsigned int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*a3 == a2[6]._os_unfair_lock_opaque && a3[1] + 1 >= 2)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v6 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        os_unfair_lock_opaque = a2[6]._os_unfair_lock_opaque;
        v8 = a3[1];
        *(_DWORD *)buf = 67109376;
        v14 = os_unfair_lock_opaque;
        v15 = 1024;
        v16 = v8;
        _os_log_impl(&dword_184457000, v6, OS_LOG_TYPE_DEFAULT, "Register for disallowed layers notifications for display=%u client_port=%u", buf, 0xEu);
      }
    }
    v9 = a2 + 6972;
    os_unfair_lock_lock(a2 + 6972);
    v10 = a2 + 6974;
    v11 = (CA::Render::Server *)a3[1];
    if (!std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v10, a3[1]))
    {
      *(_DWORD *)buf = 0;
      CA::Render::Server::add_dead_name_watch(v11, (mach_port_t *)buf, (unsigned int *)CA::WindowServer::handle_disallowed_layers_notification_dead_name, v12);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v10, a3[1], a3[1]);
    }
    *((_BYTE *)a3 + 8) = 1;
    os_unfair_lock_unlock(v9);
  }
}

void CA::WindowServer::IOMFBDisplay::unregister_for_disallowed_layers_notification(CA::WindowServer::IOMFBDisplay *this, os_unfair_lock_s *a2, _BYTE *a3, void *a4)
{
  uint64_t *v6;
  CA::Render::Server *v7;
  NSObject *v8;
  uint32_t os_unfair_lock_opaque;
  uint8_t buf[4];
  uint32_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a3 == 0xFFFF || *(_DWORD *)a3 == a2[6]._os_unfair_lock_opaque)
    && (*((_DWORD *)a3 + 1) + 1) >= 2)
  {
    os_unfair_lock_lock(a2 + 6972);
    v6 = *(uint64_t **)&a2[6978]._os_unfair_lock_opaque;
    if (v6)
    {
      v7 = (CA::Render::Server *)*((unsigned int *)a3 + 1);
      while (*((_DWORD *)v6 + 4) != (_DWORD)v7)
      {
        v6 = (uint64_t *)*v6;
        if (!v6)
          goto LABEL_14;
      }
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v8 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
        {
          os_unfair_lock_opaque = a2[6]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 67109376;
          v11 = os_unfair_lock_opaque;
          v12 = 1024;
          v13 = (int)v7;
          _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_DEFAULT, "Destroying disallowed layers notification port for display=%u port=%u", buf, 0xEu);
        }
      }
      CA::Render::Server::remove_dead_name_watch(v7);
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], (mach_port_name_t)v7);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__erase_unique<unsigned int>(&a2[6974]._os_unfair_lock_opaque, v7);
      a3[8] = 1;
    }
LABEL_14:
    os_unfair_lock_unlock(a2 + 6972);
  }
}

uint64_t CA::WindowServer::handle_disallowed_layers_notification_dead_name(CA::WindowServer *this)
{
  _DWORD v2[3];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2[1] = (_DWORD)this;
  v2[2] = 0;
  v2[0] = 0xFFFF;
  CA::Render::post_notification(0x25u, 0, (uint64_t)v2, 0);
  return 1;
}

void CA::WindowServer::IOMFBDisplay::power_assertion_changed(os_unfair_lock_s *this, int a2)
{
  os_unfair_lock_s *v4;

  v4 = this + 179;
  os_unfair_lock_lock(this + 179);
  CA::WindowServer::IOMFBDisplay::update_power_state_locked((CA::WindowServer::IOMFBDisplay *)this, a2, 0);
  os_unfair_lock_unlock(v4);
}

uint64_t CA::WindowServer::handle_power_assertion_dead_name(CA::WindowServer *this)
{
  _DWORD v2[3];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2[1] = (_DWORD)this;
  v2[2] = 0;
  v2[0] = 0xFFFF;
  CA::Render::post_notification(0x44u, 0, (uint64_t)v2, 0);
  return 1;
}

void CA::WindowServer::IOMFBDisplay::~IOMFBDisplay(CA::WindowServer::IOMFBDisplay *this)
{
  char *v2;
  const void **v3;
  malloc_zone_t *malloc_zone;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  malloc_zone_t *v10;
  uint64_t *v11;
  ipc_space_t *v12;
  mach_port_name_t v13;
  void *v14;
  void *v15;
  void *v16;
  const void *v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  void *v27;
  void **v28;
  void **v29;
  CA::WindowServer::IOMFBDisplay **v30;
  CA::WindowServer::IOMFBDisplay **v31;
  CA::WindowServer::IOMFBDisplay **v32;
  size_t v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t j;
  const void *v42;
  const void *v43;
  const void *v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  const void *v48;
  const void *v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  void *v53;
  CA::WindowServer::IOMFBDisplay::FrameInfo **v54;
  CA::WindowServer::IOMFBDisplay::FrameInfo **v55;
  void *v56;
  const void *v57;

  v2 = (char *)this + 25528;
  *(_QWORD *)this = off_1E158CF30;
  CA::WindowServer::IOMFBDisplay::release_everything(this);
  if (*((_QWORD *)this + 3192))
  {
    if (v2[2524])
    {
      IOMobileFramebufferSetDisplayDevice();
      CA::WindowServer::IOMFBDisplay::set_all_layers_to_null((uint64_t)this, 0);
    }
    IOMobileFramebufferDisableVSyncNotifications();
    IOMobileFramebufferDisableHotPlugDetectNotifications();
  }
  v3 = (const void **)*((_QWORD *)this + 3200);
  if (v3)
  {
    _Block_release(v3[1]);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v3);
  }
  os_unfair_lock_lock((os_unfair_lock_t)this + 6504);
  v5 = (unsigned int *)*((_QWORD *)this + 3253);
  if (v5)
  {
    *((_QWORD *)this + 3254) = 0;
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 6504);
  v9 = (_QWORD *)*((_QWORD *)this + 3188);
  if (v9)
  {
    if (v9[5])
      work_interval_instance_free();
    if (v9[4])
      work_interval_destroy();
    v10 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v10, v9);
    *((_QWORD *)this + 3188) = 0;
  }
  CA::Render::remove_observer(0x3Bu, 0, (uint64_t)CA::WindowServer::IOMFBDisplay::find_fastest_display, (uint64_t)this);
  CA::Render::remove_observer(0x43u, 0, (uint64_t)CA::WindowServer::IOMFBDisplay::create_power_assertion, (uint64_t)this);
  CA::Render::remove_observer(0x44u, 0, (uint64_t)CA::WindowServer::IOMFBDisplay::destroy_power_assertion, (uint64_t)this);
  CA::Render::remove_observer(0x45u, 0, (uint64_t)CA::WindowServer::IOMFBDisplay::copy_power_assertion_info, (uint64_t)this);
  CA::Render::remove_observer(0x24u, 0, (uint64_t)CA::WindowServer::IOMFBDisplay::register_for_disallowed_layers_notification, (uint64_t)this);
  CA::Render::remove_observer(0x25u, 0, (uint64_t)CA::WindowServer::IOMFBDisplay::unregister_for_disallowed_layers_notification, (uint64_t)this);
  v11 = (uint64_t *)*((_QWORD *)this + 3489);
  if (v11)
  {
    v12 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
    do
    {
      v13 = *((_DWORD *)v11 + 4);
      CA::Render::Server::remove_dead_name_watch((CA::Render::Server *)v13);
      mach_port_deallocate(*v12, v13);
      v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear((_QWORD *)this + 3487);
  notify_cancel(*((_DWORD *)v2 + 553));
  if (*(_DWORD *)v2)
    IOObjectRelease(*(_DWORD *)v2);
  v14 = (void *)*((_QWORD *)this + 3377);
  if (v14)
    free(v14);
  v15 = (void *)*((_QWORD *)this + 3378);
  if (v15)
    free(v15);
  v16 = (void *)*((_QWORD *)this + 3379);
  if (v16)
    free(v16);
  v17 = (const void *)*((_QWORD *)this + 3380);
  if (v17)
    CFRelease(v17);
  v18 = (void *)*((_QWORD *)this + 3381);
  if (v18)
    free(v18);
  free(*((void **)this + 3202));
  v19 = (const void *)*((_QWORD *)this + 3402);
  if (v19)
    CFRelease(v19);
  v20 = *((_QWORD *)this + 3415);
  if (v20)
  {
    if (*(_DWORD *)v20 != 5
      || !*(_QWORD *)(v20 + 12)
      || (MEMORY[0x186DBD990](*(_QWORD *)(v20 + 12), 0x1000C4052888210), *((_QWORD *)this + 3415)))
    {
      MEMORY[0x186DBD990]();
    }
  }
  v21 = *((_QWORD *)this + 3416);
  if (v21)
  {
    if (*(_DWORD *)v21 != 5
      || !*(_QWORD *)(v21 + 12)
      || (MEMORY[0x186DBD990](*(_QWORD *)(v21 + 12), 0x1000C4052888210), *((_QWORD *)this + 3416)))
    {
      MEMORY[0x186DBD990]();
    }
  }
  if (*((_QWORD *)this + 3417))
  {
    for (i = 0; i != 108; i += 36)
    {
      v23 = *((_QWORD *)this + 3417);
      if (*(_DWORD *)(v23 + i) == 5)
      {
        v24 = *(_QWORD *)(v23 + i + 12);
        if (v24)
          MEMORY[0x186DBD990](v24, 0x1000C4052888210);
      }
    }
    v25 = *((_QWORD *)this + 3417);
    if (v25)
      MEMORY[0x186DBD978](v25, 0x10C2C80BCA6C08DLL);
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 25688));
  v26 = (const void *)*((_QWORD *)this + 3313);
  if (v26)
    _Block_release(v26);
  free(*((void **)this + 3367));
  v27 = (void *)*((_QWORD *)this + 3425);
  if (v27)

  v28 = (void **)*((_QWORD *)this + 3403);
  if (v28)
  {
    free(*v28);
    free(v28[1]);
    MEMORY[0x186DBD990](v28, 0x1080C40397D7476);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&CA::WindowServer::IOMFBDisplay::_displays_lock);
  v29 = (void **)CA::WindowServer::IOMFBDisplay::_displays;
  if (CA::WindowServer::IOMFBDisplay::_displays)
  {
    v31 = *(CA::WindowServer::IOMFBDisplay ***)CA::WindowServer::IOMFBDisplay::_displays;
    v30 = *(CA::WindowServer::IOMFBDisplay ***)(CA::WindowServer::IOMFBDisplay::_displays + 8);
    v32 = *(CA::WindowServer::IOMFBDisplay ***)CA::WindowServer::IOMFBDisplay::_displays;
    if (*(CA::WindowServer::IOMFBDisplay ***)CA::WindowServer::IOMFBDisplay::_displays != v30)
    {
      while (*v32 != this)
      {
        if (++v32 == v30)
        {
          v32 = *(CA::WindowServer::IOMFBDisplay ***)(CA::WindowServer::IOMFBDisplay::_displays + 8);
          break;
        }
      }
    }
    if (v32 != v30)
    {
      v33 = (char *)v30 - (char *)(v32 + 1);
      if (v30 != v32 + 1)
      {
        memmove(v32, v32 + 1, v33);
        v31 = (CA::WindowServer::IOMFBDisplay **)*v29;
      }
      v30 = (CA::WindowServer::IOMFBDisplay **)((char *)v32 + v33);
      v29[1] = (char *)v32 + v33;
    }
    if (v31 == v30)
    {
      if (v30)
      {
        v29[1] = v30;
        operator delete(v30);
      }
      MEMORY[0x186DBD990](v29, 0x80C40D6874129);
      CA::WindowServer::IOMFBDisplay::_displays = 0;
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::WindowServer::IOMFBDisplay::_displays_lock);
  v34 = (void *)*((_QWORD *)this + 3492);
  if (v34 != *((void **)this + 3494))
    free(v34);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 27896);
  v35 = (void *)*((_QWORD *)this + 3469);
  if (v35 != *((void **)this + 3471))
    free(v35);
  v36 = (_QWORD *)*((_QWORD *)this + 3433);
  if (v36)
  {
    do
    {
      v37 = (_QWORD *)*v36;
      operator delete(v36);
      v36 = v37;
    }
    while (v37);
  }
  v38 = (void *)*((_QWORD *)this + 3431);
  *((_QWORD *)this + 3431) = 0;
  if (v38)
    operator delete(v38);
  v39 = (void *)*((_QWORD *)this + 3427);
  if (v39)
  {
    *((_QWORD *)this + 3428) = v39;
    operator delete(v39);
  }
  v40 = (void *)*((_QWORD *)this + 3420);
  if (v40)
  {
    *((_QWORD *)this + 3421) = v40;
    operator delete(v40);
  }
  for (j = 0; j != -32; j -= 8)
  {
    v42 = *(const void **)((char *)this + j + 27272);
    if (v42)
      CFRelease(v42);
  }
  v43 = (const void *)*((_QWORD *)this + 3405);
  if (v43)
    CFRelease(v43);
  v44 = (const void *)*((_QWORD *)this + 3404);
  if (v44)
    CFRelease(v44);
  v45 = (_QWORD *)*((_QWORD *)this + 3391);
  if (v45)
  {
    do
    {
      v46 = (_QWORD *)*v45;
      operator delete(v45);
      v45 = v46;
    }
    while (v46);
  }
  v47 = (void *)*((_QWORD *)this + 3389);
  *((_QWORD *)this + 3389) = 0;
  if (v47)
    operator delete(v47);
  v48 = (const void *)*((_QWORD *)this + 3386);
  if (v48)
    CFRelease(v48);
  v49 = (const void *)*((_QWORD *)this + 3385);
  if (v49)
    CFRelease(v49);
  v50 = (_QWORD *)*((_QWORD *)this + 3302);
  if (v50)
  {
    do
    {
      v51 = (_QWORD *)*v50;
      operator delete(v50);
      v50 = v51;
    }
    while (v51);
  }
  v52 = (void *)*((_QWORD *)this + 3300);
  *((_QWORD *)this + 3300) = 0;
  if (v52)
    operator delete(v52);
  v53 = (void *)*((_QWORD *)this + 3242);
  if (v53 != *((void **)this + 3244))
    free(v53);
  v54 = (CA::WindowServer::IOMFBDisplay::FrameInfo **)*((_QWORD *)this + 3239);
  if (v54)
  {
    v55 = (CA::WindowServer::IOMFBDisplay::FrameInfo **)*((_QWORD *)this + 3240);
    v56 = (void *)*((_QWORD *)this + 3239);
    if (v55 != v54)
    {
      do
        std::unique_ptr<CA::WindowServer::IOMFBDisplay::FrameInfo>::reset[abi:nn180100](--v55, 0);
      while (v55 != v54);
      v56 = (void *)*((_QWORD *)this + 3239);
    }
    *((_QWORD *)this + 3240) = v54;
    operator delete(v56);
  }
  v57 = (const void *)*((_QWORD *)this + 3192);
  if (v57)
    CFRelease(v57);
  CA::WindowServer::Display::~Display(this);
}

uint64_t CA::WindowServer::IOMFBDisplay::emit_server_timing_update_locked(CA::WindowServer::IOMFBDisplay *this)
{
  atomic_load((unsigned __int8 *)(*((_QWORD *)this + 3254) + 32));
  atomic_load((unsigned __int8 *)(*((_QWORD *)this + 3254) + 33));
  atomic_load((unint64_t *)(*((_QWORD *)this + 3254) + 24));
  atomic_load((unsigned int *)(*((_QWORD *)this + 3254) + 36));
  atomic_load((unsigned int *)(*((_QWORD *)this + 3254) + 40));
  kdebug_trace();
  atomic_load((unint64_t *)(*((_QWORD *)this + 3254) + 48));
  atomic_load((unint64_t *)(*((_QWORD *)this + 3254) + 64));
  atomic_load((unint64_t *)(*((_QWORD *)this + 3254) + 56));
  return kdebug_trace();
}

void *IOGPUDeviceSetDisplayParamsFunc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*IOGPUDeviceSetDisplayParamsSymbolLoc)(uint64_t, uint64_t, uint64_t);

  IOGPUDeviceSetDisplayParamsSymbolLoc = (uint64_t (*)(uint64_t, uint64_t, uint64_t))getIOGPUDeviceSetDisplayParamsSymbolLoc();
  if (IOGPUDeviceSetDisplayParamsSymbolLoc)
    return (void *)IOGPUDeviceSetDisplayParamsSymbolLoc(a1, a2, a3);
  dlerror();
  abort_report_np();
  return getIOGPUDeviceSetDisplayParamsSymbolLoc();
}

void *getIOGPUDeviceSetDisplayParamsSymbolLoc(void)
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v0 = (void *)getIOGPUDeviceSetDisplayParamsSymbolLoc(void)::ptr;
  v6 = getIOGPUDeviceSetDisplayParamsSymbolLoc(void)::ptr;
  if (!getIOGPUDeviceSetDisplayParamsSymbolLoc(void)::ptr)
  {
    v1 = (void *)IOGPULibrary();
    v0 = dlsym(v1, "IOGPUDeviceSetDisplayParams");
    v4[3] = (uint64_t)v0;
    getIOGPUDeviceSetDisplayParamsSymbolLoc(void)::ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t IOGPULibrary(void)
{
  uint64_t v0;
  void *v2;

  if (IOGPULibraryCore(char **)::frameworkLibrary)
    return IOGPULibraryCore(char **)::frameworkLibrary;
  IOGPULibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  v0 = IOGPULibraryCore(char **)::frameworkLibrary;
  if (!IOGPULibraryCore(char **)::frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void ___ZN2CA12WindowServer12IOMFBDisplay15hint_agx_timingEyy_block_invoke()
{
  mach_port_t v0;
  const __CFDictionary *v1;
  uint64_t MatchingService;
  uint64_t v3;
  uint64_t (*SymbolLoc)(uint64_t);

  if (!IOGPULibraryCore(char **)::frameworkLibrary)
    IOGPULibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  if (IOGPULibraryCore(char **)::frameworkLibrary && getIOGPUDeviceCreateSymbolLoc())
  {
    if (!IOGPULibraryCore(char **)::frameworkLibrary)
      IOGPULibraryCore(char **)::frameworkLibrary = _sl_dlopen();
    if (IOGPULibraryCore(char **)::frameworkLibrary)
    {
      if (getIOGPUDeviceSetDisplayParamsSymbolLoc())
      {
        v0 = *MEMORY[0x1E0CBBAA8];
        v1 = IOServiceMatching("AGXAccelerator");
        MatchingService = IOServiceGetMatchingService(v0, v1);
        if ((_DWORD)MatchingService)
        {
          v3 = MatchingService;
          SymbolLoc = (uint64_t (*)(uint64_t))getIOGPUDeviceCreateSymbolLoc();
          if (!SymbolLoc)
          {
            dlerror();
            abort_report_np();
          }
          CA::WindowServer::IOMFBDisplay::hint_agx_timing(unsigned long long,unsigned long long)::agx_device = SymbolLoc(v3);
        }
      }
    }
  }
}

void *getIOGPUDeviceCreateSymbolLoc(void)
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v0 = (void *)getIOGPUDeviceCreateSymbolLoc(void)::ptr;
  v6 = getIOGPUDeviceCreateSymbolLoc(void)::ptr;
  if (!getIOGPUDeviceCreateSymbolLoc(void)::ptr)
  {
    v1 = (void *)IOGPULibrary();
    v0 = dlsym(v1, "IOGPUDeviceCreate");
    v4[3] = (uint64_t)v0;
    getIOGPUDeviceCreateSymbolLoc(void)::ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void CA::WindowServer::IOMFBDisplay::enable_hotplug_info(CA::WindowServer::IOMFBDisplay *this)
{
  unsigned __int8 *v1;
  int v2;
  os_signpost_id_t v4;
  NSObject *v5;
  int v6;
  _DWORD v7[2];
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = (unsigned __int8 *)this + 28082;
  v2 = *((unsigned __int8 *)this + 28083);
  *((_BYTE *)this + 28083) = 1;
  if (!v2)
  {
    if (CA::WindowServer::Display::get_display_perf_log(void)::once_token[0] != -1)
      dispatch_once(CA::WindowServer::Display::get_display_perf_log(void)::once_token, &__block_literal_global_61);
    v4 = *((unsigned int *)this + 6);
    if ((_DWORD)v4)
    {
      v5 = CA::WindowServer::Display::get_display_perf_log(void)::log;
      if (os_signpost_enabled((os_log_t)CA::WindowServer::Display::get_display_perf_log(void)::log))
      {
        v6 = *v1;
        v7[0] = 67240448;
        v7[1] = v4;
        v8 = 1026;
        v9 = v6;
        _os_signpost_emit_with_name_impl(&dword_184457000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v4, "HotPlug", "displayId=%{public, name=displayId}u state=%{public, BOOL, name=state}d", (uint8_t *)v7, 0xEu);
      }
    }
  }
}

void CA::WindowServer::IOMFBDisplay::set_frame_info_enabled(CA::WindowServer::IOMFBDisplay *this, char a2)
{
  CA::WindowServer::IOMFBDisplay::FrameInfo *v2;
  malloc_zone_t *malloc_zone;
  CA::WindowServer::IOMFBDisplay::FrameInfo *v4[2];

  v4[1] = *(CA::WindowServer::IOMFBDisplay::FrameInfo **)MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 28081) = a2;
  CA::WindowServer::IOMFBDisplay::collect_frame_info(v4, (uint64_t)this, 0);
  v2 = v4[0];
  if (v4[0])
  {
    CA::WindowServer::IOMFBDisplay::FrameInfo::~FrameInfo(v4[0]);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v2);
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::minimum_frame_duration_changed(os_unfair_lock_s *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((this[156]._os_unfair_lock_opaque & 0x100) != 0)
  {
    os_unfair_lock_lock(this + 6839);
    CA::WindowServer::IOMFBDisplay::recompute_server_frame_interval_locked((CA::WindowServer::IOMFBDisplay *)this, v2, v3, v4, v5, v6, v7, v8);
    os_unfair_lock_unlock(this + 6839);
  }
  return CA::WindowServer::Display::post_display_changed((uint64_t)this);
}

void CA::WindowServer::IOMFBDisplay::post_power_log(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v2;
  uint64_t v3;
  __CFDictionary *Mutable;
  uint64_t v5;
  char *v6;
  int *v7;
  __CFDictionary *v8;
  uint64_t v9;
  __CFDictionary *v10;
  uint64_t v11;
  char *v12;

  v2 = mach_absolute_time();
  v3 = 0;
  while (!*(_DWORD *)((char *)this + v3 + 25416))
  {
    v3 += 4;
    if (v3 == 40)
      goto LABEL_8;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CA_CFDictionarySetLongLong(Mutable, CFSTR("mach_absolute_time"), v2);
  v5 = 0;
  v6 = (char *)this + 25416;
  do
  {
    CA_CFDictionarySetInt(Mutable, CA::WindowServer::power_log_dr_keys[v5], *(_DWORD *)&v6[4 * v5]);
    *(_DWORD *)&v6[4 * v5++] = 0;
  }
  while (v5 != 10);
  PLLogTimeSensitiveRegisteredEvent();
  CFRelease(Mutable);
LABEL_8:
  v7 = (int *)((char *)this + 25456);
  if (*((_DWORD *)this + 6364))
  {
    v8 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CA_CFDictionarySetLongLong(v8, CFSTR("mach_absolute_time"), v2);
    CA_CFDictionarySetInt(v8, CFSTR("count"), *v7);
    *v7 = 0;
    PLLogTimeSensitiveRegisteredEvent();
    CFRelease(v8);
  }
  v9 = 0;
  while (!*(_DWORD *)((char *)this + v9 + 25376))
  {
    v9 += 4;
    if (v9 == 40)
      return;
  }
  v10 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CA_CFDictionarySetLongLong(v10, CFSTR("mach_absolute_time"), v2);
  v11 = 0;
  v12 = (char *)this + 25376;
  do
  {
    CA_CFDictionarySetInt(v10, CA::WindowServer::power_log_dr_keys[v11], *(_DWORD *)&v12[4 * v11]);
    *(_DWORD *)&v12[4 * v11++] = 0;
  }
  while (v11 != 10);
  PLLogTimeSensitiveRegisteredEvent();
  CFRelease(v10);
}

uint64_t ___ZN2CA12WindowServer12IOMFBDisplay25post_frame_rate_power_logEv_block_invoke()
{
  uint64_t result;

  result = pps_create_telemetry_identifier();
  CA::WindowServer::IOMFBDisplay::post_frame_rate_power_log(void)::frame_count_id = result;
  return result;
}

uint64_t ___ZN2CA12WindowServer12IOMFBDisplay32post_render_statistics_power_logEv_block_invoke()
{
  uint64_t result;

  CA::WindowServer::IOMFBDisplay::post_render_statistics_power_log(void)::render_pass_id = pps_create_telemetry_identifier();
  CA::WindowServer::IOMFBDisplay::post_render_statistics_power_log(void)::layer_count_id = pps_create_telemetry_identifier();
  result = pps_create_telemetry_identifier();
  CA::WindowServer::IOMFBDisplay::post_render_statistics_power_log(void)::offscreen_reasons_id = result;
  return result;
}

uint64_t CAObject_propertyKeys(objc_class *a1)
{
  uint64_t result;
  uint64_t v2;
  __CFSet *Mutable;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  const __CFString *String;
  CFIndex Count;
  CFIndex v9;
  size_t v10;
  char *v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  result = classDescription(a1);
  if (result)
  {
    v2 = result;
    result = *(_QWORD *)(result + 120);
    if (!result)
    {
      Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE18], 0, 0);
      v4 = v2;
      do
      {
        if (*(_DWORD *)(v4 + 24))
        {
          v5 = 0;
          v6 = 0;
          do
          {
            String = CAAtomGetString(*(_DWORD *)(*(_QWORD *)(v4 + 16) + v5));
            CFSetAddValue(Mutable, String);
            ++v6;
            v5 += 40;
          }
          while (v6 < *(unsigned int *)(v4 + 24));
        }
        v4 = *(_QWORD *)v4;
      }
      while (v4);
      Count = CFSetGetCount(Mutable);
      v9 = Count;
      v10 = 8 * Count;
      if ((unint64_t)(8 * Count) > 0x1000)
      {
        v11 = (char *)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
      }
      else
      {
        MEMORY[0x1E0C80A78](Count);
        v11 = (char *)v12 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
        bzero(v11, v10);
      }
      CFSetGetValues(Mutable, (const void **)v11);
      *(_QWORD *)(v2 + 120) = CFArrayCreate(0, (const void **)v11, v9, 0);
      if (v10 > 0x1000)
        free(v11);
      CFRelease(Mutable);
      return *(_QWORD *)(v2 + 120);
    }
  }
  return result;
}

void CAObject_encodeWithCoder(void *a1, void *a2)
{
  objc_class *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __CFSet *Mutable;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const __CFString *String;
  uint64_t v14;
  uint64_t v15;
  CFIndex Count;
  size_t v17;
  size_t v18;
  char *v19;
  void *v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v4 = (objc_class *)objc_opt_class();
  v5 = classDescription(v4);
  if (v5)
  {
    v6 = v5;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v7 = objc_msgSend(a2, "delegate");
      if ((objc_opt_respondsToSelector() & 1) != 0)
        v8 = (void *)v7;
      else
        v8 = 0;
    }
    else
    {
      v8 = 0;
    }
    Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE18], 0, 0);
    do
    {
      if (*(_DWORD *)(v6 + 24))
      {
        v10 = 0;
        v11 = 0;
        do
        {
          v12 = *(_QWORD *)(v6 + 16);
          if ((*(_BYTE *)(v12 + v10 + 6) & 1) == 0)
          {
            String = CAAtomGetString(*(_DWORD *)(v12 + v10));
            if (objc_msgSend(a1, "shouldArchiveValueForKey:", String))
            {
              if (!v8 || objc_msgSend(v8, "CA_shouldArchiveValueForKey:ofObject:", String, a1))
              {
                v14 = objc_msgSend(a1, "CA_archivingValueForKey:", String);
                if (v14)
                {
                  v15 = v14;
                  if (!CFSetContainsValue(Mutable, String))
                  {
                    objc_msgSend(a2, "CA_encodeObject:forKey:conditional:", v15, String, (*(_DWORD *)(*(_QWORD *)(v6 + 16) + v10 + 4) >> 29) & 1);
                    CFSetAddValue(Mutable, String);
                  }
                }
              }
            }
          }
          ++v11;
          v10 += 40;
        }
        while (v11 < *(unsigned int *)(v6 + 24));
      }
      v6 = *(_QWORD *)v6;
    }
    while (v6);
    Count = CFSetGetCount(Mutable);
    v17 = Count;
    v18 = 8 * Count;
    if ((unint64_t)(8 * Count) > 0x1000)
    {
      v19 = (char *)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
    }
    else
    {
      MEMORY[0x1E0C80A78](Count);
      v19 = (char *)v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v19, v18);
    }
    CFSetGetValues(Mutable, (const void **)v19);
    CFRelease(Mutable);
    qsort(v19, v17, 8uLL, (int (__cdecl *)(const void *, const void *))compare_strings);
    v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:count:", v19, v17);
    objc_msgSend(a2, "encodeObject:forKey:", v20, CFSTR("__CACodingContents"));

    if (v18 > 0x1000)
      free(v19);
  }
}

CFComparisonResult compare_strings(CFStringRef *a1, CFStringRef *a2)
{
  return CFStringCompare(*a1, *a2, 0);
}

uint64_t CAObject_encodeWithCAMLWriter(void *a1, void *a2)
{
  objc_class *v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  const __CFString *String;
  uint64_t v11;

  v4 = (objc_class *)objc_opt_class();
  result = classDescription(v4);
  if (result)
  {
    v6 = result;
    result = objc_msgSend(a2, "encodingForReverseSerializationTest");
    v7 = result;
    do
    {
      if (*(_DWORD *)(v6 + 24))
      {
        v8 = 0;
        v9 = 0;
        do
        {
          String = CAAtomGetString(*(_DWORD *)(*(_QWORD *)(v6 + 16) + v8));
          result = objc_msgSend(a1, "shouldArchiveValueForKey:", String);
          if ((result | v7) == 1)
          {
            result = objc_msgSend(a1, "CA_archivingValueForKey:", String);
            if (result)
            {
              v11 = result;
              objc_msgSend(a2, "beginPropertyElement:", -[objc_class CA_CAMLPropertyForKey:](v4, "CA_CAMLPropertyForKey:", String));
              objc_msgSend(a2, "encodeObject:conditionally:", v11, (*(_DWORD *)(*(_QWORD *)(v6 + 16) + v8 + 4) >> 29) & 1);
              result = objc_msgSend(a2, "endElement");
            }
          }
          ++v9;
          v8 += 40;
        }
        while (v9 < *(unsigned int *)(v6 + 24));
      }
      v6 = *(_QWORD *)v6;
    }
    while (v6);
  }
  return result;
}

void CAObject_setValueForKeyPath(void *a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = objc_msgSend(a3, "rangeOfString:", CFSTR("."));
  if (v7)
    CAObject_setValueForKeyPath_(a1, a2, objc_msgSend(a3, "substringToIndex:", v6), (void *)objc_msgSend(a3, "substringFromIndex:", v6 + 1), 0);
  else
    objc_msgSend(a1, "setValue:forKey:", a2, a3);
}

void *CA::Render::ContentStream::get_or_create_stream_and_lock(CA::Render::ContentStream *this, int a2, uint64_t a3)
{
  void *i;
  malloc_zone_t *malloc_zone;
  pthread_mutex_t *v8;
  pthread_mutex_t *v9;
  BOOL (*v10);
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  void **v16;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t prime;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  malloc_zone_t *v39;
  _QWORD *v40;
  mach_port_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock(&CA::Render::s_streams_lock);
  if (CA::Render::ContentStream::get_or_create_stream_and_lock(unsigned int,unsigned int,int)::once_token[0] != -1)
    dispatch_once(CA::Render::ContentStream::get_or_create_stream_and_lock(unsigned int,unsigned int,int)::once_token, &__block_literal_global_18084);
  i = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)CA::Render::s_streams, this);
  if (i)
    goto LABEL_82;
  if (a2 && (int)a3 >= 1)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v8 = (pthread_mutex_t *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x198uLL, 0x743898A5uLL);
    v9 = v8;
    if (v8)
    {
      pthread_mutex_init(v8, 0);
      *(_QWORD *)v9[2].__opaque = (char *)v9 + 168;
      *(_QWORD *)&v9[2].__opaque[8] = (char *)v9 + 168;
      *(_QWORD *)&v9[2].__opaque[16] = (char *)v9 + 168;
      *(_QWORD *)&v9[2].__opaque[24] = 8;
      *(_QWORD *)v9[3].__opaque = (char *)v9 + 232;
      *(_QWORD *)&v9[3].__opaque[8] = (char *)v9 + 232;
      *(_QWORD *)&v9[3].__opaque[16] = (char *)v9 + 232;
      *(_QWORD *)&v9[3].__opaque[24] = 8;
      *(_OWORD *)&v9[4].__opaque[48] = 0u;
      *(_OWORD *)v9[5].__opaque = 0u;
      *(_OWORD *)&v9[5].__opaque[16] = 0u;
      *(_OWORD *)&v9[5].__opaque[32] = 0u;
      *(_QWORD *)&v9[5].__opaque[48] = 0;
      LODWORD(v9[1].__sig) = (_DWORD)this;
      *(_DWORD *)&v9[4].__opaque[16] = a2;
      *(_DWORD *)&v9[4].__opaque[20] = a3;
      v41 = 0;
      CA::Render::Server::add_dead_name_watch(this, &v41, (unsigned int *)CA::Render::ContentStream::destroy_stream, v10);
    }
    v11 = CA::Render::s_streams;
    v12 = this;
    v13 = *(_QWORD *)(CA::Render::s_streams + 8);
    if (v13)
    {
      v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] > 1uLL)
      {
        v15 = this;
        if (v13 <= this)
          v15 = this % v13;
      }
      else
      {
        v15 = ((_DWORD)v13 - 1) & this;
      }
      v16 = *(void ***)(*(_QWORD *)CA::Render::s_streams + 8 * v15);
      if (v16)
      {
        for (i = *v16; i; i = *(void **)i)
        {
          v17 = *((_QWORD *)i + 1);
          if (v17 == this)
          {
            if (*((_DWORD *)i + 4) == (_DWORD)this)
            {
              if (v9)
              {
                CA::Render::ContentStream::~ContentStream((CA::Render::ContentStream *)v9);
                v39 = (malloc_zone_t *)get_malloc_zone();
                malloc_zone_free(v39, v9);
              }
LABEL_81:
              objc_msgSend((id)CA::Render::s_process_monitor, "addMonitoringProcess:", a3);
LABEL_82:
              pthread_mutex_lock(*((pthread_mutex_t **)i + 3));
              i = (void *)*((_QWORD *)i + 3);
              goto LABEL_83;
            }
          }
          else
          {
            if (v14.u32[0] > 1uLL)
            {
              if (v17 >= v13)
                v17 %= v13;
            }
            else
            {
              v17 &= v13 - 1;
            }
            if (v17 != v15)
              break;
          }
        }
      }
    }
    else
    {
      v15 = 0;
    }
    i = operator new(0x20uLL);
    *(_QWORD *)i = 0;
    *((_QWORD *)i + 1) = this;
    *((_DWORD *)i + 4) = (_DWORD)this;
    *((_QWORD *)i + 3) = v9;
    v18 = (float)(unint64_t)(*(_QWORD *)(v11 + 24) + 1);
    v19 = *(float *)(v11 + 32);
    if (v13 && (float)(v19 * (float)v13) >= v18)
    {
LABEL_71:
      v35 = *(_QWORD **)v11;
      v36 = *(_QWORD **)(*(_QWORD *)v11 + 8 * v15);
      if (v36)
      {
        *(_QWORD *)i = *v36;
      }
      else
      {
        *(_QWORD *)i = *(_QWORD *)(v11 + 16);
        *(_QWORD *)(v11 + 16) = i;
        v35[v15] = v11 + 16;
        if (!*(_QWORD *)i)
        {
LABEL_80:
          ++*(_QWORD *)(v11 + 24);
          goto LABEL_81;
        }
        v37 = *(_QWORD *)(*(_QWORD *)i + 8);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v37 >= v13)
            v37 %= v13;
        }
        else
        {
          v37 &= v13 - 1;
        }
        v36 = (_QWORD *)(*(_QWORD *)v11 + 8 * v37);
      }
      *v36 = i;
      goto LABEL_80;
    }
    v20 = 1;
    if (v13 >= 3)
      v20 = (v13 & (v13 - 1)) != 0;
    v21 = v20 | (2 * v13);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = (int8x8_t)v22;
    else
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v13 = *(_QWORD *)(v11 + 8);
    if (*(_QWORD *)&prime > v13)
      goto LABEL_37;
    if (*(_QWORD *)&prime < v13)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(v11 + 24) / *(float *)(v11 + 32));
      if (v13 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (*(_QWORD *)&prime <= v30)
        prime = (int8x8_t)v30;
      if (*(_QWORD *)&prime >= v13)
      {
        v13 = *(_QWORD *)(v11 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_37:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v24 = operator new(8 * *(_QWORD *)&prime);
          v25 = *(_QWORD **)v11;
          *(_QWORD *)v11 = v24;
          if (v25)
            operator delete(v25);
          v26 = 0;
          *(int8x8_t *)(v11 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)v11 + 8 * v26++) = 0;
          while (*(_QWORD *)&prime != v26);
          v27 = *(_QWORD **)(v11 + 16);
          if (v27)
          {
            v28 = v27[1];
            v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(_QWORD *)&prime)
                v28 %= *(_QWORD *)&prime;
            }
            else
            {
              v28 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)v11 + 8 * v28) = v11 + 16;
            v33 = (_QWORD *)*v27;
            if (*v27)
            {
              do
              {
                v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(_QWORD *)&prime)
                    v34 %= *(_QWORD *)&prime;
                }
                else
                {
                  v34 &= *(_QWORD *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v11 + 8 * v34))
                  {
                    *(_QWORD *)(*(_QWORD *)v11 + 8 * v34) = v27;
                    goto LABEL_62;
                  }
                  *v27 = *v33;
                  *v33 = **(_QWORD **)(*(_QWORD *)v11 + 8 * v34);
                  **(_QWORD **)(*(_QWORD *)v11 + 8 * v34) = v33;
                  v33 = v27;
                }
                v34 = v28;
LABEL_62:
                v27 = v33;
                v33 = (_QWORD *)*v33;
                v28 = v34;
              }
              while (v33);
            }
          }
          v13 = (unint64_t)prime;
          goto LABEL_66;
        }
        v40 = *(_QWORD **)v11;
        *(_QWORD *)v11 = 0;
        if (v40)
          operator delete(v40);
        v13 = 0;
        *(_QWORD *)(v11 + 8) = 0;
      }
    }
LABEL_66:
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v13 <= v12)
        v15 = v12 % v13;
      else
        v15 = v12;
    }
    else
    {
      v15 = ((_DWORD)v13 - 1) & v12;
    }
    goto LABEL_71;
  }
LABEL_83:
  os_unfair_lock_unlock(&CA::Render::s_streams_lock);
  return i;
}

void CA::Render::ContentStream::~ContentStream(CA::Render::ContentStream *this)
{
  CA::Render::Server *v2;
  ipc_space_t *v3;
  mach_port_name_t v4;
  void *v5;
  malloc_zone_t *malloc_zone;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  pthread_mutex_lock((pthread_mutex_t *)this);
  pthread_mutex_unlock((pthread_mutex_t *)this);
  if (*((_QWORD *)this + 39) != *((_QWORD *)this + 40)
    || *((_QWORD *)this + 42) != *((_QWORD *)this + 43)
    || *((_QWORD *)this + 45) != *((_QWORD *)this + 46)
    || *((_QWORD *)this + 36))
  {
    __assert_rtn("~ContentStream", "render-content-stream.cpp", 531, "_avail_surf.empty () && _used_surf.empty () && _pending_names_release.empty () && !_intermediate_surf.iosurface");
  }
  v2 = (CA::Render::Server *)*((unsigned int *)this + 16);
  v3 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
  if ((_DWORD)v2)
  {
    CA::Render::Server::remove_dead_name_watch(v2);
    mach_port_deallocate(*v3, *((_DWORD *)this + 16));
  }
  v4 = *((_DWORD *)this + 70);
  if (v4)
    mach_port_deallocate(*v3, v4);
  v5 = (void *)*((_QWORD *)this + 34);
  if (v5)
  {
    CA::VideoToolbox::~VideoToolbox(*((CFTypeRef **)this + 34));
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v5);
  }
  v7 = (void *)*((_QWORD *)this + 45);
  if (v7)
  {
    *((_QWORD *)this + 46) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 42);
  if (v8)
  {
    *((_QWORD *)this + 43) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 39);
  if (v9)
  {
    *((_QWORD *)this + 40) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 25);
  if (v10 != *((void **)this + 27))
    free(v10);
  v11 = (void *)*((_QWORD *)this + 17);
  if (v11 != *((void **)this + 19))
    free(v11);
  pthread_mutex_destroy((pthread_mutex_t *)this);
}

uint64_t CA::Render::ContentStream::destroy_stream(CA::Render::ContentStream *this, unsigned int a2, uint64_t a3, int a4)
{
  unsigned int v4;
  uint64_t stream_and_lock;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned int *v12;
  int8x8_t v13;
  unint64_t v14;
  uint8x8_t v15;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  CA::Render::ContentStream *v23;
  malloc_zone_t *malloc_zone;
  uint64_t v25;
  _QWORD *v26;
  malloc_zone_t *v27;
  _QWORD v28[2];
  _OWORD v29[3];
  _BYTE v30[32];
  __int128 v31;
  _OWORD v32[2];
  void *v33[2];
  __int128 v34;
  _OWORD v35[2];
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (((_DWORD)this - 1) > 0xFFFFFFFD)
    return 0;
  v4 = this;
  stream_and_lock = CA::Render::ContentStream::get_or_create_stream_and_lock(this, 0, 0, a4);
  if (stream_and_lock)
  {
    v6 = stream_and_lock;
    v36 = 0;
    memset(v35, 0, sizeof(v35));
    *(_OWORD *)v33 = 0u;
    v34 = 0u;
    memset(v32, 0, sizeof(v32));
    *(_OWORD *)&v30[16] = 0u;
    v31 = 0u;
    v7 = *(_OWORD *)(stream_and_lock + 112);
    v29[2] = *(_OWORD *)(stream_and_lock + 96);
    *(_OWORD *)v30 = v7;
    *(_DWORD *)&v30[15] = *(_DWORD *)(stream_and_lock + 127);
    v8 = *(_OWORD *)(stream_and_lock + 80);
    v29[0] = *(_OWORD *)(stream_and_lock + 64);
    v29[1] = v8;
    *(_QWORD *)&v30[24] = (char *)v32 + 8;
    *(_QWORD *)&v31 = (char *)v32 + 8;
    *((_QWORD *)&v31 + 1) = (char *)v32 + 8;
    *(_QWORD *)&v32[0] = 8;
    X::small_vector_base<unsigned int>::append<unsigned int const*>((uint64_t)&v30[24], *(int **)(v6 + 136), *(int **)(v6 + 144));
    v33[1] = (char *)v35 + 8;
    *(_QWORD *)&v34 = (char *)v35 + 8;
    *((_QWORD *)&v34 + 1) = (char *)v35 + 8;
    *(_QWORD *)&v35[0] = 8;
    X::small_vector_base<unsigned int>::append<unsigned int const*>((uint64_t)&v33[1], *(int **)(v6 + 200), *(int **)(v6 + 208));
    pthread_mutex_unlock((pthread_mutex_t *)v6);
    v28[0] = v29;
    v28[1] = 256;
    CA::Render::post_notification(0x3Fu, 0, (uint64_t)v28, 0);
    if (v33[1] != *((void **)&v34 + 1))
      free(v33[1]);
    if (*(_QWORD *)&v30[24] != *((_QWORD *)&v31 + 1))
      free(*(void **)&v30[24]);
  }
  os_unfair_lock_lock(&CA::Render::s_streams_lock);
  v9 = (_QWORD *)CA::Render::s_streams;
  if (!CA::Render::s_streams
    || (v10 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)CA::Render::s_streams, v4)) == 0)
  {
    os_unfair_lock_unlock(&CA::Render::s_streams_lock);
    return 0;
  }
  v11 = v10;
  v12 = (unsigned int *)v10[3];
  v10[3] = 0;
  v13 = (int8x8_t)v9[1];
  v14 = v10[1];
  v15 = (uint8x8_t)vcnt_s8(v13);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    if (v14 >= *(_QWORD *)&v13)
      v14 %= *(_QWORD *)&v13;
  }
  else
  {
    v14 &= *(_QWORD *)&v13 - 1;
  }
  v17 = *(uint64_t **)(*v9 + 8 * v14);
  do
  {
    v18 = v17;
    v17 = (uint64_t *)*v17;
  }
  while (v17 != v10);
  if (v18 == v9 + 2)
    goto LABEL_29;
  v19 = v18[1];
  if (v15.u32[0] > 1uLL)
  {
    if (v19 >= *(_QWORD *)&v13)
      v19 %= *(_QWORD *)&v13;
  }
  else
  {
    v19 &= *(_QWORD *)&v13 - 1;
  }
  if (v19 != v14)
  {
LABEL_29:
    if (!*v10)
      goto LABEL_30;
    v20 = *(_QWORD *)(*v10 + 8);
    if (v15.u32[0] > 1uLL)
    {
      if (v20 >= *(_QWORD *)&v13)
        v20 %= *(_QWORD *)&v13;
    }
    else
    {
      v20 &= *(_QWORD *)&v13 - 1;
    }
    if (v20 != v14)
LABEL_30:
      *(_QWORD *)(*v9 + 8 * v14) = 0;
  }
  v21 = *v10;
  if (*v10)
  {
    v22 = *(_QWORD *)(v21 + 8);
    if (v15.u32[0] > 1uLL)
    {
      if (v22 >= *(_QWORD *)&v13)
        v22 %= *(_QWORD *)&v13;
    }
    else
    {
      v22 &= *(_QWORD *)&v13 - 1;
    }
    if (v22 != v14)
    {
      *(_QWORD *)(*v9 + 8 * v22) = v18;
      v21 = *v10;
    }
  }
  *v18 = v21;
  *v10 = 0;
  --v9[3];
  v23 = (CA::Render::ContentStream *)v10[3];
  v10[3] = 0;
  if (v23)
  {
    CA::Render::ContentStream::~ContentStream(v23);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v23);
  }
  operator delete(v11);
  v25 = v12[71];
  v26 = (_QWORD *)(CA::Render::s_streams + 16);
  while (1)
  {
    v26 = (_QWORD *)*v26;
    if (!v26)
      break;
    if (*(_DWORD *)(v26[3] + 284) == (_DWORD)v25)
    {
      os_unfair_lock_unlock(&CA::Render::s_streams_lock);
      goto LABEL_46;
    }
  }
  os_unfair_lock_unlock(&CA::Render::s_streams_lock);
  if ((_DWORD)v25)
    objc_msgSend((id)CA::Render::s_process_monitor, "removeMonitoringProcess:", v25);
LABEL_46:
  if (v12)
  {
    CA::Render::ContentStream::~ContentStream((CA::Render::ContentStream *)v12);
    v27 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v27, v12);
  }
  return 1;
}

void ___ZN2CA6RenderL23init_process_monitoringEv_block_invoke(uint64_t a1, int a2, int a3, int a4)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _QWORD *v26;
  uint64_t v27;
  _BOOL4 v28;
  NSObject *v29;
  char *v30;
  char *v31;
  NSObject *v32;
  char *v33;
  char *v34;
  int v37;
  _QWORD *v38;
  unint64_t v39;
  uint8_t buf[8];
  _QWORD v41[3];
  void *v42;
  char *v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD v46[102];

  v46[100] = *MEMORY[0x1E0C80C00];
  bzero(v46, 0x320uLL);
  v42 = v46;
  v43 = (char *)v46;
  v44 = v46;
  v45 = 4;
  os_unfair_lock_lock(&CA::Render::s_streams_lock);
  v5 = *(_QWORD **)(CA::Render::s_streams + 16);
  if (v5)
  {
    v37 = a2;
    do
    {
      v6 = v5[3];
      if (*(_DWORD *)(v6 + 284) == a2 && *(_BYTE *)(v6 + 400))
      {
        v7 = v42;
        v8 = v43;
        v9 = 0x8F5C28F5C28F5C29 * ((v43 - (_BYTE *)v42) >> 3);
        v10 = v9 + 1;
        if (v45 < v9 + 1)
        {
          v11 = (v45 + 1) | ((v45 + 1) >> 1) | (((v45 + 1) | ((v45 + 1) >> 1)) >> 2);
          v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
          v13 = v12 | (v12 >> 16) | ((v12 | (v12 >> 16)) >> 32);
          if (v13 + 1 > v10)
            v10 = v13 + 1;
          v38 = v44;
          v39 = v10;
          v14 = (char *)malloc_type_malloc(200 * v10, 0x1010040433433E5uLL);
          v15 = v42;
          v16 = v43;
          if (v42 == v43)
          {
            v22 = v42;
          }
          else
          {
            v17 = 0;
            do
            {
              v18 = &v14[v17 * 8];
              *(_OWORD *)v18 = *(_OWORD *)&v15[v17];
              v19 = *(_OWORD *)&v15[v17 + 2];
              v20 = *(_OWORD *)&v15[v17 + 4];
              v21 = *(_OWORD *)&v15[v17 + 6];
              *(_DWORD *)(v18 + 63) = *(_DWORD *)((char *)&v15[v17 + 7] + 7);
              *((_OWORD *)v18 + 2) = v20;
              *((_OWORD *)v18 + 3) = v21;
              *((_OWORD *)v18 + 1) = v19;
              X::small_vector_base<unsigned int>::small_vector_base((int **)&v14[v17 * 8 + 72], (int **)&v15[v17 + 9], (int *)&v14[v17 * 8 + 104]);
              X::small_vector_base<unsigned int>::small_vector_base((int **)v18 + 17, (int **)&v15[v17 + 17], (int *)v18 + 42);
              v17 += 25;
            }
            while (&v15[v17] != (_QWORD *)v16);
            v22 = v42;
            v15 = v43;
            a2 = v37;
          }
          X::small_vector_base<CA::Render::ContentStreamConfig>::runDestructors(v22, v15);
          if (v7 != v38)
            free(v42);
          v8 = &v14[200 * v9];
          v42 = v14;
          v43 = v8;
          v45 = v39;
        }
        *(_OWORD *)v8 = *(_OWORD *)(v6 + 64);
        v23 = *(_OWORD *)(v6 + 80);
        v24 = *(_OWORD *)(v6 + 96);
        v25 = *(_OWORD *)(v6 + 112);
        *(_DWORD *)(v8 + 63) = *(_DWORD *)(v6 + 127);
        *((_OWORD *)v8 + 2) = v24;
        *((_OWORD *)v8 + 3) = v25;
        *((_QWORD *)v8 + 9) = v8 + 104;
        *((_OWORD *)v8 + 1) = v23;
        *((_QWORD *)v8 + 10) = v8 + 104;
        *((_QWORD *)v8 + 11) = v8 + 104;
        *((_QWORD *)v8 + 12) = 8;
        X::small_vector_base<unsigned int>::append<unsigned int const*>((uint64_t)(v8 + 72), *(int **)(v6 + 136), *(int **)(v6 + 144));
        v26 = v8 + 168;
        *((_QWORD *)v8 + 17) = v8 + 168;
        *((_QWORD *)v8 + 18) = v8 + 168;
        v27 = (uint64_t)(v8 + 136);
        *(_QWORD *)(v27 + 16) = v26;
        *(_QWORD *)(v27 + 24) = 8;
        X::small_vector_base<unsigned int>::append<unsigned int const*>(v27, *(int **)(v6 + 200), *(int **)(v6 + 208));
        v43 += 200;
      }
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  os_unfair_lock_unlock(&CA::Render::s_streams_lock);
  if (v42 != v43)
  {
    v28 = x_log_hook_p();
    if (!a3 || a4)
    {
      if (v28)
      {
        x_log_();
      }
      else
      {
        v29 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = a2;
          LOWORD(v41[0]) = 2048;
          *(_QWORD *)((char *)v41 + 2) = 0x8F5C28F5C28F5C29 * ((v43 - (_BYTE *)v42) >> 3);
          _os_log_impl(&dword_184457000, v29, OS_LOG_TYPE_INFO, "pid %u suspended. Stopping %lu streams", buf, 0x12u);
        }
      }
      v30 = (char *)v42;
      v31 = v43;
      if (v42 != v43)
      {
        do
        {
          v30[66] = v30[66] & 0xFE | a3 & a4;
          *(_QWORD *)buf = v30;
          v41[0] = 0;
          CA::Render::post_notification(0x3Fu, 0, (uint64_t)buf, 0);
          v30 += 200;
        }
        while (v30 != v31);
      }
    }
    else
    {
      if (v28)
      {
        x_log_();
      }
      else
      {
        v32 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = a2;
          LOWORD(v41[0]) = 2048;
          *(_QWORD *)((char *)v41 + 2) = 0x8F5C28F5C28F5C29 * ((v43 - (_BYTE *)v42) >> 3);
          _os_log_impl(&dword_184457000, v32, OS_LOG_TYPE_INFO, "pid %u resumed. Resuming %lu streams", buf, 0x12u);
        }
      }
      v33 = (char *)v42;
      v34 = v43;
      if (v42 != v43)
      {
        do
        {
          v33[66] &= ~1u;
          *(_QWORD *)buf = v33;
          v41[0] = 1;
          CA::Render::post_notification(0x3Fu, 0, (uint64_t)buf, 0);
          v33 += 200;
        }
        while (v33 != v34);
      }
    }
  }
  X::small_vector_base<CA::Render::ContentStreamConfig>::runDestructors(v42, v43);
  if (v42 != v44)
    free(v42);
}

void X::small_vector_base<CA::Render::ContentStreamConfig>::runDestructors(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  void *v4;
  void *v5;

  if (a1 != a2)
  {
    v3 = a1;
    do
    {
      v4 = (void *)v3[17];
      if (v4 != (void *)v3[19])
        free(v4);
      v5 = (void *)v3[9];
      if (v5 != (void *)v3[11])
        free(v5);
      v3 += 25;
    }
    while (v3 != a2);
  }
}

void CA::Render::release_surfaces(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  ipc_space_t *v6;
  const void *v7;
  mach_port_name_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v6 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
    do
    {
      v7 = *(const void **)v3;
      v8 = *(_DWORD *)(v3 + 12);
      v9 = *(_QWORD *)(v3 + 16);
      if (v8)
        mach_port_deallocate(*v6, v8);
      if (v9)
      {
        v11 = *(_QWORD **)(a2 + 8);
        v10 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v11 >= v10)
        {
          v13 = *(_QWORD **)a2;
          v14 = ((uint64_t)v11 - *(_QWORD *)a2) >> 3;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61)
            abort();
          v16 = v10 - (_QWORD)v13;
          if (v16 >> 2 > v15)
            v15 = v16 >> 2;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v17);
            v13 = *(_QWORD **)a2;
            v11 = *(_QWORD **)(a2 + 8);
          }
          else
          {
            v18 = 0;
          }
          v19 = (_QWORD *)(v17 + 8 * v14);
          *v19 = v9;
          v12 = v19 + 1;
          while (v11 != v13)
          {
            v20 = *--v11;
            *--v19 = v20;
          }
          *(_QWORD *)a2 = v19;
          *(_QWORD *)(a2 + 8) = v12;
          *(_QWORD *)(a2 + 16) = v17 + 8 * v18;
          if (v13)
            operator delete(v13);
        }
        else
        {
          *v11 = v9;
          v12 = v11 + 1;
        }
        *(_QWORD *)(a2 + 8) = v12;
      }
      CFRelease(v7);
      v3 += 24;
    }
    while (v3 != v4);
    v3 = *a1;
  }
  a1[1] = v3;
}

void CA::Render::release_single_iosurface(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v6 = *(_QWORD **)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v6 >= v5)
    {
      v8 = *(_QWORD **)a2;
      v9 = ((uint64_t)v6 - *(_QWORD *)a2) >> 3;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        abort();
      v11 = v5 - (_QWORD)v8;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8;
      v13 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v12)
        v13 = v10;
      if (v13)
      {
        v13 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v13);
        v8 = *(_QWORD **)a2;
        v6 = *(_QWORD **)(a2 + 8);
        v3 = *(_QWORD *)(a1 + 16);
      }
      else
      {
        v14 = 0;
      }
      v15 = (_QWORD *)(v13 + 8 * v9);
      v16 = v13 + 8 * v14;
      *v15 = v3;
      v7 = v15 + 1;
      while (v6 != v8)
      {
        v17 = *--v6;
        *--v15 = v17;
      }
      *(_QWORD *)a2 = v15;
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v16;
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v6 = v3;
      v7 = v6 + 1;
    }
    *(_QWORD *)(a2 + 8) = v7;
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

void X::small_vector_base<unsigned int>::resize(uint64_t a1, unint64_t a2)
{
  int *v4;
  int *v5;
  unint64_t v6;
  int *v7;

  v4 = *(int **)(a1 + 8);
  v5 = *(int **)a1;
  v6 = ((uint64_t)v4 - *(_QWORD *)a1) >> 2;
  if (v6 <= a2)
  {
    if (v6 >= a2)
      return;
    if (*(_QWORD *)(a1 + 24) < a2)
    {
      X::small_vector_base<unsigned int>::grow((int **)a1, a2);
      v5 = *(int **)a1;
      v4 = *(int **)(a1 + 8);
    }
    v7 = &v5[a2];
    if (v4 != v7)
      bzero(v4, (((char *)&v5[a2] - (char *)v4 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  else
  {
    v7 = &v5[a2];
  }
  *(_QWORD *)(a1 + 8) = v7;
}

void CA::Render::ContentStream::produce_surface(uint64_t a1, int a2, uint64_t a3, int a4)
{
  mach_port_name_t v8;
  __int128 v9;
  mach_error_t v10;
  mach_error_t v11;
  _BOOL4 v12;
  NSObject *v13;
  char *v14;
  int v15;
  NSObject *v16;
  char *v17;
  NSObject *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22[3];
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  mach_error_t v26;
  __int16 v27;
  char *v28;
  uint8_t block[8];
  __int128 v30;
  void *v31;
  uint64_t (*v32)(int, mach_msg_timeout_t, int, __int128 *);
  __int128 v33;
  __int128 v34;
  __int128 v35;
  const char *v36;
  mach_port_name_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v19 = *(_OWORD *)a3;
  v20 = *(_OWORD *)(a3 + 16);
  v21 = *(_OWORD *)(a3 + 32);
  v22[0] = *(_OWORD *)a3;
  v8 = *(_DWORD *)(a1 + 64);
  v9 = *(_OWORD *)(a3 + 32);
  v22[1] = v20;
  v22[2] = v9;
  v10 = _CACContentStreamSurfaceProduced(v8, 0, a2, v22);
  v11 = v10;
  if (!v10)
    goto LABEL_2;
  if (v10 == 268435460)
  {
    if (v8 - 1 > 0xFFFFFFFD || mach_port_mod_refs(*MEMORY[0x1E0C83DA0], v8, 0, 1))
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v18 = x_log_category_utilities;
        if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          v24 = "StreamSurfProduced";
          _os_log_impl(&dword_184457000, v18, OS_LOG_TYPE_ERROR, "%s failed to retain right", buf, 0xCu);
        }
      }
    }
    else
    {
      if (CA::MachPortUtil::reply_queue(void)::once != -1)
        dispatch_once(&CA::MachPortUtil::reply_queue(void)::once, &__block_literal_global_8138);
      *(_QWORD *)&v30 = 0x40000000;
      v33 = v19;
      *(_QWORD *)block = MEMORY[0x1E0C809B0];
      *((_QWORD *)&v30 + 1) = ___ZN2CA12MachPortUtil17call_with_timeoutIPFijjj28CA_content_stream_frame_infoEJjS2_EEEijjPKcT_DpT0__block_invoke;
      v31 = &__block_descriptor_tmp_26_18128;
      v37 = v8;
      v38 = 5;
      v39 = a2;
      v34 = v20;
      v35 = v21;
      v32 = _CACContentStreamSurfaceProduced;
      v36 = "StreamSurfProduced";
      dispatch_async((dispatch_queue_t)CA::MachPortUtil::reply_queue(void)::queue, block);
    }
LABEL_2:
    if (*(_DWORD *)(a3 + 8))
      goto LABEL_3;
LABEL_17:
    v12 = 1;
    goto LABEL_18;
  }
  if (x_log_hook_p())
  {
    mach_error_string(v11);
    x_log_();
  }
  else
  {
    v13 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
    {
      v14 = mach_error_string(v11);
      *(_DWORD *)buf = 136315650;
      v24 = "StreamSurfProduced";
      v25 = 1024;
      v26 = v11;
      v27 = 2080;
      v28 = v14;
      _os_log_impl(&dword_184457000, v13, OS_LOG_TYPE_ERROR, "%s client message err=0x%x : %s", buf, 0x1Cu);
    }
  }
  v15 = *(_DWORD *)(a3 + 8);
  v12 = v15 == 0;
  if (v11 != 268435460 && v11)
    goto LABEL_4;
  if (!v15)
    goto LABEL_17;
LABEL_3:
  v12 = 0;
LABEL_4:
  ++*(_DWORD *)(a1 + 396);
LABEL_18:
  if (v11 != 268435460 && v11)
  {
    if (x_log_hook_p())
    {
      mach_error_string(v11);
      x_log_();
    }
    else
    {
      v16 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
      {
        v17 = mach_error_string(v11);
        *(_DWORD *)block = 67109378;
        *(_DWORD *)&block[4] = v11;
        LOWORD(v30) = 2080;
        *(_QWORD *)((char *)&v30 + 2) = v17;
        _os_log_impl(&dword_184457000, v16, OS_LOG_TYPE_ERROR, "Failed to produced surface 0x%x : %s", block, 0x12u);
      }
    }
  }
  else if (v12)
  {
    *(_DWORD *)(a1 + 396) = 0;
    *(double *)(a1 + 384) = CATimeWithHostTime(*(_QWORD *)a3);
    *(_DWORD *)(a1 + 392) = a4;
  }
}

uint64_t ___ZN2CA12MachPortUtil17call_with_timeoutIPFijjj28CA_content_stream_frame_infoEJjS2_EEEijjPKcT_DpT0__block_invoke(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, _OWORD *);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  mach_error_t v7;
  mach_error_t v9;
  NSObject *v10;
  uint64_t v11;
  char *v12;
  _OWORD v13[3];
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  mach_error_t v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _OWORD *))(a1 + 32);
  v3 = *(unsigned int *)(a1 + 96);
  v4 = *(unsigned int *)(a1 + 100);
  v5 = *(unsigned int *)(a1 + 104);
  v6 = *(_OWORD *)(a1 + 56);
  v13[0] = *(_OWORD *)(a1 + 40);
  v13[1] = v6;
  v13[2] = *(_OWORD *)(a1 + 72);
  v7 = v2(v3, v4, v5, v13);
  if (v7)
  {
    v9 = v7;
    if (x_log_hook_p())
    {
      mach_error_string(v9);
      x_log_();
    }
    else
    {
      v10 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
      {
        v11 = *(_QWORD *)(a1 + 88);
        v12 = mach_error_string(v9);
        *(_DWORD *)buf = 136315650;
        v15 = v11;
        v16 = 1024;
        v17 = v9;
        v18 = 2080;
        v19 = v12;
        _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_ERROR, "%s client message err=0x%x : %s", buf, 0x1Cu);
      }
    }
  }
  return mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(_DWORD *)(a1 + 96));
}

BOOL CA::Render::ContentStream::reuse_surface(CA::Render::ContentStream *this, int a2)
{
  __int128 *v3;
  __int128 *v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  NSObject *v9;
  _BOOL8 result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 *v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v4 = (__int128 *)*((_QWORD *)this + 42);
  v3 = (__int128 *)*((_QWORD *)this + 43);
  if (v4 != v3)
  {
    while (*((_DWORD *)v4 + 2) != a2)
    {
      v4 = (__int128 *)((char *)v4 + 24);
      if (v4 == v3)
        goto LABEL_9;
    }
  }
  if (v4 == v3)
  {
LABEL_9:
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v9 = x_log_category_render;
      result = os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      v25 = 0;
      _os_log_impl(&dword_184457000, v9, OS_LOG_TYPE_ERROR, "Releasing invalid surfaces", (uint8_t *)&v25, 2u);
    }
    return 0;
  }
  v6 = *((_QWORD *)this + 40);
  v5 = *((_QWORD *)this + 41);
  if (v6 >= v5)
  {
    v11 = *((_QWORD *)this + 39);
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v11) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v11) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    if (v15)
      v15 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v15);
    else
      v16 = 0;
    v17 = v15 + 24 * v12;
    v18 = v15 + 24 * v16;
    v19 = *v4;
    *(_QWORD *)(v17 + 16) = *((_QWORD *)v4 + 2);
    *(_OWORD *)v17 = v19;
    v8 = v17 + 24;
    v21 = (char *)*((_QWORD *)this + 39);
    v20 = (char *)*((_QWORD *)this + 40);
    if (v20 != v21)
    {
      do
      {
        v22 = *(_OWORD *)(v20 - 24);
        *(_QWORD *)(v17 - 8) = *((_QWORD *)v20 - 1);
        *(_OWORD *)(v17 - 24) = v22;
        v17 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      v20 = (char *)*((_QWORD *)this + 39);
    }
    *((_QWORD *)this + 39) = v17;
    *((_QWORD *)this + 40) = v8;
    *((_QWORD *)this + 41) = v18;
    if (v20)
      operator delete(v20);
  }
  else
  {
    v7 = *v4;
    *(_QWORD *)(v6 + 16) = *((_QWORD *)v4 + 2);
    *(_OWORD *)v6 = v7;
    v8 = v6 + 24;
  }
  *((_QWORD *)this + 40) = v8;
  v23 = (__int128 *)*((_QWORD *)this + 43);
  v24 = (char *)v23 - ((char *)v4 + 24);
  if (v23 != (__int128 *)((char *)v4 + 24))
    memmove(v4, (char *)v4 + 24, (char *)v23 - ((char *)v4 + 24));
  *((_QWORD *)this + 43) = (char *)v4 + v24;
  return 1;
}

void CA::Render::Proxy::show(CA::Render::Proxy *this, unsigned int a2, char a3)
{
  _BOOL4 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  uint64_t v12;
  int v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = x_log_hook_p();
  if ((a3 & 1) != 0)
  {
    if (v5)
      goto LABEL_3;
    v12 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *((_DWORD *)this + 3) >> 8;
      *(_DWORD *)buf = 67109120;
      v15 = v13;
      v9 = "(proxy %d)";
      v10 = v12;
      v11 = 8;
      goto LABEL_6;
    }
  }
  else
  {
    if (v5)
    {
LABEL_3:
      x_log_();
      return;
    }
    v6 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *((_DWORD *)this + 3) >> 8;
      v8 = *((_QWORD *)this + 2);
      *(_DWORD *)buf = 67109376;
      v15 = v7;
      v16 = 2048;
      v17 = v8;
      v9 = "(proxy %d 0x%llx)";
      v10 = v6;
      v11 = 18;
LABEL_6:
      _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_DEFAULT, v9, buf, v11);
    }
  }
}

void sub_1847288B0(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_184728F3C(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_184728FD8(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18472A2C8(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void CA::Render::Pattern::~Pattern(CA::Render::Pattern *this, const CA::Render::Object *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = off_1E1598F18;
  v3 = (unsigned int *)*((_QWORD *)this + 16);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  --dword_1ECDC7CBC;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1598F18;
  v3 = (unsigned int *)*((_QWORD *)this + 16);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  --dword_1ECDC7CBC;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::Render::Pattern::show(CA::Render::Pattern *this, const CGAffineTransform *a2, uint64_t a3)
{
  _BOOL4 v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CA::Render *v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  uint32_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v6 = x_log_hook_p();
  if ((a3 & 1) != 0)
  {
    if (v6)
    {
LABEL_16:
      x_log_();
      return;
    }
    v21 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v22 = *((_QWORD *)this + 10);
      v23 = *((_QWORD *)this + 11);
      v24 = *((_QWORD *)this + 12);
      v25 = *((_QWORD *)this + 13);
      *(_DWORD *)buf = 134218752;
      v27 = v22;
      v28 = 2048;
      v29 = v23;
      v30 = 2048;
      v31 = v24;
      v32 = 2048;
      v33 = v25;
      v18 = "[%g %g] [%g %g])";
      v19 = v21;
      v20 = 42;
      goto LABEL_19;
    }
  }
  else
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *((_QWORD *)this + 8);
        v9 = *((_QWORD *)this + 9);
        v10 = *((_QWORD *)this + 10);
        v11 = *((_QWORD *)this + 11);
        v12 = *((_QWORD *)this + 12);
        v13 = *((_QWORD *)this + 13);
        *(_DWORD *)buf = 134219264;
        v27 = v8;
        v28 = 2048;
        v29 = v9;
        v30 = 2048;
        v31 = v10;
        v32 = 2048;
        v33 = v11;
        v34 = 2048;
        v35 = v12;
        v36 = 2048;
        v37 = v13;
        _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_DEFAULT, "(pattern [%g %g %g %g] [%g %g]", buf, 0x3Eu);
      }
    }
    CA::Render::show_affine_transform((CA::Render *)"matrix", (const char *)this + 16, a2);
    v14 = (CA::Render *)((_DWORD)a2 + 1);
    CA::Render::show_newline(v14);
    if (*((_QWORD *)this + 16))
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v15 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v15, OS_LOG_TYPE_DEFAULT, "(cell ", buf, 2u);
        }
      }
      (*(void (**)(_QWORD, CA::Render *, uint64_t))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16), v14, a3);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v16 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v16, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
    if (x_log_hook_p())
      goto LABEL_16;
    v17 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v18 = ")";
      v19 = v17;
      v20 = 2;
LABEL_19:
      _os_log_impl(&dword_184457000, v19, OS_LOG_TYPE_DEFAULT, v18, buf, v20);
    }
  }
}

CA::Render::Texture *CA::Render::create_pattern_image(uint64_t a1, CGColorSpace *a2, CGFloat *a3, double *a4)
{
  unint64_t v4;
  uint64_t v8;
  signed int v9;
  unint64_t v10;
  size_t v11;
  CA::Render *v12;
  CA::Render::Texture *result;
  CGColorSpace *v14;
  _BYTE *v15;
  void *v16;
  CGContext *v17;
  __int128 v18;
  void (*v19)(const void *, void *);
  void *v20;
  CGAffineTransform transform;
  CGAffineTransform v22;
  CGAffineTransform v23;
  CGAffineTransform v24;
  CGAffineTransform v25;
  CGAffineTransform v26;
  size_t v27;
  unint64_t v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (CGPatternIsOpaque())
      v8 = 3;
    else
      v8 = 1;
  }
  else
  {
    v8 = 8;
  }
  v9 = vcvtpd_s64_f64(a4[2]);
  LODWORD(v4) = vcvtpd_s64_f64(a4[3]);
  v10 = CA::Render::format_rowbytes((CA::Render *)v8, v9);
  v11 = v10;
  v27 = 0;
  v28[0] = v10;
  if (is_mul_ok(v10, v4))
    v12 = (CA::Render *)(v10 * v4);
  else
    v12 = 0;
  result = (CA::Render::Texture *)CA::Render::aligned_malloc(v12, &v27, 0);
  if (result)
  {
    v14 = result;
    v15 = CAGetCachedCGBitmapContext_(result, v9, v4, v8, v11, a2);
    if (v15 && (v17 = (CGContext *)*((_QWORD *)v15 + 2)) != 0)
    {
      CGContextSetCompositeOperation();
      v18 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
      *(_OWORD *)&v26.a = *MEMORY[0x1E0C9BAA8];
      *(_OWORD *)&v26.c = v18;
      *(_OWORD *)&v26.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
      *(_OWORD *)&v25.a = *(_OWORD *)&v26.a;
      *(_OWORD *)&v25.c = v18;
      *(_OWORD *)&v25.tx = *(_OWORD *)&v26.tx;
      CGAffineTransformScale(&v26, &v25, (double)v9 / a4[2], (double)(int)v4 / a4[3]);
      v23 = v26;
      CGAffineTransformTranslate(&v24, &v23, -*a4, -a4[1]);
      v26 = v24;
      v22 = v24;
      CGAffineTransformScale(&v24, &v22, *a3, a3[1]);
      v26 = v24;
      transform = v24;
      CGContextConcatCTM(v17, &transform);
      CGContextSetBaseCTM();
      CGContextDrawPatternCell();
      CGContextFlush(v17);
      CAReleaseCachedCGContext(v17);
      v19 = (void (*)(const void *, void *))v27;
      MEMORY[0x186DBEA7C](*MEMORY[0x1E0C83DA0], v14, v27, 1, 1);
      return CA::Render::Image::new_image((CA::Render::Image *)v8, v9, v4, 1u, a2, v14, v28, (const unint64_t *)CA::Render::aligned_free, v19, v20);
    }
    else
    {
      CA::Render::aligned_free(v14, v27, v16);
      return 0;
    }
  }
  return result;
}

void CA::Render::pattern_deleted(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  malloc_zone_t *malloc_zone;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::pattern_lock);
  v5 = x_hash_table_remove(CA::Render::pattern_cache, a4);
  if (v5)
  {
    v6 = (_QWORD *)v5;
    if (*(double *)(v5 + 32) > 0.0)
    {
      v8 = *(_QWORD *)v5;
      v7 = *(_QWORD **)(v5 + 8);
      *(_QWORD *)(v8 + 8) = v7;
      *v7 = v8;
      *(_QWORD *)v5 = v5;
      *(_QWORD *)(v5 + 8) = v5;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::pattern_lock);
    v9 = (unsigned int *)v6[3];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
    }
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v6);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::pattern_lock);
  }
}

uint64_t CA::OGL::Shape::FlattenedLines::emit_line(CA::OGL::Shape::FlattenedLines *this, double a2, double a3, double a4, double a5, double a6, double a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, const double *a12)
{
  double v13;
  uint64_t result;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29[2];

  v29[1] = *(double *)MEMORY[0x1E0C80C00];
  v28 = a3;
  v29[0] = a2;
  v26 = a6;
  v27 = a5;
  if (fabs(a4 + -1.0) >= 0.001)
  {
    v13 = 1.0 / a4;
    v29[0] = v13 * a2;
    v28 = v13 * a3;
  }
  if (fabs(a7 + -1.0) >= 0.001)
  {
    v26 = 1.0 / a7 * a6;
    v27 = 1.0 / a7 * a5;
  }
  result = CA::OGL::Shape::clip_line((CA::OGL::Shape *)v29, &v28, &v27, &v26, (double *)this + 1, a12);
  if ((_DWORD)result)
  {
    v15 = *((_QWORD *)this + 5);
    v16 = v29[0];
    v17 = v28;
    v18 = v27;
    v19 = v26;
    v20 = *(unsigned __int8 *)(v15 + 65);
    v21 = (_QWORD *)(v15 + 8 * v20);
    v23 = v21 + 4;
    v22 = v21[4];
    if ((unint64_t)(v22 + 2) > v21[6])
    {
      result = (uint64_t)CA::OGL::Shape::Lines::flush((_QWORD **)v15, v20);
      v22 = *v23;
    }
    v24 = v21[2] + 16 * v22;
    v25 = *(_QWORD *)(v15 + 8);
    *(_QWORD *)(v24 + 24) = v25;
    *(_QWORD *)(v24 + 8) = v25;
    *(float *)v24 = v16;
    *(float *)(v24 + 4) = v17;
    *(float *)(v24 + 16) = v18;
    *(float *)(v24 + 20) = v19;
    *v23 += 2;
  }
  return result;
}

BOOL CA::OGL::Shape::clip_line(CA::OGL::Shape *this, double *a2, double *a3, double *a4, double *a5, const double *a6)
{
  double v6;
  double v7;
  int v8;
  double v9;
  int v10;
  double v11;
  int v12;
  int v13;
  _BOOL8 v14;
  char v15;
  double v16;
  double v17;
  int v18;
  BOOL v19;
  double *v20;
  double *v21;

  v6 = *a2;
  v7 = a5[2];
  if (v7 >= *(double *)this)
  {
    if (*a5 > *(double *)this)
      v8 = 8;
    else
      v8 = 0;
  }
  else
  {
    v8 = 4;
  }
  v9 = a5[3];
  if (v9 >= v6)
  {
    v10 = v8 | 2;
    if (a5[1] <= v6)
      v10 = v8;
  }
  else
  {
    v10 = v8 | 1;
  }
  v11 = *a4;
  if (v7 >= *a3)
  {
    if (*a5 > *a3)
      v12 = 8;
    else
      v12 = 0;
  }
  else
  {
    v12 = 4;
  }
  if (v9 >= v11)
  {
    v13 = v12 | 2;
    if (a5[1] <= v11)
      v13 = v12;
  }
  else
  {
    v13 = v12 | 1;
  }
  v14 = (v13 | v10) == 0;
  while ((v13 & v10) == 0 && v13 | v10)
  {
    if (v10)
      v15 = v10;
    else
      v15 = v13;
    if ((v15 & 1) != 0)
    {
      v17 = a5[3];
    }
    else
    {
      if ((v15 & 2) == 0)
      {
        if ((v15 & 4) != 0)
          v16 = a5[2];
        else
          v16 = *a5;
        v17 = (v16 - *(double *)this) * (*a4 - *a2) / (*a3 - *(double *)this) + *a2;
        goto LABEL_33;
      }
      v17 = a5[1];
    }
    v16 = (v17 - *a2) * (*a3 - *(double *)this) / (*a4 - *a2) + *(double *)this;
LABEL_33:
    if (a5[2] >= v16)
    {
      if (*a5 <= v16)
        v18 = 0;
      else
        v18 = 8;
    }
    else
    {
      v18 = 4;
    }
    if (a5[3] >= v17)
    {
      if (a5[1] > v17)
        v18 |= 2u;
    }
    else
    {
      v18 |= 1u;
    }
    v19 = v10 == 0;
    if (v10)
      v20 = (double *)this;
    else
      v20 = a3;
    if (v10)
      v21 = a2;
    else
      v21 = a4;
    if (v10)
      v10 = v18;
    else
      v10 = 0;
    if (v19)
      v13 = v18;
    *v20 = v16;
    *v21 = v17;
    v14 = (v13 | v10) == 0;
  }
  return v14;
}

double CA::OGL::Shape::FlattenedMask::emit_line(CA::OGL::Shape::FlattenedMask *this, double a2, double a3, double a4, double a5, double a6, double a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, const double *a12)
{
  double v13;
  double result;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  int v27;
  double v28;
  double v29;
  double v30;
  double v31[2];

  v31[1] = *(double *)MEMORY[0x1E0C80C00];
  v30 = a3;
  v31[0] = a2;
  v28 = a6;
  v29 = a5;
  if (fabs(a4 + -1.0) >= 0.001)
  {
    v13 = 1.0 / a4;
    v31[0] = v13 * a2;
    v30 = v13 * a3;
  }
  if (fabs(a7 + -1.0) >= 0.001)
  {
    v28 = 1.0 / a7 * a6;
    v29 = 1.0 / a7 * a5;
  }
  if (CA::OGL::Shape::clip_line((CA::OGL::Shape *)v31, &v30, &v29, &v28, (double *)this + 1, a12))
  {
    result = v31[0];
    v15 = v29 - v31[0];
    v16 = v28 - v30;
    v17 = vabdd_f64(v29, v31[0]);
    v18 = vabdd_f64(v28, v30);
    if (v17 <= v18)
    {
      if (v18 > v17)
      {
        v23 = *((_QWORD *)this + 6);
        v24 = v16 > 0.0 ? *((_QWORD *)this + 6) : -v23;
        if (((int)v18 & 0x80000000) == 0)
        {
          v25 = v15 / v18;
          v26 = *((_QWORD *)this + 5) + v23 * (uint64_t)(v30 - *((double *)this + 2));
          result = v31[0] - *((double *)this + 1);
          v27 = (int)v18 + 1;
          do
          {
            *(_BYTE *)(v26 + (uint64_t)result) = -1;
            result = result + v25;
            v26 += v24;
            --v27;
          }
          while (v27);
        }
      }
    }
    else
    {
      v19 = -1;
      if (v15 > 0.0)
        v19 = 1;
      if (((int)v17 & 0x80000000) == 0)
      {
        v20 = *((_QWORD *)this + 6);
        v21 = *((_QWORD *)this + 5) + (int)(v31[0] - *((double *)this + 1));
        result = v30 - *((double *)this + 2);
        v22 = (int)v17 + 1;
        do
        {
          *(_BYTE *)(v21 + v20 * (uint64_t)result) = -1;
          v21 += v19;
          result = result + v16 / v17;
          --v22;
        }
        while (v22);
      }
    }
  }
  return result;
}

uint64_t CA::OGL::Shape::flatten_quad(uint64_t (***a1)(_QWORD, double, double, double, double, double, double), double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v28;

  v20 = a5 - a2;
  v21 = a6 - a3;
  v22 = a8 - a5;
  v23 = a9 - a6;
  if (vabdd_f64(a9 - a6, a6 - a3) + vabdd_f64(a8 - a5, a5 - a2) >= 2.0)
  {
    do
    {
      v22 = v22 * 0.5;
      v23 = v23 * 0.5;
      v24 = a2 + v20 * 0.5 + (a8 - v22 - (a2 + v20 * 0.5)) * 0.5;
      v25 = a3 + v21 * 0.5 + (a9 - v23 - (a3 + v21 * 0.5)) * 0.5;
      v26 = a4 + (a7 - a4) * 0.5 + (a10 + (a7 - a10) * 0.5 - (a4 + (a7 - a4) * 0.5)) * 0.5;
      v28 = a10 + (a7 - a10) * 0.5;
      CA::OGL::Shape::flatten_quad(a1);
      v20 = a8 - v22 - v24;
      a7 = v28;
      v21 = a9 - v23 - v25;
      a4 = v26;
      a3 = v25;
      a2 = v24;
    }
    while (vabdd_f64(v23, v21) + vabdd_f64(v22, v20) >= 2.0);
  }
  else
  {
    v24 = a2;
    v25 = a3;
    v26 = a4;
  }
  return (**a1)(a1, v24, v25, v26, a8, a9, a10);
}

uint64_t CA::OGL::Shape::flatten_cube(uint64_t (***a1)(_QWORD, __n128, __n128, __n128, double, double, double), int a2, __n128 a3, __n128 a4, __n128 a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v36;
  double v37;

  v25 = 2.0;
  v26 = (a2 + 1);
  while ((_DWORD)v26 != 25)
  {
    v27 = a12 - a9;
    v28 = a13 - a10;
    if (vabdd_f64(a12 - a9, a9 - a6)
       + vabdd_f64(a9 - a6, a6 - a3.n128_f64[0])
       + vabdd_f64(a10 - a7, a7 - a4.n128_f64[0])
       + vabdd_f64(a13 - a10, a10 - a7) < v25)
      break;
    v29 = v27 + v27 + (a9 + a9 - (a6 + a12)) * 0.5;
    v30 = a3.n128_f64[0]
        + ((a6 - a3.n128_f64[0]) * 3.0
         + ((a9 + a3.n128_f64[0] - a6 * v25) * 3.0 + (a12 - a3.n128_f64[0] + (a9 - a6) * -3.0) * 0.5) * 0.5)
        * 0.5;
    v31 = a4.n128_f64[0]
        + ((a7 - a4.n128_f64[0]) * 3.0
         + ((a10 + a4.n128_f64[0] - a7 * v25) * 3.0 + (a13 - a4.n128_f64[0] + (a10 - a7) * -3.0) * 0.5) * 0.5)
        * 0.5;
    v32 = a5.n128_f64[0]
        + ((a8 - a5.n128_f64[0]) * 3.0
         + ((a11 + a5.n128_f64[0] - a8 * v25) * 3.0 + (a14 - a5.n128_f64[0] + (a11 - a8) * -3.0) * 0.5) * 0.5)
        * 0.5;
    v36 = a13 - (v28 + v28 + (a10 + a10 - (a7 + a13)) * 0.5) * 0.5;
    v37 = a12 - v29 * 0.5;
    v33 = a14 - (a14 - a11 + a14 - a11 + (a11 + a11 - (a8 + a14)) * 0.5) * 0.5;
    a9 = a12 - v27 * 0.5;
    a10 = a13 - v28 * 0.5;
    a11 = a14 - (a14 - a11) * 0.5;
    a8 = v33;
    v34 = a12;
    CA::OGL::Shape::flatten_cube(a1, v26);
    v25 = 2.0;
    a12 = v34;
    v26 = (v26 + 1);
    a3.n128_f64[0] = v30;
    a4.n128_f64[0] = v31;
    a7 = v36;
    a6 = v37;
    a5.n128_f64[0] = v32;
  }
  return (**a1)(a1, a3, a4, a5, a12, a13, a14);
}

_QWORD *CA::OGL::Shape::HairlineRenderer<CA::OGL::RenderPathIterator>::render_lines(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  int64x2_t v3;
  __n128 v4;
  _QWORD *v5;
  int32x2_t v6;
  __n128 v7;
  uint64_t (***v9)(CA::OGL::Shape::FlattenedLines *__hidden, double, double, double, double, double, double);
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t (**v13)(CA::OGL::Shape::FlattenedLines *__hidden, double, double, double, double, double, double);
  __n128 v14;
  float64x2_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3.i64[0] = a3->i32[0];
  v3.i64[1] = (int)HIDWORD(*(unint64_t *)a3);
  v4 = (__n128)vcvtq_f64_s64(v3);
  v5 = *(_QWORD **)(a1 + 8);
  v6 = vadd_s32(a3[1], *a3);
  v3.i64[0] = v6.i32[0];
  v3.i64[1] = v6.i32[1];
  v7 = (__n128)vdupq_n_s64(0xBF50624DD2F1A9FCLL);
  v14 = v4;
  v15 = vaddq_f64(vcvtq_f64_s64(v3), (float64x2_t)v7);
  v13 = &off_1E15954C8;
  v16 = a2;
  v12 = 0u;
  v11 = 0u;
  v10 = 0u;
  v9 = &v13;
  return CA::OGL::RenderPathIterator::iterate<CA::OGL::Shape::FlatteningIterator>(v5, (__n128 *)&v9, (__n128)0, v7, v4);
}

_QWORD *CA::OGL::Shape::HairlineRenderer<CA::OGL::RenderPathIterator>::render_mask(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4)
{
  int32x2_t v4;
  int32x2_t v5;
  int64x2_t v6;
  _QWORD *v7;
  int32x2_t v8;
  __n128 v9;
  uint64_t (***v11)(CA::OGL::Shape::FlattenedMask *__hidden, double, double, double, double, double, double);
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t (**v15)(CA::OGL::Shape::FlattenedMask *__hidden, double, double, double, double, double, double);
  __n128 v16;
  float64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = *a4;
  v5 = a4[1];
  v6.i64[0] = a4->i32[0];
  v6.i64[1] = (int)HIDWORD(*(unint64_t *)a4);
  v16 = (__n128)vcvtq_f64_s64(v6);
  v7 = *(_QWORD **)(a1 + 8);
  v8 = vadd_s32(v5, v4);
  v6.i64[0] = v8.i32[0];
  v6.i64[1] = v8.i32[1];
  v9 = (__n128)vdupq_n_s64(0xBF50624DD2F1A9FCLL);
  v17 = vaddq_f64(vcvtq_f64_s64(v6), (float64x2_t)v9);
  v15 = &off_1E15954B0;
  v18 = a2;
  v19 = a3;
  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  v11 = &v15;
  return CA::OGL::RenderPathIterator::iterate<CA::OGL::Shape::FlatteningIterator>(v7, (__n128 *)&v11, (__n128)0, v9, v16);
}

_QWORD *CA::OGL::RenderPathIterator::iterate<CA::OGL::Shape::FlatteningIterator>(_QWORD *result, __n128 *a2, __n128 a3, __n128 a4, __n128 a5)
{
  double *v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  _QWORD *v10;
  __int128 v11;
  __n128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  float64x2_t v16;
  unint64_t v17;
  float64_t v18;
  float64_t v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  unint64_t v25;
  unint64_t v26;
  double v27;
  double v28;
  float64x2_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v6 = *(double **)(*result + 32);
  v7 = *(_BYTE **)(*result + 40);
  v8 = *(unsigned int *)(*result + 20);
  v9 = &v7[v8];
  if (result[1])
  {
    if ((_DWORD)v8)
    {
      v10 = result;
      v11 = xmmword_18474DF50;
      while (1)
      {
        v12.n128_u64[1] = 0;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v13 = *v7;
        if ((v13 - 1) < 2)
          break;
        if (v13 == 3)
        {
          v14 = 1;
LABEL_10:
          v31 = *((_OWORD *)v6 + 1);
          v32 = v11;
LABEL_11:
          v29 = *(float64x2_t *)v6;
          v30 = v11;
          v15 = v14 + 1;
          result = (_QWORD *)CA::Transform::apply_to_point4(v10[1], &v29, &v29, (const double *)(v14 + 1));
          v11 = xmmword_18474DF50;
          v6 += 2 * v15;
          v13 = *v7;
          goto LABEL_12;
        }
        if (v13 == 4)
        {
          v33 = *((_OWORD *)v6 + 2);
          *((_QWORD *)&v34 + 1) = 0x3FF0000000000000;
          v14 = 2;
          goto LABEL_10;
        }
LABEL_12:
        switch(v13)
        {
          case 0:
            result = (_QWORD *)(**(uint64_t (***)(unint64_t, double, double, double, double, double, double))a2->n128_u64[0])(a2->n128_u64[0], a2[2].n128_f64[0], a2[2].n128_f64[1], a2[3].n128_f64[0], a2->n128_f64[1], a2[1].n128_f64[0], a2[1].n128_f64[1]);
            v11 = xmmword_18474DF50;
            a2[2] = *(__n128 *)((char *)a2 + 8);
            a2[3].n128_u64[0] = a2[1].n128_u64[1];
            break;
          case 1:
            v16 = v29;
            v17 = *((_QWORD *)&v30 + 1);
            *(float64x2_t *)((char *)a2 + 8) = v29;
            a2[2].n128_u64[1] = *(_QWORD *)&v16.f64[1];
            a2[3].n128_u64[0] = v17;
            a2[1].n128_u64[1] = v17;
            a2[2].n128_u64[0] = *(_QWORD *)&v16.f64[0];
            break;
          case 2:
            v19 = v29.f64[1];
            v18 = v29.f64[0];
            v20 = *((_QWORD *)&v30 + 1);
            result = (_QWORD *)(**(uint64_t (***)(unint64_t, double, double, double, double, double, double))a2->n128_u64[0])(a2->n128_u64[0], a2[2].n128_f64[0], a2[2].n128_f64[1], a2[3].n128_f64[0], v29.f64[0], v29.f64[1], *((double *)&v30 + 1));
            goto LABEL_18;
          case 3:
            v19 = *((double *)&v31 + 1);
            v18 = *(double *)&v31;
            v20 = *((_QWORD *)&v32 + 1);
            result = (_QWORD *)CA::OGL::Shape::flatten_quad(a2->n128_u64[0], a2[2].n128_f64[0], a2[2].n128_f64[1], a2[3].n128_f64[0], v29.f64[0], v29.f64[1], *((double *)&v30 + 1), *(double *)&v31, *((double *)&v31 + 1), *((double *)&v32 + 1));
            goto LABEL_18;
          case 4:
            v19 = *((double *)&v33 + 1);
            v18 = *(double *)&v33;
            v20 = *((_QWORD *)&v34 + 1);
            v12.n128_u64[0] = a2[2].n128_u64[0];
            a4.n128_u64[0] = a2[2].n128_u64[1];
            a5.n128_u64[0] = a2[3].n128_u64[0];
            result = (_QWORD *)CA::OGL::Shape::flatten_cube(a2->n128_u64[0], 0, v12, a4, a5, v29.f64[0], v29.f64[1], *((double *)&v30 + 1), *(double *)&v31, *((double *)&v31 + 1), *((double *)&v32 + 1), *(double *)&v33, *((double *)&v33 + 1), *((double *)&v34 + 1));
LABEL_18:
            v11 = xmmword_18474DF50;
            a2[2].n128_f64[0] = v18;
            a2[2].n128_f64[1] = v19;
            a2[3].n128_u64[0] = v20;
            break;
          default:
            break;
        }
        if (++v7 >= v9)
          return result;
      }
      v14 = 0;
      goto LABEL_11;
    }
  }
  else if ((_DWORD)v8)
  {
    do
    {
      switch(*v7)
      {
        case 0:
          result = (_QWORD *)(**(uint64_t (***)(unint64_t, double, double, double, double, double, double))a2->n128_u64[0])(a2->n128_u64[0], a2[2].n128_f64[0], a2[2].n128_f64[1], a2[3].n128_f64[0], a2->n128_f64[1], a2[1].n128_f64[0], a2[1].n128_f64[1]);
          a3 = *(__n128 *)((char *)a2 + 8);
          a2[2] = a3;
          a2[3].n128_u64[0] = a2[1].n128_u64[1];
          break;
        case 1:
          v25 = *(_QWORD *)v6;
          v26 = *((_QWORD *)v6 + 1);
          v6 += 2;
          a2[2].n128_u64[0] = v25;
          a2[2].n128_u64[1] = v26;
          a2->n128_u64[1] = v25;
          a2[1].n128_u64[0] = v26;
          a2[3].n128_u64[0] = 0x3FF0000000000000;
          a2[1].n128_u64[1] = 0x3FF0000000000000;
          break;
        case 2:
          v21 = *v6;
          v22 = v6[1];
          v6 += 2;
          result = (_QWORD *)(**(uint64_t (***)(unint64_t, double, double, double, double, double, double))a2->n128_u64[0])(a2->n128_u64[0], a2[2].n128_f64[0], a2[2].n128_f64[1], a2[3].n128_f64[0], v21, v22, 1.0);
          a2[2].n128_f64[0] = v21;
          a2[2].n128_f64[1] = v22;
          goto LABEL_28;
        case 3:
          v27 = v6[2];
          v28 = v6[3];
          result = (_QWORD *)CA::OGL::Shape::flatten_quad(a2->n128_u64[0], a2[2].n128_f64[0], a2[2].n128_f64[1], a2[3].n128_f64[0], *v6, v6[1], 1.0, v27, v28, 1.0);
          a2[2].n128_f64[0] = v27;
          a2[2].n128_f64[1] = v28;
          v6 += 4;
          goto LABEL_28;
        case 4:
          v23 = v6[4];
          v24 = v6[5];
          a3.n128_u64[0] = a2[2].n128_u64[0];
          a4.n128_u64[0] = a2[2].n128_u64[1];
          a5.n128_u64[0] = a2[3].n128_u64[0];
          result = (_QWORD *)CA::OGL::Shape::flatten_cube(a2->n128_u64[0], 0, a3, a4, a5, *v6, v6[1], 1.0, v6[2], v6[3], 1.0, v23, v24, 1.0);
          a2[2].n128_f64[0] = v23;
          a2[2].n128_f64[1] = v24;
          v6 += 6;
LABEL_28:
          a2[3].n128_u64[0] = 0x3FF0000000000000;
          break;
        default:
          break;
      }
      ++v7;
    }
    while (v7 < v9);
  }
  return result;
}

void CA::CG::GaussianBlurStyle::~GaussianBlurStyle(CA::CG::Renderer **this, const void *a2)
{
  *this = (CA::CG::Renderer *)off_1E1593750;
  CA::CG::Renderer::release_object(this[2], a2);
}

{
  malloc_zone_t *malloc_zone;

  *this = (CA::CG::Renderer *)off_1E1593750;
  CA::CG::Renderer::release_object(this[2], a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

double *CA::CG::GaussianBlurStyle::expand_layer_roi(CA::CG::GaussianBlurStyle *this, float64x2_t *a2)
{
  double *result;
  float64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int32x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v9 = *a2;
  v10 = a2[1];
  v11 = *a2;
  v12 = v10;
  result = CA::BoundsImpl::inset(v11.f64, *((double *)this + 10) * -2.8 + -1.0, *((double *)this + 10) * -2.8 + -1.0);
  v4 = v12;
  v5 = vclezq_f64(v10);
  v6 = vclezq_f64(v12);
  v7 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v6, v5), (int8x16_t)vzip2q_s64(v6, v5))));
  if ((v7.i8[4] & 1) != 0)
  {
    if ((v7.i8[0] & 1) != 0)
      return result;
    v8 = v11;
  }
  else
  {
    if ((v7.i8[0] & 1) != 0)
      return result;
    v8 = vminnmq_f64(v9, v11);
    v4 = vsubq_f64(vmaxnmq_f64(vaddq_f64(v9, v10), vaddq_f64(v11, v12)), v8);
  }
  *a2 = v8;
  a2[1] = v4;
  return result;
}

uint64_t CA::CG::GaussianBlurStyle::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
}

_DWORD *CA::CG::GaussianBlurStyle::copy(CA::CG::GaussianBlurStyle *this)
{
  malloc_zone_t *malloc_zone;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  __int128 v6;
  __int128 v7;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v3 = malloc_type_zone_malloc(malloc_zone, 0x58uLL, 0x8BB15036uLL);
  v4 = v3;
  if (v3)
  {
    *(_QWORD *)v3 = off_1E1593750;
    v5 = *((_DWORD *)this + 3);
    v3[2] = 0;
    v3[3] = v5;
    *((_QWORD *)v3 + 2) = CGStyleRetain();
    v6 = *(_OWORD *)((char *)this + 56);
    v7 = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)(v4 + 10) = *(_OWORD *)((char *)this + 40);
    *(_OWORD *)(v4 + 6) = v7;
    *(_OWORD *)(v4 + 14) = v6;
    v4[18] = *((_DWORD *)this + 18);
    v4[2] = 1;
    *(_QWORD *)v4 = off_1E1592A28;
    *((_QWORD *)v4 + 10) = *((_QWORD *)this + 10);
  }
  return v4;
}

void CA::Render::GradientLayer::show(CA::Render::GradientLayer *this, int a2, char a3)
{
  int v6;
  const char *v7;
  const char *v8;
  BOOL v9;
  BOOL v10;
  const char *v11;
  _BOOL4 v12;
  NSObject *v13;
  CA::Render *v14;
  NSObject *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  double v23;
  uint64_t v24;
  const char *v25;
  NSObject *v26;
  uint32_t v27;
  NSObject *v28;
  uint64_t v29;
  uint8_t buf[4];
  double v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)this + 26);
  v7 = "conic";
  v8 = "axial";
  v9 = v6 != 49;
  if (v6 != 49)
    v8 = 0;
  if (v6 == 115)
    v9 = 0;
  else
    v7 = v8;
  v10 = v6 != 442 && v9;
  if (v6 == 442)
    *(double *)&v11 = COERCE_DOUBLE("radial");
  else
    v11 = v7;
  v12 = x_log_hook_p();
  if ((a3 & 1) != 0)
  {
    if (v12)
    {
      x_log_();
    }
    else
    {
      v28 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v28, OS_LOG_TYPE_DEFAULT, "gradient-layer", buf, 2u);
      }
    }
    if (!v10)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
LABEL_36:
        x_log_();
        return;
      }
      v29 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        v31 = *(double *)&v11;
        v25 = " %s";
        v26 = v29;
        v27 = 12;
        goto LABEL_39;
      }
    }
  }
  else
  {
    if (v12)
    {
      x_log_();
    }
    else
    {
      v13 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v13, OS_LOG_TYPE_DEFAULT, "(gradient-layer", buf, 2u);
      }
    }
    v14 = (CA::Render *)(a2 + 1);
    if (!v10)
    {
      CA::Render::show_newline(v14);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v15 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v31 = *(double *)&v11;
          _os_log_impl(&dword_184457000, v15, OS_LOG_TYPE_DEFAULT, "(gradientType %s)", buf, 0xCu);
        }
      }
    }
    v17 = *((double *)this + 9);
    v16 = *((_QWORD *)this + 10);
    v19 = *((double *)this + 11);
    v18 = *((_QWORD *)this + 12);
    CA::Render::show_newline(v14);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v20 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        v31 = v17;
        v32 = 2048;
        v33 = v16;
        _os_log_impl(&dword_184457000, v20, OS_LOG_TYPE_DEFAULT, "(startPoint [%.10g %.10g])", buf, 0x16u);
      }
    }
    CA::Render::show_newline(v14);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v21 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        v31 = v19;
        v32 = 2048;
        v33 = v18;
        _os_log_impl(&dword_184457000, v21, OS_LOG_TYPE_DEFAULT, "(endPoint [%.10g %.10g])", buf, 0x16u);
      }
    }
    if (*((float *)this + 27) != 1.0)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v22 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v23 = *((float *)this + 27);
          *(_DWORD *)buf = 134217984;
          v31 = v23;
          _os_log_impl(&dword_184457000, v22, OS_LOG_TYPE_DEFAULT, "(noiseScale %g)", buf, 0xCu);
        }
      }
    }
    if (x_log_hook_p())
      goto LABEL_36;
    v24 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v25 = ")";
      v26 = v24;
      v27 = 2;
LABEL_39:
      _os_log_impl(&dword_184457000, v26, OS_LOG_TYPE_DEFAULT, v25, buf, v27);
    }
  }
}

double CA::Render::convert_color(uint64_t a1, uint64_t a2)
{
  double result;

  CGColorTransformConvertColorComponents();
  *(_OWORD *)a2 = 0u;
  *(_QWORD *)(a2 + 16) = 0;
  result = *(double *)(a1 + 24);
  *(double *)(a2 + 24) = result;
  return result;
}

void CA::OGL::fill_surface_mesh_3d(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unsigned int a5, int a6, int a7, double a8, float a9)
{
  os_unfair_lock_s *v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  char *v20;
  float32x2_t *v21;
  uint64_t v22;
  float64x2_t v28;
  uint64_t v29;
  const double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned int *v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  double *v48;
  float32x4_t *v49;
  float32x4_t v50;
  int32x2_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  const CA::Transform *v55;
  __int128 v56;
  double v57;
  int64x2_t v58;
  float64x2_t v59;
  uint64_t v60;
  float64x2_t v61;
  uint64_t v62;
  int64x2_t v63;
  float64x2_t v65;
  float64x2_t v66;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float *v78;
  float v79;
  float v80;
  float *v81;
  float v82;
  float v83;
  float *v84;
  float v85;
  float v86;
  float *v87;
  float v88;
  float v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _OWORD *v97;
  double *v98;
  double v99;
  double v100;
  double v101;
  _BOOL4 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  float v106;
  float v107;
  float v108;
  float v109;
  _QWORD *v110;
  unint64_t v111;
  char *v112;
  unint64_t v113;
  char *v114;
  double v115;
  __int128 v116;
  double v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int32x2_t v121[2];
  float32x2_t v122;
  float v123;
  uint64_t v124;
  float v125;
  float64x2_t v126[9];
  uint64_t v127;
  _QWORD v128[10];

  v119 = a7;
  v117 = a8;
  v128[7] = *MEMORY[0x1E0C80C00];
  v120 = *(_QWORD *)(a1 + 232);
  v16 = (os_unfair_lock_s *)(a2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 16));
  CA::Render::MeshTransform::update_locked((CA::Render::MeshTransform *)a2, 1);
  os_unfair_lock_unlock(v16);
  v17 = *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24);
  v18 = v17 >> 1;
  v113 = v17;
  if ((unint64_t)v17 > 0x2001)
  {
    v21 = (float32x2_t *)malloc_type_malloc(v18, 0x56ED0300uLL);
    if (!v21)
      return;
  }
  else
  {
    MEMORY[0x1E0C80A78](v18);
    v20 = (char *)&v110 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v20, v19);
    v21 = (float32x2_t *)((unint64_t)(v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (!v21)
      return;
  }
  LODWORD(v116) = a6;
  v22 = v120;
  v118 = *(_QWORD *)(v120 + 32);
  v125 = 0.0;
  v124 = 0;
  v123 = 0.0;
  v122 = 0;
  CA::Render::MeshTransform::vertex_transform(*(_DWORD *)(a2 + 96), (float64x2_t *)a3, (uint64_t)&v124, &v122);
  v126[0] = (float64x2_t)xmmword_18474DF40;
  v126[1] = 0u;
  v126[2] = (float64x2_t)xmmword_18474DF50;
  memset(&v126[3], 0, 32);
  v126[5] = (float64x2_t)xmmword_18474DF40;
  v126[6] = 0u;
  v126[7] = (float64x2_t)xmmword_18474DF50;
  __asm { FMOV            V0.2D, #1.0 }
  v126[8] = _Q0;
  v127 = 0;
  v28 = CA::Transform::translate((CA::Transform *)v126, v122.f32[0], v122.f32[1], v123);
  v28.f64[0] = *(float *)&v124;
  CA::Transform::scale(v126, v28, *((float *)&v124 + 1), v125);
  CA::Transform::concat((CA::Transform *)v126, *(float64x2_t **)(v22 + 24), v29, v30);
  v31 = CA::Transform::apply_to_point4((uint64_t)v126, v21, (float32x2_t *)(*(_QWORD *)(a2 + 24) + 16), (const float *)0x20, (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 5);
  v32 = *(_QWORD *)(a2 + 48);
  v33 = *(_QWORD *)(a2 + 56);
  v34 = v33 - v32;
  v111 = (unint64_t)(v33 - v32) >> 4;
  if (v111 > 0x400)
  {
    v36 = (char *)malloc_type_malloc(2 * (v33 - v32), 0x10800407411B482uLL);
    if (!v36)
      goto LABEL_56;
    v112 = v36;
    v32 = *(_QWORD *)(a2 + 48);
    v33 = *(_QWORD *)(a2 + 56);
    v34 = v33 - v32;
  }
  else
  {
    MEMORY[0x1E0C80A78](v31);
    v112 = (char *)&v110 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v112, v35);
  }
  v37 = v34 >> 4;
  _ZF = v33 == v32;
  v38 = v112;
  if (!_ZF)
  {
    v39 = 0;
    if (v37 <= 1)
      v40 = 1;
    else
      v40 = v34 >> 4;
    v41 = v112 + 8;
    v42 = (unsigned int *)(v32 + 8);
    do
    {
      v43 = v21[2 * *(v42 - 1) + 1].f32[0] + v21[2 * *(v42 - 2) + 1].f32[0];
      v44 = *v42;
      v45 = v42[1];
      v42 += 4;
      *(float *)&v46 = (float)(v43 + (float)(v21[2 * v44 + 1].f32[0] + v21[2 * v45 + 1].f32[0])) * 0.25;
      *((_DWORD *)v41 - 2) = ((v46 >> 31) | 0x80000000) ^ v46;
      *v41 = v39;
      v41 += 2;
      ++v39;
    }
    while (v40 != v39);
  }
  CA::radix_sort(v37);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 1;
  if (v118 == 0x3C003C003C003C00)
    v47 = 1;
  else
    v47 = 3;
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = v47;
  CA::OGL::Context::bind_surface(a1, (uint64_t)a4, 0, a5, v116, a9);
  v49 = *(float32x4_t **)(a1 + 16);
  if (v49[30].u8[0] >= 2u)
  {
    v49[30].i8[1] |= 1u;
    v49 = *(float32x4_t **)(a1 + 16);
  }
  v50.i64[0] = v124;
  v51 = (int32x2_t)a4[4];
  *(float32x2_t *)v52.i8 = vsub_f32(v122, vcvt_f32_s32(v51));
  v52.i32[2] = LODWORD(v117);
  v53 = v49[6];
  v52.i32[3] = LODWORD(v117);
  v50.i64[1] = v49[6].i64[0];
  v54 = vmulq_f32(v50, (float32x4_t)vextq_s8(v52, v52, 8uLL));
  v52.i64[0] = vmulq_f32(v54, v53).u64[0];
  v52.i64[1] = vaddq_f32(v54, v53).i64[1];
  v49[6] = (float32x4_t)v52;
  if ((v119 & 1) != 0)
  {
    v55 = *(const CA::Transform **)(v120 + 24);
    v56 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)v128 = *(_OWORD *)a3;
    *(_OWORD *)&v128[2] = v56;
    CA::Rect::apply_transform((int8x16_t *)v128, v55, v48);
    if (*(float *)&v117 != 1.0)
    {
      v57 = *(float *)&v117;
      if (*(double *)&v128[2] < 1.79769313e308)
      {
        *(double *)v128 = *(double *)v128 * v57;
        *(double *)&v128[2] = *(double *)&v128[2] * v57;
      }
      if (*(double *)&v128[3] < 1.79769313e308)
      {
        *(double *)&v128[1] = *(double *)&v128[1] * v57;
        *(double *)&v128[3] = *(double *)&v128[3] * v57;
      }
    }
    v58.i64[0] = v51.i32[0];
    v58.i64[1] = v51.i32[1];
    v59 = vsubq_f64(*(float64x2_t *)v128, vcvtq_f64_s64(v58));
    v60 = a4[3];
    v58.i64[0] = (int)v60;
    v58.i64[1] = SHIDWORD(v60);
    v61 = vcvtq_f64_s64(v58);
    v49[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(*(float64x2_t *)&v128[2], v61)), vdivq_f64(v59, v61));
  }
  if (*(_BYTE *)(a2 + 108))
  {
    v62 = a4[5];
    v63.i64[0] = (int)v62;
    v63.i64[1] = SHIDWORD(v62);
    __asm { FMOV            V1.2D, #-0.5 }
    v65 = vaddq_f64(vcvtq_f64_s64(v63), _Q1);
    _Q1.f64[0] = (float64_t)a4[3];
    v63.i64[0] = SLODWORD(_Q1.f64[0]);
    v63.i64[1] = SHIDWORD(_Q1.f64[0]);
    v66 = vcvtq_f64_s64(v63);
    __asm { FMOV            V2.2D, #0.5 }
    v49[1].i8[3] = 5;
    *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 368) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(_Q2, v66)), vdivq_f64(v65, v66));
  }
  v110 = a4;
  v68 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8);
  v128[0] = a1;
  v128[1] = v68;
  memset(&v128[2], 0, 40);
  LOWORD(v128[4]) = 256;
  CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v128);
  v121[0] = 0;
  v121[1] = 0;
  *(_QWORD *)&v117 = a1 + 818;
  v114 = v38 + 8;
  v116 = xmmword_18474E060;
  v115 = 0.000001;
LABEL_30:
  while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v128, v121))
  {
    v69 = *(_QWORD *)(a2 + 48);
    if (*(_QWORD *)(a2 + 56) != v69)
    {
      v70 = 0;
      v71 = v114;
      while (1)
      {
        v72 = (unsigned int *)(v69 + 16 * *(_QWORD *)v71);
        v74 = *v72;
        v73 = v72[1];
        v76 = v72[2];
        v75 = v72[3];
        v77 = *(_QWORD *)(a2 + 24);
        v78 = (float *)(v77 + 32 * v74);
        v79 = *v78;
        v80 = v78[1];
        v81 = (float *)(v77 + 32 * v73);
        v83 = *v81;
        v82 = v81[1];
        v84 = (float *)(v77 + 32 * v76);
        v86 = *v84;
        v85 = v84[1];
        v87 = (float *)(v77 + 32 * v75);
        v88 = *v87;
        v89 = v87[1];
        v90 = 6;
        if (!*(_DWORD *)(a1 + 92))
          v90 = 4;
        v91 = *(_QWORD *)(a1 + 128);
        if ((unint64_t)(v91 + 4) > *(_QWORD *)(a1 + 136)
          || (v92 = *(_QWORD *)(a1 + 112)) != 0 && *(_QWORD *)(a1 + 104) + v90 > v92)
        {
          *(_WORD *)(a1 + 816) |= 0x20u;
          CA::OGL::Context::array_flush(a1);
          v91 = 0;
          *(double *)(a1 + 96) = v117;
          *(_OWORD *)(a1 + 104) = v116;
        }
        v93 = *(_QWORD *)(a1 + 120);
        *(_QWORD *)(a1 + 128) = v91 + 4;
        v94 = *(_OWORD *)v21[2 * v73].f32;
        v95 = *(_OWORD *)v21[2 * v76].f32;
        v96 = *(_OWORD *)v21[2 * v75].f32;
        v97 = (_OWORD *)(v93 + 48 * v91);
        *v97 = *(_OWORD *)v21[2 * v74].f32;
        v97[3] = v94;
        v97[6] = v95;
        v97[9] = v96;
        if (*(_QWORD *)(a1 + 96))
          CA::OGL::Context::array_indices(a1, v91);
        if (!v119)
          goto LABEL_47;
        v98 = *(double **)(v120 + 24);
        v99 = v98[1];
        v100 = v98[4];
        if (fabs(v99) >= v115 || fabs(v100) >= v115)
        {
          v102 = v99 < 0.0;
          v106 = 1.0 - v80;
          v107 = 1.0 - v82;
          v108 = 1.0 - v85;
          v109 = 1.0 - v89;
          v82 = v83;
          v85 = v86;
          v89 = v88;
          v80 = v79;
          v88 = v109;
          v86 = v108;
          v83 = v107;
          v79 = v106;
          if (v100 > 0.0)
          {
LABEL_52:
            v79 = 1.0 - v79;
            v83 = 1.0 - v83;
            v86 = 1.0 - v86;
            v88 = 1.0 - v88;
            if (!v102)
              goto LABEL_47;
LABEL_46:
            v80 = 1.0 - v80;
            v82 = 1.0 - v82;
            v85 = 1.0 - v85;
            v89 = 1.0 - v89;
            goto LABEL_47;
          }
        }
        else
        {
          v101 = *v98;
          v102 = v98[5] < 0.0;
          if (v101 < 0.0)
            goto LABEL_52;
        }
        if (v102)
          goto LABEL_46;
LABEL_47:
        v103 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
        *(float *)(v103 - 176) = v79;
        *(float *)(v103 - 172) = v80;
        *(float *)(v103 - 128) = v83;
        *(float *)(v103 - 124) = v82;
        *(float *)(v103 - 80) = v86;
        *(float *)(v103 - 76) = v85;
        *(float *)(v103 - 32) = v88;
        *(float *)(v103 - 28) = v89;
        if (v118 != 0x3C003C003C003C00)
        {
          v104 = *(_QWORD *)(v120 + 32);
          v105 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
          *(_QWORD *)(v105 - 160) = v104;
          *(_QWORD *)(v105 - 112) = v104;
          *(_QWORD *)(v105 - 64) = v104;
          *(_QWORD *)(v105 - 16) = v104;
        }
        ++v70;
        v69 = *(_QWORD *)(a2 + 48);
        v71 += 16;
        if (v70 >= (*(_QWORD *)(a2 + 56) - v69) >> 4)
          goto LABEL_30;
      }
    }
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 481) &= ~1u;
  CA::OGL::Context::unbind_surface((_QWORD *)a1, (uint64_t)v110, 0);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 0;
  if (v111 >= 0x401)
    free(v112);
LABEL_56:
  if (v113 > 0x2000)
    free(v21);
}

void CA::OGL::fill_surface_mesh(uint64_t a1, os_unfair_lock_s *this, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, double a8, float a9)
{
  int os_unfair_lock_opaque;
  os_unfair_lock_s *v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  double *v34;
  float32x4_t *v35;
  float32x4_t v36;
  int32x2_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  const CA::Transform *v41;
  __int128 v42;
  double v43;
  int64x2_t v44;
  float64x2_t v45;
  uint64_t v46;
  float64x2_t v47;
  uint64_t v48;
  int64x2_t v49;
  float64x2_t v54;
  float64x2_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  float *v66;
  uint64_t v67;
  uint64_t v68;
  float *v69;
  float *v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  uint64_t v84;
  __int128 v85;
  float32x2_t *v86;
  float32x2_t *v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t *v90;
  float32x2_t *v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t *v94;
  float32x2_t *v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  _OWORD *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _OWORD *v111;
  double *v112;
  double v113;
  double v114;
  double v115;
  _BOOL4 v116;
  uint64_t v117;
  uint64_t v118;
  float v119;
  float v120;
  float v121;
  float v122;
  unsigned int *p_os_unfair_lock_opaque;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  int32x2_t v130[2];
  float32x2_t v131;
  float v132;
  uint64_t v133;
  float v134;
  float64x2_t v135[9];
  uint64_t v136;
  _QWORD v137[10];

  v137[7] = *MEMORY[0x1E0C80C00];
  if ((this[25]._os_unfair_lock_opaque & 0x80000000) != 0)
    os_unfair_lock_opaque = 3;
  else
    os_unfair_lock_opaque = this[25]._os_unfair_lock_opaque;
  v17 = CA::Render::MeshTransform::retain_subdivided_mesh(this, os_unfair_lock_opaque);
  if (v17)
  {
    v18 = v17;
    if (*(double *)&v17[42]._os_unfair_lock_opaque == *(double *)&v17[48]._os_unfair_lock_opaque)
    {
      v19 = *(_QWORD *)(a1 + 232);
      os_unfair_lock_lock(v17 + 4);
      v20 = 1;
      CA::Render::MeshTransform::update_locked((CA::Render::MeshTransform *)v18, 1);
      os_unfair_lock_unlock(v18 + 4);
      v127 = v19;
      v21 = *(_QWORD *)(v19 + 32);
      if (v21 == 0x3C003C003C003C00)
        v22 = 1;
      else
        v22 = 3;
      *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = v22;
      CA::OGL::Context::bind_surface(a1, a4, 0, a5, a6, a9);
      if ((*(_WORD *)(a4 + 75) & 0x800) != 0)
        v20 = LOBYTE(v18[27]._os_unfair_lock_opaque) == 0;
      v23 = *(_QWORD *)(a1 + 16);
      v24 = *(unsigned __int8 *)(v23 + 480);
      if (v24 >= 2 && (v24 != 3 || v20))
        *(_BYTE *)(v23 + 481) |= 1u;
      v134 = 0.0;
      v133 = 0;
      v132 = 0.0;
      v131 = 0;
      CA::Render::MeshTransform::vertex_transform(v18[24]._os_unfair_lock_opaque, (float64x2_t *)a3, (uint64_t)&v133, &v131);
      v136 = 0;
      v26 = *(_QWORD *)(v19 + 24);
      v27 = *(float64x2_t *)(v26 + 16);
      v28 = *(float64x2_t *)(v26 + 32);
      v29 = *(float64x2_t *)(v26 + 48);
      v135[0] = *(float64x2_t *)v26;
      v135[1] = v27;
      v135[2] = v28;
      v135[3] = v29;
      v30 = *(float64x2_t *)(v26 + 80);
      v31 = *(float64x2_t *)(v26 + 96);
      v32 = *(float64x2_t *)(v26 + 112);
      v135[4] = *(float64x2_t *)(v26 + 64);
      v135[5] = v30;
      v135[6] = v31;
      v135[7] = v32;
      v135[8] = *(float64x2_t *)(v26 + 128);
      LOBYTE(v136) = *(_BYTE *)(v26 + 144) & 0x1F;
      v33 = CA::Transform::translate((CA::Transform *)v135, v131.f32[0], v131.f32[1], v132);
      v33.f64[0] = *(float *)&v133;
      CA::Transform::scale(v135, v33, *((float *)&v133 + 1), v134);
      *(_QWORD *)(a1 + 800) = v135;
      ++*(_DWORD *)(a1 + 240);
      v35 = *(float32x4_t **)(a1 + 16);
      v36.i64[0] = v133;
      v37 = *(int32x2_t *)(a4 + 32);
      *(float32x2_t *)v38.i8 = vsub_f32(v131, vcvt_f32_s32(v37));
      v38.i32[2] = LODWORD(a8);
      v39 = v35[6];
      v38.i32[3] = LODWORD(a8);
      v36.i64[1] = v35[6].i64[0];
      v40 = vmulq_f32(v36, (float32x4_t)vextq_s8(v38, v38, 8uLL));
      v38.i64[0] = vmulq_f32(v40, v39).u64[0];
      v38.i64[1] = vaddq_f32(v40, v39).i64[1];
      v35[6] = (float32x4_t)v38;
      if (a7)
      {
        v41 = *(const CA::Transform **)(v19 + 24);
        v42 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)v137 = *(_OWORD *)a3;
        *(_OWORD *)&v137[2] = v42;
        CA::Rect::apply_transform((int8x16_t *)v137, v41, v34);
        if (*(float *)&a8 != 1.0)
        {
          v43 = *(float *)&a8;
          if (*(double *)&v137[2] < 1.79769313e308)
          {
            *(double *)v137 = *(double *)v137 * v43;
            *(double *)&v137[2] = *(double *)&v137[2] * v43;
          }
          if (*(double *)&v137[3] < 1.79769313e308)
          {
            *(double *)&v137[1] = *(double *)&v137[1] * v43;
            *(double *)&v137[3] = *(double *)&v137[3] * v43;
          }
        }
        v44.i64[0] = v37.i32[0];
        v44.i64[1] = v37.i32[1];
        v45 = vsubq_f64(*(float64x2_t *)v137, vcvtq_f64_s64(v44));
        v46 = *(_QWORD *)(a4 + 24);
        v44.i64[0] = (int)v46;
        v44.i64[1] = SHIDWORD(v46);
        v47 = vcvtq_f64_s64(v44);
        v35[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(*(float64x2_t *)&v137[2], v47)), vdivq_f64(v45, v47));
      }
      if (LOBYTE(v18[27]._os_unfair_lock_opaque))
      {
        v48 = *(_QWORD *)(a4 + 40);
        v49.i64[0] = (int)v48;
        v49.i64[1] = SHIDWORD(v48);
        __asm { FMOV            V1.2D, #-0.5 }
        v54 = vaddq_f64(vcvtq_f64_s64(v49), _Q1);
        _Q1.f64[0] = *(float64_t *)(a4 + 24);
        v49.i64[0] = SLODWORD(_Q1.f64[0]);
        v49.i64[1] = SHIDWORD(_Q1.f64[0]);
        v55 = vcvtq_f64_s64(v49);
        __asm { FMOV            V2.2D, #0.5 }
        v35[1].i8[3] = 5;
        *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 368) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(_Q2, v55)), vdivq_f64(v54, v55));
      }
      v126 = a4;
      v57 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8);
      v137[0] = a1;
      v137[1] = v57;
      memset(&v137[2], 0, 40);
      LOWORD(v137[4]) = 256;
      CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v137);
      v130[0] = 0;
      v130[1] = 0;
LABEL_27:
      while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v137, v130))
      {
        v58 = *(_QWORD *)&v18[12]._os_unfair_lock_opaque;
        if (*(_QWORD *)&v18[14]._os_unfair_lock_opaque != v58)
        {
          v59 = 0;
          v60 = 0;
          while (1)
          {
            v61 = (unsigned int *)(v58 + v59);
            v62 = *(_QWORD *)&v18[6]._os_unfair_lock_opaque;
            v64 = *v61;
            v63 = v61[1];
            v65 = (float *)(v62 + 32 * v64);
            v66 = (float *)(v62 + 32 * v63);
            v67 = v61[2];
            v68 = v61[3];
            v69 = (float *)(v62 + 32 * v67);
            v70 = (float *)(v62 + 32 * v68);
            v72 = *v65;
            v71 = v65[1];
            v74 = *v66;
            v73 = v66[1];
            v75 = *v69;
            v76 = v69[1];
            v77 = *v70;
            v78 = v70[1];
            v79 = 6;
            if (!*(_DWORD *)(a1 + 92))
              v79 = 4;
            v80 = *(_QWORD *)(a1 + 128);
            if ((unint64_t)(v80 + 4) > *(_QWORD *)(a1 + 136)
              || (v81 = *(_QWORD *)(a1 + 112)) != 0 && *(_QWORD *)(a1 + 104) + v79 > v81)
            {
              *(_WORD *)(a1 + 816) |= 0x20u;
              CA::OGL::Context::array_flush(a1);
              v80 = 0;
              *(_QWORD *)(a1 + 96) = a1 + 818;
              *(_OWORD *)(a1 + 104) = xmmword_18474E060;
            }
            v82 = v62 + 32 * v64;
            v84 = *(_QWORD *)(v82 + 16);
            v83 = (_OWORD *)(v82 + 16);
            *(_QWORD *)&v85 = v84;
            v86 = (float32x2_t *)(v62 + 32 * v63);
            v88 = v86[2];
            v87 = v86 + 2;
            v89 = v88;
            v90 = (float32x2_t *)(v62 + 32 * v67);
            v92 = v90[2];
            v91 = v90 + 2;
            v93 = v92;
            v94 = (float32x2_t *)(v62 + 32 * v68);
            v96 = v94[2];
            v95 = v94 + 2;
            v97 = v96;
            v98 = vsub_f32(vadd_f32(*(float32x2_t *)&v85, v93), vadd_f32(v89, v96));
            if (fabsf(v98.f32[0]) >= 0.000001 || fabsf(v98.f32[1]) >= 0.000001)
            {
              v103 = (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(v97, v93));
              v104 = vsub_f32(v89, v93);
              v105 = vmul_f32(v103, v104);
              v106 = vmul_f32(v98, v103);
              v105.f32[0] = 1.0 / vsub_f32(v105, (float32x2_t)vdup_lane_s32((int32x2_t)v105, 1)).f32[0];
              v107 = vmul_f32(v104, (float32x2_t)vrev64_s32((int32x2_t)v98));
              v107.f32[0] = v105.f32[0] * vsub_f32(v107, (float32x2_t)vdup_lane_s32((int32x2_t)v107, 1)).f32[0];
              v104.f32[0] = vmlas_n_f32(1.0, v105.f32[0], vsub_f32(v106, (float32x2_t)vdup_lane_s32((int32x2_t)v106, 1)).f32[0]);
              DWORD2(v85) = *(_DWORD *)(v62 + 32 * v64 + 24);
              HIDWORD(v85) = 1.0;
              *(float32x2_t *)&v108 = vmul_n_f32(v89, v104.f32[0]);
              *((float *)&v108 + 2) = *(float *)(v62 + 32 * v63 + 24) * v104.f32[0];
              HIDWORD(v108) = v104.i32[0];
              *(float32x2_t *)&v109 = vmul_n_f32(v93, v104.f32[0] + v107.f32[0]);
              *((float *)&v109 + 2) = *(float *)(v62 + 32 * v67 + 24) * (float)(v104.f32[0] + v107.f32[0]);
              *((float *)&v109 + 3) = v104.f32[0] + v107.f32[0];
              v107.f32[0] = v107.f32[0] + 1.0;
              *(float32x2_t *)&v110 = vmul_n_f32(v97, v107.f32[0]);
              *((float *)&v110 + 2) = *(float *)(v62 + 32 * v68 + 24) * v107.f32[0];
              HIDWORD(v110) = v107.i32[0];
              v111 = (_OWORD *)(*(_QWORD *)(a1 + 120) + 48 * v80);
              *(_QWORD *)(a1 + 128) = v80 + 4;
              *v111 = v85;
              v111[3] = v108;
              v111[6] = v109;
              v111[9] = v110;
            }
            else
            {
              v99 = (_OWORD *)(*(_QWORD *)(a1 + 120) + 48 * v80);
              *(_QWORD *)(a1 + 128) = v80 + 4;
              v100 = *(_OWORD *)v87->f32;
              v101 = *(_OWORD *)v91->f32;
              v102 = *(_OWORD *)v95->f32;
              *v99 = *v83;
              v99[3] = v100;
              v99[6] = v101;
              v99[9] = v102;
            }
            if (*(_QWORD *)(a1 + 96))
              CA::OGL::Context::array_indices(a1, v80);
            if (!a7)
              goto LABEL_48;
            v112 = *(double **)(v127 + 24);
            v113 = v112[1];
            v114 = v112[4];
            if (fabs(v113) >= 0.000001 || fabs(v114) >= 0.000001)
            {
              v116 = v113 < 0.0;
              v119 = 1.0 - v71;
              v120 = 1.0 - v73;
              v121 = 1.0 - v76;
              v122 = 1.0 - v78;
              v71 = v72;
              v73 = v74;
              v76 = v75;
              v78 = v77;
              v77 = v122;
              v75 = v121;
              v74 = v120;
              v72 = v119;
              if (v114 > 0.0)
              {
LABEL_53:
                v72 = 1.0 - v72;
                v74 = 1.0 - v74;
                v75 = 1.0 - v75;
                v77 = 1.0 - v77;
                if (!v116)
                  goto LABEL_48;
LABEL_47:
                v71 = 1.0 - v71;
                v73 = 1.0 - v73;
                v76 = 1.0 - v76;
                v78 = 1.0 - v78;
                goto LABEL_48;
              }
            }
            else
            {
              v115 = *v112;
              v116 = v112[5] < 0.0;
              if (v115 < 0.0)
                goto LABEL_53;
            }
            if (v116)
              goto LABEL_47;
LABEL_48:
            v117 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
            *(float *)(v117 - 176) = v72;
            *(float *)(v117 - 172) = v71;
            *(float *)(v117 - 128) = v74;
            *(float *)(v117 - 124) = v73;
            *(float *)(v117 - 80) = v75;
            *(float *)(v117 - 76) = v76;
            *(float *)(v117 - 32) = v77;
            *(float *)(v117 - 28) = v78;
            if (v21 != 0x3C003C003C003C00)
            {
              v118 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
              *(_QWORD *)(v118 - 160) = v21;
              *(_QWORD *)(v118 - 112) = v21;
              *(_QWORD *)(v118 - 64) = v21;
              *(_QWORD *)(v118 - 16) = v21;
            }
            ++v60;
            v58 = *(_QWORD *)&v18[12]._os_unfair_lock_opaque;
            v59 += 16;
            if (v60 >= (*(_QWORD *)&v18[14]._os_unfair_lock_opaque - v58) >> 4)
              goto LABEL_27;
          }
        }
      }
      *(_BYTE *)(*(_QWORD *)(a1 + 16) + 481) &= ~1u;
      CA::OGL::Context::unbind_surface((_QWORD *)a1, v126, 0);
      *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 0;
      *(_BYTE *)(*(_QWORD *)(a1 + 16) + 19) = 0;
      *(_QWORD *)(a1 + 800) = 0;
      ++*(_DWORD *)(a1 + 240);
    }
    else
    {
      CA::OGL::fill_surface_mesh_3d(a1, (uint64_t)v17, a3, (_QWORD *)a4, a5, a6, a7, a8, a9);
    }
    p_os_unfair_lock_opaque = &v18[2]._os_unfair_lock_opaque;
    do
    {
      v124 = __ldaxr(p_os_unfair_lock_opaque);
      v125 = v124 - 1;
    }
    while (__stlxr(v125, p_os_unfair_lock_opaque));
    if (!v125)
      (*(void (**)(os_unfair_lock_s *))(*(_QWORD *)&v18->_os_unfair_lock_opaque + 16))(v18);
  }
}

void CA::Render::TileCache::image_deleted(CA::Render::TileCache *this, CA::Render::Object *a2, void *a3, void *a4)
{
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  malloc_zone_t *malloc_zone;
  _QWORD *v11;

  v6 = (os_unfair_lock_s *)((char *)a2 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)a2 + 10);
  v7 = x_hash_table_remove(*((_QWORD *)a2 + 2), (uint64_t)this);
  if (v7)
  {
    v8 = v7;
    v9 = *((_QWORD *)a2 + 3);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v11 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
    *v11 = v8;
    v11[1] = v9;
    *((_QWORD *)a2 + 3) = v11;
  }
  os_unfair_lock_unlock(v6);
}

_QWORD *CA::Render::tile_cache_entry_release_images(_QWORD *result, uint64_t a2)
{
  unsigned int *v3;
  uint64_t (*v4)(_QWORD);
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = *(unsigned int **)(a2 + 16);
  if (v3)
  {
    v4 = (uint64_t (*)(_QWORD))result[1];
    if (v4)
    {
      result = (_QWORD *)v4(*result);
      v3 = *(unsigned int **)(a2 + 16);
    }
    v5 = v3 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      result = (_QWORD *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t CA::Render::TileCache::collect_entry(uint64_t a1, uint64_t a2, double *a3)
{
  double v3;
  double v4;
  uint64_t result;
  uint64_t v7;
  malloc_zone_t *malloc_zone;
  _QWORD *v9;

  v3 = *a3;
  v4 = *(double *)(a2 + 24);
  if (v4 <= a3[1])
  {
    v7 = *(_QWORD *)(*(_QWORD *)&v3 + 24);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v9 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
    *v9 = a2;
    v9[1] = v7;
    *(_QWORD *)(*(_QWORD *)&v3 + 24) = v9;
    return 1;
  }
  else
  {
    result = 0;
    if (v4 < *(double *)(*(_QWORD *)&v3 + 32))
      *(double *)(*(_QWORD *)&v3 + 32) = v4;
  }
  return result;
}

CA::Render::Texture *CA::Render::TileCache::get_image(CA::Render::TileCache *this, CA::Render::Image *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7)
{
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  CA::Render::Texture *v11;
  CA::Render *v14;
  unsigned int v16;
  unsigned int v17;
  os_unfair_lock_s *v24;
  uint64_t v25;
  malloc_zone_t *malloc_zone;
  double v27;
  char *v28;
  int v29;
  size_t v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  size_t *v34;
  uint64_t v35;
  size_t v36;
  void (*v37)(_QWORD);
  size_t v38;
  unint64_t v39;
  CA::Render *v40;
  CGColorSpace *v41;
  uint64_t v42;
  unsigned __int16 *v43;
  int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  void (*v48)(const void *, void *);
  unint64_t v49[2];

  v8 = vcvtpd_u64_f64(a5 + a3);
  v49[1] = *MEMORY[0x1E0C80C00];
  v9 = vcvtpd_u64_f64(a6 + a4);
  if (v8)
    v10 = v9 == 0;
  else
    v10 = 1;
  if (v10)
    return 0;
  v14 = (CA::Render *)*((unsigned __int8 *)a2 + 152);
  if (v14 > 0xA || ((1 << (char)v14) & 0x70F) == 0)
    return 0;
  v11 = 0;
  if (v8 <= 0x800 && v9 <= 0x800)
  {
    v17 = *((_DWORD *)a2 + 4);
    v16 = *((_DWORD *)a2 + 5);
    if (v17 <= v8 || v16 <= v9)
      return 0;
    v24 = (os_unfair_lock_s *)((char *)this + 40);
    os_unfair_lock_lock((os_unfair_lock_t)this + 10);
    v25 = x_hash_table_lookup(*((_QWORD *)this + 2), (uint64_t)a2, 0);
    if (!v25)
    {
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v25 = (uint64_t)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x40uLL, 0x743898A5uLL);
      hash_table_modify(*((int **)this + 2), (uint64_t)a2, v25, 0);
    }
    os_unfair_lock_unlock(v24);
    v27 = *(double *)(v25 + 24);
    if (v27 < a7)
    {
      *(double *)(v25 + 24) = a7;
      v27 = a7;
    }
    if (v27 < *((double *)this + 4))
      *((double *)this + 4) = v27;
    v11 = *(CA::Render::Texture **)(v25 + 16);
    if (!v11
      || vabdd_f64(*(double *)(v25 + 48), a5) >= 0.001
      || vabdd_f64(*(double *)(v25 + 56), a6) >= 0.001
      || vabdd_f64(*(double *)(v25 + 32), a3) >= 0.001
      || vabdd_f64(*(double *)(v25 + 40), a4) >= 0.001)
    {
      v28 = (char *)*((_QWORD *)a2 + 12);
      v29 = *((unsigned __int8 *)a2 + 153);
      v30 = *((_QWORD *)a2 + 20);
      if (v29 != 1)
      {
        v31 = v17 >> 1;
        if (v17 >> 1 >= v8)
        {
          v32 = v16 >> 1;
          if (v16 >> 1 >= v9)
          {
            v33 = v29 - 2;
            v34 = (size_t *)((char *)a2 + 168);
            do
            {
              v17 = v31;
              v35 = v16;
              v16 = v32;
              v28 += v30 * v35;
              v31 = v17 >> 1;
              if (v17 <= 1)
                v31 = 1;
              v32 >>= 1;
              if (v16 <= 1)
                v32 = 1;
              v36 = *v34++;
              v30 = v36;
              if (!v33)
                break;
              if (v31 < v8)
                break;
              --v33;
            }
            while (v32 >= v9);
          }
        }
      }
      v48 = 0;
      if (v11
        && ((v37 = (void (*)(_QWORD))*((_QWORD *)this + 1)) == 0
         || (v37(*(_QWORD *)this), (v11 = *(CA::Render::Texture **)(v25 + 16)) != 0))
        && *((_DWORD *)v11 + 4) == v17
        && *((_DWORD *)v11 + 5) == v16)
      {
        v38 = v16;
      }
      else
      {
        CA::Render::tile_cache_entry_release_images(this, v25);
        v39 = CA::Render::format_rowbytes(v14, v17);
        v49[0] = v39;
        v38 = v16;
        if (is_mul_ok(v39, v16))
          v40 = (CA::Render *)(v39 * v16);
        else
          v40 = 0;
        v41 = (CGColorSpace *)CA::Render::aligned_malloc(v40, (unint64_t *)&v48, 0);
        if (!v41)
          return 0;
        v11 = CA::Render::Image::new_image(v14, v17, v16, 1u, *((CGColorSpace **)a2 + 6), v41, v49, (const unint64_t *)CA::Render::aligned_free, v48, v48);
        *(_QWORD *)(v25 + 16) = v11;
      }
      v42 = *((_QWORD *)v11 + 12);
      v49[0] = *((_QWORD *)v11 + 20);
      v43 = (unsigned __int16 *)(v42 + v49[0] * (v16 - v9));
      CA::downsample_image(v14, v28, v30, v17, v38, v43, v49[0], 4, a3, a4, a5, a6, v47);
      *(CGFloat *)(v25 + 32) = a3;
      *(CGFloat *)(v25 + 40) = a4;
      *(CGFloat *)(v25 + 48) = a5;
      *(CGFloat *)(v25 + 56) = a6;
      if (v14 > 0x25)
        v44 = 0;
      else
        v44 = dword_184750480[(_QWORD)v14];
      if (v16 > v9)
        CGBlt_copyBytes();
      if (v17 > v8)
      {
        CGBlt_copyBytes();
        if (v16 > v9)
          *((_BYTE *)v43 + v44 * v8 - v49[0]) = *((_BYTE *)v43 + v44 * v8 - v44);
      }
      v45 = (unsigned int *)(*(_QWORD *)(v25 + 16) + 36);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 + 1, v45));
      return *(CA::Render::Texture **)(v25 + 16);
    }
  }
  return v11;
}

uint64_t ___ZL23mode_dictionary_classesv_block_invoke()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v0 = objc_alloc(MEMORY[0x1E0C99E60]);
  v1 = objc_opt_class();
  v2 = objc_opt_class();
  result = objc_msgSend(v0, "initWithObjects:", v1, v2, objc_opt_class(), 0);
  mode_dictionary_classes(void)::set = result;
  return result;
}

void sub_18472EFCC(_Unwind_Exception *a1)
{
  void *v1;

  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

__CFDictionary *reload_mode(CFDictionaryRef theDict)
{
  _QWORD v2[2];

  v2[1] = *MEMORY[0x1E0C80C00];
  v2[0] = 0;
  CA::WindowServer::Display::Mode::Mode((CA::WindowServer::Display::Mode *)v2, theDict);
  return CA::WindowServer::Display::Mode::create_dictionary_representation((CA::WindowServer::Display::Mode *)v2);
}

void ___ZL17framework_versionv_block_invoke()
{
  void *v0;

  v0 = (void *)MEMORY[0x186DBE2E4]();
  framework_version(void)::version = (uint64_t)(id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class()), "objectForInfoDictionaryKey:", CFSTR("CFBundleVersion"));
  objc_autoreleasePoolPop(v0);
}

void sub_18472F0CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

void cancelTimer(const void *a1, const void *a2, void *a3)
{
  void *v3;

  v3 = (void *)*((_QWORD *)a2 + 5);
  if (v3)
  {
    objc_msgSend(v3, "invalidate", a3);
    *((_QWORD *)a2 + 5) = 0;

    *((_QWORD *)a2 + 6) = 0;
  }
}

void release_layer(const void *a1, _QWORD *cf, void *a3)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = (_QWORD *)cf[3];
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)v4[1];

      cf[3] = v5;
      v4 = v5;
    }
    while (v5);
  }
  CFRelease(cf);
}

uint64_t CA::CG::DrawImage::compute_dod_corners(float64x2_t *a1, float64x2_t *a2)
{
  uint64_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  const double *f64;
  const double *v8;
  const double *v9;
  const double *v10;
  float64x2_t v11;
  const double *v12;
  const double *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  double *v19;
  float64x2x2_t v21;
  float64x2x2_t v22;

  v2 = 0;
  v3 = a1[9];
  v4 = vaddq_f64(a1[8], vminnmq_f64(v3, (float64x2_t)vdupq_n_s64(0x8000000000000000)));
  v5 = vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v3), (int8x16_t)vnegq_f64(v3), (int8x16_t)v3), v4);
  v6.f64[0] = v5.f64[0];
  v6.f64[1] = v4.f64[1];
  *a2 = v4;
  a2[1] = v6;
  v4.f64[1] = v5.f64[1];
  a2[2] = v5;
  a2[3] = v4;
  f64 = a1[3].f64;
  v8 = &a1->f64[1];
  v9 = a1[2].f64;
  v10 = a1[1].f64;
  v11 = vld1q_dup_f64(v8);
  v12 = &a1[2].f64[1];
  v13 = &a1[1].f64[1];
  v14 = vld1q_dup_f64(v13);
  v15 = vld1q_dup_f64(v12);
  v16 = vld1q_dup_f64(v10);
  v17 = vld1q_dup_f64(v9);
  v18 = vld1q_dup_f64(f64);
  do
  {
    v19 = a2[v2].f64;
    v21 = vld2q_f64(v19);
    v22.val[0] = vmlaq_f64(vmlaq_f64(v15, v21.val[0], v11), v21.val[1], v14);
    v22.val[1] = vmlaq_f64(vmlaq_f64(v18, v21.val[0], v16), v21.val[1], v17);
    vst2q_f64(v19, v22);
    v2 += 2;
  }
  while (v2 != 4);
  return 1;
}

uint64_t CA::CG::DrawImage::debug_color(CA::CG::DrawImage *this)
{
  return 1656352224;
}

uint64_t CA::CG::DrawImage::draw_shape(CA::CG::DrawImage *this, CA::CG::Renderer *a2)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned int v16;
  double *v17;
  double *v18;
  double v20;
  double v21;
  double v22;
  double v23;
  _OWORD v24[9];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)this + 25);
  if ((v3 & 2) != 0)
    return (*(uint64_t (**)(CA::CG::DrawImage *, CA::CG::Renderer *, uint64_t))(*(_QWORD *)this + 184))(this, a2, 1);
  v4 = *((_QWORD *)a2 + 1);
  v5 = (v3 << 31 >> 31);
  v7 = *((double *)this + 16);
  v6 = *((double *)this + 17);
  v20 = v7;
  v21 = v6;
  v9 = *((double *)this + 18);
  v8 = *((double *)this + 19);
  v22 = v9;
  v23 = v8;
  if (v9 < 0.0)
  {
    v20 = v9 + v7;
    v22 = -v9;
  }
  if (v8 < 0.0)
  {
    v21 = v8 + v6;
    v23 = -v8;
  }
  v10 = CA::CG::mat2_filter_bits((uint64_t)a2 + 32);
  v16 = CA::CG::rect_filter_bits((uint64_t)&v20, (double *)a2 + 4, v10, v11, v12, v13, v14, v15);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v25 = 0u;
  memset(v24, 0, sizeof(v24));
  CA::Transform::set_affine((CA::Transform *)v24, *((double *)a2 + 4), *((double *)a2 + 5), *((double *)a2 + 6), *((double *)a2 + 7), *((double *)a2 + 8), *((double *)a2 + 9));
  *((_QWORD *)&v25 + 1) = &v20;
  *(_QWORD *)&v26 = v24;
  *((_QWORD *)&v26 + 1) = __PAIR64__(v5, v16);
  v28 = 0;
  v27 = 0uLL;
  return CA::OGL::fill_rect(v4, (uint64_t)&v25 + 8, v17, v18);
}

void CA::CG::DrawImage::draw_color(CA::CG::DrawImage *this, CA::CG::Renderer *a2)
{
  if ((*((_BYTE *)this + 100) & 2) != 0)
    CA::CG::DrawOp::draw_color(this, a2);
  else
    (*(void (**)(CA::CG::DrawImage *, CA::CG::Renderer *, _QWORD))(*(_QWORD *)this + 184))(this, a2, 0);
}

void CA::CG::fill_image(uint64_t a1)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  int v5;
  int v6;
  int v7;
  int v8;
  double *v9;
  double *v10;
  double *v11;
  CA::Render *v12;
  CGImage *v13;
  uint64_t v14;
  size_t Width;
  signed int Height;
  CGImage *Mask;
  __int128 v18;
  CGImage *v19;
  int v20;
  signed int v21;
  signed int v22;
  unsigned int v23;
  _BOOL4 v24;
  unsigned int v25;
  size_t v26;
  char v27;
  BOOL v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  CGImage *v37;
  int v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  unsigned int Identifier;
  os_unfair_lock_s *v43;
  os_unfair_lock_s *v44;
  os_unfair_lock_s *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  size_t v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  CGColorSpace *ColorSpace;
  BOOL IsWideGamutRGB;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  CGColorSpace *v60;
  CGColorSpaceModel Model;
  uint64_t Property;
  uint64_t v63;
  uint64_t v64;
  unsigned int v66;
  CGColorSpace *v67;
  CA::OGL::Context *v68;
  double v69;
  double v70;
  double v71;
  int v72;
  char v73;
  CGColorSpace *v74;
  double *v75;
  double v76;
  double v77;
  _BOOL4 v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  int v84;
  float v85;
  char *v86;
  CA::Render::Image *v87;
  int v88;
  int v89;
  int v90;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  int v101;
  char v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int v108;
  unsigned int v109;
  int v110;
  int v111;
  int v112;
  double v113;
  double v114;
  int v115;
  BOOL v116;
  BOOL v117;
  int v120;
  uint64_t v121;
  unint64_t v122;
  int v123;
  uint64_t v124;
  _DWORD *v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int v128;
  BOOL v129;
  int v130;
  int8x16_t v131;
  float64x2_t v132;
  float64x2_t v133;
  double v134;
  double v135;
  float64x2_t v136;
  float64x2_t v137;
  int v138;
  char v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  void (***v143)(CA::CG::ImageKey *__hidden);
  char v144;
  double v145;
  double v146;
  double v147;
  double v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  CA::Render::Texture *v152;
  malloc_zone_t *malloc_zone;
  double *v154;
  double *v155;
  int *v156;
  unsigned int *v157;
  unsigned int v158;
  unsigned int v159;
  malloc_zone_t *v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int *v163;
  unsigned int v164;
  unsigned int v165;
  int v166;
  unsigned int *v167;
  unsigned int *v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  int v172;
  _BOOL4 v173;
  _BOOL4 v174;
  int v175;
  char v176;
  uint64_t v177;
  _BOOL4 v178;
  CA::ColorProgram::Cache *v179;
  CA::ColorProgram::Cache *v180;
  int v181;
  unsigned int v182;
  uint64_t v183;
  char v184;
  char v185;
  uint64_t v186;
  double *v187;
  uint64_t v188;
  CA::Render::TiledTexture *v189;
  double v190;
  int8x16_t v191;
  char v192;
  unsigned int *v193;
  unsigned int v194;
  unsigned int v195;
  float v196;
  uint64_t v197;
  uint64_t v198;
  uint32x2_t **v199;
  char v200;
  unsigned int *v201;
  unsigned int v202;
  BOOL v203;
  NSObject *global_queue;
  int v205;
  int v206;
  unsigned int v207;
  char v208;
  uint64_t v209;
  uint32x2_t **v210;
  double v211;
  int8x16_t v212;
  char v213;
  unsigned int *v214;
  unsigned int v215;
  unsigned int v216;
  void (**v217)(CA::CG::ImageKey *__hidden);
  int v218;
  uint64_t v219;
  int v220;
  int v221;
  int v222;
  uint64_t v223;
  _BOOL4 v224;
  CGImage *v225;
  unsigned int v226;
  unsigned int v227;
  _DWORD *v228;
  int v229;
  float64x2_t *v230;
  int v231;
  int v232;
  double *v233;
  void (***v234)(CA::CG::ImageKey *__hidden);
  __int128 v235;
  uint64_t v236;
  unsigned int v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  __int128 v241;
  __int128 v242;
  float64x2_t v243;
  __int128 v244;
  CA::Render *v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  float64x2_t v251[4];
  uint64_t v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  uint64_t v284;
  uint64_t v285;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v4 = *(float *)&v1;
  v231 = v5;
  v232 = v6;
  v8 = v7;
  v233 = v9;
  v11 = v10;
  v13 = v12;
  v236 = v14;
  v285 = *MEMORY[0x1E0C80C00];
  v245 = v12;
  Width = CGImageGetWidth(v12);
  Height = CGImageGetHeight(v13);
  Mask = (CGImage *)CGImageGetMask();
  if (Mask)
  {
    v19 = Mask;
    v20 = CGImageGetWidth(Mask);
    v21 = CGImageGetHeight(v19);
    if (v21 > Height)
      v22 = v21;
    else
      v22 = Height;
    if (v21 > Height)
      v23 = v20;
    else
      v23 = Width;
    v24 = v20 > (int)Width && v21 > Height;
    if (v20 <= (int)Width)
    {
      Width = Width;
    }
    else
    {
      Height = v22;
      Width = v23;
    }
  }
  else
  {
    v24 = 0;
  }
  LODWORD(v234) = v3 != 0;
  if (v3)
  {
    *(_QWORD *)&v18 = *(_QWORD *)v3;
    v26 = *(unsigned int *)(v3 + 8);
    v25 = *(_DWORD *)(v3 + 12);
  }
  else
  {
    v18 = 0uLL;
    v26 = Width;
    v25 = Height;
  }
  *(_QWORD *)&v244 = v18;
  *((_QWORD *)&v244 + 1) = __PAIR64__(v25, v26);
  v243 = 0uLL;
  LODWORD(v228) = v24;
  if (!v24)
  {
    v235 = v18;
    if (CGImageIsSubimage())
    {
      *(int32x2_t *)&v244 = vadd_s32(*(int32x2_t *)&v235, vmovn_s64(vcvtq_s64_f64(v243)));
      LODWORD(Width) = CGImageGetWidth(v245);
      LODWORD(v234) = 1;
      Height = CGImageGetHeight(v245);
    }
  }
  v241 = 0u;
  v242 = 0u;
  CA::CG::ImageFilter::ImageFilter((uint64_t)&v241, v26, v25, v11, (float64x2_t *)v233, v232);
  if (v8)
  {
    if ((*(_BYTE *)(v236 + 136) & 2) != 0)
    {
      v28 = fabs(v233[1]) < 0.000001 && fabs(v233[2]) < 0.000001 || fabs(*v233) < 0.000001 && fabs(v233[3]) < 0.000001;
      v27 = !v28;
    }
    else
    {
      v27 = 1;
    }
  }
  else
  {
    v27 = 0;
  }
  v29 = v27 & ((v241 & 9) != 0);
  if ((v27 & ((v241 & 9) != 0)) != 0)
    v30 = 255;
  else
    v30 = 0;
  v227 = v30;
  v31 = *(_QWORD *)(v236 + 8);
  _H0 = *(_WORD *)(*(_QWORD *)(v31 + 16) + 14);
  __asm { FCVT            S0, H0 }
  if (_S0 != 1.0
    || (v37 = v245, (CGImageHasAlpha() & 1) != 0)
    || CGImageIsMask(v37)
    || CGImageGetMask()
    || CGImageGetMatte()
    || CGImageGetMaskingColors())
  {
    v38 = 0;
  }
  else
  {
    v38 = ((v241 & 9) == 0) | v29 ^ 1;
  }
  v39 = *(_QWORD *)(v31 + 16);
  v40 = *(_BYTE *)(v39 + 481);
  *(_QWORD *)&v235 = v31;
  v226 = v38;
  if ((v40 & 1) == 0)
    goto LABEL_46;
  v41 = *(unsigned __int8 *)(v39 + 480);
  if (v41 < 2)
  {
    v229 = 1;
    goto LABEL_47;
  }
  v229 = v38;
  if (v41 != 3)
LABEL_46:
    v229 = 0;
LABEL_47:
  v230 = (float64x2_t *)v11;
  if (!CA::CG::AccelDataProvider::_table)
  {
LABEL_55:
    v47 = v235;
    goto LABEL_56;
  }
  Identifier = CGImageGetIdentifier();
  os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::AccelDataProvider::_table_lock);
  v43 = (os_unfair_lock_s *)x_hash_table_lookup(CA::CG::AccelDataProvider::_table, Identifier, 0);
  if (!v43)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelDataProvider::_table_lock);
    goto LABEL_55;
  }
  v44 = v43;
  v45 = v43 + 2;
  os_unfair_lock_lock(v43 + 2);
  v46 = *(_QWORD *)&v44[4]._os_unfair_lock_opaque;
  v47 = v235;
  if (!v46 || *(_BYTE *)(v46 + 68) || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v236 + 32))(v236) & 1) != 0)
    goto LABEL_52;
  v167 = *(unsigned int **)&v44[4]._os_unfair_lock_opaque;
  v168 = v167 + 2;
LABEL_224:
  v169 = *v168;
  if (!*v168)
  {
LABEL_52:
    os_unfair_lock_unlock(v45);
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelDataProvider::_table_lock);
  }
  else
  {
    do
    {
      v170 = __ldaxr(v168);
      if (v170 != v169)
      {
        __clrex();
        goto LABEL_224;
      }
    }
    while (__stlxr(v169 + 1, v168));
    os_unfair_lock_unlock(v45);
    v171 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v236 + 8) + 184))(*(_QWORD *)(v236 + 8), 4);
    if (v167[11] <= v171 && v167[12] <= v171)
    {
      (*(void (**)(__int128 *__return_ptr, unsigned int *))(*(_QWORD *)v167 + 56))(&v253, v167);
      v125 = (_DWORD *)v253;
    }
    else
    {
      v125 = 0;
    }
    global_queue = dispatch_get_global_queue(17, 0);
    dispatch_async_f(global_queue, v167, (dispatch_function_t)CA::CG::AccelDataProvider::retain_texture(CA::CG::Renderer &)::$_0::__invoke);
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelDataProvider::_table_lock);
    if (v125)
    {
      v284 = 0;
      v283 = 0u;
      v282 = 0u;
      v281 = 0u;
      v280 = 0u;
      v279 = 0u;
      v278 = 0u;
      v277 = 0u;
      v276 = 0u;
      v275 = 0u;
      v274 = 0u;
      v273 = 0u;
      v272 = 0u;
      v271 = 0u;
      v270 = 0u;
      v269 = 0u;
      v268 = 0u;
      v267 = 0u;
      v266 = 0u;
      v265 = 0u;
      v264 = 0u;
      v263 = 0u;
      v262 = 0u;
      v261 = 0u;
      v260 = 0u;
      v259 = 0u;
      v258 = 0u;
      v257 = 0u;
      v256 = 0u;
      v255 = 0u;
      v254 = 0u;
      v253 = 0u;
      v205 = v125[4];
      v206 = v125[5];
      v207 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v125 + 104))(v125);
      CA::OGL::ContentsGeometry::ContentsGeometry((uint64_t)&v253, v205, v206, v207, v230, (int *)&v244, v233, v241, v227);
      v208 = v229;
      if ((v229 & 1) != 0)
        *(_BYTE *)(*(_QWORD *)(v235 + 16) + 481) &= ~1u;
      v209 = v235;
      v210 = (uint32x2_t **)CA::OGL::Context::bind_image(v235, 0, (uint32x2_t *)v125, (double *)DWORD1(v272), BYTE4(v241), BYTE5(v241), 0, (CA::OGL::ContentsGeometry *)&v253, *((float *)&v241 + 2), (float32x4_t *)((char *)&v270 + 4), 0);
      v213 = v226;
      if (v210)
        CA::OGL::ContentsGeometry::fill_and_unbind((uint64_t)&v253, v235, v210, (double *)BYTE4(v241), *((float *)&v241 + 2));
      if ((v208 & 1) != 0)
        *(_BYTE *)(*(_QWORD *)(v235 + 16) + 481) |= 1u;
      CA::OGL::ContentsGeometry::fill_debug((uint64_t)&v253, v209, 0, (double *)v125, v213 & 1, v211, v212);
      v214 = v125 + 2;
      do
      {
        v215 = __ldaxr(v214);
        v203 = --v215 == 0;
      }
      while (__stlxr(v215, v214));
      goto LABEL_272;
    }
  }
  v26 = DWORD2(v244);
LABEL_56:
  v225 = v13;
  v48 = BYTE4(v241);
  if (BYTE4(v241) <= 1u)
  {
    v50 = HIDWORD(v244);
    v52 = v26;
    v53 = HIDWORD(v244);
  }
  else
  {
    v49 = llround(*(double *)&v242 * (double)(int)v26);
    v50 = HIDWORD(v244);
    v51 = llround(*((double *)&v242 + 1) * (double)SHIDWORD(v244));
    if (v49 <= 1)
      v52 = 1;
    else
      v52 = v49;
    if (v51 <= 1)
      v53 = 1;
    else
      v53 = v51;
  }
  if ((CGImageGetBitmapInfo(v245) & 0x100) != 0)
  {
    IsWideGamutRGB = 1;
  }
  else
  {
    ColorSpace = CGImageGetColorSpace(v245);
    IsWideGamutRGB = CGColorSpaceIsWideGamutRGB(ColorSpace);
  }
  v56 = *(_QWORD *)(v47 + 248);
  if (v56 && ((*(_WORD *)(v56 + 68) & 0x130) != 0 ? (v57 = IsWideGamutRGB) : (v57 = 0), v57))
  {
    v224 = 1;
    v58 = 4;
  }
  else
  {
    v59 = *(_QWORD *)(v236 + 8);
    if (v59)
      v60 = *(CGColorSpace **)(v59 + 144);
    else
      v60 = 0;
    Model = CGColorSpaceGetModel(v60);
    v224 = Model != kCGColorSpaceModelMonochrome;
    if (Model)
      v58 = 2;
    else
      v58 = 1;
  }
  Property = CGImageGetProperty();
  v63 = *MEMORY[0x1E0C9AE50];
  if (Property != *MEMORY[0x1E0C9AE50])
  {
    v64 = CGImageGetProperty();
    _ZF = (v53 + *(_DWORD *)(v236 + 192 * v58 + 1400) - 1)
        / *(_DWORD *)(v236 + 192 * v58 + 1400)
        * ((v52 + *(_DWORD *)(v236 + 192 * v58 + 1396) - 1)
         / *(_DWORD *)(v236 + 192 * v58 + 1396)) > *((_DWORD *)&CA::CG::Renderer::_max_mosaic_cells + v58)
       || v64 == v63;
    if (!_ZF)
    {
      v96 = v236;
      v97 = v236 + 192 * v58;
      v98 = v235;
      v99 = *(_QWORD *)(v235 + 16);
      v100 = *(_QWORD *)(v99 + 16) & 0xFFFFFF00FF00FF00;
      if (*(_QWORD *)(v99 + 8) == 0x3C003C003C003C00)
        v101 = 1;
      else
        v101 = 3;
      *(_DWORD *)(v99 + 16) = v101 | v100;
      *(_DWORD *)(v99 + 20) = HIDWORD(v100);
      if ((*(_DWORD *)(v97 + 1536) & 0x80000000) != 0)
      {
        v102 = BYTE5(v241);
        v103 = BYTE4(v241);
        if (v48 > 1)
          v103 = 1;
        v228 = (_DWORD *)(v97 + 1536);
        *(_DWORD *)(v97 + 1536) = 0;
        v104 = v96 + 192 * v58;
        *(_BYTE *)(v104 + 1540) = v103;
        *(_BYTE *)(v104 + 1541) = v102;
        if ((v229 & 1) != 0)
          *(_BYTE *)(*(_QWORD *)(v98 + 16) + 481) &= ~1u;
        v105 = CGImageGetIdentifier();
        if (((v48 < 2) & ~(_DWORD)v234) != 0)
        {
          v226 = v105;
          v234 = 0;
          v110 = 2;
          v109 = v52;
        }
        else
        {
          MEMORY[0x1E0C80A78](v105);
          v234 = &v217;
          v217 = off_1E1593A60;
          v218 = v108;
          v219 = v244;
          v220 = v26;
          v221 = v50;
          v222 = v52;
          v109 = v52;
          v223 = v53;
          v226 = 33 * (33 * (33 * (33 * (33 * (DWORD1(v244) + 33 * v244) + v26) + v50) + v52) + v53) + v108;
          v110 = 3;
        }
        v129 = 0;
        if (v231)
          v130 = v110 | 0x100;
        else
          v130 = v110;
        v106.i64[0] = (uint64_t)&v238;
        v107.i64[0] = (uint64_t)v233;
        v131 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vceqq_s64(v106, v107)).i64[0], 0);
        v132 = (float64x2_t)vandq_s8(*(int8x16_t *)(v233 + 2), v131);
        v133 = (float64x2_t)vandq_s8(*(int8x16_t *)v233, v131);
        v135 = v230[1].f64[0];
        v134 = v230[1].f64[1];
        v240 = vmlaq_n_f64(vmlaq_n_f64((float64x2_t)vandq_s8(*(int8x16_t *)(v233 + 4), v131), v133, v230->f64[0]), v132, v134 + v230->f64[1]);
        v136 = vmulq_n_f64(v133, v135 / (double)v109);
        v137 = vmulq_n_f64(v132, -v134 / (double)v53);
        v238 = v136;
        v239 = v137;
        v98 = v235;
        if (vabdd_f64(v136.f64[0], trunc(v137.f64[1])) < 0.000001 && fabs(v136.f64[1]) < 0.000001)
          v129 = fabs(v137.f64[0]) < 0.000001;
        v138 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v235 + 184))(v235, 9);
        v139 = !v224;
        v140 = *(_QWORD *)(v98 + 16);
        if (!v138)
          v139 = 1;
        if ((v139 & 1) != 0 || (v141 = *(unsigned __int8 *)(v140 + 480), v141 == 12) || (v141 - 1) > 0x18)
        {
          v251[1].f64[1] = 0.0;
          *(float64x2_t *)((char *)v251 + 8) = 0u;
          *((_QWORD *)&v249 + 1) = 0;
          HIDWORD(v250) = 0;
          *(_QWORD *)(v98 + 128) = 0;
          *(_QWORD *)(v98 + 96) = v98 + 818;
          *(_OWORD *)(v98 + 104) = xmmword_18474E060;
          *((_QWORD *)&v247 + 1) = __PAIR64__(v53, v109);
          *(_QWORD *)&v248 = &v253;
          *((_QWORD *)&v248 + 1) = 0x2000;
          *(_QWORD *)&v249 = 0;
          *((_QWORD *)&v246 + 1) = v236;
          *(_QWORD *)&v247 = v98;
          *(_QWORD *)&v246 = &off_1E1591D60;
          *(_QWORD *)&v250 = v225;
          DWORD2(v250) = v232;
          BYTE12(v250) = v231;
          *(_QWORD *)&v251[0].f64[0] = &v238;
          LOBYTE(v251[0].f64[1]) = v129;
          BYTE1(v251[0].f64[1]) = *(_BYTE *)(v140 + 16);
          v145 = v238.f64[0] * v238.f64[0] + v238.f64[1] * v238.f64[1];
          v146 = v239.f64[0] * v239.f64[0] + v239.f64[1] * v239.f64[1];
          v147 = 1.0;
          if (v145 != 1.0 || (v148 = 1.0, v146 != 1.0))
          {
            v147 = 1.0 / sqrt(v145);
            v148 = 1.0 / sqrt(v146);
          }
          v251[1].f64[0] = v147;
          v251[1].f64[1] = v148;
          v251[1] = vaddq_f64(v251[1], v251[1]);
          v143 = v234;
          CA::OGL::Mosaic::draw(v97 + 1392, (uint64_t *)v98, v130, v226, (uint64_t)v234, v109, v53, 1, (uint64_t)&v246, v227);
          CA::CG::MosaicBitmapDelegate::~MosaicBitmapDelegate((CA::CG::MosaicBitmapDelegate *)&v246);
          v144 = v229;
          v142 = v236;
        }
        else
        {
          LOBYTE(v221) = v129;
          v142 = v236;
          CA::CG::ImageRectDelegate::ImageRectDelegate((uint64_t)&v246, v236, v235, (uint64_t)v225, v109, v53, v232, v231, &v238, v221, (uint64_t)&v253);
          v143 = v234;
          v98 = v235;
          CA::OGL::Mosaic::draw(v97 + 1392, (uint64_t *)v235, v130, v226, (uint64_t)v234, v109, v53, 1, (uint64_t)&v246, v227);
          CA::CG::ImageRectDelegate::~ImageRectDelegate((CA::CG::ImageRectDelegate *)&v246);
          v144 = v229;
        }
        if (v143)
          (**v143)((CA::CG::ImageKey *)v143);
        if ((v144 & 1) != 0)
          *(_BYTE *)(*(_QWORD *)(v98 + 16) + 481) |= 1u;
        v149 = v142 + 192 * v58;
        v150 = *(_QWORD *)(v149 + 1552);
        if (v150)
        {
          v151 = (_QWORD *)(v149 + 1552);
          (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)v235 + 520))(v235, v150, 0);
          *v151 = 0;
          v98 = v235;
          *(_DWORD *)(v142 + 192 * v58 + 1544) = -1;
        }
        *v228 = -1;
        *(_QWORD *)(v142 + 192 * v58 + 1504) = 0;
      }
      *(_BYTE *)(*(_QWORD *)(v98 + 16) + 16) = 0;
      return;
    }
  }
  if (v231)
    v66 = 158;
  else
    v66 = 156;
  if ((_DWORD)v228)
    v67 = (CGColorSpace *)(v66 | 0x40);
  else
    v67 = (CGColorSpace *)v66;
  v68 = (CA::OGL::Context *)v235;
  v69 = *(double *)(v235 + 224);
  v70 = 1.0;
  if (CGImageGetCachingFlags() == 1)
    v71 = 0.1;
  else
    v71 = 1.0;
  v72 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v235 + 184))(v235, 4);
  v73 = (char)v234;
  if ((int)v50 * (int)v26 <= 0x100000)
    v73 = 1;
  if ((v73 & 1) == 0)
  {
    v74 = CGImageGetColorSpace(v245);
    if (CGColorSpaceGetModel(v74) >= kCGColorSpaceModelCMYK)
    {
      v75 = v233;
      v76 = *v75 * *v75 + v75[1] * v75[1];
      v77 = v75[2] * v75[2] + v75[3] * v75[3];
      v78 = v76 != 1.0;
      if (v77 != 1.0)
        v78 = 1;
      v79 = sqrt(v76);
      v80 = sqrt(v77);
      if (v78)
      {
        v77 = v80;
        v76 = v79;
      }
      v70 = fmin(fmax(v230[1].f64[0] * v76 / (double)(int)v26, v230[1].f64[1] * v77 / (double)(int)v50), 1.0);
    }
  }
  v81 = v71 + v69;
  v82 = (double)(int)v26;
  v83 = (double)(int)v50;
  if (v70 * v70 * (double)(int)v26 * (double)(int)v50 > (double)(v72 * v72))
  {
    v84 = (int)v26 <= (int)v50 ? v50 : v26;
    v85 = (float)v72 / (float)v84;
    v70 = v85;
    if (v85 * (double)v84 > (double)v72)
      v70 = floorf(v85 * 10000.0) * 0.0001;
  }
  v86 = CA::Render::copy_image(v245, *(CGImage **)(v235 + 144), v67, v81, v70);
  if (v86)
  {
    v87 = (CA::Render::Image *)v86;
    v88 = *((_DWORD *)v86 + 3);
    v89 = *((_DWORD *)v86 + 4);
    *((_DWORD *)v86 + 3) = v88 & 0xFFF7FFFF;
    v90 = *((_DWORD *)v86 + 5);
    v238 = 0u;
    v239 = 0u;
    if (v89 != (_DWORD)Width || v90 != Height)
    {
      if ((_DWORD)v234)
      {
        if ((int)v244 >= v89 || SDWORD1(v244) >= v90)
        {
          v93 = (unsigned int *)(v86 + 8);
          do
          {
            v94 = __ldaxr(v93);
            v95 = v94 - 1;
          }
          while (__stlxr(v95, v93));
          if (!v95)
            (*(void (**)(char *))(*(_QWORD *)v86 + 16))(v86);
          return;
        }
      }
      v111 = v26 + v244;
      if ((int)v26 + (int)v244 >= v89)
        v111 = v89;
      v26 = (v111 - v244);
      v112 = v50 + DWORD1(v244);
      if ((int)v50 + DWORD1(v244) >= v90)
        v112 = v90;
      v50 = (v112 - DWORD1(v244));
      if ((_DWORD)v234)
      {
        v113 = v230[1].f64[1];
        v239.f64[0] = v230[1].f64[0] * (double)(int)v26 / v82;
        v239.f64[1] = v113 * (double)(int)v50 / v83;
        v114 = v113 - v239.f64[1] + v230->f64[1];
        v238.f64[0] = v230->f64[0];
        v238.f64[1] = v114;
        v230 = &v238;
      }
      *((_QWORD *)&v244 + 1) = __PAIR64__(v50, v26);
    }
    _ZF = v88 == 23;
    v115 = (int)v234;
    if (!_ZF)
      v115 = 0;
    if (v115 != 1)
      goto LABEL_233;
    if (BYTE4(v241) != 2 && BYTE4(v241) != 11)
    {
      v116 = v89 <= v72 && v90 <= v72;
      v117 = !v116 && (int)v26 <= v72;
      if (!v117 || (int)v50 > v72)
        goto LABEL_233;
    }
    v120 = v89;
    v121 = (*(uint64_t (**)(CA::OGL::Context *, _QWORD, size_t, size_t))(*(_QWORD *)v68 + 200))(v68, v86[152], v26, v50);
    v122 = v121;
    v123 = *((_DWORD *)v87 + 3);
    if ((v123 & 0x1000000) != 0)
    {
      *(_QWORD *)&v255 = 0;
      *(_QWORD *)&v253 = v87;
      *((_QWORD *)&v253 + 1) = v121;
      v254 = v244;
      *((_QWORD *)&v255 + 1) = 0x7FF0000000000000;
      os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Image::_subimage_table_lock);
      if (CA::Render::Image::_subimage_table)
      {
        *(_QWORD *)&v246 = 0;
        v124 = x_hash_table_lookup(CA::Render::Image::_subimage_table, (uint64_t)&v253, &v246);
        if (v124)
        {
          v125 = (_DWORD *)v124;
          if (v81 > 0.0)
          {
            if (*(double *)(v246 + 40) < v81)
              *(double *)(v246 + 40) = v81;
            if (*(double *)&CA::Render::Image::_subimage_deadline > v81)
              CA::Render::Image::_subimage_deadline = *(_QWORD *)&v81;
          }
          v126 = (unsigned int *)(v124 + 8);
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 + 1, v126));
          if (!v127)
          {
            v125 = 0;
            do
              v128 = __ldaxr(v126);
            while (__stlxr(v128 - 1, v126));
          }
LABEL_217:
          os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Image::_subimage_table_lock);
          if (v125)
          {
            *(_QWORD *)&v244 = 0;
            v163 = (unsigned int *)((char *)v87 + 8);
            v89 = v125[4];
            v90 = v125[5];
            do
            {
              v164 = __ldaxr(v163);
              v165 = v164 - 1;
            }
            while (__stlxr(v165, v163));
            if (!v165)
            {
              v166 = v89;
              (*(void (**)(CA::Render::Image *))(*(_QWORD *)v87 + 16))(v87);
              v89 = v166;
            }
LABEL_234:
            v172 = v89;
            v173 = *((float *)v125 + 14) <= 1.0 && CGColorSpaceUsesExtendedRange(*((CGColorSpaceRef *)v125 + 6));
            v174 = CGColorSpaceUsesITUR_2100TF(*((CGColorSpaceRef *)v125 + 6));
            v175 = v4 > 1.0 || v173;
            v176 = v174 | v175;
            v177 = 0;
            if ((v174 | v175) == 1)
            {
              v178 = v174;
              v179 = CA::OGL::Context::color_program_cache(v68);
              v180 = v179;
              if (v179)
              {
                LODWORD(v236) = *((_BYTE *)v179 + 65) != 0;
                LODWORD(v234) = *((_BYTE *)v179 + 64) != 0;
                v177 = *((_QWORD *)v179 + 6);
                v181 = v125[14];
                *((float *)v179 + 12) = v4;
                *((_DWORD *)v179 + 13) = v181;
                if (v178)
                {
                  *((_BYTE *)v179 + 64) = 1;
                }
                else if (v173)
                {
                  *((_BYTE *)v179 + 65) = 0;
                }
                goto LABEL_246;
              }
            }
            else
            {
              v180 = 0;
            }
            LODWORD(v236) = 0;
            LODWORD(v234) = 0;
LABEL_246:
            v284 = 0;
            v283 = 0u;
            v282 = 0u;
            v281 = 0u;
            v280 = 0u;
            v279 = 0u;
            v278 = 0u;
            v277 = 0u;
            v276 = 0u;
            v275 = 0u;
            v274 = 0u;
            v273 = 0u;
            v272 = 0u;
            v271 = 0u;
            v270 = 0u;
            v269 = 0u;
            v268 = 0u;
            v267 = 0u;
            v266 = 0u;
            v265 = 0u;
            v264 = 0u;
            v263 = 0u;
            v262 = 0u;
            v261 = 0u;
            v260 = 0u;
            v259 = 0u;
            v258 = 0u;
            v257 = 0u;
            v256 = 0u;
            v255 = 0u;
            v254 = 0u;
            v253 = 0u;
            v182 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v125 + 104))(v125);
            CA::OGL::ContentsGeometry::ContentsGeometry((uint64_t)&v253, v172, v90, v182, v230, (int *)&v244, v233, v241, v227);
            v183 = *((_QWORD *)v68 + 2);
            v184 = *(_BYTE *)(v183 + 481);
            if ((v184 & 1) != 0)
              DWORD1(v272) |= 0x100u;
            v185 = v229;
            if ((v229 & 1) != 0)
              *(_BYTE *)(v183 + 481) = v184 & 0xFE;
            v188 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v125 + 200))(v125);
            v189 = (CA::Render::TiledTexture *)v188;
            if (v188
              || (*((_BYTE *)v125 + 12) == 23
               && BYTE4(v241) == 11
               && (CA::OGL::ContentsGeometry::scale((CA::OGL::ContentsGeometry *)&v253, v186, v187), v196 < 0.75)
               || (*(unsigned int (**)(CA::OGL::Context *, _DWORD *))(*(_QWORD *)v68 + 568))(v68, v125))
              && (LODWORD(v246) = 0,
                  v237 = 0,
                  ((*(uint64_t (**)(_DWORD *, __int128 *, unsigned int *))(*(_QWORD *)v125 + 216))(v125, &v246, &v237) & 1) != 0)&& (v197 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v125 + 104))(v125), v198 = (*(uint64_t (**)(CA::OGL::Context *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v68 + 200))(v68, v197, v246, v237), (v189 = (CA::Render::TiledTexture *)(*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v125 + 208))(v125, v198, (DWORD1(v272) >> 11) & 1)) != 0))
            {
              v252 = 0;
              memset(v251, 0, sizeof(v251));
              v249 = 0u;
              v250 = 0u;
              v247 = 0u;
              v248 = 0u;
              v246 = 0u;
              CA::OGL::TiledImageGeometry::TiledImageGeometry((uint64_t)&v246, v189, (uint64_t)v68, (double *)DWORD1(v272), SBYTE4(v241), SBYTE5(v241), (CA::OGL::ContentsGeometry *)&v253, *((float *)&v241 + 2));
              CA::OGL::TiledImageGeometry::draw_tiles((uint64_t)&v246, 0, 1);
              v192 = v226;
              if (!v188)
              {
                v193 = (unsigned int *)((char *)v189 + 8);
                do
                {
                  v194 = __ldaxr(v193);
                  v195 = v194 - 1;
                }
                while (__stlxr(v195, v193));
                if (!v195)
                  (*(void (**)(CA::Render::TiledTexture *))(*(_QWORD *)v189 + 16))(v189);
              }
            }
            else
            {
              v199 = (uint32x2_t **)CA::OGL::Context::bind_image((uint64_t)v68, 0, (uint32x2_t *)v125, (double *)DWORD1(v272), BYTE4(v241), BYTE5(v241), 0, (CA::OGL::ContentsGeometry *)&v253, *((float *)&v241 + 2), (float32x4_t *)((char *)&v270 + 4), 0);
              v192 = v226;
              if (v199)
                CA::OGL::ContentsGeometry::fill_and_unbind((uint64_t)&v253, (uint64_t)v68, v199, (double *)BYTE4(v241), *((float *)&v241 + 2));
            }
            if ((v185 & 1) != 0)
              *(_BYTE *)(*((_QWORD *)v68 + 2) + 481) |= 1u;
            CA::OGL::ContentsGeometry::fill_debug((uint64_t)&v253, (uint64_t)v68, 0, (double *)v125, v192 & 1, v190, v191);
            v200 = v176 ^ 1;
            if (!v180)
              v200 = 1;
            if ((v200 & 1) == 0)
            {
              *((_BYTE *)v180 + 65) = v236;
              *((_BYTE *)v180 + 64) = (_BYTE)v234;
              *((_QWORD *)v180 + 6) = v177;
            }
            v201 = v125 + 2;
            do
            {
              v202 = __ldaxr(v201);
              v203 = --v202 == 0;
            }
            while (__stlxr(v202, v201));
LABEL_272:
            if (v203)
              (*(void (**)(_DWORD *))(*(_QWORD *)v125 + 16))(v125);
            return;
          }
          v89 = v120;
LABEL_233:
          v125 = v87;
          goto LABEL_234;
        }
      }
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Image::_subimage_table_lock);
      v123 = *((_DWORD *)v87 + 3);
    }
    *((_DWORD *)v87 + 3) = v123 | 0x1000000;
    v152 = CA::Render::Image::copy_subimage(v87, 0, (const CA::Bounds *)&v244, v122, 0);
    if (!v152)
    {
      v125 = v87;
      v89 = v120;
      goto LABEL_234;
    }
    v125 = v152;
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v154 = (double *)malloc_type_zone_malloc(malloc_zone, 0x30uLL, 0x8BB15036uLL);
    v155 = v154;
    if (v154)
    {
      *(_QWORD *)v154 = v87;
      *((_QWORD *)v154 + 1) = v122;
      *((_OWORD *)v154 + 1) = v244;
      *((_DWORD *)v154 + 8) = 0;
      v154[5] = INFINITY;
    }
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Image::_subimage_table_lock);
    if (v81 > 0.0)
    {
      v155[5] = v81;
      if (*(double *)&CA::Render::Image::_subimage_deadline > v81)
        CA::Render::Image::_subimage_deadline = *(_QWORD *)&v81;
    }
    v156 = (int *)CA::Render::Image::_subimage_table;
    if (!CA::Render::Image::_subimage_table)
    {
      v156 = (int *)x_hash_table_new_((unint64_t (*)(uint64_t))CA::Render::Image::SubimageKey::hash, CA::Render::Image::SubimageKey::compare, 0, 0, 0, 0);
      CA::Render::Image::_subimage_table = (uint64_t)v156;
    }
    if ((hash_table_modify(v156, (uint64_t)v155, (uint64_t)v125, 0) & 1) != 0)
      goto LABEL_214;
    v157 = v125 + 2;
    do
    {
      v158 = __ldaxr(v157);
      v159 = v158 - 1;
    }
    while (__stlxr(v159, v157));
    if (!v159)
      (*(void (**)(_DWORD *))(*(_QWORD *)v125 + 16))(v125);
    v125 = (_DWORD *)x_hash_table_lookup(CA::Render::Image::_subimage_table, (uint64_t)v155, 0);
    if (v155)
    {
      v160 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v160, v155);
    }
    if (v125)
    {
LABEL_214:
      v161 = v125 + 2;
      do
        v162 = __ldaxr(v161);
      while (__stlxr(v162 + 1, v161));
      if (!v162)
      {
        v125 = 0;
        do
          v216 = __ldaxr(v161);
        while (__stlxr(v216 - 1, v161));
      }
    }
    goto LABEL_217;
  }
}

void CA::CG::ImageDelegate::~ImageDelegate(CA::CG::ImageDelegate *this)
{
  CA::CG::MosaicBitmapDelegate::~MosaicBitmapDelegate(this);
  JUMPOUT(0x186DBD990);
}

float CA::CG::ImageDelegate::quad(CA::CG::ImageDelegate *this, const CA::Bounds *a2, float *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  float v19;
  double v20;
  double v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  int v26;
  double v27;
  double v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  double v37;
  float v38;
  float v39;
  float v40;
  float result;
  int v42;
  int v43;
  int v44;

  v6 = *((_QWORD *)this + 2);
  v7 = 6;
  if (!*(_DWORD *)(v6 + 92))
    v7 = 4;
  if ((unint64_t)(*(_QWORD *)(v6 + 128) + 4) > *(_QWORD *)(v6 + 136)
    || (v8 = *(_QWORD *)(v6 + 112)) != 0 && *(_QWORD *)(v6 + 104) + v7 > v8
    || (v9 = *(_QWORD *)(v6 + 16), v10 = *(unsigned __int8 *)(v9 + 16), v10 != *((unsigned __int8 *)this + 89)))
  {
    CA::CG::MosaicDelegate::draw_array(*((CA::CG::MosaicDelegate **)this + 2));
    LOBYTE(v10) = *((_BYTE *)this + 89);
    v9 = *(_QWORD *)(v6 + 16);
  }
  *(_BYTE *)(v9 + 16) = v10;
  v12 = *(_QWORD *)(v6 + 120);
  v11 = *(_QWORD *)(v6 + 128);
  *(_QWORD *)(v6 + 128) = v11 + 4;
  CA::OGL::Context::array_indices(v6, v11);
  v13 = *((_DWORD *)a2 + 1);
  v14 = (double)*(int *)a2;
  v15 = (double)(*((_DWORD *)a2 + 2) + *(_DWORD *)a2);
  v16 = (double)(*((_DWORD *)a2 + 3) + v13);
  v17 = (double *)*((_QWORD *)this + 10);
  v18 = v17[1];
  v19 = *v17 * v14;
  *(float *)&v14 = v18 * v14;
  v20 = v17[2];
  v21 = v17[3];
  v22 = v20 * (double)v13;
  v23 = v21 * (double)v13;
  v24 = *v17 * v15;
  *(float *)&v15 = v18 * v15;
  *(float *)&v18 = v20 * v16;
  *(float *)&v16 = v21 * v16;
  v25 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 16) + 8);
  v26 = *((unsigned __int8 *)this + 88);
  v27 = v17[4];
  v28 = v17[5];
  v29 = v27 + (float)(v22 + v19);
  v30 = v28 + (float)(v23 + *(float *)&v14);
  v31 = v27 + (float)(v22 + v24);
  v32 = v28 + (float)(v23 + *(float *)&v15);
  v33 = v27 + (float)(*(float *)&v18 + v24);
  v34 = v28 + (float)(*(float *)&v16 + *(float *)&v15);
  v35 = v27 + (float)(*(float *)&v18 + v19);
  v36 = v12 + 48 * v11;
  *(float *)v36 = v29;
  *(float *)(v36 + 4) = v30;
  *(_QWORD *)(v36 + 8) = 0x3F80000000000000;
  v37 = v28 + (float)(*(float *)&v16 + *(float *)&v14);
  if (v26)
    v38 = v33;
  else
    v38 = v31;
  if (v26)
    v32 = v30;
  *(float *)(v36 + 48) = v38;
  *(float *)(v36 + 52) = v32;
  *(_QWORD *)(v36 + 56) = 0x3F80000000000000;
  *(float *)(v36 + 96) = v33;
  *(float *)(v36 + 100) = v34;
  *(_QWORD *)(v36 + 104) = 0x3F80000000000000;
  v39 = v37;
  if (v26)
    v40 = v29;
  else
    v40 = v35;
  if (v26)
    v39 = v34;
  *(float *)(v36 + 144) = v40;
  *(float *)(v36 + 148) = v39;
  *(_QWORD *)(v36 + 152) = 0x3F80000000000000;
  result = *a3;
  v42 = *((_DWORD *)a3 + 1);
  v43 = *((_DWORD *)a3 + 2);
  v44 = *((_DWORD *)a3 + 3);
  *(float *)(v36 + 16) = *a3;
  *(_DWORD *)(v36 + 20) = v42;
  *(_QWORD *)(v36 + 32) = v25;
  *(_DWORD *)(v36 + 64) = v43;
  *(_DWORD *)(v36 + 68) = v42;
  *(_QWORD *)(v36 + 80) = v25;
  *(_DWORD *)(v36 + 112) = v43;
  *(_DWORD *)(v36 + 116) = v44;
  *(_QWORD *)(v36 + 128) = v25;
  *(float *)(v36 + 160) = result;
  *(_DWORD *)(v36 + 164) = v44;
  *(_QWORD *)(v36 + 176) = v25;
  return result;
}

_QWORD *CA::CG::ImageDelegate::aa_quad(CA::CG::ImageDelegate *this, const CA::Bounds *a2, float *a3, char a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  int16x4_t v15;
  int16x4_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  double v21;
  float v22;
  double v23;
  int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  int v44;
  float64x2_t v45;
  _QWORD *result;
  uint64_t v47;
  _DWORD v48[4];
  _DWORD v49[4];
  _DWORD v50[4];
  _DWORD v51[4];
  float v52[4];
  float v53[4];
  unsigned __int16 v54[4];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)*((_QWORD *)this + 2);
  v9 = v8[16];
  v10 = v9 + 16;
  if ((unint64_t)(v9 + 16) > v8[17]
    || (v11 = v8[14]) != 0 && v8[13] + 54 > v11
    || *(unsigned __int8 *)(v8[2] + 16) == *((unsigned __int8 *)this + 89))
  {
    CA::CG::MosaicDelegate::draw_array(*((CA::CG::MosaicDelegate **)this + 2));
    v9 = v8[16];
    v10 = v9 + 16;
  }
  v12 = v8[15];
  v8[16] = v10;
  v13 = -4;
  v14 = &CA::CG::ImageDelegate::aa_quad(CA::Bounds const&,float *,unsigned int)const::nine_part_indices;
  v15 = vdup_n_s16(v9);
  do
  {
    v16 = (int16x4_t)*v14++;
    *(int16x4_t *)v54 = vadd_s16(v16, v15);
    CA::OGL::Context::array_indices_vec((uint64_t)v8, v54);
    v13 += 4;
  }
  while (v13 < 0x20);
  v17 = v12 + 48 * v9;
  v47 = 0;
  *(_BYTE *)(v8[2] + 16) = 5;
  (*(void (**)(_QWORD *, uint64_t, _QWORD, _QWORD, uint64_t *))(*v8 + 448))(v8, 1, 0, 0, &v47);
  v18 = 0;
  v19 = *((_DWORD *)a2 + 2);
  v20 = *((_DWORD *)a2 + 3);
  v21 = (double)v19 * 0.5;
  if (*((double *)this + 12) < v21)
    v21 = *((double *)this + 12);
  v22 = v21;
  v23 = (double)v20 * 0.5;
  if (*((double *)this + 13) < v23)
    v23 = *((double *)this + 13);
  v24 = *((_DWORD *)a2 + 1);
  v25 = (float)*(int *)a2;
  v26 = (float)(*(_DWORD *)a2 + v19);
  v27 = v23;
  v53[0] = v25;
  v53[1] = v22 + v25;
  v53[2] = v26 - v22;
  v53[3] = v26;
  v52[0] = (float)v24;
  v52[1] = (float)v24 + v27;
  v52[2] = (float)(v24 + v20) - v27;
  v52[3] = (float)(v24 + v20);
  v28 = v22 / (float)v19;
  v29 = a3[1];
  v30 = a3[2];
  v31 = a3[3];
  v32 = v30 - *a3;
  v33 = *a3 + (float)(v32 * v28);
  v34 = *a3 + (float)(v32 * (float)(1.0 - v28));
  *(float *)v51 = *a3;
  *(float *)&v51[1] = v33;
  *(float *)&v51[2] = v34;
  *(float *)&v51[3] = v30;
  v35 = v27 / (float)v20;
  *(float *)v50 = v29;
  *(float *)&v50[1] = v29 + (float)((float)(v31 - v29) * v35);
  *(float *)&v50[2] = v29 + (float)((float)(v31 - v29) * (float)(1.0 - v35));
  *(float *)&v50[3] = v31;
  v36 = *(float *)&v47;
  if ((a4 & 1) != 0)
    v37 = *(float *)&v47;
  else
    v37 = *(float *)&v47 + (float)((float)(*((float *)&v47 + 1) - *(float *)&v47) * 0.5);
  *(float *)v49 = v37;
  *(float *)&v49[1] = *(float *)&v47 + (float)((float)(*((float *)&v47 + 1) - *(float *)&v47) * 0.5);
  if ((a4 & 2) != 0)
    v38 = *((float *)&v47 + 1);
  else
    v38 = *(float *)&v47 + (float)((float)(*((float *)&v47 + 1) - *(float *)&v47) * 0.5);
  *(float *)&v49[2] = *(float *)&v47 + (float)((float)(*((float *)&v47 + 1) - *(float *)&v47) * 0.5);
  *(float *)&v49[3] = v38;
  if ((a4 & 4) == 0)
    v36 = *(float *)&v47 + (float)((float)(*((float *)&v47 + 1) - *(float *)&v47) * 0.5);
  *(float *)v48 = v36;
  *(float *)&v48[1] = *(float *)&v47 + (float)((float)(*((float *)&v47 + 1) - *(float *)&v47) * 0.5);
  if ((a4 & 8) != 0)
    v39 = *((float *)&v47 + 1);
  else
    v39 = *(float *)&v47 + (float)((float)(*((float *)&v47 + 1) - *(float *)&v47) * 0.5);
  *(float *)&v48[2] = *(float *)&v47 + (float)((float)(*((float *)&v47 + 1) - *(float *)&v47) * 0.5);
  *(float *)&v48[3] = v39;
  v40 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 16) + 8);
  v41 = (_QWORD *)(v17 + 32);
  do
  {
    v42 = 0;
    v43 = v50[v18];
    v44 = v48[v18];
    v45 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v52[v18]), 0);
    result = v41;
    do
    {
      *(result - 4) = vcvt_f32_f64(vmlaq_f64(vmlaq_n_f64(*(float64x2_t *)(*((_QWORD *)this + 10) + 32), *(float64x2_t *)*((_QWORD *)this + 10), v53[v42]), v45, *(float64x2_t *)(*((_QWORD *)this + 10) + 16)));
      *(result - 3) = 0x3F80000000000000;
      *((_DWORD *)result - 4) = v51[v42];
      *((_DWORD *)result - 3) = v43;
      *((_DWORD *)result - 2) = v49[v42];
      *((_DWORD *)result - 1) = v44;
      *result = v40;
      result += 6;
      ++v42;
    }
    while (v42 != 4);
    ++v18;
    v41 += 24;
  }
  while (v18 != 4);
  if ((a4 & 4) != 0)
  {
    result = (_QWORD *)CA::OGL::aa_adjust_vertices(v17, v17 + 192, 48, 4);
    if ((a4 & 8) == 0)
    {
LABEL_29:
      if ((a4 & 1) == 0)
        goto LABEL_30;
      goto LABEL_35;
    }
  }
  else if ((a4 & 8) == 0)
  {
    goto LABEL_29;
  }
  result = (_QWORD *)CA::OGL::aa_adjust_vertices(v17 + 576, v17 + 384, 48, 4);
  if ((a4 & 1) == 0)
  {
LABEL_30:
    if ((a4 & 2) == 0)
      return result;
    return (_QWORD *)CA::OGL::aa_adjust_vertices(v17 + 144, v17 + 96, 192, 4);
  }
LABEL_35:
  result = (_QWORD *)CA::OGL::aa_adjust_vertices(v17, v17 + 48, 192, 4);
  if ((a4 & 2) == 0)
    return result;
  return (_QWORD *)CA::OGL::aa_adjust_vertices(v17 + 144, v17 + 96, 192, 4);
}

uint64_t CA::CG::ImageDelegate::flush(CA::CG::MosaicDelegate **this)
{
  double v2;
  uint64_t result;

  v2 = CA::CG::MosaicDelegate::draw_array(this[2]);
  result = (*(uint64_t (**)(CA::CG::MosaicDelegate *, _QWORD, uint64_t, double))(*(_QWORD *)this[2] + 520))(this[2], 0, 1, v2);
  *(_BYTE *)(*((_QWORD *)this[2] + 2) + 16) = *((_BYTE *)this + 89);
  return result;
}

void CA::CG::ImageKey::~ImageKey(CA::CG::ImageKey *this)
{
  malloc_zone_t *malloc_zone;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

BOOL CA::CG::ImageKey::equal(_DWORD *a1, _DWORD *a2)
{
  return a1[2] == a2[2]
      && a1[7] == a2[7]
      && a1[8] == a2[8]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6];
}

double CA::CG::ImageKey::copy(CA::CG::ImageKey *this)
{
  malloc_zone_t *malloc_zone;
  char *v3;
  double result;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v3 = (char *)malloc_type_zone_malloc(malloc_zone, 0x28uLL, 0x8BB15036uLL);
  if (v3)
  {
    *(_QWORD *)v3 = off_1E1593A60;
    *(_OWORD *)(v3 + 8) = *(_OWORD *)((char *)this + 8);
    result = *((double *)this + 3);
    *((double *)v3 + 3) = result;
    *((_DWORD *)v3 + 8) = *((_DWORD *)this + 8);
  }
  return result;
}

void CA::CG::DrawSubimage::~DrawSubimage(CGImageRef *this)
{
  *this = (CGImageRef)off_1E1593B18;
  CGImageRelease(this[15]);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
}

{
  malloc_zone_t *malloc_zone;

  *this = (CGImageRef)off_1E1593B18;
  CGImageRelease(this[15]);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::CG::DrawSubimage::draw_image(CA::CG::DrawSubimage *this, CA::CG::Renderer *a2)
{
  CA::CG::fill_image((uint64_t)a2);
}

void CA::CG::DrawTiledImage::~DrawTiledImage(CGImageRef *this)
{
  *this = (CGImageRef)off_1E1591F28;
  CGImageRelease(this[15]);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
}

{
  malloc_zone_t *malloc_zone;

  *this = (CGImageRef)off_1E1591F28;
  CGImageRelease(this[15]);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

float64x2_t *CA::CG::DrawTiledImage::compute_dod(CA::CG::DrawTiledImage *this, CA::Rect *a2)
{
  float64x2_t *v3;

  CA::Rect::operator=((double *)a2, (double *)this + 20);
  return CA::Rect::apply_transform(v3, (const CGAffineTransform *)((char *)this + 8));
}

uint64_t CA::CG::DrawTiledImage::may_flush()
{
  return 1;
}

BOOL CA::CG::DrawTiledImage::shape_extent_contains(CA::CG::DrawTiledImage *this, CA::CG::Renderer *a2, const CA::Shape *a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  int8x16_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int32x4_t v12;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = *((double *)this + 20);
  v4 = *((double *)this + 21);
  v13.f64[0] = v5;
  v13.f64[1] = v4;
  v7 = *((double *)this + 22);
  v6 = *((double *)this + 23);
  v14.f64[0] = v7;
  v14.f64[1] = v6;
  if (v7 < 0.0)
  {
    v13.f64[0] = v7 + v5;
    v14.f64[0] = -v7;
  }
  if (v6 < 0.0)
  {
    v13.f64[1] = v6 + v4;
    v14.f64[1] = -v6;
  }
  CA::Mat2Impl::mat2_apply_to_rect_interior((uint64_t)a2 + 32, v13.f64, a3);
  v8 = (int8x16_t)vceqzq_f64(v14);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v8, 1), v8).u64[0] & 0x8000000000000000) != 0
    || (v9 = vorrq_s8((int8x16_t)vcltzq_f64(v14), (int8x16_t)vcgezq_f64(v14)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v9), 1), v9).u64[0] & 0x8000000000000000) != 0))
  {
    v12 = 0uLL;
  }
  else
  {
    v10 = (int32x4_t)vcvtpq_s64_f64(vmaxnmq_f64(v13, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    v12 = vuzp1q_s32(v10, (int32x4_t)vsubq_s64(vcvtmq_s64_f64(vminnmq_f64(vaddq_f64(v13, v14), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v10));
  }
  return CA::Bounds::contains((CA::Bounds *)&v12, (uint64_t)a3);
}

uint64_t CA::CG::DrawTiledImage::debug_color(CA::CG::DrawTiledImage *this)
{
  return 543067616;
}

uint64_t CA::CG::DrawTiledImage::color_type(CA::CG::DrawTiledImage *this, CA::CG::Renderer *a2)
{
  int8x16_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  if ((*((_BYTE *)this + 100) & 2) != 0)
  {
    v4 = *((_QWORD *)this + 10);
    v5 = 9;
    if (v4)
    {
      if (*((_DWORD *)this + 14))
        v5 = 10;
      else
        v5 = 9;
    }
    _H0 = *((_WORD *)this + 47);
    __asm { FCVT            S0, H0 }
    if (_S0 == 1.0 && v4 == 0)
      return v5 | 4;
    else
      return v5;
  }
  else
  {
    v2 = vbslq_s8((int8x16_t)vcltzq_f64(*((float64x2_t *)this + 11)), (int8x16_t)vnegq_f64(*((float64x2_t *)this + 11)), *((int8x16_t *)this + 11));
    if (*(double *)v2.i64 <= *(double *)&v2.i64[1])
      v2.i64[0] = v2.i64[1];
    v3 = 8 * (*(double *)v2.i64 >= 1.79769313e308);
    if ((CGImageHasAlpha() & 1) == 0)
    {
      if (CGImageGetMask())
        return v3;
      else
        return v3 | 4;
    }
  }
  return v3;
}

uint64_t CA::CG::DrawTiledImage::draw_shape(CA::CG::DrawTiledImage *this, float64x2_t *a2, double a3, float64x2_t a4, float64x2_t a5)
{
  int v6;
  uint64_t v7;
  unsigned int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  unsigned int v19;
  double *v20;
  double *v21;
  double v23;
  double v24;
  double v25;
  double v26;
  _OWORD v27[9];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)this + 25);
  if ((v6 & 2) != 0)
    return CA::CG::DrawTiledImage::draw_image(this, a2, 1, a3, a4, a5);
  v7 = *(_QWORD *)&a2->f64[1];
  v8 = (v6 << 31 >> 31);
  v10 = *((double *)this + 20);
  v9 = *((double *)this + 21);
  v23 = v10;
  v24 = v9;
  v12 = *((double *)this + 22);
  v11 = *((double *)this + 23);
  v25 = v12;
  v26 = v11;
  if (v12 < 0.0)
  {
    v23 = v12 + v10;
    v25 = -v12;
  }
  if (v11 < 0.0)
  {
    v24 = v11 + v9;
    v26 = -v11;
  }
  v13 = CA::CG::mat2_filter_bits((uint64_t)&a2[2]);
  v19 = CA::CG::rect_filter_bits((uint64_t)&v23, a2[2].f64, v13, v14, v15, v16, v17, v18);
  v31 = 0;
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  memset(v27, 0, sizeof(v27));
  CA::Transform::set_affine((CA::Transform *)v27, a2[2].f64[0], a2[2].f64[1], a2[3].f64[0], a2[3].f64[1], a2[4].f64[0], a2[4].f64[1]);
  *((_QWORD *)&v28 + 1) = &v23;
  *(_QWORD *)&v29 = v27;
  *((_QWORD *)&v29 + 1) = __PAIR64__(v8, v19);
  v31 = 0;
  v30 = 0uLL;
  return CA::OGL::fill_rect(v7, (uint64_t)&v28 + 8, v20, v21);
}

void CA::CG::DrawTiledImage::draw_color(CA::CG::DrawTiledImage *this, CA::CG::Renderer *a2, double a3, float64x2_t a4, float64x2_t a5)
{
  if ((*((_BYTE *)this + 100) & 2) != 0)
    CA::CG::DrawOp::draw_color(this, a2);
  else
    CA::CG::DrawTiledImage::draw_image(this, (float64x2_t *)a2, 0, a3, a4, a5);
}

uint64_t CA::CG::DrawTiledImage::draw_shape_and_color(CA::CG::DrawTiledImage *this, float64x2_t *a2, double a3, float64x2_t a4, float64x2_t a5)
{
  return CA::CG::DrawTiledImage::draw_image(this, a2, 1, a3, a4, a5);
}

uint64_t CA::CG::DrawTiledImage::draw_image(CA::CG::DrawTiledImage *this, float64x2_t *a2, int a3, double a4, float64x2_t a5, float64x2_t a6)
{
  int8x16_t v8;
  double v9;
  int8x16_t v10;
  int8x16_t v11;
  double v12;
  CGImage *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  int v18;
  double *f64;
  int v20;
  float v21;
  unsigned int Width;
  unsigned int Height;
  int v24;
  _BOOL4 v25;
  uint64_t v26;
  double v27;
  int CachingFlags;
  double v29;
  uint64_t result;
  uint64_t v31;
  _BOOL4 v32;
  _BOOL4 v33;
  int v34;
  uint64_t v35;
  _BOOL4 v36;
  CA::ColorProgram::Cache *v37;
  CA::ColorProgram::Cache *v38;
  int v39;
  malloc_zone_t *malloc_zone;
  double *v41;
  double *v42;
  uint64_t v43;
  double v44;
  unint64_t v45;
  double v46;
  double v47;
  unsigned int *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v59;
  _BOOL4 v60;
  int v61;
  unsigned int v62;
  int v63;
  double *v64;
  uint64_t v65;
  double *v66;
  char v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  BOOL v76;
  BOOL v77;
  char v78;
  int8x16_t v79;
  float64x2_t v80;
  float64x2_t v81;
  _OWORD v82[2];
  _OWORD v83[13];
  float64x2_t v84[2];
  float64x2_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v8 = *((int8x16_t *)this + 8);
  a5.f64[0] = *((float64_t *)this + 18);
  v9 = *((double *)this + 19);
  a6.f64[0] = 0.0;
  v10.i64[1] = *((_QWORD *)this + 17);
  *(double *)v10.i64 = a5.f64[0] + *(double *)v8.i64;
  v11 = vbslq_s8((int8x16_t)vdupq_lane_s64(vcgtq_f64(a6, a5).i64[0], 0), v10, v8);
  if (a5.f64[0] >= 0.0)
    v12 = *((double *)this + 18);
  else
    v12 = -a5.f64[0];
  if (v9 >= 0.0)
  {
    v79 = v11;
  }
  else
  {
    *(double *)&v11.i64[1] = v9 + *(double *)&v8.i64[1];
    v79 = v11;
    v9 = -v9;
  }
  v13 = (CGImage *)*((_QWORD *)this + 15);
  v15 = *((double *)this + 20);
  v14 = *((double *)this + 21);
  v80.f64[0] = v15;
  v80.f64[1] = v14;
  v17 = *((double *)this + 22);
  v16 = *((double *)this + 23);
  v81.f64[0] = v17;
  v81.f64[1] = v16;
  if (v17 < 0.0)
  {
    v80.f64[0] = v17 + v15;
    v81.f64[0] = -v17;
  }
  if (v16 < 0.0)
  {
    v80.f64[1] = v16 + v14;
    v81.f64[1] = -v16;
  }
  v18 = *((_DWORD *)this + 25);
  f64 = a2[2].f64;
  v20 = *((char *)this + 112);
  v21 = *((float *)this + 29);
  Width = CGImageGetWidth(v13);
  Height = CGImageGetHeight(v13);
  memset(v82, 0, sizeof(v82));
  CA::CG::ImageFilter::ImageFilter((uint64_t)v82, Width, Height, v80.f64, a2 + 2, v20);
  v24 = 0;
  if ((v18 & 1) != 0 && a3)
  {
    if ((LOBYTE(a2[8].f64[1]) & 2) != 0)
    {
      if (fabs(a2[2].f64[1]) >= 0.000001 || fabs(a2[3].f64[0]) >= 0.000001)
        v25 = fabs(*f64) < 0.000001 && fabs(a2[3].f64[1]) < 0.000001;
      else
        v25 = 1;
      v24 = !v25;
    }
    else
    {
      v24 = 1;
    }
  }
  v26 = *(_QWORD *)&a2->f64[1];
  v27 = *(double *)(v26 + 224);
  CachingFlags = CGImageGetCachingFlags();
  v29 = 0.1;
  if (CachingFlags != 1)
    v29 = 1.0;
  result = (uint64_t)CA::Render::copy_image(v13, *(CGImage **)(v26 + 144), (CGColorSpace *)(v18 & 2 | 0x8Cu), v29 + v27, 1.0);
  if (result)
  {
    v31 = result;
    v32 = *(float *)(result + 56) <= 1.0 && CGColorSpaceUsesExtendedRange(*(CGColorSpaceRef *)(result + 48));
    v33 = CGColorSpaceUsesITUR_2100TF(*(CGColorSpaceRef *)(v31 + 48));
    v34 = v21 > 1.0 || v32;
    v35 = 0;
    v78 = v33 | v34;
    if ((v33 | v34) == 1)
    {
      v36 = v33;
      v37 = CA::OGL::Context::color_program_cache((CA::OGL::Context *)v26);
      v38 = v37;
      if (v37)
      {
        v76 = *((_BYTE *)v37 + 64) != 0;
        v77 = *((_BYTE *)v37 + 65) != 0;
        v35 = *((_QWORD *)v37 + 6);
        v39 = *(_DWORD *)(v31 + 56);
        *((float *)v37 + 12) = v21;
        *((_DWORD *)v37 + 13) = v39;
        if (v36)
        {
          *((_BYTE *)v37 + 64) = 1;
        }
        else if (v32)
        {
          *((_BYTE *)v37 + 65) = 0;
        }
        goto LABEL_37;
      }
    }
    else
    {
      v38 = 0;
    }
    v76 = 0;
    v77 = 0;
LABEL_37:
    *(_DWORD *)(v31 + 12) &= ~0x80000u;
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v41 = (double *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x88uLL, 0x743898A5uLL);
    v43 = (uint64_t)v41;
    if (v41)
    {
      v44 = v12 / (double)Width;
      *((_DWORD *)v41 + 2) = 1;
      *((_DWORD *)v41 + 3) = 37;
      ++dword_1ECDC7CBC;
      *(_QWORD *)v41 = off_1E1598F18;
      v41[2] = v44;
      v41[3] = 0.0;
      v41[4] = 0.0;
      v41[5] = v9 / (double)Height;
      HIDWORD(v45) = v79.i32[1];
      *((int8x16_t *)v41 + 3) = v79;
      LODWORD(v45) = *(_DWORD *)(v31 + 16);
      LODWORD(v44) = *(_DWORD *)(v31 + 20);
      v46 = (double)v45;
      v47 = (double)*(unint64_t *)&v44;
      v41[8] = 0.0;
      v41[9] = 0.0;
      v41[10] = v46;
      v41[11] = v47;
      v41[12] = v46;
      v41[13] = v47;
      __asm { FMOV            V0.2D, #1.0 }
      *((_OWORD *)v41 + 7) = _Q0;
      v53 = (unsigned int *)(v31 + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 + 1, v53));
      v55 = v31;
      if (!v54)
      {
        v55 = 0;
        do
          v75 = __ldaxr(v53);
        while (__stlxr(v75 - 1, v53));
      }
      *((_QWORD *)v41 + 16) = v55;
      if (v41[2] == 1.0 && v41[3] == 0.0 && v41[4] == 0.0 && v41[5] == 1.0)
        *((_DWORD *)v41 + 3) |= 0x100u;
    }
    v56 = *(_QWORD *)(v26 + 16);
    _H0 = *(_WORD *)(v56 + 14);
    __asm { FCVT            S0, H0 }
    v60 = 1;
    if (_S0 == 1.0)
    {
      v59 = *((_QWORD *)v41 + 16);
      if (v59)
      {
        if ((*(_BYTE *)(v59 + 13) & 0x10) != 0 && v41[12] <= v41[10] && v41[13] <= v41[11])
          v60 = 0;
      }
    }
    if ((*(_BYTE *)(v56 + 481) & 1) != 0
      && ((v62 = *(unsigned __int8 *)(v56 + 480), v62 < 2)
       || v62 == 3 && ((v82[0] & 9) != 0 ? (v74 = v24) : (v74 = 0), ((v74 | v60) & 1) == 0)))
    {
      *(_BYTE *)(v56 + 481) &= ~1u;
      v61 = 1;
    }
    else
    {
      v61 = 0;
    }
    if ((*((_DWORD *)v41 + 3) & 0x300) == 0x100
      && (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v26 + 608))(v26, *((_QWORD *)v41 + 16), 1))
    {
      v63 = LODWORD(v82[0]) | 0x1000;
      if ((*(_DWORD *)(v26 + 416) & 2) != 0)
        v63 = (LODWORD(v82[0]) | 0x1000) ^ 0x800;
      v64 = (double *)(v63 | ((*(_BYTE *)(*(_QWORD *)(v26 + 16) + 481) & 1) << 8));
      v84[0] = 0uLL;
      v85 = 0uLL;
      result = (uint64_t)CA::OGL::Context::bind_image(v26, 0, *(uint32x2_t **)(v43 + 128), v64, BYTE4(v82[0]), BYTE5(v82[0]), 1, 0, *((float *)v82 + 2), (float32x4_t *)v84, 0);
      if (result)
      {
        v65 = result;
        CA::OGL::pattern_texcoords((float64x2_t *)v43, (float *)v84, (uint64_t)&v85, v80, v81, (float64x2_t)0);
        memset(v83, 0, 200);
        CA::Transform::set_affine((CA::Transform *)v83, a2[2].f64[0], a2[2].f64[1], a2[3].f64[0], a2[3].f64[1], a2[4].f64[0], a2[4].f64[1]);
        *((_QWORD *)&v83[9] + 1) = &v80;
        *(_QWORD *)&v83[10] = v83;
        memset((char *)&v83[10] + 12, 0, 28);
        DWORD2(v83[10]) = (_DWORD)v64;
        CA::OGL::fill_rect_tex((CA::OGL::Context *)v26, (uint64_t)&v83[9] + 8, (uint64_t)&v85, v66);
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v26 + 520))(v26, v65, 0);
      }
    }
    else
    {
      v84[0] = v80;
      v84[1] = v81;
      CA::Mat2Impl::mat2_apply_to_rect((uint64_t)&a2[2], v84[0].f64, v42);
      v85 = 0uLL;
      CA::Transform::set_affine((CA::Transform *)v83, a2[2].f64[0], a2[2].f64[1], a2[3].f64[0], a2[3].f64[1], a2[4].f64[0], a2[4].f64[1]);
      result = CA::OGL::fill_pattern_rect(v26, v43, (uint64_t)&v80, &v85, (uint64_t)v83, v84, BYTE4(v82[0]), BYTE5(v82[0]), *((float *)v82 + 2), 0, 0);
    }
    if (v61)
      *(_BYTE *)(*(_QWORD *)(v26 + 16) + 481) |= 1u;
    v67 = v78 ^ 1;
    if (!v38)
      v67 = 1;
    if ((v67 & 1) == 0)
    {
      *((_BYTE *)v38 + 65) = v77;
      *((_BYTE *)v38 + 64) = v76;
      *((_QWORD *)v38 + 6) = v35;
    }
    v68 = (unsigned int *)(v43 + 8);
    do
    {
      v69 = __ldaxr(v68);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, v68));
    if (!v70)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
    v71 = (unsigned int *)(v31 + 8);
    do
    {
      v72 = __ldaxr(v71);
      v73 = v72 - 1;
    }
    while (__stlxr(v73, v71));
    if (!v73)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
  }
  return result;
}

uint64_t CAGetCachedCGIOSurfaceContext(uint64_t a1, int a2, uint64_t a3)
{
  void *v5;
  malloc_zone_t *malloc_zone;
  uint64_t v7;
  CA::CG::ContextDelegate *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  CA::CG::AccelQueue *v14;
  uint64_t result;
  unsigned int v16;
  __IOSurface *v18;
  kern_return_t v19;
  __IOSurface *v20;
  void *BaseAddress;
  __IOSurface *v22;
  size_t BytesPerRow;
  _BYTE *v24;
  _BYTE *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  const void *v30;
  __IOSurface *v31;

  if (a2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&context_lock);
    v5 = (void *)context_list;
    if (context_list)
    {
      while (*((_BYTE *)v5 + 64) || *((_DWORD *)v5 + 2) != 1)
      {
        v5 = *(void **)v5;
        if (!v5)
          goto LABEL_6;
      }
      *((_BYTE *)v5 + 64) = 1;
    }
    else
    {
LABEL_6:
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v5 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x48uLL, 0x743898A5uLL);
      *((_DWORD *)v5 + 2) = 1;
      v7 = operator new();
      *(_OWORD *)v7 = 0u;
      *(_OWORD *)(v7 + 16) = 0u;
      *(_OWORD *)(v7 + 32) = 0u;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_OWORD *)(v7 + 64) = 0u;
      *(_OWORD *)(v7 + 80) = 0u;
      *(_OWORD *)(v7 + 96) = 0u;
      *(_OWORD *)(v7 + 112) = 0u;
      *(_OWORD *)(v7 + 128) = 0u;
      *(_OWORD *)(v7 + 144) = 0u;
      *(_OWORD *)(v7 + 160) = 0u;
      *(_OWORD *)(v7 + 176) = 0u;
      *(_OWORD *)(v7 + 192) = 0u;
      *(_OWORD *)(v7 + 208) = 0u;
      *(_OWORD *)(v7 + 224) = 0u;
      *(_OWORD *)(v7 + 240) = 0u;
      *(_OWORD *)(v7 + 256) = 0u;
      *(_OWORD *)(v7 + 272) = 0u;
      *(_OWORD *)(v7 + 288) = 0u;
      *(_OWORD *)(v7 + 304) = 0u;
      *(_OWORD *)(v7 + 320) = 0u;
      *(_QWORD *)(v7 + 336) = 0;
      v8 = CA::CG::ContextDelegate::ContextDelegate((CA::CG::ContextDelegate *)v7);
      *((_QWORD *)v8 + 42) = 0;
      *(_QWORD *)v8 = &off_1E1593368;
      *((_QWORD *)v5 + 7) = v8;
      *((_QWORD *)v5 + 2) = CGContextCreateWithDelegate();
      *((_BYTE *)v5 + 64) = 1;
      *(_QWORD *)v5 = context_list;
      context_list = (uint64_t)v5;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&context_lock);
    v9 = (unsigned int *)(a1 + 8);
    while (1)
    {
      v10 = *v9;
      if (!*v9)
        break;
      while (1)
      {
        v11 = __ldaxr(v9);
        if (v11 != v10)
          break;
        if (!__stlxr(v10 + 1, v9))
        {
          v12 = a1;
          goto LABEL_13;
        }
      }
      __clrex();
    }
    v12 = 0;
LABEL_13:
    *((_QWORD *)v5 + 5) = v12;
    CA::CG::AccelContextDelegate<CA::CG::IOSurfaceDrawable>::set_drawable(*((CGColorSpace **)v5 + 7), a1);
    v13 = (_QWORD *)*((_QWORD *)v5 + 5);
    v14 = (CA::CG::AccelQueue *)v13[9];
    if (v14
      || (v14 = (CA::CG::AccelQueue *)(*(uint64_t (**)(_QWORD))(*v13 + 72))(*((_QWORD *)v5 + 5)),
          (v13[9] = v14) != 0))
    {
      *((_QWORD *)v14 + 25) = a3;
      CA::CG::AccelQueue::set_label(v14, CFSTR("com.apple.coreanimation.CGIOSurfaceContext"));
    }
    return *((_QWORD *)v5 + 2);
  }
  v16 = *(_DWORD *)(a1 + 16);
  if (v16 <= 0x23 && ((0x1FFFFFF2FuLL >> v16) & 1) == 0)
    return 0;
  v18 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v19 = IOSurfaceLock(v18, 0, 0);
  result = 0;
  if (v19)
    return result;
  v20 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  BaseAddress = IOSurfaceGetBaseAddress(v20);
  v22 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  BytesPerRow = IOSurfaceGetBytesPerRow(v22);
  v24 = CAGetCachedCGBitmapContext_(BaseAddress, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 16), BytesPerRow, *(CGColorSpaceRef *)(a1 + 24));
  if (!v24)
  {
    v31 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    IOSurfaceUnlock(v31, 0, 0);
    return 0;
  }
  v25 = v24;
  v26 = (unsigned int *)(a1 + 8);
  while (1)
  {
    v27 = *v26;
    if (!*v26)
      break;
    while (1)
    {
      v28 = __ldaxr(v26);
      if (v28 != v27)
        break;
      if (!__stlxr(v27 + 1, v26))
      {
        v29 = a1;
        goto LABEL_30;
      }
    }
    __clrex();
  }
  v29 = 0;
LABEL_30:
  *((_QWORD *)v24 + 5) = v29;
  v30 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *((_QWORD *)v25 + 6) = v30;
  CFRetain(v30);
  return *((_QWORD *)v25 + 2);
}

BOOL CAIOSurfaceIsAcceleratable(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;

  result = 0;
  if (a2)
  {
    if (a3)
    {
      result = 0;
      if (a4 <= 0x23 && ((1 << a4) & 0xA0006660ALL) != 0)
      {
        if (gpu_access_once != -1)
          dispatch_once_f(&gpu_access_once, 0, (dispatch_function_t)init_gpu_access);
        if (gpu_access_override == 1)
        {
          if (!gpu_access_allowed)
            return 0;
        }
        else if ((CAIsAppSuspended() & 1) != 0)
        {
          return 0;
        }
        if (a2 <= 0x800 && a3 < 0x801)
          return 1;
        if ((a3 | a2) >> 13)
          return 0;
        result = 0;
        {
          if (a1)
          {
            os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
            v8 = CA::CG::AccelRenderer::_list;
            if (CA::CG::AccelRenderer::_list)
            {
              while (1)
              {
                if (!*(_DWORD *)(v8 + 4232) && *(_QWORD *)(v8 + 144) == a1)
                {
                  v9 = *(_QWORD *)(v8 + 4248);
                  if (v9)
                    break;
                }
                v8 = *(_QWORD *)(v8 + 4272);
                if (!v8)
                  goto LABEL_25;
              }
            }
            else
            {
LABEL_25:
              LODWORD(v9) = 0;
            }
            os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
          }
          else
          {
            LODWORD(v9) = 0;
          }
          if (a2 <= a3)
            v10 = a3;
          else
            v10 = a2;
          if ((_DWORD)v9)
            v11 = v10 > v9;
          else
            v11 = 0;
          return !v11;
        }
      }
    }
  }
  return result;
}

void CA_CGContextAddUnevenRoundRect(CGContext *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v8;
  const CGPath *v9;

  if (!CGRectIsNull(*(CGRect *)&a3))
  {
    v8 = 0;
    while ((*(_QWORD *)(a2 + v8) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
         && (*(_QWORD *)(a2 + v8 + 8) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      v8 += 16;
      if (v8 == 64)
      {
        v9 = (const CGPath *)CGPathCreateWithUnevenCornersRoundedRect();
        CGContextAddPath(a1, v9);
        CGPathRelease(v9);
        return;
      }
    }
  }
}

CGColorRef CA_CGPatternColorCreate(CGPattern *a1)
{
  CGColorSpace *Pattern;
  CGColorSpace *v3;
  CGColorRef v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  if (CGPatternIsColored())
  {
    Pattern = CGColorSpaceCreatePattern(0);
    *(_QWORD *)&v11 = 0x3FF0000000000000;
  }
  else
  {
    v3 = (CGColorSpace *)CAGetColorSpace(0x1Du);
    Pattern = CGColorSpaceCreatePattern(v3);
    __asm { FMOV            V0.2D, #1.0 }
    v11 = _Q0;
    v12 = _Q0;
  }
  v9 = CGColorCreateWithPattern(Pattern, a1, (const CGFloat *)&v11);
  CGColorSpaceRelease(Pattern);
  return v9;
}

uint64_t colorspace_has_srgb_gamma(CGColorSpace *a1)
{
  uint64_t i;
  uint64_t ConversionCurve;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  os_unfair_lock_lock((os_unfair_lock_t)&colorspace_has_srgb_gamma(CGColorSpace *)::lock);
  if (!colorspace_has_srgb_gamma(CGColorSpace *)::src_curve)
  {
    CAGetColorSpace(3u);
    colorspace_has_srgb_gamma(CGColorSpace *)::src_curve = CGColorSpaceCreateConversionCurve();
  }
  for (i = 0; i != 4; ++i)
  {
    if (*(CGColorSpace **)&colorspace_has_srgb_gamma(CGColorSpace *)::cache[i] == a1)
    {
      v4 = BYTE8(colorspace_has_srgb_gamma(CGColorSpace *)::cache[i]) != 0;
      goto LABEL_10;
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&colorspace_has_srgb_gamma(CGColorSpace *)::lock);
  ConversionCurve = CGColorSpaceCreateConversionCurve();
  v4 = CGColorCurveEqualToGammaCurve();
  if (ConversionCurve)
    CGColorCurveRelease();
  os_unfair_lock_lock((os_unfair_lock_t)&colorspace_has_srgb_gamma(CGColorSpace *)::lock);
  CGColorSpaceRelease((CGColorSpaceRef)xmmword_1EDD126E8);
  v5 = xmmword_1EDD126C8;
  v6 = xmmword_1EDD126D8;
  xmmword_1EDD126C8 = colorspace_has_srgb_gamma(CGColorSpace *)::cache[0];
  xmmword_1EDD126D8 = v5;
  xmmword_1EDD126E8 = v6;
  *(_QWORD *)&colorspace_has_srgb_gamma(CGColorSpace *)::cache[0] = CGColorSpaceRetain(a1);
  BYTE8(colorspace_has_srgb_gamma(CGColorSpace *)::cache[0]) = v4;
LABEL_10:
  os_unfair_lock_unlock((os_unfair_lock_t)&colorspace_has_srgb_gamma(CGColorSpace *)::lock);
  return v4;
}

_BYTE *get_colorspace_map(_BYTE *result)
{
  unsigned __int8 v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;

  if ((v1 & 1) == 0)
  {
    v16 = result;
    result = v16;
    if (v2)
    {
      v3 = *MEMORY[0x1E0C9D908];
      get_colorspace_map(unsigned char *)::space_names = 0;
      *(_QWORD *)algn_1EDD14AA8 = v3;
      v4 = *MEMORY[0x1E0C9D940];
      qword_1EDD14AB0 = *MEMORY[0x1E0C9D910];
      unk_1EDD14AB8 = v4;
      v5 = *MEMORY[0x1E0C9D960];
      qword_1EDD14AC0 = *MEMORY[0x1E0C9DA10];
      unk_1EDD14AC8 = v5;
      v6 = *MEMORY[0x1E0C9D978];
      qword_1EDD14AD0 = *MEMORY[0x1E0C9D958];
      unk_1EDD14AD8 = v6;
      v7 = *MEMORY[0x1E0C9D930];
      qword_1EDD14AE0 = *MEMORY[0x1E0C9D9F0];
      unk_1EDD14AE8 = v7;
      v8 = *MEMORY[0x1E0C9D990];
      qword_1EDD14AF0 = *MEMORY[0x1E0C9D948];
      unk_1EDD14AF8 = v8;
      v9 = *MEMORY[0x1E0C9D998];
      qword_1EDD14B00 = *MEMORY[0x1E0C9D968];
      unk_1EDD14B08 = v9;
      v10 = *MEMORY[0x1E0C9D8F0];
      qword_1EDD14B10 = *MEMORY[0x1E0C9D980];
      unk_1EDD14B18 = v10;
      v11 = *MEMORY[0x1E0C9D900];
      qword_1EDD14B20 = *MEMORY[0x1E0C9D8F8];
      unk_1EDD14B28 = v11;
      v12 = *MEMORY[0x1E0C9DA08];
      qword_1EDD14B30 = *MEMORY[0x1E0C9D9D0];
      unk_1EDD14B38 = v12;
      v13 = *MEMORY[0x1E0C9D950];
      qword_1EDD14B40 = *MEMORY[0x1E0C9D9A0];
      unk_1EDD14B48 = v13;
      v14 = *MEMORY[0x1E0C9D970];
      qword_1EDD14B50 = *MEMORY[0x1E0C9D988];
      unk_1EDD14B58 = v14;
      v15 = *MEMORY[0x1E0C9D9C8];
      qword_1EDD14B60 = *MEMORY[0x1E0C9D918];
      unk_1EDD14B68 = v15;
      qword_1EDD14B70 = *MEMORY[0x1E0C9D9E0];
      result = v16;
    }
  }
  *result = 27;
  return result;
}

CGImage *CA_CGImageIsA8(CGImage *result)
{
  CGImage *v1;

  if (result)
  {
    v1 = result;
    return (CGImage *)(CGImageGetBitsPerPixel(result) == 8 && (CGImageIsMask(v1) || !CGImageGetColorSpace(v1)));
  }
  return result;
}

CGImageRef CA_copyA8CGImageAsL8(CGImage *a1)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  CGColorSpace *v5;
  CGDataProvider *DataProvider;

  Width = CGImageGetWidth(a1);
  Height = CGImageGetHeight(a1);
  BytesPerRow = CGImageGetBytesPerRow(a1);
  v5 = (CGColorSpace *)CAGetColorSpace(3u);
  DataProvider = CGImageGetDataProvider(a1);
  return CGImageCreate(Width, Height, 8uLL, 8uLL, BytesPerRow, v5, 0, DataProvider, 0, 0, kCGRenderingIntentDefault);
}

CGImageRef CA_copyL8CGImageAsA8(CGImage *a1)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  CGDataProvider *DataProvider;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = xmmword_18474DF40;
  Width = CGImageGetWidth(a1);
  Height = CGImageGetHeight(a1);
  BytesPerRow = CGImageGetBytesPerRow(a1);
  DataProvider = CGImageGetDataProvider(a1);
  return CGImageMaskCreate(Width, Height, 8uLL, 8uLL, BytesPerRow, DataProvider, (const CGFloat *)&v7, 0);
}

CFStringRef CACreateStringWithFloatArray(uint64_t a1, unint64_t a2, double a3)
{
  size_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  float v11;
  float v12;
  int v14;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v6 = 32 * a2;
  MEMORY[0x1E0C80A78](a1);
  v8 = &v16[-4 * v7];
  bzero(v8, v6);
  v9 = 0;
  v10 = (char *)v8;
  while (1)
  {
    if (v9)
    {
      *v10++ = 32;
      --v6;
    }
    v11 = *(float *)(a1 + 4 * v9);
    v12 = truncf(v11);
    if (fabsf(v11) <= 9.2234e18 && v11 == v12)
    {
      v14 = snprintf_l(v10, v6, 0, "%ld", (uint64_t)v11);
      if (v6 < v14)
        return 0;
      v10 += v14;
    }
    else
    {
      v10 = x_dtostr_(v10, v6, 1, v11, a3);
    }
    if (!v10)
      break;
    if (v6 >= 2 && ++v9 < a2)
      continue;
    return CFStringCreateWithBytes(0, (const UInt8 *)v8, v10 - (char *)v8, 0x8000100u, 0);
  }
  return 0;
}

CFStringRef CACreateStringWithDoubleArray(uint64_t a1, unint64_t a2, double a3)
{
  size_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  double v11;
  double v12;
  int v14;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v6 = 32 * a2;
  MEMORY[0x1E0C80A78](a1);
  v8 = &v16[-4 * v7];
  bzero(v8, v6);
  v9 = (char *)v8;
  if (!v6)
    return CFStringCreateWithBytes(0, (const UInt8 *)v8, v9 - (char *)v8, 0x8000100u, 0);
  v9 = (char *)v8;
  if (!a2)
    return CFStringCreateWithBytes(0, (const UInt8 *)v8, v9 - (char *)v8, 0x8000100u, 0);
  v10 = 0;
  v9 = (char *)v8;
  while (1)
  {
    if (v10)
    {
      *v9++ = 32;
      --v6;
    }
    v11 = *(double *)(a1 + 8 * v10);
    v12 = trunc(v11);
    if (fabs(v11) <= 9.22337204e18 && v11 == v12)
    {
      v14 = snprintf_l(v9, v6, 0, "%ld", (uint64_t)v11);
      if (v6 < v14)
        return 0;
      v9 += v14;
    }
    else
    {
      v9 = x_dtostr_(v9, v6, 1, v11, a3);
    }
    if (!v9)
      break;
    if (v6 >= 2 && ++v10 < a2)
      continue;
    return CFStringCreateWithBytes(0, (const UInt8 *)v8, v9 - (char *)v8, 0x8000100u, 0);
  }
  return 0;
}

uint64_t copy_image_block_set(__IOSurface *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  vImagePixelCount Width;
  vImagePixelCount Height;
  signed int PixelFormat;
  int ComponentType;
  size_t BytesPerRowOfPlane;
  void *BaseAddressOfPlane;
  int v11;
  BOOL v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  void *v20;
  __IOSurface *v21;
  void *v22;
  size_t v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  NSObject *v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  vImage_Buffer dest;
  uint8_t permuteMap[4];
  vImage_Buffer src;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 0;
  Width = IOSurfaceGetWidth(a1);
  Height = IOSurfaceGetHeight(a1);
  PixelFormat = IOSurfaceGetPixelFormat(a1);
  ComponentType = CGImageProviderGetComponentType();
  BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = IOSurfaceGetBaseAddressOfPlane(a1, 0);
  if (PixelFormat > 1380401728)
  {
    if (PixelFormat == 1380401729)
    {
LABEL_9:
      IOSurfaceLock(a1, 1u, 0);
      CFRetain(a1);
LABEL_10:
      src.data = (void *)CGImageBlockCreate();
      return CGImageBlockSetCreate();
    }
    v11 = 1380411457;
  }
  else
  {
    if (PixelFormat == 1111970369)
    {
      IOSurfaceLock(a1, 1u, 0);
      src.data = BaseAddressOfPlane;
      src.height = Height;
      src.width = Width;
      src.rowBytes = BytesPerRowOfPlane;
      dest.data = malloc_type_malloc(BytesPerRowOfPlane * Height, 0x29522EDDuLL);
      dest.height = Height;
      dest.width = Width;
      dest.rowBytes = BytesPerRowOfPlane;
      *(_DWORD *)permuteMap = 50331906;
      vImagePermuteChannels_ARGB8888(&src, &dest, permuteMap, 0);
      CGImageBlockCreate();
      v3 = CGImageBlockSetCreate();
      IOSurfaceUnlock(a1, 1u, 0);
      return v3;
    }
    v11 = 1279340600;
  }
  if (PixelFormat == v11)
    goto LABEL_9;
  v13 = PixelFormat == 1999843442 || PixelFormat == 1647534392;
  v14 = v13;
  if (v13 && ComponentType == 1)
  {
    v15 = qword_1ECDC4CD8 - 1 + 4 * Width;
    v16 = v15 / qword_1ECDC4CD8 * qword_1ECDC4CD8;
    v17 = v15 & -qword_1ECDC4CD8;
    if ((qword_1ECDC4CD8 & (qword_1ECDC4CD8 - 1)) != 0)
      v18 = v16;
    else
      v18 = v17;
    v19 = malloc_type_calloc(v18, Height, 0x7794F4E7uLL);
    if (!v19)
      return 0;
    v20 = v19;
    v21 = a1;
    v22 = v20;
    v23 = v18;
    v24 = 0;
  }
  else
  {
    if (ComponentType != 5)
      v14 = 0;
    if (v14 != 1)
    {
      if (x_log_hook_p())
      {
        if (PixelFormat < 0)
          __maskrune(HIBYTE(PixelFormat), 0x40000uLL);
        if (BYTE2(PixelFormat) > 0x7Fu)
          __maskrune(BYTE2(PixelFormat), 0x40000uLL);
        if (BYTE1(PixelFormat) > 0x7Fu)
          __maskrune(BYTE1(PixelFormat), 0x40000uLL);
        if (PixelFormat > 0x7Fu)
          __maskrune(PixelFormat, 0x40000uLL);
        x_log_();
      }
      else
      {
        v30 = x_log_category_utilities;
        if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
        {
          v31 = HIBYTE(PixelFormat);
          v32 = MEMORY[0x1E0C80978];
          if (PixelFormat < 0)
            v33 = __maskrune(v31, 0x40000uLL);
          else
            v33 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v31 + 60) & 0x40000;
          if (v33)
            v34 = PixelFormat >> 24;
          else
            v34 = 32;
          if (BYTE2(PixelFormat) <= 0x7Fu)
            v35 = *(_DWORD *)(v32 + 4 * BYTE2(PixelFormat) + 60) & 0x40000;
          else
            v35 = __maskrune(BYTE2(PixelFormat), 0x40000uLL);
          if (v35)
            v36 = SBYTE2(PixelFormat);
          else
            v36 = 32;
          if (BYTE1(PixelFormat) <= 0x7Fu)
            v37 = *(_DWORD *)(v32 + 4 * BYTE1(PixelFormat) + 60) & 0x40000;
          else
            v37 = __maskrune(BYTE1(PixelFormat), 0x40000uLL);
          if (v37)
            v38 = SBYTE1(PixelFormat);
          else
            v38 = 32;
          if (PixelFormat <= 0x7Fu)
            v39 = *(_DWORD *)(v32 + 4 * PixelFormat + 60) & 0x40000;
          else
            v39 = __maskrune(PixelFormat, 0x40000uLL);
          src.data = (void *)__PAIR64__(v34, 67109888);
          v40 = (char)PixelFormat;
          LOWORD(src.height) = 1024;
          if (!v39)
            v40 = 32;
          *(_DWORD *)((char *)&src.height + 2) = v36;
          HIWORD(src.height) = 1024;
          LODWORD(src.width) = v38;
          WORD2(src.width) = 1024;
          *(_DWORD *)((char *)&src.width + 6) = v40;
          _os_log_impl(&dword_184457000, v30, OS_LOG_TYPE_ERROR, "unsupported surface format: %c%c%c%c\n", (uint8_t *)&src, 0x1Au);
        }
      }
      return 0;
    }
    v25 = qword_1ECDC4CD8 - 1 + 8 * Width;
    v26 = v25 / qword_1ECDC4CD8 * qword_1ECDC4CD8;
    v27 = v25 & -qword_1ECDC4CD8;
    if ((qword_1ECDC4CD8 & (qword_1ECDC4CD8 - 1)) != 0)
      v28 = v26;
    else
      v28 = v27;
    v29 = malloc_type_calloc(v28, Height, 0xE9AA9C68uLL);
    if (!v29)
      return 0;
    v20 = v29;
    v21 = a1;
    v22 = v20;
    v23 = v28;
    v24 = 1;
  }
  if (convert_CIF10(v21, v22, v23, v24))
    goto LABEL_10;
  free(v20);
  return 0;
}

BOOL convert_CIF10(__IOSurface *a1, void *a2, size_t a3, BOOL a4)
{
  OSType PixelFormat;
  int v10;
  vImagePixelCount Width;
  vImagePixelCount Height;
  size_t BytesPerRow;
  size_t BytesPerRowOfPlane;
  unsigned __int8 *BaseAddress;
  unsigned __int8 *BaseAddressOfPlane;
  _BOOL8 v17;

  if (IOSurfaceLock(a1, 1u, 0))
    return 0;
  PixelFormat = IOSurfaceGetPixelFormat(a1);
  v10 = PixelFormat;
  if (PixelFormat == 1999843442)
  {
    Width = IOSurfaceGetWidth(a1);
    Height = IOSurfaceGetHeight(a1);
    BytesPerRow = IOSurfaceGetBytesPerRow(a1);
    BaseAddress = (unsigned __int8 *)IOSurfaceGetBaseAddress(a1);
    BytesPerRowOfPlane = 0;
LABEL_8:
    BaseAddressOfPlane = 0;
    goto LABEL_9;
  }
  if (PixelFormat != 1647534392)
  {
    Width = 0;
    Height = 0;
    BytesPerRow = 0;
    BytesPerRowOfPlane = 0;
    BaseAddress = 0;
    goto LABEL_8;
  }
  Width = IOSurfaceGetWidthOfPlane(a1, 0);
  Height = IOSurfaceGetHeightOfPlane(a1, 0);
  BytesPerRow = IOSurfaceGetBytesPerRowOfPlane(a1, 0);
  BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(a1, 1uLL);
  BaseAddress = (unsigned __int8 *)IOSurfaceGetBaseAddressOfPlane(a1, 0);
  BaseAddressOfPlane = (unsigned __int8 *)IOSurfaceGetBaseAddressOfPlane(a1, 1uLL);
LABEL_9:
  v17 = convert_CIF10(Width, Height, BytesPerRow, BytesPerRowOfPlane, BaseAddress, BaseAddressOfPlane, v10, a2, a3, a4);
  IOSurfaceUnlock(a1, 1u, 0);
  return v17;
}

BOOL convert_CIF10(vImagePixelCount a1, vImagePixelCount a2, size_t a3, uint64_t a4, unsigned __int8 *a5, unsigned __int8 *a6, int a7, void *a8, size_t a9, BOOL a10)
{
  BOOL v10;
  uint64_t v11;
  vImage_Buffer v13;
  unsigned __int8 *v14;
  vImagePixelCount v15;
  vImagePixelCount v16;
  uint64_t v17;
  vImage_Buffer src;
  uint8_t permuteMap[4];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  src.data = a5;
  src.height = a2;
  src.width = a1;
  src.rowBytes = a3;
  v14 = a6;
  v15 = a2;
  v16 = a1;
  v17 = a4;
  v13.data = a8;
  v13.height = a2;
  v13.width = a1;
  v13.rowBytes = a9;
  v10 = !a10;
  *(_DWORD *)permuteMap = 197121;
  if (a7 != 1999843442 || !a10)
  {
    if (a7 != 1647534392)
      v10 = 1;
    if (v10)
    {
      if (a7 != 1999843442 || a10)
      {
        v11 = 0;
        if (a7 == 1647534392 && !a10)
          v11 = vImageConvert_XRGB2101010_A8ToARGB8888();
      }
      else
      {
        v11 = vImageConvert_XRGB2101010ToARGB8888(&src, 0xFFu, &v13, 384, 894, permuteMap, 0);
      }
    }
    else
    {
      v11 = vImageConvert_XRGB2101010_A8ToARGB16F();
    }
  }
  else
  {
    v11 = vImageConvert_XRGB2101010ToARGB16F(&src, 1.0, &v13, 384, 894, permuteMap, 0x800u);
  }
  return v11 == 0;
}

void release_surface_block(__IOSurface *a1)
{
  IOSurfaceUnlock(a1, 1u, 0);
  CFRelease(a1);
}

uint64_t copy_image_block_set_metal(void *a1)
{
  unsigned int v2;
  unsigned int v3;
  size_t BytesPerRow;
  int PixelFormat;
  int ComponentType;
  uint64_t v7;
  CA::Render *v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  size_t v21;
  BOOL v22;
  unint64_t v23;
  size_t v24;
  void *v25;
  vImage_Buffer dest;
  vImage_Buffer src;
  void *v28;
  CA::Render *v29;
  uint8_t permuteMap[4];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(a1, "width");
  v3 = objc_msgSend(a1, "height");
  BytesPerRow = CAMetalTextureGetBytesPerRow(a1);
  PixelFormat = CAMetalTextureGetPixelFormat(a1);
  ComponentType = CGImageProviderGetComponentType();
  v28 = 0;
  v29 = 0;
  CAMetalTextureGetBytes(a1, &v29, (unint64_t *)&v28);
  v7 = 0;
  v8 = v29;
  if (v29 && BytesPerRow)
  {
    if (PixelFormat == 1380411457 || PixelFormat == 1380401729)
    {
      v10 = malloc_type_malloc(0x18uLL, 0xC004023DE3DC6uLL);
      v11 = v28;
      *v10 = v8;
      v10[1] = v11;
      v10[2] = CFRetain(a1);
      goto LABEL_8;
    }
    if (PixelFormat == 1111970369)
    {
      src.data = v29;
      src.height = v3;
      src.width = v2;
      src.rowBytes = BytesPerRow;
      dest.data = malloc_type_malloc(BytesPerRow * v3, 0x5CE40DA6uLL);
      dest.height = v3;
      dest.width = v2;
      dest.rowBytes = BytesPerRow;
      *(_DWORD *)permuteMap = 50331906;
      vImagePermuteChannels_ARGB8888(&src, &dest, permuteMap, 0);
      CGImageBlockCreate();
      v7 = CGImageBlockSetCreate();
      CA::Render::aligned_free(v8, (size_t)v28, v9);
      return v7;
    }
    if (PixelFormat == 1999843442 && ComponentType == 1)
    {
      v13 = qword_1ECDC4CD8 - 1 + 4 * v2;
      v14 = v13 / qword_1ECDC4CD8 * qword_1ECDC4CD8;
      v15 = v13 & -qword_1ECDC4CD8;
      if ((qword_1ECDC4CD8 & (qword_1ECDC4CD8 - 1)) != 0)
        v16 = v14;
      else
        v16 = v15;
      v17 = malloc_type_calloc(v16, v3, 0xD08ADF35uLL);
      if (!v17)
        return 0;
      v18 = v17;
      v19 = a1;
      v20 = v18;
      v21 = v16;
      v22 = 0;
LABEL_28:
      if (!convert_CIF10(v19, v20, v21, v22))
      {
        free(v18);
        return 0;
      }
LABEL_8:
      src.data = (void *)CGImageBlockCreate();
      return CGImageBlockSetCreate();
    }
    v7 = 0;
    if (PixelFormat == 1999843442 && ComponentType == 5)
    {
      v23 = qword_1ECDC4CD8 - 1 + 8 * v2;
      if ((qword_1ECDC4CD8 & (qword_1ECDC4CD8 - 1)) != 0)
        v24 = v23 / qword_1ECDC4CD8 * qword_1ECDC4CD8;
      else
        v24 = v23 & -qword_1ECDC4CD8;
      v25 = malloc_type_calloc(v24, v3, 0x8F8D1323uLL);
      if (!v25)
        return 0;
      v18 = v25;
      v19 = a1;
      v20 = v18;
      v21 = v24;
      v22 = 1;
      goto LABEL_28;
    }
  }
  return v7;
}

uint64_t $_1::__invoke()
{
  return 0;
}

BOOL convert_CIF10(void *a1, void *a2, size_t a3, BOOL a4)
{
  int PixelFormat;
  void *v9;
  unsigned __int8 *v10;
  BOOL v11;
  _BOOL8 v12;
  _BOOL8 result;
  vImagePixelCount v14;
  vImagePixelCount v15;
  size_t BytesPerRow;
  void *v17;
  CA::Render *v18[2];

  v18[1] = *(CA::Render **)MEMORY[0x1E0C80C00];
  v17 = 0;
  v18[0] = 0;
  CAMetalTextureGetBytes(a1, v18, (unint64_t *)&v17);
  PixelFormat = CAMetalTextureGetPixelFormat(a1);
  v10 = (unsigned __int8 *)v18[0];
  if (v18[0])
    v11 = PixelFormat == 1999843442;
  else
    v11 = 0;
  if (v11)
  {
    v14 = objc_msgSend(a1, "width");
    v15 = objc_msgSend(a1, "height");
    BytesPerRow = CAMetalTextureGetBytesPerRow(a1);
    v12 = convert_CIF10(v14, v15, BytesPerRow, 0, v10, 0, 1999843442, a2, a3, a4);
    goto LABEL_8;
  }
  v12 = 0;
  result = 0;
  if (v18[0])
  {
LABEL_8:
    CA::Render::aligned_free((CA::Render *)v10, (size_t)v17, v9);
    return v12;
  }
  return result;
}

void $_2::__invoke(uint64_t a1, uint64_t a2, void *a3)
{
  CA::Render::aligned_free(*(CA::Render **)a1, *(_QWORD *)(a1 + 8), a3);
  CFRelease(*(CFTypeRef *)(a1 + 16));
  free((void *)a1);
}

void CA::CG::DrawLines::~DrawLines(CA::CG::DrawLines *this)
{
  *(_QWORD *)this = off_1E1593BE8;
  if (*((_QWORD *)this + 16))
    CGDashRelease();
  CA::CG::DrawOp::~DrawOp(this);
}

{
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1593BE8;
  if (*((_QWORD *)this + 16))
    CGDashRelease();
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

double *CA::CG::DrawLines::compute_dod(CA::CG::DrawLines *this, float64x2_t *a2)
{
  int8x16_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  double v10;
  double v11;

  v4 = *((int8x16_t *)this + 10);
  v5 = *((_QWORD *)this + 19);
  if (v5 < 2)
  {
    v8 = *((int8x16_t *)this + 10);
  }
  else
  {
    v6 = v5 - 1;
    v7 = (int8x16_t *)((char *)this + 176);
    v8 = *((int8x16_t *)this + 10);
    do
    {
      v9 = *v7++;
      v8 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v9, (float64x2_t)v8), v8, v9);
      v4 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v4, (float64x2_t)v9), v4, v9);
      --v6;
    }
    while (v6);
  }
  *a2 = (float64x2_t)v8;
  a2[1] = vsubq_f64((float64x2_t)v4, (float64x2_t)v8);
  if ((*((_BYTE *)this + 100) & 4) == 0)
    CA::Rect::apply_transform(a2, (const CGAffineTransform *)((char *)this + 8));
  v10 = CA::CG::stroke_radius((uint64_t)this + 112, *(float64x2_t *)((char *)this + 8), *(float64x2_t *)((char *)this + 24));
  return CA::BoundsImpl::inset_point(a2->f64, -v10, -v11);
}

BOOL CA::CG::DrawLines::can_coalesce(CA::CG::DrawLines *this, const CA::CG::DrawLines *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  if (*((double *)this + 1) != *((double *)a2 + 1))
    return 0;
  if (*((double *)this + 2) != *((double *)a2 + 2))
    return 0;
  if (*((double *)this + 3) != *((double *)a2 + 3))
    return 0;
  if (*((double *)this + 4) != *((double *)a2 + 4))
    return 0;
  if (*((double *)this + 5) != *((double *)a2 + 5))
    return 0;
  if (*((double *)this + 6) != *((double *)a2 + 6))
    return 0;
  v4 = *((_DWORD *)this + 14);
  if (v4 != *((_DWORD *)a2 + 14)
    || *((_QWORD *)this + 8) != *((_QWORD *)a2 + 8)
    || *((_QWORD *)this + 9) != *((_QWORD *)a2 + 9)
    || *((_QWORD *)this + 11) != *((_QWORD *)a2 + 11))
  {
    return 0;
  }
  v5 = *((_QWORD *)this + 10);
  v6 = *((_QWORD *)a2 + 10);
  if (v5 && v6)
  {
    if (!CA::CG::DeviceColor::Pattern::operator==(v5, v6))
      return 0;
  }
  else if (v5 | v6)
  {
    return 0;
  }
  if (*((_DWORD *)this + 25) != *((_DWORD *)a2 + 25)
    || *((double *)this + 14) != *((double *)a2 + 14)
    || *((double *)this + 15) != *((double *)a2 + 15)
    || *((_QWORD *)this + 16) != *((_QWORD *)a2 + 16)
    || *((double *)this + 17) != *((double *)a2 + 17)
    || *((_DWORD *)this + 36) != *((_DWORD *)a2 + 36))
  {
    return 0;
  }
  return *((_DWORD *)this + 37) == *((_DWORD *)a2 + 37) && v4 != 0;
}

uint64_t CA::CG::DrawLines::debug_color(CA::CG::DrawLines *this)
{
  return 566542048;
}

uint64_t CA::CG::DrawLines::shape_type(CA::CG::DrawLines *this, CA::CG::Renderer *a2)
{
  return 0;
}

void CA::CG::DrawLines::draw_shape(CA::CG::DrawLines *this, CA::CG::Renderer *a2)
{
  int32x2_t *v4;
  int v5;
  uint64_t v6;
  double *v7;
  double v8;
  double v9;
  int v10;
  int v11;
  double v13;
  double v14;
  double v15;
  double v16;
  int v17;
  const double *v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x2_t *v21;
  int32x2_t *v22;
  int32x2_t v23;
  uint32x2_t v24;
  uint32x2_t v25;
  int32x2_t v26;
  uint32x2_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t v32;
  int32x4_t v33;
  const double *v38;
  int32x4_t v39;
  int v40;
  int64x2_t v41;
  double v42;
  int8x16_t v43;
  double v44;
  double *v45;
  double v46;
  double v47;
  double v48;
  unint64_t v49;
  double *v50;
  uint64_t v51;
  __n128 v52;
  int v53;
  int64x2_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int32x2_t v57;
  double *v58;
  int v59;
  double *v60;
  int32x2_t v61;
  int v62;
  double v64;
  double v65;
  double v66;
  _BOOL4 v67;
  double v68;
  double v69;
  double v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  float v74;
  float v75;
  unint64_t v76;
  double *v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  float64x2_t v81;
  int32x4_t v82;
  int8x16_t v83;
  float64x2_t v84;
  __int128 v85;
  __int128 v86;
  int8x16_t v87;
  int8x16_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  float32x4_t v101;
  unint64_t v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 16) && *((_DWORD *)this + 36))
  {
    *(_QWORD *)&v97 = 0;
    v87.i64[0] = 0;
    CGDashGetPattern();
  }
  v4 = (int32x2_t *)*((_QWORD *)a2 + 1);
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 4) != 0)
    v6 = 88;
  else
    v6 = 32;
  if ((v5 & 4) != 0)
    v7 = (double *)((char *)a2 + 88);
  else
    v7 = (double *)((char *)a2 + 32);
  v8 = *((double *)this + 14);
  v9 = *MEMORY[0x1E0C9DB10];
  if (v8 == *MEMORY[0x1E0C9DB10])
  {
    v10 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v4 + 184))(*((_QWORD *)a2 + 1), 10);
    v11 = *((_DWORD *)this + 25) & 1;
    if (v10)
      _ZF = v11 == 0;
    else
      _ZF = 0;
    if (!_ZF)
    {
      v13 = 1.0;
      goto LABEL_27;
    }
    v96 = 0;
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v87 = 0u;
    v15 = *(double *)((char *)a2 + v6);
    if (v15 == 1.0)
    {
      v28 = 1;
      while (v28 != 6)
      {
        v29 = v28;
        v30 = v7[v28];
        v31 = CA::Mat2Impl::mat2_identity_double[v28++];
        if (v30 != v31)
        {
          if ((unint64_t)(v29 - 1) <= 4)
            goto LABEL_19;
          break;
        }
      }
      v80 = 1;
    }
    else
    {
LABEL_19:
      CA::Transform::set_affine((CA::Transform *)&v87, v15, v7[1], v7[2], v7[3], v7[4], v7[5]);
      v80 = 0;
      v4[100] = (int32x2_t)&v87;
      ++v4[30].i32[0];
    }
    v86 = 0u;
    v104 = 0u;
    v32 = *(_QWORD *)(*(_QWORD *)&v4[29] + 8);
    v101.i64[0] = (uint64_t)v4;
    v101.i64[1] = v32;
    v103 = 0u;
    v102 = 0;
    WORD4(v103) = 0;
    CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v101);
    v33.i32[0] = 1073741822;
    v82 = v33;
    v83 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
    __asm { FMOV            V0.2D, #-1.0 }
    v81 = _Q0;
    while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v101, (int32x2_t *)&v86))
    {
      v39.i32[1] = 0;
      v39.i64[1] = 0;
      v84 = 0u;
      v85 = 0u;
      if (*((_QWORD *)this + 16))
      {
        if (SDWORD2(v86) <= SHIDWORD(v86))
          v40 = HIDWORD(v86);
        else
          v40 = DWORD2(v86);
        v39.i32[0] = v40;
        v41.i64[0] = (int)v86;
        v41.i64[1] = SDWORD1(v86);
        v42 = (double)SDWORD2(v86);
        v43 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v39, v82), 0), v83, (int8x16_t)vcvtq_f64_s64(v41));
        if (v40 > 1073741822)
          v42 = 1.79769313e308;
        v84 = (float64x2_t)v43;
        if (v40 <= 1073741822)
          v44 = (double)SHIDWORD(v86);
        else
          v44 = 1.79769313e308;
        *(double *)&v85 = v42;
        *((double *)&v85 + 1) = v44;
        v98 = 0u;
        v99 = 0u;
        v97 = 0u;
        CA::Mat2Impl::mat2_invert((CA::Mat2Impl *)&v97, v7, v38);
        CA::Mat2Impl::mat2_apply_to_rect((uint64_t)&v97, v84.f64, v45);
        if (*(double *)&v85 <= *((double *)&v85 + 1))
          v46 = *((double *)&v85 + 1);
        else
          v46 = *(double *)&v85;
        if (v46 < 1.79769313e308)
        {
          v47 = *(double *)&v85 >= *((double *)&v85 + 1) ? *((double *)&v85 + 1) : *(double *)&v85;
          if (v47 > 0.0)
          {
            v84 = vaddq_f64(v84, v81);
            v48 = *((double *)&v85 + 1) + 2.0;
            *(double *)&v85 = *(double *)&v85 + 2.0;
            *((double *)&v85 + 1) = *((double *)&v85 + 1) + 2.0;
            if (*(double *)&v85 <= 0.0 || v48 <= 0.0)
              v85 = 0uLL;
          }
        }
      }
      bzero(&v98, 0xC00uLL);
      *(_QWORD *)&v97 = &off_1E15919F0;
      *((_QWORD *)&v97 + 1) = v4;
      v100 = 0;
      if (*((_QWORD *)this + 19) >= 2uLL)
      {
        v49 = 1;
        v50 = (double *)((char *)this + 160);
        do
        {
          v51 = *((_QWORD *)this + 16);
          if (v51)
          else
          v50 += 4;
          v49 += 2;
        }
        while (v49 < *((_QWORD *)this + 19));
        if (v100)
          (*(void (**)(_QWORD, _QWORD, uint64_t, __int128 *, __n128))(**((_QWORD **)&v97 + 1) + 296))(*((_QWORD *)&v97 + 1), 0, v100, &v98, v52);
      }
    }
    if ((v80 & 1) == 0)
    {
      v4[100] = 0;
      ++v4[30].i32[0];
    }
  }
  else
  {
    CA::CG::DrawOp::shape_line_width((uint64_t)this, (const double *)a2, *((double *)this + 14));
    if (v14 < 0.0)
    {
      CA::CG::DrawLines::draw_shape_as_paths(this, a2);
      return;
    }
    if (v14 >= 0.001)
    {
      v11 = v5 & 1;
      if ((v5 & 1) != 0)
        v16 = v14;
      else
        v16 = 1.0;
      if (v14 < 1.0)
        v13 = v16;
      else
        v13 = v14;
LABEL_27:
      if (v11)
        v17 = 255;
      else
        v17 = 0;
      v87 = 0u;
      v88 = 0u;
      if (*((_QWORD *)this + 16))
      {
        v101 = 0uLL;
        CA::Shape::get_bounds(*(_QWORD *)(*(_QWORD *)&v4[29] + 8), (int *)&v101);
        v21 = (int32x2_t *)v4[31];
        if (v21)
          v22 = v21 + 4;
        else
          v22 = v4 + 23;
        v23 = *(int32x2_t *)&v101.u32[2];
        v20.i32[1] = 1;
        v24 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)&v101.u32[2]);
        *(uint32x2_t *)v19.i8 = vpmax_u32(v24, v24);
        if ((v19.i32[0] & 0x80000000) == 0)
        {
          *(int32x2_t *)v19.i8 = v22[1];
          v25 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v19.i8);
          *(uint32x2_t *)v20.i8 = vpmax_u32(v25, v25);
          if (v20.i32[0] < 0
            || (v26 = vadd_s32(*v22, *(int32x2_t *)v19.i8),
                *(int32x2_t *)v19.i8 = vmax_s32(*(int32x2_t *)v101.f32, *v22),
                v23 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v101.f32, *(int32x2_t *)&v101.u32[2]), v26), *(int32x2_t *)v19.i8), v27 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v23), *(uint32x2_t *)v20.i8 = vpmax_u32(v27, v27), v20.i32[0] < 0))
          {
            v23 = 0;
          }
          else
          {
            v19.u64[1] = (unint64_t)v23;
            v101 = (float32x4_t)v19;
          }
        }
        v53 = v23.i32[0];
        if (v23.i32[0] <= v23.i32[1])
          v53 = v23.i32[1];
        v19.i32[0] = v53;
        v20.i32[0] = 1073741822;
        v54.i64[0] = v101.i32[0];
        v54.i64[1] = v101.i32[1];
        v55 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v19, v20), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v54));
        v54.i64[0] = v23.i32[0];
        v54.i64[1] = v23.i32[1];
        v56 = (int8x16_t)vcvtq_f64_s64(v54);
        v57 = vdup_n_s32(v53 > 1073741822);
        v54.i64[0] = v57.u32[0];
        v54.i64[1] = v57.u32[1];
        v87 = v55;
        v88 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v54, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v56);
        v98 = 0u;
        v99 = 0u;
        v97 = 0u;
        CA::Mat2Impl::mat2_invert((CA::Mat2Impl *)&v97, v7, v18);
        CA::Mat2Impl::mat2_apply_to_rect((uint64_t)&v97, (double *)v87.i64, v58);
        CA::BoundsImpl::inset((double *)v87.i64, v13 * -0.5, v13 * -0.5);
      }
      *(_QWORD *)&v99 = 0;
      v59 = *((_DWORD *)this + 36);
      *(_QWORD *)&v97 = &off_1E1591A08;
      *((_QWORD *)&v97 + 1) = v4;
      *(_QWORD *)&v98 = v7;
      *((double *)&v98 + 1) = v13;
      LODWORD(v99) = v17;
      BYTE4(v99) = v59;
      BYTE5(v99) = v8 == v9;
      if (v59 != 1 && (*(unsigned int (**)(int32x2_t *, uint64_t))(*(_QWORD *)v4 + 184))(v4, 9))
      {
        v61 = v4[2];
        v62 = *(unsigned __int8 *)(*(_QWORD *)&v61 + 480);
        if (v62 != 12 && (v62 - 1) <= 0x18)
        {
          v64 = *(double *)((char *)a2 + v6) * *(double *)((char *)a2 + v6) + v7[1] * v7[1];
          v65 = v7[2] * v7[2] + v7[3] * v7[3];
          v66 = 1.0;
          v67 = v64 != 1.0;
          if (v65 != 1.0)
            v67 = 1;
          v68 = sqrt(v64);
          v69 = sqrt(v65);
          if (v67)
          {
            v65 = v69;
            v64 = v68;
          }
          v70 = (v69 + v68) * 0.5;
          if (v67)
            v66 = v70;
          if ((*(_QWORD *)&v66 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          {
            if (v64 == v65)
            {
              BYTE6(v99) = 1;
              goto LABEL_94;
            }
            if (v64 < 0.0 != v65 >= 0.0)
            {
              v76 = *(_QWORD *)&v64 - *(_QWORD *)&v65;
              if ((uint64_t)(*(_QWORD *)&v64 - *(_QWORD *)&v65) < 0)
                v76 = *(_QWORD *)&v65 - *(_QWORD *)&v64;
              BYTE6(v99) = v76 < 4;
              if (v76 > 3)
                goto LABEL_107;
LABEL_94:
              v71 = *(_QWORD *)(*(_QWORD *)&v61 + 8);
              v72 = (v4[102].u16[0] >> 12) & 7;
              v73 = HIWORD(v71);
              if (v72 != 2)
              {
                if (v72 != 1)
                {
LABEL_98:
                  v101 = vcvtq_f32_f16((float16x4_t)v71);
                  v74 = v13 * 0.5 * CA::Mat2Impl::mat2_get_scale((CA::Mat2Impl *)v7, 0, 0, v60) + 0.5;
                  v75 = 0.5;
                  if (v59 == 2)
                    v75 = v74;
                  v102 = __PAIR64__(LODWORD(v75), LODWORD(v74));
                  (*(void (**)(int32x2_t *, _QWORD, uint64_t, uint64_t, float32x4_t *))(*(_QWORD *)v4 + 1000))(v4, 0, 2, 3, &v101);
                  goto LABEL_107;
                }
                v71 = v71 & 0xFFFFFFFFFFFF0000 | v73;
              }
              v71 = v71 & 0xFFFF00000000FFFFLL | (v73 << 16) | (v73 << 32);
              goto LABEL_98;
            }
          }
        }
      }
      BYTE6(v99) = 0;
LABEL_107:
      if (*((_QWORD *)this + 19) >= 2uLL)
      {
        v77 = (double *)((char *)this + 160);
        v78 = 1;
        do
        {
          v79 = *((_QWORD *)this + 16);
          if (v79)
          else
          v77 += 4;
          v78 += 2;
        }
        while (v78 < *((_QWORD *)this + 19));
      }
    }
  }
}

void CA::CG::DrawLines::draw_shape_as_paths(CA::CG::DrawLines *this, CA::CG::Renderer *a2)
{
  CGPath *Mutable;
  CGFloat *v5;
  unint64_t v6;

  Mutable = CGPathCreateMutable();
  if (*((_QWORD *)this + 19) >= 2uLL)
  {
    v5 = (CGFloat *)((char *)this + 184);
    v6 = 1;
    do
    {
      CGPathMoveToPoint(Mutable, 0, *(v5 - 3), *(v5 - 2));
      CGPathAddLineToPoint(Mutable, 0, *(v5 - 1), *v5);
      v5 += 4;
      v6 += 2;
    }
    while (v6 < *((_QWORD *)this + 19));
  }
  CA::CG::stroke_path((uint64_t)a2, (uint64_t)Mutable, 0, (uint64_t)this + 8, (uint64_t)this + 112);
  CGPathRelease(Mutable);
}

float CA::CG::`anonymous namespace'::HairLineRenderer::operator()(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  float result;
  float v15;

  v10 = *(_QWORD *)(a1 + 3088);
  if ((unint64_t)(v10 - 191) <= 0xFFFFFFFFFFFFFF3ELL)
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 296))(*(_QWORD *)(a1 + 8), 0);
    v10 = 0;
    *(_QWORD *)(a1 + 3088) = 0;
  }
  v11 = a2;
  v12 = a1 + 16 * v10;
  v13 = a3;
  *(float *)(v12 + 16) = v11;
  *(float *)(v12 + 20) = v13;
  result = a4;
  v15 = a5;
  *(float *)(v12 + 32) = result;
  *(float *)(v12 + 36) = v15;
  *(_QWORD *)(v12 + 24) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 8);
  *(_QWORD *)(v12 + 40) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 8);
  *(_QWORD *)(a1 + 3088) = v10 + 2;
  return result;
}

uint64_t CA::CG::`anonymous namespace'::dash_line(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, double *a5)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t result;

  v5 = a5[1];
  v6 = a5[3] + v5;
  v7 = a4[1];
  v8 = a4[2];
  v9 = a4[3];
  if (*a4 > v8)
    v10 = -*a5;
  else
    v10 = a5[2] + *a5;
  if (*a4 > v8)
    v11 = -(a5[2] + *a5);
  else
    v11 = *a5;
  if (*a4 > v8)
    v12 = -v8;
  else
    v12 = a4[2];
  if (*a4 > v8)
    v13 = -*a4;
  else
    v13 = *a4;
  v14 = -v6;
  if (v7 <= v9)
  {
    v15 = a5[1];
  }
  else
  {
    v6 = -v5;
    v15 = v14;
  }
  if (v7 > v9)
    v16 = -v9;
  else
    v16 = a4[3];
  if (v7 > v9)
    v17 = -v7;
  else
    v17 = a4[1];
  if (v12 >= v11
    && v13 <= v10
    && v16 >= v15
    && v17 <= v6
    && (v12 - v13) * (v12 - v13) + (v16 - v17) * (v16 - v17) > 0.0)
  {
    return CGDashGetPattern();
  }
  return result;
}

_QWORD *CA::CG::`anonymous namespace'::WideLineRenderer::operator()(uint64_t a1, double a2, double a3, double a4, double a5)
{
  int v6;
  int v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  float64_t v16;
  float v17;
  float64_t v18;
  float v19;
  uint64_t v20;
  int rect;
  _QWORD *result;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  float64x2_t *v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double v36;
  double v37;
  uint64_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  unsigned int v44;
  unsigned int v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  __int128 v56;
  _OWORD v57[8];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 *)(a1 + 37);
  v7 = *(unsigned __int8 *)(a1 + 38);
  if (!*(_BYTE *)(a1 + 37))
  {
    if (!*(_BYTE *)(a1 + 38))
      goto LABEL_10;
    v7 = 1;
  }
  v8 = *(double **)(a1 + 16);
  v9 = v8[1];
  v10 = v8[4];
  v11 = v8[5];
  v12 = v8[2];
  v13 = v8[3];
  v14 = v10 + *v8 * a2 + v12 * a3;
  a3 = v11 + v9 * a2 + v13 * a3;
  v15 = v10 + *v8 * a4 + v12 * a5;
  a5 = v11 + v9 * a4 + v13 * a5;
  if (v7)
  {
    *(float *)&v16 = v14;
    v17 = a3;
    *((float *)&v16 + 1) = v17;
    *(float *)&v18 = v15;
    v19 = a5;
    *((float *)&v18 + 1) = v19;
    v62.f64[0] = v16;
    v62.f64[1] = v18;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 16) = 80;
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 232) + 8);
    *(_QWORD *)&v56 = *(_QWORD *)(a1 + 8);
    *((_QWORD *)&v56 + 1) = v20;
    memset(v57, 0, 40);
    LOWORD(v57[1]) = 0;
    CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v56);
    v52 = 0.0;
    v53 = 0.0;
    while (1)
    {
      rect = CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v56, (int32x2_t *)&v52);
      result = *(_QWORD **)(a1 + 8);
      if (!rect)
        break;
      (*(void (**)(_QWORD *, uint64_t, float64x2_t *))(*result + 312))(result, 2, &v62);
    }
    *(_BYTE *)(result[2] + 16) = 0;
    return result;
  }
  a4 = v15;
  a2 = v14;
LABEL_10:
  v23 = a4 - a2;
  v24 = a5 - a3;
  v25 = sqrt(v23 * v23 + v24 * v24);
  v26 = v24 / v25;
  if (v25 <= 0.0)
    v27 = 0.0;
  else
    v27 = v26;
  v28 = v23 / v25;
  if (v25 <= 0.0)
    v29 = 1.0;
  else
    v29 = v28;
  v62.f64[0] = v29;
  v62.f64[1] = v27;
  v63.f64[0] = -v27;
  v63.f64[1] = v29;
  v64.f64[0] = a2;
  v64.f64[1] = a3;
  if (v6)
  {
    v47 = -v27;
    v46 = v29;
  }
  else
  {
    v30 = *(float64x2_t **)(a1 + 16);
    v31 = *v30;
    v32 = v30[1];
    v33 = v30[2];
    v34 = vmlaq_n_f64(vmulq_n_f64(*v30, v29), v32, v27);
    v35 = vmulq_n_f64(*v30, v27);
    v62 = v34;
    v63 = vmlaq_n_f64(vnegq_f64(v35), v32, v29);
    v64 = vmlaq_n_f64(vmlaq_n_f64(v33, v31, a2), v32, a3);
    a3 = v64.f64[1];
    v46 = v34.f64[0];
    v47 = v63.f64[0];
    v27 = v34.f64[1];
    v29 = v63.f64[1];
    a2 = v64.f64[0];
  }
  v48 = v27;
  v49 = v29;
  v50 = a2;
  v51 = a3;
  v36 = *(double *)(a1 + 24);
  v52 = 0.0;
  v53 = -(v36 * 0.5);
  v54 = v25;
  v55 = v36;
  if (*(_BYTE *)(a1 + 36) == 1)
    v37 = v36 * 0.5;
  else
    v37 = 0.0;
  if (*(_BYTE *)(a1 + 36))
  {
    v52 = -(v36 * 0.5);
    v54 = v36 + v25;
  }
  v38 = CA::CG::mat2_filter_bits((uint64_t)&v62);
  v44 = CA::CG::rect_filter_bits((uint64_t)&v52, v62.f64, v38, v39, v40, v41, v42, v43);
  v61 = 0;
  v59 = 0u;
  v60 = 0u;
  v58 = 0u;
  v56 = 0u;
  memset(v57, 0, sizeof(v57));
  v45 = *(_DWORD *)(a1 + 32);
  CA::Transform::set_affine((CA::Transform *)&v56, v46, v48, v47, v49, v50, v51);
  *((_QWORD *)&v58 + 1) = &v52;
  *(_QWORD *)&v59 = &v56;
  *((_QWORD *)&v59 + 1) = __PAIR64__(v45, v44);
  v61 = 0;
  v60 = 0uLL;
  return (_QWORD *)CA::OGL::fill_round_rect(*(_QWORD *)(a1 + 8), (float64x2_t **)&v58 + 1, (double *)0xF, 0, v37, v37);
}

void sub_184735D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  if (a10 != a12)
    free(a10);
  _Unwind_Resume(exception_object);
}

void sub_184736164(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_184736604(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

_QWORD *server_error(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v2 = result;
    v3 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Server error %u"), a2);
    v4 = *MEMORY[0x1E0CB2D50];
    v5[0] = v3;
    result = (_QWORD *)objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("CoreAnimationErrorDomain"), 4, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, &v4, 1));
    *v2 = result;
  }
  return result;
}

void X::small_vector_base<ContentStreamClientFrame>::grow(uint64_t a1, unint64_t a2)
{
  __int128 *v3;
  uint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 *v13;
  __int128 *v14;
  _OWORD *v15;
  __int128 v16;

  v3 = *(__int128 **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(__int128 **)(a1 + 16);
  v6 = (*(_QWORD *)(a1 + 24) + 1) | ((unint64_t)(*(_QWORD *)(a1 + 24) + 1) >> 1);
  v7 = v6 | (v6 >> 2) | ((v6 | (v6 >> 2)) >> 4);
  v8 = v7 | (v7 >> 8) | ((v7 | (v7 >> 8)) >> 16);
  v9 = v8 | HIDWORD(v8);
  if (v9 + 1 > a2)
    v10 = v9 + 1;
  else
    v10 = a2;
  v11 = malloc_type_malloc(16 * v10, 0x1020040EDED9539uLL);
  v12 = v11;
  v13 = *(__int128 **)a1;
  v14 = *(__int128 **)(a1 + 8);
  if (*(__int128 **)a1 != v14)
  {
    v15 = v11;
    do
    {
      v16 = *v13++;
      *v15++ = v16;
    }
    while (v13 != v14);
  }
  if (v3 != v5)
    free(*(void **)a1);
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = (char *)v12 + v4 - (_QWORD)v3;
  *(_QWORD *)(a1 + 24) = v10;
}

_QWORD *stream_active_error(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = result;
    v2 = *MEMORY[0x1E0CB2D50];
    v3[0] = CFSTR("Stream is currently active");
    result = (_QWORD *)objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("CoreAnimationErrorDomain"), 1, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v3, &v2, 1));
    *v1 = result;
  }
  return result;
}

BOOL validate_options(CAContentStreamOptions *a1, NSError **a2)
{
  unsigned int v4;
  double v5;
  _BOOL4 v7;
  double v8;
  double v9;
  _BOOL8 v10;
  uint64_t v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v4 = -[CAContentStreamOptions pixelFormat](a1, "pixelFormat");
  -[CAContentStreamOptions frameSize](a1, "frameSize");
  v7 = v5 > 0.0 && v4 != 0;
  -[CAContentStreamOptions frameSize](a1, "frameSize");
  if (v8 <= 0.0)
    v7 = 0;
  if (!-[CAContentStreamOptions queueDepth](a1, "queueDepth"))
    v7 = 0;
  -[CAContentStreamOptions minimumFrameTime](a1, "minimumFrameTime");
  v10 = v9 >= 0.0 && v7;
  if (a2 && !v10)
  {
    v12 = *MEMORY[0x1E0CB2D50];
    v13[0] = CFSTR("Invalid option");
    *a2 = (NSError *)objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("CoreAnimationErrorDomain"), 0, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, &v12, 1));
  }
  return v10;
}

void std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,unsigned int,unsigned int>(uint64_t a1, unsigned int a2, int a3, int a4)
{
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;

  v7 = a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = a2;
      if (v8 <= a2)
        v10 = a2 % v8;
    }
    else
    {
      v10 = ((_DWORD)v8 - 1) & a2;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v10);
    if (v11)
    {
      for (i = *v11; i; i = (uint64_t *)*i)
      {
        v13 = i[1];
        if (v13 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= v8)
              v13 %= v8;
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v10)
            break;
        }
      }
    }
  }
  else
  {
    v10 = 0;
  }
  v14 = operator new(0x18uLL);
  v14[1] = v7;
  *((_DWORD *)v14 + 4) = a3;
  *((_DWORD *)v14 + 5) = a4;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v10 = v7 % v8;
      else
        v10 = v7;
    }
    else
    {
      v10 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
  if (v22)
  {
    *v14 = *v22;
LABEL_38:
    *v22 = v14;
    goto LABEL_39;
  }
  v23 = *(_QWORD *)(a1 + 16);
  *v14 = v23;
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v21 + 8 * v10) = a1 + 16;
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v24 >= v8)
        v24 %= v8;
    }
    else
    {
      v24 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_184736EC8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&_all_streams_lock);
  _Unwind_Resume(a1);
}

void remove_observer(CARenderer *a1)
{
  uint64_t v2;

  v2 = objc_msgSend(*(id *)a1->_priv, "renderContext");
  if (v2)
    CA::Render::remove_observer(0, v2, (uint64_t)context_changed, (uint64_t)a1);
}

void context_changed(CA::Render::Object *a1, _QWORD *a2, void *a3)
{
  void *v4;
  id v5;

  v4 = (void *)MEMORY[0x186DBE2E4](a1, a2, a3);
  v5 = *(id *)(a2[1] + 8);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v5, "rendererDidChange:", a2);

  objc_autoreleasePoolPop(v4);
}

void add_observer(CARenderer *a1)
{
  id *priv;
  unint64_t v3;

  priv = (id *)a1->_priv;
  if (priv[1])
  {
    v3 = objc_msgSend(*priv, "renderContext");
    if (v3)
      CA::Render::add_observer(0, v3, (uint64_t)context_changed, (uint64_t)a1, 0);
  }
}

void _CASFlipBookModify(mach_port_t a1, int a2, int a3, int a4)
{
  mach_port_t reply_port;
  mach_msg_return_t v6;
  mach_msg_header_t msg;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v8 = *MEMORY[0x1E0C804E8];
  v9 = a2;
  v10 = a3;
  v11 = a4;
  reply_port = mig_get_reply_port();
  *(_QWORD *)&msg.msgh_bits = 5395;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  *(_QWORD *)&msg.msgh_voucher_port = 0x9D3800000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v6 = mach_msg(&msg, 3, 0x2Cu, 0x2Cu, reply_port, 0, 0);
  if ((v6 - 268435458) <= 0xE && ((1 << (v6 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else if (v6)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  else if (msg.msgh_id != 40348
         || (msg.msgh_bits & 0x80000000) != 0
         || msg.msgh_size != 36
         || msg.msgh_remote_port
         || v9)
  {
    mach_msg_destroy(&msg);
  }
}

uint64_t _CASContentStreamModify(int a1, int a2, int a3, __int128 *a4)
{
  __int128 v5;
  __int128 v6;
  mach_port_t reply_port;
  uint64_t v8;
  uint64_t v9;
  int msg;
  _BYTE msg_4[44];
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  memset(&msg_4[16], 0, 28);
  *(_OWORD *)msg_4 = 0u;
  v5 = *a4;
  v16 = a4[1];
  v6 = a4[3];
  v17 = a4[2];
  v18 = v6;
  *(_DWORD *)&msg_4[20] = 2;
  *(_DWORD *)&msg_4[24] = a2;
  *(_DWORD *)&msg_4[32] = 1245184;
  *(_DWORD *)&msg_4[36] = a3;
  v13 = 1245184;
  v14 = *MEMORY[0x1E0C804E8];
  v19 = *((_DWORD *)a4 + 16);
  v15 = v5;
  reply_port = mig_get_reply_port();
  *(_DWORD *)&msg_4[4] = a1;
  *(_DWORD *)&msg_4[8] = reply_port;
  msg = -2147478253;
  *(_QWORD *)&msg_4[12] = 0x9D3900000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)&msg);
    reply_port = *(_DWORD *)&msg_4[8];
  }
  v8 = mach_msg((mach_msg_header_t *)&msg, 3, 0x80u, 0x2Cu, reply_port, 0, 0);
  v9 = v8;
  if ((v8 - 268435458) <= 0xE && ((1 << (v8 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg_4[8]);
    return v9;
  }
  if ((_DWORD)v8)
  {
    mig_dealloc_reply_port(*(mach_port_t *)&msg_4[8]);
    return v9;
  }
  if (*(_DWORD *)&msg_4[16] == 71)
  {
    v9 = 4294966988;
LABEL_17:
    mach_msg_destroy((mach_msg_header_t *)&msg);
    return v9;
  }
  if (*(_DWORD *)&msg_4[16] != 40349)
  {
    v9 = 4294966995;
    goto LABEL_17;
  }
  v9 = 4294966996;
  if (msg < 0)
    goto LABEL_17;
  if (*(_DWORD *)msg_4 != 36)
    goto LABEL_17;
  if (*(_DWORD *)&msg_4[4])
    goto LABEL_17;
  v9 = *(unsigned int *)&msg_4[28];
  if (*(_DWORD *)&msg_4[28])
    goto LABEL_17;
  return v9;
}

uint64_t _CASContentStreamStartStop(int a1, int a2, char a3, uint64_t a4, int a5, int a6, int a7)
{
  mach_port_t reply_port;
  uint64_t v9;
  uint64_t v10;
  _BYTE msg[36];
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  __int16 v19;
  char v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)&msg[20] = 0u;
  *(_OWORD *)&msg[4] = 0u;
  *(_DWORD *)&msg[24] = 2;
  *(_DWORD *)&msg[28] = a2;
  v13 = 1245184;
  v14 = a4;
  v15 = 16777472;
  v16 = 4 * a5;
  v17 = *MEMORY[0x1E0C804E8];
  v18 = a3;
  v19 = 0;
  v20 = 0;
  v21 = a5;
  v22 = a6;
  v23 = a7;
  reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)msg = -2147478253;
  *(_QWORD *)&msg[16] = 0x9D3A00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    reply_port = *(_DWORD *)&msg[12];
  }
  v9 = mach_msg((mach_msg_header_t *)msg, 3, 0x50u, 0x2Cu, reply_port, 0, 0);
  v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
    return v10;
  }
  if ((_DWORD)v9)
  {
    mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
    return v10;
  }
  if (*(_DWORD *)&msg[20] == 71)
  {
    v10 = 4294966988;
LABEL_17:
    mach_msg_destroy((mach_msg_header_t *)msg);
    return v10;
  }
  if (*(_DWORD *)&msg[20] != 40350)
  {
    v10 = 4294966995;
    goto LABEL_17;
  }
  v10 = 4294966996;
  if ((*(_DWORD *)msg & 0x80000000) != 0)
    goto LABEL_17;
  if (*(_DWORD *)&msg[4] != 36)
    goto LABEL_17;
  if (*(_DWORD *)&msg[8])
    goto LABEL_17;
  v10 = *(unsigned int *)&msg[32];
  if (*(_DWORD *)&msg[32])
    goto LABEL_17;
  return v10;
}

void _CASDebugBrightness(int a1, double a2)
{
  mach_port_t reply_port;
  mach_msg_return_t v4;
  _DWORD msg[13];

  *(_QWORD *)&msg[11] = *MEMORY[0x1E0C80C00];
  memset(&msg[1], 0, 40);
  *(_QWORD *)&msg[6] = *MEMORY[0x1E0C804E8];
  *(double *)&msg[8] = a2;
  reply_port = mig_get_reply_port();
  msg[2] = a1;
  msg[3] = reply_port;
  msg[0] = 5395;
  *(_QWORD *)&msg[4] = 0x9D4B00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    reply_port = msg[3];
  }
  v4 = mach_msg((mach_msg_header_t *)msg, 3, 0x28u, 0x2Cu, reply_port, 0, 0);
  if ((v4 - 268435458) <= 0xE && ((1 << (v4 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg[3]);
  }
  else if (v4)
  {
    mig_dealloc_reply_port(msg[3]);
  }
  else if (msg[5] != 40367 || (msg[0] & 0x80000000) != 0 || msg[1] != 36 || msg[2] || msg[8])
  {
    mach_msg_destroy((mach_msg_header_t *)msg);
  }
}

void _CASDebugPreset(int a1, int a2)
{
  mach_port_t reply_port;
  mach_msg_return_t v4;
  _BYTE msg[36];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  memset(&msg[4], 0, 32);
  v6 = 0;
  *(_QWORD *)&msg[24] = *MEMORY[0x1E0C804E8];
  *(_DWORD *)&msg[32] = a2;
  reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x9D4C00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    reply_port = *(_DWORD *)&msg[12];
  }
  v4 = mach_msg((mach_msg_header_t *)msg, 3, 0x24u, 0x2Cu, reply_port, 0, 0);
  if ((v4 - 268435458) <= 0xE && ((1 << (v4 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
  }
  else if (v4)
  {
    mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
  }
  else if (*(_DWORD *)&msg[20] != 40368
         || (*(_DWORD *)msg & 0x80000000) != 0
         || *(_DWORD *)&msg[4] != 36
         || *(_DWORD *)&msg[8]
         || *(_DWORD *)&msg[32])
  {
    mach_msg_destroy((mach_msg_header_t *)msg);
  }
}

void _CASDebugFrameInfo(int a1)
{
  mach_port_t reply_port;
  mach_msg_return_t v3;
  _BYTE msg[36];
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  *(_DWORD *)&msg[4] = 0;
  *(_OWORD *)&msg[20] = 0u;
  reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x9D4D00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    reply_port = *(_DWORD *)&msg[12];
  }
  v3 = mach_msg((mach_msg_header_t *)msg, 3, 0x18u, 0x2Cu, reply_port, 0, 0);
  if ((v3 - 268435458) <= 0xE && ((1 << (v3 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
  }
  else if (v3)
  {
    mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
  }
  else if (*(_DWORD *)&msg[20] != 40369
         || (*(_DWORD *)msg & 0x80000000) != 0
         || *(_DWORD *)&msg[4] != 36
         || *(_DWORD *)&msg[8]
         || *(_DWORD *)&msg[32])
  {
    mach_msg_destroy((mach_msg_header_t *)msg);
  }
}

uint64_t (*CARenderServices_server_routine(uint64_t a1))()
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 40291) >= 0xFFFFFFA5)
    return CASCARenderServices_subsystem[5 * (v1 - 40200) + 5];
  else
    return 0;
}

void _XPing(_DWORD *a1, uint64_t a2)
{
  int v3;

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v3 = -304;
  }
  else if (a1[6] || a1[7] < 0x20u)
  {
    v3 = -309;
  }
  else
  {
    CA::Render::post_notification(0xCu, 0, 0, 0);
    v3 = 0;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
}

uint64_t _XSetClientPorts(uint64_t result, uint64_t a2)
{
  int v2;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 3 || *(_DWORD *)(result + 4) != 64)
  {
    v2 = -304;
    goto LABEL_11;
  }
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112
    || *(unsigned __int16 *)(result + 50) << 16 != 1114112
    || *(unsigned __int16 *)(result + 62) << 16 != 1114112)
  {
    v2 = -300;
    goto LABEL_11;
  }
  if (*(_DWORD *)(result + 64) || *(_DWORD *)(result + 68) <= 0x1Fu)
  {
    v2 = -309;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v2;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  *(_DWORD *)(a2 + 32) = 5;
  return result;
}

uint64_t _XGetClientPort(uint64_t result, uint64_t a2)
{
  int v3;
  CA::Render::Context *v4;
  __int128 v5;
  const audit_token_t *v6;
  const audit_token_t *v7;
  unsigned int *v8;
  pthread_mutex_t *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 36)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 36) || *(_DWORD *)(result + 40) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  *(_QWORD *)(a2 + 32) = 0x13000000000000;
  v4 = (CA::Render::Context *)*(unsigned int *)(result + 32);
  v5 = *(_OWORD *)(result + 72);
  v13 = *(_OWORD *)(result + 56);
  v14 = v5;
  *(_DWORD *)(a2 + 28) = 0;
  if (DWORD1(v14) != getpid())
  {
    result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)&v13, v6);
    if ((result & 0x20) == 0)
    {
      v3 = 53;
      goto LABEL_7;
    }
  }
  result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)&v13, v6);
  if ((result & 0x80) != 0
    || (result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)&v13, v7), (result & 0x20000) != 0))
  {
    v3 = -81182719;
    goto LABEL_7;
  }
  result = CA::Render::Context::context_by_id(v4);
  if (!result)
  {
    v3 = 56;
    goto LABEL_7;
  }
  v8 = (unsigned int *)result;
  v9 = (pthread_mutex_t *)(result + 72);
  pthread_mutex_lock((pthread_mutex_t *)(result + 72));
  *(_DWORD *)(a2 + 28) = v8[64];
  result = pthread_mutex_unlock(v9);
  v10 = v8 + 2;
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
    result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 40;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t _XGetClientProcessId(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  CA::Render::Context *v6;
  __int128 v7;
  _OWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 40)
  {
    v4 = -304;
    goto LABEL_9;
  }
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112)
  {
    v4 = -300;
    goto LABEL_9;
  }
  v3 = result + 40;
  if (*(_DWORD *)(result + 40) || *(_DWORD *)(result + 44) <= 0x1Fu)
  {
    v4 = -309;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v4;
    v5 = *MEMORY[0x1E0C804E8];
    goto LABEL_10;
  }
  v6 = (CA::Render::Context *)*(unsigned int *)(result + 28);
  v7 = *(_OWORD *)(v3 + 36);
  v8[0] = *(_OWORD *)(v3 + 20);
  v8[1] = v7;
  result = CASGetClientProcessId(v6, (audit_token_t *)(a2 + 36), (CA::Render::Server *)v8);
  *(_DWORD *)(a2 + 32) = result;
  v5 = *MEMORY[0x1E0C804E8];
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 24) = v5;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(_QWORD *)(a2 + 24) = v5;
  return result;
}

void _XRemoveContextFromFences(uint64_t a1, uint64_t a2)
{
  int v3;
  CA::Render::Context *v4;
  __int128 v5;
  const audit_token_t *v6;
  CA::Render::Fence *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  _OWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 24)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 24) || *(_DWORD *)(a1 + 28) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return;
  }
  v4 = (CA::Render::Context *)*(unsigned int *)(a1 + 12);
  v5 = *(_OWORD *)(a1 + 60);
  v12[0] = *(_OWORD *)(a1 + 44);
  v12[1] = v5;
  if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v12, (const audit_token_t *)a2) & 0x80) != 0
    || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v12, v6) & 0x20000) != 0)
  {
    v11 = -81182719;
  }
  else
  {
    v7 = (CA::Render::Fence *)CA::Render::Context::context_by_server_port(v4);
    if (v7)
    {
      v8 = (unsigned int *)v7;
      CA::Render::Fence::remove_context(v7, 0);
      v9 = v8 + 2;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (v10 == 1)
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
      v11 = 0;
    }
    else
    {
      v11 = 56;
    }
  }
  *(_DWORD *)(a2 + 32) = v11;
}

uint64_t _XCreateImageSlot(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  CA::Render::Context *v5;
  CA::Render *v6;
  unsigned int v7;
  int v8;
  int v9;
  __int128 v10;
  const audit_token_t *v11;
  CA::Render::Context *v12;
  pthread_mutex_t *v13;
  int v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  _OWORD v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 48)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 48) || *(_DWORD *)(result + 52) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    v4 = *MEMORY[0x1E0C804E8];
LABEL_8:
    *(_QWORD *)(a2 + 24) = v4;
    return result;
  }
  v5 = (CA::Render::Context *)*(unsigned int *)(result + 12);
  v6 = (CA::Render *)*(unsigned int *)(result + 32);
  v7 = *(_DWORD *)(result + 36);
  v9 = *(_DWORD *)(result + 40);
  v8 = *(_DWORD *)(result + 44);
  v10 = *(_OWORD *)(result + 84);
  v19[0] = *(_OWORD *)(result + 68);
  v19[1] = v10;
  *(_DWORD *)(a2 + 36) = 0;
  result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v19, (const audit_token_t *)a2);
  if ((result & 0x80) != 0
    || (result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v19, v11), (result & 0x20000) != 0))
  {
    v3 = -81182719;
    goto LABEL_7;
  }
  result = CA::Render::Context::context_by_server_port(v5);
  if (!result)
  {
    v3 = 56;
    goto LABEL_7;
  }
  v12 = (CA::Render::Context *)result;
  v13 = (pthread_mutex_t *)(result + 72);
  pthread_mutex_lock((pthread_mutex_t *)(result + 72));
  *(_DWORD *)(a2 + 36) = CA::Render::Context::new_image_slot(v12, v6, v7, v9 != 0, v8 != 0);
  result = pthread_mutex_unlock(v13);
  v14 = *(_DWORD *)(a2 + 36);
  if (v14)
    v15 = 0;
  else
    v15 = 5;
  v16 = (unsigned int *)((char *)v12 + 8);
  do
  {
    v17 = __ldaxr(v16);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v16));
  if (!v18)
    result = (*(uint64_t (**)(CA::Render::Context *))(*(_QWORD *)v12 + 16))(v12);
  *(_DWORD *)(a2 + 32) = v15;
  v4 = *MEMORY[0x1E0C804E8];
  if (!v14)
    goto LABEL_8;
  *(_QWORD *)(a2 + 24) = v4;
  *(_DWORD *)(a2 + 4) = 40;
  return result;
}

uint64_t _XGetColormatchUntaggedContent(uint64_t result, uint64_t a2)
{
  int v3;
  CA::Render::Context *v4;
  __int128 v5;
  const audit_token_t *v6;
  unsigned __int16 *v7;
  pthread_mutex_t *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 24)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 24) || *(_DWORD *)(result + 28) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  v4 = (CA::Render::Context *)*(unsigned int *)(result + 12);
  v5 = *(_OWORD *)(result + 60);
  v13[0] = *(_OWORD *)(result + 44);
  v13[1] = v5;
  result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v13, (const audit_token_t *)a2);
  if ((result & 0x80) != 0
    || (result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v13, v6), (result & 0x20000) != 0))
  {
    v3 = -81182719;
    goto LABEL_7;
  }
  result = CA::Render::Context::context_by_server_port(v4);
  if (!result)
  {
    v3 = 56;
    goto LABEL_7;
  }
  v7 = (unsigned __int16 *)result;
  v8 = (pthread_mutex_t *)(result + 72);
  pthread_mutex_lock((pthread_mutex_t *)(result + 72));
  v9 = v7[276];
  result = pthread_mutex_unlock(v8);
  *(_DWORD *)(a2 + 36) = (v9 >> 1) & 1;
  v10 = (unsigned int *)(v7 + 4);
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
    result = (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)v7 + 16))(v7);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)(a2 + 4) = 40;
  return result;
}

uint64_t _XSetColormatchUntaggedContent(uint64_t result, uint64_t a2)
{
  int v3;
  _QWORD *v4;
  CA::Render::Context *v5;
  int v6;
  __int128 v7;
  const audit_token_t *v8;
  unsigned int *v9;
  pthread_mutex_t *v10;
  unsigned int *v11;
  unsigned int v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 36)
  {
    v3 = -304;
  }
  else if (*(_DWORD *)(result + 36) || *(_DWORD *)(result + 40) < 0x20u)
  {
    v3 = -309;
  }
  else
  {
    v5 = (CA::Render::Context *)*(unsigned int *)(result + 12);
    v6 = *(_DWORD *)(result + 32);
    v7 = *(_OWORD *)(result + 72);
    v13[0] = *(_OWORD *)(result + 56);
    v13[1] = v7;
    result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v13, (const audit_token_t *)a2);
    if ((result & 0x80) != 0
      || (result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v13, v8), (result & 0x20000) != 0))
    {
      v3 = -81182719;
    }
    else
    {
      result = CA::Render::Context::context_by_server_port(v5);
      if (result)
      {
        v9 = (unsigned int *)result;
        v10 = (pthread_mutex_t *)(result + 72);
        pthread_mutex_lock((pthread_mutex_t *)(result + 72));
        *((_WORD *)v9 + 276) = v9[138] & 0xFFFD | (2 * (v6 != 0));
        result = pthread_mutex_unlock(v10);
        v11 = v9 + 2;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (v12 == 1)
          result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v3 = 0;
      }
      else
      {
        v3 = 56;
      }
    }
  }
  v4 = (_QWORD *)MEMORY[0x1E0C804E8];
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *v4;
  return result;
}

uint64_t _XGetSecure(uint64_t result, uint64_t a2)
{
  int v3;
  CA::Render::Context *v4;
  __int128 v5;
  const audit_token_t *v6;
  unsigned __int16 *v7;
  pthread_mutex_t *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 24)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 24) || *(_DWORD *)(result + 28) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  v4 = (CA::Render::Context *)*(unsigned int *)(result + 12);
  v5 = *(_OWORD *)(result + 60);
  v13[0] = *(_OWORD *)(result + 44);
  v13[1] = v5;
  result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v13, (const audit_token_t *)a2);
  if ((result & 0x80) != 0
    || (result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v13, v6), (result & 0x20000) != 0))
  {
    v3 = -81182719;
    goto LABEL_7;
  }
  result = CA::Render::Context::context_by_server_port(v4);
  if (!result)
  {
    v3 = 56;
    goto LABEL_7;
  }
  v7 = (unsigned __int16 *)result;
  v8 = (pthread_mutex_t *)(result + 72);
  pthread_mutex_lock((pthread_mutex_t *)(result + 72));
  v9 = v7[276];
  result = pthread_mutex_unlock(v8);
  *(_DWORD *)(a2 + 36) = (v9 >> 2) & 1;
  v10 = (unsigned int *)(v7 + 4);
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
    result = (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)v7 + 16))(v7);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)(a2 + 4) = 40;
  return result;
}

uint64_t _XSetSecure(uint64_t result, uint64_t a2)
{
  int v3;
  _QWORD *v4;
  CA::Render::Context *v5;
  int v6;
  __int128 v7;
  const audit_token_t *v8;
  const audit_token_t *v9;
  unsigned int *v10;
  pthread_mutex_t *v11;
  unsigned int *v12;
  unsigned int v13;
  _OWORD v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 36)
  {
    v3 = -304;
  }
  else if (*(_DWORD *)(result + 36) || *(_DWORD *)(result + 40) < 0x20u)
  {
    v3 = -309;
  }
  else
  {
    v5 = (CA::Render::Context *)*(unsigned int *)(result + 12);
    v6 = *(_DWORD *)(result + 32);
    v7 = *(_OWORD *)(result + 72);
    v14[0] = *(_OWORD *)(result + 56);
    v14[1] = v7;
    result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v14, (const audit_token_t *)a2);
    if ((result & 4) != 0)
    {
      result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v14, v8);
      if ((result & 0x80) != 0
        || (result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v14, v9), (result & 0x20000) != 0))
      {
        v3 = -81182719;
      }
      else
      {
        result = CA::Render::Context::context_by_server_port(v5);
        if (result)
        {
          v10 = (unsigned int *)result;
          v11 = (pthread_mutex_t *)(result + 72);
          pthread_mutex_lock((pthread_mutex_t *)(result + 72));
          *((_WORD *)v10 + 276) = v10[138] & 0xFFFB | (4 * (v6 != 0));
          result = pthread_mutex_unlock(v11);
          v12 = v10 + 2;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (v13 == 1)
            result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v10 + 16))(v10);
          v3 = 0;
        }
        else
        {
          v3 = 56;
        }
      }
    }
    else
    {
      v3 = 53;
    }
  }
  v4 = (_QWORD *)MEMORY[0x1E0C804E8];
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *v4;
  return result;
}

uint64_t _XGetEDRHeadroom(uint64_t result, uint64_t a2)
{
  int v3;
  CA::Render::Context *v4;
  __int128 v5;
  const audit_token_t *v6;
  unsigned int *v7;
  pthread_mutex_t *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 24)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 24) || *(_DWORD *)(result + 28) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  v4 = (CA::Render::Context *)*(unsigned int *)(result + 12);
  v5 = *(_OWORD *)(result + 60);
  v13[0] = *(_OWORD *)(result + 44);
  v13[1] = v5;
  result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v13, (const audit_token_t *)a2);
  if ((result & 0x80) != 0
    || (result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v13, v6), (result & 0x20000) != 0))
  {
    v3 = -81182719;
    goto LABEL_7;
  }
  result = CA::Render::Context::context_by_server_port(v4);
  if (!result)
  {
    v3 = 56;
    goto LABEL_7;
  }
  v7 = (unsigned int *)result;
  v8 = (pthread_mutex_t *)(result + 72);
  pthread_mutex_lock((pthread_mutex_t *)(result + 72));
  v9 = v7[77];
  result = pthread_mutex_unlock(v8);
  *(_DWORD *)(a2 + 36) = v9;
  v10 = v7 + 2;
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
    result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)(a2 + 4) = 40;
  return result;
}

void _XSetEDRHeadroom(uint64_t a1, uint64_t a2)
{
  int v3;
  _QWORD *v4;
  CA::Render::Context *v5;
  float v6;
  __int128 v7;
  const audit_token_t *v8;
  CA::Render::Context *v9;
  float *v10;
  float v11;
  unsigned int *v12;
  unsigned int v13;
  _OWORD v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) < 0x20u)
  {
    v3 = -309;
  }
  else
  {
    v5 = (CA::Render::Context *)*(unsigned int *)(a1 + 12);
    v6 = *(float *)(a1 + 32);
    v7 = *(_OWORD *)(a1 + 72);
    v14[0] = *(_OWORD *)(a1 + 56);
    v14[1] = v7;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v14, (const audit_token_t *)a2) & 0x80) != 0
      || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v14, v8) & 0x20000) != 0)
    {
      v3 = -81182719;
    }
    else
    {
      v9 = (CA::Render::Context *)CA::Render::Context::context_by_server_port(v5);
      if (v9)
      {
        v10 = (float *)v9;
        CA::Render::Context::will_commit(v9);
        v11 = v10[77];
        v10[77] = v6;
        CA::Render::Context::did_commit((unint64_t)v10, v11 != v6, 0, 1, 0, 0);
        v12 = (unsigned int *)(v10 + 2);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (v13 == 1)
          (*(void (**)(float *))(*(_QWORD *)v10 + 16))(v10);
        v3 = 0;
      }
      else
      {
        v3 = 56;
      }
    }
  }
  v4 = (_QWORD *)MEMORY[0x1E0C804E8];
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *v4;
}

uint64_t _XHitTestContext(uint64_t result, uint64_t a2)
{
  int v3;
  CA::Render::Context *v4;
  __int128 v5;
  const audit_token_t *v6;
  uint64_t v7;
  pthread_mutex_t *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _OWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 48)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 48) || *(_DWORD *)(result + 52) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  v4 = (CA::Render::Context *)*(unsigned int *)(result + 12);
  v5 = *(_OWORD *)(result + 84);
  v12[0] = *(_OWORD *)(result + 68);
  v12[1] = v5;
  *(_DWORD *)(a2 + 36) = 0;
  result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v12, (const audit_token_t *)a2);
  if ((result & 0x80) != 0
    || (result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v12, v6), (result & 0x20000) != 0))
  {
    v3 = -81182719;
    goto LABEL_7;
  }
  result = CA::Render::Context::context_by_server_port(v4);
  if (!result)
  {
    v3 = 56;
    goto LABEL_7;
  }
  v7 = result;
  v8 = (pthread_mutex_t *)(result + 72);
  pthread_mutex_lock((pthread_mutex_t *)(result + 72));
  *(_DWORD *)(a2 + 36) = CA::Render::Context::hit_test_context(v7);
  result = pthread_mutex_unlock(v8);
  v9 = (unsigned int *)(v7 + 8);
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)(a2 + 4) = 40;
  return result;
}

uint64_t _XRenderDisplaySurface(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  _anonymous_namespace_ *v13;
  mach_port_t v14;
  int v15;
  int v16;
  int v17;
  double v18;
  int v19;
  unsigned int v20;
  __int128 v21;
  _OWORD v22[2];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) == 0)
    goto LABEL_2;
  v5 = result;
  v3 = -304;
  if (*(_DWORD *)(result + 24) != 2)
    goto LABEL_3;
  v6 = *(unsigned int *)(result + 4);
  if (v6 < 0xE8 || v6 > 0x1E8)
    goto LABEL_3;
  if (*(_BYTE *)(result + 39) != 1 || *(unsigned __int16 *)(result + 54) << 16 != 1114112)
    goto LABEL_21;
  v7 = *(_DWORD *)(result + 68);
  if (v7 > 0x100)
  {
LABEL_2:
    v3 = -304;
LABEL_3:
    *(_DWORD *)(a2 + 32) = v3;
    v4 = *MEMORY[0x1E0C804E8];
    goto LABEL_4;
  }
  v3 = -304;
  if ((int)v6 - 232 < v7)
    goto LABEL_3;
  v8 = (v7 + 3) & 0xFFFFFFFC;
  if ((_DWORD)v6 != v8 + 232)
    goto LABEL_3;
  v9 = result + v8;
  v10 = (unsigned int *)(*(_DWORD *)(result + 40) >> 2);
  if ((_DWORD)v10 != *(_DWORD *)(v9 + 72))
  {
LABEL_21:
    v3 = -300;
    goto LABEL_3;
  }
  v11 = 328;
  if (*(unsigned int *)(result + 4) < 0x148uLL)
    v11 = *(unsigned int *)(result + 4);
  result = (uint64_t)memchr((void *)(result + 72), 0, v11 - 72);
  if (!result)
    goto LABEL_2;
  v12 = ((v6 + 3) & 0x1FFFFFFFCLL) + v5;
  if (*(_DWORD *)v12 || *(_DWORD *)(v12 + 4) <= 0x1Fu)
  {
    v3 = -309;
    goto LABEL_3;
  }
  v13 = *(_anonymous_namespace_ **)(v5 + 28);
  v14 = *(_DWORD *)(v5 + 44);
  v15 = *(_DWORD *)(v9 + 76);
  v16 = *(_DWORD *)(v9 + 80);
  v17 = *(_DWORD *)(v9 + 84);
  v18 = *(double *)(v9 + 88);
  v19 = *(_DWORD *)(v9 + 224);
  v20 = *(_DWORD *)(v9 + 228);
  v21 = *(_OWORD *)(v12 + 36);
  v22[0] = *(_OWORD *)(v12 + 20);
  v22[1] = v21;
  result = CASRenderDisplaySurface((const char *)(v5 + 72), v13, v10, v14, v15, v16, v17, (CA::Mat4Impl *)(v9 + 96), v18, v19, v20, (unint64_t *)(a2 + 36), (CA::Render::Server *)v22);
  *(_DWORD *)(a2 + 32) = result;
  v4 = *MEMORY[0x1E0C804E8];
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_4:
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

uint64_t _XRenderDisplayShmem(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  _anonymous_namespace_ *v13;
  int v14;
  int v15;
  uint64_t v16;
  mem_entry_name_port_t v17;
  mach_vm_size_t v18;
  uint64_t v19;
  int v20;
  double v21;
  int v22;
  unsigned int v23;
  __int128 v24;
  _OWORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) == 0)
    goto LABEL_2;
  v5 = result;
  v3 = -304;
  if (*(_DWORD *)(result + 24) != 2)
    goto LABEL_3;
  v6 = *(unsigned int *)(result + 4);
  if (v6 < 0x108 || v6 > 0x208)
    goto LABEL_3;
  if (*(_BYTE *)(result + 39) != 1 || *(unsigned __int16 *)(result + 54) << 16 != 1114112)
    goto LABEL_21;
  v7 = *(_DWORD *)(result + 68);
  if (v7 > 0x100)
  {
LABEL_2:
    v3 = -304;
LABEL_3:
    *(_DWORD *)(a2 + 32) = v3;
    v4 = *MEMORY[0x1E0C804E8];
    goto LABEL_4;
  }
  v3 = -304;
  if ((int)v6 - 264 < v7)
    goto LABEL_3;
  v8 = (v7 + 3) & 0xFFFFFFFC;
  if ((_DWORD)v6 != v8 + 264)
    goto LABEL_3;
  v9 = result + v8;
  v10 = (unsigned int *)(*(_DWORD *)(result + 40) >> 2);
  if ((_DWORD)v10 != *(_DWORD *)(v9 + 72))
  {
LABEL_21:
    v3 = -300;
    goto LABEL_3;
  }
  v11 = 328;
  if (*(unsigned int *)(result + 4) < 0x148uLL)
    v11 = *(unsigned int *)(result + 4);
  result = (uint64_t)memchr((void *)(result + 72), 0, v11 - 72);
  if (!result)
    goto LABEL_2;
  v12 = ((v6 + 3) & 0x1FFFFFFFCLL) + v5;
  if (*(_DWORD *)v12 || *(_DWORD *)(v12 + 4) <= 0x1Fu)
  {
    v3 = -309;
    goto LABEL_3;
  }
  v13 = *(_anonymous_namespace_ **)(v5 + 28);
  v14 = *(_DWORD *)(v9 + 76);
  v15 = *(_DWORD *)(v9 + 80);
  v16 = *(_QWORD *)(v9 + 84);
  v17 = *(_DWORD *)(v5 + 44);
  v18 = *(_QWORD *)(v9 + 92);
  v19 = *(_QWORD *)(v9 + 108);
  v20 = *(_DWORD *)(v9 + 116);
  v21 = *(double *)(v9 + 120);
  v22 = *(_DWORD *)(v9 + 256);
  v23 = *(_DWORD *)(v9 + 260);
  v24 = *(_OWORD *)(v12 + 36);
  v25[0] = *(_OWORD *)(v12 + 20);
  v25[1] = v24;
  result = CASRenderDisplayShmem((const char *)(v5 + 72), v13, v10, v14, v15, v16, v17, v18, v21, v19, SHIDWORD(v19), v20, (CA::Mat4Impl *)(v9 + 128), v22, v23, (unint64_t *)(a2 + 36), (CA::Render::Server *)v25);
  *(_DWORD *)(a2 + 32) = result;
  v4 = *MEMORY[0x1E0C804E8];
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_4:
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

uint64_t _XRenderDisplayLayerShmem(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  CA::Render::Context *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  mem_entry_name_port_t v16;
  mach_vm_size_t v17;
  uint64_t v18;
  int v19;
  double v20;
  unsigned int v21;
  __int128 v22;
  _OWORD v23[2];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) == 0)
    goto LABEL_2;
  v5 = result;
  v3 = -304;
  if (*(_DWORD *)(result + 24) != 1)
    goto LABEL_3;
  v6 = *(unsigned int *)(result + 4);
  if (v6 < 0xFC || v6 > 0x1FC)
    goto LABEL_3;
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112)
  {
    v3 = -300;
    goto LABEL_3;
  }
  v7 = *(_DWORD *)(result + 52);
  if (v7 > 0x100)
    goto LABEL_2;
  v3 = -304;
  if ((int)v6 - 252 < v7)
    goto LABEL_3;
  v8 = (v7 + 3) & 0xFFFFFFFC;
  if ((_DWORD)v6 != v8 + 252)
    goto LABEL_3;
  v9 = 312;
  if (*(unsigned int *)(result + 4) < 0x138uLL)
    v9 = *(unsigned int *)(result + 4);
  result = (uint64_t)memchr((void *)(result + 56), 0, v9 - 56);
  if (!result)
  {
LABEL_2:
    v3 = -304;
LABEL_3:
    *(_DWORD *)(a2 + 32) = v3;
    v4 = *MEMORY[0x1E0C804E8];
    goto LABEL_4;
  }
  v10 = ((v6 + 3) & 0x1FFFFFFFCLL) + v5;
  if (*(_DWORD *)v10 || *(_DWORD *)(v10 + 4) <= 0x1Fu)
  {
    v3 = -309;
    goto LABEL_3;
  }
  v11 = (CA::Render::Context *)*(unsigned int *)(v5 + v8 + 56);
  v12 = *(_QWORD *)(v5 + v8 + 60);
  v13 = *(_DWORD *)(v5 + v8 + 68);
  v14 = *(_DWORD *)(v5 + v8 + 72);
  v15 = *(_QWORD *)(v5 + v8 + 76);
  v16 = *(_DWORD *)(v5 + 28);
  v17 = *(_QWORD *)(v5 + v8 + 84);
  v18 = *(_QWORD *)(v5 + v8 + 100);
  v19 = *(_DWORD *)(v5 + v8 + 108);
  v20 = *(double *)(v5 + v8 + 112);
  v21 = *(_DWORD *)(v5 + v8 + 248);
  v22 = *(_OWORD *)(v10 + 36);
  v23[0] = *(_OWORD *)(v10 + 20);
  v23[1] = v22;
  result = CASRenderDisplayLayerShmem((const char *)(v5 + 56), v11, v12, v13, v14, v15, v16, v17, v20, v18, SHIDWORD(v18), v19, (CA::Mat4Impl *)(v5 + v8 + 120), v21, (unint64_t *)(a2 + 36), (CA::Render::Server *)v23);
  *(_DWORD *)(a2 + 32) = result;
  v4 = *MEMORY[0x1E0C804E8];
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_4:
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

uint64_t _XRenderDisplayContextListSurface(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const audit_token_t *v15;
  mach_port_t v16;
  int v17;
  int v18;
  double v19;
  CA::Mat4Impl *v20;
  unsigned int v21;
  __int128 v22;
  _OWORD v23[2];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) == 0)
    goto LABEL_2;
  v4 = result;
  v3 = -304;
  if (*(_DWORD *)(result + 24) != 3)
    goto LABEL_21;
  v5 = *(unsigned int *)(result + 4);
  if (v5 < 0x74 || v5 > 0x174)
    goto LABEL_21;
  if (*(_BYTE *)(result + 39) != 1
    || *(unsigned __int16 *)(result + 54) << 16 != 1114112
    || *(_BYTE *)(result + 67) != 1)
  {
    goto LABEL_20;
  }
  v6 = *(_DWORD *)(result + 84);
  if (v6 > 0x100)
  {
LABEL_2:
    v3 = -304;
LABEL_21:
    *(_DWORD *)(a2 + 32) = v3;
    v14 = *MEMORY[0x1E0C804E8];
    goto LABEL_22;
  }
  v3 = -304;
  if ((int)v5 - 116 < v6)
    goto LABEL_21;
  v7 = (v6 + 3) & 0xFFFFFFFC;
  if ((_DWORD)v5 != v7 + 116)
    goto LABEL_21;
  v8 = result + v7;
  v9 = *(_DWORD *)(result + 40) >> 2;
  if (v9 != *(_DWORD *)(v8 + 88) || (v10 = v8 - 256, v11 = *(_DWORD *)(result + 68) >> 7, v11 != *(_DWORD *)(v8 + 108)))
  {
LABEL_20:
    v3 = -300;
    goto LABEL_21;
  }
  v12 = 344;
  if (*(unsigned int *)(result + 4) < 0x158uLL)
    v12 = *(unsigned int *)(result + 4);
  result = (uint64_t)memchr((void *)(result + 88), 0, v12 - 88);
  if (!result)
    goto LABEL_2;
  v13 = ((v5 + 3) & 0x1FFFFFFFCLL) + v4;
  if (*(_DWORD *)v13 || *(_DWORD *)(v13 + 4) <= 0x1Fu)
  {
    v3 = -309;
    goto LABEL_21;
  }
  v15 = *(const audit_token_t **)(v4 + 28);
  v16 = *(_DWORD *)(v4 + 44);
  v17 = *(_DWORD *)(v10 + 348);
  v18 = *(_DWORD *)(v10 + 352);
  v19 = *(double *)(v10 + 356);
  v20 = *(CA::Mat4Impl **)(v4 + 56);
  v21 = *(_DWORD *)(v10 + 368);
  v22 = *(_OWORD *)(v13 + 36);
  v23[0] = *(_OWORD *)(v13 + 20);
  v23[1] = v22;
  result = CASRenderDisplayContextListSurface((const char *)(v4 + 88), v15, v9, v16, v17, v18, v20, v11, v19, v21, (unint64_t *)(a2 + 36), (CA::Render::Server *)v23);
  *(_DWORD *)(a2 + 32) = result;
  v14 = *MEMORY[0x1E0C804E8];
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 24) = v14;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_22:
  *(_QWORD *)(a2 + 24) = v14;
  return result;
}

uint64_t _XRenderDisplayContextListShmem(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const audit_token_t *v15;
  int v16;
  int v17;
  uint64_t v18;
  mem_entry_name_port_t v19;
  mach_vm_size_t v20;
  uint64_t v21;
  int v22;
  double v23;
  CA::Mat4Impl *v24;
  unsigned int v25;
  __int128 v26;
  _OWORD v27[2];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) == 0)
    goto LABEL_2;
  v4 = result;
  v3 = -304;
  if (*(_DWORD *)(result + 24) != 3)
    goto LABEL_21;
  v5 = *(unsigned int *)(result + 4);
  if (v5 < 0x98 || v5 > 0x198)
    goto LABEL_21;
  if (*(_BYTE *)(result + 39) != 1
    || *(unsigned __int16 *)(result + 54) << 16 != 1114112
    || *(_BYTE *)(result + 67) != 1)
  {
    goto LABEL_20;
  }
  v6 = *(_DWORD *)(result + 84);
  if (v6 > 0x100)
  {
LABEL_2:
    v3 = -304;
LABEL_21:
    *(_DWORD *)(a2 + 32) = v3;
    v14 = *MEMORY[0x1E0C804E8];
    goto LABEL_22;
  }
  v3 = -304;
  if ((int)v5 - 152 < v6)
    goto LABEL_21;
  v7 = (v6 + 3) & 0xFFFFFFFC;
  if ((_DWORD)v5 != v7 + 152)
    goto LABEL_21;
  v8 = result + v7;
  v9 = *(_DWORD *)(result + 40) >> 2;
  if (v9 != *(_DWORD *)(v8 + 88) || (v10 = v8 - 256, v11 = *(_DWORD *)(result + 68) >> 7, v11 != *(_DWORD *)(v8 + 144)))
  {
LABEL_20:
    v3 = -300;
    goto LABEL_21;
  }
  v12 = 344;
  if (*(unsigned int *)(result + 4) < 0x158uLL)
    v12 = *(unsigned int *)(result + 4);
  result = (uint64_t)memchr((void *)(result + 88), 0, v12 - 88);
  if (!result)
    goto LABEL_2;
  v13 = ((v5 + 3) & 0x1FFFFFFFCLL) + v4;
  if (*(_DWORD *)v13 || *(_DWORD *)(v13 + 4) <= 0x1Fu)
  {
    v3 = -309;
    goto LABEL_21;
  }
  v15 = *(const audit_token_t **)(v4 + 28);
  v16 = *(_DWORD *)(v10 + 348);
  v17 = *(_DWORD *)(v10 + 352);
  v18 = *(_QWORD *)(v10 + 356);
  v19 = *(_DWORD *)(v4 + 44);
  v20 = *(_QWORD *)(v10 + 364);
  v21 = *(_QWORD *)(v10 + 380);
  v22 = *(_DWORD *)(v10 + 388);
  v23 = *(double *)(v10 + 392);
  v24 = *(CA::Mat4Impl **)(v4 + 56);
  v25 = *(_DWORD *)(v10 + 404);
  v26 = *(_OWORD *)(v13 + 36);
  v27[0] = *(_OWORD *)(v13 + 20);
  v27[1] = v26;
  result = CASRenderDisplayContextListShmem((const char *)(v4 + 88), v15, v9, v16, v17, v18, v19, v20, v23, v21, SHIDWORD(v21), v22, v24, v11, v25, (unint64_t *)(a2 + 36), (CA::Render::Server *)v27);
  *(_DWORD *)(a2 + 32) = result;
  v14 = *MEMORY[0x1E0C804E8];
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 24) = v14;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_22:
  *(_QWORD *)(a2 + 24) = v14;
  return result;
}

uint64_t _XCaptureDisplayLayer(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v4;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  CA::Render::Context *v12;
  uint64_t v13;
  _anonymous_namespace_ *v14;
  int v15;
  int v16;
  int v17;
  double v18;
  unsigned int v19;
  __int128 v20;
  _OWORD v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a1 & 0x80000000) == 0)
  {
LABEL_2:
    result = 4294966992;
    goto LABEL_3;
  }
  v6 = *(_DWORD *)(a1 + 24);
  result = 4294966992;
  if (v6 == 1)
  {
    v7 = *(unsigned int *)(a1 + 4);
    if (v7 >= 0xDC && v7 <= 0x1DC)
    {
      if (*(unsigned __int16 *)(a1 + 38) << 16 != 1114112)
      {
        result = 4294966996;
        goto LABEL_3;
      }
      v8 = *(_DWORD *)(a1 + 52);
      if (v8 <= 0x100 && (int)v7 - 220 >= v8)
      {
        v9 = (v8 + 3) & 0xFFFFFFFC;
        if ((_DWORD)v7 == v9 + 220)
        {
          v10 = 312;
          if (*(unsigned int *)(a1 + 4) < 0x138uLL)
            v10 = *(unsigned int *)(a1 + 4);
          if (!memchr((void *)(a1 + 56), 0, v10 - 56))
            goto LABEL_2;
          v11 = ((v7 + 3) & 0x1FFFFFFFCLL) + a1;
          if (*(_DWORD *)v11 || *(_DWORD *)(v11 + 4) < 0x20u)
          {
            result = 4294966987;
          }
          else
          {
            v12 = (CA::Render::Context *)*(unsigned int *)(a1 + v9 + 56);
            v13 = *(_QWORD *)(a1 + v9 + 60);
            v14 = (_anonymous_namespace_ *)*(unsigned int *)(a1 + v9 + 68);
            v15 = *(_DWORD *)(a1 + 28);
            v16 = *(_DWORD *)(a1 + v9 + 72);
            v17 = *(_DWORD *)(a1 + v9 + 76);
            v18 = *(double *)(a1 + v9 + 80);
            v19 = *(_DWORD *)(a1 + v9 + 216);
            v20 = *(_OWORD *)(v11 + 36);
            v21[0] = *(_OWORD *)(v11 + 20);
            v21[1] = v20;
            result = CASCaptureDisplayLayer((const char *)(a1 + 56), v12, v13, v14, v15, v16, v17, (CA::Mat4Impl *)(a1 + v9 + 88), v18, v19, (CA::Render::Server *)v21);
          }
        }
      }
    }
  }
LABEL_3:
  v4 = (_QWORD *)MEMORY[0x1E0C804E8];
  *(_DWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 24) = *v4;
  return result;
}

uint64_t _XCaptureDisplay(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v4;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  _anonymous_namespace_ *v14;
  _anonymous_namespace_ *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  double v20;
  int v21;
  unsigned int v22;
  __int128 v23;
  _OWORD v24[2];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a1 & 0x80000000) == 0)
  {
LABEL_2:
    result = 4294966992;
    goto LABEL_3;
  }
  v6 = *(_DWORD *)(a1 + 24);
  result = 4294966992;
  if (v6 == 2)
  {
    v7 = *(unsigned int *)(a1 + 4);
    if (v7 >= 0xEC && v7 <= 0x1EC)
    {
      if (*(_BYTE *)(a1 + 39) != 1 || *(unsigned __int16 *)(a1 + 54) << 16 != 1114112)
        goto LABEL_19;
      v8 = *(_DWORD *)(a1 + 68);
      if (v8 > 0x100)
        goto LABEL_3;
      if ((int)v7 - 236 < v8)
        goto LABEL_3;
      v9 = (v8 + 3) & 0xFFFFFFFC;
      if ((_DWORD)v7 != v9 + 236)
        goto LABEL_3;
      v10 = a1 + v9;
      v11 = (unsigned int *)(*(_DWORD *)(a1 + 40) >> 2);
      if ((_DWORD)v11 != *(_DWORD *)(v10 + 72))
      {
LABEL_19:
        result = 4294966996;
        goto LABEL_3;
      }
      v12 = 328;
      if (*(unsigned int *)(a1 + 4) < 0x148uLL)
        v12 = *(unsigned int *)(a1 + 4);
      if (!memchr((void *)(a1 + 72), 0, v12 - 72))
        goto LABEL_2;
      v13 = ((v7 + 3) & 0x1FFFFFFFCLL) + a1;
      if (*(_DWORD *)v13 || *(_DWORD *)(v13 + 4) < 0x20u)
      {
        result = 4294966987;
      }
      else
      {
        v14 = *(_anonymous_namespace_ **)(a1 + 28);
        v15 = (_anonymous_namespace_ *)*(unsigned int *)(v10 + 76);
        v16 = *(_DWORD *)(v10 + 80);
        v17 = *(_DWORD *)(a1 + 44);
        v18 = *(_DWORD *)(v10 + 84);
        v19 = *(_DWORD *)(v10 + 88);
        v20 = *(double *)(v10 + 92);
        v21 = *(_DWORD *)(v10 + 228);
        v22 = *(_DWORD *)(v10 + 232);
        v23 = *(_OWORD *)(v13 + 36);
        v24[0] = *(_OWORD *)(v13 + 20);
        v24[1] = v23;
        result = CASCaptureDisplay((const char *)(a1 + 72), v14, v11, v15, v16, v17, v18, v19, v20, (CA::Mat4Impl *)(v10 + 100), v21, v22, (CA::Render::Server *)v24);
      }
    }
  }
LABEL_3:
  v4 = (_QWORD *)MEMORY[0x1E0C804E8];
  *(_DWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 24) = *v4;
  return result;
}

uint64_t _XCaptureDisplayContextList(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  const audit_token_t *v16;
  _anonymous_namespace_ *v17;
  int v18;
  int v19;
  int v20;
  double v21;
  CA::Mat4Impl *v22;
  unsigned int v23;
  __int128 v24;
  _OWORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a1 & 0x80000000) == 0)
  {
LABEL_2:
    result = 4294966992;
    goto LABEL_21;
  }
  v5 = *(_DWORD *)(a1 + 24);
  result = 4294966992;
  if (v5 == 3)
  {
    v6 = *(unsigned int *)(a1 + 4);
    if (v6 >= 0x78 && v6 <= 0x178)
    {
      if (*(_BYTE *)(a1 + 39) != 1 || *(unsigned __int16 *)(a1 + 54) << 16 != 1114112 || *(_BYTE *)(a1 + 67) != 1)
        goto LABEL_20;
      v7 = *(_DWORD *)(a1 + 84);
      if (v7 > 0x100)
        goto LABEL_21;
      if ((int)v6 - 120 < v7)
        goto LABEL_21;
      v8 = (v7 + 3) & 0xFFFFFFFC;
      if ((_DWORD)v6 != v8 + 120)
        goto LABEL_21;
      v9 = a1 + v8;
      v10 = *(_DWORD *)(a1 + 40) >> 2;
      if (v10 != *(_DWORD *)(v9 + 88)
        || (v11 = v9 - 256, v12 = *(_DWORD *)(a1 + 68) >> 7, v12 != *(_DWORD *)(v9 + 112)))
      {
LABEL_20:
        result = 4294966996;
        goto LABEL_21;
      }
      v13 = 344;
      if (*(unsigned int *)(a1 + 4) < 0x158uLL)
        v13 = *(unsigned int *)(a1 + 4);
      if (!memchr((void *)(a1 + 88), 0, v13 - 88))
        goto LABEL_2;
      v14 = ((v6 + 3) & 0x1FFFFFFFCLL) + a1;
      if (*(_DWORD *)v14 || *(_DWORD *)(v14 + 4) < 0x20u)
      {
        result = 4294966987;
      }
      else
      {
        v16 = *(const audit_token_t **)(a1 + 28);
        v17 = (_anonymous_namespace_ *)*(unsigned int *)(v11 + 348);
        v18 = *(_DWORD *)(a1 + 44);
        v19 = *(_DWORD *)(v11 + 352);
        v20 = *(_DWORD *)(v11 + 356);
        v21 = *(double *)(v11 + 360);
        v22 = *(CA::Mat4Impl **)(a1 + 56);
        v23 = *(_DWORD *)(v11 + 372);
        v24 = *(_OWORD *)(v14 + 36);
        v25[0] = *(_OWORD *)(v14 + 20);
        v25[1] = v24;
        result = CASCaptureDisplayContextList((const char *)(a1 + 88), v16, v10, v17, v18, v19, v20, v22, v21, v12, v23, (CA::Render::Server *)v25);
      }
    }
  }
LABEL_21:
  v15 = (_QWORD *)MEMORY[0x1E0C804E8];
  *(_DWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 24) = *v15;
  return result;
}

void _XSetCacheAsynchronousSurfaces(uint64_t a1, uint64_t a2)
{
  int v3;
  _QWORD *v4;
  int v5;
  __int128 v6;
  const audit_token_t *v7;
  const audit_token_t *v8;
  int v9;
  _OWORD v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) < 0x20u)
  {
    v3 = -309;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 32);
    v6 = *(_OWORD *)(a1 + 72);
    v10[0] = *(_OWORD *)(a1 + 56);
    v10[1] = v6;
    v9 = v5;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, (const audit_token_t *)a2) & 0x80) != 0
      || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v7) & 0x20000) != 0)
    {
      v3 = -81182719;
    }
    else if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v8) & 0x200) != 0)
    {
      CA::Render::post_notification(0x18u, 0, (uint64_t)&v9, 0);
      v3 = 0;
    }
    else
    {
      v3 = 5;
    }
  }
  v4 = (_QWORD *)MEMORY[0x1E0C804E8];
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *v4;
}

void _XFlushIRDC(_DWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  __int128 v6;
  const audit_token_t *v7;
  const audit_token_t *v8;
  int v9;
  _OWORD v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v5 = -304;
    goto LABEL_7;
  }
  v4 = a1[6];
  v3 = a1 + 6;
  if (v4 || v3[1] <= 0x1Fu)
  {
    v5 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v5;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return;
  }
  v6 = *(_OWORD *)(v3 + 9);
  v10[0] = *(_OWORD *)(v3 + 5);
  v10[1] = v6;
  if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, (const audit_token_t *)a2) & 0x80) != 0
    || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v7) & 0x20000) != 0)
  {
    v9 = -81182719;
  }
  else if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v8) & 0x200) != 0)
  {
    CA::Render::post_notification(0x19u, 0, 0, 0);
    v9 = 0;
  }
  else
  {
    v9 = 5;
  }
  *(_DWORD *)(a2 + 32) = v9;
}

void _XGetDisplayEDRState(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  __int128 v5;
  const audit_token_t *v6;
  int v7;
  mach_port_t *v8;
  _DWORD v9[2];
  mach_port_t *object_handle;
  _OWORD v11[2];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return;
  }
  *(_QWORD *)(a2 + 32) = 0x13000000000000;
  v4 = *(_DWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 72);
  v11[0] = *(_OWORD *)(a1 + 56);
  v11[1] = v5;
  if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v11, (const audit_token_t *)a2) & 0x80) != 0
    || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v11, v6) & 0x20000) != 0)
  {
    v3 = -81182719;
    goto LABEL_7;
  }
  v9[0] = 0;
  object_handle = 0;
  v9[1] = v4;
  CA::Render::post_notification(0x1Cu, 0, (uint64_t)v9, 0);
  if (!LOBYTE(v9[0]))
  {
    v3 = 56;
    goto LABEL_7;
  }
  if (object_handle)
  {
    v7 = CA::Render::Shmem::port(object_handle);
    v8 = object_handle;
    *(_DWORD *)(a2 + 28) = v7;
    if (v8)
      v8 = (mach_port_t *)*((_QWORD *)v8 + 2);
  }
  else
  {
    v8 = 0;
    *(_DWORD *)(a2 + 28) = 0;
  }
  *(_QWORD *)(a2 + 40) = *MEMORY[0x1E0C804E8];
  *(_QWORD *)(a2 + 48) = v8;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
}

void _XGetLogicalBounds(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  __int128 v5;
  const audit_token_t *v6;
  vm_address_t v7;
  __int128 v8;
  int v9;
  vm_address_t address;
  _OWORD v11[3];
  _OWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  v4 = *(_DWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 72);
  v12[0] = *(_OWORD *)(a1 + 56);
  v12[1] = v5;
  if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v12, (const audit_token_t *)a2) & 0x80) != 0
    || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v12, v6) & 0x20000) != 0)
  {
    v3 = -81182719;
    goto LABEL_7;
  }
  memset(v11, 0, 40);
  DWORD1(v11[0]) = v4;
  CA::Render::post_notification(0x1Du, 0, (uint64_t)v11, 0);
  if (!LOBYTE(v11[0]))
  {
    v3 = 56;
    goto LABEL_7;
  }
  address = 0;
  vm_allocate(*MEMORY[0x1E0C83DA0], &address, (*MEMORY[0x1E0C85AD8] + 31) & -*MEMORY[0x1E0C85AD8], 1);
  v7 = address;
  if (address)
  {
    v8 = *(_OWORD *)((char *)&v11[1] + 8);
    *(_OWORD *)address = *(_OWORD *)((char *)v11 + 8);
    *(_OWORD *)(v7 + 16) = v8;
    v9 = 32;
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)(a2 + 28) = v7;
  *(_DWORD *)(a2 + 52) = v9;
  *(_DWORD *)(a2 + 40) = v9;
  *(_QWORD *)(a2 + 44) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
}

float _XGetAutoLuminanceBoost(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  __int128 v5;
  const audit_token_t *v6;
  float result;
  _DWORD v8[2];
  float v9;
  _OWORD v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    v3 = -309;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 32);
    v5 = *(_OWORD *)(a1 + 72);
    v10[0] = *(_OWORD *)(a1 + 56);
    v10[1] = v5;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, (const audit_token_t *)a2) & 0x80) != 0
      || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v6) & 0x20000) != 0)
    {
      v3 = -81182719;
    }
    else
    {
      v8[0] = 0;
      v8[1] = v4;
      v9 = 0.0;
      CA::Render::post_notification(0x1Eu, 0, (uint64_t)v8, 0);
      if (LOBYTE(v8[0]))
      {
        result = v9;
        *(float *)(a2 + 36) = v9;
        *(_DWORD *)(a2 + 32) = 0;
        *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
        *(_DWORD *)(a2 + 4) = 40;
        return result;
      }
      v3 = 56;
    }
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

void _XGetVsyncOffSupportsRGBCompression(_DWORD *a1, uint64_t a2)
{
  int v3;
  char v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v3 = -304;
  }
  else
  {
    if (!a1[6] && a1[7] > 0x1Fu)
    {
      v4 = 0;
      CA::Render::post_notification(0x1Fu, 0, (uint64_t)&v4, 0);
      *(_BYTE *)(a2 + 36) = v4;
      *(_DWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
      *(_DWORD *)(a2 + 4) = 40;
      return;
    }
    v3 = -309;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
}

uint64_t _XSetDisplayProperties(uint64_t result, uint64_t a2)
{
  int v3;
  int v4;
  const audit_token_t *v5;
  int v6;
  uint64_t v7;
  int v8;
  char v9;
  unsigned int v10;
  float v11;
  float v12;
  int v13;
  int v14;
  unsigned __int8 v15;
  unsigned int v16;
  mach_port_name_t v17;
  __int128 v18;
  _OWORD v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 100)
  {
    if (*(unsigned __int16 *)(result + 38) << 16 == 1114112)
    {
      if (!*(_DWORD *)(result + 100) && *(_DWORD *)(result + 104) > 0x1Fu)
      {
        v4 = *(_DWORD *)(result + 12);
        v5 = (const audit_token_t *)*(unsigned int *)(result + 48);
        v6 = *(_DWORD *)(result + 52);
        v7 = *(_QWORD *)(result + 56);
        v8 = *(_DWORD *)(result + 64);
        v9 = *(_BYTE *)(result + 68);
        v10 = *(_DWORD *)(result + 72);
        v11 = *(float *)(result + 76);
        v12 = *(float *)(result + 80);
        v13 = *(_DWORD *)(result + 84);
        v14 = *(_DWORD *)(result + 88);
        v15 = *(_BYTE *)(result + 92);
        v16 = *(_DWORD *)(result + 96);
        v17 = *(_DWORD *)(result + 28);
        v18 = *(_OWORD *)(result + 136);
        v19[0] = *(_OWORD *)(result + 120);
        v19[1] = v18;
        result = CASSetDisplayProperties(v4, v5, v6, v7, v8, v9, v10, v13, v11, v12, v14, v15, v16, v17, (CA::Render::Server *)v19);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
      v3 = -309;
    }
    else
    {
      v3 = -300;
    }
  }
  else
  {
    v3 = -304;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

uint64_t _XSetDisplayPresetProperties(uint64_t result, uint64_t a2)
{
  int v3;
  int v4;
  const audit_token_t *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  mach_port_name_t v10;
  __int128 v11;
  _OWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 88)
  {
    if (*(unsigned __int16 *)(result + 38) << 16 == 1114112)
    {
      if (!*(_DWORD *)(result + 88) && *(_DWORD *)(result + 92) > 0x1Fu)
      {
        v4 = *(_DWORD *)(result + 48);
        v5 = (const audit_token_t *)*(unsigned __int8 *)(result + 52);
        v6 = *(double *)(result + 56);
        v7 = *(double *)(result + 64);
        v8 = *(double *)(result + 72);
        v9 = *(double *)(result + 80);
        v10 = *(_DWORD *)(result + 28);
        v11 = *(_OWORD *)(result + 124);
        v12[0] = *(_OWORD *)(result + 108);
        v12[1] = v11;
        result = CASSetDisplayPresetProperties(v4, v5, v10, (CA::Render::Server *)v12, v6, v7, v8, v9);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
      v3 = -309;
    }
    else
    {
      v3 = -300;
    }
  }
  else
  {
    v3 = -304;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

void _XSetDisplayUserPreferences(uint64_t a1, uint64_t a2)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  const audit_token_t *v8;
  int v9;
  uint64_t v10;
  int v11;
  _OWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 44)
  {
    v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 44) || *(_DWORD *)(a1 + 48) < 0x20u)
  {
    v3 = -309;
  }
  else
  {
    v3 = -81182719;
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_DWORD *)(a1 + 40);
    v7 = *(_OWORD *)(a1 + 80);
    v12[0] = *(_OWORD *)(a1 + 64);
    v12[1] = v7;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v12, (const audit_token_t *)a2) & 0x80) == 0
      && (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v12, v8) & 0x20000) == 0)
    {
      v9 = 0;
      v10 = v5;
      v11 = v6;
      CA::Render::post_notification(0x22u, 0, (uint64_t)&v9, 0);
      if ((_BYTE)v9)
        v3 = 0;
      else
        v3 = 56;
    }
  }
  v4 = (_QWORD *)MEMORY[0x1E0C804E8];
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *v4;
}

uint64_t _XSetDisplayLatency(int *a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  double v14;
  __int128 v15;
  _QWORD *v16;
  _OWORD v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  result = 4294966992;
  if ((v4 & 0x80000000) == 0)
  {
    v6 = a1[1];
    if (v6 >= 0x3C && v6 <= 0x7C)
    {
      v7 = a1[10];
      if (v7 <= 0x40)
      {
        v8 = (v7 + 3) & 0xFFFFFFFC;
        if ((int)v6 - 60 >= v7 && (_DWORD)v6 == v8 + 60)
        {
          v10 = 108;
          if (a1[1] < 0x6CuLL)
            v10 = a1[1];
          if (memchr(a1 + 11, 0, v10 - 44))
          {
            v11 = (uint64_t)a1 + ((v6 + 3) & 0x1FFFFFFFCLL);
            if (*(_DWORD *)v11 || *(_DWORD *)(v11 + 4) < 0x20u)
            {
              result = 4294966987;
            }
            else
            {
              v12 = a1[8];
              v13 = *(_QWORD *)((char *)a1 + v8 + 44);
              v14 = *(double *)((char *)a1 + v8 + 52);
              v15 = *(_OWORD *)(v11 + 36);
              v17[0] = *(_OWORD *)(v11 + 20);
              v17[1] = v15;
              result = CASSetDisplayLatency(v12, (const audit_token_t *)(a1 + 11), v13, (CA::Render::Server *)v17, v14);
            }
          }
          else
          {
            result = 4294966992;
          }
        }
      }
    }
  }
  v16 = (_QWORD *)MEMORY[0x1E0C804E8];
  *(_DWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 24) = *v16;
  return result;
}

uint64_t _XRegisterForDisallowedLayersNotification(uint64_t result, uint64_t a2)
{
  int v3;
  mach_port_name_t v4;
  const audit_token_t *v5;
  __int128 v6;
  _OWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 52)
  {
    if (*(unsigned __int16 *)(result + 38) << 16 == 1114112)
    {
      if (!*(_DWORD *)(result + 52) && *(_DWORD *)(result + 56) > 0x1Fu)
      {
        v4 = *(_DWORD *)(result + 28);
        v5 = (const audit_token_t *)*(unsigned int *)(result + 48);
        v6 = *(_OWORD *)(result + 88);
        v7[0] = *(_OWORD *)(result + 72);
        v7[1] = v6;
        result = CASRegisterForDisallowedLayersNotification(v4, v5, (CA::Render::Server *)v7);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
      v3 = -309;
    }
    else
    {
      v3 = -300;
    }
  }
  else
  {
    v3 = -304;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

uint64_t _XUnregisterForDisallowedLayersNotification(uint64_t result, uint64_t a2)
{
  int v3;
  int v4;
  const audit_token_t *v5;
  int v6;
  __int128 v7;
  _OWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 52)
  {
    if (*(unsigned __int16 *)(result + 38) << 16 == 1114112)
    {
      if (!*(_DWORD *)(result + 52) && *(_DWORD *)(result + 56) > 0x1Fu)
      {
        v4 = *(_DWORD *)(result + 12);
        v5 = (const audit_token_t *)*(unsigned int *)(result + 28);
        v6 = *(_DWORD *)(result + 48);
        v7 = *(_OWORD *)(result + 88);
        v8[0] = *(_OWORD *)(result + 72);
        v8[1] = v7;
        result = CASUnregisterForDisallowedLayersNotification(v4, v5, v6, (CA::Render::Server *)v8);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
      v3 = -309;
    }
    else
    {
      v3 = -300;
    }
  }
  else
  {
    v3 = -304;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

void _XFlipBookRender(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  int v8;
  _QWORD v9[10];
  _OWORD v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 52)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 52) || *(_DWORD *)(a1 + 56) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return;
  }
  *(_QWORD *)(a2 + 32) = 0x11000000000000;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_DWORD *)(a1 + 48);
  v7 = *(_OWORD *)(a1 + 88);
  v10[0] = *(_OWORD *)(a1 + 72);
  v10[1] = v7;
  if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, (const audit_token_t *)a2) & 0x40) == 0)
  {
    v3 = 53;
    goto LABEL_7;
  }
  memset(&v9[2], 0, 64);
  v9[0] = v4;
  v9[1] = v5;
  LODWORD(v9[2]) = v6;
  CA::Render::post_notification(0xDu, 0, (uint64_t)v9, 0);
  *(_DWORD *)(a2 + 48) = HIDWORD(v9[2]);
  *(_OWORD *)(a2 + 52) = *(_OWORD *)&v9[3];
  *(_QWORD *)(a2 + 68) = v9[5];
  *(_QWORD *)(a2 + 76) = v9[6];
  v8 = v9[7];
  *(_OWORD *)(a2 + 84) = *(_OWORD *)((char *)&v9[7] + 4);
  *(_QWORD *)(a2 + 40) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 100;
  *(_DWORD *)(a2 + 24) = 1;
  *(_DWORD *)(a2 + 28) = v8;
}

double _XFlipBookQueryFrame(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  __int128 v6;
  double result;
  _QWORD v8[2];
  __int128 v9;
  _OWORD v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 44)
  {
    v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 44) || *(_DWORD *)(a1 + 48) <= 0x1Fu)
  {
    v3 = -309;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 36);
    v6 = *(_OWORD *)(a1 + 80);
    v10[0] = *(_OWORD *)(a1 + 64);
    v10[1] = v6;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, (const audit_token_t *)a2) & 0x40) != 0)
    {
      v9 = 0u;
      v8[0] = v4;
      v8[1] = v5;
      CA::Render::post_notification(0xEu, 0, (uint64_t)v8, 0);
      result = *(double *)&v9;
      *(_OWORD *)(a2 + 36) = v9;
      *(_DWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
      *(_DWORD *)(a2 + 4) = 52;
      return result;
    }
    v3 = 53;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

void _XFlipBookQueryMemoryUsage(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    v3 = -309;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 32);
    v5 = *(_OWORD *)(a1 + 72);
    v8[0] = *(_OWORD *)(a1 + 56);
    v8[1] = v5;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v8, (const audit_token_t *)a2) & 0x40) != 0)
    {
      v7 = 0;
      v6 = v4;
      CA::Render::post_notification(0xFu, 0, (uint64_t)&v6, 0);
      *(_QWORD *)(a2 + 36) = v7;
      *(_DWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
      *(_DWORD *)(a2 + 4) = 44;
      return;
    }
    v3 = 53;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
}

void _XFlipBookCopyCurrentFrame(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    v3 = -309;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0x11000000000000;
    v4 = *(_DWORD *)(a1 + 32);
    v5 = *(_OWORD *)(a1 + 72);
    v10[0] = *(_OWORD *)(a1 + 56);
    v10[1] = v5;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, (const audit_token_t *)a2) & 0x40) != 0)
    {
      v8 = 0;
      v7 = v4;
      v9 = a2 + 28;
      CA::Render::post_notification(0x10u, 0, (uint64_t)&v7, 0);
      v6 = v8;
      *(_QWORD *)(a2 + 40) = *MEMORY[0x1E0C804E8];
      *(_QWORD *)(a2 + 48) = v6;
      *(_DWORD *)a2 |= 0x80000000;
      *(_DWORD *)(a2 + 4) = 56;
      *(_DWORD *)(a2 + 24) = 1;
      return;
    }
    v3 = 53;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
}

