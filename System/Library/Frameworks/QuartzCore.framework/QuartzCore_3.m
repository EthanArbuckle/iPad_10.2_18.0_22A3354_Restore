CFDictionaryRef CA::SurfaceUtil::create_universal_plane_dict(unsigned int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  CFDictionaryRef v27;
  uint64_t i;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t valuePtr;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *values[20];
  void *keys[21];

  keys[20] = *(void **)MEMORY[0x1E0C80C00];
  v42 = a4;
  v43 = a3;
  v7 = *a6;
  valuePtr = 5;
  v41 = v7;
  if (a1)
    v8 = 4;
  else
    v8 = 3;
  v38 = a1;
  v39 = v8;
  v9 = -16;
  if (a2)
    v9 = -32;
  v10 = 16;
  v11 = 32;
  if (a2)
    v10 = 32;
  v12 = 8;
  if (!a2)
    v11 = 8;
  v36 = v11;
  v37 = v10;
  v13 = 4;
  if (a2)
  {
    v13 = 5;
    v12 = 10;
    v14 = 5;
  }
  else
  {
    v14 = 3;
  }
  v34 = ((v10 - 1 + a4) & (unint64_t)v9) >> v13;
  v35 = ((v10 - 1 + a3) & (unint64_t)v9) >> v13;
  v33 = ((unint64_t)(a5 << v12) >> 3) & 0x1FFFFFE0;
  v32 = v35 * v33;
  v15 = v34 * v35 * v33 + 127;
  v16 = vcvtps_s32_f32(log2f((float)v35));
  v31 = (((((uint64_t)(1 << v16 << vcvtps_s32_f32(log2f((float)v34))) << v14) + 127) & 0xFFFFFFFFFFFFFF80) + v15) & 0xFFFFFFFFFFFFFF80;
  *a6 = v31 + v7;
  v30 = (v15 & 0xFFFFFFFFFFFFFF80) + v7;
  v17 = (void *)*MEMORY[0x1E0CBC0F8];
  keys[0] = *(void **)MEMORY[0x1E0CBBED8];
  keys[1] = v17;
  v18 = (void *)*MEMORY[0x1E0CBC168];
  keys[2] = *(void **)MEMORY[0x1E0CBC160];
  keys[3] = v18;
  v19 = (void *)*MEMORY[0x1E0CBC090];
  keys[4] = *(void **)MEMORY[0x1E0CBC088];
  keys[5] = v19;
  v20 = (void *)*MEMORY[0x1E0CBC098];
  keys[6] = *(void **)MEMORY[0x1E0CBC0B0];
  keys[7] = v20;
  v21 = (void *)*MEMORY[0x1E0CBC0D0];
  keys[8] = *(void **)MEMORY[0x1E0CBC0A8];
  keys[9] = v21;
  v22 = (void *)*MEMORY[0x1E0CBC0E0];
  keys[10] = *(void **)MEMORY[0x1E0CBC0D8];
  keys[11] = v22;
  v23 = (void *)*MEMORY[0x1E0CBC110];
  keys[12] = *(void **)MEMORY[0x1E0CBC0E8];
  keys[13] = v23;
  v24 = (void *)*MEMORY[0x1E0CBC178];
  keys[14] = *(void **)MEMORY[0x1E0CBC108];
  keys[15] = v24;
  v25 = (void *)*MEMORY[0x1E0CBC180];
  keys[16] = *(void **)MEMORY[0x1E0CBC140];
  keys[17] = v25;
  v26 = (void *)*MEMORY[0x1E0CBC0F0];
  keys[18] = *(void **)MEMORY[0x1E0CBC148];
  keys[19] = v26;
  values[0] = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
  values[1] = CFNumberCreate(0, kCFNumberCFIndexType, &v39);
  values[2] = CFNumberCreate(0, kCFNumberCFIndexType, &v41);
  values[3] = CFNumberCreate(0, kCFNumberCFIndexType, &v31);
  values[4] = CFNumberCreate(0, kCFNumberCFIndexType, &v36);
  values[5] = CFNumberCreate(0, kCFNumberCFIndexType, &v33);
  values[6] = CFNumberCreate(0, kCFNumberCFIndexType, &v33);
  values[7] = CFNumberCreate(0, kCFNumberCFIndexType, &v32);
  values[8] = CFNumberCreate(0, kCFNumberCFIndexType, &v32);
  values[9] = CFNumberCreate(0, kCFNumberCFIndexType, &v41);
  values[10] = CFNumberCreate(0, kCFNumberCFIndexType, &v30);
  values[11] = CFNumberCreate(0, kCFNumberCFIndexType, &v37);
  values[12] = CFNumberCreate(0, kCFNumberCFIndexType, &v37);
  values[13] = CFNumberCreate(0, kCFNumberCFIndexType, &v37);
  values[14] = CFNumberCreate(0, kCFNumberCFIndexType, &v37);
  values[15] = CFNumberCreate(0, kCFNumberCFIndexType, &v43);
  values[16] = CFNumberCreate(0, kCFNumberCFIndexType, &v42);
  values[17] = CFNumberCreate(0, kCFNumberCFIndexType, &v35);
  values[18] = CFNumberCreate(0, kCFNumberCFIndexType, &v34);
  values[19] = CFNumberCreate(0, kCFNumberCFIndexType, &v38);
  v27 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 20, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  for (i = 0; i != 20; ++i)
    CFRelease(values[i]);
  return v27;
}

NSObject *CACreateQueueWithWorkloop(const char *a1)
{
  NSObject *inactive;

  inactive = dispatch_workloop_create_inactive(a1);
  dispatch_set_qos_class_fallback();
  dispatch_workloop_set_scheduler_priority();
  dispatch_activate(inactive);
  return inactive;
}

uint64_t ___ZN4CAML12_GLOBAL__N_112set_propertyEPNS_7ContextEPNS_5StateE_block_invoke()
{
  uint64_t result;

  result = CAInternAtomWithCString("delegate");
  return result;
}

dispatch_queue_t ___ZN2CA2CGL13release_queueEv_block_invoke()
{
  NSObject *v0;
  dispatch_queue_t result;

  v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  result = dispatch_queue_create("CA::CG::DeallocQueue", v0);
  CA::CG::release_queue(void)::queue = (uint64_t)result;
  return result;
}

_QWORD *CA::OGL::MetalContext::create_vertex_shader(void **this, const CA::OGL::MetalContext::VertexShader::Spec *a2, int a3)
{
  void *v5;
  uint64_t v6;
  __CFString *v7;
  void *v8;
  __int16 v9;
  uint64_t v10;
  char v11;
  char v12;
  void *v13;
  uint64_t v14;
  char i;
  void *shader_function;
  uint64_t v17;
  const char *v18;
  const char *v19;
  _BOOL4 v20;
  NSObject *v21;
  malloc_zone_t *malloc_zone;
  _QWORD *result;
  NSObject *v24;
  id v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  char *v30;
  char __str[2048];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = (void *)CA::OGL::MetalContext::VertexShader::Spec::encode_segment(a2);
  v6 = objc_msgSend(CA::OGL::MetalContext::vertex_shader_type_info[3 * (*((_WORD *)a2 + 1) & 0x1F) + 1], "stringByAppendingString:", CFSTR("_lph"));
  if (v6)
  {
    v7 = (__CFString *)v6;
    v8 = 0;
  }
  else
  {
    v7 = off_1E15A6510[((unint64_t)*((unsigned __int16 *)a2 + 1) >> 7) & 1];
    v8 = (void *)objc_opt_new();
    __str[0] = (*((_WORD *)a2 + 1) & 0x80) != 0;
    objc_msgSend(CFSTR("fc_generic"), "UTF8String");
    objc_msgSend(v8, "setConstantValue:type:withName:", __str, 53, CFSTR("fc_generic"));
    __str[0] = (*((_BYTE *)a2 + 2) >> 5) & 3;
    objc_msgSend(CFSTR("fc_vertex_layout"), "UTF8String");
    objc_msgSend(v8, "setConstantValue:type:withName:", __str, 49, CFSTR("fc_vertex_layout"));
    v9 = *((_WORD *)a2 + 1);
    if ((v9 & 0x80) != 0)
    {
      __str[0] = (v9 & 0x200) != 0;
      objc_msgSend(CFSTR("fc_base_color"), "UTF8String");
      objc_msgSend(v8, "setConstantValue:type:withName:", __str, 53, CFSTR("fc_base_color"));
    }
    else
    {
      v10 = 0;
      v11 = 1;
      do
      {
        v12 = v11;
        v13 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("fc_texcoord_count%d"), v10);
        __str[0] = *((_BYTE *)a2 + v10) & 3;
        objc_msgSend(v13, "UTF8String");
        objc_msgSend(v8, "setConstantValue:type:withName:", __str, 49, v13);
        v11 = 0;
        v10 = 1;
      }
      while ((v12 & 1) != 0);
    }
  }
  if (v8)
    v14 = 6;
  else
    v14 = 1;
  for (i = 1; ; i = 0)
  {
    v26 = 0;
    shader_function = CA::OGL::MetalContext::load_shader_function((uint64_t)this, this[411], v7, v5, v8, a3, (uint64_t)&v26);
    if (shader_function)
      break;
    v17 = reason_messages[v14];
    bzero(__str, 0x800uLL);
    v18 = (const char *)-[__CFString UTF8String](v7, "UTF8String");
    v19 = (const char *)objc_msgSend(v5, "UTF8String");
    snprintf(__str, 0x800uLL, "function=%s spec=%s\n%s", v18, v19, (const char *)objc_msgSend((id)objc_msgSend(v26, "localizedDescription"), "UTF8String"));
    __str[2047] = 0;
    v20 = x_log_hook_p();
    if ((i & 1) == 0)
    {
      if (v20)
      {
        x_log_();
      }
      else
      {
        v24 = x_log_category_ogl_metal;
        if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v28 = v17;
          v29 = 2080;
          v30 = __str;
          _os_log_impl(&dword_184457000, v24, OS_LOG_TYPE_ERROR, "%s: %s\n", buf, 0x16u);
        }
      }
      strlen(__str);
      abort_with_payload();
      __break(1u);
    }
    if (v20)
    {
      x_log_();
    }
    else
    {
      v21 = x_log_category_ogl_metal;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315394;
        v28 = v17;
        v29 = 2080;
        v30 = __str;
        _os_log_impl(&dword_184457000, v21, OS_LOG_TYPE_FAULT, "%s: %s\n", buf, 0x16u);
      }
    }
  }
  objc_msgSend(shader_function, "setLabel:", objc_msgSend(CFSTR("com.apple.coreanimation.vert."), "stringByAppendingString:", v5));

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = malloc_type_zone_malloc(malloc_zone, 8uLL, 0x8BB15036uLL);
  if (result)
    *result = shader_function;
  return result;
}

uint64_t CA::OGL::MetalContext::VertexShader::Spec::encode_segment(CA::OGL::MetalContext::VertexShader::Spec *this)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  unsigned int v6;
  char *v7;
  int v8;
  _BYTE *v9;
  __int16 v10;
  int v11;
  char v13;
  _BYTE v14[21];

  *(_QWORD *)&v14[13] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v14[5] = 0;
  *(_QWORD *)v14 = 0;
  v13 = 86;
  v2 = *((_WORD *)this + 1) & 0x1F;
  if (v2 > 0x12)
    snprintf(v14, 3uLL, "%02d", v2);
  else
    *(_WORD *)v14 = *(_WORD *)CA::OGL::MetalContext::VertexShaderType_codes[*((_WORD *)this + 1) & 0x1F];
  v3 = *(_BYTE *)this & 3;
  v4 = *((_BYTE *)this + 1) & 3;
  if (v3 | v4)
  {
    v14[2] = 85;
    v14[3] = *CA::OGL::MetalContext::int_codes[v3];
    v14[4] = *CA::OGL::MetalContext::int_codes[v4];
    v5 = &v14[5];
  }
  else
  {
    v5 = &v14[2];
  }
  v6 = *((unsigned __int16 *)this + 1);
  if ((v6 & 0x60) != 0)
  {
    *v5 = 76;
    v7 = v5 + 1;
    v8 = (v6 >> 5) & 3;
    if (v8 == 3)
      snprintf(v7, 3uLL, "%02d", 3);
    else
      *(_WORD *)v7 = *(_WORD *)CA::OGL::MetalContext::VertexLayout_codes[v8];
    v5 += 3;
  }
  *v5 = 0;
  v9 = v5 + 1;
  v10 = *((_WORD *)this + 1);
  if ((v10 & 0x80) != 0)
  {
    *(_WORD *)v5 = 26456;
    v9 = v5 + 2;
    v10 = *((_WORD *)this + 1);
    v11 = 88;
    if ((v10 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
  v11 = 0;
  if ((*((_WORD *)this + 1) & 0x100) != 0)
  {
LABEL_16:
    v11 = 88;
    *v5 = 88;
    *v9++ = 104;
    v10 = *((_WORD *)this + 1);
  }
LABEL_17:
  if ((v10 & 0x200) != 0)
  {
    *v5 = 88;
    *v9++ = 98;
    v11 = *v5;
  }
  if (!v11)
    v9 = v5;
  *v9 = 0;
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", &v13);
}

unint64_t CAImageQueueGetVBLInfo(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  int *v4;
  int i;
  int v6;
  unint64_t result;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v4 = *(int **)(v3 + 24);
    for (i = 16; i; --i)
    {
      v6 = *v4;
      __dmb(0xBu);
      if (v4[15] >= a3)
        result = a3;
      else
        result = v4[15];
      if (result)
      {
        v8 = 0;
        do
        {
          v9 = a2 + v8 * 4;
          *(_QWORD *)(v9 + 8) = *(_QWORD *)&v4[v8 + 82];
          *(_QWORD *)v9 = *(_QWORD *)&v4[v8 + 80];
          *(_DWORD *)(v9 + 16) = v4[v8 + 84];
          v8 += 6;
        }
        while (6 * result != v8);
      }
      __dmb(0xBu);
      if (v6 == v4[1])
        return result;
    }
  }
  return 0;
}

__IOSurface *CAIOSurfaceCreateDefault(unsigned int a1, int a2, CA::Render *this)
{
  int v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (CADeviceUseCompression::once != -1)
    dispatch_once(&CADeviceUseCompression::once, &__block_literal_global_15);
  if (CADeviceUseCompression::enable_compression)
  {
    if (CADeviceSupportsUniversalCompression::once[0] != -1)
      dispatch_once(CADeviceSupportsUniversalCompression::once, &__block_literal_global_27);
    if (CADeviceSupportsUniversalCompression::universal)
      v6 = 3;
    else
      v6 = 2;
    this = (CA::Render *)CA::Render::fourcc_compressed_of_type(this, v6, 0);
  }
  v7 = *MEMORY[0x1E0C85AD8];
  v9 = xmmword_18474DEB0;
  v10 = 1;
  v11 = v7;
  v12 = 0;
  return CA::SurfaceUtil::CAIOSurfaceCreate(a1, a2, (uint64_t)this, 0, 0, 0, 0, &v9, 0);
}

os_log_t x_log_init(void)
{
  char *v0;
  os_log_t result;

  v0 = getenv("QUARTZCORE_LOG_FILE");
  if (v0 || (v0 = getenv("X_LOG_FILE")) != 0)
    x_set_log_filename(v0);
  atexit(x_close_log_file);
  x_log_category_api = (uint64_t)os_log_create("com.apple.coreanimation", "API");
  x_log_category_CADebug = (uint64_t)os_log_create("com.apple.coreanimation", "CADebug");
  x_log_category_ogl = (uint64_t)os_log_create("com.apple.coreanimation", "OGL");
  x_log_category_ogl_metal = (uint64_t)os_log_create("com.apple.coreanimation", "Metal");
  x_log_category_ogl_opengl = (uint64_t)os_log_create("com.apple.coreanimation", "OpenGL");
  x_log_category_render = (uint64_t)os_log_create("com.apple.coreanimation", "Render");
  x_log_category_states = (uint64_t)os_log_create("com.apple.coreanimation", "States");
  x_log_category_utilities = (uint64_t)os_log_create("com.apple.coreanimation", "Utilities");
  x_log_category_cg = (uint64_t)os_log_create("com.apple.coreanimation", "CG");
  x_log_category_windowserver = (uint64_t)os_log_create("com.apple.coreanimation", "WindowServer");
  x_log_category_color = (uint64_t)os_log_create("com.apple.coreanimation", "Color");
  x_log_category_frame_rate = (uint64_t)os_log_create("com.apple.coreanimation", "FrameRate");
  x_log_category_flipbook = (uint64_t)os_log_create("com.apple.coreanimation", "FlipBook");
  x_log_category_flatten = (uint64_t)os_log_create("com.apple.coreanimation", "FlattenCache");
  x_log_category_brightness = (uint64_t)os_log_create("com.apple.coreanimation", "Brightness");
  x_log_category_sharedevent = (uint64_t)os_log_create("com.apple.coreanimation", "SharedEvent");
  x_log_category_filmgrain = (uint64_t)os_log_create("com.apple.coreanimation", "FilmGrain");
  x_log_category_security_analysis = (uint64_t)os_log_create("com.apple.coreanimation", "SecurityAnalysis");
  x_log_category_occlusion = (uint64_t)os_log_create("com.apple.coreanimation", "Occlusion");
  x_log_category_display_state = (uint64_t)os_log_create("com.apple.coreanimation", "DisplayState");
  x_log_category_secure_indicators = (uint64_t)os_log_create("com.apple.coreanimation", "Indicators");
  result = os_log_create("com.apple.coreanimation", "VideoTonemapping");
  x_log_category_video_tonemapping = (uint64_t)result;
  return result;
}

void CA::CG::IOSurfaceContextDelegate::~IOSurfaceContextDelegate(CA::CG::IOSurfaceContextDelegate *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E1592F18;
  v2 = (unsigned int *)*((_QWORD *)this + 42);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (**(void (***)(unsigned int *))v2)(v2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  CA::CG::ContextDelegate::~ContextDelegate((CGColorSpaceRef *)this);
  JUMPOUT(0x186DBD990);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E1592F18;
  v2 = (unsigned int *)*((_QWORD *)this + 42);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (**(void (***)(unsigned int *))v2)(v2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  CA::CG::ContextDelegate::~ContextDelegate((CGColorSpaceRef *)this);
}

void CA::CG::IOSurfaceDrawable::~IOSurfaceDrawable(CA::CG::IOSurfaceDrawable *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = &off_1E1592A68;
  v2 = (unsigned int *)*((_QWORD *)this + 13);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *(_QWORD *)this = &off_1E1591B88;
  if (!*((_BYTE *)this + 70))
    __assert_rtn("~AccelDrawable", "cg-accel-drawable.cpp", 62, "_destroyed");
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E1592A68;
  v2 = (unsigned int *)*((_QWORD *)this + 13);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *(_QWORD *)this = &off_1E1591B88;
  if (!*((_BYTE *)this + 70))
    __assert_rtn("~AccelDrawable", "cg-accel-drawable.cpp", 62, "_destroyed");
}

void CA::CG::IOSurfaceDrawable::destroy(CA::CG::IOSurfaceDrawable *this)
{
  CA::CG::AccelDrawable::destroy((CGColorSpaceRef *)this);
  CFRelease(*((CFTypeRef *)this + 12));
}

void CA::CG::ContextDelegate::~ContextDelegate(CGColorSpaceRef *this)
{
  _QWORD *v2;
  _QWORD *v3;
  CGColorSpaceRef v4;
  malloc_zone_t *malloc_zone;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *this = (CGColorSpaceRef)off_1E15921F8;
  CGColorSpaceRelease(this[4]);
  v2 = this[41];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)v2[1];
      free(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = this[37];
  if (v4)
  {
    CA::ColorProgram::Cache::~Cache(this[37]);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v4);
  }
  v6 = (unsigned int *)this[40];
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  v10 = (unsigned int *)this[39];
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      CA::CG::ClipStack::destroy_clip_stack((void (***)(char *))v10);
  }
}

void CA::CG::AccelDrawable::destroy(CGColorSpaceRef *this)
{
  CGColorSpaceRef v2;

  CA::CG::AccelDrawable::detach((CA::CG::AccelDrawable *)this, 1);
  v2 = this[9];
  if (v2)
    (*(void (**)(CGColorSpaceRef))(*(_QWORD *)v2 + 8))(v2);
  CGColorSpaceRelease(this[3]);
  *((_BYTE *)this + 70) = 1;
}

void CA::CG::IOSurfaceQueue::~IOSurfaceQueue(CA::CG::IOSurfaceQueue *this)
{
  malloc_zone_t *malloc_zone;

  CA::CG::AccelQueue::~AccelQueue(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::CG::AccelDrawable::detach(CA::CG::AccelDrawable *this, int a2)
{
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *((_QWORD *)this + 9);
  if (v4)
    CA::CG::Queue::flush(v4, 3, 1);
  CA::CG::AccelDrawable::detach_providers(this, 1);
  if (!a2)
    goto LABEL_7;
  v5 = (os_unfair_lock_s *)&CA::CG::AccelRenderer::_list_lock;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
  for (i = CA::CG::AccelRenderer::_list; i; i = *(_QWORD *)(i + 4272))
  {
    v7 = *(_QWORD *)(i + 8);
    v8 = (*(uint64_t (**)(CA::CG::AccelDrawable *))(*(_QWORD *)this + 24))(this);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v8);
  }
  while (1)
  {
    os_unfair_lock_unlock(v5);
LABEL_7:
    os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
    v9 = CA::CG::AccelRenderer::_list;
    if (!CA::CG::AccelRenderer::_list)
      break;
    while (*(CA::CG::AccelDrawable **)(v9 + 4264) != this)
    {
      v9 = *(_QWORD *)(v9 + 4272);
      if (!v9)
        goto LABEL_10;
    }
    v5 = (os_unfair_lock_s *)(v9 + 4224);
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 4224));
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
    if (*(CA::CG::AccelDrawable **)(v9 + 4264) == this)
      CA::CG::AccelRenderer::detach_surface((CFTypeRef *)v9, a2);
  }
LABEL_10:
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
}

void CA::OGL::MetalContext::purge_iosurface_cache(os_unfair_lock_s *this, __IOSurface *a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;

  if (a2)
  {
    v4 = this + 690;
    os_unfair_lock_lock(this + 690);
    v5 = *(_QWORD *)&this[692]._os_unfair_lock_opaque;
    if (v5)
      x_hash_table_remove(v5, (uint64_t)a2);
    os_unfair_lock_unlock(v4);
  }
}

uint64_t CA::CG::IOSurfaceDrawable::surface(CA::CG::IOSurfaceDrawable *this)
{
  return *((_QWORD *)this + 12);
}

void CA::CG::AccelQueue::~AccelQueue(CA::CG::AccelQueue *this)
{
  _QWORD *v2;
  uint64_t i;
  const void *v4;
  NSObject *v5;
  unsigned int v6;
  size_t *v8;
  size_t *v9;
  CA::CG::TransparencyLayer *v10;

  *(_QWORD *)this = off_1E1590F58;
  v2 = (_QWORD *)((char *)this + 184);
  os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
  for (i = CA::CG::AccelRenderer::_list; i; i = *(_QWORD *)(i + 4272))
  {
    if (*(_QWORD **)(i + 4240) == v2)
    {
      *v2 = 0;
      *(_QWORD *)(i + 4240) = 0;
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
  v4 = (const void *)*((_QWORD *)this + 24);
  if (v4)
    CFRelease(v4);
  *(_QWORD *)this = off_1E15936F0;
  v5 = *((_QWORD *)this + 1);
  if (v5)
    dispatch_release(v5);
  do
    v6 = __ldaxr(CA::CG::Queue::_queue_count);
  while (__stlxr(v6 - 1, CA::CG::Queue::_queue_count));
  if (v6 == 1 && CA::CG::Queue::_free_slabs != 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::Queue::_free_lock);
    v8 = (size_t *)CA::CG::Queue::_free_slabs;
    CA::CG::Queue::_free_slabs = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::Queue::_free_lock);
    if (v8)
    {
      do
      {
        v9 = (size_t *)*v8;
        munmap(v8, v8[1]);
        v8 = v9;
      }
      while (v9);
    }
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 56));
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 120));
  v10 = (CA::CG::TransparencyLayer *)*((_QWORD *)this + 2);
  if (v10)
    CA::CG::TransparencyLayer::unref(v10);
}

{
  malloc_zone_t *malloc_zone;

  CA::CG::AccelQueue::~AccelQueue(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::ColorProgram::Cache::~Cache(CA::ColorProgram::Cache *this)
{
  CA::ColorProgram::Program *v2;
  int v3;
  void *v4;
  CA::ColorProgram::Program *v5;
  int v6;
  void *v7;
  NSObject *v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (CA::ColorProgram::Program *)*((_QWORD *)this + 3);
  if (v2)
  {
    v3 = 0;
    do
    {
      *((_QWORD *)this + 3) = *(_QWORD *)v2;
      CA::ColorProgram::Program::~Program(v2);
      free(v4);
      ++v3;
      v2 = (CA::ColorProgram::Program *)*((_QWORD *)this + 3);
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v5 = (CA::ColorProgram::Program *)*((_QWORD *)this + 4);
  if (v5)
  {
    v6 = 0;
    do
    {
      *((_QWORD *)this + 4) = *(_QWORD *)v5;
      CA::ColorProgram::Program::~Program(v5);
      free(v7);
      ++v6;
      v5 = (CA::ColorProgram::Program *)*((_QWORD *)this + 4);
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  if (BYTE8(xmmword_1ECDC6AB0))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v8 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        v10 = v3;
        v11 = 1024;
        v12 = v6;
        _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_DEFAULT, "Flushed %d static and %d dynamic color programs", buf, 0xEu);
      }
    }
  }
  CGColorSpaceRelease(*(CGColorSpaceRef *)this);
  CGColorTransformRelease();
}

void CA::CG::AccelRenderer::detach_surface(CFTypeRef *this, int a2)
{
  CFTypeRef v4;
  uint64_t v5;
  __IOSurface *v6;

  if (this[533])
  {
    CA::CG::Renderer::end_rendering((CA::CG::Renderer *)this);
    if (!*((_DWORD *)this + 1058))
    {
      (*(void (**)(CFTypeRef, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this[1] + 32))(this[1], 0, 0, 0);
      if (a2)
      {
        v4 = this[1];
        v5 = (*(uint64_t (**)(CFTypeRef))(*(_QWORD *)this[533] + 24))(this[533]);
        (*(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)v4 + 40))(v4, v5);
      }
    }
    v6 = (__IOSurface *)this[532];
    if (v6)
    {
      IOSurfaceUnlock(v6, 0, 0);
      CFRelease(this[532]);
      this[532] = 0;
    }
    this[533] = 0;
  }
}

void CA::`anonymous namespace'::PathConverter::close_rect(CA::_anonymous_namespace_::PathConverter *this, const CA::Bounds *a2, const CA::Bounds *a3)
{
  unsigned int v3;
  double v5;
  double v6;
  double v7;
  double v8;
  float64x2_t v9;
  double v10;
  float64x2_t v11;
  double v12;
  int8x16_t v13;
  float64x2_t v14;
  int v15;
  int64x2_t v16;
  int8x16_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x2_t v20;
  signed __int32 v21;
  __int32 v22;
  int64x2_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int32x4_t v26;
  double v27;
  int32x2_t v28;
  int64x2_t v29;
  float64x2_t v30;
  CA::Shape *v31;
  float64x2_t v32;
  int8x16_t v33;
  int8x16_t v39;
  unint64_t *v40;
  uint64_t v41;
  int32x2_t v42;
  const CA::Bounds *v43;
  __int128 *v44;
  unint64_t v45;
  unsigned int *v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t v49;
  unsigned int *v50;
  unsigned int *v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  int v58;
  unsigned int *v59;
  int *v60;
  unsigned int *v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  unsigned int v67;
  unsigned int *v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  unint64_t v74;
  int32x4_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 *v79;
  unsigned int *v80;
  unsigned int *v81;
  char *v82;
  __int128 v83;
  int v84;
  _BYTE v85[2036];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;

  v3 = a2;
  v89 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 6) = 0;
  v5 = *((double *)this + 4);
  v6 = *((double *)this + 6);
  if (v5 <= v6)
  {
    v7 = *((double *)this + 6);
    v6 = *((double *)this + 4);
  }
  else
  {
    *((double *)this + 4) = v6;
    *((double *)this + 6) = v5;
    v3 = a2 ^ 1;
    v7 = v5;
  }
  v8 = *((double *)this + 5);
  v9.f64[0] = *((float64_t *)this + 7);
  if (v8 <= v9.f64[0])
  {
    v10 = *((double *)this + 7);
    v9.f64[0] = *((float64_t *)this + 5);
  }
  else
  {
    *((_QWORD *)this + 5) = *(_QWORD *)&v9.f64[0];
    *((double *)this + 7) = v8;
    v3 ^= 1u;
    v10 = v8;
  }
  v11.f64[0] = v7 - v6;
  v12 = v10 - v9.f64[0];
  *(double *)v13.i64 = v6;
  v13.i64[1] = *(_QWORD *)&v9.f64[0];
  v14.f64[0] = v11.f64[0];
  v14.f64[1] = v12;
  v15 = *(_DWORD *)this;
  if ((*(_DWORD *)this & 4) != 0)
  {
    v23 = vceqzq_f64(v14);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v23, 1), (int8x16_t)v23).u64[0] & 0x8000000000000000) != 0
      || (v24 = vorrq_s8((int8x16_t)vcltzq_f64(v14), (int8x16_t)vcgezq_f64(v14)),
          (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v24), 1), v24).u64[0] & 0x8000000000000000) != 0))
    {
      v75 = 0uLL;
      v20 = 0;
    }
    else
    {
      v25 = (int32x4_t)vcvtpq_s64_f64(vmaxnmq_f64((float64x2_t)v13, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
      v26 = (int32x4_t)vsubq_s64(vcvtmq_s64_f64(vminnmq_f64(vaddq_f64((float64x2_t)v13, v14), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v25);
      v75 = vuzp1q_s32(v25, v26);
      v20 = vmovn_s64((int64x2_t)v26);
    }
    goto LABEL_27;
  }
  if ((v15 & 8) != 0)
  {
    if (v11.f64[0] <= v12)
      v27 = v12;
    else
      v27 = v11.f64[0];
    if (v27 < 1073741820.0)
    {
      v32.f64[0] = NAN;
      v32.f64[1] = NAN;
      v33 = (int8x16_t)vnegq_f64(v32);
      __asm { FMOV            V2.2D, #0.5 }
      v28 = vmovn_s64(vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8(v33, _Q2, v13), (float64x2_t)v13)));
      v39 = (int8x16_t)vaddq_f64((float64x2_t)v13, v14);
      v20 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8(v33, _Q2, v39), (float64x2_t)v39))), v28);
    }
    else
    {
      v28 = vdup_n_s32(0xE0000001);
      v20 = (int32x2_t)0xC0000000C0000000;
    }
    *(int32x2_t *)v75.i8 = v28;
    v75.u64[1] = (unint64_t)v20;
    goto LABEL_27;
  }
  v16 = vceqzq_f64(v14);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v16, 1), (int8x16_t)v16).u64[0] & 0x8000000000000000) != 0
    || (v17 = vorrq_s8((int8x16_t)vcltzq_f64(v14), (int8x16_t)vcgezq_f64(v14)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v17), 1), v17).u64[0] & 0x8000000000000000) != 0))
  {
    v75 = 0uLL;
    v20 = 0;
    v21 = 0;
    v22 = 0;
  }
  else
  {
    v18 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64((float64x2_t)v13, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    v19 = (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64((float64x2_t)v13, v14), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v18);
    v75 = vuzp1q_s32(v18, v19);
    v20 = vmovn_s64((int64x2_t)v19);
    v21 = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u32[0];
    v22 = v18.i32[0];
  }
  v29.i64[0] = v21;
  v29.i64[1] = v22;
  v30 = vcvtq_f64_s64(v29);
  v29.i64[0] = v20.i32[0];
  v29.i64[1] = v20.i32[1];
  v9.f64[1] = v6;
  v11.f64[1] = v12;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v9, v30), (int32x4_t)vceqq_f64(v11, vcvtq_f64_s64(v29)))), 0xFuLL))) & 1) != 0)
  {
LABEL_27:
    if (!vorr_s8((int8x8_t)vdup_lane_s32(v20, 1), (int8x8_t)v20).u32[0])
      return;
    v40 = (unint64_t *)((char *)this + 16);
    v41 = *((_QWORD *)this + 2);
    if (!v41)
    {
      *((_QWORD *)this + 2) = CA::Shape::new_shape((CA::Shape *)&v75, a2);
      *((_BYTE *)this + 4) = v3;
      return;
    }
    if ((v15 & 0x10) == 0)
    {
      if (*((unsigned __int8 *)this + 4) == v3)
      {
        CA::shape_union((CA::Shape **)this + 2, (CA::Shape **)&v75, a3);
        return;
      }
      *((_DWORD *)this + 6) = 8;
      v31 = (CA::Shape *)v41;
      goto LABEL_39;
    }
    v42 = vceqz_s32(v20);
    if ((vorr_s8((int8x8_t)v42, (int8x8_t)vdup_lane_s32(v42, 1)).u32[0] & 1) != 0)
      return;
    if ((v41 & 1) != 0)
    {
      if (v41 != 1)
      {
        v77 = 0u;
        v78 = 0u;
        v76 = 0u;
        CA::Shape::operator=((uint64_t)&v76, &v75);
LABEL_42:
        if (DWORD1(v76) == 6)
        {
          v44 = (__int128 *)v41;
          goto LABEL_44;
        }
        v83 = xmmword_18474E610;
        v84 = 2;
        v46 = (unsigned int *)v85;
        v79 = &v83;
        v80 = (unsigned int *)v85;
        v81 = (unsigned int *)v85;
        v82 = (char *)&v83 + 12;
        *(_QWORD *)&v85[2028] = 0;
        v87 = 0u;
        v88 = 0u;
        v86 = 0u;
        if ((v41 & 1) != 0)
        {
          v47 = (unint64_t)&v86 | 0xC;
          v86 = xmmword_18474E620;
          LODWORD(v87) = 2;
          DWORD1(v87) = (int)((unint64_t)v41 >> 16) >> 16;
          DWORD2(v87) = 4;
          HIDWORD(v87) = v41 >> 48;
          LODWORD(v88) = HIDWORD(v87) + (v41 >> 17);
          DWORD1(v88) = ((v41 >> 2) & 0x7FFF) + DWORD1(v87);
          *((_QWORD *)&v88 + 1) = 0x7FFFFFFF00000002;
          v49 = (unint64_t)&v76 | 0xC;
          v48 = 0x80000000;
        }
        else
        {
          v47 = v41 + 12;
          v48 = *(_DWORD *)(v41 + 12);
          v49 = (unint64_t)&v76 | 0xC;
          if (v48 == 0x7FFFFFFF)
            goto LABEL_91;
        }
        v50 = (unsigned int *)v49;
        v51 = (unsigned int *)v49;
        v52 = v47;
        while (1)
        {
          v53 = *v51;
          if (*v51 == 0x7FFFFFFF)
            goto LABEL_92;
          if ((int)(v48 - v53) >= 1)
            break;
          v54 = *(int *)(v52 + 4);
          if (((v48 - v53) & 0x80000000) == 0)
          {
            v47 = v52;
            v52 += 4 * v54;
            goto LABEL_56;
          }
          LODWORD(v55) = v50[1];
          v47 = v52;
          v52 += 4 * v54;
          v49 = (unint64_t)v51;
LABEL_57:
          v56 = v54 - 2;
          v57 = v54 - 2 + v55;
          if (*((int *)v79 + 2) < ((char *)&v46[v57] - (char *)v79) >> 2)
          {
            if (!CA::ShapeHandle::grow((CA::ShapeHandle *)&v79, v57))
            {
              if (*(_DWORD *)v52 != 0x7FFFFFFF)
              {
LABEL_92:
                v45 = CA::ShapeHandle::finish((CA::ShapeHandle *)&v79, (const int *)v52);
                goto LABEL_93;
              }
LABEL_91:
              v52 = v49;
              goto LABEL_92;
            }
            v46 = v80;
          }
          v58 = v55 - 2;
          *v46 = v48;
          v59 = v46 + 2;
          v80 = v46 + 2;
          v46[1] = 0;
          v60 = (int *)(v47 + 8);
          v61 = v50 + 2;
          if (v56 && (_DWORD)v55 != 2)
          {
            v62 = 0;
            while (1)
            {
              v63 = *v60;
              v64 = *v61;
              v65 = *v60 - *v61;
              if (*v60 <= (int)*v61)
              {
                v66 = v62 ^ 1;
                ++v60;
                --v56;
                if (v65 < 0)
                {
                  v64 = v63;
                  goto LABEL_67;
                }
              }
              else
              {
                v66 = v62;
              }
              v66 ^= 2u;
              ++v61;
              --v58;
LABEL_67:
              if ((v62 - 1) < 2 != (v66 - 1) < 2)
              {
                *v59++ = v64;
                v80 = v59;
              }
              if (v56)
              {
                v62 = v66;
                if (v58)
                  continue;
              }
              break;
            }
          }
          if (v56)
            v58 = v56;
          if (v58)
          {
            if (!v56)
              v60 = (int *)v61;
            do
            {
              v67 = *v60++;
              *v59++ = v67;
              --v58;
            }
            while (v58);
            v80 = v59;
          }
          v68 = v81;
          v69 = v82;
          v70 = (unint64_t)((char *)v59 - (char *)v81) >> 2;
          v81[1] = v70;
          if (v69 && *((_DWORD *)v69 + 1) == (_DWORD)v70)
          {
            v71 = 2;
            while ((_DWORD)v70 != (_DWORD)v71)
            {
              v72 = v68[v71];
              v73 = *(_DWORD *)&v69[4 * v71++];
              if (v72 != v73)
                goto LABEL_85;
            }
            v80 = v68;
            v59 = v68;
          }
          else
          {
LABEL_85:
            v81 = v59;
            v82 = (char *)v68;
          }
          v48 = *(_DWORD *)v52;
          v46 = v59;
          v51 = (unsigned int *)v49;
          if (*(_DWORD *)v52 == 0x7FFFFFFF)
            goto LABEL_91;
        }
        LODWORD(v54) = *(_DWORD *)(v47 + 4);
LABEL_56:
        v55 = (int)v51[1];
        v49 = (unint64_t)&v51[v55];
        v50 = v51;
        v48 = *v51;
        goto LABEL_57;
      }
    }
    else if (*(_DWORD *)(v41 + 4) != 6)
    {
      v77 = 0u;
      v78 = 0u;
      v76 = 0u;
      CA::Shape::operator=((uint64_t)&v76, &v75);
      if (*(_DWORD *)(v41 + 4) == 6)
      {
        v44 = &v76;
LABEL_44:
        v45 = CA::Shape::ref((unint64_t)v44, v43);
LABEL_93:
        v74 = v45;
        CA::Shape::unref((CA::Shape *)v41);
        *v40 = v74;
        return;
      }
      goto LABEL_42;
    }
    v45 = CA::Shape::new_shape((CA::Shape *)&v75, a2);
    goto LABEL_93;
  }
  *((_DWORD *)this + 6) = 8;
  v31 = (CA::Shape *)*((_QWORD *)this + 2);
  if (v31)
  {
LABEL_39:
    CA::Shape::unref(v31);
    *((_QWORD *)this + 2) = 0;
  }
}

CFDictionaryRef ___ZN2CA6Render12_GLOBAL__N_125create_image_by_renderingEP7CGImageP12CGColorSpacejdNS0_13ImageCopyTypeE_block_invoke()
{
  CFDictionaryRef result;

  result = CFDictionaryCreate(0, MEMORY[0x1E0CBC7F8], MEMORY[0x1E0C9AE40], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  return result;
}

os_log_t ___ZN2CA3OGL7ContextC2Ev_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreanimation", "OGL.Trace");
  CA::OGL::Context::_trace_log = (uint64_t)result;
  return result;
}

os_log_t ___ZN2CA3OGL12MetalContext22get_pipeline_stall_logEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreanimation", "Metal.Pipelines.Stall");
  CA::OGL::MetalContext::get_pipeline_stall_log(void)::pipeline_stall_log = (uint64_t)result;
  return result;
}

os_log_t ___ZN2CA3OGL12MetalContext16get_pipeline_logEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreanimation", "Metal.Pipelines");
  CA::OGL::MetalContext::get_pipeline_log(void)::pipeline_log = (uint64_t)result;
  return result;
}

dispatch_queue_t ___ZN2CA3OGL12MetalContext18get_pipeline_queueEv_block_invoke()
{
  NSObject *v0;
  dispatch_queue_t result;

  v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  result = dispatch_queue_create("com.apple.coreanimation.pipelines", v0);
  CA::OGL::MetalContext::get_pipeline_queue(void)::queue = (uint64_t)result;
  return result;
}

dispatch_queue_t CA::CG::Queue::create_queue(CA::CG::Queue *this)
{
  NSObject *v1;
  dispatch_queue_t result;

  v1 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  result = dispatch_queue_create("CA::CG::Queue", v1);
  CA::CG::Queue::_queue = (uint64_t)result;
  return result;
}

void CAImageQueueUnregisterBuffer(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  CAImageQueueBuffer *v5;

  if (*(_QWORD *)(a1 + 200))
  {
    v4 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    v5 = (CAImageQueueBuffer *)x_hash_table_remove(*(_QWORD *)(a1 + 200), a2);
    os_unfair_lock_unlock(v4);
    delete_buffer(a2, v5, (void *)a1);
  }
}

uint64_t CA::CG::ContextDelegate::draw_path_direct_(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const CGPath *a5, uint64_t a6)
{
  const double *Info;
  uint64_t v12;
  CA::CG::Queue *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *CTM;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v27;
  int v28;
  int v29;
  int8x16_t v30;
  uint64_t v31;
  int64x2_t v32;
  int8x16_t v33;
  double v34;
  double v35;
  uint64_t v36;
  CGColor *FillColor;
  _BOOL4 v39;
  uint64_t v40;
  CGColor *StrokeColor;
  unint64_t *v42;
  CGAffineTransform v44;
  uint64_t v45;
  CGRect v46;

  v45 = *MEMORY[0x1E0C80C00];
  Info = (const double *)CGContextDelegateGetInfo();
  v12 = (*(uint64_t (**)(const double *))(*(_QWORD *)Info + 16))(Info);
  if (v12)
  {
    v13 = (CA::CG::Queue *)v12;
    if (a4 == 2)
      goto LABEL_22;
    if (!a6)
      goto LABEL_14;
    v14 = *(double *)a6;
    v15 = *(_QWORD *)(a6 + 8);
    v16 = *(_QWORD *)(a6 + 16);
    v17 = *(_QWORD *)(a6 + 24);
    CTM = (_OWORD *)CGGStateGetCTM();
    v20 = CTM[1];
    v19 = CTM[2];
    *(_OWORD *)&v44.a = *CTM;
    *(_OWORD *)&v44.c = v20;
    *(_OWORD *)&v44.tx = v19;
    *(double *)&v19 = v14;
    *(_QWORD *)&v20 = v15;
    v21 = v16;
    v22 = v17;
    v46 = CGRectApplyAffineTransform(*(CGRect *)((char *)&v20 - 8), &v44);
    x = v46.origin.x;
    y = v46.origin.y;
    width = v46.size.width;
    height = v46.size.height;
    v27 = *((_DWORD *)Info + 6);
    v28 = *((_DWORD *)Info + 7);
    v29 = v27 <= v28 ? *((_DWORD *)Info + 7) : *((_DWORD *)Info + 6);
    LODWORD(v46.origin.x) = 1073741822;
    LODWORD(v46.origin.y) = v29;
    v30 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(*(int32x4_t *)&v46.origin.y, (int32x4_t)v46.origin), 0);
    v31 = *((_QWORD *)Info + 2);
    v32.i64[0] = (int)v31;
    v32.i64[1] = SHIDWORD(v31);
    v33 = vbslq_s8(v30, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v32));
    v34 = v29 <= 1073741822 ? (double)v27 : 1.79769313e308;
    v35 = v29 <= 1073741822 ? (double)v28 : 1.79769313e308;
    v36 = v33.i64[1];
    if (CGRectIntersectsRect(*(CGRect *)v33.i8, *(CGRect *)&x))
    {
LABEL_14:
      FillColor = (CGColor *)CGGStateGetFillColor();
      v39 = a4 == 1 || a4 == 4;
      v40 = CA::CG::ContextDelegate::fill_path(Info, v13, a2, a3, FillColor, a5, v39, 0, (double *)a6, 1, 1);
      CA::CG::ContextDelegate::submit((uint64_t)Info, (uint64_t)v13, v40, a2, a3);
    }
    if (a4 >= 2)
    {
LABEL_22:
      StrokeColor = (CGColor *)CGGStateGetStrokeColor();
      v42 = CA::CG::ContextDelegate::stroke_path(Info, v13, a2, a3, StrokeColor, a5, 0);
      CA::CG::ContextDelegate::submit((uint64_t)Info, (uint64_t)v13, (uint64_t)v42, a2, a3);
    }
  }
  return 0;
}

uint64_t CA::CG::DrawPath::DrawPath(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, CGColor *a5, const CGPath *a6, int a7, double *a8, char a9)
{
  CGPathRef v12;
  double v13;
  double v14;
  double v15;
  double v16;

  *(_QWORD *)CA::CG::DrawOp::DrawOp(a1, a2, a3, a4, a5, a7) = off_1E1593890;
  if (a9)
    v12 = CGPathRetain(a6);
  else
    v12 = (CGPathRef)MEMORY[0x186DBC640](a6);
  *(_QWORD *)(a1 + 112) = v12;
  if (a8)
  {
    v13 = *a8;
    v14 = a8[1];
    v15 = a8[2];
    v16 = a8[3];
  }
  else
  {
    *(CGRect *)&v13 = CGPathGetBoundingBox(a6);
  }
  *(double *)(a1 + 120) = v13;
  *(double *)(a1 + 128) = v14;
  *(double *)(a1 + 136) = v15;
  *(double *)(a1 + 144) = v16;
  if (v15 < 0.0)
  {
    *(double *)(a1 + 120) = v15 + v13;
    *(double *)(a1 + 136) = -v15;
  }
  if (v16 < 0.0)
  {
    *(double *)(a1 + 128) = v16 + v14;
    *(double *)(a1 + 144) = -v16;
  }
  return a1;
}

os_log_t ___ZN2CA3OGL12MetalContextC2EPU19objcproto9MTLDevice11objc_objectPU26objcproto15MTLCommandQueue11objc_objectPU28objcproto17OS_dispatch_queue8NSObjectjj_block_invoke()
{
  os_log_t result;

  CA::OGL::MetalContext::_perf_log = (uint64_t)os_log_create("com.apple.coreanimation", "Metal.Performance");
  result = os_log_create("com.apple.coreanimation", "Metal.Trace");
  CA::OGL::MetalContext::_metal_trace_log = (uint64_t)result;
  return result;
}

void CA::OGL::MetalContext::stop_idle_collect_timer(CA::OGL::MetalContext *this)
{
  os_unfair_lock_s *v2;
  NSObject *v3;

  v2 = (os_unfair_lock_s *)((char *)this + 2632);
  os_unfair_lock_lock((os_unfair_lock_t)this + 658);
  v3 = *((_QWORD *)this + 496);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*((dispatch_object_t *)this + 496));
    *((_QWORD *)this + 496) = 0;
  }
  os_unfair_lock_unlock(v2);
}

CATransform3D *__cdecl CATransform3DTranslate(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat tx, CGFloat ty, CGFloat tz)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  float64x2_t v11;
  __int128 v12;
  __int128 v13;

  v5 = *(_OWORD *)&t->m13;
  v6 = *(_OWORD *)&t->m33;
  v7 = *(_OWORD *)&t->m23;
  *(float64x2_t *)&t->m41 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)&t->m41, *(float64x2_t *)&t->m11, tx), *(float64x2_t *)&t->m21, ty), *(float64x2_t *)&t->m31, tz);
  v8 = *(_OWORD *)&t->m11;
  v9 = *(_OWORD *)&t->m41;
  v10 = *(_OWORD *)&t->m21;
  v11 = vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)&t->m43, *(float64x2_t *)&t->m13, tx), *(float64x2_t *)&t->m23, ty);
  v12 = *(_OWORD *)&t->m31;
  *(float64x2_t *)&t->m43 = vmlaq_n_f64(v11, *(float64x2_t *)&t->m33, tz);
  *(_OWORD *)&retstr->m31 = v12;
  *(_OWORD *)&retstr->m33 = v6;
  *(_OWORD *)&retstr->m11 = v8;
  *(_OWORD *)&retstr->m13 = v5;
  *(_OWORD *)&retstr->m21 = v10;
  *(_OWORD *)&retstr->m23 = v7;
  v13 = *(_OWORD *)&t->m43;
  *(_OWORD *)&retstr->m41 = v9;
  *(_OWORD *)&retstr->m43 = v13;
  return t;
}

float *CA::WindowServer::wrap_buffer(CA::WindowServer *this, CA::WindowServer::Display *a2, CA::Render::RenderTarget *a3)
{
  __IOSurface *v5;
  float *result;
  malloc_zone_t *malloc_zone;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;

  if ((*(unsigned int (**)(CA::WindowServer::Display *))(*(_QWORD *)a2 + 16))(a2))
  {
    v5 = (__IOSurface *)*((_QWORD *)a2 + 2);
    if (v5)
      return CA::WindowServer::IOSurface::wrap_buffer(this, v5, (__IOSurface *)1, 1);
    return 0;
  }
  if (!*((_QWORD *)a2 + 3))
    return 0;
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = (float *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x110uLL, 0x743898A5uLL);
  if (result)
  {
    v8 = *((_QWORD *)a2 + 1);
    v10 = *((_QWORD *)a2 + 2);
    v9 = *((_QWORD *)a2 + 3);
    v11 = *(_QWORD *)(v9 + 24);
    v12 = (unsigned int *)(v9 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    if (!v13)
    {
      v9 = 0;
      do
        v15 = __ldaxr(v12);
      while (__stlxr(v15 - 1, v12));
    }
    *((_QWORD *)result + 7) = v8;
    *((_QWORD *)result + 8) = 0x3F80000042475241;
    result[31] = 1.0;
    result[50] = 1.0;
    result[55] = NAN;
    v14 = (*((unsigned int *)result + 56) | ((unint64_t)*((unsigned __int8 *)result + 228) << 32)) & 0xC038000000 | 0x140000001;
    *(_OWORD *)(result + 27) = xmmword_18474E010;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *((_QWORD *)result + 6) = 0;
    *((_QWORD *)result + 11) = 0;
    *((_QWORD *)result + 12) = 0;
    *((_QWORD *)result + 10) = 0;
    result[26] = 0.0;
    *((_OWORD *)result + 8) = xmmword_18474E020;
    *((_QWORD *)result + 18) = 0;
    *((_WORD *)result + 76) = 0;
    *(_QWORD *)(result + 39) = 0x100000001;
    *((_BYTE *)result + 196) = 0;
    *(_OWORD *)(result + 45) = 0u;
    *(_OWORD *)(result + 41) = 0u;
    *(_QWORD *)(result + 53) = 0;
    *(_QWORD *)(result + 51) = 0;
    *((_DWORD *)result + 56) = v14;
    *((_WORD *)result + 114) = BYTE4(v14);
    *(_QWORD *)result = off_1E158DA68;
    *((_QWORD *)result + 1) = this;
    *((_QWORD *)result + 29) = 0;
    *((_QWORD *)result + 30) = v11;
    *((_QWORD *)result + 31) = v10;
    *((_QWORD *)result + 33) = v9;
  }
  return result;
}

uint64_t CA::Render::RenderSurface::is_iosurface(CA::Render::RenderSurface *this)
{
  return 1;
}

double CA_CGRectApplyTransform(float64x2_t *a1, double a2, double a3, double a4, double a5, uint64_t a6, double *a7)
{
  int8x16_t v8;
  double v9;
  double v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *(double *)v8.i64 = a2;
  *(double *)&v8.i64[1] = a3;
  v9 = a4;
  v10 = a5;
  CA::Mat4Impl::mat4_apply_to_rect(a1, &v8, a7);
  return *(double *)v8.i64;
}

uint64_t x_log_stream_init(void)
{
  uint64_t result;
  pthread_key_t v1[2];

  v1[1] = *MEMORY[0x1E0C80C00];
  v1[0] = 0;
  result = pthread_key_create(v1, 0);
  x_log_stream_slot = v1[0];
  return result;
}

_DWORD *CAML::Context::create_sax_vtable(CAML::Context *this)
{
  _DWORD *result;

  if (CAML::Context::_sax_vtable)
    __assert_rtn("create_sax_vtable", "CAMLContext.cpp", 731, "!_sax_vtable");
  result = malloc_type_calloc(1uLL, 0x100uLL, 0x1080040AADF51B8uLL);
  CAML::Context::_sax_vtable = (uint64_t)result;
  result[54] = -554844497;
  return result;
}

CFIndex ___ZN2CA6RenderL22sync_hang_report_levelEv_block_invoke()
{
  CFIndex result;
  int v1;
  Boolean keyExistsAndHasValidFormat;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  keyExistsAndHasValidFormat = 0;
  result = CFPreferencesGetAppIntegerValue(CFSTR("CASynchronizeHangReport"), CFSTR("com.apple.coreanimation"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
  {
    if (result >= 3)
      v1 = 3;
    else
      v1 = result;
    if ((int)result < 0)
      v1 = 0;
    LODWORD(CA::Render::sync_hang_report_level(void)::level) = v1;
  }
  return result;
}

unint64_t CA::Render::iosurface_max_init(CA::Render *this)
{
  char *v1;
  unint64_t v2;
  unint64_t result;
  uint64_t v4;
  uint64_t v5;

  v1 = getenv("CA_MAX_TEXTURE_SIZE");
  if (v1)
    v2 = atoi(v1);
  else
    v2 = 0;
  CA::Render::iosurface_max_width = MEMORY[0x186DBD438](*MEMORY[0x1E0CBC1E0]);
  result = MEMORY[0x186DBD438](*MEMORY[0x1E0CBC008]);
  CA::Render::iosurface_max_height = result;
  if (v2)
  {
    v4 = CA::Render::iosurface_max_width;
    if (CA::Render::iosurface_max_width >= v2)
      v4 = v2;
    CA::Render::iosurface_max_width = v4;
    if (result >= v2)
      v5 = v2;
    else
      v5 = result;
    CA::Render::iosurface_max_height = v5;
  }
  return result;
}

void set_attr(CA::Transaction *a1, const void *a2, _QWORD *a3)
{
  CA::Transaction *v5;
  const void *v6;
  int v7;
  CA::AttrList *v8;
  malloc_zone_t *malloc_zone;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v10[0] = a2;
  v5 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
  if (!v5)
    v5 = (CA::Transaction *)CA::Transaction::create(a1);
  v6 = (const void *)CAInternAtom((const __CFString *)a1, 1);
  v7 = *((_DWORD *)v5 + 25);
  *((_DWORD *)v5 + 25) = v7 + 1;
  if (!v7)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v8 = (CA::AttrList *)a3[4];
  if (!v8)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v8 = (CA::AttrList *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x10uLL, 0x743898A5uLL);
  }
  a3[4] = CA::AttrList::set(v8, v6, 2, (unsigned __int8 *)v10);
  CA::Transaction::unlock(v5);
}

double CAColorMatrixMakeSaturation@<D0>(uint64_t a1@<X8>, float a2@<S0>, float32x2_t a3@<D1>)
{
  float v3;
  float v4;
  float32x2_t v5;
  uint64_t v6;
  float v7;
  float32x2_t v8;
  double result;

  v3 = fmaxf(a2, 0.0);
  a3.i32[0] = 1046066128;
  v4 = (float)(v3 * 0.7873) + 0.2126;
  v5 = vmul_n_f32((float32x2_t)0x3E91D14E3E59B3D0, v3);
  LODWORD(v6) = vsub_f32(a3, v5).u32[0];
  v7 = 0.0722 - (float)(v3 * 0.0722);
  *(_QWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 40) = v6;
  HIDWORD(v6) = vadd_f32(v5, (float32x2_t)vdup_n_s32(0x3F371759u)).i32[1];
  *(_QWORD *)(a1 + 20) = v6;
  *(float *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  v8 = vmul_n_f32((float32x2_t)0x3F6D844D3F371759, v3);
  LODWORD(v6) = vsub_f32((float32x2_t)0x3F6D844D3F371759, v8).u32[0];
  *(float *)a1 = v4;
  *(_DWORD *)(a1 + 4) = v6;
  *(float *)(a1 + 8) = v7;
  HIDWORD(v6) = vadd_f32(v8, (float32x2_t)vdup_n_s32(0x3D93DD98u)).i32[1];
  *(_QWORD *)(a1 + 44) = v6;
  *(_QWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(_QWORD *)&result = 1065353216;
  *(_QWORD *)(a1 + 72) = 1065353216;
  return result;
}

void CABackingStoreCollectBlocking()
{
  uint64_t v0;
  double v1;
  double v2;
  BOOL v3;
  double v4;
  unint64_t StatusReg;
  double v6;
  CA::Transaction *v7;
  CA::Transaction *v8;
  double i;
  uint64_t v10;

  v0 = mach_absolute_time();
  v1 = CATimeWithHostTime(v0);
  CA::Render::post_notification(0x33u, 0, 0, 0);
  CA::Render::collect((CA::Render *)1, v1);
  v2 = v1 + 1.0;
  if (buffer_list)
    v3 = v1 < v2;
  else
    v3 = 0;
  if (v3)
  {
    v4 = 0.0166666667;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v6 = CABackingStoreCollect_(v1, 1);
      v7 = *(CA::Transaction **)(StatusReg + 576);
      if (!v7)
        v7 = (CA::Transaction *)CA::Transaction::create(0);
      if (!**((_DWORD **)v7 + 13))
        CA::Transaction::ensure_implicit(v7, 1);
      v8 = *(CA::Transaction **)(StatusReg + 576);
      if (v8 && **((_DWORD **)v8 + 13))
        CA::Transaction::flush(v8);
      if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        break;
      for (i = v4 + v1 >= v2 ? v2 : v4 + v1; v1 < i; v1 = CATimeWithHostTime(v10))
      {
        usleep(1000 * (int)((i - v1) * 1000.0));
        v10 = mach_absolute_time();
      }
      v4 = v4 + v4;
    }
    while (v1 < v2);
  }
}

void sub_1845B1E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int *a12)
{
  CA::Transaction *v12;

  CA::Transaction::unlock(v12);
  X::Ref<CA::Layer>::~Ref(&a12);
  _Unwind_Resume(a1);
}

_QWORD *CAML::ObjCContext::create_builtin_types(CAML::ObjCContext *this)
{
  malloc_zone_t *malloc_zone;
  malloc_zone_t *v2;
  _QWORD *v3;
  uint64_t v4;
  malloc_zone_t *v5;
  _QWORD *v6;
  uint64_t v7;
  malloc_zone_t *v8;
  _QWORD *v9;
  uint64_t v10;
  malloc_zone_t *v11;
  _QWORD *v12;
  uint64_t v13;
  malloc_zone_t *v14;
  _QWORD *v15;
  uint64_t v16;
  malloc_zone_t *v17;
  _QWORD *v18;
  malloc_zone_t *v19;
  _QWORD *v20;
  uint64_t v21;
  malloc_zone_t *v22;
  _QWORD *v23;
  uint64_t v24;
  malloc_zone_t *v25;
  _QWORD *v26;
  uint64_t v27;
  malloc_zone_t *v28;
  _QWORD *v29;
  uint64_t v30;
  malloc_zone_t *v31;
  _QWORD *v32;
  uint64_t v33;
  malloc_zone_t *v34;
  _QWORD *v35;
  uint64_t v36;
  malloc_zone_t *v37;
  _QWORD *v38;
  uint64_t v39;
  malloc_zone_t *v40;
  _QWORD *v41;
  uint64_t v42;
  malloc_zone_t *v43;
  _QWORD *v44;
  uint64_t v45;
  malloc_zone_t *v46;
  _QWORD *v47;
  malloc_zone_t *v48;
  _QWORD *v49;
  malloc_zone_t *v50;
  _QWORD *v51;
  malloc_zone_t *v52;
  _QWORD *v53;
  malloc_zone_t *v54;
  _QWORD *v55;
  malloc_zone_t *v56;
  _QWORD *v57;
  uint64_t v58;
  malloc_zone_t *v59;
  _QWORD *v60;
  uint64_t v61;
  malloc_zone_t *v62;
  _QWORD *v63;
  uint64_t v64;
  malloc_zone_t *v65;
  _QWORD *result;
  _QWORD *v67;

  if (CAML::ObjCContext::_builtin_types)
    __assert_rtn("create_builtin_types", "CAMLObjCContext.mm", 36, "!_builtin_types");
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  CAML::ObjCContext::_builtin_types = (uint64_t)malloc_type_zone_calloc(malloc_zone, 1uLL, 0xC0uLL, 0x743898A5uLL);
  v2 = (malloc_zone_t *)get_malloc_zone();
  v3 = malloc_type_zone_malloc(v2, 0x20uLL, 0x8BB15036uLL);
  if (v3)
  {
    v4 = objc_opt_class();
    v3[2] = 0;
    v3[3] = v4;
    *v3 = off_1E159A198;
    v3[1] = "null";
  }
  *(_QWORD *)CAML::ObjCContext::_builtin_types = v3;
  v5 = (malloc_zone_t *)get_malloc_zone();
  v6 = malloc_type_zone_malloc(v5, 0x20uLL, 0x8BB15036uLL);
  if (v6)
  {
    v7 = objc_opt_class();
    v6[2] = 0;
    v6[3] = v7;
    *v6 = off_1E159A148;
    v6[1] = "BOOL";
  }
  *(_QWORD *)(CAML::ObjCContext::_builtin_types + 8) = v6;
  v8 = (malloc_zone_t *)get_malloc_zone();
  v9 = malloc_type_zone_malloc(v8, 0x20uLL, 0x8BB15036uLL);
  if (v9)
  {
    v10 = objc_opt_class();
    v9[2] = 0;
    v9[3] = v10;
    *v9 = off_1E1599D68;
    v9[1] = "integer";
  }
  *(_QWORD *)(CAML::ObjCContext::_builtin_types + 16) = v9;
  v11 = (malloc_zone_t *)get_malloc_zone();
  v12 = malloc_type_zone_malloc(v11, 0x20uLL, 0x8BB15036uLL);
  if (v12)
  {
    v13 = objc_opt_class();
    v12[2] = 0;
    v12[3] = v13;
    *v12 = off_1E159A1E8;
    v12[1] = "real";
  }
  *(_QWORD *)(CAML::ObjCContext::_builtin_types + 24) = v12;
  v14 = (malloc_zone_t *)get_malloc_zone();
  v15 = malloc_type_zone_malloc(v14, 0x20uLL, 0x8BB15036uLL);
  if (v15)
  {
    v16 = objc_opt_class();
    v15[2] = 0;
    v15[3] = v16;
    *v15 = off_1E1599BB8;
    v15[1] = "string";
  }
  *(_QWORD *)(CAML::ObjCContext::_builtin_types + 32) = v15;
  v17 = (malloc_zone_t *)get_malloc_zone();
  v18 = malloc_type_zone_malloc(v17, 0x20uLL, 0x8BB15036uLL);
  if (v18)
  {
    v18[2] = 0;
    v18[3] = 0;
    *v18 = off_1E1599B68;
    v18[1] = "script";
  }
  *(_QWORD *)(CAML::ObjCContext::_builtin_types + 40) = v18;
  v19 = (malloc_zone_t *)get_malloc_zone();
  v20 = malloc_type_zone_malloc(v19, 0x20uLL, 0x8BB15036uLL);
  if (v20)
  {
    v21 = objc_opt_class();
    v20[2] = 0;
    v20[3] = v21;
    *v20 = off_1E1599DB8;
    v20[1] = "NSArray";
  }
  *(_QWORD *)(CAML::ObjCContext::_builtin_types + 48) = v20;
  v22 = (malloc_zone_t *)get_malloc_zone();
  v23 = malloc_type_zone_malloc(v22, 0x20uLL, 0x8BB15036uLL);
  if (v23)
  {
    v24 = objc_opt_class();
    v23[2] = 0;
    v23[3] = v24;
    *v23 = off_1E159A238;
    v23[1] = "NSSet";
  }
  *(_QWORD *)(CAML::ObjCContext::_builtin_types + 56) = v23;
  v25 = (malloc_zone_t *)get_malloc_zone();
  v26 = malloc_type_zone_malloc(v25, 0x20uLL, 0x8BB15036uLL);
  if (v26)
  {
    v27 = objc_opt_class();
    v26[2] = 0;
    v26[3] = v27;
    *v26 = off_1E1599EA8;
    v26[1] = "NSDictionary";
  }
  *(_QWORD *)(CAML::ObjCContext::_builtin_types + 64) = v26;
  v28 = (malloc_zone_t *)get_malloc_zone();
  v29 = malloc_type_zone_malloc(v28, 0x20uLL, 0x8BB15036uLL);
  if (v29)
  {
    v30 = objc_opt_class();
    v29[2] = 0;
    v29[3] = v30;
    *v29 = off_1E159A288;
    v29[1] = "NSURL";
  }
  *(_QWORD *)(CAML::ObjCContext::_builtin_types + 72) = v29;
  v31 = (malloc_zone_t *)get_malloc_zone();
  v32 = malloc_type_zone_malloc(v31, 0x20uLL, 0x8BB15036uLL);
  if (v32)
  {
    v33 = objc_opt_class();
    v32[2] = 0;
    v32[3] = v33;
    *v32 = off_1E1599B18;
    v32[1] = "NSData";
  }
  *(_QWORD *)(CAML::ObjCContext::_builtin_types + 80) = v32;
  v34 = (malloc_zone_t *)get_malloc_zone();
  v35 = malloc_type_zone_malloc(v34, 0x20uLL, 0x8BB15036uLL);
  if (v35)
  {
    v36 = objc_opt_class();
    v35[2] = 0;
    v35[3] = v36;
    *v35 = off_1E1599CA8;
    v35[1] = "CGPoint";
  }
  *(_QWORD *)(CAML::ObjCContext::_builtin_types + 88) = v35;
  v37 = (malloc_zone_t *)get_malloc_zone();
  v38 = malloc_type_zone_malloc(v37, 0x20uLL, 0x8BB15036uLL);
  if (v38)
  {
    v39 = objc_opt_class();
    v38[2] = 0;
    v38[3] = v39;
    *v38 = off_1E1599AC8;
    v38[1] = "CGSize";
  }
  *(_QWORD *)(CAML::ObjCContext::_builtin_types + 96) = v38;
  v40 = (malloc_zone_t *)get_malloc_zone();
  v41 = malloc_type_zone_malloc(v40, 0x20uLL, 0x8BB15036uLL);
  if (v41)
  {
    v42 = objc_opt_class();
    v41[2] = 0;
    v41[3] = v42;
    *v41 = off_1E1599A78;
    v41[1] = "CGRect";
  }
  *(_QWORD *)(CAML::ObjCContext::_builtin_types + 104) = v41;
  v43 = (malloc_zone_t *)get_malloc_zone();
  v44 = malloc_type_zone_malloc(v43, 0x20uLL, 0x8BB15036uLL);
  if (v44)
  {
    v45 = objc_opt_class();
    v44[2] = 0;
    v44[3] = v45;
    *v44 = off_1E159A038;
    v44[1] = "CGAffineTransform";
  }
  *(_QWORD *)(CAML::ObjCContext::_builtin_types + 112) = v44;
  v46 = (malloc_zone_t *)get_malloc_zone();
  v47 = malloc_type_zone_malloc(v46, 0x20uLL, 0x8BB15036uLL);
  if (v47)
  {
    v47[2] = 0;
    v47[3] = 0;
    *v47 = off_1E1599C08;
    v47[1] = "CGColor";
  }
  *(_QWORD *)(CAML::ObjCContext::_builtin_types + 120) = v47;
  v48 = (malloc_zone_t *)get_malloc_zone();
  v49 = malloc_type_zone_malloc(v48, 0x20uLL, 0x8BB15036uLL);
  if (v49)
  {
    v49[2] = 0;
    v49[3] = 0;
    *v49 = off_1E15999D8;
    v49[1] = "CGFont";
  }
  *(_QWORD *)(CAML::ObjCContext::_builtin_types + 128) = v49;
  v50 = (malloc_zone_t *)get_malloc_zone();
  v51 = malloc_type_zone_malloc(v50, 0x20uLL, 0x8BB15036uLL);
  if (v51)
  {
    v51[2] = 0;
    v51[3] = 0;
    *v51 = off_1E1599C58;
    v51[1] = "CGImage";
  }
  *(_QWORD *)(CAML::ObjCContext::_builtin_types + 136) = v51;
  v52 = (malloc_zone_t *)get_malloc_zone();
  v53 = malloc_type_zone_malloc(v52, 0x20uLL, 0x8BB15036uLL);
  if (v53)
  {
    v53[2] = 0;
    v53[3] = 0;
    *v53 = off_1E1599A28;
    v53[1] = "CGPath";
  }
  *(_QWORD *)(CAML::ObjCContext::_builtin_types + 144) = v53;
  v54 = (malloc_zone_t *)get_malloc_zone();
  v55 = malloc_type_zone_malloc(v54, 0x20uLL, 0x8BB15036uLL);
  if (v55)
  {
    v55[2] = 0;
    v55[3] = 0;
    *v55 = off_1E1599FE8;
    v55[1] = "CGPDFDocument";
  }
  *(_QWORD *)(CAML::ObjCContext::_builtin_types + 152) = v55;
  v56 = (malloc_zone_t *)get_malloc_zone();
  v57 = malloc_type_zone_malloc(v56, 0x20uLL, 0x8BB15036uLL);
  if (v57)
  {
    v58 = objc_opt_class();
    v57[2] = 0;
    v57[3] = v58;
    *v57 = off_1E1599F98;
    v57[1] = "CATransform3D";
  }
  *(_QWORD *)(CAML::ObjCContext::_builtin_types + 160) = v57;
  v59 = (malloc_zone_t *)get_malloc_zone();
  v60 = malloc_type_zone_malloc(v59, 0x20uLL, 0x8BB15036uLL);
  if (v60)
  {
    v61 = objc_opt_class();
    v60[2] = 0;
    v60[3] = v61;
    *v60 = off_1E1599E58;
    v60[1] = "CAPoint3D";
  }
  *(_QWORD *)(CAML::ObjCContext::_builtin_types + 168) = v60;
  v62 = (malloc_zone_t *)get_malloc_zone();
  v63 = malloc_type_zone_malloc(v62, 0x20uLL, 0x8BB15036uLL);
  if (v63)
  {
    v64 = objc_opt_class();
    v63[2] = 0;
    v63[3] = v64;
    *v63 = off_1E1599F48;
    v63[1] = "CACornerRadii";
  }
  *(_QWORD *)(CAML::ObjCContext::_builtin_types + 176) = v63;
  v65 = (malloc_zone_t *)get_malloc_zone();
  result = malloc_type_zone_malloc(v65, 0x20uLL, 0x8BB15036uLL);
  v67 = result;
  if (result)
  {
    result = (_QWORD *)objc_opt_class();
    v67[2] = 0;
    v67[3] = result;
    *v67 = off_1E1599EF8;
    v67[1] = "CAColorMatrix";
  }
  *(_QWORD *)(CAML::ObjCContext::_builtin_types + 184) = v67;
  return result;
}

void sub_1845B253C(_Unwind_Exception *a1)
{
  void *v1;
  malloc_zone_t *malloc_zone;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, v1);
  _Unwind_Resume(a1);
}

void CA::WindowServer::IOMFBDisplay::update_framebuffer_locked(CA::WindowServer::IOMFBDisplay *this, int a2)
{
  char *v3;
  int v4;
  int v5;
  NSObject *v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  unsigned int *v12;
  const void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int32x4_t v20;
  CFTypeID v21;
  const __CFDictionary *Dictionary;
  const __CFDictionary *v23;
  const __CFDictionary *Int64;
  const __CFDictionary *v25;
  const __CFDictionary *v26;
  int64x2_t v27;
  const void *Value;
  const void *v29;
  unsigned int v30;
  int v31;
  int v32;
  NSObject *v33;
  int v34;
  const __CFString *v35;
  const __CFString *v36;
  CFTypeID v37;
  NSObject *v38;
  int v39;
  void *v40;
  const void *v41;
  const __CFString *v42;
  const __CFString *v43;
  CFTypeID v44;
  CFTypeID v45;
  const __CFDictionary *v46;
  const __CFDictionary *v47;
  CFTypeID v48;
  const __CFDictionary *v49;
  const __CFDictionary *v50;
  _BOOL4 v51;
  __int16 Int;
  __int16 v53;
  uint64_t current_iomfb_mode;
  int v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  int v60;
  NSObject *v61;
  const void *v62;
  char *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  _BOOL4 v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  float64x2_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  int32x4_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  const void *v96;
  float v97;
  float v98;
  const void *v99;
  const void *v100;
  unsigned int v101;
  unsigned int v103;
  const void *v104;
  const void *v105;
  int v106;
  int v107;
  const void *v108;
  const void *v109;
  int v110;
  int v111;
  const void *v112;
  const void *v113;
  int v114;
  const void *v115;
  const void *v116;
  BOOL v117;
  char v118;
  const __CFDictionary *v119;
  const __CFDictionary *v120;
  const void *v121;
  unsigned int v122;
  unsigned int v123;
  unint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  const void *v134;
  void *v135;
  const char *v136;
  unsigned int v137;
  NSObject *v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  _BOOL4 v145;
  float *v146;
  NSObject *v147;
  int v148;
  int v149;
  NSObject *v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  const char *v155;
  const __CFString *String;
  int v157;
  const __CFString *v158;
  CFTypeID v159;
  const void *v160;
  unsigned int v161;
  const void *v162;
  unsigned int v163;
  __int128 v164;
  __int128 v165;
  CFTypeID v166;
  const void *v167;
  const void *v168;
  int v169;
  uint64_t updated;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  CADisplayPersistedData *v175;
  uint64_t v176;
  unsigned int *v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  const void *v182;
  const void *v183;
  NSObject *v184;
  int v185;
  int v186;
  unsigned __int8 v187;
  unsigned __int8 v188;
  unsigned __int8 v189;
  const __CFDictionary *v190;
  unint64_t v191;
  uint64_t v192;
  BOOL v193;
  __int128 *v194;
  __int128 v195;
  uint64_t v196;
  uint8_t *v197;
  const __CFString *v199;
  const __CFString *v200;
  int v201;
  _OWORD *v202;
  __int128 v203;
  __int128 v204;
  const __CFDictionary *v205;
  const __CFDictionary *v206;
  const __CFDictionary *v207;
  const __CFDictionary *v208;
  const __CFDictionary *v209;
  const __CFDictionary *v210;
  const __CFDictionary *v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  const __CFDictionary *v221;
  const void *v222;
  const void *v223;
  _BOOL4 Bool;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  __int16 v230;
  int theDict;
  CFDictionaryRef theDicta;
  const __CFDictionary *theDictb;
  unsigned int *v234;
  char v235;
  CFTypeRef cf;
  _OWORD v237[3];
  uint64_t v238;
  CFArrayRef theArray;
  uint64_t v240;
  uint64_t v241;
  uint8_t buf[16];
  _OWORD v243[2];
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  uint8_t v257[8];
  __int16 v258;
  int v259;
  __int16 v260;
  unsigned int v261;
  __int16 v262;
  int v263;
  __int16 v264;
  int v265;
  __int16 v266;
  int v267;
  __int16 v268;
  unsigned int v269;
  __int16 v270;
  int v271;
  __int16 v272;
  int v273;
  uint64_t v274;

  v274 = *MEMORY[0x1E0C80C00];
  v3 = (char *)this + 26244;
  if (*(unsigned __int8 *)(*((_QWORD *)this + 91) + 2) | *(unsigned __int8 *)(*((_QWORD *)this + 91) + 3))
  {
    v4 = *((_DWORD *)this + 6612) | a2;
    *((_DWORD *)this + 6612) = 0;
    if (!v4)
      return;
  }
  else
  {
    *((_DWORD *)this + 6612) |= a2 & 0x130;
    LOWORD(v4) = a2 & 0xFECF;
    if ((a2 & 0xFFFFFECF) == 0)
      return;
  }
  if ((v4 & 0x200) != 0)
  {
    v5 = *((_WORD *)this + 328) & 0x1C00;
    if (v5 == 1024 || (v5 != 4096 ? (_ZF = *((_BYTE *)this + 28052) == 0) : (_ZF = 0), _ZF && *((_BYTE *)this + 27011)))
    {
      *(_DWORD *)v257 = 0;
      if (!IOMobileFramebufferGetDigitalOutState())
      {
        v3[1838] = 0;
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v7 = x_log_category_windowserver;
          if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
          {
            v8 = *((_DWORD *)this + 6);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v8;
            _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_DEFAULT, "Display %u get_hotplug_state - not active", buf, 8u);
          }
        }
        return;
      }
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v9 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
        {
          v10 = *((_DWORD *)this + 6);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v10;
          _os_log_impl(&dword_184457000, v9, OS_LOG_TYPE_DEFAULT, "Display %u get_hotplug_state - active", buf, 8u);
        }
      }
    }
  }
  v11 = *((unsigned __int8 *)this + 672);
  *((_BYTE *)this + 672) = v11 + 1;
  if (!v11)
    *((_QWORD *)this + 83) = mach_continuous_time();
  v12 = (unsigned int *)((char *)this + 25676);
  if ((v4 & 0x46) != 0)
  {
    v13 = (const void *)IOMobileFramebufferCopyProperty();
    cf = (CFTypeRef)IOMobileFramebufferCopyProperty();
  }
  else
  {
    cf = 0;
    v13 = 0;
  }
  memset(v237, 0, 44);
  (*(void (**)(_OWORD *__return_ptr, CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1360))(v237, this);
  if ((v4 & 0x42) == 0 || !v3[1808])
  {
    v31 = 0;
    goto LABEL_38;
  }
  *((_QWORD *)this + 3277) = 0x447A00003BA3D70ALL;
  *((_DWORD *)this + 6558) = 0;
  if (!v13 || (v21 = CFGetTypeID(v13), v21 != CFDictionaryGetTypeID()))
  {
    v32 = 0;
    goto LABEL_255;
  }
  Dictionary = (const __CFDictionary *)CA_CFDictionaryGetDictionary((const __CFDictionary *)v13, CFSTR("Luminance"));
  if (Dictionary)
  {
    v23 = Dictionary;
    Int64 = CA_CFDictionaryGetInt64(Dictionary, CFSTR("Min"));
    v25 = CA_CFDictionaryGetInt64(v23, CFSTR("Max"));
    v26 = CA_CFDictionaryGetInt64(v23, CFSTR("MaxFrameAverage"));
    v27.i64[0] = (uint64_t)Int64;
    v27.i64[1] = (uint64_t)v25;
    *((float32x2_t *)this + 3277) = vmul_f32(vcvt_f32_f64(vcvtq_f64_s64(v27)), (float32x2_t)vdup_n_s32(0x37800000u));
    *((float *)this + 6558) = (float)(uint64_t)v26 * 0.000015259;
  }
  Value = CFDictionaryGetValue((CFDictionaryRef)v13, CFSTR("DolbyVisionDMVersion"));
  if (Value)
    LODWORD(Value) = CA_CFIntValue(Value);
  *((_DWORD *)this + 6560) = (_DWORD)Value;
  v29 = CFDictionaryGetValue((CFDictionaryRef)v13, CFSTR("MaxHorizontalImageSize"));
  if (v29)
    v30 = CA_CFIntValue(v29);
  else
    v30 = 0;
  v96 = CFDictionaryGetValue((CFDictionaryRef)v13, CFSTR("MaxVerticalImageSize"));
  if (v96)
    LODWORD(v96) = CA_CFIntValue(v96);
  v97 = (float)v30 * 0.3937;
  v98 = (float)v96 * 0.3937;
  *((double *)this + 3264) = v97;
  *((double *)this + 3265) = v98;
  if (v97 != 0.0 && v98 != 0.0)
    *((float *)this + 6532) = v97 / v98;
  v99 = CFDictionaryGetValue((CFDictionaryRef)v13, CFSTR("DolbyVisionSupports2160p60Hz"));
  v100 = v99;
  if (v99)
    v101 = CA_CFIntValue(v99);
  else
    v101 = 0;
  if (v101 >= 3 || v100 == 0)
    v103 = 0;
  else
    v103 = v101 + 1;
  theDictb = (const __CFDictionary *)v13;
  v104 = CFDictionaryGetValue((CFDictionaryRef)v13, CFSTR("SupportsPQEOTF"));
  v105 = v104;
  if (v104)
    v101 = CA_CFIntValue(v104);
  if (v101)
    v106 = 2;
  else
    v106 = 1;
  if (v105)
    v107 = v106;
  else
    v107 = 0;
  v108 = CFDictionaryGetValue((CFDictionaryRef)v13, CFSTR("SupportsBT2020YCC"));
  v109 = v108;
  if (v108)
    v101 = CA_CFIntValue(v108);
  if (v101)
    v110 = 2;
  else
    v110 = 1;
  if (v109)
    v111 = v110;
  else
    v111 = 0;
  v112 = CFDictionaryGetValue(theDictb, CFSTR("SupportsHDRStaticMetadataType1"));
  v113 = v112;
  if (v112)
    v101 = CA_CFIntValue(v112);
  v230 = v4;
  if (v101)
    v114 = 2;
  else
    v114 = 1;
  if (v113)
    v4 = v114;
  else
    v4 = 0;
  v115 = CFDictionaryGetValue(theDictb, CFSTR("HasHDMILegacyEDID"));
  v116 = v115;
  if (v115)
    v101 = CA_CFIntValue(v115);
  if (v116)
    v117 = v101 == 1;
  else
    v117 = 0;
  v118 = v117;
  v119 = (const __CFDictionary *)CA_CFDictionaryGetDictionary(theDictb, CFSTR("ProductAttributes"));
  v235 = v118;
  if (v119)
  {
    v120 = v119;
    v121 = CFDictionaryGetValue(v119, CFSTR("ProductID"));
    if (v121)
      v122 = CA_CFIntValue(v121);
    else
      v122 = 0;
    *((_DWORD *)v3 + 204) = v122;
    v134 = CFDictionaryGetValue(v120, CFSTR("LegacyManufacturerID"));
    if (v134)
      v123 = CA_CFIntValue(v134);
    else
      v123 = 0;
    v135 = (void *)*((_QWORD *)this + 3381);
    if (v135)
    {
      free(v135);
      *((_QWORD *)this + 3381) = 0;
    }
    v229 = v111;
    v228 = v4;
    if (v123 == 1552)
    {
      if (v122 - 44577 <= 0xE && ((1 << (v122 - 33)) & 0x7007) != 0)
      {
        v136 = "Pro Display XDR";
LABEL_220:
        v137 = v103;
        *((_QWORD *)this + 3381) = strdup(v136);
        v32 = 1;
        goto LABEL_240;
      }
      if (v122 >> 3 == 5575)
      {
        v136 = "Studio Display";
        goto LABEL_220;
      }
    }
    v137 = v103;
    v32 = 0;
LABEL_240:
    String = (const __CFString *)CA_CFDictionaryGetString(v120, CFSTR("ProductName"));
    v157 = v107;
    if (String)
    {
      if (!*((_QWORD *)this + 3381))
      {
        v158 = String;
        v159 = CFGetTypeID(String);
        if (v159 == CFStringGetTypeID())
        {
          v255 = 0u;
          v256 = 0u;
          v253 = 0u;
          v254 = 0u;
          v251 = 0u;
          v252 = 0u;
          v249 = 0u;
          v250 = 0u;
          v247 = 0u;
          v248 = 0u;
          v245 = 0u;
          v246 = 0u;
          v244 = 0u;
          *(_OWORD *)buf = 0u;
          memset(v243, 0, sizeof(v243));
          if (CFStringGetCString(v158, (char *)buf, 256, 0x8000100u))
          {
            *((_QWORD *)this + 3381) = strdup((const char *)buf);
            v32 = 1;
          }
        }
      }
    }
    v160 = CFDictionaryGetValue(v120, CFSTR("WeekOfManufacture"));
    if (v160)
      v161 = CA_CFIntValue(v160);
    else
      v161 = 0;
    v162 = CFDictionaryGetValue(v120, CFSTR("YearOfManufacture"));
    if (v162)
      v163 = CA_CFIntValue(v162);
    else
      v163 = 0;
    v119 = (const __CFDictionary *)CFDictionaryGetValue(v120, CFSTR("SerialNumber"));
    v124 = __PAIR64__(v163, v161);
    if (v119)
    {
      LODWORD(v119) = CA_CFIntValue(v119);
      v124 = __PAIR64__(v163, v161);
    }
    v103 = v137;
    v107 = v157;
    v111 = v229;
    v4 = v228;
    goto LABEL_254;
  }
  v122 = 0;
  v123 = 0;
  v32 = 0;
  v124 = 0;
LABEL_254:
  *(_QWORD *)&v164 = __PAIR64__(v107, v103);
  *((_QWORD *)&v164 + 1) = __PAIR64__(v4, v111);
  *(_QWORD *)&v165 = __PAIR64__(v123, v122);
  *((_QWORD *)&v165 + 1) = v124;
  *(_OWORD *)(v3 + 40) = v164;
  *((_DWORD *)v3 + 14) = 0;
  v3[60] = v235;
  *((_OWORD *)v3 + 4) = v165;
  *((_DWORD *)v3 + 20) = (_DWORD)v119;
  LOWORD(v4) = v230;
  v13 = theDictb;
LABEL_255:
  if (cf)
  {
    v166 = CFGetTypeID(cf);
    if (v166 == CFDictionaryGetTypeID())
    {
      v167 = CA_CFDictionaryGetString((const __CFDictionary *)cf, CFSTR("Downstream"));
      if (v167)
      {
        v168 = v167;
        if (CFEqual(v167, CFSTR("DP")))
        {
          v169 = 1;
        }
        else if (CFEqual(v168, CFSTR("DVI")))
        {
          v169 = 2;
        }
        else if (CFEqual(v168, CFSTR("HDMI")))
        {
          v169 = 3;
        }
        else if (CFEqual(v168, CFSTR("MIPI")))
        {
          v169 = 4;
        }
        else if (CFEqual(v168, CFSTR("VGA")))
        {
          v169 = 5;
        }
        else
        {
          v169 = 0;
        }
        *((_DWORD *)v3 + 31) = v169;
      }
    }
  }
  v221 = (const __CFDictionary *)IOMobileFramebufferCopyProperty();
  v222 = (const void *)*((_QWORD *)this + 3386);
  if (v222)
    CFRelease(v222);
  *((_QWORD *)this + 3386) = v221;
  v31 = v32 != 0;
  if (v221)
  {
    v223 = CFDictionaryGetValue(v221, CFSTR("IncludeAllLayers"));
    v12 = (unsigned int *)((char *)this + 25676);
    if (v223)
      LOBYTE(v223) = CA_CFBoolValue(v223);
    v3[1810] = (char)v223;
    v3[1811] = CA_CFDictionaryGetBool(*((const __CFDictionary **)this + 3386), CFSTR("NotifyOnDisallowedCloningLayers"));
    v3[1813] = CA_CFDictionaryGetBool(*((const __CFDictionary **)this + 3386), CFSTR("AllowRemoteControlLayers"));
    Bool = CA_CFDictionaryGetBool(*((const __CFDictionary **)this + 3386), CFSTR("OverrideCanvas"));
    v3[1814] = Bool;
    if (Bool)
    {
      *((_DWORD *)v3 + 448) = CA_CFDictionaryGetInt(*((const __CFDictionary **)this + 3386), CFSTR("OverrideCanvasWidth"));
      *((_DWORD *)v3 + 449) = CA_CFDictionaryGetInt(*((const __CFDictionary **)this + 3386), CFSTR("OverrideCanvasHeight"));
    }
  }
  else
  {
    v12 = (unsigned int *)((char *)this + 25676);
  }
LABEL_38:
  v234 = (unsigned int *)((char *)this + 745);
  if ((v4 & 0x40) != 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)this + 6753);
    if (*((_QWORD *)this + 3377))
    {
      free(*((void **)this + 3378));
      *((_QWORD *)this + 3378) = *((_QWORD *)this + 3377);
      *((_QWORD *)this + 3377) = 0;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v33 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
        {
          v34 = *((_DWORD *)this + 6);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v34;
          _os_log_impl(&dword_184457000, v33, OS_LOG_TYPE_DEFAULT, "Display %u  uuid cleared", buf, 8u);
        }
      }
    }
    v35 = (const __CFString *)IOMobileFramebufferCopyProperty();
    v36 = v35;
    if (v35)
    {
      v37 = CFGetTypeID(v35);
      if (v37 == CFStringGetTypeID())
      {
        v255 = 0u;
        v256 = 0u;
        v253 = 0u;
        v254 = 0u;
        v251 = 0u;
        v252 = 0u;
        v249 = 0u;
        v250 = 0u;
        v247 = 0u;
        v248 = 0u;
        v245 = 0u;
        v246 = 0u;
        v244 = 0u;
        *(_OWORD *)buf = 0u;
        memset(v243, 0, sizeof(v243));
        if (CFStringGetCString(v36, (char *)buf, 256, 0x8000100u))
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v38 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
            {
              v39 = *((_DWORD *)this + 6);
              *(_DWORD *)v257 = 67109120;
              *(_DWORD *)&v257[4] = v39;
              _os_log_impl(&dword_184457000, v38, OS_LOG_TYPE_DEFAULT, "Display %u uuid set ", v257, 8u);
            }
          }
          *((_QWORD *)this + 3377) = strdup((const char *)buf);
          v31 = 1;
        }
      }
    }
    v40 = (void *)*((_QWORD *)this + 3379);
    if (v40)
    {
      free(v40);
      *((_QWORD *)this + 3379) = 0;
    }
    v41 = (const void *)*((_QWORD *)this + 3380);
    if (v41)
    {
      CFRelease(v41);
      *((_QWORD *)this + 3380) = 0;
    }
    v42 = (const __CFString *)IOMobileFramebufferCopyProperty();
    if (v42)
    {
      v43 = v42;
      v44 = CFGetTypeID(v42);
      if (v44 == CFStringGetTypeID())
      {
        v255 = 0u;
        v256 = 0u;
        v253 = 0u;
        v254 = 0u;
        v251 = 0u;
        v252 = 0u;
        v249 = 0u;
        v250 = 0u;
        v247 = 0u;
        v248 = 0u;
        v245 = 0u;
        v246 = 0u;
        v244 = 0u;
        *(_OWORD *)buf = 0u;
        memset(v243, 0, sizeof(v243));
        if (CFStringGetCString(v43, (char *)buf, 256, 0x8000100u))
        {
          *((_QWORD *)this + 3379) = strdup((const char *)buf);
          v31 = 1;
        }
        *((_QWORD *)this + 3380) = CFUUIDCreateFromString(0, v43);
      }
      CFRelease(v43);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)this + 6753);
    if (v36)
    {
      v45 = CFGetTypeID(v36);
      if (v45 == CFStringGetTypeID())
      {
        if (*((_QWORD *)this + 3377))
        {
          if (*((_QWORD *)this + 3378))
          {
            *(_OWORD *)buf = 0u;
            memset(v243, 0, 28);
            (*(void (**)(uint8_t *__return_ptr, CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1360))(buf, this);
            if (strcmp(*((const char **)this + 3377), *((const char **)this + 3378)))
            {
              if (*((_QWORD *)&v243[0] + 1) == *((_QWORD *)&v237[1] + 1) && !v3[1824])
                CA::WindowServer::Display::set_user_preferences((uint64_t)this, *v234 & 1, *((unsigned __int16 *)this + 328) >> 13, 1);
            }
          }
        }
        v46 = (const __CFDictionary *)CFPreferencesCopyAppValue(CFSTR("CADisplayPreferences"), (CFStringRef)*MEMORY[0x1E0C9B248]);
        if (v46)
        {
          v47 = v46;
          v48 = CFGetTypeID(v46);
          if (v48 == CFDictionaryGetTypeID()
            && (v49 = (const __CFDictionary *)CA_CFDictionaryGetDictionary(v47, v36)) != 0)
          {
            v50 = v49;
            v51 = CA_CFDictionaryGetBool(v49, CFSTR("matchContent"));
            Int = CA_CFDictionaryGetInt(v50, CFSTR("preferredHdrType"));
            *v234 = *v234 & 0xFFFFFFFE | v51;
            v53 = *((_WORD *)this + 328) & 0x1FFF | (Int << 13);
          }
          else
          {
            *v234 &= ~1u;
            v53 = *((_WORD *)this + 328) & 0x1FFF;
          }
          *((_WORD *)this + 328) = v53;
          CFRelease(v47);
        }
        else
        {
          *v234 &= ~1u;
          *((_WORD *)this + 328) &= 0x1FFFu;
        }
      }
      CFRelease(v36);
    }
  }
  if ((v4 & 2) == 0)
    goto LABEL_121;
  v245 = 0u;
  v246 = 0u;
  *(_OWORD *)buf = 0u;
  *(_QWORD *)&v243[0] = 0;
  v243[1] = 0u;
  v244 = 0u;
  *((_QWORD *)&v243[0] + 1) = &v243[1];
  LODWORD(v246) = 1065353216;
  current_iomfb_mode = *((_QWORD *)this + 80);
  v240 = 0;
  v241 = current_iomfb_mode;
  v55 = *((unsigned __int8 *)this + 636);
  if (v55 == 2)
  {
    if (v3[1808])
    {
      *(_QWORD *)v257 = 0;
      theArray = 0;
      IOMobileFramebufferGetSupportedDigitalOutModes();
      X::CFRef<__CFDictionary const*>::operator=((const void **)this + 3385, theArray);
      CA::WindowServer::IOMFBDisplay::update_digital_modes(this, (CA::WindowServer::Display::ModeSet *)buf, (CA::WindowServer::Display::Mode *)&v240, *(const __CFArray **)v257, theArray);
    }
  }
  else if (v55 == 1)
  {
    *(_QWORD *)v257 = 0;
    theArray = 0;
    IOMobileFramebufferGetSupportedDigitalOutModes();
    X::CFRef<__CFDictionary const*>::operator=((const void **)this + 3385, theArray);
    if (*(_QWORD *)v257 && theArray && (CFArrayGetCount(*(CFArrayRef *)v257) > 1 || CFArrayGetCount(theArray) >= 2))
    {
      CA::WindowServer::IOMFBDisplay::update_digital_modes(this, (CA::WindowServer::Display::ModeSet *)buf, (CA::WindowServer::Display::Mode *)&v240, *(const __CFArray **)v257, theArray);
      current_iomfb_mode = CA::WindowServer::IOMFBDisplay::fetch_current_iomfb_mode(this);
      v241 = current_iomfb_mode;
    }
    else
    {
      v238 = -1;
      CA::WindowServer::Display::ModeSet::add_mode((CA::WindowServer::Display::ModeSet *)buf, (const CA::WindowServer::Display::Mode *)&v238);
    }
  }
  theDict = v31;
  if (current_iomfb_mode)
  {
    v56 = *(uint64_t **)buf;
    v57 = *(uint64_t **)&buf[8];
    if (*(_QWORD *)buf == *(_QWORD *)&buf[8])
    {
      v57 = *(uint64_t **)buf;
    }
    else
    {
      while ((CA::WindowServer::Display::Mode::operator==(*v56, current_iomfb_mode) & 1) == 0)
      {
        if (++v56 == v57)
        {
          v56 = v57;
          break;
        }
      }
    }
    v58 = v240;
    if (v56 != v57)
      goto LABEL_99;
  }
  else
  {
    v58 = v240;
  }
  v241 = v58;
  current_iomfb_mode = v58;
LABEL_99:
  v59 = CA::WindowServer::Display::set_all_modes((uint64_t)this, (uint64_t)buf, current_iomfb_mode, v58);
  v60 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 680))(this);
  if (x_log_hook_p())
  {
    std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6600, current_iomfb_mode, &v241);
    std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6600, current_iomfb_mode, &v241);
    std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6600, v58, &v240);
    std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6600, v58, &v240);
    x_log_();
  }
  else
  {
    v61 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      v227 = *((_DWORD *)this + 6);
      v226 = *((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6600, current_iomfb_mode, &v241)+ 7);
      v225 = *((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6600, current_iomfb_mode, &v241)+ 6);
      v62 = v13;
      v63 = v3;
      v64 = *((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6600, v58, &v240)+ 7);
      v65 = *((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6600, v58, &v240)+ 6);
      *(_DWORD *)v257 = 67111168;
      *(_DWORD *)&v257[4] = v227;
      v258 = 1024;
      v259 = current_iomfb_mode & 0x3FFF;
      v260 = 1024;
      v261 = (current_iomfb_mode >> 14) & 0x3FFF;
      v262 = 1024;
      v263 = v226;
      v264 = 1024;
      v265 = v225;
      v266 = 1024;
      v267 = v58 & 0x3FFF;
      v268 = 1024;
      v269 = (v58 >> 14) & 0x3FFF;
      v270 = 1024;
      v271 = v64;
      v3 = v63;
      v13 = v62;
      v272 = 1024;
      v273 = v65;
      _os_log_impl(&dword_184457000, v61, OS_LOG_TYPE_DEFAULT, "Display %u current mode (%u x %u) [%u %u], preferred mode (%u x %u) [%u %u]", v257, 0x38u);
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v244);
  std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*(_QWORD **)&v243[1]);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  v31 = v60 | v59 | theDict;
  v66 = *((_QWORD *)this + 3383);
  v12 = (unsigned int *)((char *)this + 25676);
  if (!v3[1805])
  {
    v67 = *((_QWORD *)this + 80);
    if (!CA::WindowServer::Display::Mode::operator==(*((_QWORD *)this + 3383), v67) || v3[1887])
    {
      *((_QWORD *)this + 3383) = v67;
      LOWORD(v4) = v4 | 4;
      v66 = v67;
    }
  }
  if (v66)
  {
    os_unfair_lock_lock((os_unfair_lock_t)this + 98);
    CA::WindowServer::Display::ModeSet::ModeSet((CA::WindowServer::Display::ModeSet *)buf, (CA::WindowServer::IOMFBDisplay *)((char *)this + 400));
    os_unfair_lock_unlock((os_unfair_lock_t)this + 98);
    v69 = *(uint64_t **)buf;
    v68 = *(uint64_t **)&buf[8];
    if (*(_QWORD *)buf == *(_QWORD *)&buf[8])
    {
      v71 = 1;
    }
    else
    {
      v70 = *((_QWORD *)this + 3383);
      while ((CA::WindowServer::Display::Mode::operator==(*v69, v70) & 1) == 0)
      {
        if (++v69 == v68)
        {
          v69 = v68;
          break;
        }
      }
      v71 = v69 == v68;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v244);
    std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*(_QWORD **)&v243[1]);
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    if (v71)
    {
      *((_QWORD *)this + 3383) = 0;
      LOWORD(v4) = v4 | 4;
    }
  }
LABEL_121:
  if ((v4 & 1) != 0)
    IOMobileFramebufferSetDebugFlags();
  if ((v4 & 4) != 0)
  {
    (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 2152))(this);
    if (v3[1808])
    {
      if (*((_BYTE *)this + 636) != 2)
        goto LABEL_144;
      theDicta = (CFDictionaryRef)v13;
      os_unfair_lock_lock((os_unfair_lock_t)this + 98);
      CA::WindowServer::Display::ModeSet::ModeSet((CA::WindowServer::Display::ModeSet *)buf, (CA::WindowServer::IOMFBDisplay *)((char *)this + 400));
      os_unfair_lock_unlock((os_unfair_lock_t)this + 98);
      v72 = (uint64_t *)((char *)this + 27064);
      v73 = *(uint64_t **)buf;
      v74 = *(uint64_t **)&buf[8];
      if (*(_QWORD *)buf == *(_QWORD *)&buf[8])
      {
        v74 = *(uint64_t **)buf;
      }
      else
      {
        v75 = *v72;
        while ((CA::WindowServer::Display::Mode::operator==(*v73, v75) & 1) == 0)
        {
          if (++v73 == v74)
          {
            v73 = v74;
            break;
          }
        }
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v244);
      std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*(_QWORD **)&v243[1]);
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      _ZF = v73 == v74;
      v13 = theDicta;
      if (_ZF)
      {
LABEL_144:
        v245 = 0u;
        v246 = 0u;
        *(_OWORD *)buf = 0u;
        *(_QWORD *)&v243[0] = 0;
        v243[1] = 0u;
        v244 = 0u;
        *((_QWORD *)&v243[0] + 1) = &v243[1];
        LODWORD(v246) = 1065353216;
        CA::WindowServer::Display::set_all_modes((uint64_t)this, (uint64_t)buf, 0, 0);
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v244);
        std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*(_QWORD **)&v243[1]);
        if (*(_QWORD *)buf)
        {
          *(_QWORD *)&buf[8] = *(_QWORD *)buf;
          operator delete(*(void **)buf);
        }
        *((_QWORD *)this + 3383) = 0;
        v3[1805] = 0;
        v94 = (unsigned int *)((char *)this + 624);
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 & 0xFFFFFFFE, v94));
        *((_DWORD *)v3 + 49) = 0;
        IOMobileFramebufferSetDisplayDevice();
        *v234 &= ~0x200u;
        (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 952))(this);
        (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 928))(this);
      }
      else
      {
        if (!(*(unsigned __int8 *)(*((_QWORD *)this + 91) + 2) | *(unsigned __int8 *)(*((_QWORD *)this + 91) + 3)))
        {
          (*(void (**)(CA::WindowServer::IOMFBDisplay *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 2112))(this, 1, 0, 0);
          CA::WindowServer::Display::complete_powering_on((os_unfair_lock_s *)this);
        }
        IOMobileFramebufferSetDisplayDevice();
        v89 = *((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6600, *((_QWORD *)this + 3383), (uint64_t *)this + 3383)+ 6);
        v90 = *((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6600, *((_QWORD *)this + 3383), (uint64_t *)this + 3383)+ 7);
        pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25688));
        v91 = *v12;
        *(_QWORD *)&buf[8] = 0;
        v243[0] = 0uLL;
        v92 = *((_QWORD *)this + 6 * v91 + 3220);
        if (v92)
          v93 = *(_QWORD *)(v92 + 32);
        else
          v93 = 0;
        v125 = 0;
        v126 = 0;
        v127 = *((_QWORD *)this + 6 * v91 + 3221);
        *(_QWORD *)buf = v93;
        *(_QWORD *)&v243[0] = v127;
        BYTE8(v243[0]) = v3[141] == 2;
        while (1)
        {
          v128 = v125;
          v129 = *(_QWORD *)&buf[16 * v126];
          if (v129)
          {
            if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 2224))(this, *(unsigned int *)(v129 + 56), *(unsigned int *)(v129 + 60), *((_DWORD *)this + 6766) & 0x3FFF, (*((_DWORD *)this + 6766) >> 14) & 0x3FFF, buf[16 * v126 + 8]) & 1) == 0)break;
          }
          v125 = 1;
          v126 = 1;
          if ((v128 & 1) != 0)
            goto LABEL_224;
        }
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v138 = x_log_category_windowserver;
          if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_INFO))
          {
            v139 = *(_DWORD *)(v129 + 56);
            v140 = *(_DWORD *)(v129 + 60);
            v141 = *(_DWORD *)v72 & 0x3FFF;
            v142 = (*(_DWORD *)v72 >> 14) & 0x3FFF;
            *(_DWORD *)v257 = 67109888;
            *(_DWORD *)&v257[4] = v139;
            v258 = 1024;
            v259 = v140;
            v260 = 1024;
            v261 = v141;
            v262 = 1024;
            v263 = v142;
            _os_log_impl(&dword_184457000, v138, OS_LOG_TYPE_INFO, "Current %dx%d surface exceeds scaling limits for new %dx%d display mode; clearing before mode change",
              v257,
              0x1Au);
          }
        }
        CA::WindowServer::IOMFBDisplay::set_all_layers_to_null((uint64_t)this, 1);
LABEL_224:
        pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 25688));
        v143 = v89;
        v144 = IOMobileFramebufferSetDigitalOutMode();
        CA::WindowServer::IOMFBDisplay::update_display_bandwidth_limits(this, (CA::WindowServer::IOMFBDisplay *)((char *)this + 27064));
        v145 = x_log_hook_p();
        if (v144)
        {
          v146 = (float *)((char *)this + 26400);
          if (v145)
          {
            x_log_();
          }
          else
          {
            v147 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
            {
              v148 = *(_DWORD *)v72 & 0x3FFF;
              v149 = (*(_DWORD *)v72 >> 14) & 0x3FFF;
              *(_DWORD *)buf = 67110144;
              *(_DWORD *)&buf[4] = v143;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v90;
              *(_WORD *)&buf[14] = 1024;
              LODWORD(v243[0]) = v148;
              WORD2(v243[0]) = 1024;
              *(_DWORD *)((char *)v243 + 6) = v149;
              WORD5(v243[0]) = 1024;
              HIDWORD(v243[0]) = v144;
              _os_log_impl(&dword_184457000, v147, OS_LOG_TYPE_ERROR, "set digital mode failed [%d %d] %dx%d: 0x%x", buf, 0x20u);
            }
          }
          std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear((_QWORD *)this + 3300);
          v245 = 0u;
          v246 = 0u;
          *(_OWORD *)buf = 0u;
          *(_QWORD *)&v243[0] = 0;
          v243[1] = 0u;
          v244 = 0u;
          *((_QWORD *)&v243[0] + 1) = &v243[1];
          LODWORD(v246) = 1065353216;
          CA::WindowServer::Display::set_all_modes((uint64_t)this, (uint64_t)buf, 0, 0);
          std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v244);
          std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*(_QWORD **)&v243[1]);
          if (*(_QWORD *)buf)
          {
            *(_QWORD *)&buf[8] = *(_QWORD *)buf;
            operator delete(*(void **)buf);
          }
          *v72 = 0;
          *((_QWORD *)this + 3384) = 0;
        }
        else
        {
          v146 = (float *)((char *)this + 26400);
          if (v145)
          {
            x_log_();
          }
          else
          {
            v150 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
            {
              v151 = *v72 & 0x3FFF;
              v152 = (*v72 >> 14) & 0x3FFF;
              v153 = ((unint64_t)*v72 >> 45) & 0x1FF;
              v154 = (((unint64_t)*v72 >> 55) & 0x1F) - 1;
              if (v154 > 0x1B)
                v155 = "";
              else
                v155 = off_1E159D930[v154];
              *(_DWORD *)buf = 67110402;
              *(_DWORD *)&buf[4] = v143;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v90;
              *(_WORD *)&buf[14] = 1024;
              LODWORD(v243[0]) = v151;
              WORD2(v243[0]) = 1024;
              *(_DWORD *)((char *)v243 + 6) = v152;
              WORD5(v243[0]) = 1024;
              HIDWORD(v243[0]) = v153;
              LOWORD(v243[1]) = 2080;
              *(_QWORD *)((char *)&v243[1] + 2) = v155;
              _os_log_impl(&dword_184457000, v150, OS_LOG_TYPE_DEFAULT, "set digital mode [%d %d] %dx%d %dhz %s\n", buf, 0x2Au);
            }
          }
          *((_QWORD *)this + 3384) = *((_QWORD *)this + 3383);
          CA::WindowServer::IOMFBDisplay::post_hotplug_log(this);
        }
        v3[1887] = 0;
        updated = CA::WindowServer::IOMFBDisplay::update_timing_info((uint64_t)this);
        v171 = *((_QWORD *)this + 3377);
        v172 = 0;
        if (v171)
        {
          v173 = *((_QWORD *)this + 3383);
          if (v173)
          {
            v174 = (void *)MEMORY[0x186DBE2E4](updated);
            v175 = +[CADisplayPersistedData sharedInstance](CADisplayPersistedData, "sharedInstance");
            -[CADisplayPersistedData latencyForUUID:andMode:](v175, "latencyForUUID:andMode:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v171), v173);
            v172 = v176;
            objc_autoreleasePoolPop(v174);
          }
        }
        *((_QWORD *)this + 3387) = v172;
        v177 = (unsigned int *)((char *)this + 624);
        if (*((_BYTE *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>(v146, *((_QWORD *)this + 80), (uint64_t *)this + 80)+ 40))
        {
          do
            v178 = __ldaxr(v177);
          while (__stlxr(v178 | 1, v177));
        }
        else
        {
          do
            v179 = __ldaxr(v177);
          while (__stlxr(v179 & 0xFFFFFFFE, v177));
        }
        *((_DWORD *)v3 + 49) = *((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>(v146, *((_QWORD *)this + 80), (uint64_t *)this + 80)+ 9);
        if (CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::IOMFBDisplay *)((char *)this + 640))
          || (*((_QWORD *)this + 80) & 0xF80000000000000) == 0x680000000000000 && v3[1841])
        {
          do
            v180 = __ldaxr(v177);
          while (__stlxr(v180 | 8, v177));
        }
        else
        {
          do
            v181 = __ldaxr(v177);
          while (__stlxr(v181 & 0xFFFFFFF7, v177));
        }
        v3[688] = 0;
        (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1072))(this);
        v13 = theDicta;
      }
      (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 2200))(this);
      CA::WindowServer::IOMFBDisplay::update_brightness_capabilities(this, 0);
LABEL_282:
      v3[1892] = 0;
      v182 = (const void *)IOMobileFramebufferCopyProperty();
      if (v182)
      {
        v183 = v182;
        v3[1892] = CA_CFBoolValue(v182);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v184 = x_log_category_windowserver;
          if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
          {
            v185 = *((_DWORD *)this + 6);
            v186 = v3[1892];
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = v185;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v186;
            _os_log_impl(&dword_184457000, v184, OS_LOG_TYPE_DEFAULT, "Display %d EDR scaling applied in GP: %d", buf, 0xEu);
          }
        }
        CFRelease(v183);
      }
      v3[32] = 0;
      *((_DWORD *)v3 + 9) = 0;
      if ((v187 & 1) == 0
      {
        CA::WindowServer::IOMFBDisplay::update_chromaticity(__CFDictionary const*)::srgb = xmmword_18474E990;
        *(_OWORD *)algn_1EDD11190 = xmmword_18474E9A0;
        byte_1EDD111A0 = 1;
      }
      if ((v188 & 1) == 0
      {
        CA::WindowServer::IOMFBDisplay::update_chromaticity(__CFDictionary const*)::p3 = xmmword_18474E9B0;
        unk_1EDD11160 = xmmword_18474E9A0;
        byte_1EDD11170 = 1;
      }
      if ((v189 & 1) == 0
      {
        CA::WindowServer::IOMFBDisplay::update_chromaticity(__CFDictionary const*)::bt2020 = xmmword_18474E9C0;
        *(_OWORD *)algn_1EDD111D0 = xmmword_18474E9D0;
        byte_1EDD111E0 = 1;
      }
      if ((*((_WORD *)this + 328) & 0xC00) != 0)
      {
        if (v13 && v3[1808] && *((_QWORD *)this + 80))
        {
          v190 = (const __CFDictionary *)v13;
          v191 = *((_QWORD *)this + 3383);
          v192 = (v191 >> 55) & 0x1F;
          v193 = CA::WindowServer::Display::Mode::hdr_type(v191) == 5
              || CA::WindowServer::Display::Mode::hdr_type(*((_QWORD *)this + 3383)) == 4;
          if (v192 <= 0x19 && ((1 << v192) & 0x300E000) != 0)
          {
            v13 = v190;
            if (v193)
            {
              v199 = CFSTR("DolbyVisionWhitePoint");
              v200 = CFSTR("DolbyVisionChromaticity");
LABEL_342:
              v205 = (const __CFDictionary *)CA_CFDictionaryGetDictionary((const __CFDictionary *)v13, v200);
              v206 = (const __CFDictionary *)CA_CFDictionaryGetDictionary((const __CFDictionary *)v13, v199);
              if (v205)
              {
                v207 = v206;
                if (v206)
                {
                  v208 = (const __CFDictionary *)CA_CFDictionaryGetDictionary(v205, CFSTR("Blue"));
                  v209 = (const __CFDictionary *)CA_CFDictionaryGetDictionary(v205, CFSTR("Green"));
                  v210 = (const __CFDictionary *)CA_CFDictionaryGetDictionary(v205, CFSTR("Red"));
                  if (v208)
                  {
                    if (v209)
                    {
                      v211 = v210;
                      if (v210)
                      {
                        v212 = (double)(int)CA_CFDictionaryGetInt(v208, CFSTR("X")) * 0.0000152587891;
                        *((float *)v3 + 4) = v212;
                        v213 = (double)(int)CA_CFDictionaryGetInt(v208, CFSTR("Y")) * 0.0000152587891;
                        *((float *)v3 + 5) = v213;
                        v214 = (double)(int)CA_CFDictionaryGetInt(v209, CFSTR("X")) * 0.0000152587891;
                        *((float *)v3 + 2) = v214;
                        v215 = (double)(int)CA_CFDictionaryGetInt(v209, CFSTR("Y")) * 0.0000152587891;
                        *((float *)v3 + 3) = v215;
                        v216 = (double)(int)CA_CFDictionaryGetInt(v211, CFSTR("X")) * 0.0000152587891;
                        *(float *)v3 = v216;
                        v217 = (double)(int)CA_CFDictionaryGetInt(v211, CFSTR("Y")) * 0.0000152587891;
                        *((float *)v3 + 1) = v217;
                        v218 = (double)(int)CA_CFDictionaryGetInt(v207, CFSTR("X")) * 0.0000152587891;
                        *((float *)v3 + 6) = v218;
                        v219 = (double)(int)CA_CFDictionaryGetInt(v207, CFSTR("Y")) * 0.0000152587891;
                        *((float *)v3 + 7) = v219;
                        v220 = (double)(int)CA_CFDictionaryGetInt(v207, CFSTR("Gamma")) * 0.0000152587891;
                        *((float *)v3 + 9) = v220;
                        v3[32] = 1;
                      }
                    }
                  }
                }
              }
              goto LABEL_301;
            }
LABEL_341:
            v199 = CFSTR("DefaultWhitePoint");
            v200 = CFSTR("Chromaticity");
            goto LABEL_342;
          }
          if (v193)
          {
            v199 = CFSTR("DolbyVisionWhitePoint");
            v200 = CFSTR("DolbyVisionChromaticity");
            v13 = v190;
            goto LABEL_342;
          }
          v201 = CA::WindowServer::Display::Mode::hdr_type(*((_QWORD *)this + 3383));
          v202 = (_OWORD *)((char *)this + 26244);
          v13 = v190;
          if (v201 == 3)
          {
            v203 = *(_OWORD *)algn_1EDD111D0;
            *v202 = CA::WindowServer::IOMFBDisplay::update_chromaticity(__CFDictionary const*)::bt2020;
            *(_OWORD *)((char *)this + 26260) = v203;
            *((_BYTE *)this + 26276) = byte_1EDD111E0;
          }
          else
          {
            v204 = *(_OWORD *)algn_1EDD11190;
            *v202 = CA::WindowServer::IOMFBDisplay::update_chromaticity(__CFDictionary const*)::srgb;
            *(_OWORD *)((char *)this + 26260) = v204;
            *((_BYTE *)this + 26276) = byte_1EDD111A0;
            buf[0] = 0;
            if (CA_CFDictionaryGetBoolIfExists(v190, (BOOL *)buf) && !buf[0])
              goto LABEL_341;
          }
        }
      }
      else
      {
        if ((*((_DWORD *)this + 156) & 8) != 0)
          v194 = &CA::WindowServer::IOMFBDisplay::update_chromaticity(__CFDictionary const*)::p3;
        else
          v194 = &CA::WindowServer::IOMFBDisplay::update_chromaticity(__CFDictionary const*)::srgb;
        v195 = v194[1];
        *(_OWORD *)((char *)this + 26244) = *v194;
        *(_OWORD *)((char *)this + 26260) = v195;
        *((_BYTE *)this + 26276) = *((_BYTE *)v194 + 32);
        *((_DWORD *)v3 + 9) = 1074580685;
      }
LABEL_301:
      CA::WindowServer::IOMFBDisplay::set_needs_icc_reload(this);
      v31 = 1;
      v3[1819] = 1;
      *((_DWORD *)this + 6537) = 2143289344;
      goto LABEL_302;
    }
    IOMobileFramebufferSetDisplayDevice();
    v84 = *((_QWORD *)this + 3383);
    if (v84 != -1)
    {
      if (!v3[1838])
      {
LABEL_209:
        CA::WindowServer::Display::set_mode(this, (CA::WindowServer::IOMFBDisplay *)((char *)this + 27064));
        goto LABEL_282;
      }
      v85 = *((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6600, v84, (uint64_t *)this + 3383)+ 6);
      v86 = *((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6600, *((_QWORD *)this + 3383), (uint64_t *)this + 3383)+ 7);
      v87 = IOMobileFramebufferSetDigitalOutMode();
      CA::WindowServer::IOMFBDisplay::update_display_bandwidth_limits(this, (CA::WindowServer::IOMFBDisplay *)((char *)this + 27064));
      CA::WindowServer::IOMFBDisplay::update_timing_info((uint64_t)this);
      if (v87)
      {
        x_log_crash("CoreAnimation: failed to set internal panel mode! [%d %d] %dx%d: 0x%x", v85, v86, *((_DWORD *)this + 6766) & 0x3FFF, (*((_DWORD *)this + 6766) >> 14) & 0x3FFF, v87);
        abort();
      }
      v88 = *((_QWORD *)this + 3383);
      if (!CA::WindowServer::Display::Mode::operator==(v88, *((_QWORD *)this + 81)))
      {
        *(_DWORD *)v257 = v88 & 0x3FFF;
        *(_DWORD *)&v257[4] = (v88 >> 14) & 0x3FFF;
        __asm { FMOV            V0.2D, #1.0 }
        *(_OWORD *)buf = _Q0;
        CA::WindowServer::Display::set_size((uint64_t)this, (uint64_t)v257, (uint64_t)v257, (double *)buf, *(double *)&_Q0, v77, v78, v79, v80, v81, v82, v83);
        goto LABEL_209;
      }
    }
    CA::WindowServer::IOMFBDisplay::set_physical_and_canvas_sizes((__n128 *)this, v76, v77, v78, v79, v80, v81, v82, v83);
    goto LABEL_209;
  }
LABEL_302:
  if ((v4 & 8) != 0)
    IOMobileFramebufferEnableDisableVideoPowerSavings();
  if ((v4 & 0x20) != 0 && (*((_WORD *)this + 328) & 0x1C00) != 0x800)
    IOMobileFramebufferSetContrast();
  if ((v4 & 0x10) != 0)
    IOMobileFramebufferSetColorRemapMode();
  if ((v4 & 0x100) != 0)
    IOMobileFramebufferSetBrightnessCorrection();
  if ((v4 & 0x86) == 0)
    goto LABEL_322;
  if (!*((_BYTE *)this + 636) || (v196 = *((_QWORD *)this + 80)) == 0)
  {
    *(_QWORD *)v257 = 0;
    goto LABEL_319;
  }
  if (*((_BYTE *)this + 636) == 2)
  {
    if ((*((_WORD *)this + 328) & 0x1C00) == 0x800 && v3[1814])
    {
      *(_DWORD *)v257 = v196 & 0x3FFF;
      *(_DWORD *)&v257[4] = (v196 >> 14) & 0x3FFF;
      v197 = (uint8_t *)this + 28036;
      __asm { FMOV            V0.2D, #1.0 }
      *(_OWORD *)buf = _Q0;
LABEL_320:
      CA::WindowServer::Display::set_size((uint64_t)this, (uint64_t)v257, (uint64_t)v197, (double *)buf, *(double *)&_Q0, v14, v15, v16, v17, v18, v19, v20);
      goto LABEL_321;
    }
    *(_DWORD *)v257 = v196 & 0x3FFF;
    *(_DWORD *)&v257[4] = (v196 >> 14) & 0x3FFF;
LABEL_319:
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)buf = _Q0;
    v197 = v257;
    goto LABEL_320;
  }
LABEL_321:
  CA::WindowServer::IOMFBDisplay::mark_buffers_non_static((uint64_t)this, 0);
LABEL_322:
  if (v31)
    CA::WindowServer::Display::post_display_changed((uint64_t)this);
  CA::WindowServer::Display::end_display_changes((uint64_t)this);
  if (cf)
    CFRelease(cf);
  if (v13)
    CFRelease(v13);
}

void sub_1845B4590(_Unwind_Exception *a1)
{
  void *v1;

  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::WindowServer::Display::end_display_changes(uint64_t this)
{
  uint64_t v1;
  char v2;
  _DWORD *v3;

  if (!*(_BYTE *)(this + 672))
    __assert_rtn("end_display_changes", "windowserver-display.cpp", 1876, "_display_changing > 0");
  v1 = this;
  v2 = *(_BYTE *)(this + 672) - 1;
  *(_BYTE *)(this + 672) = v2;
  if (!v2 && (*(_BYTE *)(this + 746) & 0x80) != 0)
  {
    v3 = (_DWORD *)(this + 745);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)this + 2016))(this, *(_QWORD *)(this + 664));
    this = CA::WindowServer::Display::post_display_changed(v1);
    *v3 &= ~0x8000u;
  }
  return this;
}

char *x_stream_printf(uint64_t a1, char *__s, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v11;
  char *v12;
  size_t v13;
  char *v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  size_t v26;
  int v27;
  double *v28;
  char *v29;
  int v30;
  int v31;
  char *v32;
  double v33;
  double v34;
  char v36;
  int v37;
  char *v38;
  double *v39;
  size_t v40;
  size_t v41;
  size_t v42;
  size_t v43;
  size_t v44;
  char *v45;
  unint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  size_t v51;
  unint64_t v52;
  double *v53;
  double v54;
  double v55;
  size_t v56;
  size_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  unint64_t v64;
  _BYTE *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  size_t v69;
  size_t v70;
  char *v71;
  int v72;
  int *v73;
  int v74;
  size_t v75;
  size_t v76;
  size_t v77;
  size_t v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  size_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  void *v88;
  double *v89;
  unint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  size_t v94;
  size_t v95;
  char *v96;
  void *v97;
  double *v98;
  size_t v99;
  size_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  double *v106;
  size_t v107;
  size_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  int v114;
  int v115;
  double *v116;
  size_t v117;
  size_t v118;
  size_t v119;
  size_t v120;
  size_t v121;
  char *v122;
  unint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  size_t v128;
  unint64_t v129;
  const void **v130;
  size_t v131;
  size_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  const char **v138;
  const char *v139;
  size_t v140;
  size_t v141;
  size_t v142;
  char *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  size_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  double *v152;
  size_t v153;
  size_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  int *v160;
  int v161;
  size_t v162;
  char *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  size_t v168;
  unint64_t v169;
  char *v170;
  char *v171;
  size_t v172;
  double *v173;
  size_t v174;
  size_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  double *v183;
  size_t v184;
  size_t v185;
  size_t v186;
  size_t v187;
  char *v188;
  unint64_t v189;
  _BYTE *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  size_t v194;
  unint64_t v195;
  double *v196;
  size_t v197;
  size_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  double *v204;
  size_t v205;
  size_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  double *v212;
  size_t v213;
  size_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  char *v220;
  char *v221;
  void *v222;
  double *v223;
  size_t v224;
  size_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  double *v231;
  size_t v232;
  size_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  char *v239;
  char *v240;
  void *v241;
  size_t v242;
  char *v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  size_t v248;
  size_t v249;
  char *result;
  char *v251;
  double *v252;
  char __str[16];
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  uint64_t v269;

  v269 = *MEMORY[0x1E0C80C00];
  v252 = (double *)&a9;
  while (1)
  {
    v11 = strchr(__s, 37);
    if (!v11)
      break;
    v12 = v11;
    v13 = v11 - __s;
    if (v11 <= __s)
      goto LABEL_12;
    v14 = *(char **)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)&v14[v13] < v15)
      goto LABEL_11;
    v17 = v15 - *(_QWORD *)a1;
    v16 = v17 == 0;
    v18 = 2 * v17;
    if (v16)
      v19 = 1024;
    else
      v19 = v18;
    do
    {
      v20 = v19;
      v21 = *(_QWORD *)a1 - (_QWORD)v14 + v19;
      v19 *= 2;
    }
    while (v21 < v13);
    v22 = (char *)malloc_type_realloc(*(void **)a1, v20, 0xFFAC0152uLL);
    if (v22)
    {
      v23 = v22;
      v14 = &v22[*(_QWORD *)(a1 + 8) - *(_QWORD *)a1];
      *(_QWORD *)a1 = v23;
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)(a1 + 16) = &v23[v20];
LABEL_11:
      memcpy(v14, __s, v13);
      *(_QWORD *)(a1 + 8) += v13;
    }
LABEL_12:
    v24 = v12 + 1;
    v25 = v12[1];
    if ((v25 - 48) > 9)
    {
      LODWORD(v26) = 0;
    }
    else
    {
      LODWORD(v26) = 0;
      do
      {
        LODWORD(v26) = v25 + 10 * v26 - 48;
        v27 = *++v24;
        v25 = v27;
      }
      while ((v27 - 48) < 0xA);
      v12 = v24 - 1;
    }
    if (v25 == 42)
    {
      v28 = v252++;
      LODWORD(v26) = *(_DWORD *)v28;
      v12 = v24;
    }
    v29 = v12 + 1;
    if (v12[1] == 46)
    {
      v30 = v12[2];
      if ((v30 - 48) <= 9)
      {
        v31 = 0;
        v32 = v12 + 1;
        do
        {
          v31 = v30 + 10 * v31 - 48;
          v29 = v32 + 1;
          v30 = v32[2];
          ++v32;
        }
        while ((v30 - 48) < 0xA);
      }
      __powidf2();
      if (v34 >= 1.0 || v34 <= 0.0)
        v33 = 0.000001;
      else
        v33 = v34;
      v12 = v29;
    }
    else
    {
      v33 = 0.000001;
    }
    v36 = 0;
    v267 = 0u;
    v268 = 0u;
    v265 = 0u;
    v266 = 0u;
    v263 = 0u;
    v264 = 0u;
    v261 = 0u;
    v262 = 0u;
    v259 = 0u;
    v260 = 0u;
    v257 = 0u;
    v258 = 0u;
    v255 = 0u;
    v256 = 0u;
    *(_OWORD *)__str = 0u;
    v254 = 0u;
    v38 = v12 + 1;
    v37 = v12[1];
    if (v37 <= 86)
    {
      if (v37 == 37)
      {
        if ((_DWORD)v26)
          v43 = (int)v26 - 1;
        else
          v43 = 0;
        v63 = *(char **)(a1 + 8);
        v64 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)&v63[v43 + 1] < v64)
          goto LABEL_72;
        v65 = *(_BYTE **)a1;
        v66 = v64 - *(_QWORD *)a1;
        v16 = v66 == 0;
        v67 = 2 * v66;
        if (v16)
          v67 = 1024;
        v68 = v65 - v63;
        do
        {
          v69 = v67;
          v70 = v68 + v67;
          v67 *= 2;
        }
        while (v70 <= v43);
        v71 = (char *)malloc_type_realloc(v65, v69, 0xFFAC0152uLL);
        if (v71)
        {
          v63 = &v71[*(_QWORD *)(a1 + 8) - *(_QWORD *)a1];
          *(_QWORD *)a1 = v71;
          *(_QWORD *)(a1 + 8) = v63;
          *(_QWORD *)(a1 + 16) = &v71[v69];
LABEL_72:
          LOBYTE(v72) = 37;
LABEL_100:
          *v63 = v72;
          v97 = (void *)(*(_QWORD *)(a1 + 8) + 1);
          *(_QWORD *)(a1 + 8) = v97;
          if (v26 < 2)
            goto LABEL_197;
LABEL_195:
          memset(v97, 32, v43);
          v172 = *(_QWORD *)(a1 + 8) + v43;
LABEL_196:
          *(_QWORD *)(a1 + 8) = v172;
        }
      }
      else
      {
        if (v37 != 70)
        {
          if (v37 != 71)
            goto LABEL_197;
          v36 = 1;
        }
        v53 = v252++;
        v54 = *v53;
        if ((*(_QWORD *)v53 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          v55 = 0.0;
        else
          v55 = *v53;
        if (v54 != 0.0)
          v54 = v55;
        if (x_dtostr_(__str, 0x100uLL, v36, v54, v33))
        {
          v56 = strlen(__str);
          v41 = v56;
          v42 = (int)v26;
          if ((int)v26 >= v56)
            v43 = (int)v26 - v56;
          else
            v43 = 0;
          v57 = v43 + v56;
          v45 = *(char **)(a1 + 8);
          v58 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)&v45[v57] >= v58)
          {
            v47 = *(_BYTE **)a1;
            v59 = v58 - *(_QWORD *)a1;
            v16 = v59 == 0;
            v60 = 2 * v59;
            if (v16)
              v61 = 1024;
            else
              v61 = v60;
            do
            {
              v51 = v61;
              v62 = v47 - v45 + v61;
              v61 *= 2;
            }
            while (v62 < v57);
LABEL_192:
            v181 = (char *)malloc_type_realloc(v47, v51, 0xFFAC0152uLL);
            if (!v181)
              goto LABEL_197;
            v182 = v181;
            v45 = &v181[*(_QWORD *)(a1 + 8) - *(_QWORD *)a1];
            *(_QWORD *)a1 = v182;
            *(_QWORD *)(a1 + 8) = v45;
            *(_QWORD *)(a1 + 16) = &v182[v51];
          }
LABEL_194:
          memcpy(v45, __str, v41);
          v97 = (void *)(*(_QWORD *)(a1 + 8) + v41);
          *(_QWORD *)(a1 + 8) = v97;
          if (v41 >= v42)
            goto LABEL_197;
          goto LABEL_195;
        }
      }
    }
    else
    {
      switch(v12[1])
      {
        case 'a':
          v39 = v252++;
          snprintf(__str, 0x100uLL, "%a", *v39);
          v40 = strlen(__str);
          v41 = v40;
          v42 = (int)v26;
          if ((int)v26 >= v40)
            v43 = (int)v26 - v40;
          else
            v43 = 0;
          v44 = v43 + v40;
          v45 = *(char **)(a1 + 8);
          v46 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)&v45[v44] < v46)
            goto LABEL_194;
          v47 = *(_BYTE **)a1;
          v48 = v46 - *(_QWORD *)a1;
          v16 = v48 == 0;
          v49 = 2 * v48;
          if (v16)
            v50 = 1024;
          else
            v50 = v49;
          do
          {
            v51 = v50;
            v52 = v47 - v45 + v50;
            v50 *= 2;
          }
          while (v52 < v44);
          goto LABEL_192;
        case 'b':
        case 'e':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'm':
        case 'n':
        case 'o':
        case 'q':
        case 'r':
        case 't':
        case 'v':
          break;
        case 'c':
          v89 = v252++;
          v72 = *(_DWORD *)v89;
          __str[0] = *(_DWORD *)v89;
          if ((_DWORD)v26)
            v43 = (int)v26 - 1;
          else
            v43 = 0;
          v63 = *(char **)(a1 + 8);
          v90 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)&v63[v43 + 1] < v90)
            goto LABEL_100;
          v91 = *(_BYTE **)a1;
          v92 = 2 * (v90 - *(_QWORD *)a1);
          if (v90 == *(_QWORD *)a1)
            v92 = 1024;
          v93 = v91 - v63;
          do
          {
            v94 = v92;
            v95 = v93 + v92;
            v92 *= 2;
          }
          while (v95 <= v43);
          v96 = (char *)malloc_type_realloc(v91, v94, 0xFFAC0152uLL);
          if (!v96)
            break;
          v63 = &v96[*(_QWORD *)(a1 + 8) - *(_QWORD *)a1];
          *(_QWORD *)a1 = v96;
          *(_QWORD *)(a1 + 8) = v63;
          *(_QWORD *)(a1 + 16) = &v96[v94];
          LOBYTE(v72) = __str[0];
          goto LABEL_100;
        case 'd':
          v98 = v252++;
          snprintf(__str, 0x100uLL, "%d", *(_DWORD *)v98);
          v99 = strlen(__str);
          v41 = v99;
          v42 = (int)v26;
          if ((int)v26 >= v99)
            v43 = (int)v26 - v99;
          else
            v43 = 0;
          v100 = v43 + v99;
          v45 = *(char **)(a1 + 8);
          v101 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)&v45[v100] < v101)
            goto LABEL_194;
          v47 = *(_BYTE **)a1;
          v102 = v101 - *(_QWORD *)a1;
          v16 = v102 == 0;
          v103 = 2 * v102;
          if (v16)
            v104 = 1024;
          else
            v104 = v103;
          do
          {
            v51 = v104;
            v105 = v47 - v45 + v104;
            v104 *= 2;
          }
          while (v105 < v100);
          goto LABEL_192;
        case 'f':
          goto LABEL_112;
        case 'g':
          v36 = 1;
LABEL_112:
          v106 = v252++;
          if (!x_dtostr_(__str, 0x100uLL, v36, *v106, v33))
            break;
          v107 = strlen(__str);
          v41 = v107;
          v42 = (int)v26;
          if ((int)v26 >= v107)
            v43 = (int)v26 - v107;
          else
            v43 = 0;
          v108 = v43 + v107;
          v45 = *(char **)(a1 + 8);
          v109 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)&v45[v108] < v109)
            goto LABEL_194;
          v47 = *(_BYTE **)a1;
          v110 = v109 - *(_QWORD *)a1;
          v16 = v110 == 0;
          v111 = 2 * v110;
          if (v16)
            v112 = 1024;
          else
            v112 = v111;
          do
          {
            v51 = v112;
            v113 = v47 - v45 + v112;
            v112 *= 2;
          }
          while (v113 < v108);
          goto LABEL_192;
        case 'l':
          v114 = v12[2];
          if (v114 <= 107)
          {
            if (v114 == 100)
            {
              v212 = v252++;
              snprintf(__str, 0x100uLL, "%ld", *(_QWORD *)v212);
              v213 = strlen(__str);
              v185 = v213;
              v26 = (int)v26;
              if ((int)v26 >= v213)
                v186 = (int)v26 - v213;
              else
                v186 = 0;
              v214 = v186 + v213;
              v188 = *(char **)(a1 + 8);
              v215 = *(_QWORD *)(a1 + 16);
              if ((unint64_t)&v188[v214] < v215)
                goto LABEL_238;
              v190 = *(_BYTE **)a1;
              v216 = v215 - *(_QWORD *)a1;
              v16 = v216 == 0;
              v217 = 2 * v216;
              if (v16)
                v218 = 1024;
              else
                v218 = v217;
              do
              {
                v194 = v218;
                v219 = v190 - v188 + v218;
                v218 *= 2;
              }
              while (v219 < v214);
            }
            else
            {
              if (v114 != 102)
                break;
              v183 = v252++;
              if (!x_dtostr_(__str, 0x100uLL, 0, *v183, v33))
                goto LABEL_240;
              v184 = strlen(__str);
              v185 = v184;
              v26 = (int)v26;
              if ((int)v26 >= v184)
                v186 = (int)v26 - v184;
              else
                v186 = 0;
              v187 = v186 + v184;
              v188 = *(char **)(a1 + 8);
              v189 = *(_QWORD *)(a1 + 16);
              if ((unint64_t)&v188[v187] < v189)
                goto LABEL_238;
              v190 = *(_BYTE **)a1;
              v191 = v189 - *(_QWORD *)a1;
              v16 = v191 == 0;
              v192 = 2 * v191;
              if (v16)
                v193 = 1024;
              else
                v193 = v192;
              do
              {
                v194 = v193;
                v195 = v190 - v188 + v193;
                v193 *= 2;
              }
              while (v195 < v187);
            }
            goto LABEL_236;
          }
          if (v114 == 120)
          {
            v196 = v252++;
            snprintf(__str, 0x100uLL, "%lx", *(_QWORD *)v196);
            v197 = strlen(__str);
            v185 = v197;
            v26 = (int)v26;
            if ((int)v26 >= v197)
              v186 = (int)v26 - v197;
            else
              v186 = 0;
            v198 = v186 + v197;
            v188 = *(char **)(a1 + 8);
            v199 = *(_QWORD *)(a1 + 16);
            if ((unint64_t)&v188[v198] < v199)
              goto LABEL_238;
            v190 = *(_BYTE **)a1;
            v200 = v199 - *(_QWORD *)a1;
            v16 = v200 == 0;
            v201 = 2 * v200;
            if (v16)
              v202 = 1024;
            else
              v202 = v201;
            do
            {
              v194 = v202;
              v203 = v190 - v188 + v202;
              v202 *= 2;
            }
            while (v203 < v198);
LABEL_236:
            v220 = (char *)malloc_type_realloc(v190, v194, 0xFFAC0152uLL);
            if (v220)
            {
              v221 = v220;
              v188 = &v220[*(_QWORD *)(a1 + 8) - *(_QWORD *)a1];
              *(_QWORD *)a1 = v221;
              *(_QWORD *)(a1 + 8) = v188;
              *(_QWORD *)(a1 + 16) = &v221[v194];
              goto LABEL_238;
            }
LABEL_240:
            ++v12;
            break;
          }
          if (v114 == 117)
          {
            v204 = v252++;
            snprintf(__str, 0x100uLL, "%lu", *(_QWORD *)v204);
            v205 = strlen(__str);
            v185 = v205;
            v26 = (int)v26;
            if ((int)v26 >= v205)
              v186 = (int)v26 - v205;
            else
              v186 = 0;
            v206 = v186 + v205;
            v188 = *(char **)(a1 + 8);
            v207 = *(_QWORD *)(a1 + 16);
            if ((unint64_t)&v188[v206] >= v207)
            {
              v190 = *(_BYTE **)a1;
              v208 = v207 - *(_QWORD *)a1;
              v16 = v208 == 0;
              v209 = 2 * v208;
              if (v16)
                v210 = 1024;
              else
                v210 = v209;
              do
              {
                v194 = v210;
                v211 = v190 - v188 + v210;
                v210 *= 2;
              }
              while (v211 < v206);
              goto LABEL_236;
            }
LABEL_238:
            memcpy(v188, __str, v185);
            v222 = (void *)(*(_QWORD *)(a1 + 8) + v185);
            *(_QWORD *)(a1 + 8) = v222;
            if (v185 < v26)
            {
              memset(v222, 32, v186);
              *(_QWORD *)(a1 + 8) += v186;
            }
            goto LABEL_240;
          }
          if (v114 != 108)
            break;
          v115 = v12[3];
          switch(v115)
          {
            case 'x':
              v223 = v252++;
              snprintf(__str, 0x100uLL, "%llx", *(_QWORD *)v223);
              v224 = strlen(__str);
              v118 = v224;
              v119 = (int)v26;
              if ((int)v26 >= v224)
                v120 = (int)v26 - v224;
              else
                v120 = 0;
              v225 = v120 + v224;
              v122 = *(char **)(a1 + 8);
              v226 = *(_QWORD *)(a1 + 16);
              if ((unint64_t)&v122[v225] < v226)
                goto LABEL_260;
              v124 = *(_BYTE **)a1;
              v227 = v226 - *(_QWORD *)a1;
              v16 = v227 == 0;
              v228 = 2 * v227;
              if (v16)
                v229 = 1024;
              else
                v229 = v228;
              do
              {
                v128 = v229;
                v230 = v124 - v122 + v229;
                v229 *= 2;
              }
              while (v230 < v225);
              break;
            case 'u':
              v231 = v252++;
              snprintf(__str, 0x100uLL, "%llu", *(_QWORD *)v231);
              v232 = strlen(__str);
              v118 = v232;
              v119 = (int)v26;
              if ((int)v26 >= v232)
                v120 = (int)v26 - v232;
              else
                v120 = 0;
              v233 = v120 + v232;
              v122 = *(char **)(a1 + 8);
              v234 = *(_QWORD *)(a1 + 16);
              if ((unint64_t)&v122[v233] < v234)
                goto LABEL_260;
              v124 = *(_BYTE **)a1;
              v235 = v234 - *(_QWORD *)a1;
              v16 = v235 == 0;
              v236 = 2 * v235;
              if (v16)
                v237 = 1024;
              else
                v237 = v236;
              do
              {
                v128 = v237;
                v238 = v124 - v122 + v237;
                v237 *= 2;
              }
              while (v238 < v233);
              break;
            case 'd':
              v116 = v252++;
              snprintf(__str, 0x100uLL, "%lld", *(_QWORD *)v116);
              v117 = strlen(__str);
              v118 = v117;
              v119 = (int)v26;
              if ((int)v26 >= v117)
                v120 = (int)v26 - v117;
              else
                v120 = 0;
              v121 = v120 + v117;
              v122 = *(char **)(a1 + 8);
              v123 = *(_QWORD *)(a1 + 16);
              if ((unint64_t)&v122[v121] < v123)
                goto LABEL_260;
              v124 = *(_BYTE **)a1;
              v125 = v123 - *(_QWORD *)a1;
              v16 = v125 == 0;
              v126 = 2 * v125;
              if (v16)
                v127 = 1024;
              else
                v127 = v126;
              do
              {
                v128 = v127;
                v129 = v124 - v122 + v127;
                v127 *= 2;
              }
              while (v129 < v121);
              break;
            default:
              goto LABEL_263;
          }
          v239 = (char *)malloc_type_realloc(v124, v128, 0xFFAC0152uLL);
          if (!v239)
            goto LABEL_262;
          v240 = v239;
          v122 = &v239[*(_QWORD *)(a1 + 8) - *(_QWORD *)a1];
          *(_QWORD *)a1 = v240;
          *(_QWORD *)(a1 + 8) = v122;
          *(_QWORD *)(a1 + 16) = &v240[v128];
LABEL_260:
          memcpy(v122, __str, v118);
          v241 = (void *)(*(_QWORD *)(a1 + 8) + v118);
          *(_QWORD *)(a1 + 8) = v241;
          if (v118 < v119)
          {
            memset(v241, 32, v120);
            *(_QWORD *)(a1 + 8) += v120;
          }
LABEL_262:
          v12 = v38;
LABEL_263:
          ++v12;
          break;
        case 'p':
          v130 = (const void **)v252++;
          snprintf(__str, 0x100uLL, "%p", *v130);
          v131 = strlen(__str);
          v41 = v131;
          v42 = (int)v26;
          if ((int)v26 >= v131)
            v43 = (int)v26 - v131;
          else
            v43 = 0;
          v132 = v43 + v131;
          v45 = *(char **)(a1 + 8);
          v133 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)&v45[v132] < v133)
            goto LABEL_194;
          v47 = *(_BYTE **)a1;
          v134 = v133 - *(_QWORD *)a1;
          v16 = v134 == 0;
          v135 = 2 * v134;
          if (v16)
            v136 = 1024;
          else
            v136 = v135;
          do
          {
            v51 = v136;
            v137 = v47 - v45 + v136;
            v136 *= 2;
          }
          while (v137 < v132);
          goto LABEL_192;
        case 's':
          v138 = (const char **)v252++;
          v139 = *v138;
          v140 = strlen(*v138);
          v141 = v140;
          if ((int)v26 >= v140)
            v43 = (int)v26 - v140;
          else
            v43 = 0;
          v142 = v43 + v140;
          v143 = *(char **)(a1 + 8);
          v144 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)&v143[v142] < v144)
            goto LABEL_157;
          v145 = v144 - *(_QWORD *)a1;
          v16 = v145 == 0;
          v146 = 2 * v145;
          if (v16)
            v147 = 1024;
          else
            v147 = v146;
          do
          {
            v148 = v147;
            v149 = *(_QWORD *)a1 - (_QWORD)v143 + v147;
            v147 *= 2;
          }
          while (v149 < v142);
          v150 = (char *)malloc_type_realloc(*(void **)a1, v148, 0xFFAC0152uLL);
          if (!v150)
            break;
          v151 = v150;
          v143 = &v150[*(_QWORD *)(a1 + 8) - *(_QWORD *)a1];
          *(_QWORD *)a1 = v151;
          *(_QWORD *)(a1 + 8) = v143;
          *(_QWORD *)(a1 + 16) = &v151[v148];
LABEL_157:
          memcpy(v143, v139, v141);
          v97 = (void *)(*(_QWORD *)(a1 + 8) + v141);
          *(_QWORD *)(a1 + 8) = v97;
          if (v141 >= (int)v26)
            break;
          goto LABEL_195;
        case 'u':
          v152 = v252++;
          snprintf(__str, 0x100uLL, "%u", *(_DWORD *)v152);
          v153 = strlen(__str);
          v41 = v153;
          v42 = (int)v26;
          if ((int)v26 >= v153)
            v43 = (int)v26 - v153;
          else
            v43 = 0;
          v154 = v43 + v153;
          v45 = *(char **)(a1 + 8);
          v155 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)&v45[v154] < v155)
            goto LABEL_194;
          v47 = *(_BYTE **)a1;
          v156 = v155 - *(_QWORD *)a1;
          v16 = v156 == 0;
          v157 = 2 * v156;
          if (v16)
            v158 = 1024;
          else
            v158 = v157;
          do
          {
            v51 = v158;
            v159 = v47 - v45 + v158;
            v158 *= 2;
          }
          while (v159 < v154);
          goto LABEL_192;
        case 'w':
          v160 = (int *)v252++;
          v161 = *v160;
          if (v161 < 1)
            break;
          if (v161 >= 256)
            v162 = 256;
          else
            v162 = v161;
          memset(__str, 32, v162);
          if ((int)v26 >= v162)
            v78 = (int)v26 - v162;
          else
            v78 = 0;
          v163 = *(char **)(a1 + 8);
          v164 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)&v163[v78 + v162] < v164)
            goto LABEL_182;
          v165 = v164 - *(_QWORD *)a1;
          v16 = v165 == 0;
          v166 = 2 * v165;
          if (v16)
            v167 = 1024;
          else
            v167 = v166;
          do
          {
            v168 = v167;
            v169 = *(_QWORD *)a1 - (_QWORD)v163 + v167;
            v167 *= 2;
          }
          while (v169 < v78 + v162);
          v170 = (char *)malloc_type_realloc(*(void **)a1, v168, 0xFFAC0152uLL);
          if (v170)
          {
            v171 = v170;
            v163 = &v170[*(_QWORD *)(a1 + 8) - *(_QWORD *)a1];
            *(_QWORD *)a1 = v171;
            *(_QWORD *)(a1 + 8) = v163;
            *(_QWORD *)(a1 + 16) = &v171[v168];
LABEL_182:
            memcpy(v163, __str, v162);
            v88 = (void *)(*(_QWORD *)(a1 + 8) + v162);
            *(_QWORD *)(a1 + 8) = v88;
            if ((int)v26 > v162)
              goto LABEL_183;
          }
          break;
        case 'x':
          v173 = v252++;
          snprintf(__str, 0x100uLL, "%x", *(_DWORD *)v173);
          v174 = strlen(__str);
          v41 = v174;
          v42 = (int)v26;
          if ((int)v26 >= v174)
            v43 = (int)v26 - v174;
          else
            v43 = 0;
          v175 = v43 + v174;
          v45 = *(char **)(a1 + 8);
          v176 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)&v45[v175] < v176)
            goto LABEL_194;
          v47 = *(_BYTE **)a1;
          v177 = v176 - *(_QWORD *)a1;
          v16 = v177 == 0;
          v178 = 2 * v177;
          if (v16)
            v179 = 1024;
          else
            v179 = v178;
          do
          {
            v51 = v179;
            v180 = v47 - v45 + v179;
            v179 *= 2;
          }
          while (v180 < v175);
          goto LABEL_192;
        default:
          if (v37 != 87)
            break;
          v73 = (int *)v252++;
          v74 = *v73;
          if (v74 < 1)
            break;
          v75 = v74 & 7;
          if (v74 >> 3 >= 0xF8)
            v76 = 248;
          else
            v76 = v74 >> 3;
          v77 = (v76 + v75);
          memset(__str, 9, v76);
          memset(&__str[v76], 32, v75);
          if ((int)v26 >= v77)
            v78 = (int)v26 - v77;
          else
            v78 = 0;
          v79 = *(char **)(a1 + 8);
          v80 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)&v79[v78 + v77] < v80)
            goto LABEL_88;
          v81 = v80 - *(_QWORD *)a1;
          v16 = v81 == 0;
          v82 = 2 * v81;
          if (v16)
            v83 = 1024;
          else
            v83 = v82;
          do
          {
            v84 = v83;
            v85 = *(_QWORD *)a1 - (_QWORD)v79 + v83;
            v83 *= 2;
          }
          while (v85 < v78 + v77);
          v86 = (char *)malloc_type_realloc(*(void **)a1, v84, 0xFFAC0152uLL);
          if (!v86)
            break;
          v87 = v86;
          v79 = &v86[*(_QWORD *)(a1 + 8) - *(_QWORD *)a1];
          *(_QWORD *)a1 = v87;
          *(_QWORD *)(a1 + 8) = v79;
          *(_QWORD *)(a1 + 16) = &v87[v84];
LABEL_88:
          memcpy(v79, __str, v77);
          v88 = (void *)(*(_QWORD *)(a1 + 8) + v77);
          *(_QWORD *)(a1 + 8) = v88;
          if (v26 <= v77)
            break;
LABEL_183:
          memset(v88, 32, v78);
          v172 = *(_QWORD *)(a1 + 8) + v78;
          goto LABEL_196;
      }
    }
LABEL_197:
    __s = v12 + 2;
  }
  v242 = strlen(__s);
  v243 = *(char **)(a1 + 8);
  v244 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)&v243[v242] < v244)
    goto LABEL_270;
  v245 = v244 - *(_QWORD *)a1;
  v16 = v245 == 0;
  v246 = 2 * v245;
  v247 = 1024;
  if (!v16)
    v247 = v246;
  do
  {
    v248 = v247;
    v249 = *(_QWORD *)a1 - (_QWORD)v243 + v247;
    v247 *= 2;
  }
  while (v249 < v242);
  result = (char *)malloc_type_realloc(*(void **)a1, v248, 0xFFAC0152uLL);
  if (result)
  {
    v251 = result;
    v243 = &result[*(_QWORD *)(a1 + 8) - *(_QWORD *)a1];
    *(_QWORD *)a1 = v251;
    *(_QWORD *)(a1 + 8) = v243;
    *(_QWORD *)(a1 + 16) = &v251[v248];
LABEL_270:
    result = (char *)memcpy(v243, __s, v242);
    *(_QWORD *)(a1 + 8) += v242;
  }
  return result;
}

uint64_t ___ZN2CA2CG12_GLOBAL__N_113allows_ditherEv_block_invoke()
{
  uint64_t result;

  result = CFPreferencesGetAppBooleanValue(CFSTR("CADisableShadingDither"), (CFStringRef)*MEMORY[0x1E0C9B248], 0);
  return result;
}

void ___ZN2CA12WindowServer6ServerC2EPNS0_7DisplayEPK10__CFString_block_invoke(uint64_t a1, int a2)
{
  CA::WindowServer::Server::thermal_pressure_level_changed(*(CA::WindowServer::Server **)(a1 + 32), a2);
}

uint64_t CA::OGL::MetalContext::FragmentShader::Spec::decode_segment(char const**)::$_15::__invoke(uint64_t result, int a2)
{
  *(_WORD *)(result + 17) = *(_WORD *)(result + 17) & 0xFFF7 | (8 * (a2 != 0));
  return result;
}

uint64_t CA::Render::Layer::max_corner_radii(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;

  if (this)
  {
    v1 = *(_QWORD *)(this + 72);
    if (v1)
    {
      if (*(_DWORD *)(v1 + 16) == 8)
      {
        v2 = 0;
        v3 = *(double *)(v1 + 24);
        v4 = v1 + 32;
        do
        {
          if (v3 <= *(double *)(v4 + v2))
            v3 = *(double *)(v4 + v2);
          v2 += 8;
        }
        while (v2 != 56);
      }
    }
  }
  return this;
}

uint64_t CA::Render::ShapeLayer::hit_test(uint64_t a1, uint64_t a2, CGFloat *a3)
{
  CA::Render::Path *v4;
  CGFloat v6;
  CGFloat v7;
  int v8;
  const CGPath *v9;
  _BOOL8 v10;
  CA::Render::Path *v11;
  CGFloat v12;
  CGFloat v13;
  const CGPath *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  CA::Render::Path *v19[2];
  CGPoint v20;
  CGPoint v21;

  v19[1] = *(CA::Render::Path **)MEMORY[0x1E0C80C00];
  v4 = *(CA::Render::Path **)(a1 + 16);
  if (!v4)
    return 0;
  if (*(float *)(a1 + 24) != 0.0
    || *(float *)(a1 + 28) != 0.0
    || *(float *)(a1 + 32) != 0.0
    || *(float *)(a1 + 36) != 0.0
    || *(_QWORD *)(a1 + 40))
  {
    v6 = *a3;
    v7 = a3[1];
    v8 = *(unsigned __int8 *)(a1 + 120);
    v9 = (const CGPath *)CA::Render::Path::cg_path(v4);
    v20.x = v6;
    v20.y = v7;
    if (CGPathContainsPoint(v9, 0, v20, v8 == 1))
      return 1;
  }
  if (*(double *)(a1 + 88) <= 0.0
    || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(*(float32x4_t *)(a1 + 48))))) & 1) == 0
    && !*(_QWORD *)(a1 + 64))
  {
    return 0;
  }
  v19[0] = 0;
  CA::Render::ShapeLayer::stroke_path((CA::Render::ShapeLayer *)v19, *(double *)(a1 + 144), a1);
  v11 = v19[0];
  if (!v19[0])
    return 0;
  v12 = *a3;
  v13 = a3[1];
  v14 = (const CGPath *)CA::Render::Path::cg_path(v19[0]);
  v21.x = v12;
  v21.y = v13;
  v10 = CGPathContainsPoint(v14, 0, v21, 0);
  v15 = (unsigned int *)((char *)v11 + 8);
  do
  {
    v16 = __ldaxr(v15);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v15));
  if (!v17)
    (*(void (**)(CA::Render::Path *))(*(_QWORD *)v11 + 16))(v11);
  return v10;
}

BOOL CA::CG::FillPath::shape_extent_contains(CA::CG::FillPath *this, CA::CG::Renderer *a2, const CA::Shape *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  int v9;
  const CGPath *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  int32x2_t v14;
  int64x2_t v15;
  float64x2_t v16;
  void (__cdecl *v17)(void *, const CGPathElement *);
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  int32x4_t v22;
  int64x2_t v23;
  int32x2_t v25;
  int32x2_t v26;
  double v27[5];
  __int128 v28;
  __int128 v29;
  _OWORD v30[3];
  uint64_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  _QWORD info[2];
  void ***v37;
  _QWORD v38[2];
  __int128 v39;
  _QWORD v40[509];

  MEMORY[0x1E0C80A78](this);
  v5 = v4;
  v7 = v6;
  v40[508] = *MEMORY[0x1E0C80C00];
  if ((v3 & 1) != 0)
  {
    if (v3 == 1)
      return 0;
  }
  else if (*(_DWORD *)(v3 + 4) != 12)
  {
    return 0;
  }
  v25 = 0;
  v26 = 0;
  CA::Shape::get_bounds(v3, (int *)&v25);
  v9 = *(_DWORD *)(v7 + 100);
  v10 = *(const CGPath **)(v7 + 112);
  v11 = v5 + 32;
  v12 = 88;
  v38[0] = 0;
  v38[1] = v40;
  if ((v9 & 4) == 0)
    v12 = 32;
  v39 = xmmword_18474E260;
  if ((v9 & 4) != 0)
    v11 = v5 + 88;
  v37 = (void ***)v38;
  v31 = 0;
  *(_QWORD *)&v27[0] = v38;
  memset(&v27[1], 0, 24);
  v27[4] = 0.125;
  v28 = 0u;
  v29 = 0u;
  memset(v30, 0, sizeof(v30));
  v32 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  v33 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
  v13 = *(double *)(v5 + v12);
  v14 = vadd_s32(v26, v25);
  v15.i64[0] = v14.i32[0];
  v15.i64[1] = v14.i32[1];
  v16 = vcvtq_f64_s64(v15);
  v15.i64[0] = v25.i32[0];
  v15.i64[1] = v25.i32[1];
  v34 = vcvtq_f64_s64(v15);
  v35 = v16;
  if (v13 == 1.0)
  {
    v18 = 1;
    while (v18 != 6)
    {
      v19 = v18;
      v20 = *(double *)(v11 + 8 * v18);
      v21 = CA::Mat2Impl::mat2_identity_double[v18++];
      if (v20 != v21)
      {
        if ((unint64_t)(v19 - 1) < 5)
          goto LABEL_10;
        break;
      }
    }
    info[0] = 0;
    v17 = (void (__cdecl *)(void *, const CGPathElement *))CA::CG::PathIterator::Iterator<CA::ScanConverter::Path>::callback_1;
  }
  else
  {
LABEL_10:
    info[0] = v11;
    v17 = (void (__cdecl *)(void *, const CGPathElement *))CA::CG::PathIterator::Iterator<CA::ScanConverter::Path>::callback_0;
  }
  info[1] = v27;
  CGPathApply(v10, info, v17);
  CA::ScanConverter::Path::closepath(v27);
  v22 = (int32x4_t)vcgtq_f64(v32, (float64x2_t)vdupq_n_s64(0xC1E0000000000000));
  *(int32x2_t *)v22.i8 = vmovn_s64((int64x2_t)v22);
  v22.i32[0] = vmovn_s32(v22).u32[0];
  v23 = vcgtq_f64((float64x2_t)vdupq_n_s64(0x41DFFFFFFFC00000uLL), v33);
  v22.i32[1] = vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v23, v23)).i32[1];
  v8 = (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)v22.i8, 0xFuLL))) & 1) != 0
    && CA::ScanConverter::path_rect_containment((uint64_t)v27) == 0;
  x_heap_free(v37);
  return v8;
}

void CA::CG::FillUnevenRoundedRect::compute_dod(CA::CG::FillUnevenRoundedRect *this, float64x2_t *a2)
{
  CA::Rect::operator=(a2->f64, (double *)this + 14);
  if ((*((_BYTE *)this + 100) & 4) == 0)
    CA::Rect::apply_transform(a2, (const CGAffineTransform *)((char *)this + 8));
}

void CA::CG::FillUnevenRoundedRect::draw_shape(CA::CG::FillUnevenRoundedRect *this, CA::OGL::Context **a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  __int128 v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double v15;
  double v16;
  double v17;
  int32x2_t v18;
  uint64_t v19;
  const CGPath *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  _OWORD v25[9];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 100) & 1) != 0
    && (*(unsigned int (**)(CA::OGL::Context *, uint64_t))(*(_QWORD *)a2[1] + 184))(a2[1], 31))
  {
    v5 = *((double *)this + 14);
    v4 = *((double *)this + 15);
    v21 = v5;
    v22 = v4;
    v7 = *((double *)this + 16);
    v6 = *((double *)this + 17);
    v23 = v7;
    v24 = v6;
    if (v7 < 0.0)
    {
      v21 = v7 + v5;
      v23 = -v7;
    }
    if (v6 < 0.0)
    {
      v22 = v6 + v4;
      v24 = -v6;
    }
    v8 = 11;
    if ((*((_DWORD *)this + 25) & 4) == 0)
      v8 = 4;
    v9 = *(_OWORD *)&a2[v8];
    v10 = (char *)(a2 + 11);
    if ((*((_DWORD *)this + 25) & 4) == 0)
      v10 = (char *)(a2 + 4);
    v11 = *((_OWORD *)v10 + 1);
    v12 = *((_OWORD *)v10 + 2);
    v29 = 0;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    memset(v25, 0, sizeof(v25));
    CA::Transform::set_affine((CA::Transform *)v25, *(double *)&v9, *((double *)&v9 + 1), *(double *)&v11, *((double *)&v11 + 1), *(double *)&v12, *((double *)&v12 + 1));
    *((_QWORD *)&v26 + 1) = &v21;
    *(_QWORD *)&v27 = v25;
    *((_QWORD *)&v27 + 1) = 0xFF0020003FLL;
    v29 = 0;
    v28 = 0uLL;
    v13 = *((_OWORD *)this + 10);
    v30[0] = *((_OWORD *)this + 9);
    v30[1] = v13;
    v14 = *((_OWORD *)this + 12);
    v31 = *((_OWORD *)this + 11);
    v32 = v14;
    CA::OGL::fill_uneven_round_rect(a2[1], (uint64_t)&v26 + 8, (float64_t *)v30, 0, *(double *)&v31, *(double *)&v14, v15, v16, v17, v18);
  }
  else
  {
    v19 = CGPathCreateWithUnevenCornersRoundedRect();
    if (v19)
    {
      v20 = (const CGPath *)v19;
      CA::CG::fill_path((uint64_t)a2);
      CGPathRelease(v20);
    }
  }
}

uint64_t CA::CG::ClipEllipseFill::prepare(CA::CG::ClipEllipseFill *this, CA::CG::Renderer *a2, const CA::CG::DrawOp *a3, CA::CG::ClipOp *a4, double a5, double a6, double a7, double a8, float64x2_t a9, int32x4_t a10)
{
  float64x2_t v10;
  float64x2_t v11;
  double v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int v18;
  int8x16_t v19;
  int32x2_t v20;
  int64x2_t v21;
  float64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int32x4_t v25;
  int64x2_t v26;
  float64x2_t v27;
  int64x2_t v28;
  int8x16_t v33;
  double v34;
  double v35;
  int8x16_t v37;
  int8x16_t v38;
  unint64_t v39;
  int8x16_t v40;
  float64x2_t v41;
  float64x2_t v42;
  unint64_t v43;
  __int128 v44;
  double v45;
  double v47;
  _OWORD v50[2];
  uint64_t v51;
  double v52;
  float64_t v53;
  double v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v10 = *(float64x2_t *)((char *)this + 8);
  v11 = *(float64x2_t *)((char *)this + 24);
  v12 = *((double *)a2 + 10);
  if (v12 != 1.0)
  {
    a9.f64[0] = 1.79769313e308;
    v13 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a9, v11).i64[0], 0);
    v14.i64[1] = *((_QWORD *)this + 2);
    *(double *)v14.i64 = v12 * v10.f64[0];
    v10 = (float64x2_t)vbslq_s8(v13, v14, (int8x16_t)v10);
    *(double *)a10.i64 = v12 * v11.f64[0];
    v14.i64[1] = *((_QWORD *)this + 4);
    *(double *)v14.i64 = v12 * v11.f64[0];
    v11 = (float64x2_t)vbslq_s8(v13, v14, (int8x16_t)v11);
    if (v11.f64[1] < 1.79769313e308)
    {
      v10.f64[1] = vmuld_lane_f64(v12, v10, 1);
      v11.f64[1] = v11.f64[1] * v12;
    }
  }
  v15 = *((_QWORD *)a4 + 1);
  v16.i64[0] = (int)v15;
  v16.i64[1] = SHIDWORD(v15);
  v17 = v16;
  v18 = v15;
  if ((int)v15 <= SHIDWORD(v15))
    v18 = HIDWORD(*((_QWORD *)a4 + 1));
  v19 = (int8x16_t)vcvtq_f64_s64(v17);
  v20 = vdup_n_s32(v18 > 1073741822);
  v21.i64[0] = v20.u32[0];
  v21.i64[1] = v20.u32[1];
  v22 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v21, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v19);
  v23 = vclezq_f64(v22);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v23, 1), (int8x16_t)v23).u64[0] & 0x8000000000000000) != 0)
    return 1;
  v24 = vclezq_f64(v11);
  v25 = (int32x4_t)vdupq_laneq_s64(v24, 1);
  if ((vorrq_s8((int8x16_t)v25, (int8x16_t)v24).u64[0] & 0x8000000000000000) != 0)
    return 1;
  v26.i64[0] = (int)*(_QWORD *)a4;
  v26.i64[1] = (int)HIDWORD(*(_QWORD *)a4);
  v25.i32[0] = v18;
  a10.i32[0] = 1073741822;
  v27 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v25, a10), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v26));
  v28 = vclezq_f64(vsubq_f64(vminnmq_f64(vaddq_f64(v27, v22), vaddq_f64(v10, v11)), vmaxnmq_f64(v27, v10)));
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v28, 1), (int8x16_t)v28).u64[0] & 0x8000000000000000) != 0)
    return 1;
  __asm { FMOV            V4.2D, #0.5 }
  v33 = (int8x16_t)vsubq_f64(v27, vmlaq_f64(v10, _Q4, v11));
  v34 = 2.0 / v11.f64[0];
  v35 = 2.0 / v11.f64[1];
  _ZF = v22.f64[0] >= 1.79769313e308 || v34 == 1.0;
  v37.i64[1] = v33.i64[1];
  *(double *)v37.i64 = v34 * *(double *)v33.i64;
  v38.i64[1] = *(_QWORD *)&v22.f64[1];
  *(double *)v38.i64 = v34 * v22.f64[0];
  if (_ZF)
    v39 = 0;
  else
    v39 = -1;
  v40 = (int8x16_t)vdupq_n_s64(v39);
  v41 = (float64x2_t)vbslq_s8(v40, v38, (int8x16_t)v22);
  v42 = (float64x2_t)vbslq_s8(v40, v37, v33);
  if (v35 != 1.0 && v41.f64[1] < 1.79769313e308)
  {
    v42.f64[1] = vmuld_lane_f64(v35, v42, 1);
    v41.f64[1] = v41.f64[1] * v35;
  }
  v43 = 0;
  *(_QWORD *)&v44 = *(_OWORD *)&vaddq_f64(v41, v42);
  *((_QWORD *)&v44 + 1) = *(_QWORD *)&v42.f64[1];
  v50[0] = v42;
  v50[1] = v44;
  v51 = v44;
  v52 = v41.f64[1] + v42.f64[1];
  v53 = v42.f64[0];
  v54 = v41.f64[1] + v42.f64[1];
  do
  {
    v45 = vaddvq_f64(vmulq_f64((float64x2_t)v50[v43], (float64x2_t)v50[v43]));
    if (v43 > 2)
      break;
    ++v43;
  }
  while (v45 < 1.0);
  if (v45 < 1.0)
    return 0;
  v41.f64[0] = v41.f64[0] * 0.5;
  v42.f64[0] = fabs(v42.f64[0] + v41.f64[0]);
  v47 = fabs(v42.f64[1] + v41.f64[1] * 0.5);
  if ((v42.f64[0] - v41.f64[0]) * (v42.f64[0] - v41.f64[0]) + (v47 - v41.f64[1] * 0.5) * (v47 - v41.f64[1] * 0.5) <= 1.0
    || v42.f64[0] <= v41.f64[0]
    || v47 <= v41.f64[1] * 0.5)
  {
    return 2;
  }
  else
  {
    return 1;
  }
}

uint64_t CA::CG::ClipEllipseFill::type(CA::CG::ClipEllipseFill *this)
{
  return 3;
}

uint64_t CA::CG::ClipEllipseFill::draw(CA::CG::ClipEllipseFill *this, CA::CG::Renderer *a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  _QWORD v12[3];
  double v13;
  _OWORD v14[9];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = *((double *)this + 1);
  v3 = *((double *)this + 2);
  *(double *)v12 = v4;
  *(double *)&v12[1] = v3;
  v6 = *((double *)this + 3);
  v5 = *((double *)this + 4);
  *(double *)&v12[2] = v6;
  v13 = v5;
  v7 = *(float64x2_t *)((char *)a2 + 88);
  v8 = *(float64x2_t *)((char *)a2 + 104);
  v9 = *(float64x2_t *)((char *)a2 + 120);
  if (v6 != v5)
  {
    v10 = vmlaq_n_f64(vmlaq_n_f64(v9, v7, v4), v8, v3);
    v8 = vmulq_n_f64(v8, v5 / v6);
    v9 = vmlsq_lane_f64(vmlsq_lane_f64(v10, v7, v4, 0), v8, v3, 0);
    v13 = v6;
  }
  v16 = 0u;
  v17 = 0u;
  v15 = 0u;
  memset(v14, 0, sizeof(v14));
  v18 = 0;
  CA::Transform::set_affine((CA::Transform *)v14, v7.f64[0], v7.f64[1], v8.f64[0], v8.f64[1], v9.f64[0], v9.f64[1]);
  *((_QWORD *)&v15 + 1) = v12;
  *(_QWORD *)&v16 = v14;
  *((_QWORD *)&v16 + 1) = 0xFF0020003FLL;
  v18 = 0;
  v17 = 0uLL;
  return CA::OGL::fill_round_rect(*((_QWORD *)a2 + 1), (float64x2_t **)&v15 + 1, (double *)0xF, 0, v6 * 0.5, v6 * 0.5);
}

void CA::CG::FillEllipse::compute_dod(CA::CG::FillEllipse *this, float64x2_t *a2)
{
  CA::Rect::operator=(a2->f64, (double *)this + 14);
  if ((*((_BYTE *)this + 100) & 4) == 0)
    CA::Rect::apply_transform(a2, (const CGAffineTransform *)((char *)this + 8));
}

void CA::CG::FillEllipse::draw_shape(CA::CG::FillEllipse *this, CA::CG::Renderer *a2)
{
  int v3;
  CGPathRef v4;
  const CGPath *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  float64x2_t *v10;
  BOOL v11;
  uint64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  _OWORD v21[9];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)this + 25);
  if ((v3 & 1) != 0)
  {
    v7 = *((double *)this + 14);
    v6 = *((double *)this + 15);
    v17 = v7;
    v18 = v6;
    v9 = *((double *)this + 16);
    v8 = *((double *)this + 17);
    v19 = v9;
    v20 = v8;
    if (v9 < 0.0)
    {
      v7 = v9 + v7;
      v9 = -v9;
      v17 = v7;
      v19 = v9;
    }
    if (v8 < 0.0)
    {
      v6 = v8 + v6;
      v8 = -v8;
      v18 = v6;
      v20 = v8;
    }
    v10 = (float64x2_t *)((char *)a2 + 32);
    v11 = (v3 & 4) == 0;
    v12 = 88;
    if (v11)
      v12 = 32;
    else
      v10 = (float64x2_t *)((char *)a2 + 88);
    v13 = *(float64x2_t *)((char *)a2 + v12);
    v14 = v10[1];
    v15 = v10[2];
    if (v9 != v8)
    {
      v16 = vmlaq_n_f64(vmlaq_n_f64(v15, v13, v7), v14, v6);
      v14 = vmulq_n_f64(v14, v8 / v9);
      v15 = vmlsq_lane_f64(vmlsq_lane_f64(v16, v13, v7, 0), v14, v6, 0);
      v20 = v9;
    }
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    memset(v21, 0, sizeof(v21));
    v25 = 0;
    CA::Transform::set_affine((CA::Transform *)v21, v13.f64[0], v13.f64[1], v14.f64[0], v14.f64[1], v15.f64[0], v15.f64[1]);
    *((_QWORD *)&v22 + 1) = &v17;
    *(_QWORD *)&v23 = v21;
    *((_QWORD *)&v23 + 1) = 0xFF0020003FLL;
    v25 = 0;
    v24 = 0uLL;
    CA::OGL::fill_round_rect(*((_QWORD *)a2 + 1), (float64x2_t **)&v22 + 1, (double *)0xF, 0, v9 * 0.5, v9 * 0.5);
  }
  else
  {
    v4 = CA::CG::Renderer::retain_simple_path(a2, (const CGRect *)((char *)this + 112), 0);
    if (v4)
    {
      v5 = v4;
      CA::CG::fill_path((uint64_t)a2);
      CGPathRelease(v5);
    }
  }
}

uint64_t CA::WindowServer::AppleDisplay::unconvert_logical_orientation(uint64_t a1, int a2)
{
  int v2;
  unsigned int v3;
  int v4;

  v2 = *(_DWORD *)(a1 + 28420);
  v3 = ((_BYTE)a2 + 2) & 3;
  v4 = ((_BYTE)a2 + 1) & 3;
  if (v2 != 1)
    v4 = a2;
  if (v2 != 2)
    v3 = v4;
  if (v2 == 3)
    return ((_BYTE)a2 - 1) & 3;
  else
    return v3;
}

uint64_t CA::WindowServer::AppleDisplay::convert_logical_orientation(uint64_t a1, int a2)
{
  int v2;
  unsigned int v3;
  int v4;

  v2 = *(_DWORD *)(a1 + 28420);
  v3 = ((_BYTE)a2 + 2) & 3;
  v4 = ((_BYTE)a2 - 1) & 3;
  if (v2 != 1)
    v4 = a2;
  if (v2 != 2)
    v3 = v4;
  if (v2 == 3)
    return ((_BYTE)a2 + 1) & 3;
  else
    return v3;
}

uint64_t CA::OGL::Context::update_color_program_cache(uint64_t this)
{
  uint64_t v1;
  BOOL v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    *(_BYTE *)(*(_QWORD *)(this + 160) + 60) = (*(_DWORD *)(this + 416) & 0x200 | (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)this + 184))(this, 21)) != 0;
    this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 184))(v1, 40);
    v3 = (*(_DWORD *)(v1 + 416) & 0x2000000) == 0 && (_DWORD)this != 0;
    *(_BYTE *)(*(_QWORD *)(v1 + 160) + 61) = v3;
  }
  return this;
}

double CA::OGL::Context::bind_uneven_circle(uint64_t a1, unsigned int a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(v4 + 16 * a2 + 96) = xmmword_18474E210;
  *(_BYTE *)(v4 + a2 + 17) = 15;
  v5 = *(_QWORD *)(a1 + 16) + 48 * a2;
  *(_OWORD *)(v5 + 384) = *a3;
  *(_OWORD *)(v5 + 400) = a3[1];
  result = 0.0078125;
  *a4 = 0x3F80000000000000;
  return result;
}

CA::Render::Image *CA::OGL::Context::tile_cache_load(double *a1, uint64_t a2, CA::Render::Image *a3, _BYTE *a4)
{
  CA::Render::Image *v4;
  uint64_t v8;
  double *v9;
  CA::Render::TileCache *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  unint64_t v18;
  double v19;
  double v20;
  double v21;
  CA::Render::Texture *image;
  float64x2_t v23;
  CA::Render::Texture *v24;
  float64x2_t v25;
  double v26;
  float64x2_t v27;
  unint64_t v28;
  float v29;
  float v30;
  int v31;
  float v32;
  double v34;
  double v35[2];

  v4 = a3;
  v35[1] = *(double *)MEMORY[0x1E0C80C00];
  if (*a4 == 11 && a3 && (*(_DWORD *)(a2 + 308) & 0x12) != 0 && *((_BYTE *)a3 + 12) == 23)
  {
    if (*((unsigned __int8 *)a3 + 153) < 2u)
    {
      v8 = CA::OGL::Context::tile_cache((CA::OGL::Context *)a1);
      if (v8)
      {
        v10 = (CA::Render::TileCache *)v8;
        v11 = *(double *)(a2 + 264);
        v34 = 0.0;
        v35[0] = 0.0;
        v12 = 1.0 / v11;
        if ((*(_BYTE *)(a2 + 248) & 0x10) != 0)
        {
          CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)(a2 + 104), v35, &v34, v9);
          v13 = v34;
          v14 = v35[0];
        }
        else
        {
          v13 = *(double *)(a2 + 232);
          v14 = v13;
        }
        v15 = v14 * v12;
        v16 = *(double *)(a2 + 208);
        v17 = *(double *)(a2 + 200) - floor(*(double *)(a2 + 200));
        *(double *)&v18 = floor(v16);
        v19 = v16 - *(double *)&v18;
        LODWORD(v18) = *((_DWORD *)v4 + 4);
        LODWORD(v16) = *((_DWORD *)v4 + 5);
        v20 = v15 * (double)v18;
        v34 = v13 * v12;
        v35[0] = v15;
        v21 = v13 * v12 * (double)*(unint64_t *)&v16;
        image = CA::Render::TileCache::get_image(v10, v4, v17, v19, v20, v21, a1[28]);
        if (image)
        {
          v24 = image;
          *(double *)(a2 + 24) = v20 * v12;
          *(double *)(a2 + 32) = v21 * v12;
          v23.f64[0] = 1.0 / v35[0];
          CA::Transform::scale((float64x2_t *)(a2 + 104), v23, 1.0 / v34, 1.0);
          v25.f64[0] = -v17;
          v27 = CA::Transform::translate_right((float64x2_t *)(a2 + 104), v25, -v19, v26);
          LODWORD(v27.f64[0]) = *((_DWORD *)v24 + 4);
          LODWORD(v28) = *((_DWORD *)v24 + 5);
          v29 = v20 / (double)*(unint64_t *)&v27.f64[0];
          v30 = v21 / (double)v28;
          v31 = *(_DWORD *)(a2 + 308);
          v32 = 1.0 - v30;
          if ((v31 & 0x800) == 0)
            v32 = 0.0;
          if ((v31 & 0x400) != 0)
          {
            *(float *)(a2 + 276) = *(float *)(a2 + 276) * v29;
            *(float *)(a2 + 280) = v32 + (float)(*(float *)(a2 + 280) * v30);
            *(float *)(a2 + 284) = *(float *)(a2 + 284) * v29;
            *(float *)(a2 + 288) = v32 + (float)(*(float *)(a2 + 288) * v30);
          }
          else
          {
            if ((v31 & 0x800) != 0)
              v30 = 1.0;
            *(_DWORD *)(a2 + 276) = 0;
            *(float *)(a2 + 280) = v32;
            *(float *)(a2 + 284) = v29;
            *(float *)(a2 + 288) = v30;
            *(_DWORD *)(a2 + 308) = v31 | 0x400;
          }
          *a4 = 1;
          return v24;
        }
      }
    }
    else
    {
      *a4 = 7;
    }
  }
  return v4;
}

CA::OGL::Context *CA::OGL::fill_uneven_round_rect_tex(CA::OGL::Context *result, uint64_t a2, float64_t *a3, uint64_t a4, uint64_t a5)
{
  float64x2_t *v5;
  double v6;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  float64x2_t v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  float64x2_t v32;
  double v33;
  int8x16_t v34;
  float64x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float64x2_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  uint64_t v48;
  uint64_t i;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t j;
  void (*v57)(uint64_t, float64x2_t *, uint64_t, uint64_t);
  void (*v58)(uint64_t, uint64_t, uint64_t);
  int v59;
  _BOOL4 v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  double v64;
  uint64_t v65;
  double v66;
  double v67;
  _OWORD v68[8];
  float64x2_t v69[2];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v5 = *(float64x2_t **)a2;
  v6 = *(double *)(*(_QWORD *)a2 + 16);
  if (v6 >= *(double *)(*(_QWORD *)a2 + 24))
    v6 = *(double *)(*(_QWORD *)a2 + 24);
  if (v6 > 0.0)
  {
    v11 = (uint64_t)result;
    v12 = a3[2];
    if (*a3 == v12)
    {
      v13 = a3[1];
      v14 = a3[3];
      if (v13 == v14)
      {
        v15 = a3[4];
        if (v12 == v15)
        {
          v16 = a3[5];
          if (v14 == v16 && v15 == a3[6] && v16 == a3[7])
            return CA::OGL::fill_round_rect_tex(result, (float64x2_t **)a2, a4, (double *)0xF, a5, 0, *a3, v13);
        }
      }
    }
    v66 = 0.0;
    v67 = 0.0;
    v17 = *(_QWORD *)(a2 + 8);
    if ((*(_BYTE *)(v17 + 144) & 0x10) != 0)
    {
      CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v17, &v67, &v66, (double *)a4);
    }
    else
    {
      v66 = *(double *)(v17 + 128);
      v67 = v66;
    }
    v18 = 0;
    v19 = 0.0;
    do
    {
      v20 = a3[v18];
      if (v20 <= a3[v18 + 1])
        v20 = a3[v18 + 1];
      if (v19 <= v20)
        v19 = v20;
      v18 += 2;
    }
    while (v18 != 8);
    v21.f64[0] = v67;
    if (v67 <= v66)
      v22 = v66;
    else
      v22 = v67;
    v23 = v22 * v19;
    if ((_DWORD)a5)
      v23 = v23 * 1.528665;
    if (v23 < 1.0)
      return CA::OGL::fill_rect_tex((CA::OGL::Context *)v11, a2, a4, (double *)a4);
    v24 = 0;
    v25 = v5->f64[0];
    v26 = v5->f64[1];
    v21.f64[1] = v66;
    __asm { FMOV            V0.2D, #0.5 }
    v32 = v5[1];
    v77 = 0u;
    v78 = 0u;
    v33 = v32.f64[0] + v25;
    v34 = (int8x16_t)vcvtq_f64_f32(vcvt_f32_f64(vdivq_f64(_Q0, v21)));
    __asm { FMOV            V0.2D, #1.0 }
    v64 = v32.f64[1];
    v36 = vdivq_f64((float64x2_t)_Q0, v32);
    v37 = (float32x2_t)vdup_n_s32(0x3FC3AB4Bu);
    do
    {
      while (1)
      {
        v38 = vcvt_f32_f64(vmulq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)&a3[2 * v24], (float64x2_t)v34), *(int8x16_t *)&a3[2 * v24], v34), v36));
        *((float32x2_t *)&v77 + v24) = v38;
        if (!(_DWORD)a5)
          break;
        *((float32x2_t *)&v77 + v24++) = vmul_f32(v38, v37);
        if (v24 == 4)
        {
          v39 = v11 + 16;
          *(_BYTE *)(*(_QWORD *)(v11 + 16) + 16) = 5;
          v40.i64[0] = __PAIR64__(HIDWORD(v77), v77);
          v41.i64[0] = __PAIR64__(DWORD1(v78), DWORD2(v77));
          v41.i64[1] = __PAIR64__(DWORD1(v77), DWORD2(v78));
          v40.i64[1] = __PAIR64__(HIDWORD(v78), v78);
          v76 = 0;
          v42 = vaddq_f32(v41, v40);
          v43 = (float64x2_t)vdupq_n_s64(0x400721E8A7A4B61BuLL);
          v44 = (int8x16_t)vsubq_f64(v43, vdivq_f64(v43, vcvt_hight_f64_f32(v42)));
          v45 = (int8x16_t)vsubq_f64(v43, vdivq_f64(v43, vcvtq_f64_f32(*(float32x2_t *)v42.f32)));
          v46 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v44, (float64x2_t)_Q0), _Q0, v44);
          v47 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v45, (float64x2_t)_Q0), _Q0, v45);
          v69[0] = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vbicq_s8(v47, (int8x16_t)vcltzq_f64((float64x2_t)v47))), (float64x2_t)vbicq_s8(v46, (int8x16_t)vcltzq_f64((float64x2_t)v46)));
          result = (CA::OGL::Context *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t *, uint64_t, float64x2_t *))(*(_QWORD *)v11 + 488))(v11, 1, &v77, &v76, a5, v69);
          goto LABEL_33;
        }
      }
      ++v24;
    }
    while (v24 != 4);
    v39 = v11 + 16;
    *(_BYTE *)(*(_QWORD *)(v11 + 16) + 16) = 5;
    v76 = 0;
    result = (CA::OGL::Context *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v11 + 480))(v11, 1, &v77, &v76);
LABEL_33:
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69[1] = 0u;
    if ((*(_DWORD *)(v11 + 136) & 0xFFFFFFFC) != 0)
    {
      v48 = *(_QWORD *)(v11 + 120);
      for (i = 1; i != 9; i += 2)
        v69[i] = (float64x2_t)xmmword_18474DF50;
      v69[0].f64[0] = v25;
      v69[0].f64[1] = v26;
      *(double *)&v70 = v33;
      *((double *)&v70 + 1) = v26;
      *(double *)&v72 = v25;
      *((double *)&v72 + 1) = v64 + v26;
      *(double *)&v74 = v33;
      *((double *)&v74 + 1) = v64 + v26;
      v50 = *(_DWORD *)a4;
      *(_DWORD *)(v48 + 112) = *(_DWORD *)a4;
      *(_DWORD *)(v48 + 16) = v50;
      v51 = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(v48 + 160) = v51;
      *(_DWORD *)(v48 + 64) = v51;
      v52 = *(_DWORD *)(a4 + 4);
      *(_DWORD *)(v48 + 68) = v52;
      *(_DWORD *)(v48 + 20) = v52;
      v53 = *(_DWORD *)(a4 + 12);
      v54 = v76;
      *(_DWORD *)(v48 + 116) = v53;
      *(_DWORD *)(v48 + 120) = v54;
      *(_DWORD *)(v48 + 164) = v53;
      *(_DWORD *)(v48 + 168) = HIDWORD(v54);
      *(_DWORD *)(v48 + 72) = HIDWORD(v54);
      *(_DWORD *)(v48 + 76) = v54;
      *(_DWORD *)(v48 + 24) = v54;
      *(_DWORD *)(v48 + 28) = v54;
      *(_DWORD *)(v48 + 172) = HIDWORD(v54);
      *(_DWORD *)(v48 + 124) = HIDWORD(v54);
      v55 = *(_QWORD *)(*(_QWORD *)v39 + 8);
      for (j = 32; j != 224; j += 48)
        *(_QWORD *)(v48 + j) = v55;
      v57 = *(void (**)(uint64_t, float64x2_t *, uint64_t, uint64_t))(a2 + 24);
      if (v57)
        v57(a2, v69, v48, 4);
      CA::OGL::transform_vertices(v69, (float32x4_t *)v48, (const double *)4, *(float64x2_t **)(a2 + 8));
      v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 32);
      if (v58)
        v58(a2, v48, 4);
      v59 = *(_DWORD *)(a2 + 20);
      if ((v59 & 0xF) == 0 || (*(_BYTE *)(a2 + 16) & 9) == 0)
        goto LABEL_50;
      if ((v59 & 4) != 0)
      {
        CA::OGL::aa_adjust_vertices(v48, v48 + 96, 48, 2);
        v59 = *(_DWORD *)(a2 + 20);
      }
      if ((v59 & 8) != 0)
      {
        CA::OGL::aa_adjust_vertices(v48 + 96, v48, 48, 2);
        v59 = *(_DWORD *)(a2 + 20);
        if ((v59 & 1) == 0)
        {
LABEL_48:
          if ((v59 & 2) == 0)
            goto LABEL_50;
          goto LABEL_49;
        }
      }
      else if ((v59 & 1) == 0)
      {
        goto LABEL_48;
      }
      CA::OGL::aa_adjust_vertices(v48, v48 + 48, 96, 2);
      if ((*(_DWORD *)(a2 + 20) & 2) == 0)
      {
LABEL_50:
        v60 = CA::OGL::Context::need_transparent_source((CA::OGL::Context *)v11);
        CA::OGL::emit_quad_indices(v11, *(float64x2_t **)(a2 + 40), CA::OGL::fill_uneven_round_rect_tex(CA::OGL::Context &,CA::OGL::RectState const&,CA::Vec2<double> *,float const*,unsigned int)::indices, 4uLL, 4u);
        result = (CA::OGL::Context *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 520))(v11, 0, 0);
        *(_BYTE *)(*(_QWORD *)(v11 + 16) + 16) = 0;
        if (v60)
        {
          v61 = vcvtq_f64_f32(*(float32x2_t *)(v48 + 8));
          v68[0] = vcvtq_f64_f32(*(float32x2_t *)v48);
          v68[1] = v61;
          v62 = vcvtq_f64_f32(*(float32x2_t *)(v48 + 56));
          v68[2] = vcvtq_f64_f32(*(float32x2_t *)(v48 + 48));
          v68[3] = v62;
          v63 = vcvtq_f64_f32(*(float32x2_t *)(v48 + 152));
          v68[4] = vcvtq_f64_f32(*(float32x2_t *)(v48 + 144));
          v68[5] = v63;
          v63.f64[0] = *(float64_t *)(v48 + 104);
          v68[6] = vcvtq_f64_f32(*(float32x2_t *)(v48 + 96));
          v68[7] = vcvtq_f64_f32(*(float32x2_t *)&v63.f64[0]);
          v65 = 0;
          return (CA::OGL::Context *)CA::OGL::emit_quad_surround(v11, (const double *)v68, &v65);
        }
        return result;
      }
LABEL_49:
      CA::OGL::aa_adjust_vertices(v48 + 48, v48, 96, 2);
      goto LABEL_50;
    }
  }
  return result;
}

uint64_t CA::OGL::MetalContext::emit_new_render_pipeline(CA::OGL::MetalContext *this, NSString *a2)
{
  unsigned int v3;
  NSObject *v4;
  uint64_t result;
  char *v6;
  CA::OGL::MetalContext *v7;
  char __str[8];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  do
    v3 = __ldaxr((unsigned int *)&CA::OGL::MetalContext::_next_pipeline_id);
  while (__stlxr(v3 + 1, (unsigned int *)&CA::OGL::MetalContext::_next_pipeline_id));
  if (CA::OGL::MetalContext::get_pipeline_log(void)::pipeline_once != -1)
    dispatch_once(&CA::OGL::MetalContext::get_pipeline_log(void)::pipeline_once, &__block_literal_global_236);
  v4 = CA::OGL::MetalContext::get_pipeline_log(void)::pipeline_log;
  result = os_signpost_enabled((os_log_t)CA::OGL::MetalContext::get_pipeline_log(void)::pipeline_log);
  if ((_DWORD)result)
  {
    v7 = (CA::OGL::MetalContext *)(*((_WORD *)this + 408) & 1 | 2u);
    *(_QWORD *)__str = 0;
    result = CA::OGL::MetalContext::format_new_pipeline_flags_string(v7, __str, v6);
    if (v3)
    {
      result = os_signpost_enabled(v4);
      if ((_DWORD)result)
        return _os_signpost_emit_unreliably_with_name_impl();
    }
  }
  return result;
}

uint64_t CA::OGL::MetalContext::create_texture(id *this, uint64_t a2, unint64_t a3, MTLPixelFormat a4, uint64_t a5, const unsigned __int8 *a6, BOOL a7, const char *a8)
{
  MTLPixelFormat v9;
  uint64_t v13;
  double v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  malloc_zone_t *malloc_zone;
  _QWORD v29[7];

  v29[6] = *MEMORY[0x1E0C80C00];
  if (a4 == MTLPixelFormatInvalid)
    return 0;
  v9 = a4;
  v14 = CA::OGL::MetalContext::new_image((CA::OGL::MetalContext *)this);
  v15 = v13;
  v16 = a3 > 1;
  if (a3 <= 1)
    v17 = 1114112;
  else
    v17 = 1179648;
  v18 = v17 | *(_DWORD *)(v13 + 52) & 0xFF00FFFF;
  *(_DWORD *)(v13 + 48) = -1098907648;
  *(_DWORD *)(v13 + 52) = v18;
  *(_BYTE *)(v13 + 56) = *(_BYTE *)(v13 + 56) & 0xC0 | 0x17;
  *(_WORD *)(v13 + 58) &= 0xFFE7u;
  *(_WORD *)(v13 + 123) = *(_WORD *)(v13 + 123) & 0xFFEF | (16 * v16);
  switch(a2)
  {
    case 80:
      v19 = v18 & 0xC013FFFF;
      v20 = 4;
      break;
    case 25:
      v19 = v18 & 0xC013FFFF | 0x14000000;
      v20 = 2;
      break;
    case 1:
      v19 = v18 & 0xC013FFFF | 0x15000000;
      v20 = 1;
      break;
    default:
      __assert_rtn("create_texture", "ogl-metal.mm", 10659, "false");
  }
  *(_DWORD *)(v13 + 52) = v19;
  v21 = (id)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", a2, 32, 32, a3 > 1, v14);
  *(_QWORD *)(v15 + 88) = v21;
  objc_msgSend(v21, "setMipmapLevelCount:", a3);
  objc_msgSend(*(id *)(v15 + 88), "setUsage:", 1);
  v22 = objc_msgSend(this[363], "newTextureWithDescriptor:", *(_QWORD *)(v15 + 88));
  *(_QWORD *)(v15 + 64) = v22;
  if (!v22)
  {

    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, (void *)v15);
    return 0;
  }
  objc_msgSend(*(id *)(v15 + 64), "setLabel:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a5));
  v23 = 0;
  v24 = 32;
  v25 = 32;
  do
  {
    v26 = *(void **)(v15 + 64);
    memset(v29, 0, 24);
    v29[3] = v24;
    v29[4] = v25;
    v29[5] = 1;
    objc_msgSend(v26, "replaceRegion:mipmapLevel:withBytes:bytesPerRow:", v29, v23++, v9, v24 * v20);
    v9 += v24 * v20 * v25;
    if (v24 <= 1)
      v24 = 1;
    else
      v24 >>= 1;
    if (v25 <= 1)
      v25 = 1;
    else
      v25 >>= 1;
  }
  while (a3 != v23);
  *(_BYTE *)(v15 + 122) = 1;
  *(_WORD *)(v15 + 123) = *(_WORD *)(v15 + 123) & 0xFFF8 | v16 | 2;
  return v15;
}

_QWORD *CA::OGL::GlyphCache::reallocate(CA::OGL::GlyphCache *this)
{
  if (*((_QWORD *)this + 1))
    (*(void (**)(void))(**(_QWORD **)this + 832))();
  *((_QWORD *)this + 1) = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)this + 824))(*(_QWORD *)this, *((_QWORD *)this + 2), 16);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  return std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear((_QWORD *)this + 5);
}

uint64_t CA::CG::ContextDelegate::draw_path_(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const CGPath *a5)
{
  const double *Info;
  uint64_t v10;
  CA::CG::Queue *v11;
  CGColor *FillColor;
  BOOL v13;
  int v14;
  uint64_t v15;
  CGColor *StrokeColor;
  unint64_t *v17;

  Info = (const double *)CGContextDelegateGetInfo();
  v10 = (*(uint64_t (**)(const double *))(*(_QWORD *)Info + 16))(Info);
  if (v10)
  {
    v11 = (CA::CG::Queue *)v10;
    if (a4 == 2
      || ((FillColor = (CGColor *)CGGStateGetFillColor(), a4 != 1) ? (v13 = a4 == 4) : (v13 = 1),
          !v13 ? (v14 = 0) : (v14 = 1),
          v15 = CA::CG::ContextDelegate::fill_path(Info, v11, a2, a3, FillColor, a5, v14, 1, 0, 1, 1),
          CA::CG::ContextDelegate::submit((uint64_t)Info, (uint64_t)v11, v15, a2, a3),
          a4 >= 2))
    {
      StrokeColor = (CGColor *)CGGStateGetStrokeColor();
      v17 = CA::CG::ContextDelegate::stroke_path(Info, v11, a2, a3, StrokeColor, a5, 1);
      CA::CG::ContextDelegate::submit((uint64_t)Info, (uint64_t)v11, (uint64_t)v17, a2, a3);
    }
  }
  return 0;
}

uint64_t CA::ScanConverter::path_rect_containment(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  int v13;
  int v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  char *v20;
  int *v21;
  int v22;
  char *v23;
  float32x2_t v24;
  int32x2_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  float *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  float v34;
  float v35;
  float *v36;
  float *v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float *v47;
  char v48;
  float **v49;
  float **v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  float v54;
  float *v55;
  float v56;
  float v57;
  uint64_t v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  float v71;
  float *v72;
  float i;
  float v74;
  float *v75;
  float v76;
  float v77;
  uint64_t v78;
  uint64_t *v79;
  float v80;
  int v81;
  float v82;
  uint64_t v83;
  float v84;
  uint64_t v85;
  float v86;
  float v87;
  float v88;
  float *v89;
  float *v90;
  float v91;
  int v92;
  float v93;
  float v94;
  int v96;
  float v97;
  uint64_t v98;
  signed int v99;
  int v100;
  int v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  int v107;
  int v108;
  int v109;
  signed int v110;
  uint64_t v111;
  float *v112;
  uint64_t *v113;
  _QWORD v114[2];
  __int128 v115;
  _QWORD v116[1022];

  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  v4 = v3;
  v116[1020] = *MEMORY[0x1E0C80C00];
  v6 = *v5;
  v7 = v5[1];
  v8 = v5[2];
  v9 = v5[3];
  v10 = *(_QWORD *)(v3 + 24);
  v11 = 32 * v10;
  v105 = 32 * v10;
  if ((unint64_t)(32 * v10) > 0x1000)
  {
    v106 = (char *)malloc_type_malloc(v11, 0x145CA901uLL);
    if (!v106)
      return 1;
  }
  else
  {
    MEMORY[0x1E0C80A78](v11);
    v106 = (char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v106, v12);
  }
  v13 = v8 + v6;
  v14 = v9 + v7;
  v15 = *(_QWORD **)(v4 + 8);
  v16 = v106;
  if (v15)
  {
    v17 = 0;
    do
    {
      v18 = v15[1];
      if (v18)
      {
        v19 = (int *)(v15 + 3);
        v20 = &v16[16 * v17 + 8];
        v17 += v18;
        v21 = (int *)(v15 + 3);
        do
        {
          v22 = *v21;
          v21 += 6;
          *((_DWORD *)v20 - 2) = ((v22 >> 31) | 0x80000000) ^ v22;
          *(_QWORD *)v20 = v19;
          v20 += 16;
          v19 = v21;
          --v18;
        }
        while (v18);
      }
      v15 = (_QWORD *)*v15;
    }
    while (v15);
  }
  v104 = (uint64_t)&v104;
  v23 = &v16[16 * v10];
  CA::radix_sort(v10);
  if (v6 <= -16777216)
    v26 = -16777216;
  else
    v26 = v6;
  v107 = v26;
  if (v13 >= 0x1000000)
    v27 = 0x1000000;
  else
    v27 = v13;
  if (v7 <= -16777216)
    v28 = -16777216;
  else
    v28 = v7;
  v114[0] = 0;
  v114[1] = v116;
  if (v14 >= 0x1000000)
    v29 = 0x1000000;
  else
    v29 = v14;
  v115 = xmmword_18474E1F0;
  v112 = 0;
  v113 = v114;
  v109 = v29;
  if (v28 >= v29)
  {
    LODWORD(v98) = 1;
    v32 = 1;
    goto LABEL_168;
  }
  v30 = 0;
  v31 = 0;
  v32 = 1;
  v33 = 1;
  while (1)
  {
    if (!(v32 | v33))
    {
      LODWORD(v98) = 0;
      v32 = 0;
      goto LABEL_168;
    }
    if (v30)
    {
      v34 = (float)v28;
      v110 = v28 + 1;
      v35 = (float)(v28 + 1);
      v36 = (float *)&v112;
      do
      {
        v37 = (float *)*((_QWORD *)v30 + 2);
        v38 = v37[1];
        if (v38 <= v34)
        {
          *(_QWORD *)v36 = *(_QWORD *)v30;
          *(_QWORD *)v30 = v31;
          v31 = (uint64_t)v30;
          v30 = v36;
        }
        else
        {
          v39 = *v37;
          if (*v37 >= v34)
            v40 = *v37;
          else
            v40 = (float)v28;
          if (v38 > v35)
            v38 = (float)(v28 + 1);
          v41 = v37[2];
          v42 = v37[3];
          v43 = v37[4];
          v44 = v43 + (float)((float)(v42 + (float)((float)(v40 - v39) * v41)) * (float)(v40 - v39));
          v45 = v43 + (float)((float)(v42 + (float)((float)(v38 - v39) * v41)) * (float)(v38 - v39));
          if (v44 >= v45)
            v46 = v45;
          else
            v46 = v44;
          if (v44 > v45)
            v45 = v44;
          *(float *)v25.i32 = fmaxf(v45 - v46, 0.000001);
          v25 = (int32x2_t)vrecpe_f32((float32x2_t)vdup_lane_s32(v25, 0));
          v30[7] = v46;
          v30[8] = v45;
          v30[6] = v37[5] * (float)(v38 - v40);
          v30[9] = *(float *)v25.i32;
          v36 = v30;
        }
        v30 = *(float **)v30;
      }
      while (v30);
      v47 = v112;
      if (v112)
      {
        v48 = 0;
        v49 = &v112;
        do
        {
          while (1)
          {
            v50 = v49;
            v49 = (float **)v47;
            v47 = *(float **)v47;
            if (!v47)
              break;
            if (*((float *)v49 + 7) > v47[7])
            {
              *v50 = v47;
              *v49 = *(float **)v47;
              *(_QWORD *)v47 = v49;
              v48 = 1;
            }
          }
          v47 = v112;
          v51 = v48 & (v112 != 0);
          v49 = &v112;
          v48 = 0;
        }
        while ((v51 & 1) != 0);
      }
    }
    else
    {
      v110 = v28 + 1;
      v35 = (float)(v28 + 1);
    }
    if (v16 < v23)
    {
      v108 = v32;
      v52 = 0;
      v53 = 0;
      v54 = (float)v28;
      do
      {
        v55 = (float *)*((_QWORD *)v16 + 1);
        v56 = *v55;
        if (*v55 >= v35)
          break;
        v57 = v55[1];
        if (v57 > v54)
        {
          if (v31)
          {
            v58 = *(_QWORD *)v31;
          }
          else
          {
            v31 = x_heap_malloc_small_(v113, 0x28uLL);
            v58 = 0;
            v55 = (float *)*((_QWORD *)v16 + 1);
            v56 = *v55;
            v57 = v55[1];
          }
          *(_QWORD *)(v31 + 16) = v55;
          if (v56 >= v54)
            v59 = v56;
          else
            v59 = (float)v28;
          if (v57 > v35)
            v57 = v35;
          v60 = v55[2];
          v61 = v55[3];
          v62 = v55[4];
          v63 = v62 + (float)((float)(v61 + (float)((float)(v59 - v56) * v60)) * (float)(v59 - v56));
          v64 = v62 + (float)((float)(v61 + (float)((float)(v57 - v56) * v60)) * (float)(v57 - v56));
          if (v63 >= v64)
            v65 = v64;
          else
            v65 = v63;
          if (v63 > v64)
            v64 = v63;
          v24.f32[0] = fmaxf(v64 - v65, 0.000001);
          v24 = (float32x2_t)vdup_lane_s32((int32x2_t)v24, 0);
          *(float *)(v31 + 28) = v65;
          *(float *)(v31 + 32) = v64;
          *(float *)(v31 + 24) = v55[5] * (float)(v57 - v59);
          *(_DWORD *)(v31 + 36) = vrecpe_f32(v24).u32[0];
          *(_QWORD *)v31 = v53;
          ++v52;
          v53 = v31;
          v31 = v58;
        }
        v16 += 16;
      }
      while (v16 < v23);
      if (v52)
      {
        if (v52 != 1)
          v53 = CA::ScanConverter::RendererImpl::Edge::sort_xmin((uint64_t *)v53, v52);
        v32 = v108;
        v66 = (uint64_t *)&v112;
        if (v53)
        {
          while (1)
          {
            v67 = (uint64_t *)*v66;
            if (!*v66)
              break;
            if (*(float *)(v53 + 28) >= *((float *)v67 + 7))
            {
              v66 = (uint64_t *)*v66;
              if (!v53)
                goto LABEL_77;
            }
            else
            {
              v68 = *(_QWORD *)v53;
              *v66 = v53;
              *(_QWORD *)v53 = v67;
              v53 = v68;
              if (!v68)
                goto LABEL_77;
            }
          }
        }
        else
        {
LABEL_77:
          if (*v66)
            goto LABEL_81;
          v53 = 0;
        }
        *v66 = v53;
      }
      else
      {
        v32 = v108;
      }
    }
LABEL_81:
    v30 = v112;
    if (v112)
    {
      v69 = v107;
      if (v107 >= v27)
        goto LABEL_152;
      v70 = 0;
      v71 = 0.0;
      v72 = v112;
LABEL_84:
      for (i = (float)v69; v70; v70 = *(_QWORD *)(v70 + 8))
      {
        if (*(float *)(v70 + 32) > i)
          break;
        v71 = *(float *)(v70 + 24) + v71;
      }
      v74 = i + 1.0;
      v111 = v70;
      if (!v72)
        goto LABEL_105;
LABEL_88:
      while (1)
      {
        v75 = v72;
        v76 = v72[7];
        if (v74 <= v76)
          break;
        v72 = *(float **)v72;
        v77 = v75[8];
        if (v77 <= i)
        {
          v71 = v75[6] + v71;
          if (v72)
            continue;
LABEL_104:
          v70 = v111;
LABEL_105:
          v75 = 0;
          v81 = v27;
          if (!v70)
          {
LABEL_141:
            v91 = fabsf(v71);
            if (v2)
            {
              v96 = (int)v91;
              v91 = v91 - truncf(v91);
              if ((v96 & 1) != 0)
                v91 = 1.0 - v91;
LABEL_146:
              v97 = v91;
              if (v91 != 0.0)
              {
LABEL_147:
                v32 = 0;
                v91 = v97;
              }
              v70 = 0;
              goto LABEL_149;
            }
            v97 = 1.0;
            if (v91 < 1.0)
              goto LABEL_146;
            goto LABEL_147;
          }
LABEL_108:
          v82 = 1.0;
          v83 = v70;
          v84 = v71;
          while (1)
          {
            v85 = v83;
            v86 = *(float *)(v83 + 28);
            if (v86 >= i)
              v87 = *(float *)(v83 + 28);
            else
              v87 = (float)v69;
            v88 = *(float *)(v83 + 32);
            if (v88 > v74)
              v88 = i + 1.0;
            v84 = v84
                + (float)((float)(*(float *)(v83 + 24) * v82)
                        * (float)((float)(v74 - v88)
                                + (float)((float)((float)(v87 - v88) * *(float *)(v83 + 36))
                                        * (float)(v86 + (float)((float)(v88 + v87) * -0.5)))));
            v83 = *(_QWORD *)(v83 + 8);
            if (v2 == 1)
            {
              if (!v83)
              {
                v91 = fabsf(v84);
                goto LABEL_125;
              }
              v89 = *(float **)(v85 + 16);
              v90 = *(float **)(v83 + 16);
              if (v89[5] == v90[5] && *v89 != v90[1] && v89[1] != *v90)
                v82 = -v82;
            }
            if (!v83)
            {
              v91 = fabsf(v84);
              if (!v2)
              {
                if (v91 >= 1.0)
                {
                  v81 = v69 + 1;
                  v91 = 1.0;
                  goto LABEL_128;
                }
LABEL_127:
                v81 = v69 + 1;
                if (v91 == 0.0)
                  goto LABEL_149;
LABEL_128:
                v32 = 0;
LABEL_149:
                if (v91 != 1.0)
                  v33 = 0;
                v69 = v81;
                v72 = v75;
                if (v81 >= v27)
                {
LABEL_152:
                  LODWORD(v98) = v33;
                  goto LABEL_159;
                }
                goto LABEL_84;
              }
LABEL_125:
              v92 = (int)v91;
              v91 = v91 - truncf(v91);
              if ((v92 & 1) != 0)
                v91 = 1.0 - v91;
              goto LABEL_127;
            }
          }
        }
        v78 = v111;
        if (v111)
        {
          v79 = &v111;
          while (1)
          {
            v80 = *(float *)(v78 + 32);
            if (SLODWORD(v77) == SLODWORD(v80))
            {
              if (v76 < *(float *)(v78 + 28))
                goto LABEL_103;
            }
            else if (v77 < v80)
            {
LABEL_103:
              *((_QWORD *)v75 + 1) = v78;
              *v79 = (uint64_t)v75;
              if (!v72)
                goto LABEL_104;
              goto LABEL_88;
            }
            v79 = (uint64_t *)(v78 + 8);
            v78 = *(_QWORD *)(v78 + 8);
            if (!v78)
              goto LABEL_101;
          }
        }
        v79 = &v111;
LABEL_101:
        *v79 = (uint64_t)v75;
        *((_QWORD *)v75 + 1) = 0;
        if (!v72)
          goto LABEL_104;
      }
      v70 = v111;
      if (!v111)
      {
        v93 = floorf(v76);
        if (v93 < -16777000.0)
          v93 = -16777000.0;
        v94 = 16777000.0;
        if (v76 <= 16777000.0)
          v94 = v72[7];
        if (v76 >= 0.0)
          v93 = v94;
        if (v27 >= (int)v93 && (LODWORD(v76) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          v81 = (int)v93;
        else
          v81 = v27;
        goto LABEL_141;
      }
      goto LABEL_108;
    }
    if (v16 == v23)
      break;
    v99 = vcvtms_s32_f32(**((float **)v16 + 1));
    if (v28 > v99)
      v99 = v28;
    v110 = v99;
    v100 = v99 - v28 + 1;
    do
    {
      v98 = v33;
      v33 = 0;
      --v100;
    }
    while (v100);
    v33 = v98;
LABEL_159:
    v28 = v110;
    if (v110 >= v109)
      goto LABEL_168;
  }
  v102 = v109;
  if (v28 > v109)
    v102 = v28;
  v103 = v102 - v28 + 1;
  do
  {
    LODWORD(v98) = v33;
    LODWORD(v33) = 0;
    --v103;
  }
  while (v103);
LABEL_168:
  if (v105 > 0x1000)
    free(v106);
  x_heap_free((void ***)v113);
  if (v32)
    return 1;
  else
    return 2 * ((_DWORD)v98 == 0);
}

uint64_t CA::WindowServer::Display::post_display_changed(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;

  v1 = this;
  if (*(_BYTE *)(this + 672))
  {
    *(_DWORD *)(this + 745) |= 0x8000u;
  }
  else
  {
    ++*(_DWORD *)(this + 28);
    v2 = mach_absolute_time();
    v3 = CATimeWithHostTime(v2);
    return CA::Render::Server::add_callback(1, (uint64_t)CA::WindowServer::Display::post_display_changed_callback, v1, v3 + 0.01);
  }
  return this;
}

void CA::WindowServer::Server::thermal_pressure_level_changed(CA::WindowServer::Server *this, int token)
{
  NSObject *v3;
  uint64_t state64;
  uint8_t buf[4];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  state64 = 0;
  if (!notify_get_state(token, &state64))
  {
    *((_BYTE *)this + 517) = state64 > 0x1D;
    atomic_store(1u, (unsigned __int8 *)this + 464);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v3 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v6 = state64;
        _os_log_impl(&dword_184457000, v3, OS_LOG_TYPE_DEFAULT, "ThermalPressureLevel=%llu", buf, 0xCu);
      }
    }
  }
}

uint64_t CACGContextEvaluator::update_with_gradient(CACGContextEvaluator *this, CGGradient *a2)
{
  CGColorSpace *ColorSpace;

  *((_BYTE *)this + 72) = 1;
  *((_BYTE *)this + 77) = 1;
  ColorSpace = (CGColorSpace *)CGGradientGetColorSpace();
  CACGContextEvaluator::update_with_color_space((uint64_t)this, ColorSpace, 0);
  return CGGradientApplyWithBlock();
}

uint64_t draw_linear_gradient(uint64_t a1, uint64_t a2, uint64_t a3, CGGradient *a4)
{
  CACGContextEvaluator *Info;
  CGColor *Color;
  unsigned int CompositeOperation;

  Info = (CACGContextEvaluator *)CGContextDelegateGetInfo();
  CGGStateGetStyle();
  Color = (CGColor *)CGStyleGetColor();
  CompositeOperation = CGGStateGetCompositeOperation();
  CACGContextEvaluator::update_with_color((uint64_t)Info, Color, CompositeOperation);
  CACGContextEvaluator::update_with_gradient(Info, a4);
  *((_BYTE *)Info + 78) |= CGGStateGetStyle() != 0;
  CGContextDelegateGetInfo();
  return CGContextDelegateDrawLinearGradient();
}

CFDictionaryRef CA::SurfaceUtil::create_agx_plane_dict(CA::SurfaceUtil *this, uint64_t a2, unint64_t a3, uint64_t *a4, unint64_t *a5, unint64_t *a6, unint64_t *a7)
{
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  long double v26;
  long double v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  CFDictionaryRef v38;
  uint64_t i;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  CA::SurfaceUtil *valuePtr;
  void *values[15];
  void *keys[17];

  keys[15] = *(void **)MEMORY[0x1E0C80C00];
  v54 = a2;
  valuePtr = this;
  v53 = a3;
  if (a3 == 4)
  {
    v13 = 64;
  }
  else
  {
    if (a3 != 8)
      abort();
    v13 = 32;
  }
  if (v13 > this || (LODWORD(v14) = (_DWORD)this, LODWORD(v15) = a2, (a2 & 0xFFFFFFC0) == 0))
  {
    v16 = (this - 1) | (((unint64_t)this - 1) >> 1);
    v17 = v16 | (v16 >> 2) | ((v16 | (v16 >> 2)) >> 4);
    v18 = v17 | (v17 >> 8) | ((v17 | (v17 >> 8)) >> 16);
    v14 = (v18 | HIDWORD(v18)) + 1;
    v19 = (a2 - 1) | (((unint64_t)a2 - 1) >> 1);
    v20 = v19 | (v19 >> 2) | ((v19 | (v19 >> 2)) >> 4);
    v21 = v20 | (v20 >> 8) | ((v20 | (v20 >> 8)) >> 16);
    v15 = (v21 | HIDWORD(v21)) + 1;
  }
  v22 = 0;
  v23 = 0;
  v50 = 0;
  v51 = 0;
  if (((0x8Bu >> (a3 - 1)) & 1) != 0)
  {
    v23 = qword_1847635A8[a3 - 1];
    v22 = 16;
    v50 = 16;
    v51 = v23;
  }
  v24 = v14;
  v25 = log2(16384.0 / (double)a3) * 0.5;
  v26 = exp2(floor(v25));
  v52 = ((unint64_t)(v26 * (double)a3) + v24 * a3 - 1)
      / (unint64_t)(v26 * (double)a3)
      * (unint64_t)(v26 * (double)a3);
  v27 = exp2(ceil(v25));
  v28 = (((unint64_t)v27 + v15 - 1) / (unint64_t)v27 * (unint64_t)v27 * v52 + 127) & 0xFFFFFFFFFFFFFF80;
  v29 = vcvtps_u32_f32(log2f(ceilf((float)(uint64_t)this / (float)v23)));
  v30 = (v28
       + *MEMORY[0x1E0C85AD8]
       + ((2 * (1 << v29 << vcvtps_u32_f32(log2f(ceilf((float)a2 / (float)v22)))) + 127) & 0xFFFFFF80)
       - 1) & -*MEMORY[0x1E0C85AD8];
  v48 = v28;
  v49 = v30;
  *a4 = v30;
  *a5 = v23;
  *a6 = v22;
  v47 = 3;
  v45 = (uint64_t)(((unint64_t)this + v23 - 1) & -v23) / v23;
  v46 = 2;
  v43 = 2;
  v44 = ((a2 + v22 - 1) & -v22) / v22;
  v41 = 0;
  v42 = 0;
  v31 = (void *)*MEMORY[0x1E0CBC140];
  keys[0] = *(void **)MEMORY[0x1E0CBC178];
  keys[1] = v31;
  v32 = (void *)*MEMORY[0x1E0CBC098];
  keys[2] = *(void **)MEMORY[0x1E0CBC160];
  keys[3] = v32;
  v33 = (void *)*MEMORY[0x1E0CBC090];
  keys[4] = *(void **)MEMORY[0x1E0CBC168];
  keys[5] = v33;
  v34 = (void *)*MEMORY[0x1E0CBC0D8];
  keys[6] = *(void **)MEMORY[0x1E0CBC0D0];
  keys[7] = v34;
  v35 = (void *)*MEMORY[0x1E0CBC0F8];
  keys[8] = *(void **)MEMORY[0x1E0CBBED8];
  keys[9] = v35;
  v36 = (void *)*MEMORY[0x1E0CBC0E0];
  keys[10] = *(void **)MEMORY[0x1E0CBC0E8];
  keys[11] = v36;
  v37 = (void *)*MEMORY[0x1E0CBC148];
  keys[12] = *(void **)MEMORY[0x1E0CBC180];
  keys[13] = v37;
  keys[14] = *(void **)MEMORY[0x1E0CBC088];
  values[0] = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
  values[1] = CFNumberCreate(0, kCFNumberCFIndexType, &v54);
  values[2] = CFNumberCreate(0, kCFNumberCFIndexType, &v42);
  values[3] = CFNumberCreate(0, kCFNumberCFIndexType, &v52);
  values[4] = CFNumberCreate(0, kCFNumberCFIndexType, &v49);
  values[5] = CFNumberCreate(0, kCFNumberCFIndexType, &v53);
  values[6] = CFNumberCreate(0, kCFNumberCFIndexType, &v41);
  values[7] = CFNumberCreate(0, kCFNumberCFIndexType, &v48);
  values[8] = CFNumberCreate(0, kCFNumberCFIndexType, &v47);
  values[9] = CFNumberCreate(0, kCFNumberCFIndexType, &v46);
  values[10] = CFNumberCreate(0, kCFNumberCFIndexType, &v51);
  values[11] = CFNumberCreate(0, kCFNumberCFIndexType, &v50);
  values[12] = CFNumberCreate(0, kCFNumberCFIndexType, &v45);
  values[13] = CFNumberCreate(0, kCFNumberCFIndexType, &v44);
  values[14] = CFNumberCreate(0, kCFNumberCFIndexType, &v43);
  v38 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 15, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  for (i = 0; i != 15; ++i)
    CFRelease(values[i]);
  return v38;
}

CFDictionaryRef CA::SurfaceUtil::create_htpc_plane_dict(CA::SurfaceUtil *this, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t *a6)
{
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  CFDictionaryRef v23;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  CA::SurfaceUtil *valuePtr;
  void *values[18];
  void *keys[19];

  keys[18] = *(void **)MEMORY[0x1E0C80C00];
  v41 = a2;
  valuePtr = this;
  v39 = a4;
  v40 = a3;
  v37 = 1;
  v38 = 1;
  v35 = 0;
  v36 = 1;
  if (a4)
    v7 = 8;
  else
    v7 = 16;
  v33 = 8;
  v34 = v7;
  v8 = 3;
  if (!a4)
    v8 = 4;
  v9 = 6;
  if (!a4)
    v9 = 7;
  v10 = v7 - 1;
  v11 = v7 - 1 + a3 * (_QWORD)this;
  v12 = -v7;
  v31 = (((unint64_t)this + v10) & v12) >> v8;
  v32 = v11 & v12;
  v29 = 4;
  v30 = (unint64_t)(a2 + 7) >> 3;
  v27 = a4;
  v28 = 4 * v31;
  v13 = (4 * v31 * v30 + 127) & 0x7FFFFFFFFFFFFF80;
  v26 = v13 + a4;
  *a5 = (v13 + (a3 << v9) * v30 * v31 + 127) & 0xFFFFFFFFFFFFFF80;
  v14 = (void *)*MEMORY[0x1E0CBC140];
  keys[0] = *(void **)MEMORY[0x1E0CBC178];
  keys[1] = v14;
  v15 = (void *)*MEMORY[0x1E0CBC098];
  keys[2] = *(void **)MEMORY[0x1E0CBC160];
  keys[3] = v15;
  v16 = (void *)*MEMORY[0x1E0CBC090];
  keys[4] = *(void **)MEMORY[0x1E0CBC168];
  keys[5] = v16;
  v17 = (void *)*MEMORY[0x1E0CBC0F8];
  keys[6] = *(void **)MEMORY[0x1E0CBBED8];
  keys[7] = v17;
  v18 = (void *)*MEMORY[0x1E0CBC0E0];
  keys[8] = *(void **)MEMORY[0x1E0CBC0E8];
  keys[9] = v18;
  v19 = (void *)*MEMORY[0x1E0CBC148];
  keys[10] = *(void **)MEMORY[0x1E0CBC180];
  keys[11] = v19;
  v20 = (void *)*MEMORY[0x1E0CBC0A0];
  keys[12] = *(void **)MEMORY[0x1E0CBC088];
  keys[13] = v20;
  v21 = (void *)*MEMORY[0x1E0CBC130];
  keys[14] = *(void **)MEMORY[0x1E0CBC128];
  keys[15] = v21;
  v22 = (void *)*MEMORY[0x1E0CBC0D0];
  keys[16] = *(void **)MEMORY[0x1E0CBC0D8];
  keys[17] = v22;
  values[0] = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
  values[1] = CFNumberCreate(0, kCFNumberCFIndexType, &v41);
  values[2] = CFNumberCreate(0, kCFNumberCFIndexType, &v39);
  values[3] = CFNumberCreate(0, kCFNumberCFIndexType, &v32);
  values[4] = CFNumberCreate(0, kCFNumberCFIndexType, a5);
  values[5] = CFNumberCreate(0, kCFNumberCFIndexType, &v40);
  values[6] = CFNumberCreate(0, kCFNumberCFIndexType, &v38);
  values[7] = CFNumberCreate(0, kCFNumberCFIndexType, &v37);
  values[8] = CFNumberCreate(0, kCFNumberSInt32Type, &v34);
  values[9] = CFNumberCreate(0, kCFNumberSInt32Type, &v33);
  values[10] = CFNumberCreate(0, kCFNumberCFIndexType, &v31);
  values[11] = CFNumberCreate(0, kCFNumberCFIndexType, &v30);
  values[12] = CFNumberCreate(0, kCFNumberCFIndexType, &v29);
  values[13] = CFNumberCreate(0, kCFNumberCFIndexType, &v28);
  values[14] = CFNumberCreate(0, kCFNumberCFIndexType, &v36);
  values[15] = CFNumberCreate(0, kCFNumberCFIndexType, &v35);
  values[16] = CFNumberCreate(0, kCFNumberCFIndexType, &v27);
  values[17] = CFNumberCreate(0, kCFNumberCFIndexType, &v26);
  v23 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 18, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  for (i = 0; i != 18; ++i)
    CFRelease(values[i]);
  return v23;
}

CFDictionaryRef CA::SurfaceUtil::create_plane_dict(CA::SurfaceUtil *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  void *v8;
  void *v9;
  CFDictionaryRef v10;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CA::SurfaceUtil *valuePtr;
  void *values[7];
  void *keys[8];

  keys[7] = *(void **)MEMORY[0x1E0C80C00];
  v18 = a2;
  valuePtr = this;
  v16 = a4;
  v17 = a3;
  v14 = a6;
  v15 = a5;
  v13 = a7;
  v7 = (void *)*MEMORY[0x1E0CBC140];
  keys[0] = *(void **)MEMORY[0x1E0CBC178];
  keys[1] = v7;
  v8 = (void *)*MEMORY[0x1E0CBC160];
  keys[2] = *(void **)MEMORY[0x1E0CBC098];
  keys[3] = v8;
  v9 = (void *)*MEMORY[0x1E0CBC110];
  keys[4] = *(void **)MEMORY[0x1E0CBC168];
  keys[5] = v9;
  keys[6] = *(void **)MEMORY[0x1E0CBC090];
  values[0] = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
  values[1] = CFNumberCreate(0, kCFNumberCFIndexType, &v18);
  values[2] = CFNumberCreate(0, kCFNumberCFIndexType, &v17);
  values[3] = CFNumberCreate(0, kCFNumberCFIndexType, &v16);
  values[4] = CFNumberCreate(0, kCFNumberCFIndexType, &v15);
  values[5] = CFNumberCreate(0, kCFNumberCFIndexType, &v14);
  values[6] = CFNumberCreate(0, kCFNumberCFIndexType, &v13);
  v10 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 7, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  for (i = 0; i != 7; ++i)
    CFRelease(values[i]);
  return v10;
}

unint64_t CA::SurfaceUtil::rowbytes_for_packed_format(CA::SurfaceUtil *this, int a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int16 v4;
  int v5;
  char v6;

  v2 = 3;
  v3 = 2;
  if (a2 > 1885746227)
  {
    if ((a2 - 1886676528) <= 4 && ((1 << (a2 - 48)) & 0x15) != 0
      || (a2 - 1886680624) <= 4 && ((1 << (a2 - 48)) & 0x15) != 0)
    {
      v6 = 3;
      v2 = 5;
      v3 = 4;
      return (((unint64_t)this + v3) / v2) << v6;
    }
    v4 = 13364;
    goto LABEL_10;
  }
  if (a2 > 1882469427)
  {
    if (a2 != 1882469428 && a2 != 1885745712)
    {
      v4 = 12850;
LABEL_10:
      v5 = v4 | 0x70660000;
      goto LABEL_15;
    }
LABEL_17:
    v6 = 2;
    return (((unint64_t)this + v3) / v2) << v6;
  }
  if (a2 == 1882468912)
    goto LABEL_17;
  v5 = 1882468914;
LABEL_15:
  v6 = 2;
  if (a2 != v5)
    __assert_rtn("rowbytes_for_packed_format", "CASurfaceUtil.mm", 531, "0");
  return (((unint64_t)this + v3) / v2) << v6;
}

uint64_t ___ZN2CA11SurfaceUtil43CASurfaceAsyncWaitAndSignalSharedEventValueEPNS0_24CASurfaceSharedEventRef_EPNS0_29CASurfaceSharedEventListener_Eyy_block_invoke(uint64_t a1, void *a2)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (x_log_hook_p())
  {
    v10 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    x_log_();
    return objc_msgSend(a2, "setSignaledValue:", *(_QWORD *)(a1 + 40), a2, v10, v12);
  }
  else
  {
    v5 = x_log_category_sharedevent;
    if (os_log_type_enabled((os_log_t)x_log_category_sharedevent, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(a1 + 32);
      v7 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 134218496;
      v14 = a2;
      v15 = 2048;
      v16 = v6;
      v17 = 2048;
      v18 = v7;
      _os_log_impl(&dword_184457000, v5, OS_LOG_TYPE_DEFAULT, "AsyncWaitAndSignal complete event: %p  wait_value: 0x%llx  signal_value: 0x%llx\n", buf, 0x20u);
    }
    return objc_msgSend(a2, "setSignaledValue:", *(_QWORD *)(a1 + 40), v8, v9, v11);
  }
}

char *CAIOSurfaceWriteToFileWithSuffix(__IOSurface *a1, const char *a2)
{
  void *v4;
  size_t Width;
  size_t Height;
  signed int PixelFormat;
  const __CFDictionary *v8;
  __CFDictionary *MutableCopy;
  const UInt8 *BaseAddress;
  size_t AllocSize;
  id DictionaryFromBulkAttachments;
  const __CFData *Data;
  unsigned int v14;
  unsigned int v15;
  int v16;
  NSObject *v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  CFDataRef v30;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  CFDataRef value;
  uint8_t v36[8];
  uint8_t buf[16];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x186DBE2E4]();
  if (CADeviceHasInternalBuild::once != -1)
    dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
  if (!CADeviceHasInternalBuild::internal)
    goto LABEL_27;
  if (a1)
  {
    Width = IOSurfaceGetWidth(a1);
    Height = IOSurfaceGetHeight(a1);
    PixelFormat = IOSurfaceGetPixelFormat(a1);
    v8 = (const __CFDictionary *)IOSurfaceCopyValue(a1, CFSTR("CreationProperties"));
    if (v8)
    {
      MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v8);
      if (!MutableCopy)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v20 = x_log_category_utilities;
          if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v20, OS_LOG_TYPE_ERROR, "Failed to dump surface - Unable to create dictionary from surface properties.", buf, 2u);
          }
        }
        v19 = 0;
        goto LABEL_69;
      }
      IOSurfaceLock(a1, 1u, 0);
      BaseAddress = (const UInt8 *)IOSurfaceGetBaseAddress(a1);
      if (BaseAddress)
      {
        AllocSize = IOSurfaceGetAllocSize(a1);
        value = CFDataCreate(0, BaseAddress, AllocSize);
        IOSurfaceUnlock(a1, 1u, 0);
        if (value)
        {
          CFDictionarySetValue(MutableCopy, CFSTR("IOSurfaceData"), value);
          v44 = 0;
          v42 = 0u;
          v43 = 0u;
          v40 = 0u;
          v41 = 0u;
          v38 = 0u;
          v39 = 0u;
          *(_OWORD *)buf = 0u;
          if (!IOSurfaceGetBulkAttachments())
          {
            DictionaryFromBulkAttachments = createDictionaryFromBulkAttachments((unsigned int *)buf);
            CFDictionarySetValue(MutableCopy, CFSTR("IOSurfaceBulkAttachments"), DictionaryFromBulkAttachments);

          }
          Data = CFPropertyListCreateData(0, MutableCopy, kCFPropertyListBinaryFormat_v1_0, 0, 0);
          if (Data)
          {
            *(_QWORD *)v36 = 0;
            do
              v14 = __ldaxr(CAIOSurfaceWriteToFileWithSuffix::sid);
            while (__stlxr(v14 + 1, CAIOSurfaceWriteToFileWithSuffix::sid));
            v15 = HIBYTE(PixelFormat);
            if (PixelFormat < 0)
              v16 = __maskrune(v15, 0x40000uLL);
            else
              v16 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v15 + 60) & 0x40000;
            LODWORD(v23) = PixelFormat >> 24;
            if (v16)
              v23 = v23;
            else
              v23 = 32;
            v34 = v23;
            if (BYTE2(PixelFormat) <= 0x7Fu)
              v24 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * BYTE2(PixelFormat) + 60) & 0x40000;
            else
              v24 = __maskrune(BYTE2(PixelFormat), 0x40000uLL);
            if (v24)
              v25 = SBYTE2(PixelFormat);
            else
              v25 = 32;
            v33 = v25;
            if (BYTE1(PixelFormat) <= 0x7Fu)
              v26 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * BYTE1(PixelFormat) + 60) & 0x40000;
            else
              v26 = __maskrune(BYTE1(PixelFormat), 0x40000uLL);
            if (PixelFormat <= 0x7Fu)
              v27 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * PixelFormat + 60) & 0x40000;
            else
              v27 = __maskrune(PixelFormat, 0x40000uLL);
            if (v26)
              v28 = SBYTE1(PixelFormat);
            else
              v28 = 32;
            if (v27)
              v29 = (char)PixelFormat;
            else
              v29 = 32;
            asprintf((char **)v36, "iosurface-%03d-%zu-%zu-%c%c%c%c-%s-XXXXXX.plist", v14, Width, Height, v34, v33, v28, v29, a2);
            v19 = CA_CFDataWriteTempFile(Data, *(const char **)v36, 6);
            free(*(void **)v36);
            CFRelease(Data);
          }
          else
          {
            if (!x_log_hook_p())
            {
              v32 = x_log_category_utilities;
              v30 = value;
              if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)v36 = 0;
                _os_log_impl(&dword_184457000, v32, OS_LOG_TYPE_ERROR, "Failed to dump surface - Unable to create plist.", v36, 2u);
              }
              v19 = 0;
              goto LABEL_67;
            }
            x_log_();
            v19 = 0;
          }
          v30 = value;
LABEL_67:
          CFRelease(v30);
          goto LABEL_68;
        }
        if (x_log_hook_p())
          goto LABEL_34;
        v21 = x_log_category_utilities;
        if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
          goto LABEL_42;
        *(_WORD *)buf = 0;
        v22 = "Failed to dump surface - Unable to copy data from surface.";
      }
      else
      {
        if (x_log_hook_p())
        {
LABEL_34:
          x_log_();
LABEL_42:
          v19 = 0;
LABEL_68:
          CFRelease(MutableCopy);
LABEL_69:
          CFRelease(v8);
          goto LABEL_70;
        }
        v21 = x_log_category_utilities;
        if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
          goto LABEL_42;
        *(_WORD *)buf = 0;
        v22 = "Failed to dump surface - Surface does not have any data.";
      }
      _os_log_impl(&dword_184457000, v21, OS_LOG_TYPE_ERROR, v22, buf, 2u);
      goto LABEL_42;
    }
    if (x_log_hook_p())
      goto LABEL_19;
    v17 = x_log_category_utilities;
    if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
      goto LABEL_27;
    *(_WORD *)buf = 0;
    v18 = "Failed to dump surface - Could not retrieve surface properties.";
LABEL_26:
    _os_log_impl(&dword_184457000, v17, OS_LOG_TYPE_ERROR, v18, buf, 2u);
    goto LABEL_27;
  }
  if (!x_log_hook_p())
  {
    v17 = x_log_category_utilities;
    if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
      goto LABEL_27;
    *(_WORD *)buf = 0;
    v18 = "Failed to dump surface - No surface to dump!";
    goto LABEL_26;
  }
LABEL_19:
  x_log_();
LABEL_27:
  v19 = 0;
LABEL_70:
  objc_autoreleasePoolPop(v4);
  return v19;
}

void sub_1845B8F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf)
{
  void *v19;
  const void *v20;
  const void *v21;

  CFRelease(cf);
  CFRelease(v21);
  CFRelease(v20);
  objc_autoreleasePoolPop(v19);
  _Unwind_Resume(a1);
}

id createDictionaryFromBulkAttachments(unsigned int *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[10];
  _QWORD v16[10];
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[4];
  _QWORD v20[4];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v19[0] = CFSTR("width");
  v3 = a1[1];
  v21 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *a1);
  v22 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v3);
  v20[0] = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v21, 2);
  v19[1] = CFSTR("height");
  v4 = a1[3];
  v21 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1[2]);
  v22 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v4);
  v20[1] = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v21, 2);
  v19[2] = CFSTR("horizontalOffset");
  v5 = a1[5];
  v21 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1[4]);
  v22 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v5);
  v20[2] = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v21, 2);
  v19[3] = CFSTR("verticalOffset");
  v6 = a1[7];
  v21 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1[6]);
  v22 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v6);
  v20[3] = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v21, 2);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, v19, 4), CFSTR("cleanAperture"));
  v17[0] = CFSTR("horizontalSpacing");
  v7 = a1[9];
  v21 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1[8]);
  v22 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v7);
  v17[1] = CFSTR("verticalSpacing");
  v18[0] = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v21, 2);
  v8 = a1[11];
  v21 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1[10]);
  v22 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v8);
  v18[1] = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v21, 2);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, v17, 2), CFSTR("pixelAspectRatio"));
  v9 = a1[13];
  v21 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1[12]);
  v22 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v9);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v21, 2), CFSTR("gammaLevel"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned __int8 *)a1 + 56)), CFSTR("fieldCount"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned __int8 *)a1 + 57)), CFSTR("fieldDetail"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned __int8 *)a1 + 58)), CFSTR("yCbCrMatrixIndex"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned __int8 *)a1 + 59)), CFSTR("colorPrimariesIndex"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned __int8 *)a1 + 60)), CFSTR("transferFunctionIndex"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned __int8 *)a1 + 61)), CFSTR("chromaLocationTopField"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned __int8 *)a1 + 62)), CFSTR("chromaLocationBottomField"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned __int8 *)a1 + 63)), CFSTR("chromaSubsampling"));
  v15[0] = CFSTR("displayPrimariesXG");
  v16[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned __int16 *)a1 + 32));
  v15[1] = CFSTR("displayPrimariesYG");
  v16[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned __int16 *)a1 + 33));
  v15[2] = CFSTR("displayPrimariesXB");
  v16[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned __int16 *)a1 + 34));
  v15[3] = CFSTR("displayPrimariesYB");
  v16[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned __int16 *)a1 + 35));
  v15[4] = CFSTR("displayPrimariesXR");
  v16[4] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned __int16 *)a1 + 36));
  v15[5] = CFSTR("displayPrimariesYR");
  v16[5] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned __int16 *)a1 + 37));
  v15[6] = CFSTR("whitePointX");
  v16[6] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned __int16 *)a1 + 38));
  v15[7] = CFSTR("whitePointY");
  v16[7] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned __int16 *)a1 + 39));
  v15[8] = CFSTR("maxDisplayMasteringLuminance");
  v16[8] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1[20]);
  v15[9] = CFSTR("minDisplayMasteringLuminance");
  v16[9] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1[21]);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, v15, 10), CFSTR("masteringDisplayColorVolume"));
  v13[0] = CFSTR("maxContentLightLevel");
  v10 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned __int16 *)a1 + 44));
  v13[1] = CFSTR("maxFrameAverageLightLevel");
  v14[0] = v10;
  v14[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned __int16 *)a1 + 45));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, v13, 2), CFSTR("contentLightLevelInfo"));
  v11 = a1[24];
  v21 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1[23]);
  v22 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v11);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v21, 2), CFSTR("edrFactor"));
  return v2;
}

char *CAIOSurfaceWriteToFile(__IOSurface *a1)
{
  return CAIOSurfaceWriteToFileWithSuffix(a1, "");
}

void CA::WindowServer::AppleDisplay::~AppleDisplay(CA::WindowServer::AppleDisplay *this)
{
  malloc_zone_t *malloc_zone;

  CA::WindowServer::IOMFBDisplay::~IOMFBDisplay(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::WindowServer::IOMFBDisplay::reset_max_layer_bandwidth(uint64_t this)
{
  *(_DWORD *)(this + 25512) = 0;
  return this;
}

uint64_t CA::WindowServer::AppleDisplay::min_src_rect_size(CA::WindowServer::AppleDisplay *this)
{
  return *((_QWORD *)this + 3544);
}

uint64_t CA::WindowServer::IOMFBDisplay::is_game_mode(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28134);
}

uint64_t CA::WindowServer::Display::uses_override_bounds(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::override_bounds(CA::WindowServer::Display *this)
{
  return (uint64_t)this + 200;
}

uint64_t CA::WindowServer::Display::override_bounds_shape(CA::WindowServer::Display *this)
{
  return *((_QWORD *)this + 27);
}

BOOL CA::WindowServer::AppleDisplay::iosurface_accelerator_supports_size_p(CA::WindowServer::AppleDisplay *this, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  CA::ScalerUtil::ScalerLimits::limits(this);
  return dword_1EDD11078 >= a2 && dword_1EDD1107C >= a3 && dword_1EDD11088 >= a4 && dword_1EDD1108C >= a5;
}

BOOL CA::WindowServer::AppleDisplay::iosurface_accelerator_supports_scale_p(CA::WindowServer::AppleDisplay *this, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, int a6, int a7)
{
  unint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  float *v14;
  float *v15;
  float v16;
  uint64_t v17;
  float v19;

  if (a7)
    v10 = a5;
  else
    v10 = a4;
  if (a7)
    v11 = a4;
  else
    v11 = a5;
  CA::ScalerUtil::ScalerLimits::limits(this);
  v12 = (float *)&dword_1EDD110A0;
  if (!a6)
    v12 = (float *)&xmmword_1EDD11090;
  v13 = *v12;
  v14 = (float *)algn_1EDD110A4;
  if (!a6)
    v14 = (float *)&xmmword_1EDD11090 + 1;
  v15 = (float *)&xmmword_1EDD11090 + 3;
  if (a6)
    v15 = (float *)&dword_1EDD110AC;
  v16 = (float)v10 / (float)a2;
  if (v16 < v13)
    return 0;
  v17 = 10;
  if (a6)
    v17 = 14;
  if (v16 > *(float *)&CA::ScalerUtil::ScalerLimits::limits(void)::limits[v17])
    return 0;
  v19 = (float)v11 / (float)a3;
  return v19 <= *v15 && v19 >= *v14;
}

uint64_t CA::WindowServer::AppleDisplay::iosurface_accelerator_supports_color_remap(CA::WindowServer::AppleDisplay *this)
{
  CA::ScalerUtil::ScalerLimits::limits(this);
  return dword_1EDD110CC;
}

BOOL CA::WindowServer::AppleDisplay::supports_pq(CA::WindowServer::AppleDisplay *this)
{
  if ((*((_WORD *)this + 328) & 0x1C00) == 0x800)
    return ((*((_QWORD *)this + 80) >> 55) & 0x1E) - 16 < 0xA;
  else
    return (*((unsigned __int16 *)this + 14212) >> 7) & 1;
}

uint64_t CA::WindowServer::AppleDisplay::supports_hlg(CA::WindowServer::AppleDisplay *this)
{
  return (*((unsigned __int16 *)this + 14212) >> 6) & 1;
}

__n128 CA::WindowServer::AppleDisplay::iosurface_alignment@<Q0>(CA::WindowServer::AppleDisplay *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 3523);
  result = *(__n128 *)((char *)this + 28152);
  v3 = *(_OWORD *)((char *)this + 28168);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::framebuffer(CA::WindowServer::IOMFBDisplay *this)
{
  return *((_QWORD *)this + 3192);
}

uint64_t CA::WindowServer::IOMFBDisplay::blanking_removes_power(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28095);
}

uint64_t CA::WindowServer::IOMFBDisplay::set_blanking_removes_power(uint64_t this, char a2)
{
  *(_BYTE *)(this + 28095) = a2;
  return this;
}

BOOL CA::WindowServer::IOMFBDisplay::force_fixed_display_links(CA::WindowServer::IOMFBDisplay *this)
{
  return *((_DWORD *)this + 6789) != 0;
}

uint64_t CA::WindowServer::IOMFBDisplay::flipbook_enabled(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28096);
}

uint64_t CA::WindowServer::IOMFBDisplay::flipbook_suppressed(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28097);
}

uint64_t CA::WindowServer::Display::begin_skylight_update(CA::WindowServer::Display *this, CA::Render::Update *a2)
{
  return (*(uint64_t (**)(CA::WindowServer::Display *, CA::Render::Update *))(*(_QWORD *)this + 408))(this, a2);
}

uint64_t CA::WindowServer::Display::finish_skylight_update(CA::WindowServer::Display *this, CA::Render::Update *a2, uint64_t a3)
{
  return (*(uint64_t (**)(CA::WindowServer::Display *, CA::Render::Update *, uint64_t, _QWORD))(*(_QWORD *)this + 416))(this, a2, a3, 0);
}

uint64_t CA::WindowServer::Display::set_background_color(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::supports_detach_flags_p(CA::WindowServer::Display *this)
{
  return 1;
}

BOOL CA::WindowServer::IOMFBDisplay::is_detaching(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3251);
  return v1 && (*(_BYTE *)(v1 + 292) & 1) == 0;
}

void CA::WindowServer::IOMFBDisplay::disable_clone(CA::WindowServer::IOMFBDisplay *this)
{
  *((_BYTE *)this + 28044) = 0;
  *((_BYTE *)this + 28049) = 0;
  CA::WindowServer::IOMFBDisplay::set_enabled_(this, 0);
}

uint64_t CA::WindowServer::IOMFBDisplay::virtual_display_mode(CA::WindowServer::IOMFBDisplay *this)
{
  return *((_QWORD *)this + 3386);
}

uint64_t CA::WindowServer::Display::hardware_minimum_frame_duration(CA::WindowServer::Display *this)
{
  return (*(uint64_t (**)(CA::WindowServer::Display *))(*(_QWORD *)this + 768))(this);
}

uint64_t CA::WindowServer::Display::tracks_velocity(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::IOMFBDisplay::inverse_color(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28053);
}

uint64_t CA::WindowServer::IOMFBDisplay::grayscale(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28061);
}

float CA::WindowServer::IOMFBDisplay::contrast(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6533);
}

float CA::WindowServer::IOMFBDisplay::temperature(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6540);
}

uint64_t CA::WindowServer::IOMFBDisplay::set_temperature(uint64_t this, float a2)
{
  *(float *)(this + 26160) = a2;
  return this;
}

float CA::WindowServer::IOMFBDisplay::maximum_brightness(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6552);
}

float CA::WindowServer::Display::ffr_factor(CA::WindowServer::Display *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Display::overdrive_lut_type(CA::WindowServer::Display *this)
{
  return 0;
}

float CA::WindowServer::IOMFBDisplay::set_maximum_hdr_luminance(CA::WindowServer::IOMFBDisplay *this, double a2)
{
  float result;

  result = a2;
  *((float *)this + 6555) = result;
  return result;
}

double CA::WindowServer::IOMFBDisplay::maximum_hdr_luminance(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6555);
}

float CA::WindowServer::IOMFBDisplay::set_maximum_sdr_luminance(CA::WindowServer::IOMFBDisplay *this, double a2)
{
  float result;

  result = a2;
  *((float *)this + 6558) = result;
  return result;
}

double CA::WindowServer::IOMFBDisplay::maximum_sdr_luminance(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6558);
}

float CA::WindowServer::IOMFBDisplay::set_minimum_luminance(CA::WindowServer::IOMFBDisplay *this, double a2)
{
  float result;

  result = a2;
  *((float *)this + 6554) = result;
  return result;
}

double CA::WindowServer::IOMFBDisplay::minimum_luminance(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6554);
}

float CA::WindowServer::IOMFBDisplay::set_maximum_reference_luminance(CA::WindowServer::IOMFBDisplay *this, double a2)
{
  float result;

  result = a2;
  *((float *)this + 6559) = result;
  return result;
}

double CA::WindowServer::IOMFBDisplay::maximum_reference_luminance(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6559);
}

uint64_t CA::WindowServer::IOMFBDisplay::set_trinity_cabal_config(uint64_t this, char a2)
{
  *(_BYTE *)(this + 27352) = a2;
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::trinity_cabal_config(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 27352);
}

uint64_t CA::WindowServer::IOMFBDisplay::set_preserve_apple_SRGB_gamma_response(uint64_t this, char a2)
{
  *(_BYTE *)(this + 28127) = a2;
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::preserve_apple_SRGB_gamma_response(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28127);
}

float CA::WindowServer::IOMFBDisplay::filtered_ambient_lux(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6542);
}

uint64_t CA::WindowServer::IOMFBDisplay::set_filtered_ambient_lux(uint64_t this, float a2)
{
  *(float *)(this + 26168) = a2;
  return this;
}

float CA::WindowServer::IOMFBDisplay::gamma(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6570);
}

uint64_t CA::WindowServer::IOMFBDisplay::supports_color_matrix(CA::WindowServer::IOMFBDisplay *this)
{
  return 1;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_accessibility_color_matrix_applied(uint64_t this, char a2)
{
  *(_BYTE *)(this + 26932) = a2;
  return this;
}

uint64_t CA::WindowServer::Display::allows_wireless_color_filtering(CA::WindowServer::Display *this)
{
  return 0;
}

float CA::WindowServer::IOMFBDisplay::brightness_scale(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6632);
}

uint64_t CA::WindowServer::IOMFBDisplay::ignores_inhibit_cloning(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28054);
}

uint64_t CA::WindowServer::IOMFBDisplay::notifies_on_disallowed_cloning_layers(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28055);
}

uint64_t CA::WindowServer::IOMFBDisplay::allows_remote_control_layers(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28057);
}

uint64_t CA::WindowServer::IOMFBDisplay::freeze(uint64_t this)
{
  *(_BYTE *)(this + 28075) = 1;
  return this;
}

CA::WindowServer::AccelServer *CA::WindowServer::AppleDisplay::new_server(CA::WindowServer::AppleDisplay *this)
{
  int v2;
  malloc_zone_t *malloc_zone;
  CA::WindowServer::AccelServer *result;
  const __CFString *v5;

  v2 = *((unsigned __int8 *)this + 28052);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = (CA::WindowServer::AccelServer *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x408uLL, 0x743898A5uLL);
  if (result)
  {
    if (v2)
      v5 = CFSTR("TVOut");
    else
      v5 = CFSTR("LCD");
    return CA::WindowServer::AccelServer::AccelServer(result, this, v5);
  }
  return result;
}

uint64_t CA::WindowServer::Display::supports_cursor(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::hw_supports_cursor(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::dedicated_cursor_plane(CA::WindowServer::Display *this)
{
  return 0;
}

double CA::WindowServer::Display::maximum_cursor_size(CA::WindowServer::Display *this)
{
  return 0.0;
}

double CA::WindowServer::Display::cursor_position(CA::WindowServer::Display *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Display::cursor_dictionary(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::cursor_hidden(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::cursor_enabled(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::set_privacy_indicator_surface()
{
  return 0;
}

uint64_t CA::WindowServer::IOMFBDisplay::triple_buffered(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28099);
}

BOOL CA::WindowServer::IOMFBDisplay::has_detached_layer(CA::WindowServer::IOMFBDisplay *this)
{
  return *((_QWORD *)this + 3251) != 0;
}

uint64_t CA::WindowServer::IOMFBDisplay::update_request_callback(CA::WindowServer::IOMFBDisplay *this)
{
  return *((_QWORD *)this + 3313);
}

uint64_t CA::WindowServer::IOMFBDisplay::system_gamma_curve(CA::WindowServer::IOMFBDisplay *this)
{
  return *((_QWORD *)this + 3415);
}

uint64_t CA::WindowServer::IOMFBDisplay::blackpoint_curve(CA::WindowServer::IOMFBDisplay *this)
{
  return *((_QWORD *)this + 3416);
}

uint64_t CA::WindowServer::IOMFBDisplay::gamma_adjustment_curves(CA::WindowServer::IOMFBDisplay *this)
{
  return *((_QWORD *)this + 3417);
}

uint64_t CA::WindowServer::IOMFBDisplay::edr_scaling_applied_in_gp(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28136);
}

double CA::WindowServer::IOMFBDisplay::last_gp0_obs_bandwidth(CA::WindowServer::IOMFBDisplay *this)
{
  return COERCE_DOUBLE(atomic_load((unint64_t *)this + 3462));
}

double CA::WindowServer::IOMFBDisplay::last_gp0_max_bandwidth(CA::WindowServer::IOMFBDisplay *this)
{
  return COERCE_DOUBLE(atomic_load((unint64_t *)this + 3463));
}

double CA::WindowServer::IOMFBDisplay::last_gp1_obs_bandwidth(CA::WindowServer::IOMFBDisplay *this)
{
  return COERCE_DOUBLE(atomic_load((unint64_t *)this + 3464));
}

double CA::WindowServer::IOMFBDisplay::last_gp1_max_bandwidth(CA::WindowServer::IOMFBDisplay *this)
{
  return COERCE_DOUBLE(atomic_load((unint64_t *)this + 3465));
}

double CA::WindowServer::IOMFBDisplay::last_frame_apce(CA::WindowServer::IOMFBDisplay *this)
{
  return COERCE_DOUBLE(atomic_load((unint64_t *)this + 3466));
}

uint64_t CA::WindowServer::IOMFBDisplay::last_frame_rtplc_triggered(CA::WindowServer::IOMFBDisplay *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 27736);
  return v1 & 1;
}

uint64_t CA::WindowServer::IOMFBDisplay::last_frame_rtplc_capped(CA::WindowServer::IOMFBDisplay *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 27737);
  return v1 & 1;
}

void CA::WindowServer::Display::set_power_state(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  os_unfair_lock_s *v8;

  v8 = a1 + 179;
  os_unfair_lock_lock(a1 + 179);
  (*(void (**)(os_unfair_lock_s *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)&a1->_os_unfair_lock_opaque + 2120))(a1, a2, a3, a4);
  os_unfair_lock_unlock(v8);
}

BOOL CA::WindowServer::AppleDisplay::needs_420_transform(CA::WindowServer::AppleDisplay *this, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;

  v2 = *((_QWORD *)this + 3532);
  if (v2)
    v3 = v2 >= a2;
  else
    v3 = 1;
  return !v3;
}

uint64_t CA::WindowServer::IOMFBDisplay::mie_enabled(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28064);
}

uint64_t CA::WindowServer::IOMFBDisplay::supports_multiple_layers(CA::WindowServer::IOMFBDisplay *this)
{
  return 1;
}

void CA::WindowServer::AppleDisplay::update_scaler_limits(CA::WindowServer::AppleDisplay *this)
{
  if (MGGetSInt64Answer() == 32800)
    CA::WindowServer::DisplayLimits::update_display_scaling((CA::WindowServer::AppleDisplay *)((char *)this + 28144), this, *((_DWORD *)this + 160) & 0x3FFF, 0x870u);
}

uint64_t CA::WindowServer::AppleDisplay::framebuffer_needs_intermediate(CA::WindowServer::AppleDisplay *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11;
  int v12;

  if (CADeviceUseFramebufferCompression::once[0] != -1)
    dispatch_once(CADeviceUseFramebufferCompression::once, &__block_literal_global_22_9761);
  if ((_DWORD)a2 == (_DWORD)a4 && (_DWORD)a3 == (_DWORD)a5)
    return 0;
  v11 = 28224;
  if (!CADeviceUseFramebufferCompression::enable_compression)
    v11 = 28248;
  v12 = *(_DWORD *)((char *)this + v11);
  if (v12 >= (int)a2 || v12 == 0)
    return (*(unsigned int (**)(CA::WindowServer::AppleDisplay *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 2224))(this, a2, a3, a4, a5, 0) ^ 1;
  else
    return 1;
}

void CA::WindowServer::AppleDisplay::update_display_limits(CA::WindowServer::AppleDisplay *this)
{
  char *v2;
  uint64_t v3;
  const __CFString *TypeID;
  const __CFNumber *v5;
  const __CFNumber *v6;
  const __CFString *v7;
  const __CFNumber *v8;
  const __CFNumber *v9;
  uint64_t v10;
  unsigned int v11;
  char *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  const __CFString *v17;
  const __CFNumber *v18;
  const __CFNumber *v19;
  const __CFString *v20;
  const __CFDictionary *v21;
  const __CFDictionary *v22;
  const void *Value;
  int v24;
  const void *v25;
  const __CFString *v26;
  const __CFDictionary *v27;
  const __CFDictionary *v28;
  const void *v29;
  int v30;
  _BOOL4 v31;
  const __CFString *v32;
  const __CFDictionary *v33;
  const __CFDictionary *v34;
  const void *v35;
  int v36;
  const void *v37;
  int v38;
  uint64_t v39;
  NSObject *v40;
  const void *v41;
  int v42;
  const __CFArray *Array;
  const __CFArray *v44;
  const void *ValueAtIndex;
  const void *v46;
  NSObject *v47;
  NSObject *v48;
  const void *v49;
  int v50;
  const __CFArray *v51;
  const void *v52;
  NSObject *v53;
  const void *v54;
  int v55;
  const void *v56;
  int v57;
  const void *v58;
  int v59;
  const void *v60;
  const void *v61;
  const __CFString *v62;
  const __CFDictionary *v63;
  const __CFDictionary *v64;
  const void *v65;
  const void *v66;
  int v67;
  __int16 v68;
  __int16 v69;
  const __CFString *v70;
  const void *v71;
  const void *v72;
  int v73;
  const __CFString *v74;
  const void *v75;
  const void *v76;
  int v77;
  const __CFString *v78;
  const __CFDictionary *v79;
  const __CFDictionary *v80;
  const void *v81;
  const __CFString *v82;
  const void *v83;
  const void *v84;
  __int16 v85;
  const __CFString *v86;
  const void *v87;
  const void *v88;
  __int16 v89;
  const __CFString *v90;
  const void *v91;
  const void *v92;
  __int16 v93;
  __int16 v94;
  __int16 v95;
  int AppBooleanValue;
  NSObject *v97;
  const char *v98;
  const __CFString *v99;
  const __CFDictionary *v100;
  const __CFDictionary *v101;
  const void *v102;
  const void *v103;
  const __CFString *v104;
  const void *v105;
  const void *v106;
  __int16 v107;
  NSObject *v108;
  int v109;
  const char *v110;
  __int16 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int16 v119;
  uint64_t v120;
  BOOL v121;
  uint64_t v122;
  uint64_t v123;
  __int16 v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  BOOL v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char v137;
  int v138;
  BOOL v139;
  BOOL v140;
  BOOL v141;
  NSObject *v142;
  int v143;
  unsigned int *v144;
  NSObject *v145;
  int v146;
  const char *v147;
  int v148;
  const char *v149;
  unsigned int v150;
  unsigned int v151;
  BOOL v152;
  unsigned int *v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int *v156;
  unsigned int v157;
  char *v158;
  int v159;
  const void *v160;
  int v161;
  float v162;
  float v163;
  int v164;
  NSObject *v165;
  Boolean keyExistsAndHasValidFormat;
  unsigned int valuePtr;
  _BYTE v168[14];
  __int16 v169;
  const char *v170;
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 28144;
  *(int64x2_t *)((char *)this + 28152) = vdupq_n_s64(0x40uLL);
  *(_OWORD *)((char *)this + 28168) = xmmword_18474DEC0;
  *(_OWORD *)((char *)this + 28184) = xmmword_18474DED0;
  *((_QWORD *)this + 3527) = 1200;
  *(_OWORD *)((char *)this + 28200) = xmmword_18474DEE0;
  *((_OWORD *)this + 1764) = 0u;
  *((_OWORD *)this + 1765) = 0u;
  *((_OWORD *)this + 1766) = 0u;
  *((_OWORD *)this + 1767) = 0u;
  *(_OWORD *)((char *)this + 28312) = xmmword_18474DEF0;
  *((_QWORD *)this + 3541) = 0;
  *((_OWORD *)this + 1771) = xmmword_18474DF00;
  *((_OWORD *)this + 1772) = xmmword_18474DEF0;
  *((_QWORD *)this + 3546) = 0;
  *(_OWORD *)((char *)this + 28376) = xmmword_18474DF10;
  *((_DWORD *)this + 7105) = 0;
  *((_QWORD *)this + 3550) = 0;
  *((_QWORD *)this + 3549) = 0;
  *((_WORD *)this + 14212) = *((_WORD *)this + 14212) & 0xF5B3 | 0x200;
  *((_QWORD *)this + 3551) = 0;
  v3 = MGGetSInt64Answer();
  TypeID = (const __CFString *)CFNumberGetTypeID();
  v5 = (const __CFNumber *)CA::WindowServer::copy_display_property(this, CFSTR("color-accuracy-index"), TypeID);
  if (v5)
  {
    v6 = v5;
    valuePtr = 0;
    CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
    CFRelease(v6);
    if (valuePtr <= 4)
      *((_DWORD *)v2 + 67) = CA::WindowServer::DisplayLimits::update_display_limits(CA::WindowServer::AppleDisplay const&)::index_to_LUT_type[valuePtr];
  }
  v7 = (const __CFString *)CFNumberGetTypeID();
  v8 = (const __CFNumber *)CA::WindowServer::copy_display_property(this, CFSTR("FFR_raw_index"), v7);
  if (v8)
  {
    v9 = v8;
    valuePtr = 0;
    CFNumberGetValue(v8, kCFNumberIntType, &valuePtr);
    CFRelease(v9);
    v10 = 0;
    v11 = *((_DWORD *)v2 + 67);
    v12 = (char *)&CA::WindowServer::DisplayLimits::update_display_limits(CA::WindowServer::AppleDisplay const&)::thresholds
        + 24 * v11;
    v13 = (float)valuePtr * 0.000015259;
    while (1)
    {
      v14 = *(float *)&v12[4 * v10];
      if (v13 < v14)
        break;
      if (++v10 == 6)
        goto LABEL_17;
    }
    if (v11 == 1)
    {
      v15 = (float)(v10 + 1);
    }
    else if ((_DWORD)v10)
    {
      if ((_DWORD)v10 == 5)
      {
        v15 = 5.0;
      }
      else
      {
        v16 = *(float *)&v12[((v10 << 32) - 0x100000000) >> 30];
        v15 = (float)((float)(v13 - v16) / (float)(v14 - v16)) + (float)(int)v10;
      }
    }
    else
    {
      v15 = 1.0;
    }
    *((float *)v2 + 66) = v15;
  }
LABEL_17:
  v17 = (const __CFString *)CFNumberGetTypeID();
  v18 = (const __CFNumber *)CA::WindowServer::copy_display_property(this, CFSTR("PanelLayout"), v17);
  if (v18)
  {
    v19 = v18;
    CFNumberGetValue(v18, kCFNumberIntType, (char *)this + 28416);
    CFRelease(v19);
  }
  CA::WindowServer::DisplayLimits::update_display_scaling((CA::WindowServer::DisplayLimits *)v2, this, 0, 1u);
  v20 = (const __CFString *)CFDictionaryGetTypeID();
  v21 = (const __CFDictionary *)CA::WindowServer::copy_display_property(this, CFSTR("DisplayPipeStrideRequirements"), v20);
  if (v21)
  {
    v22 = v21;
    Value = CFDictionaryGetValue(v21, CFSTR("StrideLinearHorizontal"));
    if (Value)
      v24 = CA_CFIntValue(Value);
    else
      v24 = 0;
    v25 = CFDictionaryGetValue(v22, CFSTR("StrideLinearVertical"));
    if (v25)
      LODWORD(v25) = CA_CFIntValue(v25);
    if (v24)
      *((_QWORD *)this + 3520) = v24;
    if ((_DWORD)v25)
      *((_QWORD *)v2 + 3) = (int)v25;
    CFRelease(v22);
  }
  v26 = (const __CFString *)CFDictionaryGetTypeID();
  v27 = (const __CFDictionary *)CA::WindowServer::copy_display_property(this, CFSTR("DisplayPipePlaneBaseAlignment"), v26);
  if (v27)
  {
    v28 = v27;
    v29 = CFDictionaryGetValue(v27, CFSTR("PlaneBaseAlignmentLinear"));
    if (v29)
    {
      v30 = CA_CFIntValue(v29);
      if (v30)
        *((_QWORD *)v2 + 1) = v30;
    }
    CFRelease(v28);
  }
  if (CADeviceHasInternalBuild::once != -1)
    dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
  if (CADeviceHasInternalBuild::internal)
  {
    if (CADeviceIsVirtualized::once[0] != -1)
      dispatch_once(CADeviceIsVirtualized::once, &__block_literal_global_204);
    v31 = CADeviceIsVirtualized::is_virtualized == 0;
  }
  else
  {
    v31 = 0;
  }
  v32 = (const __CFString *)CFDictionaryGetTypeID();
  v33 = (const __CFDictionary *)CA::WindowServer::copy_display_property(this, CFSTR("IOMFBMaxSrcPixels"), v32);
  if (v33)
  {
    v34 = v33;
    v35 = CFDictionaryGetValue(v33, CFSTR("MaxSrcBufferWidth"));
    if (v35)
      v36 = CA_CFIntValue(v35);
    else
      v36 = 0;
    v37 = CFDictionaryGetValue(v34, CFSTR("MaxSrcBufferHeight"));
    if (v37 && (v38 = CA_CFIntValue(v37), v36 >= 1) && v38 >= 1)
    {
      if (v36 >= v38)
        v39 = v38;
      else
        v39 = v36;
      *((_QWORD *)this + 3524) = v39;
    }
    else if (v31)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v40 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_FAULT))
        {
          LOWORD(valuePtr) = 0;
          _os_log_impl(&dword_184457000, v40, OS_LOG_TYPE_FAULT, "kIOMFBSourceSurface(Width/Height)LimitKey missing!", (uint8_t *)&valuePtr, 2u);
        }
      }
    }
    v41 = CFDictionaryGetValue(v34, CFSTR("MaxSrcRectWidth"));
    if (v41)
    {
      v42 = CA_CFIntValue(v41);
      if (v42 >= 1)
        *((_QWORD *)v2 + 7) = v42;
    }
    Array = (const __CFArray *)CA_CFDictionaryGetArray(v34, CFSTR("MaxSrcRectWidthForPipe"));
    if (Array)
    {
      v44 = Array;
      ValueAtIndex = CFArrayGetValueAtIndex(Array, 0);
      *((_QWORD *)this + 3525) = (int)CA_CFIntValue(ValueAtIndex);
      v46 = CFArrayGetValueAtIndex(v44, 1);
      *((_QWORD *)this + 3526) = (int)CA_CFIntValue(v46);
    }
    if (v31 && !*((_QWORD *)v2 + 7))
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v48 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_FAULT))
        {
          LOWORD(valuePtr) = 0;
          _os_log_impl(&dword_184457000, v48, OS_LOG_TYPE_FAULT, "kIOMFBSourceRectangleLimitWidthKey and kIOMFBSourceRectangleLimitWidthPerPipeKey missing!", (uint8_t *)&valuePtr, 2u);
        }
      }
    }
    v49 = CFDictionaryGetValue(v34, CFSTR("MaxSrcRectTotal"));
    if (v49)
    {
      v50 = CA_CFIntValue(v49);
      if (v50 >= 1)
        *((_QWORD *)this + 3527) = (unint64_t)v50 / *((_QWORD *)this + 3525);
    }
    v51 = (const __CFArray *)CA_CFDictionaryGetArray(v34, CFSTR("MaxSrcRectHeightForPipe"));
    if (v51)
    {
      v52 = CFArrayGetValueAtIndex(v51, 0);
      *((_QWORD *)this + 3527) = (int)CA_CFIntValue(v52);
    }
    if (v31 && !*((_QWORD *)this + 3527))
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v53 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_FAULT))
        {
          LOWORD(valuePtr) = 0;
          _os_log_impl(&dword_184457000, v53, OS_LOG_TYPE_FAULT, "kIOMFBSourceRectangleLimitTotalKey and kIOMFBSourceRectangleLimitHeightPerPipeKey missing!", (uint8_t *)&valuePtr, 2u);
        }
      }
    }
    v54 = CFDictionaryGetValue(v34, CFSTR("PixelClock"));
    if (v54)
    {
      v55 = CA_CFIntValue(v54);
      if (v55 >= 1)
        *((_QWORD *)this + 3533) = v55;
    }
    v56 = CFDictionaryGetValue(v34, CFSTR("VideoClock"));
    if (v56)
    {
      v57 = CA_CFIntValue(v56);
      if (v57 >= 1)
        *((_QWORD *)this + 3534) = v57;
    }
    v58 = CFDictionaryGetValue(v34, CFSTR("MaxVideoSrcDownscalingWidth"));
    if (v58)
    {
      v59 = CA_CFIntValue(v58);
      if (v59 >= 1)
        *((_QWORD *)this + 3541) = v59;
    }
    if (CADeviceUseCompression::once != -1)
      dispatch_once(&CADeviceUseCompression::once, &__block_literal_global_15);
    if (CADeviceUseCompression::enable_compression && !*((_BYTE *)this + 28068))
    {
      if (CADeviceSupportsUniversalCompression::once[0] != -1)
        dispatch_once(CADeviceSupportsUniversalCompression::once, &__block_literal_global_27);
      if (!CADeviceSupportsUniversalCompression::universal)
      {
        v160 = CFDictionaryGetValue(v34, CFSTR("IOMFBMaxCompressedSizeInBytes"));
        if (v160 && (v161 = CA_CFIntValue(v160)) != 0)
        {
          *((_QWORD *)v2 + 5) = v161;
        }
        else if (v31)
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v165 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_FAULT))
            {
              LOWORD(valuePtr) = 0;
              _os_log_impl(&dword_184457000, v165, OS_LOG_TYPE_FAULT, "kIOMFBMaxCompressedSizeInBytes missing!", (uint8_t *)&valuePtr, 2u);
            }
          }
        }
      }
    }
    v60 = CFDictionaryGetValue(v34, CFSTR("IOMFBCompressionSupport"));
    if (v60)
      *((_WORD *)v2 + 140) = *((_WORD *)v2 + 140) & 0xFDFF | ((CA_CFIntValue(v60) != 0) << 9);
    v61 = CFDictionaryGetValue(v34, CFSTR("MaxSrcRotRectTotal"));
    if (v61)
      *((_QWORD *)this + 3535) = (int)CA_CFIntValue(v61);
    CFRelease(v34);
  }
  else if (v31)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v47 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_FAULT))
      {
        LOWORD(valuePtr) = 0;
        _os_log_impl(&dword_184457000, v47, OS_LOG_TYPE_FAULT, "kIOMFBSourceLimitsKey missing!", (uint8_t *)&valuePtr, 2u);
      }
    }
  }
  *((_WORD *)v2 + 140) = *((_WORD *)v2 + 140) & 0xFAFF | 0x400;
  v62 = (const __CFString *)CFDictionaryGetTypeID();
  v63 = (const __CFDictionary *)CA::WindowServer::copy_display_property(this, CFSTR("IOMFBNumLayers"), v62);
  if (v63)
  {
    v64 = v63;
    v65 = CFDictionaryGetValue(v63, CFSTR("MaxNumLayers"));
    if (!v65 || CA_CFIntValue(v65) <= 1)
      *((_WORD *)v2 + 140) &= ~0x400u;
    v66 = CFDictionaryGetValue(v64, CFSTR("FullFrameRequired"));
    if (v66)
    {
      v67 = CA_CFIntValue(v66);
      v68 = *((_WORD *)v2 + 140);
      if (v67)
      {
        v69 = 256;
LABEL_115:
        *((_WORD *)v2 + 140) = v68 & 0xFEFF | v69;
        CFRelease(v64);
        goto LABEL_116;
      }
    }
    else
    {
      v68 = *((_WORD *)v2 + 140);
    }
    v69 = 0;
    goto LABEL_115;
  }
LABEL_116:
  *((_QWORD *)this + 3537) = 0;
  *((_QWORD *)this + 3536) = 0;
  v70 = (const __CFString *)CFNumberGetTypeID();
  v71 = CA::WindowServer::copy_display_property(this, CFSTR("maxAverageBpp"), v70);
  if (v71)
  {
    v72 = v71;
    v73 = CA_CFIntValue(v71);
    if (v73)
      *((double *)this + 3536) = (float)((float)((float)v73 * 0.000015259) + 0.0001);
    CFRelease(v72);
  }
  v74 = (const __CFString *)CFNumberGetTypeID();
  v75 = CA::WindowServer::copy_display_property(this, CFSTR("maxPeakBpp"), v74);
  if (v75)
  {
    v76 = v75;
    v77 = CA_CFIntValue(v75);
    if (v77)
      *((double *)this + 3537) = (float)((float)((float)v77 * 0.000015259) + 0.0001);
    CFRelease(v76);
  }
  *((_DWORD *)v2 + 40) = 0;
  v78 = (const __CFString *)CFDictionaryGetTypeID();
  v79 = (const __CFDictionary *)CA::WindowServer::copy_display_property(this, CFSTR("MaxDisplayBandwidthLimitKey"), v78);
  if (v79)
  {
    v80 = v79;
    v81 = CFDictionaryGetValue(v79, CFSTR("MaxGPBandwidthLimitKey"));
    if (v81)
      LODWORD(v81) = CA_CFIntValue(v81);
    *((_DWORD *)v2 + 40) = (_DWORD)v81;
    CFRelease(v80);
  }
  v82 = (const __CFString *)CFBooleanGetTypeID();
  v83 = CA::WindowServer::copy_display_property(this, CFSTR("PCCCabalEnable"), v82);
  if (v83)
  {
    v84 = v83;
    if (CA_CFBoolValue(v83))
      v85 = 4;
    else
      v85 = 0;
    *((_WORD *)v2 + 140) = *((_WORD *)v2 + 140) & 0xFFFB | v85;
    CFRelease(v84);
  }
  if (CADeviceDisplayNeedsW40aWorkaround::once != -1)
    dispatch_once(&CADeviceDisplayNeedsW40aWorkaround::once, &__block_literal_global_67);
  if (CADeviceDisplayNeedsW40aWorkaround::workaround)
  {
    v86 = (const __CFString *)CFNumberGetTypeID();
    v87 = CA::WindowServer::copy_display_property(this, CFSTR("W40a_Blending_OK"), v86);
    if (v87)
    {
      v88 = v87;
      if (CA_CFBoolValue(v87))
        v89 = 8;
      else
        v89 = 0;
      *((_WORD *)v2 + 140) = *((_WORD *)v2 + 140) & 0xFFF7 | v89;
      CFRelease(v88);
    }
  }
  else
  {
    *((_WORD *)v2 + 140) |= 8u;
  }
  v90 = (const __CFString *)CFBooleanGetTypeID();
  v91 = CA::WindowServer::copy_display_property(this, CFSTR("IOMFBSupportsICC"), v90);
  if (v91)
  {
    v92 = v91;
    if (CA_CFBoolValue(v91))
      v93 = 16;
    else
      v93 = 0;
    *((_WORD *)v2 + 140) = *((_WORD *)v2 + 140) & 0xFFEF | v93;
    CFRelease(v92);
    v94 = *((_WORD *)v2 + 140);
  }
  else
  {
    if (CADeviceDisplaySupportsICC::once != -1)
      dispatch_once(&CADeviceDisplaySupportsICC::once, &__block_literal_global_143);
    v95 = *((_WORD *)v2 + 140);
    if (CADeviceDisplaySupportsICC::supports_icc)
      v94 = v95 | 0x10;
    else
      v94 = v95 & 0xFFEF;
  }
  *((_WORD *)v2 + 140) = v94 & 0xFFDF;
  keyExistsAndHasValidFormat = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("enable_hdr10plus"), CFSTR("com.apple.coreanimation"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    *((_WORD *)v2 + 140) = *((_WORD *)v2 + 140) & 0xFFDF | (32 * (AppBooleanValue != 0));
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v97 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      if ((*((_WORD *)v2 + 140) & 0x20) != 0)
        v98 = "YES";
      else
        v98 = "NO";
      valuePtr = 136315138;
      *(_QWORD *)v168 = v98;
      _os_log_impl(&dword_184457000, v97, OS_LOG_TYPE_DEFAULT, "Platform supports HDR10Plus: %s", (uint8_t *)&valuePtr, 0xCu);
    }
  }
  v99 = (const __CFString *)CFDictionaryGetTypeID();
  v100 = (const __CFDictionary *)CA::WindowServer::copy_display_property(this, CFSTR("IOMFBDisplayRefresh"), v99);
  if (v100)
  {
    v101 = v100;
    v102 = CFDictionaryGetValue(v100, CFSTR("displayMinRefreshInterval"));
    if (v102)
      LODWORD(v102) = CA_CFIntValue(v102);
    *((_QWORD *)this + 3549) = (int)v102;
    v103 = CFDictionaryGetValue(v101, CFSTR("displayRefreshStepMachTime"));
    if (v103)
      LODWORD(v103) = CA_CFIntValue(v103);
    *((double *)this + 3550) = CATimeWithHostTime((int)v103);
    if (CADeviceSupportsAPT::once != -1)
      dispatch_once(&CADeviceSupportsAPT::once, &__block_literal_global_37);
    if (!CADeviceSupportsAPT::supports_apt)
      *((_QWORD *)this + 3550) = 0;
    CFRelease(v101);
  }
  v104 = (const __CFString *)CFBooleanGetTypeID();
  v105 = CA::WindowServer::copy_display_property(this, CFSTR("IOMFBSupportsRotation"), v104);
  if (v105)
  {
    v106 = v105;
    if (CA_CFBoolValue(v105))
      v107 = 2048;
    else
      v107 = 0;
    *((_WORD *)v2 + 140) = *((_WORD *)v2 + 140) & 0xF7FF | v107;
    CFRelease(v106);
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v108 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      v109 = *((_DWORD *)this + 6);
      v110 = "YES";
      if ((*((_WORD *)v2 + 140) & 0x800) == 0)
        v110 = "NO";
      valuePtr = 67109378;
      *(_DWORD *)v168 = v109;
      *(_WORD *)&v168[4] = 2080;
      *(_QWORD *)&v168[6] = v110;
      _os_log_impl(&dword_184457000, v108, OS_LOG_TYPE_DEFAULT, "CADisplay %d Rotation Support Enabled: %s", (uint8_t *)&valuePtr, 0x12u);
    }
  }
  *(_DWORD *)v2 = 2;
  if (CADeviceSupportsCIF10::once != -1)
    dispatch_once(&CADeviceSupportsCIF10::once, &__block_literal_global_10_9744);
  if (CADeviceSupportsCIF10::supports_cif10)
    *(_DWORD *)v2 |= 4u;
  if (CADeviceHasHardwareAcceleratedHDR::once != -1)
    dispatch_once(&CADeviceHasHardwareAcceleratedHDR::once, &__block_literal_global_93);
  if (CADeviceHasHardwareAcceleratedHDR::has_capability)
    goto LABEL_192;
  if (CADeviceIsVirtualized::once[0] != -1)
    dispatch_once(CADeviceIsVirtualized::once, &__block_literal_global_204);
  if (CADeviceIsVirtualized::is_virtualized)
LABEL_192:
    *(_DWORD *)v2 |= 8u;
  v111 = *((_WORD *)v2 + 140);
  if ((*((_WORD *)this + 328) & 0x1C00) == 0)
  {
    if (v3 != 28672)
    {
      v116 = 1;
      while (v116 != 8)
      {
        v117 = v116;
        v118 = CA::WindowServer::no_pq_internal_chip_ids[v116++];
        if (v118 == v3)
        {
          if ((unint64_t)(v117 - 1) < 7)
            goto LABEL_201;
          goto LABEL_206;
        }
      }
      goto LABEL_206;
    }
LABEL_201:
    v115 = 0;
    goto LABEL_207;
  }
  if (v3 == 28672)
    goto LABEL_201;
  v112 = 0;
  while (v112 != 4)
  {
    v113 = v112 + 1;
    v114 = CA::WindowServer::no_pq_external_chip_ids[++v112];
    if (v114 == v3)
    {
      if ((unint64_t)(v113 - 1) <= 3)
        goto LABEL_201;
      break;
    }
  }
LABEL_206:
  v115 = 128;
LABEL_207:
  v119 = v111 & 0xFF7F | v115;
  *((_WORD *)v2 + 140) = v119;
  if (v3 <= 33024)
  {
    if (v3 <= 32799)
    {
      if ((unint64_t)(v3 - 24640) >= 2)
      {
        if (v3 == 32789)
        {
          *((_WORD *)v2 + 140) = v119 | 2;
          v120 = 2048;
LABEL_231:
          *((_QWORD *)this + 3531) = v120;
          goto LABEL_241;
        }
        goto LABEL_332;
      }
LABEL_225:
      v124 = (4 * v111) & 0x40 | v111 & 0xFF3F | v115 & 0xFFBF;
LABEL_226:
      *((_WORD *)v2 + 140) = v124;
      goto LABEL_241;
    }
    switch(v3)
    {
      case 32800:
        *((_OWORD *)this + 1764) = xmmword_18474DF20;
        *((_QWORD *)this + 3532) = 2160;
        *((_OWORD *)this + 1765) = xmmword_18474DF30;
        goto LABEL_241;
      case 32807:
        v127 = 5120;
        if (!*((_BYTE *)this + 28052))
          v127 = 4096;
        *((_QWORD *)this + 3528) = v127;
        goto LABEL_240;
      case 32816:
        *((_OWORD *)this + 1764) = xmmword_18474DF20;
        *((_QWORD *)this + 3532) = 2160;
LABEL_240:
        *((_QWORD *)this + 3530) = 1;
        goto LABEL_241;
    }
LABEL_332:
    v124 = v111 & 0xFF7D | v115 & 0xFFFD;
    goto LABEL_226;
  }
  if (v3 > 33057)
  {
    if (v3 == 33058 || v3 == 33074)
      goto LABEL_225;
    if (v3 != 33088)
      goto LABEL_332;
    v121 = *((_BYTE *)this + 28052) == 0;
    v122 = 4096;
    v123 = 1640;
  }
  else
  {
    switch(v3)
    {
      case 33025:
        v125 = *((_BYTE *)this + 28052) == 0;
        v120 = 4096;
        v126 = 2388;
        if (*((_BYTE *)this + 28052))
          v126 = 4096;
        *((_QWORD *)this + 3528) = v126;
        if (v125)
          v120 = 2160;
        goto LABEL_231;
      case 33027:
        v121 = *((_BYTE *)this + 28052) == 0;
        v122 = 6144;
        v123 = 5120;
        break;
      case 33040:
        v121 = *((_BYTE *)this + 28052) == 0;
        v122 = 4096;
        v123 = 2388;
        break;
      default:
        goto LABEL_332;
    }
  }
  if (v121)
    v122 = v123;
  *((_QWORD *)this + 3528) = v122;
LABEL_241:
  v128 = MGGetSInt64Answer();
  v129 = v128;
  v130 = 1;
  *((_BYTE *)this + 28067) = 1;
  if (v128 == 28672)
  {
    *((_DWORD *)this + 6790) = 2;
    *((_WORD *)this + 14035) = 0;
    *((_BYTE *)this + 28072) = 0;
    v131 = 1;
  }
  else
  {
    *((_DWORD *)this + 6790) = v128 == 32784;
    *((_BYTE *)this + 28070) = 1;
    *((_BYTE *)this + 28071) = (unint64_t)v128 >> 1 != 16392;
    v132 = 3;
    while (v130 != 4)
    {
      v133 = CADeviceVertexCoordinateSubpixelBits::four_bit_chip_ids[v130++];
      if (v133 == v128)
      {
        v132 = v130 - 2;
        break;
      }
    }
    *((_BYTE *)this + 28072) = v132 > 2;
    v134 = 1;
    v135 = 6;
    while (v134 != 7)
    {
      v136 = CA::WindowServer::no_l10r_chip_ids[v134++];
      if (v136 == v128)
      {
        v135 = v134 - 2;
        break;
      }
    }
    v131 = v135 < 6;
  }
  *((_BYTE *)this + 28073) = !v131;
  v137 = v2[280];
  *((_BYTE *)this + 28094) = (v137 & 4) != 0;
  *((_BYTE *)this + 28069) = (v137 & 8) != 0;
  v138 = 1;
  if (v128 > 32784)
  {
    if (v128 == 32789)
      goto LABEL_260;
    if (v128 == 32785)
    {
      *((_DWORD *)this + 6791) = 2;
      goto LABEL_262;
    }
    goto LABEL_259;
  }
  if (v128 != 28672 && v128 != 32784)
LABEL_259:
    v138 = 3;
LABEL_260:
  *((_DWORD *)this + 6791) = v138;
  if (v128 == 32784)
  {
    *((_QWORD *)this + 3547) = 0x3FE89D89D89D89D9;
    *((_QWORD *)this + 3542) = 0x3FE89D89D89D89D9;
  }
LABEL_262:
  if (CADeviceDisplaySupportsEDRFactor::once != -1)
    dispatch_once(&CADeviceDisplaySupportsEDRFactor::once, &__block_literal_global_49);
  *((_BYTE *)this + 28087) = CADeviceDisplaySupportsEDRFactor::supports_edr;
  if (CADeviceHasLCDPanel::once[0] != -1)
    dispatch_once(CADeviceHasLCDPanel::once, &__block_literal_global_69);
  *((_BYTE *)this + 28084) = CADeviceHasLCDPanel::has_lcd;
  if (!*((_BYTE *)this + 28052))
    goto LABEL_271;
  if (CADeviceHasHardwareAcceleratedHDR::once != -1)
    dispatch_once(&CADeviceHasHardwareAcceleratedHDR::once, &__block_literal_global_93);
  if (CADeviceHasHardwareAcceleratedHDR::has_capability)
  {
    v139 = 1;
  }
  else
  {
LABEL_271:
    if (CADeviceIsVirtualized::once[0] != -1)
      dispatch_once(CADeviceIsVirtualized::once, &__block_literal_global_204);
    v139 = CADeviceIsVirtualized::is_virtualized != 0;
  }
  *((_BYTE *)this + 28085) = v139;
  if (CADeviceDisplaySupportsICC::once != -1)
    dispatch_once(&CADeviceDisplaySupportsICC::once, &__block_literal_global_143);
  if ((*((_WORD *)this + 328) & 0x1C00) == 0
    && CADeviceDisplaySupportsICC::supports_icc
    && (*((_WORD *)v2 + 140) & 0x10) != 0)
  {
    *((_BYTE *)this + 28121) = 1;
    *((_WORD *)this + 14058) = 257;
    *(_DWORD *)v2 |= 0x10u;
    if (CADeviceSupportsDisplayToneMap::once != -1)
      dispatch_once(&CADeviceSupportsDisplayToneMap::once, &__block_literal_global_173);
    v140 = CADeviceSupportsDisplayToneMap::display_tonemap == 1 && (*((_WORD *)this + 328) & 0x1C00) == 0;
    keyExistsAndHasValidFormat = 0;
    v141 = CFPreferencesGetAppBooleanValue(CFSTR("CAEnableDisplayTonemap"), CFSTR("com.apple.coreanimation"), &keyExistsAndHasValidFormat) != 0;
    if (keyExistsAndHasValidFormat)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v142 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
        {
          v143 = *((_DWORD *)this + 6);
          valuePtr = 67109120;
          *(_DWORD *)v168 = v143;
          _os_log_impl(&dword_184457000, v142, OS_LOG_TYPE_DEFAULT, "CADisplay %d Display Tonemap Support override", (uint8_t *)&valuePtr, 8u);
        }
      }
      v140 = v141;
    }
    *((_BYTE *)this + 28122) = v140;
  }
  v144 = (unsigned int *)((char *)this + 745);
  if (x_log_hook_p())
  {
    (*(uint64_t (**)(CA::WindowServer::AppleDisplay *))(*(_QWORD *)this + 1832))(this);
    (*(uint64_t (**)(CA::WindowServer::AppleDisplay *))(*(_QWORD *)this + 1840))(this);
    x_log_();
  }
  else
  {
    v145 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      v146 = *((_DWORD *)this + 6);
      if ((*(unsigned int (**)(CA::WindowServer::AppleDisplay *))(*(_QWORD *)this + 1832))(this))
        v147 = "YES";
      else
        v147 = "NO";
      v148 = (*(uint64_t (**)(CA::WindowServer::AppleDisplay *))(*(_QWORD *)this + 1840))(this);
      valuePtr = 67109634;
      if (v148)
        v149 = "YES";
      else
        v149 = "NO";
      *(_DWORD *)v168 = v146;
      *(_WORD *)&v168[4] = 2080;
      *(_QWORD *)&v168[6] = v147;
      v169 = 2080;
      v170 = v149;
      _os_log_impl(&dword_184457000, v145, OS_LOG_TYPE_DEFAULT, "CADisplay %d ICC Support Enabled: %s; Display Tonemap Support Enabled: %s\n",
        (uint8_t *)&valuePtr,
        0x1Cu);
    }
  }
  v150 = *((unsigned __int16 *)v2 + 140);
  *v144 = *v144 & 0xFFFFFFBF | (((v150 >> 10) & 1) << 6);
  *((_BYTE *)this + 28086) = (v150 & 0x20) != 0;
  if (CADeviceUseCompression::once != -1)
    dispatch_once(&CADeviceUseCompression::once, &__block_literal_global_15);
  if (CADeviceUseCompression::enable_compression
    && !*((_BYTE *)this + 28068)
    && (*((_WORD *)this + 328) & 0x1C00) != 0x1000)
  {
    do
      v151 = __ldaxr(CA::WindowServer::IOMFBDisplay::_compressed_display_count);
    while (__stlxr(v151 + 1, CA::WindowServer::IOMFBDisplay::_compressed_display_count));
  }
  if (!*((_BYTE *)this + 28052) && (*((_WORD *)this + 328) & 0x1C00) != 0x1000)
  {
    if (v129 == 28672)
    {
      if (*((_DWORD *)this + 24) <= *((_DWORD *)this + 22) && *((_DWORD *)this + 25) <= *((_DWORD *)this + 23))
        goto LABEL_315;
      v152 = 1;
    }
    else
    {
      v152 = CA::WindowServer::IOMFBDisplay::service_int_property((CA::WindowServer::IOMFBDisplay *)*((unsigned int *)this + 6382), CFSTR("IdleCachingMethod")) != 0;
    }
    *((_BYTE *)this + 28074) = v152;
LABEL_315:
    if (CADeviceSupportsAPT::once != -1)
      dispatch_once(&CADeviceSupportsAPT::once, &__block_literal_global_37);
    if (CADeviceSupportsAPT::supports_apt)
    {
      v153 = (unsigned int *)((char *)this + 624);
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 | 0x10, v153));
      if (CAFrameRateArbitrationEnabled(void)::once != -1)
        dispatch_once(&CAFrameRateArbitrationEnabled(void)::once, &__block_literal_global_14849);
      if (CAFrameRateArbitrationEnabled(void)::enabled)
      {
        do
          v155 = __ldaxr(v153);
        while (__stlxr(v155 | 0x100, v153));
      }
    }
    if (CADeviceUseVBL::once[0] != -1)
      dispatch_once(CADeviceUseVBL::once, &__block_literal_global_12);
    if (CADeviceUseVBL::use_vbl)
    {
      v156 = (unsigned int *)((char *)this + 624);
      do
        v157 = __ldaxr(v156);
      while (__stlxr(v157 | 0x20, v156));
    }
    if (!*((_BYTE *)this + 28052))
    {
      v158 = getenv("CA_MAIN_DISPLAY_ORIENTATION");
      if (v158)
      {
        v159 = atoi(v158);
      }
      else
      {
        MGGetFloat32Answer();
        v163 = v162 * -57.2957795 + 360.0;
        v159 = llroundf(v163 * 0.011111);
      }
      if ((v159 - 1) >= 3)
        v164 = 0;
      else
        v164 = v159;
      *((_DWORD *)v2 + 69) = v164;
    }
    *v144 |= 0x200u;
  }
}

BOOL CA::WindowServer::AppleDisplay::supports_scale_p(CA::WindowServer::AppleDisplay *this, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v12;

  v6 = 208;
  if (a6)
    v6 = 168;
  v7 = (double *)((char *)this + v6);
  v8 = (float)((float)a4 / (float)a2);
  v9 = v7[3521];
  if (v9 > v8)
    return 0;
  v10 = v7[3522];
  if (v10 < v8)
    return 0;
  v12 = (float)((float)a5 / (float)a3);
  return v10 >= v12 && v9 <= v12;
}

uint64_t CA::WindowServer::AppleDisplay::valid_bandwidth_p(CA::WindowServer::AppleDisplay *this, float a2, float a3)
{
  double v3;
  _BOOL4 v4;
  double v5;
  _BOOL4 v6;
  int v7;
  int v8;

  v3 = *((double *)this + 3536);
  v4 = v3 != 0.0;
  if (v3 >= a2)
    v4 = 0;
  v5 = *((double *)this + 3537);
  v6 = v5 != 0.0;
  if (v5 >= a3)
    v6 = 0;
  v7 = *((_DWORD *)this + 6791);
  if (v7 == 2)
  {
    v8 = v4 && v6;
    return v8 ^ 1u;
  }
  if (v7 == 1)
  {
    v8 = v4 || v6;
    return v8 ^ 1u;
  }
  return 1;
}

uint64_t CA::WindowServer::AppleDisplay::max_src_rect_width_by_pipes(CA::WindowServer::AppleDisplay *this, int a2)
{
  unsigned int v2;

  if (!a2)
    a2 = *((unsigned __int8 *)this + 27009);
  v2 = a2 - 1;
  if (!a2)
    v2 = 0;
  if (v2 >= 2)
    abort();
  return *((_QWORD *)this + v2 + 3525);
}

uint64_t CA::WindowServer::AppleDisplay::max_src_rect_height_by_pipes(CA::WindowServer::AppleDisplay *this, unsigned int a2)
{
  if (!a2)
    a2 = *((unsigned __int8 *)this + 27010);
  if (a2 >= 2)
    abort();
  return *((_QWORD *)this + 3527);
}

uint64_t CA::WindowServer::AppleDisplay::max_src_bandwidth_per_pipe(CA::WindowServer::AppleDisplay *this)
{
  return *((unsigned int *)this + 7076);
}

uint64_t CA::WindowServer::IOMFBDisplay::scale_cloned_layer_p()
{
  return 1;
}

const void *CA::WindowServer::copy_display_property(CA::WindowServer *this, CFStringRef key, const __CFString *a3)
{
  const void *v6;
  io_registry_entry_t v7;

  if (!*((_QWORD *)this + 3192) || (v6 = (const void *)IOMobileFramebufferCopyProperty()) == 0)
  {
    v7 = *((_DWORD *)this + 6382);
    if (!v7)
      return 0;
    v6 = IORegistryEntrySearchCFProperty(v7, "IOService", key, 0, 0);
  }
  if (a3 && v6 && (const __CFString *)CFGetTypeID(v6) != a3)
  {
    CFRelease(v6);
    return 0;
  }
  return v6;
}

void CA::WindowServer::DisplayLimits::update_display_scaling(CA::WindowServer::DisplayLimits *this, const CA::WindowServer::AppleDisplay *a2, unsigned int a3, unsigned int a4)
{
  const __CFString *TypeID;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  const void *Value;
  int v12;
  const void *v13;
  int v14;
  const void *v15;
  int v16;
  const void *v17;
  int v18;

  TypeID = (const __CFString *)CFDictionaryGetTypeID();
  v9 = (const __CFDictionary *)CA::WindowServer::copy_display_property(a2, CFSTR("IOMFBScalingLimits"), TypeID);
  if (v9)
  {
    v10 = v9;
    Value = CFDictionaryGetValue(v9, CFSTR("RGBLayer_MinScaleFraction"));
    if (Value)
      v12 = CA_CFIntValue(Value);
    else
      v12 = 0;
    v13 = CFDictionaryGetValue(v10, CFSTR("RGBLayer_MaxScale"));
    if (v13)
    {
      v14 = CA_CFIntValue(v13);
      if (v12)
      {
        if (v14)
        {
          *((double *)this + 29) = 1.0 / (double)v12;
          *((double *)this + 30) = (double)v14;
        }
      }
    }
    v15 = CFDictionaryGetValue(v10, CFSTR("YUVLayer_MinScaleFraction"));
    if (v15)
      v16 = CA_CFIntValue(v15);
    else
      v16 = 0;
    v17 = CFDictionaryGetValue(v10, CFSTR("YUVLayer_MaxScale"));
    if (v17)
    {
      v18 = CA_CFIntValue(v17);
      if (v16)
      {
        if (v18)
        {
          *((double *)this + 24) = 1.0 / (double)v16;
          *((double *)this + 25) = (double)v18;
        }
      }
    }
    CFRelease(v10);
  }
  if (a3 > a4)
  {
    *((_QWORD *)this + 29) = 0x3FF0000000000000;
    *((_QWORD *)this + 24) = 0x3FF0000000000000;
  }
}

void CA::WindowServer::AppleExternalDisplay::~AppleExternalDisplay(CA::WindowServer::AppleExternalDisplay *this)
{
  malloc_zone_t *malloc_zone;

  CA::WindowServer::IOMFBDisplay::~IOMFBDisplay(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::WindowServer::AppleExternalDisplay::detachable_layer_impl(_DWORD *a1, int *a2, double *a3, uint64_t a4, float64x2_t *a5, float64x2_t *a6, int *a7)
{
  __IOSurface *v14;
  __IOSurface *v15;
  signed int PixelFormat;
  int v17;
  uint64_t result;
  BOOL v19;
  int v20;
  unsigned __int16 v21;
  BOOL v22;
  int v23;
  int v26;
  BOOL v27;
  float64_t v28;
  float64_t v29;

  if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 1536))(a1) & 1) == 0)
    return CA::WindowServer::AppleDisplay::detachable_layer_impl((uint64_t)a1, a2, a3, a4, a5, a6, a7);
  if ((a1[156] & 4) != 0)
    return 24;
  v14 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 160))(a4);
  if (!v14)
    return 0;
  v15 = v14;
  PixelFormat = IOSurfaceGetPixelFormat(v14);
  v17 = 0;
  result = 25;
  if (PixelFormat <= 1885745711)
  {
    if (PixelFormat <= 1111970368)
    {
      if (PixelFormat > 875704933)
      {
        v19 = PixelFormat == 875704934;
        v21 = 12918;
      }
      else
      {
        v19 = PixelFormat == 875704422;
        v21 = 12406;
      }
      v20 = v21 | 0x34320000;
      goto LABEL_32;
    }
    if (PixelFormat > 1882468911)
    {
      v19 = PixelFormat == 1882468912;
      v20 = 1882468914;
      goto LABEL_32;
    }
    v22 = PixelFormat == 1111970369;
    v23 = 1647534392;
  }
  else
  {
    if (PixelFormat > 1999908960)
    {
      if (PixelFormat <= 2016686641)
      {
        if (PixelFormat == 1999908961)
        {
LABEL_38:
          *a7 = v17;
          v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 40))(a4);
          v27 = PixelFormat == 1919365992 || v26 == 16;
          if (!v27
            && (*a7 == 2
             && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4) != 1
             && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4) != 6
             || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 56))(a4) != 1
             && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 56))(a4) != 2
             && !BYTE13(xmmword_1ECDC6AB0)))
          {
            return 13;
          }
          if (a6
            && (a6[1].f64[0] + a6->f64[0] > (double)(a1[160] & 0x3FFF)
             || a6[1].f64[1] + a6->f64[1] > (double)((a1[160] >> 14) & 0x3FFF)))
          {
            return 26;
          }
          if (a5)
          {
            v28 = a5[1].f64[0] + a5->f64[0];
            if (v28 > (double)IOSurfaceGetWidth(v15))
              return 27;
            v29 = a5[1].f64[1] + a5->f64[1];
            if (v29 > (double)IOSurfaceGetHeight(v15))
              return 27;
          }
          return 0;
        }
        if (PixelFormat != 2016686640)
          return result;
LABEL_37:
        v17 = 2;
        goto LABEL_38;
      }
      v19 = PixelFormat == 2016686642 || PixelFormat == 2019963442;
      v20 = 2019963440;
LABEL_32:
      if (!v19 && PixelFormat != v20)
        return result;
      goto LABEL_37;
    }
    if (PixelFormat <= 1919365991)
    {
      v19 = PixelFormat == 1885745712;
      v20 = 1885745714;
      goto LABEL_32;
    }
    v22 = PixelFormat == 1919365992;
    v23 = 1999843442;
  }
  if (v22 || PixelFormat == v23)
    goto LABEL_38;
  return result;
}

void CA::WindowServer::AppleWirelessDisplay::~AppleWirelessDisplay(CA::WindowServer::AppleWirelessDisplay *this)
{
  malloc_zone_t *malloc_zone;

  CA::WindowServer::IOMFBDisplay::~IOMFBDisplay(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

BOOL CA::WindowServer::AppleWirelessDisplay::supports_pq(CA::WindowServer::AppleWirelessDisplay *this)
{
  return ((*((_QWORD *)this + 80) >> 55) & 0x1E) - 16 < 0xA;
}

uint64_t CA::WindowServer::AppleWirelessDisplay::supports_hlg(CA::WindowServer::AppleWirelessDisplay *this)
{
  return 0;
}

uint64_t CA::WindowServer::AppleWirelessDisplay::needs_display_roi_shape_tracking(CA::WindowServer::AppleWirelessDisplay *this)
{
  return 1;
}

uint64_t CA::WindowServer::AppleWirelessDisplay::supports_detach_flags_p(CA::WindowServer::AppleWirelessDisplay *this, unsigned int a2)
{
  return (a2 >> 8) & 1;
}

uint64_t CA::WindowServer::AppleWirelessDisplay::allows_wireless_color_filtering(CA::WindowServer::AppleWirelessDisplay *this)
{
  return *((unsigned __int8 *)this + 28432);
}

uint64_t CA::WindowServer::AppleWirelessDisplay::set_allows_wireless_color_filtering(uint64_t this, char a2)
{
  *(_BYTE *)(this + 28432) = a2;
  return this;
}

CA::WindowServer::AccelServer *CA::WindowServer::AppleWirelessDisplay::new_server(CA::WindowServer::AppleWirelessDisplay *this)
{
  __CFString *MutableCopy;
  const __CFString *v3;
  uint64_t v4;
  malloc_zone_t *malloc_zone;
  CA::WindowServer::AccelServer *v6;
  CA::WindowServer::AccelServer *v7;

  MutableCopy = CFStringCreateMutableCopy(0, 0, CFSTR("Wireless"));
  v3 = MutableCopy;
  if (CA::WindowServer::AppleWirelessDisplay::new_server(void)::count)
  {
    CFStringAppendFormat(MutableCopy, 0, CFSTR("-%zu"), CA::WindowServer::AppleWirelessDisplay::new_server(void)::count);
    v4 = CA::WindowServer::AppleWirelessDisplay::new_server(void)::count + 1;
  }
  else
  {
    v4 = 1;
  }
  CA::WindowServer::AppleWirelessDisplay::new_server(void)::count = v4;
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v6 = (CA::WindowServer::AccelServer *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x408uLL, 0x743898A5uLL);
  v7 = v6;
  if (v6)
    CA::WindowServer::AccelServer::AccelServer(v6, this, v3);
  CFRelease(v3);
  return v7;
}

uint64_t CA::WindowServer::AppleWirelessDisplay::supports_multiple_layers(CA::WindowServer::AppleWirelessDisplay *this)
{
  return 0;
}

uint64_t CA::WindowServer::AppleWirelessDisplay::detachable_layer_impl(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  *a7 = 2;
  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 568))(a1, *a2))
    return 0;
  else
    return 2;
}

BOOL CA::WindowServer::AppleWirelessDisplay::scale_cloned_layer_p(uint64_t a1, int a2, double *a3)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v8;

  v3 = a1 + 28312;
  if (a2 != 2)
    v3 = a1 + 28352;
  v4 = *a3;
  if (*a3 < 1.0)
    return 1;
  v5 = a3[1];
  if (v5 < 1.0)
    return 1;
  v6 = *(double *)(v3 + 24);
  if (v4 < v6 || v5 < v6)
    return 1;
  v8 = *(double *)(v3 + 32);
  return v4 > v8 || v5 > v8;
}

void CA::WindowServer::AppleInternalDisplay::~AppleInternalDisplay(CA::WindowServer::AppleInternalDisplay *this)
{
  malloc_zone_t *malloc_zone;

  CA::WindowServer::IOMFBDisplay::~IOMFBDisplay(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

float CA::WindowServer::AppleInternalDisplay::ffr_factor(CA::WindowServer::AppleInternalDisplay *this)
{
  return *((float *)this + 7102);
}

uint64_t CA::WindowServer::AppleInternalDisplay::overdrive_lut_type(CA::WindowServer::AppleInternalDisplay *this)
{
  return *((unsigned int *)this + 7103);
}

_QWORD *CA::WindowServer::AppleInternalDisplay::open(CA::WindowServer::AppleInternalDisplay *this)
{
  if (CA::WindowServer::display_count_of_type(0) < (unint64_t)this)
    __assert_rtn("open", "windowserver-apple-display.cpp", 2639, "index <= count ()");
  return CA::WindowServer::create_display_of_type(0, (uint64_t)this, (uint64_t)&__block_literal_global);
}

uint64_t CA::WindowServer::display_count_of_type(int a1)
{
  const __CFArray *DisplayList;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  uint64_t v6;
  CFIndex i;

  DisplayList = (const __CFArray *)IOMobileFramebufferCreateDisplayList();
  if (!DisplayList)
    return 0;
  v3 = DisplayList;
  Count = CFArrayGetCount(DisplayList);
  if (Count)
  {
    v5 = Count;
    v6 = 0;
    for (i = 0; i != v5; ++i)
    {
      if (*((_DWORD *)CFArrayGetValueAtIndex(v3, i) + 2) == a1)
        ++v6;
    }
  }
  else
  {
    v6 = 0;
  }
  CFRelease(v3);
  return v6;
}

_QWORD *CA::WindowServer::create_display_of_type(int a1, uint64_t a2, uint64_t a3)
{
  const __CFArray *DisplayList;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  _DWORD *ValueAtIndex;
  _DWORD *v11;
  int v12;
  const char *CString;
  size_t v14;
  int v15;
  const char *v16;
  const char *v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _OWORD v23[16];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  DisplayList = (const __CFArray *)IOMobileFramebufferCreateDisplayList();
  if (!DisplayList)
    return 0;
  v6 = DisplayList;
  Count = CFArrayGetCount(DisplayList);
  if (Count)
  {
    v8 = Count;
    v9 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v6, v9);
      v11 = ValueAtIndex;
      v12 = ValueAtIndex[2];
      if ((v12 - 1) > 1)
        goto LABEL_15;
      memset(v23, 0, sizeof(v23));
      CString = CA_CFStringGetCString(*(const __CFString **)ValueAtIndex, (char *)v23, 256);
      v14 = strlen(CString);
      v15 = v11[2];
      v16 = "wireless";
      if (v15 != 2)
        v16 = 0;
      v17 = v15 == 1 ? "external" : v16;
      v18 = strlen(v17);
      if (v14 >= v18 && !strncmp(v17, CString, v18) && (!v14 || CString[v14 - 1] - 48 == a2))
        break;
LABEL_20:
      if (v8 == ++v9)
        goto LABEL_21;
    }
    v12 = v11[2];
LABEL_15:
    if (v12 == a1)
    {
      if (*(_QWORD *)v11)
      {
        v19 = (_QWORD *)(*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
        if (v19)
        {
          v20 = v19;
          if (v19[3192])
            goto LABEL_22;
          (*(void (**)(_QWORD *))(*v19 + 8))(v19);
        }
      }
    }
    goto LABEL_20;
  }
LABEL_21:
  v20 = 0;
LABEL_22:
  CFRelease(v6);
  return v20;
}

uint64_t CA::WindowServer::AppleInternalDisplay::count(CA::WindowServer::AppleInternalDisplay *this)
{
  return CA::WindowServer::display_count_of_type(0);
}

_QWORD *CA::WindowServer::AppleExternalDisplay::open(CA::WindowServer::AppleExternalDisplay *this)
{
  if (CA::WindowServer::display_count_of_type(1) < (unint64_t)this)
    __assert_rtn("open", "windowserver-apple-display.cpp", 2804, "index <= count ()");
  return CA::WindowServer::create_display_of_type(1, (uint64_t)this, (uint64_t)&__block_literal_global_110);
}

_QWORD *CA::WindowServer::AppleExternalDisplay::AppleExternalDisplay(_QWORD *a1)
{
  CA::WindowServer::Display *v2;

  v2 = CA::WindowServer::IOMFBDisplay::IOMFBDisplay((uint64_t)a1);
  *(_QWORD *)v2 = off_1E158C618;
  CA::WindowServer::AppleDisplay::update_display_limits(v2);
  *a1 = off_1E158E608;
  CA::WindowServer::IOMFBDisplay::set_signal_type((uint64_t)a1, 2);
  return a1;
}

uint64_t CA::WindowServer::AppleExternalDisplay::count(CA::WindowServer::AppleExternalDisplay *this)
{
  return CA::WindowServer::display_count_of_type(1);
}

_QWORD *CA::WindowServer::AppleWirelessDisplay::open(CA::WindowServer::AppleWirelessDisplay *this)
{
  if (CA::WindowServer::display_count_of_type(2) < (unint64_t)this)
    __assert_rtn("open", "windowserver-apple-display.cpp", 2933, "index <= count ()");
  if (CA::WindowServer::AppleWirelessDisplay::open(unsigned long)::once[0] != -1)
    dispatch_once(CA::WindowServer::AppleWirelessDisplay::open(unsigned long)::once, &__block_literal_global_113);
  return CA::WindowServer::create_display_of_type(2, (uint64_t)this, (uint64_t)&__block_literal_global_117);
}

uint64_t CA::WindowServer::AppleWirelessDisplay::count(CA::WindowServer::AppleWirelessDisplay *this)
{
  return CA::WindowServer::display_count_of_type(2);
}

uint64_t CAML::Type::property_type(CAML::Type *this, CAML::Context *a2, const void *a3)
{
  return 0;
}

uint64_t CAML::ObjCType::set_property(CAML::ObjCType *this, CAML::Context *a2, void *a3, unsigned int a4, const void *a5)
{
  return objc_msgSend(a3, "setValue:forKey:", a5, CAAtomGetString(a4));
}

void CAML::ObjCScript::~ObjCScript(CAML::ObjCScript *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CAML::ObjCScript::end(CAML::ObjCScript *this, CAML::Context *a2, CAML::State *a3, char *a4, uint64_t a5)
{
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytes:length:encoding:", a4, a5, 4);
  if ((*((_BYTE *)a2 + 112) & 0x20) != 0)
  {
    v10 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 56) + 52);
    v11 = *((_QWORD *)a2 + 3);
    v12 = (void *)MEMORY[0x186DBE2E4]();
    v9 = (const void *)objc_msgSend(*((id *)a2 + 12), "CAMLParser:evaluateScriptValue:sourceURL:lineNumber:", *((_QWORD *)a2 + 10), v8, v11, v10);
    objc_autoreleasePoolPop(v12);
  }
  else
  {
    CAML::Context::error(a2, "Delegate does not support script values.");
    v9 = 0;
  }

  CAML::State::set_value(a3, v9);
  if (v9)
    CFRelease(v9);
  else
}

void sub_1845BC568(_Unwind_Exception *a1)
{
  void *v1;

  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

void CAML::ObjCNull::~ObjCNull(CAML::ObjCNull *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CAML::ObjCNull::end(CAML::ObjCNull *this, CAML::Context *a2, CAML::State *a3, CAML::Context *a4, uint64_t a5)
{
  const char *v8;

  CAML::State::set_value(a3, (CFTypeRef)*MEMORY[0x1E0C9B0D0]);
  return CAML::check_trailer((uint64_t)a2, a4, (CAML::Context *)((char *)a4 + a5), v8);
}

void CAML::ObjCBool::~ObjCBool(CAML::ObjCBool *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CAML::ObjCInteger::~ObjCInteger(CAML::ObjCInteger *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CAML::ObjCInteger::is_numeric(CAML::ObjCInteger *this)
{
  return 1;
}

void CAML::ObjCReal::~ObjCReal(CAML::ObjCReal *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CAML::ObjCReal::is_numeric(CAML::ObjCReal *this)
{
  return 1;
}

void CAML::ObjCNSArray::~ObjCNSArray(CAML::ObjCNSArray *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CAML::ObjCNSSet::~ObjCNSSet(CAML::ObjCNSSet *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CAML::ObjCNSSet::start(CAML::ObjCNSSet *this, CAML::Context *a2, CAML::State *a3, const char **a4)
{
  CFMutableSetRef Mutable;

  Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9B3B0]);
  CAML::State::set_value(a3, Mutable);
  CFRelease(Mutable);
  *((_DWORD *)a3 + 4) = 4;
}

void CAML::ObjCNSDictionary::~ObjCNSDictionary(CAML::ObjCNSDictionary *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CAML::ObjCNSDictionary::start(CAML::ObjCNSDictionary *this, CAML::Context *a2, CAML::State *a3, const char **a4)
{
  CFMutableDictionaryRef Mutable;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CAML::State::set_value(a3, Mutable);
  CFRelease(Mutable);
  *((_DWORD *)a3 + 4) = 2;
}

void CAML::ObjCString::~ObjCString(CAML::ObjCString *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CAML::ObjCNSURL::~ObjCNSURL(CAML::ObjCNSURL *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CAML::ObjCNSURL::end(CAML::ObjCNSURL *this, CFURLRef *a2, CAML::State *a3, UInt8 *URLBytes, CFIndex length)
{
  CFURLRef v6;

  v6 = CFURLCreateWithBytes(0, URLBytes, length, 0x8000100u, a2[2]);
  CAML::State::set_value(a3, v6);
  if (v6)
    CFRelease(v6);
}

void CAML::ObjCNSData::~ObjCNSData(CAML::ObjCNSData *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CAML::ObjCNSData::end(CAML::ObjCNSData *this, CAML::Context *a2, CAML::State *a3, char *a4, uint64_t a5)
{
  uint64_t v6;
  id v7;

  v6 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", a4, a5, 0);
  v7 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBase64EncodedData:options:", v6, 0);
  CAML::State::set_value(a3, v7);

}

void CAML::ObjCCGPoint::~ObjCCGPoint(CAML::ObjCCGPoint *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CAML::ObjCCGSize::~ObjCCGSize(CAML::ObjCCGSize *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CAML::ObjCCGSize::end(CAML::ObjCCGSize *this, CAML::Context *a2, CAML::State *a3, CAML *a4, uint64_t a5)
{
  char **v7;
  double v8;
  const char *v9;
  double v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  CAML::Context *v14[2];

  v14[1] = *(CAML::Context **)MEMORY[0x1E0C80C00];
  v7 = (char **)((char *)a4 + a5);
  v14[0] = a4;
  v8 = CAML::parse_length(a4, (char *)v14, (char **)((char *)a4 + a5), (const char *)a4);
  v10 = CAML::parse_length(v14[0], (char *)v14, v7, v9);
  v12 = CAML::check_trailer((uint64_t)a2, v14[0], (CAML::Context *)v7, v11);
  v13 = (void *)MEMORY[0x186DBE2E4](v12);
  CAML::State::set_value(a3, (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSize:", v8, v10));
  objc_autoreleasePoolPop(v13);
}

void sub_1845BCD94(_Unwind_Exception *a1)
{
  void *v1;

  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

void CAML::ObjCCGRect::~ObjCCGRect(CAML::ObjCCGRect *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CAML::ObjCCGAffineTransform::~ObjCCGAffineTransform(CAML::ObjCCGAffineTransform *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CAML::ObjCCGAffineTransform::end(CAML::ObjCCGAffineTransform *this, CGAffineTransform *a2, CAML::State *a3, CAML::Context *a4, const char *a5)
{
  id v6;
  _OWORD v7[3];
  char v8[16];
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  *(_OWORD *)v8 = 0u;
  CAML::parse_affine_matrix(a2, a4, v8, (CAML *)&a5[(_QWORD)a4], a5);
  v6 = objc_alloc_init(MEMORY[0x1E0CB3478]);
  v7[0] = *(_OWORD *)v8;
  v7[1] = v9;
  v7[2] = v10;
  objc_msgSend(v6, "setTransformStruct:", v7);
  CAML::State::set_value(a3, v6);

}

void CAML::ObjCCATransform3D::~ObjCCATransform3D(CAML::ObjCCATransform3D *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CAML::ObjCCAPoint3D::~ObjCCAPoint3D(CAML::ObjCCAPoint3D *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CAML::ObjCCAPoint3D::end(CAML::ObjCCAPoint3D *this, CAML::Context *a2, CAML::State *a3, CAML *a4, uint64_t a5)
{
  char **v6;
  double v7;
  const char *v8;
  double v9;
  const char *v10;
  double v11;
  void *v12;
  CAML *v13[2];

  v13[1] = *(CAML **)MEMORY[0x1E0C80C00];
  v6 = (char **)((char *)a4 + a5);
  v13[0] = a4;
  v7 = CAML::parse_length(a4, (char *)v13, (char **)((char *)a4 + a5), (const char *)a4);
  v9 = CAML::parse_length(v13[0], (char *)v13, v6, v8);
  v11 = CAML::parse_length(v13[0], (char *)v13, v6, v10);
  v12 = (void *)MEMORY[0x186DBE2E4]();
  CAML::State::set_value(a3, (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCAPoint3D:", v7, v9, v11));
  objc_autoreleasePoolPop(v12);
}

void sub_1845BD104(_Unwind_Exception *a1)
{
  void *v1;

  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

void CAML::ObjCCACornerRadii::~ObjCCACornerRadii(CAML::ObjCCACornerRadii *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CAML::ObjCCACornerRadii::end(CAML::ObjCCACornerRadii *this, CAML::Context *a2, CAML::State *a3, char *a4, uint64_t a5)
{
  uint64_t v6;
  char **v7;
  void *v8;
  _OWORD v9[4];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14[8];
  uint64_t v15;

  v6 = 0;
  v15 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v7 = (char **)&a4[a5];
  *(_QWORD *)v14 = a4;
  do
  {
    *(double *)((char *)&v10 + v6) = CAML::parse_length(*(CAML **)v14, v14, v7, a4);
    v6 += 8;
  }
  while (v6 != 64);
  v8 = (void *)MEMORY[0x186DBE2E4]();
  v9[0] = v10;
  v9[1] = v11;
  v9[2] = v12;
  v9[3] = v13;
  CAML::State::set_value(a3, (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCACornerRadii:", v9));
  objc_autoreleasePoolPop(v8);
}

void sub_1845BD264(_Unwind_Exception *a1)
{
  void *v1;

  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

void CAML::ObjCCAColorMatrix::~ObjCCAColorMatrix(CAML::ObjCCAColorMatrix *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CAML::ObjCCAColorMatrix::end(CAML::ObjCCAColorMatrix *this, CAML::Context *a2, CAML::State *a3, CAML *a4, uint64_t a5)
{
  CAML *v8;
  CAML *v9;
  size_t v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  const char *v14;
  CAML *v15;
  const char *v16;
  const char *v17;
  float32x2_t v18;
  unint64_t v19;
  int v20;
  float v22;
  const char *v23;
  int v24;
  int v25;
  BOOL v27;
  BOOL v28;
  __float2 v29;
  float32x2_t v30;
  float32x2_t v31;
  float v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  unsigned __int32 v36;
  float v37;
  unsigned int v38;
  float32x2_t v39;
  uint64_t v40;
  float32x2_t v41;
  void *v42;
  _OWORD v43[10];
  CAML *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t __dst;
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)((char *)&v43[9] + 4) = 0x3F80000000000000;
  LODWORD(v43[6]) = 1065353216;
  *((_QWORD *)&v43[7] + 1) = 1065353216;
  v8 = (CAML *)((char *)a4 + a5);
  *(_OWORD *)((char *)&v43[8] + 4) = 0uLL;
  LODWORD(v43[8]) = 1065353216;
  HIDWORD(v43[9]) = 0;
  v43[5] = 0uLL;
  memset((char *)&v43[6] + 4, 0, 20);
  v9 = CAML::skip_whitespace(a4, (CAML *)((char *)a4 + a5), (const char *)a3);
  v10 = 0;
  v11 = MEMORY[0x1E0C80978];
  v12 = 1;
  while (1)
  {
    if (v9 >= v8)
      goto LABEL_8;
    v13 = *((char *)v9 + v10);
    if (!*((_BYTE *)v9 + v10))
      goto LABEL_10;
    if ((v13 & 0x80000000) != 0)
      break;
    if ((*(_DWORD *)(v11 + 4 * v13 + 60) & 0x100) == 0)
      goto LABEL_10;
LABEL_8:
    if (++v10 == 31)
      goto LABEL_13;
  }
  if (__maskrune(v13, 0x100uLL))
    goto LABEL_8;
LABEL_10:
  if (v10 <= 0x1F)
    v12 = 32 - v10;
  else
    v12 = 0;
LABEL_13:
  bzero((char *)&__dst + v10, v12);
  memcpy(&__dst, v9, v10);
  *((_BYTE *)&__dst + v10) = 0;
  v15 = CAML::skip_whitespace((CAML *)((char *)v9 + v10), v8, v14);
  v44 = v15;
  if (v15 < v8 && *(_BYTE *)v15 == 40)
  {
    v15 = CAML::skip_whitespace((CAML *)((char *)v15 + 1), v8, v16);
    v44 = v15;
  }
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v45 = 0u;
  if (v15 >= v8)
  {
    v19 = 0;
  }
  else
  {
    v19 = 0;
    do
    {
      v20 = *(unsigned __int8 *)v15;
      if (!*(_BYTE *)v15)
        break;
      if (v20 == 41 || v19 > 0x13)
      {
        if (v20 == 41)
        {
          v15 = CAML::skip_whitespace((CAML *)((char *)v15 + 1), v8, v16);
          v44 = v15;
        }
        break;
      }
      v22 = CAML::parse_real(v15, (char *)&v44, (char **)v8, v17);
      *((float *)&v45 + v19) = v22;
      v15 = CAML::skip_whitespace(v44, v8, v23);
      v44 = v15;
      if (v15 < v8)
      {
        v24 = *(unsigned __int8 *)v15;
        if (v24 == 59 || v24 == 44)
        {
          v15 = CAML::skip_whitespace((CAML *)((char *)v15 + 1), v8, v16);
          v44 = v15;
        }
      }
      ++v19;
    }
    while (v15 < v8);
  }
  if (v15 < v8)
  {
    v25 = *(unsigned __int8 *)v15;
    if (v25 == 59 || v25 == 44)
    {
      v15 = CAML::skip_whitespace((CAML *)((char *)v15 + 1), v8, v16);
      v44 = v15;
    }
  }
  if ((_DWORD)__dst == 1920229741 && *(_DWORD *)((char *)&__dst + 3) == 7891314)
  {
    if (v19 == 20)
    {
      v43[8] = v45;
      v43[9] = v46;
      v43[5] = v47;
      v43[6] = v48;
      v43[7] = v49;
      goto LABEL_58;
    }
LABEL_57:
    v15 = (CAML *)CAML::Context::error(a2, "Invalid color matrix: %s (position %ld)", (const char *)a4, v15 - a4);
    goto LABEL_58;
  }
  if (__dst ^ 0x6574617275746173 | v51)
    v27 = 0;
  else
    v27 = v19 == 1;
  if (v27)
  {
    v37 = fmaxf(*(float *)&v45, 0.0);
    *((_QWORD *)&v43[7] + 1) = 1065353216;
    *(_QWORD *)((char *)&v43[8] + 12) = 0;
    *(_QWORD *)&v43[5] = 0;
    memset((char *)&v43[6] + 4, 0, 20);
    v18.i32[0] = 1046066128;
    *(float *)&v38 = (float)(v37 * 0.7873) + 0.2126;
    v39 = vmul_n_f32((float32x2_t)0x3E91D14E3E59B3D0, v37);
    LODWORD(v40) = vsub_f32(v18, v39).u32[0];
    DWORD2(v43[5]) = v40;
    HIDWORD(v40) = vadd_f32(v39, (float32x2_t)vdup_n_s32(0x3F371759u)).i32[1];
    *(_QWORD *)((char *)&v43[9] + 4) = v40;
    *((float *)&v43[9] + 3) = 0.0722 - (float)(v37 * 0.0722);
    v41 = vmul_n_f32((float32x2_t)0x3F6D844D3F371759, v37);
    LODWORD(v40) = vsub_f32((float32x2_t)0x3F6D844D3F371759, v41).u32[0];
    *(_QWORD *)&v43[8] = __PAIR64__(v40, v38);
    DWORD2(v43[8]) = HIDWORD(v43[9]);
    HIDWORD(v40) = vadd_f32(v41, (float32x2_t)vdup_n_s32(0x3D93DD98u)).i32[1];
    *(_QWORD *)((char *)&v43[5] + 12) = v40;
    goto LABEL_58;
  }
  v28 = __dst == 0x7461746F52657568 && (unsigned __int16)v51 == 101;
  if (!v28 || v19 != 1)
  {
    if (!(__dst ^ 0x636E616E696D756CLL | v51 ^ 0x6168706C416F5465 | v52) && !v19)
    {
      HIDWORD(v43[7]) = 0;
      memset(&v43[8], 0, 32);
      memset(&v43[5], 0, 28);
      *(_OWORD *)((char *)&v43[6] + 12) = xmmword_18474DF60;
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  *((_QWORD *)&v43[7] + 1) = 1065353216;
  *(_QWORD *)((char *)&v43[8] + 12) = 0;
  *(_QWORD *)&v43[5] = 0;
  memset((char *)&v43[6] + 4, 0, 20);
  v29 = __sincosf_stret(*(float *)&v45);
  v30.i32[0] = 1046066128;
  v31 = vmul_n_f32((float32x2_t)0x3E91D14E3E59B3D0, v29.__cosval);
  v30.f32[0] = vsub_f32(v30, v31).f32[0];
  v32 = 0.0722 - (float)(v29.__cosval * 0.0722);
  v30.i32[1] = vadd_f32(v31, (float32x2_t)vdup_n_s32(0x3F371759u)).i32[1];
  *(float32x2_t *)((char *)&v43[9] + 4) = vmla_n_f32(v30, (float32x2_t)0x3E0F5C293E126E98, v29.__sinval);
  *((float *)&v43[9] + 3) = v32 + (float)(v29.__sinval * -0.283);
  *((float *)&v43[5] + 2) = v30.f32[0] - (float)(v29.__sinval * 0.7873);
  v33 = vmul_n_f32((float32x2_t)0x3F6D844D3F371759, v29.__cosval);
  v34 = vsub_f32((float32x2_t)0x3F6D844D3F371759, v33);
  v35 = vmul_n_f32((float32x2_t)0x3D93DD983F371759, v29.__sinval);
  v36 = vsub_f32(v34, v35).u32[0];
  v34.i32[1] = vadd_f32(v33, (float32x2_t)vdup_n_s32(0x3D93DD98u)).i32[1];
  *(_QWORD *)&v43[8] = __PAIR64__(v36, (float)((float)(v29.__cosval * 0.7873) + 0.2126) + (float)(v29.__sinval * -0.2126));
  *((float *)&v43[8] + 2) = v32 + (float)(v29.__sinval * 0.9278);
  *(float32x2_t *)((char *)&v43[5] + 12) = vadd_f32(v34, v35);
LABEL_58:
  v42 = (void *)MEMORY[0x186DBE2E4](v15);
  v43[0] = v43[8];
  v43[1] = v43[9];
  v43[2] = v43[5];
  v43[3] = v43[6];
  v43[4] = v43[7];
  CAML::State::set_value(a3, (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCAColorMatrix:", v43));
  objc_autoreleasePoolPop(v42);
}

void sub_1845BD874(_Unwind_Exception *a1)
{
  void *v1;

  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

void CAML::ObjCCGColor::~ObjCCGColor(CAML::ObjCCGColor *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CAML::ObjCCGImage::~ObjCCGImage(CAML::ObjCCGImage *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CAML::ObjCCGImage::start(CAML::ObjCCGImage *this, CFURLRef *a2, CAML::State *a3, const char **a4)
{
  const char *v7;
  const __CFURL *v8;
  const void *v9;
  const void *v10;
  CFTypeID v11;
  const char *v12;
  _BOOL8 v13;
  CGImage *image_from_url;
  const char *v15;
  CGImageRef v16;
  CFURLRef v17;
  CGImage *v18;
  CFTypeID v19;

  v7 = CAML::Context::parse_src_attribute(a2, a4);
  if (v7)
  {
    v8 = (const __CFURL *)v7;
    v9 = (const void *)(*((uint64_t (**)(CFURLRef *, const char *))*a2 + 9))(a2, v7);
    if (v9 && (v10 = v9, v11 = CFGetTypeID(v9), v11 == CGImageGetTypeID()))
    {
      CAML::State::set_value(a3, v10);
    }
    else
    {
      v12 = CAML::memq_((const char *)a4, (const char **)"loadAsHDR", (const char *)1);
      if (v12)
        v13 = *(unsigned __int8 *)v12 == 49;
      else
        v13 = 0;
      image_from_url = CAML::create_image_from_url(v8, (const __CFURL *)v13);
      v15 = CAML::memq_((const char *)a4, (const char **)"A8asL8", (const char *)1);
      if (v15 && *v15 == 49)
      {
        v16 = CA_copyL8CGImageAsA8(image_from_url);
        CGImageRelease(image_from_url);
        image_from_url = v16;
      }
      v17 = *a2;
      if (image_from_url)
      {
        (*((void (**)(CFURLRef *, const __CFURL *, CGImage *))v17 + 10))(a2, v8, image_from_url);
      }
      else
      {
        v18 = (CGImage *)(*((uint64_t (**)(CFURLRef *, const __CFURL *))v17 + 11))(a2, v8);
        if (!v18 || (image_from_url = v18, v19 = CFGetTypeID(v18), v19 != CGImageGetTypeID()))
        {
          CAML::Context::error((CAML::Context *)a2, "Failed to load image");
          goto LABEL_18;
        }
      }
      CAML::State::set_value(a3, image_from_url);
      CGImageRelease(image_from_url);
    }
LABEL_18:
    CFRelease(v8);
  }
}

void CAML::ObjCCGPath::~ObjCCGPath(CAML::ObjCCGPath *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CAML::ObjCCGPDFDocument::~ObjCCGPDFDocument(CAML::ObjCCGPDFDocument *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CAML::ObjCCGPDFDocument::start(CAML::ObjCCGPDFDocument *this, CFURLRef *a2, CAML::State *a3, const char **a4)
{
  const char *v6;
  const __CFURL *v7;
  const void *v8;
  const void *v9;
  CFTypeID v10;
  CGPDFDocumentRef v11;
  CFURLRef v12;
  CGPDFDocumentRef v13;
  CGPDFDocument *v14;
  CFTypeID v15;

  v6 = CAML::Context::parse_src_attribute(a2, a4);
  if (!v6)
  {
    CAML::Context::error((CAML::Context *)a2, "pdfDocument element must specify src attribute");
    return;
  }
  v7 = (const __CFURL *)v6;
  v8 = (const void *)(*((uint64_t (**)(CFURLRef *, const char *))*a2 + 9))(a2, v6);
  if (v8 && (v9 = v8, v10 = CFGetTypeID(v8), v10 == CGPDFDocumentGetTypeID()))
  {
    CAML::State::set_value(a3, v9);
  }
  else
  {
    v11 = CGPDFDocumentCreateWithURL(v7);
    v12 = *a2;
    if (v11)
    {
      v13 = v11;
      (*((void (**)(CFURLRef *, const __CFURL *, CGPDFDocumentRef))v12 + 10))(a2, v7, v11);
    }
    else
    {
      v14 = (CGPDFDocument *)(*((uint64_t (**)(CFURLRef *, const __CFURL *))v12 + 11))(a2, v7);
      if (!v14 || (v13 = v14, v15 = CFGetTypeID(v14), v15 != CGPDFDocumentGetTypeID()))
      {
        CAML::Context::error((CAML::Context *)a2, "Unable to open pdf document");
        goto LABEL_12;
      }
    }
    CAML::State::set_value(a3, v13);
    CGPDFDocumentRelease(v13);
  }
LABEL_12:
  CFRelease(v7);
}

void CAML::ObjCCGFont::~ObjCCGFont(CAML::ObjCCGFont *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E159A090;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E159A090;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CAML::ObjCCGFont::end(CAML::ObjCCGFont *this, CAML::Context *a2, CAML::State *a3, char *a4)
{
  CGFont *v7;
  CGFont *v8;

  v7 = (CGFont *)CGFontCreateWithName();
  if (v7)
  {
    v8 = v7;
    CAML::State::set_value(a3, v7);
    CGFontRelease(v8);
  }
  else
  {
    CAML::Context::warning(a2, "cannot create font from name: %s", a4);
  }
}

BOOL CA::CG::DeviceColor::Pattern::operator==(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  _BOOL8 result;
  CGAffineTransform v7;
  CGAffineTransform t1;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a1 != *(_QWORD *)a2 || *(_QWORD *)(a1 + 72) != *(_QWORD *)(a2 + 72))
    return 0;
  v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&t1.a = *(_OWORD *)(a1 + 8);
  *(_OWORD *)&t1.c = v4;
  *(_OWORD *)&t1.tx = *(_OWORD *)(a1 + 40);
  v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)&v7.a = *(_OWORD *)(a2 + 8);
  *(_OWORD *)&v7.c = v5;
  *(_OWORD *)&v7.tx = *(_OWORD *)(a2 + 40);
  result = CGAffineTransformEqualToTransform(&t1, &v7);
  if (result)
  {
    result = 0;
    if (*(double *)(a1 + 56) == *(double *)(a2 + 56) && *(double *)(a1 + 64) == *(double *)(a2 + 64))
      return *(float *)(a1 + 80) == *(float *)(a2 + 80);
  }
  return result;
}

NSObject *CA::CG::Queue::wait_queue(CA::CG::Queue *this, unsigned int a2)
{
  NSObject *result;

  if (a2)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
    while (*((_DWORD *)this + 13) < a2)
      pthread_cond_wait((pthread_cond_t *)((char *)this + 120), (pthread_mutex_t *)((char *)this + 56));
    return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 56));
  }
  else
  {
    result = *((_QWORD *)this + 1);
    if (result)
      return dispatch_group_wait(result, 0xFFFFFFFFFFFFFFFFLL);
  }
  return result;
}

void CA::CG::Queue::finish_callback(CA::CG::Queue *this, void *a2)
{
  CA::CG::Queue *v2;

  v2 = (CA::CG::Queue *)(*(uint64_t (**)(CA::CG::Queue *, void *))(*(_QWORD *)this + 64))(this, a2);
  CA::CG::Queue::reclaim_slabs(v2);
}

void CA::CG::Queue::collect_callback(CA::CG::Queue *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CA::CG::Renderer *v6;

  v2 = 0;
  do
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
    v3 = CA::CG::AccelRenderer::_list;
    if (!CA::CG::AccelRenderer::_list)
    {
LABEL_13:
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
      break;
    }
    while (1)
    {
      if (v2 && v3 != v2)
        goto LABEL_7;
      if (!*(_BYTE *)(v3 + 4228))
        break;
      v2 = 0;
LABEL_7:
      v3 = *(_QWORD *)(v3 + 4272);
      if (!v3)
        goto LABEL_13;
    }
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 4224));
    v2 = *(_QWORD *)(v3 + 4272);
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
    if (*(_QWORD *)(v3 + 8))
    {
      CA::CG::Renderer::end_rendering((CA::CG::Renderer *)v3);
      v4 = *(_QWORD *)(v3 + 8);
      v5 = mach_absolute_time();
      *(double *)(v4 + 224) = CATimeWithHostTime(v5);
      CA::CG::Renderer::update_finished_seed(v3);
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 4224));
  }
  while (v2);
  CA::CG::Renderer::flush_released_objects(v6);
}

void CA::Render::Interpolator::show(CA::Render::Interpolator *this, int a2, uint64_t a3)
{
  _BOOL4 v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  CA::Render *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  uint32_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t v22[4];
  int v23;
  uint8_t buf[16];
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = x_log_hook_p();
  if ((a3 & 1) != 0)
  {
    if (v6)
    {
LABEL_18:
      x_log_();
      return;
    }
    v20 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v21 = *((_QWORD *)this + 6);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v21;
      v16 = "(interpolator %g)";
      v17 = buf;
      v18 = v20;
      v19 = 12;
      goto LABEL_21;
    }
  }
  else
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *((_QWORD *)this + 6);
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v8;
        _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_DEFAULT, "(interpolator (factor %g)", buf, 0xCu);
      }
    }
    v9 = 0;
    v10 = *((_OWORD *)this + 2);
    *(_OWORD *)buf = *((_OWORD *)this + 1);
    v25 = v10;
    v11 = (CA::Render *)(a2 + 1);
    do
    {
      v12 = *(_QWORD *)&buf[8 * v9];
      if (v12)
      {
        CA::Render::show_newline(v11);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v13 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v22 = 67109120;
            v23 = v9;
            _os_log_impl(&dword_184457000, v13, OS_LOG_TYPE_DEFAULT, "(o%d ", v22, 8u);
          }
        }
        (*(void (**)(uint64_t, CA::Render *, uint64_t))(*(_QWORD *)v12 + 40))(v12, v11, a3);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v14 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v22 = 0;
            _os_log_impl(&dword_184457000, v14, OS_LOG_TYPE_DEFAULT, ")", v22, 2u);
          }
        }
      }
      ++v9;
    }
    while (v9 != 4);
    if (x_log_hook_p())
      goto LABEL_18;
    v15 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v22 = 0;
      v16 = ")";
      v17 = v22;
      v18 = v15;
      v19 = 2;
LABEL_21:
      _os_log_impl(&dword_184457000, v18, OS_LOG_TYPE_DEFAULT, v16, v17, v19);
    }
  }
}

uint64_t CA::Render::Object::can_mix_with_object(CA::Render::Object *this, CA::Render::Object *a2)
{
  return 0;
}

void CA::Render::Object::mix(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t CA::Render::Object::mix(CA::Render::Object *this, CA::Render::Object *a2, CA::Render::Object *a3, CA::Render::Object *a4, const ValueInterpolator *a5)
{
  return (*(uint64_t (**)(CA::Render::Object *, CA::Render::Object *, const ValueInterpolator *))(*(_QWORD *)this + 56))(this, a3, a5);
}

double CA::Render::Object::distance_to(CA::Render::Object *this, const CA::Render::Object *a2)
{
  return 0.0;
}

double CA::Render::ValueInterpolator::set_hermite(CA::Render::ValueInterpolator *this, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double result;

  v10 = *(double *)this;
  v11 = v10 * v10 * v10;
  v12 = v10 * v10 * 3.0;
  v13 = *(double *)this - (v10 * v10 + v10 * v10) + v11;
  *((double *)this + 2) = 1.0 - v12 + v11 + v11;
  *((double *)this + 3) = v13;
  *((double *)this + 4) = v12 - (v11 + v11);
  *((double *)this + 5) = v11 - v10 * v10;
  v14 = v10 * v10 * 6.0;
  *((double *)this + 6) = v14 - v10 * 6.0;
  *((double *)this + 7) = v10 * -4.0 + 1.0 + v12;
  *((double *)this + 8) = v10 * 6.0 - v14;
  *((double *)this + 9) = v12 + v10 * -2.0;
  v15 = (1.0 - a5) * a3 / (a3 + a2);
  *((double *)this + 10) = v15 * ((a6 + 1.0) * (a7 + 1.0));
  *((double *)this + 11) = v15 * ((1.0 - a6) * (1.0 - a7));
  v16 = (1.0 - a8) * a3 / (a4 + a3);
  v17 = v16 * ((1.0 - a9) * (a10 + 1.0));
  result = v16 * ((a9 + 1.0) * (1.0 - a10));
  *((double *)this + 12) = v17;
  *((double *)this + 13) = result;
  *((_BYTE *)this + 112) = 1;
  return result;
}

uint64_t CA::IOSAManager::create_new_iosa_manager(CA::IOSAManager *this, __CFRunLoop *a2)
{
  uint64_t v3;
  uint64_t v4;
  __CFDictionary *Mutable;
  const __CFAllocator *v6;
  CFNumberRef v7;
  CFNumberRef v8;
  __CFRunLoopSource *RunLoopSource;
  int v11;
  int valuePtr;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = operator new();
  *(_DWORD *)(v3 + 24) = 0;
  if (!this)
  {
    x_log_crash("Invalid runloop");
LABEL_13:
    abort();
  }
  v4 = v3;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = 200000;
  valuePtr = 0;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  v8 = CFNumberCreate(v6, kCFNumberSInt32Type, &v11);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D3A298], v7);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D3A230], v8);
  if (IOSurfaceAcceleratorCreate() || !*(_QWORD *)(v4 + 16))
  {
    x_log_crash("Failed to create IOSurfaceAccelerator: 0x%x");
    goto LABEL_13;
  }
  *(_QWORD *)v4 = this;
  RunLoopSource = (__CFRunLoopSource *)IOSurfaceAcceleratorGetRunLoopSource();
  *(_QWORD *)(v4 + 8) = RunLoopSource;
  CFRunLoopAddSource(*(CFRunLoopRef *)v4, RunLoopSource, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
  *(_DWORD *)(v4 + 24) = 1;
  if (v8)
    CFRelease(v8);
  if (v7)
    CFRelease(v7);
  if (Mutable)
    CFRelease(Mutable);
  return v4;
}

uint64_t CA::IOSAManager::unref(uint64_t this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = this;
  v2 = (unsigned int *)(this + 24);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - 1, v2));
  if (this && v3 == 1)
  {
    if (*(_QWORD *)(this + 16))
    {
      CFRunLoopRemoveSource(*(CFRunLoopRef *)this, *(CFRunLoopSourceRef *)(this + 8), (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
      CFRelease(*(CFTypeRef *)(v1 + 16));
      *(_QWORD *)(v1 + 16) = 0;
    }
    JUMPOUT(0x186DBD990);
  }
  return this;
}

void CAFrameIntervalRangeLogInvalidRange(CAFrameIntervalRange a1, CAFrameRateRange a2)
{
  float preferred;
  float maximum;
  float minimum;
  unsigned int var1;
  unsigned int var0;
  unsigned int var2;
  NSObject *v8;
  uint8_t buf[4];
  unsigned int v10;
  __int16 v11;
  unsigned int v12;
  __int16 v13;
  unsigned int v14;
  __int16 v15;
  double v16;
  __int16 v17;
  double v18;
  __int16 v19;
  double v20;
  uint64_t v21;

  preferred = a2.preferred;
  maximum = a2.maximum;
  minimum = a2.minimum;
  v21 = *MEMORY[0x1E0C80C00];
  var1 = a1.var1;
  var0 = a1.var0;
  var2 = a1.var2;
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v8 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67110400;
      v10 = var0;
      v11 = 1024;
      v12 = var1;
      v13 = 1024;
      v14 = var2;
      v15 = 2048;
      v16 = minimum;
      v17 = 2048;
      v18 = maximum;
      v19 = 2048;
      v20 = preferred;
      _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_ERROR, "Invalid frame interval range %u %u %u from frame rate range %.2f %.2f %.2f", buf, 0x32u);
    }
  }
}

void sub_1845C0A28(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1845C0A88(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1845C0EB4(_Unwind_Exception *a1)
{
  mach_port_name_t v1;

  mach_port_deallocate(*MEMORY[0x1E0C83DA0], v1);
  _Unwind_Resume(a1);
}

void sub_1845C1138(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  mach_port_name_t v2;

  mach_port_deallocate(*MEMORY[0x1E0C83DA0], v2);
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1845C11C4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1845C123C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1845C1D28(_Unwind_Exception *a1)
{
  const void *v1;
  mach_port_name_t v2;

  if (v2)
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1845C1FC0(_Unwind_Exception *a1)
{
  mach_port_name_t v1;

  mach_port_deallocate(*MEMORY[0x1E0C83DA0], v1);
  _Unwind_Resume(a1);
}

void sub_1845C2214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void sub_1845C2430(_Unwind_Exception *a1)
{
  CA::WindowServer::Display::ModeSet *v1;
  uint64_t v2;

  CA::WindowServer::Display::ModeSet::~ModeSet(v1);
  CA::WindowServer::Display::ModeSet::~ModeSet((CA::WindowServer::Display::ModeSet *)(v2 - 192));
  _Unwind_Resume(a1);
}

void sub_1845C29BC(_Unwind_Exception *a1)
{
  mach_port_name_t v1;
  ipc_space_t *v2;

  mach_port_deallocate(*v2, v1);
  kdebug_trace();
  _Unwind_Resume(a1);
}

void CA::WindowServer::Display::ModeSet::~ModeSet(CA::WindowServer::Display::ModeSet *this)
{
  _QWORD *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 48);
  std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*((_QWORD **)this + 4));
  v2 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t CA::Display::DisplayLink::update_timer_locked(BOOL)::$_0::__invoke(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 40);
    while (1)
    {
      v2 = *v1;
      if (!*v1)
        break;
      while (1)
      {
        v3 = __ldaxr(v1);
        if (v3 != v2)
          break;
        if (!__stlxr(v2 + 1, v1))
          return result;
      }
      __clrex();
    }
    return 0;
  }
  return result;
}

void CA::Display::DisplayLink::update_timer_locked(BOOL)::$_1::__invoke(CA::Display::DisplayLink *this)
{
  if (this)
    CA::Display::DisplayLink::unref(this);
}

uint64_t CA::Display::DisplayLink::set_display_active(CA::Display::DisplayLink *this, int a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)((char *)this + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  CA::Display::DisplayLink::set_display_active_locked(this, a2);
  return pthread_mutex_unlock(v4);
}

void sub_1845C2E60(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void CA::Display::DisplayLinkItem::run_deferred_unregister_frame_interval_range(CA::Display::DisplayLinkItem *this)
{
  CA::Display::DisplayTimingsControl::unregister_frame_interval_range((os_unfair_lock_s *)(*((_QWORD *)this + 2) + 464), *(CAFrameIntervalRange *)((char *)this + 116));
  CA::Display::DisplayTimingsControl::register_frame_interval_reasons((CA::Display::DisplayTimingsControl *)(*((_QWORD *)this + 2) + 464), (uint64_t)this, 0, 0);
  *((_BYTE *)this + 129) = 0;
}

uint64_t CA::Display::DisplayLinkItem::set_display_active(uint64_t this, int a2)
{
  char v2;
  uint64_t v4;
  char v5;
  char v6;

  v2 = *(_BYTE *)(this + 316);
  if (((((v2 & 0x10) == 0) ^ a2) & 1) == 0)
  {
    v4 = this;
    v5 = a2 ? 16 : 0;
    *(_BYTE *)(this + 316) = v2 & 0xEF | v5;
    if ((v2 & 1) == 0)
    {
      objc_msgSend(*(id *)(this + 256), "willChangeValueForKey:", CFSTR("active"));
      if (a2)
        v6 = 8;
      else
        v6 = 0;
      *(_BYTE *)(v4 + 316) = *(_BYTE *)(v4 + 316) & 0xF7 | v6;
      return objc_msgSend(*(id *)(v4 + 256), "didChangeValueForKey:", CFSTR("active"));
    }
  }
  return this;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<CAFrameIntervalRange>>(unint64_t a1)
{
  if (a1 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(12 * a1);
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
  abort();
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(8 * a1);
}

void CA::Display::DisplayLink::set_display_active_locked(CA::Display::DisplayLink *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  pthread_mutex_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  if (*((unsigned __int8 *)this + 172) != a2)
  {
    *((_BYTE *)this + 172) = a2;
    v5 = *((_QWORD *)this + 15);
    v4 = *((_QWORD *)this + 16);
    v6 = v4 - v5;
    if (v4 == v5)
    {
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 56));
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
    }
    else
    {
      if ((unint64_t)v6 > 0x1000)
      {
        v7 = (char *)malloc_type_malloc(v4 - v5, 0xC6DBBC36uLL);
      }
      else
      {
        MEMORY[0x1E0C80A78](this);
        v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
        bzero(v7, v6);
      }
      v8 = 0;
      if ((unint64_t)(v6 >> 3) <= 1)
        v9 = 1;
      else
        v9 = v6 >> 3;
      do
      {
        v10 = *(_QWORD *)(*((_QWORD *)this + 15) + 8 * v8);
        *(_QWORD *)&v7[8 * v8] = v10;
        CFRetain(*(CFTypeRef *)(v10 + 256));
        ++v8;
      }
      while (v9 != v8);
      v11 = (pthread_mutex_t *)((char *)this + 56);
      pthread_mutex_unlock(v11);
      v12 = 0;
      do
      {
        v13 = *(_QWORD *)&v7[8 * v12];
        pthread_mutex_lock((pthread_mutex_t *)(v13 + 136));
        CA::Display::DisplayLinkItem::set_display_active(v13, a2);
        CFRelease(*(CFTypeRef *)(v13 + 256));
        pthread_mutex_unlock((pthread_mutex_t *)(v13 + 136));
        ++v12;
      }
      while (v9 != v12);
      pthread_mutex_lock(v11);
      if ((unint64_t)v6 > 0x1000)
        free(v7);
    }
  }
}

void sub_1845C3190(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;
  pthread_mutex_t *v2;

  pthread_mutex_unlock(v2);
  pthread_mutex_lock(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::Display::DisplayLink::power_changed(CA::Display::DisplayLink *this)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)((char *)this + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  if (*((_DWORD *)this + 36) == (uint64_t)(*((_QWORD *)this + 16) - *((_QWORD *)this + 15)) >> 3)
  {
    *((_DWORD *)this + 37) = 0;
  }
  else if ((CA::Display::DisplayTimingsControl::power_state((CA::Display::DisplayTimingsControl *)(*((_QWORD *)this + 1)
                                                                                                  + 464)) & 1) != 0
         || (*(_WORD *)(*((_QWORD *)this + 1) + 760) & 0x100) != 0)
  {
    CA::Display::DisplayLink::start_timer_locked(this);
    CA::Display::DisplayLink::set_display_active_locked(this, 1);
  }
  return pthread_mutex_unlock(v2);
}

void sub_1845C3224(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  int8x8_t prime;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  _QWORD *i;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint8x8_t v26;
  unint64_t v27;
  _QWORD *v28;
  int v29;
  _QWORD *result;
  unint64_t v31;
  unint64_t v32;
  _BOOL4 v33;
  int v34;
  void *v35;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      prime = (int8x8_t)v11;
    else
      prime = (int8x8_t)v10;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_74;
    if (*(_QWORD *)&prime >= v6)
      goto LABEL_43;
    v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      v19 = std::__next_prime(v19);
    }
    else
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
    }
    if (*(_QWORD *)&prime <= v19)
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime >= v6)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_74:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = operator new(8 * *(_QWORD *)&prime);
      v14 = *(void **)a1;
      *(_QWORD *)a1 = v13;
      if (v14)
        operator delete(v14);
      v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v15++) = 0;
      while (*(_QWORD *)&prime != v15);
      v16 = *(_QWORD **)(a1 + 16);
      if (v16)
      {
        v17 = v16[1];
        v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(_QWORD *)&prime)
            v17 %= *(_QWORD *)&prime;
        }
        else
        {
          v17 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = a1 + 16;
        for (i = (_QWORD *)*v16; *v16; i = (_QWORD *)*v16)
        {
          v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(_QWORD *)&prime)
              v23 %= *(_QWORD *)&prime;
          }
          else
          {
            v23 &= *(_QWORD *)&prime - 1;
          }
          if (v23 == v17)
          {
            v16 = i;
          }
          else
          {
            v24 = i;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v23))
            {
              do
              {
                v25 = v24;
                v24 = (_QWORD *)*v24;
              }
              while (v24 && i[2] == v24[2]);
              *v16 = v24;
              *v25 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v23);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v23) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v16;
              v16 = i;
              v17 = v23;
            }
          }
        }
      }
      v6 = (unint64_t)prime;
    }
    else
    {
      v35 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v35)
        operator delete(v35);
      v6 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    v27 = a2;
    if (v6 <= a2)
      v27 = a2 % v6;
  }
  else
  {
    v27 = (v6 - 1) & a2;
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v27);
  if (!v28)
    return 0;
  v29 = 0;
  do
  {
    result = v28;
    v28 = (_QWORD *)*v28;
    if (!v28)
      break;
    v31 = v28[1];
    if (v26.u32[0] > 1uLL)
    {
      v32 = v28[1];
      if (v31 >= v6)
        v32 = v31 % v6;
    }
    else
    {
      v32 = v31 & (v6 - 1);
    }
    if (v32 != v27)
      break;
    v33 = v31 == a2 && v28[2] == *a3;
    v34 = v29 & !v33;
    v29 |= v33;
  }
  while (v34 != 1);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

_QWORD *std::__tree<std::tuple<unsigned short,unsigned short>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

_QWORD *std::__tree<std::tuple<unsigned short,unsigned short>>::__find_leaf_high(uint64_t a1, _QWORD *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned int v7;
  BOOL v8;
  char v9;
  unsigned int v10;
  BOOL v11;
  _QWORD *v12;

  v6 = *(uint64_t **)(a1 + 8);
  v4 = (_QWORD *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    do
    {
      while (1)
      {
        v4 = v5;
        v7 = *((unsigned __int16 *)v5 + 13);
        v8 = v7 == a3;
        if (v7 <= a3)
          v9 = 1;
        else
          v9 = -1;
        if (v8)
        {
          v10 = *((unsigned __int16 *)v5 + 14);
          v11 = v10 == a4;
          if (v10 <= a4)
            v9 = 1;
          else
            v9 = -1;
          if (v11)
            v9 = 0;
        }
        if ((v9 & 0x80) == 0)
          break;
        v5 = (uint64_t *)*v5;
        v12 = v4;
        if (!*v4)
          goto LABEL_18;
      }
      v5 = (uint64_t *)v5[1];
    }
    while (v5);
    v12 = v4 + 1;
  }
  else
  {
    v12 = v4;
  }
LABEL_18:
  *a2 = v4;
  return v12;
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

char *std::vector<CA::WindowServer::Display::Mode>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

float CA::Display::Display::auto_luminance_boost(CA::Display::Display *this)
{
  int v1;
  mach_port_name_t ServerPort;
  mach_port_name_t v3;
  float v4;
  mach_port_t reply_port;
  mach_msg_return_t v6;
  BOOL v7;
  int v8;
  int msg;
  _BYTE msg_4[44];
  uint64_t v12;

  v1 = (int)this;
  v12 = *MEMORY[0x1E0C80C00];
  ServerPort = CARenderServerGetServerPort(0);
  if (ServerPort)
  {
    v3 = ServerPort;
    v4 = 1.0;
    if (!v1)
    {
LABEL_28:
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], v3);
      return v4;
    }
    memset(&msg_4[16], 0, 28);
    *(_OWORD *)msg_4 = 0u;
    *(_QWORD *)&msg_4[20] = *MEMORY[0x1E0C804E8];
    *(_DWORD *)&msg_4[28] = v1;
    reply_port = mig_get_reply_port();
    *(_DWORD *)&msg_4[4] = v3;
    *(_DWORD *)&msg_4[8] = reply_port;
    msg = 5395;
    *(_QWORD *)&msg_4[12] = 0x9D2B00000000;
    if (MEMORY[0x1E0C85B60])
    {
      voucher_mach_msg_set((mach_msg_header_t *)&msg);
      reply_port = *(_DWORD *)&msg_4[8];
    }
    v6 = mach_msg((mach_msg_header_t *)&msg, 3, 0x24u, 0x30u, reply_port, 0, 0);
    if ((v6 - 268435458) <= 0xE && ((1 << (v6 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(*(mach_port_t *)&msg_4[8]);
      goto LABEL_28;
    }
    if (v6)
    {
      mig_dealloc_reply_port(*(mach_port_t *)&msg_4[8]);
      goto LABEL_28;
    }
    if (*(_DWORD *)&msg_4[16] == 71)
    {
      v8 = -308;
      goto LABEL_26;
    }
    if (*(_DWORD *)&msg_4[16] != 40335)
    {
      v8 = -301;
      goto LABEL_26;
    }
    if ((msg & 0x80000000) == 0)
    {
      if (*(_DWORD *)msg_4 == 40)
      {
        if (!*(_DWORD *)&msg_4[4])
        {
          v8 = *(_DWORD *)&msg_4[28];
          if (!*(_DWORD *)&msg_4[28])
          {
            v4 = *(float *)&msg_4[32];
            goto LABEL_28;
          }
LABEL_26:
          mach_msg_destroy((mach_msg_header_t *)&msg);
          if (!v8)
            v4 = 0.0;
          goto LABEL_28;
        }
      }
      else if (*(_DWORD *)msg_4 == 36)
      {
        if (*(_DWORD *)&msg_4[4])
          v7 = 1;
        else
          v7 = *(_DWORD *)&msg_4[28] == 0;
        if (v7)
          v8 = -300;
        else
          v8 = *(_DWORD *)&msg_4[28];
        goto LABEL_26;
      }
    }
    v8 = -300;
    goto LABEL_26;
  }
  return 1.0;
}

uint64_t *std::__tree<std::tuple<unsigned short,unsigned short>>::__find_equal<std::tuple<unsigned short,unsigned short>>(uint64_t a1, _QWORD *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  char v11;
  char v12;

  v6 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    while (1)
    {
      v7 = v5;
      v8 = *((unsigned __int16 *)v5 + 13);
      if (v8 == a3)
      {
        v9 = *((unsigned __int16 *)v7 + 14);
        v10 = v9 == a4;
        if (v9 <= a4)
        {
          if (v9 >= a4)
            v11 = 1;
          else
            v11 = -1;
          if (v10)
            v11 = 0;
          if ((v11 & 0x80) == 0)
            goto LABEL_21;
          goto LABEL_18;
        }
LABEL_12:
        v5 = (uint64_t *)*v7;
        result = v7;
        if (!*v7)
          goto LABEL_21;
      }
      else
      {
        if (v8 > a3)
          goto LABEL_12;
        if (v8 >= a3)
          v12 = 1;
        else
          v12 = -1;
        if ((v12 & 0x80) == 0)
          goto LABEL_21;
LABEL_18:
        result = v7 + 1;
        v5 = (uint64_t *)v7[1];
        if (!v5)
          goto LABEL_21;
      }
    }
  }
  v7 = result;
LABEL_21:
  *a2 = v7;
  return result;
}

__n128 __copy_helper_block_e8_32c39_ZTSN2CA12WindowServer7Display7ModeSetE128c47_ZTSN2CA12WindowServer7Display14EDIDAttributesE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  CA::WindowServer::Display::ModeSet::ModeSet((CA::WindowServer::Display::ModeSet *)(a1 + 32), (const CA::WindowServer::Display::ModeSet *)(a2 + 32));
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 141) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  result = *(__n128 *)(a2 + 152);
  *(__n128 *)(a1 + 152) = result;
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  return result;
}

void __destroy_helper_block_e8_32c39_ZTSN2CA12WindowServer7Display7ModeSetE128(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(a1 + 80);
  std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*(_QWORD **)(a1 + 64));
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

id create_mode(uint64_t a1, unint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t os_unfair_lock_opaque;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = *(os_unfair_lock_s **)(a1 + 8);
  v7 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if (a3)
  {
    v14 = 0;
    v15 = 0;
    CA::WindowServer::Display::ModeSet::get_per_mode_info(a3, a2, (PerModeInfo *)&v14);
    HIDWORD(v15) = *(_DWORD *)(a3 + 88);
    v8 = v14;
    v9 = v15;
  }
  else
  {
    os_unfair_lock_lock(v6 + 18);
    v14 = 0;
    v15 = 0;
    CA::WindowServer::Display::ModeSet::get_per_mode_info((uint64_t)&v6[38], a2, (PerModeInfo *)&v14);
    HIDWORD(v15) = v6[60];
    v8 = v14;
    v9 = v15;
    os_unfair_lock_unlock(v6 + 18);
  }
  v10 = +[CADisplayMode _displayModeWithMode:display:rates:perMode:maxSourceBandwidthPerPipe:](CADisplayMode, "_displayModeWithMode:display:rates:perMode:maxSourceBandwidthPerPipe:", a2, a1, v7, v8, v9, HIDWORD(v9));
  if (a2 == -1)
  {
    os_unfair_lock_lock(v6 + 18);
    os_unfair_lock_opaque = (int)v6[68]._os_unfair_lock_opaque;
    v12 = (int)v6[69]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v6 + 18);
    objc_msgSend(v10, "_setWidth:height:", os_unfair_lock_opaque, v12);
  }
  objc_msgSend(v10, "_setPreferredUIScale:", v6[111]._os_unfair_lock_opaque);
  return v10;
}

uint64_t CA::Display::Display::link_quality(CA::Display::Display *this)
{
  return 0xFFFFFFFFLL;
}

void CA::Display::DisplayLink::display_power_changed(CA::Display::DisplayLink *this)
{
  CA::Display::DisplayLink *v1;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::Display::DisplayLink::_list_lock);
  v1 = (CA::Display::DisplayLink *)CA::Display::DisplayLink::_list;
  if (CA::Display::DisplayLink::_list)
  {
    do
    {
      CA::Display::DisplayLink::power_changed(v1);
      v1 = (CA::Display::DisplayLink *)*((_QWORD *)v1 + 6);
    }
    while (v1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Display::DisplayLink::_list_lock);
}

void sub_1845C47FC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Display::DisplayLink::_list_lock);
  _Unwind_Resume(a1);
}

uint64_t will_suspend_callback(CA::Render::Object *a1, void *a2, void *a3)
{
  id v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[128];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = current_displays();
  result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v8, 16);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v7++), "_invalidate");
      }
      while (v5 != v7);
      result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v8, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

void CA::Display::IOMFBDisplay::~IOMFBDisplay(CFTypeRef *this)
{
  malloc_zone_t *malloc_zone;

  CA::Display::Display::~Display(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::Display::IOMFBDisplay::link_quality(CA::Display::IOMFBDisplay *this)
{
  return 0xFFFFFFFFLL;
}

void CA::Display::MetalLinkItem::~MetalLinkItem(CA::Display::MetalLinkItem *this)
{
  CA::Display::DisplayLinkItem::~DisplayLinkItem(this);
  JUMPOUT(0x186DBD990);
}

void CA::Display::MetalLinkItem::invalidate(CA::Display::MetalLinkItem *this)
{
  unint64_t v2;
  void *v3;
  CA::Display::MetalLinkItem **v4;

  CA::Display::DisplayLinkItem::invalidate(this);
  CAMetalLayerSetMetalLinkToken(*((_QWORD *)this + 40), 0);
  CFRelease(*((CFTypeRef *)this + 40));
  *((_QWORD *)this + 40) = 0;
  os_unfair_lock_lock(&CA::Display::MetalLinkItem::_list_lock);
  v3 = CA::Display::MetalLinkItem::_list;
  v2 = qword_1EDD0FCD8;
  if (CA::Display::MetalLinkItem::_list != (_UNKNOWN *)qword_1EDD0FCD8)
  {
    v4 = (CA::Display::MetalLinkItem **)CA::Display::MetalLinkItem::_list;
    while (*v4 != this)
    {
      if (++v4 == (CA::Display::MetalLinkItem **)qword_1EDD0FCD8)
        goto LABEL_10;
    }
    if ((CA::Display::MetalLinkItem **)qword_1EDD0FCD8 != v4 + 1)
    {
      memmove(v4, v4 + 1, qword_1EDD0FCD8 - (_QWORD)(v4 + 1));
      v3 = CA::Display::MetalLinkItem::_list;
      v2 = qword_1EDD0FCD8;
    }
    if (v2 <= (unint64_t)v3)
      __assert_rtn("pop_back", "x-small-vector.h", 410, "_end > _begin && \"pop_back on empty container\"");
    qword_1EDD0FCD8 = v2 - 8;
  }
LABEL_10:
  os_unfair_lock_unlock(&CA::Display::MetalLinkItem::_list_lock);
}

void sub_1845C4A34(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(&CA::Display::MetalLinkItem::_list_lock);
  _Unwind_Resume(a1);
}

unint64_t CA::Display::MetalLinkItem::compute_target_timestamp_delta(CA::Display::MetalLinkItem *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  float v8;
  float v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *((int *)this + 14);
  v3 = *((_QWORD *)this + 37) * v2;
  v4 = *((_QWORD *)this + 2);
  if ((*(_BYTE *)(v4 + 697) & 1) != 0)
    v5 = 2;
  else
    v5 = 1;
  if (v5 <= *(_DWORD *)(v4 + 520))
    v5 = *(_DWORD *)(v4 + 520);
  if (v5 <= *(_DWORD *)(v4 + 552))
    v5 = *(_DWORD *)(v4 + 552);
  if (*((float *)this + 82) <= 2.0 && BYTE12(xmmword_1ECDC6AF0) == 0 && (_DWORD)v2 == v5)
    v8 = 2.0;
  else
    v8 = *((float *)this + 82);
  v9 = (float)v3;
  v10 = CA::Display::DisplayTimingsControl::server_triple_buffered((os_unfair_lock_s *)(v4 + 464));
  v11 = 528;
  if ((*(_BYTE *)(v4 + 697) & 8) == 0)
    v11 = 496;
  v12 = CAHostTimeWithTime(*(double *)(v4 + v11)) << v10;
  for (i = (unint64_t)(float)(v8 * v9); v8 < 3.0; i = (unint64_t)(float)(v8 * v9))
  {
    if (v12 <= i >> 1)
      break;
    if (v12 - (i >> 1) <= i >> 6)
      break;
    v8 = v8 + 1.0;
  }
  *((_QWORD *)this + 42) = i;
  if (present_on_finish_enabled(*(_CAImageQueue **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 40) + 32) + 16)
                                                   + 48)))
  {
    v8 = v8 + 1.0;
    v14 = *((_QWORD *)this + 2);
    v15 = CA::Display::DisplayTimingsControl::server_triple_buffered((os_unfair_lock_s *)(v14 + 464));
    v16 = 528;
    if ((*(_BYTE *)(v14 + 697) & 8) == 0)
      v16 = 496;
    *((_QWORD *)this + 42) += CAHostTimeWithTime(*(double *)(v14 + v16)) << v15;
  }
  v17 = *((_QWORD *)this + 40);
  v18 = (unint64_t)(float)(v8 + 1.0);
  v19 = (os_unfair_lock_s *)(*(_QWORD *)(v17 + 32) + 8);
  os_unfair_lock_lock(v19);
  v20 = *(_QWORD *)(v17 + 32);
  *(_DWORD *)(v20 + 136) = v18;
  v21 = *(_QWORD *)(*(_QWORD *)(v20 + 16) + 48);
  if (v21)
    *(_BYTE *)(*(_QWORD *)(v21 + 24) + 95) = 5 - v18;
  os_unfair_lock_unlock(v19);
  *((_QWORD *)this + 43) = i - v12;
  if (i - v12 >= v3)
    return v3;
  else
    return i - v12;
}

uint64_t CA::Display::MetalLinkItem::needs_update_link(CA::Display::MetalLinkItem *this)
{
  uint64_t v1;
  uint64_t result;
  id *v4;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 40) + 32) + 16) + 48);
  if (!v1)
    return 0;
  result = *(unsigned int *)(*(_QWORD *)(v1 + 24) + 24);
  if (!(_DWORD)result)
    return result;
  if ((_DWORD)result == *(_DWORD *)(*((_QWORD *)this + 2) + 104))
    return 0;
  v4 = (id *)*((_QWORD *)CADisplayLookupFromDisplayId(result) + 1);
  os_unfair_lock_lock((os_unfair_lock_t)this + 2);
  CA::Display::DisplayLinkItem::hot_swap_display(this, v4);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 2);
  CA::Display::DisplayLinkItem::set_preferred_fps_range_locked(this, *(CAFrameRateRange *)((char *)this + 76), 0);
  return 1;
}

void sub_1845C4CC0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void CA::Display::MetalLinkItem::get_link(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD v4[5];
  _QWORD v5[5];
  _QWORD v6[6];

  v6[5] = *MEMORY[0x1E0C80C00];
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZN2CA7Display13MetalLinkItem8get_linkEP11__CFRunLoopPKN1X4ListIPK10__CFStringEE_block_invoke;
  v6[3] = &__block_descriptor_40_e8_B16__0Q8l;
  v6[4] = a1;
  v4[4] = a1;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___ZN2CA7Display13MetalLinkItem8get_linkEP11__CFRunLoopPKN1X4ListIPK10__CFStringEE_block_invoke_2;
  v5[3] = &__block_descriptor_40_e16_C16__0r____QQI_8l;
  v5[4] = a1;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___ZN2CA7Display13MetalLinkItem8get_linkEP11__CFRunLoopPKN1X4ListIPK10__CFStringEE_block_invoke_3;
  v4[3] = &__block_descriptor_40_e31_v16__0__CATimingReference_QQQ_8l;
  CA::Display::DisplayLink::get_link(a4, *(_QWORD *)(a1 + 16), a2, a3, v6, v5, v4);
}

void CA::Display::MetalLinkItem::dispatch_(uint64_t a1, _QWORD *a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  float v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  void *v18;
  CAMetalLayer *v19;
  double v20;
  int v21;
  os_unfair_lock_s *v22;
  id v23;
  double v24;
  uint64_t v25;
  float v26;
  id v27[2];

  v27[1] = *(id *)MEMORY[0x1E0C80C00];
  v4 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 56);
  if ((*(_BYTE *)(v5 + 697) & 1) != 0)
    v7 = 2;
  else
    v7 = 1;
  if (v7 <= *(_DWORD *)(v5 + 520))
    v7 = *(_DWORD *)(v5 + 520);
  if (v7 <= *(_DWORD *)(v5 + 552))
    v7 = *(_DWORD *)(v5 + 552);
  if (*(float *)(a1 + 328) <= 2.0 && BYTE12(xmmword_1ECDC6AF0) == 0 && v6 == v7)
    v10 = 2.0;
  else
    v10 = *(float *)(a1 + 328);
  v11 = CATimeWithHostTime(*(_QWORD *)(a1 + 296));
  v12 = CATimeWithHostTime(*(_QWORD *)(a1 + 336));
  v13 = CATimeWithHostTime(*(_QWORD *)(a1 + 280));
  v14 = v13 + v12;
  v15 = v13 + v12 + v12 * -0.01;
  v16 = CATimeWithHostTime(*(_QWORD *)(a1 + 344));
  v26 = v10;
  if (CA::Display::DisplayTimingsControl::server_triple_buffered((os_unfair_lock_s *)(v5 + 464)))
  {
    v17 = 528;
    if ((*(_BYTE *)(v5 + 697) & 8) == 0)
      v17 = 496;
    v15 = v15 - *(double *)(v5 + v17);
  }
  CA::Display::DisplayTimingsControl::server_frame_interval((CA::Display::DisplayTimingsControl *)(v5 + 464), 0);
  os_unfair_lock_unlock(v4);
  v18 = (void *)MEMORY[0x186DBE2E4]();
  v19 = *(CAMetalLayer **)(a1 + 320);
  v20 = CATimeWithHostTime(*(_QWORD *)(a1 + 288));
  v21 = *(_DWORD *)(a1 + 328);
  v22 = (os_unfair_lock_s *)((char *)v19->_priv + 8);
  os_unfair_lock_lock(v22);
  v27[0] = 0;
  CAMetalLayerPrivateNextDrawableLocked(v19, (CAMetalDrawable **)v27, 0);
  v23 = v27[0];
  if (v27[0])
  {
    objc_msgSend(v27[0], "setTargetTimestamp:", v20);
    objc_msgSend(v27[0], "setTargetSamplingTimestamp:", v15);
    objc_msgSend(v27[0], "setTargetPresentationTimestamp:", v14);
    objc_msgSend(v27[0], "setPresentDeadline:", v16 + v13);
    objc_msgSend(v27[0], "setPreferredLatency:", v11 * (float)(v26 * (float)v6), v11 * (double)v6);
    objc_msgSend(v27[0], "setHasExplicitDeadlines:", 1);
    LODWORD(v24) = v21;
    objc_msgSend(v27[0], "setClientPreferredLatency:", v24);
    v23 = v27[0];
  }
  v25 = -[CAMetalLayer shimDrawable:](v19, "shimDrawable:", v23);
  os_unfair_lock_unlock(v22);
  if (v25)
  {
    objc_msgSend((id)objc_msgSend(*(id *)(a1 + 256), "delegate"), "metalDisplayLink:needsUpdate:", *(_QWORD *)(a1 + 256), +[CAMetalDisplayLinkUpdate updateWithDrawable:targetTimestamp:targetPresentationTimestamp:](CAMetalDisplayLinkUpdate, "updateWithDrawable:targetTimestamp:targetPresentationTimestamp:", v25, CATimeWithHostTime(*(_QWORD *)(a1 + 288)), v14));
    objc_autoreleasePoolPop(v18);
    *a2 = *(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280);
    a2[1] = CAHostTimeWithTime(v12);
    a2[2] = *(_QWORD *)(a1 + 288);
    a2[3] = CAHostTimeWithTime(v14);
  }
  else
  {
    kdebug_trace();
    objc_autoreleasePoolPop(v18);
  }
}

void sub_1845C50B0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::Display::DisplayTimingsControl::server_triple_buffered(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;

  v2 = this + 3;
  os_unfair_lock_lock(this + 3);
  v3 = *(_QWORD *)&this[6]._os_unfair_lock_opaque;
  if (v3)
  {
    v4 = atomic_load((unsigned __int8 *)(v3 + 2));
    v5 = v4 & 1;
  }
  else if ((this[58]._os_unfair_lock_opaque & 0x200) != 0)
  {
    if (CAPrefers60HzAPT(void)::once[0] != -1)
      dispatch_once(CAPrefers60HzAPT(void)::once, &__block_literal_global_2);
    v5 = CAPrefers60HzAPT(void)::enabled != 0;
  }
  else
  {
    v5 = 0;
  }
  os_unfair_lock_unlock(v2);
  return v5;
}

BOOL ___ZN2CA7Display13MetalLinkItem8get_linkEP11__CFRunLoopPKN1X4ListIPK10__CFStringEE_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 32) == a2;
}

uint64_t ___ZN2CA7Display13MetalLinkItem8get_linkEP11__CFRunLoopPKN1X4ListIPK10__CFStringEE_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *a2;
  v4 = a2[1];
  if (mach_absolute_time() - v3 > v4 >> 1)
    return 3;
  if (CAMetalLayerShouldDispatchLink(*(CAMetalLayer **)(v2 + 320)))
    return 0;
  return 2;
}

void ___ZN2CA7Display13MetalLinkItem8get_linkEP11__CFRunLoopPKN1X4ListIPK10__CFStringEE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 32);
  if (!present_on_finish_enabled(*(_CAImageQueue **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 320) + 32) + 16)
                                                    + 48)))
  {
    v4 = (os_unfair_lock_s *)(v3 + 8);
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 8));
    v5 = *(_QWORD *)(v3 + 16);
    v6 = CA::Display::DisplayTimingsControl::server_triple_buffered((os_unfair_lock_s *)(v5 + 464));
    v7 = 528;
    if ((*(_BYTE *)(v5 + 697) & 8) == 0)
      v7 = 496;
    *(_QWORD *)(a2 + 8) += CAHostTimeWithTime(*(double *)(v5 + v7)) << v6;
    os_unfair_lock_unlock(v4);
  }
}

void sub_1845C533C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void *CADisplayLookupFromDisplayId(int a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _BYTE v9[128];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = +[CADisplay displays](CADisplay, "displays");
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v9, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
LABEL_3:
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)v11 != v5)
        objc_enumerationMutation(v2);
      v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * v6);
      if (objc_msgSend(v7, "displayId") == a1)
        break;
      if (v4 == ++v6)
      {
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v9, 16);
        if (v4)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    if (CADisplayGetDummyDisplay(void)::once != -1)
      dispatch_once(&CADisplayGetDummyDisplay(void)::once, &__block_literal_global_359);
    return (void *)CADisplayGetDummyDisplay(void)::dummy_display;
  }
  return v7;
}

id CA::Display::DisplayLinkItem::hot_swap_display(id this, id *a2)
{
  id *v2;
  _QWORD *v4;

  v2 = (id *)*((_QWORD *)this + 2);
  if (v2 != a2)
  {
    v4 = this;

    this = a2[10];
    v4[2] = a2;
  }
  return this;
}

uint64_t ___ZL24CADisplayGetDummyDisplayv_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(a3 + 4) = 1;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = CAHostTimeWithTime(0.0166666667);
  return 1;
}

uint64_t ___ZL24CADisplayGetDummyDisplayv_block_invoke_2(uint64_t a1, uint64_t a2, int64x2_t *a3)
{
  a3[6].i64[0] = 0x3F91111111111111;
  a3[5] = vdupq_n_s64(0x3F91111111111111uLL);
  a3[6].i64[1] = 0x100000001;
  return 1;
}

void sub_1845C5740(_Unwind_Exception *a1)
{
  CFTypeRef *v1;

  CA::Display::Display::~Display(v1);
  _Unwind_Resume(a1);
}

void sub_1845C58CC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(&CA::Display::MetalLinkItem::_list_lock);
  _Unwind_Resume(a1);
}

void ___ZL21local_display_enabledv_block_invoke()
{
  char *v0;

  local_display_enabled(void)::enabled = +[CAWindowServer serverIfRunning](CAWindowServer, "serverIfRunning") == 0;
  if (CADeviceHasInternalBuild::once != -1)
    dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
  if (CADeviceHasInternalBuild::internal)
  {
    v0 = getenv("CA_ENABLE_LOCAL_DISPLAY");
    if (v0)
      local_display_enabled(void)::enabled = atoi(v0) == 1;
  }
}

uint64_t ___ZN2CA7Display12LocalDisplayC2EPK10__CFStringS4_jU13block_pointerFbP14CALocalDisplayP18CALocalDisplayInfoEU13block_pointerFbS6_P21CALocalDisplayTimingsE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t ___ZN2CA7Display12LocalDisplayC2EPK10__CFStringS4_jU13block_pointerFbP14CALocalDisplayP18CALocalDisplayInfoEU13block_pointerFbS6_P21CALocalDisplayTimingsE_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void CA::Display::LocalDisplay::~LocalDisplay(CFTypeRef *this)
{
  malloc_zone_t *malloc_zone;

  CA::Display::Display::~Display(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void sub_1845C5BC8(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;
  pthread_mutex_t *v2;

  pthread_mutex_unlock(v2);
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::Display::DisplayLinkItem::display_minimum_frame_duration(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v2 = this + 2;
  os_unfair_lock_lock(this + 2);
  v3 = *(_QWORD *)&this[4]._os_unfair_lock_opaque;
  if ((*(_BYTE *)(v3 + 697) & 1) != 0)
    v4 = 2;
  else
    v4 = 1;
  if (v4 <= *(_DWORD *)(v3 + 520))
    v4 = *(_DWORD *)(v3 + 520);
  v5 = *(_DWORD *)(v3 + 552);
  if (v4 <= v5)
    v6 = v5;
  else
    v6 = v4;
  os_unfair_lock_unlock(v2);
  return v6;
}

void sub_1845C5F28(_Unwind_Exception *a1)
{
  CA::Display::DisplayLinkItem *v1;

  os_unfair_lock_unlock(&CA::Display::MetalLinkItem::_list_lock);
  CA::Display::DisplayLinkItem::~DisplayLinkItem(v1);
  _Unwind_Resume(a1);
}

void sub_1845C6648(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void CA_ABORT_ON_NON_MAIN_THREAD_DEFERRED_DISPLAY_LINK_ACTION(void)
{
  NSObject *v0;
  uint8_t v1[8];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v0 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v1 = 0;
      _os_log_impl(&dword_184457000, v0, OS_LOG_TYPE_ERROR, "Unsupported use of CADisplayLink SPI off the main thread.", v1, 2u);
    }
  }
}

void sub_1845C69F8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1845C6B20(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(&CA::Display::MetalLinkItem::_list_lock);
  _Unwind_Resume(a1);
}

CFArrayRef CA::Display::`anonymous namespace'::copy_mode_list_to_array(_QWORD *a1)
{
  _QWORD *v1;
  CFIndex v2;
  _QWORD *v3;
  size_t v4;
  char *v5;
  CFArrayRef v6;
  uint64_t i;
  _QWORD v9[2];

  v1 = a1;
  v9[1] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v4 = 0;
    v2 = 0;
    goto LABEL_8;
  }
  v2 = 0;
  v3 = a1;
  do
  {
    ++v2;
    v3 = (_QWORD *)v3[1];
  }
  while (v3);
  v4 = 8 * v2;
  if ((unint64_t)(8 * v2) <= 0x1000)
  {
LABEL_8:
    MEMORY[0x1E0C80A78](a1);
    v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v5, v4);
    if (!v2)
      return CFArrayCreate(0, (const void **)v5, 0, MEMORY[0x1E0C9B378]);
    goto LABEL_9;
  }
  v5 = (char *)malloc_type_malloc(8 * v2, 0xD3390376uLL);
  if (!v2)
    return CFArrayCreate(0, (const void **)v5, 0, MEMORY[0x1E0C9B378]);
LABEL_9:
  for (i = 0; i != v2; ++i)
  {
    *(_QWORD *)&v5[8 * i] = *v1;
    v1 = (_QWORD *)v1[1];
  }
  v6 = CFArrayCreate(0, (const void **)v5, v2, MEMORY[0x1E0C9B378]);
  if (v4 > 0x1000)
    free(v5);
  return v6;
}

void ___ZN2CA7Display11DisplayLink30dispatch_deferred_display_linkEy_block_invoke(uint64_t a1)
{
  CA::Display::DisplayLink *v2;

  CA::Display::DisplayLink::callback(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 208), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 216), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 224), 0, *(_QWORD *)(a1 + 32));
  v2 = *(CA::Display::DisplayLink **)(a1 + 32);
  if (v2)
    CA::Display::DisplayLink::unref(v2);
}

float CADisplayGetCurrentHeadroom(uint32_t a1)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  unsigned int *v4;
  unsigned int v5;
  float v6;

  pthread_mutex_lock(&_edr_states_lock);
  v2 = edr_state_for_display(a1);
  v3 = v2;
  if (v2)
  {
    os_unfair_lock_lock(v2 + 1);
    v4 = *(unsigned int **)&v3[4]._os_unfair_lock_opaque;
    if (v4)
    {
      v5 = atomic_load(v4);
      v6 = *(float *)&v5;
    }
    else
    {
      v6 = 1.0;
    }
    os_unfair_lock_unlock(v3 + 1);
  }
  else
  {
    v6 = 1.0;
  }
  pthread_mutex_unlock(&_edr_states_lock);
  return v6;
}

void sub_1845C6D60(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&_edr_states_lock);
  _Unwind_Resume(a1);
}

os_unfair_lock_s *edr_state_for_display(uint32_t a1)
{
  _QWORD *v2;
  os_unfair_lock_s **v3;
  os_unfair_lock_s *v4;
  mach_port_name_t ServerPort;
  mach_port_name_t v6;
  mach_port_t reply_port;
  mach_msg_return_t v8;
  mach_port_name_t v10;
  unsigned int *v11;
  malloc_zone_t *malloc_zone;
  os_unfair_lock_s *v13;
  os_unfair_lock_s *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  os_unfair_lock_s **v27;
  _QWORD *v28;
  os_unfair_lock_s **v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unsigned int v37;
  int msg;
  _BYTE msg_4[60];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)_edr_states;
  if (_edr_states)
  {
    v3 = *(os_unfair_lock_s ***)_edr_states;
  }
  else
  {
    v2 = (_QWORD *)operator new();
    v3 = 0;
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    _edr_states = (uint64_t)v2;
  }
  while (v3 != (os_unfair_lock_s **)v2[1])
  {
    v4 = *v3;
    if ((*v3)->_os_unfair_lock_opaque == a1)
      return v4;
    ++v3;
  }
  ServerPort = CARenderServerGetServerPort(0);
  if (!ServerPort)
    return 0;
  v6 = ServerPort;
  if (!a1)
  {
LABEL_19:
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], v6);
    return 0;
  }
  memset(&msg_4[16], 0, 44);
  *(_OWORD *)msg_4 = 0u;
  *(_QWORD *)&msg_4[20] = *MEMORY[0x1E0C804E8];
  *(_DWORD *)&msg_4[28] = a1;
  reply_port = mig_get_reply_port();
  *(_DWORD *)&msg_4[4] = v6;
  *(_DWORD *)&msg_4[8] = reply_port;
  msg = 5395;
  *(_QWORD *)&msg_4[12] = 0x9D2900000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)&msg);
    reply_port = *(_DWORD *)&msg_4[8];
  }
  v8 = mach_msg((mach_msg_header_t *)&msg, 3, 0x24u, 0x40u, reply_port, 0, 0);
  if ((v8 - 268435458) <= 0xE && ((1 << (v8 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg_4[8]);
    goto LABEL_19;
  }
  if (v8)
  {
    mig_dealloc_reply_port(*(mach_port_t *)&msg_4[8]);
    goto LABEL_19;
  }
  if (*(_DWORD *)&msg_4[16] != 40333
    || (msg & 0x80000000) == 0
    || *(_DWORD *)&msg_4[20] != 1
    || *(_DWORD *)msg_4 != 56
    || *(_DWORD *)&msg_4[4]
    || *(unsigned __int16 *)&msg_4[34] << 16 != 1114112)
  {
    mach_msg_destroy((mach_msg_header_t *)&msg);
    goto LABEL_19;
  }
  v10 = *(_DWORD *)&msg_4[24];
  if (!*(_DWORD *)&msg_4[24] || !*(_QWORD *)&msg_4[44])
    goto LABEL_19;
  v11 = CA::Render::Shmem::new_shmem(*(mem_entry_name_port_t *)&msg_4[24], *(mach_vm_size_t *)&msg_4[44], 0, 3);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v13 = (os_unfair_lock_s *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x18uLL, 0x743898A5uLL);
  if (!v13
    || (v4 = v13,
        v13->_os_unfair_lock_opaque = a1,
        v13[1]._os_unfair_lock_opaque = 0,
        v14 = v13 + 1,
        *(_QWORD *)&v13[2]._os_unfair_lock_opaque = 0,
        !v11))
  {
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], v10);
    goto LABEL_19;
  }
  os_unfair_lock_lock(v13 + 1);
  v15 = *(unsigned int **)&v4[2]._os_unfair_lock_opaque;
  if (v15)
  {
    *(_QWORD *)&v4[2]._os_unfair_lock_opaque = 0;
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
    *(_QWORD *)&v4[4]._os_unfair_lock_opaque = 0;
    v19 = *(unsigned int **)&v4[2]._os_unfair_lock_opaque;
    if (v19 == v11)
      goto LABEL_45;
    if (v19)
    {
      v20 = v19 + 2;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
        (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
    }
  }
  v23 = v11 + 2;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 + 1, v23));
  if (!v24)
  {
    v11 = 0;
    do
      v37 = __ldaxr(v23);
    while (__stlxr(v37 - 1, v23));
  }
  *(_QWORD *)&v4[2]._os_unfair_lock_opaque = v11;
LABEL_45:
  *(_QWORD *)&v4[4]._os_unfair_lock_opaque = *((_QWORD *)v11 + 3);
  os_unfair_lock_unlock(v14);
  mach_port_deallocate(*MEMORY[0x1E0C83DA0], v6);
  v25 = _edr_states;
  v27 = *(os_unfair_lock_s ***)(_edr_states + 8);
  v26 = *(_QWORD *)(_edr_states + 16);
  if ((unint64_t)v27 >= v26)
  {
    v29 = *(os_unfair_lock_s ***)_edr_states;
    v30 = ((uint64_t)v27 - *(_QWORD *)_edr_states) >> 3;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 61)
      abort();
    v32 = v26 - (_QWORD)v29;
    if (v32 >> 2 > v31)
      v31 = v32 >> 2;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
      v33 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    if (v33)
    {
      if (v33 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v34 = (char *)operator new(8 * v33);
    }
    else
    {
      v34 = 0;
    }
    v35 = &v34[8 * v30];
    *(_QWORD *)v35 = v4;
    v28 = v35 + 8;
    if (v27 != v29)
    {
      do
      {
        v36 = (uint64_t)*--v27;
        *((_QWORD *)v35 - 1) = v36;
        v35 -= 8;
      }
      while (v27 != v29);
      v27 = *(os_unfair_lock_s ***)v25;
    }
    *(_QWORD *)v25 = v35;
    *(_QWORD *)(v25 + 8) = v28;
    *(_QWORD *)(v25 + 16) = &v34[8 * v33];
    if (v27)
      operator delete(v27);
  }
  else
  {
    *v27 = v4;
    v28 = v27 + 1;
  }
  *(_QWORD *)(v25 + 8) = v28;
  return v4;
}

void sub_1845C7174(_Unwind_Exception *a1)
{
  mach_port_name_t v1;
  ipc_space_t *v2;

  mach_port_deallocate(*v2, v1);
  _Unwind_Resume(a1);
}

float CADisplayGetPotentialHeadroom(uint32_t a1)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  unsigned int v5;
  float v6;

  pthread_mutex_lock(&_edr_states_lock);
  v2 = edr_state_for_display(a1);
  v3 = v2;
  if (v2)
  {
    os_unfair_lock_lock(v2 + 1);
    v4 = *(_QWORD *)&v3[4]._os_unfair_lock_opaque;
    if (v4)
    {
      v5 = atomic_load((unsigned int *)(v4 + 4));
      v6 = *(float *)&v5;
    }
    else
    {
      v6 = 1.0;
    }
    os_unfair_lock_unlock(v3 + 1);
  }
  else
  {
    v6 = 1.0;
  }
  pthread_mutex_unlock(&_edr_states_lock);
  return v6;
}

void sub_1845C7214(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&_edr_states_lock);
  _Unwind_Resume(a1);
}

float CADisplayGetReferenceHeadroom(uint32_t a1)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  unsigned int v5;
  float v6;

  pthread_mutex_lock(&_edr_states_lock);
  v2 = edr_state_for_display(a1);
  v3 = v2;
  if (v2)
  {
    os_unfair_lock_lock(v2 + 1);
    v4 = *(_QWORD *)&v3[4]._os_unfair_lock_opaque;
    if (v4)
    {
      v5 = atomic_load((unsigned int *)(v4 + 8));
      v6 = *(float *)&v5;
    }
    else
    {
      v6 = 1.0;
    }
    os_unfair_lock_unlock(v3 + 1);
  }
  else
  {
    v6 = 1.0;
  }
  pthread_mutex_unlock(&_edr_states_lock);
  return v6;
}

void sub_1845C72B4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&_edr_states_lock);
  _Unwind_Resume(a1);
}

_BYTE *CADisplayPrintDisplays()
{
  uint64_t i;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  __CFString *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __CFString *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const __CFString *v94;
  __CFString *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const __CFString *v104;
  __CFString *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __CFString *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __CFString *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  double v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  double v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t j;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void *v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  double v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  const char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  float v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  void *v311;
  void *v312;
  void *v313;
  const char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  void *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t k;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  void *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t m;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  void *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t n;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  void *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  void *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  unint64_t v424;
  char *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  const char *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  const char *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  const char *v449;
  unsigned int v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  const __CFDictionary *v464;
  const __CFDictionary *v465;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  id v475;
  id obj;
  uint64_t v477;
  uint64_t v478;
  void *v479;
  id v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  _QWORD context[3];
  _QWORD v485[3];
  _BYTE v486[128];
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  _BYTE v491[128];
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  _BYTE v496[128];
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  _BYTE v501[128];
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  _BYTE v506[128];
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  uint64_t v511;

  v511 = *MEMORY[0x1E0C80C00];
  v475 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
  memset(v485, 0, sizeof(v485));
  v507 = 0u;
  v508 = 0u;
  v509 = 0u;
  v510 = 0u;
  obj = +[CADisplay displays](CADisplay, "displays");
  v478 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v507, v506, 16);
  if (v478)
  {
    v477 = *(_QWORD *)v508;
    do
    {
      for (i = 0; i != v478; ++i)
      {
        if (*(_QWORD *)v508 != v477)
          objc_enumerationMutation(obj);
        v1 = *(void **)(*((_QWORD *)&v507 + 1) + 8 * i);
        v2 = objc_msgSend(v1, "displayId");
        objc_msgSend((id)objc_msgSend(v1, "name"), "UTF8String");
        objc_msgSend((id)objc_msgSend(v1, "deviceName"), "UTF8String");
        x_stream_printf((uint64_t)v485, "%d: %s (%s)\n", v3, v4, v5, v6, v7, v8, v2);
        if (objc_msgSend((id)objc_msgSend(v1, "availableModes"), "count"))
        {
          v15 = objc_msgSend(v1, "seed");
          x_stream_printf((uint64_t)v485, "\tseed: %u\n", v16, v17, v18, v19, v20, v21, v15);
          v22 = objc_msgSend(v1, "connectionSeed");
          x_stream_printf((uint64_t)v485, "\tconnectionSeed: %u\n", v23, v24, v25, v26, v27, v28, v22);
          objc_msgSend(v1, "bounds");
          x_stream_printf((uint64_t)v485, "\tbounds: [%g %g %g %g]\n", v29, v30, v31, v32, v33, v34, v35);
          objc_msgSend(v1, "frame");
          x_stream_printf((uint64_t)v485, "\tframe: [%g %g %g %g]\n", v36, v37, v38, v39, v40, v41, v42);
          objc_msgSend(v1, "physicalSize");
          x_stream_printf((uint64_t)v485, "\tphysicalSize: %g in x %g in\n", v43, v44, v45, v46, v47, v48, v49);
          objc_msgSend(v1, "nativeSize");
          x_stream_printf((uint64_t)v485, "\tnativeSize: %d x %d pixels\n", v51, v52, v53, v54, v55, v56, (int)v50);
          objc_msgSend(v1, "logicalScale");
          v58 = v57;
          objc_msgSend(v1, "minimumLogicalScale");
          objc_msgSend(v1, "maximumLogicalScale");
          x_stream_printf((uint64_t)v485, "\tlogicalScale: %g x %g (min %g, max %g)\n", v59, v60, v61, v62, v63, v64, v58);
          v65 = objc_msgSend(v1, "pointScale");
          x_stream_printf((uint64_t)v485, "\tpointScale: %u\n", v66, v67, v68, v69, v70, v71, v65);
          v72 = (void *)objc_msgSend(v1, "stateControl");
          v479 = v1;
          if (v72)
          {
            v73 = v72;
            v74 = objc_msgSend(v72, "displayState");
            v75 = objc_msgSend(v73, "powerState");
            v76 = objc_msgSend(v73, "targetDisplayState");
            v77 = objc_msgSend(v73, "targetPowerState");
            v78 = CFSTR("unknown");
            if (v74 <= 3)
              v78 = off_1E15A74F0[v74];
            v79 = -[__CFString cStringUsingEncoding:](v78, "cStringUsingEncoding:", 1);
            if (v76 == v74)
            {
              x_stream_printf((uint64_t)v485, "\tdisplayState: %s\n", v80, v81, v82, v83, v84, v85, v79);
            }
            else
            {
              v86 = v79;
              v87 = CFSTR("unknown");
              if (v76 <= 3)
                v87 = off_1E15A74F0[v76];
              -[__CFString cStringUsingEncoding:](v87, "cStringUsingEncoding:", 1);
              x_stream_printf((uint64_t)v485, "\tdisplayState: %s -> %s\n", v88, v89, v90, v91, v92, v93, v86);
            }
            if (v75 == 1)
              v94 = CFSTR("on");
            else
              v94 = CFSTR("unknown");
            if (v75)
              v95 = (__CFString *)v94;
            else
              v95 = CFSTR("off");
            v96 = -[__CFString cStringUsingEncoding:](v95, "cStringUsingEncoding:", 1);
            v103 = v96;
            if (v77 == v75)
            {
              x_stream_printf((uint64_t)v485, "\tpowerState: %s\n", v97, v98, v99, v100, v101, v102, v96);
            }
            else
            {
              if (v77 == 1)
                v104 = CFSTR("on");
              else
                v104 = CFSTR("unknown");
              if (v77)
                v105 = (__CFString *)v104;
              else
                v105 = CFSTR("off");
              -[__CFString cStringUsingEncoding:](v105, "cStringUsingEncoding:", 1);
              x_stream_printf((uint64_t)v485, "\tpowerState: %s -> %s\n", v106, v107, v108, v109, v110, v111, v103);
            }
            v112 = objc_msgSend(v73, "_copyAllPowerAssertionInfo");
            v1 = v479;
            if (v112)
            {
              v119 = (void *)v112;
              x_stream_printf((uint64_t)v485, "\tpowerAssertions:\n%s", v113, v114, v115, v116, v117, v118, v112);
              free(v119);
            }
          }
          v120 = (void *)objc_msgSend(v1, "transportType");
          if (v120)
          {
            v121 = objc_msgSend(v120, "UTF8String");
            x_stream_printf((uint64_t)v485, "\ttransportType: %s\n", v122, v123, v124, v125, v126, v127, v121);
          }
          v128 = (__CFString *)objc_msgSend(v1, "nativeOrientation");
          if (v128 == CFSTR("rot0"))
          {
            v135 = 0;
          }
          else if (v128 == CFSTR("rot90"))
          {
            v135 = 90;
          }
          else if (v128 == CFSTR("rot180"))
          {
            v135 = 180;
          }
          else
          {
            v135 = 270;
          }
          x_stream_printf((uint64_t)v485, "\tnativeOrientation: %d\n", v129, v130, v131, v132, v133, v134, v135);
          v136 = (__CFString *)objc_msgSend(v1, "currentOrientation");
          if (v136 == CFSTR("rot0"))
          {
            v143 = 0;
          }
          else if (v136 == CFSTR("rot90"))
          {
            v143 = 90;
          }
          else if (v136 == CFSTR("rot180"))
          {
            v143 = 180;
          }
          else
          {
            v143 = 270;
          }
          x_stream_printf((uint64_t)v485, "\tcurrentOrientation: %d\n", v137, v138, v139, v140, v141, v142, v143);
          v144 = objc_msgSend((id)objc_msgSend(v1, "currentMode"), "width");
          objc_msgSend((id)objc_msgSend(v1, "currentMode"), "height");
          objc_msgSend((id)objc_msgSend(v1, "currentMode"), "refreshRate");
          objc_msgSend((id)objc_msgSend(v1, "currentMode"), "isVirtual");
          objc_msgSend((id)objc_msgSend(v1, "currentMode"), "isVRR");
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "currentMode"), "colorMode"), "UTF8String");
          objc_msgSend((id)objc_msgSend(v1, "currentMode"), "bitDepth");
          objc_msgSend((id)objc_msgSend(v1, "currentMode"), "isHighBandwidth");
          objc_msgSend((id)objc_msgSend(v1, "currentMode"), "preferredScale");
          x_stream_printf((uint64_t)v485, "\tcurrentMode: %d x %d, %g hz,%s%s %s, %u-bit%s, %lux\n", v145, v146, v147, v148, v149, v150, v144);
          objc_msgSend(v1, "refreshRate");
          x_stream_printf((uint64_t)v485, "\trefreshRate: %g Hz\n", v152, v153, v154, v155, v156, v157, COERCE__INT64(1.0 / v151));
          objc_msgSend(v1, "heartbeatRate");
          x_stream_printf((uint64_t)v485, "\theartbeatRate: %g Hz\n", v159, v160, v161, v162, v163, v164, COERCE__INT64(1.0 / v158));
          v165 = objc_msgSend(v1, "minimumFrameDuration");
          x_stream_printf((uint64_t)v485, "\tminimumFrameDuration: %d\n", v166, v167, v168, v169, v170, v171, v165);
          v172 = objc_msgSend((id)objc_msgSend(v1, "preferredMode"), "width");
          objc_msgSend((id)objc_msgSend(v1, "preferredMode"), "height");
          objc_msgSend((id)objc_msgSend(v1, "preferredMode"), "refreshRate");
          objc_msgSend((id)objc_msgSend(v1, "preferredMode"), "isVirtual");
          objc_msgSend((id)objc_msgSend(v1, "preferredMode"), "isVRR");
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "preferredMode"), "colorMode"), "UTF8String");
          objc_msgSend((id)objc_msgSend(v1, "preferredMode"), "bitDepth");
          objc_msgSend((id)objc_msgSend(v1, "preferredMode"), "isHighBandwidth");
          objc_msgSend((id)objc_msgSend(v1, "preferredMode"), "preferredScale");
          x_stream_printf((uint64_t)v485, "\tpreferredMode: %d x %d, %g hz,%s%s %s, %u-bit%s, %lux\n", v173, v174, v175, v176, v177, v178, v172);
          x_stream_printf((uint64_t)v485, "\tavailable modes:\n", v179, v180, v181, v182, v183, v184, v468);
          v504 = 0u;
          v505 = 0u;
          v502 = 0u;
          v503 = 0u;
          v480 = (id)objc_msgSend(v1, "availableModes");
          v482 = objc_msgSend(v480, "countByEnumeratingWithState:objects:count:", &v502, v501, 16);
          if (v482)
          {
            v483 = 0;
            v481 = *(_QWORD *)v503;
            do
            {
              for (j = 0; j != v482; ++j)
              {
                if (*(_QWORD *)v503 != v481)
                  objc_enumerationMutation(v480);
                v186 = *(void **)(*((_QWORD *)&v502 + 1) + 8 * j);
                objc_msgSend(v186, "width");
                objc_msgSend(v186, "height");
                objc_msgSend(v186, "refreshRate");
                objc_msgSend(v186, "isVirtual");
                objc_msgSend(v186, "isVRR");
                objc_msgSend((id)objc_msgSend(v186, "colorMode"), "UTF8String");
                objc_msgSend(v186, "bitDepth");
                objc_msgSend(v186, "isHighBandwidth");
                objc_msgSend(v186, "preferredScale");
                x_stream_printf((uint64_t)v485, "\t\t%d: %d x %d, %g Hz,%s%s %s, %u-bit%s, %lux", v187, v188, v189, v190, v191, v192, v483 + j);
                if (objc_msgSend(v186, "maximumSourceWidth"))
                {
                  v193 = objc_msgSend(v186, "maximumSourceWidth");
                  x_stream_printf((uint64_t)v485, ", maxWidth:%d", v194, v195, v196, v197, v198, v199, v193);
                }
                if (objc_msgSend(v186, "maximumSourceHeight"))
                {
                  v200 = objc_msgSend(v186, "maximumSourceHeight");
                  x_stream_printf((uint64_t)v485, ", maxHeight:%d", v201, v202, v203, v204, v205, v206, v200);
                }
                if (objc_msgSend(v186, "maximumSourceBandwidth"))
                {
                  v213 = objc_msgSend(v186, "maximumSourceBandwidth");
                  x_stream_printf((uint64_t)v485, ", maxBandwidth:%d", v214, v215, v216, v217, v218, v219, v213);
                }
                x_stream_printf((uint64_t)v485, "\n", v207, v208, v209, v210, v211, v212, v469);
              }
              v483 = (v483 + j);
              v482 = objc_msgSend(v480, "countByEnumeratingWithState:objects:count:", &v502, v501, 16);
            }
            while (v482);
          }
          v220 = v479;
          v221 = (void *)objc_msgSend(v479, "uniqueId");
          if (v221)
          {
            v222 = objc_msgSend(v221, "UTF8String");
            x_stream_printf((uint64_t)v485, "\tUUID: %s\n", v223, v224, v225, v226, v227, v228, v222);
          }
          v229 = (void *)objc_msgSend(v479, "containerId");
          if (v229)
          {
            v230 = objc_msgSend(v229, "UTF8String");
            x_stream_printf((uint64_t)v485, "\tcontainerID: %s\n", v231, v232, v233, v234, v235, v236, v230);
          }
          objc_msgSend(v479, "latency");
          if (v237 != 0.0)
          {
            objc_msgSend(v479, "latency");
            x_stream_printf((uint64_t)v485, "\tlatency: %g\n", v238, v239, v240, v241, v242, v243, v244);
          }
          v245 = objc_msgSend(v479, "displayType");
          v252 = "unknown";
          if (v245 <= 4)
            v252 = off_1E159C488[v245];
          x_stream_printf((uint64_t)v485, "\tdisplayType: %s\n", v246, v247, v248, v249, v250, v251, (uint64_t)v252);
          if (objc_msgSend(v479, "supportsExtendedColors"))
            x_stream_printf((uint64_t)v485, "\tsupportsExtendedColors: YES\n", v253, v254, v255, v256, v257, v258, v470);
          if (objc_msgSend(v479, "isOverscanned"))
          {
            x_stream_printf((uint64_t)v485, "\toverscanned: YES\n", v259, v260, v261, v262, v263, v264, v470);
            objc_msgSend(v479, "safeBounds");
            x_stream_printf((uint64_t)v485, "\tsafeBounds: [%g %g %g %g]\n", v265, v266, v267, v268, v269, v270, v271);
            objc_msgSend(v479, "overscanAmounts");
            x_stream_printf((uint64_t)v485, "\toverscanAmounts: [%g %g]\n", v272, v273, v274, v275, v276, v277, v278);
            v279 = objc_msgSend((id)objc_msgSend(v479, "overscanAdjustment"), "UTF8String");
            x_stream_printf((uint64_t)v485, "\toverscanAdjustment: %s\n", v280, v281, v282, v283, v284, v285, v279);
          }
          if (objc_msgSend(v479, "isCloned"))
            x_stream_printf((uint64_t)v485, "\tcloned: YES\n", v286, v287, v288, v289, v290, v291, v470);
          if (objc_msgSend(v479, "isCloning"))
            x_stream_printf((uint64_t)v485, "\tcloning: YES\n", v292, v293, v294, v295, v296, v297, v470);
          if (objc_msgSend(v479, "isCloningSupported"))
            x_stream_printf((uint64_t)v485, "\tcloningSupported: YES\n", v298, v299, v300, v301, v302, v303, v470);
          if (!objc_msgSend(v479, "displayType"))
          {
            objc_msgSend(v479, "autoLuminanceBoost");
            x_stream_printf((uint64_t)v485, "\tautoLuminanceBoost: %f\n", v305, v306, v307, v308, v309, v310, COERCE__INT64(v304));
          }
          if (objc_msgSend(v479, "displayType") == 1 && objc_msgSend((id)objc_msgSend(v479, "currentMode"), "width"))
          {
            v311 = (void *)objc_msgSend(v479, "preferences");
            if (v311)
            {
              v312 = v311;
              v313 = (void *)objc_msgSend(v311, "preferredHdrMode");
              if (v313)
                v314 = (const char *)objc_msgSend(v313, "UTF8String");
              else
                v314 = "Unspecified";
              objc_msgSend(v312, "matchContent");
              x_stream_printf((uint64_t)v485, "\tpreferences: preferredHdrMode - %s, contentMatch - %s\n", v315, v316, v317, v318, v319, v320, (uint64_t)v314);
            }
            v321 = objc_msgSend(v479, "supportedHDRModes");
            if (v321)
            {
              v328 = (void *)v321;
              x_stream_printf((uint64_t)v485, "\tsupportedHDRModes: ", v322, v323, v324, v325, v326, v327, v470);
              v499 = 0u;
              v500 = 0u;
              v497 = 0u;
              v498 = 0u;
              v329 = objc_msgSend(v328, "countByEnumeratingWithState:objects:count:", &v497, v496, 16);
              if (v329)
              {
                v336 = v329;
                v337 = *(_QWORD *)v498;
                do
                {
                  for (k = 0; k != v336; ++k)
                  {
                    if (*(_QWORD *)v498 != v337)
                      objc_enumerationMutation(v328);
                    v339 = objc_msgSend(*(id *)(*((_QWORD *)&v497 + 1) + 8 * k), "UTF8String");
                    x_stream_printf((uint64_t)v485, "%s ", v340, v341, v342, v343, v344, v345, v339);
                  }
                  v336 = objc_msgSend(v328, "countByEnumeratingWithState:objects:count:", &v497, v496, 16);
                }
                while (v336);
              }
              x_stream_printf((uint64_t)v485, "\n", v330, v331, v332, v333, v334, v335, v471);
              v220 = v479;
            }
            v346 = objc_msgSend(v220, "preferredHDRModes");
            if (v346)
            {
              v353 = (void *)v346;
              x_stream_printf((uint64_t)v485, "\tpreferredHDRModes: ", v347, v348, v349, v350, v351, v352, v470);
              v494 = 0u;
              v495 = 0u;
              v492 = 0u;
              v493 = 0u;
              v354 = objc_msgSend(v353, "countByEnumeratingWithState:objects:count:", &v492, v491, 16);
              if (v354)
              {
                v361 = v354;
                v362 = *(_QWORD *)v493;
                do
                {
                  for (m = 0; m != v361; ++m)
                  {
                    if (*(_QWORD *)v493 != v362)
                      objc_enumerationMutation(v353);
                    v364 = objc_msgSend(*(id *)(*((_QWORD *)&v492 + 1) + 8 * m), "UTF8String");
                    x_stream_printf((uint64_t)v485, "%s ", v365, v366, v367, v368, v369, v370, v364);
                  }
                  v361 = objc_msgSend(v353, "countByEnumeratingWithState:objects:count:", &v492, v491, 16);
                }
                while (v361);
              }
              x_stream_printf((uint64_t)v485, "\n", v355, v356, v357, v358, v359, v360, v472);
              v220 = v479;
            }
            v371 = objc_msgSend(v220, "allowedHDRModes");
            if (v371)
            {
              v378 = (void *)v371;
              x_stream_printf((uint64_t)v485, "\tallowedHDRModes: ", v372, v373, v374, v375, v376, v377, v470);
              v489 = 0u;
              v490 = 0u;
              v487 = 0u;
              v488 = 0u;
              v379 = objc_msgSend(v378, "countByEnumeratingWithState:objects:count:", &v487, v486, 16);
              if (v379)
              {
                v386 = v379;
                v387 = *(_QWORD *)v488;
                do
                {
                  for (n = 0; n != v386; ++n)
                  {
                    if (*(_QWORD *)v488 != v387)
                      objc_enumerationMutation(v378);
                    v389 = objc_msgSend(*(id *)(*((_QWORD *)&v487 + 1) + 8 * n), "UTF8String");
                    x_stream_printf((uint64_t)v485, "%s ", v390, v391, v392, v393, v394, v395, v389);
                  }
                  v386 = objc_msgSend(v378, "countByEnumeratingWithState:objects:count:", &v487, v486, 16);
                }
                while (v386);
              }
              x_stream_printf((uint64_t)v485, "\n", v380, v381, v382, v383, v384, v385, v473);
              v220 = v479;
            }
            v396 = (void *)objc_msgSend(v220, "productName");
            if (v396)
            {
              v397 = objc_msgSend(v396, "UTF8String");
              x_stream_printf((uint64_t)v485, "\tproductName: %s\n", v398, v399, v400, v401, v402, v403, v397);
            }
            if (objc_msgSend(v220, "isForceFixedRateLinksEnabled"))
              x_stream_printf((uint64_t)v485, "\tfixedRateLinksEnabled: YES\n", v404, v405, v406, v407, v408, v409, v470);
            v410 = objc_msgSend(v220, "externalDisplayAttributes");
            if (v410)
            {
              v417 = (void *)v410;
              x_stream_printf((uint64_t)v485, "\tdisplay attributes:\n", v411, v412, v413, v414, v415, v416, v470);
              v424 = objc_msgSend(v417, "dolbyVision") - 1;
              v425 = "\t\tDolbyVision: none\n";
              if (v424 <= 2)
                v425 = off_1E159C4B0[v424];
              x_stream_printf((uint64_t)v485, v425, v418, v419, v420, v421, v422, v423, v474);
              v426 = objc_msgSend(v417, "pqEOTF");
              if (v426 == 2)
                v433 = "supported";
              else
                v433 = "unknown";
              if (v426 == 1)
                v433 = "unsupported";
              x_stream_printf((uint64_t)v485, "\t\tPQ: %s\n", v427, v428, v429, v430, v431, v432, (uint64_t)v433);
              v434 = objc_msgSend(v417, "hdrStaticMetadataType1");
              if (v434 == 2)
                v441 = "supported";
              else
                v441 = "unknown";
              if (v434 == 1)
                v441 = "unsupported";
              x_stream_printf((uint64_t)v485, "\t\tHDR Static Metadata: %s\n", v435, v436, v437, v438, v439, v440, (uint64_t)v441);
              v442 = objc_msgSend(v417, "bt2020YCC");
              if (v442 == 2)
                v449 = "supported";
              else
                v449 = "unknown";
              if (v442 == 1)
                v449 = "unsupported";
              x_stream_printf((uint64_t)v485, "\t\tBT2020 YCC: %s\n", v443, v444, v445, v446, v447, v448, (uint64_t)v449);
              v450 = objc_msgSend(v417, "legacyHDMIEDID");
              x_stream_printf((uint64_t)v485, "\t\tLegacy HDMI EDID: %d\n", v451, v452, v453, v454, v455, v456, v450);
              v220 = v479;
            }
          }
          v457 = objc_msgSend(v220, "odLUTVersion");
          if ((_DWORD)v457)
            x_stream_printf((uint64_t)v485, "\todLUTVersion: %d\n", v458, v459, v460, v461, v462, v463, v457);
          if (!objc_msgSend(v220, "displayType"))
          {
            v464 = (const __CFDictionary *)objc_msgSend(v220, "_copyDebugProperties");
            if (v464)
            {
              v465 = v464;
              context[2] = 1;
              context[0] = CADisplayPrintDisplays::$_0::__invoke;
              context[1] = v485;
              CFDictionaryApplyFunction(v464, (CFDictionaryApplierFunction)CADisplayPrintDisplays::$_0::__invoke, context);
              CFRelease(v465);
            }
          }
        }
        else
        {
          x_stream_printf((uint64_t)v485, "\toffline\n", v9, v10, v11, v12, v13, v14, v467);
        }
      }
      v478 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v507, v506, 16);
    }
    while (v478);
  }

  return x_stream_finish((uint64_t)v485);
}

void CADisplayPrintDisplays::$_0::__invoke(const __CFString *this, const __CFString *a2, _QWORD *a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *CString;
  char *v14;
  CFTypeID v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[2];
  _OWORD v36[2];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = a3[1];
  memset(v36, 0, sizeof(v36));
  memset(v35, 0, sizeof(v35));
  CString = CA_CFStringGetCString(this, (char *)v36, 32);
  if (*((_DWORD *)a3 + 4) == 1)
    v14 = "\t";
  else
    v14 = "\t\t";
  x_stream_printf(v6, v14, v7, v8, v9, v10, v11, v12, v34);
  v15 = CFGetTypeID(a2);
  if (v15 == CFBooleanGetTypeID())
  {
    x_stream_printf(v6, "%s: %s\n", v16, v17, v18, v19, v20, v21, (uint64_t)CString);
  }
  else if (v15 == CFStringGetTypeID())
  {
    CA_CFStringGetCString(a2, (char *)v35, 32);
    x_stream_printf(v6, "%s: %s\n", v22, v23, v24, v25, v26, v27, (uint64_t)CString);
  }
  else if (v15 == CFDictionaryGetTypeID())
  {
    x_stream_printf(v6, "%s:\n", v28, v29, v30, v31, v32, v33, (uint64_t)CString);
    ++*((_DWORD *)a3 + 4);
    CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)*a3, a3);
    --*((_DWORD *)a3 + 4);
  }
}

void CA::CG::Renderer::~Renderer(CA::CG::Renderer *this)
{
  CA::CG::Renderer::~Renderer(this);
  JUMPOUT(0x186DBD990);
}

{
  uint64_t i;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t j;
  uint64_t k;

  *(_QWORD *)this = &off_1E1593A98;
  if (*((_QWORD *)this + 1))
    __assert_rtn("~Renderer", "cg-renderer.cpp", 139, "!_ctx");
  if (*((_QWORD *)this + 172))
    CGGlyphLockRelease();
  for (i = 0; i != 24; ++i)
  {
    v3 = (unsigned int *)*((_QWORD *)this + 8 * i + 334);
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = *((_QWORD *)this + 161);
  if (v7)
    MEMORY[0x186DBD978](v7, 0x1000C803C748740);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 4184);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 2584);
  for (j = 2352; j != 1200; j -= 192)
    CA::OGL::Mosaic::purge((CA::CG::Renderer *)((char *)this + j));
  for (k = 792; k != -184; k -= 488)
  {
    if (*(_QWORD *)((char *)this + k))
      __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
  }
}

uint64_t CA::CG::Renderer::attached_to_drawable()
{
  return 0;
}

os_log_t ___ZN2CA2CGL11cg_perf_logEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreanimation", "CG.Performance");
  CA::CG::cg_perf_log(void)::log = (uint64_t)result;
  return result;
}

void ___ZN2CA2CG8Renderer14release_objectEPKv_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t i;

  v2 = (void *)MEMORY[0x186DBE2E4]();
  for (i = 0; i != 1024; i += 8)
    CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1 + 32) + i));
  free(*(void **)(a1 + 32));
  objc_autoreleasePoolPop(v2);
}

void CA::CG::Renderer::pop_transparency_layer(CA::CG::Renderer *this, CA::CG::TransparencyLayer *a2)
{
  uint64_t v4;
  __int16 v5;

  if (*((CA::CG::TransparencyLayer **)this + 171) == a2)
  {
    if ((*((_BYTE *)a2 + 196) & 8) != 0)
    {
      v4 = *((_QWORD *)this + 1);
      CA::OGL::Context::set_gstate(v4, **(_QWORD **)(v4 + 232));
      CA::OGL::Context::pop_surface((CA::OGL::Context *)v4);
      v5 = *(_WORD *)(v4 + 816) & 0x8FFF | ((*((_BYTE *)a2 + 176) & 7) << 12);
      *(_WORD *)(v4 + 816) = v5;
      *(_WORD *)(v4 + 816) = v5 & 0xFFFB | (*((_BYTE *)a2 + 196) >> 2) & 4;
      *((_BYTE *)a2 + 196) &= ~8u;
    }
    *((_QWORD *)this + 171) = 0;
  }
}

void ___ZN2CA10ScalerUtil12ScalerLimits6limitsEv_block_invoke()
{
  const __CFDictionary *v0;
  const __CFDictionary *v1;
  CFTypeID v2;
  const void *Value;
  int v4;
  const void *v5;
  const void *v6;
  int v7;
  const void *v8;
  const void *v9;
  int v10;
  const void *v11;
  const void *v12;
  int v13;
  const void *v14;
  const void *v15;
  int v16;
  const void *v17;
  const void *v18;
  int v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  BOOL v28;
  const void *v29;
  BOOL v30;
  const void *v31;
  const void *v32;
  float v33;
  float v34;
  const void *v35;
  const void *v36;
  float v37;

  *(_OWORD *)CA::ScalerUtil::ScalerLimits::limits(void)::limits = xmmword_18474DF70;
  *(_OWORD *)&dword_1EDD11080 = xmmword_18474DF80;
  xmmword_1EDD11090 = xmmword_18474DF90;
  *(_OWORD *)&dword_1EDD110A0 = xmmword_18474DFA0;
  dword_1EDD110CC = 0;
  if (CA::ScalerUtil::get_io_service(void)::once != -1)
    dispatch_once(&CA::ScalerUtil::get_io_service(void)::once, &__block_literal_global_52);
  if (CA::ScalerUtil::get_io_service(void)::scaler_service)
  {
    v0 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(CA::ScalerUtil::get_io_service(void)::scaler_service, "IOService", CFSTR("IOSurfaceAcceleratorCapabilitiesDict"), 0, 0);
    if (v0)
    {
      v1 = v0;
      v2 = CFGetTypeID(v0);
      if (v2 == CFDictionaryGetTypeID())
      {
        Value = CFDictionaryGetValue(v1, CFSTR("IOSurfaceAcceleratorCapabilitiesMinSourceWidth"));
        if (Value)
          v4 = CA_CFIntValue(Value);
        else
          v4 = 0;
        v5 = CFDictionaryGetValue(v1, CFSTR("IOSurfaceAcceleratorCapabilitiesMinSourceHeight"));
        if (v5)
          LODWORD(v5) = CA_CFIntValue(v5);
        if (v4 >= 1)
          CA::ScalerUtil::ScalerLimits::limits(void)::limits[0] = v4;
        if ((int)v5 >= 1)
          dword_1EDD11074 = (int)v5;
        v6 = CFDictionaryGetValue(v1, CFSTR("IOSurfaceAcceleratorCapabilitiesMaxSourceWidth"));
        if (v6)
          v7 = CA_CFIntValue(v6);
        else
          v7 = 0;
        v8 = CFDictionaryGetValue(v1, CFSTR("IOSurfaceAcceleratorCapabilitiesMaxSourceHeight"));
        if (v8)
          LODWORD(v8) = CA_CFIntValue(v8);
        if (v7)
          dword_1EDD11078 = v7;
        if ((int)v8 >= 1)
          dword_1EDD1107C = (int)v8;
        v9 = CFDictionaryGetValue(v1, CFSTR("IOSurfaceAcceleratorCapabilitiesMinDestWidth"));
        if (v9)
          v10 = CA_CFIntValue(v9);
        else
          v10 = 0;
        v11 = CFDictionaryGetValue(v1, CFSTR("IOSurfaceAcceleratorCapabilitiesMinDestHeight"));
        if (v11)
          LODWORD(v11) = CA_CFIntValue(v11);
        if (v10 >= 1)
          dword_1EDD11080 = v10;
        if ((int)v11 >= 1)
          dword_1EDD11084 = (int)v11;
        v12 = CFDictionaryGetValue(v1, CFSTR("IOSurfaceAcceleratorCapabilitiesMaxDestWidth"));
        if (v12)
          v13 = CA_CFIntValue(v12);
        else
          v13 = 0;
        v14 = CFDictionaryGetValue(v1, CFSTR("IOSurfaceAcceleratorCapabilitiesMaxDestHeight"));
        if (v14)
          LODWORD(v14) = CA_CFIntValue(v14);
        if (v13 >= 1)
          dword_1EDD11088 = v13;
        if ((int)v14 >= 1)
          dword_1EDD1108C = (int)v14;
        v15 = CFDictionaryGetValue(v1, CFSTR("IOSurfaceAcceleratorCapabilitiesMaxHUpscale"));
        if (v15)
          v16 = CA_CFIntValue(v15);
        else
          v16 = 0;
        v17 = CFDictionaryGetValue(v1, CFSTR("IOSurfaceAcceleratorCapabilitiesMaxVUpscale"));
        if (v17)
          LODWORD(v17) = CA_CFIntValue(v17);
        if (v16 >= 1)
          *((float *)&xmmword_1EDD11090 + 2) = (float)v16;
        if ((int)v17 >= 1)
          *((float *)&xmmword_1EDD11090 + 3) = (float)(int)v17;
        v18 = CFDictionaryGetValue(v1, CFSTR("IOSurfaceAcceleratorCapabilitiesMaxHDownscale"));
        if (v18)
          v19 = CA_CFIntValue(v18);
        else
          v19 = 0;
        v20 = CFDictionaryGetValue(v1, CFSTR("IOSurfaceAcceleratorCapabilitiesMaxVDownscale"));
        if (v20)
          LODWORD(v20) = CA_CFIntValue(v20);
        if (v19 >= 1)
          *(float *)&xmmword_1EDD11090 = 1.0 / (float)v19;
        if ((int)v20 >= 1)
          *((float *)&xmmword_1EDD11090 + 1) = 1.0 / (float)(int)v20;
        v21 = CFDictionaryGetValue(v1, CFSTR("IOSurfaceAcceleratorFilterVerticalTapsCount"));
        if (v21)
          LODWORD(v21) = CA_CFIntValue(v21);
        dword_1EDD110B0 = (int)v21;
        v22 = CFDictionaryGetValue(v1, CFSTR("IOSurfaceAcceleratorFilterVerticalPhasesCount"));
        if (v22)
          LODWORD(v22) = CA_CFIntValue(v22);
        dword_1EDD110B4 = (int)v22;
        v23 = CFDictionaryGetValue(v1, CFSTR("IOSurfaceAcceleratorFilterHorizontalTapsCount"));
        if (v23)
          LODWORD(v23) = CA_CFIntValue(v23);
        dword_1EDD110B8 = (int)v23;
        v24 = CFDictionaryGetValue(v1, CFSTR("IOSurfaceAcceleratorFilterHorizontalPhasesCount"));
        if (v24)
          LODWORD(v24) = CA_CFIntValue(v24);
        dword_1EDD110BC = (int)v24;
        v25 = CFDictionaryGetValue(v1, CFSTR("IOSurfaceAcceleratorFilterCoefficientsPrePointBits"));
        if (v25)
          LODWORD(v25) = CA_CFIntValue(v25);
        dword_1EDD110C0 = (int)v25;
        v26 = CFDictionaryGetValue(v1, CFSTR("IOSurfaceAcceleratorFilterCoefficientsPostPointBits"));
        if (v26)
          LODWORD(v26) = CA_CFIntValue(v26);
        dword_1EDD110C4 = (int)v26;
        unk_1EDD110C8 = dword_1EDD110C0 + (_DWORD)v26;
        v27 = CFDictionaryGetValue(v1, CFSTR("kSurfaceAcceleratorCapabilitiesAccessibility"));
        if (v27)
          v28 = CA_CFIntValue(v27) != 0;
        else
          v28 = 0;
        LOBYTE(dword_1EDD110CC) = v28;
        v29 = CFDictionaryGetValue(v1, CFSTR("kSurfaceAcceleratorCapabilitiesColorManager"));
        if (v29)
          v30 = CA_CFIntValue(v29) != 0;
        else
          v30 = 0;
        BYTE1(dword_1EDD110CC) = v30;
        v31 = CFDictionaryGetValue(v1, CFSTR("IOSurfaceAcceleratorCapabilitiesDirectionalScaling"));
        if (v31)
          LOBYTE(v31) = CA_CFBoolValue(v31);
        BYTE2(dword_1EDD110CC) = (_BYTE)v31;
        v32 = CFDictionaryGetValue(v1, CFSTR("IOSurfaceAcceleratorCapabilitiesASEPolyMaxHRatio"));
        v33 = 0.0;
        v34 = 0.0;
        if (v32)
          v34 = (float)(int)(2 * CA_CFIntValue(v32));
        v35 = CFDictionaryGetValue(v1, CFSTR("IOSurfaceAcceleratorCapabilitiesASEPolyMaxVRatio"));
        if (v35)
          v33 = (float)(int)(2 * CA_CFIntValue(v35));
        dword_1EDD110A8 = LODWORD(v34);
        dword_1EDD110AC = LODWORD(v33);
        v36 = CFDictionaryGetValue(v1, CFSTR("IOSurfaceAcceleratorCapabilitiesASEMinRatio"));
        if (v36)
          v37 = (float)(int)CA_CFIntValue(v36);
        else
          v37 = 0.0;
        dword_1EDD110A0 = LODWORD(v37);
        *(float *)algn_1EDD110A4 = v37;
      }
      CFRelease(v1);
    }
  }
}

uint64_t ___ZN2CA10ScalerUtil14get_io_serviceEv_block_invoke()
{
  mach_port_t v0;
  const __CFDictionary *v1;
  uint64_t result;
  const __CFDictionary *v3;

  v0 = *MEMORY[0x1E0CBBAA8];
  v1 = IOServiceMatching("AppleM2ScalerCSCDriver");
  result = IOServiceGetMatchingService(v0, v1);
  CA::ScalerUtil::get_io_service(void)::scaler_service = result;
  if (!(_DWORD)result)
  {
    v3 = IOServiceMatching("AppleM2ScalerParavirtDriver");
    result = IOServiceGetMatchingService(v0, v3);
    CA::ScalerUtil::get_io_service(void)::scaler_service = result;
  }
  return result;
}

BOOL CA::ScalerUtil::has_capability(CA::ScalerUtil *this, const __CFString *a2)
{
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  CFTypeID v5;
  const void *Value;
  _BOOL8 v7;

  if (CA::ScalerUtil::get_io_service(void)::once != -1)
    dispatch_once(&CA::ScalerUtil::get_io_service(void)::once, &__block_literal_global_52);
  if (!CA::ScalerUtil::get_io_service(void)::scaler_service)
    return 0;
  v3 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(CA::ScalerUtil::get_io_service(void)::scaler_service, "IOService", CFSTR("IOSurfaceAcceleratorCapabilitiesDict"), 0, 0);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = CFGetTypeID(v3);
  v7 = v5 == CFDictionaryGetTypeID() && (Value = CFDictionaryGetValue(v4, this)) != 0 && CA_CFBoolValue(Value);
  CFRelease(v4);
  return v7;
}

void CA::WindowServer::VirtualDisplay::~VirtualDisplay(CA::WindowServer::VirtualDisplay *this)
{
  malloc_zone_t *malloc_zone;

  CA::WindowServer::VirtualDisplay::~VirtualDisplay(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  *(_QWORD *)this = off_1E158DD68;
  CA::WindowServer::VirtualDisplay::release_everything(this);
  os_unfair_lock_lock((os_unfair_lock_t)this + 6424);
  v2 = *((_QWORD *)this + 3213);
  if (v2)
    MEMORY[0x186DBD990](v2, 0x1000C40D4C8612BLL);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 6424);
  free(*((void **)this + 3200));
  v3 = (void *)*((_QWORD *)this + 3208);
  if (v3)
    free(v3);
  v4 = (_QWORD *)*((_QWORD *)this + 3205);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = (void *)*((_QWORD *)this + 3203);
  *((_QWORD *)this + 3203) = 0;
  if (v6)
    operator delete(v6);
  CA::WindowServer::Display::~Display(this);
}

double CA::WindowServer::VirtualDisplay::panel_physical_size(CA::WindowServer::VirtualDisplay *this)
{
  return *((double *)this + 3210);
}

double CA::WindowServer::VirtualDisplay::min_scale(CA::WindowServer::VirtualDisplay *this)
{
  return 0.1;
}

double CA::WindowServer::VirtualDisplay::max_scale(CA::WindowServer::VirtualDisplay *this)
{
  return 8.0;
}

uint64_t CA::WindowServer::Display::max_layer_bandwidth(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::min_src_rect_size(CA::WindowServer::Display *this)
{
  return 32;
}

uint64_t CA::WindowServer::Display::max_src_rect_width(CA::WindowServer::Display *this)
{
  return 1920;
}

uint64_t CA::WindowServer::Display::max_src_rect_pixels(CA::WindowServer::Display *this)
{
  return 2304000;
}

uint64_t CA::WindowServer::Display::full_frame_required(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::is_game_mode(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::display_timings_shmem(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::timing_server_frame_interval(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::iosurface_accelerator_supports_size_p(CA::WindowServer::Display *this)
{
  return 1;
}

uint64_t CA::WindowServer::Display::iosurface_accelerator_supports_scale_p(CA::WindowServer::Display *this)
{
  return 1;
}

uint64_t CA::WindowServer::Display::iosurface_accelerator_supports_color_remap(CA::WindowServer::Display *this)
{
  return 1;
}

uint64_t CA::WindowServer::VirtualDisplay::supports_pq(CA::WindowServer::VirtualDisplay *this)
{
  return 1;
}

uint64_t CA::WindowServer::VirtualDisplay::supports_hlg(CA::WindowServer::VirtualDisplay *this)
{
  return 1;
}

uint64_t CA::WindowServer::Display::framebuffer(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::VirtualDisplay::framebuffer_format(CA::WindowServer::VirtualDisplay *this)
{
  unsigned int *v1;

  v1 = (unsigned int *)((char *)this + 25596);
  if ((*((_BYTE *)this + 25608) & 2) != 0
    && CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::VirtualDisplay *)((char *)this + 640)))
  {
    return 1380411457;
  }
  else
  {
    return *v1;
  }
}

uint64_t CA::WindowServer::Display::is_ready(CA::WindowServer::Display *this)
{
  return (*(uint64_t (**)(CA::WindowServer::Display *))(*(_QWORD *)this + 216))(this);
}

uint64_t CA::WindowServer::VirtualDisplay::is_enabled(CA::WindowServer::VirtualDisplay *this)
{
  return *((_BYTE *)this + 25608) & 1;
}

uint64_t CA::WindowServer::VirtualDisplay::set_enabled(uint64_t this, char a2)
{
  *(_BYTE *)(this + 25608) = *(_BYTE *)(this + 25608) & 0xFE | a2;
  return this;
}

uint64_t CA::WindowServer::Display::blanking_removes_power(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::dmrr_enabled(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::force_fixed_display_links(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::flipbook_enabled(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::flipbook_suppressed(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::needs_update(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::ignore_update_p(CA::WindowServer::Display *this, const CA::Render::Update *a2)
{
  return 0;
}

uint64_t CA::WindowServer::VirtualDisplay::can_update(CA::WindowServer::VirtualDisplay *this, double a2, double a3)
{
  return (*((unsigned __int8 *)this + 746) << 31 >> 31) & 0xFB;
}

uint64_t CA::WindowServer::VirtualDisplay::finished_update(CA::WindowServer::VirtualDisplay *this)
{
  return *((unsigned int *)this + 6390);
}

uint64_t CA::WindowServer::Display::composited_update(CA::WindowServer::Display *this)
{
  return (*(uint64_t (**)(CA::WindowServer::Display *))(*(_QWORD *)this + 360))(this);
}

uint64_t CA::WindowServer::Display::work_interval(CA::WindowServer::Display *this)
{
  return 0;
}

CA::Shape *CA::WindowServer::VirtualDisplay::begin_update(CA::Shape ***this, CA::Render::Update *a2)
{
  CA::Shape *result;
  const CA::Shape *v5;
  CA::Shape ***v6;
  CA::Shape **v7;
  CA::Shape **v8;
  _DWORD *buffer;
  const CA::Shape *v10;

  result = (CA::Shape *)((uint64_t (*)(CA::Shape ***))(*this)[27])(this);
  if ((_DWORD)result && this[80])
  {
    v6 = &this[2 * *((unsigned __int8 *)this + 25592) + 3188];
    v7 = this[3194];
    if (v7)
    {
      v8 = (CA::Shape **)*((_QWORD *)a2 + 2);
      do
      {
        if (v7[2])
          CA::shape_union(v7 + 2, v8, v5);
        v7 = (CA::Shape **)*v7;
      }
      while (v7);
    }
    buffer = CA::WindowServer::VirtualDisplay::allocate_buffer((uint64_t)this, (uint64_t)v6, *((_QWORD *)a2 + 36));
    v10 = (const CA::Shape *)*((_QWORD *)buffer + 2);
    if (!v10 || !*((_QWORD *)buffer + 3))
      v10 = (const CA::Shape *)this[27];
    return CA::Render::Update::set_shape(a2, v10);
  }
  return result;
}

uint64_t CA::WindowServer::VirtualDisplay::finish_update(CA::WindowServer::VirtualDisplay *this, CA::Render::Update *a2, unsigned int a3)
{
  uint64_t v6;
  CA::Shape *v7;

  if (!(*(unsigned int (**)(CA::WindowServer::VirtualDisplay *))(*(_QWORD *)this + 216))(this)
    || !*((_QWORD *)this + 80))
  {
    return 0;
  }
  v6 = *((_QWORD *)this + 2 * *((unsigned __int8 *)this + 25592) + 3189);
  v7 = *(CA::Shape **)(v6 + 16);
  if (!v7)
    goto LABEL_10;
  if ((v7 & 1) == 0)
  {
    if (*((_DWORD *)v7 + 1) == 6)
      goto LABEL_11;
    goto LABEL_9;
  }
  if (v7 != (CA::Shape *)1)
  {
LABEL_9:
    CA::Shape::unref(v7);
LABEL_10:
    *(_QWORD *)(v6 + 16) = 1;
  }
LABEL_11:
  *((double *)a2 + 16) = (double)mach_absolute_time();
  return CA::WindowServer::VirtualDisplay::finish_update_((os_unfair_lock_s *)this, a2, a3);
}

uint64_t CA::WindowServer::VirtualDisplay::current_surface(CA::WindowServer::VirtualDisplay *this, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(CA::WindowServer::VirtualDisplay *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 488))(this, 1, a2, 0, a4);
}

uint64_t CA::WindowServer::Display::current_surface_is_read_only(CA::WindowServer::Display *this)
{
  return 0;
}

void CA::WindowServer::Display::present_surface(CA::WindowServer::Display *this, __IOSurface *a2)
{
  abort();
}

void CA::WindowServer::Display::cancel_all_swaps(CA::WindowServer::Display *this)
{
  abort();
}

uint64_t CA::WindowServer::VirtualDisplay::displayed_surface(CA::WindowServer::VirtualDisplay *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2 * *((unsigned __int8 *)this + 25593) + 3189);
  if (v1)
    return *(_QWORD *)(v1 + 24);
  else
    return 0;
}

_DWORD *CA::WindowServer::VirtualDisplay::update_surface(CA::WindowServer::VirtualDisplay *this, int a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  _DWORD *surface;
  uint64_t v12;
  uint64_t v13;
  CFStringRef v14;
  const CA::Bounds *v15;
  CA::WindowServer::Surface *v16;

  v4 = *((_QWORD *)this + 2 * *((unsigned __int8 *)this + 25592) + 3189);
  if (!v4)
    return 0;
  v9 = *((unsigned int *)this + 52);
  v10 = *((unsigned int *)this + 53);
  surface = *(_DWORD **)(v4 + 24);
  v12 = (*(uint64_t (**)(CA::WindowServer::VirtualDisplay *))(*(_QWORD *)this + 200))(this);
  if (byte_1ECDC6AC9
    || (v13 = v12, CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::VirtualDisplay *)((char *)this + 25616))))
  {
    v13 = 1380411457;
  }
  if (CADeviceUseFramebufferCompression::once[0] != -1)
    dispatch_once(CADeviceUseFramebufferCompression::once, &__block_literal_global_22_9761);
  if (!CADeviceUseFramebufferCompression::enable_compression)
    goto LABEL_13;
  if (CADeviceSupportsUniversalCompression::once[0] != -1)
    dispatch_once(CADeviceSupportsUniversalCompression::once, &__block_literal_global_27);
  if (CADeviceSupportsUniversalCompression::universal && !BYTE1(xmmword_1ECDC6A90) && (a3 & 1) == 0)
  {
    v13 = CA::Render::fourcc_compressed_of_type((CA::Render *)v13, 3, 0);
    if (surface)
      goto LABEL_14;
  }
  else
  {
LABEL_13:
    if (surface)
    {
LABEL_14:
      if (surface[14] == (_DWORD)v9
        && surface[15] == (_DWORD)v10
        && (*(uint64_t (**)(_DWORD *))(*(_QWORD *)surface + 216))(surface) == a4
        && surface[16] == (_DWORD)v13)
      {
        return surface;
      }
      goto LABEL_21;
    }
  }
  if (!a2)
    return 0;
LABEL_21:
  v14 = CFStringCreateWithFormat(0, 0, CFSTR("%@ Framebuffer"), *((_QWORD *)this + 1));
  surface = (_DWORD *)CA::WindowServer::Display::allocate_surface((uint64_t)this, v9, v10, (CA::Render *)v13, 0, 2u, 0, a4, (uint64_t)v14, 0);
  CFRelease(v14);
  if (surface)
  {
    if (*(_QWORD *)(v4 + 16))
      CA::shape_union((CA::Shape **)(v4 + 16), (CA::Shape **)this + 25, v15);
    v16 = *(CA::WindowServer::Surface **)(v4 + 24);
    if (v16)
      CA::WindowServer::Surface::unref(v16);
    *(_QWORD *)(v4 + 24) = surface;
  }
  return surface;
}

uint64_t CA::WindowServer::VirtualDisplay::update_surface_has_alpha(CA::WindowServer::VirtualDisplay *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::change_update_seed(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::VirtualDisplay::needs_backstop_window(CA::WindowServer::VirtualDisplay *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::color_flush_color(CA::WindowServer::Display *this)
{
  return 3772776672;
}

uint64_t CA::WindowServer::Display::needs_visible_shape_tracking(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::detach_layer()
{
  return 0;
}

uint64_t CA::WindowServer::Display::detached_layers_valid_p(CA::WindowServer::Display *this, const CA::Render::Update *a2)
{
  return 1;
}

uint64_t CA::WindowServer::Display::detached_edr_layers_valid_p(CA::WindowServer::Display *this, const CA::Render::Update *a2)
{
  return 1;
}

uint64_t CA::WindowServer::Display::needs_cloning_termination(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::allocate_cloning_termination_surface(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::cloning_termination_surface(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::tonemap_surface()
{
  return 0;
}

uint64_t CA::WindowServer::Display::is_detaching(CA::WindowServer::Display *this)
{
  return 0;
}

double CA::WindowServer::Display::detaching_rect@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t CA::WindowServer::Display::presents_metal_layer_on_finish(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::VirtualDisplay::clone_update(os_unfair_lock_s *this, CA::WindowServer::Server *a2, CA::WindowServer::Display *a3, CA::Render::Update *a4, unsigned int *a5, BOOL *a6)
{
  _DWORD *buffer;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  NSObject *v17;
  uint8_t v19[8];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    buffer = CA::WindowServer::VirtualDisplay::allocate_buffer((uint64_t)this, (uint64_t)&this[4 * LOBYTE(this[6398]._os_unfair_lock_opaque) + 6376], *((_QWORD *)a4 + 36));
    v11 = *((_QWORD *)buffer + 3);
    if (!v11)
    {
      v12 = buffer;
      v13 = (*(uint64_t (**)(CA::WindowServer::Display *))(*(_QWORD *)a3 + 1392))(a3);
      v11 = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)&this->_os_unfair_lock_opaque
                                                                                            + 488))(this, 1, 0, v13, 0);
      *((_QWORD *)v12 + 3) = v11;
    }
    v14 = (*(uint64_t (**)(CA::WindowServer::Display *, uint64_t))(*(_QWORD *)a3 + 480))(a3, 1);
    if (v11)
      v15 = v14 == 0;
    else
      v15 = 1;
    if (v15
      || ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v11 + 176))(v11, v14, 0x8000, 0, 0, 0, 0, 1.0) & 1) == 0)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v17 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v19 = 0;
          _os_log_impl(&dword_184457000, v17, OS_LOG_TYPE_ERROR, "VirtualDisplay::clone_update failed to copy surface\n", v19, 2u);
        }
      }
    }
    if (CA::WindowServer::VirtualDisplay::finish_update_(this, a4, *a5))
      return -7;
    else
      return 0;
  }
  else
  {
    return -19;
  }
}

uint64_t CA::WindowServer::Display::update_cloning_flag(CA::WindowServer::Display *this)
{
  return 0;
}

double CA::WindowServer::Display::clone_scale(CA::WindowServer::Display *this, CA::WindowServer::Display *a2)
{
  return 0.0;
}

uint64_t CA::WindowServer::Display::cloning_active(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::clone_exceeds_display_bandwidth_limits_p()
{
  return 0;
}

uint64_t CA::WindowServer::Display::virtual_display_mode(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::VirtualDisplay::set_mode(CA::WindowServer::VirtualDisplay *this, const CA::WindowServer::Display::Mode *a2)
{
  uint64_t result;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int32x4_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  _BOOL4 v24;
  char v25;
  unsigned int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  int32x4_t v33;
  uint64_t v34;
  double v35;
  __int128 v37;
  uint64_t v38;
  void *__p[2];
  _QWORD *v40;
  _QWORD v41[8];

  v41[7] = *MEMORY[0x1E0C80C00];
  result = CA::WindowServer::Display::Mode::operator==(*((_QWORD *)this + 80), *(_QWORD *)a2);
  if ((result & 1) != 0)
    return result;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 560));
  CA::WindowServer::Display::set_mode(this, a2);
  if (*((_QWORD *)this + 6) && (*((_BYTE *)this + 56) & 1) != 0)
  {
    v12 = *((_QWORD *)this + 3202);
    goto LABEL_7;
  }
  v12 = *((_QWORD *)this + 3202);
  v13 = *(_QWORD *)a2;
  if ((CA::WindowServer::Display::Mode::operator==(v12, v13) & 1) != 0)
  {
LABEL_7:
    v14 = 1;
    goto LABEL_8;
  }
  v14 = 0;
  *((_QWORD *)this + 3202) = v13;
  v12 = v13;
LABEL_8:
  v15 = (uint64_t *)((char *)this + 25616);
  __asm { FMOV            V0.2D, #1.0 }
  v37 = _Q0;
  if (v12)
  {
    os_unfair_lock_lock((os_unfair_lock_t)this + 98);
    CA::WindowServer::Display::ModeSet::ModeSet((CA::WindowServer::Display::ModeSet *)__p, (CA::WindowServer::VirtualDisplay *)((char *)this + 400));
    os_unfair_lock_unlock((os_unfair_lock_t)this + 98);
    v22 = (uint64_t *)__p[0];
    v21 = (uint64_t *)__p[1];
    if (__p[0] == __p[1])
    {
      v24 = 1;
    }
    else
    {
      v23 = *v15;
      while ((CA::WindowServer::Display::Mode::operator==(*v22, v23) & 1) == 0)
      {
        if (++v22 == v21)
        {
          v22 = v21;
          break;
        }
      }
      v24 = v22 == v21;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v41);
    std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(v40);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v24)
    {
      *v15 = 0;
LABEL_22:
      (*(void (**)(CA::WindowServer::VirtualDisplay *))(*(_QWORD *)this + 2152))(this);
      v26 = *((_DWORD *)this + 6404);
      LODWORD(v38) = v26 & 0x3FFF;
      HIDWORD(v38) = (v26 >> 14) & 0x3FFF;
      *(_OWORD *)__p = v37;
      CA::WindowServer::Display::set_size((uint64_t)this, (uint64_t)&v38, (uint64_t)&v38, (double *)__p, *(double *)&v37, v27, v28, v29, v30, v31, v32, v33);
      CA::WindowServer::Display::set_mode(this, (CA::WindowServer::VirtualDisplay *)((char *)this + 25616));
      v25 = 0;
      goto LABEL_23;
    }
  }
  if ((v14 & 1) == 0)
    goto LABEL_22;
  v25 = 1;
LABEL_23:
  if (!*((_BYTE *)this + 636) || (v34 = *((_QWORD *)this + 80)) == 0)
  {
    v38 = 0;
    goto LABEL_28;
  }
  if (*((_BYTE *)this + 636) == 2)
  {
    LODWORD(v38) = v34 & 0x3FFF;
    HIDWORD(v38) = (v34 >> 14) & 0x3FFF;
LABEL_28:
    *(_OWORD *)__p = v37;
    CA::WindowServer::Display::set_size((uint64_t)this, (uint64_t)&v38, (uint64_t)&v38, (double *)__p, *(double *)&v37, v5, v6, v7, v8, v9, v10, v11);
  }
  if ((v25 & 1) == 0)
    CA::WindowServer::Display::post_display_changed((uint64_t)this);
  os_unfair_lock_lock((os_unfair_lock_t)this + 6424);
  if (*((_QWORD *)this + 3213))
  {
    v35 = (*(double (**)(CA::WindowServer::VirtualDisplay *))(*(_QWORD *)this + 744))(this);
    if (v35 != 0.0 && (*(_QWORD *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      atomic_store(CAHostTimeWithTime(v35), (unsigned int *)(*((_QWORD *)this + 3213) + 4));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 6424);
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 560));
}

double CA::WindowServer::Display::hardware_refresh_rate(CA::WindowServer::Display *this)
{
  return 0.0166666667;
}

double CA::WindowServer::VirtualDisplay::refresh_rate(CA::WindowServer::VirtualDisplay *this)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 80);
  if (v1 == -1)
    return *((double *)this + 3196);
  v2 = (v1 >> 29) & 0x1FFFFFF;
  if ((_DWORD)v2)
    return 65536.0 / (double)v2;
  else
    return 0.0;
}

uint64_t CA::WindowServer::Display::dynamic_refresh_rate(CA::WindowServer::Display *this)
{
  return (*(uint64_t (**)(CA::WindowServer::Display *))(*(_QWORD *)this + 744))(this);
}

double CA::WindowServer::VirtualDisplay::heartbeat_rate(CA::WindowServer::VirtualDisplay *this)
{
  double v2;
  unint64_t v3;

  if (*((_QWORD *)this + 80) == -1)
    return *((double *)this + 3198);
  v2 = (*(double (**)(CA::WindowServer::VirtualDisplay *))(*(_QWORD *)this + 744))(this);
  LODWORD(v3) = *((_DWORD *)this + 6394);
  return v2 / (double)v3;
}

uint64_t CA::WindowServer::VirtualDisplay::minimum_frame_duration(CA::WindowServer::VirtualDisplay *this)
{
  return *((unsigned int *)this + 6394);
}

uint64_t CA::WindowServer::VirtualDisplay::copy_string(uint64_t a1, int a2, char *a3, size_t a4)
{
  const char *v5;

  if (a2)
    return 0;
  v5 = *(const char **)(a1 + 25600);
  if (!v5 || strlen(*(const char **)(a1 + 25600)) + 1 > a4)
    return 0;
  strcpy(a3, v5);
  return 1;
}

uint64_t CA::WindowServer::Display::preferred_ui_scale(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::convert_logical_orientation(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t CA::WindowServer::Display::unconvert_logical_orientation(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t CA::WindowServer::Display::inverse_color(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::actual_inverse_color(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::allows_edr(CA::WindowServer::Display *this)
{
  return 1;
}

uint64_t CA::WindowServer::Display::grayscale(CA::WindowServer::Display *this)
{
  return 0;
}

float CA::WindowServer::Display::contrast(CA::WindowServer::Display *this)
{
  return 0.0;
}

float CA::WindowServer::Display::sdr_nits(CA::WindowServer::Display *this)
{
  return 100.0;
}

uint64_t CA::WindowServer::Display::set_sdr_nits(CA::WindowServer::Display *this, float a2)
{
  return 0;
}

float CA::WindowServer::Display::brightness_limit(CA::WindowServer::Display *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Display::set_brightness_limit(CA::WindowServer::Display *this, float a2)
{
  return 0;
}

float CA::WindowServer::Display::default_ui_nits(CA::WindowServer::Display *this)
{
  return 200.0;
}

uint64_t CA::WindowServer::Display::needs_brightness_update(CA::WindowServer::Display *this)
{
  return 0;
}

float CA::WindowServer::Display::luma_boost_scale(CA::WindowServer::Display *this)
{
  return 0.0;
}

float CA::WindowServer::Display::temperature(CA::WindowServer::Display *this)
{
  return 0.0;
}

float CA::WindowServer::Display::maximum_brightness(CA::WindowServer::Display *this)
{
  return 1.0;
}

uint64_t CA::WindowServer::Display::brightness_control_disabled(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::needs_low_latency(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::subpixel_layout(CA::WindowServer::Display *this)
{
  return 0;
}

float CA::WindowServer::Display::auto_luminance_boost(CA::WindowServer::Display *this)
{
  return 1.0;
}

float CA::WindowServer::Display::ui_scale_factor(CA::WindowServer::Display *this)
{
  return 1.0;
}

double CA::WindowServer::Display::maximum_hdr_luminance(CA::WindowServer::Display *this)
{
  return 0.0;
}

double CA::WindowServer::Display::maximum_sdr_luminance(CA::WindowServer::Display *this)
{
  return 0.0;
}

double CA::WindowServer::Display::minimum_luminance(CA::WindowServer::Display *this)
{
  return 0.0;
}

double CA::WindowServer::Display::maximum_reference_luminance(CA::WindowServer::Display *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Display::trinity_cabal_config(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::preserve_apple_SRGB_gamma_response(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::set_preset(CA::WindowServer::Display *this)
{
  return 0;
}

void CA::WindowServer::Display::luminance(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t CA::WindowServer::Display::dm_version(CA::WindowServer::Display *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t CA::WindowServer::Display::average_pixel_constraints(CA::WindowServer::Display *this)
{
  return 0;
}

float CA::WindowServer::Display::filtered_ambient_lux(CA::WindowServer::Display *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Display::supports_ambient_adaptation(CA::WindowServer::Display *this)
{
  return 0;
}

float CA::WindowServer::Display::low_ambient_adaptation_strength(CA::WindowServer::Display *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Display::set_low_ambient_adaptation_strength(CA::WindowServer::Display *this, float a2)
{
  return 0;
}

float CA::WindowServer::Display::high_ambient_adaptation_strength(CA::WindowServer::Display *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Display::set_high_ambient_adaptation_strength(CA::WindowServer::Display *this, float a2)
{
  return 0;
}

float CA::WindowServer::Display::indicator_brightness(CA::WindowServer::Display *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Display::set_indicator_brightness(CA::WindowServer::Display *this, float a2)
{
  return 0;
}

float CA::WindowServer::Display::contrast_enhancer_strength(CA::WindowServer::Display *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Display::set_contrast_enhancer_strength(CA::WindowServer::Display *this, float a2)
{
  return 0;
}

double CA::WindowServer::Display::chromaticity@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

float CA::WindowServer::Display::gamma(CA::WindowServer::Display *this)
{
  return 0.0;
}

double CA::WindowServer::Display::edid_attributes@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 28) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double CA::WindowServer::Display::preset_properties@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = 1.0;
  *(_OWORD *)(a1 + 24) = xmmword_18474DF40;
  return result;
}

uint64_t CA::WindowServer::Display::set_preset_properties()
{
  return 0;
}

uint64_t CA::WindowServer::Display::transport_type(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::protection_options(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::supports_color_matrix(CA::WindowServer::Display *this)
{
  return 0;
}

void *CA::WindowServer::Display::ax_ns_color_matrix(CA::WindowServer::Display *this)
{
  return &CA::Mat4Impl::mat4_identity_float;
}

double CA::WindowServer::Display::workaround_matrix@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *a1 = xmmword_18474DFB0;
  a1[1] = xmmword_18474DFC0;
  result = 0.0;
  a1[2] = xmmword_18474DFD0;
  a1[3] = xmmword_18474DFE0;
  return result;
}

uint64_t CA::WindowServer::Display::needs_overdrive(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::od_lut_version(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::needs_p3_clamp(CA::WindowServer::Display *this)
{
  return 0;
}

float CA::WindowServer::Display::brightness_scale(CA::WindowServer::Display *this)
{
  return 1.0;
}

uint64_t CA::WindowServer::Display::supports_edr_factor(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::needs_passthrough(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::needs_alpha_unpremultiply(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::ignores_inhibit_cloning(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::notifies_on_disallowed_cloning_layers(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::allows_remote_control_layers(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::acquire_frozen_surface(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::is_freezing(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::is_frozen(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::VirtualDisplay::new_server(CFTypeRef *this)
{
  malloc_zone_t *malloc_zone;
  CA::WindowServer::Server *v3;
  uint64_t v4;
  __CFRunLoopSource *v5;
  __CFRunLoopSource *v6;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v3 = (CA::WindowServer::Server *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x2C8uLL, 0x743898A5uLL);
  v4 = (uint64_t)v3;
  if (v3)
  {
    CA::WindowServer::Server::Server(v3, (CA::WindowServer::Display *)this, this[1]);
    *(_QWORD *)v4 = &off_1E158DB58;
    *(_OWORD *)(v4 + 648) = 0u;
    *(_OWORD *)(v4 + 664) = 0u;
    *(_OWORD *)(v4 + 680) = 0u;
    pthread_mutex_init((pthread_mutex_t *)(v4 + 536), 0);
    pthread_cond_init((pthread_cond_t *)(v4 + 600), 0);
    pthread_mutex_lock((pthread_mutex_t *)(v4 + 536));
    CA::WindowServer::VirtualServer::add_runloop_source(v4, v5);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v4 + 96) + 216))(*(_QWORD *)(v4 + 96)))
      CA::WindowServer::VirtualServer::add_vsync_source(v4, v6);
    pthread_mutex_unlock((pthread_mutex_t *)(v4 + 536));
  }
  return v4;
}

uint64_t CA::WindowServer::Display::surface_is_replaceable(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::triple_buffered(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::has_detached_layer(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::update_request_callback(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::compositing_color_space(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::blend_color_space(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::display_color_space(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::supports_icc_color_management(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::supports_display_tonemap(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::system_gamma_curve(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::blackpoint_curve(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::gamma_adjustment_curves(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::edr_scaling_applied_in_gp(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::has_deferred_brightness_tx_callbacks(CA::WindowServer::Display *this)
{
  return 0;
}

double CA::WindowServer::Display::last_gp0_obs_bandwidth(CA::WindowServer::Display *this)
{
  return 0.0;
}

double CA::WindowServer::Display::last_gp0_max_bandwidth(CA::WindowServer::Display *this)
{
  return 0.0;
}

double CA::WindowServer::Display::last_gp1_obs_bandwidth(CA::WindowServer::Display *this)
{
  return 0.0;
}

double CA::WindowServer::Display::last_gp1_max_bandwidth(CA::WindowServer::Display *this)
{
  return 0.0;
}

double CA::WindowServer::Display::last_frame_apce(CA::WindowServer::Display *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Display::last_frame_rtplc_triggered(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::last_frame_rtplc_capped(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::set_secure_indicator_state(CA::WindowServer::Display *this)
{
  return 1;
}

uint64_t CA::WindowServer::Display::secure_indicator_active(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::swap_secure_indicator()
{
  return 0;
}

uint64_t CA::WindowServer::Display::hide_secure_indicator(CA::WindowServer::Display *this)
{
  return 0;
}

double CA::WindowServer::Display::secure_indicator_animating_deadline(CA::WindowServer::Display *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Display::set_display_state_locked(CA::WindowServer::Display *this)
{
  return 5;
}

uint64_t CA::WindowServer::Display::set_power_state_locked(uint64_t result, char a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 728);
  *(_BYTE *)(v2 + 3) = a2;
  *(_BYTE *)(v2 + 2) = a2;
  return result;
}

uint64_t CA::WindowServer::VirtualDisplay::release_resources(CA::WindowServer::VirtualDisplay *this)
{
  CA::WindowServer::VirtualDisplay::release_everything(this);
  return CA::WindowServer::Display::release_resources((os_unfair_lock_s *)this);
}

float *CA::WindowServer::VirtualDisplay::create_surface(CA::WindowServer::IOSurface *a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, const void *a9)
{
  return CA::WindowServer::IOSurface::allocate_iosurface(a1, a2, a3, a4, a5, a6, 0, a7, a8, a9);
}

uint64_t CA::WindowServer::VirtualDisplay::set_digital_modes(CA::WindowServer::VirtualDisplay *this, const __CFArray *a2, CFArrayRef theArray)
{
  CA::WindowServer::VirtualDisplay *v3;
  uint64_t v4;
  const __CFArray *v5;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t i;
  CFIndex v11;
  float32x2_t v12;
  const __CFDictionary *Dictionary;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  const __CFDictionary *v16;
  const __CFDictionary *v17;
  const __CFDictionary *v18;
  void *v19;
  const __CFString *String;
  const __CFString *v21;
  CFTypeID v22;
  const void *Value;
  const void *v24;
  const void *v25;
  unsigned int v26;
  const __CFDictionary *v27;
  const __CFDictionary *v28;
  const __CFDictionary *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  int v34;
  const void *v35;
  __int16 v36;
  const void *v37;
  __int16 v38;
  CFIndex v39;
  uint64_t v40;
  const __CFDictionary *v41;
  int Int;
  _BOOL4 Bool;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  const void *v57;
  int v58;
  _DWORD *v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  int v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  int v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  int32x4_t v77;
  unsigned int v82;
  uint64_t v84;
  signed int v85;
  int v86;
  float *v87;
  unsigned int v88;
  unint64_t v89;
  __int128 v90;
  uint64_t v91;
  unsigned int v92;
  CA::WindowServer::VirtualDisplay *v93;
  _DWORD *v94;
  const __CFArray *v95;
  CFIndex Count;
  CFIndex v97;
  CFIndex v98;
  _DWORD v99[2];
  void *__p[2];
  uint64_t v101;
  __int128 *v102;
  __int128 v103;
  _OWORD v104[2];
  __int128 v105;
  char buffer[16];
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;

  v3 = this;
  v122 = *MEMORY[0x1E0C80C00];
  v105 = 0u;
  *(_OWORD *)__p = 0u;
  v101 = 0;
  v103 = 0u;
  memset(v104, 0, sizeof(v104));
  v102 = &v103;
  LODWORD(v105) = 1065353216;
  v4 = *((_QWORD *)this + 80);
  if (theArray && (v5 = theArray, CFArrayGetCount(theArray) >= 1))
  {
    if (*((_QWORD *)v3 + 3206))
    {
      v7 = (_QWORD *)*((_QWORD *)v3 + 3205);
      if (v7)
      {
        do
        {
          v8 = (_QWORD *)*v7;
          operator delete(v7);
          v7 = v8;
        }
        while (v8);
      }
      *((_QWORD *)v3 + 3205) = 0;
      v9 = *((_QWORD *)v3 + 3204);
      if (v9)
      {
        for (i = 0; i != v9; ++i)
          *(_QWORD *)(*((_QWORD *)v3 + 3203) + 8 * i) = 0;
      }
      *((_QWORD *)v3 + 3206) = 0;
    }
    v84 = v4;
    v93 = v3;
    Count = CFArrayGetCount(v5);
    if (Count)
    {
      v87 = (float *)((char *)v3 + 25624);
      *((_QWORD *)&v90 + 1) = 0;
      v91 = 0;
      v88 = 0;
      v11 = 0;
      DWORD1(v90) = 0;
      v94 = (_DWORD *)((char *)v3 + 25672);
      v95 = v5;
      v12 = (float32x2_t)vdup_n_s32(0x3EC99326u);
      while (1)
      {
        Dictionary = (const __CFDictionary *)CA_CFArrayGetDictionary(v5, v11);
        v97 = v11;
        if (Dictionary)
        {
          v14 = Dictionary;
          v15 = (const __CFDictionary *)CA_CFDictionaryGetDictionary(Dictionary, CFSTR("DisplayAttributes"));
          if (v15)
          {
            v16 = v15;
            v17 = (const __CFDictionary *)CA_CFDictionaryGetDictionary(v15, CFSTR("ProductAttributes"));
            if (v17)
            {
              v18 = v17;
              v19 = (void *)*((_QWORD *)v93 + 3208);
              if (v19)
              {
                free(v19);
                *((_QWORD *)v93 + 3208) = 0;
              }
              String = (const __CFString *)CA_CFDictionaryGetString(v18, CFSTR("ProductName"));
              if (String)
              {
                v21 = String;
                v22 = CFGetTypeID(String);
                if (v22 == CFStringGetTypeID())
                {
                  v120 = 0u;
                  v121 = 0u;
                  v118 = 0u;
                  v119 = 0u;
                  v116 = 0u;
                  v117 = 0u;
                  v114 = 0u;
                  v115 = 0u;
                  v112 = 0u;
                  v113 = 0u;
                  v110 = 0u;
                  v111 = 0u;
                  v108 = 0u;
                  v109 = 0u;
                  *(_OWORD *)buffer = 0u;
                  v107 = 0u;
                  if (CFStringGetCString(v21, buffer, 256, 0x8000100u))
                    *((_QWORD *)v93 + 3208) = strdup(buffer);
                }
              }
              Value = CFDictionaryGetValue(v18, CFSTR("ProductID"));
              if (Value)
                LODWORD(Value) = CA_CFIntValue(Value);
              v94[1] = (_DWORD)Value;
              v24 = CFDictionaryGetValue(v18, CFSTR("ManufacturerID"));
              if (v24)
                LODWORD(v24) = CA_CFIntValue(v24);
              *v94 = (_DWORD)v24;
            }
            v25 = CFDictionaryGetValue(v16, CFSTR("MaxHorizontalImageSize"));
            if (v25)
              v26 = CA_CFIntValue(v25);
            else
              v26 = 0;
            v31 = CFDictionaryGetValue(v16, CFSTR("MaxVerticalImageSize"));
            if (v31)
              LODWORD(v31) = CA_CFIntValue(v31);
            *((float64x2_t *)v93 + 1605) = vcvtq_f64_f32(vmul_f32(vcvt_f32_u32((uint32x2_t)__PAIR64__(v31, v26)), v12));
          }
          else
          {
            v27 = (const __CFDictionary *)CA_CFDictionaryGetDictionary(v14, CFSTR("HorizontalAttributes"));
            v28 = (const __CFDictionary *)CA_CFDictionaryGetDictionary(v14, CFSTR("VerticalAttributes"));
            if (v27)
            {
              v29 = v28;
              if (v28)
              {
                v30 = CFDictionaryGetValue(v14, CFSTR("IsVirtual"));
                if (v30)
                  LODWORD(v90) = CA_CFBoolValue(v30);
                else
                  LODWORD(v90) = 0;
                v32 = CFDictionaryGetValue(v14, CFSTR("Score"));
                if (v32)
                  v92 = CA_CFIntValue(v32);
                else
                  v92 = 0;
                v33 = CFDictionaryGetValue(v29, CFSTR("PreciseSyncRate"));
                if (v33)
                  v34 = CA_CFIntValue(v33);
                else
                  v34 = 0;
                v35 = CFDictionaryGetValue(v27, CFSTR("Active"));
                if (v35)
                  v36 = CA_CFIntValue(v35);
                else
                  v36 = 0;
                v37 = CFDictionaryGetValue(v29, CFSTR("Active"));
                if (v37)
                {
                  v38 = CA_CFIntValue(v37);
                  if (!a2)
                    goto LABEL_53;
                }
                else
                {
                  v38 = 0;
                  if (!a2)
                  {
LABEL_53:
                    v98 = 1;
LABEL_54:
                    v39 = 0;
                    LODWORD(v40) = v34 & 0x1FFFFFF;
                    if (v34)
                      v40 = v40;
                    else
                      v40 = 3932160;
                    v89 = v36 & 0x3FFF | ((unsigned __int16)(v38 & 0x3FFF) << 14) | (unint64_t)(v40 << 29);
                    v85 = (v89 >> 14) & 0x3FFF;
                    v86 = v36 & 0x3FFF;
                    while (2)
                    {
                      v41 = v14;
                      if (a2)
                        v41 = (const __CFDictionary *)CA_CFArrayGetDictionary(a2, v39);
                      Int = CA_CFDictionaryGetInt(v41, CFSTR("ID"));
                      Bool = CA_CFDictionaryGetBool(v41, CFSTR("IsVirtual"));
                      v44 = CA_CFDictionaryGetInt(v41, CFSTR("PixelEncoding"));
                      v45 = CA_CFDictionaryGetInt(v41, CFSTR("Depth"));
                      v46 = CA_CFDictionaryGetInt(v41, CFSTR("Colorimetry"));
                      v47 = CA_CFDictionaryGetInt(v41, CFSTR("EOTF"));
                      v48 = CA_CFDictionaryGetInt(v41, CFSTR("DynamicRange"));
                      if (v44)
                        goto LABEL_61;
                      _ZF = v45 == 12 || v45 == 10;
                      if (!_ZF || v48)
                      {
                        if (v45 > 8)
                          goto LABEL_61;
                        v52 = 0;
                        v50 = 0x80000000000000;
                        if (v46 == 16)
                          v50 = 0x680000000000000;
                        if (v47)
                          goto LABEL_61;
                      }
                      else if (v46 == 16)
                      {
                        v50 = 0xC80000000000000;
                        if (v45 == 10)
                          v50 = 0xC00000000000000;
                        v51 = 0x780000000000000;
                        if (v45 == 10)
                          v51 = 0x700000000000000;
                        if (v47 == 2)
                        {
                          v52 = 32;
                          goto LABEL_91;
                        }
LABEL_87:
                        v52 = 16;
                        v50 = v51;
                        if (v47)
                          goto LABEL_61;
                      }
                      else
                      {
                        v50 = 0xB80000000000000;
                        if (v45 == 10)
                          v50 = 0xB00000000000000;
                        v51 = 0x180000000000000;
                        if (v45 == 10)
                          v51 = 0x100000000000000;
                        if (v47 != 2)
                          goto LABEL_87;
                        v52 = 32;
                      }
                      if (v46 != 1 && v46 != 10)
                      {
                        if (v46 != 16)
                          goto LABEL_61;
LABEL_91:
                        v52 |= 2u;
                      }
                      if (v48)
                        goto LABEL_61;
                      v53 = 0x40000000000000;
                      if (!(v90 | Bool))
                        v53 = 0;
                      v54 = v53 | v50 & 0xF80000000000000 | v89 | 0x1000000000000000;
                      *(_QWORD *)buffer = v54;
                      v55 = (uint64_t *)__p[0];
                      v56 = (uint64_t *)__p[1];
                      if (__p[0] == __p[1])
                      {
                        v56 = (uint64_t *)__p[0];
                      }
                      else
                      {
                        while ((CA::WindowServer::Display::Mode::operator==(*v55, v54) & 1) == 0)
                        {
                          if (++v55 == v56)
                          {
                            v55 = v56;
                            break;
                          }
                        }
                      }
                      if (v55 == v56)
                      {
                        CA::WindowServer::Display::ModeSet::add_mode((CA::WindowServer::Display::ModeSet *)__p, (const CA::WindowServer::Display::Mode *)buffer);
                      }
                      else if (*((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::VirtualDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::VirtualDisplay::ModeInfo>,CA::WindowServer::VirtualDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::VirtualDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::VirtualDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::VirtualDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>(v87, v54, (uint64_t *)buffer)+ 8) >= v92)
                      {
                        goto LABEL_61;
                      }
                      v57 = CFDictionaryGetValue(v14, CFSTR("ID"));
                      if (v57)
                        v58 = CA_CFIntValue(v57);
                      else
                        v58 = 0;
                      v59 = std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::VirtualDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::VirtualDisplay::ModeInfo>,CA::WindowServer::VirtualDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::VirtualDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::VirtualDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::VirtualDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>(v87, v54, (uint64_t *)buffer);
                      v59[6] = Int;
                      v59[7] = v58;
                      v59[8] = v92;
                      v59[9] = 0;
                      v60 = v88;
                      v61 = v91;
                      if (v52 + v92 > v88)
                        v61 = v54;
                      v91 = v61;
                      if (v52 + v92 > v88)
                        v60 = v52 + v92;
                      v88 = v60;
                      v62 = (v89 >> 14) & 0x3FFF;
                      v63 = DWORD1(v90);
                      if (v85 <= SDWORD2(v90))
                        v64 = DWORD1(v90);
                      else
                        v64 = v86;
                      if (v85 <= SDWORD2(v90))
                        v62 = DWORD2(v90);
                      v65 = v86 <= SDWORD1(v90);
                      if (v86 > SDWORD1(v90))
                        v63 = v64;
                      DWORD1(v90) = v63;
                      if (v65)
                        v66 = DWORD2(v90);
                      else
                        v66 = v62;
                      *((_QWORD *)&v90 + 1) = v66;
LABEL_61:
                      if (++v39 == v98)
                        goto LABEL_36;
                      continue;
                    }
                  }
                }
                v98 = CFArrayGetCount(a2);
                if (v98)
                  goto LABEL_54;
              }
            }
          }
        }
LABEL_36:
        v11 = v97 + 1;
        v5 = v95;
        if (v97 + 1 == Count)
          goto LABEL_124;
      }
    }
    *((_QWORD *)&v90 + 1) = 0;
    v91 = 0;
    DWORD1(v90) = 0;
LABEL_124:
    v3 = v93;
    *((_QWORD *)v93 + 9) = v90 >> 32;
    CA::WindowServer::Display::ModeSet::sort((CA::WindowServer::Display::ModeSet *)__p);
    v4 = v84;
    v67 = v91;
  }
  else
  {
    *(_QWORD *)buffer = -1;
    CA::WindowServer::Display::ModeSet::add_mode((CA::WindowServer::Display::ModeSet *)__p, (const CA::WindowServer::Display::Mode *)buffer);
    v67 = 0;
  }
  if (!v4)
    goto LABEL_132;
  v68 = (uint64_t *)__p[0];
  v69 = (uint64_t *)__p[1];
  if (__p[0] == __p[1])
  {
    v69 = (uint64_t *)__p[0];
  }
  else
  {
    while ((CA::WindowServer::Display::Mode::operator==(*v68, v4) & 1) == 0)
    {
      if (++v68 == v69)
      {
        v68 = v69;
        break;
      }
    }
  }
  if (v68 == v69)
LABEL_132:
    v4 = v67;
  v70 = CA::WindowServer::Display::set_all_modes((uint64_t)v3, (uint64_t)__p, v4, v67);
  if (v70)
  {
    v99[0] = v4 & 0x3FFF;
    v99[1] = (v4 >> 14) & 0x3FFF;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)buffer = _Q0;
    CA::WindowServer::Display::set_size((uint64_t)v3, (uint64_t)v99, (uint64_t)v99, (double *)buffer, *(double *)&_Q0, v71, v72, v73, v74, v75, v76, v77);
  }
  v82 = (*(uint64_t (**)(CA::WindowServer::VirtualDisplay *))(*(_QWORD *)v3 + 680))(v3);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v104);
  std::__tree<std::tuple<unsigned short,unsigned short>>::destroy((_QWORD *)v103);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v70 | v82;
}

uint64_t CA::WindowServer::VirtualDisplay::set_digital_modes(CA::WindowServer::VirtualDisplay *this, const __CFArray *a2)
{
  return (*(uint64_t (**)(CA::WindowServer::VirtualDisplay *, _QWORD, const __CFArray *))(*(_QWORD *)this
                                                                                                  + 2168))(this, 0, a2);
}

BOOL CA::WindowServer::Display::ModeSet::contains_mode(CA::WindowServer::Display::ModeSet *this, const CA::WindowServer::Display::Mode *a2, uint64_t a3)
{
  uint64_t *v3;
  CA::WindowServer::Display::ModeSet *v5;

  v3 = (uint64_t *)this;
  if (this == a2)
  {
    v5 = this;
  }
  else
  {
    v5 = a2;
    while ((CA::WindowServer::Display::Mode::operator==(*v3, a3) & 1) == 0)
    {
      if (++v3 == (uint64_t *)v5)
      {
        v3 = (uint64_t *)v5;
        return v3 != (uint64_t *)v5;
      }
    }
  }
  return v3 != (uint64_t *)v5;
}

_QWORD *std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::VirtualDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::VirtualDisplay::ModeInfo>,CA::WindowServer::VirtualDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::VirtualDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::VirtualDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::VirtualDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>(float *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v36;

  v5 = (int)a2;
  v6 = *((_QWORD *)a1 + 1);
  if (v6)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v8.i16[0] = vaddlv_u8(v8);
    v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      v10 = (int)a2;
      if ((int)a2 >= v6)
        v10 = (int)a2 % v6;
    }
    else
    {
      v10 = (v6 - 1) & (int)a2;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v10);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v5)
        {
          if ((CA::WindowServer::Display::Mode::operator==(i[2], a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v9 > 1)
          {
            if (v13 >= v6)
              v13 %= v6;
          }
          else
          {
            v13 &= v6 - 1;
          }
          if (v13 != v10)
            break;
        }
      }
    }
  }
  else
  {
    v10 = 0;
  }
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = v5;
  v14 = *a3;
  i[3] = 0;
  i[4] = 0;
  i[2] = v14;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v6 || (float)(v16 * (float)v6) < v15)
  {
    v17 = 1;
    if (v6 >= 3)
      v17 = (v6 & (v6 - 1)) != 0;
    v18 = v17 | (2 * v6);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v6)
    {
      v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v6 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v24)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = a1 + 4;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_55:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_59;
        }
        v36 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v36)
          operator delete(v36);
        v6 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v10 = v5 % v6;
      else
        v10 = v5;
    }
    else
    {
      v10 = (v6 - 1) & v5;
    }
  }
  v32 = *(_QWORD **)a1;
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
  if (v33)
  {
    *i = *v33;
LABEL_72:
    *v33 = i;
    goto LABEL_73;
  }
  *i = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = i;
  v32[v10] = a1 + 4;
  if (*i)
  {
    v34 = *(_QWORD *)(*i + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v34 >= v6)
        v34 %= v6;
    }
    else
    {
      v34 &= v6 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return i;
}

_QWORD *CA::WindowServer::VirtualDisplay::release_everything(CA::WindowServer::VirtualDisplay *this)
{
  _QWORD *result;
  uint64_t *v3;
  CA::Shape *v4;
  CA::WindowServer::Surface *v5;
  _QWORD *v6;

  result = (_QWORD *)(*(uint64_t (**)(CA::WindowServer::VirtualDisplay *))(*(_QWORD *)this + 2152))(this);
  v3 = (uint64_t *)*((_QWORD *)this + 3194);
  if (v3)
  {
    do
    {
      *((_DWORD *)v3 + 2) = 0;
      v4 = (CA::Shape *)v3[2];
      if (v4)
      {
        CA::Shape::unref(v4);
        v3[2] = 0;
      }
      v5 = (CA::WindowServer::Surface *)v3[3];
      if (v5)
      {
        CA::WindowServer::Surface::unref(v5);
        v3[3] = 0;
      }
      v3 = (uint64_t *)*v3;
    }
    while (v3);
    result = (_QWORD *)*((_QWORD *)this + 3194);
    if (result)
    {
      do
      {
        v6 = (_QWORD *)*result;
        free(result);
        result = v6;
      }
      while (v6);
    }
  }
  *((_QWORD *)this + 3194) = 0;
  return result;
}

_DWORD *CA::WindowServer::VirtualDisplay::allocate_buffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  CA::Shape *v10;
  uint64_t v11;
  malloc_zone_t *malloc_zone;

  v3 = *(_DWORD **)(a2 + 8);
  if (!v3)
  {
    v6 = *(_QWORD **)(a1 + 25552);
    if (!v6)
      goto LABEL_16;
    v3 = 0;
    v8 = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      v9 = v6[3];
      if ((!v9 || (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 216))(v9) == a3)
        && !*((_DWORD *)v6 + 2)
        && !v6[3])
      {
        v10 = (CA::Shape *)v6[2];
        if (v10)
        {
          v11 = CA::Shape::area(v10);
          if (v11 < v8)
          {
            v3 = v6;
            v8 = v11;
          }
        }
        else
        {
          v8 = 0;
          v3 = v6;
        }
      }
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    if (v3)
    {
      ++v3[2];
    }
    else
    {
LABEL_16:
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v3 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x20uLL, 0x743898A5uLL);
      *(_QWORD *)v3 = *(_QWORD *)(a1 + 25552);
      *(_QWORD *)(a1 + 25552) = v3;
      v3[2] = 1;
    }
    *(_QWORD *)(a2 + 8) = v3;
  }
  return v3;
}

uint64_t CA::WindowServer::VirtualDisplay::finish_update_(os_unfair_lock_s *this, CA::Render::Update *a2, unsigned int a3)
{
  int os_unfair_lock_opaque_low;
  uint32_t os_unfair_lock_opaque;
  uint64_t updated;
  unsigned int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  os_unfair_lock_opaque_low = LOBYTE(this[6398]._os_unfair_lock_opaque);
  this[4 * LOBYTE(this[6398]._os_unfair_lock_opaque) + 6376] = *(os_unfair_lock_s *)((char *)a2 + 248);
  BYTE1(this[6398]._os_unfair_lock_opaque) = os_unfair_lock_opaque_low;
  LOBYTE(this[6398]._os_unfair_lock_opaque) = os_unfair_lock_opaque_low
                                            + 1
                                            - 3 * ((21846 * (os_unfair_lock_opaque_low + 1)) >> 16);
  os_unfair_lock_opaque = this[4
                             * (unsigned __int16)(os_unfair_lock_opaque_low
                                                + 1
                                                - 3 * ((21846 * (os_unfair_lock_opaque_low + 1)) >> 16))
                             + 6376]._os_unfair_lock_opaque;
  if (os_unfair_lock_opaque)
    this[6390]._os_unfair_lock_opaque = os_unfair_lock_opaque;
  updated = CA::WindowServer::Display::update_clones((CA::WindowServer::Display *)this, a2, &v8);
  CA::WindowServer::Display::purge_surfaces(this, 0);
  return updated;
}

CATintedImage *CACodingCreateProxy(NSCoder *a1, objc_object *a2)
{
  void *v4;
  void *AssociatedObject;
  void *Value;
  CATintedImage *v7;
  CFTypeID v8;
  objc_object *v9;
  uint64_t v10;
  CATintedImage *v11;
  uint64_t v12;
  CATintedImage *v13;
  CATintedImage *CodingProxy;
  uint64_t v15;
  uint64_t v16;
  objc_class *v17;
  CALayer *v18;
  CFDictionaryValueCallBacks v20;
  CFDictionaryKeyCallBacks keyCallBacks;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x186DBE2E4]();
  AssociatedObject = objc_getAssociatedObject(a1, CACodingCreateProxy);
  if (!AssociatedObject)
  {
    memset(&keyCallBacks.copyDescription, 0, 24);
    keyCallBacks.version = 0;
    v20.version = 0;
    v20.copyDescription = 0;
    v20.equal = 0;
    keyCallBacks.retain = (CFDictionaryRetainCallBack)cache_retain;
    keyCallBacks.release = (CFDictionaryReleaseCallBack)cache_release;
    v20.retain = (CFDictionaryRetainCallBack)cache_retain;
    v20.release = (CFDictionaryReleaseCallBack)cache_release;
    AssociatedObject = CFDictionaryCreateMutable(0, 0, &keyCallBacks, &v20);
    objc_setAssociatedObject(a1, CACodingCreateProxy, AssociatedObject, (void *)0x301);
    CFRelease(AssociatedObject);
  }
  Value = (void *)CFDictionaryGetValue((CFDictionaryRef)AssociatedObject, a2);
  if (Value)
  {
    v7 = Value;
    goto LABEL_41;
  }
  if (coding_once == -1)
  {
    if (!a2)
      goto LABEL_40;
  }
  else
  {
    dispatch_once_f(&coding_once, 0, (dispatch_function_t)coding_init);
    if (!a2)
      goto LABEL_40;
  }
  v8 = CFGetTypeID(a2);
  v9 = (objc_object *)objc_opt_class();
  if ((-[objc_object isSubclassOfClass:](v9, "isSubclassOfClass:", objc_opt_class()) & 1) == 0
    && (-[objc_object isSubclassOfClass:](v9, "isSubclassOfClass:", objc_opt_class()) & 1) != 0
    || v8 == CGColorGetTypeID()
    || v8 == CGImageGetTypeID()
    || v8 == CGPatternGetTypeID()
    || v8 == CGPathGetTypeID()
    || v8 == CFArrayGetTypeID()
    || v8 == CFDictionaryGetTypeID())
  {
    goto LABEL_30;
  }
  if (CAEncodeBackingStores)
  {
    v10 = CABackingStoreGetTypeID::type;
    if (!CABackingStoreGetTypeID::type)
    {
      v10 = _CFRuntimeRegisterClass();
      CABackingStoreGetTypeID::type = v10;
    }
    if (v8 == v10)
    {
      v11 = +[CATintedImage tintedImageWithCABackingStore:](CATintedImage, "tintedImageWithCABackingStore:", a2);
      v12 = -[CATintedImage image](v11, "image");
      v13 = (CATintedImage *)*MEMORY[0x1E0C9B0D0];
      if (v12)
        v13 = v11;
      CodingProxy = v13;
      goto LABEL_32;
    }
  }
  if (v8 == IOSurfaceGetTypeID() || v8 == CVPixelBufferGetTypeID())
    goto LABEL_30;
  v15 = CAMachPortGetTypeID::type;
  if (!CAMachPortGetTypeID::type)
  {
    v15 = _CFRuntimeRegisterClass();
    CAMachPortGetTypeID::type = v15;
  }
  if (v8 == v15)
    goto LABEL_30;
  v16 = CAImageQueueGetTypeID::type;
  if (!CAImageQueueGetTypeID::type)
  {
    v16 = _CFRuntimeRegisterClass();
    CAImageQueueGetTypeID::type = v16;
  }
  if (v8 == v16)
  {
LABEL_30:
    v17 = (objc_class *)objc_opt_class();
    if (v17)
    {
      CodingProxy = (CATintedImage *)objc_msgSend([v17 alloc], "initWithObject:", a2);
      goto LABEL_32;
    }
LABEL_40:
    v7 = 0;
    goto LABEL_41;
  }
  if (-[objc_object isSubclassOfClass:](v9, "isSubclassOfClass:", objc_opt_class())
    && debugging_coder(a1))
  {
    CodingProxy = (CATintedImage *)CALayerCreateCodingProxy(v9, (objc_class *)a2, v18);
  }
  else
  {
    if ((-[objc_object conformsToProtocol:](a2, "conformsToProtocol:", &unk_1EDD15D60) & 1) != 0)
      goto LABEL_40;
    CodingProxy = (CATintedImage *)(id)*MEMORY[0x1E0C9B0D0];
  }
LABEL_32:
  v7 = CodingProxy;
  if (CodingProxy)
    CFDictionarySetValue((CFMutableDictionaryRef)AssociatedObject, a2, CodingProxy);
LABEL_41:
  objc_autoreleasePoolPop(v4);
  return v7;
}

void sub_1845CB13C(_Unwind_Exception *a1)
{
  void *v1;

  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

CFTypeRef cache_retain(const __CFAllocator *a1, CFTypeRef cf)
{
  if (cf)
    return CFRetain(cf);
  else
    return 0;
}

void cache_release(const __CFAllocator *a1, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t coding_init(void)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
  self_bundle = result;
  return result;
}

uint64_t debugging_coder(NSCoder *a1)
{
  char isKindOfClass;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[NSCoder delegate](a1, "delegate");
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
  }
  else
  {
    isKindOfClass = 0;
  }
  return isKindOfClass & 1;
}

uint64_t CALayerCreateCodingProxy(objc_object *a1, objc_class *a2, CALayer *a3)
{
  uint64_t v5;
  uint64_t v6;

  if (coding_once != -1)
    dispatch_once_f(&coding_once, 0, (dispatch_function_t)coding_init);
  v5 = objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", a1);
  if (v5 == self_bundle)
    return 0;
  do
  {
    a1 = (objc_object *)-[objc_object superclass](a1, "superclass");
    if (!a1)
      break;
    v6 = objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", a1);
  }
  while (v6 != self_bundle);
  return objc_msgSend(objc_alloc((Class)a1), "_initWithReference:", a2);
}

void encodePathSegment(void *a1, const CGPathElement *a2)
{
  CACGPathCodingSegment *v3;

  v3 = -[CACGPathCodingSegment initWithCGPathElement:]([CACGPathCodingSegment alloc], "initWithCGPathElement:", a2);
  objc_msgSend(a1, "addObject:", v3);

}

void pattern_draw(CGImage *a1, CGContext *a2)
{
  CGFloat Width;
  CGRect v5;

  Width = (double)CGImageGetWidth(a1);
  v5.size.height = (double)CGImageGetHeight(a1);
  v5.origin.x = 0.0;
  v5.origin.y = 0.0;
  v5.size.width = Width;
  CGContextDrawImage(a2, v5, a1);
}

void sub_1845CCD58(_Unwind_Exception *a1)
{
  void *v1;

  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

id image_properties_dictionary(int a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD v6[2];
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  v2 = *MEMORY[0x1E0CBD268];
  v6[0] = *MEMORY[0x1E0CBD240];
  v6[1] = v2;
  v7[0] = MEMORY[0x1E0C9AAB0];
  v7[1] = MEMORY[0x1E0C9AAB0];
  v3 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, v6, 2);
  v4 = v3;
  if (a1)
  {
    v4 = (void *)objc_msgSend(v3, "mutableCopy");
    objc_msgSend(v4, "setObject:forKeyedSubscript:", *MEMORY[0x1E0CBD1B0], *MEMORY[0x1E0CBD1A0]);
    objc_msgSend(v4, "setObject:forKeyedSubscript:", &unk_1E15D6AD0, *MEMORY[0x1E0CBD1A8]);
  }
  return v4;
}

uint64_t create_cgimage_from_iosurface(__IOSurface *a1)
{
  unsigned int Width;
  int Height;
  CA::Render *PixelFormat;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __IOSurface *v10;
  __IOSurface *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  Width = IOSurfaceGetWidth(a1);
  Height = IOSurfaceGetHeight(a1);
  PixelFormat = (CA::Render *)IOSurfaceGetPixelFormat(a1);
  if ((int)PixelFormat <= 1647534391)
  {
    if ((_DWORD)PixelFormat != 1111970369)
    {
      v5 = 1380411457;
      goto LABEL_6;
    }
    return CGImageCreateFromIOSurface();
  }
  if ((_DWORD)PixelFormat == 1647534392)
    return CGImageCreateFromIOSurface();
  v5 = 1999843442;
LABEL_6:
  if ((_DWORD)PixelFormat == v5)
    return CGImageCreateFromIOSurface();
  v7 = *MEMORY[0x1E0C85AD8];
  v8 = CA::Render::fourcc_compressed_of_type(PixelFormat, 0, 0);
  v9 = v8;
  if ((int)v8 <= 1647534391)
  {
    if ((_DWORD)v8 != 1111970369 && (_DWORD)v8 != 1380411457)
LABEL_15:
      v9 = 1380411457;
  }
  else if ((_DWORD)v8 != 1647534392 && (_DWORD)v8 != 1999843442)
  {
    if ((_DWORD)v8 == 1999908961)
    {
      v9 = 1647534392;
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_16:
  v16 = xmmword_18474DEB0;
  v17 = 1;
  v18 = v7;
  v19 = 0;
  v10 = CA::SurfaceUtil::CAIOSurfaceCreate(Width, Height, v9, 0, 0, 0, 0, &v16, CFSTR("CAEncodeIOSurfacesAsCGImages"));
  if (v10)
  {
    v11 = v10;
    if (create_cgimage_from_iosurface(__IOSurface *)::once[0] != -1)
      dispatch_once(create_cgimage_from_iosurface(__IOSurface *)::once, &__block_literal_global_390);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, __IOSurface *))(*(_QWORD *)create_cgimage_from_iosurface(__IOSurface *)::ctx
                                                                                     + 672))(create_cgimage_from_iosurface(__IOSurface *)::ctx, 1, 0, 0, v11);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, __IOSurface *))(*(_QWORD *)create_cgimage_from_iosurface(__IOSurface *)::ctx
                                                                                     + 672))(create_cgimage_from_iosurface(__IOSurface *)::ctx, 1, 0, 0, a1);
    if (v13)
      v14 = v12 == 0;
    else
      v14 = 1;
    if (v14)
    {
      if (!v12)
        goto LABEL_28;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)create_cgimage_from_iosurface(__IOSurface *)::ctx
                                                                                         + 720))(create_cgimage_from_iosurface(__IOSurface *)::ctx, v12, v13, 1, 0, 0, 0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)create_cgimage_from_iosurface(__IOSurface *)::ctx + 408))(create_cgimage_from_iosurface(__IOSurface *)::ctx, 1);
    }
    CA::OGL::Context::release_surface(create_cgimage_from_iosurface(__IOSurface *)::ctx, v12);
LABEL_28:
    if (v13)
      CA::OGL::Context::release_surface(create_cgimage_from_iosurface(__IOSurface *)::ctx, v13);
    v15 = CGImageCreateFromIOSurface();
    if (v11 != a1)
      CFRelease(v11);
    return v15;
  }
  return 0;
}

void ___Z29create_cgimage_from_iosurfaceP11__IOSurface_block_invoke()
{
  id v0;

  v0 = CAMetalContextCreate();
  create_cgimage_from_iosurface(__IOSurface *)::ctx = CA::OGL::new_metal_context(v0, 0, 0, 0, 0, CFSTR("com.apple.coreanimation.CACoding"));

}

void sub_1845CD810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *context)
{
  objc_autoreleasePoolPop(context);
  _Unwind_Resume(a1);
}

void sub_1845CDF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *context)
{
  objc_autoreleasePoolPop(context);
  _Unwind_Resume(a1);
}

uint64_t ___ZL26iosurface_property_classesv_block_invoke()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = objc_alloc(MEMORY[0x1E0C99E60]);
  v1 = objc_opt_class();
  v2 = objc_opt_class();
  v3 = objc_opt_class();
  result = objc_msgSend(v0, "initWithObjects:", v1, v2, v3, objc_opt_class(), 0);
  iosurface_property_classes(void)::classes = result;
  return result;
}

uint64_t ___ZL31iosurface_plane_keys_allow_listv_block_invoke()
{
  id v0;
  uint64_t result;

  v0 = objc_alloc(MEMORY[0x1E0C99D20]);
  result = objc_msgSend(v0, "initWithObjects:", *MEMORY[0x1E0CBC160], *MEMORY[0x1E0CBC178], *MEMORY[0x1E0CBC140], *MEMORY[0x1E0CBC098], *MEMORY[0x1E0CBC090], *MEMORY[0x1E0CBC110], *MEMORY[0x1E0CBC108], *MEMORY[0x1E0CBBED8], *MEMORY[0x1E0CBC0F8], *MEMORY[0x1E0CBC0E8], *MEMORY[0x1E0CBC0E0], *MEMORY[0x1E0CBC0A8], *MEMORY[0x1E0CBC0B0], *MEMORY[0x1E0CBC088], *MEMORY[0x1E0CBC180], *MEMORY[0x1E0CBC148], *MEMORY[0x1E0CBC0A0],
             *MEMORY[0x1E0CBC130],
             *MEMORY[0x1E0CBC0D0],
             *MEMORY[0x1E0CBC0D8],
             *MEMORY[0x1E0CBC0F0],
             0);
  iosurface_plane_keys_allow_list(void)::keys = result;
  return result;
}

uint64_t ___ZL25iosurface_keys_allow_listv_block_invoke()
{
  id v0;
  uint64_t result;

  v0 = objc_alloc(MEMORY[0x1E0C99D20]);
  result = objc_msgSend(v0, "initWithObjects:", *MEMORY[0x1E0CBBEE0], *MEMORY[0x1E0CBC1E0], *MEMORY[0x1E0CBC008], *MEMORY[0x1E0CBC070], *MEMORY[0x1E0CBBF08], *MEMORY[0x1E0CBBF00], *MEMORY[0x1E0CBBFC0], *MEMORY[0x1E0CBBFB8], 0);
  iosurface_keys_allow_list(void)::keys = result;
  return result;
}

uint64_t ___ZL22iosurface_info_classesv_block_invoke()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = objc_alloc(MEMORY[0x1E0C99E60]);
  v1 = objc_opt_class();
  v2 = objc_opt_class();
  v3 = objc_opt_class();
  result = objc_msgSend(v0, "initWithObjects:", v1, v2, v3, objc_opt_class(), 0);
  iosurface_info_classes(void)::classes = result;
  return result;
}

uint64_t ___ZL24iosurface_property_namesv_block_invoke()
{
  id v0;
  uint64_t result;

  v0 = objc_alloc(MEMORY[0x1E0C99D20]);
  result = objc_msgSend(v0, "initWithObjects:", *MEMORY[0x1E0CBBF90], *MEMORY[0x1E0CBBFD8], *MEMORY[0x1E0CBC010], *MEMORY[0x1E0CBC1E8], *MEMORY[0x1E0CBBF70], *MEMORY[0x1E0CBC1D0], *MEMORY[0x1E0CBBF60], *MEMORY[0x1E0CBBFC8], *MEMORY[0x1E0CBBFD0], *MEMORY[0x1E0CBC060], *MEMORY[0x1E0CBBF20], *MEMORY[0x1E0CBBF18], *MEMORY[0x1E0CBBF58], 0);
  iosurface_property_names(void)::names = result;
  return result;
}

void sub_1845CE940(_Unwind_Exception *a1)
{
  void *v1;

  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

IMP ___ZL28class_supports_secure_codingP10objc_class_block_invoke(objc_class *a1, const char *a2)
{
  IMP result;
  void (*v5)(void);
  objc_class *Superclass;

  result = class_getMethodImplementation(a1, a2);
  if (result)
  {
    v5 = result;
    Superclass = class_getSuperclass(a1);
    if (Superclass)
      return (IMP)(class_getMethodImplementation(Superclass, a2) != v5);
    else
      return IMP_BOOSTED;
  }
  return result;
}

void save_iosurface_as_png(__IOSurface *a1, uint64_t a2, int a3)
{
  CGImage *cgimage_from_iosurface;
  CGImage *v5;
  unint64_t Width;
  unint64_t Height;
  CGColorSpace *ColorSpace;
  CGContext *v9;
  CGImageRef Image;
  CGAffineTransform transform;
  uint64_t v12;
  CGRect v13;

  v12 = *MEMORY[0x1E0C80C00];
  cgimage_from_iosurface = (CGImage *)create_cgimage_from_iosurface(a1);
  v5 = cgimage_from_iosurface;
  if (a3)
  {
    Width = CGImageGetWidth(cgimage_from_iosurface);
    Height = CGImageGetHeight(v5);
    ColorSpace = CGImageGetColorSpace(v5);
    v9 = CGBitmapContextCreate(0, Width, Height, 8uLL, 4 * Width, ColorSpace, 0x2002u);
    transform.b = 0.0;
    transform.c = 0.0;
    transform.a = 1.0;
    *(_OWORD *)&transform.d = xmmword_18474DFF0;
    transform.ty = (double)Height;
    CGContextConcatCTM(v9, &transform);
    v13.size.width = (double)Width;
    v13.origin.x = 0.0;
    v13.origin.y = 0.0;
    v13.size.height = (double)Height;
    CGContextDrawImage(v9, v13, v5);
    Image = CGBitmapContextCreateImage(v9);
    CGImageRelease(v5);
    CGContextRelease(v9);
    v5 = Image;
  }
  CGImageWriteToFile();
  CGImageRelease(v5);
}

id CAEncodeLayerTree(objc_class *a1)
{
  return CAEncodeLayerTreeWithInfo(a1, 0);
}

id CAEncodeLayerTreeWithInfo(objc_class *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  objc_object *v6;
  CALayer *v7;
  uint64_t CodingProxy;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  id v15;
  void *context;
  _QWORD v18[2];
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  context = (void *)MEMORY[0x186DBE2E4]();
  +[CATransaction begin](CATransaction, "begin");
  +[CATransaction activateBackground:](CATransaction, "activateBackground:", pthread_main_np() == 0);
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36F8]), "initRequiringSecureCoding:", 1);
  +[CATransaction lock](CATransaction, "lock");
  v5 = (void *)objc_opt_new();
  objc_msgSend(v4, "setDelegate:", v5);
  v6 = (objc_object *)objc_opt_class();
  CodingProxy = CALayerCreateCodingProxy(v6, a1, v7);
  v9 = (void *)CodingProxy;
  if (CodingProxy)
    v10 = CodingProxy;
  else
    v10 = (uint64_t)a1;
  v18[0] = CFSTR("rootLayer");
  v18[1] = CFSTR("geometryFlipped");
  v19[0] = v10;
  v19[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[objc_class contentsAreFlipped](a1, "contentsAreFlipped"));
  v11 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, v18, 2);

  v12 = CAEncodeBackingStores;
  v13 = CAEncodeIOSurfacesAsCGImages;
  v14 = CALayerEncodeAllAnimations;
  CAEncodeBackingStores = 1;
  CAEncodeIOSurfacesAsCGImages = (CAEncodeIOSurfacesAsCGImages | BYTE1(xmmword_1ECDC6AD0)) != 0;
  CALayerEncodeAllAnimations = 1;
  objc_msgSend(v4, "encodeObject:forKey:", v11, CFSTR("root"));
  if (a2)
    objc_msgSend(v4, "encodeObject:forKey:", a2, CFSTR("userInfo"));
  v15 = (id)objc_msgSend(v4, "encodedData");
  +[CATransaction unlock](CATransaction, "unlock");

  CAEncodeBackingStores = v12;
  CAEncodeIOSurfacesAsCGImages = v13;
  CALayerEncodeAllAnimations = v14;
  +[CATransaction commit](CATransaction, "commit");
  objc_autoreleasePoolPop(context);
  return v15;
}

void sub_1845CF00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *context)
{
  objc_end_catch();
  objc_autoreleasePoolPop(context);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

CFMutableDataRef CAMLEncodeLayerTreeWithInfo(uint64_t a1, uint64_t a2, void *a3)
{
  void *v6;
  CFMutableDataRef Mutable;
  CAMLWriter *v8;
  CACodingCAMLWriterDelegate *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  v6 = (void *)MEMORY[0x186DBE2E4]();
  +[CATransaction begin](CATransaction, "begin");
  +[CATransaction activateBackground:](CATransaction, "activateBackground:", pthread_main_np() == 0);
  Mutable = CFDataCreateMutable(0, 0);
  v8 = +[CAMLWriter writerWithData:](CAMLWriter, "writerWithData:", Mutable);
  v9 = -[CACodingCAMLWriterDelegate initWithResourceDir:]([CACodingCAMLWriterDelegate alloc], "initWithResourceDir:", a2);
  -[CACodingCAMLWriterDelegate setImageFormat:](v9, "setImageFormat:", CACodingImageFormat);
  if (a3)
  {
    v10 = objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("CACodingImageFormat"));
    if (v10)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        -[CACodingCAMLWriterDelegate setImageFormat:](v9, "setImageFormat:", v10);
    }
    v11 = objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("CACodingImageOptions"));
    if (v11)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        -[CACodingCAMLWriterDelegate setImageEncodeOptions:](v9, "setImageEncodeOptions:", v11);
    }
    -[CACodingCAMLWriterDelegate setSkipHiddenLayers:](v9, "setSkipHiddenLayers:", objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("CACodingSkipHiddenLayers")), "BOOLValue"));
    -[CAMLWriter setEncodingForReverseSerializationTest:](v8, "setEncodingForReverseSerializationTest:", objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("kCAMLWriterOptionsTestingReverseSerialization")), "BOOLValue"));
  }
  -[CAMLWriter setDelegate:](v8, "setDelegate:", v9);
  +[CATransaction lock](CATransaction, "lock");
  v12 = CAEncodeBackingStores;
  v13 = CALayerEncodeAllAnimations;
  CAEncodeBackingStores = 1;
  CALayerEncodeAllAnimations = 1;
  -[CAMLWriter encodeObject:](v8, "encodeObject:", a1);
  CAEncodeBackingStores = v12;
  CALayerEncodeAllAnimations = v13;
  +[CATransaction unlock](CATransaction, "unlock");
  +[CATransaction commit](CATransaction, "commit");
  objc_autoreleasePoolPop(v6);
  return Mutable;
}

void sub_1845CF290(_Unwind_Exception *a1)
{
  void *v1;

  objc_end_catch();
  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

uint64_t CAMLEncodeLayerTreeToPathWithOptions(uint64_t a1, void *a2, void *a3)
{
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  CFTypeID v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  NSObject *v18;
  CFMutableDataRef v19;
  void *v20;
  const void *Value;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint8_t buf[4];
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = (void *)MEMORY[0x186DBE2E4]();
  v7 = (void *)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v8 = (void *)MEMORY[0x1E0CB3940];
  v9 = objc_msgSend((id)objc_msgSend(v7, "temporaryDirectory"), "path");
  v10 = (void *)objc_msgSend(v8, "stringWithFormat:", CFSTR("%@/%@"), v9, objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3A28], "UUID"), "UUIDString"));
  v11 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@/assets"), v10);
  v28 = 0;
  objc_msgSend(v7, "removeItemAtPath:error:", a2, 0);
  if ((objc_msgSend(v7, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v11, 1, 0, &v28) & 1) == 0)
  {
    if (x_log_hook_p())
    {
      objc_msgSend(v10, "UTF8String");
LABEL_22:
      x_log_();
      goto LABEL_26;
    }
    v13 = x_log_category_utilities;
    if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
    {
LABEL_26:
      v23 = 0;
      goto LABEL_27;
    }
    v14 = objc_msgSend(v10, "UTF8String");
    *(_DWORD *)buf = 136315138;
    v30 = v14;
    v15 = "CAMLEncodeLayerTreeToPathWithOptions failed to create output dirs at %s";
    v16 = v13;
    v17 = 12;
LABEL_25:
    _os_log_impl(&dword_184457000, v16, OS_LOG_TYPE_ERROR, v15, buf, v17);
    goto LABEL_26;
  }
  if (a3)
  {
    v12 = CFGetTypeID(a3);
    if (v12 != CFDictionaryGetTypeID())
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v18 = x_log_category_utilities;
        if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v18, OS_LOG_TYPE_ERROR, "CAMLEncodeLayerTreeToPathWithOptions options must be a CFDictionary\n", buf, 2u);
        }
      }
    }
  }
  v19 = CAMLEncodeLayerTreeWithInfo(a1, (uint64_t)v10, a3);
  if (!v19)
    goto LABEL_26;
  -[__CFData writeToFile:atomically:](v19, "writeToFile:atomically:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@/%s"), v10, "main.caml"), 0);
  CFRelease(v19);
  v20 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 1);
  objc_msgSend(v20, "setObject:forKeyedSubscript:", CFSTR("main.caml"), CFSTR("rootDocument"));
  objc_msgSend(v20, "setObject:forKeyedSubscript:", *MEMORY[0x1E0C9AE50], CFSTR("geometryFlipped"));
  if (a3)
  {
    Value = CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("CACodingUserInfo"));
    if (Value)
      objc_msgSend(v20, "setObject:forKeyedSubscript:", Value, CFSTR("userInfo"));
  }
  v22 = (void *)objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v20, 100, 0, 0);
  if (v22)
    objc_msgSend(v22, "writeToFile:atomically:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@/%s"), v10, "index.xml"), 0);
  if ((objc_msgSend(v7, "moveItemAtPath:toPath:error:", v10, a2, &v28) & 1) == 0)
  {
    if (x_log_hook_p())
    {
      objc_msgSend(v10, "UTF8String");
      objc_msgSend(a2, "UTF8String");
      goto LABEL_22;
    }
    v24 = x_log_category_utilities;
    if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
      goto LABEL_26;
    v25 = objc_msgSend(v10, "UTF8String");
    v26 = objc_msgSend(a2, "UTF8String");
    *(_DWORD *)buf = 136315394;
    v30 = v25;
    v31 = 2080;
    v32 = v26;
    v15 = "CAMLEncodeLayerTreeToPathWithOptions failed to move %s to %s";
    v16 = v24;
    v17 = 22;
    goto LABEL_25;
  }
  v23 = 1;
LABEL_27:
  objc_autoreleasePoolPop(v6);
  return v23;
}

void sub_1845CF6E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

void CAMLEncodeLayerTreeToPathWithInfo(uint64_t a1, void *a2, void *a3)
{
  CFDictionaryRef v5;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  values = a3;
  keys[0] = CFSTR("CACodingUserInfo");
  if (a3)
  {
    v5 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CAMLEncodeLayerTreeToPathWithOptions(a1, a2, v5);
    if (v5)
      CFRelease(v5);
  }
  else
  {
    CAMLEncodeLayerTreeToPathWithOptions(a1, a2, 0);
  }
}

void CAEncodeLayerTreeToFile(objc_class *a1, uint64_t a2)
{
  CAEncodeLayerTreeToFileWithInfo(a1, a2, 0);
}

void CAEncodeLayerTreeToFileWithInfo(objc_class *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  void *v5;
  void *v6;

  v4 = CAEncodeLayerTreeWithInfo(a1, a3);
  if (v4)
  {
    v5 = v4;
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", a2);
    objc_msgSend(v5, "writeToFile:atomically:", v6, 0);

    CFRelease(v5);
  }
}

void CA::Render::Image::show(CA::Render::Image *this, unsigned int a2, char a3)
{
  _BOOL4 v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  NSObject *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  char *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  NSObject *v24;
  NSObject *v25;
  const __CFString *v26;
  const __CFString *v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  double v31;
  uint64_t v32;
  const char *v33;
  uint8_t *v34;
  NSObject *v35;
  uint32_t v36;
  NSObject *v37;
  int v38;
  int v39;
  unint64_t v40;
  const char *v41;
  unint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  char *v49;
  uint8_t v50[4];
  double v51;
  uint8_t buf[32];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v5 = x_log_hook_p();
  if ((a3 & 1) != 0)
  {
    if (v5)
    {
      x_log_();
    }
    else
    {
      v37 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v39 = *((_DWORD *)this + 4);
        v38 = *((_DWORD *)this + 5);
        v40 = *((unsigned __int8 *)this + 152);
        if (v40 > 0x23)
          v41 = "UNKNOWN";
        else
          v41 = off_1E159CBE8[v40];
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v39;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v38;
        *(_WORD *)&buf[14] = 2080;
        *(_QWORD *)&buf[16] = v41;
        _os_log_impl(&dword_184457000, v37, OS_LOG_TYPE_DEFAULT, "<image [%d %d] [%s]", buf, 0x18u);
      }
    }
    v42 = CA::Render::Image::data_size(this);
    if (x_log_hook_p())
    {
      if (v42 >= 0x400)
      {
        v46 = 1.0;
        do
          v46 = v46 * 0.0009765625;
        while (v46 * (double)v42 >= 1024.0);
      }
      goto LABEL_63;
    }
    v43 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v44 = (double)v42;
      if (v42 >= 0x400)
      {
        v47 = 1.0;
        do
        {
          v47 = v47 * 0.0009765625;
          v45 = v47 * v44;
        }
        while (v47 * v44 >= 1024.0);
      }
      else
      {
        v45 = (double)v42;
      }
      v48 = v42 > 0x3FF;
      if ((v42 & 0xFFFFFFFFFFF00000) != 0)
        ++v48;
      if ((v42 & 0xFFFFFFFFC0000000) != 0)
        ++v48;
      if (v42 >> 40)
        ++v48;
      if (v42 >> 50)
        ++v48;
      if (v42 >> 60)
        ++v48;
      v49 = off_1E15AAF00[v48];
      *(_DWORD *)buf = 134218242;
      *(double *)&buf[4] = v45;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v49;
      v33 = " [%.2lf %s]>";
      v34 = buf;
      v35 = v43;
      v36 = 22;
      goto LABEL_66;
    }
  }
  else
  {
    if (v5)
    {
      x_log_();
    }
    else
    {
      v6 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *((_DWORD *)this + 4);
        v7 = *((_DWORD *)this + 5);
        v9 = *((unsigned __int8 *)this + 153);
        v10 = *((unsigned __int8 *)this + 152);
        if (v10 > 0x23)
          v11 = "UNKNOWN";
        else
          v11 = off_1E159CBE8[v10];
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v8;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v7;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&buf[16] = v9;
        *(_WORD *)&buf[20] = 2080;
        *(_QWORD *)&buf[22] = v11;
        _os_log_impl(&dword_184457000, v6, OS_LOG_TYPE_DEFAULT, "(image [%d %d] [%d] %s", buf, 0x1Eu);
      }
    }
    v12 = CA::Render::Image::data_size(this);
    if (x_log_hook_p())
    {
      if (v12 >= 0x400)
      {
        v16 = 1.0;
        do
          v16 = v16 * 0.0009765625;
        while (v16 * (double)v12 >= 1024.0);
      }
      x_log_();
    }
    else
    {
      v13 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v14 = (double)v12;
        if (v12 >= 0x400)
        {
          v17 = 1.0;
          do
          {
            v17 = v17 * 0.0009765625;
            v15 = v17 * v14;
          }
          while (v17 * v14 >= 1024.0);
        }
        else
        {
          v15 = (double)v12;
        }
        v18 = v12 > 0x3FF;
        if ((v12 & 0xFFFFFFFFFFF00000) != 0)
          ++v18;
        if ((v12 & 0xFFFFFFFFC0000000) != 0)
          ++v18;
        if (v12 >> 40)
          ++v18;
        if (v12 >> 50)
          ++v18;
        if (v12 >> 60)
          ++v18;
        v19 = off_1E15AAF00[v18];
        *(_DWORD *)buf = 134218242;
        *(double *)&buf[4] = v15;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v19;
        _os_log_impl(&dword_184457000, v13, OS_LOG_TYPE_DEFAULT, " (%.2lf %s)", buf, 0x16u);
      }
    }
    v21 = *((float *)this + 15);
    v20 = *((float *)this + 16);
    v23 = *((float *)this + 17);
    v22 = *((float *)this + 18);
    if (v21 != 1.0 || v20 != 1.0 || v23 != 1.0 || v22 != 1.0)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v24 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218752;
          *(double *)&buf[4] = v21;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v20;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = v23;
          LOWORD(v53) = 2048;
          *(double *)((char *)&v53 + 2) = v22;
          _os_log_impl(&dword_184457000, v24, OS_LOG_TYPE_DEFAULT, " (tint %.3g %.3g %.3g %.3g)", buf, 0x2Au);
        }
      }
    }
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    memset(buf, 0, sizeof(buf));
    if (*((_QWORD *)this + 6))
    {
      if ((*((_BYTE *)this + 14) & 8) != 0)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v25 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v50 = 0;
            _os_log_impl(&dword_184457000, v25, OS_LOG_TYPE_DEFAULT, " colormatching-disabled", v50, 2u);
          }
        }
      }
      v26 = (const __CFString *)CGColorSpaceCopyICCProfileDescription();
      if (v26)
      {
        v27 = v26;
        CFStringGetCString(v26, (char *)buf, 127, 0x8000100u);
        if (buf[0])
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v28 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v50 = 136315138;
              v51 = COERCE_DOUBLE(buf);
              _os_log_impl(&dword_184457000, v28, OS_LOG_TYPE_DEFAULT, " (colorspace \"%s\")", v50, 0xCu);
            }
          }
        }
        CFRelease(v27);
      }
    }
    if ((*((_BYTE *)this + 14) & 0x40) != 0)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v29 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v50 = 0;
          _os_log_impl(&dword_184457000, v29, OS_LOG_TYPE_DEFAULT, " placeholder", v50, 2u);
        }
      }
    }
    if (*((float *)this + 14) > 1.0)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v30 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v31 = *((float *)this + 14);
          *(_DWORD *)v50 = 134217984;
          v51 = v31;
          _os_log_impl(&dword_184457000, v30, OS_LOG_TYPE_DEFAULT, " headroom %.3g", v50, 0xCu);
        }
      }
    }
    if (x_log_hook_p())
    {
LABEL_63:
      x_log_();
      return;
    }
    v32 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v50 = 0;
      v33 = ")";
      v34 = v50;
      v35 = v32;
      v36 = 2;
LABEL_66:
      _os_log_impl(&dword_184457000, v35, OS_LOG_TYPE_DEFAULT, v33, v34, v36);
    }
  }
}

CGColorSpace *CA::Render::Image::set_default_colorspace(CA::Render::Image *this)
{
  CGColorSpace *v2;

  v2 = (CGColorSpace *)CA::Render::format_default_colorspace((CA::Render *)*((unsigned __int8 *)this + 152));
  return CA::Render::Texture::set_colorspace(this, v2);
}

BOOL CA::Render::Image::implicitly_opaque(CA::Render::Image *this)
{
  unint64_t v1;

  v1 = *((unsigned __int8 *)this + 152);
  return ((0xC99B4EB03uLL >> v1) & 1) == 0 || v1 > 0x23;
}

uint64_t CA::Render::Texture::is_unpremultiplied(CA::Render::Texture *this)
{
  return 0;
}

uint64_t CA::Render::Texture::depth(CA::Render::Texture *this)
{
  return 1;
}

uint64_t CA::Render::Texture::has_linear_edr(CA::Render::Texture *this)
{
  return 0;
}

uint64_t CA::Render::Image::set_data_volatile(CA::Render::Image *this, unsigned int a2)
{
  unint64_t v3;
  uint64_t result;
  BOOL v5;

  v3 = *((_QWORD *)this + 15);
  if (!v3)
    return a2 ^ 1;
  result = CA::Render::Shmem::set_volatile(*((CA::Render::Shmem **)this + 15), a2, 0);
  if ((_DWORD)result)
    v5 = a2 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    CA::Render::post_notification(0xBu, v3, 0, 0);
    return 1;
  }
  return result;
}

float CA::Render::Image::opacity_at(CA::Render::Image *this, int a2, int a3, float *a4)
{
  unint64_t v5;
  float result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  __int16 *v15;
  unsigned __int8 v16[4];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = *((unsigned __int8 *)this + 152);
  result = 1.0;
  if (v5 <= 0x22 && ((0x419A4EB03uLL >> v5) & 1) != 0)
  {
    v8 = *((_DWORD *)this + 4);
    v9 = *((_DWORD *)this + 5);
    v10 = v8 - 1;
    if (v8 <= 0)
      v10 = 0;
    v11 = v8 <= a2;
    v12 = a2 & ~(a2 >> 31);
    if (v11)
      v12 = v10;
    v13 = v9 - 1;
    if (v9 <= 0)
      v13 = 0;
    if (v9 > a3)
      v14 = a3 & ~(a3 >> 31);
    else
      v14 = v13;
    v15 = (__int16 *)(*((_QWORD *)this + 12) + *((_QWORD *)this + 20) * v14 + (dword_184750480[v5] * v12));
    *(_DWORD *)v16 = 1065353216;
    CA::Render::format_opacity_at_value((CA::Render *)v5, v15, (float *)v16, a4, 1.0);
    return *(float *)v16;
  }
  return result;
}

__IOSurface *CA::Render::Image::retain_iosurface(CA::Render::Image *this)
{
  __IOSurface *v2;
  char v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v8;
  unint64_t v9;
  int v10;
  const __CFDictionary *v11;
  uint64_t i;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int valuePtr;
  unint64_t v19;
  int v20;
  void *values[8];
  void *keys[9];

  keys[8] = *(void **)MEMORY[0x1E0C80C00];
  v20 = 0;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::image_lock);
  v2 = (__IOSurface *)*((_QWORD *)this + 17);
  if (v2)
  {
    if (*((_DWORD *)this + 36) != *((_DWORD *)this + 9))
    {
      if (!IOSurfaceLock(*((IOSurfaceRef *)this + 17), 0, 0))
        IOSurfaceUnlock(v2, 0, 0);
      *((_DWORD *)this + 36) = *((_DWORD *)this + 9);
    }
LABEL_6:
    CFRetain(v2);
    goto LABEL_27;
  }
  switch(*((_BYTE *)this + 152))
  {
    case 1:
    case 3:
      v3 = 0;
      v4 = 1111970369;
      goto LABEL_21;
    case 5:
      v3 = 0;
      v4 = 1278555445;
      goto LABEL_21;
    case 6:
      v3 = 0;
      v4 = 846624121;
      goto LABEL_21;
    case 7:
      v3 = 0;
      v4 = 2037741171;
      goto LABEL_21;
    case 8:
    case 9:
      v3 = 0;
      v4 = 1093677112;
      goto LABEL_21;
    case 0xA:
      v3 = 0;
      v4 = 1278226488;
      goto LABEL_21;
    case 0xD:
    case 0x11:
      v3 = 0;
      v4 = 1380411457;
      goto LABEL_21;
    case 0xE:
      v3 = 0;
      v4 = 1380410945;
      goto LABEL_21;
    case 0x12:
      v3 = 0;
      v4 = 1279340600;
      goto LABEL_21;
    case 0x21:
      v3 = 0;
      v4 = 1999843442;
      goto LABEL_21;
    case 0x22:
      v3 = 0;
      v4 = 1999908961;
      goto LABEL_21;
    case 0x23:
      v3 = 0;
      v4 = 1647534392;
LABEL_21:
      v20 = v4;
      break;
    default:
      v20 = 0;
      v3 = 1;
      break;
  }
  v5 = *((_QWORD *)this + 12);
  v6 = *((_QWORD *)this + 20);
  v19 = v6;
  if (v5 % qword_1ECDC4CD0 || v6 % qword_1ECDC4CD8)
  {
    v2 = 0;
    goto LABEL_27;
  }
  if ((v3 & 1) != 0)
  {
    v8 = *((_DWORD *)this + 4);
    v17 = *((_DWORD *)this + 5);
    valuePtr = v8;
    v9 = *((unsigned __int8 *)this + 152);
    if (v9 > 0x25)
      v10 = 0;
    else
      v10 = dword_184750480[v9];
    v16 = v10;
    v14 = v5;
    v15 = CA::Render::Image::data_size(this);
    v13 = 0;
    keys[0] = *(void **)MEMORY[0x1E0CBC1E0];
    values[0] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    keys[1] = *(void **)MEMORY[0x1E0CBC008];
    values[1] = CFNumberCreate(0, kCFNumberIntType, &v17);
    keys[2] = *(void **)MEMORY[0x1E0CBC070];
    values[2] = CFNumberCreate(0, kCFNumberIntType, &v20);
    keys[3] = *(void **)MEMORY[0x1E0CBBF00];
    values[3] = CFNumberCreate(0, kCFNumberIntType, &v16);
    keys[4] = *(void **)MEMORY[0x1E0CBBF08];
    values[4] = CFNumberCreate(0, kCFNumberLongType, &v19);
    keys[5] = *(void **)MEMORY[0x1E0CBBEE0];
    values[5] = CFNumberCreate(0, kCFNumberLongType, &v15);
    keys[6] = *(void **)MEMORY[0x1E0CBBF68];
    values[6] = CFNumberCreate(0, kCFNumberLongType, &v14);
    keys[7] = *(void **)MEMORY[0x1E0CBC058];
    values[7] = CFNumberCreate(0, kCFNumberLongType, &v13);
    v11 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 7, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    for (i = 0; i != 8; ++i)
      CFRelease(values[i]);
    *((_QWORD *)this + 17) = IOSurfaceCreate(v11);
    CFRelease(v11);
    if (!IOSurfaceLock(*((IOSurfaceRef *)this + 17), 0, 0))
      IOSurfaceUnlock(*((IOSurfaceRef *)this + 17), 0, 0);
    v2 = (__IOSurface *)*((_QWORD *)this + 17);
  }
  else
  {
    CA::Render::Image::data_size(this);
    v2 = (__IOSurface *)IOSurfaceWrapClientImage();
    *((_QWORD *)this + 17) = v2;
  }
  *((_DWORD *)this + 36) = *((_DWORD *)this + 9);
  if (v2)
    goto LABEL_6;
LABEL_27:
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::image_lock);
  return v2;
}

void CA::Render::Image::update_iosurface(__IOSurface **this, __IOSurface *a2)
{
  __IOSurface *v2;
  __IOSurface *v4;

  v2 = a2;
  if (a2 && this[17] != a2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::image_lock);
    goto LABEL_6;
  }
  if (*((_DWORD *)this + 36) == *((_DWORD *)this + 9))
    return;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::image_lock);
  if (v2)
  {
LABEL_6:
    v4 = this[17];
    if (v4 != v2)
    {
      if (v4)
        CFRelease(v4);
      v2 = (__IOSurface *)CFRetain(v2);
      this[17] = v2;
      *((_DWORD *)this + 36) = 0;
      if (!v2)
        goto LABEL_16;
    }
    goto LABEL_12;
  }
  v2 = this[17];
  if (v2)
  {
LABEL_12:
    if (*((_DWORD *)this + 36) != *((_DWORD *)this + 9))
    {
      if (!IOSurfaceLock(v2, 0, 0))
        IOSurfaceUnlock(this[17], 0, 0);
      *((_DWORD *)this + 36) = *((_DWORD *)this + 9);
    }
  }
LABEL_16:
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::image_lock);
}

CGImageRef CA::Render::Image::copy_cgimage(CA::Render::Image *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CGImage *v5;
  unint64_t v6;
  size_t v7;
  unsigned int *v8;
  unsigned int v9;
  CGDataProvider *v10;
  CGColorSpace *v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  CGBitmapInfo v17;
  malloc_zone_t *v18;
  malloc_zone_t *malloc_zone;
  CGImage **v20;
  CGImage **v21;
  int v22;
  CGImageRef v23;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::image_lock);
  v2 = CA::Render::cg_image_cache;
  if (!CA::Render::cg_image_cache)
  {
    CA::Render::cg_image_cache = (uint64_t)x_hash_table_new_(0, 0, 0, 0, 0, 0);
    CA::Render::add_observer(3u, 0, (uint64_t)CA::Render::render_image_deleted, 0, 0);
    v2 = CA::Render::cg_image_cache;
  }
  v3 = x_hash_table_lookup(v2, (uint64_t)this, 0);
  v4 = v3;
  if (!v3)
    goto LABEL_8;
  v5 = *(CGImage **)v3;
  if (*(_DWORD *)(v3 + 8) != *((_DWORD *)this + 9))
  {
    CGImageRelease(*(CGImageRef *)v3);
    *(_QWORD *)v4 = 0;
    goto LABEL_8;
  }
  if (!v5)
  {
LABEL_8:
    v6 = *((_QWORD *)this + 20);
    if (is_mul_ok(v6, *((unsigned int *)this + 5)))
      v7 = v6 * *((unsigned int *)this + 5);
    else
      v7 = 0;
    v8 = (unsigned int *)((char *)this + 148);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v10 = CGDataProviderCreateWithData(this, *((const void **)this + 12), v7, (CGDataProviderReleaseDataCallback)CA::Render::release_bitmap);
    v11 = (CGColorSpace *)*((_QWORD *)this + 6);
    if (!v11)
    {
      v12 = *((unsigned __int8 *)this + 152);
      if ((v12 - 8) >= 2)
      {
        if (v12 == 10)
          v13 = 1;
        else
          v13 = 2;
        v11 = (CGColorSpace *)CAGetColorSpace(v13);
      }
      else
      {
        v11 = 0;
      }
    }
    v14 = *((unsigned __int8 *)this + 152);
    if (v14 > 0x23)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
    }
    else
    {
      v15 = dword_1847503F0[v14];
      v16 = dword_184750518[v14];
      v17 = dword_184750360[v14];
    }
    v5 = CGImageCreate(*((unsigned int *)this + 4), *((unsigned int *)this + 5), v16, v15, *((_QWORD *)this + 20), v11, v17, v10, 0, 1, kCGRenderingIntentDefault);
    CGDataProviderRelease(v10);
    if (v5)
    {
      if (v4)
      {
        *(_QWORD *)v4 = v5;
        *(_DWORD *)(v4 + 8) = *((_DWORD *)this + 9);
        goto LABEL_30;
      }
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v20 = (CGImage **)malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
      if (v20)
      {
        v21 = v20;
        v22 = *((_DWORD *)this + 9);
        *v20 = v5;
        *((_DWORD *)v20 + 2) = v22;
        hash_table_modify((int *)CA::Render::cg_image_cache, (uint64_t)this, (uint64_t)v20, 0);
        v5 = *v21;
        goto LABEL_30;
      }
      hash_table_modify((int *)CA::Render::cg_image_cache, (uint64_t)this, 0, 0);
    }
    else if (v4)
    {
      x_hash_table_remove(CA::Render::cg_image_cache, (uint64_t)this);
      CGImageRelease(*(CGImageRef *)v4);
      v18 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v18, (void *)v4);
    }
    v23 = 0;
    goto LABEL_33;
  }
LABEL_30:
  v23 = CGImageRetain(v5);
LABEL_33:
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::image_lock);
  return v23;
}

void CA::Render::render_image_deleted(CA::Render *this, CA::Render::Object *a2, void *a3, void *a4)
{
  CGImageRef *v5;
  malloc_zone_t *malloc_zone;

  if (CA::Render::cg_image_cache)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::image_lock);
    v5 = (CGImageRef *)x_hash_table_remove(CA::Render::cg_image_cache, (uint64_t)this);
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::image_lock);
    if (v5)
    {
      CGImageRelease(*v5);
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(malloc_zone, v5);
    }
  }
}

void CA::CG::AccelQueue::finish_renderer(CA::CG::AccelQueue *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const __CFString *a7)
{
  CA::CG::AccelRenderer **v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*((_BYTE *)this + 209))
    v8 = (CA::CG::AccelRenderer **)*((_QWORD *)this + 25);
  else
    v8 = 0;
  v9 = CA::CG::AccelRenderer::acquire(*((CA::CG::AccelRenderer **)this + 22), (CA::CG::AccelQueue *)((char *)this + 184), v8, *((unsigned int *)this + 6), 1, *((const __CFString **)this + 24), a7);
  if (v9)
  {
    v10 = v9;
    if (*((_BYTE *)this + 208))
    {
      *((_BYTE *)this + 208) = 0;
      (*(void (**)(_QWORD))(**((_QWORD **)this + 22) + 64))(*((_QWORD *)this + 22));
    }
    CA::CG::AccelRenderer::unlock_surface((CA::CG::AccelRenderer *)v10);
    CA::CG::Renderer::end_rendering((CA::CG::Renderer *)v10);
    CA::CG::Renderer::end_rendering((CA::CG::Renderer *)v10);
    (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 8) + 416))(*(_QWORD *)(v10 + 8));
    v11 = *(_DWORD *)(v10 + 152);
    *(_DWORD *)(v10 + 156) = v11;
    v13 = *(_QWORD *)v10;
    v12 = *(_QWORD *)(v10 + 8);
    *(_DWORD *)(v12 + 212) = v11;
    *(_DWORD *)(v12 + 216) = v11;
    (*(void (**)(uint64_t))(v13 + 16))(v10);
    ++*(_DWORD *)(v10 + 152);
    v14 = *(_QWORD *)(v10 + 8);
    *(_BYTE *)(v10 + 4228) = 0;
    *(_DWORD *)(v14 + 336) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 4224));
  }
}

uint64_t CABackingStoreIsVolatile(uint64_t a1)
{
  return HIBYTE(*(unsigned __int16 *)(a1 + 492)) & 1;
}

uint64_t CABackingStoreIsPurged(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 400);
  if (!v1 || *(_BYTE *)(v1 + 65))
    return 0;
  v4 = *(_QWORD *)(v1 + 16);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 12);
    if ((v5 & 0x400) != 0)
    {
      if ((v5 & 0x1000) != 0)
      {
        v7 = 0;
        v2 = 1;
        if (!MEMORY[0x186DBEA88](*MEMORY[0x1E0C83DA0], *(_QWORD *)(v4 + 24) & -*MEMORY[0x1E0C85AD8], 1, &v7))return v7 == 2;
        return v2;
      }
      return 1;
    }
    return 0;
  }
  v6 = *(_BYTE **)(v1 + 24);
  if (!v6)
    return 1;
  if (!v6[68])
    return 0;
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v6 + 88))(v6);
}

uint64_t CABackingStoreSetVolatileOptions(uint64_t result, int a2)
{
  *(_DWORD *)(result + 488) = a2;
  return result;
}

uint64_t CABackingStoreUpdate(unint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4, void (*a5)(_QWORD, uint64_t), uint64_t a6)
{
  return CABackingStoreUpdate_(a1, a2, a3, 11, a4, 0, 0, a5, a6, 0, 0);
}

uint64_t CABackingStoreBeginUpdate(unint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  pthread_mutex_t *v8;
  _opaque_pthread_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];

  v14[3] = *MEMORY[0x1E0C80C00];
  v8 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  v9 = *(_opaque_pthread_t **)(a1 + 480);
  if (v9)
  {
    if (v9 == pthread_self())
      goto LABEL_16;
    while (*(_QWORD *)(a1 + 480))
      pthread_cond_wait((pthread_cond_t *)(a1 + 80), v8);
  }
  memset(v14, 0, 24);
  if (*(_QWORD *)(a1 + 408))
    __assert_rtn("CABackingStoreBeginUpdate", "CABackingStore.cpp", 1437, "!CABackStoreIsUpdating_ (b)");
  *(_QWORD *)(a1 + 128) = a2;
  *(_QWORD *)(a1 + 136) = a3;
  if (CABackingStorePrepareUpdates_(a1, a2, a3, 1, a4, 0, 0, 0, (uint64_t)v14))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 408) + 16);
    if (v10 && *(_DWORD *)(*(_QWORD *)(v10 + 24) + 32) != 1)
      __assert_rtn("CABackingStoreBeginUpdate", "CABackingStore.cpp", 1447, "levels == 1");
    CABackingStoreBeginUpdate_(a1, a2, a3, (CA *)1, a4, 0, 0, 0, v14);
    if (*(_QWORD *)(a1 + 416))
    {
      *(_QWORD *)(a1 + 480) = pthread_self();
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 408);
      if (*(_QWORD *)(a1 + 448))
      {
        CGSReleaseRegion();
        *(_QWORD *)(a1 + 448) = 0;
      }
      if (*(_QWORD *)(a1 + 456))
        CGSReleaseRegion();
      CABackingStoreReleaseImages((CABackingStore *)a1);
      *(_DWORD *)(v11 + 56) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(a1 + 472) = 0;
      *(_BYTE *)(a1 + 492) = 6;
      *(_QWORD *)(a1 + 408) = 0;
    }
  }
LABEL_16:
  v12 = *(_QWORD *)(a1 + 416);
  pthread_mutex_unlock(v8);
  return v12;
}

uint64_t CABackingStoreEndUpdate(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  CGContext *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  v2 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  v3 = *(_QWORD *)(a1 + 408);
  if (!v3)
    __assert_rtn("CABackingStoreEndUpdate", "CABackingStore.cpp", 1468, "CABackStoreIsUpdating_ (b)");
  *(_QWORD *)(a1 + 480) = 0;
  if (*(_QWORD *)(a1 + 416))
  {
    v4 = *(_QWORD *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 24);
    if (*(_QWORD *)(a1 + 400))
    {
      CGContextGetEDRTargetHeadroom();
      *(_DWORD *)(*(_QWORD *)(a1 + 400) + 60) = v6;
    }
    if (v4)
    {
      v7 = *(_QWORD *)(v4 + 24);
      v8 = *(CGContext **)(a1 + 416);
      if ((*(_WORD *)(a1 + 492) & 0x1000) != 0)
      {
        if (v8)
          MEMORY[0x186DBD990](v8, 0x10A0C40A7187C27);
      }
      else
      {
        CAReleaseCachedCGContext(v8);
      }
      *(_QWORD *)(a1 + 416) = 0;
      v9 = (unsigned int *)(v7 + 4);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    else if (v5)
    {
      CAReleaseCachedCGContext(*(CGContext **)(a1 + 416));
      *(_QWORD *)(a1 + 416) = 0;
      *(_WORD *)(a1 + 492) |= 0x800u;
    }
  }
  v11 = *(_QWORD *)(a1 + 408);
  if (*(_QWORD *)(a1 + 448))
  {
    CGSReleaseRegion();
    *(_QWORD *)(a1 + 448) = 0;
  }
  if (*(_QWORD *)(a1 + 456))
    CGSReleaseRegion();
  CABackingStoreReleaseImages((CABackingStore *)a1);
  *(_DWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_BYTE *)(a1 + 492) = 6;
  *(_QWORD *)(a1 + 408) = 0;
  pthread_cond_broadcast((pthread_cond_t *)(a1 + 80));
  return pthread_mutex_unlock(v2);
}

uint64_t CABackingStoreGetUpdateRegion(uint64_t a1)
{
  return *(_QWORD *)(a1 + 448);
}

CGImageRef CABackingStoreCopyCGImage(uint64_t a1)
{
  pthread_mutex_t *v2;
  __int16 v3;
  CGImage *v4;
  uint64_t v5;
  CA::Render::Shmem *v6;
  CGImageRef v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  v2 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  v3 = *(_WORD *)(a1 + 492);
  if ((v3 & 0x100) != 0)
  {
    v7 = 0;
    goto LABEL_8;
  }
  v4 = *(CGImage **)(a1 + 432);
  if (!v4)
  {
    v5 = *(_QWORD *)(a1 + 400);
    v6 = *(CA::Render::Shmem **)(v5 + 16);
    if (v6)
    {
      v4 = CA::Render::Shmem::copy_cgimage(v6, *(CGColorSpace **)(v5 + 8), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
    }
    else
    {
      v9 = *(_QWORD *)(v5 + 24);
      if (!v9)
      {
        v4 = 0;
        goto LABEL_6;
      }
      if ((*(_WORD *)(a1 + 492) & 0x800) != 0)
      {
        v10 = *(_QWORD *)(v9 + 72);
        if (v10)
        {
          CA::CG::Queue::flush(v10, 3, 1);
          v3 = *(_WORD *)(a1 + 492);
        }
        *(_WORD *)(a1 + 492) = v3 & 0xF7FF;
      }
      v11 = *(_DWORD *)(v9 + 16);
      if (v11 <= 0x23 && ((0x1FFFFFF2FuLL >> v11) & 1) == 0)
        v4 = CA::CG::IOSurfaceDrawable::copy_cgimage_iosurface((CA::CG::IOSurfaceDrawable *)v9);
      else
        v4 = CA::CG::IOSurfaceDrawable::copy_cgimage((CA::CG::IOSurfaceDrawable *)v9);
    }
    *(_QWORD *)(a1 + 432) = v4;
  }
LABEL_6:
  v7 = CGImageRetain(v4);
LABEL_8:
  pthread_mutex_unlock(v2);
  return v7;
}

CGColorRef CABackingStoreCopyTintColor(uint64_t a1)
{
  pthread_mutex_t *v2;
  CGColorRef v3;

  v2 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if ((*(_WORD *)(a1 + 492) & 0x100) != 0)
    v3 = 0;
  else
    v3 = CGColorRetain(*(CGColorRef *)(*(_QWORD *)(a1 + 400) + 32));
  pthread_mutex_unlock(v2);
  return v3;
}

CGColorSpaceRef CABackingStoreCopyColorSpace(uint64_t a1)
{
  pthread_mutex_t *v2;
  CGColorSpace *v3;
  CGColorSpaceRef v4;

  v2 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if ((*(_WORD *)(a1 + 492) & 0x100) != 0)
  {
    v4 = 0;
  }
  else
  {
    v3 = *(CGColorSpace **)(*(_QWORD *)(a1 + 400) + 8);
    if (!v3)
      v3 = *(CGColorSpace **)(a1 + 160);
    v4 = CGColorSpaceRetain(v3);
  }
  pthread_mutex_unlock(v2);
  return v4;
}

uint64_t CABackingStoreHasVerticalPadding(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 492) >> 14) & 1;
}

void CABackingStoreCollectWithCompletionHandler(void (**a1)(_QWORD))
{
  uint64_t v2;
  double v3;
  double *v4;
  double v5;

  v2 = mach_absolute_time();
  v3 = CATimeWithHostTime(v2);
  CA::Render::post_notification(0x33u, 0, 0, 0);
  CA::Render::collect((CA::Render *)1, v3);
  if (buffer_list)
  {
    v4 = (double *)operator new();
    *v4 = v3 + 1.0;
    v4[1] = 0.0166666667;
    *((_QWORD *)v4 + 2) = _Block_copy(a1);
    yielding_collect_callback(v5, v4);
  }
  else
  {
    a1[2](a1);
  }
}

void yielding_collect_callback(double a1, void *a2)
{
  uint64_t v3;
  double v4;
  void *v5;
  double v6;
  unint64_t StatusReg;
  CA::Transaction *v8;
  CA::Transaction *v9;
  double v10;
  double v11;

  v3 = mach_absolute_time();
  v4 = CATimeWithHostTime(v3);
  if (v4 >= *(double *)a2)
    goto LABEL_13;
  v6 = CABackingStoreCollect_(v4, 1);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = *(CA::Transaction **)(StatusReg + 576);
  if (!v8)
    v8 = (CA::Transaction *)CA::Transaction::create(0);
  if (!**((_DWORD **)v8 + 13))
    CA::Transaction::ensure_implicit(v8, 1);
  v9 = *(CA::Transaction **)(StatusReg + 576);
  if (v9 && **((_DWORD **)v9 + 13))
    CA::Transaction::flush(v9);
  if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
LABEL_13:
    (*(void (**)(void))(*((_QWORD *)a2 + 2) + 16))();
    _Block_release(*((const void **)a2 + 2));
    JUMPOUT(0x186DBD990);
  }
  v10 = *(double *)a2;
  v11 = *((double *)a2 + 1);
  if (v11 + v4 < *(double *)a2)
    v10 = v11 + v4;
  *((double *)a2 + 1) = v11 + v11;
  CA::call_at_time((CA *)yielding_collect_callback, (void (*)(double, void *))a2, v10, v5);
}

CFStringRef backingStoreCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;

  v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, CFSTR("<CABackingStore %p>"), a1);
}

__CFString *backingStoreCopyDebugDescription(char *a1)
{
  __CFString *Mutable;
  _QWORD *i;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  __IOSurface *v12;
  uint64_t ID;
  uint64_t v14;
  const char *v15;
  const char *v16;
  uint64_t v18;

  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<CABackingStore %p"), a1);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  for (i = (_QWORD *)*((_QWORD *)a1 + 50); i; i = (_QWORD *)*i)
  {
    v4 = i[2];
    if (v4)
    {
      v5 = *(unsigned int **)(v4 + 24);
      v6 = v5[3];
      v7 = "UNKNOWN";
      if (v6 <= 0x23)
        v7 = off_1E159CBE8[v6];
      v9 = v5[4];
      v8 = v5[5];
      if ((*(_DWORD *)(v4 + 12) & 0x400) != 0)
        v10 = " volatile";
      else
        v10 = "";
      CFStringAppendFormat(Mutable, 0, CFSTR(" (buffer [%d %d] %s%s)"), v9, v8, v7, v10, v18);
    }
    else
    {
      v11 = i[3];
      if (v11)
      {
        v12 = (__IOSurface *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v11 + 24))(i[3]);
        ID = IOSurfaceGetID(v12);
        v14 = *(unsigned int *)(v11 + 16);
        v15 = "UNKNOWN";
        if (v14 <= 0x23)
          v15 = off_1E159CBE8[v14];
        if (*(_BYTE *)(v11 + 68))
          v16 = " volatile";
        else
          v16 = "";
        CFStringAppendFormat(Mutable, 0, CFSTR(" (surface 0x%x [%d %d] %s%s)"), ID, *(unsigned int *)(v11 + 44), *(unsigned int *)(v11 + 48), v15, v16);
      }
    }
  }
  CFStringAppend(Mutable, CFSTR(">"));
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
  return Mutable;
}

uint64_t ___ZL20backingStoreFinalizePKv_block_invoke(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v1 = result;
  v2 = *(unsigned int **)(result + 32);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (**(void (***)(unsigned int *))v2)(v2);
      result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = *(unsigned int **)(v1 + 40);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      (**(void (***)(unsigned int *))v6)(v6);
      result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    }
  }
  v10 = *(unsigned int **)(v1 + 48);
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      (**(void (***)(unsigned int *))v10)(v10);
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v10 + 16))(v10);
    }
  }
  return result;
}

void memory_warning(CA::DispatchGroup *this, void (*a2)(void *), void *a3)
{
  if (buffer_list)
  {
    while (!__ldaxr(pending_async_collect))
    {
      if (!__stlxr(1u, pending_async_collect))
      {
        CA::DispatchGroup::enqueue(this, a2, a3);
        return;
      }
    }
    __clrex();
  }
}

uint64_t CABackingStoreGetTypeID()
{
  uint64_t result;

  result = CABackingStoreGetTypeID::type;
  if (!CABackingStoreGetTypeID::type)
  {
    result = _CFRuntimeRegisterClass();
    CABackingStoreGetTypeID::type = result;
  }
  return result;
}

void CA::Render::ImageQueue::~ImageQueue(id **this, CA::Render::Object *a2)
{
  malloc_zone_t *malloc_zone;

  CA::Render::ImageQueue::~ImageQueue(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  id *v3;
  id v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  id *v8;
  id *v9;
  const CA::Render::Object *v10;
  id *v11;
  uint64_t i;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  malloc_zone_t *malloc_zone;
  id *v18;
  uint64_t v19;
  id *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  id *v30;
  id *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;

  *this = (id *)off_1E15961E0;
  CA::Render::Context::remove_image_queue((CA::Render::Context *)this, a2);
  v3 = this[27];
  if (v3)
  {
    do
    {
      v4 = *v3;
      v5 = (unsigned int *)((char *)*v3 + 8);
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(id))(*(_QWORD *)v4 + 16))(v4);
      v3 = (id *)v3[1];
    }
    while (v3);
    v8 = this[27];
    if (v8)
    {
      do
      {
        v9 = (id *)v8[1];
        free(v8);
        v8 = v9;
      }
      while (v9);
    }
  }
  v10 = (const CA::Render::Object *)*((unsigned int *)this + 47);
  if ((_DWORD)v10)
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], (mach_port_name_t)v10);
  v11 = this[9];
  if (v11)
  {

    for (i = 0; i != 3; ++i)
    {
      v13 = (unsigned int *)v11[i + 1];
      if (v13)
      {
        v14 = v13 + 2;
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
      }
    }
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v11);
  }
  v18 = this[14];
  if (v18)
  {
    v19 = (uint64_t)*(v18 - 1);
    if (v19)
    {
      v20 = &v18[6 * v19];
      do
      {
        v21 = (unsigned int *)*(v20 - 5);
        if (v21)
        {
          v22 = v21 + 2;
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
            (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 16))(v21);
        }
        v26 = (unsigned int *)*(v20 - 6);
        v20 -= 6;
        v25 = v26;
        if (v26)
        {
          v27 = v25 + 2;
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
            (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 16))(v25);
        }
      }
      while (v20 != v18);
    }
    MEMORY[0x186DBD978](v18 - 2, 0x1020C8087734790);
  }
  v30 = this[19];
  if (v30)
    MEMORY[0x186DBD990](v30, 0x1000C4005756C2ELL);
  v31 = (id *)(this + 25);
  if (this[25])
  {
    if (*((_BYTE *)this + 208))
      objc_storeWeakOrNil(v31, 0);
    else
      *v31 = 0;
  }
  v32 = (unsigned int *)this[20];
  if (v32)
  {
    v33 = v32 + 2;
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
      (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
  }
  v36 = (unsigned int *)this[13];
  if (v36)
  {
    v37 = v36 + 4;
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
      (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 8))(v36);
  }
  v40 = (unsigned int *)this[10];
  if (v40)
  {
    v41 = v40 + 2;
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
      (*(void (**)(unsigned int *))(*(_QWORD *)v40 + 16))(v40);
  }
  v44 = (unsigned int *)this[8];
  if (v44)
  {
    v45 = v44 + 2;
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
      (*(void (**)(unsigned int *))(*(_QWORD *)v44 + 16))(v44);
  }
  v48 = (unsigned int *)this[4];
  if (v48)
  {
    v49 = v48 + 2;
    do
    {
      v50 = __ldaxr(v49);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, v49));
    if (!v51)
      (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 16))(v48);
  }
  v52 = (unsigned int *)this[3];
  if (v52)
  {
    v53 = v52 + 2;
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
      (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 16))(v52);
  }
  v56 = (unsigned int *)this[2];
  if (v56)
  {
    v57 = v56 + 2;
    do
    {
      v58 = __ldaxr(v57);
      v59 = v58 - 1;
    }
    while (__stlxr(v59, v57));
    if (!v59)
      (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 16))(v56);
  }
  --dword_1ECDC7C8C;
  *this = (id *)off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate((CA::Render::Encoder::ObjectCache *)this, v10);
}

void CA::Render::ImageQueue::show(CA::Render::ImageQueue *this, int a2, uint64_t a3)
{
  CA::Render *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  CA::Render *v18;
  uint8_t v19[8];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  CAShmemImageQueueShow(*(_QWORD *)(*((_QWORD *)this + 2) + 24), *((unsigned int *)this + 43), BYTE1(*((_DWORD *)this + 3)), a2, a3);
  if ((a3 & 1) == 0)
  {
    v6 = (CA::Render *)(a2 + 1);
    CA::Render::show_newline(v6);
    v7 = *((_QWORD *)this + 3);
    if (v7)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v12 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v19 = 0;
          _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_DEFAULT, "(currentTexture ", v19, 2u);
        }
      }
      (*(void (**)(uint64_t, CA::Render *, uint64_t))(*(_QWORD *)v7 + 40))(v7, v6, a3);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v13 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v19 = 0;
          _os_log_impl(&dword_184457000, v13, OS_LOG_TYPE_DEFAULT, ")", v19, 2u);
        }
      }
      v14 = *((_QWORD *)this + 10);
      if (v14)
      {
        CA::Render::show_newline(v6);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v15 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v19 = 0;
            _os_log_impl(&dword_184457000, v15, OS_LOG_TYPE_DEFAULT, "(currentForwardDMTexture ", v19, 2u);
          }
        }
        (*(void (**)(uint64_t, CA::Render *, uint64_t))(*(_QWORD *)v14 + 40))(v14, v6, a3);
        if (!x_log_hook_p())
        {
          v16 = x_log_category_render;
          if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            return;
          *(_WORD *)v19 = 0;
LABEL_32:
          _os_log_impl(&dword_184457000, v16, OS_LOG_TYPE_DEFAULT, ")", v19, 2u);
          return;
        }
        goto LABEL_29;
      }
    }
    else
    {
      v8 = *((_QWORD *)this + 4);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 24);
        v10 = *(_QWORD *)(v8 + 32);
        if (v10 && v9 != 0)
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v17 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v19 = 0;
              _os_log_impl(&dword_184457000, v17, OS_LOG_TYPE_DEFAULT, "(blendedTextures", v19, 2u);
            }
          }
          v18 = (CA::Render *)(a2 + 2);
          CA::Render::show_newline(v18);
          (*(void (**)(uint64_t, CA::Render *, uint64_t))(*(_QWORD *)v10 + 40))(v10, v6, a3);
          CA::Render::show_newline(v18);
          (*(void (**)(uint64_t, CA::Render *, uint64_t))(*(_QWORD *)v9 + 40))(v9, v6, a3);
          CA::Render::show_newline(v6);
          if (!x_log_hook_p())
          {
            v16 = x_log_category_render;
            if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              return;
            *(_WORD *)v19 = 0;
            goto LABEL_32;
          }
LABEL_29:
          x_log_();
        }
      }
    }
  }
}

uint64_t CA::Render::ImageQueue::hdr_processor(CA::Render::ImageQueue *this, CA::Render::Context *a2)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *((_QWORD *)this + 13);
  if (!v2)
  {
    v2 = CA::CAHDRProcessor::new_hdr_processor(this);
    v4 = (unsigned int *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v2;
    if (v4)
    {
      v5 = v4 + 4;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      return *((_QWORD *)this + 13);
    }
  }
  return v2;
}

uint64_t CA::Render::ImageQueue::retain_scaler_stats(CA::Render::ImageQueue *this, uint64_t a2)
{
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if (byte_1ECDC6A8F)
  {
    result = 0;
  }
  else
  {
    result = *(_QWORD *)(a2 + 160);
    if (result)
      goto LABEL_3;
    result = operator new();
    *(_BYTE *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 1;
    *(_QWORD *)result = &off_1E1590EC8;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 16) = 850045863;
    v7 = *(unsigned int **)(a2 + 160);
    *(_QWORD *)(a2 + 160) = result;
    if (!v7)
      goto LABEL_3;
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    result = *(_QWORD *)(a2 + 160);
    if (result)
    {
LABEL_3:
      v5 = (unsigned int *)(result + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
  }
  *(_QWORD *)this = result;
  return result;
}

double CA::Render::ImageQueue::flush_cache(CA::Render::ImageQueue *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  double result;

  v2 = (unsigned int *)*((_QWORD *)this + 3);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    *((_QWORD *)this + 3) = 0;
  }
  v6 = (unsigned int *)*((_QWORD *)this + 4);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    *((_QWORD *)this + 4) = 0;
  }
  *((_QWORD *)this + 5) = 0x7FF0000000000000;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 45) = 0;
  v10 = (unsigned int *)*((_QWORD *)this + 8);
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 16))(v10);
    *((_QWORD *)this + 8) = 0;
  }
  v14 = (unsigned int *)*((_QWORD *)this + 10);
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
    *((_QWORD *)this + 10) = 0;
  }
  *((_BYTE *)this + 132) = 0;
  *(_QWORD *)&result = 1065353216;
  *(_OWORD *)((char *)this + 88) = xmmword_18474E000;
  *((_DWORD *)this + 3) = *((_DWORD *)this + 3) & 0xFFFFF1FF | 0x600;
  return result;
}

uint64_t CA::Render::ImageQueue::resolved_display_attributes(CA::Render::ImageQueue *this, const CA::Render::Update *a2)
{
  float v3;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;

  v3 = *((float *)this + 36);
  if (v3 >= 1.0)
    return (uint64_t)a2 + 352;
  v5 = *((_QWORD *)this + 19);
  if (!v5)
  {
    v5 = operator new();
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_QWORD *)(v5 + 96) = 0;
    *(_OWORD *)(v5 + 12) = xmmword_18474E010;
    *(_DWORD *)(v5 + 28) = 1065353216;
    *(_OWORD *)(v5 + 32) = xmmword_18474E020;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_QWORD *)(v5 + 48) = 0;
    *(_WORD *)(v5 + 56) = 0;
    *(_QWORD *)(v5 + 60) = 0x100000001;
    *(_OWORD *)(v5 + 68) = 0u;
    *(_OWORD *)(v5 + 84) = 0u;
    *(_BYTE *)(v5 + 100) = 0;
    *(_DWORD *)(v5 + 104) = 1065353216;
    *(_QWORD *)(v5 + 116) = 0;
    *(_QWORD *)(v5 + 108) = 0;
    *(_DWORD *)(v5 + 124) = -1;
    *((_QWORD *)this + 19) = v5;
  }
  v6 = *((_OWORD *)a2 + 22);
  v7 = *((_OWORD *)a2 + 23);
  v8 = *((_OWORD *)a2 + 25);
  *(_OWORD *)(v5 + 32) = *((_OWORD *)a2 + 24);
  *(_OWORD *)(v5 + 48) = v8;
  *(_OWORD *)v5 = v6;
  *(_OWORD *)(v5 + 16) = v7;
  v9 = *((_OWORD *)a2 + 26);
  v10 = *((_OWORD *)a2 + 27);
  v11 = *((_OWORD *)a2 + 29);
  *(_OWORD *)(v5 + 96) = *((_OWORD *)a2 + 28);
  *(_OWORD *)(v5 + 112) = v11;
  *(_OWORD *)(v5 + 64) = v9;
  *(_OWORD *)(v5 + 80) = v10;
  v12 = *((_QWORD *)this + 19);
  v13 = *(float *)(v12 + 12);
  if (v13 != 0.0)
  {
    v14 = *(float *)(v12 + 20);
    if (v14 != 0.0)
    {
      v15 = log2f(*(float *)(v12 + 20));
      v16 = exp2f(v15 * v3);
      *(float *)(v12 + 20) = v16;
      *(float *)(v12 + 12) = (float)(v16 * v13) / v14;
    }
  }
  return v12;
}

__n128 CA::Render::Surface::set_tonemap_cfg(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;

  v4 = *(unsigned int **)(a1 + 168);
  v5 = *(unsigned int **)a2;
  if (v4 != *(unsigned int **)a2)
  {
    if (v4)
    {
      v6 = v4 + 4;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      v5 = *(unsigned int **)a2;
    }
    if (v5)
    {
      v9 = v5 + 4;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    *(_QWORD *)(a1 + 168) = v5;
  }
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 8);
  v11 = *(_OWORD *)(a2 + 24);
  v12 = *(_OWORD *)(a2 + 40);
  v13 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 240) = v13;
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  result = *(__n128 *)(a2 + 88);
  v15 = *(_OWORD *)(a2 + 104);
  v16 = *(_OWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 136);
  *(_OWORD *)(a1 + 272) = v15;
  *(_OWORD *)(a1 + 288) = v16;
  *(__n128 *)(a1 + 256) = result;
  return result;
}

uint64_t CA::Render::ImageQueue::forward_dm(os_unfair_lock_s *this, CA::Render::Context *a2, CA::Render::Update *a3, float a4, int a5, int a6, _BYTE *a7, BOOL *a8)
{
  os_unfair_lock_s *v11;
  CA::Render::Context *v13;
  uint64_t v14;
  CA::Render::Surface *v15;
  CA::Render::Surface *v16;
  uint32_t os_unfair_lock_opaque;
  _DWORD *v18;
  float v19;
  uint64_t v23;
  CA::Render::Context *v24;
  uint64_t v25;
  int v26;
  double v27;
  float v28;
  CA::Render::Surface *v29;
  __int16 v30;
  _BOOL4 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  __IOSurface *v35;
  _OWORD *v36;
  _OWORD *v37;
  _OWORD *v38;
  _OWORD *v39;
  IOSurfaceID ID;
  float v41;
  float v42;
  uint64_t i;
  unsigned int **v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  _OWORD *v51;
  unsigned int *v52;
  _QWORD *v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  _OWORD *v58;
  CA::Render::Context *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  float *v63;
  CA::CAHDRProcessor *v64;
  char v65;
  uint64_t v66;
  CGColorSpace *v67;
  unsigned __int8 *v68;
  uint64_t v69;
  CGColorSpace *v70;
  os_unfair_lock_s *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  unint64_t v82;
  unsigned int v83;
  unsigned int v84;
  const CA::Shape *v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  double v90;
  double v91;
  double v92;
  double v93;
  unsigned int **v94;
  unsigned int *v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  _OWORD *v100;
  unsigned int *v101;
  uint64_t *v102;
  unsigned int *v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  uint64_t v109;
  os_unfair_lock_s *v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  CA::CAHDRProcessor *v115;
  uint64_t v116;
  int v117;
  double v118;
  double v119;
  _OWORD *v120;
  _QWORD *v121;
  double v122;
  unsigned int *v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int v129;
  _OWORD *v130;
  unsigned int *v131;
  unsigned int **v132;
  unsigned int *v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  IOSurfaceID v140;
  CA::Render::Context *v141;
  CGColorSpace *v142;
  unsigned __int8 *v143;
  IOSurfaceID v144;
  uint64_t j;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unsigned int v152;
  unsigned int v153;
  _QWORD *v154;
  _BYTE *v155;
  _DWORD *v156;
  _OWORD *v157;
  unsigned int *v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int *v164;
  unsigned int *v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  CFDictionaryRef v169;
  CA::Render::Surface *v170;
  unsigned int *v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int *v175;
  unsigned int v176;
  BOOL Bool;
  CA::ScalerStatistics *v178;
  uint64_t v179;
  CA::CAPSEProcessor *v180;
  int v181;
  BOOL v182;
  int CacheMode;
  CA::Render::Surface *v184;
  __IOSurface *v185;
  CA::Render::Context *v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  uint64_t v190;
  unsigned int *v191;
  unsigned int *v192;
  unsigned int v193;
  unsigned int v194;
  float v196;
  unsigned int *v197;
  unsigned int *v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t v201;
  unsigned int *v202;
  unsigned int *v203;
  unsigned int v204;
  char v205;
  __int128 v206;
  int v207;
  __int128 v208;
  uint64_t v209;
  int v210;
  int v211;
  unsigned int *v212;
  unsigned int v213;
  CA::Shape *v214;
  __n128 v215;
  unsigned int *v216;
  unsigned int v217;
  unsigned int v218;
  float v219;
  unsigned int *v220;
  unsigned int v221;
  unsigned int v222;
  int v223;
  unsigned int *v224;
  CA::Shape **v225;
  uint32_t v226;
  _DWORD *v227;
  uint64_t v228;
  CA::Render::Surface *v229;
  CA::Render::ImageQueue *v231;
  unsigned int v232;
  int v233;
  os_unfair_lock_s *lock;
  int v235;
  int v236;
  uint64_t v237;
  CA::Render::Update *v238;
  uint64_t v239;
  int v241;
  _OWORD *v242;
  char v243;
  unsigned int **v244;
  _BOOL4 v245;
  char v246;
  CA::Shape *v247;
  int v248;
  __int128 v249;
  __int128 v250;
  char v251;
  __int16 v252;
  char v253;
  __int16 v254;
  CA::Shape *v255[2];
  _OWORD v256[6];
  _BYTE v257[20];
  int v258;
  char v259;
  __int128 v260;
  uint64_t v261;
  __int16 v262;
  uint64_t v263;

  v263 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v11 = this;
  lock = this + 14;
  os_unfair_lock_lock(this + 14);
  v14 = *(_QWORD *)&v11[6]._os_unfair_lock_opaque;
  if (!v14 || *(_BYTE *)(v14 + 12) != 51)
    goto LABEL_285;
  v239 = *(_QWORD *)(*(_QWORD *)&v11[4]._os_unfair_lock_opaque + 24);
  if (CADeviceSupportsHDRProcessing::once[0] != -1)
    dispatch_once(CADeviceSupportsHDRProcessing::once, &__block_literal_global_122);
  if (!CADeviceSupportsHDRProcessing::supports_hdr)
    goto LABEL_285;
  v15 = *(CA::Render::Surface **)&v11[6]._os_unfair_lock_opaque;
  v16 = *(CA::Render::Surface **)&v11[20]._os_unfair_lock_opaque;
  os_unfair_lock_opaque = *((_DWORD *)a3 + 120);
  if (!os_unfair_lock_opaque)
  {
    os_unfair_lock_opaque = v11[34]._os_unfair_lock_opaque;
    *((_DWORD *)a3 + 120) = os_unfair_lock_opaque;
  }
  v226 = os_unfair_lock_opaque;
  v18 = (_DWORD *)((char *)a3 + 1064);
  v224 = (unsigned int *)((char *)v15 + 8);
  v225 = (CA::Shape **)((char *)a3 + 16);
  v19 = 1.0;
  __asm { FMOV            V13.2S, #1.0 }
  v231 = (CA::Render::ImageQueue *)v11;
  v229 = v15;
  v235 = a6;
  v238 = a3;
  v227 = (_DWORD *)((char *)a3 + 1064);
LABEL_10:
  v23 = CA::Render::ImageQueue::hdr_processor((CA::Render::ImageQueue *)v11, v13);
  if (!(*(unsigned int (**)(uint64_t, CA::Render::Surface *, CA::Render::Update *))(*(_QWORD *)v23 + 40))(v23, v15, a3))a5 = -1;
  v25 = CA::Render::ImageQueue::hdr_processor((CA::Render::ImageQueue *)v11, v24);
  if (!(*(unsigned int (**)(uint64_t, CA::Render::Surface *, CA::Render::Update *))(*(_QWORD *)v25 + 48))(v25, v15, a3))a4 = v19;
  if (a5 == -1)
    v26 = 0;
  else
    v26 = a5;
  v232 = v26;
  if ((*v18 & 4) != 0)
    v16 = 0;
  v27 = *(double *)&v11[30]._os_unfair_lock_opaque;
  v28 = *(float *)&v11[32]._os_unfair_lock_opaque;
  v228 = (uint64_t)v16;
  if (v16)
    v29 = v16;
  else
    v29 = v15;
  v30 = *((_WORD *)v29 + 168);
  if ((a6 & 1) == 0)
  {
    if (BYTE3(xmmword_1ECDC6A90))
      goto LABEL_292;
    v32 = *((_DWORD *)v238 + 120);
    v33 = CA::Render::ImageQueue::resolved_display_attributes((CA::Render::ImageQueue *)v11, v238);
    v34 = v33;
    if (*(_BYTE *)(v33 + 54) || *(_DWORD *)(v33 + 60) == 2)
    {
      if ((*(unsigned int (**)(CA::Render::Surface *))(*(_QWORD *)v15 + 264))(v15))
      {
        v35 = (__IOSurface *)*((_QWORD *)v15 + 14);
        *(_QWORD *)&v260 = 116;
        if (!IOSurfaceGetBulkAttachments() && (_QWORD)v260 == 116)
        {
          v169 = IOSurfaceCopyAllValues(v35);
          if (CFDictionaryGetValue(v169, (const void *)_kHDRProcessingDolbyVisionRPUDataKey))
          {
            if (v169)
              CFRelease(v169);
          }
          else
          {
            Bool = CA_CFDictionaryGetBool(v169, CFSTR("isHLG"));
            if (v169)
              CFRelease(v169);
            if (!Bool)
            {
              v196 = *(float *)(v34 + 28);
              if (v196 == 0.0)
                v196 = 1.0;
              CA::Render::Surface::set_edr_factor((uint64_t)v15, v196);
              *((_WORD *)v15 + 168) |= 0x10u;
              v11 = (os_unfair_lock_s *)v231;
              goto LABEL_292;
            }
          }
        }
      }
    }
    v178 = (CA::ScalerStatistics *)*((unsigned int *)v15 + 4);
    v179 = *((unsigned int *)v15 + 5);
    v11 = (os_unfair_lock_s *)v231;
    if (!v32 && (v30 & 0x20) != 0 || v32 == 3 && (*((_WORD *)v15 + 168) & 0x20) != 0)
    {
      if (*(_BYTE *)(v34 + 56))
      {
        v180 = (CA::CAPSEProcessor *)(*(uint64_t (**)(CA::Render::Surface *))(*(_QWORD *)v15 + 264))(v15);
        if ((_DWORD)v180)
        {
          if (BYTE12(xmmword_1ECDC6AD0) || (CA::CAPSEProcessor::needs_processing(v180) & 1) == 0)
          {
            v181 = v232 & 7;
            v182 = v181 == 4 || v181 == 7;
            if (!v182 && *((_DWORD *)v15 + 4) >> 10 <= 4u && *((_DWORD *)v15 + 5) <= 0xFFFu)
            {
              if (CADeviceSupportsDCP::once[0] != -1)
                dispatch_once(CADeviceSupportsDCP::once, &__block_literal_global_214);
              if (!CADeviceSupportsDCP::has_dcp)
                goto LABEL_329;
              CacheMode = *((_DWORD *)v15 + 83);
              if (CacheMode == -1)
              {
                CacheMode = IOSurfaceGetCacheMode();
                *((_DWORD *)v15 + 83) = CacheMode;
              }
              if ((CacheMode & 0xF00) == 0x700)
              {
LABEL_329:
                if (!*((_BYTE *)v231 + 168)
                  && *(double *)(v34 + 32) * 1.01 < a4
                  && *(double *)(v34 + 40) * 0.99 > a4
                  && (CA::ScalerStatistics::should_enhance(v178, v179, (unint64_t)(float)(a4 * (float)v178), (unint64_t)(float)(a4 * (float)v179)) & 1) == 0&& CA::CAHDRProcessor::can_display_tonemap(*((CA::CAHDRProcessor **)v15 + 14), v184))
                {
                  CA::Render::Surface::reload_iosurface_color_attributes(v15, v185);
                  if (((*(uint64_t (**)(CA::Render::Surface *))(*(_QWORD *)v15 + 256))(v15) & 1) == 0)
                  {
                    v197 = (unsigned int *)*((_QWORD *)v231 + 10);
                    if (v197)
                    {
                      v198 = v197 + 2;
                      do
                      {
                        v199 = __ldaxr(v198);
                        v200 = v199 - 1;
                      }
                      while (__stlxr(v200, v198));
                      if (!v200)
                        (*(void (**)(unsigned int *))(*(_QWORD *)v197 + 16))(v197);
                      *((_QWORD *)v231 + 10) = 0;
                    }
                    *((_WORD *)v229 + 168) |= 0x200u;
                    v261 = 0;
                    v262 = 0;
                    v260 = 0uLL;
                    v201 = CA::Render::ImageQueue::hdr_processor(v231, v186);
                    v202 = (unsigned int *)v201;
                    if (v201)
                    {
                      v203 = (unsigned int *)(v201 + 16);
                      do
                        v204 = __ldaxr(v203);
                      while (__stlxr(v204 + 1, v203));
                    }
                    v205 = (*(uint64_t (**)(CA::Render::Surface *))(*(_QWORD *)v229 + 264))(v229);
                    v247 = *(CA::Shape **)v34;
                    v248 = *(_DWORD *)(v34 + 8);
                    v206 = *(_OWORD *)(v34 + 12);
                    v207 = *(_DWORD *)(v34 + 28);
                    v208 = *(_OWORD *)(v34 + 32);
                    v261 = *(_QWORD *)(v34 + 48);
                    v262 = *(_WORD *)(v34 + 56);
                    v254 = *(_WORD *)(v34 + 58);
                    v209 = *(_QWORD *)(v34 + 60);
                    v251 = *(_BYTE *)(v34 + 100);
                    v249 = *(_OWORD *)(v34 + 68);
                    v250 = *(_OWORD *)(v34 + 84);
                    v252 = *(_WORD *)(v34 + 101);
                    v253 = *(_BYTE *)(v34 + 103);
                    v210 = *(_DWORD *)(v34 + 104);
                    v260 = *(_OWORD *)(v34 + 108);
                    v211 = *(_DWORD *)(v34 + 124);
                    if (v202)
                    {
                      v212 = v202 + 4;
                      do
                        v213 = __ldaxr(v212);
                      while (__stlxr(v213 + 1, v212));
                      v214 = (CA::Shape *)v202;
                    }
                    else
                    {
                      v214 = 0;
                    }
                    v255[0] = v214;
                    v255[1] = v247;
                    LODWORD(v256[0]) = v248;
                    *(_OWORD *)((char *)v256 + 4) = v206;
                    DWORD1(v256[1]) = v207;
                    *(_OWORD *)((char *)&v256[1] + 8) = v208;
                    *((_QWORD *)&v256[2] + 1) = v261;
                    LOWORD(v256[3]) = v262;
                    WORD1(v256[3]) = v254;
                    *(_QWORD *)((char *)&v256[3] + 4) = v209;
                    BYTE12(v256[5]) = v251;
                    *(_OWORD *)((char *)&v256[4] + 12) = v250;
                    *(_OWORD *)((char *)&v256[3] + 12) = v249;
                    *(_WORD *)((char *)&v256[5] + 13) = v252;
                    HIBYTE(v256[5]) = v253;
                    *(_DWORD *)v257 = v210;
                    *(_OWORD *)&v257[4] = v260;
                    v258 = v211;
                    v259 = v205 ^ 1;
                    v215 = CA::Render::Surface::set_tonemap_cfg((uint64_t)v229, (uint64_t)v255);
                    if (v214)
                    {
                      v216 = (unsigned int *)((char *)v214 + 16);
                      do
                      {
                        v217 = __ldaxr(v216);
                        v218 = v217 - 1;
                      }
                      while (__stlxr(v218, v216));
                      if (!v218)
                        (*(void (**)(CA::Shape *, __n128))(*(_QWORD *)v214 + 8))(v214, v215);
                    }
                    if (*(_DWORD *)(v34 + 60) == 2)
                    {
                      v219 = *(float *)(v34 + 28);
                      if (v219 == 0.0)
                        v219 = 1.0;
                      CA::Render::Surface::set_edr_factor((uint64_t)v229, v219);
                    }
                    if (v202)
                    {
                      v220 = v202 + 4;
                      do
                      {
                        v221 = __ldaxr(v220);
                        v222 = v221 - 1;
                      }
                      while (__stlxr(v222, v220));
                      if (!v222)
                        (*(void (**)(unsigned int *))(*(_QWORD *)v202 + 8))(v202);
                    }
                    v11 = (os_unfair_lock_s *)v231;
                    v15 = v229;
LABEL_292:
                    if ((*(unsigned int (**)(CA::Render::Surface *))(*(_QWORD *)v15 + 280))(v15)
                      && a4 != *(float *)&v11[35]._os_unfair_lock_opaque)
                    {
                      if (a7)
                        *a7 = 1;
                      *(float *)&v11[35]._os_unfair_lock_opaque = a4;
                    }
                    v190 = (*((unsigned __int16 *)v15 + 168) >> 5) & 1;
                    goto LABEL_286;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v31 = 0;
  if ((v30 & 0x20) != 0 && v28 != 0.0)
    v31 = (*v18 & 4) == 0 && BYTE13(xmmword_1ECDC6A90) == 0;
  v243 = *((_BYTE *)v15 + 328);
  v36 = *(_OWORD **)&v11[28]._os_unfair_lock_opaque;
  if (!v36)
  {
    v37 = (_OWORD *)operator new[]();
    v36 = v37 + 1;
    *v37 = xmmword_18474E030;
    v38 = v37 + 10;
    v39 = v36;
    do
    {
      *v39 = 0uLL;
      v39[1] = 0uLL;
      *((_QWORD *)v39 + 4) = _D13;
      *((_DWORD *)v39 + 10) = 0;
      *((_BYTE *)v39 + 44) = 0;
      v39 += 3;
    }
    while (v39 != v38);
    *(_QWORD *)&v11[28]._os_unfair_lock_opaque = v36;
  }
  ID = IOSurfaceGetID(*((IOSurfaceRef *)v15 + 14));
  v241 = *((_DWORD *)v15 + 8);
  v42 = *(float *)&v11[22]._os_unfair_lock_opaque;
  v41 = *(float *)&v11[23]._os_unfair_lock_opaque;
  v245 = v31;
  if (v31)
  {
    for (i = 0; i != 3; ++i)
    {
      v44 = (unsigned int **)&v36[3 * i];
      if (*v44)
      {
        v45 = (*(uint64_t (**)(CA::Render::Surface *))(*(_QWORD *)v15 + 240))(v15);
        v46 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)*v44 + 240))(*v44);
        v47 = *v44;
        if (v45 != v46)
        {
          if (v47)
          {
LABEL_50:
            v48 = v47 + 2;
            do
            {
              v49 = __ldaxr(v48);
              v50 = v49 - 1;
            }
            while (__stlxr(v50, v48));
            if (!v50)
              (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 16))(v47);
            *v44 = 0;
          }
          v51 = &v36[3 * i];
          v54 = (unsigned int *)*((_QWORD *)v51 + 1);
          v53 = (_QWORD *)v51 + 1;
          v52 = v54;
          if (v54)
          {
            v55 = v52 + 2;
            do
            {
              v56 = __ldaxr(v55);
              v57 = v56 - 1;
            }
            while (__stlxr(v57, v55));
            if (!v57)
              (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 16))(v52);
            *v53 = 0;
          }
          v58 = &v36[3 * i];
          *((_QWORD *)v58 + 2) = 0xFFF0000000000000;
          *((_QWORD *)v58 + 3) = 0;
          *((_QWORD *)v58 + 4) = _D13;
          *((_DWORD *)v58 + 10) = 0;
          *((_BYTE *)v58 + 44) = 0;
          continue;
        }
        if (*((_DWORD *)v15 + 4) != v47[4]
          || *((_DWORD *)v15 + 5) != v47[5]
          || a4 != *(float *)&v36[3 * i + 2]
          || BYTE12(v36[3 * i + 2]) != v235)
        {
          goto LABEL_50;
        }
      }
    }
  }
  v237 = CA::Render::ImageQueue::resolved_display_attributes((CA::Render::ImageQueue *)v11, v238);
  if ((v30 & 0x20) == 0)
  {
    v233 = a5;
    v246 = 0;
    v78 = v235;
    v62 = (uint64_t)v238;
    goto LABEL_137;
  }
  v60 = 0;
  v61 = 0;
  v246 = 1;
  v62 = (uint64_t)v238;
  while (1)
  {
    if (HIDWORD(v36[v60 + 1]) == ID
      && *(double *)&v36[v60 + 1] == *(double *)&v11[10]._os_unfair_lock_opaque
      && DWORD2(v36[v60 + 1]) == v11[45]._os_unfair_lock_opaque
      && *(float *)&v36[v60 + 2] == a4)
    {
      v63 = (float *)&v36[v60];
      if (BYTE12(v36[v60 + 2]) == v235)
      {
        v64 = (CA::CAHDRProcessor *)CA::Render::ImageQueue::hdr_processor((CA::Render::ImageQueue *)v11, v59);
        if ((CA::CAHDRProcessor::should_invalidate_tonemapping(v64, v63[9], *(float *)(v237 + 20), v63[10], *(float *)(v237 + 12)) & 1) == 0)break;
      }
    }
    _CF = v61++ >= 2;
    v65 = !_CF;
    v246 = v65;
    v60 += 3;
    if (v60 == 9)
    {
      if (BYTE9(xmmword_1ECDC6A90))
        kdebug_trace();
      v11[22]._os_unfair_lock_opaque = *(uint32_t *)(v237 + 20);
      v11[23]._os_unfair_lock_opaque = *(uint32_t *)(v237 + 12);
      v66 = CA::Render::ImageQueue::hdr_processor((CA::Render::ImageQueue *)v11, v59);
      v69 = (*(uint64_t (**)(uint64_t, CA::Render::Update *))(*(_QWORD *)v66 + 56))(v66, v238);
      v70 = (CGColorSpace *)*((_QWORD *)v15 + 6);
      if (v70)
        CA::Render::iosurface_set_bulk_from_colorspace(*((CA::Render **)v15 + 14), v70, v67, v68);
      v71 = v11;
      v72 = CA::Render::ImageQueue::hdr_processor((CA::Render::ImageQueue *)v11, v70);
      v73 = (*(unsigned int (**)(CA::Render::Surface *))(*(_QWORD *)v15 + 264))(v15) ^ 1 | v235;
      v74 = (*(uint64_t (**)(CA::Render::Surface *))(*(_QWORD *)v15 + 256))(v15);
      LOWORD(v223) = 0;
      v75 = (*(uint64_t (**)(uint64_t, CA::Render::Surface *, CA::Render::Update *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, float, int))(*(_QWORD *)v72 + 24))(v72, v15, v238, v237, v69, v232, v73, v74, a4, v223);
      if (v75)
      {
        v76 = v75;
        v71[34]._os_unfair_lock_opaque = *(_DWORD *)((uint32_t)v238 + 480);
        v77 = *(unsigned int **)&v71[20]._os_unfair_lock_opaque;
        v228 = v76;
        *(_QWORD *)&v71[20]._os_unfair_lock_opaque = v76;
        v11 = v71;
        v78 = v235;
        v62 = (uint64_t)v238;
        if (v77)
        {
          v79 = v77 + 2;
          do
          {
            v80 = __ldaxr(v79);
            v81 = v80 - 1;
          }
          while (__stlxr(v81, v79));
          if (!v81)
            (*(void (**)(unsigned int *))(*(_QWORD *)v77 + 16))(v77);
        }
        if (a4 != *(float *)&v11[35]._os_unfair_lock_opaque)
        {
          if (a7)
            *a7 = 1;
          *(float *)&v11[35]._os_unfair_lock_opaque = a4;
        }
        v82 = *((unsigned int *)v15 + 3);
        v83 = v82 >> 8;
        if (a5 == -1)
        {
          v84 = *(_DWORD *)(v228 + 12);
        }
        else
        {
          v84 = *(_DWORD *)(v228 + 12) & 0xFFFFF8FF | (image_queue_rotation_from_logical_rotation(CAMetalLayerRotation,BOOL)::invert_table[concat_table[(8 * a5) | (unint64_t)image_queue_rotation_from_logical_rotation(CAMetalLayerRotation,BOOL)::invert_table[(v82 >> 8) & 7]]] << 8);
          v83 &= 0xFFFFF8u;
        }
        *(_DWORD *)(v228 + 12) = v84 | (v83 << 8);
        *(_WORD *)(v228 + 336) = *(_WORD *)(v228 + 336) & 0xFFBF | *((_WORD *)v15 + 168) & 0x40;
        if ((*v227 & 4) != 0)
        {
          v246 = 0;
        }
        else
        {
          v86 = 0;
          v87 = 0;
          v88 = 1;
          do
          {
            v89 = v86;
            if (v28 > 0.0
              && ((v90 = *(double *)&v36[3 * v88 + 1], v91 = *(double *)&v36[3 * v87 + 1], v90 < v91)
               && DWORD2(v36[3 * v88 + 1]) == DWORD2(v36[3 * v87 + 1])
               || v90 == v91 && DWORD2(v36[3 * v88 + 1]) < DWORD2(v36[3 * v87 + 1]))
              || v28 < 0.0
              && ((v92 = *(double *)&v36[3 * v88 + 1], v93 = *(double *)&v36[3 * v87 + 1], v92 > v93)
               && DWORD2(v36[3 * v88 + 1]) == DWORD2(v36[3 * v87 + 1])
               || v92 == v93 && DWORD2(v36[3 * v88 + 1]) < DWORD2(v36[3 * v87 + 1])))
            {
              v87 = v88;
            }
            v86 = 1;
            v88 = 2;
          }
          while ((v89 & 1) == 0);
          v94 = (unsigned int **)&v36[3 * v87];
          v95 = *v94;
          if (*v94 != (unsigned int *)v15)
          {
            if (v95)
            {
              v96 = v95 + 2;
              do
              {
                v97 = __ldaxr(v96);
                v98 = v97 - 1;
              }
              while (__stlxr(v98, v96));
              if (!v98)
                (*(void (**)(unsigned int *))(*(_QWORD *)v95 + 16))(v95);
            }
            do
              v99 = __ldaxr(v224);
            while (__stlxr(v99 + 1, v224));
            if (!v99)
            {
              do
              {
                v15 = 0;
                v187 = __ldaxr(v224);
              }
              while (__stlxr(v187 - 1, v224));
            }
            *v94 = (unsigned int *)v15;
          }
          v100 = &v36[3 * v87];
          v103 = (unsigned int *)*((_QWORD *)v100 + 1);
          v102 = (uint64_t *)v100 + 1;
          v101 = v103;
          if (v103 != (unsigned int *)v228)
          {
            if (v101)
            {
              v104 = v101 + 2;
              do
              {
                v105 = __ldaxr(v104);
                v106 = v105 - 1;
              }
              while (__stlxr(v106, v104));
              if (!v106)
                (*(void (**)(unsigned int *))(*(_QWORD *)v101 + 16))(v101);
            }
            v107 = (unsigned int *)(v228 + 8);
            do
              v108 = __ldaxr(v107);
            while (__stlxr(v108 + 1, v107));
            v109 = v228;
            if (!v108)
            {
              do
              {
                v109 = 0;
                v188 = __ldaxr(v107);
              }
              while (__stlxr(v188 - 1, v107));
            }
            *v102 = v109;
          }
          v246 = 0;
          v110 = (os_unfair_lock_s *)&v36[3 * v87];
          v110[7]._os_unfair_lock_opaque = ID;
          *(_QWORD *)&v110[4]._os_unfair_lock_opaque = *(_QWORD *)&v11[10]._os_unfair_lock_opaque;
          v110[6]._os_unfair_lock_opaque = v11[45]._os_unfair_lock_opaque;
          *(float *)&v110[8]._os_unfair_lock_opaque = a4;
          v110[9]._os_unfair_lock_opaque = *(uint32_t *)(v237 + 20);
          v78 = v235;
          LOBYTE(v110[11]._os_unfair_lock_opaque) = v235;
        }
        goto LABEL_133;
      }
      if (CADeviceSupportsToneMapAcceleratorSwitching::once[0] != -1)
        dispatch_once(CADeviceSupportsToneMapAcceleratorSwitching::once, &__block_literal_global_179);
      v11 = (os_unfair_lock_s *)v231;
      LOBYTE(a6) = v235;
      a3 = v238;
      v18 = v227;
      if (!CADeviceSupportsToneMapAcceleratorSwitching::accelerator_switching || v226 == *((_DWORD *)v238 + 120))
      {
        v190 = 0;
        *((_BYTE *)v231 + 132) = 0;
        goto LABEL_286;
      }
      memset(v256, 0, 32);
      *(_OWORD *)v255 = 0uLL;
      CA::Shape::operator=((uint64_t)v255, CA::RectTraits<int>::infinity);
      CA::shape_union(v225, v255, v85);
      v16 = 0;
LABEL_224:
      v226 = *((_DWORD *)a3 + 120);
      goto LABEL_10;
    }
  }
  v170 = (CA::Render::Surface *)*((_QWORD *)&v36[3 * v61] + 1);
  v171 = *(unsigned int **)&v11[20]._os_unfair_lock_opaque;
  if (v171 != (unsigned int *)v170)
  {
    if (v171)
    {
      v172 = v171 + 2;
      do
      {
        v173 = __ldaxr(v172);
        v174 = v173 - 1;
      }
      while (__stlxr(v174, v172));
      if (!v174)
        (*(void (**)(unsigned int *))(*(_QWORD *)v171 + 16))(v171);
    }
    if (v170)
    {
      v175 = (unsigned int *)((char *)v170 + 8);
      do
        v176 = __ldaxr(v175);
      while (__stlxr(v176 + 1, v175));
      if (!v176)
      {
        do
        {
          v170 = 0;
          v189 = __ldaxr(v175);
        }
        while (__stlxr(v189 - 1, v175));
      }
    }
    *(_QWORD *)&v11[20]._os_unfair_lock_opaque = v170;
  }
  *(_QWORD *)&v11[22]._os_unfair_lock_opaque = *(_QWORD *)(v63 + 9);
  CA::Render::Surface::ensure_scheduled_block(v170);
  v78 = v235;
LABEL_133:
  v111 = *(_QWORD *)&v11[20]._os_unfair_lock_opaque;
  v233 = a5;
  if (v111)
  {
    *(_DWORD *)(v111 + 32) = v241;
    v112 = (unsigned int *)(v111 + 36);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 + 1, v112));
    LOBYTE(v11[33]._os_unfair_lock_opaque) = 1;
    *(_BYTE *)(*(_QWORD *)&v11[20]._os_unfair_lock_opaque + 328) = v243;
  }
LABEL_137:
  if (!v245)
    goto LABEL_285;
  if (*(float *)&v11[22]._os_unfair_lock_opaque >= 1.0 && v42 >= 1.0)
  {
    v115 = (CA::CAHDRProcessor *)CA::Render::ImageQueue::hdr_processor((CA::Render::ImageQueue *)v11, v59);
    if ((CA::CAHDRProcessor::should_invalidate_tonemapping(v115, v42, *(float *)&v11[22]._os_unfair_lock_opaque, v41, *(float *)&v11[23]._os_unfair_lock_opaque) & 1) != 0)goto LABEL_285;
  }
  v116 = 0;
  v117 = 0;
  v118 = *(double *)(v62 + 112);
  v119 = v118;
  while (2)
  {
    v120 = &v36[3 * v116];
    v121 = v120 + 1;
    v122 = *((double *)v120 + 2) - *(double *)&v11[10]._os_unfair_lock_opaque;
    if (v28 < 0.0)
      v122 = -v122;
    _CF = *(uint64_t *)&v122 <= -1 || ((*(_QWORD *)&v122 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
    _ZF = !_CF
       || (unint64_t)(*(_QWORD *)&v122 - 1) < 0xFFFFFFFFFFFFFLL
       || (*(_QWORD *)&v122 & 0x7FFFFFFFFFFFFFFFLL) == 0;
    if (_ZF && v122 < 0.208333333 && DWORD2(v36[3 * v116 + 1]) >= v11[45]._os_unfair_lock_opaque)
      goto LABEL_212;
    v126 = *(unsigned int **)v120;
    if (*(_QWORD *)v120)
    {
      v127 = v126 + 2;
      do
      {
        v128 = __ldaxr(v127);
        v129 = v128 - 1;
      }
      while (__stlxr(v129, v127));
      if (!v129)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v126 + 16))(v126);
        v121 = v120 + 1;
      }
      *(_QWORD *)v120 = 0;
    }
    v130 = &v36[3 * v116];
    v133 = (unsigned int *)*((_QWORD *)v130 + 1);
    v132 = (unsigned int **)v130 + 1;
    v131 = v133;
    if (v133)
    {
      v134 = v131 + 2;
      do
      {
        v135 = __ldaxr(v134);
        v136 = v135 - 1;
      }
      while (__stlxr(v136, v134));
      if (!v136)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v131 + 16))(v131);
        v121 = v120 + 1;
      }
      *v132 = 0;
    }
    v242 = &v36[3 * v116];
    v244 = v132;
    *((_QWORD *)v242 + 4) = _D13;
    *((_DWORD *)v242 + 7) = 0;
    *((_DWORD *)v242 + 6) = 0;
    *((_DWORD *)v242 + 10) = 0;
    *v121 = 0xFFF0000000000000;
    *((_BYTE *)v242 + 44) = 0;
    if (v117 > 1 || !(v246 & 1 | (v117 != 1)))
    {
LABEL_212:
      if (++v116 == 3)
        goto LABEL_285;
      continue;
    }
    break;
  }
  *(_OWORD *)v257 = 0u;
  *(_OWORD *)v255 = 0u;
  memset(v256, 0, sizeof(v256));
  if (v119 > 0.200000003)
    goto LABEL_285;
  v236 = v117;
LABEL_175:
  if (!CAShmemImageQueueCopyImageInfo((uint64_t *)v11, v11[43]._os_unfair_lock_opaque, v239, v62, (uint64_t)v255, 0, 0, 0, v27 + v119 * v28, v28)|| (v137 = CA::Render::Context::lookup_object(*((_QWORD *)a2 + 17), *((_DWORD *)a2 + 37), *(uint64_t *)&v256[2], 0, 0, 0)) == 0)
  {
LABEL_215:
    v157 = &v36[3 * v116];
LABEL_210:
    if (!*v244)
    {
      v191 = *(unsigned int **)v157;
      if (*(_QWORD *)v157)
      {
        v192 = v191 + 2;
        do
        {
          v193 = __ldaxr(v192);
          v194 = v193 - 1;
        }
        while (__stlxr(v194, v192));
        if (!v194)
          (*(void (**)(unsigned int *))(*(_QWORD *)v191 + 16))(v191);
        *(_QWORD *)v157 = 0;
      }
      v157[1] = 0u;
      v157[2] = 0u;
      *v157 = 0u;
      goto LABEL_285;
    }
    v119 = v119 + v118;
    goto LABEL_212;
  }
  v138 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v137 + 80))(v137);
  if (!v138 || (v139 = v138, *(_BYTE *)(v138 + 12) != 51))
  {
    v117 = v236;
    goto LABEL_215;
  }
  if (!*(_QWORD *)(v138 + 112) || (*(_WORD *)(v138 + 336) & 0x20) == 0)
  {
    v117 = v236;
    goto LABEL_212;
  }
  CA::Render::update_texture_flags(v138, v239, v255[1], DWORD1(v256[0]));
  v140 = IOSurfaceGetID(*(IOSurfaceRef *)(v139 + 112));
  v144 = v140;
  for (j = 0; j != 9; j += 3)
  {
    if (*(double *)&v36[j + 1] == *((double *)&v256[2] + 1)
      && *((_QWORD *)&v36[j + 1] + 1) == __PAIR64__(v140, HIDWORD(v255[0])))
    {
      v119 = v119 + v118;
      v117 = v236;
      if (v119 <= 0.200000003)
        goto LABEL_175;
      goto LABEL_285;
    }
  }
  if (*(_QWORD *)(v139 + 48))
    CA::Render::iosurface_set_bulk_from_colorspace(*((CA::Render **)v229 + 14), *((CGColorSpaceRef *)v229 + 6), v142, v143);
  v146 = CA::Render::ImageQueue::hdr_processor((CA::Render::ImageQueue *)v11, v141);
  v147 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v139 + 264))(v139) ^ 1 | v78;
  v148 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v139 + 256))(v139);
  LOWORD(v223) = 256;
  v149 = (*(uint64_t (**)(uint64_t, uint64_t, CA::Render::Update *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, float, int))(*(_QWORD *)v146 + 24))(v146, v139, v238, v237, 1, v232, v147, v148, a4, v223);
  if (v149)
  {
    v150 = v149;
    v11[34]._os_unfair_lock_opaque = *(_DWORD *)((uint32_t)v238 + 480);
    v151 = *(unsigned int *)(v139 + 12);
    v152 = v151 >> 8;
    if (v233 == -1)
    {
      v153 = *(_DWORD *)(v149 + 12);
    }
    else
    {
      v153 = *(_DWORD *)(v149 + 12) & 0xFFFFF8FF | (image_queue_rotation_from_logical_rotation(CAMetalLayerRotation,BOOL)::invert_table[concat_table[(8 * v233) | (unint64_t)image_queue_rotation_from_logical_rotation(CAMetalLayerRotation,BOOL)::invert_table[(v151 >> 8) & 7]]] << 8);
      v152 &= 0xFFFFF8u;
    }
    v78 = v235;
    v154 = v120 + 1;
    v156 = (_DWORD *)v242 + 6;
    v155 = (char *)v242 + 44;
    *(_DWORD *)(v149 + 12) = v153 | (v152 << 8);
    *(_WORD *)(v149 + 336) = *(_WORD *)(v149 + 336) & 0xFFBF | *(_WORD *)(v139 + 336) & 0x40;
    *((_DWORD *)v242 + 7) = v144;
    v157 = &v36[3 * v116];
    v158 = *(unsigned int **)v242;
    if (*(_QWORD *)v242 != v139)
    {
      if (v158)
      {
        v159 = v158 + 2;
        do
        {
          v160 = __ldaxr(v159);
          v161 = v160 - 1;
        }
        while (__stlxr(v161, v159));
        if (!v161)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v158 + 16))(v158);
          v156 = (_DWORD *)v242 + 6;
          v155 = (char *)v242 + 44;
          v154 = v120 + 1;
        }
      }
      v162 = (unsigned int *)(v139 + 8);
      do
        v163 = __ldaxr(v162);
      while (__stlxr(v163 + 1, v162));
      if (!v163)
      {
        do
        {
          v139 = 0;
          v168 = __ldaxr(v162);
        }
        while (__stlxr(v168 - 1, v162));
      }
      *(_QWORD *)v242 = v139;
    }
    v164 = *v244;
    *v244 = (unsigned int *)v150;
    v11 = (os_unfair_lock_s *)v231;
    v62 = (uint64_t)v238;
    if (v164)
    {
      v165 = v164 + 2;
      do
      {
        v166 = __ldaxr(v165);
        v167 = v166 - 1;
      }
      while (__stlxr(v167, v165));
      if (!v167)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v164 + 16))(v164);
        v156 = (_DWORD *)v242 + 6;
        v155 = (char *)v242 + 44;
        v154 = v120 + 1;
      }
    }
    *v154 = *((_QWORD *)&v256[2] + 1);
    *v156 = HIDWORD(v255[0]);
    *((float *)v242 + 8) = a4;
    *((_DWORD *)v242 + 9) = *(_DWORD *)(v237 + 20);
    *((_DWORD *)v242 + 10) = *(_DWORD *)(v237 + 12);
    *v155 = v235;
    v117 = v236 + 1;
    goto LABEL_210;
  }
  if (CADeviceSupportsToneMapAcceleratorSwitching::once[0] != -1)
    dispatch_once(CADeviceSupportsToneMapAcceleratorSwitching::once, &__block_literal_global_179);
  v11 = (os_unfair_lock_s *)v231;
  v15 = v229;
  LOBYTE(a6) = v235;
  a5 = v233;
  a3 = v238;
  v18 = v227;
  v16 = (CA::Render::Surface *)v228;
  v19 = 1.0;
  if (CADeviceSupportsToneMapAcceleratorSwitching::accelerator_switching && v226 != *((_DWORD *)v238 + 120))
  {
    CA::Render::Update::invalidate((CA::Shape **)v238, (const CA::Bounds *)CA::RectTraits<int>::infinity);
    goto LABEL_224;
  }
LABEL_285:
  v190 = LOBYTE(v11[33]._os_unfair_lock_opaque) != 0;
LABEL_286:
  os_unfair_lock_unlock(lock);
  return v190;
}

void sub_1845D3A78(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void CA::Render::ImageQueue::did_display(CA::Render::ImageQueue *this, int a2, double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v7;
  mach_port_t v8;
  int v9;
  BOOL v10;
  mach_error_t v13;
  uint64_t i;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  int v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  __IOSurface *v29;
  __IOSurface *v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  char v34;
  mach_error_t v35;
  uint64_t v36;
  const char *v37;
  NSObject *v38;
  uint32_t v39;
  uint64_t v40;
  mach_port_t v41;
  char v42;
  uint64_t v44;
  _BYTE buf[32];
  uint64_t (*v46)(mach_port_t, mach_msg_timeout_t, int, int, double, double, double);
  double v47;
  double v48;
  double v49;
  const char *v50;
  mach_port_t v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if (!v5)
    return;
  v7 = *((unsigned int *)this + 43);
  v8 = *((_DWORD *)this + 47);
  v9 = *(_DWORD *)(v5 + 48);
  if (v8)
    v10 = v9 == 0;
  else
    v10 = 1;
  v44 = *((unsigned int *)this + 43);
  if (!v10)
  {
    v13 = _CACImageQueueDidPresent(v8, 0, v9, a2, a3, a4, a5);
    if (!v13)
    {
LABEL_7:
      v7 = v44;
      goto LABEL_8;
    }
    v35 = v13;
    if (v13 == 268435460)
    {
      if (v8 != -1 && !mach_port_mod_refs(*MEMORY[0x1E0C83DA0], v8, 0, 1))
      {
        if (CA::MachPortUtil::reply_queue(void)::once != -1)
          dispatch_once(&CA::MachPortUtil::reply_queue(void)::once, &__block_literal_global_8138);
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZN2CA12MachPortUtil17call_with_timeoutIPFijjjjdddEJjjdddEEEijjPKcT_DpT0__block_invoke;
        *(_QWORD *)&buf[24] = &__block_descriptor_tmp_98_11865;
        v46 = _CACImageQueueDidPresent;
        v51 = v8;
        v52 = 2;
        v53 = v9;
        v54 = a2;
        v47 = a3;
        v48 = a4;
        v49 = a5;
        v50 = "IQDidPresent";
        dispatch_async((dispatch_queue_t)CA::MachPortUtil::reply_queue(void)::queue, buf);
        goto LABEL_7;
      }
      if (x_log_hook_p())
        goto LABEL_54;
      v40 = x_log_category_utilities;
      if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
        goto LABEL_7;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "IQDidPresent";
      v37 = "%s failed to retain right";
      v38 = v40;
      v39 = 12;
    }
    else
    {
      if (x_log_hook_p())
      {
        mach_error_string(v35);
LABEL_54:
        x_log_();
        goto LABEL_7;
      }
      v36 = x_log_category_utilities;
      if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
        goto LABEL_7;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "IQDidPresent";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v35;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = mach_error_string(v35);
      v37 = "%s client message err=0x%x : %s";
      v38 = v36;
      v39 = 28;
    }
    _os_log_impl(&dword_184457000, v38, OS_LOG_TYPE_ERROR, v37, buf, v39);
    goto LABEL_7;
  }
LABEL_8:
  if ((_DWORD)v7)
  {
    v41 = v8;
    v42 = 0;
    for (i = 0; i != v7; ++i)
    {
      v15 = v5 + 160 * i;
      if (*(_DWORD *)(v15 + 524))
      {
        v16 = *(_DWORD *)(v5 + 40);
        v17 = v5 + 160 * i;
        v18 = *(_DWORD *)(v17 + 556);
        v19 = *(_QWORD *)(v17 + 496);
        if (v18 <= v16 && v19 == 0)
        {
          *(_QWORD *)(v17 + 496) = CAHostTimeWithTime(a3);
        }
        else
        {
          v21 = *(_DWORD *)(v5 + 160 * i + 520);
          v22 = *(_DWORD *)(v5 + 16);
          v23 = v19 >= CAHostTimeWithTime(a3) || v18 >= v16;
          if (v23 || *(double *)(v15 + 456) == 0.0)
          {
            v25 = atomic_load((unint64_t *)(v5 + 8));
            v24 = (v25 >> 53) & 1;
          }
          else
          {
            LODWORD(v24) = 1;
          }
          v26 = atomic_load((unint64_t *)(v5 + 8));
          if (*(_DWORD *)(v5 + 32))
            v27 = 0;
          else
            v27 = *(_DWORD *)(v17 + 556) < v16 && (v26 & 0x400000000000000) != 0;
          v28 = v5 + 160 * i;
          if (*(_DWORD *)(v28 + 516) == 286331153)
          {
            if (v21 - v22 < 0)
              LODWORD(v24) = 1;
            if (*(_DWORD *)(v5 + 160 * i + 544) - a2 < 0)
            {
              if (v24 | v27)
              {
                if ((~v26 & 0xC00000000000000) != 0
                  || (v29 = IOSurfaceLookup(*(_DWORD *)(v5 + 160 * i + 512))) == 0
                  || (v30 = v29, v31 = IOSurfaceIsInUse(v29), CFRelease(v30), !v31))
                {
                  v32 = (unsigned int *)(v28 + 516);
                  while (1)
                  {
                    v33 = __ldaxr(v32);
                    if (v33 != 286331153)
                      break;
                    if (!__stlxr(0x33333333u, v32))
                    {
                      v34 = 1;
                      goto LABEL_41;
                    }
                  }
                  v34 = 0;
                  __clrex();
LABEL_41:
                  v42 |= v34;
                }
              }
            }
          }
          v7 = v44;
        }
      }
    }
    if ((v42 & 1) != 0)
      CAShmemImageQueueCollectable(v5, v41, a2, 1);
  }
}

uint64_t CA::Render::LayerSubclass::copy@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = (unsigned int *)(this + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  if (!v3)
  {
    do
      v4 = __ldaxr(v2);
    while (__stlxr(v4 - 1, v2));
  }
  *a2 = this;
  return this;
}

uint64_t CA::Render::LayerSubclass::get_keypath_object(CA::Render::LayerSubclass *this, void *const *a2)
{
  return 0;
}

uint64_t CA::Render::LayerSubclass::get_property(CA::Render::LayerSubclass *this, unint64_t a2, const unsigned int *a3, unint64_t a4, double *a5, double **a6)
{
  return 0;
}

uint64_t CA::Render::LayerSubclass::get_volume()
{
  return 0;
}

uint64_t CA::Render::LayerSubclass::preserves_contents_opacity(CA::Render::LayerSubclass *this, const CA::Render::Layer *a2)
{
  return 1;
}

uint64_t CA::Render::`anonymous namespace'::create_image_levels(uint64_t this, unsigned int a2, unsigned int a3, CA *a4, unsigned __int16 *a5, char *a6, const unint64_t *a7)
{
  uint64_t v10;
  size_t *v11;
  size_t v12;
  size_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned int v16;

  v10 = a3 - 1;
  v11 = (size_t *)(a6 + 8);
  do
  {
    v12 = *(v11 - 1);
    v13 = a2;
    v14 = (unsigned __int16 *)((char *)a5 + v12 * a2);
    if (this <= 1)
      v15 = 1;
    else
      v15 = this >> 1;
    if (a2 <= 1)
      a2 = 1;
    else
      a2 >>= 1;
    CA::downsample_image(a4, a5, v12, this, v13, v14, *v11++, 0, 0.0, 0.0, (double)v15, (double)a2, v16);
    this = v15;
    a5 = v14;
    --v10;
  }
  while (v10);
  return this;
}

void CA::Render::`anonymous namespace'::flush_images_callback(CA::Render::_anonymous_namespace_ *this, CA::Render::Object *a2, void *a3, void *a4)
{
  _QWORD *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  malloc_zone_t *malloc_zone;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  if (CA::Render::image_cache)
  {
    v10[0] = 0;
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::image_cache_lock);
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::image_cache_lock);
    while (1)
    {
      v4 = (_QWORD *)v10[0];
      if (!v10[0])
        break;
      v10[0] = *(_QWORD *)(v10[0] + 8);
      v5 = (unsigned int *)v4[3];
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
      }
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(malloc_zone, v4);
    }
  }
}

uint64_t CA::Render::`anonymous namespace'::FlushImages::predicate(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a2[3];
  if (*(_DWORD *)(v3 + 8) == 1)
  {
    if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0)
    {
LABEL_3:
      v7 = *a2;
      v6 = (_QWORD *)a2[1];
      *(_QWORD *)(v7 + 8) = v6;
      *v6 = v7;
      v8 = *a3;
      *a2 = (uint64_t)a2;
      a2[1] = v8;
      *a3 = (uint64_t)a2;
      return 1;
    }
    if (!CA::Render::Encoder::ObjectCache::_cache_list)
    {
      os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Encoder::ObjectCache::_lock);
      if (!CA::Render::Encoder::ObjectCache::_cache_list)
      {
        *(_DWORD *)(v3 + 12) &= ~0x80000000;
        os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Encoder::ObjectCache::_lock);
        goto LABEL_3;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Encoder::ObjectCache::_lock);
    }
  }
  return 0;
}

uint64_t write_attr(uint64_t result, uint64_t *a2, int a3, void *a4)
{
  uint64_t v4;

  if (a3 == 2)
  {
    v4 = *a2;
    if (*a2)
    {
      objc_msgSend(a4, "beginPropertyElement:", CAAtomGetString(result));
      objc_msgSend(a4, "encodeObject:", v4);
      return objc_msgSend(a4, "endElement");
    }
  }
  return result;
}

{
  uint64_t v4;

  if (a3 == 2)
  {
    v4 = *a2;
    if (*a2)
    {
      objc_msgSend(a4, "beginPropertyElement:", CAAtomGetString(result));
      objc_msgSend(a4, "encodeObject:", v4);
      return objc_msgSend(a4, "endElement");
    }
  }
  return result;
}

uint64_t copy_dictionary(uint64_t result, _QWORD *a2, int a3, void *a4)
{
  if ((a3 - 1) <= 3)
  {
    if (*a2)
      return objc_msgSend(a4, "setObject:forKey:", *a2, CAAtomGetString(result));
  }
  return result;
}

{
  if ((a3 - 1) <= 3)
  {
    if (*a2)
      return objc_msgSend(a4, "setObject:forKey:", *a2, CAAtomGetString(result));
  }
  return result;
}

_DWORD *set_flag(_DWORD *result, int a2, NSString *a3, int a4)
{
  _DWORD *v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  if (((((result[6] & a2) == 0) ^ a4) & 1) == 0)
  {
    v7 = result;
    objc_msgSend(result, "willChangeValueForKey:");
    if (a4)
      v8 = v7[6] | a2;
    else
      v8 = v7[6] & ~a2;
    v7[6] = v8;
    v9 = (unsigned int *)*((_QWORD *)v7 + 5);
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      *((_QWORD *)v7 + 5) = 0;
    }
    return (_DWORD *)objc_msgSend(v7, "didChangeValueForKey:", a3);
  }
  return result;
}

uint64_t CA::CG::MetalContext::create_delegate(uint64_t a1)
{
  uint64_t v2;
  CGColorSpace *v5;
  CA::Render *NumberOfComponents;
  unsigned int v7;
  int v8;
  CA::Render *PixelFormat;
  uint64_t v10;
  CA::CG::ContextDelegate *v11;
  malloc_zone_t *malloc_zone;
  unsigned int *v13;
  unsigned int *v14;
  void *v15;
  unsigned int v16;
  CGColorSpace *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  CA::CG::AccelQueue **v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  __int128 v34;
  CA::CG::AccelQueue *v35;
  unsigned int v36;
  unsigned int v37;

  CAIsAppSuspended();
  v2 = objc_msgSend(*(id *)(a1 + 16), "pixelFormat");
  if (((unint64_t)(v2 - 70) > 0x2D || ((1 << (v2 - 70)) & 0x200000000C03) == 0)
    && ((unint64_t)(v2 - 550) > 5 || ((1 << (v2 - 38)) & 0x33) == 0))
  {
    goto LABEL_48;
  }
  v5 = *(CGColorSpace **)(a1 + 40);
  if (v5)
    NumberOfComponents = (CA::Render *)CGColorSpaceGetNumberOfComponents(v5);
  else
    NumberOfComponents = 0;
  v7 = CA::Render::coregraphics_image_format(NumberOfComponents, *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 48))- 1;
  if (v7 > 0x14)
    v8 = -1;
  else
    v8 = dword_18475EE24[v7];
  PixelFormat = (CA::Render *)CAMetalTextureGetPixelFormat(*(void **)(a1 + 16));
  if ((_DWORD)PixelFormat == 1999843442 || (_DWORD)PixelFormat == 1647534392)
    v8 = CA::Render::fourcc_to_format(PixelFormat);
  if (v8 == -1)
  {
LABEL_48:
    CGPostError();
    return 0;
  }
  else
  {
    v10 = operator new();
    *(_OWORD *)v10 = 0u;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_OWORD *)(v10 + 32) = 0u;
    *(_OWORD *)(v10 + 48) = 0u;
    *(_OWORD *)(v10 + 64) = 0u;
    *(_OWORD *)(v10 + 80) = 0u;
    *(_OWORD *)(v10 + 96) = 0u;
    *(_OWORD *)(v10 + 112) = 0u;
    *(_OWORD *)(v10 + 128) = 0u;
    *(_OWORD *)(v10 + 144) = 0u;
    *(_OWORD *)(v10 + 160) = 0u;
    *(_OWORD *)(v10 + 176) = 0u;
    *(_OWORD *)(v10 + 192) = 0u;
    *(_OWORD *)(v10 + 208) = 0u;
    *(_OWORD *)(v10 + 224) = 0u;
    *(_OWORD *)(v10 + 240) = 0u;
    *(_OWORD *)(v10 + 256) = 0u;
    *(_OWORD *)(v10 + 272) = 0u;
    *(_OWORD *)(v10 + 288) = 0u;
    *(_OWORD *)(v10 + 304) = 0u;
    *(_OWORD *)(v10 + 320) = 0u;
    *(_QWORD *)(v10 + 336) = 0;
    v11 = CA::CG::ContextDelegate::ContextDelegate((CA::CG::ContextDelegate *)v10);
    *((_QWORD *)v11 + 42) = 0;
    *(_QWORD *)v11 = &off_1E1592F50;
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v13 = (unsigned int *)malloc_type_zone_malloc(malloc_zone, 0x70uLL, 0x8BB15036uLL);
    if (v13)
    {
      v14 = v13;
      v15 = *(void **)(a1 + 16);
      v16 = *(_DWORD *)(a1 + 48);
      v17 = *(CGColorSpace **)(a1 + 40);
      v18 = objc_msgSend(v15, "width");
      v19 = objc_msgSend(v15, "height");
      *(_QWORD *)v14 = &off_1E1591B88;
      *((_QWORD *)v14 + 1) = 0;
      v20 = v14 + 2;
      v14[4] = v8;
      *((_QWORD *)v14 + 3) = CGColorSpaceRetain(v17);
      v14[8] = v16;
      *(_QWORD *)(v14 + 9) = 0;
      v14[11] = v18;
      v14[12] = v19;
      v14[13] = v18;
      v14[14] = v19;
      *((_QWORD *)v14 + 9) = 0;
      v21 = (CA::CG::AccelQueue **)(v14 + 18);
      *(_QWORD *)(v14 + 15) = 0;
      *(unsigned int *)((char *)v14 + 67) = 0;
      *((_QWORD *)v14 + 10) = 0;
      *((_QWORD *)v14 + 11) = 0;
      v14[2] = 1;
      *(_QWORD *)v14 = &off_1E1591DB0;
      *((_QWORD *)v14 + 12) = CFRetain(v15);
      *((_QWORD *)v14 + 13) = 0;
      v22 = *(unsigned int **)(v10 + 336);
      if (v22 != v14)
      {
        if (v22)
        {
          v23 = v22 + 2;
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            (**(void (***)(unsigned int *))v22)(v22);
            (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 16))(v22);
          }
        }
        while (1)
        {
          v26 = *v20;
          if (!*v20)
            break;
          while (1)
          {
            v27 = __ldaxr(v20);
            if (v27 != v26)
              break;
            if (!__stlxr(v26 + 1, v20))
            {
              v33 = v14;
              goto LABEL_40;
            }
          }
          __clrex();
        }
        v33 = 0;
LABEL_40:
        *(_QWORD *)(v10 + 336) = v33;
        *(_QWORD *)&v34 = *(_QWORD *)(v14 + 9);
        *((_QWORD *)&v34 + 1) = *(_QWORD *)(v14 + 13);
        *(_OWORD *)(v10 + 16) = v34;
        CA::CG::ContextDelegate::set_colorspace((CA::CG::ContextDelegate *)v10, *((CGColorSpace **)v14 + 3));
      }
      v35 = *v21;
      if (*v21
        || (v35 = (CA::CG::AccelQueue *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v14 + 72))(v14),
            (*((_QWORD *)v14 + 9) = v35) != 0))
      {
        CA::CG::AccelQueue::set_label(v35, CFSTR("com.apple.coreanimation.CGMetalContext"));
      }
      v32 = *(_QWORD *)(v10 + 8);
      do
      {
        v36 = __ldaxr(v20);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v20));
      if (!v37)
      {
        (**(void (***)(void *))v14)(v14);
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
      }
    }
    else
    {
      v28 = *(unsigned int **)(v10 + 336);
      if (v28)
      {
        v29 = v28 + 2;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          (**(void (***)(unsigned int *))v28)(v28);
          (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 16))(v28);
        }
        *(_QWORD *)(v10 + 336) = 0;
      }
      CA::CG::AccelQueue::set_label(MEMORY[0x48], CFSTR("com.apple.coreanimation.CGMetalContext"));
      return *(_QWORD *)(v10 + 8);
    }
  }
  return v32;
}

uint64_t CA::CG::MetalContext::get_display_mask()
{
  return 0xFFFFFFFFLL;
}

CGImageRef CA::CG::MetalContext::create_image()
{
  CA::CG::MetalDrawable *v0;
  unsigned int v1;

  v0 = *(CA::CG::MetalDrawable **)(CGContextDelegateGetInfo() + 336);
  v1 = *((_DWORD *)v0 + 4);
  if (v1 <= 0x23 && ((0x1FFFFFF2FuLL >> v1) & 1) == 0)
    return CA::CG::MetalDrawable::copy_cgimage_mtl(v0);
  else
    return CA::CG::MetalDrawable::copy_cgimage(v0);
}

CGImageRef CA::CG::MetalContext::create_image_by_reference()
{
  uint64_t Info;

  Info = CGContextDelegateGetInfo();
  return CA::CG::MetalDrawable::copy_cgimage_mtl(*(CA::CG::MetalDrawable **)(Info + 336));
}

uint64_t CA::CG::MetalContext::set_gpu_registry_id(uint64_t a1, uint64_t a2)
{
  uint64_t Info;
  uint64_t result;

  Info = CGContextDelegateGetInfo();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Info + 16))(Info);
  if (result)
    *(_QWORD *)(result + 200) = a2;
  return result;
}

uint64_t CA::CG::MetalContext::get_gpu_registry_id()
{
  uint64_t Info;
  uint64_t result;

  Info = CGContextDelegateGetInfo();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Info + 16))(Info);
  if (result)
    return *(_QWORD *)(result + 200);
  return result;
}

void CA::CG::MetalContextDelegate::~MetalContextDelegate(CA::CG::MetalContextDelegate *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E1592EE0;
  v2 = (unsigned int *)*((_QWORD *)this + 42);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (**(void (***)(unsigned int *))v2)(v2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  CA::CG::ContextDelegate::~ContextDelegate((CGColorSpaceRef *)this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E1592EE0;
  v2 = (unsigned int *)*((_QWORD *)this + 42);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (**(void (***)(unsigned int *))v2)(v2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  CA::CG::ContextDelegate::~ContextDelegate((CGColorSpaceRef *)this);
  JUMPOUT(0x186DBD990);
}

uint64_t CA::CG::AccelContextDelegate<CA::CG::MetalDrawable>::queue(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  v1 = *(_QWORD **)(a1 + 336);
  if (!v1)
    return 0;
  result = v1[9];
  if (!result)
  {
    result = (*(uint64_t (**)(_QWORD *))(*v1 + 72))(v1);
    v1[9] = result;
  }
  return result;
}

uint64_t CA::CG::AccelContextDelegate<CA::CG::MetalDrawable>::gpu_registry_id(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 336) + 72);
  if (v1)
    return *(_QWORD *)(v1 + 200);
  else
    return 0;
}

void CA::CG::AccelContextDelegate<CA::CG::MetalDrawable>::~AccelContextDelegate(CA::CG::ContextDelegate *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E1592EE0;
  v2 = (unsigned int *)*((_QWORD *)this + 42);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (**(void (***)(unsigned int *))v2)(v2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  CA::CG::ContextDelegate::~ContextDelegate((CGColorSpaceRef *)this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E1592EE0;
  v2 = (unsigned int *)*((_QWORD *)this + 42);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (**(void (***)(unsigned int *))v2)(v2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  CA::CG::ContextDelegate::~ContextDelegate((CGColorSpaceRef *)this);
  JUMPOUT(0x186DBD990);
}

void sub_1845D5F54(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = v1 + 2;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (!v5)
    (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

void sub_1845D63A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 16))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1845D6498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9)
{
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  if (a9)
  {
    v10 = a9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      (*(void (**)(unsigned int *))(*(_QWORD *)a9 + 16))(a9);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *interpolatedMeshTransform(CAMeshTransform *a1, CA::Render::Object *a2)
{
  int v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v10;
  unsigned int v11;
  int *impl;
  uint64_t v13;
  unsigned int v14;

  if (!a2)
    return 0;
  v4 = *((unsigned __int8 *)a2 + 12);
  if (v4 == 33)
  {
    v5 = -[CAMeshTransform _init]([CAMeshTransform alloc], "_init");
    v5[1] = a2;
    v10 = (unsigned int *)((char *)a2 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    if (!v11)
    {
      do
        v14 = __ldaxr(v10);
      while (__stlxr(v14 - 1, v10));
    }
    goto LABEL_13;
  }
  if (v4 != 26)
    return 0;
  v5 = -[CAMeshTransform _init]([CAMeshInterpolator alloc], "_init");
  v5[5] = a2;
  v6 = (unsigned int *)((char *)a2 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  if (!v7)
  {
    do
      v8 = __ldaxr(v6);
    while (__stlxr(v8 - 1, v6));
  }
LABEL_13:
  impl = (int *)a1->_impl;
  if (impl)
  {
    v13 = impl[25];
    v5[2] = impl[24];
    v5[3] = v13;
    *((_BYTE *)v5 + 32) = *((_BYTE *)impl + 108);
  }
  return v5;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Render::MeshVertex>>(unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(32 * a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Render::MeshFace>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(16 * a1);
}

char *x_dtostr_(char *a1, unint64_t a2, char a3, double a4, double a5)
{
  double v5;
  double v6;
  char *result;
  char *v11;
  int v13;
  double v14;
  double v15;
  double v16;
  const char *v17;
  double v18;
  double v19;
  unsigned int v20;
  char *v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  char v29;
  double v30;
  double v31;
  int v32;
  char *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  int __e;
  uint64_t v40;

  v5 = a4;
  v40 = *MEMORY[0x1E0C80C00];
  if (a5 <= 0.0)
    v6 = 0.000001;
  else
    v6 = a5;
  if (a2 < 8)
    return 0;
  if (a4 >= 0.0)
  {
    v11 = a1;
  }
  else
  {
    *a1 = 45;
    v11 = a1 + 1;
    v5 = -a4;
  }
  if (v5 == 0.0)
  {
LABEL_10:
    __e = 0;
    if (v5 > 0.0)
    {
      if (v5 >= 0.01 && v5 <= 100.0)
      {
        v13 = 0;
        v15 = v5;
        v14 = v6;
      }
      else
      {
        frexp(v5, &__e);
        v13 = llround((double)__e * 0.301029996);
        v14 = pow_10(v13) * v6;
        v15 = pow_10(-v13) * v5;
      }
      v18 = v6 * 0.5;
      v19 = v15 + v6 * 0.5;
      if (v19 >= 10.0)
      {
        do
        {
          ++v13;
          v15 = v15 * 0.1;
          v14 = v14 * 10.0;
          v19 = v15 + v18;
        }
        while (v15 + v18 >= 10.0);
      }
      if (v19 < 1.0)
      {
        do
        {
          --v13;
          v15 = v15 * 10.0;
          v14 = v14 * 0.1;
        }
        while (v15 + v18 < 1.0);
      }
      __e = v13;
      if (v13 >= 0)
        v20 = v13;
      else
        v20 = -v13;
      if (v20 <= 3)
      {
        __e = 0;
        if (v14 < v6)
          goto LABEL_30;
      }
      else
      {
        v5 = v15;
      }
    }
    v14 = v6;
LABEL_30:
    v21 = &a1[a2];
    v22 = v5 + v14 * 0.5;
    v23 = floor(v22);
    if (v23 > v14)
    {
      v24 = 1;
      v25 = v23;
      result = v11;
      while (result != v21)
      {
        v26 = v24;
        v27 = v25 * 0.1 + 0.05;
        v25 = floor(v27);
        *result++ = (int)((v27 - v25) * 10.0) + 48;
        ++v24;
        if (v25 <= v14)
        {
          if (result - v11 >= 2)
          {
            v28 = -1;
            do
            {
              v29 = result[v28];
              result[v28] = *v11;
              *v11++ = v29;
              v26 -= 2;
              --v28;
            }
            while (v26 > 1);
          }
          goto LABEL_39;
        }
      }
      return 0;
    }
    *v11 = 48;
    result = v11 + 1;
LABEL_39:
    v30 = v22 - v23;
    if (v30 > v14)
    {
      if (result != v21)
      {
        *result++ = 46;
        while (result != v21)
        {
          v31 = v30 * 10.0;
          *result++ = vcvtmd_s64_f64(v31) + 48;
          v30 = v31 - floor(v31);
          v14 = v14 * 10.0;
          if (v30 <= v14)
            goto LABEL_48;
        }
      }
      return 0;
    }
    v32 = __e;
    if (!(__e | a3 & 1))
    {
      if (v21 - result < 2)
        return 0;
      *(_WORD *)result = 12334;
      result += 2;
LABEL_48:
      v32 = __e;
    }
    if (v32)
    {
      if (v21 - result < 3)
        return 0;
      *result = 101;
      v33 = result + 1;
      v34 = __e;
      if (__e < 0)
      {
        v33 = result + 2;
        result[1] = 45;
        v34 = -__e;
        __e = -__e;
      }
      result = v33;
      if (v34 >= 1)
      {
        result = v33;
        while (result != v21)
        {
          *result++ = (v34 % 0xAu) | 0x30;
          v35 = __e;
          v34 = __e / 10;
          __e /= 10;
          if (v35 <= 9)
            goto LABEL_57;
        }
        return 0;
      }
LABEL_57:
      v36 = result - v33;
      if (result - v33 >= 2)
      {
        v37 = -1;
        do
        {
          v38 = result[v37];
          result[v37] = *v33;
          *v33++ = v38;
          v36 -= 2;
          --v37;
        }
        while (v36 > 1);
      }
    }
    if (result != v21)
    {
      *result = 0;
      return result;
    }
    return 0;
  }
  v16 = fabs(v5);
  if (v16 == INFINITY)
  {
    v17 = "Inf";
  }
  else
  {
    if (v16 >= 2.22507386e-308)
      goto LABEL_10;
    v17 = "0";
  }
  return stpcpy(v11, v17);
}

uint64_t CA::Render::format_opaque_format(CA::Render *this)
{
  uint64_t result;

  switch((int)this)
  {
    case 11:
      result = 12;
      break;
    case 12:
    case 14:
    case 15:
    case 17:
    case 19:
    case 20:
      goto LABEL_6;
    case 13:
      result = 17;
      break;
    case 16:
      result = 16;
      break;
    case 18:
      result = 19;
      break;
    case 21:
      result = 22;
      break;
    default:
      if ((_DWORD)this)
      {
        if ((_DWORD)this == 1)
          result = 3;
        else
LABEL_6:
          result = 0xFFFFFFFFLL;
      }
      else
      {
        result = 2;
      }
      break;
  }
  return result;
}

uint64_t CA::Render::format_opacity_at_value(CA::Render *this, __int16 *a2, float *a3, float *a4, float a5)
{
  int v5;
  uint64_t result;
  float v9;
  float v10;

  v5 = (int)this;
  result = 0;
  switch(v5)
  {
    case 0:
    case 8:
    case 9:
    case 15:
      LOBYTE(a5) = *(_BYTE *)a2;
      goto LABEL_7;
    case 1:
    case 11:
      LOBYTE(a5) = *((_BYTE *)a2 + 3);
      goto LABEL_7;
    case 13:
      _H0 = a2[3];
      goto LABEL_15;
    case 14:
      _S0 = *((float *)a2 + 3);
      goto LABEL_17;
    case 18:
      LOBYTE(a5) = *((_BYTE *)a2 + 1);
LABEL_7:
      v9 = (float)LODWORD(a5);
      v10 = 0.0039216;
      goto LABEL_13;
    case 21:
      LOWORD(a5) = a2[3];
      goto LABEL_12;
    case 23:
      _H0 = *a2;
      goto LABEL_15;
    case 24:
      _S0 = *(float *)a2;
      goto LABEL_17;
    case 27:
      LOWORD(a5) = a2[1];
LABEL_12:
      v9 = (float)LODWORD(a5);
      v10 = 0.000015259;
LABEL_13:
      _S0 = v9 * v10;
      goto LABEL_17;
    case 28:
      _H0 = a2[1];
LABEL_15:
      __asm { FCVT            S0, H0 }
      goto LABEL_17;
    case 34:
      _S0 = (double)(((unsigned __int16)a2[3] >> 6) - 384) * 0.00196078431;
LABEL_17:
      *a3 = _S0;
      result = 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t CA::Render::fourcc_packed_from_unpacked(CA::Render *this)
{
  int v1;
  uint64_t result;
  unsigned __int16 v3;

  v1 = (int)this;
  if ((int)this > 2016686639)
  {
    result = 1882468912;
    if (v1 > 2019963439)
    {
      switch(v1)
      {
        case 2019963440:
          return 1885745712;
        case 2019963442:
          return 1885745714;
        case 2019963956:
          return 1885746228;
      }
    }
    else
    {
      switch(v1)
      {
        case 2016686640:
          return result;
        case 2016686642:
          return 1882468914;
        case 2016687156:
          return 1882469428;
      }
    }
  }
  else
  {
    if ((int)this <= 1953903151)
    {
      if ((_DWORD)this != 1952854576)
      {
        if ((_DWORD)this == 1952854578)
          return 1886676530;
        if ((_DWORD)this == 1952855092)
          return 1886676532;
        return 0;
      }
      v3 = 26160;
      return v3 | 0x70740000u;
    }
    switch((_DWORD)this)
    {
      case 0x74763230:
        return 1886680624;
      case 0x74763232:
        v3 = 30258;
        return v3 | 0x70740000u;
      case 0x74763434:
        return 1886680628;
    }
  }
  return 0;
}

uint64_t CA::Render::fourcc_unpacked_from_packed(CA::Render *this)
{
  int v1;
  uint64_t result;
  int v3;

  v1 = (int)this;
  if ((int)this <= 1886676527)
  {
    result = 2016686640;
    if (v1 <= 1885745711)
    {
      switch(v1)
      {
        case 1882468912:
          return result;
        case 1882468914:
          return 2016686642;
        case 1882469428:
          return 2016687156;
      }
      return 0;
    }
    if (v1 == 1885745712)
      return 2019963440;
    if (v1 == 1885745714)
      return 2019963442;
    if (v1 != 1885746228)
      return 0;
    v3 = 2019963442;
    return (v3 + 514);
  }
  if ((int)this <= 1886680623)
  {
    switch((_DWORD)this)
    {
      case 0x70746630:
        return 1952854576;
      case 0x70746632:
        return 1952854578;
      case 0x70746634:
        return 1952855092;
    }
    return 0;
  }
  switch((_DWORD)this)
  {
    case 0x70747630:
      return 1953903152;
    case 0x70747632:
      return 1953903154;
    case 0x70747634:
      v3 = 1953903154;
      return (v3 + 514);
  }
  return 0;
}

uint64_t CA::Render::fourcc_is_422(CA::Render *this)
{
  int v1;
  uint64_t result;
  int v3;
  unsigned __int16 v4;
  unsigned __int16 v5;

  v1 = (int)this;
  result = 1;
  if (v1 > 875704949)
  {
    if (v1 > 1952854577)
    {
      if (v1 > 2084070961)
      {
        if (v1 > 2088003121)
        {
          if (v1 > 2088265265)
          {
            if (v1 == 2088265266)
              return result;
            v3 = 2088269362;
          }
          else
          {
            if (v1 == 2088003122)
              return result;
            v3 = 2088007218;
          }
        }
        else if (v1 > 2087937585)
        {
          if (v1 == 2087937586)
            return result;
          v3 = 2087941682;
        }
        else
        {
          if (v1 == 2084070962)
            return result;
          v3 = 2084075058;
        }
        goto LABEL_90;
      }
      if (v1 > 2016567607)
      {
        if (v1 > 2016686641)
        {
          if (v1 == 2016686642)
            return result;
          v3 = 2019963442;
        }
        else
        {
          if (v1 == 2016567608)
            return result;
          v3 = 2016567667;
        }
        goto LABEL_90;
      }
      if (v1 != 1952854578 && v1 != 1953903154)
      {
        v3 = 1983013176;
        goto LABEL_90;
      }
    }
    else
    {
      if (v1 > 1882468913)
      {
        if (v1 > 1932681586)
        {
          if (v1 > 1937125937)
          {
            if (v1 == 1937125938)
              return result;
            v3 = 1949458803;
          }
          else
          {
            if (v1 == 1932681587)
              return result;
            v3 = 1936077362;
          }
        }
        else if (v1 > 1886676529)
        {
          if (v1 == 1886676530)
            return result;
          v3 = 1886680626;
        }
        else
        {
          if (v1 == 1882468914)
            return result;
          v3 = 1885745714;
        }
        goto LABEL_90;
      }
      if (v1 > 1534354993)
      {
        if (v1 > 1534617137)
        {
          if (v1 == 1534617138)
            return result;
          v3 = 1534621234;
        }
        else
        {
          if (v1 == 1534354994)
            return result;
          v3 = 1534359090;
        }
        goto LABEL_90;
      }
      if (v1 != 875704950 && v1 != 1530422834)
      {
        v3 = 1530426930;
        goto LABEL_90;
      }
    }
  }
  else if (v1 > 762537521)
  {
    if (v1 > 792229425)
    {
      if (v1 > 796161585)
      {
        if (v1 > 796423729)
        {
          if (v1 == 796423730)
            return result;
          v3 = 875704934;
        }
        else
        {
          if (v1 == 796161586)
            return result;
          v3 = 796419634;
        }
      }
      else if (v1 > 796096049)
      {
        if (v1 == 796096050)
          return result;
        v3 = 796157490;
      }
      else
      {
        if (v1 == 792229426)
          return result;
        v3 = 796091954;
      }
      goto LABEL_90;
    }
    if (v1 > 762607153)
    {
      if (v1 > 762869297)
      {
        if (v1 == 762869298)
          return result;
        v3 = 792225330;
      }
      else
      {
        if (v1 == 762607154)
          return result;
        v3 = 762865202;
      }
      goto LABEL_90;
    }
    if (v1 != 762537522 && v1 != 762541618)
    {
      v3 = 762603058;
      goto LABEL_90;
    }
  }
  else
  {
    if (v1 > 645166641)
    {
      if (v1 > 645424689)
      {
        if (v1 > 758670897)
        {
          if (v1 == 758670898)
            return result;
          v3 = 758674994;
          goto LABEL_90;
        }
        if (v1 == 645424690)
          return result;
        v5 = 30258;
      }
      else
      {
        if (v1 <= 645411383)
        {
          if (v1 == 645166642)
            return result;
          v3 = 645280312;
          goto LABEL_90;
        }
        if (v1 == 645411384)
          return result;
        v5 = 12915;
      }
      v3 = v5 | 0x26780000;
LABEL_90:
      if (v1 != v3)
        return 0;
      return result;
    }
    if (v1 > 645097009)
    {
      if (v1 > 645149298)
      {
        if (v1 == 645149299)
          return result;
        v3 = 645162546;
        goto LABEL_90;
      }
      if (v1 == 645097010)
        return result;
      v4 = 30258;
      goto LABEL_55;
    }
    if (v1 != 641230386 && v1 != 641234482)
    {
      v4 = 12915;
LABEL_55:
      v3 = v4 | 0x26730000;
      goto LABEL_90;
    }
  }
  return result;
}

uint64_t CA::Render::fourcc_422_from_420(CA::Render *this)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;

  if ((int)this <= 1949327730)
  {
    if ((int)this <= 1885745711)
    {
      v1 = 875704934;
      switch((_DWORD)this)
      {
        case 0x34323066:
          return v1;
        case 0x34323076:
          return 875704950;
        case 0x70343230:
          return 1882468914;
      }
      return 0;
    }
    if ((int)this > 1936077359)
    {
      if ((_DWORD)this == 1936077360)
        return 1936077362;
      if ((_DWORD)this != 1937125936)
        return 0;
      v3 = 1936077362;
      return v3 | 0x100000u;
    }
    if ((_DWORD)this != 1885745712)
    {
      v2 = 1932550515;
      goto LABEL_14;
    }
    v4 = 1882468914;
    return (v4 + 3276800);
  }
  if ((int)this > 2016436535)
  {
    if ((int)this <= 2016686639)
    {
      if ((_DWORD)this == 2016436536)
        return 2016567608;
      v2 = 2016436595;
LABEL_14:
      if ((_DWORD)this != v2)
        return 0;
      return 2016567667;
    }
    if ((_DWORD)this == 2016686640)
      return 2016686642;
    if ((_DWORD)this != 2019963440)
      return 0;
    v4 = 2016686642;
    return (v4 + 3276800);
  }
  if ((int)this > 1953903151)
  {
    if ((_DWORD)this != 1953903152)
    {
      if ((_DWORD)this == 1982882104)
        return 1983013176;
      return 0;
    }
    v3 = 1952854578;
    return v3 | 0x100000u;
  }
  if ((_DWORD)this == 1949327731)
    return 2016567667;
  if ((_DWORD)this != 1952854576)
    return 0;
  return 1952854578;
}

dispatch_queue_t ___ZN2CA3OGLL17release_iosurfaceEP11__IOSurface_block_invoke()
{
  NSObject *v0;
  dispatch_queue_t result;

  v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  result = dispatch_queue_create("com.apple.coreanimation.async_dealloc", v0);
  CA::OGL::release_iosurface(__IOSurface *)::queue = (uint64_t)result;
  return result;
}

void CA::OGL::AsynchronousDispatcher::AsynchronousDispatcher(void)::$_0::__invoke(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  __IOSurface *v4;
  uint64_t i;
  CA::OGL *v6;

  v3 = *a3;
  CA::OGL::cache_io_surfaces = *a3 != 0;
  if (!v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::OGL::surface_cache_lock);
    for (i = 0; i != 2; ++i)
    {
      v6 = (CA::OGL *)CA::OGL::surface_cache[i];
      if (v6)
      {
        CA::OGL::release_iosurface(v6, v4);
        CA::OGL::surface_cache[i] = 0;
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::OGL::surface_cache_lock);
  }
}

void CA::OGL::AsynchronousDispatcher::thread_body(CA::OGL::AsynchronousDispatcher *this, void *a2)
{
  int v3;
  int v4;
  NSObject *v5;
  CFAbsoluteTime Current;
  __CFRunLoopTimer *v7;
  const __CFString *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = pthread_setname_np("com.apple.coreanimation.asynchronous");
  if (v3)
  {
    v4 = v3;
    v5 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "com.apple.coreanimation.asynchronous";
      v11 = 1024;
      v12 = v4;
      _os_log_error_impl(&dword_184457000, v5, OS_LOG_TYPE_ERROR, "pthread_setname_np(%s) returned %d\n", (uint8_t *)&v9, 0x12u);
    }
  }
  *((_QWORD *)this + 4) = CFRunLoopGetCurrent();
  Current = CFAbsoluteTimeGetCurrent();
  v7 = CFRunLoopTimerCreate(0, Current + 3153600000.0, 3153600000.0, 0, 0, (CFRunLoopTimerCallBack)CA::OGL::AsynchronousDispatcher::thread_body(void *)::$_0::__invoke, 0);
  v8 = (const __CFString *)*MEMORY[0x1E0C9B280];
  CFRunLoopAddTimer(*((CFRunLoopRef *)this + 4), v7, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
  CA::OGL::AsynchronousDispatcher::start_timer((unint64_t)this);
  *(_DWORD *)this = 1;
  CFRunLoopRun();
  CFRunLoopRemoveTimer(*((CFRunLoopRef *)this + 4), v7, v8);
  CFRelease(v7);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
}

void CA::OGL::Renderer::~Renderer(CA::OGL::Renderer *this)
{
  CA::Shape *v2;

  v2 = (CA::Shape *)*((_QWORD *)this + 2);
  if (v2)
    CA::Shape::unref(v2);
  free(*((void **)this + 6));
}

CA::Shape *CA::OGL::Renderer::set_clip_shape(CA::OGL::Renderer *this, CA::Shape *a2)
{
  CA::Shape *result;

  result = (CA::Shape *)*((_QWORD *)this + 2);
  if (result != a2)
  {
    if (result)
      CA::Shape::unref(result);
    if (a2)
      result = (CA::Shape *)CA::Shape::ref((unint64_t)a2, a2);
    else
      result = 0;
    *((_QWORD *)this + 2) = result;
  }
  return result;
}

void CA::OGL::Renderer::render(CA::OGL::Renderer *this, const CA::Render::Update *a2, unint64_t a3, CA::WindowServer::SharedEvent *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t j;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __n128 v13;
  CA::OGL::Context *v14;
  uint64_t v15;
  int32x4_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CA::OGL::Context *v20;
  double v21;
  CA::OGL::Context *v22;
  unint64_t v23;
  const CA::Bounds *v24;
  const CA::Bounds *v25;
  int32x4_t v26;
  int64x2_t v27;
  int v28;
  int8x16_t v29;
  int64x2_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int32x2_t v33;
  int64x2_t v34;
  int8x16_t v35;
  float64x2_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  double v42;
  double v43;
  float64x2_t v44;
  int8x16_t v45;
  int8x16_t v46;
  float64x2_t v47;
  int8x16_t v48;
  float64x2_t v49;
  int64x2_t v50;
  int8x16_t v51;
  float64x2_t v52;
  float64x2_t v53;
  int32x4_t v54;
  _QWORD *v55;
  uint64_t v56;
  CA::OGL::Context *v57;
  uint64_t bounds;
  const CA::Shape *v59;
  double *v60;
  float32x4_t v61;
  int32x4_t v62;
  CA::OGL::Context *v63;
  uint64_t v64;
  CA::Shape *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  CA::OGL::Context *v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  CA::Shape *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  CA::Shape *v81;
  uint32x2_t v82;
  unsigned __int32 v83;
  uint32x2_t v84;
  unsigned __int32 v85;
  CA::Shape *v86;
  uint32x2_t v87;
  int32x2_t v88;
  uint32x2_t v89;
  int32x2_t v90;
  __int128 v91;
  int32x2_t v92;
  uint32x2_t v93;
  uint64_t v94;
  uint64_t v95;
  double *v96;
  int32x4_t v97;
  int32x4_t v98;
  uint64_t v99;
  CA::WindowServer::Display *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char v106;
  int32x2_t v107;
  uint32x2_t v108;
  uint32x2_t v109;
  int32x2_t v110;
  int32x2_t v111;
  uint32x2_t v112;
  int v113;
  int64x2_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int32x2_t v117;
  int v118;
  float v119;
  float v120;
  float v125;
  float v127;
  float v128;
  int32x4_t v129;
  int32x4_t v130;
  int v131;
  int v132;
  int v133;
  int8x16_t v134;
  uint64_t v135;
  int64x2_t v136;
  double v137;
  double v138;
  float v139;
  float v140;
  int v141;
  char v142;
  uint64_t v143;
  float v144;
  float v145;
  int32x4_t v146;
  int32x4_t v147;
  int v148;
  int v149;
  int v150;
  int8x16_t v151;
  uint64_t v152;
  int64x2_t v153;
  double v154;
  double v155;
  uint64_t v156;
  const float *v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x2_t v168;
  uint32x2_t v169;
  int32x2_t v170;
  uint32x2_t v171;
  int32x2_t v172;
  __int128 v173;
  int32x2_t v174;
  uint32x2_t v175;
  int v176;
  int64x2_t v177;
  int8x16_t v178;
  int8x16_t v179;
  int32x2_t v180;
  CA::WindowServer::Display *v181;
  float v182;
  float v183;
  float v184;
  float v185;
  uint64_t v186;
  __n128 v187;
  unsigned int v188;
  const CA::Bounds *v189;
  CA::Shape *v190;
  const CA::Bounds *v191;
  uint64_t v192;
  const int *v193;
  CA::Shape *v194;
  uint64_t v195;
  int32x4_t v196;
  CA::Shape *v197;
  int32x4_t v198;
  int32x2_t v199;
  uint32x2_t v200;
  uint32x2_t v201;
  int32x2_t v202;
  int32x2_t v203;
  uint32x2_t v204;
  int v205;
  int64x2_t v206;
  int8x16_t v207;
  int8x16_t v208;
  int32x2_t v209;
  int v210;
  int64x2_t v211;
  int8x16_t v212;
  int32x4_t v213;
  uint64_t v214;
  int32x4_t v215;
  uint64_t v216;
  char v217;
  int32x4_t v218;
  int v219;
  int64x2_t v220;
  int8x16_t v221;
  double v222;
  double v223;
  uint64_t v224;
  int8x16_t v225;
  int8x16_t v226;
  __int128 v227;
  int32x2_t v228;
  int32x2_t v229;
  int32x4_t v230;
  int32x4_t v231;
  int v232;
  int v233;
  int v234;
  int8x16_t v235;
  uint64_t v236;
  int64x2_t v237;
  double v238;
  double v239;
  uint64_t v240;
  char v241;
  char v242;
  double *v243;
  int32x2_t *v244;
  int32x2_t *v245;
  uint32x2_t v246;
  uint32x2_t v247;
  int8x16_t v248;
  uint32x2_t v249;
  _QWORD *v250;
  uint64_t v251;
  float64x2_t v252;
  int64x2_t v253;
  int64x2_t v254;
  int32x2_t v255;
  unint64_t v256;
  int8x16_t v257;
  float64x2_t v258;
  float64x2_t v259;
  uint64_t v260;
  uint64_t v261;
  float v262;
  int64x2_t v263;
  int8x16_t v264;
  int32x4_t v265;
  int v266;
  int v267;
  int v268;
  int v269;
  uint64_t v270;
  float v271;
  uint64_t v272;
  uint32x2_t v273;
  uint32x2_t v274;
  int32x2_t v275;
  uint32x2_t v276;
  double *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  double *v281;
  double scale;
  int8x16_t *v283;
  int8x16_t v284;
  uint64_t v285;
  float v286;
  double v287;
  double v288;
  double *v289;
  int8x16_t *v290;
  int8x16_t v291;
  uint64_t v292;
  float v293;
  double v294;
  double v295;
  double v296;
  double v297;
  CA::Shape *v298;
  uint64_t v299;
  unsigned int *v300;
  uint64_t v301;
  uint64_t v302;
  __int16 v303;
  int32x4_t v304;
  int32x4_t v305;
  CA::OGL::Context *v306;
  int v307;
  int v308;
  int v309;
  int8x16_t v310;
  uint64_t v311;
  int64x2_t v312;
  int8x16_t v313;
  double v314;
  double v315;
  double *v316;
  double *v317;
  double v318;
  int8x16_t v319;
  unint64_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  char v330;
  uint64_t v331;
  __int128 v332;
  int *v333;
  int *v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t i;
  _QWORD *v338;
  BOOL v339;
  CA::OGL::Context *v340;
  char *v341;
  float32x4_t v342;
  _DWORD *v343;
  unsigned int v344;
  _QWORD *v345;
  uint64_t v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  os_unfair_lock_s *v351;
  uint64_t v352;
  os_unfair_lock_s *v353;
  uint64_t v354;
  int v355;
  int v356;
  double v357;
  double v358;
  double v359;
  double v360;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unsigned int *v365;
  unsigned int *v366;
  unsigned int v367;
  unsigned int v368;
  uint64_t v369;
  uint64_t v370;
  CA::OGL::Context *v371;
  uint64_t v372;
  CA::OGL::Context *v373;
  BOOL v374;
  double v375;
  int v376;
  int v377;
  int v378;
  uint64_t v379;
  uint64_t v380;
  NSObject *v381;
  uint64_t v382;
  CA::Shape *v383;
  unint64_t v384;
  int32x4_t v385;
  int32x4_t v386;
  int v387;
  uint64_t v388;
  uint64_t v389;
  int64x2_t v390;
  int8x16_t v391;
  int8x16_t v392;
  int8x16_t v393;
  int32x2_t v394;
  int *v395;
  int v396;
  int v397;
  int v398;
  uint64_t v399;
  int64x2_t v400;
  int8x16_t v401;
  double v402;
  double v403;
  double *v404;
  int8x16_t v405;
  uint64_t v406;
  int v407;
  int v408;
  int v409;
  int v410;
  int8x16_t v411;
  uint64_t v412;
  int64x2_t v413;
  int8x16_t v414;
  double v415;
  uint64_t v416;
  float v417;
  float v418;
  float v419;
  int32x4_t v420;
  int32x4_t v421;
  __int128 v422;
  int v423;
  int64x2_t v424;
  int8x16_t v425;
  int8x16_t v426;
  int32x2_t v427;
  CA::OGL::Context *v428;
  int v429;
  int v430;
  int v431;
  int8x16_t v432;
  uint64_t v433;
  int64x2_t v434;
  int8x16_t v435;
  double v436;
  int v437;
  int v438;
  int v439;
  int8x16_t v440;
  uint64_t v441;
  int64x2_t v442;
  int8x16_t v443;
  double v444;
  double v445;
  int v446;
  int v447;
  int v448;
  int8x16_t v449;
  uint64_t v450;
  int64x2_t v451;
  int8x16_t v452;
  double v453;
  double v454;
  float v455;
  float v456;
  int32x4_t v457;
  int32x4_t v458;
  __int128 v459;
  int v460;
  int64x2_t v461;
  int8x16_t v462;
  int8x16_t v463;
  int32x2_t v464;
  const CA::Transform **v465;
  uint64_t v466;
  unsigned int v467;
  unsigned int v468;
  _BOOL4 v470;
  uint64_t PerfHud;
  const CA::Render::LayerNode *v472;
  float v473;
  float v474;
  float v475;
  const CA::Transform *v476;
  CA::WindowServer::Display *v477;
  unint64_t v478;
  _QWORD *v479;
  unint64_t v480;
  uint64_t v481;
  uint64_t v482;
  int v483;
  int v484;
  int v485;
  int8x16_t v486;
  uint64_t v487;
  int64x2_t v488;
  int8x16_t v489;
  int8x16_t v490;
  double v491;
  int v492;
  int v493;
  int v494;
  int8x16_t v495;
  uint64_t v496;
  int64x2_t v497;
  int8x16_t v498;
  double v499;
  double v500;
  int32x2_t v501;
  uint32x2_t v502;
  uint32x2_t v503;
  int32x2_t v504;
  int32x2_t v505;
  uint32x2_t v506;
  int v507;
  int64x2_t v508;
  int8x16_t v509;
  int8x16_t v510;
  int32x2_t v511;
  _BOOL4 v512;
  float v513;
  double v514;
  float v515;
  float v516;
  double v517;
  float v518;
  _BOOL4 v519;
  double v520;
  double v521;
  double v522;
  double v523;
  double v524;
  float v525;
  float v526;
  uint64_t v527;
  unsigned int v528;
  uint64_t v529;
  uint64_t v530;
  CA::OGL::Context *v531;
  const CA::Bounds *v532;
  const CA::Bounds *v533;
  int v534;
  float v535;
  float v536;
  int v537;
  float v538;
  float v539;
  size_t v542;
  int v543;
  char *v544;
  size_t v545;
  int v546;
  float v547;
  uint16x4_t v549;
  float v550;
  float v551;
  int v552;
  int v553;
  uint64_t v554;
  CA::OGL::DebugRenderer *v555;
  uint64_t v556;
  unint64_t v557;
  int8x16_t v558;
  int8x16_t v559;
  uint64x2_t v560;
  uint64_t v561;
  size_t v562;
  const CA::Bounds *v563;
  const CA::Bounds *v564;
  unint64_t v565;
  uint64_t v566;
  CA::Shape *v567;
  _QWORD *v568;
  _QWORD *v569;
  int32x2_t *v570;
  int v571;
  float64x2_t v572;
  CA::WindowServer::Display *v573;
  int32x4_t v574;
  float64x2_t v575;
  int v576;
  uint64_t v577;
  unint64_t v578;
  unint64_t v579;
  CA::Shape *v580[2];
  uint64_t v581;
  float64x2_t v582;
  float32x4_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  CA::Render::Update *v587[2];
  int8x16_t v588;
  int8x16_t v589;
  int8x16_t v590;
  int8x16_t v591;
  CA::Shape *v592;
  CA::Shape *v593[2];
  CA::Shape *v594[2];
  CA::Shape *v595[2];
  int8x16_t v596;
  uint64_t v597;
  int8x16_t v598;
  int8x16_t v599;
  int8x16_t v600;
  int8x16_t v601;
  int8x16_t v602;
  int8x16_t v603;
  float64x2_t v604;
  float64x2_t v605;
  _BOOL4 v606;
  int32x4_t v607;
  int v608;
  int32x4_t v609;
  int32x4_t v610;
  int32x4_t v611;
  int32x4_t v612;
  int32x4_t v613;
  int8x16_t v614;
  _DWORD *v615;
  _DWORD *v616;
  uint64_t v617;
  int8x16_t v618;
  int8x16_t v619;
  __int16 v620;
  int32x4_t v621;
  int8x16_t v622;
  __int128 v623;
  CA::Shape *v624[2];
  float64x2_t v625;
  __int128 v626;
  __int128 v627;
  uint64_t v628;
  CA::Shape *v629;
  uint64_t v630;
  float64x2_t *v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  __int128 buf;
  uint64_t v638;
  _OWORD v639[61];
  _OWORD v640[2];
  _OWORD v641[2];
  float64x2_t v642;
  _OWORD v643[4];
  __int128 v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  uint64_t v653;
  uint64_t v654;
  _QWORD v655[2];
  int8x16_t v656;
  __int128 v657;
  __int128 v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  float32x4_t v662;
  int32x4_t v663;
  unint64_t v664;
  __int32 v665;
  __int32 v666;
  int v667;
  int8x16_t v668;
  int8x16_t v669;
  __int128 v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;

  v4 = MEMORY[0x1E0C80A78](this);
  v673 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(v4 + 8))
    return;
  v7 = v6;
  j = v5;
  v9 = (_QWORD *)v4;
  *(_QWORD *)(v4 + 8) = v5;
  *(_BYTE *)(v4 + 100) = 0;
  *(_QWORD *)(v4 + 88) = 0;
  v10 = *(_QWORD *)v4;
  *(_QWORD *)(v10 + 200) = v5;
  v11 = *(_DWORD *)(v5 + 256);
  *(_DWORD *)(v10 + 212) = *(_DWORD *)(v5 + 248);
  *(_DWORD *)(v10 + 216) = v11;
  v12 = mach_absolute_time();
  *(double *)(v10 + 224) = CATimeWithHostTime(v12);
  v13.n128_f64[0] = CA::OGL::Context::reset_statistics((CA::OGL::Context *)*v9);
  v14 = (CA::OGL::Context *)*v9;
  v15 = *(_QWORD *)(*v9 + 176);
  if (v15 && (*((_WORD *)v14 + 408) & 2) == 0)
  {
    (*(void (**)(_QWORD, void (*)(CA::OGL::Renderer *, CA::Render::Handle *, CA::Render::Texture *, CA::OGL::Context **, void *), _QWORD *, double))(*(_QWORD *)v15 + 80))(*(_QWORD *)(*v9 + 176), CA::OGL::Renderer::update_detached_layer, v9, v13.n128_f64[0]);
    v14 = (CA::OGL::Context *)*v9;
  }
  (*(void (**)(CA::OGL::Context *, _QWORD, __n128))(*(_QWORD *)v14 + 184))(v14, 0, v13);
  v17 = v9[2];
  v18 = *(_QWORD *)(*v9 + 176);
  if (v18)
  {
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    if (v17)
    {
LABEL_7:
      v20 = (CA::OGL::Context *)*v9;
LABEL_10:
      v21 = (double)CA::Shape::area((CA::Shape *)v17);
      goto LABEL_11;
    }
  }
  else
  {
    v19 = 0;
    if (v17)
      goto LABEL_7;
  }
  v17 = *(_QWORD *)(j + 16);
  v20 = (CA::OGL::Context *)*v9;
  if (v17)
    goto LABEL_10;
  v71 = *((_DWORD *)v20 + 48);
  v72 = *((_DWORD *)v20 + 49);
  if (v71 <= v72)
    v73 = *((_DWORD *)v20 + 49);
  else
    v73 = *((_DWORD *)v20 + 48);
  *(double *)v16.i64 = (double)v72 * (double)v71;
  if (v73 <= 1073741822)
    v21 = (double)v72 * (double)v71;
  else
    v21 = INFINITY;
LABEL_11:
  v581 = v19;
  if ((v17 & 1) != 0)
  {
    if (v17 == 1)
      goto LABEL_13;
  }
  else if (*(_DWORD *)(v17 + 4) == 6)
  {
LABEL_13:
    LODWORD(v22) = 0;
    goto LABEL_21;
  }
  v22 = (CA::OGL::Context *)*((_QWORD *)v20 + 51);
  *((_QWORD *)v20 + 51) = 0;
  if (v22)
  {
    v23 = CA::Shape::Union(v17, (uint64_t)v22);
    v17 = v23;
    if ((*(_BYTE *)(*v9 + 416) & 0x10) != 0)
    {
      if ((v23 & 1) != 0)
      {
        if (v23 != 1)
          goto LABEL_20;
        goto LABEL_19;
      }
      if (*(_DWORD *)(v23 + 4) != 12)
      {
LABEL_19:
        buf = 0uLL;
        CA::Shape::get_bounds(v23, (int *)&buf);
        CA::Shape::unref((CA::Shape *)v17);
        v17 = CA::Shape::new_shape((CA::Shape *)&buf, v24);
      }
    }
LABEL_20:
    CA::Shape::unref(v22);
    v20 = (CA::OGL::Context *)*v9;
    LODWORD(v22) = 1;
  }
LABEL_21:
  if ((*((_BYTE *)v20 + 418) & 2) != 0)
  {
    *(_QWORD *)&v640[0] = 1;
    v639[0] = 0uLL;
    v638 = 0;
    v16.i32[0] = 1073741822;
    v609 = v16;
    buf = v17;
    v588 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v598 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
    while (CA::ShapeIterator::iterate((uint64_t *)&buf, (int *)v639))
    {
      v27.i64[0] = SLODWORD(v639[0]);
      v27.i64[1] = SDWORD1(v639[0]);
      v26.i32[1] = HIDWORD(v639[0]);
      v28 = HIDWORD(v639[0]);
      v29 = (int8x16_t)vcvtq_f64_s64(v27);
      v27.i64[0] = SDWORD2(v639[0]);
      v27.i64[1] = SHIDWORD(v639[0]);
      v30 = v27;
      if (SDWORD2(v639[0]) > SHIDWORD(v639[0]))
        v28 = DWORD2(v639[0]);
      v26.i32[0] = v28;
      v31 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v26, v609), 0), v598, v29);
      v32 = (int8x16_t)vcvtq_f64_s64(v30);
      v33 = vdup_n_s32(v28 > 1073741822);
      v34.i64[0] = v33.u32[0];
      v34.i64[1] = v33.u32[1];
      *(_QWORD *)&v36.f64[1] = v588.i64[1];
      v35 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v34, 0x3FuLL)), v588, v32);
      v36.f64[0] = 1.79769313e308;
      v37 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v36, (float64x2_t)v35).i64[0], 0);
      v38.i64[1] = v31.i64[1];
      *(double *)v38.i64 = 0.03125 * *(double *)v31.i64;
      v39 = vbslq_s8(v37, v38, v31);
      v40.i64[1] = v35.i64[1];
      *(double *)v40.i64 = 0.03125 * *(double *)v35.i64;
      v41 = vbslq_s8(v37, v40, v35);
      if (*(double *)&v41.i64[1] < 1.79769313e308)
      {
        v39.i64[1] = vmuld_lane_f64(0.03125, (float64x2_t)v39, 1);
        *(double *)&v41.i64[1] = *(double *)&v41.i64[1] * 0.03125;
      }
      v42 = *(double *)&v41.i64[1];
      if (*(double *)v41.i64 <= *(double *)&v41.i64[1])
        v43 = *(double *)&v41.i64[1];
      else
        v43 = *(double *)v41.i64;
      if (v43 < 1.79769313e308)
      {
        if (*(double *)v41.i64 < *(double *)&v41.i64[1])
          v42 = *(double *)v41.i64;
        if (v42 > 0.0)
        {
          v44 = vaddq_f64((float64x2_t)v39, (float64x2_t)v41);
          v39 = (int8x16_t)vrndmq_f64((float64x2_t)v39);
          v41 = (int8x16_t)vsubq_f64(vrndpq_f64(v44), (float64x2_t)v39);
        }
      }
      v36.f64[0] = 1.79769313e308;
      v45 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v36, (float64x2_t)v41).i64[0], 0);
      v46.i64[1] = v39.i64[1];
      *(double *)v46.i64 = 32.0 * *(double *)v39.i64;
      v47 = (float64x2_t)vbslq_s8(v45, v46, v39);
      v48.i64[1] = v41.i64[1];
      *(double *)v48.i64 = 32.0 * *(double *)v41.i64;
      v49 = (float64x2_t)vbslq_s8(v45, v48, v41);
      if (v49.f64[1] < 1.79769313e308)
      {
        v47.f64[1] = vmuld_lane_f64(32.0, v47, 1);
        v49.f64[1] = v49.f64[1] * 32.0;
      }
      v50 = vceqzq_f64(v49);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v50, 1), (int8x16_t)v50).u64[0] & 0x8000000000000000) != 0
        || (v51 = vorrq_s8((int8x16_t)vcltzq_f64(v49), (int8x16_t)vcgezq_f64(v49)),
            (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v51), 1), v51).u64[0] & 0x8000000000000000) != 0))
      {
        v639[0] = 0uLL;
      }
      else
      {
        v52 = vmaxnmq_f64(v47, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000));
        v53 = vminnmq_f64(vaddq_f64(v47, v49), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
        v54 = (int32x4_t)vcvtmq_s64_f64(v52);
        v639[0] = vuzp1q_s32(v54, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v53), (int64x2_t)v54));
      }
      CA::shape_union((CA::Shape **)v640, (CA::Shape **)v639, v25);
    }
    *(_QWORD *)&buf = *(_QWORD *)&v640[0];
    CA::shape_intersect((CA::Shape **)&buf, (CA::Shape **)(*v9 + 184), v25);
    if ((_DWORD)v22)
      CA::Shape::unref((CA::Shape *)v17);
    v17 = buf;
    LODWORD(v22) = 1;
  }
  v9[3] = v17;
  v55 = v9 + 3;
  buf = 0uLL;
  CA::Shape::get_bounds(v17, (int *)&buf);
  *((_OWORD *)v9 + 2) = buf;
  if ((v17 & 1) != 0)
  {
    if (v17 == 1)
      goto LABEL_453;
  }
  else if (*(_DWORD *)(v17 + 4) == 6)
  {
    goto LABEL_453;
  }
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v9 + 208))(*v9))
  {
    v576 = (int)v22;
    v56 = v9[6];
    *(_QWORD *)v56 = 0;
    *(_QWORD *)(v56 + 8) = v56 + 32;
    *(_OWORD *)(v56 + 16) = xmmword_18474E050;
    v9[7] = v56;
    bzero(v639, 0x3D0uLL);
    CA::OGL::Context::prepare_context(*v9, (uint64_t)v639);
    v57 = (CA::OGL::Context *)*v9;
    *((_QWORD *)v57 + 15) = &buf;
    *((_QWORD *)v57 + 17) = 128;
    v9[9] = 0;
    v9[10] = 0;
    v9[8] = 0;
    v632 = 0x3C003C003C003C00;
    v633 = 0;
    v634 = 0;
    v635 = 0;
    v636 = 0x5033F800000;
    v628 = 0;
    v630 = 0;
    v631 = (float64x2_t *)&CA::identity_transform;
    v629 = (CA::Shape *)v17;
    (*(void (**)(CA::OGL::Context *, uint64_t *))(*(_QWORD *)v57 + 1008))(v57, &v628);
    bounds = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v9 + 952))(*v9, v7);
    v63 = (CA::OGL::Context *)*v9;
    if ((*(_BYTE *)(*v9 + 417) & 4) == 0)
      goto LABEL_59;
    v64 = *((_QWORD *)v63 + 31);
    if (v64 && (*(_BYTE *)(v64 + 68) & 0x30) != 0)
    {
      v65 = (CA::Shape *)&CA::Shape::_infinite_shape;
      v66 = 1;
      if ((&CA::Shape::_infinite_shape & 1) != 0)
        goto LABEL_55;
    }
    else
    {
      v66 = 0;
      if (*(_QWORD *)(j + 8))
        v65 = *(CA::Shape **)(j + 8);
      else
        v65 = (CA::Shape *)&CA::Shape::_infinite_shape;
      if ((v65 & 1) != 0)
      {
LABEL_55:
        if (v65 == (CA::Shape *)1)
          goto LABEL_57;
        goto LABEL_56;
      }
    }
    if (*((_DWORD *)v65 + 1) == 6)
    {
LABEL_57:
      if (v66)
        CA::Shape::unref(v65);
LABEL_59:
      if (*(_QWORD *)(j + 224) == j + 216)
      {
LABEL_360:
        if (BYTE10(xmmword_1ECDC6A70))
        {
          if (v581
            && (v383 = *(CA::Shape **)(j + 32),
                (*(unsigned int (**)(uint64_t))(*(_QWORD *)v581 + 1536))(v581)))
          {
            memset(v641, 0, sizeof(v641));
            memset(v640, 0, sizeof(v640));
            if (CA::Shape::rect_count(v383) >= 32)
              v384 = 1;
            else
              v384 = 4;
            bounds = CA::Shape::coalesce(v383, (CA::Bounds *)v640, v384);
            v61.i64[0] = *(_QWORD *)(*v9 + 192);
            v387 = v61.i32[0];
            if (v61.i32[0] <= v61.i32[1])
              v387 = HIDWORD(*(_QWORD *)(*v9 + 192));
            if (bounds)
            {
              v388 = bounds;
              v389 = *(_QWORD *)(*v9 + 184);
              v390.i64[0] = (int)v389;
              v390.i64[1] = SHIDWORD(v389);
              v385.i32[0] = v387;
              v386.i32[0] = 1073741822;
              v391 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v385, v386), 0);
              v392 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
              v604 = (float64x2_t)vbslq_s8(v391, v392, (int8x16_t)vcvtq_f64_s64(v390));
              v618 = v392;
              v390.i64[0] = v61.i32[0];
              v390.i64[1] = v61.i32[1];
              v393 = (int8x16_t)vcvtq_f64_s64(v390);
              v394 = vdup_n_s32(v387 > 1073741822);
              v390.i64[0] = v394.u32[0];
              v390.i64[1] = v394.u32[1];
              v61 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v390, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v393);
              *(float32x4_t *)v594 = v61;
              v395 = (int *)((unint64_t)v640 | 0xC);
              v61.i32[0] = 1073741822;
              v574 = (int32x4_t)v61;
              do
              {
                v396 = *(v395 - 1);
                v397 = *v395;
                if (v396 <= *v395)
                  v398 = *v395;
                else
                  v398 = *(v395 - 1);
                v61.i32[0] = v398;
                v399 = *(_QWORD *)(v395 - 3);
                v400.i64[0] = (int)v399;
                v400.i64[1] = SHIDWORD(v399);
                v401 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32((int32x4_t)v61, v574), 0), v618, (int8x16_t)vcvtq_f64_s64(v400));
                v402 = (double)v396;
                if (v398 > 1073741822)
                  v402 = 1.79769313e308;
                v668 = v401;
                if (v398 <= 1073741822)
                  v403 = (double)v397;
                else
                  v403 = 1.79769313e308;
                *(double *)v669.i64 = v402;
                *(double *)&v669.i64[1] = v403;
                CA::BoundsImpl::intersect((uint64_t)&v668, v604, *(float64x2_t *)v594);
                v624[0] = (CA::Shape *)&v668;
                v624[1] = (CA::Shape *)&CA::identity_transform;
                v625 = 0u;
                v626 = 0u;
                bounds = CA::OGL::fill_color_rect(*v9, (uint64_t)v624, (double *)0x80408080, v404, 0.0, v405);
                v395 += 4;
                --v388;
              }
              while (v388);
            }
          }
          else
          {
            v428 = (CA::OGL::Context *)*v9;
            v429 = *(_DWORD *)(*v9 + 192);
            v430 = *(_DWORD *)(*v9 + 196);
            if (v429 <= v430)
              v431 = *(_DWORD *)(*v9 + 196);
            else
              v431 = *(_DWORD *)(*v9 + 192);
            v61.i32[0] = 1073741822;
            v62.i32[0] = v431;
            v432 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v62, (int32x4_t)v61), 0);
            v433 = *((_QWORD *)v428 + 23);
            v434.i64[0] = (int)v433;
            v434.i64[1] = SHIDWORD(v433);
            v435 = (int8x16_t)vcvtq_f64_s64(v434);
            *(int8x16_t *)v624 = vbslq_s8(v432, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), v435);
            if (v431 <= 1073741822)
              v436 = (double)v429;
            else
              v436 = 1.79769313e308;
            if (v431 <= 1073741822)
              *(double *)v435.i64 = (double)v430;
            else
              *(double *)v435.i64 = 1.79769313e308;
            v625.f64[0] = v436;
            *(_QWORD *)&v625.f64[1] = v435.i64[0];
            *(_QWORD *)&v640[0] = v624;
            *((_QWORD *)&v640[0] + 1) = &CA::identity_transform;
            v640[1] = 0u;
            v641[0] = 0u;
            bounds = CA::OGL::fill_color_rect((uint64_t)v428, (uint64_t)v640, (double *)0x80408080, v60, 0.0, v435);
          }
        }
        v22 = (CA::OGL::Context *)*v9;
        v299 = v581;
        if ((*(_WORD *)(*v9 + 816) & 2) != 0 && byte_1ECDC6A83)
        {
          v437 = *((_DWORD *)v22 + 48);
          v438 = *((_DWORD *)v22 + 49);
          if (v437 <= v438)
            v439 = *((_DWORD *)v22 + 49);
          else
            v439 = *((_DWORD *)v22 + 48);
          v61.i32[0] = 1073741822;
          v62.i32[0] = v439;
          v440 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v62, (int32x4_t)v61), 0);
          v441 = *((_QWORD *)v22 + 23);
          v442.i64[0] = (int)v441;
          v442.i64[1] = SHIDWORD(v441);
          v443 = (int8x16_t)vcvtq_f64_s64(v442);
          *(int8x16_t *)v624 = vbslq_s8(v440, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), v443);
          v444 = 1.79769313e308;
          if (v439 <= 1073741822)
            v445 = (double)v437;
          else
            v445 = 1.79769313e308;
          if (v439 <= 1073741822)
            v444 = (double)v438;
          v625.f64[0] = v445;
          v625.f64[1] = v444;
          *(_QWORD *)&v640[0] = v624;
          *((_QWORD *)&v640[0] + 1) = &CA::identity_transform;
          v640[1] = 0u;
          v641[0] = 0u;
          *(double *)v443.i64 = (double)v438;
          bounds = CA::OGL::fill_color_rect((uint64_t)v22, (uint64_t)v640, (double *)0x80008080, v60, 0.0, v443);
          v22 = (CA::OGL::Context *)*v9;
        }
        if (BYTE14(xmmword_1ECDC6AF0))
        {
          if ((*((_WORD *)v22 + 408) & 2) == 0)
          {
            v406 = *((_QWORD *)v22 + 31);
            if (v406)
            {
              v407 = *(_DWORD *)(v406 + 68);
              v408 = *((_DWORD *)v22 + 48);
              v409 = *((_DWORD *)v22 + 49);
              if (v408 <= v409)
                v410 = *((_DWORD *)v22 + 49);
              else
                v410 = *((_DWORD *)v22 + 48);
              v61.i32[0] = 1073741822;
              v62.i32[0] = v410;
              v411 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v62, (int32x4_t)v61), 0);
              v412 = *((_QWORD *)v22 + 23);
              v413.i64[0] = (int)v412;
              v413.i64[1] = SHIDWORD(v412);
              v414 = (int8x16_t)vcvtq_f64_s64(v413);
              *(int8x16_t *)v624 = vbslq_s8(v411, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), v414);
              if (v410 <= 1073741822)
                v415 = (double)v408;
              else
                v415 = 1.79769313e308;
              if (v410 <= 1073741822)
                *(double *)v414.i64 = (double)v409;
              else
                *(double *)v414.i64 = 1.79769313e308;
              v625.f64[0] = v415;
              *(_QWORD *)&v625.f64[1] = v414.i64[0];
              *(_QWORD *)&v640[0] = v624;
              *((_QWORD *)&v640[0] + 1) = &CA::identity_transform;
              v640[1] = 0u;
              v641[0] = 0u;
              if ((v407 & 8) != 0)
                v416 = 2147483776;
              else
                v416 = 8388736;
              bounds = CA::OGL::fill_color_rect((uint64_t)v22, (uint64_t)v640, (double *)v416, v60, 0.0, v414);
              v22 = (CA::OGL::Context *)*v9;
            }
          }
          v299 = v581;
        }
        if (((*(unsigned int *)(j + 1064) | ((unint64_t)*(unsigned __int16 *)(j + 1068) << 32)) & 0x200000000) != 0
          && BYTE2(xmmword_1ECDC6AD0))
        {
          v446 = *((_DWORD *)v22 + 48);
          v447 = *((_DWORD *)v22 + 49);
          if (v446 <= v447)
            v448 = *((_DWORD *)v22 + 49);
          else
            v448 = *((_DWORD *)v22 + 48);
          v61.i32[0] = 1073741822;
          v62.i32[0] = v448;
          v449 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v62, (int32x4_t)v61), 0);
          v450 = *((_QWORD *)v22 + 23);
          v451.i64[0] = (int)v450;
          v451.i64[1] = SHIDWORD(v450);
          v452 = (int8x16_t)vcvtq_f64_s64(v451);
          *(int8x16_t *)v624 = vbslq_s8(v449, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), v452);
          v453 = 1.79769313e308;
          if (v448 <= 1073741822)
            v454 = (double)v446;
          else
            v454 = 1.79769313e308;
          if (v448 <= 1073741822)
            v453 = (double)v447;
          v625.f64[0] = v454;
          v625.f64[1] = v453;
          *(_QWORD *)&v640[0] = v624;
          *((_QWORD *)&v640[0] + 1) = &CA::identity_transform;
          v640[1] = 0u;
          v641[0] = 0u;
          *(double *)v452.i64 = (double)v447;
          bounds = CA::OGL::fill_color_rect((uint64_t)v22, (uint64_t)v640, (double *)0x80800080, v60, 0.0, v452);
          v22 = (CA::OGL::Context *)*v9;
        }
        v300 = (unsigned int *)(j + 1064);
        if (v299)
        {
          if ((*((_WORD *)v22 + 408) & 2) == 0)
          {
            bounds = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v299 + 528))(v299, j);
            v22 = (CA::OGL::Context *)*v9;
            if (bounds)
            {
              v642.f64[0] = 0.0;
              memset(v641, 0, sizeof(v641));
              memset(v640, 0, sizeof(v640));
              v301 = *((_QWORD *)v22 + 29);
              *(_OWORD *)((char *)v640 + 8) = *(_OWORD *)(v301 + 8);
              v302 = *(_QWORD *)(v301 + 32);
              *((_QWORD *)&v640[1] + 1) = *(_QWORD *)(v301 + 24);
              *(_QWORD *)&v641[0] = v302;
              *(_OWORD *)((char *)v641 + 8) = *(_OWORD *)(v301 + 40);
              *((_QWORD *)&v641[1] + 1) = *(_QWORD *)(v301 + 56);
              v303 = *(unsigned __int8 *)(v301 + 68);
              WORD2(v642.f64[0]) = v303;
              LODWORD(v642.f64[0]) = *(_DWORD *)(v301 + 64);
              WORD2(v642.f64[0]) = *(_WORD *)(v301 + 68) & 0x100 | v303;
              WORD2(v642.f64[0]) |= *(_WORD *)(v301 + 68) & 0x400;
              *((_QWORD *)&v640[0] + 1) = bounds;
              *(_QWORD *)&v640[0] = CA::OGL::Context::set_gstate((uint64_t)v22, (uint64_t)v640);
              v306 = (CA::OGL::Context *)*v9;
              v307 = *(_DWORD *)(*v9 + 192);
              v308 = *(_DWORD *)(*v9 + 196);
              if (v307 <= v308)
                v309 = *(_DWORD *)(*v9 + 196);
              else
                v309 = *(_DWORD *)(*v9 + 192);
              v304.i32[0] = 1073741822;
              v305.i32[0] = v309;
              v310 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v305, v304), 0);
              v311 = *((_QWORD *)v306 + 23);
              v312.i64[0] = (int)v311;
              v312.i64[1] = SHIDWORD(v311);
              v313 = vbslq_s8(v310, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v312));
              v314 = (double)v307;
              v315 = (double)v308;
              if (v309 > 1073741822)
              {
                v314 = 1.79769313e308;
                v315 = 1.79769313e308;
              }
              v668 = v313;
              *(double *)v669.i64 = v314;
              *(double *)&v669.i64[1] = v315;
              v624[0] = (CA::Shape *)&v668;
              v624[1] = (CA::Shape *)&CA::identity_transform;
              v625 = 0u;
              v626 = 0u;
              v316 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v299 + 536))(v299);
              CA::OGL::fill_color_rect((uint64_t)v306, (uint64_t)v624, v316, v317, v318, v319);
              bounds = CA::OGL::Context::set_gstate(*v9, **(_QWORD **)(*v9 + 232));
              if (!BYTE3(ca_debug_options))
                bounds = usleep(0x186A0u);
              v22 = (CA::OGL::Context *)*v9;
              v300 = (unsigned int *)(j + 1064);
            }
          }
        }
        v320 = *v300 | ((unint64_t)*((unsigned __int16 *)v300 + 2) << 32);
        if ((*((_WORD *)v22 + 408) & 1) == 0 && (v320 & 0x200000004) != 4 && (*v300 & 0x80000000) == 0)
        {
          v616 = v300;
          *(_QWORD *)&v644 = 0;
          v322 = *v631;
          v321 = v631[1];
          v323 = v631[2];
          v324 = v631[3];
          v640[0] = *v631;
          v640[1] = v321;
          v641[0] = v323;
          v641[1] = v324;
          v325 = v631[4];
          v326 = v631[5];
          v327 = v631[6];
          v328 = v631[7];
          v642 = v325;
          v643[0] = v326;
          v643[1] = v327;
          v643[2] = v328;
          v329 = v631[8];
          v643[3] = v329;
          v330 = LOBYTE(v631[9].f64[0]);
          *(_QWORD *)&v644 = v330 & 0x1F;
          if (initialized[0] != -1)
          {
            *(float64x2_t *)v595 = v322;
            v605 = v323;
            v582 = v321;
            *(float64x2_t *)v587 = v324;
            *(float64x2_t *)v580 = v325;
            v572 = v329;
            v575 = v326;
            dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
            v329 = v572;
            v326 = v575;
            v325 = *(float64x2_t *)v580;
            v321 = v582;
            v324 = *(float64x2_t *)v587;
            v322 = *(float64x2_t *)v595;
            v323 = v605;
          }
          if (*(float *)&dword_1ECDC6984 > 0.0 && *(float *)&dword_1ECDC6984 != 1.0)
          {
            *(double *)&v331 = *(float *)&dword_1ECDC6984;
            if ((v330 & 0x10) != 0)
            {
              v640[0] = vmulq_n_f64(v322, *(double *)&v331);
              v640[1] = vmulq_n_f64(v321, *(double *)&v331);
              v641[0] = vmulq_n_f64(v323, *(double *)&v331);
              v641[1] = vmulq_n_f64(v324, *(double *)&v331);
              v642 = v325;
              v643[0] = v326;
            }
            else
            {
              *(double *)&v332 = vmulq_n_f64(v329, *(double *)&v331).f64[0];
              *((_QWORD *)&v332 + 1) = *(_QWORD *)&vdivq_f64(v329, (float64x2_t)vdupq_lane_s64(v331, 0)).f64[1];
              v643[3] = v332;
              LOBYTE(v644) = v330 & 0x17 | (8 * (*(double *)&v332 != 1.0));
              v640[0] = vmulq_n_f64(v322, *(double *)&v331);
              v641[0] = vmulq_n_f64(v323, *(double *)&v331);
            }
          }
          v577 = v7;
          v585 = j;
          if (BYTE5(xmmword_1ECDC6A70))
          {
            v569 = v55;
            v465 = (const CA::Transform **)*v9;
            v466 = *(unsigned int *)(j + 248);
            v467 = *(_DWORD *)(*v9 + 432);
            if (v467 >= 0xB)
              v467 = 11;
            v468 = CA::OGL::kDetailGroups[v467];
            v470 = v467 == 6 || *(_DWORD *)(*v9 + 436) != 0;
            PerfHud = CA::OGL::GetPerfHud((CA::OGL *)bounds);
            CA::OGL::update_perf_hud_pstate(PerfHud, v468);
            if (*(_DWORD *)(PerfHud + 1132))
              *(_QWORD *)(PerfHud + 1104) = *((int *)v465 + 49) * (uint64_t)*((int *)v465 + 48);
            v473 = 1.0 / *(float *)(j + 372);
            CA::Render::Update::render_edr_factor((CA::Render::Update *)j, v472);
            v474 = 1.0 / *(float *)(j + 1060);
            *(double *)(PerfHud + 488) = v473;
            *(double *)(PerfHud + 496) = v475;
            *(double *)(PerfHud + 504) = v474;
            v476 = v465[22];
            if (v476)
            {
              v477 = (CA::WindowServer::Display *)(*(uint64_t (**)(const CA::Transform *))(*(_QWORD *)v476 + 16))(v476);
              if (CADeviceNeedsDisplayWorkarounds::once[0] != -1)
                dispatch_once(CADeviceNeedsDisplayWorkarounds::once, &__block_literal_global_52_9800);
              v606 = v477 != 0;
              if (CADeviceNeedsDisplayWorkarounds::needs_workarounds && v477)
                *(double *)(PerfHud + 520) = (double)(*(unsigned int (**)(CA::WindowServer::Display *))(*(_QWORD *)v477 + 1496))(v477);
              if (CADeviceNeedsLumaBoost::once[0] != -1)
                dispatch_once(CADeviceNeedsLumaBoost::once, &__block_literal_global_54);
              if (CADeviceNeedsLumaBoost::needs_luma_bost && v477)
              {
                *(double *)(PerfHud + 528) = (*(float (**)(CA::WindowServer::Display *))(*(_QWORD *)v477
                                                                                                  + 976))(v477);
                v606 = 1;
              }
            }
            else
            {
              if (CADeviceNeedsDisplayWorkarounds::once[0] != -1)
                dispatch_once(CADeviceNeedsDisplayWorkarounds::once, &__block_literal_global_52_9800);
              if (CADeviceNeedsLumaBoost::once[0] != -1)
                dispatch_once(CADeviceNeedsLumaBoost::once, &__block_literal_global_54);
              v477 = 0;
              v606 = 0;
            }
            if (CADeviceSupportsTwilight::once[0] != -1)
              dispatch_once(CADeviceSupportsTwilight::once, &__block_literal_global_220);
            v512 = v606;
            if (!CADeviceSupportsTwilight::twilight)
              v512 = 0;
            if (v512 && !byte_1ECDC6AE3)
            {
              if ((*(float (**)(CA::WindowServer::Display *))(*(_QWORD *)v477 + 1272))(v477) > 1.0
                || (v513 = (*(float (**)(CA::WindowServer::Display *))(*(_QWORD *)v477 + 1272))(v477),
                    v514 = 0.0,
                    v513 >= 0.0))
              {
                v515 = (*(float (**)(CA::WindowServer::Display *))(*(_QWORD *)v477 + 1272))(v477);
                v514 = 1.0;
                if (v515 <= 1.0)
                  v514 = (*(float (**)(CA::WindowServer::Display *))(*(_QWORD *)v477 + 1272))(v477);
              }
              *(double *)(PerfHud + 536) = v514;
              if ((*(float (**)(CA::WindowServer::Display *))(*(_QWORD *)v477 + 1288))(v477) > 1.0
                || (v516 = (*(float (**)(CA::WindowServer::Display *))(*(_QWORD *)v477 + 1288))(v477),
                    v517 = 0.0,
                    v516 >= 0.0))
              {
                v518 = (*(float (**)(CA::WindowServer::Display *))(*(_QWORD *)v477 + 1288))(v477);
                v517 = 1.0;
                if (v518 <= 1.0)
                  v517 = (*(float (**)(CA::WindowServer::Display *))(*(_QWORD *)v477 + 1288))(v477);
              }
              *(double *)(PerfHud + 544) = v517;
            }
            if (CADeviceSupportsBandwidthStatistics::once != -1)
              dispatch_once(&CADeviceSupportsBandwidthStatistics::once, &__block_literal_global_239);
            v519 = v606;
            if (!CADeviceSupportsBandwidthStatistics::bw_stats)
              v519 = 0;
            if (v519)
            {
              v520 = (*(double (**)(CA::WindowServer::Display *))(*(_QWORD *)v477 + 1960))(v477);
              v521 = (*(double (**)(CA::WindowServer::Display *))(*(_QWORD *)v477 + 1968))(v477);
              v522 = (*(double (**)(CA::WindowServer::Display *))(*(_QWORD *)v477 + 1976))(v477);
              (*(void (**)(CA::WindowServer::Display *))(*(_QWORD *)v477 + 1984))(v477);
              v524 = v520 / v521;
              if (v521 == 0.0)
                v524 = v521;
              *(double *)(PerfHud + 672) = v520 * 0.000001;
              *(double *)(PerfHud + 680) = v521 * 0.000001;
              *(double *)(PerfHud + 696) = v522 * 0.000001;
              *(double *)(PerfHud + 704) = v523 * 0.000001;
              if (v523 != 0.0)
                v523 = v522 / v523;
              *(double *)(PerfHud + 688) = v524;
              *(double *)(PerfHud + 712) = v523;
            }
            if (v606)
            {
              v525 = (*(float (**)(CA::WindowServer::Display *))(*(_QWORD *)v477 + 920))(v477);
              *(double *)(PerfHud + 512) = (float)(CA::WindowServer::Display::edr_headroom(v477) * v525);
              if (CADeviceSupportsRTPLC::once != -1)
                dispatch_once(&CADeviceSupportsRTPLC::once, &__block_literal_global_218);
              if (CADeviceSupportsRTPLC::rtplc)
              {
                *(double *)(PerfHud + 720) = (*(double (**)(CA::WindowServer::Display *))(*(_QWORD *)v477 + 1992))(v477);
                *(_QWORD *)(PerfHud + 728) = (*(unsigned int (**)(CA::WindowServer::Display *))(*(_QWORD *)v477 + 2000))(v477);
                *(_QWORD *)(PerfHud + 736) = (*(unsigned int (**)(CA::WindowServer::Display *))(*(_QWORD *)v477 + 2008))(v477);
              }
            }
            else if (CADeviceSupportsRTPLC::once != -1)
            {
              dispatch_once(&CADeviceSupportsRTPLC::once, &__block_literal_global_218);
            }
            v526 = (*((double (**)(const CA::Transform **))*v465 + 136))(v465) * 1000.0;
            *(_QWORD *)(PerfHud + 664) = (unint64_t)(float)(*(float *)&CA::OGL::PerformanceHUD::_scale_ms_to_ticks
                                                                 * v526);
            *(_DWORD *)(PerfHud + 4136) = v468 | 1;
            CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)PerfHud);
            v527 = 4088;
            if (v470)
              v527 = 4080;
            *(_QWORD *)(PerfHud + 4128) = *(_QWORD *)(PerfHud + v527);
            v528 = CA::OGL::PerformanceHUD::calculate_fps((CA::OGL::PerformanceHUD *)PerfHud, *(double *)(j + 72));
            v529 = *(_QWORD *)(PerfHud + 392);
            *(_QWORD *)(PerfHud + 384) += v528;
            *(_QWORD *)(PerfHud + 392) = v529 + *(unsigned int *)(j + 276);
            v530 = *(_QWORD *)(PerfHud + 424);
            *(_QWORD *)(PerfHud + 416) += *((int *)v465 + 173);
            *(_QWORD *)(PerfHud + 424) = v530 + (uint64_t)v21;
            *(_QWORD *)(PerfHud + 432) = v466;
            *(_QWORD *)(PerfHud + 600) = CA::OGL::thermal_level[0];
            *(_QWORD *)(PerfHud + 744) = *(int *)(j + 492);
            *(_QWORD *)(PerfHud + 752) = *(int *)(j + 488);
            *(_QWORD *)(PerfHud + 760) = *(int *)(j + 496);
            CA::OGL::PerformanceHUD::update((CA::OGL::PerformanceHUD *)PerfHud);
            v531 = (CA::OGL::Context *)(PerfHud + 3976);
            CA::OGL::DebugRenderer::render((uint64_t)v531, (CA::OGL::Context *)v465, (const CA::Transform *)v640);
            v624[0] = 0;
            v624[1] = 0;
            CA::OGL::DebugRenderer::visible_bounds((CA::OGL::DebugRenderer *)v624, v531, v465[22], (uint64_t)v640);
            if (v465[51])
              CA::shape_union(v465 + 51, v624, v533);
            else
              v465[51] = (const CA::Transform *)CA::Shape::new_shape((CA::Shape *)v624, v532);
            v55 = v569;
          }
          else
          {
            os_unfair_lock_lock((os_unfair_lock_t)&CA::OGL::_perf_hud_list_lock);
            v333 = CA::OGL::_perf_hud_list[0];
            v334 = off_1EDD0FB38[0];
            if (CA::OGL::_perf_hud_list[0] != off_1EDD0FB38[0])
            {
              do
              {
                v335 = *((_QWORD *)v333 + 1);
                if (v335)
                {
                  v336 = v17;
                  CA::OGL::DebugRenderer::~DebugRenderer((CA::OGL::DebugRenderer *)(v335 + 3976));
                  for (i = 3800; i != 728; i -= 64)
                  {
                    v338 = *(_QWORD **)(v335 + i);
                    if (v338)
                    {
                      if (*v338)
                        MEMORY[0x186DBD978](*v338, 0x1000C80F7F8B94BLL);
                      MEMORY[0x186DBD990](v338, 0x20C40960023A9);
                    }
                  }
                  MEMORY[0x186DBD990](v335, 0x1070C40BA178129);
                  v17 = v336;
                }
                v333 += 4;
              }
              while (v333 != v334);
              off_1EDD0FB38[0] = CA::OGL::_perf_hud_list[0];
              notify_cancel(CA::OGL::thermal_level_register_token);
              if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate)
                v339 = CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_destroy == 0;
              else
                v339 = 1;
              if (!v339)
              {
                CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_current_options = 0;
                CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_destroy();
                CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate = 0;
              }
            }
            os_unfair_lock_unlock((os_unfair_lock_t)&CA::OGL::_perf_hud_list_lock);
          }
          v340 = (CA::OGL::Context *)*v9;
          v341 = CAGetDebugMessage();
          v343 = v616;
          if (initialized[0] != -1)
            dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
          v344 = debug_message_color;
          if (CA::OGL::Context::update_debug_message(CA::Transform const*)::once[0] != -1)
            dispatch_once(CA::OGL::Context::update_debug_message(CA::Transform const*)::once, &__block_literal_global_2895);
          if (CA::OGL::Context::update_debug_message(CA::Transform const*)::show_message && v341)
          {
            v478 = v17;
            v479 = v55;
            v480 = v478;
            v481 = *((_QWORD *)v340 + 22);
            if (v481)
              v482 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v481 + 16))(v481);
            else
              v482 = 0;
            if ((*(_WORD *)(v482 + 656) & 0x1C00) != 0)
            {
              v597 = 0;
              v608 = 0;
              v534 = *((_DWORD *)v340 + 48);
              v535 = 0.0;
              v536 = 3.0;
            }
            else
            {
              if (CADeviceIsPhone::once[0] != -1)
                dispatch_once(CADeviceIsPhone::once, &__block_literal_global_134);
              if (CADeviceIsPhone::phone)
              {
                if (CADeviceHasNotch::once != -1)
                  dispatch_once(&CADeviceHasNotch::once, &__block_literal_global_210);
                if (CADeviceHasNotch::has_notch)
                  v536 = 3.5;
                else
                  v536 = 2.0;
              }
              else
              {
                v536 = 3.0;
              }
              if ((*(unsigned __int8 *)(v482 + 656) | 2) == 3)
              {
                v534 = *((_DWORD *)v340 + 49);
                if (CADeviceIsPhone::once[0] != -1)
                  dispatch_once(CADeviceIsPhone::once, &__block_literal_global_134);
                if (CADeviceIsPhone::phone)
                  v535 = 20.0;
                else
                  v535 = 60.0;
                if (CADeviceIsPhone::phone)
                  v537 = 1123024896;
                else
                  v537 = 1101004800;
              }
              else
              {
                v534 = *((_DWORD *)v340 + 48);
                if (CADeviceHasNotch::once != -1)
                  dispatch_once(&CADeviceHasNotch::once, &__block_literal_global_210);
                if (CADeviceHasNotch::has_notch)
                  v535 = 60.0;
                else
                  v535 = 50.0;
                v537 = 1101004800;
              }
              v608 = v537;
              v597 = 0x3885000000000000;
            }
            v538 = v536 * 7.0;
            v539 = v536 * 8.0;
            _S11 = (float)HIBYTE(v344) * 0.0039216;
            *(float32x2_t *)v342.f32 = vmul_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v344), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x3B808081u));
            v583 = v342;
            _S13 = (float)v344 * 0.0039216;
            v542 = strlen(v341);
            if (v542)
            {
              v543 = 1;
              v544 = v341;
              v545 = v542;
              do
              {
                v546 = *v544++;
                if (v546 == 10)
                  ++v543;
                --v545;
              }
              while (v545);
              v547 = (float)(v543 + 1);
            }
            else
            {
              v547 = 2.0;
            }
            __asm { FCVT            H11, S11 }
            v549 = (uint16x4_t)vcvt_f16_f32(v583);
            __asm { FCVT            H13, S13 }
            v550 = v539 * v547;
            v551 = v538 * (float)v542;
            if (v534)
              v551 = (float)v534;
            *(float *)v668.i32 = v551;
            *(float *)&v668.i32[1] = v535 + truncf(v550);
            v552 = (int)v551;
            v553 = (int)*(float *)&v668.i32[1];
            v554 = *((_QWORD *)v340 + 50);
            if (!v554)
            {
              v555 = (CA::OGL::DebugRenderer *)operator new();
              CA::OGL::DebugRenderer::DebugRenderer(v555, 2048);
              std::unique_ptr<CA::OGL::DebugRenderer>::reset[abi:nn180100]((CA::OGL::DebugRenderer **)v340 + 50, v555);
              v554 = *((_QWORD *)v340 + 50);
            }
            *(float *)(v554 + 24) = v538;
            *(float *)(v554 + 28) = v539;
            *(_QWORD *)(v554 + 64) = *(_QWORD *)(v554 + 48);
            *(_QWORD *)(*((_QWORD *)v340 + 50) + 80) = v597;
            v556 = *((_QWORD *)v340 + 50);
            *(_QWORD *)v556 = 0;
            *(_DWORD *)(v556 + 8) = v552;
            *(_DWORD *)(v556 + 12) = v553;
            *(_QWORD *)(v556 + 16) = 0;
            CA::OGL::DebugRenderer::draw_rectangle_with_fill(v556, (float *)v668.i32, 0.0);
            v557 = vmovl_u16(v549).u64[0];
            v558.i64[0] = v557;
            v558.i64[1] = HIDWORD(v557);
            v559.i64[0] = 0xFFFFLL;
            v559.i64[1] = 0xFFFFLL;
            v560 = vshlq_u64((uint64x2_t)vandq_s8(v558, v559), (uint64x2_t)xmmword_18474E0A0);
            *(_QWORD *)(*((_QWORD *)v340 + 50) + 80) = v560.i64[0] | ((unint64_t)LODWORD(_S13) << 48) | _H11 | v560.i64[1];
            v561 = *((_QWORD *)v340 + 50);
            *(_DWORD *)(v561 + 16) = v608;
            *(float *)(v561 + 20) = v535;
            v562 = strlen(v341);
            CA::OGL::DebugRenderer::draw_string(v561, v341, v562);
            CA::OGL::DebugRenderer::render(*((_QWORD *)v340 + 50), v340, (const CA::Transform *)v640);
            v624[0] = 0;
            v624[1] = 0;
            CA::OGL::DebugRenderer::visible_bounds((CA::OGL::DebugRenderer *)v624, *((CA::OGL::Context **)v340 + 50), *((const CA::Transform **)v340 + 22), (uint64_t)v640);
            if (*((_QWORD *)v340 + 51))
              CA::shape_union((CA::Shape **)v340 + 51, v624, v564);
            else
              *((_QWORD *)v340 + 51) = CA::Shape::new_shape((CA::Shape *)v624, v563);
            v565 = v480;
            v55 = v479;
            v17 = v565;
            v343 = v616;
          }
          else if (*((_QWORD *)v340 + 50))
          {
            std::unique_ptr<CA::OGL::DebugRenderer>::reset[abi:nn180100]((CA::OGL::DebugRenderer **)v340 + 50, 0);
          }
          LODWORD(v320) = *v343;
          v22 = (CA::OGL::Context *)*v9;
          j = v585;
          v7 = v577;
        }
        if ((v320 & 0x4000000) != 0 && (*((_BYTE *)v22 + 417) & 0x20) == 0)
        {
          v579 = v17;
          v586 = j;
          v345 = *(_QWORD **)(v9[1] + 504);
          if (v345)
          {
            v617 = v9[1];
            v568 = v55;
            do
            {
              v346 = v345[1];
              v347 = *(uint64_t **)(*(_QWORD *)(v346 + 32) + 128);
              if (v347)
              {
                v348 = *v347;
                if (*v347)
                {
                  if ((*(_DWORD *)(v348 + 12) & 0x4FF) == 0x403)
                  {
                    v349 = *(_QWORD *)(v346 + 256);
                    if (v349)
                    {
                      v350 = v7;
                      v351 = (os_unfair_lock_s *)(v349 + 36);
                      os_unfair_lock_lock((os_unfair_lock_t)(v349 + 36));
                      v352 = *(_QWORD *)(v349 + 40);
                      if (v352)
                      {
                        v353 = (os_unfair_lock_s *)(v352 + 40);
                        os_unfair_lock_lock((os_unfair_lock_t)(v352 + 40));
                        v354 = *(_QWORD *)(v352 + 48);
                        if (v354)
                        {
                          if (*(CA::OGL::Context **)(v354 + 8) == v22)
                          {
                            v355 = *(_DWORD *)(v354 + 60);
                            v356 = *(_DWORD *)(v349 + 72);
                            *(_BYTE *)(v349 + 96) = v355 != v356;
                            if (v355 != v356)
                            {
                              v357 = *(double *)(v349 + 64);
                              v358 = *(double *)(v617 + 72);
                              if (v357 - v358 <= 0.035)
                              {
                                v362 = *(_QWORD *)(v354 + 32);
                                if (v362)
                                {
                                  if (!*(_QWORD *)(v362 + 48))
                                  {
                                    *(_DWORD *)(v349 + 72) = v355;
                                    *(double *)(v349 + 64) = v358 + 0.25;
                                    v363 = *(_QWORD *)(v348 + 16);
                                    v364 = CA::Render::Context::context_by_id((CA::Render::Context *)*(unsigned int *)(*(_QWORD *)(v349 + 16) + 16));
                                    if (v364)
                                    {
                                      v365 = (unsigned int *)v364;
                                      *(_QWORD *)&v640[0] = MEMORY[0x1E0C809B0];
                                      *((_QWORD *)&v640[0] + 1) = 0x40000000;
                                      *(_QWORD *)&v640[1] = ___ZN2CA3OGL20update_backdrop_lumaERNS0_8RendererE_block_invoke;
                                      *((_QWORD *)&v640[1] + 1) = &__block_descriptor_tmp_15626;
                                      *(_QWORD *)&v641[0] = v364;
                                      *((_QWORD *)&v641[0] + 1) = v363;
                                      if (((*(uint64_t (**)(CA::OGL::Context *, uint64_t, _OWORD *))(*(_QWORD *)v22 + 744))(v22, v362, v640) & 1) == 0)
                                      {
                                        v366 = v365 + 2;
                                        do
                                        {
                                          v367 = __ldaxr(v366);
                                          v368 = v367 - 1;
                                        }
                                        while (__stlxr(v368, v366));
                                        if (!v368)
                                          (*(void (**)(unsigned int *))(*(_QWORD *)v365 + 16))(v365);
                                      }
                                    }
                                  }
                                }
                              }
                              else
                              {
                                v359 = *(double *)(v617 + 80);
                                if (v359 >= v357)
                                  v360 = *(double *)(v349 + 64);
                                else
                                  v360 = *(double *)(v617 + 80);
                                *(_QWORD *)(v617 + 96) |= 0x20000uLL;
                                if (v359 >= v360)
                                {
                                  if (v360 == 0.0 || v359 <= v360)
                                  {
                                    v370 = v617;
                                    v369 = *(_QWORD *)(v617 + 88) | 0x20000;
                                  }
                                  else
                                  {
                                    v369 = 0x20000;
                                    v370 = v617;
                                  }
                                  *(_QWORD *)(v370 + 88) = v369;
                                  *(double *)(v370 + 80) = v360;
                                }
                              }
                            }
                          }
                        }
                        os_unfair_lock_unlock(v353);
                      }
                      os_unfair_lock_unlock(v351);
                      v7 = v350;
                      v55 = v568;
                    }
                  }
                }
              }
              v345 = (_QWORD *)*v345;
            }
            while (v345);
            v22 = (CA::OGL::Context *)*v9;
          }
          j = v586;
          v17 = v579;
        }
        (*(void (**)(CA::OGL::Context *, uint64_t))(*(_QWORD *)v22 + 960))(v22, v7);
        (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*v9 + 1016))(*v9, &v628);
        v371 = (CA::OGL::Context *)*v9;
        *((_QWORD *)v371 + 15) = 0;
        *((_QWORD *)v371 + 17) = 0;
        *((_QWORD *)v371 + 2) = 0;
        *((_QWORD *)v371 + 3) = 0;
        x_heap_free((void ***)v9[7]);
        v9[7] = 0;
        v372 = 488;
        LODWORD(v22) = v576;
        do
        {
          if (*(_QWORD *)((char *)v639 + v372))
            __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
          v372 -= 488;
        }
        while (v372 != -488);
        goto LABEL_453;
      }
      v578 = v17;
      v653 = 0;
      v652 = 0u;
      v651 = 0u;
      v650 = 0u;
      v649 = 0u;
      v648 = 0u;
      v647 = 0u;
      v646 = 0u;
      v645 = 0u;
      v644 = 0u;
      memset(v643, 0, sizeof(v643));
      memset(v641, 0, sizeof(v641));
      memset(v640, 0, sizeof(v640));
      WORD5(v641[0]) = 771;
      v642 = 0uLL;
      v654 = 0;
      v620 = 0;
      bounds = (uint64_t)CA::OGL::prepare_layers((uint64_t)v9, (const CA::Render::TransitionSubclass *)v640, (_QWORD **)(j + 216), (uint64_t)&v628, 0, &v620, (_BYTE *)&v620 + 1);
      if (!bounds)
      {
LABEL_359:
        v17 = v578;
        goto LABEL_360;
      }
      v584 = j;
      v67 = CA::OGL::prepare_layers_roi((const Rect **)v9, (_QWORD *)bounds, (uint64_t)&v628);
      v69 = (CA::OGL::Context *)*v9;
      v68 = v9[1];
      if (*(_QWORD *)(v68 + 504))
        v70 = *((_QWORD *)v69 + 31) == 0;
      else
        v70 = 0;
      if ((*((_WORD *)v69 + 408) & 2) != 0)
      {
        v74 = *((_QWORD *)v69 + 31);
        if (v74)
        {
          if ((*(_BYTE *)(v74 + 68) & 8) == 0)
            v70 |= (*(_BYTE *)(v68 + 269) & 0x20) >> 5;
        }
      }
      v75 = *((_QWORD *)v69 + 22);
      if (v75)
      {
        v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 16))(v75);
        v77 = *(CA::Shape **)(v9[1] + 24);
        v573 = (CA::WindowServer::Display *)v76;
        v567 = v77;
        if (!v76)
        {
          LODWORD(v77) = 0;
          v573 = 0;
          v570 = 0;
          goto LABEL_92;
        }
        if ((*((_WORD *)v69 + 408) & 2) != 0
          || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v76 + 1496))(v76))
        {
          goto LABEL_88;
        }
        if ((v77 & 1) == 0)
        {
          if (*((_DWORD *)v77 + 1) == 6)
          {
LABEL_88:
            v570 = 0;
            LODWORD(v77) = 1;
LABEL_92:
            *((_QWORD *)v69 + 101) = v640;
            *((_WORD *)v69 + 408) &= ~0x800u;
            v571 = (int)v77;
            if ((v70 & 1) == 0)
              goto LABEL_111;
            v624[0] = 0;
            v624[1] = 0;
            CA::Shape::get_bounds((uint64_t)v629, (int *)v624);
            if (v67)
            {
              v79 = (_QWORD *)v67;
              do
              {
                v80 = v79[14];
                if (v80)
                {
                  v668 = 0uLL;
                  CA::Shape::get_bounds(v80 + 144, v668.i32);
                  v81 = (CA::Shape *)v668.i64[1];
                  v82 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v624[1]);
                  v83 = vpmax_u32(v82, v82).u32[0];
                  v84 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v668.u64[1]);
                  v85 = vpmax_u32(v84, v84).u32[0];
                  if ((v83 & 0x80000000) != 0)
                  {
                    if ((v85 & 0x80000000) == 0)
                    {
                      v86 = (CA::Shape *)v668.i64[0];
                      goto LABEL_101;
                    }
                  }
                  else if ((v85 & 0x80000000) == 0)
                  {
                    v86 = (CA::Shape *)vmin_s32((int32x2_t)v624[0], *(int32x2_t *)v668.i8);
                    v81 = (CA::Shape *)vsub_s32(vmax_s32(vadd_s32((int32x2_t)v624[0], (int32x2_t)v624[1]), vadd_s32(*(int32x2_t *)v668.i8, (int32x2_t)v668.u64[1])), (int32x2_t)v86);
LABEL_101:
                    v624[0] = v86;
                    v624[1] = v81;
                  }
                }
                v79 = (_QWORD *)*v79;
              }
              while (v79);
            }
            v87 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v624[1]);
            if ((vpmax_u32(v87, v87).u32[0] & 0x80000000) == 0)
            {
              v88 = *(int32x2_t *)((char *)v69 + 192);
              v89 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v88);
              if ((vpmax_u32(v89, v89).u32[0] & 0x80000000) != 0
                || (v90 = *(int32x2_t *)((char *)v69 + 184),
                    *(int32x2_t *)&v91 = vmax_s32((int32x2_t)v624[0], v90),
                    v92 = vsub_s32(vmin_s32(vadd_s32((int32x2_t)v624[0], (int32x2_t)v624[1]), vadd_s32(v90, v88)), *(int32x2_t *)&v91), v93 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v92), (vpmax_u32(v93, v93).u32[0] & 0x80000000) != 0))
              {
                v624[1] = 0;
              }
              else
              {
                *((int32x2_t *)&v91 + 1) = v92;
                *(_OWORD *)v624 = v91;
              }
            }
            v94 = (*(uint64_t (**)(CA::OGL::Context *, uint64_t, CA::Shape **, uint64_t))(*(_QWORD *)v69 + 656))(v69, 1, v624, 15);
            LOBYTE(v77) = v571;
            if (v94)
            {
              v95 = v94;
              CA::OGL::Context::push_surface((uint64_t)v69, v94, 1u, 512, 0);
              CA::OGL::render_layers((CA::OGL *)v9, v67);
              if (byte_1ECDC6A61)
              {
                v492 = *(_DWORD *)(v95 + 40);
                v493 = *(_DWORD *)(v95 + 44);
                if (v492 <= v493)
                  v494 = *(_DWORD *)(v95 + 44);
                else
                  v494 = *(_DWORD *)(v95 + 40);
                v97.i32[0] = 1073741822;
                v98.i32[0] = v494;
                v495 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v98, v97), 0);
                v496 = *(_QWORD *)(v95 + 32);
                v497.i64[0] = (int)v496;
                v497.i64[1] = SHIDWORD(v496);
                v498 = (int8x16_t)vcvtq_f64_s64(v497);
                v668 = vbslq_s8(v495, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), v498);
                v499 = 1.79769313e308;
                if (v494 <= 1073741822)
                  v500 = (double)v492;
                else
                  v500 = 1.79769313e308;
                if (v494 <= 1073741822)
                  v499 = (double)v493;
                *(double *)v669.i64 = v500;
                *(double *)&v669.i64[1] = v499;
                v624[0] = (CA::Shape *)&v668;
                v624[1] = (CA::Shape *)&CA::identity_transform;
                v625 = 0u;
                v626 = 0u;
                *(double *)v498.i64 = (double)v493;
                CA::OGL::fill_color_rect((uint64_t)v69, (uint64_t)v624, (double *)0x80800080, v96, 0.0, v498);
              }
              CA::OGL::Context::pop_surface(v69);
              v624[0] = 0;
              v624[1] = 0;
              CA::OGL::emit_combine((uint64_t)v69, 1, (_DWORD *)v95, 0, v629, (unsigned int *)v624);
              CA::OGL::Context::release_surface((uint64_t)v69, v95);
            }
            else
            {
LABEL_111:
              CA::OGL::render_layers((CA::OGL *)v9, v67);
            }
            j = v584;
            v99 = v9[1];
            v100 = v573;
            if ((*(_DWORD *)(v99 + 1064) & 0x400) != 0 && BYTE11(xmmword_1ECDC6A70))
            {
              v483 = *(_DWORD *)(v99 + 200);
              v484 = *(_DWORD *)(v99 + 204);
              if (v483 <= v484)
                v485 = *(_DWORD *)(v99 + 204);
              else
                v485 = *(_DWORD *)(v99 + 200);
              v61.i32[0] = 1073741822;
              v62.i32[0] = v485;
              v486 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v62, (int32x4_t)v61), 0);
              v487 = *(_QWORD *)(v99 + 192);
              v488.i64[0] = (int)v487;
              v488.i64[1] = SHIDWORD(v487);
              v490 = (int8x16_t)vcvtq_f64_s64(v488);
              v489 = vbslq_s8(v486, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), v490);
              *(double *)v490.i64 = (double)v483;
              v668 = v489;
              v491 = 1.79769313e308;
              if (v485 <= 1073741822)
                v491 = (double)v484;
              else
                *(double *)v490.i64 = 1.79769313e308;
              v669.i64[0] = v490.i64[0];
              *(double *)&v669.i64[1] = v491;
              v624[0] = (CA::Shape *)&v668;
              v624[1] = (CA::Shape *)&CA::identity_transform;
              v625 = 0u;
              v626 = 0u;
              bounds = CA::OGL::fill_color_rect((uint64_t)v69, (uint64_t)v624, (double *)0x800040, v60, 0.0, v490);
            }
            *((_QWORD *)v69 + 101) = 0;
            *((_WORD *)v69 + 408) &= ~0x800u;
            if (!((v77 ^ 1) & 1 | (*(_DWORD *)(v9[1] + 1064) >> 2) & 1))
            {
              bounds = (*(uint64_t (**)(CA::WindowServer::Display *))(*(_QWORD *)v573 + 584))(v573);
              if ((bounds & 1) == 0)
              {
                bounds = *((_QWORD *)v69 + 22);
                if (bounds)
                  bounds = (*(uint64_t (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint32x2_t *, double *, double *, char, uint64_t), CA::OGL::Context *))(*(_QWORD *)bounds + 88))(bounds, CA::OGL::composite_detached, v69);
              }
            }
            if ((v77 & 1) != 0)
            {
              bounds = (*(uint64_t (**)(CA::WindowServer::Display *))(*(_QWORD *)v573 + 1512))(v573);
              v101 = v9[1];
              if ((bounds & 1) != 0)
                goto LABEL_124;
            }
            else
            {
              v101 = v9[1];
            }
            v102 = *(unsigned int *)(v101 + 1064);
            if ((v102 & 0x8000000) == 0)
            {
              v103 = ((v102 | ((unint64_t)*(unsigned __int16 *)(v101 + 1068) << 32)) >> 2) & 1;
              goto LABEL_125;
            }
LABEL_124:
            LODWORD(v103) = 1;
LABEL_125:
            v104 = *(_QWORD *)(v101 + 48);
            if ((v104 & 1) != 0)
              _ZF = v104 == 1;
            else
              _ZF = *(_DWORD *)(v104 + 4) == 6;
            v106 = _ZF;
            if ((v106 & 1) == 0 && ((v103 ^ 1) & 1) == 0)
            {
              *(_BYTE *)(*((_QWORD *)v69 + 2) + 16) = 69;
              bounds = (*(uint64_t (**)(CA::OGL::Context *))(*(_QWORD *)v69 + 984))(v69);
              if ((_DWORD)bounds)
              {
                v621 = 0uLL;
                *(_QWORD *)&v657 = 0;
                v61.i32[0] = 1073741822;
                v610 = (int32x4_t)v61;
                v589 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
                v599 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
                v656 = (int8x16_t)v104;
                while (1)
                {
                  bounds = CA::ShapeIterator::iterate(v656.i64, v621.i32);
                  if (!(_DWORD)bounds)
                    break;
                  v107 = (int32x2_t)v621.u64[1];
                  v108 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v621.u64[1]);
                  *(uint32x2_t *)v62.i8 = vpmax_u32(v108, v108);
                  if ((v62.i32[0] & 0x80000000) == 0)
                  {
                    v62.i64[0] = *((_QWORD *)v69 + 24);
                    v109 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v62.i8);
                    if ((vpmax_u32(v109, v109).u32[0] & 0x80000000) != 0
                      || (v110 = *(int32x2_t *)((char *)v69 + 184),
                          v111 = vadd_s32(v110, *(int32x2_t *)v62.i8),
                          *(int32x2_t *)v62.i8 = vmax_s32(*(int32x2_t *)v621.i8, v110),
                          v107 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v621.i8, (int32x2_t)v621.u64[1]), v111), *(int32x2_t *)v62.i8), v112 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v107), (vpmax_u32(v112, v112).u32[0] & 0x80000000) != 0))
                    {
                      v107 = 0;
                      v621.i64[1] = 0;
                    }
                    else
                    {
                      v62.u64[1] = (unint64_t)v107;
                      v621 = v62;
                    }
                  }
                  v113 = v107.i32[0];
                  if (v107.i32[0] <= v107.i32[1])
                    v113 = v107.i32[1];
                  v62.i32[0] = v113;
                  v114.i64[0] = v621.i32[0];
                  v114.i64[1] = v621.i32[1];
                  v115 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v62, v610), 0), v599, (int8x16_t)vcvtq_f64_s64(v114));
                  v114.i64[0] = v107.i32[0];
                  v114.i64[1] = v107.i32[1];
                  v116 = (int8x16_t)vcvtq_f64_s64(v114);
                  v117 = vdup_n_s32(v113 > 1073741822);
                  v114.i64[0] = v117.u32[0];
                  v114.i64[1] = v117.u32[1];
                  v668 = v115;
                  v669 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v114, 0x3FuLL)), v589, v116);
                  v624[0] = (CA::Shape *)&v668;
                  v624[1] = (CA::Shape *)&CA::identity_transform;
                  v625 = 0u;
                  v626 = 0u;
                  CA::OGL::emit_one_part_rect(v69, (uint64_t)v624, 0, 0, 0);
                }
                if (HIBYTE(xmmword_1ECDC6A70))
                {
                  v664 = 0;
                  v663 = (int32x4_t)v104;
                  v61.i32[0] = 1073741822;
                  v607 = (int32x4_t)v61;
                  v619 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
                  v596 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
                  while (1)
                  {
                    bounds = CA::ShapeIterator::iterate(v663.i64, v621.i32);
                    if (!(_DWORD)bounds)
                      break;
                    v501 = (int32x2_t)v621.u64[1];
                    v502 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v621.u64[1]);
                    *(uint32x2_t *)v62.i8 = vpmax_u32(v502, v502);
                    if ((v62.i32[0] & 0x80000000) == 0)
                    {
                      v62.i64[0] = *((_QWORD *)v69 + 24);
                      v503 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v62.i8);
                      if ((vpmax_u32(v503, v503).u32[0] & 0x80000000) != 0
                        || (v504 = *(int32x2_t *)((char *)v69 + 184),
                            v505 = vadd_s32(v504, *(int32x2_t *)v62.i8),
                            *(int32x2_t *)v62.i8 = vmax_s32(*(int32x2_t *)v621.i8, v504),
                            v501 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v621.i8, (int32x2_t)v621.u64[1]), v505), *(int32x2_t *)v62.i8), v506 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v501), (vpmax_u32(v506, v506).u32[0] & 0x80000000) != 0))
                      {
                        v501 = 0;
                        v621.i64[1] = 0;
                      }
                      else
                      {
                        v62.u64[1] = (unint64_t)v501;
                        v621 = v62;
                      }
                    }
                    v507 = v501.i32[0];
                    if (v501.i32[0] <= v501.i32[1])
                      v507 = v501.i32[1];
                    v62.i32[0] = v507;
                    v508.i64[0] = v621.i32[0];
                    v508.i64[1] = v621.i32[1];
                    v509 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v62, v607), 0), v619, (int8x16_t)vcvtq_f64_s64(v508));
                    v508.i64[0] = v501.i32[0];
                    v508.i64[1] = v501.i32[1];
                    v510 = (int8x16_t)vcvtq_f64_s64(v508);
                    v511 = vdup_n_s32(v507 > 1073741822);
                    v508.i64[0] = v511.u32[0];
                    v508.i64[1] = v511.u32[1];
                    v668 = v509;
                    v669 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v508, 0x3FuLL)), v596, v510);
                    v624[0] = (CA::Shape *)&v668;
                    v624[1] = (CA::Shape *)&CA::identity_transform;
                    v625 = 0u;
                    v626 = 0u;
                    CA::OGL::fill_color_rect((uint64_t)v69, (uint64_t)v624, (double *)0x800040, v60, 0.0, v509);
                  }
                }
                j = v584;
                v100 = v573;
              }
            }
            if (byte_1ECDC6A81 | byte_1ECDC6A82)
            {
              bounds = (*(uint64_t (**)(CA::OGL::Context *, uint64_t))(*(_QWORD *)v69 + 184))(v69, 18);
              if ((_DWORD)bounds)
              {
                *(_BYTE *)(*((_QWORD *)v69 + 2) + 481) &= ~1u;
                *(_BYTE *)(*((_QWORD *)v69 + 2) + 16) = 70;
                bounds = (*(uint64_t (**)(CA::OGL::Context *))(*(_QWORD *)v69 + 984))(v69);
                if ((_DWORD)bounds)
                {
                  v417 = (*(float (**)(CA::OGL::Context *))(*(_QWORD *)v69 + 1040))(v69);
                  v418 = 1.0 / *((float *)v69 + 38);
                  v656.i32[0] = powf(1.0 / v417, v418);
                  v656.i32[1] = powf(v417, v418);
                  (*(void (**)(CA::OGL::Context *, _QWORD, uint64_t, uint64_t, int8x16_t *))(*(_QWORD *)v69 + 1000))(v69, 0, 2, 1, &v656);
                  v419 = -1.0;
                  if (byte_1ECDC6A82)
                    v419 = 1.0;
                  *(float *)v663.i32 = v419;
                  (*(void (**)(CA::OGL::Context *, uint64_t, uint64_t, uint64_t, int32x4_t *))(*(_QWORD *)v69 + 1000))(v69, 1, 1, 1, &v663);
                  v422 = *(_OWORD *)((char *)v69 + 184);
                  v423 = *((_QWORD *)v69 + 24);
                  if (SDWORD2(v422) <= SHIDWORD(v422))
                    v423 = HIDWORD(*(_OWORD *)((char *)v69 + 184));
                  v420.i32[0] = 1073741822;
                  v421.i32[0] = v423;
                  v424.i64[0] = (int)v422;
                  v424.i64[1] = SDWORD1(v422);
                  v425 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v421, v420), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v424));
                  v424.i64[0] = SDWORD2(v422);
                  v424.i64[1] = SHIDWORD(v422);
                  v426 = (int8x16_t)vcvtq_f64_s64(v424);
                  v427 = vdup_n_s32(v423 > 1073741822);
                  v424.i64[0] = v427.u32[0];
                  v424.i64[1] = v427.u32[1];
                  v668 = v425;
                  v669 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v424, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v426);
                  v624[0] = (CA::Shape *)&v668;
                  v624[1] = (CA::Shape *)&CA::identity_transform;
                  v625 = 0u;
                  v626 = 0u;
                  bounds = (uint64_t)CA::OGL::emit_one_part_rect(v69, (uint64_t)v624, 0, 0, 0);
                }
                *(_BYTE *)(*((_QWORD *)v69 + 2) + 16) = 0;
                j = v584;
                v55 = v9 + 3;
                v100 = v573;
              }
            }
            v118 = v571;
            if (byte_1ECDC6A80)
            {
              bounds = (*(uint64_t (**)(CA::OGL::Context *, uint64_t))(*(_QWORD *)v69 + 184))(v69, 18);
              if ((_DWORD)bounds)
              {
                *(_BYTE *)(*((_QWORD *)v69 + 2) + 481) &= ~1u;
                *(_BYTE *)(*((_QWORD *)v69 + 2) + 16) = 71;
                bounds = (*(uint64_t (**)(CA::OGL::Context *))(*(_QWORD *)v69 + 984))(v69);
                if ((_DWORD)bounds)
                {
                  v455 = (*(float (**)(CA::OGL::Context *))(*(_QWORD *)v69 + 1040))(v69);
                  v456 = 1.0 / *((float *)v69 + 38);
                  v656.i32[0] = powf(1.0 / v455, v456);
                  v656.i32[1] = powf(v455, v456);
                  (*(void (**)(CA::OGL::Context *, _QWORD, uint64_t, uint64_t, int8x16_t *))(*(_QWORD *)v69 + 1000))(v69, 0, 2, 1, &v656);
                  v459 = *(_OWORD *)((char *)v69 + 184);
                  v460 = *((_QWORD *)v69 + 24);
                  if (SDWORD2(v459) <= SHIDWORD(v459))
                    v460 = HIDWORD(*(_OWORD *)((char *)v69 + 184));
                  v457.i32[0] = 1073741822;
                  v458.i32[0] = v460;
                  v461.i64[0] = (int)v459;
                  v461.i64[1] = SDWORD1(v459);
                  v462 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v458, v457), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v461));
                  v461.i64[0] = SDWORD2(v459);
                  v461.i64[1] = SHIDWORD(v459);
                  v463 = (int8x16_t)vcvtq_f64_s64(v461);
                  v464 = vdup_n_s32(v460 > 1073741822);
                  v461.i64[0] = v464.u32[0];
                  v461.i64[1] = v464.u32[1];
                  v668 = v462;
                  v669 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v461, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v463);
                  v624[0] = (CA::Shape *)&v668;
                  v624[1] = (CA::Shape *)&CA::identity_transform;
                  v625 = 0u;
                  v626 = 0u;
                  bounds = (uint64_t)CA::OGL::emit_one_part_rect(v69, (uint64_t)v624, 0, 0, 0);
                }
                *(_BYTE *)(*((_QWORD *)v69 + 2) + 16) = 0;
                j = v584;
                v100 = v573;
                v118 = v571;
              }
            }
            if (v118)
            {
              if ((*((_WORD *)v69 + 408) & 2) == 0)
              {
                v119 = (*(float (**)(CA::WindowServer::Display *))(*(_QWORD *)v100 + 976))(v100);
                if (v119 != 0.0)
                {
                  v120 = v119;
                  if (initialized[0] != -1)
                    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
                  *(float *)v656.i32 = *((float *)&xmmword_1ECDC69B8 + 1) * v120;
                  __asm { FMOV            V0.2S, #1.0 }
                  *(uint64_t *)((char *)v656.i64 + 4) = _D0;
                  v125 = (*(float (**)(CA::OGL::Context *))(*(_QWORD *)v69 + 1040))(v69);
                  if (v125 != 0.0 && v125 != 1.0)
                  {
                    v127 = v125;
                    v128 = 1.0 / *((float *)v69 + 38);
                    v656.i32[1] = powf(1.0 / v125, v128);
                    v656.i32[2] = powf(v127, v128);
                  }
                  *(_BYTE *)(*((_QWORD *)v69 + 2) + 481) &= ~1u;
                  *(_BYTE *)(*((_QWORD *)v69 + 2) + 16) = 77;
                  (*(void (**)(CA::OGL::Context *, _QWORD))(*(_QWORD *)v69 + 512))(v69, 0);
                  (*(void (**)(CA::OGL::Context *, _QWORD, uint64_t, uint64_t, int8x16_t *))(*(_QWORD *)v69 + 1000))(v69, 0, 3, 1, &v656);
                  v131 = *((_DWORD *)v69 + 48);
                  v132 = *((_DWORD *)v69 + 49);
                  if (v131 <= v132)
                    v133 = *((_DWORD *)v69 + 49);
                  else
                    v133 = *((_DWORD *)v69 + 48);
                  v129.i32[0] = 1073741822;
                  v130.i32[0] = v133;
                  v134 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v130, v129), 0);
                  v135 = *((_QWORD *)v69 + 23);
                  v136.i64[0] = (int)v135;
                  v136.i64[1] = SHIDWORD(v135);
                  v137 = (double)v131;
                  v668 = vbslq_s8(v134, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v136));
                  v138 = 1.79769313e308;
                  if (v133 <= 1073741822)
                    v138 = (double)v132;
                  else
                    v137 = 1.79769313e308;
                  *(double *)v669.i64 = v137;
                  *(double *)&v669.i64[1] = v138;
                  v624[0] = (CA::Shape *)&v668;
                  v624[1] = (CA::Shape *)&CA::identity_transform;
                  v625 = 0u;
                  v626 = 0u;
                  CA::OGL::emit_one_part_rect(v69, (uint64_t)v624, 0, 0, 0);
                  (*(void (**)(CA::OGL::Context *, _QWORD, _QWORD))(*(_QWORD *)v69 + 520))(v69, 0, 0);
                  *(_BYTE *)(*((_QWORD *)v69 + 2) + 16) = 0;
                }
              }
            }
            else if ((*((_BYTE *)v69 + 417) & 1) == 0)
            {
LABEL_231:
              if (v570)
                CA::OGL::Context::release_surface((uint64_t)v69, (uint64_t)v570);
              v210 = v118 ^ 1;
              if (((v210 | ((*((_WORD *)v69 + 408) & 2) >> 1)) & 1) == 0)
              {
                bounds = (*(uint64_t (**)(CA::WindowServer::Display *))(*(_QWORD *)v100 + 1544))(v100);
                if ((_DWORD)bounds)
                {
                  (*(void (**)(CA::Shape **__return_ptr, CA::WindowServer::Display *))(*(_QWORD *)v100 + 656))(v624, v100);
                  v211 = vceqzq_f64(v625);
                  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v211, 1), (int8x16_t)v211).u64[0] & 0x8000000000000000) != 0
                    || (v212 = vorrq_s8((int8x16_t)vcltzq_f64(v625), (int8x16_t)vcgezq_f64(v625)),
                        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v212), 1), v212).u64[0] & 0x8000000000000000) != 0))
                  {
                    v663 = 0uLL;
                  }
                  else
                  {
                    v213 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(*(float64x2_t *)v624, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
                    v663 = vuzp1q_s32(v213, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(*(float64x2_t *)v624, v625), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v213));
                  }
                  v214 = CA::Shape::intersect(*(CA::Shape **)(v9[1] + 32), (const CA::Bounds *)&v663);
                  v621 = 0uLL;
                  *(_QWORD *)&v657 = 0;
                  v592 = (CA::Shape *)v214;
                  v656 = (int8x16_t)(unint64_t)v214;
                  v216 = *((_QWORD *)v69 + 2);
                  v217 = *(_BYTE *)(v216 + 481);
                  if (byte_1ECDC6AC4)
                  {
                    *(_BYTE *)(v216 + 481) = v217 | 1;
                    *(_BYTE *)(*((_QWORD *)v69 + 2) + 16) = 0;
                    v215.i32[1] = 966393856;
                    *(_QWORD *)(*((_QWORD *)v69 + 2) + 8) = 0x399A00000000399ALL;
                  }
                  else
                  {
                    *(_BYTE *)(v216 + 481) = v217 & 0xFE;
                    *(_BYTE *)(*((_QWORD *)v69 + 2) + 16) = 78;
                  }
                  v215.i32[0] = 1073741822;
                  v613 = v215;
                  v602 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
                  while (CA::ShapeIterator::iterate(v656.i64, v621.i32))
                  {
                    if (v621.i32[2] <= v621.i32[3])
                      v219 = v621.i32[3];
                    else
                      v219 = v621.i32[2];
                    v218.i32[0] = v219;
                    v220.i64[0] = v621.i32[0];
                    v220.i64[1] = v621.i32[1];
                    v221 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v218, v613), 0), v602, (int8x16_t)vcvtq_f64_s64(v220));
                    v222 = (double)v621.i32[2];
                    if (v219 > 1073741822)
                      v222 = 1.79769313e308;
                    v668 = v221;
                    if (v219 <= 1073741822)
                      v223 = (double)v621.i32[3];
                    else
                      v223 = 1.79769313e308;
                    *(double *)v669.i64 = v222;
                    *(double *)&v669.i64[1] = v223;
                    v624[0] = (CA::Shape *)&v668;
                    v624[1] = (CA::Shape *)&CA::identity_transform;
                    v625 = 0u;
                    v626 = 0u;
                    CA::OGL::emit_one_part_rect(v69, (uint64_t)v624, 0, 0, 0);
                  }
                  CA::Shape::unref(v592);
                  *(_BYTE *)(*((_QWORD *)v69 + 2) + 16) = 0;
                  j = v584;
                  v100 = v573;
                }
              }
              if (((v210 | ((*((_WORD *)v69 + 408) & 2) >> 1)) & 1) == 0
                && (*((_WORD *)v100 + 328) & 0x1C00) == 0x800)
              {
                bounds = (*(uint64_t (**)(CA::WindowServer::Display *))(*(_QWORD *)v100 + 1472))(v100);
                if ((_DWORD)bounds)
                {
                  bounds = (*(uint64_t (**)(CA::WindowServer::Display *))(*(_QWORD *)v100 + 1456))(v100);
                  v61.i32[0] = *(_DWORD *)bounds;
                  if (*(float *)bounds == 1.0)
                  {
                    v260 = 1;
                    while (v260 != 16)
                    {
                      v261 = v260;
                      v61.i32[0] = *(_DWORD *)(bounds + 4 * v260);
                      v262 = CA::Mat4Impl::mat4_identity_float[v260++];
                      if (v61.f32[0] != v262)
                      {
                        if ((unint64_t)(v261 - 1) <= 0xE)
                          goto LABEL_257;
                        break;
                      }
                    }
                  }
                  else
                  {
LABEL_257:
                    *(_BYTE *)(*((_QWORD *)v69 + 2) + 481) &= ~1u;
                    *(_BYTE *)(*((_QWORD *)v69 + 2) + 17) = 38;
                    *(_BYTE *)(*((_QWORD *)v69 + 2) + 16) = 18;
                    v224 = (*(uint64_t (**)(CA::WindowServer::Display *, float32x4_t))(*(_QWORD *)v100 + 1456))(v100, v61);
                    v225 = *(int8x16_t *)v224;
                    v226 = *(int8x16_t *)(v224 + 16);
                    v227 = *(_OWORD *)(v224 + 32);
                    v228 = vzip1_s32(*(int32x2_t *)v224, *(int32x2_t *)v226.i8);
                    v229 = vzip2_s32(*(int32x2_t *)v226.i8, *(int32x2_t *)&v227);
                    LODWORD(v670) = *(_QWORD *)(v224 + 40);
                    DWORD1(v227) = v225.i32[1];
                    *(int32x2_t *)v668.i8 = v228;
                    v668.i64[1] = v227;
                    *(int32x2_t *)v669.i8 = v229;
                    v669.u64[1] = (unint64_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v225, v225, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v226, v226, 8uLL));
                    (*(void (**)(CA::OGL::Context *, _QWORD, uint64_t, uint64_t, int8x16_t *))(*(_QWORD *)v69 + 1000))(v69, 0, 3, 3, &v668);
                    v232 = *((_DWORD *)v69 + 48);
                    v233 = *((_DWORD *)v69 + 49);
                    if (v232 <= v233)
                      v234 = *((_DWORD *)v69 + 49);
                    else
                      v234 = *((_DWORD *)v69 + 48);
                    v230.i32[0] = 1073741822;
                    v231.i32[0] = v234;
                    v235 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v231, v230), 0);
                    v236 = *((_QWORD *)v69 + 23);
                    v237.i64[0] = (int)v236;
                    v237.i64[1] = SHIDWORD(v236);
                    v238 = (double)v232;
                    v656 = vbslq_s8(v235, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v237));
                    v239 = 1.79769313e308;
                    if (v234 <= 1073741822)
                      v239 = (double)v233;
                    else
                      v238 = 1.79769313e308;
                    *(double *)&v657 = v238;
                    *((double *)&v657 + 1) = v239;
                    v624[0] = (CA::Shape *)&v656;
                    v624[1] = (CA::Shape *)&CA::identity_transform;
                    v625 = 0u;
                    v626 = 0u;
                    CA::OGL::emit_one_part_rect(v69, (uint64_t)v624, 0, 0, 0);
                    *(_BYTE *)(*((_QWORD *)v69 + 2) + 16) = 0;
                    bounds = (*(uint64_t (**)(CA::WindowServer::Display *, uint64_t))(*(_QWORD *)v100 + 1464))(v100, 1);
                  }
                }
              }
              if (v571)
              {
                v240 = v9[1];
                if (*(_QWORD *)(v240 + 1032))
                {
                  bounds = *((_QWORD *)v69 + 22);
                  if (bounds && (bounds = (*(uint64_t (**)(uint64_t))(*(_QWORD *)bounds + 16))(bounds)) != 0)
                  {
                    bounds = (*(uint64_t (**)(uint64_t))(*(_QWORD *)bounds + 80))(bounds);
                    v241 = bounds;
                  }
                  else
                  {
                    v241 = 0;
                  }
                  if (BYTE10(xmmword_1ECDC6AD0))
                    goto LABEL_278;
                  if (CADeviceSupportsHWGainMap::once != -1)
                    dispatch_once(&CADeviceSupportsHWGainMap::once, &__block_literal_global_57);
                  v242 = CADeviceSupportsHWGainMap::supports_gain_map ? v241 : 1;
                  if ((v242 & 1) != 0 || (*(_DWORD *)(v240 + 1064) & 4) != 0)
                  {
LABEL_278:
                    v656 = 0uLL;
                    bounds = CA::Shape::get_bounds(*(_QWORD *)(*((_QWORD *)v69 + 29) + 8), v656.i32);
                    v244 = (int32x2_t *)*((_QWORD *)v69 + 31);
                    if (v244)
                      v245 = v244 + 4;
                    else
                      v245 = (int32x2_t *)((char *)v69 + 184);
                    v61.i32[1] = v656.i32[3];
                    v246 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v656.u64[1]);
                    *(uint32x2_t *)v62.i8 = vpmax_u32(v246, v246);
                    if ((v62.i32[0] & 0x80000000) == 0)
                    {
                      *(int32x2_t *)v62.i8 = v245[1];
                      v247 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v62.i8);
                      if ((vpmax_u32(v247, v247).u32[0] & 0x80000000) == 0)
                      {
                        *(int32x2_t *)v248.i8 = vmax_s32(*(int32x2_t *)v656.i8, *v245);
                        *(int32x2_t *)v61.f32 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v656.i8, (int32x2_t)v656.u64[1]), vadd_s32(*v245, *(int32x2_t *)v62.i8)), *(int32x2_t *)v248.i8);
                        v249 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v61.f32);
                        *(uint32x2_t *)v62.i8 = vpmax_u32(v249, v249);
                        if ((v62.i32[0] & 0x80000000) == 0)
                        {
                          v248.i64[1] = v61.i64[0];
                          v656 = v248;
                          v250 = *(_QWORD **)(v240 + 1032);
                          *(int8x16_t *)v593 = v248;
                          if (v250)
                          {
                            v603 = 0uLL;
                            v614 = 0uLL;
                            do
                            {
                              v251 = v250[1];
                              v252 = *(float64x2_t *)(v251 + 80);
                              *(_OWORD *)v624 = *(_OWORD *)(v251 + 64);
                              v625 = v252;
                              CA::Rect::apply_transform((int8x16_t *)v624, (const CA::Transform *)(v250 + 2), v243);
                              v253 = vclezq_f64((float64x2_t)v614);
                              v254 = vclezq_f64(v625);
                              v255 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v254, v253), (int8x16_t)vzip2q_s64(v254, v253))));
                              if ((v255.i8[4] & 1) != 0)
                              {
                                if ((v255.i8[0] & 1) != 0)
                                  v256 = -1;
                                else
                                  v256 = 0;
                                v257 = (int8x16_t)vdupq_n_s64(v256);
                                v603 = vbslq_s8(v257, v603, *(int8x16_t *)v624);
                                v614 = vbslq_s8(v257, v614, (int8x16_t)v625);
                              }
                              else if ((v255.i8[0] & 1) == 0)
                              {
                                v258 = vminnmq_f64((float64x2_t)v603, *(float64x2_t *)v624);
                                v259 = vsubq_f64(vmaxnmq_f64(vaddq_f64((float64x2_t)v603, (float64x2_t)v614), vaddq_f64(*(float64x2_t *)v624, v625)), v258);
                                v603 = (int8x16_t)v258;
                                v614 = (int8x16_t)v259;
                              }
                              v250 = (_QWORD *)*v250;
                            }
                            while (v250);
                          }
                          else
                          {
                            v603 = 0uLL;
                            v614 = 0uLL;
                          }
                          v263 = vceqzq_f64((float64x2_t)v614);
                          if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v263, 1), (int8x16_t)v263).u64[0] & 0x8000000000000000) != 0
                            || (v264 = vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v614), (int8x16_t)vcgezq_f64((float64x2_t)v614)), (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v264), 1), v264).u64[0] & 0x8000000000000000) != 0))
                          {
                            v267 = 0;
                            v266 = 0;
                            v663 = 0uLL;
                            v61 = 0uLL;
                            v62 = 0uLL;
                          }
                          else
                          {
                            v265 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64((float64x2_t)v603, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
                            v61 = (float32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64((float64x2_t)v603, (float64x2_t)v614), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v265);
                            v62 = vuzp1q_s32(v265, (int32x4_t)v61);
                            v663 = v62;
                            v266 = v62.i32[2];
                            v267 = v61.i32[2];
                            v61.i64[0] = v62.i64[1];
                            *(int32x2_t *)v62.i8 = vmovn_s64((int64x2_t)v265);
                            v62.i32[0] = v265.i32[0];
                          }
                          if (v266 <= v267)
                            v268 = v267;
                          else
                            v268 = v266;
                          if (v266 >= v267)
                            v269 = v267;
                          else
                            v269 = v266;
                          if (v268 <= 1073741822 && v269 >= 1)
                          {
                            *(int32x2_t *)v663.i8 = vadd_s32(*(int32x2_t *)v62.i8, (int32x2_t)0x100000001);
                            v663.i32[2] = v266 + 4;
                            v663.i32[3] = v267 + 4;
                            if (v266 + 4 < 1 || v267 + 4 < 1)
                            {
                              v267 = 0;
                              v266 = 0;
                              v61 = 0uLL;
                              v663.i64[1] = 0;
                            }
                            else
                            {
                              v61.i64[0] = v663.i64[1];
                              v266 = v663.i32[2];
                              v267 = v663.i32[3];
                            }
                          }
                          v62.i32[1] = 1;
                          v273 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v61.f32);
                          if ((vpmax_u32(v273, v273).u32[0] & 0x80000000) == 0)
                          {
                            v274 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v593[1]);
                            *(uint32x2_t *)v62.i8 = vpmax_u32(v274, v274);
                            if (v62.i32[0] < 0
                              || (v275 = vadd_s32(*(int32x2_t *)v663.i8, *(int32x2_t *)v61.f32),
                                  *(int32x2_t *)v61.f32 = vmax_s32(*(int32x2_t *)v663.i8, (int32x2_t)v593[0]),
                                  *(int32x2_t *)v62.i8 = vsub_s32(vmin_s32(v275, vadd_s32((int32x2_t)v593[0], (int32x2_t)v593[1])), *(int32x2_t *)v61.f32), v276 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v62.i8), (vpmax_u32(v276, v276).u32[0] & 0x80000000) != 0))
                            {
                              v267 = 0;
                              v266 = 0;
                              v663.i64[1] = 0;
                            }
                            else
                            {
                              v61.i64[1] = v62.i64[0];
                              v663 = (int32x4_t)v61;
                              v266 = v62.i32[0];
                              v267 = v62.i32[1];
                            }
                          }
                          if (v266 >= v267)
                            v266 = v267;
                          if (v266 >= 1)
                          {
                            bounds = (*(uint64_t (**)(CA::OGL::Context *, uint64_t, int32x4_t *, uint64_t))(*(_QWORD *)v69 + 656))(v69, 1, &v663, 2063);
                            if (bounds)
                            {
                              v615 = (_DWORD *)bounds;
                              CA::OGL::Context::push_surface((uint64_t)v69, bounds, 1u, 256, 0);
                              v278 = *((_QWORD *)v69 + 2);
                              *(_BYTE *)(v278 + 480) = 18;
                              *(_BYTE *)(v278 + 481) |= 1u;
                              *(_QWORD *)(*((_QWORD *)v69 + 2) + 8) = 0x3C00000000000000;
                              v279 = *((_QWORD *)v69 + 22);
                              if (v279)
                              {
                                v280 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v279 + 16))(v279);
                                if (v280)
                                {
                                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v280 + 864))(v280))
                                    *(_QWORD *)(*((_QWORD *)v69 + 2) + 8) = 0x3C003C003C003C00;
                                }
                              }
                              v281 = *(double **)(v240 + 1032);
                              if (v281)
                              {
                                do
                                {
                                  if (((_BYTE)v281[20] & 0x10) != 0)
                                    scale = CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)(v281 + 2), 0, 0, v277);
                                  else
                                    scale = v281[18];
                                  v668 = 0u;
                                  v669 = 0u;
                                  v283 = (int8x16_t *)*((_QWORD *)v281 + 1);
                                  v284 = v283[5];
                                  v668 = v283[4];
                                  v669 = v284;
                                  v285 = v283[8].i64[0];
                                  v286 = 0.0;
                                  if (v285)
                                    v286 = *(float *)(v285 + 228);
                                  v287 = 0.25 / scale;
                                  v288 = v286;
                                  CA::BoundsImpl::inset((double *)v668.i64, -(0.25 / scale), -(0.25 / scale));
                                  v624[0] = (CA::Shape *)&v668;
                                  v624[1] = (CA::Shape *)(v281 + 2);
                                  v625 = (float64x2_t)0xFF0000003FuLL;
                                  v626 = 0uLL;
                                  CA::OGL::fill_round_rect((uint64_t)v69, (float64x2_t **)v624, (double *)0xF, (double *)(*(_DWORD *)(*((_QWORD *)v281 + 1) + 40) & 3), v287 + v288, v287 + v288);
                                  v281 = *(double **)v281;
                                }
                                while (v281);
                                v289 = *(double **)(v240 + 1032);
                                *(_BYTE *)(*((_QWORD *)v69 + 2) + 480) = 9;
                                for (j = v584; v289; v289 = *(double **)v289)
                                {
                                  if (!*((_BYTE *)v289 + 168))
                                  {
                                    v668 = 0u;
                                    v669 = 0u;
                                    v290 = (int8x16_t *)*((_QWORD *)v289 + 1);
                                    v291 = v290[5];
                                    v668 = v290[4];
                                    v669 = v291;
                                    v292 = v290[8].i64[0];
                                    if (v292)
                                      v293 = *(float *)(v292 + 228);
                                    else
                                      v293 = 0.0;
                                    if (((_BYTE)v289[20] & 0x10) != 0)
                                      v294 = CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)(v289 + 2), 0, 0, v277);
                                    else
                                      v294 = v289[18];
                                    v295 = v293;
                                    v296 = 4.0 / v294;
                                    CA::BoundsImpl::inset((double *)v668.i64, v296, v296);
                                    v297 = v295 - v296;
                                    if (v295 - v296 < 0.0)
                                      v297 = 0.0;
                                    v624[0] = (CA::Shape *)&v668;
                                    v624[1] = (CA::Shape *)(v289 + 2);
                                    v625 = (float64x2_t)0xFF0000003FuLL;
                                    v626 = 0uLL;
                                    CA::OGL::fill_round_rect((uint64_t)v69, (float64x2_t **)v624, (double *)0xF, (double *)(*(_DWORD *)(*((_QWORD *)v289 + 1) + 40) & 3), v297, v297);
                                    j = v584;
                                  }
                                }
                              }
                              else
                              {
                                *(_BYTE *)(*((_QWORD *)v69 + 2) + 480) = 9;
                              }
                              CA::OGL::Context::pop_surface(v69);
                              *(_BYTE *)(*((_QWORD *)v69 + 2) + 480) = 3;
                              v298 = *(CA::Shape **)(*((_QWORD *)v69 + 29) + 8);
                              v624[0] = 0;
                              v624[1] = 0;
                              CA::OGL::emit_combine((uint64_t)v69, 1, v615, 0, v298, (unsigned int *)v624);
                              *(_BYTE *)(*((_QWORD *)v69 + 2) + 481) &= ~1u;
                              CA::OGL::Context::release_surface((uint64_t)v69, (uint64_t)v615);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              goto LABEL_359;
            }
            bounds = (*(uint64_t (**)(CA::OGL::Context *, uint64_t))(*(_QWORD *)v69 + 184))(v69, 18);
            if ((_DWORD)bounds && *((float *)v69 + 38) != 1.0)
            {
              v61.f32[0] = (*(float (**)(CA::OGL::Context *))(*(_QWORD *)v69 + 1040))(v69);
              v139 = v61.f32[0];
              if (v118)
              {
                v140 = 1.0 / *(float *)(v9[1] + 372);
                bounds = (*(uint64_t (**)(CA::WindowServer::Display *))(*(_QWORD *)v573 + 1528))(v573);
                v141 = bounds;
              }
              else
              {
                v141 = 0;
                v140 = v61.f32[0];
              }
              v142 = v140 == 1.0 ? 1 : v141;
              if (v139 != 1.0 || (v142 & 1) == 0)
              {
                *(_BYTE *)(*((_QWORD *)v69 + 2) + 481) &= ~1u;
                *(_BYTE *)(*((_QWORD *)v69 + 2) + 481) |= 2u;
                v143 = *((_QWORD *)v69 + 2);
                *(_DWORD *)(v143 + 352) = 1065353216;
                v144 = powf(v139, -1.0 / *((float *)v69 + 38));
                if (v141)
                  v145 = v139;
                else
                  v145 = v140;
                v656.i64[0] = __PAIR64__(LODWORD(v145), LODWORD(v144));
                *(_BYTE *)(v143 + 16) = 72;
                v118 = v571;
                (*(void (**)(CA::OGL::Context *, _QWORD, uint64_t, uint64_t, int8x16_t *))(*(_QWORD *)v69
                                                                                                  + 1000))(v69, 0, 2, 1, &v656);
                v148 = *((_DWORD *)v69 + 48);
                v149 = *((_DWORD *)v69 + 49);
                if (v148 <= v149)
                  v150 = *((_DWORD *)v69 + 49);
                else
                  v150 = *((_DWORD *)v69 + 48);
                v146.i32[0] = 1073741822;
                v147.i32[0] = v150;
                v151 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v147, v146), 0);
                v152 = *((_QWORD *)v69 + 23);
                v153.i64[0] = (int)v152;
                v153.i64[1] = SHIDWORD(v152);
                v154 = (double)v148;
                v668 = vbslq_s8(v151, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v153));
                v155 = 1.79769313e308;
                if (v150 <= 1073741822)
                  v155 = (double)v149;
                else
                  v154 = 1.79769313e308;
                *(double *)v669.i64 = v154;
                *(double *)&v669.i64[1] = v155;
                v624[0] = (CA::Shape *)&v668;
                v624[1] = (CA::Shape *)&CA::identity_transform;
                v625 = 0u;
                v626 = 0u;
                bounds = (uint64_t)CA::OGL::emit_one_part_rect(v69, (uint64_t)v624, 0, 0, 0);
                *(_BYTE *)(*((_QWORD *)v69 + 2) + 481) &= ~2u;
                *(_BYTE *)(*((_QWORD *)v69 + 2) + 16) = 0;
              }
            }
            v100 = v573;
            if (v118)
            {
              v156 = (*(uint64_t (**)(CA::WindowServer::Display *, uint64_t))(*(_QWORD *)v573 + 480))(v573, 1);
              v626 = 0u;
              v627 = 0u;
              *(_OWORD *)v624 = 0u;
              v625 = 0u;
              (*(void (**)(CA::Shape **__return_ptr, CA::WindowServer::Display *))(*(_QWORD *)v573 + 1488))(v624, v573);
              v668 = (int8x16_t)xmmword_18474E070;
              v669 = (int8x16_t)xmmword_18474E080;
              v670 = xmmword_18474E090;
              v671 = 0;
              v672 = 0;
              v61 = CA::Mat4Impl::mat4_concat((float32x4_t *)&v668, (float *)v668.i32, (const float *)v624, v157);
              LODWORD(v158) = 0;
              v663.i64[0] = __PAIR64__(v669.u32[0], v668.u32[0]);
              v663.i64[1] = __PAIR64__(v668.u32[1], v670);
              v664 = __PAIR64__(DWORD1(v670), v669.u32[1]);
              v665 = v668.i32[2];
              v666 = v669.i32[2];
              v667 = DWORD2(v670);
              if (v570)
              {
                if (v156)
                {
                  bounds = (*(uint64_t (**)(CA::OGL::Context *, uint64_t, uint64_t))(*(_QWORD *)v69 + 928))(v69, v156, 1);
                  v158 = bounds;
                  if (bounds)
                  {
                    v159 = (*(uint64_t (**)(CA::OGL::Context *, uint64_t, uint64_t))(*(_QWORD *)v69 + 680))(v69, bounds, 1);
                    if (v159)
                      v160 = 75;
                    else
                      v160 = 76;
                    v566 = v159;
                    if (v159)
                      v161 = v159;
                    else
                      v161 = v158;
                    *(_BYTE *)(*((_QWORD *)v69 + 2) + 16) = v160;
                    CA::OGL::Context::bind_surface((uint64_t)v69, v161, 0, 0, 0, 0.0);
                    CA::OGL::Context::bind_surface((uint64_t)v69, (uint64_t)v570, 1u, 1u, 1, 0.0);
                    __asm { FMOV            V1.2S, #-1.0 }
                    *(float32x2_t *)v163.i8 = vadd_f32(vcvt_f32_s32(v570[5]), _D1);
                    *(float32x2_t *)v164.i8 = vcvt_f32_s32(v570[3]);
                    v165.i64[0] = 0x3F0000003F000000;
                    v165.i64[1] = 0x3F0000003F000000;
                    v662 = vdivq_f32((float32x4_t)vtrn2q_s32(vrev64q_s32(vzip1q_s32(v163, v163)), v165), (float32x4_t)vzip1q_s32(v164, v164));
                    (*(void (**)(CA::OGL::Context *, _QWORD, uint64_t, uint64_t, float32x4_t *))(*(_QWORD *)v69 + 1000))(v69, 0, 4, 1, &v662);
                    v166 = (int32x4_t)((__n128 (*)(CA::OGL::Context *, uint64_t, uint64_t, uint64_t, int32x4_t *))*(_QWORD *)(*(_QWORD *)v69 + 1000))(v69, 1, 9, 1, &v663);
                    v623 = 0uLL;
                    v660 = 0;
                    v661 = 0;
                    v166.i32[0] = 1073741822;
                    v611 = v166;
                    v590 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
                    v600 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
                    v659 = (uint64_t)v567;
                    while (CA::ShapeIterator::iterate(&v659, (int *)&v623))
                    {
                      v168 = *(int32x2_t *)((char *)&v623 + 8);
                      v169 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v623 + 8));
                      if ((vpmax_u32(v169, v169).u32[0] & 0x80000000) != 0)
                      {
                        v174 = *(int32x2_t *)((char *)&v623 + 8);
                      }
                      else
                      {
                        v170 = *(int32x2_t *)((char *)v69 + 192);
                        v171 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v170);
                        *(uint32x2_t *)v167.i8 = vpmax_u32(v171, v171);
                        if (v167.i32[0] < 0
                          || (v172 = *(int32x2_t *)((char *)v69 + 184),
                              *(int32x2_t *)&v173 = vmax_s32(*(int32x2_t *)&v623, v172),
                              v174 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&v623, *(int32x2_t *)((char *)&v623 + 8)), vadd_s32(v172, v170)), *(int32x2_t *)&v173), v175 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v174), *(uint32x2_t *)v167.i8 = vpmax_u32(v175, v175), v167.i32[0] < 0))
                        {
                          v168 = 0;
                          *((_QWORD *)&v623 + 1) = 0;
                          v174 = 0;
                        }
                        else
                        {
                          *((int32x2_t *)&v173 + 1) = v174;
                          v623 = v173;
                          v168 = v174;
                        }
                      }
                      v176 = v174.i32[0];
                      if (v174.i32[0] <= v174.i32[1])
                        v176 = v174.i32[1];
                      v167.i32[0] = v176;
                      v177.i64[0] = (int)v623;
                      v177.i64[1] = SDWORD1(v623);
                      v178 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v167, v611), 0), v600, (int8x16_t)vcvtq_f64_s64(v177));
                      v177.i64[0] = v174.i32[0];
                      v177.i64[1] = v174.i32[1];
                      v179 = (int8x16_t)vcvtq_f64_s64(v177);
                      v180 = vdup_n_s32(v176 > 1073741822);
                      v177.i64[0] = v180.u32[0];
                      v177.i64[1] = v180.u32[1];
                      v621 = (int32x4_t)v178;
                      v622 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v177, 0x3FuLL)), v590, v179);
                      v656.i64[0] = (uint64_t)&v621;
                      v656.i64[1] = (uint64_t)&CA::identity_transform;
                      v657 = 0u;
                      v658 = 0u;
                      v655[0] = vcvt_f32_s32(*(int32x2_t *)&v623);
                      v655[1] = vcvt_f32_s32(vadd_s32(v168, *(int32x2_t *)&v623));
                      CA::OGL::emit_one_part_rect(v69, (uint64_t)&v656, (const CA::Transform *)v655, 0, 0);
                    }
                    CA::OGL::Context::unbind_surface(v69, (uint64_t)v570, 1);
                    if (v566)
                    {
                      CA::OGL::Context::unbind_surface(v69, v566, 0);
                      CA::OGL::Context::release_surface((uint64_t)v69, v566);
                    }
                    else
                    {
                      bounds = CA::OGL::Context::unbind_surface(v69, v158, 0);
                    }
                    j = v584;
                    LODWORD(v158) = 1;
                  }
                }
              }
              v100 = v573;
              if ((*((_WORD *)v69 + 408) & 2) == 0)
              {
                bounds = (*(uint64_t (**)(CA::WindowServer::Display *))(*(_QWORD *)v573 + 1496))(v573);
                if ((_DWORD)bounds)
                {
                  v663.i64[0] = __PAIR64__(LODWORD(v625.f64[0]), v624[0]);
                  v663.i64[1] = __PAIR64__(HIDWORD(v624[0]), v626);
                  v664 = __PAIR64__(DWORD1(v626), HIDWORD(v625.f64[0]));
                  v665 = (__int32)v624[1];
                  v666 = LODWORD(v625.f64[1]);
                  v667 = DWORD2(v626);
                  *(_BYTE *)(*((_QWORD *)v69 + 2) + 16) = 73;
                  (*(void (**)(CA::OGL::Context *, _QWORD, uint64_t, uint64_t, int32x4_t *))(*(_QWORD *)v69 + 1000))(v69, 0, 9, 1, &v663);
                  v190 = (CA::Shape *)CA::Shape::new_shape((CA::Shape *)(v9[1] + 192), v189);
                  v194 = v190;
                  if ((_DWORD)v158)
                    v195 = CA::Shape::subtract(v190, v567, v192, v193);
                  else
                    v195 = CA::Shape::ref((unint64_t)v190, v191);
                  v197 = (CA::Shape *)v195;
                  v662 = 0uLL;
                  v660 = 0;
                  v661 = 0;
                  v196.i32[0] = 1073741822;
                  v612 = v196;
                  v591 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
                  v601 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
                  v659 = v195;
                  while (CA::ShapeIterator::iterate(&v659, (int *)&v662))
                  {
                    v199 = *(int32x2_t *)&v662.u32[2];
                    v200 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)&v662.u32[2]);
                    *(uint32x2_t *)v198.i8 = vpmax_u32(v200, v200);
                    if ((v198.i32[0] & 0x80000000) == 0)
                    {
                      v198.i64[0] = *((_QWORD *)v69 + 24);
                      v201 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v198.i8);
                      if ((vpmax_u32(v201, v201).u32[0] & 0x80000000) != 0
                        || (v202 = *(int32x2_t *)((char *)v69 + 184),
                            v203 = vadd_s32(v202, *(int32x2_t *)v198.i8),
                            *(int32x2_t *)v198.i8 = vmax_s32(*(int32x2_t *)v662.f32, v202),
                            v199 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v662.f32, *(int32x2_t *)&v662.u32[2]), v203), *(int32x2_t *)v198.i8), v204 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v199), (vpmax_u32(v204, v204).u32[0] & 0x80000000) != 0))
                      {
                        v199 = 0;
                        v662.i64[1] = 0;
                      }
                      else
                      {
                        v198.u64[1] = (unint64_t)v199;
                        v662 = (float32x4_t)v198;
                      }
                    }
                    v205 = v199.i32[0];
                    if (v199.i32[0] <= v199.i32[1])
                      v205 = v199.i32[1];
                    v198.i32[0] = v205;
                    v206.i64[0] = v662.i32[0];
                    v206.i64[1] = v662.i32[1];
                    v207 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v198, v612), 0), v601, (int8x16_t)vcvtq_f64_s64(v206));
                    v206.i64[0] = v199.i32[0];
                    v206.i64[1] = v199.i32[1];
                    v208 = (int8x16_t)vcvtq_f64_s64(v206);
                    v209 = vdup_n_s32(v205 > 1073741822);
                    v206.i64[0] = v209.u32[0];
                    v206.i64[1] = v209.u32[1];
                    v621 = (int32x4_t)v207;
                    v622 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v206, 0x3FuLL)), v591, v208);
                    v656.i64[0] = (uint64_t)&v621;
                    v656.i64[1] = (uint64_t)&CA::identity_transform;
                    v657 = 0u;
                    v658 = 0u;
                    CA::OGL::emit_one_part_rect(v69, (uint64_t)&v656, 0, 0, 0);
                  }
                  CA::Shape::unref(v197);
                  CA::Shape::unref(v194);
                  j = v584;
                  v100 = v573;
                }
              }
              *(_BYTE *)(*((_QWORD *)v69 + 2) + 16) = 0;
              v118 = v571;
            }
            goto LABEL_231;
          }
LABEL_210:
          v181 = v573;
          v182 = (*(float (**)(CA::WindowServer::Display *))(*(_QWORD *)v573 + 920))(v573);
          v183 = CA::WindowServer::Display::edr_headroom(v573) * v182;
          v184 = v183 * (*(float (**)(CA::WindowServer::Display *))(*(_QWORD *)v181 + 1520))(v181);
          v185 = (*(float (**)(CA::WindowServer::Display *))(*(_QWORD *)v181 + 1048))(v181);
          v186 = (*(uint64_t (**)(CA::WindowServer::Display *))(*(_QWORD *)v181 + 1064))(v181);
          v188 = *((_DWORD *)v69 + 139);
          if (v188)
          {
            v187.n128_f32[0] = (float)v188;
          }
          else
          {
            v270 = v186;
            v271 = (*(float (**)(CA::WindowServer::Display *))(*(_QWORD *)v573 + 984))(v573);
            v186 = v270;
            v187.n128_f32[0] = v271;
          }
          *(_BYTE *)(*((_QWORD *)v69 + 2) + 16) = 74;
          v668.i32[2] = 0;
          v668.i64[0] = 0;
          v656.i32[0] = 0;
          v663.i32[0] = 0;
          (*(void (**)(CA::OGL::Context *, _QWORD, uint64_t, uint64_t, int8x16_t *, int8x16_t *, int32x4_t *, float, __n128, float))(*(_QWORD *)v69 + 504))(v69, 0, 1, v186, &v668, &v656, &v663, v184, v187, v185);
          v624[0] = 0;
          v624[1] = (CA::Shape *)v668.i64[0];
          v570 = (int32x2_t *)(*(uint64_t (**)(CA::OGL::Context *, uint64_t, CA::Shape **, uint64_t))(*(_QWORD *)v69 + 656))(v69, 1, v624, 143);
          if (v570)
          {
            (*(void (**)(CA::OGL::Context *, int32x2_t *, _QWORD, _QWORD))(*(_QWORD *)v69 + 704))(v69, v570, v668.u32[0], v668.u32[1]);
            CA::OGL::Context::push_surface((uint64_t)v69, (uint64_t)v570, 0, 0, 0);
            (*(void (**)(CA::OGL::Context *, _QWORD, uint64_t, uint64_t, int8x16_t *))(*(_QWORD *)v69 + 1000))(v69, 0, 1, 1, &v656);
            (*(void (**)(CA::OGL::Context *, uint64_t, uint64_t, uint64_t, int32x4_t *))(*(_QWORD *)v69 + 1000))(v69, 1, 1, 1, &v663);
            *((_QWORD *)v69 + 16) = 0;
            *((_QWORD *)v69 + 12) = (char *)v69 + 818;
            *(_OWORD *)((char *)v69 + 104) = xmmword_18474E060;
            if (*((_QWORD *)v69 + 17) <= 3uLL)
            {
              *((_WORD *)v69 + 408) |= 0x20u;
              CA::OGL::Context::array_flush((uint64_t)v69);
              *((_QWORD *)v69 + 16) = 0;
              *((_QWORD *)v69 + 12) = (char *)v69 + 818;
              *(_OWORD *)((char *)v69 + 104) = xmmword_18474E060;
            }
            CA::OGL::Context::array_rect(v69, 0.0, 0.0, (float)(2 * LODWORD(v624[1])), (float)(2 * HIDWORD(v624[1])));
            v272 = *((_QWORD *)v69 + 15) + 48 * *((_QWORD *)v69 + 16);
            *(_QWORD *)(v272 - 176) = 0;
            *(_QWORD *)(v272 - 128) = 0x40000000;
            *(_QWORD *)(v272 - 80) = 0x4000000040000000;
            *(_QWORD *)(v272 - 32) = 0x4000000000000000;
            CA::OGL::Context::array_flush((uint64_t)v69);
            CA::OGL::Context::pop_surface(v69);
          }
          (*(void (**)(CA::OGL::Context *, _QWORD, _QWORD))(*(_QWORD *)v69 + 520))(v69, 0, 0);
          LODWORD(v77) = 1;
          (*(void (**)(CA::OGL::Context *, _QWORD, uint64_t))(*(_QWORD *)v69 + 520))(v69, 0, 1);
          *(_BYTE *)(*((_QWORD *)v69 + 2) + 16) = 0;
          goto LABEL_92;
        }
        if (v77 != (CA::Shape *)1)
          goto LABEL_210;
        v570 = 0;
        v78 = 1;
      }
      else
      {
        LODWORD(v77) = 0;
        v573 = 0;
        v570 = 0;
        v78 = *(_QWORD *)(v68 + 24);
      }
      v567 = (CA::Shape *)v78;
      goto LABEL_92;
    }
LABEL_56:
    *(_QWORD *)(*((_QWORD *)v63 + 2) + 8) = 0;
    *(_BYTE *)(*(_QWORD *)(*v9 + 16) + 481) &= ~1u;
    WORD2(v636) &= ~0x400u;
    bounds = CA::OGL::emit_shape((CA::OGL *)*v9, v65, v59);
    WORD2(v636) |= 0x400u;
    goto LABEL_57;
  }
LABEL_453:
  v373 = (CA::OGL::Context *)*v9;
  v374 = (*(_WORD *)(*v9 + 816) & 0x180) != 0 && (*(_WORD *)(*v9 + 816) & 1) == 0;
  if (v374
    && *(_DWORD *)(j + 248) != CA::OGL::Renderer::render(CA::Render::Update const*,unsigned long,CA::WindowServer::SharedEvent *)::last_seed_recorded)
  {
    if (v17)
    {
      v375 = (double)CA::Shape::area((CA::Shape *)v17);
    }
    else
    {
      v376 = *((_DWORD *)v373 + 48);
      v377 = *((_DWORD *)v373 + 49);
      if (v376 <= v377)
        v378 = *((_DWORD *)v373 + 49);
      else
        v378 = *((_DWORD *)v373 + 48);
      v375 = INFINITY;
      if (v378 <= 1073741822)
        v375 = (double)v377 * (double)v376;
    }
    CARecordFrame(*((_DWORD *)v373 + 172), *((_DWORD *)v373 + 173), *((_DWORD *)v373 + 174), 0, *((double *)v373 + 28), v375, (double)*((unint64_t *)v373 + 89));
    CA::OGL::Renderer::render(CA::Render::Update const*,unsigned long,CA::WindowServer::SharedEvent *)::last_seed_recorded = *(_DWORD *)(j + 248);
    v373 = (CA::OGL::Context *)*v9;
  }
  *((_BYTE *)v9 + 101) = 0;
  v379 = (*(uint64_t (**)(CA::OGL::Context *, _QWORD))(*(_QWORD *)v373 + 184))(v373, 0);
  if ((_DWORD)v379)
  {
    v380 = v379;
    if (x_log_hook_p())
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v9 + 192))(*v9, v380);
      x_log_();
    }
    else
    {
      v381 = x_log_category_ogl;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_ERROR))
      {
        v382 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v9 + 192))(*v9, v380);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v382;
        _os_log_impl(&dword_184457000, v381, OS_LOG_TYPE_ERROR, "CoreAnimation: rendering error %s\n", (uint8_t *)&buf, 0xCu);
      }
    }
  }
  *(_QWORD *)(*v9 + 200) = 0;
  CA::Render::Update::mark_composited(j);
  v9[1] = 0;
  v55[1] = 0;
  v55[2] = 0;
  *v55 = 0;
  if ((_DWORD)v22)
    CA::Shape::unref((CA::Shape *)v17);
}

void CA::OGL::render(CA::OGL *this, CA::OGL::Renderer *a2, CA::Render::Update *a3)
{
  CA::WindowServer::SharedEvent *v5;
  void *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;

  v6 = (void *)MEMORY[0x186DBE2E4](this, a2, a3);
  v7 = *(_QWORD *)this;
  v8 = *(_DWORD *)(*(_QWORD *)this + 192);
  v9 = *(_DWORD *)(*(_QWORD *)this + 196);
  if (v8 <= v9)
    v10 = *(_DWORD *)(*(_QWORD *)this + 196);
  else
    v10 = *(_DWORD *)(*(_QWORD *)this + 192);
  if (v10 < 0x3FFFFFFF)
  {
    CA::OGL::Renderer::render(this, a2, 0, v5);
    ++*((_DWORD *)a2 + 66);
    CA::Render::Update::mark_composited((uint64_t)a2);
  }
  else
  {
    v11 = *(_QWORD *)(v7 + 184);
    *(_OWORD *)(v7 + 184) = *((_OWORD *)a2 + 12);
    CA::OGL::Renderer::render(this, a2, 0, v5);
    ++*((_DWORD *)a2 + 66);
    CA::Render::Update::mark_composited((uint64_t)a2);
    *(_QWORD *)(v7 + 184) = v11;
    *(_DWORD *)(v7 + 192) = v8;
    *(_DWORD *)(v7 + 196) = v9;
  }
  objc_autoreleasePoolPop(v6);
}

void CA::Render::ReplicatorLayer::show(CA::Render::ReplicatorLayer *this, unsigned int a2, char a3)
{
  _BOOL4 v5;
  NSObject *v6;
  int v7;
  const char *v8;
  int v9;
  uint8_t buf[4];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = x_log_hook_p();
  if ((a3 & 1) != 0)
  {
    if (v5)
      goto LABEL_3;
    v6 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *((_DWORD *)this + 4);
      *(_DWORD *)buf = 67109120;
      v11 = v9;
      v8 = "replicatorLayer %d";
      goto LABEL_6;
    }
  }
  else
  {
    if (v5)
    {
LABEL_3:
      x_log_();
      return;
    }
    v6 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *((_DWORD *)this + 4);
      *(_DWORD *)buf = 67109120;
      v11 = v7;
      v8 = "(replicatorLayer %d)";
LABEL_6:
      _os_log_impl(&dword_184457000, v6, OS_LOG_TYPE_DEFAULT, v8, buf, 8u);
    }
  }
}

double param_fun(uint64_t a1, unsigned int *a2, uint64_t a3, _QWORD *a4)
{
  __CFString *String;
  __CFString *v8;
  uint64_t v10;
  double v11;

  if (a3 == 1)
  {
    String = (__CFString *)CAAtomGetString(*a2);
    v8 = 0;
  }
  else
  {
    String = (__CFString *)objc_alloc_init(MEMORY[0x1E0CB37A0]);
    if (a3)
    {
      v10 = 0;
      do
      {
        if (v10)
          -[__CFString appendString:](String, "appendString:", CFSTR("."));
        -[__CFString appendString:](String, "appendString:", CAAtomGetString(a2[v10++]));
      }
      while (a3 != v10);
    }
    v8 = String;
  }
  v11 = ((double (*)(uint64_t, __CFString *, _QWORD))*a4)(a1, String, a4[1]);
  if (v8)

  return v11;
}

void CA::Render::Shmem::show(CA::Render::Shmem *this, unsigned int a2, char a3)
{
  _BOOL4 v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = x_log_hook_p();
  if ((a3 & 1) != 0)
  {
    if (v5)
      goto LABEL_3;
    v6 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *((_QWORD *)this + 2);
      *(_DWORD *)buf = 134217984;
      v11 = v9;
      v8 = "(shmem %lu)";
      goto LABEL_6;
    }
  }
  else
  {
    if (v5)
    {
LABEL_3:
      x_log_();
      return;
    }
    v6 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *((_QWORD *)this + 2);
      *(_DWORD *)buf = 134217984;
      v11 = v7;
      v8 = "(shmem %lu bytes)";
LABEL_6:
      _os_log_impl(&dword_184457000, v6, OS_LOG_TYPE_DEFAULT, v8, buf, 0xCu);
    }
  }
}

CGImageRef CA::Render::Shmem::copy_cgimage(CA::Render::Shmem *this, CGColorSpace *a2, unint64_t a3, size_t a4)
{
  unint64_t v4;
  size_t v5;
  unint64_t v6;
  CGColorSpace *v7;
  unsigned int *v9;
  CA::Render *v10;
  unint64_t v11;
  size_t v12;
  size_t v13;
  unsigned int v14;
  unint64_t v15;
  char *v16;
  const void *v17;
  uint64_t v18;
  size_t v19;
  unsigned int v20;
  char *v21;
  char *v22;
  CGDataProvider *v23;
  CGImageRef v24;
  size_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  CGImageRef v30;
  size_t v31;
  size_t v32;
  CGBitmapInfo v33;
  unsigned int v35;
  CA::Render *v36;
  size_t v38;
  CGFloat decode[3];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 2);
  if (v4 >= 0x24)
  {
    v5 = a4;
    v6 = a3;
    v7 = a2;
    v9 = (unsigned int *)*((_QWORD *)this + 3);
    v10 = (CA::Render *)v9[3];
    if (a3)
    {
      if (a4)
      {
LABEL_4:
        if (v6 <= v9[6] && v5 <= v9[7])
        {
          v25 = v4 - (int)v9[2];
          if (v9[4] <= 1)
            v26 = 1;
          else
            v26 = v9[4];
          v12 = CA::Render::format_rowbytes((CA::Render *)v9[3], v26);
          v23 = CGDataProviderCreateWithData(this, (char *)v9 + (int)v9[2], v25, (CGDataProviderReleaseDataCallback)CA::Render::release_provider);
          do
            v27 = __ldaxr(v9);
          while (__stlxr(v27 + 1, v9));
          v28 = (unsigned int *)((char *)this + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 + 1, v28));
          if (!v29)
          {
            do
              v35 = __ldaxr(v28);
            while (__stlxr(v35 - 1, v28));
          }
        }
        else
        {
          v36 = (CA::Render *)v9[3];
          v11 = CA::Render::format_rowbytes(v10, v6);
          v12 = v11;
          v38 = v5;
          if (is_mul_ok(v11, v5))
            v13 = v11 * v5;
          else
            v13 = 0;
          if (v9[4] <= 1)
            v14 = 1;
          else
            v14 = v9[4];
          v15 = CA::Render::format_rowbytes((CA::Render *)v9[3], v14);
          v16 = (char *)malloc_type_calloc(1uLL, v13, 0x6465FB00uLL);
          v17 = v16;
          v18 = v9[7];
          if (v12 >= v15)
            v19 = v15;
          else
            v19 = v12;
          if ((_DWORD)v18)
          {
            v20 = 0;
            v21 = &v16[(v38 - v18) * v12];
            v22 = (char *)v9 + (int)v9[2];
            do
            {
              memcpy(v21, v22, v19);
              v22 += v15;
              v21 += v12;
              ++v20;
            }
            while (v20 < v9[7]);
          }
          v23 = CGDataProviderCreateWithData(0, v17, v13, (CGDataProviderReleaseDataCallback)CA::Render::Shmem::copy_cgimage(CGColorSpace *,unsigned long,unsigned long)::$_0::__invoke);
          v7 = a2;
          v5 = v38;
          v10 = v36;
        }
        if (v10 > 0x23)
        {
          v31 = 0;
          v32 = 0;
          v33 = 0;
        }
        else
        {
          if ((v10 & 0xFFFFFFFE) == 8)
          {
            *(_OWORD *)decode = xmmword_18474DF40;
            v30 = CGImageMaskCreate(v6, v5, dword_184750518[(_QWORD)v10], dword_1847503F0[(_QWORD)v10], v12, v23, decode, 1);
LABEL_36:
            v24 = v30;
            CGDataProviderRelease(v23);
            return v24;
          }
          v32 = dword_184750518[(_QWORD)v10];
          v31 = dword_1847503F0[(_QWORD)v10];
          v33 = dword_184750360[(_QWORD)v10];
        }
        v30 = CGImageCreate(v6, v5, v32, v31, v12, v7, v33, v23, 0, 1, kCGRenderingIntentDefault);
        goto LABEL_36;
      }
    }
    else
    {
      v6 = v9[6];
      if (a4)
        goto LABEL_4;
    }
    v5 = v9[7];
    goto LABEL_4;
  }
  return 0;
}

void CA::Render::Shmem::copy_cgimage(CGColorSpace *,unsigned long,unsigned long)::$_0::__invoke(int a1, void *a2)
{
  free(a2);
}

unsigned int *CA::Render::release_provider(unsigned int *this, void *a2, const void *a3)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 - 1, v3));
  v5 = this + 2;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 16))(this);
  return this;
}

uint64_t CA::Render::TransitionSubclass::apply()
{
  return 0;
}

uint64_t CA::Render::TransitionSubclass::implements_apply(CA::Render::TransitionSubclass *this)
{
  return 0;
}

void CA::OGL::`anonymous namespace'::CubeTransition::DOD(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, float64x2_t *a4@<X3>, _OWORD *a5@<X4>, float64x2_t *a6@<X5>, uint64_t a7@<X8>)
{
  double *v10;
  __int128 v11;
  float64x2_t v12;
  float64x2_t *v13;
  float64x2_t *v14;
  double *v15;
  float64x2_t v16;
  float64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int32x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  _OWORD v25[8];
  _OWORD v26[8];
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v27 = 0u;
  memset(v26, 0, sizeof(v26));
  memset(v25, 0, sizeof(v25));
  v11 = a5[1];
  *(_OWORD *)a7 = *a5;
  *(_OWORD *)(a7 + 16) = v11;
  v12 = a6[1];
  v23 = *a6;
  v24 = v12;
  if (BYTE8(v27))
    v13 = (float64x2_t *)v26;
  else
    v13 = (float64x2_t *)v25;
  if (BYTE8(v27))
    v14 = (float64x2_t *)v25;
  else
    v14 = (float64x2_t *)v26;
  CA::Mat4Impl::mat4_apply_to_rect(v13, (int8x16_t *)a7, v10);
  CA::Mat4Impl::mat4_apply_to_rect(v14, (int8x16_t *)&v23, v15);
  v16 = *(float64x2_t *)(a7 + 16);
  v17 = v24;
  v18 = vclezq_f64(v16);
  v19 = vclezq_f64(v24);
  v20 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v19, v18), (int8x16_t)vzip2q_s64(v19, v18))));
  if ((v20.i8[4] & 1) != 0)
  {
    if ((v20.i8[0] & 1) != 0)
      return;
    v21 = v23;
  }
  else
  {
    if ((v20.i8[0] & 1) != 0)
      return;
    v22 = vaddq_f64(*(float64x2_t *)a7, v16);
    v21 = vminnmq_f64(*(float64x2_t *)a7, v23);
    v17 = vsubq_f64(vmaxnmq_f64(v22, vaddq_f64(v23, v24)), v21);
  }
  *(float64x2_t *)a7 = v21;
  *(float64x2_t *)(a7 + 16) = v17;
}

__n128 CA::OGL::`anonymous namespace'::CubeTransition::ROI(uint64_t a1, uint64_t a2, __n128 *a3, uint64_t a4, uint64_t a5, __n128 *a6, __n128 *a7)
{
  __n128 result;

  *a6 = *a3;
  a6[1] = a3[1];
  *a7 = *a3;
  result = a3[1];
  a7[1] = result;
  return result;
}

uint64_t CA::OGL::TransitionSubclass::is_ogl_transition(CA::OGL::TransitionSubclass *this)
{
  return 1;
}

void CA::OGL::`anonymous namespace'::CubeTransition::render(uint64_t a1, uint64_t a2, CA::OGL::Context *a3, float64x2_t *a4, CA::Transform *a5, uint64_t a6, uint64_t a7)
{
  const double *v12;
  uint64_t v13;
  _WORD *v19;
  _WORD *v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v34 = 0u;
  if (BYTE8(v50))
    v13 = a6;
  else
    v13 = a7;
  if (!BYTE8(v50))
    a7 = a6;
  *(_BYTE *)(*((_QWORD *)a3 + 2) + 481) |= 1u;
  if (a7 && CA::Mat4Impl::mat4_is_front_facing((CA::Mat4Impl *)&v34, v12))
  {
    _S0 = v50;
    __asm { FCVT            H0, S0 }
    v19 = (_WORD *)*((_QWORD *)a3 + 2);
    v19[4] = _S0;
    v19[5] = _S0;
    v19[6] = _S0;
    v19[7] = 15360;
    v24 = v34;
    v25 = v35;
    v26 = v36;
    v27 = v37;
    v28 = v38;
    v29 = v39;
    v30 = v40;
    v31 = v41;
    __asm { FMOV            V0.2D, #1.0 }
    v32 = _Q0;
    v33 = 16;
    CA::OGL::fill_surface_rect(a3, a7, a5, (uint64_t)&v24, *a4, a4[1]);
  }
  if (v13 && CA::Mat4Impl::mat4_is_front_facing((CA::Mat4Impl *)&v42, v12))
  {
    _S0 = DWORD1(v50);
    __asm { FCVT            H0, S0 }
    v22 = (_WORD *)*((_QWORD *)a3 + 2);
    v22[4] = _S0;
    v22[5] = _S0;
    v22[6] = _S0;
    v22[7] = 15360;
    v24 = v42;
    v25 = v43;
    v26 = v44;
    v27 = v45;
    v28 = v46;
    v29 = v47;
    v30 = v48;
    v31 = v49;
    __asm { FMOV            V0.2D, #1.0 }
    v32 = _Q0;
    v33 = 16;
    CA::OGL::fill_surface_rect(a3, v13, a5, (uint64_t)&v24, *a4, a4[1]);
  }
  *(_BYTE *)(*((_QWORD *)a3 + 2) + 481) &= ~1u;
}

uint64_t CA::OGL::`anonymous namespace'::CubeTransition::source_requirement()
{
  return 3;
}

void CA::OGL::`anonymous namespace'::CubeTransition::set_state(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, float64x2_t *a5)
{
  float v7;
  int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  CA::Render::KeyValueArray **v17;
  CA::Render::KeyValueArray *v18;
  double v19;
  double v20;
  double v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  const double *v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  double *v39;
  const double *v40;
  float64x2_t v41;
  double *v42;
  const double *v43;
  float64x2_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  _OWORD v49[5];
  uint64_t v50;
  double v51;
  __int128 v52;
  __int128 v53;
  double v54[17];

  v54[16] = *(double *)MEMORY[0x1E0C80C00];
  v7 = *(float *)(a3 + 48);
  v8 = *(_DWORD *)(a3 + 20);
  if (!v8)
    v8 = 237;
  if (v8 == 237 || v8 == 235)
  {
    *(_BYTE *)(a2 + 264) = 1;
    v7 = 1.0 - v7;
  }
  else
  {
    *(_BYTE *)(a2 + 264) = 0;
  }
  v9 = a4[2];
  v10 = a4[3];
  v11 = 0.0;
  v12 = 1.0;
  v13 = v10;
  if (v8 != 234 && v8 != 237)
  {
    v11 = 1.0;
    v12 = 0.0;
    v13 = a4[2];
  }
  v14 = *a4;
  v15 = a4[1];
  v16 = *(_QWORD *)(a3 + 32);
  if (v16)
    v17 = (CA::Render::KeyValueArray **)(v16 + 40);
  else
    v17 = (CA::Render::KeyValueArray **)(a3 + 24);
  v18 = *v17;
  v45 = v12;
  v46 = v11;
  if (CA::Render::KeyValueArray::get_int_key(*v17, (const CA::Render::KeyValueArray *)4, *(unsigned __int8 *)(a1 + 8)))
  {
    v19 = v9 * v12 + v10 * v11;
    v20 = v7;
    v21 = v19 * (cos(v7 * -1.57079633 + 0.785398163) * 0.707106781 + -0.5);
  }
  else
  {
    v20 = v7;
    v21 = 0.0;
  }
  v48 = v15 + v10 * 0.5;
  v47 = v14 + v9 * 0.5;
  v49[0] = xmmword_18474DF40;
  v49[1] = 0u;
  v49[2] = xmmword_18474DF50;
  memset(&v49[3], 0, 32);
  v50 = 0x3FF0000000000000;
  v52 = 0u;
  v53 = xmmword_18474DF50;
  v51 = -1.0
      / (CA::Render::KeyValueArray::get_float_key(v18, (const CA::Render::KeyValueArray *)0x10E, 3.0)
       * (0.5
        * (v10 + v9)));
  v22 = *a5;
  v23 = a5[1];
  v24 = a5[2];
  v25 = a5[3];
  *(float64x2_t *)a2 = *a5;
  *(float64x2_t *)(a2 + 16) = v23;
  *(float64x2_t *)(a2 + 32) = v24;
  *(float64x2_t *)(a2 + 48) = v25;
  v26 = a5[4];
  v27 = a5[5];
  v28 = a5[6];
  v29 = a5[7];
  *(float64x2_t *)(a2 + 64) = v26;
  *(float64x2_t *)(a2 + 80) = v27;
  *(float64x2_t *)(a2 + 96) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v28, v22, v47), v24, v48), (float64x2_t)0, v26);
  *(float64x2_t *)(a2 + 112) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v29, v23, v47), v25, v48), (float64x2_t)0, v27);
  CA::Mat4Impl::mat4_concat((float64x2_t *)a2, (double *)v49, (const double *)a2, v30);
  v31 = *(float64x2_t *)a2;
  v32 = *(float64x2_t *)(a2 + 16);
  v33 = *(float64x2_t *)(a2 + 32);
  v34 = *(float64x2_t *)(a2 + 48);
  v35 = *(float64x2_t *)(a2 + 64);
  v36 = *(float64x2_t *)(a2 + 80);
  v37 = vmlaq_n_f64(vmlaq_f64(vmlaq_f64(*(float64x2_t *)(a2 + 96), (float64x2_t)0, *(float64x2_t *)a2), (float64x2_t)0, v33), v35, v13 * -0.5 - v21);
  v38 = vmlaq_n_f64(vmlaq_f64(vmlaq_f64(*(float64x2_t *)(a2 + 112), (float64x2_t)0, v32), (float64x2_t)0, v34), v36, v13 * -0.5 - v21);
  *(float64x2_t *)(a2 + 96) = v37;
  *(float64x2_t *)(a2 + 112) = v38;
  *(float64x2_t *)(a2 + 128) = v31;
  *(float64x2_t *)(a2 + 144) = v32;
  *(float64x2_t *)(a2 + 160) = v33;
  *(float64x2_t *)(a2 + 176) = v34;
  *(float64x2_t *)(a2 + 192) = v35;
  *(float64x2_t *)(a2 + 208) = v36;
  *(float64x2_t *)(a2 + 224) = v37;
  *(float64x2_t *)(a2 + 240) = v38;
  CA::Mat4Impl::mat4_set_rotation((CA::Mat4Impl *)v54, v39, v20 * -1.57079633, v45, v46, 0.0);
  CA::Mat4Impl::mat4_concat((float64x2_t *)a2, v54, (const double *)a2, v40);
  v41 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(*(float64x2_t *)(a2 + 112), *(float64x2_t *)(a2 + 16), v47, 0), *(float64x2_t *)(a2 + 48), v48, 0), *(float64x2_t *)(a2 + 80), v13 * -0.5, 0);
  *(float64x2_t *)(a2 + 96) = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(*(float64x2_t *)(a2 + 96), *(float64x2_t *)a2, v47, 0), *(float64x2_t *)(a2 + 32), v48, 0), *(float64x2_t *)(a2 + 64), v13 * -0.5, 0);
  *(float64x2_t *)(a2 + 112) = v41;
  CA::Mat4Impl::mat4_set_rotation((CA::Mat4Impl *)v54, v42, (float)(v7 + -1.0) * -1.57079633, v45, v46, 0.0);
  CA::Mat4Impl::mat4_concat((float64x2_t *)(a2 + 128), v54, (const double *)(a2 + 128), v43);
  v44 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(*(float64x2_t *)(a2 + 240), *(float64x2_t *)(a2 + 144), v47, 0), *(float64x2_t *)(a2 + 176), v48, 0), *(float64x2_t *)(a2 + 208), v13 * -0.5, 0);
  *(float64x2_t *)(a2 + 224) = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(*(float64x2_t *)(a2 + 224), *(float64x2_t *)(a2 + 128), v47, 0), *(float64x2_t *)(a2 + 160), v48, 0), *(float64x2_t *)(a2 + 192), v13 * -0.5, 0);
  *(float64x2_t *)(a2 + 240) = v44;
  *(float *)(a2 + 256) = 1.0 - (float)(v7 * 0.75);
  *(float *)(a2 + 260) = (float)(v7 * 0.75) + 0.25;
}

uint64_t CA::WindowServer::VirtualServer::shutdown(CA::WindowServer::VirtualServer *this)
{
  CA::WindowServer::Server::shutdown(this);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 536));
  CA::WindowServer::VirtualServer::remove_vsync_source(this);
  if (*((_QWORD *)this + 66))
  {
    CFRunLoopStop(*((CFRunLoopRef *)this + 81));
    while (*((_QWORD *)this + 81))
      pthread_cond_wait((pthread_cond_t *)((char *)this + 600), (pthread_mutex_t *)((char *)this + 536));
  }
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 536));
}

BOOL CA::WindowServer::Server::can_update(CA::WindowServer::Server *this)
{
  return (*(unsigned int (**)(_QWORD, double, double))(**((_QWORD **)this + 12) + 352))(*((_QWORD *)this + 12), 0.0, 0.0) == 0;
}

uint64_t CA::WindowServer::Server::begin_skylight_update(CA::WindowServer::Server *this, CA::Render::Update *a2)
{
  return (*(uint64_t (**)(_QWORD, CA::Render::Update *))(**((_QWORD **)this + 12) + 408))(*((_QWORD *)this + 12), a2);
}

uint64_t CA::WindowServer::Server::finish_skylight_update(CA::WindowServer::Server *this, CA::Render::Update *a2)
{
  return (*(uint64_t (**)(_QWORD, CA::Render::Update *))(**((_QWORD **)this + 12) + 416))(*((_QWORD *)this + 12), a2);
}

double CA::WindowServer::VirtualServer::next_wakeup_time(CA::WindowServer::VirtualServer *this)
{
  return *((double *)this + 84);
}

uint64_t CA::WindowServer::VirtualServer::vbl_delta(CA::WindowServer::VirtualServer *this)
{
  return *((_QWORD *)this + 86);
}

uint64_t CA::WindowServer::VirtualServer::previous_vbl(CA::WindowServer::VirtualServer *this)
{
  return *((_QWORD *)this + 85);
}

uint64_t CA::WindowServer::Server::current_surface(CA::WindowServer::Server *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 448))(*((_QWORD *)this + 12));
}

{
  return 0;
}

uint64_t CA::WindowServer::Server::present_surface(CA::WindowServer::Server *this, __IOSurface *a2)
{
  return (*(uint64_t (**)(_QWORD, __IOSurface *))(**((_QWORD **)this + 12) + 464))(*((_QWORD *)this + 12), a2);
}

void CA::WindowServer::Server::print_display_trace_log(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = *(_QWORD *)(a1 + 96);
  if (a2)
  {
    x_stream_printf(a2, "\nCA Display Trace Display ID:%d\n", a3, a4, a5, a6, a7, a8, *(unsigned int *)(v8 + 24));
    CA::WindowServer::Display::print_display_trace_log_in_range(v8, a2, *(_QWORD *)(v8 + 25328), 0x200uLL);
    v10 = *(_QWORD *)(v8 + 25328);
    v11 = v8;
    v12 = a2;
  }
  else
  {
    CA::WindowServer::Display::print_display_trace_log_in_range(*(_QWORD *)(a1 + 96), 0, *(_QWORD *)(v8 + 25328), 0x200uLL);
    v10 = *(_QWORD *)(v8 + 25328);
    v11 = v8;
    v12 = 0;
  }
  CA::WindowServer::Display::print_display_trace_log_in_range(v11, v12, 0, v10);
}

void CA::WindowServer::VirtualServer::~VirtualServer(CA::WindowServer::VirtualServer *this)
{
  malloc_zone_t *malloc_zone;

  CA::WindowServer::VirtualServer::~VirtualServer(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  uint64_t v2;
  void *v3;
  malloc_zone_t *malloc_zone;
  uint64_t v5;

  *(_QWORD *)this = &off_1E158DB58;
  v2 = *((_QWORD *)this + 12);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 12) = 0;
  v3 = (void *)*((_QWORD *)this + 88);
  if (v3)
  {
    CA::OGL::Renderer::~Renderer(*((CA::OGL::Renderer **)this + 88));
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v3);
    *((_QWORD *)this + 88) = 0;
    v5 = *((_QWORD *)this + 87);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 224))(v5, 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *((_QWORD *)this + 87) = 0;
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 536));
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 600));
  CA::WindowServer::Server::~Server(this);
}

uint64_t CA::WindowServer::Server::allows_edr(CA::WindowServer::Server *this)
{
  return 0;
}

_DWORD *CA::WindowServer::VirtualServer::set_edr_properties(_DWORD *this, float a2, float a3, float a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;

  if (a2 >= 1.0)
  {
    v5 = (uint64_t)this;
    (*(void (**)(_QWORD, float))(**((_QWORD **)this + 12) + 928))(*((_QWORD *)this + 12), a3 / a2);
    v6 = *(_QWORD *)(v5 + 96);
    this = CA::WindowServer::Display::initialize_edr_state((_DWORD *)v6);
    v7 = *(unsigned int **)(v6 + 688);
    if (v7)
      atomic_store(LODWORD(a2), v7);
  }
  return this;
}

uint64_t CA::WindowServer::Server::supports_color_matrix(CA::WindowServer::Server *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 1400))(*((_QWORD *)this + 12));
}

double CA::WindowServer::Server::latency(CA::WindowServer::Server *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::VirtualServer::set_enabled(CA::WindowServer::VirtualServer *this, char a2)
{
  pthread_mutex_t *v4;
  __CFRunLoopSource *v5;

  v4 = (pthread_mutex_t *)((char *)this + 536);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 536));
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 12) + 224))(*((_QWORD *)this + 12), 1);
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 12) + 216))(*((_QWORD *)this + 12)))
      CA::WindowServer::VirtualServer::add_vsync_source((uint64_t)this, v5);
  }
  else
  {
    CA::WindowServer::VirtualServer::remove_vsync_source(this);
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 12) + 224))(*((_QWORD *)this + 12), 0);
  }
  return pthread_mutex_unlock(v4);
}

uint64_t CA::WindowServer::Server::supports_cursor(CA::WindowServer::Server *this)
{
  return 0;
}

double CA::WindowServer::Server::cursor_position(CA::WindowServer::Server *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Server::cursor_dictionary(CA::WindowServer::Server *this)
{
  return 0;
}

uint64_t CA::WindowServer::Server::cursor_hidden(CA::WindowServer::Server *this)
{
  return 1;
}

uint64_t CA::WindowServer::Server::cursor_enabled(CA::WindowServer::Server *this)
{
  return 0;
}

uint64_t CA::WindowServer::Server::set_privacy_indicator_surface()
{
  return 0;
}

uint64_t CA::WindowServer::Server::triple_buffered(CA::WindowServer::Server *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 1760))(*((_QWORD *)this + 12));
}

uint64_t CA::WindowServer::Server::brightness_capabilities(CA::WindowServer::Server *this)
{
  return 0;
}

uint64_t CA::WindowServer::Server::copy_brightness_capabilities(CA::WindowServer::Server *this)
{
  return 0;
}

uint64_t CA::WindowServer::Server::service_object(CA::WindowServer::Server *this)
{
  return 0;
}

uint64_t CA::WindowServer::VirtualServer::set_digital_modes(CA::WindowServer::VirtualServer *this, const __CFArray *a2, const __CFArray *a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 12);
  if (result)
    return (*(uint64_t (**)(uint64_t, const __CFArray *, const __CFArray *))(*(_QWORD *)result + 2168))(result, a2, a3);
  return result;
}

uint64_t CA::WindowServer::VirtualServer::set_digital_modes(CA::WindowServer::VirtualServer *this, const __CFArray *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 12);
  if (result)
    return (*(uint64_t (**)(uint64_t, const __CFArray *))(*(_QWORD *)result + 2176))(result, a2);
  return result;
}

uint64_t CA::WindowServer::VirtualServer::copy_display_timings(CA::WindowServer::VirtualServer *this, CA::WindowServer::Server *a2)
{
  uint64_t v2;
  os_unfair_lock_s *v4;
  uint64_t v5;
  double v6;
  _WORD *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v16;
  float v17;
  unint64_t v18;
  unint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  float v29;
  float v30;
  unsigned int v31;
  uint64_t v32;
  NSObject *v33;
  uint8_t buf[4];
  unsigned int v35;
  __int16 v36;
  unsigned int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    v4 = (os_unfair_lock_s *)(v2 + 25696);
    os_unfair_lock_lock((os_unfair_lock_t)(v2 + 25696));
    if (!*(_BYTE *)(v2 + 25700))
    {
      if (!*(_QWORD *)(v2 + 25704))
      {
        v5 = operator new();
        *(_OWORD *)v5 = 0u;
        *(_OWORD *)(v5 + 16) = 0u;
        *(_OWORD *)(v5 + 32) = 0u;
        *(_OWORD *)(v5 + 48) = 0u;
        *(_QWORD *)(v5 + 64) = 0;
        *(_QWORD *)(v2 + 25704) = v5;
      }
      v6 = (*(double (**)(uint64_t))(*(_QWORD *)v2 + 744))(v2);
      if (v6 != 0.0 && (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        atomic_store(CAHostTimeWithTime(v6), (unsigned int *)(*(_QWORD *)(v2 + 25704) + 4));
        *(_BYTE *)(v2 + 25700) = 1;
      }
    }
    if (!*(_QWORD *)(v2 + 25704) || (v8 = (_WORD *)*((_QWORD *)a2 + 12), (v8[328] & 0x1C00) == 0xC00))
    {
      v2 = 0;
LABEL_31:
      os_unfair_lock_unlock(v4);
      return v2;
    }
    v9 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v8 + 120))(v8);
    if (v9)
    {
      v11 = *(_QWORD *)(v9 + 24);
      v12 = atomic_load((unsigned __int8 *)v11);
      if ((v12 & 1) != 0)
      {
        v13 = atomic_load((unsigned int *)(v11 + 4));
        v14 = atomic_load((unsigned int *)(*(_QWORD *)(v2 + 25704) + 4));
        if (v13 && v14 != 0)
        {
          v16 = *(_DWORD *)(v2 + 25712);
          if (v16 && (float)((float)v13 / (float)v16) + -1.0 < 0.02)
          {
            *(_DWORD *)(v2 + 25712) = v13;
            v17 = *(float *)(v2 + 25716);
            goto LABEL_24;
          }
          if (v14 <= v13)
            v26 = v13;
          else
            v26 = v14;
          v27 = v14;
          if (v14 >= v13)
            v14 = v13;
          v28 = v26 % v14;
          if (v28 >= v14 - v28)
            v28 = v14 - v28;
          if (v28 <= v14 >> 5)
          {
            *(_DWORD *)(v2 + 25712) = v13;
            v29 = (double)v27 / (double)v13;
            if (v29 >= 1.0)
            {
              v17 = roundf(v29);
              v30 = 1.0 / v29;
            }
            else
            {
              v30 = 1.0 / v29;
              v17 = 1.0 / roundf(v30);
            }
            *(float *)(v2 + 25716) = v17;
            *(float *)(v2 + 25720) = v30;
            v14 = v27;
LABEL_24:
            if (v17 <= 0.0)
            {
              v31 = v14;
              v32 = v9;
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                v33 = x_log_category_windowserver;
                if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 67109376;
                  v35 = v31;
                  v36 = 1024;
                  v37 = v13;
                  _os_log_impl(&dword_184457000, v33, OS_LOG_TYPE_ERROR, "copy_display_timings: unexpected state (source: %x, this: %x)", buf, 0xEu);
                }
              }
              v10 = 0;
              v9 = v32;
            }
            else
            {
              atomic_store((float)(v17 * (float)v13), (unsigned int *)(*(_QWORD *)(v2 + 25704) + 4));
              v18 = *(_QWORD *)(v11 + 48);
              v19 = *(_QWORD *)(v11 + 64);
              v20 = *(float *)(v2 + 25716);
              if (v20 > 1.0)
                v19 -= v18 % (unint64_t)v20 * *(unsigned int *)(v2 + 25712);
              v21 = *(float *)(v2 + 25720) * (float)v18;
              v22 = *(_QWORD *)(v2 + 25704);
              v23 = (unsigned int *)(v22 + 16);
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 + 1, v23));
              atomic_store((unint64_t)v21, (unint64_t *)(v22 + 48));
              atomic_store(v19, (unint64_t *)(v22 + 64));
              atomic_store(v24 + 2, (unsigned int *)(v22 + 16));
              v10 = 1;
            }
            goto LABEL_30;
          }
        }
      }
      v10 = 0;
    }
LABEL_30:
    v2 = (v9 != 0) & v10;
    goto LABEL_31;
  }
  return v2;
}

uint64_t CA::WindowServer::Server::supports_icc_color_management(CA::WindowServer::Server *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 1832))(*((_QWORD *)this + 12));
}

uint64_t CA::WindowServer::VirtualServer::run_loop(CA::WindowServer::VirtualServer *this)
{
  return *((_QWORD *)this + 81);
}

uint64_t CA::WindowServer::VirtualServer::renderer(CA::WindowServer::VirtualServer *this)
{
  int v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  id v6;
  malloc_zone_t *malloc_zone;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v2 = *((_DWORD *)this + 46);
  v3 = v2 | 0x20010;
  result = *((_QWORD *)this + 88);
  if (result)
    goto LABEL_7;
  v5 = *((_QWORD *)this + 12);
  v6 = *(id *)(v5 + 296);
  if (!v6)
  {
    v6 = CAMetalContextCreate();
    *(_QWORD *)(v5 + 296) = v6;
    if (!v6)
    {
      result = *((_QWORD *)this + 88);
      if (!result)
        return result;
      goto LABEL_7;
    }
  }
  *((_QWORD *)this + 87) = CA::OGL::new_metal_context(v6, 0, 0, v2 | 0x20010u, 4, CFSTR("com.apple.coreanimation.VirtualServer"));
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v8 = malloc_type_zone_malloc(malloc_zone, 0x68uLL, 0x8BB15036uLL);
  v9 = v8;
  if (v8)
  {
    v10 = *((_QWORD *)this + 87);
    v8[1] = 0;
    v8[2] = 0;
    *v8 = v10;
    v8[6] = malloc_type_malloc(0x40000uLL, 0xA44586FDuLL);
    v9[7] = 0;
    *((_DWORD *)v9 + 24) = 1;
    *((_WORD *)v9 + 50) = 0;
  }
  *((_QWORD *)this + 88) = v9;
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 87) + 176))(*((_QWORD *)this + 87), 0);
  result = *((_QWORD *)this + 88);
  *(_QWORD *)(*((_QWORD *)this + 12) + 312) = result;
  if (result)
  {
LABEL_7:
    v11 = *((_QWORD *)this + 87);
    v12 = *(_DWORD *)(v11 + 208);
    *(_DWORD *)(v11 + 208) = v3;
    *(_DWORD *)(v11 + 416) = global_feature_flags | v3;
    if (((v12 ^ v2) & 0x2000200) != 0)
    {
      CA::OGL::Context::update_color_program_cache(v11);
      return *((_QWORD *)this + 88);
    }
  }
  return result;
}

CA::Shape **CA::WindowServer::VirtualServer::render_update(CA::WindowServer::Display **this, CA::Render::Update *a2, unsigned int *a3)
{
  CA::Shape **v6;
  unsigned int *v7;
  CA::OGL::Renderer *v8;
  CA::WindowServer::Display *v9;

  v6 = (CA::Shape **)(*((uint64_t (**)(CA::WindowServer::Display **))*this + 49))(this);
  if (!v6)
    return CA::WindowServer::Server::render_update(this, a2, v7);
  v8 = (CA::OGL::Renderer *)v6;
  if (CA::WindowServer::Display::render_display(this[12], v6, a2))
    *a3 |= 3u;
  if (BYTE4(xmmword_1ECDC6A70))
    (*(void (**)(_QWORD, const char *))(**(_QWORD **)v8 + 424))(*(_QWORD *)v8, "com.apple.GL.event.frameboundary.end");
  if ((*(_BYTE *)a3 & 2) != 0)
  {
    v9 = this[87];
    if (v9)
      (*(void (**)(CA::WindowServer::Display *, uint64_t))(*(_QWORD *)v9 + 408))(v9, 1);
  }
  return (CA::Shape **)CA::OGL::Renderer::collect(v8, a2, *((double *)a2 + 9));
}

CA::Shape **CA::WindowServer::VirtualServer::render_surface(CA::WindowServer::Display **this, CA::Render::Update *a2, CA::WindowServer::Surface *a3, const CA::Bounds *a4, unsigned int a5, int a6)
{
  CA::Shape **v12;
  CA::OGL::Renderer *v13;
  uint64_t v14;

  if (!(*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)a3 + 160))(a3))
    return CA::WindowServer::Server::render_surface(this, a2, a3, a4, a5, a6);
  v12 = (CA::Shape **)(*((uint64_t (**)(CA::WindowServer::Display **))*this + 49))(this);
  if (!v12)
    return CA::WindowServer::Server::render_surface(this, a2, a3, a4, a5, a6);
  v13 = (CA::OGL::Renderer *)v12;
  v14 = CA::WindowServer::Display::render_surface(this[12], v12, a3, a2, a4, a5, a6);
  CA::OGL::Renderer::collect(v13, a2, *((double *)a2 + 9));
  return (CA::Shape **)v14;
}

uint64_t CA::WindowServer::VirtualServer::release_resources(uint64_t this)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(this + 704);
  if (v1)
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 224))(*v1, 0);
  return this;
}

uint64_t CA::WindowServer::VirtualServer::purge_resources(uint64_t this)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(this + 704);
  if (v1)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v1 + 224))(*v1, 1);
  return this;
}

double CA::WindowServer::Server::low_latency_threshold(CA::WindowServer::Server *this)
{
  return 0.0;
}

void CA::WindowServer::VirtualServer::remove_vsync_source(CA::WindowServer::VirtualServer *this)
{
  uint64_t v1;
  __CFRunLoop *v3;

  v1 = *((_QWORD *)this + 83);
  if (v1)
  {
    if (BYTE9(xmmword_1ECDC6A90))
    {
      kdebug_trace();
      v1 = *((_QWORD *)this + 83);
    }
    v3 = (__CFRunLoop *)(*(uint64_t (**)(CA::WindowServer::VirtualServer *))(*(_QWORD *)this + 384))(this);
    CADisplayTimerRemoveFromRunLoop(v1, v3, (const __CFString *)*MEMORY[0x1E0C9B280]);
    CADisplayTimerInvalidate(*((_QWORD *)this + 83));
    CFRelease(*((CFTypeRef *)this + 83));
    *((_QWORD *)this + 83) = 0;
  }
}

uint64_t CA::WindowServer::VirtualServer::add_vsync_source(uint64_t this, __CFRunLoopSource *a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  __CFRunLoop *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(this + 664))
  {
    v2 = this;
    CA::WindowServer::VirtualServer::add_runloop_source(this, a2);
    v10 = 0;
    v11 = 0;
    v9 = (unint64_t)v2;
    v3 = mach_absolute_time();
    v4 = CATimeWithHostTime(v3);
    v5 = (*(double (**)(_QWORD))(**(_QWORD **)(v2 + 96) + 744))(*(_QWORD *)(v2 + 96));
    v6 = CADisplayTimerCreate((uint64_t)CA::WindowServer::VirtualServer::timer_callback, &v9, 0, v4, v5);
    *(_QWORD *)(v2 + 664) = v6;
    pthread_mutex_lock((pthread_mutex_t *)(v6 + 16));
    *(_BYTE *)(v6 + 201) = 1;
    pthread_mutex_unlock((pthread_mutex_t *)(v6 + 16));
    if (BYTE9(xmmword_1ECDC6A90))
      kdebug_trace();
    v7 = *(_QWORD *)(v2 + 664);
    v8 = (__CFRunLoop *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 384))(v2);
    return CADisplayTimerAddToRunLoop(v7, v8, (const __CFString *)*MEMORY[0x1E0C9B280]);
  }
  return this;
}

uint64_t CA::WindowServer::VirtualServer::add_runloop_source(uint64_t this, __CFRunLoopSource *a2)
{
  uint64_t v2;
  _opaque_pthread_t *v3;

  v2 = this;
  if (!*(_QWORD *)(this + 528))
  {
    v3 = x_thread_create((uint64_t)CA::WindowServer::VirtualServer::thread_body, this, 1);
    *(_QWORD *)(v2 + 528) = v3;
    this = CA::Render::Server::set_thread_priority(v3, (_opaque_pthread_t *)0xFFFFFFFFLL);
  }
  for (; !*(_QWORD *)(v2 + 648); this = pthread_cond_wait((pthread_cond_t *)(v2 + 600), (pthread_mutex_t *)(v2 + 536)))
    ;
  return this;
}

void CA::WindowServer::VirtualServer::timer_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v8 = *(_QWORD *)(a5 + 96);
    os_unfair_lock_lock((os_unfair_lock_t)(v8 + 25696));
    v9 = *(_QWORD *)(v8 + 25704);
    v17 = 0;
    v18 = 0;
    v16 = 0;
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 64);
      v16 = *(_QWORD *)(v9 + 48);
      v17 = v10;
      v11 = atomic_load((unsigned int *)(v9 + 4));
      v18 = v11;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 25696));
    CADisplayTimerAlignPhase(a1, &v16);
  }
  v12 = (*(double (**)(_QWORD))(**(_QWORD **)(a5 + 96) + 760))(*(_QWORD *)(a5 + 96));
  v13 = CAHostTimeWithTime(v12);
  v14 = v13 * (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a5 + 96) + 768))(*(_QWORD *)(a5 + 96));
  kdebug_trace();
  *(_QWORD *)(a5 + 680) = a2;
  v15 = CATimeWithHostTime(v14 + a2);
  *(double *)(a5 + 672) = v15;
  *(_QWORD *)(a5 + 688) = v14;
  CA::Render::collect(0, v15);
}

uint64_t CA::WindowServer::VirtualServer::thread_body(CA::WindowServer::VirtualServer *this, void *a2)
{
  const char *CString;
  CA::WindowServer::Server *v4;
  int v5;
  NSObject *v6;
  char *v7;
  int v8;
  CFAbsoluteTime Current;
  __CFRunLoopTimer *v10;
  const __CFString *v11;
  char __str[32];
  __int128 v14;
  __int128 v15;
  _OWORD v16[16];
  int v17;
  char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  memset(v16, 0, sizeof(v16));
  CString = CA_CFStringGetCString(*(const __CFString **)(*((_QWORD *)this + 12) + 8), (char *)v16, 256);
  if (CString)
  {
    v14 = 0u;
    v15 = 0u;
    memset(__str, 0, sizeof(__str));
    snprintf(__str, 0x40uLL, "com.apple.coreanimation.display.%s", CString);
    v4 = (CA::WindowServer::Server *)pthread_setname_np(__str);
    if ((_DWORD)v4)
    {
      v5 = (int)v4;
      v6 = x_log_category_utilities;
      v4 = (CA::WindowServer::Server *)os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v4)
      {
        v17 = 136315394;
        v18 = __str;
        v19 = 1024;
        v20 = v5;
        v7 = (char *)&v17;
LABEL_9:
        _os_log_error_impl(&dword_184457000, v6, OS_LOG_TYPE_ERROR, "pthread_setname_np(%s) returned %d\n", (uint8_t *)v7, 0x12u);
      }
    }
  }
  else
  {
    v4 = (CA::WindowServer::Server *)pthread_setname_np("com.apple.coreanimation.display");
    if ((_DWORD)v4)
    {
      v8 = (int)v4;
      v6 = x_log_category_utilities;
      v4 = (CA::WindowServer::Server *)os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v4)
      {
        *(_DWORD *)__str = 136315394;
        *(_QWORD *)&__str[4] = "com.apple.coreanimation.display";
        *(_WORD *)&__str[12] = 1024;
        *(_DWORD *)&__str[14] = v8;
        v7 = __str;
        goto LABEL_9;
      }
    }
  }
  CA::WindowServer::Server::set_server_thread_policy(v4);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 536));
  *((_QWORD *)this + 81) = CFRunLoopGetCurrent();
  Current = CFAbsoluteTimeGetCurrent();
  v10 = CFRunLoopTimerCreate(0, Current + 3153600000.0, 3153600000.0, 0, 0, (CFRunLoopTimerCallBack)CA::WindowServer::null_timer, 0);
  v11 = (const __CFString *)*MEMORY[0x1E0C9B280];
  CFRunLoopAddTimer(*((CFRunLoopRef *)this + 81), v10, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
  pthread_cond_signal((pthread_cond_t *)((char *)this + 600));
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 536));
  CFRunLoopRun();
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 536));
  CFRunLoopRemoveTimer(*((CFRunLoopRef *)this + 81), v10, v11);
  CFRelease(v10);
  *((_QWORD *)this + 81) = 0;
  *((_QWORD *)this + 66) = 0;
  pthread_cond_signal((pthread_cond_t *)((char *)this + 600));
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 536));
}

BOOL x_set_log_file(FILE *a1)
{
  tm v4;
  time_t v5;
  char v6[16];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    x_close_log_file();
    x_log_file_handle = (uint64_t)a1;
    x_log_function = 0;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    *(_OWORD *)v6 = 0u;
    v7 = 0u;
    v5 = 0;
    memset(&v4, 0, sizeof(v4));
    time(&v5);
    localtime_r(&v5, &v4);
    strftime(v6, 0x80uLL, "%a %b %e %H:%M:%S %Z %Y", &v4);
    if ((FILE *)*MEMORY[0x1E0C80C20] != a1 && *MEMORY[0x1E0C80C10] != (_QWORD)a1)
      fprintf(a1, "\n\f\n** Log started %s **\n\n", v6);
    setlinebuf(a1);
  }
  return a1 != 0;
}

void x_close_log_file(void)
{
  BOOL v0;

  if (x_log_file_handle)
    v0 = x_log_file_handle == *MEMORY[0x1E0C80C20];
  else
    v0 = 1;
  if (!v0 && x_log_file_handle != *MEMORY[0x1E0C80C10])
  {
    fclose((FILE *)x_log_file_handle);
    x_log_file_handle = 0;
    if (x_log_file_name)
    {
      free((void *)x_log_file_name);
      x_log_file_name = 0;
    }
  }
}

char *x_set_log_filename(const char *a1)
{
  const char *v2;
  FILE *v3;
  FILE *v4;
  FILE **v5;
  char *result;
  FILE *v7;
  int *v8;
  char *v9;

  if (!strcmp(a1, "stdout"))
  {
    v5 = (FILE **)MEMORY[0x1E0C80C20];
LABEL_10:
    v4 = *v5;
    goto LABEL_11;
  }
  if (!strcmp(a1, "stderr"))
  {
    v5 = (FILE **)MEMORY[0x1E0C80C10];
    goto LABEL_10;
  }
  if (getenv("X_LOG_TRUNCATE"))
    v2 = "w+";
  else
    v2 = "r+";
  v3 = fopen(a1, v2);
  if (v3)
  {
    v4 = v3;
    fseeko(v3, 0, 2);
  }
  else
  {
    v4 = fopen(a1, "w+");
    if (!v4)
    {
      v7 = (FILE *)*MEMORY[0x1E0C80C10];
      v8 = __error();
      v9 = strerror(*v8);
      return (char *)fprintf(v7, "Unable to open log file for writing: %s\n%s\n", a1, v9);
    }
  }
LABEL_11:
  result = (char *)x_set_log_file(v4);
  if ((_DWORD)result)
  {
    result = strdup(a1);
    x_log_file_name = (uint64_t)result;
  }
  return result;
}

void x_log_crash(char *a1, ...)
{
  NSObject *v2;
  char *v3;
  uint8_t buf[4];
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a1);
  v6 = *MEMORY[0x1E0C80C00];
  if (x_log_crash_(char const*,char *)::message)
  {
    free((void *)x_log_crash_(char const*,char *)::message);
    x_log_crash_(char const*,char *)::message = 0;
  }
  if (a1)
    vasprintf((char **)&x_log_crash_(char const*,char *)::message, a1, va);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v2 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v5 = x_log_crash_(char const*,char *)::message;
      _os_log_impl(&dword_184457000, v2, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
    }
  }
  if (CADeviceHasInternalDiagnostics::once != -1)
    dispatch_once(&CADeviceHasInternalDiagnostics::once, &__block_literal_global_110_9865);
  if (CADeviceHasInternalDiagnostics::internal)
    v3 = (char *)x_log_crash_(char const*,char *)::message;
  else
    v3 = a1;
  qword_1EDD10CA8 = (uint64_t)v3;
}

void sub_1845DF040(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = v1 + 2;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (!v5)
    (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

void CA::downsample_image(CA *this, void *a2, size_t a3, size_t a4, size_t a5, unsigned __int16 *a6, size_t a7, char a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, unsigned int a13)
{
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  vImage_Flags v30;
  int v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  unsigned __int16 *v36;
  unint64_t i;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  CGColorSpace *v41;
  CGImage *v42;
  _BYTE *v43;
  CGContext *v44;
  size_t bitsPerComponent;
  unsigned int bitmapInfo;
  CGDataProvider *provider;
  vImage_AffineTransform transform;
  vImage_Buffer dest;
  vImage_Buffer src;
  uint16_t backColor[4];
  uint64_t v52;
  CGRect v53;

  v23 = this;
  v52 = *MEMORY[0x1E0C80C00];
  v24 = vcvtpd_u64_f64(a11 + a9);
  v25 = vcvtpd_u64_f64(a12 + a10);
  if (this > 0x23)
    goto LABEL_11;
  if (((1 << (char)this) & 0x60070F) == 0)
  {
    if (((1 << (char)this) & 0xA000000C0) != 0)
      return;
LABEL_11:
    if ((a8 & 4) != 0)
      return;
    provider = CGDataProviderCreateWithData(0, a2, a5 * a3, 0);
    if (v23 > 0x23)
    {
      v32 = 0;
      bitmapInfo = 0;
    }
    else
    {
      bitmapInfo = dword_184750360[v23];
      v32 = dword_1847503F0[v23];
      switch((_DWORD)v32)
      {
        case 0x10:
          v33 = 5;
          goto LABEL_38;
        case 0x40:
          v33 = 16;
          goto LABEL_38;
        case 0x20:
          v33 = 8;
LABEL_38:
          bitsPerComponent = v33;
          v41 = (CGColorSpace *)CAGetColorSpace(2u);
          v42 = CGImageCreate(a4, a5, bitsPerComponent, v32, a3, v41, bitmapInfo, provider, 0, 1, kCGRenderingIntentDefault);
          CGImageSetCachingFlags();
          CGDataProviderRelease(provider);
          v43 = CAGetCachedCGBitmapContext_(a6, v24, v25, v23, a7, v41);
          if (v43)
            v44 = (CGContext *)*((_QWORD *)v43 + 2);
          else
            v44 = 0;
          CGContextSetCompositeOperation();
          CGContextSetInterpolationQuality(v44, kCGInterpolationHigh);
          v53.origin.x = a9;
          v53.origin.y = a10;
          v53.size.width = a11;
          v53.size.height = a12;
          CGContextDrawImage(v44, v53, v42);
          CAReleaseCachedCGContext(v44);
          CGImageRelease(v42);
          return;
      }
    }
    v33 = 32;
    goto LABEL_38;
  }
  src.width = a4;
  src.rowBytes = a3;
  src.data = a2;
  src.height = a5;
  dest.width = v24;
  dest.rowBytes = a7;
  dest.data = a6;
  dest.height = v25;
  v26 = a11 / (double)a4;
  transform.a = v26;
  v27 = a12 / (double)a5;
  transform.b = 0.0;
  transform.c = 0.0;
  v28 = a9;
  transform.d = v27;
  transform.tx = v28;
  v29 = a10;
  transform.ty = v29;
  if ((a8 & 2) != 0)
    v30 = 8;
  else
    v30 = 24;
  v31 = dword_184750480[this];
  switch(v31)
  {
    case 8:
      *(_QWORD *)backColor = 0;
      vImageAffineWarp_ARGB16U(&src, &dest, 0, &transform, backColor, v30);
      if ((a8 & 1) == 0 && v25)
      {
        v34 = 0;
        v35 = a6 + 2;
        do
        {
          v36 = v35;
          for (i = v24; i; --i)
          {
            v38 = v36[1];
            v39 = *(v36 - 2);
            if (v38 < v39)
              LOWORD(v39) = v36[1];
            *(v36 - 2) = v39;
            v40 = *(v36 - 1);
            if (v38 < v40)
              LOWORD(v40) = v38;
            *(v36 - 1) = v40;
            if (v38 >= *v36)
              LOWORD(v38) = *v36;
            *v36 = v38;
            v36 += 4;
          }
          ++v34;
          v35 = (unsigned __int16 *)((char *)v35 + a7);
        }
        while (v34 != v25);
      }
      break;
    case 4:
      *(_DWORD *)backColor = 0;
      vImageAffineWarp_ARGB8888(&src, &dest, 0, &transform, (const uint8_t *)backColor, v30);
      if ((a8 & 1) == 0)
      {
        if (v23 == 1)
        {
          vImageClipToAlpha_RGBA8888(&dest, &dest, 0);
        }
        else if (!v23)
        {
          vImageClipToAlpha_ARGB8888(&dest, &dest, 0);
        }
      }
      break;
    case 1:
      vImageAffineWarp_Planar8(&src, &dest, 0, &transform, 0, v30);
      break;
  }
}

void CA::Render::Layer::show(CA::Render::Layer *this, const CGAffineTransform *a2, uint64_t a3)
{
  NSObject *v6;
  int v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  int v24;
  unsigned int v25;
  CA::Render *v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  int v30;
  NSObject *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  NSObject *v36;
  int v37;
  NSObject *v38;
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  unsigned int v43;
  int v44;
  NSObject *v45;
  const char *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  const char *v50;
  int v51;
  NSObject *v52;
  const char *v53;
  const char *v54;
  const char *v55;
  const char *v56;
  const char *v57;
  const char *v58;
  const char *v59;
  const char *v60;
  const char *v61;
  const char *v62;
  const char *v63;
  unsigned int v64;
  uint64_t v65;
  NSObject *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  const char *v71;
  NSObject *v72;
  NSObject *v73;
  NSObject *v74;
  uint64_t v75;
  float32x4_t v81;
  uint16x4_t v82;
  NSObject *v83;
  float32x2_t *v84;
  double v86;
  float v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  const char *v95;
  const char *v96;
  uint64_t v97;
  unsigned int v98;
  const char *v99;
  const char *v100;
  NSObject *v101;
  NSObject *v102;
  NSObject *v103;
  NSObject *v104;
  NSObject *v105;
  unsigned int v106;
  uint64_t v107;
  _QWORD *v108;
  NSObject *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  const char *v116;
  const char *v117;
  uint64_t v118;
  NSObject *v119;
  uint64_t v120;
  float v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  double v125;
  double v126;
  double v127;
  const char *v128;
  NSObject *v129;
  uint32_t v130;
  NSObject *v131;
  uint64_t v132;
  uint64_t v133;
  float32x4_t v134;
  float32x4_t v135;
  NSObject *v136;
  _BOOL4 v137;
  uint64_t v138;
  float v139;
  uint64_t v140;
  NSObject *v141;
  _BOOL4 v142;
  uint64_t v143;
  float v144;
  float32x4_t *v145;
  uint64_t v146;
  float32x2_t *v147;
  float64x2_t v148;
  float v149;
  double v150;
  NSObject *v151;
  uint64_t v152;
  const char *v153;
  NSObject *v154;
  uint32_t v155;
  NSObject *v156;
  uint64_t v157;
  float32x4_t v158;
  float32x4_t v159;
  NSObject *v160;
  _BOOL4 v161;
  uint64_t v162;
  float v163;
  uint64_t v164;
  NSObject *v165;
  _BOOL4 v166;
  uint64_t v167;
  float v168;
  uint64_t v169;
  uint16x4_t v170;
  NSObject *v171;
  float *v172;
  double v173;
  double v174;
  double v175;
  float v176;
  NSObject *v177;
  uint64_t v178;
  NSObject *v179;
  NSObject *v180;
  int v181;
  NSObject *v182;
  const char *v183;
  NSObject *v184;
  unsigned int v185;
  int v186;
  NSObject *v187;
  const char *v188;
  const char *v189;
  const char *v190;
  const char *v191;
  const char *v192;
  uint64_t v193;
  int v194;
  NSObject *v195;
  NSObject *v196;
  const char *v197;
  NSObject *v198;
  NSObject *v199;
  uint64_t v200;
  uint64_t v201;
  NSObject *v202;
  const char *v203;
  uint64_t v204;
  NSObject *v205;
  const char *v206;
  uint64_t v207;
  NSObject *v208;
  uint64_t v209;
  float v210;
  uint64_t v211;
  NSObject *v212;
  uint64_t v213;
  float v214;
  NSObject *v215;
  NSObject *v216;
  NSObject *v217;
  uint64_t v218;
  uint64_t v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  NSObject *v223;
  NSObject *v224;
  uint64_t v225;
  NSObject *v226;
  NSObject *v227;
  uint64_t v228;
  NSObject *v229;
  NSObject *v230;
  NSObject *v231;
  uint64_t v232;
  NSObject *v233;
  uint64_t v234;
  float v235;
  uint64_t v236;
  NSObject *v237;
  uint64_t v238;
  float v239;
  uint64_t v240;
  NSObject *v241;
  uint64_t v242;
  NSObject *v243;
  NSObject *v244;
  NSObject *v245;
  NSObject *v246;
  NSObject *v247;
  uint64_t v248;
  NSObject *v249;
  unsigned int v250;
  uint64_t v251;
  float v252;
  NSObject *v253;
  NSObject *v254;
  NSObject *v255;
  NSObject *v256;
  NSObject *v257;
  NSObject *v258;
  NSObject *v259;
  NSObject *v260;
  NSObject *v261;
  NSObject *v262;
  NSObject *v263;
  int v264;
  NSObject *v265;
  const char *v266;
  uint64_t v267;
  float32x4_t v268;
  uint16x4_t v269;
  NSObject *v270;
  float32x2_t *v271;
  float64x2_t v272;
  float v273;
  double v274;
  NSObject *v275;
  unsigned int v276;
  uint64_t v277;
  float v278;
  float v279;
  NSObject *v280;
  uint64_t v281;
  float v282;
  uint64_t v283;
  NSObject *v284;
  uint64_t v285;
  NSObject *v286;
  NSObject *v287;
  NSObject *v288;
  NSObject *v289;
  NSObject *v290;
  NSObject *v291;
  NSObject *v292;
  NSObject *v293;
  uint64_t v294;
  NSObject *v295;
  NSObject *v296;
  NSObject *v297;
  NSObject *v298;
  NSObject *v299;
  uint64_t v300;
  NSObject *v301;
  NSObject *v302;
  uint64_t v303;
  NSObject *v304;
  NSObject *v305;
  uint64_t v306;
  NSObject *v307;
  NSObject *v308;
  uint64_t v309;
  NSObject *v310;
  NSObject *v311;
  NSObject *v312;
  NSObject *v313;
  uint64_t v314;
  NSObject *v315;
  NSObject *v316;
  _QWORD *v317;
  CA::Render *v318;
  NSObject *v319;
  NSObject *v320;
  NSObject *v321;
  NSObject *v322;
  _BYTE buf[32];
  _BYTE v324[20];
  __int16 v325;
  const char *v326;
  __int16 v327;
  const char *v328;
  __int16 v329;
  const char *v330;
  __int16 v331;
  const char *v332;
  __int16 v333;
  const char *v334;
  __int16 v335;
  uint64_t v336;
  __int16 v337;
  uint64_t v338;
  uint64_t v339;
  unsigned __int128 v340;

  v339 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2 == 386)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v322 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v322, OS_LOG_TYPE_DEFAULT, "(~~~~ Truncated layers ~~~~)", buf, 2u);
      }
    }
  }
  else if (a2 > 0x242)
  {
    return;
  }
  if ((a3 & 1) != 0)
  {
    CA::Render::Layer::show_compressed((uint64_t)this, (int)a2, a3);
    return;
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v6 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *((_DWORD *)this + 3);
      v8 = "container ";
      if ((v7 & 0x100) != 0)
        v9 = "transform-";
      else
        v9 = "";
      if ((v7 & 0x800) == 0)
        v8 = "";
      v11 = *((_QWORD *)this + 6);
      v10 = *((_QWORD *)this + 7);
      v12 = (_QWORD *)*((_QWORD *)this + 16);
      if (v12)
      {
        v13 = v12[24];
        v15 = v12[21];
        v14 = v12[22];
        v16 = v12[23];
      }
      else
      {
        v13 = 0;
        v14 = 0x3FE0000000000000;
        if ((*((_BYTE *)this + 45) & 0x40) != 0)
          v14 = 0;
        v16 = 0;
        v15 = v14;
      }
      v17 = (const char *)*((_QWORD *)this + 8);
      v18 = (const char *)*((_QWORD *)this + 9);
      v20 = (const char *)*((_QWORD *)this + 10);
      v19 = (const char *)*((_QWORD *)this + 11);
      *(_DWORD *)buf = 136317954;
      *(_QWORD *)&buf[4] = v9;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v8;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v11;
      *(_WORD *)v324 = 2048;
      *(_QWORD *)&v324[2] = v10;
      *(_WORD *)&v324[10] = 2048;
      *(_QWORD *)&v324[12] = v13;
      v325 = 2048;
      v326 = v17;
      v327 = 2048;
      v328 = v18;
      v329 = 2048;
      v330 = v20;
      v331 = 2048;
      v332 = v19;
      v333 = 2048;
      v334 = (const char *)v15;
      v335 = 2048;
      v336 = v14;
      v337 = 2048;
      v338 = v16;
      _os_log_impl(&dword_184457000, v6, OS_LOG_TYPE_DEFAULT, "(%slayer %s[%.10g %.10g %.10g] [%.10g %.10g %.10g %.10g] [%g %g %g]", buf, 0x7Au);
    }
  }
  v21 = *((_QWORD *)this + 18);
  if (v21)
  {
    if (*(_DWORD *)(v21 + 92))
    {
      CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v22 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v23 = "es";
          v24 = *(_DWORD *)(v21 + 92) >> 28;
          if (v24 == 1)
            v23 = "";
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&buf[4] = v24;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = v23;
          _os_log_impl(&dword_184457000, v22, OS_LOG_TYPE_DEFAULT, "[%d pass%s", buf, 0x12u);
        }
      }
      v25 = *(_DWORD *)(v21 + 92);
      if ((v25 & 0x1FFFF) != 0)
      {
        CA::Render::print_offscreen_flags((CA::Render *)(v25 & 0x1FFFF));
        v25 = *(_DWORD *)(v21 + 92);
      }
      v26 = (CA::Render *)((v25 >> 17) & 0x7FF);
      if ((_DWORD)v26)
        CA::Render::print_group_flags(v26);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v27 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v27, OS_LOG_TYPE_DEFAULT, "]", buf, 2u);
        }
      }
    }
    if (*(_QWORD *)(v21 + 96))
    {
      CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v28 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v28, OS_LOG_TYPE_DEFAULT, "[", buf, 2u);
        }
      }
      *((_QWORD *)&v340 + 1) = CA::Render::handle_flag_names;
      *(_QWORD *)&v340 = 0;
      CA::Render::print_flags(*(_QWORD *)(v21 + 96), v340, (const char *const *)0x3D);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v29 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v29, OS_LOG_TYPE_DEFAULT, "]", buf, 2u);
        }
      }
      v30 = *(_DWORD *)(v21 + 120);
      if (v30 >= *(_DWORD *)(v21 + 124))
        v30 = *(_DWORD *)(v21 + 124);
      if (v30 >= 1)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v31 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            v32 = *(_DWORD *)(v21 + 112);
            v33 = *(_DWORD *)(v21 + 116);
            v34 = *(_DWORD *)(v21 + 120);
            v35 = *(_DWORD *)(v21 + 124);
            *(_DWORD *)buf = 67109888;
            *(_DWORD *)&buf[4] = v32;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v33;
            *(_WORD *)&buf[14] = 1024;
            *(_DWORD *)&buf[16] = v34;
            *(_WORD *)&buf[20] = 1024;
            *(_DWORD *)&buf[22] = v35;
            _os_log_impl(&dword_184457000, v31, OS_LOG_TYPE_DEFAULT, " [%d %d %d %d]", buf, 0x1Au);
          }
        }
      }
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v36 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v37 = *(_DWORD *)(v21 + 76);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v37;
          _os_log_impl(&dword_184457000, v36, OS_LOG_TYPE_DEFAULT, " image seed %d", buf, 8u);
        }
      }
    }
  }
  if ((a3 & 2) == 0 && *((_QWORD *)this + 15))
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v38 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v38, OS_LOG_TYPE_DEFAULT, "(name ", buf, 2u);
      }
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 15) + 40))(*((_QWORD *)this + 15), ((_DWORD)a2 + 1), a3);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v39 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v39, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 41) & 1) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v40 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v40, OS_LOG_TYPE_DEFAULT, "(hidden true)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 40) & 0x40) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v41 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v41, OS_LOG_TYPE_DEFAULT, "(masksToBounds true)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 41) & 2) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v42 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v42, OS_LOG_TYPE_DEFAULT, "(geometryFlipped true)", buf, 2u);
      }
    }
  }
  v43 = *((_DWORD *)this + 9);
  v44 = (v43 >> 8) & 0xF;
  if (v44 != 15)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v45 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v46 = " left";
        if ((v43 & 0x100) == 0)
          v46 = "";
        v47 = " right";
        if ((v43 & 0x200) == 0)
          v47 = "";
        v48 = " bottom";
        if ((v43 & 0x400) == 0)
          v48 = "";
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = v46;
        v49 = " top";
        if ((v43 & 0x800) == 0)
          v49 = "";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v47;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = v48;
        *(_WORD *)v324 = 2080;
        *(_QWORD *)&v324[2] = v49;
        if (v44)
          v50 = "";
        else
          v50 = " none";
        *(_WORD *)&v324[10] = 2080;
        *(_QWORD *)&v324[12] = v50;
        _os_log_impl(&dword_184457000, v45, OS_LOG_TYPE_DEFAULT, "(edgeAntialiasingMask%s%s%s%s%s)", buf, 0x34u);
      }
    }
  }
  v51 = *((_DWORD *)this + 9);
  if ((v51 & 0x7FF00000) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v52 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v53 = " display";
        v54 = "";
        if ((v51 & 0x100000) == 0)
          v53 = "";
        v55 = " snapshot";
        if ((v51 & 0x200000) == 0)
          v55 = "";
        v56 = " unprotected";
        if ((v51 & 0x400000) == 0)
          v56 = "";
        *(_DWORD *)buf = 136317698;
        *(_QWORD *)&buf[4] = v53;
        v57 = " protected";
        if ((v51 & 0x800000) == 0)
          v57 = "";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v55;
        v58 = " inhibit-cloning";
        if ((v51 & 0x1000000) == 0)
          v58 = "";
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = v56;
        v59 = " occlusion-detection";
        if ((v51 & 0x2000000) == 0)
          v59 = "";
        *(_WORD *)v324 = 2080;
        *(_QWORD *)&v324[2] = v57;
        v60 = " secure";
        if ((v51 & 0x4000000) == 0)
          v60 = "";
        *(_WORD *)&v324[10] = 2080;
        *(_QWORD *)&v324[12] = v58;
        v61 = " display-stream";
        if ((v51 & 0x8000000) == 0)
          v61 = "";
        v325 = 2080;
        v326 = v59;
        v62 = " never-clone";
        if ((v51 & 0x10000000) == 0)
          v62 = "";
        v327 = 2080;
        v328 = v60;
        v63 = " contextual-assistance";
        if ((v51 & 0x20000000) == 0)
          v63 = "";
        v329 = 2080;
        v330 = v61;
        v331 = 2080;
        v332 = v62;
        v333 = 2080;
        v334 = v63;
        if ((v51 & 0x40000000) != 0)
          v54 = " allowed-remote-control";
        v335 = 2080;
        v336 = (uint64_t)v54;
        _os_log_impl(&dword_184457000, v52, OS_LOG_TYPE_DEFAULT, "(disableUpdateMask%s%s%s%s%s%s%s%s%s%s%s)", buf, 0x70u);
      }
    }
  }
  if ((*((_BYTE *)this + 40) & 0x30) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    v64 = (*((_DWORD *)this + 10) >> 4) & 3;
    if (v64 == 3)
      v65 = 0;
    else
      v65 = -[__CFString cStringUsingEncoding:]((id)CAAtomGetString(CA::Render::tone_map_mode_atoms[v64]), "cStringUsingEncoding:", 4);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v66 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v67 = "<unknown>";
        if (v65)
          v67 = (const char *)v65;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v67;
        _os_log_impl(&dword_184457000, v66, OS_LOG_TYPE_DEFAULT, "(toneMapMode %s)", buf, 0xCu);
      }
    }
  }
  if ((*((_DWORD *)this + 9) & 0xF000) != 0x9000)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    v68 = (unsigned __int16)*((_DWORD *)this + 9) >> 12;
    if (v68 > 0xB)
      v69 = 0;
    else
      v69 = -[__CFString cStringUsingEncoding:]((id)CAAtomGetString(CA::Render::gravity_atoms[v68]), "cStringUsingEncoding:", 4);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v70 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v71 = "<unknown>";
        if (v69)
          v71 = (const char *)v69;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v71;
        _os_log_impl(&dword_184457000, v70, OS_LOG_TYPE_DEFAULT, "(contentsGravity %s)", buf, 0xCu);
      }
    }
  }
  if ((*((_BYTE *)this + 42) & 2) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v72 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v72, OS_LOG_TYPE_DEFAULT, "(contentsOpaque true)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 41) & 0x40) == 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v73 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v73, OS_LOG_TYPE_DEFAULT, "(contentsDither false)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 42) & 1) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v74 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v74, OS_LOG_TYPE_DEFAULT, "(contentsAlignsToPixels true)", buf, 2u);
      }
    }
  }
  v75 = *((_QWORD *)this + 16);
  __asm { FMOV            V0.4S, #1.0 }
  v81 = _Q0;
  if (v75)
    v81 = *(float32x4_t *)(v75 + 264);
  v82 = (uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v81, _Q0)));
  v82.i16[0] = vmaxv_u16(v82);
  if ((v82.i8[0] & 1) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v83 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v84 = (float32x2_t *)*((_QWORD *)this + 16);
        if (v84)
        {
          _Q0 = vcvtq_f64_f32(v84[33]);
          v86 = v84[34].f32[0];
          v87 = v84[34].f32[1];
        }
        else
        {
          __asm { FMOV            V0.2D, #1.0 }
          v87 = 1.0;
          v86 = 1.0;
        }
        *(_DWORD *)buf = 134218752;
        *(float64_t *)&buf[4] = _Q0.f64[0];
        *(_WORD *)&buf[12] = 2048;
        *(float64_t *)((unint64_t)buf | 0xE) = _Q0.f64[1];
        *(_WORD *)&buf[22] = 2048;
        *(double *)&buf[24] = v86;
        *(_WORD *)v324 = 2048;
        *(double *)&v324[2] = v87;
        _os_log_impl(&dword_184457000, v83, OS_LOG_TYPE_DEFAULT, "(contentsMultiplyColor %.3g %.3g %.3g %.3g)", buf, 0x2Au);
      }
    }
  }
  v88 = *((_QWORD *)this + 16);
  if (v88)
  {
    if ((*(_BYTE *)(v88 + 320) & 1) != 0)
    {
      CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v89 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v90 = *((_QWORD *)this + 16);
          if (v90)
            LODWORD(v90) = *(_BYTE *)(v90 + 320) & 1;
          v91 = CA::Render::Layer::show(unsigned int,unsigned int)const::names[v90];
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v91;
          _os_log_impl(&dword_184457000, v89, OS_LOG_TYPE_DEFAULT, "(contentsSwizzle %s)", buf, 0xCu);
        }
      }
    }
    v92 = *((_QWORD *)this + 16);
    if (v92)
    {
      v93 = *(_QWORD *)(v92 + 16);
      if (!v93
        || ((v94 = *(_DWORD *)(v93 + 16), v95 = (const char *)(v93 + 24), v94 >= 0x10)
          ? (v96 = v95)
          : (v96 = (const char *)&CA::Mat4Impl::mat4_identity_double),
            CA::Render::show_transform((CA::Render *)"transform", v96, &a2->a),
            (v92 = *((_QWORD *)this + 16)) != 0))
      {
        v97 = *(_QWORD *)(v92 + 24);
        if (v97)
        {
          v98 = *(_DWORD *)(v97 + 16);
          v99 = (const char *)(v97 + 24);
          if (v98 >= 0x10)
            v100 = v99;
          else
            v100 = (const char *)&CA::Mat4Impl::mat4_identity_double;
          CA::Render::show_transform((CA::Render *)"sublayerTransform", v100, &a2->a);
        }
      }
    }
  }
  if ((*((_BYTE *)this + 41) & 4) == 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v101 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v101, OS_LOG_TYPE_DEFAULT, "(doubleSided false)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 41) & 8) == 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v102 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v102, OS_LOG_TYPE_DEFAULT, "(sortsSublayers false)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 41) & 0x10) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v103 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v103, OS_LOG_TYPE_DEFAULT, "(usesWebKitBehavior true)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 41) & 0x20) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v104 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v104, OS_LOG_TYPE_DEFAULT, "(flipsHorizontalAxis true)", buf, 2u);
      }
    }
  }
  v82.i8[0] = *((_BYTE *)this + 32);
  if ((float)((float)v82.u32[0] * 0.0039216) != 1.0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v105 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        LOBYTE(v106) = *((_BYTE *)this + 32);
        *(_DWORD *)buf = 134217984;
        *(double *)&buf[4] = (float)((float)v106 * 0.0039216);
        _os_log_impl(&dword_184457000, v105, OS_LOG_TYPE_DEFAULT, "(opacity %g)", buf, 0xCu);
      }
    }
  }
  v107 = *((_QWORD *)this + 16);
  if (!v107)
    goto LABEL_229;
  v108 = *(_QWORD **)(v107 + 72);
  if (v108)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v109 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v110 = v108[3];
        v111 = v108[4];
        v112 = v108[5];
        v113 = v108[6];
        v114 = v108[7];
        v115 = (const char *)v108[8];
        v116 = (const char *)v108[9];
        v117 = (const char *)v108[10];
        *(_DWORD *)buf = 134219776;
        *(_QWORD *)&buf[4] = v110;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v111;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v112;
        *(_WORD *)v324 = 2048;
        *(_QWORD *)&v324[2] = v113;
        *(_WORD *)&v324[10] = 2048;
        *(_QWORD *)&v324[12] = v114;
        v325 = 2048;
        v326 = v115;
        v327 = 2048;
        v328 = v116;
        v329 = 2048;
        v330 = v117;
        _os_log_impl(&dword_184457000, v109, OS_LOG_TYPE_DEFAULT, "(cornerRadii (%g %g) (%g %g) (%g %g) (%g %g))", buf, 0x52u);
      }
    }
  }
  v118 = *((_QWORD *)this + 16);
  if (!v118)
    goto LABEL_229;
  if (*(float *)(v118 + 228) != 0.0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v119 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v120 = *((_QWORD *)this + 16);
        v121 = 0.0;
        if (v120)
          v121 = *(float *)(v120 + 228);
        *(_DWORD *)buf = 134217984;
        *(double *)&buf[4] = v121;
        _os_log_impl(&dword_184457000, v119, OS_LOG_TYPE_DEFAULT, "(cornerRadius %g)", buf, 0xCu);
      }
    }
  }
  v122 = *((_QWORD *)this + 16);
  if (!v122 || !*(_QWORD *)(v122 + 80))
  {
LABEL_229:
    if ((*((_BYTE *)this + 45) & 4) == 0)
      goto LABEL_240;
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
      goto LABEL_236;
    v123 = x_log_category_render;
    if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      goto LABEL_240;
    v124 = *((float *)this + 4);
    v125 = *((float *)this + 5);
    v126 = *((float *)this + 6);
    v127 = *((float *)this + 7);
    *(_DWORD *)buf = 134218752;
    *(double *)&buf[4] = v124;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v125;
    *(_WORD *)&buf[22] = 2048;
    *(double *)&buf[24] = v126;
    *(_WORD *)v324 = 2048;
    *(double *)&v324[2] = v127;
    v128 = "(backgroundColor (%.3g %.3g %.3g %.0g))";
    v129 = v123;
    v130 = 42;
    goto LABEL_239;
  }
  CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v131 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184457000, v131, OS_LOG_TYPE_DEFAULT, "(backgroundColor ", buf, 2u);
    }
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 16) + 80) + 40))(*(_QWORD *)(*((_QWORD *)this + 16) + 80), ((_DWORD)a2 + 1), a3);
  if (x_log_hook_p())
  {
LABEL_236:
    x_log_();
    goto LABEL_240;
  }
  v132 = x_log_category_render;
  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    v128 = ")";
    v129 = v132;
    v130 = 2;
LABEL_239:
    _os_log_impl(&dword_184457000, v129, OS_LOG_TYPE_DEFAULT, v128, buf, v130);
  }
LABEL_240:
  v133 = *((_QWORD *)this + 16);
  v134 = (float32x4_t)xmmword_18474DFE0;
  v135 = (float32x4_t)xmmword_18474DFE0;
  if (!v133)
  {
LABEL_265:
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v135, v134)))) & 1) == 0)
      goto LABEL_279;
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
      goto LABEL_273;
    v146 = x_log_category_render;
    if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      goto LABEL_279;
    v147 = (float32x2_t *)*((_QWORD *)this + 16);
    if (v147)
    {
      v148 = vcvtq_f64_f32(v147[30]);
      v149 = v147[31].f32[1];
      v150 = v147[31].f32[0];
    }
    else
    {
      v148 = 0uLL;
      v149 = 1.0;
      v150 = 0.0;
    }
    *(_DWORD *)buf = 134218752;
    *(float64_t *)&buf[4] = v148.f64[0];
    *(_WORD *)&buf[12] = 2048;
    *(float64_t *)((unint64_t)buf | 0xE) = v148.f64[1];
    *(_WORD *)&buf[22] = 2048;
    *(double *)&buf[24] = v150;
    *(_WORD *)v324 = 2048;
    *(double *)&v324[2] = v149;
    v153 = "(borderColor (%.3g %.3g %.3g %.0g))";
    v154 = v146;
    v155 = 42;
    goto LABEL_278;
  }
  if (*(float *)(v133 + 232) != 0.0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v136 = x_log_category_render;
      v137 = os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT);
      v134 = (float32x4_t)xmmword_18474DFE0;
      if (!v137)
        goto LABEL_250;
      v138 = *((_QWORD *)this + 16);
      if (v138)
        v139 = *(float *)(v138 + 232);
      else
        v139 = 0.0;
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v139;
      _os_log_impl(&dword_184457000, v136, OS_LOG_TYPE_DEFAULT, "(borderOffset %g)", buf, 0xCu);
    }
    v134 = (float32x4_t)xmmword_18474DFE0;
  }
LABEL_250:
  v140 = *((_QWORD *)this + 16);
  v135 = v134;
  if (!v140)
    goto LABEL_265;
  if (*(float *)(v140 + 236) == 0.0)
    goto LABEL_260;
  CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v141 = x_log_category_render;
    v142 = os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT);
    v134 = (float32x4_t)xmmword_18474DFE0;
    if (!v142)
      goto LABEL_260;
    v143 = *((_QWORD *)this + 16);
    if (v143)
      v144 = *(float *)(v143 + 236);
    else
      v144 = 0.0;
    *(_DWORD *)buf = 134217984;
    *(double *)&buf[4] = v144;
    _os_log_impl(&dword_184457000, v141, OS_LOG_TYPE_DEFAULT, "(borderWidth %g)", buf, 0xCu);
  }
  v134 = (float32x4_t)xmmword_18474DFE0;
LABEL_260:
  v145 = (float32x4_t *)*((_QWORD *)this + 16);
  v135 = v134;
  if (!v145)
    goto LABEL_265;
  if (!v145[8].i64[0])
  {
    v135 = v145[15];
    goto LABEL_265;
  }
  CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v151 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184457000, v151, OS_LOG_TYPE_DEFAULT, "(borderColor ", buf, 2u);
    }
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 16) + 128) + 40))(*(_QWORD *)(*((_QWORD *)this + 16) + 128), ((_DWORD)a2 + 1), a3);
  if (x_log_hook_p())
  {
LABEL_273:
    x_log_();
    goto LABEL_279;
  }
  v152 = x_log_category_render;
  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    v153 = ")";
    v154 = v152;
    v155 = 2;
LABEL_278:
    _os_log_impl(&dword_184457000, v154, OS_LOG_TYPE_DEFAULT, v153, buf, v155);
  }
LABEL_279:
  if ((*((_BYTE *)this + 44) & 0x20) == 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v156 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v156, OS_LOG_TYPE_DEFAULT, "(borderPathIsBounds false)", buf, 2u);
      }
    }
  }
  v157 = *((_QWORD *)this + 16);
  v158 = (float32x4_t)xmmword_18474DFE0;
  v159 = (float32x4_t)xmmword_18474DFE0;
  if (v157)
  {
    if (*(float *)(v157 + 316) == 0.0)
      goto LABEL_294;
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v160 = x_log_category_render;
      v161 = os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT);
      v158 = (float32x4_t)xmmword_18474DFE0;
      if (!v161)
        goto LABEL_294;
      v162 = *((_QWORD *)this + 16);
      if (v162)
        v163 = *(float *)(v162 + 316);
      else
        v163 = 0.0;
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v163;
      _os_log_impl(&dword_184457000, v160, OS_LOG_TYPE_DEFAULT, "(rimOpacity %g)", buf, 0xCu);
    }
    v158 = (float32x4_t)xmmword_18474DFE0;
LABEL_294:
    v164 = *((_QWORD *)this + 16);
    v159 = v158;
    if (!v164)
      goto LABEL_306;
    if (*(float *)(v164 + 296) == 0.0)
      goto LABEL_304;
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v165 = x_log_category_render;
      v166 = os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT);
      v158 = (float32x4_t)xmmword_18474DFE0;
      if (!v166)
        goto LABEL_304;
      v167 = *((_QWORD *)this + 16);
      if (v167)
        v168 = *(float *)(v167 + 296);
      else
        v168 = 0.0;
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v168;
      _os_log_impl(&dword_184457000, v165, OS_LOG_TYPE_DEFAULT, "(rimWidth %g)", buf, 0xCu);
    }
    v158 = (float32x4_t)xmmword_18474DFE0;
LABEL_304:
    v169 = *((_QWORD *)this + 16);
    v159 = v158;
    if (v169)
      v159 = *(float32x4_t *)(v169 + 300);
  }
LABEL_306:
  v170 = (uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v159, v158)));
  v170.i16[0] = vmaxv_u16(v170);
  if ((v170.i8[0] & 1) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v171 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v172 = (float *)*((_QWORD *)this + 16);
        if (v172)
        {
          v173 = v172[75];
          v174 = v172[76];
          v175 = v172[77];
          v176 = v172[78];
        }
        else
        {
          v176 = 1.0;
          v175 = 0.0;
          v173 = 0.0;
          v174 = 0.0;
        }
        *(_DWORD *)buf = 134218752;
        *(double *)&buf[4] = v173;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v174;
        *(_WORD *)&buf[22] = 2048;
        *(double *)&buf[24] = v175;
        *(_WORD *)v324 = 2048;
        *(double *)&v324[2] = v176;
        _os_log_impl(&dword_184457000, v171, OS_LOG_TYPE_DEFAULT, "(rimColor (%.3g %.3g %.3g %.0g))", buf, 0x2Au);
      }
    }
  }
  if ((*((_BYTE *)this + 44) & 0x10) == 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v177 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v177, OS_LOG_TYPE_DEFAULT, "(rimPathIsBounds false)", buf, 2u);
      }
    }
  }
  v178 = *((_QWORD *)this + 16);
  if (v178)
  {
    if (!*(_QWORD *)(v178 + 8)
      || (CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1)),
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 16) + 8) + 40))(*(_QWORD *)(*((_QWORD *)this + 16) + 8), ((_DWORD)a2 + 1), a3), (v178 = *((_QWORD *)this + 16)) != 0))
    {
      if (*(_QWORD *)(v178 + 56))
      {
        CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v179 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v179, OS_LOG_TYPE_DEFAULT, "(cornerContents ", buf, 2u);
          }
        }
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 16) + 56) + 40))(*(_QWORD *)(*((_QWORD *)this + 16) + 56), ((_DWORD)a2 + 1), a3);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v180 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v180, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
          }
        }
      }
    }
  }
  if ((*((_BYTE *)this + 40) & 3) == 0)
    goto LABEL_348;
  CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
  v181 = *((_DWORD *)this + 10) & 3;
  if (v181 == 3)
  {
    if (!x_log_hook_p())
    {
      v182 = x_log_category_render;
      if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        goto LABEL_348;
      *(_WORD *)buf = 0;
      v183 = "(cornerCurve ID1)";
      goto LABEL_347;
    }
LABEL_340:
    x_log_();
    goto LABEL_348;
  }
  if (v181 == 2)
  {
    if (!x_log_hook_p())
    {
      v182 = x_log_category_render;
      if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        goto LABEL_348;
      *(_WORD *)buf = 0;
      v183 = "(cornerCurve ID0)";
      goto LABEL_347;
    }
    goto LABEL_340;
  }
  if (v181 != 1)
    goto LABEL_348;
  if (x_log_hook_p())
    goto LABEL_340;
  v182 = x_log_category_render;
  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    v183 = "(cornerCurve continuous)";
LABEL_347:
    _os_log_impl(&dword_184457000, v182, OS_LOG_TYPE_DEFAULT, v183, buf, 2u);
  }
LABEL_348:
  if ((*((_BYTE *)this + 45) & 2) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v184 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v184, OS_LOG_TYPE_DEFAULT, "(cornerContentsMasksEdges true)", buf, 2u);
      }
    }
  }
  v185 = *((_DWORD *)this + 9);
  v186 = HIWORD(v185) & 0xF;
  if (v186 != 15)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v187 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v188 = " minX-minY";
        if ((v185 & 0x10000) == 0)
          v188 = "";
        v189 = " maxX-minY";
        if ((v185 & 0x20000) == 0)
          v189 = "";
        v190 = " minX-maxY";
        if ((v185 & 0x40000) == 0)
          v190 = "";
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = v188;
        v191 = " maxX-maxY";
        if ((v185 & 0x80000) == 0)
          v191 = "";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v189;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = v190;
        *(_WORD *)v324 = 2080;
        *(_QWORD *)&v324[2] = v191;
        if (v186)
          v192 = "";
        else
          v192 = " none";
        *(_WORD *)&v324[10] = 2080;
        *(_QWORD *)&v324[12] = v192;
        _os_log_impl(&dword_184457000, v187, OS_LOG_TYPE_DEFAULT, "(maskedCorners%s%s%s%s%s)", buf, 0x34u);
      }
    }
  }
  if (*((_QWORD *)this + 12))
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    v193 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 80))(*((_QWORD *)this + 12));
    if (v193)
      v194 = (*(unsigned __int8 *)(v193 + 14) >> 4) & 1;
    else
      v194 = 0;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v195 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v195, OS_LOG_TYPE_DEFAULT, "(contents ", buf, 2u);
      }
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v196 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v197 = "";
        if (v194)
          v197 = "backingStore ";
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v197;
        _os_log_impl(&dword_184457000, v196, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
      }
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 12) + 40))(*((_QWORD *)this + 12), ((_DWORD)a2 + 1), a3);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v198 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v198, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 41) & 0x80) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v199 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v199, OS_LOG_TYPE_DEFAULT, "(contentsScaling repeat)", buf, 2u);
      }
    }
  }
  if ((*((_DWORD *)this + 9) & 0xF0) != 0x10)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    v200 = *((_DWORD *)this + 9) >> 4;
    if (v200 > 0xA)
      v201 = 0;
    else
      v201 = -[__CFString cStringUsingEncoding:]((id)CAAtomGetString(CA::Render::image_filter_atoms[v200]), "cStringUsingEncoding:", 4);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v202 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v203 = "<unknown>";
        if (v201)
          v203 = (const char *)v201;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v203;
        _os_log_impl(&dword_184457000, v202, OS_LOG_TYPE_DEFAULT, "(magnificationFilter %s)", buf, 0xCu);
      }
    }
  }
  if ((*((_DWORD *)this + 9) & 0xF) != 1)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if ((*((_DWORD *)this + 9) & 0xFu) > 0xA)
      v204 = 0;
    else
      v204 = -[__CFString cStringUsingEncoding:]((id)CAAtomGetString(CA::Render::image_filter_atoms[*((_DWORD *)this + 9) & 0xF]), "cStringUsingEncoding:", 4);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v205 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v206 = "<unknown>";
        if (v204)
          v206 = (const char *)v204;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v206;
        _os_log_impl(&dword_184457000, v205, OS_LOG_TYPE_DEFAULT, "(minificationFilter %s)", buf, 0xCu);
      }
    }
  }
  v207 = *((_QWORD *)this + 16);
  if (v207)
  {
    v170.i32[0] = *(_DWORD *)(v207 + 292);
    if (*(float *)v170.i32 != 1.0)
    {
      CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v208 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v209 = *((_QWORD *)this + 16);
          if (v209)
            v210 = *(float *)(v209 + 292);
          else
            v210 = 1.0;
          *(_DWORD *)buf = 134217984;
          *(double *)&buf[4] = v210;
          _os_log_impl(&dword_184457000, v208, OS_LOG_TYPE_DEFAULT, "(gain %g)", buf, 0xCu);
        }
      }
    }
    v211 = *((_QWORD *)this + 16);
    if (v211)
    {
      v170.i32[0] = *(_DWORD *)(v211 + 288);
      if (*(float *)v170.i32 != 0.0)
      {
        CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v212 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            v213 = *((_QWORD *)this + 16);
            if (v213)
              v214 = *(float *)(v213 + 288);
            else
              v214 = 0.0;
            *(_DWORD *)buf = 134217984;
            *(double *)&buf[4] = v214;
            _os_log_impl(&dword_184457000, v212, OS_LOG_TYPE_DEFAULT, "(lodBias %g)", buf, 0xCu);
          }
        }
      }
    }
  }
  if ((*((_BYTE *)this + 45) & 0x10) == 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v215 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v215, OS_LOG_TYPE_DEFAULT, "(inheritsTiming false)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 45) & 0x20) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v216 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v216, OS_LOG_TYPE_DEFAULT, "(definesDisplayRegionOfInterest true)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 45) & 8) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v217 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v217, OS_LOG_TYPE_DEFAULT, "(contentsContainsSubtitles true)", buf, 2u);
      }
    }
  }
  v218 = *((_QWORD *)this + 16);
  if (v218)
  {
    v219 = *(_QWORD *)(v218 + 32);
    if (!v219)
      goto LABEL_796;
    if (*(_DWORD *)(v219 + 16) > 5u)
    {
      v222 = *(_OWORD *)(v219 + 40);
      *(_OWORD *)buf = *(_OWORD *)(v219 + 24);
      *(_OWORD *)&buf[16] = v222;
      v221 = *(_OWORD *)(v219 + 56);
    }
    else
    {
      v220 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
      *(_OWORD *)buf = *MEMORY[0x1E0C9BAA8];
      *(_OWORD *)&buf[16] = v220;
      v221 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
    }
    *(_OWORD *)v324 = v221;
    CA::Render::show_affine_transform((CA::Render *)"contentsTransform", buf, a2);
    v218 = *((_QWORD *)this + 16);
    if (v218)
    {
LABEL_796:
      if (*(_QWORD *)(v218 + 40))
      {
        CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v223 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v223, OS_LOG_TYPE_DEFAULT, "(contentsRect ", buf, 2u);
          }
        }
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 16) + 40) + 40))(*(_QWORD *)(*((_QWORD *)this + 16) + 40), ((_DWORD)a2 + 1), a3);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v224 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v224, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
          }
        }
      }
      v225 = *((_QWORD *)this + 16);
      if (v225)
      {
        if (*(_QWORD *)(v225 + 48))
        {
          CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v226 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184457000, v226, OS_LOG_TYPE_DEFAULT, "(contentsCenter ", buf, 2u);
            }
          }
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 16) + 48) + 40))(*(_QWORD *)(*((_QWORD *)this + 16) + 48), ((_DWORD)a2 + 1), a3);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v227 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184457000, v227, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
            }
          }
        }
        v228 = *((_QWORD *)this + 16);
        if (v228 && *(_QWORD *)(v228 + 64))
        {
          CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v229 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184457000, v229, OS_LOG_TYPE_DEFAULT, "(cornerContentsCenter ", buf, 2u);
            }
          }
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 16) + 64) + 40))(*(_QWORD *)(*((_QWORD *)this + 16) + 64), ((_DWORD)a2 + 1), a3);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v230 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184457000, v230, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
            }
          }
        }
      }
    }
  }
  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v231 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v231, OS_LOG_TYPE_DEFAULT, "(literalContentsCenter true)", buf, 2u);
      }
    }
  }
  v232 = *((_QWORD *)this + 16);
  if (!v232)
    goto LABEL_505;
  v170.i32[0] = *(_DWORD *)(v232 + 256);
  if (*(float *)v170.i32 != 1.0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v233 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v234 = *((_QWORD *)this + 16);
        if (v234)
          v235 = *(float *)(v234 + 256);
        else
          v235 = 1.0;
        *(_DWORD *)buf = 134217984;
        *(double *)&buf[4] = v235;
        _os_log_impl(&dword_184457000, v233, OS_LOG_TYPE_DEFAULT, "(contentsEDRStrength %g)", buf, 0xCu);
      }
    }
  }
  v236 = *((_QWORD *)this + 16);
  if (!v236)
    goto LABEL_505;
  v170.i32[0] = *(_DWORD *)(v236 + 260);
  if (*(float *)v170.i32 != 0.0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v237 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v238 = *((_QWORD *)this + 16);
        if (v238)
          v239 = *(float *)(v238 + 260);
        else
          v239 = 0.0;
        *(_DWORD *)buf = 134217984;
        *(double *)&buf[4] = v239;
        _os_log_impl(&dword_184457000, v237, OS_LOG_TYPE_DEFAULT, "(contentsMaximumDesiredEDR %g)", buf, 0xCu);
      }
    }
  }
  v240 = *((_QWORD *)this + 16);
  if (v240)
  {
    v170.i32[0] = *(_DWORD *)(v240 + 280);
  }
  else
  {
LABEL_505:
    v170.i8[0] = *((_BYTE *)this + 34);
    *(float *)v170.i32 = (float)v170.u32[0];
  }
  if (*(float *)v170.i32 != 1.0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v241 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v242 = *((_QWORD *)this + 16);
        if (v242)
        {
          v170.i32[0] = *(_DWORD *)(v242 + 280);
        }
        else
        {
          v170.i8[0] = *((_BYTE *)this + 34);
          *(float *)v170.i32 = (float)v170.u32[0];
        }
        *(_DWORD *)buf = 134217984;
        *(double *)&buf[4] = *(float *)v170.i32;
        _os_log_impl(&dword_184457000, v241, OS_LOG_TYPE_DEFAULT, "(contentsScale %g)", buf, 0xCu);
      }
    }
  }
  if ((*((_BYTE *)this + 42) & 4) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v243 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v243, OS_LOG_TYPE_DEFAULT, "(shouldRasterize true)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 42) & 8) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v244 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v244, OS_LOG_TYPE_DEFAULT, "(shouldFlatten true)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 42) & 0x10) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v245 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v245, OS_LOG_TYPE_DEFAULT, "(shouldReflatten true)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 42) & 0x20) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v246 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v246, OS_LOG_TYPE_DEFAULT, "(rasterizationPrefersDisplayCompositing true)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 42) & 0x40) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v247 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v247, OS_LOG_TYPE_DEFAULT, "(rasterizationPrefersWindowServerAwareBackdrops true)", buf, 2u);
      }
    }
  }
  v248 = *((_QWORD *)this + 16);
  if (v248)
  {
    v170.i32[0] = *(_DWORD *)(v248 + 284);
  }
  else
  {
    v170.i8[0] = *((_BYTE *)this + 35);
    *(float *)v170.i32 = (float)v170.u32[0];
  }
  if (*(float *)v170.i32 != 1.0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v249 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v251 = *((_QWORD *)this + 16);
        if (v251)
        {
          v252 = *(float *)(v251 + 284);
        }
        else
        {
          LOBYTE(v250) = *((_BYTE *)this + 35);
          v252 = (float)v250;
        }
        *(_DWORD *)buf = 134217984;
        *(double *)&buf[4] = v252;
        _os_log_impl(&dword_184457000, v249, OS_LOG_TYPE_DEFAULT, "(rasterizationScale %g)", buf, 0xCu);
      }
    }
  }
  if ((*((_BYTE *)this + 42) & 0x80) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v253 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v253, OS_LOG_TYPE_DEFAULT, "(preloadsCache true)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 43) & 1) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v254 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v254, OS_LOG_TYPE_DEFAULT, "(createsCompositingGroup true)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 43) & 2) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v255 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v255, OS_LOG_TYPE_DEFAULT, "(allowsDisplayCompositing true)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 43) & 4) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v256 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v256, OS_LOG_TYPE_DEFAULT, "(allowsEdgeAntialiasing true)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 43) & 8) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v257 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v257, OS_LOG_TYPE_DEFAULT, "(wantsExtendedDynamicRangeContent true)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 43) & 0x10) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v258 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v258, OS_LOG_TYPE_DEFAULT, "(toneMapToStandardDynamicRange true)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 43) & 0x20) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v259 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v259, OS_LOG_TYPE_DEFAULT, "(allowsGroupOpacity true)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 43) & 0x40) == 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v260 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v260, OS_LOG_TYPE_DEFAULT, "(allowsGroupBlending false)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 43) & 0x80) == 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v261 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v261, OS_LOG_TYPE_DEFAULT, "(allowsHitTesting false)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v262 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v262, OS_LOG_TYPE_DEFAULT, "(hitTestsContentsAlphaChannel true)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 44) & 0x80) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v263 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v263, OS_LOG_TYPE_DEFAULT, "(hitTestsAsOpaque true)", buf, 2u);
      }
    }
  }
  v264 = (*((unsigned __int8 *)this + 40) >> 2) & 3;
  if (v264)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (v264 == 1)
    {
      if (x_log_hook_p())
      {
LABEL_611:
        x_log_();
        goto LABEL_617;
      }
      v265 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v266 = "(securityMode insecure)";
        goto LABEL_616;
      }
    }
    else
    {
      if (v264 != 2)
        goto LABEL_617;
      if (x_log_hook_p())
        goto LABEL_611;
      v265 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v266 = "(securityMode unrestricted)";
LABEL_616:
        _os_log_impl(&dword_184457000, v265, OS_LOG_TYPE_DEFAULT, v266, buf, 2u);
      }
    }
  }
LABEL_617:
  v267 = *((_QWORD *)this + 16);
  v268 = (float32x4_t)xmmword_18474DFE0;
  if (v267)
    v268 = *(float32x4_t *)(v267 + 200);
  v269 = (uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v268, (float32x4_t)xmmword_18474DFE0)));
  v269.i16[0] = vmaxv_u16(v269);
  if ((v269.i8[0] & 1) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v270 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v271 = (float32x2_t *)*((_QWORD *)this + 16);
        if (v271)
        {
          v272 = vcvtq_f64_f32(v271[25]);
          v273 = v271[26].f32[1];
          v274 = v271[26].f32[0];
        }
        else
        {
          v272 = 0uLL;
          v273 = 1.0;
          v274 = 0.0;
        }
        *(_DWORD *)buf = 134218752;
        *(float64_t *)&buf[4] = v272.f64[0];
        *(_WORD *)&buf[12] = 2048;
        *(float64_t *)((unint64_t)buf | 0xE) = v272.f64[1];
        *(_WORD *)&buf[22] = 2048;
        *(double *)&buf[24] = v274;
        *(_WORD *)v324 = 2048;
        *(double *)&v324[2] = v273;
        _os_log_impl(&dword_184457000, v270, OS_LOG_TYPE_DEFAULT, "(shadowColor (%.3g %.3g %.3g %.0g))", buf, 0x2Au);
      }
    }
  }
  v269.i8[0] = *((_BYTE *)this + 33);
  if ((float)((float)v269.u32[0] * 0.0039216) != 0.0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v275 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        LOBYTE(v276) = *((_BYTE *)this + 33);
        *(_DWORD *)buf = 134217984;
        *(double *)&buf[4] = (float)((float)v276 * 0.0039216);
        _os_log_impl(&dword_184457000, v275, OS_LOG_TYPE_DEFAULT, "(shadowOpacity %g)", buf, 0xCu);
      }
    }
  }
  v277 = *((_QWORD *)this + 16);
  v278 = -3.0;
  v279 = 0.0;
  if (v277)
  {
    if (*(float *)(v277 + 224) != 3.0)
    {
      CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v280 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v281 = *((_QWORD *)this + 16);
          if (v281)
            v282 = *(float *)(v281 + 224);
          else
            v282 = 3.0;
          *(_DWORD *)buf = 134217984;
          *(double *)&buf[4] = v282;
          _os_log_impl(&dword_184457000, v280, OS_LOG_TYPE_DEFAULT, "(shadowRadius %g)", buf, 0xCu);
        }
      }
    }
    v283 = *((_QWORD *)this + 16);
    if (v283)
    {
      v279 = *(float *)(v283 + 216);
      v278 = *(float *)(v283 + 220);
    }
  }
  if (v279 != 0.0 || v278 != -3.0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v284 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(double *)&buf[4] = v279;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v278;
        _os_log_impl(&dword_184457000, v284, OS_LOG_TYPE_DEFAULT, "(shadowOffset [%g %g])", buf, 0x16u);
      }
    }
  }
  v285 = *((_QWORD *)this + 16);
  if (v285 && *(_QWORD *)(v285 + 120))
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v286 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v286, OS_LOG_TYPE_DEFAULT, "(shadowPath ", buf, 2u);
      }
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 16) + 120) + 40))(*(_QWORD *)(*((_QWORD *)this + 16) + 120), ((_DWORD)a2 + 1), a3);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v287 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v287, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 44) & 2) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v288 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v288, OS_LOG_TYPE_DEFAULT, "(invertsShadow true)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 44) & 4) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v289 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v289, OS_LOG_TYPE_DEFAULT, "(shadowPathIsBounds true)", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 44) & 8) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v290 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v290, OS_LOG_TYPE_DEFAULT, "(punchoutShadow true)", buf, 2u);
      }
    }
  }
  if (*((_QWORD *)this + 14))
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v291 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v291, OS_LOG_TYPE_DEFAULT, "(mask ", buf, 2u);
      }
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 14) + 40))(*((_QWORD *)this + 14), ((_DWORD)a2 + 1), a3);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v292 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v292, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
      }
    }
  }
  if ((*((_BYTE *)this + 40) & 0x80) != 0)
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v293 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v293, OS_LOG_TYPE_DEFAULT, "(invertsMask true)", buf, 2u);
      }
    }
  }
  v294 = *((_QWORD *)this + 13);
  if ((*((_BYTE *)this + 13) & 0x20) == 0)
  {
    if (!v294)
      goto LABEL_715;
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v295 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v295, OS_LOG_TYPE_DEFAULT, "(sublayers ", buf, 2u);
      }
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 13) + 40))(*((_QWORD *)this + 13), ((_DWORD)a2 + 1), a3);
    if (!x_log_hook_p())
    {
      v296 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
LABEL_714:
        _os_log_impl(&dword_184457000, v296, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        goto LABEL_715;
      }
      goto LABEL_715;
    }
LABEL_711:
    x_log_();
    goto LABEL_715;
  }
  if (!v294)
    goto LABEL_715;
  CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v297 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184457000, v297, OS_LOG_TYPE_DEFAULT, "(sublayers ", buf, 2u);
    }
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v298 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184457000, v298, OS_LOG_TYPE_DEFAULT, "(array", buf, 2u);
    }
  }
  CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 2));
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 13) + 40))(*((_QWORD *)this + 13), ((_DWORD)a2 + 2), a3);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v299 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184457000, v299, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
    }
  }
  if (x_log_hook_p())
    goto LABEL_711;
  v296 = x_log_category_render;
  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    goto LABEL_714;
  }
LABEL_715:
  v300 = *((_QWORD *)this + 16);
  if (v300)
  {
    if (*(_QWORD *)(v300 + 96))
    {
      CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v301 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v301, OS_LOG_TYPE_DEFAULT, "(filters ", buf, 2u);
        }
      }
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 16) + 96) + 40))(*(_QWORD *)(*((_QWORD *)this + 16) + 96), ((_DWORD)a2 + 1), a3);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v302 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v302, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
    v303 = *((_QWORD *)this + 16);
    if (v303)
    {
      if (*(_QWORD *)(v303 + 104))
      {
        CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v304 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v304, OS_LOG_TYPE_DEFAULT, "(backgroundFilters ", buf, 2u);
          }
        }
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 16) + 104) + 40))(*(_QWORD *)(*((_QWORD *)this + 16) + 104), ((_DWORD)a2 + 1), a3);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v305 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v305, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
          }
        }
      }
      v306 = *((_QWORD *)this + 16);
      if (v306)
      {
        if (*(_QWORD *)(v306 + 88))
        {
          CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v307 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184457000, v307, OS_LOG_TYPE_DEFAULT, "(compositingFilter ", buf, 2u);
            }
          }
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 16) + 88) + 40))(*(_QWORD *)(*((_QWORD *)this + 16) + 88), ((_DWORD)a2 + 1), a3);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v308 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184457000, v308, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
            }
          }
        }
        v309 = *((_QWORD *)this + 16);
        if (v309 && *(_QWORD *)(v309 + 112))
        {
          CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v310 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184457000, v310, OS_LOG_TYPE_DEFAULT, "(meshTransform ", buf, 2u);
            }
          }
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 16) + 112) + 40))(*(_QWORD *)(*((_QWORD *)this + 16) + 112), ((_DWORD)a2 + 1), a3);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v311 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184457000, v311, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
            }
          }
        }
      }
    }
  }
  if (*((_QWORD *)this + 17))
  {
    CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v312 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v312, OS_LOG_TYPE_DEFAULT, "(animations ", buf, 2u);
      }
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 17) + 40))(*((_QWORD *)this + 17), ((_DWORD)a2 + 1), a3);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v313 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v313, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
      }
    }
  }
  v314 = *((_QWORD *)this + 16);
  if (v314)
  {
    if (*(_QWORD *)(v314 + 136))
    {
      CA::Render::show_newline((CA::Render *)((_DWORD)a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v315 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v315, OS_LOG_TYPE_DEFAULT, "(modifiers ", buf, 2u);
        }
      }
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 16) + 136) + 40))(*(_QWORD *)(*((_QWORD *)this + 16) + 136), ((_DWORD)a2 + 1), a3);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v316 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v316, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
    v317 = (_QWORD *)*((_QWORD *)this + 16);
    if (v317 && *v317)
    {
      v318 = (CA::Render *)((_DWORD)a2 + 1);
      CA::Render::show_newline(v318);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v319 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v319, OS_LOG_TYPE_DEFAULT, "(subclass ", buf, 2u);
        }
      }
      (*(void (**)(_QWORD, CA::Render *, uint64_t))(***((_QWORD ***)this + 16) + 40))(**((_QWORD **)this + 16), v318, a3);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v320 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v320, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v321 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184457000, v321, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
    }
  }
}

uint64_t CA::Render::Layer::show_compressed(uint64_t this, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  CA::Render *v7;
  NSObject *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  int v26;
  unsigned int v27;
  CA::Render *v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  NSObject *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  float v56;
  NSObject *v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  float v61;
  NSObject *v62;
  uint64_t v63;
  NSObject *v64;
  NSObject *v65;
  int v66;
  NSObject *v67;
  const char *v68;
  NSObject *v69;
  unsigned int v70;
  int v71;
  NSObject *v72;
  const char *v73;
  const char *v74;
  const char *v75;
  const char *v76;
  uint64_t v77;
  int v78;
  NSObject *v79;
  NSObject *v80;
  const char *v81;
  NSObject *v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  const char *v86;
  uint64_t v87;
  NSObject *v88;
  const char *v89;
  NSObject *v90;
  NSObject *v91;
  NSObject *v92;
  NSObject *v93;
  NSObject *v94;
  NSObject *v95;
  NSObject *v96;
  uint64_t v97;
  NSObject *v98;
  uint64_t v99;
  float v100;
  uint64_t v101;
  NSObject *v102;
  NSObject *v103;
  NSObject *v104;
  NSObject *v105;
  uint64_t v106;
  NSObject *v107;
  NSObject *v108;
  uint64_t v109;
  NSObject *v110;
  NSObject *v111;
  uint64_t v112;
  NSObject *v113;
  NSObject *v114;
  uint64_t v115;
  NSObject *v116;
  NSObject *v117;
  NSObject *v118;
  NSObject *v119;
  uint64_t v120;
  NSObject *v121;
  NSObject *v122;
  NSObject *v123;
  NSObject *v124;
  _QWORD *v125;
  NSObject *v126;
  NSObject *v127;
  uint8_t buf[4];
  _BYTE v129[10];
  const char *v130;
  _BYTE v131[10];
  __int16 v132;
  const char *v133;
  __int16 v134;
  const char *v135;
  __int16 v136;
  uint64_t v137;
  __int16 v138;
  uint64_t v139;
  __int16 v140;
  uint64_t v141;
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(this + 41) & 1) == 0)
  {
    v5 = this;
    v6 = *(_QWORD *)(this + 144);
    if (!v6 || (*(_QWORD *)(v6 + 96) & 0x300000000000) != 0x200000000000)
    {
      v7 = (CA::Render *)(a2 + 1);
      CA::Render::show_newline(v7);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v8 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v9 = "transform-";
          v10 = "";
          v11 = *(_QWORD *)(v5 + 64);
          v12 = *(const char **)(v5 + 72);
          if ((*(_DWORD *)(v5 + 12) & 0x100) == 0)
            v9 = "";
          v13 = *(const char **)(v5 + 80);
          v14 = *(_QWORD *)(v5 + 88);
          if ((*(_DWORD *)(v5 + 12) & 0x800) != 0)
            v10 = "container ";
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)v129 = v9;
          *(_WORD *)&v129[8] = 2080;
          v130 = v10;
          *(_WORD *)v131 = 2048;
          *(_QWORD *)&v131[2] = v11;
          v132 = 2048;
          v133 = v12;
          v134 = 2048;
          v135 = v13;
          v136 = 2048;
          v137 = v14;
          _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_DEFAULT, "*%slayer %s[%.10g %.10g %.10g %.10g]", buf, 0x3Eu);
        }
      }
      v15 = *(_DWORD **)(v5 + 144);
      if (v15)
      {
        v16 = v15[30];
        if (v16 >= v15[31])
          v16 = v15[31];
        if (v16 >= 1)
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v17 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              v18 = v15[28];
              v19 = v15[29];
              v20 = v15[30];
              v21 = v15[31];
              *(_DWORD *)buf = 67109888;
              *(_DWORD *)v129 = v18;
              *(_WORD *)&v129[4] = 1024;
              *(_DWORD *)&v129[6] = v19;
              LOWORD(v130) = 1024;
              *(_DWORD *)((char *)&v130 + 2) = v20;
              HIWORD(v130) = 1024;
              *(_DWORD *)v131 = v21;
              _os_log_impl(&dword_184457000, v17, OS_LOG_TYPE_DEFAULT, " [%d %d %d %d]", buf, 0x1Au);
            }
          }
        }
      }
      if ((a3 & 2) == 0 && *(_QWORD *)(v5 + 120))
      {
        CA::Render::show_newline((CA::Render *)(a2 + 1));
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v22 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v22, OS_LOG_TYPE_DEFAULT, "(name ", buf, 2u);
          }
        }
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v5 + 120) + 40))(*(_QWORD *)(v5 + 120), (a2 + 1), a3);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v23 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v23, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
          }
        }
      }
      v24 = *(_QWORD *)(v5 + 144);
      if (v24 && *(_DWORD *)(v24 + 92))
      {
        CA::Render::show_newline((CA::Render *)(a2 + 1));
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v25 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            v26 = *(_DWORD *)(v24 + 92) >> 28;
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)v129 = v26;
            _os_log_impl(&dword_184457000, v25, OS_LOG_TYPE_DEFAULT, "[%d passes", buf, 8u);
          }
        }
        v27 = *(_DWORD *)(v24 + 92);
        if ((v27 & 0x1FFFF) != 0)
        {
          CA::Render::print_offscreen_flags((CA::Render *)(v27 & 0x1FFFF));
          v27 = *(_DWORD *)(v24 + 92);
        }
        v28 = (CA::Render *)((v27 >> 17) & 0x7FF);
        if ((_DWORD)v28)
          CA::Render::print_group_flags(v28);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v29 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v29, OS_LOG_TYPE_DEFAULT, "]", buf, 2u);
          }
        }
      }
      v30 = *(_QWORD *)(v5 + 128);
      if (v30)
      {
        if ((*(_BYTE *)(v30 + 320) & 1) != 0)
        {
          CA::Render::show_newline((CA::Render *)(a2 + 1));
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v31 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              v32 = *(_QWORD *)(v5 + 128);
              if (v32)
                LODWORD(v32) = *(_BYTE *)(v32 + 320) & 1;
              v33 = CA::Render::Layer::show(unsigned int,unsigned int)const::names[v32];
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)v129 = v33;
              _os_log_impl(&dword_184457000, v31, OS_LOG_TYPE_DEFAULT, "(contentsSwizzle %s)", buf, 0xCu);
            }
          }
        }
        v34 = *(_QWORD *)(v5 + 128);
        if (v34)
        {
          v35 = *(_QWORD **)(v34 + 72);
          if (v35)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v36 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                v37 = v35[3];
                v38 = (const char *)v35[4];
                v39 = v35[5];
                v40 = (const char *)v35[6];
                v41 = (const char *)v35[7];
                v42 = v35[8];
                v43 = v35[9];
                v44 = v35[10];
                *(_DWORD *)buf = 134219776;
                *(_QWORD *)v129 = v37;
                *(_WORD *)&v129[8] = 2048;
                v130 = v38;
                *(_WORD *)v131 = 2048;
                *(_QWORD *)&v131[2] = v39;
                v132 = 2048;
                v133 = v40;
                v134 = 2048;
                v135 = v41;
                v136 = 2048;
                v137 = v42;
                v138 = 2048;
                v139 = v43;
                v140 = 2048;
                v141 = v44;
                _os_log_impl(&dword_184457000, v36, OS_LOG_TYPE_DEFAULT, "(cornerRadii [%g %g] [%g %g] [%g %g] [%g %g])", buf, 0x52u);
              }
            }
          }
          v45 = *(_QWORD *)(v5 + 128);
          if (v45)
          {
            if (*(float *)(v45 + 228) != 0.0)
            {
              CA::Render::show_newline((CA::Render *)(a2 + 1));
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                v46 = x_log_category_render;
                if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                {
                  v47 = *(_QWORD *)(v5 + 128);
                  v48 = 0.0;
                  if (v47)
                    v48 = *(float *)(v47 + 228);
                  *(_DWORD *)buf = 134217984;
                  *(double *)v129 = v48;
                  _os_log_impl(&dword_184457000, v46, OS_LOG_TYPE_DEFAULT, "(cornerRadius %g)", buf, 0xCu);
                }
              }
            }
            v49 = *(_QWORD *)(v5 + 128);
            if (v49)
            {
              if (*(float *)(v49 + 232) != 0.0)
              {
                CA::Render::show_newline((CA::Render *)(a2 + 1));
                if (x_log_hook_p())
                {
                  x_log_();
                }
                else
                {
                  v50 = x_log_category_render;
                  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                  {
                    v51 = *(_QWORD *)(v5 + 128);
                    if (v51)
                      v52 = *(float *)(v51 + 232);
                    else
                      v52 = 0.0;
                    *(_DWORD *)buf = 134217984;
                    *(double *)v129 = v52;
                    _os_log_impl(&dword_184457000, v50, OS_LOG_TYPE_DEFAULT, "(borderOffset %g)", buf, 0xCu);
                  }
                }
              }
              v53 = *(_QWORD *)(v5 + 128);
              if (v53 && *(float *)(v53 + 236) != 0.0)
              {
                CA::Render::show_newline((CA::Render *)(a2 + 1));
                if (x_log_hook_p())
                {
                  x_log_();
                }
                else
                {
                  v54 = x_log_category_render;
                  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                  {
                    v55 = *(_QWORD *)(v5 + 128);
                    if (v55)
                      v56 = *(float *)(v55 + 236);
                    else
                      v56 = 0.0;
                    *(_DWORD *)buf = 134217984;
                    *(double *)v129 = v56;
                    _os_log_impl(&dword_184457000, v54, OS_LOG_TYPE_DEFAULT, "(borderWidth %g)", buf, 0xCu);
                  }
                }
              }
            }
          }
        }
      }
      if ((*(_BYTE *)(v5 + 44) & 0x20) == 0)
      {
        CA::Render::show_newline((CA::Render *)(a2 + 1));
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v57 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v57, OS_LOG_TYPE_DEFAULT, "(borderPathIsBounds false)", buf, 2u);
          }
        }
      }
      v58 = *(_QWORD *)(v5 + 128);
      if (v58 && *(float *)(v58 + 296) != 0.0)
      {
        CA::Render::show_newline((CA::Render *)(a2 + 1));
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v59 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            v60 = *(_QWORD *)(v5 + 128);
            if (v60)
              v61 = *(float *)(v60 + 296);
            else
              v61 = 0.0;
            *(_DWORD *)buf = 134217984;
            *(double *)v129 = v61;
            _os_log_impl(&dword_184457000, v59, OS_LOG_TYPE_DEFAULT, "(rimWidth %g)", buf, 0xCu);
          }
        }
      }
      if ((*(_BYTE *)(v5 + 44) & 0x10) == 0)
      {
        CA::Render::show_newline((CA::Render *)(a2 + 1));
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v62 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v62, OS_LOG_TYPE_DEFAULT, "(rimPathIsBounds false)", buf, 2u);
          }
        }
      }
      v63 = *(_QWORD *)(v5 + 128);
      if (v63 && *(_QWORD *)(v63 + 56))
      {
        CA::Render::show_newline((CA::Render *)(a2 + 1));
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v64 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v64, OS_LOG_TYPE_DEFAULT, "(cornerContents ", buf, 2u);
          }
        }
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v5 + 128) + 56) + 40))(*(_QWORD *)(*(_QWORD *)(v5 + 128) + 56), (a2 + 1), a3);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v65 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v65, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
          }
        }
      }
      if ((*(_QWORD *)(v5 + 40) & 3) == 1)
        goto LABEL_130;
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      v66 = *(_DWORD *)(v5 + 40) & 3;
      switch(v66)
      {
        case 3:
          if (!x_log_hook_p())
          {
            v67 = x_log_category_render;
            if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              goto LABEL_130;
            *(_WORD *)buf = 0;
            v68 = "(cornerCurve ID1)";
            goto LABEL_129;
          }
          break;
        case 2:
          if (!x_log_hook_p())
          {
            v67 = x_log_category_render;
            if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              goto LABEL_130;
            *(_WORD *)buf = 0;
            v68 = "(cornerCurve ID0)";
            goto LABEL_129;
          }
          break;
        case 1:
          if (x_log_hook_p())
            break;
          v67 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            v68 = "(cornerCurve continuous)";
LABEL_129:
            _os_log_impl(&dword_184457000, v67, OS_LOG_TYPE_DEFAULT, v68, buf, 2u);
          }
LABEL_130:
          if ((*(_BYTE *)(v5 + 45) & 2) != 0)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v69 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v69, OS_LOG_TYPE_DEFAULT, "(cornerContentsMasksEdges true)", buf, 2u);
              }
            }
          }
          v70 = *(_DWORD *)(v5 + 36);
          v71 = HIWORD(v70) & 0xF;
          if (v71 && v71 != 15)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v72 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                v73 = "minX-minY";
                if ((v70 & 0x10000) == 0)
                  v73 = "";
                v74 = "maxX-minY";
                if ((v70 & 0x20000) == 0)
                  v74 = "";
                *(_DWORD *)buf = 136316162;
                *(_QWORD *)v129 = v73;
                v75 = "minX-maxY";
                if ((v70 & 0x40000) == 0)
                  v75 = "";
                *(_WORD *)&v129[8] = 2080;
                v130 = v74;
                *(_WORD *)v131 = 2080;
                *(_QWORD *)&v131[2] = v75;
                v132 = 2080;
                if ((v70 & 0x80000) != 0)
                  v76 = "maxX-maxY";
                else
                  v76 = "";
                v133 = v76;
                v134 = 2080;
                v135 = "";
                _os_log_impl(&dword_184457000, v72, OS_LOG_TYPE_DEFAULT, "(maskedCorners %s%s%s%s%s)", buf, 0x34u);
              }
            }
          }
          if (*(_QWORD *)(v5 + 96))
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            v77 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 96) + 80))(*(_QWORD *)(v5 + 96));
            if (v77)
              v78 = (*(unsigned __int8 *)(v77 + 14) >> 4) & 1;
            else
              v78 = 0;
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v79 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v79, OS_LOG_TYPE_DEFAULT, "|contents", buf, 2u);
              }
            }
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v80 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                v81 = " ";
                if (v78)
                  v81 = "-backingStore ";
                *(_DWORD *)buf = 136315138;
                *(_QWORD *)v129 = v81;
                _os_log_impl(&dword_184457000, v80, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
              }
            }
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v5 + 96) + 40))(*(_QWORD *)(v5 + 96), (a2 + 1), a3);
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v82 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v82, OS_LOG_TYPE_DEFAULT, "|", buf, 2u);
              }
            }
          }
          if ((*(_DWORD *)(v5 + 36) & 0xF0) != 0x10)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            v83 = *(_DWORD *)(v5 + 36) >> 4;
            if (v83 > 0xA)
              v84 = 0;
            else
              v84 = -[__CFString cStringUsingEncoding:]((id)CAAtomGetString(CA::Render::image_filter_atoms[v83]), "cStringUsingEncoding:", 4);
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v85 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                v86 = "<unknown>";
                if (v84)
                  v86 = (const char *)v84;
                *(_DWORD *)buf = 136315138;
                *(_QWORD *)v129 = v86;
                _os_log_impl(&dword_184457000, v85, OS_LOG_TYPE_DEFAULT, "(magnificationFilter %s)", buf, 0xCu);
              }
            }
          }
          if ((*(_DWORD *)(v5 + 36) & 0xF) != 1)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if ((*(_DWORD *)(v5 + 36) & 0xFu) > 0xA)
              v87 = 0;
            else
              v87 = -[__CFString cStringUsingEncoding:]((id)CAAtomGetString(CA::Render::image_filter_atoms[*(_DWORD *)(v5 + 36) & 0xF]), "cStringUsingEncoding:", 4);
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v88 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                v89 = "<unknown>";
                if (v87)
                  v89 = (const char *)v87;
                *(_DWORD *)buf = 136315138;
                *(_QWORD *)v129 = v89;
                _os_log_impl(&dword_184457000, v88, OS_LOG_TYPE_DEFAULT, "(minificationFilter %s)", buf, 0xCu);
              }
            }
          }
          if ((*(_BYTE *)(v5 + 45) & 8) != 0)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v90 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v90, OS_LOG_TYPE_DEFAULT, "(contentsContainsSubtitles true)", buf, 2u);
              }
            }
          }
          if ((*(_BYTE *)(v5 + 42) & 4) != 0)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v91 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v91, OS_LOG_TYPE_DEFAULT, "(shouldRasterize true)", buf, 2u);
              }
            }
          }
          if ((*(_BYTE *)(v5 + 42) & 8) != 0)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v92 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v92, OS_LOG_TYPE_DEFAULT, "(shouldFlatten true)", buf, 2u);
              }
            }
          }
          if ((*(_BYTE *)(v5 + 42) & 0x10) != 0)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v93 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v93, OS_LOG_TYPE_DEFAULT, "(shouldReflatten true)", buf, 2u);
              }
            }
          }
          if ((*(_BYTE *)(v5 + 42) & 0x80) != 0)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v94 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v94, OS_LOG_TYPE_DEFAULT, "(preloadsCache true)", buf, 2u);
              }
            }
          }
          if ((*(_BYTE *)(v5 + 43) & 1) != 0)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v95 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v95, OS_LOG_TYPE_DEFAULT, "(createsCompositingGroup true)", buf, 2u);
              }
            }
          }
          if ((*(_BYTE *)(v5 + 43) & 8) != 0)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v96 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v96, OS_LOG_TYPE_DEFAULT, "(wantsExtendedDynamicRangeContent true)", buf, 2u);
              }
            }
          }
          v97 = *(_QWORD *)(v5 + 128);
          if (v97)
          {
            if (*(float *)(v97 + 224) != 3.0)
            {
              CA::Render::show_newline((CA::Render *)(a2 + 1));
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                v98 = x_log_category_render;
                if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                {
                  v99 = *(_QWORD *)(v5 + 128);
                  if (v99)
                    v100 = *(float *)(v99 + 224);
                  else
                    v100 = 3.0;
                  *(_DWORD *)buf = 134217984;
                  *(double *)v129 = v100;
                  _os_log_impl(&dword_184457000, v98, OS_LOG_TYPE_DEFAULT, "(shadowRadius %g)", buf, 0xCu);
                }
              }
            }
            v101 = *(_QWORD *)(v5 + 128);
            if (v101 && *(_QWORD *)(v101 + 120))
            {
              CA::Render::show_newline((CA::Render *)(a2 + 1));
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                v102 = x_log_category_render;
                if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_184457000, v102, OS_LOG_TYPE_DEFAULT, "(shadowPath ", buf, 2u);
                }
              }
              (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v5 + 128) + 120) + 40))(*(_QWORD *)(*(_QWORD *)(v5 + 128) + 120), (a2 + 1), a3);
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                v103 = x_log_category_render;
                if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_184457000, v103, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
                }
              }
            }
          }
          if ((*(_BYTE *)(v5 + 44) & 4) != 0)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v104 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v104, OS_LOG_TYPE_DEFAULT, "(shadowPathIsBounds true)", buf, 2u);
              }
            }
          }
          if ((*(_BYTE *)(v5 + 44) & 8) != 0)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v105 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v105, OS_LOG_TYPE_DEFAULT, "(punchoutShadow true)", buf, 2u);
              }
            }
          }
          v106 = *(_QWORD *)(v5 + 128);
          if (v106)
          {
            if (*(_QWORD *)(v106 + 96))
            {
              CA::Render::show_newline((CA::Render *)(a2 + 1));
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                v107 = x_log_category_render;
                if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_184457000, v107, OS_LOG_TYPE_DEFAULT, "(filters: ", buf, 2u);
                }
              }
              (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v5 + 128) + 96) + 40))(*(_QWORD *)(*(_QWORD *)(v5 + 128) + 96), (a2 + 1), a3);
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                v108 = x_log_category_render;
                if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_184457000, v108, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
                }
              }
            }
            v109 = *(_QWORD *)(v5 + 128);
            if (v109)
            {
              if (*(_QWORD *)(v109 + 104))
              {
                CA::Render::show_newline((CA::Render *)(a2 + 1));
                if (x_log_hook_p())
                {
                  x_log_();
                }
                else
                {
                  v110 = x_log_category_render;
                  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl(&dword_184457000, v110, OS_LOG_TYPE_DEFAULT, "(backgroundFilters: ", buf, 2u);
                  }
                }
                (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v5 + 128) + 104) + 40))(*(_QWORD *)(*(_QWORD *)(v5 + 128) + 104), (a2 + 1), a3);
                if (x_log_hook_p())
                {
                  x_log_();
                }
                else
                {
                  v111 = x_log_category_render;
                  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl(&dword_184457000, v111, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
                  }
                }
              }
              v112 = *(_QWORD *)(v5 + 128);
              if (v112)
              {
                if (*(_QWORD *)(v112 + 88))
                {
                  CA::Render::show_newline((CA::Render *)(a2 + 1));
                  if (x_log_hook_p())
                  {
                    x_log_();
                  }
                  else
                  {
                    v113 = x_log_category_render;
                    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl(&dword_184457000, v113, OS_LOG_TYPE_DEFAULT, "(compositingFilter: ", buf, 2u);
                    }
                  }
                  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v5 + 128) + 88) + 40))(*(_QWORD *)(*(_QWORD *)(v5 + 128) + 88), (a2 + 1), a3);
                  if (x_log_hook_p())
                  {
                    x_log_();
                  }
                  else
                  {
                    v114 = x_log_category_render;
                    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl(&dword_184457000, v114, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
                    }
                  }
                }
                v115 = *(_QWORD *)(v5 + 128);
                if (v115 && *(_QWORD *)(v115 + 112))
                {
                  CA::Render::show_newline((CA::Render *)(a2 + 1));
                  if (x_log_hook_p())
                  {
                    x_log_();
                  }
                  else
                  {
                    v116 = x_log_category_render;
                    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl(&dword_184457000, v116, OS_LOG_TYPE_DEFAULT, "(meshTransform ", buf, 2u);
                    }
                  }
                  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v5 + 128) + 112) + 40))(*(_QWORD *)(*(_QWORD *)(v5 + 128) + 112), (a2 + 1), a3);
                  if (x_log_hook_p())
                  {
                    x_log_();
                  }
                  else
                  {
                    v117 = x_log_category_render;
                    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl(&dword_184457000, v117, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
                    }
                  }
                }
              }
            }
          }
          if (*(_QWORD *)(v5 + 136))
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v118 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v118, OS_LOG_TYPE_DEFAULT, "(animations: ", buf, 2u);
              }
            }
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v5 + 136) + 40))(*(_QWORD *)(v5 + 136), (a2 + 1), a3);
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v119 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v119, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
              }
            }
          }
          v120 = *(_QWORD *)(v5 + 128);
          if (v120 && *(_QWORD *)(v120 + 136))
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v121 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v121, OS_LOG_TYPE_DEFAULT, "(modifiers: ", buf, 2u);
              }
            }
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v5 + 128) + 136) + 40))(*(_QWORD *)(*(_QWORD *)(v5 + 128) + 136), (a2 + 1), a3);
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v122 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v122, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
              }
            }
          }
          if (*(_QWORD *)(v5 + 112))
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v123 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v123, OS_LOG_TYPE_DEFAULT, "{mask ", buf, 2u);
              }
            }
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v5 + 112) + 40))(*(_QWORD *)(v5 + 112), (a2 + 1), a3);
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v124 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v124, OS_LOG_TYPE_DEFAULT, "}", buf, 2u);
              }
            }
          }
          v125 = *(_QWORD **)(v5 + 128);
          if (v125 && *v125)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v126 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v126, OS_LOG_TYPE_DEFAULT, "{subclass ", buf, 2u);
              }
            }
            (*(void (**)(_QWORD, _QWORD, uint64_t))(***(_QWORD ***)(v5 + 128) + 40))(**(_QWORD **)(v5 + 128), (a2 + 1), a3);
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v127 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v127, OS_LOG_TYPE_DEFAULT, "}", buf, 2u);
              }
            }
          }
          this = *(_QWORD *)(v5 + 104);
          if ((*(_BYTE *)(v5 + 13) & 0x20) != 0)
          {
            if (!this)
              return this;
            v7 = (CA::Render *)(a2 + 2);
          }
          else if (!this)
          {
            return this;
          }
          return (*(uint64_t (**)(uint64_t, CA::Render *, uint64_t))(*(_QWORD *)this + 40))(this, v7, a3);
        default:
          goto LABEL_130;
      }
      x_log_();
      goto LABEL_130;
    }
  }
  return this;
}

void CA::Render::print_offscreen_flags(CA::Render *this)
{
  unsigned int v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t buf[4];
  const char *v5;
  uint64_t v6;
  unsigned __int128 v7;

  v1 = this;
  v6 = *MEMORY[0x1E0C80C00];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v2 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v5 = " [";
      _os_log_impl(&dword_184457000, v2, OS_LOG_TYPE_DEFAULT, " (offscreen-flags%s", buf, 0xCu);
    }
  }
  *((_QWORD *)&v7 + 1) = CA::Render::offscreen_flag_names;
  *(_QWORD *)&v7 = 0;
  CA::Render::print_flags(v1, v7, (const char *const *)0x11);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v3 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v5 = "]";
      _os_log_impl(&dword_184457000, v3, OS_LOG_TYPE_DEFAULT, "%s)", buf, 0xCu);
    }
  }
}

void CA::Render::print_group_flags(CA::Render *this)
{
  unsigned int v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t buf[4];
  const char *v5;
  uint64_t v6;
  unsigned __int128 v7;

  v1 = this;
  v6 = *MEMORY[0x1E0C80C00];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v2 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v5 = " [";
      _os_log_impl(&dword_184457000, v2, OS_LOG_TYPE_DEFAULT, " (group-flags%s", buf, 0xCu);
    }
  }
  *((_QWORD *)&v7 + 1) = CA::Render::group_flag_names;
  *(_QWORD *)&v7 = 0;
  CA::Render::print_flags(v1, v7, (const char *const *)0xB);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v3 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v5 = "]";
      _os_log_impl(&dword_184457000, v3, OS_LOG_TYPE_DEFAULT, "%s)", buf, 0xCu);
    }
  }
}

void CA::Render::print_flags(unint64_t this, unsigned __int128 a2, const char *const *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  _BOOL4 v11;
  uint64_t v12;
  const char *v13;
  __int128 v14;
  BOOL v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (this | (unint64_t)a2)
  {
    v4 = *((_QWORD *)&a2 + 1);
    v5 = a2;
    v6 = this;
    v7 = 0;
    v8 = 1;
    while (1)
    {
      if ((v6 & 1) == 0)
      {
        v9 = v8;
        goto LABEL_13;
      }
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v10 = x_log_category_render;
        v11 = os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT);
        v9 = 0;
        if (!v11)
          goto LABEL_13;
        v12 = *(_QWORD *)(v4 + 8 * v7);
        if ((v8 & 1) != 0)
          v13 = "";
        else
          v13 = " ";
        *(_DWORD *)buf = 136315394;
        v17 = v13;
        v18 = 2080;
        v19 = v12;
        _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_DEFAULT, "%s%s", buf, 0x16u);
      }
      v9 = 0;
LABEL_13:
      if (++v7 < (unint64_t)a3)
      {
        *((_QWORD *)&v14 + 1) = v5;
        *(_QWORD *)&v14 = v6;
        v15 = v6 <= 1;
        v5 >>= 1;
        v8 = v9;
        v6 = v14 >> 1;
        if (!v15)
          continue;
      }
      return;
    }
  }
}

BOOL CA::Render::Layer::sublayer_allows_containerization(CA::Render::Layer *this, CA::Render::Layer *a2)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  CA::Mat4Impl *v8;
  CA::Mat4Impl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22[2];
  double v23;
  double v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)a2 + 13) & 9) != 0)
    return 0;
  v4 = *((_QWORD *)this + 5);
  if ((v4 & 0x40) != 0)
  {
    v15 = *((_QWORD *)a2 + 5);
    if ((v15 & 0x40) == 0)
      return 0;
    v5 = *((_QWORD *)a2 + 16);
    if (v5)
    {
      if (*(_QWORD *)(v5 + 16))
        return 0;
      v17 = *((double *)a2 + 6);
      v16 = *((double *)a2 + 7);
      v18 = *((double *)a2 + 11);
      v23 = *((double *)a2 + 10);
      v24 = v18;
      v19 = *(double *)(v5 + 176);
      v20 = *(double *)(v5 + 168) * v23;
    }
    else
    {
      v17 = *((double *)a2 + 6);
      v16 = *((double *)a2 + 7);
      v21 = *((double *)a2 + 10);
      v18 = *((double *)a2 + 11);
      v23 = v21;
      v24 = v18;
      v19 = 0.0;
      if ((v15 & 0x400000000000) == 0)
        v19 = 0.5;
      v20 = v21 * v19;
    }
    v22[0] = v17 - v20;
    v22[1] = v16 - v19 * v18;
    result = CA::BoundsImpl::contains((double *)this + 8, v22);
    if (!result)
      return result;
  }
  else
  {
    v5 = *((_QWORD *)a2 + 16);
  }
  if (!v5)
  {
LABEL_16:
    v10 = *((_QWORD *)a2 + 17);
    if (!v10)
      return 1;
    v11 = *(unsigned int *)(v10 + 16);
    if (!(_DWORD)v11)
      return 1;
    v12 = v10 + 24;
    v13 = 8 * v11;
    result = 1;
    while (1)
    {
      v14 = *(_DWORD *)(*(_QWORD *)v12 + 12);
      if ((v14 & 0x40000) != 0 || (v14 & 0x1000) != 0 && (v4 & 0x40) != 0)
        break;
      v12 += 8;
      v13 -= 8;
      if (!v13)
        return result;
    }
    return 0;
  }
  if (*(_QWORD *)(v5 + 88) || *(_QWORD *)(v5 + 104))
    return 0;
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6
    || ((v7 = *(_DWORD *)(v6 + 16), v8 = (CA::Mat4Impl *)(v6 + 24), v7 >= 0x10)
      ? (v9 = v8)
      : (v9 = (CA::Mat4Impl *)&CA::Mat4Impl::mat4_identity_double),
        result = CA::Mat4Impl::mat4_is_affine(v9, (const double *)a2)))
  {
    if (*(double *)(v5 + 192) == 0.0 && *(double *)(v5 + 184) == 0.0)
      goto LABEL_16;
    return 0;
  }
  return result;
}

uint64_t CA::Render::Layer::evaluate_container(uint64_t this, const double *a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v2 = this;
  v3 = *(_DWORD *)(this + 12);
  if ((v3 & 0x1000) != 0 || (this = CA::Render::Layer::is_containerable((CA::Render::Layer *)this, a2), !(_DWORD)this))
    v4 = v3 & 0xFFFFF7FF;
  else
    v4 = v3 | 0x800;
  *(_DWORD *)(v2 + 12) = v4;
  return this;
}

CA::Render::Layer *CA::Render::Layer::set_single_sublayer(CA::Render::Layer *this, CA::Render::Layer *a2)
{
  CA::Render::Layer *v2;
  int v4;
  CA::Render::Layer *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v2 = a2;
  v4 = *((_DWORD *)this + 3);
  result = (CA::Render::Layer *)*((_QWORD *)this + 13);
  if ((v4 & 0x2000) != 0)
  {
    if (result == a2)
      return result;
    if (result)
    {
      v9 = (unsigned int *)((char *)result + 8);
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        result = (CA::Render::Layer *)(*(uint64_t (**)(CA::Render::Layer *))(*(_QWORD *)result + 16))(result);
    }
    if (!v2)
      goto LABEL_20;
    goto LABEL_17;
  }
  if (result)
  {
    v6 = (unsigned int *)((char *)result + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      result = (CA::Render::Layer *)(*(uint64_t (**)(CA::Render::Layer *))(*(_QWORD *)result + 16))(result);
    v4 = *((_DWORD *)this + 3);
  }
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 3) = v4 | 0x2000;
  if (v2)
  {
LABEL_17:
    v12 = (unsigned int *)((char *)v2 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    if (!v13)
    {
      v2 = 0;
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
    }
LABEL_20:
    *((_QWORD *)this + 13) = v2;
  }
  return result;
}

void CA::Render::Layer::frame(CA::Render::Layer *this, CA::Render::Layer *a2)
{
  float64x2_t v4;
  double *v5;
  __int128 v6;
  float64_t v7;
  float64x2_t v8[8];
  float64x2_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v7 = *((double *)a2 + 8);
  *(float64_t *)this = v7;
  v6 = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)this + 8) = v6;
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 11);
  v9 = 0uLL;
  v10 = 0;
  if (CA::Render::Layer::compute_frame_offset((uint64_t)a2, 0, &v9))
  {
    v4 = (float64x2_t)vdupq_lane_s64(v6, 0);
    v4.f64[0] = v7;
    *(float64x2_t *)this = vaddq_f64(v9, v4);
  }
  else
  {
    memset(v8, 0, sizeof(v8));
    CA::Render::Layer::compute_frame_transform((uint64_t)a2, 0, (CA::Mat4Impl *)v8, 0);
    CA::Mat4Impl::mat4_apply_to_rect(v8, (int8x16_t *)this, v5);
  }
}

CA::Render::Layer *CA::Render::Layer::set_rim_color(CA::Render::Layer *result, float a2, float a3, float a4, float a5)
{
  if (*((_QWORD *)result + 16) || a2 != 0.0 || a3 != 0.0 || a4 != 0.0 || a5 != 1.0)
  {
    result = (CA::Render::Layer *)CA::Render::Layer::ensure_ext(result);
    *((float *)result + 75) = a2;
    *((float *)result + 76) = a3;
    *((float *)result + 77) = a4;
    *((float *)result + 78) = a5;
  }
  return result;
}

CA::Render::Layer *CA::Render::Layer::set_contents_swizzle(CA::Render::Layer *result, int a2)
{
  char v2;

  v2 = a2;
  if (a2 || *((_QWORD *)result + 16))
  {
    result = (CA::Render::Layer *)CA::Render::Layer::ensure_ext(result);
    *((_BYTE *)result + 320) = *((_BYTE *)result + 320) & 0xFE | v2 & 1;
  }
  return result;
}

unsigned int *CA::Render::Layer::set_corner_radii(unsigned int *this, CA::Render::Vector *a2)
{
  CA::Render::Vector *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a2;
  if (a2 || *((_QWORD *)this + 16))
  {
    v3 = CA::Render::Layer::ensure_ext((CA::Render::Layer *)this);
    this = (unsigned int *)v3[9];
    if (this != (unsigned int *)v2)
    {
      if (this)
      {
        v4 = this + 2;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 16))(this);
      }
      if (v2)
      {
        v7 = (unsigned int *)((char *)v2 + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        if (!v8)
        {
          v2 = 0;
          do
            v9 = __ldaxr(v7);
          while (__stlxr(v9 - 1, v7));
        }
      }
      v3[9] = v2;
    }
  }
  return this;
}

uint64_t CA::Render::Layer::apply_contents_transform(uint64_t a1, uint64_t a2, float64x2_t *a3, int a4)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  double *v11;
  double *v12;
  double *v14;
  uint64_t v15;
  const double *v16;
  double *v17;
  float64x2_t v19;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  double v27;
  double v28;
  float64x2_t v29;
  float64x2_t v30[9];
  _OWORD v31[9];
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v29 = 0uLL;
  v27 = 0.0;
  v28 = 0.0;
  v7 = CA::Render::compute_gravity_transform((unsigned __int16)*(_DWORD *)(a1 + 36) >> 12, (double *)(a1 + 64), a3, (uint64_t)&v29, (uint64_t)&v27);
  v8 = *(_QWORD *)(a1 + 128);
  if (v8 && (v9 = *(_QWORD *)(v8 + 32)) != 0)
  {
    v32 = 0;
    memset(v31, 0, sizeof(v31));
    CA::Transform::set_affine_rectilinear((CA::Transform *)v31, v27, v28, v29.f64[0], v29.f64[1]);
    v10 = *(_DWORD *)(v9 + 16);
    v11 = (double *)(v9 + 24);
    v12 = (double *)(v9 + 40);
    _CF = v10 >= 6;
    if (v10 >= 6)
      v14 = (double *)(v9 + 56);
    else
      v14 = (double *)(MEMORY[0x1E0C9BAA8] + 32);
    if (!_CF)
    {
      v12 = (double *)(MEMORY[0x1E0C9BAA8] + 16);
      v11 = (double *)MEMORY[0x1E0C9BAA8];
    }
    CA::Transform::set_affine((CA::Transform *)v30, *v11, v11[1], *v12, v12[1], *v14, v14[1]);
    CA::Transform::concat((CA::Transform *)v31, v30, v15, v16);
    CA::Rect::apply_transform((int8x16_t *)a2, (const CA::Transform *)v31, v17);
    return 0;
  }
  else
  {
    if ((v7 & 1) == 0)
    {
      CA::BoundsImpl::scale((double *)a2, v27, v28);
      if (a4)
      {
        v19 = (float64x2_t)vdupq_n_s64(0x412E848000000000uLL);
        __asm { FMOV            V3.2D, #0.5 }
        v24 = vrndmq_f64(vmlaq_f64(_Q3, v19, *(float64x2_t *)a2));
        v25 = vrndmq_f64(vmlaq_f64(_Q3, v19, *(float64x2_t *)(a2 + 16)));
        v26 = (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
        *(float64x2_t *)a2 = vmulq_f64(v24, v26);
        *(float64x2_t *)(a2 + 16) = vmulq_f64(v25, v26);
      }
    }
    *(float64x2_t *)a2 = vaddq_f64(*(float64x2_t *)a2, v29);
    return 1;
  }
}

CA::Render::Layer *CA::Render::Layer::set_affine_matrix(CA::Render::Layer *result, int a2, unint64_t a3, float64x2_t *a4)
{
  _QWORD *v6;
  const CGAffineTransform *v7;
  _QWORD *v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  uint64_t v12;
  unsigned int v13;
  float64x2_t *v14;
  float64x2_t *v15;
  float64x2_t *v16;
  BOOL v17;
  float64x2_t *v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  char *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a3 >= 6)
  {
    v6 = CA::Render::Layer::ensure_ext(result);
    v8 = v6;
    v10 = *a4;
    v9 = a4[1];
    v28 = *a4;
    v29 = v9;
    v11 = a4[2];
    v30 = v11;
    if (a2)
    {
      v12 = v6[4];
      if (v12)
      {
        v13 = *(_DWORD *)(v12 + 16);
        v14 = (float64x2_t *)(v12 + 24);
        v15 = (float64x2_t *)(v12 + 40);
        v16 = (float64x2_t *)(v12 + 56);
        v17 = v13 >= 6;
        if (v13 < 6)
          v16 = (float64x2_t *)(MEMORY[0x1E0C9BAA8] + 32);
        v18 = (float64x2_t *)(MEMORY[0x1E0C9BAA8] + 16);
        if (v17)
          v18 = v15;
        if (!v17)
          v14 = (float64x2_t *)MEMORY[0x1E0C9BAA8];
        v19 = *v14;
        v20 = *v18;
        v21 = *v16;
        v22 = vmlaq_laneq_f64(vmulq_n_f64(*v14, v10.f64[0]), *v18, v10, 1);
        v23 = vmlaq_laneq_f64(vmulq_n_f64(*v14, v9.f64[0]), *v18, v9, 1);
        v28 = v22;
        v29 = v23;
        v30 = vmlaq_laneq_f64(vmlaq_n_f64(v21, v19, v11.f64[0]), v20, v11, 1);
      }
    }
    v24 = CA::Render::Vector::new_affine_transform((CA::Render::Vector *)&v28, v7);
    result = (CA::Render::Layer *)v8[4];
    v8[4] = v24;
    if (result)
    {
      v25 = (unsigned int *)((char *)result + 8);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
        return (CA::Render::Layer *)(*(uint64_t (**)(CA::Render::Layer *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

uint64_t CA::Render::get_rect_property(CA::Render *this, const CA::Rect *a2, int *a3, unsigned int *a4, double *a5)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v10;

  v5 = *a3;
  if ((_DWORD)a2 == 1)
  {
    if (v5 == 502)
    {
      *(_QWORD *)a4 = *((_QWORD *)this + 2);
      v6 = *((_QWORD *)this + 3);
      goto LABEL_12;
    }
    if (v5 == 407)
    {
      *(_QWORD *)a4 = *(_QWORD *)this;
      v6 = *((_QWORD *)this + 1);
LABEL_12:
      *((_QWORD *)a4 + 1) = v6;
      return 2;
    }
    return 0;
  }
  if (v5 == 502)
  {
    if ((_DWORD)a2 == 2)
    {
      v10 = a3[1];
      if (v10 == 593)
      {
        v8 = *((_QWORD *)this + 2);
        goto LABEL_20;
      }
      if (v10 == 250)
      {
        v8 = *((_QWORD *)this + 3);
        goto LABEL_20;
      }
    }
    return 0;
  }
  if (v5 != 407 || (_DWORD)a2 != 2)
    return 0;
  v7 = a3[1];
  if (v7 == 596)
  {
    v8 = *(_QWORD *)this;
    goto LABEL_20;
  }
  if (v7 != 600)
    return 0;
  v8 = *((_QWORD *)this + 1);
LABEL_20:
  *(_QWORD *)a4 = v8;
  return 1;
}

unint64_t CA::Render::TypedArray<CA::Render::Layer>::find_named_object(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v5;
  uint64_t v6;
  CA::Render::String *v7;

  v2 = *(_DWORD *)(a1 + 16);
  if (!v2)
    return 0xFFFFFFFFLL;
  if ((a2 & 0x40000000) == 0)
  {
    v5 = 0;
    v6 = a1 + 24;
    do
    {
      v7 = *(CA::Render::String **)(*(_QWORD *)(v6 + 8 * v5) + 120);
      if (v7)
      {
        if (CA::Render::String::equal(v7, a2))
          return v5;
        v2 = *(_DWORD *)(a1 + 16);
      }
      ++v5;
    }
    while (v5 < v2);
    return 0xFFFFFFFFLL;
  }
  if ((a2 & 0xBFFFFFFF) >= v2)
    return 0xFFFFFFFFLL;
  else
    return a2 & 0xBFFFFFFF;
}

BOOL CA::Render::atom_is_single_sublayer(CA::Render *this, uint64_t a2, CA::Render::Layer *a3)
{
  unsigned int v3;
  CA::Render::String *v4;

  v3 = this;
  if ((this & 0x40000000) != 0)
    return (this & 0xBFFFFFFF) == 0;
  v4 = *(CA::Render::String **)(a2 + 120);
  return v4 && CA::Render::String::equal(v4, v3);
}

char *CA::Render::set_rect_vector_property(CA::Render *this, Rect *a2, int *a3, const unsigned int *a4, unint64_t a5, double *a6, const double *a7)
{
  float64x2_t v7;
  const CA::Rect *v13;
  double v14;
  float64x2_t v16;
  float64x2_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (this)
  {
    v7 = 0uLL;
    _Q1 = 0uLL;
    if (*((_DWORD *)this + 4) >= 4u)
    {
      v7 = *(float64x2_t *)((char *)this + 24);
      _Q1 = vsubq_f64(*(float64x2_t *)((char *)this + 40), v7);
    }
  }
  else
  {
    __asm { FMOV            V1.2D, #1.0 }
    v7 = 0uLL;
  }
  v16 = v7;
  v17 = _Q1;
  CA::Render::set_rect_property(v16.f64, a2, a3, a4, a5, a6, a7);
  v14 = v17.f64[0];
  if (v17.f64[0] >= v17.f64[1])
    v14 = v17.f64[1];
  if (v14 > 0.0)
    return CA::Render::Vector::new_rect((CA::Render::Vector *)&v16, v13);
  else
    return 0;
}

BOOL CA::Render::Layer::has_hit_test_insecure_properties(CA::Render::Layer *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD __s1[2];
  char v7;
  char v8;
  __int16 v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (*((_QWORD *)this + 16) || *((_QWORD *)this + 13) || *((_QWORD *)this + 14))
      return 1;
    v3 = 0x1030C0004C00;
  }
  else
  {
    v3 = 0x3080004C00;
  }
  __s1[0] = 0;
  __s1[1] = 0;
  v8 = 0;
  v7 = *((_BYTE *)this + 32);
  v9 = *((_WORD *)this + 17);
  v4 = *((_QWORD *)this + 5);
  v10 = (*((unsigned __int8 *)this + 37) << 8) | 0xF0011;
  v11 = v4 & 0x1030E4004D03 | v3 & 0x103084004D03;
  v14 = *((_OWORD *)this + 5);
  v5 = *((_OWORD *)this + 3);
  v13 = *((_OWORD *)this + 4);
  v12 = v5;
  return memcmp(__s1, (char *)this + 16, 0x50uLL) != 0;
}

uint64_t CA::Render::Layer::count_layers(uint64_t this, int *a2, int *a3, char a4)
{
  _BOOL8 v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;

  LOBYTE(v4) = a4;
  v7 = this;
  while (1)
  {
    if (v4
      || (*(_BYTE *)(v7 + 41) & 1) != 0
      || (v8 = *(_QWORD *)(v7 + 144)) != 0 && (*(_QWORD *)(v8 + 96) & 0x300000000000) == 0x200000000000)
    {
      ++*a3;
      v4 = 1;
    }
    else
    {
      v4 = 0;
    }
    ++*a2;
    v9 = *(uint64_t **)(v7 + 128);
    if (v9)
    {
      this = *v9;
      if (*v9)
        this = (*(uint64_t (**)(uint64_t, int *, int *, _BOOL8))(*(_QWORD *)this + 240))(this, a2, a3, v4);
    }
    v10 = *(_QWORD *)(v7 + 104);
    if ((*(_BYTE *)(v7 + 13) & 0x20) == 0)
      break;
    v7 = *(_QWORD *)(v7 + 104);
    if (!v10)
      return this;
  }
  if (v10 && *(_DWORD *)(v10 + 16))
  {
    v11 = 0;
    do
      this = CA::Render::Layer::count_layers(*(CA::Render::Layer **)(v10 + 24 + 8 * v11++), a2, a3, v4);
    while (v11 < *(unsigned int *)(v10 + 16));
  }
  return this;
}

void CA::Render::Filter::show(CA::Render::Filter *this, int a2, char a3)
{
  _BOOL4 v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  CA::Render *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t buf[4];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = x_log_hook_p();
  if ((a3 & 1) != 0)
  {
    if (v6)
    {
      -[__CFString cStringUsingEncoding:]((id)CAAtomGetString(*((_DWORD *)this + 6)), "cStringUsingEncoding:", 4);
LABEL_21:
      x_log_();
      return;
    }
    v17 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v18 = -[__CFString cStringUsingEncoding:]((id)CAAtomGetString(*((_DWORD *)this + 6)), "cStringUsingEncoding:", 4);
      *(_DWORD *)buf = 136315138;
      v20 = v18;
      v14 = "%s;";
      v15 = v17;
      v16 = 12;
      goto LABEL_24;
    }
  }
  else
  {
    if (v6)
    {
      -[__CFString cStringUsingEncoding:]((id)CAAtomGetString(*((_DWORD *)this + 6)), "cStringUsingEncoding:", 4);
      x_log_();
    }
    else
    {
      v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v8 = -[__CFString cStringUsingEncoding:]((id)CAAtomGetString(*((_DWORD *)this + 6)), "cStringUsingEncoding:", 4);
        *(_DWORD *)buf = 136315138;
        v20 = v8;
        _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_DEFAULT, "(filter %s", buf, 0xCu);
      }
    }
    if ((*((_BYTE *)this + 13) & 1) == 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v9 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v9, OS_LOG_TYPE_DEFAULT, "(enabled false)", buf, 2u);
        }
      }
    }
    if (*((_QWORD *)this + 5))
    {
      v10 = (CA::Render *)(a2 + 1);
      CA::Render::show_newline(v10);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v11 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v11, OS_LOG_TYPE_DEFAULT, "(inputs ", buf, 2u);
        }
      }
      CA::Render::show_object(*((CA::Render **)this + 5), v10);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v12 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
    if (x_log_hook_p())
      goto LABEL_21;
    v13 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v14 = ")";
      v15 = v13;
      v16 = 2;
LABEL_24:
      _os_log_impl(&dword_184457000, v15, OS_LOG_TYPE_DEFAULT, v14, buf, v16);
    }
  }
}

CA::Render::Filter *CA::Render::Filter::copy_with_inputs(CA::Render::Filter *this, CA::Render::KeyValueArray *a2)
{
  malloc_zone_t *malloc_zone;
  CA::Render::Filter *result;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = (CA::Render::Filter *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x38uLL, 0x743898A5uLL);
  if (result)
    result = CA::Render::Filter::Filter(result, *((_DWORD *)this + 6), *((CA::Render::String **)this + 4), a2);
  *((_DWORD *)result + 3) |= *((_DWORD *)this + 3) & 0xFFFFFD00;
  return result;
}

void CA::WindowServer::AccelServer::~AccelServer(CA::WindowServer::AccelServer *this)
{
  *(_QWORD *)this = &off_1E158C1A0;
  *((_QWORD *)this + 126) = &unk_1E158C3D0;
  CA::WindowServer::AccelServer::purge_contexts((uint64_t)this);
  *(_QWORD *)(*((_QWORD *)this + 12) + 26456) = 0;
  CA::WindowServer::IOMFBServer::~IOMFBServer(this);
}

{
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = &off_1E158C1A0;
  *((_QWORD *)this + 126) = &unk_1E158C3D0;
  CA::WindowServer::AccelServer::purge_contexts((uint64_t)this);
  *(_QWORD *)(*((_QWORD *)this + 12) + 26456) = 0;
  CA::WindowServer::IOMFBServer::~IOMFBServer(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::WindowServer::IOMFBServer::cursor_position(CA::WindowServer::IOMFBServer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 1664))(*((_QWORD *)this + 12));
}

uint64_t CA::WindowServer::IOMFBServer::cursor_dictionary(CA::WindowServer::IOMFBServer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 1680))(*((_QWORD *)this + 12));
}

uint64_t CA::WindowServer::IOMFBServer::cursor_hidden(CA::WindowServer::IOMFBServer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 1704))(*((_QWORD *)this + 12));
}

uint64_t CA::WindowServer::IOMFBServer::cursor_enabled(CA::WindowServer::IOMFBServer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 1720))(*((_QWORD *)this + 12));
}

uint64_t CA::WindowServer::IOMFBServer::copy_brightness_capabilities(CA::WindowServer::IOMFBServer *this)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  const void *v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 12);
  v2 = (os_unfair_lock_s *)(v1 + 27208);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 27208));
  v3 = *(const void **)(v1 + 27216);
  if (v3)
  {
    CFRetain(v3);
    v4 = *(_QWORD *)(v1 + 27216);
  }
  else
  {
    v4 = 0;
  }
  os_unfair_lock_unlock(v2);
  return v4;
}

void CA::WindowServer::IOMFBServer::update_brightness_capabilities(CA::WindowServer::IOMFBDisplay **this, const __CFDictionary *a2)
{
  CA::WindowServer::IOMFBDisplay::update_brightness_capabilities(this[12], a2);
}

uint64_t CA::WindowServer::IOMFBServer::service_object(CA::WindowServer::IOMFBServer *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 12) + 25528);
}

uint64_t CA::WindowServer::Server::set_digital_modes(CA::WindowServer::Server *this, const __CFArray *a2, const __CFArray *a3)
{
  return 0;
}

uint64_t CA::WindowServer::Server::set_digital_modes(CA::WindowServer::Server *this, const __CFArray *a2)
{
  return 0;
}

uint64_t CA::WindowServer::Server::copy_display_timings(CA::WindowServer::Server *this, CA::WindowServer::Server *a2)
{
  return 0;
}

void CA::WindowServer::IOMFBServer::adjust_display_timings(CA::WindowServer::IOMFBServer *this, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;

  v3 = *((_QWORD *)this + 12);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 26016));
  CA::WindowServer::IOMFBDisplay::initialize_timings((CA::WindowServer::IOMFBDisplay *)v3);
  v4 = *(unsigned __int8 **)(v3 + 26032);
  if (v4)
  {
    v5 = atomic_load(v4);
    if (a2)
    {
      if ((v5 & 1) != 0 && !*(_QWORD *)(v3 + 26080))
      {
        v6 = *(_QWORD *)(v3 + 26064) + a2;
        *(_QWORD *)(v3 + 26064) = v6;
        *(_QWORD *)(v3 + 26080) = 8;
        v7 = atomic_load((unint64_t *)(*(_QWORD *)(v3 + 26032) + 48));
        v8 = v6 - v7;
        v9 = atomic_load((unint64_t *)(*(_QWORD *)(v3 + 26032) + 56));
        v10 = v8 + v9;
        v11 = *(_QWORD *)(v3 + 26032);
        v12 = (unsigned int *)(v11 + 16);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
        atomic_store(*(_QWORD *)(v3 + 26064), (unint64_t *)(v11 + 48));
        atomic_store(v10, (unint64_t *)(v11 + 56));
        atomic_store(*(_QWORD *)(v3 + 26072), (unint64_t *)(v11 + 64));
        atomic_store(v13 + 2, (unsigned int *)(v11 + 16));
        __dmb(0xBu);
      }
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 26016));
}

CA::Shape **CA::WindowServer::AccelServer::render_surface(CA::WindowServer::Display **this, CA::Render::Update *a2, CA::WindowServer::Surface *a3, const CA::Bounds *a4, unsigned int a5, int a6)
{
  CA::Shape **v12;
  CA::OGL::Renderer *v13;
  uint64_t v14;

  if (!(*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)a3 + 160))(a3))
    return CA::WindowServer::Server::render_surface(this, a2, a3, a4, a5, a6);
  v12 = (CA::Shape **)(*((uint64_t (**)(CA::WindowServer::Display **))*this + 49))(this);
  if (!v12)
    return CA::WindowServer::Server::render_surface(this, a2, a3, a4, a5, a6);
  v13 = (CA::OGL::Renderer *)v12;
  v14 = CA::WindowServer::Display::render_surface(this[12], v12, a3, a2, a4, a5, a6);
  CA::OGL::Renderer::collect(v13, a2, *((double *)a2 + 9));
  return (CA::Shape **)v14;
}

uint64_t CA::WindowServer::AccelServer::release_resources(uint64_t this)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(this + 1024);
  if (v1)
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 224))(*v1, 0);
  return this;
}

uint64_t CA::WindowServer::AccelServer::purge_resources(uint64_t this)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(this + 1024);
  if (v1)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v1 + 224))(*v1, 1);
  return this;
}

uint64_t CA::WindowServer::AccelServer::flush_command_stream(CA::WindowServer::AccelServer *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 127);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 408))(result, 1);
  return result;
}

uint64_t CA::WindowServer::AccelServer::supports_fences(CA::WindowServer::AccelServer *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 127);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 248))(result);
  return result;
}

uint64_t CA::WindowServer::AccelServer::set_fence(CA::WindowServer::AccelServer *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 127);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 256))(result);
  return result;
}

uint64_t CA::WindowServer::AccelServer::test_fence(CA::WindowServer::AccelServer *this, uint64_t a2)
{
  uint64_t v2;

  if (a2 && (v2 = *((_QWORD *)this + 127)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 264))(v2);
  else
    return 0;
}

_QWORD *CA::WindowServer::AccelServer::delete_fence(_QWORD *this, uint64_t a2)
{
  if (a2)
  {
    this = (_QWORD *)this[127];
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 272))(this);
  }
  return this;
}

uint64_t `non-virtual thunk to'CA::WindowServer::AccelServer::flush_command_stream(CA::WindowServer::AccelServer *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 408))(result, 1);
  return result;
}

uint64_t `non-virtual thunk to'CA::WindowServer::AccelServer::supports_fences(CA::WindowServer::AccelServer *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 248))(result);
  return result;
}

uint64_t `non-virtual thunk to'CA::WindowServer::AccelServer::set_fence(CA::WindowServer::AccelServer *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 256))(result);
  return result;
}

uint64_t `non-virtual thunk to'CA::WindowServer::AccelServer::test_fence(CA::WindowServer::AccelServer *this, uint64_t a2)
{
  uint64_t v2;

  if (a2 && (v2 = *((_QWORD *)this + 1)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 264))(v2);
  else
    return 0;
}

_QWORD *`non-virtual thunk to'CA::WindowServer::AccelServer::delete_fence(_QWORD *this, uint64_t a2)
{
  if (a2)
  {
    this = (_QWORD *)this[1];
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 272))(this);
  }
  return this;
}

uint64_t CA::WindowServer::AccelServer::purge_contexts(uint64_t this)
{
  CA::OGL::Renderer *v1;
  uint64_t v2;
  malloc_zone_t *malloc_zone;
  uint64_t v4;

  v1 = *(CA::OGL::Renderer **)(this + 1024);
  if (v1)
  {
    v2 = this;
    *(_QWORD *)(*(_QWORD *)(this + 96) + 312) = 0;
    CA::OGL::Renderer::~Renderer(v1);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v1);
    *(_QWORD *)(v2 + 1024) = 0;
    v4 = *(_QWORD *)(v2 + 1016);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 224))(v4, 1);
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *(_QWORD *)(v2 + 1016) = 0;
  }
  return this;
}

CA::WindowServer::AccelServer *CA::WindowServer::AccelServer::AccelServer(CA::WindowServer::AccelServer *this, CA::WindowServer::IOMFBDisplay *a2, const __CFString *a3)
{
  CA::WindowServer::Server *v5;
  _BYTE *v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  float *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  __CFArray *Mutable;
  const __CFAllocator *v14;
  CFDictionaryRef v15;
  uint64_t i;
  uint64_t v17;
  __CFRunLoopSource *RunLoopSource;
  uint64_t v19;
  const char **v20;
  uint64_t v21;
  uint64_t v22;
  __CFRunLoopSource *v24;
  char v25;
  char **v26;
  CA::WindowServer::IOMFBServer *v27;
  uint64_t v28;
  CFDictionaryRef v29;
  uint64_t j;
  __CFRunLoop *v31;
  const void *v32;
  uint64_t v33;
  int v35;
  int v36;
  int valuePtr;
  void *keys[2];
  void (*v39)(uint64_t);
  void *v40;
  CA::WindowServer::AccelServer *v41;
  __CFArray *v42;
  void *values;
  CFNumberRef v44;
  CFNumberRef v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v5 = CA::WindowServer::Server::Server(this, a2, a3);
  *(_QWORD *)v5 = &off_1E158C410;
  *(_OWORD *)((char *)v5 + 824) = 0u;
  *((_DWORD *)v5 + 210) = 1065353216;
  *((_QWORD *)v5 + 107) = 0x7FF0000000000000;
  *((_OWORD *)v5 + 54) = 0u;
  *((_OWORD *)v5 + 55) = 0u;
  *((_OWORD *)v5 + 56) = 0u;
  *((_OWORD *)v5 + 57) = 0u;
  *((_QWORD *)v5 + 117) = 0x3FD0000000000000;
  *(_OWORD *)((char *)v5 + 984) = 0u;
  *((_DWORD *)v5 + 250) = 0;
  *((_BYTE *)v5 + 1006) |= 1u;
  if (CADeviceUseVBL::once[0] != -1)
    dispatch_once(CADeviceUseVBL::once, &__block_literal_global_12);
  *((_BYTE *)this + 1006) = *((_BYTE *)this + 1006) & 0xF9 | (2 * CADeviceUseVBL::use_vbl);
  x_thread_init_mutex((pthread_mutex_t *)((char *)this + 544), 1);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 608), 0);
  pthread_cond_init((pthread_cond_t *)this + 14, 0);
  pthread_cond_init((pthread_cond_t *)this + 15, 0);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 544));
  CA::WindowServer::IOMFBServer::add_runloop_source(this, 0, 0);
  if (!*((_QWORD *)this + 99))
  {
    v17 = *((_QWORD *)this + 12);
    if (*(_QWORD *)(v17 + 25536))
    {
      if (*(_BYTE *)(v17 + 28052))
      {
        RunLoopSource = (__CFRunLoopSource *)IOMobileFramebufferGetRunLoopSource();
        *((_QWORD *)this + 99) = RunLoopSource;
        if (RunLoopSource)
        {
          CA::WindowServer::IOMFBServer::add_runloop_source(this, RunLoopSource, 0);
          IOMobileFramebufferEnableHotPlugDetectNotifications();
        }
      }
    }
  }
  if (!*((_QWORD *)this + 106))
  {
    if (*(_QWORD *)(*((_QWORD *)this + 12) + 25536))
    {
      v19 = IOMobileFramebufferSupportedFrameInfo();
      if (v19)
      {
        v20 = (const char **)v19;
        v21 = 0;
        do
          v22 = v21;
        while (*(_QWORD *)(v19 + 8 * v21++));
        v24 = (__CFRunLoopSource *)IOMobileFramebufferGetRunLoopSource();
        *((_QWORD *)this + 106) = v24;
        if (v24)
        {
          CA::WindowServer::IOMFBServer::add_runloop_source(this, v24, 1);
          v25 = IOMobileFramebufferFrameInfo() == 0;
          CA::WindowServer::IOMFBDisplay::set_frame_info_enabled(*((CA::WindowServer::IOMFBDisplay **)this + 12), v25);
          CA::WindowServer::IOMFBServer::enable_frame_info_tag_list(this, (const char **)off_1E15AA0B0, 9, v20, v22);
          if (CADeviceSupportsRTPLC::once != -1)
            dispatch_once(&CADeviceSupportsRTPLC::once, &__block_literal_global_218);
          if (CADeviceSupportsRTPLC::rtplc)
          {
            v26 = off_1E15AA0F8;
            v27 = this;
            v28 = 5;
LABEL_70:
            CA::WindowServer::IOMFBServer::enable_frame_info_tag_list(v27, (const char **)v26, v28, v20, v22);
            goto LABEL_5;
          }
          if (CADeviceSupportsBandwidthStatistics::once != -1)
            dispatch_once(&CADeviceSupportsBandwidthStatistics::once, &__block_literal_global_239);
          if (CADeviceSupportsBandwidthStatistics::bw_stats)
          {
            v26 = off_1E15AA120;
            v27 = this;
            v28 = 4;
            goto LABEL_70;
          }
        }
      }
    }
  }
LABEL_5:
  if (CADeviceSupportsBrightnessTransactions::once != -1)
    dispatch_once(&CADeviceSupportsBrightnessTransactions::once, &__block_literal_global_78);
  v6 = (char *)a2 + 28052;
  v7 = *((_QWORD *)this + 12);
  v8 = (*(_WORD *)(v7 + 656) & 0x1C00) != 0
    || CADeviceSupportsBrightnessTransactions::supports_brightness_transaction == 0;
  v9 = !v8;
  *(_BYTE *)(v7 + 28123) = v9;
  if (!v8)
    IOMobileFramebufferSetBrightnessControlCallback();
  (*(void (**)(CA::WindowServer::AccelServer *, _QWORD))(*(_QWORD *)this + 320))(this, 0);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 12) + 216))(*((_QWORD *)this + 12)))
  {
    CA::WindowServer::IOMFBServer::add_vsync_source(this, v10);
    CA::WindowServer::IOMFBServer::add_power_log_timer((CFRunLoopRef *)this);
  }
  if (*v6)
  {
    v11 = 0;
  }
  else
  {
    if ((*((_WORD *)a2 + 328) & 0x1C00) == 0x1000)
      goto LABEL_54;
    if (CADeviceNeedsDisplayWorkarounds::once[0] != -1)
      dispatch_once(CADeviceNeedsDisplayWorkarounds::once, &__block_literal_global_52_9800);
    v11 = CADeviceNeedsDisplayWorkarounds::needs_workarounds != 0;
    if (!*v6)
    {
      v12 = 0;
      if (CADeviceNeedsDisplayWorkarounds::needs_workarounds)
        goto LABEL_21;
      goto LABEL_20;
    }
  }
  v12 = *((_BYTE *)a2 + 28068) == 0;
  if (v11)
    goto LABEL_21;
LABEL_20:
  if (!v12)
    goto LABEL_54;
LABEL_21:
  Mutable = CFArrayCreateMutable(0, 2, MEMORY[0x1E0C9B378]);
  if (!v11)
  {
    if (!v12)
      goto LABEL_50;
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    goto LABEL_47;
  }
  v36 = 5;
  valuePtr = 65280;
  v35 = 1414743620;
  *(_OWORD *)keys = xmmword_1E15AA270;
  v39 = (void (*)(uint64_t))CFSTR("LocationID");
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  v44 = CFNumberCreate(v14, kCFNumberSInt32Type, &v36);
  v45 = CFNumberCreate(v14, kCFNumberSInt32Type, &v35);
  v15 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  for (i = 0; i != 24; i += 8)
    CFRelease(*(void **)((char *)&values + i));
  CFArrayAppendValue(Mutable, v15);
  CFRelease(v15);
  if (v12)
  {
LABEL_47:
    v36 = 138;
    valuePtr = 32;
    keys[0] = CFSTR("PrimaryUsagePage");
    keys[1] = CFSTR("PrimaryUsage");
    values = CFNumberCreate(v14, kCFNumberSInt32Type, &valuePtr);
    v44 = CFNumberCreate(v14, kCFNumberSInt32Type, &v36);
    v29 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    for (j = 0; j != 16; j += 8)
      CFRelease(*(void **)((char *)&values + j));
    CFArrayAppendValue(Mutable, v29);
    CFRelease(v29);
  }
LABEL_50:
  if (Mutable)
  {
    if (CFArrayGetCount(Mutable) < 1)
    {
      CFRelease(Mutable);
    }
    else
    {
      CA::WindowServer::IOMFBServer::add_runloop_source(this, 0, 0);
      v31 = (__CFRunLoop *)*((_QWORD *)this + 96);
      v32 = (const void *)*MEMORY[0x1E0C9B280];
      keys[0] = (void *)MEMORY[0x1E0C809B0];
      keys[1] = (void *)0x40000000;
      v39 = ___ZN2CA12WindowServer11IOMFBServerC2EPNS0_12IOMFBDisplayEPK10__CFString_block_invoke;
      v40 = &__block_descriptor_tmp_86;
      v41 = this;
      v42 = Mutable;
      CFRunLoopPerformBlock(v31, v32, keys);
    }
  }
LABEL_54:
  if (!*v6 && (*((_WORD *)a2 + 328) & 0x1C00) != 0x1000)
  {
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 12) + 216))(*((_QWORD *)this + 12)))
      CA::WindowServer::IOMFBServer::register_libedr_callbacks(this);
    CA::Render::add_observer(0x19u, 0, (uint64_t)CA::WindowServer::IOMFBServer::flush_irdc, (uint64_t)this, 0);
  }
  CA::Render::add_observer(0x2Au, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_power_log, (uint64_t)this, 0);
  CA::Render::add_observer(0x2Bu, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_max_rate_power_log, (uint64_t)this, 0);
  CA::Render::add_observer(0x2Eu, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_render_statistics_power_log, (uint64_t)this, 0);
  CA::Render::add_observer(0x35u, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_brightness_hotplug, (uint64_t)this, 0);
  CA::Render::add_observer(0x36u, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_power_notification, (uint64_t)this, 0);
  CA::Render::add_observer(0x3Du, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_flipbook_state_notification, (uint64_t)this, 0);
  CA::Render::add_observer(0x3Eu, 0, (uint64_t)CA::WindowServer::IOMFBServer::check_display_blanked, (uint64_t)this, 0);
  if ((*(_DWORD *)(*((_QWORD *)this + 12) + 624) & 0x10) != 0)
  {
    CA::Render::add_observer(0x37u, 0, (uint64_t)CA::WindowServer::IOMFBServer::register_frame_interval_range, (uint64_t)this, 0);
    CA::Render::add_observer(0x38u, 0, (uint64_t)CA::WindowServer::IOMFBServer::register_frame_interval_reasons, (uint64_t)this, 0);
    CA::Render::add_observer(0x39u, 0, (uint64_t)CA::WindowServer::IOMFBServer::request_frame_phase_shift, (uint64_t)this, 0);
    CA::Render::add_observer(0x2Cu, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_frame_rate_power_log, (uint64_t)this, 0);
    CA::Render::add_observer(0x47u, 0, (uint64_t)CA::WindowServer::IOMFBServer::get_display_debug_properties, (uint64_t)this, 0);
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 544));
  *(_QWORD *)this = &off_1E158C1A0;
  *((_QWORD *)this + 126) = &unk_1E158C3D0;
  if ((CA::WindowServer::AccelServer::AccelServer(CA::WindowServer::IOMFBDisplay *,__CFString const*)::initialized & 1) == 0)
  {
    getenv("CA_ENABLE_OGL");
    CA::WindowServer::AccelServer::AccelServer(CA::WindowServer::IOMFBDisplay *,__CFString const*)::initialized = 1;
  }
  v33 = *((_QWORD *)this + 12);
  *(_QWORD *)(v33 + 26456) = (char *)this + 1008;
  if ((*(_WORD *)(v33 + 656) & 0x1C00) == 0)
    CA::WindowServer::AccelServer::renderer(this);
  return this;
}

void CA::Render::KeyValue::show(CA::Render::KeyValue *this, int a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint8_t buf[4];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((a3 & 1) == 0)
  {
    if (x_log_hook_p())
    {
      -[__CFString cStringUsingEncoding:]((id)CAAtomGetString(*((_DWORD *)this + 4)), "cStringUsingEncoding:", 4);
      x_log_();
    }
    else
    {
      v6 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v7 = -[__CFString cStringUsingEncoding:]((id)CAAtomGetString(*((_DWORD *)this + 4)), "cStringUsingEncoding:", 4);
        *(_DWORD *)buf = 136315138;
        v12 = v7;
        _os_log_impl(&dword_184457000, v6, OS_LOG_TYPE_DEFAULT, "(%s ", buf, 0xCu);
      }
    }
    v8 = *((_QWORD *)this + 3);
    if (v8)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 40))(v8, (a2 + 1), a3);
    }
    else if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v9 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v9, OS_LOG_TYPE_DEFAULT, "nil", buf, 2u);
      }
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v10 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
      }
    }
  }
}

double CA::Render::KeyValueArray::get_vec2_key(CA::Render::KeyValueArray *a1, const CA::Render::KeyValueArray *a2, uint64_t a3)
{
  unsigned int named_object;
  uint64_t v6;

  named_object = CA::Render::KeyValueArray::find_named_object_(a1, a2);
  if ((named_object & 0x80000000) == 0)
  {
    v6 = *(_QWORD *)(*((_QWORD *)a1 + named_object + 3) + 24);
    if (v6)
    {
      if (*(_BYTE *)(v6 + 12) == 56 && *(_DWORD *)(v6 + 16) >= 2u)
        a3 = v6 + 24;
    }
  }
  return *(double *)a3;
}

CFStringRef caIOSurfaceCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;

  v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, CFSTR("<CAIOSurface %p>"), a1);
}

CFStringRef caIOSurfaceCopyDebugDescription(CFStringRef result)
{
  CFStringRef v1;
  const __CFAllocator *v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetAllocator(result);
    return CFStringCreateWithFormat(v2, 0, CFSTR("<CAIOSurface %p"), v1);
  }
  return result;
}

uint64_t CAIOSurfaceGetTypeID()
{
  uint64_t result;

  result = CAIOSurfaceGetTypeID::type;
  if (!CAIOSurfaceGetTypeID::type)
  {
    result = _CFRuntimeRegisterClass();
    CAIOSurfaceGetTypeID::type = result;
  }
  return result;
}

uint64_t CA::OGL::PingPongState::replicate_edges(CA::OGL::PingPongState *this, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10)
{
  char *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *((_QWORD *)this + 16) = 0;
  v15 = (char *)this + 818;
  *((_QWORD *)this + 12) = (char *)this + 818;
  *(_OWORD *)((char *)this + 104) = xmmword_18474E060;
  if (*((_QWORD *)this + 17) <= 0x1FuLL)
  {
    *((_WORD *)this + 408) |= 0x20u;
    v16 = a7;
    v17 = a8;
    CA::OGL::Context::array_flush((uint64_t)this);
    a8 = v17;
    a7 = v16;
    *((_QWORD *)this + 16) = 0;
    *((_QWORD *)this + 12) = v15;
    *(_OWORD *)((char *)this + 104) = xmmword_18474E060;
  }
  v18 = a8 + 0.5;
  v19 = a7 + 0.5;
  CA::OGL::Context::array_rect(this, a3 - a2, a4, a3, a6);
  v20 = *((_QWORD *)this + 15) + 48 * *((_QWORD *)this + 16);
  *(float *)(v20 - 176) = v19;
  *(float *)(v20 - 172) = v18;
  *(float *)(v20 - 128) = v19;
  *(float *)(v20 - 124) = v18;
  *(float *)(v20 - 80) = v19;
  *(float *)(v20 - 76) = a10 + -0.5;
  *(float *)(v20 - 32) = v19;
  *(float *)(v20 - 28) = a10 + -0.5;
  CA::OGL::Context::array_rect(this, a5, a4, a5 + a2, a6);
  v21 = *((_QWORD *)this + 15) + 48 * *((_QWORD *)this + 16);
  *(float *)(v21 - 176) = a9 + -0.5;
  *(float *)(v21 - 172) = v18;
  *(float *)(v21 - 128) = a9 + -0.5;
  *(float *)(v21 - 124) = v18;
  *(float *)(v21 - 80) = a9 + -0.5;
  *(float *)(v21 - 76) = a10 + -0.5;
  *(float *)(v21 - 32) = a9 + -0.5;
  *(float *)(v21 - 28) = a10 + -0.5;
  CA::OGL::Context::array_rect(this, a3, a4 - a2, a5, a4);
  v22 = *((_QWORD *)this + 15) + 48 * *((_QWORD *)this + 16);
  *(float *)(v22 - 176) = v19;
  *(float *)(v22 - 172) = v18;
  *(float *)(v22 - 128) = a9 + -0.5;
  *(float *)(v22 - 124) = v18;
  *(float *)(v22 - 80) = a9 + -0.5;
  *(float *)(v22 - 76) = v18;
  *(float *)(v22 - 32) = v19;
  *(float *)(v22 - 28) = v18;
  CA::OGL::Context::array_rect(this, a3, a6, a5, a6 + a2);
  v23 = *((_QWORD *)this + 15) + 48 * *((_QWORD *)this + 16);
  *(float *)(v23 - 176) = v19;
  *(float *)(v23 - 172) = a10 + -0.5;
  *(float *)(v23 - 128) = a9 + -0.5;
  *(float *)(v23 - 124) = a10 + -0.5;
  *(float *)(v23 - 80) = a9 + -0.5;
  *(float *)(v23 - 76) = a10 + -0.5;
  *(float *)(v23 - 32) = v19;
  *(float *)(v23 - 28) = a10 + -0.5;
  CA::OGL::Context::array_rect(this, a3 - a2, a4 - a2, a3, a4);
  v24 = *((_QWORD *)this + 15) + 48 * *((_QWORD *)this + 16);
  *(float *)(v24 - 176) = v19;
  *(float *)(v24 - 172) = v18;
  *(float *)(v24 - 128) = v19;
  *(float *)(v24 - 124) = v18;
  *(float *)(v24 - 80) = v19;
  *(float *)(v24 - 76) = v18;
  *(float *)(v24 - 32) = v19;
  *(float *)(v24 - 28) = v18;
  CA::OGL::Context::array_rect(this, a5, a4 - a2, a5 + a2, a4);
  v25 = *((_QWORD *)this + 15) + 48 * *((_QWORD *)this + 16);
  *(float *)(v25 - 176) = a9 + -0.5;
  *(float *)(v25 - 172) = v18;
  *(float *)(v25 - 128) = a9 + -0.5;
  *(float *)(v25 - 124) = v18;
  *(float *)(v25 - 80) = a9 + -0.5;
  *(float *)(v25 - 76) = v18;
  *(float *)(v25 - 32) = a9 + -0.5;
  *(float *)(v25 - 28) = v18;
  CA::OGL::Context::array_rect(this, a3 - a2, a6, a3, a6 + a2);
  v26 = *((_QWORD *)this + 15) + 48 * *((_QWORD *)this + 16);
  *(float *)(v26 - 176) = v19;
  *(float *)(v26 - 172) = a10 + -0.5;
  *(float *)(v26 - 128) = v19;
  *(float *)(v26 - 124) = a10 + -0.5;
  *(float *)(v26 - 80) = v19;
  *(float *)(v26 - 76) = a10 + -0.5;
  *(float *)(v26 - 32) = v19;
  *(float *)(v26 - 28) = a10 + -0.5;
  CA::OGL::Context::array_rect(this, a5, a6, a5 + a2, a6 + a2);
  v27 = *((_QWORD *)this + 15) + 48 * *((_QWORD *)this + 16);
  *(float *)(v27 - 176) = a9 + -0.5;
  *(float *)(v27 - 172) = a10 + -0.5;
  *(float *)(v27 - 128) = a9 + -0.5;
  *(float *)(v27 - 124) = a10 + -0.5;
  *(float *)(v27 - 80) = a9 + -0.5;
  *(float *)(v27 - 76) = a10 + -0.5;
  *(float *)(v27 - 32) = a9 + -0.5;
  *(float *)(v27 - 28) = a10 + -0.5;
  return CA::OGL::Context::array_flush((uint64_t)this);
}

uint64_t CA::OGL::BlurState::copy(float32x2_t *this, float a2)
{
  uint64_t v4;
  uint64_t result;
  __int16 v6;
  int v7;
  float32x2_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;
  int v20[2];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t)*this;
  result = CA::OGL::PingPongState::attach_dest(this, 1, (int)a2);
  if ((_DWORD)result)
  {
    v6 = this[4].i16[0];
    v7 = v6;
    v8 = &this[(v6 & 1) + 11];
    if (v7 < 0)
      v8 = this + 1;
    v9 = (uint64_t)*v8;
    v11 = *(_DWORD *)(*(_QWORD *)v8 + 36);
    v20[0] = *(_DWORD *)(*(_QWORD *)v8 + 32);
    v10 = v20[0];
    v20[1] = v11;
    CA::OGL::Context::bind_surface((uint64_t)*this, v9, 0, 1u, 1, 0.0);
    v19 = 0;
    memset(&v18[2], 0, 32);
    memset(v18, 0, 32);
    v12 = *(_QWORD *)(v4 + 232);
    *(_OWORD *)((char *)v18 + 8) = *(_OWORD *)(v12 + 8);
    v13 = *(_QWORD *)(v12 + 32);
    *((_QWORD *)&v18[1] + 1) = *(_QWORD *)(v12 + 24);
    *(_QWORD *)&v18[2] = v13;
    *(_OWORD *)((char *)&v18[2] + 8) = *(_OWORD *)(v12 + 40);
    *((_QWORD *)&v18[3] + 1) = *(_QWORD *)(v12 + 56);
    LOWORD(v13) = *(_WORD *)(v12 + 68);
    LODWORD(v19) = *(_DWORD *)(v12 + 64);
    HIDWORD(v19) = v13 & 0x5FF;
    *((_QWORD *)&v18[0] + 1) = &CA::Shape::_infinite_shape;
    *(_QWORD *)&v18[0] = CA::OGL::Context::set_gstate(v4, (uint64_t)v18);
    CA::OGL::BlurState::process_edges((CA::OGL::BlurState *)this, a2, 1.0, 1.0, v20);
    *(_BYTE *)(*(_QWORD *)(v4 + 16) + 16) = 1;
    *(_QWORD *)(v4 + 128) = 0;
    *(_QWORD *)(v4 + 96) = v4 + 818;
    *(_OWORD *)(v4 + 104) = xmmword_18474E060;
    v17 = 0;
    CA::OGL::PingPongState::render_pass((uint64_t)this, v10, v11, 0, &v17, 1.0, 1.0, 0.0, 0.0);
    CA::OGL::Context::array_flush(v4);
    v14 = this[4].i16[0];
    v15 = v14;
    v16 = (uint64_t *)&this[(v14 & 1) + 11];
    if (v15 < 0)
      v16 = (uint64_t *)&this[1];
    CA::OGL::Context::unbind_surface(*this, *v16, 0);
    CA::OGL::Context::pop_surface(*(CA::OGL::Context **)this);
    ++this[4].i16[0];
    *(_BYTE *)(*(_QWORD *)(v4 + 16) + 16) = 0;
    return CA::OGL::Context::set_gstate(v4, **(_QWORD **)(v4 + 232));
  }
  return result;
}

uint64_t CA::OGL::blur_downsample_alignment(CA::OGL *this, double a2)
{
  double v2;
  double v3;
  double v4;

  if ((this & 1) != 0)
  {
    v2 = 20.0;
    v3 = 5.5;
    v4 = 3.5;
  }
  else
  {
    v4 = 3.5;
    v3 = 5.5;
    if (a2 > 100.0)
    {
      v4 = 5.5;
      v3 = 9.5;
    }
    if (a2 > 3600.0)
    {
      v4 = v4 + 1.0;
      v3 = v3 + 1.0;
    }
    v2 = 20.0;
    if (a2 > 3600.0)
      v2 = 21.0;
    if (a2 > 10000.0)
    {
      v4 = v4 + 1.0;
      v3 = v3 + 1.0;
      v2 = v2 + 1.0;
    }
  }
  if (v2 * v2 < a2)
    return 8;
  if (v3 * v3 >= a2)
    return 2 * (v4 * v4 < a2);
  return 4;
}

void CA::OGL::DownsampleState::asg(float32x2_t *this, int a2, float64x2_t *a3, float a4)
{
  float v8;
  float v9;
  float v10;
  float v11;
  _QWORD *v12;
  _BOOL8 v13;
  float32x2_t v14;
  float32x2_t v15;
  int32x2_t v16;
  int64x2_t v17;
  int8x8_t v18;
  int64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x2_t v25;
  int32x2_t v26;
  int v27;
  int v28;
  int8x8_t v30;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __int16 v36;
  int v37;
  uint64_t *v38;
  int v39;
  int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  int v54;
  uint64_t *v55;
  int32x2_t v56[2];
  _DWORD v57[3];
  float v58;
  int32x4_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v8 = this[6].f32[0];
  v9 = this[6].f32[1];
  v10 = this[7].f32[0];
  v11 = this[7].f32[1];
  if (a2)
  {
    this[6].f32[1] = v9 * a4;
    this[7].f32[1] = v11 * a4;
  }
  else
  {
    this[6].f32[0] = v8 * a4;
    this[7].f32[0] = v10 * a4;
  }
  v12 = (_QWORD *)*this;
  if (a3)
  {
LABEL_28:
    if (fabsf(a4 + -0.75) >= 0.001)
    {
      v34 = v12[2];
      if (fabsf(a4 + -0.5) >= 0.001)
        v35 = 94;
      else
        v35 = 96;
    }
    else
    {
      v34 = v12[2];
      v35 = 95;
    }
    *(_BYTE *)(v34 + 16) = v35;
    v36 = this[4].i16[0];
    v37 = v36;
    v38 = (uint64_t *)&this[(v36 & 1) + 11];
    if (v37 < 0)
      v38 = (uint64_t *)&this[1];
    v39 = *(_DWORD *)(*v38 + 32);
    v40 = *(_DWORD *)(*v38 + 36);
    CA::OGL::Context::bind_surface((uint64_t)*this, *v38, 0, 1u, 1, 0.0);
    v41 = v8 - (float)v39;
    v42 = v9 - (float)v40;
    v43 = v10 - (float)v39;
    v44 = v11 - (float)v40;
    v45 = a4 * 3.14159265;
    v58 = v45;
    v46 = 1.0;
    if (a2)
      v47 = 0.0;
    else
      v47 = 1.0;
    if (!a2)
      v46 = 0.0;
    *(float *)v57 = v47;
    *(float *)&v57[1] = v46;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, _DWORD *))(*v12 + 1000))(v12, 0, 2, 1, v57);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, float *))(*v12 + 1000))(v12, 1, 1, 1, &v58);
    if (a3)
    {
      v62 = 0u;
      v48 = *(_QWORD *)(v12[29] + 8);
      v59.i64[0] = (uint64_t)v12;
      v59.i64[1] = v48;
      v61 = 0u;
      v60 = 0;
      WORD4(v61) = 256;
      CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v59);
      v56[0] = 0;
      v56[1] = 0;
      while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v59, v56))
      {
        CA::OGL::Context::array_quad(v12, a3, a3 + 2, a3 + 4, a3 + 6);
        v49 = *(_QWORD *)(v12[2] + 8);
        v50 = v12[15] + 48 * v12[16];
        *(_QWORD *)(v50 - 160) = v49;
        *(_QWORD *)(v50 - 112) = v49;
        *(_QWORD *)(v50 - 64) = v49;
        *(_QWORD *)(v50 - 16) = v49;
        v51 = v12[15] + 48 * v12[16];
        *(float *)(v51 - 176) = v41;
        *(float *)(v51 - 172) = v42;
        *(float *)(v51 - 128) = v43;
        *(float *)(v51 - 124) = v42;
        *(float *)(v51 - 80) = v43;
        *(float *)(v51 - 76) = v44;
        *(float *)(v51 - 32) = v41;
        *(float *)(v51 - 28) = v44;
      }
    }
    else
    {
      v12[16] = 0;
      v12[12] = (char *)v12 + 818;
      *(_OWORD *)(v12 + 13) = xmmword_18474E060;
      CA::OGL::Context::array_rect(v12, this[6].f32[0], this[6].f32[1], this[7].f32[0], this[7].f32[1]);
      v52 = v12[15] + 48 * v12[16];
      *(float *)(v52 - 176) = v41;
      *(float *)(v52 - 172) = v42;
      *(float *)(v52 - 128) = v43;
      *(float *)(v52 - 124) = v42;
      *(float *)(v52 - 80) = v43;
      *(float *)(v52 - 76) = v44;
      *(float *)(v52 - 32) = v41;
      *(float *)(v52 - 28) = v44;
      CA::OGL::Context::array_flush((uint64_t)v12);
      *(_BYTE *)(v12[2] + 16) = 1;
      CA::OGL::PingPongState::replicate_edges(*(CA::OGL::PingPongState **)this, 8.0, this[6].f32[0], this[6].f32[1], this[7].f32[0], this[7].f32[1], v41, v42, v43, v44);
    }
    v53 = this[4].i16[0];
    v54 = v53;
    v55 = (uint64_t *)&this[(v53 & 1) + 11];
    if (v54 < 0)
      v55 = (uint64_t *)&this[1];
    CA::OGL::Context::unbind_surface(*this, *v55, 0);
    *(_BYTE *)(v12[2] + 16) = 0;
    if (!a3)
    {
      CA::OGL::Context::pop_surface(*(CA::OGL::Context **)this);
      ++this[4].i16[0];
    }
    return;
  }
  v13 = (this[4].i16[0] & 1) == 0;
  v14 = this[6];
  v15 = vsub_f32(this[7], v14);
  v16 = vceqz_f32(v15);
  v17.i64[0] = v16.i32[0];
  v17.i64[1] = v16.i32[1];
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v17, 1), (int8x16_t)v17).u64[0] & 0x8000000000000000) != 0
    || (v18 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v15), (int8x8_t)vcgez_f32(v15))),
        v19.i64[0] = v18.i32[0],
        v19.i64[1] = v18.i32[1],
        (vorrq_s8((int8x16_t)vdupq_laneq_s64(v19, 1), (int8x16_t)v19).u64[0] & 0x8000000000000000) != 0))
  {
    v59 = 0uLL;
    v26 = 0;
    v25 = (int32x2_t)-1;
  }
  else
  {
    v20 = vcvtq_f64_f32(v14);
    v21 = vmaxnmq_f64(v20, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000));
    v22 = vminnmq_f64(vaddq_f64(v20, vcvtq_f64_f32(v15)), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
    v23 = (int32x4_t)vcvtmq_s64_f64(v21);
    v24 = (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v22), (int64x2_t)v23);
    v59 = vuzp1q_s32(v23, v24);
    v25 = vadd_s32(vmovn_s64((int64x2_t)v23), (int32x2_t)-1);
    v26 = vmovn_s64((int64x2_t)v24);
  }
  if (this[4].i8[2])
  {
    v27 = v26.i32[0];
    if (v26.i32[0] <= v26.i32[1])
      v28 = v26.i32[1];
    else
      v28 = v26.i32[0];
    if (v26.i32[0] >= v26.i32[1])
      v27 = v26.i32[1];
    if (v28 <= 1073741822 && v27 >= 1)
    {
      v30 = (int8x8_t)vadd_s32(v26, (int32x2_t)0x200000002);
      if (v30.i32[1] < 1 || v30.i32[0] < 1)
        v32 = -1;
      else
        v32 = 0;
      *(int32x2_t *)v59.i8 = v25;
      v59.u64[1] = (unint64_t)vbic_s8(v30, (int8x8_t)vdup_n_s32(v32));
    }
  }
  if (CA::OGL::PingPongState::create_surface((CA::OGL::PingPongState *)this, v13, (const CA::Bounds *)&v59))
  {
    v33 = (uint64_t)this[v13 + 11];
    (*(void (**)(float32x2_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)this + 704))(*this, v33, 0, 0);
    CA::OGL::Context::push_surface((uint64_t)*this, v33, 0, 64, 0);
    goto LABEL_28;
  }
}

void CA::OGL::DownsampleState::downsample4(float32x2_t *this, float a2, float a3, const float *a4, const float *a5)
{
  uint64_t v10;
  __int16 v11;
  int v12;
  uint64_t *v13;
  int v14;
  int v15;
  uint64_t v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float *v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int16 v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  _BYTE v48[32];
  uint64_t v49;
  float32x4x2_t v50;
  float32x4x2_t v51;

  v49 = *MEMORY[0x1E0C80C00];
  v10 = (uint64_t)*this;
  if (!CA::OGL::PingPongState::attach_dest(this, 1, 0))
    return;
  *(_BYTE *)(*(_QWORD *)(v10 + 16) + 16) = 26;
  v11 = this[4].i16[0];
  v12 = v11;
  v13 = (uint64_t *)&this[(v11 & 1) + 11];
  if (v12 < 0)
    v13 = (uint64_t *)&this[1];
  v14 = *(_DWORD *)(*v13 + 32);
  v15 = *(_DWORD *)(*v13 + 36);
  CA::OGL::Context::bind_surface((uint64_t)*this, *v13, 0, 1u, 1, 0.0);
  v16 = *(_QWORD *)(v10 + 16);
  v50 = vld2q_f32(a4);
  v51.val[0] = vmulq_n_f32(v50.val[0], *(float *)(v16 + 96));
  v51.val[1] = vmulq_n_f32(v50.val[1], *(float *)(v16 + 100));
  v17 = (float *)v48;
  vst2q_f32(v17, v51);
  v18 = (float)v14;
  v19 = -(float)((float)v14 - (float)(this[6].f32[0] * a2));
  v20 = (float)v15;
  v21 = -(float)((float)v15 - (float)(this[6].f32[1] * a3));
  v22 = -(float)(v18 - (float)(this[7].f32[0] * a2));
  v23 = -(float)(v20 - (float)(this[7].f32[1] * a3));
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 984))(v10))
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v10 + 1000))(v10, 0, 2, 4, v48);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, const float *))(*(_QWORD *)v10 + 1000))(v10, 1, 4, 1, a5);
  }
  else
  {
    if (*a5 >= 0.0 && a5[1] >= 0.0 && a5[2] >= 0.0 && a5[3] >= 0.0)
    {
      v28 = 0;
      v29 = 0;
      *(_BYTE *)(*(_QWORD *)(v10 + 16) + 16) = 3;
      *(_BYTE *)(*(_QWORD *)(v10 + 16) + 480) = 12;
      *(_QWORD *)(v10 + 128) = 0;
      v30 = v10 + 818;
      *(_QWORD *)(v10 + 96) = v10 + 818;
      v31 = (float *)(a4 + 1);
      *(_OWORD *)(v10 + 104) = xmmword_18474E060;
      do
      {
        v32 = 6;
        if (!*(_DWORD *)(v10 + 92))
          v32 = 4;
        if ((unint64_t)(v29 + 4) > *(_QWORD *)(v10 + 136)
          || (v33 = *(_QWORD *)(v10 + 112)) != 0 && *(_QWORD *)(v10 + 104) + v32 > v33)
        {
          *(_WORD *)(v10 + 816) |= 0x20u;
          CA::OGL::Context::array_flush(v10);
          *(_QWORD *)(v10 + 128) = 0;
          *(_QWORD *)(v10 + 96) = v30;
          *(_OWORD *)(v10 + 104) = xmmword_18474E060;
        }
        _S0 = a5[v28];
        __asm { FCVT            H0, S0 }
        v39 = LOWORD(_S0);
        CA::OGL::Context::array_rect((_QWORD *)v10, this[6].f32[0], this[6].f32[1], this[7].f32[0], this[7].f32[1]);
        v40 = 0x1000100010001 * v39;
        v41 = *(_QWORD *)(v10 + 120) + 48 * *(_QWORD *)(v10 + 128);
        *(_QWORD *)(v41 - 160) = v40;
        *(_QWORD *)(v41 - 112) = v40;
        *(_QWORD *)(v41 - 64) = v40;
        *(_QWORD *)(v41 - 16) = v40;
        v42 = *(v31 - 1);
        v43 = v42 + v19;
        v44 = *v31 + v21;
        v45 = v42 + v22;
        v46 = *v31 + v23;
        v29 = *(_QWORD *)(v10 + 128);
        v47 = *(_QWORD *)(v10 + 120) + 48 * v29;
        *(float *)(v47 - 176) = v43;
        *(float *)(v47 - 172) = v44;
        *(float *)(v47 - 128) = v45;
        *(float *)(v47 - 124) = v44;
        *(float *)(v47 - 80) = v45;
        *(float *)(v47 - 76) = v46;
        *(float *)(v47 - 32) = v43;
        *(float *)(v47 - 28) = v46;
        if (!(v28 * 4))
        {
          CA::OGL::Context::array_flush(v10);
          v29 = 0;
          *(_BYTE *)(*(_QWORD *)(v10 + 16) + 481) |= 1u;
          *(_QWORD *)(v10 + 128) = 0;
          *(_QWORD *)(v10 + 96) = v30;
          *(_OWORD *)(v10 + 104) = xmmword_18474E060;
        }
        ++v28;
        v31 += 2;
      }
      while (v28 != 4);
      CA::OGL::Context::array_flush(v10);
      *(_BYTE *)(*(_QWORD *)(v10 + 16) + 481) &= ~1u;
      goto LABEL_12;
    }
    *(_BYTE *)(*(_QWORD *)(v10 + 16) + 16) = 1;
  }
  *(_QWORD *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 96) = v10 + 818;
  *(_OWORD *)(v10 + 104) = xmmword_18474E060;
  CA::OGL::Context::array_rect((_QWORD *)v10, this[6].f32[0], this[6].f32[1], this[7].f32[0], this[7].f32[1]);
  v24 = *(_QWORD *)(v10 + 120) + 48 * *(_QWORD *)(v10 + 128);
  *(float *)(v24 - 176) = v19;
  *(float *)(v24 - 172) = v21;
  *(float *)(v24 - 128) = v22;
  *(float *)(v24 - 124) = v21;
  *(float *)(v24 - 80) = v22;
  *(float *)(v24 - 76) = v23;
  *(float *)(v24 - 32) = v19;
  *(float *)(v24 - 28) = v23;
  CA::OGL::Context::array_flush(v10);
LABEL_12:
  *(_BYTE *)(*(_QWORD *)(v10 + 16) + 16) = 1;
  CA::OGL::PingPongState::replicate_edges(*(CA::OGL::PingPongState **)this, 2.0, this[6].f32[0], this[6].f32[1], this[7].f32[0], this[7].f32[1], v19, v21, v22, v23);
  v25 = this[4].i16[0];
  v26 = v25;
  v27 = (uint64_t *)&this[(v25 & 1) + 11];
  if (v26 < 0)
    v27 = (uint64_t *)&this[1];
  CA::OGL::Context::unbind_surface(*this, *v27, 0);
  *(_BYTE *)(*(_QWORD *)(v10 + 16) + 16) = 0;
  CA::OGL::Context::pop_surface(*(CA::OGL::Context **)this);
  ++this[4].i16[0];
}

void CA::OGL::DownsampleState::downsample6(float32x2_t *this, float a2, float a3, const float *a4, const float *a5)
{
  _QWORD *v10;
  __int16 v11;
  int v12;
  uint64_t *v13;
  int v14;
  int v15;
  unint64_t v16;
  float32x2_t v17;
  unint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  uint64_t *v26;
  _QWORD v27[4];

  v27[3] = *MEMORY[0x1E0C80C00];
  v10 = (_QWORD *)*this;
  if (CA::OGL::PingPongState::attach_dest(this, 1, 0))
  {
    *(_BYTE *)(v10[2] + 16) = 27;
    v11 = this[4].i16[0];
    v12 = v11;
    v13 = (uint64_t *)&this[(v11 & 1) + 11];
    if (v12 < 0)
      v13 = (uint64_t *)&this[1];
    v15 = *(_DWORD *)(*v13 + 32);
    v14 = *(_DWORD *)(*v13 + 36);
    CA::OGL::Context::bind_surface((uint64_t)*this, *v13, 0, 1u, 1, 0.0);
    v16 = 0;
    v17 = *(float32x2_t *)(v10[2] + 96);
    memset(v27, 0, 24);
    v18 = -2;
    do
    {
      v27[v16 / 2] = vmul_f32(*(float32x2_t *)&a4[v16], v17);
      v18 += 2;
      v16 += 2;
    }
    while (v18 < 4);
    v19 = -(float)((float)v15 - (float)(this[6].f32[0] * a2));
    v20 = -(float)((float)v14 - (float)(this[6].f32[1] * a3));
    v21 = -(float)((float)v15 - (float)(this[7].f32[0] * a2));
    v22 = -(float)((float)v14 - (float)(this[7].f32[1] * a3));
    if (((*(uint64_t (**)(_QWORD *))(*v10 + 984))(v10) & 1) != 0)
    {
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, _QWORD *))(*v10 + 1000))(v10, 0, 2, 3, v27);
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, const float *))(*v10 + 1000))(v10, 1, 3, 1, a5);
    }
    else
    {
      *(_BYTE *)(v10[2] + 16) = 1;
    }
    v10[16] = 0;
    v10[12] = (char *)v10 + 818;
    *(_OWORD *)(v10 + 13) = xmmword_18474E060;
    CA::OGL::Context::array_rect(v10, this[6].f32[0], this[6].f32[1], this[7].f32[0], this[7].f32[1]);
    v23 = v10[15] + 48 * v10[16];
    *(float *)(v23 - 176) = v19;
    *(float *)(v23 - 172) = v20;
    *(float *)(v23 - 128) = v21;
    *(float *)(v23 - 124) = v20;
    *(float *)(v23 - 80) = v21;
    *(float *)(v23 - 76) = v22;
    *(float *)(v23 - 32) = v19;
    *(float *)(v23 - 28) = v22;
    CA::OGL::Context::array_flush((uint64_t)v10);
    *(_BYTE *)(v10[2] + 16) = 1;
    CA::OGL::PingPongState::replicate_edges(*(CA::OGL::PingPongState **)this, 2.0, this[6].f32[0], this[6].f32[1], this[7].f32[0], this[7].f32[1], v19, v20, v21, v22);
    v24 = this[4].i16[0];
    v25 = v24;
    v26 = (uint64_t *)&this[(v24 & 1) + 11];
    if (v25 < 0)
      v26 = (uint64_t *)&this[1];
    CA::OGL::Context::unbind_surface(*this, *v26, 0);
    *(_BYTE *)(v10[2] + 16) = 0;
    CA::OGL::Context::pop_surface(*(CA::OGL::Context **)this);
    ++this[4].i16[0];
  }
}

BOOL CA::OGL::DownsampleState::upsample(float32x2_t *this, float a2, float a3, const float *a4)
{
  _QWORD *v8;
  _BOOL8 v9;
  __int16 v10;
  int v11;
  uint64_t *v12;
  int v13;
  int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  uint64_t *v24;

  v8 = (_QWORD *)*this;
  v9 = CA::OGL::PingPongState::attach_dest(this, 1, 0);
  if (v9)
  {
    *(_BYTE *)(v8[2] + 16) = 29;
    v10 = this[4].i16[0];
    v11 = v10;
    v12 = (uint64_t *)&this[(v10 & 1) + 11];
    if (v11 < 0)
      v12 = (uint64_t *)&this[1];
    v13 = *(_DWORD *)(*v12 + 32);
    v14 = *(_DWORD *)(*v12 + 36);
    CA::OGL::Context::bind_surface((uint64_t)*this, *v12, 0, 1u, 1, 0.0);
    v15 = (float)v13;
    v16 = -(float)((float)v13 - (float)(this[6].f32[0] * a2));
    v17 = (float)v14;
    v18 = -(float)((float)v14 - (float)(this[6].f32[1] * a3));
    v19 = -(float)(v15 - (float)(this[7].f32[0] * a2));
    v20 = -(float)(v17 - (float)(this[7].f32[1] * a3));
    if ((*(unsigned int (**)(_QWORD *))(*v8 + 984))(v8))
    {
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, const float *))(*v8 + 1000))(v8, 0, 2, 1, a4);
      v8[16] = 0;
      v8[12] = (char *)v8 + 818;
      *(_OWORD *)(v8 + 13) = xmmword_18474E060;
      CA::OGL::Context::array_rect(v8, this[6].f32[0], this[6].f32[1], this[7].f32[0], this[7].f32[1]);
      v21 = v8[15] + 48 * v8[16];
      *(float *)(v21 - 176) = v16;
      *(float *)(v21 - 172) = v18;
      *(float *)(v21 - 128) = v19;
      *(float *)(v21 - 124) = v18;
      *(float *)(v21 - 80) = v19;
      *(float *)(v21 - 76) = v20;
      *(float *)(v21 - 32) = v16;
      *(float *)(v21 - 28) = v20;
      CA::OGL::Context::array_flush((uint64_t)v8);
    }
    *(_BYTE *)(v8[2] + 16) = 1;
    CA::OGL::PingPongState::replicate_edges(*(CA::OGL::PingPongState **)this, 2.0, this[6].f32[0], this[6].f32[1], this[7].f32[0], this[7].f32[1], v16, v18, v19, v20);
    v22 = this[4].i16[0];
    v23 = v22;
    v24 = (uint64_t *)&this[(v22 & 1) + 11];
    if (v23 < 0)
      v24 = (uint64_t *)&this[1];
    CA::OGL::Context::unbind_surface(*this, *v24, 0);
    *(_BYTE *)(v8[2] + 16) = 0;
    CA::OGL::Context::pop_surface(*(CA::OGL::Context **)this);
    ++this[4].i16[0];
  }
  return v9;
}

void CA::OGL::Context::downsample_surface(uint64_t a1, _DWORD *a2, double *a3, uint64_t a4, int a5, float a6)
{
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v21;
  int v22;
  const void *v23;
  uint64_t v24;
  float v25;
  __int16 v26;
  int v27;
  int v28;
  double v29;
  double v30;
  uint64_t v31;
  _BOOL8 v32;
  float32x2_t v33;
  int32x2_t v34;
  int64x2_t v35;
  int8x8_t v36;
  int64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int v42;
  int v43;
  int32x2_t v44;
  uint64_t v45;
  uint64_t *v46;
  int v47;
  int v48;
  float v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  float v55;
  float v56;
  uint64_t v57;
  uint64_t *v58;
  double v59;
  double v60;
  int v61;
  double v62;
  double v63;
  __int128 v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  float v69;
  int v70;
  unsigned int v71;
  __int32 v72;
  unsigned int v73;
  double v74;
  double v75;
  float32_t v76;
  float32_t v77;
  float v78;
  float32_t v79;
  float32_t v80;
  double v81;
  double v82;
  float32_t v83;
  float32_t v84;
  float v85;
  float32_t v86;
  float32_t v87;
  float v88;
  uint64_t v89;
  uint64_t *v90;
  int v91;
  int v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  double v109;
  double v110;
  int v112;
  double v113;
  float v114;
  float v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  uint64_t v119;
  uint64_t *v120;
  int v121;
  int v122;
  float v123;
  uint64_t v124;
  float v125;
  float v126;
  float v127;
  uint64_t v128;
  float v129;
  float v130;
  uint64_t v131;
  uint64_t *v132;
  float v133;
  uint64_t *v136;
  int v137;
  int v138;
  uint64_t *v139;
  int v140;
  int v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  uint64_t v152;
  int16x4_t v153;
  uint64_t v154;
  uint64_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t *v162;
  int16x4_t v163;
  float32x4_t v164;
  float v165;
  unint64_t v166;
  unint64_t v167;
  int8x16_t v168;
  _BYTE v169[24];
  __int128 v170;
  __int128 v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  _OWORD v180[3];
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  _OWORD __dst[31];
  CA::OGL::PingPongState *v187;
  _DWORD *v188;
  int32x2_t v189;
  int32x2_t v190;
  __int128 v191;
  float32x4_t v192;
  float32x4_t v193;
  uint64_t v194;
  _QWORD v195[3];

  v195[2] = *MEMORY[0x1E0C80C00];
  v192 = 0u;
  v193 = 0u;
  v191 = 0u;
  v187 = (CA::OGL::PingPongState *)a1;
  v188 = a2;
  v12 = a2[8];
  v13 = a2[9];
  v189 = (int32x2_t)__PAIR64__(v13, v12);
  v14 = a2[10];
  v15 = a2[11];
  v190 = (int32x2_t)__PAIR64__(v15, v14);
  LOWORD(v191) = -1;
  DWORD1(v191) = 15;
  __asm { FMOV            V0.2S, #1.0 }
  v194 = _D0;
  v195[0] = 0;
  v195[1] = 0;
  v166 = __PAIR64__(v13, v12);
  v167 = __PAIR64__(v15, v14);
  if (v14 <= v15)
    v21 = v15;
  else
    v21 = v14;
  if (v14 >= v15)
    v22 = v15;
  else
    v22 = v14;
  if (v21 <= 1073741822 && v22 >= 1)
  {
    LODWORD(v166) = v12 - 1;
    HIDWORD(v166) = v13 - 1;
    LODWORD(v167) = v14 + 2;
    HIDWORD(v167) = v15 + 2;
    if (v14 + 2 < 1 || v15 + 2 <= 0)
      v167 = 0;
  }
  memset(__dst, 0, 488);
  v23 = *(const void **)(a1 + 16);
  memcpy(__dst, v23, 0x1E8uLL);
  *(_QWORD *)&__dst[0] = v23;
  *(_QWORD *)(a1 + 16) = __dst;
  v183 = 0u;
  v184 = 0u;
  v185 = 0u;
  v182 = 0u;
  v24 = *(_QWORD *)(a1 + 232);
  *((_QWORD *)&v183 + 1) = 0x3C003C003C003C00;
  v184 = 0uLL;
  *(_QWORD *)&v185 = 0;
  WORD6(v185) = 1;
  v181 = 0;
  if (v24)
  {
    v25 = *(float *)(v24 + 64);
    v26 = *(_WORD *)(v24 + 68) & 0x100 | 1 | *(_WORD *)(v24 + 68) & 0x400;
  }
  else
  {
    v26 = 1025;
    v25 = 1.0;
  }
  *((float *)&v185 + 2) = v25;
  WORD6(v185) = v26;
  *(_QWORD *)&v183 = &CA::identity_transform;
  memset(v180, 0, sizeof(v180));
  CA::Shape::operator=((uint64_t)v180, &v166);
  *(_QWORD *)&v182 = v180;
  *((_QWORD *)&v182 + 1) = 0;
  v181 = CA::OGL::Context::set_gstate(a1, (uint64_t)&v181);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 481) &= ~1u;
  v27 = a2[8];
  v28 = a2[9];
  v29 = (double)(a2[10] + v27);
  v30 = (double)(a2[11] + v28);
  v172.f64[0] = (double)v27;
  v172.f64[1] = (double)v28;
  v173 = (float64x2_t)xmmword_18474DF50;
  v174.f64[0] = v29;
  v174.f64[1] = (double)v28;
  v175 = (float64x2_t)xmmword_18474DF50;
  v176.f64[0] = v29;
  v176.f64[1] = v30;
  v177 = (float64x2_t)xmmword_18474DF50;
  v178.f64[0] = (double)v27;
  v178.f64[1] = v30;
  v179 = (float64x2_t)xmmword_18474DF50;
  CA::Transform::apply_to_point4(a4, &v172, &v172, (const double *)4);
  *(float32x2_t *)v192.f32 = vcvt_f32_s32(v189);
  *(float32x2_t *)&v192.u32[2] = vcvt_f32_s32(vadd_s32(v190, v189));
  if (a2[6] > a2[10] || a2[7] > a2[11])
  {
    CA::OGL::PingPongState::create_surface((CA::OGL::PingPongState *)&v187, 0, (const CA::Bounds *)&v166);
    v31 = (uint64_t)v187;
    *(_BYTE *)(*((_QWORD *)v187 + 2) + 16) = 1;
    v32 = (v191 & 1) == 0;
    v33 = vsub_f32(*(float32x2_t *)&v192.u32[2], *(float32x2_t *)v192.f32);
    v34 = vceqz_f32(v33);
    v35.i64[0] = v34.i32[0];
    v35.i64[1] = v34.i32[1];
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v35, 1), (int8x16_t)v35).u64[0] & 0x8000000000000000) != 0
      || (v36 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v33), (int8x8_t)vcgez_f32(v33))),
          v37.i64[0] = v36.i32[0],
          v37.i64[1] = v36.i32[1],
          (vorrq_s8((int8x16_t)vdupq_laneq_s64(v37, 1), (int8x16_t)v37).u64[0] & 0x8000000000000000) != 0))
    {
      v168 = 0uLL;
      v41 = 0uLL;
    }
    else
    {
      v38 = vcvtq_f64_f32(*(float32x2_t *)v192.f32);
      v39 = vminnmq_f64(vaddq_f64(v38, vcvtq_f64_f32(v33)), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
      v40 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v38, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
      v41 = vuzp1q_s32(v40, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v39), (int64x2_t)v40));
      v168 = (int8x16_t)v41;
    }
    if (BYTE2(v191))
    {
      v42 = v41.i32[2];
      if (v41.i32[2] <= v41.i32[3])
        v43 = v41.i32[3];
      else
        v43 = v41.i32[2];
      if (v41.i32[2] >= v41.i32[3])
        v42 = v41.i32[3];
      if (v43 <= 1073741822 && v42 >= 1)
      {
        v168 = (int8x16_t)vaddq_s32(v41, (int32x4_t)xmmword_18474E100);
        v44 = vcgt_s32((int32x2_t)0x100000001, vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v168, v168, 8uLL)));
        if (((v44.i32[1] | v44.i32[0]) & 1) != 0)
          v168.i64[1] = 0;
      }
    }
    if (CA::OGL::PingPongState::create_surface((CA::OGL::PingPongState *)&v187, v32, (const CA::Bounds *)&v168))
    {
      v45 = v195[v32];
      (*(void (**)(CA::OGL::PingPongState *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v187 + 704))(v187, v45, 2, 2);
      CA::OGL::Context::push_surface((uint64_t)v187, v45, 0, 64, 0);
      v46 = &v195[v191 & 1];
      if ((v191 & 0x8000u) != 0)
        v46 = (uint64_t *)&v188;
      v47 = *(_DWORD *)(*v46 + 32);
      v48 = *(_DWORD *)(*v46 + 36);
      CA::OGL::Context::bind_surface((uint64_t)v187, *v46, 0, 1u, 1, 0.0);
      v49 = (float)v47;
      v50 = v192.i64[0];
      v51 = v192.f32[0] - (float)v47;
      v52 = (float)v48;
      v53 = v192.f32[1] - (float)v48;
      v54 = v192.i64[1];
      v55 = v192.f32[2] - v49;
      v56 = v192.f32[3] - v52;
      *(_QWORD *)(v31 + 128) = 0;
      *(_QWORD *)(v31 + 96) = v31 + 818;
      *(_OWORD *)(v31 + 104) = xmmword_18474E060;
      CA::OGL::Context::array_rect((_QWORD *)v31, *(float *)&v50, *((float *)&v50 + 1), *(float *)&v54, *((float *)&v54 + 1));
      v57 = *(_QWORD *)(v31 + 120) + 48 * *(_QWORD *)(v31 + 128);
      *(float *)(v57 - 176) = v51;
      *(float *)(v57 - 172) = v53;
      *(float *)(v57 - 128) = v55;
      *(float *)(v57 - 124) = v53;
      *(float *)(v57 - 80) = v55;
      *(float *)(v57 - 76) = v56;
      *(float *)(v57 - 32) = v51;
      *(float *)(v57 - 28) = v56;
      CA::OGL::Context::array_flush(v31);
      CA::OGL::PingPongState::replicate_edges(v187, 2.0, v192.f32[0], v192.f32[1], v192.f32[2], v192.f32[3], v51, v53, v55, v56);
      v58 = &v195[v191 & 1];
      if ((v191 & 0x8000u) != 0)
        v58 = (uint64_t *)&v188;
      CA::OGL::Context::unbind_surface(v187, *v58, 0);
      CA::OGL::Context::pop_surface(v187);
      LOWORD(v191) = v191 + 1;
      *(_BYTE *)(*(_QWORD *)(v31 + 16) + 16) = 0;
    }
  }
  if (a5 == 1 || (v60 = *a3, v59 = a3[1], *a3 >= 1.0) && v59 >= 1.0)
  {
    v61 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, 12);
    if (v61)
    {
      CA::OGL::PingPongState::create_surface((CA::OGL::PingPongState *)&v187, 0, (const CA::Bounds *)&v166);
      CA::OGL::PingPongState::create_surface((CA::OGL::PingPongState *)&v187, 1u, (const CA::Bounds *)&v166);
      v63 = *a3;
      v62 = a3[1];
      v64 = xmmword_18474E130;
      v65 = 0;
      v66 = 1083591734;
      v67 = 1077255971;
      v68 = 1060871535;
    }
    else
    {
      v63 = *a3;
      v62 = a3[1];
      v64 = xmmword_18474E140;
      v65 = 1076570714;
      v66 = 1060513140;
      v67 = -1086970508;
      v68 = -1070912934;
    }
    v171 = v64;
    v168.i64[0] = v68;
    v168.i64[1] = v67;
    *(_QWORD *)v169 = v66;
    for (*(_QWORD *)&v169[8] = v65; v63 <= 0.5000005; v63 = v63 + v63)
    {
      v193 = v192;
      v69 = vmuls_lane_f32(0.5, v192, 2);
      v192.f32[0] = 0.5 * v192.f32[0];
      v192.f32[2] = v69;
      if (v61)
        CA::OGL::DownsampleState::downsample6((float32x2_t *)&v187, 2.0, 1.0, (const float *)v168.i32, (const float *)&v171);
      else
        CA::OGL::DownsampleState::downsample4((float32x2_t *)&v187, 2.0, 1.0, (const float *)v168.i32, (const float *)&v171);
    }
    if (v61)
    {
      v70 = 0;
      v71 = 1083591734;
      v72 = 1077255971;
      v73 = 1060871535;
    }
    else
    {
      v70 = 1076570714;
      v71 = 1060513140;
      v72 = -1086970508;
      v73 = -1070912934;
    }
    v168.i32[0] = 0;
    *(uint64_t *)((char *)v168.i64 + 4) = v73;
    v168.i32[3] = v72;
    *(_DWORD *)v169 = 0;
    *(_QWORD *)&v169[4] = v71;
    for (*(_DWORD *)&v169[12] = v70; v62 <= 0.5000005; v62 = v62 + v62)
    {
      v193 = v192;
      v192.f32[1] = 0.5 * v192.f32[1];
      v192.f32[3] = v192.f32[3] * 0.5;
      if (v61)
        CA::OGL::DownsampleState::downsample6((float32x2_t *)&v187, 1.0, 2.0, (const float *)v168.i32, (const float *)&v171);
      else
        CA::OGL::DownsampleState::downsample4((float32x2_t *)&v187, 1.0, 2.0, (const float *)v168.i32, (const float *)&v171);
    }
    if (!v61)
      goto LABEL_81;
    if (fabs(v63 + -1.0) > 0.000001)
    {
      if (v63 <= 1.0)
        v74 = v63 + v63;
      else
        v74 = v63;
      if (v63 <= 1.0)
        v75 = 0.5;
      else
        v75 = 1.0;
      v193 = v192;
      v76 = v74 * v192.f32[0];
      v77 = v74 * v192.f32[2];
      v192.f32[0] = v76;
      v192.f32[2] = v77;
      v78 = 1.0 / v74;
      if (CA::OGL::DownsampleState::upsample((float32x2_t *)&v187, v78, 1.0, CA::OGL::Context::downsample_surface(CA::OGL::Surface *,CA::Vec2<double> const&,CA::Transform const&,CA::OGL::Context::DownsampleFilter,float)::axis))
      {
LABEL_67:
        if (fabs(v62 + -1.0) > 0.000001)
        {
          if (v62 <= 1.0)
            v81 = v62 + v62;
          else
            v81 = v62;
          if (v62 <= 1.0)
            v82 = 0.5;
          else
            v82 = 1.0;
          v193 = v192;
          v83 = v81 * v192.f32[1];
          v84 = v81 * v192.f32[3];
          v192.f32[1] = v83;
          v192.f32[3] = v84;
          v85 = 1.0 / v81;
          if (CA::OGL::DownsampleState::upsample((float32x2_t *)&v187, 1.0, v85, CA::OGL::Context::downsample_surface(CA::OGL::Surface *,CA::Vec2<double> const&,CA::Transform const&,CA::OGL::Context::DownsampleFilter,float)::axis))
          {
            goto LABEL_77;
          }
          v86 = v192.f32[1] / v81;
          v87 = v192.f32[3] / v81;
          v192.f32[1] = v86;
          v192.f32[3] = v87;
        }
        v82 = v62;
LABEL_77:
        if (v75 < 0.75)
        {
          v168 = (int8x16_t)xmmword_18474E150;
          *(_OWORD *)v169 = xmmword_18474E160;
          v193 = v192;
          v88 = vmuls_lane_f32(0.5, v192, 2);
          v192.f32[0] = 0.5 * v192.f32[0];
          v192.f32[2] = v88;
          CA::OGL::DownsampleState::downsample6((float32x2_t *)&v187, 2.0, 1.0, (const float *)v168.i32, (const float *)&v171);
        }
        if (v82 < 0.75)
        {
          v168 = (int8x16_t)xmmword_18474E170;
          *(_QWORD *)v169 = 0x40964C3600000000;
          v193 = v192;
          v192.f32[1] = 0.5 * v192.f32[1];
          v192.f32[3] = v192.f32[3] * 0.5;
          CA::OGL::DownsampleState::downsample6((float32x2_t *)&v187, 1.0, 2.0, (const float *)v168.i32, (const float *)&v171);
        }
LABEL_81:
        CA::OGL::Context::set_gstate(a1, **(_QWORD **)(a1 + 232));
        v89 = *(_QWORD *)&__dst[0];
        *(_QWORD *)(a1 + 16) = *(_QWORD *)&__dst[0];
        *(_QWORD *)&__dst[0] = 0;
        goto LABEL_82;
      }
      v79 = v192.f32[0] / v74;
      v80 = v192.f32[2] / v74;
      v192.f32[0] = v79;
      v192.f32[2] = v80;
    }
    v75 = v63;
    goto LABEL_67;
  }
  if (!a5)
  {
    v109 = (v59 + v60) * 0.5;
    if (a6 != 0.0)
    {
      v110 = a6 - log2(v109);
      if (v110 < 0.0)
        v110 = 0.0;
      v109 = exp2(-v110);
    }
    __asm { FMOV            V2.4S, #0.25 }
    v171 = (__int128)_Q2;
    v168 = (int8x16_t)xmmword_18474E110;
    *(_OWORD *)v169 = xmmword_18474E120;
    v112 = 0;
    if (v109 <= 0.24999975)
    {
      v113 = v109;
      v164 = _Q2;
      do
      {
        v116 = v192;
        v192 = vmulq_f32(v192, _Q2);
        v193 = v116;
        CA::OGL::DownsampleState::downsample4((float32x2_t *)&v187, 4.0, 4.0, (const float *)v168.i32, (const float *)&v171);
        _Q2 = v164;
        v113 = v113 * 4.0;
        v112 += 2;
      }
      while (v113 <= 0.24999975);
    }
    else
    {
      v113 = v109;
    }
    for (; v113 <= 0.999999; ++v112)
    {
      v117 = v192;
      v118.i64[0] = 0x3F0000003F000000;
      v118.i64[1] = 0x3F0000003F000000;
      v192 = vmulq_f32(v192, v118);
      v193 = v117;
      v119 = (uint64_t)v187;
      if (CA::OGL::PingPongState::attach_dest((float32x2_t *)&v187, 1, 0))
      {
        *(_BYTE *)(*(_QWORD *)(v119 + 16) + 16) = 1;
        v120 = &v195[v191 & 1];
        if ((v191 & 0x8000u) != 0)
          v120 = (uint64_t *)&v188;
        v121 = *(_DWORD *)(*v120 + 32);
        v122 = *(_DWORD *)(*v120 + 36);
        CA::OGL::Context::bind_surface((uint64_t)v187, *v120, 0, 1u, 1, 0.0);
        v123 = (float)v121;
        v124 = v192.i64[0];
        v125 = -(float)((float)v121 - (float)(v192.f32[0] * 2.0));
        v126 = (float)v122;
        v127 = -(float)((float)v122 - (float)(v192.f32[1] * 2.0));
        v128 = v192.i64[1];
        v129 = -(float)(v123 - (float)(v192.f32[2] * 2.0));
        v130 = -(float)(v126 - (float)(v192.f32[3] * 2.0));
        *(_QWORD *)(v119 + 128) = 0;
        *(_QWORD *)(v119 + 96) = v119 + 818;
        *(_OWORD *)(v119 + 104) = xmmword_18474E060;
        CA::OGL::Context::array_rect((_QWORD *)v119, *(float *)&v124, *((float *)&v124 + 1), *(float *)&v128, *((float *)&v128 + 1));
        v131 = *(_QWORD *)(v119 + 120) + 48 * *(_QWORD *)(v119 + 128);
        *(float *)(v131 - 176) = v125;
        *(float *)(v131 - 172) = v127;
        *(float *)(v131 - 128) = v129;
        *(float *)(v131 - 124) = v127;
        *(float *)(v131 - 80) = v129;
        *(float *)(v131 - 76) = v130;
        *(float *)(v131 - 32) = v125;
        *(float *)(v131 - 28) = v130;
        CA::OGL::Context::array_flush(v119);
        *(_BYTE *)(*(_QWORD *)(v119 + 16) + 16) = 1;
        CA::OGL::PingPongState::replicate_edges(v187, 2.0, v192.f32[0], v192.f32[1], v192.f32[2], v192.f32[3], v125, v127, v129, v130);
        v132 = &v195[v191 & 1];
        if ((v191 & 0x8000u) != 0)
          v132 = (uint64_t *)&v188;
        CA::OGL::Context::unbind_surface(v187, *v132, 0);
        *(_BYTE *)(*(_QWORD *)(v119 + 16) + 16) = 0;
        CA::OGL::Context::pop_surface(v187);
        LOWORD(v191) = v191 + 1;
      }
      v113 = v113 + v113;
    }
    v133 = v109;
    _S8 = log2f(v133) + (float)v112;
    CA::OGL::Context::set_gstate(a1, **(_QWORD **)(a1 + 232));
    v89 = *(_QWORD *)&__dst[0];
    *(_QWORD *)(a1 + 16) = *(_QWORD *)&__dst[0];
    *(_QWORD *)&__dst[0] = 0;
    _D0.i16[1] = 15267;
    if (_S8 >= 0.005)
    {
      __asm { FCVT            H0, S8 }
      v163 = _D0;
      *(_BYTE *)(v89 + 16) = 7;
      LOWORD(v191) = v191 - 1;
      v136 = &v195[v191 & 1];
      if ((v191 & 0x8000u) != 0)
        v136 = (uint64_t *)&v188;
      v137 = *(_DWORD *)(*v136 + 32);
      v138 = *(_DWORD *)(*v136 + 36);
      CA::OGL::Context::bind_surface((uint64_t)v187, *v136, 0, 1u, 1, 0.0);
      LOWORD(v191) = v191 + 1;
      v139 = &v195[v191 & 1];
      if ((v191 & 0x8000u) != 0)
        v139 = (uint64_t *)&v188;
      v140 = *(_DWORD *)(*v139 + 32);
      v141 = *(_DWORD *)(*v139 + 36);
      CA::OGL::Context::bind_surface((uint64_t)v187, *v139, 1u, 1u, 1, 0.0);
      v165 = v193.f32[0] - (float)v137;
      v142 = (float)v138;
      v143 = v193.f32[1] - (float)v138;
      v144 = v193.f32[2] - (float)v137;
      v145 = v193.f32[3] - v142;
      v146 = (float)v140;
      v147 = v192.f32[0] - (float)v140;
      v148 = v192.f32[2] - v146;
      v149 = (float)v141;
      v150 = v192.f32[1] - (float)v141;
      v151 = v192.f32[3] - v149;
      v170 = 0u;
      v152 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8);
      v168.i64[0] = a1;
      v168.i64[1] = v152;
      memset(v169, 0, sizeof(v169));
      *(_WORD *)&v169[16] = 256;
      CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v168);
      v153 = vdup_lane_s16(v163, 0);
      while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v168, (int32x2_t *)&v166))
      {
        v154 = *(_QWORD *)(a1 + 128);
        v155 = *(_QWORD *)(a1 + 120) + 48 * v154;
        *(_QWORD *)(a1 + 128) = v154 + 4;
        v156 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v174), v175);
        v157 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v176), v177);
        v158 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v178), v179);
        *(float32x4_t *)v155 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v172), v173);
        *(float32x4_t *)(v155 + 48) = v156;
        *(float32x4_t *)(v155 + 96) = v157;
        *(float32x4_t *)(v155 + 144) = v158;
        if (*(_QWORD *)(a1 + 96))
          CA::OGL::Context::array_indices(a1, v154);
        v159 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
        *(int16x4_t *)(v159 - 160) = v153;
        *(int16x4_t *)(v159 - 112) = v153;
        *(int16x4_t *)(v159 - 64) = v153;
        *(int16x4_t *)(v159 - 16) = v153;
        v160 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
        *(float *)(v160 - 176) = v165;
        *(float *)(v160 - 172) = v143;
        *(float *)(v160 - 128) = v144;
        *(float *)(v160 - 124) = v143;
        *(float *)(v160 - 80) = v144;
        *(float *)(v160 - 76) = v145;
        *(float *)(v160 - 32) = v165;
        *(float *)(v160 - 28) = v145;
        *(float *)(v160 - 168) = v147;
        *(float *)(v160 - 164) = v150;
        *(float *)(v160 - 120) = v148;
        *(float *)(v160 - 116) = v150;
        *(float *)(v160 - 72) = v148;
        *(float *)(v160 - 68) = v151;
        *(float *)(v160 - 24) = v147;
        *(float *)(v160 - 20) = v151;
      }
      v161 = &v195[v191 & 1];
      if ((v191 & 0x8000u) != 0)
        v161 = (uint64_t *)&v188;
      CA::OGL::Context::unbind_surface(v187, *v161, 1);
      LOWORD(v191) = v191 - 1;
      v162 = &v195[v191 & 1];
      if ((v191 & 0x8000u) != 0)
        v162 = (uint64_t *)&v188;
      CA::OGL::Context::unbind_surface(v187, *v162, 0);
      LOWORD(v191) = v191 + 1;
      goto LABEL_92;
    }
LABEL_82:
    *(_BYTE *)(v89 + 16) = 1;
    v90 = &v195[v191 & 1];
    if ((v191 & 0x8000u) != 0)
      v90 = (uint64_t *)&v188;
    v91 = *(_DWORD *)(*v90 + 32);
    v92 = *(_DWORD *)(*v90 + 36);
    CA::OGL::Context::bind_surface((uint64_t)v187, *v90, 0, 1u, 1, 0.0);
    v93 = (float)v91;
    v94 = v192.f32[0] - (float)v91;
    v95 = v192.f32[2] - v93;
    v96 = (float)v92;
    v97 = v192.f32[1] - (float)v92;
    v98 = v192.f32[3] - v96;
    v170 = 0u;
    v99 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8);
    v168.i64[0] = a1;
    v168.i64[1] = v99;
    memset(v169, 0, sizeof(v169));
    *(_WORD *)&v169[16] = 256;
    CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v168);
    while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v168, (int32x2_t *)&v166))
    {
      v100 = *(_QWORD *)(a1 + 128);
      v101 = *(_QWORD *)(a1 + 120) + 48 * v100;
      *(_QWORD *)(a1 + 128) = v100 + 4;
      v102 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v174), v175);
      v103 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v176), v177);
      v104 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v178), v179);
      *(float32x4_t *)v101 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v172), v173);
      *(float32x4_t *)(v101 + 48) = v102;
      *(float32x4_t *)(v101 + 96) = v103;
      *(float32x4_t *)(v101 + 144) = v104;
      if (*(_QWORD *)(a1 + 96))
        CA::OGL::Context::array_indices(a1, v100);
      v105 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
      v106 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
      *(_QWORD *)(v106 - 160) = v105;
      *(_QWORD *)(v106 - 112) = v105;
      *(_QWORD *)(v106 - 64) = v105;
      *(_QWORD *)(v106 - 16) = v105;
      v107 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
      *(float *)(v107 - 176) = v94;
      *(float *)(v107 - 172) = v97;
      *(float *)(v107 - 128) = v95;
      *(float *)(v107 - 124) = v97;
      *(float *)(v107 - 80) = v95;
      *(float *)(v107 - 76) = v98;
      *(float *)(v107 - 32) = v94;
      *(float *)(v107 - 28) = v98;
    }
    v108 = &v195[v191 & 1];
    if ((v191 & 0x8000u) != 0)
      v108 = (uint64_t *)&v188;
    CA::OGL::Context::unbind_surface(v187, *v108, 0);
LABEL_92:
    *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 0;
    goto LABEL_93;
  }
  if (a5 != 2)
  {
    v89 = *(_QWORD *)(a1 + 16);
    goto LABEL_82;
  }
  while (v60 < 0.5)
  {
    CA::OGL::DownsampleState::asg((float32x2_t *)&v187, 0, 0, 0.5);
    v60 = v60 + v60;
  }
  for (; v59 < 0.5; v59 = v59 + v59)
    CA::OGL::DownsampleState::asg((float32x2_t *)&v187, 1, 0, 0.5);
  v114 = v60;
  CA::OGL::DownsampleState::asg((float32x2_t *)&v187, 0, 0, v114);
  CA::OGL::Context::set_gstate(a1, **(_QWORD **)(a1 + 232));
  *(_QWORD *)(a1 + 16) = *(_QWORD *)&__dst[0];
  *(_QWORD *)&__dst[0] = 0;
  v115 = v59;
  CA::OGL::DownsampleState::asg((float32x2_t *)&v187, 1, &v172, v115);
LABEL_93:
  if (*(_QWORD *)&__dst[0])
    __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
  CA::OGL::PingPongState::~PingPongState((CA::OGL::PingPongState *)&v187);
}

void CA::Render::CarPlayRegionLayer::~CarPlayRegionLayer(CA::Render::CarPlayRegionLayer *this, const CA::Render::Object *a2)
{
  const void *v3;

  *(_QWORD *)this = off_1E1597E78;
  v3 = (const void *)*((_QWORD *)this + 2);
  if (v3)
    CFRelease(v3);
  --dword_1ECDC7C40;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

{
  const void *v3;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1597E78;
  v3 = (const void *)*((_QWORD *)this + 2);
  if (v3)
    CFRelease(v3);
  --dword_1ECDC7C40;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::Render::CarPlayRegionLayer::encode(const void **this, CA::Render::Encoder *a2)
{
  CA::Render::Object::encode(this, a2);
  CA::Render::Encoder::encode_cfobject(a2, this[2]);
}

void CA::Render::CarPlayRegionLayer::show(CA::Render::CarPlayRegionLayer *this, unsigned int a2, char a3)
{
  _BOOL4 v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  __int16 v8;
  __int16 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = x_log_hook_p();
  if ((a3 & 1) != 0)
  {
    if (v4)
      goto LABEL_3;
    v5 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 0;
      v6 = "car-play-region-layer";
      v7 = (uint8_t *)&v9;
      goto LABEL_6;
    }
  }
  else
  {
    if (v4)
    {
LABEL_3:
      x_log_();
      return;
    }
    v5 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 0;
      v6 = "(car-play-region-layer)";
      v7 = (uint8_t *)&v8;
LABEL_6:
      _os_log_impl(&dword_184457000, v5, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
    }
  }
}

_QWORD *CA::Render::CarPlayRegionLayer::copy@<X0>(CA::Render::CarPlayRegionLayer *this@<X0>, _QWORD *a2@<X8>)
{
  malloc_zone_t *malloc_zone;
  _QWORD *result;
  void *v6;
  int v7;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x18uLL, 0x743898A5uLL);
  v6 = result;
  if (result)
  {
    *((_DWORD *)result + 2) = 1;
    v7 = 6;
    *((_DWORD *)result + 3) = 6;
    ++dword_1ECDC7C40;
    *result = off_1E1597E78;
    result = (_QWORD *)*((_QWORD *)this + 2);
    *((_QWORD *)v6 + 2) = result;
    if (result)
    {
      result = CFRetain(result);
      v7 = *((_DWORD *)v6 + 3);
    }
    *((_DWORD *)v6 + 3) = v7 | *((_DWORD *)this + 3) & 0xFFFFFF00;
  }
  *a2 = v6;
  return result;
}

uint64_t CA::Render::CarPlayRegionLayer::has_background(CA::Render::CarPlayRegionLayer *this, const CA::Render::Layer *a2, BOOL *a3)
{
  *a3 = 0;
  return 1;
}

CA::Render::CarPlayRegionLayer *CA::Render::CarPlayRegionLayer::CarPlayRegionLayer(CA::Render::CarPlayRegionLayer *this, CA::Render::Decoder *a2)
{
  *(_QWORD *)this = off_1E1598C30;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = (CA::Render::Decoder::decode_int32(a2) << 8) | 6;
  ++dword_1ECDC7C40;
  *(_QWORD *)this = off_1E1597E78;
  CFStringGetTypeID();
  *((_QWORD *)this + 2) = CA::Render::Decoder::decode_cfobject(a2);
  return this;
}

uint64_t CA::`anonymous namespace'::box_filter_8(uint64_t this, int a2, uint64_t a3, const unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, _BYTE *a7, unsigned __int8 *a8, int a9)
{
  int v9;
  int v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  int v48;

  if ((int)((2 * this) | 1) >= (int)a4)
  {
    if ((int)a4 >= 1)
    {
      v22 = 0;
      v23 = 1 - this;
      v24 = (int)this < 1;
      if ((int)this < 1)
        v25 = -(int)this;
      else
        v25 = 1 - this;
      v26 = (int)a8;
      v27 = v23;
      v28 = (int)a6;
      if (v23 >= (int)this)
        v24 = 1;
      v29 = &a5[(int)a6 * (uint64_t)v23];
      do
      {
        v30 = 0;
        v31 = v22 - this;
        if ((int)v22 - (int)this >= 0 && v31 < (int)a4)
          v30 = *(unsigned __int8 *)(a3 + a5[(int)v28 * (uint64_t)v31]);
        if (v24)
        {
          v32 = v25;
        }
        else
        {
          v33 = v27;
          v34 = v29;
          v35 = 2 * this - 1;
          do
          {
            if (v33 < a4)
              v30 += *v34;
            v34 += v28;
            ++v33;
            --v35;
          }
          while (v35);
          v32 = this;
        }
        v36 = v32 + v22;
        if (v36 >= 0 && v36 < (int)a4)
          v30 += *(unsigned __int8 *)(a3 + a5[(int)v28 * (uint64_t)v36]);
        *a7 = (v30 * a2 + 0x7FFFFF) >> 24;
        a7 += v26;
        ++v22;
        v29 += v28;
        ++v27;
      }
      while (v22 != a4);
    }
  }
  else
  {
    if ((this & 0x80000000) != 0)
    {
      v10 = 0;
      v9 = 0;
      v16 = a5;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v11 = -1;
      v12 = a5;
      do
      {
        v13 = v9 + v10;
        v14 = *v12;
        v12 += (int)a6;
        v15 = *(unsigned __int8 *)(a3 + v14);
        v9 = v14 - v15;
        v10 = v13 + v15;
        ++v11;
      }
      while ((_DWORD)this != v11);
      v16 = &a5[(this + 1) * (int)a6];
      if ((int)this >= 2)
      {
        v17 = this - 1;
        do
        {
          v18 = (v10 * a2 + 0x7FFFFF) >> 24;
          v19 = v9 + v10;
          v20 = *v16;
          v21 = *(unsigned __int8 *)(a3 + v20);
          v16 += (int)a6;
          v9 = v20 - v21;
          v10 = v19 + v21;
          *a7 = v18;
          a7 += (int)a8;
          --v17;
        }
        while (v17);
        LODWORD(a4) = (_DWORD)a4 - this + 1;
      }
    }
    v37 = this + 1;
    if ((int)a4 <= (int)this + 1)
    {
      v37 = (int)a4;
    }
    else
    {
      v38 = 0;
      v39 = this - (_DWORD)a4 + 1;
      do
      {
        this = a5[v38];
        v40 = v16[v38];
        v41 = *(unsigned __int8 *)(a3 + this);
        v42 = (v10 * a2 + 0x7FFFFF) >> 24;
        v43 = *(unsigned __int8 *)(a3 + v40);
        v10 = v41 + v43 + v9 + v10 - this;
        v9 = v40 - (v41 + v43);
        *a7 = v42;
        a7 += (int)a8;
        v38 += (int)a6;
      }
      while (!__CFADD__(v39++, 1));
      a5 += v38;
    }
    if (v37 >= 1)
    {
      v45 = v37 + 1;
      do
      {
        v46 = (v10 * a2 + 0x7FFFFF) >> 24;
        v47 = *a5;
        a5 += (int)a6;
        v48 = *(unsigned __int8 *)(a3 + v47);
        v10 = v9 + v10 - v47 + v48;
        v9 = -v48;
        *a7 = v46;
        a7 += (int)a8;
        --v45;
      }
      while (v45 > 1);
    }
  }
  return this;
}

void CA::`anonymous namespace'::gaussian_blur(CA::_anonymous_namespace_ *this, unsigned __int8 *a2, const unsigned __int8 *a3, const unsigned __int8 *a4, unsigned __int8 *a5, float a6, float a7)
{
  int v9;
  unsigned int v10;
  int v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  BOOL v17;
  double v18;
  uint64_t v19;
  int v20;
  float32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned __int8 *v35;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  BOOL v39;
  double v40;
  const unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  int v44;
  float32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  uint64_t v56;
  int v57;
  unsigned __int8 *v58;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  int v62;
  size_t v63;
  int v64;
  CA::_anonymous_namespace_ *v65;
  unsigned __int8 *v66;
  unsigned int v67;
  _BYTE v68[256];
  uint64_t v69;

  v9 = (int)a4;
  v10 = a3;
  v66 = a2;
  v69 = *MEMORY[0x1E0C80C00];
  if (a6 == a7)
  {
  }
  else
  {
    v65 = this;
    if ((int)a3 <= (int)a4)
      v12 = (int)a4;
    else
      v12 = (int)a3;
    v13 = (v12 * (_DWORD)a5);
    if (v13 > 0x1000)
    {
      v14 = (char *)malloc_type_malloc((v12 * (_DWORD)a5), 0x35B84029uLL);
      v16 = (unsigned __int8 *)malloc_type_malloc(v13, 0xE6DB5BD6uLL);
    }
    else
    {
      MEMORY[0x1E0C80A78](this);
      v14 = (char *)&v62 - ((v13 + 15) & 0x1FFFFFFF0);
      bzero(v14, v13);
      MEMORY[0x1E0C80A78](v15);
      v16 = (unsigned __int8 *)v14;
      bzero(v14, v13);
    }
    if (v14)
      v17 = v16 == 0;
    else
      v17 = 1;
    if (!v17)
    {
      v63 = v13;
      v67 = v10;
      v64 = v9;
      v18 = a6;
      if (a6 > 0.6)
      {
        v19 = 0;
        *(float *)&v18 = (float)(a6 * 0.93999) + -0.5;
        v20 = (int)*(float *)&v18;
        *(float *)&v18 = *(float *)&v18 - truncf(*(float *)&v18);
        v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v18, 0);
        v22 = (int32x4_t)xmmword_18474E180;
        v23 = (int32x4_t)xmmword_18474E190;
        v24 = (int32x4_t)xmmword_18474E1A0;
        v25 = (int32x4_t)xmmword_18474E1B0;
        v26.i64[0] = 0x1000000010;
        v26.i64[1] = 0x1000000010;
        do
        {
          v27.i64[0] = 0x3F0000003F000000;
          v27.i64[1] = 0x3F0000003F000000;
          v28.i64[0] = 0x3F0000003F000000;
          v28.i64[1] = 0x3F0000003F000000;
          v29.i64[0] = 0x3F0000003F000000;
          v29.i64[1] = 0x3F0000003F000000;
          v30.i64[0] = 0x3F0000003F000000;
          v30.i64[1] = 0x3F0000003F000000;
          *(int16x4_t *)v31.i8 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v30, vcvtq_f32_s32(v25), v21)));
          v31.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v29, vcvtq_f32_s32(v24), v21)));
          *(int16x4_t *)v30.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v28, vcvtq_f32_s32(v23), v21)));
          *(int16x4_t *)&v30.u32[2] = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v27, vcvtq_f32_s32(v22), v21)));
          *(int8x16_t *)&v68[v19] = vuzp1q_s8(v31, (int8x16_t)v30);
          v19 += 16;
          v25 = vaddq_s32(v25, v26);
          v24 = vaddq_s32(v24, v26);
          v23 = vaddq_s32(v23, v26);
          v22 = vaddq_s32(v22, v26);
        }
        while (v19 != 256);
        if (v64 >= 1)
        {
          v32 = (v20 + 1);
          v33 = (float)((float)(8924200.0 / a6) + 0.5);
          v34 = v64;
          v35 = (unsigned __int8 *)v65;
          do
          {
            for (i = 1; a5 != i; ++i)
            for (j = 1; a5 != j; ++j)
            for (k = 1; a5 != k; ++k)
            v35 = &v66[(_QWORD)v35];
            v39 = __OFSUB__(v34--, 1);
          }
          while (!((v34 < 0) ^ v39 | (v34 == 0)));
        }
      }
      v40 = a7;
      v41 = (const unsigned __int8 *)v64;
      v42 = (unsigned __int8 *)v65;
      if (a7 > 0.6)
      {
        v43 = 0;
        *(float *)&v40 = (float)(a7 * 0.93999) + -0.5;
        v44 = (int)*(float *)&v40;
        *(float *)&v40 = *(float *)&v40 - truncf(*(float *)&v40);
        v45 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v40, 0);
        v46 = (int32x4_t)xmmword_18474E180;
        v47 = (int32x4_t)xmmword_18474E190;
        v48 = (int32x4_t)xmmword_18474E1A0;
        v49 = (int32x4_t)xmmword_18474E1B0;
        v50.i64[0] = 0x1000000010;
        v50.i64[1] = 0x1000000010;
        do
        {
          v51.i64[0] = 0x3F0000003F000000;
          v51.i64[1] = 0x3F0000003F000000;
          v52.i64[0] = 0x3F0000003F000000;
          v52.i64[1] = 0x3F0000003F000000;
          v53.i64[0] = 0x3F0000003F000000;
          v53.i64[1] = 0x3F0000003F000000;
          v54.i64[0] = 0x3F0000003F000000;
          v54.i64[1] = 0x3F0000003F000000;
          *(int16x4_t *)v55.i8 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v54, vcvtq_f32_s32(v49), v45)));
          v55.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v53, vcvtq_f32_s32(v48), v45)));
          *(int16x4_t *)v54.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v52, vcvtq_f32_s32(v47), v45)));
          *(int16x4_t *)&v54.u32[2] = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v51, vcvtq_f32_s32(v46), v45)));
          *(int8x16_t *)&v68[v43] = vuzp1q_s8(v55, (int8x16_t)v54);
          v43 += 16;
          v49 = vaddq_s32(v49, v50);
          v48 = vaddq_s32(v48, v50);
          v47 = vaddq_s32(v47, v50);
          v46 = vaddq_s32(v46, v50);
        }
        while (v43 != 256);
        if ((int)v67 >= 1)
        {
          v56 = (v44 + 1);
          v57 = (float)((float)(8924200.0 / a7) + 0.5);
          do
          {
            v58 = v42;
            for (m = 1; a5 != m; ++m)
            for (n = 1; a5 != n; ++n)
            for (ii = 1; a5 != ii; ++ii)
            v42 = &v58[a5];
            v39 = __OFSUB__(v67--, 1);
          }
          while (!(((v67 & 0x80000000) != 0) ^ v39 | (v67 == 0)));
        }
      }
      LODWORD(v13) = v63;
    }
    if (v13 > 0x1000 && v16)
      free(v16);
    if (v13 > 0x1000)
    {
      if (v14)
        free(v14);
    }
  }
}

uint64_t CA::OGL::rect_transform_filter_bits(float64x2_t *a1, const double *a2, float64x2_t a3, float64x2_t a4, double a5, double a6)
{
  uint64_t v9;
  int8x16_t v10;
  double *v11;

  v9 = CA::OGL::transform_filter_bits(a1, a2, a5, a6);
  *(double *)v10.i64 = a5;
  return CA::OGL::rect_filter_bits(a1, v9, v11, a3, a4, v10, a6);
}

void CA::OGL::render_subclass(CA::OGL::Renderer &,CA::OGL::Layer const*)::visitor::visit_subclass(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v2;
  uint32x2_t *v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;

  v2 = *(os_unfair_lock_s **)(a2 + 24);
  if (v2)
  {
    if (v2[31]._os_unfair_lock_opaque)
    {
      v4 = *(uint32x2_t **)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
      v6 = (uint64_t)&v2[28];
      v7 = v2 + 6;
      os_unfair_lock_lock(v2 + 6);
      CA::OGL::render_emitter_cells(v4, v5, a2, *(_QWORD *)(a2 + 32), v6);
      os_unfair_lock_unlock(v7);
    }
  }
}

uint64_t CA::OGL::render_subclass(CA::OGL::Renderer &,CA::OGL::Layer const*)::visitor::visit_subclass(uint64_t a1, float32x4_t *a2)
{
  uint64_t v3;
  CA::OGL::Context **v4;
  float32x4_t v5;
  float32x4_t *v6;
  float16x4_t v8[2];

  v8[1] = *(float16x4_t *)MEMORY[0x1E0C80C00];
  v4 = *(CA::OGL::Context ***)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v5 = a2[1];
  v6 = *(float32x4_t **)(v3 + 24);
  if ((v6[2].i8[13] & 4) != 0)
    v5 = vmlaq_n_f32(v6[1], v5, 1.0 - COERCE_FLOAT(HIDWORD(*(_OWORD *)&v6[1])));
  v8[0] = vcvt_f16_f32(v5);
  return CA::OGL::render_solid_background(*v4, v3, v8, 0);
}

int8x16_t CA::OGL::unrotate_texcoords(CA::OGL *this, int8x16_t *a2, float *a3)
{
  int8x16_t result;

  if ((this & 1) != 0)
  {
    result.i32[0] = a2->i32[1];
    a2->i32[1] = a2->i32[3];
    a2->i32[3] = result.i32[0];
    if ((this & 2) == 0)
    {
LABEL_3:
      if ((this & 4) == 0)
        return result;
LABEL_7:
      result = vextq_s8(*a2, *a2, 4uLL);
      *a2 = result;
      return result;
    }
  }
  else if ((this & 2) == 0)
  {
    goto LABEL_3;
  }
  result.i32[0] = a2->i32[0];
  a2->i32[0] = a2->i32[2];
  a2->i32[2] = result.i32[0];
  if ((this & 4) != 0)
    goto LABEL_7;
  return result;
}

void CA::OGL::ContentsGeometry::scale(CA::OGL::ContentsGeometry *this, uint64_t a2, double *a3)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  float v8;
  float v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 248) & 0x10) != 0 && *((float *)this + 79) < 0.0)
  {
    v4 = 0;
    v5 = *((double *)this + 2);
    v6 = *((double *)this + 3);
    v7 = *((double *)this + 4);
    v10 = *((double *)this + 1);
    v11 = v5;
    v12 = v6 + v10;
    v13 = v5;
    v14 = v6 + v10;
    v15 = v7 + v5;
    v16 = v10;
    v17 = v7 + v5;
    do
    {
      CA::Transform::apply_to_point2((float64x2_t *)((char *)this + 104), (double *)((char *)&v10 + v4), a3);
      v4 += 16;
    }
    while (v4 != 64);
    v8 = (v13 * v10 + v15 * v12 + v17 * v14 + v16 * v11 - (v11 * v12 + v14 * v13 + v17 * v10 + v16 * v15))
       * 0.5
       / (v7
        * v6);
    v9 = sqrtf(fabsf(v8));
    if (LODWORD(v9) >> 23 >= 0xFF)
      v9 = 1.0;
    *((float *)this + 79) = v9;
  }
}

uint64_t CA::OGL::set_swizzle(_QWORD *a1, unsigned int a2, int a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;

  if (a3 != 1)
    __assert_rtn("set_swizzle", "ogl-layer.cpp", 2174, "swizzle == Render::kLayerContentsSwizzleAAAA");
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 184))(a1, 28);
  v6 = a1[2];
  if ((_DWORD)result)
  {
    v7 = a2;
    v8 = CA::OGL::swizzle_to_image_function(CA::Render::LayerContentsSwizzle,CA::OGL::ImageFunction)::AAAA_functions[*(unsigned __int8 *)(v6 + a2 + 17)];
    if (!v8)
      v8 = 33;
  }
  else
  {
    v7 = a2;
    v8 = 21;
  }
  *(_BYTE *)(v6 + v7 + 17) = v8;
  return result;
}

CA::Render::Surface *CA::Render::Surface::set_tonemapped_surface(CA::Render::Surface *this, CA::Render::Surface *a2)
{
  CA::Render::Surface *result;
  CA::Render::Surface *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  result = (CA::Render::Surface *)*((_QWORD *)this + 20);
  if (result != a2)
  {
    v4 = a2;
    if (result)
    {
      v5 = (unsigned int *)((char *)result + 8);
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        result = (CA::Render::Surface *)(*(uint64_t (**)(CA::Render::Surface *))(*(_QWORD *)result + 16))(result);
    }
    v8 = (unsigned int *)((char *)v4 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    if (!v9)
    {
      v4 = 0;
      do
        v10 = __ldaxr(v8);
      while (__stlxr(v10 - 1, v8));
    }
    *((_QWORD *)this + 20) = v4;
  }
  return result;
}

uint64_t CA::OGL::prepare_layer_image(CA::OGL::Renderer &,CA::OGL::Layer *,CA::OGL::Gstate const&)::visitor::visit_subclass(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 16);
  v4 = **(_BYTE ***)(a1 + 8);
  if ((*(_BYTE *)(a2 + 13) & 1) != 0)
    v3[4] |= 0x2000000uLL;
  v5 = *(_QWORD *)(a2 + 24);
  if (v5 && *(_DWORD *)(v5 + 124))
  {
    v6 = v3[4];
    v3[4] = v6 | 0x2000;
    v7 = *(_DWORD *)(a2 + 72);
    if (v7 > 374)
    {
      if (v7 == 375 || v7 == 478)
      {
LABEL_17:
        v3[4] = v6 | 0x802000;
        v10 = v3;
LABEL_18:
        *((_DWORD *)v10 + 75) |= 0x8000000u;
        goto LABEL_19;
      }
    }
    else
    {
      if ((v7 - 82) < 4)
        goto LABEL_19;
      if (v7 == 2)
      {
        if (!(*(unsigned int (**)(_BYTE *, uint64_t))(*(_QWORD *)v4 + 184))(v4, 33)
          || (v8 = v3[2]) != 0 && (*(_BYTE *)(v8 + 25) & 4) != 0)
        {
          v9 = 12;
        }
        else
        {
          v9 = 56;
        }
        v10 = v3;
        while (v9 == *(unsigned __int8 *)(v10[13] + 124))
        {
          v10 = (_QWORD *)*v10;
          if (!v10)
            goto LABEL_19;
        }
        v10[4] |= 0x800000uLL;
        goto LABEL_18;
      }
    }
    if ((v6 & 4) != 0 && (v4[416] & 4) == 0 || (v6 & 0x100000) != 0)
      goto LABEL_17;
  }
LABEL_19:
  result = CA::OGL::emitter_cells_have_offscreens(*(_QWORD *)(a2 + 32));
  if ((_DWORD)result)
    *(_DWORD *)(v3[13] + 220) |= 0x100000u;
  return result;
}

uint64_t CA::OGL::prepare_layer_image(CA::OGL::Renderer &,CA::OGL::Layer *,CA::OGL::Gstate const&)::visitor::visit_subclass(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 16) + 32) |= 0x10000000uLL;
  return result;
}

{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  *(_QWORD *)(v1 + 32) |= 0x4000uLL;
  *(_DWORD *)(*(_QWORD *)(v1 + 104) + 220) |= 0x800000u;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 104) + 220) |= 0x100000u;
  return result;
}

os_log_t ___ZN2CA3OGLL9trace_logEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreanimation", "Render.Trace");
  CA::OGL::trace_log(void)::log = (uint64_t)result;
  return result;
}

uint64_t CA::OGL::composite_detached(uint64_t a1, uint64_t a2, uint32x2_t *a3, double *a4, double *a5, char a6, uint64_t a7)
{
  double v14;
  double v15;
  _BOOL4 v16;
  uint64_t v17;
  uint32x2_t *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v44;
  const char *v45;
  NSObject *v46;
  uint32_t v47;
  uint64_t v48;
  __int32 v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  NSObject *v54;
  __int32 v55;
  _OWORD *v56;
  unint64_t v57;
  _OWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  float v64;
  double v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  double v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  uint64_t v80;
  uint64_t result;
  uint64_t v82;
  double v83;
  float v84;
  float v85;
  float v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  uint8_t buf[4];
  __int32 v93;
  float32x4_t v94[9];
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v14 = a4[2];
  if ((a6 & 4) != 0)
    v15 = a4[3];
  else
    v15 = a4[2];
  if (v15 == a5[2])
  {
    if ((a6 & 4) == 0)
      v14 = a4[3];
    v16 = v14 != a5[3];
  }
  else
  {
    v16 = 1;
  }
  v17 = *(_QWORD *)(a7 + 176);
  if (a3[1].i8[4] != 51 || !(*(unsigned int (**)(uint32x2_t *))(*(_QWORD *)a3 + 280))(a3))
    goto LABEL_49;
  v18 = (uint32x2_t *)a3[20];
  if (v18)
    goto LABEL_50;
  memset(v94, 0, sizeof(v94));
  v19 = (uint64_t)a3[21];
  if (!v19)
  {
    v40 = *(float32x4_t *)a3[30].i8;
    *(float32x4_t *)((char *)&v94[5] + 8) = *(float32x4_t *)a3[32].i8;
    v41 = *(float32x4_t *)a3[36].i8;
    *(float32x4_t *)((char *)&v94[6] + 8) = *(float32x4_t *)a3[34].i8;
    *(float32x4_t *)((char *)&v94[7] + 8) = v41;
    v42 = *(float32x4_t *)a3[22].i8;
    *(float32x4_t *)((char *)&v94[1] + 8) = *(float32x4_t *)a3[24].i8;
    v43 = *(float32x4_t *)a3[28].i8;
    *(float32x4_t *)((char *)&v94[2] + 8) = *(float32x4_t *)a3[26].i8;
    *(float32x4_t *)((char *)&v94[3] + 8) = v43;
    *(float32x4_t *)((char *)&v94[4] + 8) = v40;
    v94[8].i8[8] = a3[38].i8[0];
    *(float32x4_t *)((char *)v94 + 8) = v42;
    if (x_log_hook_p())
    {
      x_log_();
      goto LABEL_39;
    }
    v44 = x_log_category_ogl;
    if (!os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_ERROR))
      goto LABEL_39;
    *(_WORD *)buf = 0;
    v45 = "Could not tonemap surface because of invalid configuration";
    v46 = v44;
    v47 = 2;
LABEL_38:
    _os_log_impl(&dword_184457000, v46, OS_LOG_TYPE_ERROR, v45, buf, v47);
    goto LABEL_39;
  }
  v91 = a2;
  v20 = (unsigned int *)(v19 + 16);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  v22 = *(float32x4_t *)a3[32].i8;
  *(float32x4_t *)((char *)&v94[4] + 8) = *(float32x4_t *)a3[30].i8;
  v23 = *(float32x4_t *)a3[26].i8;
  *(float32x4_t *)((char *)&v94[3] + 8) = *(float32x4_t *)a3[28].i8;
  *(float32x4_t *)((char *)&v94[2] + 8) = v23;
  v24 = *(float32x4_t *)a3[22].i8;
  *(float32x4_t *)((char *)&v94[1] + 8) = *(float32x4_t *)a3[24].i8;
  v25 = *(float32x4_t *)a3[34].i8;
  *(float32x4_t *)((char *)&v94[7] + 8) = *(float32x4_t *)a3[36].i8;
  *(float32x4_t *)((char *)&v94[6] + 8) = v25;
  *(float32x4_t *)((char *)&v94[5] + 8) = v22;
  v94[0].i64[0] = v19;
  v94[8].i8[8] = a3[38].i8[0];
  *(float32x4_t *)((char *)v94 + 8) = v24;
  v26 = *(_QWORD *)(a7 + 200);
  v89 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 56))(v19, v26);
  v90 = v94[8].u8[8];
  v27 = (*(uint64_t (**)(uint32x2_t *))(*(_QWORD *)a3 + 256))(a3);
  v28 = (*(uint64_t (**)(uint64_t, uint32x2_t *, uint64_t, unsigned __int32 *, _QWORD, _QWORD, _QWORD, uint64_t, float, __int16))(*(_QWORD *)v19 + 24))(v19, a3, v26, &v94[0].u32[2], v89, 0, v90, v27, 1.0, 1);
  if (!v28)
  {
    if (x_log_hook_p())
    {
      x_log_();
      a2 = v91;
      goto LABEL_39;
    }
    v48 = x_log_category_ogl;
    a2 = v91;
    if (!os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_ERROR))
      goto LABEL_39;
    v49 = a3[13].i32[0];
    *(_DWORD *)buf = 67109120;
    v93 = v49;
    v45 = "Failed to tonemap surface 0x%x";
    v46 = v48;
    v47 = 8;
    goto LABEL_38;
  }
  v29 = (unsigned int *)v28;
  v30 = (unsigned int *)a3[20];
  a2 = v91;
  if (v30 != v29)
  {
    if (v30)
    {
      v31 = v30 + 2;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
        (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 16))(v30);
    }
    v34 = v29 + 2;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
    v36 = v29;
    if (!v35)
    {
      v36 = 0;
      do
        v88 = __ldaxr(v34);
      while (__stlxr(v88 - 1, v34));
    }
    a3[20] = (uint32x2_t)v36;
  }
  v37 = v29 + 2;
  do
  {
    v38 = __ldaxr(v37);
    v39 = v38 - 1;
  }
  while (__stlxr(v39, v37));
  if (!v39)
    (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 16))(v29);
LABEL_39:
  v50 = v94[0].i64[0];
  if (v94[0].i64[0])
  {
    v51 = (unsigned int *)(v94[0].i64[0] + 16);
    do
    {
      v52 = __ldaxr(v51);
      v53 = v52 - 1;
    }
    while (__stlxr(v53, v51));
    if (!v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  }
  v18 = (uint32x2_t *)a3[20];
  if (!v18)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v54 = x_log_category_ogl;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_ERROR))
      {
        v55 = a3[13].i32[0];
        v94[0].i32[0] = 67109120;
        v94[0].i32[1] = v55;
        _os_log_impl(&dword_184457000, v54, OS_LOG_TYPE_ERROR, "No valid tonemapped surface available for 0x%x", (uint8_t *)v94, 8u);
      }
    }
LABEL_49:
    v18 = a3;
  }
LABEL_50:
  v94[0] = 0uLL;
  v56 = CA::OGL::Context::bind_image(a7, 0, v18, (double *)0x3F, v16, v16, 0, 0, 0.0, v94, 0);
  if (!v56)
    goto LABEL_83;
  v58 = v56;
  v59 = a2;
  *(_BYTE *)(*(_QWORD *)(a7 + 16) + 481) |= 1u;
  v60 = *(_QWORD *)(a7 + 16);
  *(_BYTE *)(v60 + 480) = 7;
  *(_BYTE *)(v60 + 16) = 1;
  *(_QWORD *)(a7 + 128) = 0;
  v61 = a7 + 818;
  *(_QWORD *)(a7 + 96) = a7 + 818;
  *(_OWORD *)(a7 + 104) = xmmword_18474E060;
  if (*(_QWORD *)(a7 + 136) <= 3uLL)
  {
    *(_WORD *)(a7 + 816) |= 0x20u;
    CA::OGL::Context::array_flush(a7);
    *(_QWORD *)(a7 + 128) = 0;
    *(_QWORD *)(a7 + 96) = v61;
    *(_OWORD *)(a7 + 104) = xmmword_18474E060;
  }
  LODWORD(v57) = v18[2].i32[1];
  v62 = (double)v18[2].u32[0];
  v63 = a4[1];
  v64 = *a4 / v62;
  v65 = (double)v57;
  v66 = v63 / v65;
  v67 = (a4[2] + *a4) / v62;
  v68 = (a4[3] + v63) / v65;
  if ((a6 & 1) != 0)
  {
    if ((a6 & 4) != 0)
    {
      if ((a6 & 2) != 0)
        v69 = v66;
      else
        v69 = v68;
      if ((a6 & 2) != 0)
        v66 = v68;
      v70 = *a4 / v62;
      goto LABEL_68;
    }
    v69 = v66;
    v71 = v68;
    if ((a6 & 2) != 0)
      goto LABEL_61;
    goto LABEL_58;
  }
  if ((a6 & 2) != 0)
  {
    v69 = v68;
    v71 = v66;
    if ((a6 & 4) == 0)
    {
LABEL_61:
      v70 = v64;
      v66 = v71;
      goto LABEL_68;
    }
LABEL_58:
    v69 = v66;
    v70 = v67;
    v66 = v68;
    goto LABEL_59;
  }
  v69 = v68;
  v70 = (a4[2] + *a4) / v62;
LABEL_59:
  v67 = v64;
LABEL_68:
  v72 = a5[1];
  v73 = *a5;
  v74 = v72;
  v75 = a5[2] + *a5;
  *(float *)&v72 = a5[3] + v72;
  CA::OGL::Context::array_rect((_QWORD *)a7, v73, v74, v75, *(float *)&v72);
  if ((a6 & 4) != 0)
    v76 = v69;
  else
    v76 = v66;
  if ((a6 & 4) != 0)
    v77 = v67;
  else
    v77 = v70;
  if ((a6 & 4) != 0)
    v78 = v66;
  else
    v78 = v69;
  if ((a6 & 4) != 0)
    v79 = v70;
  else
    v79 = v67;
  v80 = *(_QWORD *)(a7 + 120) + 48 * *(_QWORD *)(a7 + 128);
  *(float *)(v80 - 176) = v67;
  *(float *)(v80 - 172) = v76;
  *(float *)(v80 - 128) = v77;
  *(float *)(v80 - 124) = v66;
  *(float *)(v80 - 80) = v70;
  *(float *)(v80 - 76) = v78;
  *(float *)(v80 - 32) = v79;
  *(float *)(v80 - 28) = v69;
  CA::OGL::Context::array_flush(a7);
  if (byte_1ECDC6A62)
  {
    v82 = *(_QWORD *)(a7 + 16);
    *(_BYTE *)(v82 + 480) = 3;
    *(_BYTE *)(v82 + 16) = 0;
    *(_QWORD *)(a7 + 128) = 0;
    *(_QWORD *)(a7 + 96) = v61;
    *(_OWORD *)(a7 + 104) = xmmword_18474E060;
    CA::OGL::Context::array_check((CA::OGL::Context *)a7, 1);
    v83 = a5[1];
    v84 = *a5;
    v85 = v83;
    v86 = a5[2] + *a5;
    *(float *)&v83 = a5[3] + v83;
    CA::OGL::Context::array_rect((_QWORD *)a7, v84, v85, v86, *(float *)&v83);
    v87 = *(_QWORD *)(a7 + 120) + 48 * *(_QWORD *)(a7 + 128);
    *(_QWORD *)(v87 - 160) = 0x3804000000003804;
    *(_QWORD *)(v87 - 112) = 0x3804000000003804;
    *(_QWORD *)(v87 - 64) = 0x3804000000003804;
    *(_QWORD *)(v87 - 16) = 0x3804000000003804;
    CA::OGL::Context::array_flush(a7);
  }
  *(_BYTE *)(*(_QWORD *)(a7 + 16) + 481) &= ~1u;
  (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)a7 + 520))(a7, v58, 0);
  a2 = v59;
LABEL_83:
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 56))(v17, a1, a2);
  if (a1)
    *(_QWORD *)(a1 + 96) &= ~0x8000uLL;
  return result;
}

unint64_t x_int_hash(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  v2 = 9 * ((v1 + ~(v1 << 13)) ^ ((v1 + ~(v1 << 13)) >> 8));
  v3 = (v2 ^ (v2 >> 15)) + ~((v2 ^ (v2 >> 15)) << 27);
  return v3 ^ (v3 >> 31);
}

BOOL x_int_compare(uint64_t a1, uint64_t a2)
{
  return a1 != a2;
}

CALayer *calayer_from_render_layer(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  CALayer *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __objc2_class **v15;
  uint64_t n;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t kk;
  uint64_t mm;
  unsigned __int8 v26;
  uint64_t k;
  uint64_t m;
  unsigned __int8 v29;
  uint64_t ii;
  uint64_t jj;
  unsigned __int8 v32;
  uint64_t i;
  uint64_t j;
  NSObject *v35;
  const char *v36;
  _BYTE v38[32];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x186DBE2E4]();
  v5 = *(uint64_t **)(a2 + 128);
  v6 = a2;
  if (v5)
  {
    v6 = *v5;
    if (!*v5)
      v6 = a2;
  }
  v7 = *(unsigned __int8 *)(v6 + 12);
  if (v7 <= 0x1C)
  {
    if (v7 == 3)
    {
      v8 = +[CALayer layer](CABackdropLayer, "layer");
      v20 = *(uint64_t **)(a2 + 128);
      if (v20 && (v21 = *v20) != 0)
      {
        if (*(_BYTE *)(v21 + 12) == 3)
          v22 = v21;
        else
          v22 = 0;
      }
      else
      {
        v22 = 0;
      }
      v32 = atomic_load((unsigned __int8 *)&_ZGVZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2);
      if ((v32 & 1) == 0 && __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2))
      {
        _ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 = 0u;
        *(_OWORD *)&qword_1EDD13870 = 0u;
        dword_1EDD13880 = 1065353216;
        __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2);
      }
      if (_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE10once_token_2 != -1)
        dispatch_once(&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE10once_token_2, &__block_literal_global_254);
      get_setters_for_type<CA::Render::Layer>();
      for (i = qword_1EDD13870; i; i = *(_QWORD *)i)
      {
        memset(v38, 0, sizeof(v38));
        if (*(char *)(i + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v38, *(const std::string::value_type **)(i + 16), *(_QWORD *)(i + 24));
        }
        else
        {
          *(_OWORD *)v38 = *(_OWORD *)(i + 16);
          *(_QWORD *)&v38[16] = *(_QWORD *)(i + 32);
        }
        *(_QWORD *)&v38[24] = *(_QWORD *)(i + 40);
        (*(void (**)(CALayer *, uint64_t, uint64_t, _BYTE *, uint64_t))&v38[24])(v8, v22, a2, v38, a1);
        if ((v38[23] & 0x80000000) != 0)
          operator delete(*(void **)v38);
      }
      for (j = qword_1EDD137D8; j; j = *(_QWORD *)j)
      {
        memset(v38, 0, sizeof(v38));
        if (*(char *)(j + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v38, *(const std::string::value_type **)(j + 16), *(_QWORD *)(j + 24));
        }
        else
        {
          *(_OWORD *)v38 = *(_OWORD *)(j + 16);
          *(_QWORD *)&v38[16] = *(_QWORD *)(j + 32);
        }
        *(_QWORD *)&v38[24] = *(_QWORD *)(j + 40);
        (*(void (**)(CALayer *, uint64_t, uint64_t, _BYTE *, uint64_t))&v38[24])(v8, a2, a2, v38, a1);
        if ((v38[23] & 0x80000000) != 0)
          operator delete(*(void **)v38);
      }
    }
    else
    {
      if (v7 != 20)
      {
LABEL_40:
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v35 = x_log_category_utilities;
          if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
          {
            if (v7 > 0x38 || (v36 = CA::Render::type_names[v7], !*v36))
              v36 = "<unknown>";
            *(_DWORD *)v38 = 136315138;
            *(_QWORD *)&v38[4] = v36;
            _os_log_impl(&dword_184457000, v35, OS_LOG_TYPE_ERROR, "calayer_from_render_layer missing type : %s", v38, 0xCu);
          }
        }
        v8 = 0;
        goto LABEL_124;
      }
      v8 = +[CALayer layer](CAGradientLayer, "layer");
      v12 = *(uint64_t **)(a2 + 128);
      if (v12 && (v13 = *v12) != 0)
      {
        if (*(_BYTE *)(v13 + 12) == 20)
          v14 = v13;
        else
          v14 = 0;
      }
      else
      {
        v14 = 0;
      }
      v26 = atomic_load((unsigned __int8 *)&_ZGVZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0);
      if ((v26 & 1) == 0 && __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0))
      {
        _ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 = 0u;
        *(_OWORD *)&qword_1EDD13768 = 0u;
        dword_1EDD13778 = 1065353216;
        __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0);
      }
      if (_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE10once_token_0 != -1)
        dispatch_once(&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE10once_token_0, &__block_literal_global_2714);
      get_setters_for_type<CA::Render::Layer>();
      for (k = qword_1EDD13768; k; k = *(_QWORD *)k)
      {
        memset(v38, 0, sizeof(v38));
        if (*(char *)(k + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v38, *(const std::string::value_type **)(k + 16), *(_QWORD *)(k + 24));
        }
        else
        {
          *(_OWORD *)v38 = *(_OWORD *)(k + 16);
          *(_QWORD *)&v38[16] = *(_QWORD *)(k + 32);
        }
        *(_QWORD *)&v38[24] = *(_QWORD *)(k + 40);
        (*(void (**)(CALayer *, uint64_t, uint64_t, _BYTE *, uint64_t))&v38[24])(v8, v14, a2, v38, a1);
        if ((v38[23] & 0x80000000) != 0)
          operator delete(*(void **)v38);
      }
      for (m = qword_1EDD137D8; m; m = *(_QWORD *)m)
      {
        memset(v38, 0, sizeof(v38));
        if (*(char *)(m + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v38, *(const std::string::value_type **)(m + 16), *(_QWORD *)(m + 24));
        }
        else
        {
          *(_OWORD *)v38 = *(_OWORD *)(m + 16);
          *(_QWORD *)&v38[16] = *(_QWORD *)(m + 32);
        }
        *(_QWORD *)&v38[24] = *(_QWORD *)(m + 40);
        (*(void (**)(CALayer *, uint64_t, uint64_t, _BYTE *, uint64_t))&v38[24])(v8, a2, a2, v38, a1);
        if ((v38[23] & 0x80000000) != 0)
          operator delete(*(void **)v38);
      }
    }
  }
  else
  {
    switch(v7)
    {
      case 0x1Du:
        v15 = off_1E1588C80;
        if ((*(_DWORD *)(a2 + 12) & 0x100) != 0)
          v15 = off_1E1588D80;
        v8 = (CALayer *)-[__objc2_class layer](*v15, "layer");
        get_setters_for_type<CA::Render::Layer>();
        get_setters_for_type<CA::Render::Layer>();
        for (n = qword_1EDD137D8; n; n = *(_QWORD *)n)
        {
          memset(v38, 0, sizeof(v38));
          if (*(char *)(n + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v38, *(const std::string::value_type **)(n + 16), *(_QWORD *)(n + 24));
          }
          else
          {
            *(_OWORD *)v38 = *(_OWORD *)(n + 16);
            *(_QWORD *)&v38[16] = *(_QWORD *)(n + 32);
          }
          *(_QWORD *)&v38[24] = *(_QWORD *)(n + 40);
          (*(void (**)(CALayer *, uint64_t, uint64_t, _BYTE *, uint64_t))&v38[24])(v8, a2, a2, v38, a1);
          if ((v38[23] & 0x80000000) != 0)
            operator delete(*(void **)v38);
        }
        break;
      case 0x2Cu:
        v8 = +[CALayer layer](CAReplicatorLayer, "layer");
        v17 = *(uint64_t **)(a2 + 128);
        if (v17 && (v18 = *v17) != 0)
        {
          if (*(_BYTE *)(v18 + 12) == 44)
            v19 = v18;
          else
            v19 = 0;
        }
        else
        {
          v19 = 0;
        }
        v29 = atomic_load((unsigned __int8 *)&_ZGVZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3);
        if ((v29 & 1) == 0
          && __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3))
        {
          _ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 = 0u;
          *(_OWORD *)&qword_1EDD138A8 = 0u;
          dword_1EDD138B8 = 1065353216;
          __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3);
        }
        if (_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE10once_token_3 != -1)
          dispatch_once(&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE10once_token_3, &__block_literal_global_277);
        get_setters_for_type<CA::Render::Layer>();
        for (ii = qword_1EDD138A8; ii; ii = *(_QWORD *)ii)
        {
          memset(v38, 0, sizeof(v38));
          if (*(char *)(ii + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v38, *(const std::string::value_type **)(ii + 16), *(_QWORD *)(ii + 24));
          }
          else
          {
            *(_OWORD *)v38 = *(_OWORD *)(ii + 16);
            *(_QWORD *)&v38[16] = *(_QWORD *)(ii + 32);
          }
          *(_QWORD *)&v38[24] = *(_QWORD *)(ii + 40);
          (*(void (**)(CALayer *, uint64_t, uint64_t, _BYTE *, uint64_t))&v38[24])(v8, v19, a2, v38, a1);
          if ((v38[23] & 0x80000000) != 0)
            operator delete(*(void **)v38);
        }
        for (jj = qword_1EDD137D8; jj; jj = *(_QWORD *)jj)
        {
          memset(v38, 0, sizeof(v38));
          if (*(char *)(jj + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v38, *(const std::string::value_type **)(jj + 16), *(_QWORD *)(jj + 24));
          }
          else
          {
            *(_OWORD *)v38 = *(_OWORD *)(jj + 16);
            *(_QWORD *)&v38[16] = *(_QWORD *)(jj + 32);
          }
          *(_QWORD *)&v38[24] = *(_QWORD *)(jj + 40);
          (*(void (**)(CALayer *, uint64_t, uint64_t, _BYTE *, uint64_t))&v38[24])(v8, a2, a2, v38, a1);
          if ((v38[23] & 0x80000000) != 0)
            operator delete(*(void **)v38);
        }
        break;
      case 0x2Eu:
        v8 = +[CALayer layer](CAShapeLayer, "layer");
        v9 = *(uint64_t **)(a2 + 128);
        if (v9 && (v10 = *v9) != 0)
        {
          if (*(_BYTE *)(v10 + 12) == 46)
            v11 = v10;
          else
            v11 = 0;
        }
        else
        {
          v11 = 0;
        }
        v23 = atomic_load((unsigned __int8 *)&_ZGVZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1);
        if ((v23 & 1) == 0 && __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1))
        {
          _ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 = 0u;
          *(_OWORD *)&qword_1EDD13838 = 0u;
          dword_1EDD13848 = 1065353216;
          __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1);
        }
        if (_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE10once_token_1 != -1)
          dispatch_once(&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE10once_token_1, &__block_literal_global_235);
        get_setters_for_type<CA::Render::Layer>();
        for (kk = qword_1EDD13838; kk; kk = *(_QWORD *)kk)
        {
          memset(v38, 0, sizeof(v38));
          if (*(char *)(kk + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v38, *(const std::string::value_type **)(kk + 16), *(_QWORD *)(kk + 24));
          }
          else
          {
            *(_OWORD *)v38 = *(_OWORD *)(kk + 16);
            *(_QWORD *)&v38[16] = *(_QWORD *)(kk + 32);
          }
          *(_QWORD *)&v38[24] = *(_QWORD *)(kk + 40);
          (*(void (**)(CALayer *, uint64_t, uint64_t, _BYTE *, uint64_t))&v38[24])(v8, v11, a2, v38, a1);
          if ((v38[23] & 0x80000000) != 0)
            operator delete(*(void **)v38);
        }
        for (mm = qword_1EDD137D8; mm; mm = *(_QWORD *)mm)
        {
          memset(v38, 0, sizeof(v38));
          if (*(char *)(mm + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v38, *(const std::string::value_type **)(mm + 16), *(_QWORD *)(mm + 24));
          }
          else
          {
            *(_OWORD *)v38 = *(_OWORD *)(mm + 16);
            *(_QWORD *)&v38[16] = *(_QWORD *)(mm + 32);
          }
          *(_QWORD *)&v38[24] = *(_QWORD *)(mm + 40);
          (*(void (**)(CALayer *, uint64_t, uint64_t, _BYTE *, uint64_t))&v38[24])(v8, a2, a2, v38, a1);
          if ((v38[23] & 0x80000000) != 0)
            operator delete(*(void **)v38);
        }
        break;
      default:
        goto LABEL_40;
    }
  }
LABEL_124:
  objc_autoreleasePoolPop(v4);
  return v8;
}

void sub_1845ED350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void get_setters_for_type<CA::Render::Layer>()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&_ZGVZ20get_setters_for_typeIN2CA6Render5LayerEERKDavE9layer_map);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render5LayerEERKDavE9layer_map))
    {
      _ZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEv();
      __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render5LayerEERKDavE9layer_map);
    }
  }
}

void sub_1845ED3E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&_ZGVZ20get_setters_for_typeIN2CA6Render5LayerEERKDavE9layer_map);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t _ZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEv()
{
  unsigned __int8 v0;
  _QWORD *v1;
  _QWORD *i;
  void *__p[2];
  char v5;
  __int128 v6;
  __int128 v7;
  int v8;
  _OWORD v9[2];
  uint64_t v10;
  void *v11[2];
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  memset(v9, 0, sizeof(v9));
  v10 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)v9, 0x40uLL);
  v0 = atomic_load((unsigned __int8 *)&_ZGVZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavE10timing_map);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&_ZGVZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavE10timing_map))
  {
    _ZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEv();
    __cxa_guard_release(&_ZGVZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavE10timing_map);
  }
  v6 = 0u;
  v7 = 0u;
  v8 = dword_1EDD13818;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)&v6, qword_1EDD13800);
  v1 = (_QWORD *)qword_1EDD13808;
  if (qword_1EDD13808)
  {
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)> const&>((uint64_t)&v6, (uint64_t)(v1 + 2), (uint64_t)(v1 + 2));
      v1 = (_QWORD *)*v1;
    }
    while (v1);
  }
  for (i = (_QWORD *)v7; i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)> const&>((uint64_t)v9, (uint64_t)(i + 2), (uint64_t)(i + 2));
  snake_case_to_camel_case("allows_display_compositing", 26, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 887, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("allows_edge_antialiasing", 24, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 888, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("allows_group_blending", 21, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 889, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("allows_group_opacity", 20, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 890, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("allows_hit_testing", 18, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 891, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("anchor_point", 12, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 895, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("anchor_point_z", 14, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 896, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("background_color_phase", 22, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 897, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("background_filters", 18, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 898, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("border_offset", 13, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 899, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE8_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("border_path_is_bounds", 21, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 900, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE9_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("border_width", 12, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 901, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE10_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("bounds", 6, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 902, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE11_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("compositing_filter", 18, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 903, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE12_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("contents", 8, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 904, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE13_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("contents_aligns_to_pixels", 25, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 905, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE14_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("contents_center", 15, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 906, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE15_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("contents_contains_subtitles", 27, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 907, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE16_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("contents_dither", 15, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 908, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE17_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("contents_gravity", 16, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 909, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE18_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("contents_multiply_color", 23, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 910, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE19_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("contents_opaque", 15, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 911, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE20_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("contents_rect", 13, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 912, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE21_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("contents_scale", 14, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 913, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE22_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("contents_swizzle", 16, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 914, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE23_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("contents_transform", 18, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 915, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE24_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("corner_contents", 15, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 916, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE25_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("corner_contents_center", 22, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 917, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE26_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("corner_contents_masks_edges", 27, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 918, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE27_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("corner_radii", 12, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 919, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE28_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("corner_radius", 13, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 920, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE29_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("creates_compositing_group", 25, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 921, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE30_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("disable_update_mask", 19, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 922, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE31_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("edge_antialiasing_mask", 22, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 923, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE32_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("filters", 7, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 924, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE33_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("flips_horizontal_axis", 21, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 925, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE34_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("hit_tests_as_opaque", 19, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 929, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE35_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("hit_tests_contents_alpha_channel", 32, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 930, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE36_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("inherits_timing", 15, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 931, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE37_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("inverts_mask", 12, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 932, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE38_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("inverts_shadow", 14, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 933, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE39_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("literal_contents_center", 23, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 934, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE40_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("magnification_filter", 20, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 935, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE41_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("mask", 4, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 936, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE42_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("masked_corners", 14, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 937, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE43_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("masks_to_bounds", 15, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 938, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE44_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("mesh_transform", 14, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 939, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE45_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("minification_filter", 19, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 940, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE46_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("name", 4, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 941, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE47_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("opacity", 7, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 942, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE48_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("position", 8, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 943, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE49_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("preloads_cache", 14, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 944, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE50_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("punchout_shadow", 15, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 945, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE51_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("rasterization_prefers_display_compositing", 41, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 946, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE52_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("rasterization_prefers_window_server_aware_backdrops", 51, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 947, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE53_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("rasterization_scale", 19, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 948, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE54_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("rim_color", 9, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 952, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE55_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("rim_opacity", 11, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 953, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE56_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("rim_path_is_bounds", 18, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 954, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE57_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("rim_width", 9, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 955, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE58_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("security_mode", 13, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 956, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE59_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("shadow_color", 12, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 960, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE60_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("shadow_offset", 13, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 961, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE61_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("shadow_opacity", 14, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 962, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE62_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("shadow_path", 11, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 963, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE63_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("shadow_path_is_bounds", 21, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 964, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE64_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("shadow_radius", 13, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 965, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE65_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("should_rasterize", 16, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 966, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE66_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("should_flatten", 14, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 967, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE67_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("should_reflatten", 16, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 968, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE68_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("soft_rim", 8, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 969, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE69_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("sorts_sublayers", 15, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 970, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE70_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("uses_web_kit_behavior", 21, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 971, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE71_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("sublayer_transform", 18, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 972, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE72_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("transform", 9, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 973, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE73_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("z_position", 10, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 974, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE74_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "wantsExtendedDynamicRangeContent");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 976, "\"Duplicated Entry !!\" && map.map.find (\"wantsExtendedDynamicRangeContent\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "wantsExtendedDynamicRangeContent");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE75_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "gain");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 977, "\"Duplicated Entry !!\" && map.map.find (\"gain\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "gain");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE76_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "doubleSided");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 978, "\"Duplicated Entry !!\" && map.map.find (\"doubleSided\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "doubleSided");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE77_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "geometryFlipped");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 979, "\"Duplicated Entry !!\" && map.map.find (\"geometryFlipped\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "geometryFlipped");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE78_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "hidden");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 980, "\"Duplicated Entry !!\" && map.map.find (\"hidden\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "hidden");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE79_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "minificationFilterBias");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 981, "\"Duplicated Entry !!\" && map.map.find (\"minificationFilterBias\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "minificationFilterBias");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE80_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "presentationModifiers");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 982, "\"Duplicated Entry !!\" && map.map.find (\"presentationModifiers\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "presentationModifiers");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE81_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "toneMapToStandardDynamicRange");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 983, "\"Duplicated Entry !!\" && map.map.find (\"toneMapToStandardDynamicRange\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "toneMapToStandardDynamicRange");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE82_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "contentsMaximumDesiredEDR");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 988, "\"Duplicated Entry !!\" && map.map.find (\"contentsMaximumDesiredEDR\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "contentsMaximumDesiredEDR");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE83_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "contentsEDRStrength");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 989, "\"Duplicated Entry !!\" && map.map.find (\"contentsEDRStrength\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "contentsEDRStrength");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE84_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  snake_case_to_camel_case("sublayers", 9, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1007, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE85_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("animations", 10, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1020, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE86_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("background_color", 16, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1024, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE87_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("border_color", 12, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1028, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE88_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("contents_scaling", 16, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1032, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE89_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("corner_curve", 12, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1044, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE90_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("tone_map_mode", 13, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1056, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE91_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("defines_display_region_of_interest", 34, (char *)v11);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1062, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v11);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE92_8__invokeES8_SA_SA_SJ_SM_;
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "actions");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1107, "\"Duplicated Entry !!\" && map.map.find (\"actions\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "actions");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE93_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "autoresizingMask");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1108, "\"Duplicated Entry !!\" && map.map.find (\"autoresizingMask\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "autoresizingMask");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE94_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "canDrawConcurrently");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1109, "\"Duplicated Entry !!\" && map.map.find (\"canDrawConcurrently\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "canDrawConcurrently");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE95_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "clearsContext");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1110, "\"Duplicated Entry !!\" && map.map.find (\"clearsContext\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "clearsContext");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE96_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "constraints");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1111, "\"Duplicated Entry !!\" && map.map.find (\"constraints\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "constraints");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE97_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "contentsFormat");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1112, "\"Duplicated Entry !!\" && map.map.find (\"contentsFormat\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "contentsFormat");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE98_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "delegate");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1113, "\"Duplicated Entry !!\" && map.map.find (\"delegate\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "delegate");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE99_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "drawsAsynchronously");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1114, "\"Duplicated Entry !!\" && map.map.find (\"drawsAsynchronously\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "drawsAsynchronously");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE100_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "floating");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1115, "\"Duplicated Entry !!\" && map.map.find (\"floating\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "floating");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE101_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "frame");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1116, "\"Duplicated Entry !!\" && map.map.find (\"frame\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "frame");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE102_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "frozen");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1117, "\"Duplicated Entry !!\" && map.map.find (\"frozen\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "frozen");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE103_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "layoutManager");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1118, "\"Duplicated Entry !!\" && map.map.find (\"layoutManager\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "layoutManager");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE104_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "margin");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1119, "\"Duplicated Entry !!\" && map.map.find (\"margin\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "margin");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE105_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "needsDisplayOnBoundsChange");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1120, "\"Duplicated Entry !!\" && map.map.find (\"needsDisplayOnBoundsChange\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "needsDisplayOnBoundsChange");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE106_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "needsLayoutOnGeometryChange");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1121, "\"Duplicated Entry !!\" && map.map.find (\"needsLayoutOnGeometryChange\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "needsLayoutOnGeometryChange");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE107_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "opaque");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1122, "\"Duplicated Entry !!\" && map.map.find (\"opaque\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "opaque");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE108_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "sizeRequisition");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1123, "\"Duplicated Entry !!\" && map.map.find (\"sizeRequisition\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "sizeRequisition");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE109_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "states");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1124, "\"Duplicated Entry !!\" && map.map.find (\"states\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "states");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE110_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "stateTransitions");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1125, "\"Duplicated Entry !!\" && map.map.find (\"stateTransitions\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "stateTransitions");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE111_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "style");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1126, "\"Duplicated Entry !!\" && map.map.find (\"style\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "style");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE112_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "superlayer");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1127, "\"Duplicated Entry !!\" && map.map.find (\"superlayer\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "superlayer");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE113_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "unsafeUnretainedDelegate");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1128, "\"Duplicated Entry !!\" && map.map.find (\"unsafeUnretainedDelegate\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "unsafeUnretainedDelegate");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE114_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "contentsDirtyRect");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1129, "\"Duplicated Entry !!\" && map.map.find (\"contentsDirtyRect\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "contentsDirtyRect");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE115_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "acceleratesDrawing");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1132, "\"Duplicated Entry !!\" && map.map.find (\"acceleratesDrawing\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "acceleratesDrawing");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE116_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "invertsContentsAreFlipped");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1133, "\"Duplicated Entry !!\" && map.map.find (\"invertsContentsAreFlipped\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "invertsContentsAreFlipped");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE117_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "motionBlurAmount");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1134, "\"Duplicated Entry !!\" && map.map.find (\"motionBlurAmount\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "motionBlurAmount");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE118_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "continuousCorners");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v9[0], *((unint64_t *)&v9[0] + 1), (uint64_t)v11))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1135, "\"Duplicated Entry !!\" && map.map.find (\"continuousCorners\") == map.map.end ()");
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:nn180100]<0>(v11, "continuousCorners");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v9, (uint64_t)v11, (uint64_t)v11)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE119_8__invokeES8_SA_SA_SJ_SM_;
  if (v12 < 0)
    operator delete(v11[0]);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table((uint64_t)&_ZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavE9layer_map, (uint64_t *)v9);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&v6);
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)v9);
}

void sub_1845F1DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  __cxa_guard_abort(&_ZGVZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavE10timing_map);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  _QWORD *v18;
  std::string *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2))
            return;
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11)
              v17 %= v11;
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  v18 = operator new(0x30uLL);
  *v18 = 0;
  v18[1] = v10;
  v19 = (std::string *)(v18 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v18[4] = *(_QWORD *)(a3 + 16);
  }
  v18[5] = *(_QWORD *)(a3 + 24);
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v27)
  {
    *v18 = *v27;
LABEL_47:
    *v27 = v18;
    goto LABEL_48;
  }
  *v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v26 + 8 * v14) = a1 + 16;
  if (*v18)
  {
    v28 = *(_QWORD *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_47;
  }
LABEL_48:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1845F2958(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t snake_case_to_camel_case(const char *a1, int a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t result;

  v6 = 0;
  LODWORD(v7) = 0;
  do
  {
    v8 = v6;
    v9 = v7;
    v7 = (int)v7;
    do
    {
      v10 = v7;
      result = a1[v7++];
    }
    while ((_DWORD)result == 95);
    if (v9 != v10)
      result = __toupper(result);
    v6 = v8 + 1;
    a3[v8] = result;
    LODWORD(v7) = v10 + 1;
  }
  while (v10 + 1 < a2);
  a3[v6] = 0;
  return result;
}

_QWORD *std::string::basic_string[abi:nn180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;

  v6 = *(char *)(a3 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a3;
  else
    v7 = *(uint64_t **)a3;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a3 + 23);
  else
    v8 = *(_QWORD *)(a3 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  if (!a2)
    return 0;
  v10 = v9;
  v11 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v11.i16[0] = vaddlv_u8(v11);
  v12 = v11.u32[0];
  if (v11.u32[0] > 1uLL)
  {
    v13 = v9;
    if (v9 >= a2)
      v13 = v9 % a2;
  }
  else
  {
    v13 = (a2 - 1) & v9;
  }
  v14 = *(unsigned __int8 ***)(a1 + 8 * v13);
  if (!v14)
    return 0;
  for (i = *v14; i; i = *(unsigned __int8 **)i)
  {
    v16 = *((_QWORD *)i + 1);
    if (v16 == v10)
    {
      if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a3))
        return i;
    }
    else
    {
      if (v12 > 1)
      {
        if (v16 >= a2)
          v16 %= a2;
      }
      else
      {
        v16 &= a2 - 1;
      }
      if (v16 != v13)
        return 0;
    }
  }
  return i;
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  void *i;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = *(void **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11)
              v17 %= v11;
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  v18 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_QWORD *)i + 4) = v18;
  *((_QWORD *)i + 5) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v26)
  {
    *(_QWORD *)i = *v26;
LABEL_44:
    *v26 = i;
    goto LABEL_45;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v25 + 8 * v14) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v27 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11)
        v27 %= v11;
    }
    else
    {
      v27 &= v11 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1845F2DF0(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 25) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 26) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 30) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 29) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 31) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  int64x2_t v7;
  double v8;
  uint64_t result;
  uint64_t *v10;
  int64x2_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 128);
  if (v6)
  {
    v7 = *(int64x2_t *)(v6 + 168);
  }
  else
  {
    v8 = 0.0;
    if ((*(_BYTE *)(a2 + 45) & 0x40) == 0)
      v8 = 0.5;
    v7 = vdupq_lane_s64(*(uint64_t *)&v8, 0);
  }
  v11 = v7;
  result = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v11, "{CGPoint=dd}");
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v10 = a4;
    else
      v10 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  double v7;
  uint64_t result;
  uint64_t *v9;

  v6 = *(_QWORD *)(a2 + 128);
  if (v6)
    v7 = *(double *)(v6 + 184);
  else
    v7 = 0.0;
  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v7);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v9 = a4;
    else
      v9 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  __int128 v7;
  uint64_t result;
  uint64_t *v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 128);
  if (v6)
    v7 = *(_OWORD *)(v6 + 152);
  else
    v7 = 0uLL;
  v10 = v7;
  result = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v10, "{CGSize=dd}");
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v9 = a4;
    else
      v9 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9));
  }
  return result;
}

void *_ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  void *result;
  uint64_t *v9;
  uint64_t v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a2 + 128);
  if (v7)
    v7 = *(_QWORD *)(v7 + 104);
  v10[0] = v7;
  result = id_from_value<void,CA::Render::TypedArray<CA::Render::Filter> *>(a5, v10);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v9 = a4;
    else
      v9 = (uint64_t *)*a4;
    return (void *)objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE8_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  double v7;
  uint64_t result;
  uint64_t *v9;

  v6 = *(_QWORD *)(a2 + 128);
  if (v6)
    v7 = *(float *)(v6 + 232);
  else
    v7 = 0.0;
  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v7);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v9 = a4;
    else
      v9 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE9_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 37) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE10_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  double v7;
  uint64_t result;
  uint64_t *v9;

  v6 = *(_QWORD *)(a2 + 128);
  if (v6)
    v7 = *(float *)(v6 + 236);
  else
    v7 = 0.0;
  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v7);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v9 = a4;
    else
      v9 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE11_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v6;
  uint64_t result;
  uint64_t *v8;
  _OWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v6 = *(_OWORD *)(a2 + 80);
  v9[0] = *(_OWORD *)(a2 + 64);
  v9[1] = v6;
  result = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v9, "{CGRect={CGPoint=dd}{CGSize=dd}}");
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v8 = a4;
    else
      v8 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8));
  }
  return result;
}

CAFilter *_ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE12_8__invokeES8_SA_SA_SJ_SM_(CAFilter *result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  CAFilter *v8;
  uint64_t *v9;

  v5 = *(_QWORD *)(a2 + 128);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 88);
    if (v6)
    {
      v8 = result;
      result = filter_from_render_filter(a5, v6);
      if (result)
      {
        if (*((char *)a4 + 23) >= 0)
          v9 = a4;
        else
          v9 = (uint64_t *)*a4;
        return (CAFilter *)-[CAFilter setValue:forKey:](v8, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9));
      }
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE13_8__invokeES8_SA_SA_SJ_SM_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  void *v7;
  uint64_t *v8;

  v5 = *(_QWORD *)(a2 + 96);
  if (v5)
  {
    v7 = (void *)result;
    result = ns_object_from_render_object(a5, v5, 0);
    if (result)
    {
      if (*((char *)a4 + 23) >= 0)
        v8 = a4;
      else
        v8 = (uint64_t *)*a4;
      return objc_msgSend(v7, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8));
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE14_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 16) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE15_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t *v9;

  v6 = *(_QWORD *)(a2 + 128);
  if (v6)
    v7 = *(_QWORD *)(v6 + 48);
  else
    v7 = 0;
  result = id_from_value<CGRect,CA::Render::Vector *>(v7);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v9 = a4;
    else
      v9 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE16_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 43) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE17_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 14) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

void *_ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE18_8__invokeES8_SA_SA_SJ_SM_(void *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t *v5;

  v4 = (unsigned __int16)*(_DWORD *)(a2 + 36) >> 12;
  if (v4 <= 0xC)
  {
    if (*((char *)a4 + 23) >= 0)
      v5 = a4;
    else
      v5 = (uint64_t *)*a4;
    return (void *)objc_msgSend(result, "setValue:forKey:", *(&off_1E15ABC98 + v4), objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5));
  }
  return result;
}

CGColor *_ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE19_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, CGColorSpace **a5)
{
  uint64_t v7;
  CGColor *result;
  uint64_t *v14;
  float v15[6];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a2 + 128);
  if (v7)
    _Q0 = *(_OWORD *)(v7 + 264);
  else
    __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)v15 = _Q0;
  result = cg_color_from_values<CA::Vec4<float>>(v15, *a5);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v14 = a4;
    else
      v14 = (uint64_t *)*a4;
    return (CGColor *)objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v14));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE20_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 17) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE21_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t *v9;

  v6 = *(_QWORD *)(a2 + 128);
  if (v6)
    v7 = *(_QWORD *)(v6 + 40);
  else
    v7 = 0;
  result = id_from_value<CGRect,CA::Render::Vector *>(v7);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v9 = a4;
    else
      v9 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE22_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, float a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  float v8;
  uint64_t result;
  uint64_t *v10;

  v7 = *(_QWORD *)(a2 + 128);
  if (v7)
  {
    v8 = *(float *)(v7 + 280);
  }
  else
  {
    LOBYTE(a3) = *(_BYTE *)(a2 + 34);
    v8 = (float)LODWORD(a3);
  }
  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v8);
  if (result)
  {
    if (*((char *)a5 + 23) >= 0)
      v10 = a5;
    else
      v10 = (uint64_t *)*a5;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10));
  }
  return result;
}

void *_ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE23_8__invokeES8_SA_SA_SJ_SM_(void *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  __CFString **v5;
  uint64_t *v6;

  v4 = *(_QWORD *)(a2 + 128);
  v5 = kCALayerContentsSwizzleRGBA;
  if (v4 && (*(_BYTE *)(v4 + 320) & 1) != 0)
    v5 = &kCALayerContentsSwizzleAAAA;
  if (*v5)
  {
    if (*((char *)a4 + 23) >= 0)
      v6 = a4;
    else
      v6 = (uint64_t *)*a4;
    return (void *)objc_msgSend(result, "setValue:forKey:", *v5, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE24_8__invokeES8_SA_SA_SJ_SM_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v7;
  __int128 v8;
  uint64_t *v9;
  _OWORD v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 128);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 32);
    if (v5)
    {
      if (*(_DWORD *)(v5 + 16) <= 4u)
        __assert_rtn("id_from_value", "CAReverseSerialization.mm", 328, "count >= 5");
      v7 = (void *)result;
      v8 = *(_OWORD *)(v5 + 40);
      v10[0] = *(_OWORD *)(v5 + 24);
      v10[1] = v8;
      v10[2] = *(_OWORD *)(v5 + 56);
      result = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v10, "{CGAffineTransform=dddddd}");
      if (result)
      {
        if (*((char *)a4 + 23) >= 0)
          v9 = a4;
        else
          v9 = (uint64_t *)*a4;
        return objc_msgSend(v7, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9));
      }
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE25_8__invokeES8_SA_SA_SJ_SM_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v8;
  uint64_t *v9;

  v5 = *(_QWORD *)(a2 + 128);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 56);
    if (v6)
    {
      v8 = (void *)result;
      result = ns_object_from_render_object(a5, v6, 0);
      if (result)
      {
        if (*((char *)a4 + 23) >= 0)
          v9 = a4;
        else
          v9 = (uint64_t *)*a4;
        return objc_msgSend(v8, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9));
      }
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE26_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t *v9;

  v6 = *(_QWORD *)(a2 + 128);
  if (v6)
    v7 = *(_QWORD *)(v6 + 64);
  else
    v7 = 0;
  result = id_from_value<CGRect,CA::Render::Vector *>(v7);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v9 = a4;
    else
      v9 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE27_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 41) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE28_8__invokeES8_SA_SA_SJ_SM_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v7;
  __int128 v8;
  __int128 v9;
  uint64_t *v10;
  _OWORD v11[4];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 128);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 72);
    if (v5)
    {
      if (*(_DWORD *)(v5 + 16) <= 7u)
        __assert_rtn("nsobject_from_values", "CAReverseSerialization.mm", 267, "count >= 8");
      v7 = (void *)result;
      v8 = *(_OWORD *)(v5 + 40);
      v11[0] = *(_OWORD *)(v5 + 24);
      v11[1] = v8;
      v9 = *(_OWORD *)(v5 + 72);
      v11[2] = *(_OWORD *)(v5 + 56);
      v11[3] = v9;
      result = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCACornerRadii:", v11);
      if (result)
      {
        if (*((char *)a4 + 23) >= 0)
          v10 = a4;
        else
          v10 = (uint64_t *)*a4;
        return objc_msgSend(v7, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10));
      }
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE29_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  float v7;
  uint64_t result;
  uint64_t *v9;

  v6 = *(_QWORD *)(a2 + 128);
  v7 = 0.0;
  if (v6)
    v7 = *(float *)(v6 + 228);
  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v7);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v9 = a4;
    else
      v9 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE30_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 24) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE31_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", ((unint64_t)*(unsigned int *)(a2 + 36) >> 20) & 0x7FF);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE32_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", ((unint64_t)*(unsigned int *)(a2 + 36) >> 8) & 0xF);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

void *_ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE33_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  void *result;
  uint64_t *v9;
  uint64_t v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a2 + 128);
  if (v7)
    v7 = *(_QWORD *)(v7 + 96);
  v10[0] = v7;
  result = id_from_value<void,CA::Render::TypedArray<CA::Render::Filter> *>(a5, v10);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v9 = a4;
    else
      v9 = (uint64_t *)*a4;
    return (void *)objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE34_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 13) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE35_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 39) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE36_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", HIDWORD(*(_QWORD *)(a2 + 40)) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE37_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 44) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE38_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 7) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE39_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 33) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE40_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 40) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE41_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = id_from_value<void,CA::Render::ImageFilter>(*(_DWORD *)(a2 + 36) >> 4);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE42_8__invokeES8_SA_SA_SJ_SM_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  void *v6;
  uint64_t *v7;

  if (*(_QWORD *)(a2 + 112))
  {
    v6 = (void *)result;
    result = calayer_from_render_layer(a5);
    if (result)
    {
      if (*((char *)a4 + 23) >= 0)
        v7 = a4;
      else
        v7 = (uint64_t *)*a4;
      return objc_msgSend(v6, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE43_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_WORD *)(a2 + 38) & 0xF);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE44_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 6) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

void _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE45_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  size_t v9;
  double *v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double *v16;
  float *v17;
  double v18;
  float64x2_t v19;
  unint64_t v20;
  size_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t i;
  char *v31;
  int v32;
  const __CFString *v33;
  CAMeshTransform *v34;
  uint64_t *v35;

  v4 = *(_QWORD *)(a2 + 128);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 112);
    if (v5)
    {
      v8 = *(_QWORD *)(v5 + 32) - *(_QWORD *)(v5 + 24);
      if (v8)
      {
        if (v8 < 0)
          abort();
        v9 = 40 * (v8 >> 5);
        v10 = (double *)operator new(v9);
        v11 = 40 * ((v9 - 40) / 0x28) + 40;
        bzero(v10, v11);
        v12 = (char *)v10 + v11;
        v13 = *(_QWORD *)(v5 + 24);
        v14 = *(_QWORD *)(v5 + 32) - v13;
        if (v14)
        {
          v15 = v14 >> 5;
          if (v15 <= 1)
            v15 = 1;
          v16 = v10 + 4;
          v17 = (float *)(v13 + 24);
          do
          {
            v18 = *v17;
            v19 = vcvtq_f64_f32(*(float32x2_t *)(v17 - 2));
            *((float64x2_t *)v16 - 2) = vcvtq_f64_f32(*(float32x2_t *)(v17 - 6));
            *((float64x2_t *)v16 - 1) = v19;
            *v16 = v18;
            v16 += 5;
            v17 += 8;
            --v15;
          }
          while (v15);
        }
      }
      else
      {
        v12 = 0;
        v10 = 0;
      }
      v20 = *(_QWORD *)(v5 + 56) - *(_QWORD *)(v5 + 48);
      if (v20)
      {
        if (v20 >= 0x7FFFFFFFFFFFFFF1)
          abort();
        v21 = 2 * v20;
        v22 = (char *)operator new(2 * v20);
        bzero(v22, v21);
        v20 = (unint64_t)&v22[v21];
        v23 = *(_QWORD *)(v5 + 48);
        v24 = *(_QWORD *)(v5 + 56);
        v25 = v24 - v23;
        if (v24 != v23)
        {
          v26 = 0;
          v27 = v25 >> 4;
          if (v27 <= 1)
            v27 = 1;
          v28 = *(_QWORD *)(v5 + 72) + 4;
          v29 = v22;
          do
          {
            for (i = 0; i != 16; i += 4)
            {
              v31 = &v29[i];
              *(_DWORD *)v31 = *(_DWORD *)(v23 + i);
              *((_DWORD *)v31 + 4) = *(_DWORD *)(v28 + 4 * i);
            }
            ++v26;
            v29 += 32;
            v28 += 64;
            v23 += 16;
          }
          while (v26 != v27);
        }
      }
      else
      {
        v22 = 0;
      }
      v32 = *(_DWORD *)(v5 + 96) - 1;
      if (v32 >= 6)
        v33 = CFSTR("none");
      else
        v33 = *(&off_1E15ABD00 + v32);
      v34 = +[CAMeshTransform meshTransformWithVertexCount:vertices:faceCount:faces:depthNormalization:](CAMeshTransform, "meshTransformWithVertexCount:vertices:faceCount:faces:depthNormalization:", 0xCCCCCCCCCCCCCCCDLL * ((v12 - (char *)v10) >> 3), v10, (uint64_t)(v20 - (_QWORD)v22) >> 5, v22, v33);
      if (v22)
        operator delete(v22);
      if (v10)
        operator delete(v10);
      if (v34)
      {
        if (*((char *)a4 + 23) >= 0)
          v35 = a4;
        else
          v35 = (uint64_t *)*a4;
        objc_msgSend(a1, "setValue:forKey:", v34, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v35));
      }
    }
  }
}

void sub_1845F4A04(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  if (v2)
    operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE46_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = id_from_value<void,CA::Render::ImageFilter>(*(_DWORD *)(a2 + 36) & 0xF);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE47_8__invokeES8_SA_SA_SJ_SM_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  void *v6;
  uint64_t *v7;

  v4 = *(_QWORD *)(a2 + 120);
  if (v4)
  {
    v6 = (void *)result;
    result = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v4 + 28);
    if (result)
    {
      if (*((char *)a4 + 23) >= 0)
        v7 = a4;
      else
        v7 = (uint64_t *)*a4;
      return objc_msgSend(v6, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE48_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, float a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t *v8;

  LOBYTE(a3) = *(_BYTE *)(a2 + 32);
  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (float)((float)LODWORD(a3) * 0.0039216));
  if (result)
  {
    if (*((char *)a5 + 23) >= 0)
      v8 = a5;
    else
      v8 = (uint64_t *)*a5;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE49_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = *(_OWORD *)(a2 + 48);
  result = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v8, "{CGPoint=dd}");
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE50_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 23) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE51_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 35) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE52_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 21) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE53_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 22) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE54_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, float a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  float v8;
  uint64_t result;
  uint64_t *v10;

  v7 = *(_QWORD *)(a2 + 128);
  if (v7)
  {
    v8 = *(float *)(v7 + 284);
  }
  else
  {
    LOBYTE(a3) = *(_BYTE *)(a2 + 35);
    v8 = (float)LODWORD(a3);
  }
  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v8);
  if (result)
  {
    if (*((char *)a5 + 23) >= 0)
      v10 = a5;
    else
      v10 = (uint64_t *)*a5;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10));
  }
  return result;
}

CGColor *_ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE55_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, CGColorSpace **a5)
{
  uint64_t v7;
  __int128 v8;
  CGColor *result;
  uint64_t *v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a2 + 128);
  if (v7)
    v8 = *(_OWORD *)(v7 + 300);
  else
    v8 = xmmword_18474DFE0;
  v11 = v8;
  result = cg_color_from_values<CA::Vec4<float>>((float *)&v11, *a5);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v10 = a4;
    else
      v10 = (uint64_t *)*a4;
    return (CGColor *)objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE56_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  double v7;
  uint64_t result;
  uint64_t *v9;

  v6 = *(_QWORD *)(a2 + 128);
  if (v6)
    v7 = *(float *)(v6 + 316);
  else
    v7 = 0.0;
  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v7);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v9 = a4;
    else
      v9 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE57_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 36) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE58_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  double v7;
  uint64_t result;
  uint64_t *v9;

  v6 = *(_QWORD *)(a2 + 128);
  if (v6)
    v7 = *(float *)(v6 + 296);
  else
    v7 = 0.0;
  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v7);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v9 = a4;
    else
      v9 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9));
  }
  return result;
}

void *_ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE59_8__invokeES8_SA_SA_SJ_SM_(void *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t *v5;

  v4 = (uint64_t)*off_1E159D3B8[(*(_QWORD *)(a2 + 40) >> 2) & 3];
  if (v4)
  {
    if (*((char *)a4 + 23) >= 0)
      v5 = a4;
    else
      v5 = (uint64_t *)*a4;
    return (void *)objc_msgSend(result, "setValue:forKey:", v4, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5));
  }
  return result;
}

CGColor *_ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE60_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, CGColorSpace **a5)
{
  uint64_t v7;
  __int128 v8;
  CGColor *result;
  uint64_t *v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a2 + 128);
  if (v7)
    v8 = *(_OWORD *)(v7 + 200);
  else
    v8 = xmmword_18474DFE0;
  v11 = v8;
  result = cg_color_from_values<CA::Vec4<float>>((float *)&v11, *a5);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v10 = a4;
    else
      v10 = (uint64_t *)*a4;
    return (CGColor *)objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE61_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  float32x2_t *v6;
  float64x2_t v7;
  uint64_t result;
  uint64_t *v9;
  float64x2_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = *(float32x2_t **)(a2 + 128);
  if (v6)
    v7 = vcvtq_f64_f32(v6[27]);
  else
    v7 = (float64x2_t)xmmword_18474E0D0;
  v10 = v7;
  result = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v10, "{CGSize=dd}");
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v9 = a4;
    else
      v9 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE62_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, float a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t *v8;

  LOBYTE(a3) = *(_BYTE *)(a2 + 33);
  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (float)((float)LODWORD(a3) * 0.0039216));
  if (result)
  {
    if (*((char *)a5 + 23) >= 0)
      v8 = a5;
    else
      v8 = (uint64_t *)*a5;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8));
  }
  return result;
}

CGPath *_ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE63_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  CGPath *result;
  uint64_t *v8;
  uint64_t v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 128);
  if (v6)
    v6 = *(_QWORD *)(v6 + 120);
  v9[0] = v6;
  result = id_from_value<void,CA::Render::Path *>(v9);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v8 = a4;
    else
      v8 = (uint64_t *)*a4;
    return (CGPath *)objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE64_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 34) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE65_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  double v7;
  uint64_t result;
  uint64_t *v9;

  v6 = *(_QWORD *)(a2 + 128);
  if (v6)
    v7 = *(float *)(v6 + 224);
  else
    v7 = 3.0;
  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v7);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v9 = a4;
    else
      v9 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE66_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 18) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE67_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 19) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE68_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 20) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE69_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 38) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE70_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 11) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE71_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 12) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE72_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t *v9;

  v6 = *(_QWORD *)(a2 + 128);
  if (v6)
    v7 = *(_QWORD *)(v6 + 24);
  else
    v7 = 0;
  result = id_from_value<CATransform3D,CA::Render::Vector *>(v7);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v9 = a4;
    else
      v9 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE73_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t *v9;

  v6 = *(_QWORD *)(a2 + 128);
  if (v6)
    v7 = *(_QWORD *)(v6 + 16);
  else
    v7 = 0;
  result = id_from_value<CATransform3D,CA::Render::Vector *>(v7);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v9 = a4;
    else
      v9 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE74_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  double v7;
  uint64_t result;
  uint64_t *v9;

  v6 = *(_QWORD *)(a2 + 128);
  if (v6)
    v7 = *(double *)(v6 + 192);
  else
    v7 = 0.0;
  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v7);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v9 = a4;
    else
      v9 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE75_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 27) & 1);
  if (result)
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "wantsExtendedDynamicRangeContent"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE76_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 128);
  if (v3)
    v4 = *(float *)(v3 + 292);
  else
    v4 = 1.0;
  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v4);
  if (result)
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "gain"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE77_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 10) & 1);
  if (result)
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "doubleSided"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE78_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 9) & 1);
  if (result)
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "geometryFlipped"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE79_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 8) & 1);
  if (result)
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "hidden"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE80_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 128);
  if (v3)
    v4 = *(float *)(v3 + 288);
  else
    v4 = 0.0;
  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v4);
  if (result)
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "minificationFilterBias"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE81_8__invokeES8_SA_SA_SJ_SM_(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  unint64_t v6;
  NSObject *v7;
  uint8_t v8[8];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a2 + 128);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 136);
    if (v3)
    {
      v4 = (void *)result;
      result = objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *(unsigned int *)(v3 + 16));
      v5 = (void *)result;
      if (*(_DWORD *)(v3 + 16))
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)(v3 + 24 + 8 * v6))
          {
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v7 = x_log_category_utilities;
              if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)v8 = 0;
                _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_ERROR, "Presentation Modifiers reverse serialization not implemented !", v8, 2u);
              }
            }
          }
          result = objc_msgSend(v5, "addObject:", 0);
          ++v6;
        }
        while (v6 < *(unsigned int *)(v3 + 16));
      }
      if (v5)
        return objc_msgSend(v4, "setValue:forKey:", v5, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "presentationModifiers"));
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE82_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", (*(_QWORD *)(a2 + 40) >> 28) & 1);
  if (result)
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "toneMapToStandardDynamicRange"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE83_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 128);
  if (v3)
    v4 = *(float *)(v3 + 260);
  else
    v4 = 0.0;
  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v4);
  if (result)
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "contentsMaximumDesiredEDR"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE84_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 128);
  if (v3)
    v4 = *(float *)(v3 + 256);
  else
    v4 = 1.0;
  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v4);
  if (result)
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "contentsEDRStrength"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE85_8__invokeES8_SA_SA_SJ_SM_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v6 = (void *)result;
  v11[1] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a3 + 104);
  if ((*(_BYTE *)(a3 + 13) & 0x20) != 0)
  {
    if (v7)
    {
      v11[0] = calayer_from_render_layer(a5);
      return objc_msgSend(v6, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1), CFSTR("sublayers"));
    }
  }
  else if (v7)
  {
    v8 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *(unsigned int *)(v7 + 16));
    if (*(_DWORD *)(v7 + 16))
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)(v7 + 24 + 8 * v9))
          v10 = calayer_from_render_layer(a5);
        else
          v10 = 0;
        objc_msgSend(v8, "addObject:", v10);
        ++v9;
      }
      while (v9 < *(unsigned int *)(v7 + 16));
    }
    return objc_msgSend(v6, "setValue:forKey:", v8, CFSTR("sublayers"));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE86_8__invokeES8_SA_SA_SJ_SM_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v8;
  uint64_t *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 + 136);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 + 16);
    if ((_DWORD)v6)
    {
      v8 = (void *)result;
      v9 = (uint64_t *)(v5 + 24);
      do
      {
        v10 = *v9++;
        result = objc_msgSend(v8, "addAnimation:forKey:", animation_from_render_animation(a5, v10), *(_QWORD *)(v10 + 56));
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

CGColor *_ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE87_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, CGColorSpace **a5)
{
  uint64_t v6;
  uint64_t v7;
  CGColor *result;
  float v9[6];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a3 + 128);
  if (v6)
    v7 = *(_QWORD *)(v6 + 80);
  else
    v7 = 0;
  *(_OWORD *)v9 = *(_OWORD *)(a3 + 16);
  result = cg_color_from_pattern_or_color(a5, v7, v9);
  if (result)
    return (CGColor *)objc_msgSend(a1, "setValue:forKey:", result, CFSTR("backgroundColor"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE88_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, CGColorSpace **a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a3 + 128);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 128);
    v7 = *(_OWORD *)(v5 + 240);
  }
  else
  {
    v6 = 0;
    v7 = xmmword_18474DFE0;
  }
  v9 = v7;
  return objc_msgSend(a1, "setValue:forKey:", cg_color_from_pattern_or_color(a5, v6, (float *)&v9), CFSTR("borderColor"));
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE89_8__invokeES8_SA_SA_SJ_SM_(void *a1, const char *a2, uint64_t a3)
{
  const __CFString *v3;

  if ((*(_QWORD *)(a3 + 40) & 0x8000) != 0)
    v3 = CFSTR("repeat");
  else
    v3 = CFSTR("stretch");
  return objc_msgSend(a1, "setContentsScaling:", v3);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE90_8__invokeES8_SA_SA_SJ_SM_(void *a1, const char *a2, uint64_t a3)
{
  unsigned int v3;
  const CALayerCornerCurve *v4;

  v3 = (*(_DWORD *)(a3 + 40) & 3) - 1;
  if (v3 > 2)
    v4 = &kCACornerCurveCircular;
  else
    v4 = (const CALayerCornerCurve *)off_1E159D3D8[v3];
  return objc_msgSend(a1, "setCornerCurve:", *v4);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE91_8__invokeES8_SA_SA_SJ_SM_(void *a1, const char *a2, uint64_t a3)
{
  unsigned int v3;
  const __CFString *v4;
  const __CFString *v5;

  v3 = *(_DWORD *)(a3 + 40);
  v4 = CFSTR("ifSupported");
  if (((v3 >> 4) & 3) == 1)
    v4 = CFSTR("never");
  if (((v3 >> 4) & 3) != 0)
    v5 = v4;
  else
    v5 = CFSTR("automatic");
  return objc_msgSend(a1, "setToneMapMode:", v5);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE92_8__invokeES8_SA_SA_SJ_SM_(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend(a1, "setDefinesDisplayRegionOfInterest:", (*(_QWORD *)(a3 + 40) >> 45) & 1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

CGColor *cg_color_from_pattern_or_color(CGColorSpace **a1, uint64_t a2, float *a3)
{
  uint64_t v4;
  _OWORD *v5;
  int v6;
  CGImage *v7;
  unint64_t v8;
  unint64_t v9;
  CGImage *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  __int128 v15;
  void *v16;
  __int128 v18;
  uint64_t v19;
  id v20;
  CGAffineTransform v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return cg_color_from_values<CA::Vec4<float>>(a3, *a1);
  v4 = *(_QWORD *)(a2 + 128);
  if (!v4)
    return 0;
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a2 + 12);
  v7 = (CGImage *)ns_object_from_render_object(a1, *(_QWORD *)(a2 + 128), 0);
  v10 = v7;
  v11 = *(double *)(a2 + 64);
  v12 = *(double *)(a2 + 72);
  v13 = *(double *)(a2 + 80);
  if (v11 == 0.0
    && v12 == 0.0
    && (LODWORD(v8) = *(_DWORD *)(v4 + 16), v13 == (double)v8)
    && (v14 = *(double *)(a2 + 88), LODWORD(v9) = *(_DWORD *)(v4 + 20), v14 == (double)v9)
    && *(double *)(a2 + 96) == v13
    && *(double *)(a2 + 104) == v14)
  {
    v15 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v21.a = *v5;
    *(_OWORD *)&v21.c = v15;
    *(_OWORD *)&v21.tx = *(_OWORD *)(a2 + 48);
    v16 = (void *)CGPatternCreateWithImage2();
  }
  else
  {
    v18 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v21.a = *v5;
    *(_OWORD *)&v21.c = v18;
    *(_OWORD *)&v21.tx = *(_OWORD *)(a2 + 48);
    v19 = *(_QWORD *)(a2 + 88);
    v16 = CGPatternCreate(v7, *(CGRect *)&v11, &v21, *(CGFloat *)(a2 + 96), *(CGFloat *)(a2 + 104), kCGPatternTilingNoDistortion, (v6 & 0x200) == 0, &id_from_value<CGColor *,CA::Render::Pattern const*&>(ReverseSerializationState const&,CA::Render::Pattern const*&)::pattern_cbs);
    if (v16)
      CGImageRetain(v10);
  }
  v20 = v16;
  return CA_CGPatternColorCreate((CGPattern *)v16);
}

CGColor *cg_color_from_values<CA::Vec4<float>>(float *a1, CGColorSpace *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  CGColor *v7;
  CGColorSpace *v8;
  CGColorSpace *v9;
  uint64_t v10;
  double v11;
  CGColorSpace *Extended;
  CGColorSpace *v14;
  CGColor *v15;
  float64x2_t v17;
  double v18[3];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = a1[1];
  v17.f64[0] = *a1;
  v17.f64[1] = v4;
  v5 = a1[2];
  v6 = a1[3];
  v18[0] = v5;
  v18[1] = v6;
  if (v6 == 0.0 && v5 == 0.0 && v4 == 0.0 && v3 == 0.0)
    return 0;
  v8 = (CGColorSpace *)CAGetColorSpace(0x1Cu);
  v9 = v8;
  v10 = 0;
  if (a2)
    v8 = a2;
  do
  {
    v11 = v17.f64[v10];
    if (v11 < 0.0 || v11 > 1.0)
    {
      Extended = CAColorSpaceCreateExtended(v8);
      goto LABEL_15;
    }
    ++v10;
  }
  while (v10 != 4);
  Extended = CGColorSpaceRetain(v8);
LABEL_15:
  v14 = Extended;
  v15 = CGColorCreate(Extended, v17.f64);
  CA_CGColorGetRGBComponents(v15, v9, v17.f64);
  CGColorRelease(v15);
  if (v18[1] <= 0.0)
  {
    v17 = 0u;
    *(_OWORD *)v18 = 0u;
  }
  else
  {
    v17 = vdivq_f64(v17, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v18[1], 0));
    v18[0] = v18[0] / v18[1];
  }
  v7 = CGColorCreate(v14, v17.f64);
  if (v14)
    CFRelease(v14);
  return v7;
}

void sub_1845F66B8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

CASpringAnimation *ns_object_from_render_object(CGColorSpace **a1, uint64_t a2, const char *a3)
{
  unsigned int v5;
  const CGPath *v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CGColorSpace *v11;
  const UInt8 *v12;
  CFIndex v13;
  const __CFData *v14;
  CGDataProvider *v15;
  uint64_t v16;
  CGImageRef v17;
  const CGPath *Mutable;
  uint64_t v19;
  CGImage *v20;
  CGImageRef v21;
  uint64_t v22;
  const char *v23;
  float64x2_t *v24;
  size_t v25;
  size_t v26;
  CGBitmapInfo v27;
  CGImageRef v28;
  unint64_t v30;
  uint64_t v31;
  float64x2_t v32;
  float64x2_t v33;
  _OWORD v34[5];
  CGFloat decode[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  CGRect v41;

  v40 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v5 = *(unsigned __int8 *)(a2 + 12);
  if (v5 > 0x10)
  {
    switch(*(_BYTE *)(a2 + 12))
    {
      case 0x11:
        return (CASpringAnimation *)filter_from_render_filter((uint64_t)a1, a2);
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x16:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1C:
      case 0x1E:
      case 0x21:
      case 0x22:
      case 0x23:
        goto LABEL_64;
      case 0x15:
      case 0x1B:
      case 0x1F:
      case 0x20:
        return animation_from_render_animation((uint64_t)a1, a2);
      case 0x17:
        v11 = *(CGColorSpace **)(a2 + 48);
        if (!v11)
          v11 = (CGColorSpace *)CAGetColorSpace(0x1Du);
        v12 = *(const UInt8 **)(a2 + 96);
        v13 = CA::Render::Image::data_size((CA::Render::Image *)a2);
        v14 = CFDataCreate(0, v12, v13);
        v15 = CGDataProviderCreateWithCFData(v14);
        v16 = *(unsigned __int8 *)(a2 + 152);
        if ((_DWORD)v16 == 9)
        {
          *(_OWORD *)decode = xmmword_18474DF40;
          v17 = CGImageMaskCreate(*(unsigned int *)(a2 + 16), *(unsigned int *)(a2 + 20), 8uLL, 8uLL, *(_QWORD *)(a2 + 160), v15, decode, 1);
        }
        else
        {
          if (v16 > 0x23)
          {
            v26 = 0;
            v25 = 0;
            v27 = 0;
          }
          else
          {
            v25 = dword_184750518[v16];
            v26 = dword_1847503F0[v16];
            v27 = dword_184750360[v16];
          }
          v17 = CGImageCreate(*(unsigned int *)(a2 + 16), *(unsigned int *)(a2 + 20), v25, v26, *(_QWORD *)(a2 + 160), v11, v27, v15, 0, 1, kCGRenderingIntentDefault);
        }
        v28 = v17;
        CFRelease(v14);
        CGDataProviderRelease(v15);
        return (CASpringAnimation *)v28;
      case 0x1D:
        return (CASpringAnimation *)calayer_from_render_layer((uint64_t)a1, a2);
      case 0x24:
        Mutable = CGPathCreateMutable();
        *(_QWORD *)&decode[0] = Mutable;
        CA::Render::path_iterate<ReverseSerializationPathIterator>(a2, (CGMutablePathRef *)decode);
        CGPathRetain(Mutable);
        v6 = Mutable;
        CGPathRelease(Mutable);
        return (CASpringAnimation *)v6;
      default:
        switch(*(_BYTE *)(a2 + 12))
        {
          case '0':
          case '7':
            return animation_from_render_animation((uint64_t)a1, a2);
          case '1':
            return (CASpringAnimation *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2 + 28);
          case '2':
            v19 = *(_QWORD *)(a2 + 16);
            if (v19 && (v20 = (CGImage *)ns_object_from_render_object(a1, v19, 0)) != 0)
            {
              v41.origin.x = (double)*(int *)(a2 + 24);
              v41.origin.y = (double)*(int *)(a2 + 28);
              v41.size.width = (double)*(int *)(a2 + 32);
              v41.size.height = (double)*(int *)(a2 + 36);
              v21 = CGImageCreateWithImageInRect(v20, v41);
              if (v21)
                CGImageSetProperty();
            }
            else
            {
              v21 = 0;
            }
            return (CASpringAnimation *)v21;
          case '3':
            CFRetain(*(CFTypeRef *)(a2 + 112));
            return *(CASpringAnimation **)(a2 + 112);
          case '8':
            v22 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v22)
              return 0;
            v23 = a3;
            if (a3)
              goto LABEL_35;
            if (v22 <= 1)
            {
              v24 = (float64x2_t *)(a2 + 24);
            }
            else
            {
              v23 = "NSArray";
LABEL_35:
              v24 = (float64x2_t *)(a2 + 24);
              if (strcasecmp(v23, "real") && strcasecmp(v23, "BOOL"))
              {
                if (!strcasecmp(v23, "NSArray"))
                {
                  v6 = (const CGPath *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v22);
                  if (*(_DWORD *)(a2 + 16))
                  {
                    v30 = 0;
                    do
                      -[CGPath addObject:](v6, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v24->f64[v30++]));
                    while (v30 < *(unsigned int *)(a2 + 16));
                  }
                  return (CASpringAnimation *)v6;
                }
                if (!strcasecmp(v23, "CGColor"))
                {
                  if ((_DWORD)v22 != 4)
                    __assert_rtn("ns_object_from_render_object", "CAReverseSerialization.mm", 749, "v->count () == 4");
                  return (CASpringAnimation *)cg_color_from_values<double const*>((double *)(a2 + 24), *a1);
                }
                else
                {
                  if (!strcasecmp(v23, "CAColorMatrix"))
                  {
                    if ((_DWORD)v22 != 20)
                      __assert_rtn("ns_object_from_render_object", "CAReverseSerialization.mm", 754, "v->count () == 20");
                    v31 = 0;
                    v38 = 0u;
                    v39 = 0u;
                    v36 = 0u;
                    v37 = 0u;
                    *(_OWORD *)decode = 0u;
                    do
                    {
                      v33 = *v24;
                      v32 = v24[1];
                      v24 += 2;
                      *(float32x4_t *)&decode[v31] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v33), v32);
                      v31 += 2;
                    }
                    while (v31 != 10);
                    v34[2] = v37;
                    v34[3] = v38;
                    v34[4] = v39;
                    v34[0] = *(_OWORD *)decode;
                    v34[1] = v36;
                    return (CASpringAnimation *)objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCAColorMatrix:", v34);
                  }
                  if (strcasecmp(v23, "CGRect"))
                    return 0;
                  return (CASpringAnimation *)id_from_value<CGRect,CA::Render::Vector const*&>(a2);
                }
              }
            }
            return (CASpringAnimation *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v24->f64[0]);
          default:
            goto LABEL_64;
        }
    }
  }
  if (v5 == 1)
  {
    v6 = (const CGPath *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *(unsigned int *)(a2 + 16));
    if (*(_DWORD *)(a2 + 16))
    {
      v8 = 0;
      do
      {
        v9 = *(_QWORD *)(a2 + 24 + 8 * v8);
        if (v9)
          v10 = ns_object_from_render_object(a1, v9, 0);
        else
          v10 = 0;
        -[CGPath addObject:](v6, "addObject:", v10);
        ++v8;
      }
      while (v8 < *(unsigned int *)(a2 + 16));
    }
    return (CASpringAnimation *)v6;
  }
  if (v5 != 5)
  {
    if (v5 != 9)
LABEL_64:
      __assert_rtn("ns_object_from_render_object", "CAReverseSerialization.mm", 773, "false");
    return 0;
  }
  return animation_from_render_animation((uint64_t)a1, a2);
}

void sub_1845F6D34(_Unwind_Exception *a1)
{
  const CGPath *v1;

  CGPathRelease(v1);
  _Unwind_Resume(a1);
}

void id_from_value<CGColor *,CA::Render::Pattern const*&>(ReverseSerializationState const&,CA::Render::Pattern const*&)::{lambda(void *,CGContext *)#1}::__invoke(CGImage *a1, CGContext *a2)
{
  CGFloat Width;
  CGRect v5;

  Width = (double)CGImageGetWidth(a1);
  v5.size.height = (double)CGImageGetHeight(a1);
  v5.origin.x = 0.0;
  v5.origin.y = 0.0;
  v5.size.width = Width;
  CGContextDrawImage(a2, v5, a1);
}

CAFilter *filter_from_render_filter(uint64_t a1, uint64_t a2)
{
  CAFilter *v4;
  unsigned __int8 v5;
  uint64_t i;
  void *__p[2];
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = +[CAFilter filterWithType:](CAFilter, "filterWithType:", CAAtomGetString(*(_DWORD *)(a2 + 24)));
  if (v4)
  {
    v5 = atomic_load((unsigned __int8 *)&_ZGVZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map))
    {
      _ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map = 0u;
      *(_OWORD *)&qword_1EDD137A0 = 0u;
      dword_1EDD137B0 = 1065353216;
      __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map);
    }
    if (_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE10once_token != -1)
      dispatch_once(&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE10once_token, &__block_literal_global_43);
    get_setters_for_type<CA::Render::Layer>();
    for (i = qword_1EDD137A0; i; i = *(_QWORD *)i)
    {
      *(_OWORD *)__p = 0u;
      v9 = 0u;
      if (*(char *)(i + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(i + 16), *(_QWORD *)(i + 24));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(i + 16);
        *(_QWORD *)&v9 = *(_QWORD *)(i + 32);
      }
      *((_QWORD *)&v9 + 1) = *(_QWORD *)(i + 40);
      (*((void (**)(CAFilter *, uint64_t, _QWORD, void **, uint64_t))&v9 + 1))(v4, a2, 0, __p, a1);
      if (SBYTE7(v9) < 0)
        operator delete(__p[0]);
    }
  }
  return v4;
}

void sub_1845F6F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

CASpringAnimation *animation_from_render_animation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  CASpringAnimation *v5;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t *j;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  uint64_t *i;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t *k;
  void *__p[2];
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v4 = *(unsigned __int8 *)(a2 + 12);
  if (v4 > 0x37)
  {
LABEL_20:
    if ((_DWORD)v4 != 5)
      __assert_rtn("animation_from_render_animation", "CAReverseSerialization.mm", 1760, "false");
    v5 = objc_alloc_init(CABasicAnimation);
    v12 = atomic_load((unsigned __int8 *)&_ZGVZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavE13animation_map);
    if ((v12 & 1) == 0
      && __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavE13animation_map))
    {
      _ZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE_clEv();
      __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavE13animation_map);
    }
    v13 = atomic_load((unsigned __int8 *)&_ZGVZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavE17property_anim_map);
    if ((v13 & 1) == 0
      && __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavE17property_anim_map))
    {
      _ZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEv();
      __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavE17property_anim_map);
    }
    v14 = atomic_load((unsigned __int8 *)&_ZGVZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavE14basic_anim_map);
    if ((v14 & 1) == 0
      && __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavE14basic_anim_map))
    {
      _ZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEv();
      __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavE14basic_anim_map);
    }
    get_setters_for_type<CA::Render::Layer>();
    for (i = (uint64_t *)xmmword_1EDD13940; i; i = (uint64_t *)*i)
    {
      *(_OWORD *)__p = 0u;
      v21 = 0u;
      if (*((char *)i + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)i[2], i[3]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)i + 1);
        *(_QWORD *)&v21 = i[4];
      }
      *((_QWORD *)&v21 + 1) = i[5];
      (*((void (**)(CASpringAnimation *, uint64_t, _QWORD, void **, uint64_t))&v21 + 1))(v5, a2, 0, __p, a1);
      if (SBYTE7(v21) < 0)
        operator delete(__p[0]);
    }
    return v5;
  }
  if (((1 << v4) & 0x80000180200000) != 0)
    return 0;
  if (v4 != 27)
  {
    if (v4 == 48)
    {
      v5 = objc_alloc_init(CASpringAnimation);
      v7 = atomic_load((unsigned __int8 *)&_ZGVZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE13animation_map);
      if ((v7 & 1) == 0
        && __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE13animation_map))
      {
        _ZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE_clEv();
        __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE13animation_map);
      }
      v8 = atomic_load((unsigned __int8 *)&_ZGVZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE17property_anim_map);
      if ((v8 & 1) == 0
        && __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE17property_anim_map))
      {
        _ZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEv();
        __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE17property_anim_map);
      }
      v9 = atomic_load((unsigned __int8 *)&_ZGVZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE14basic_anim_map);
      if ((v9 & 1) == 0
        && __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE14basic_anim_map))
      {
        _ZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEv();
        __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE14basic_anim_map);
      }
      v10 = atomic_load((unsigned __int8 *)&_ZGVZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE15spring_anim_map);
      if ((v10 & 1) == 0
        && __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE15spring_anim_map))
      {
        _ZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEv();
        __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE15spring_anim_map);
      }
      get_setters_for_type<CA::Render::Layer>();
      for (j = (uint64_t *)xmmword_1EDD13AF0; j; j = (uint64_t *)*j)
      {
        *(_OWORD *)__p = 0u;
        v21 = 0u;
        if (*((char *)j + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)j[2], j[3]);
        }
        else
        {
          *(_OWORD *)__p = *((_OWORD *)j + 1);
          *(_QWORD *)&v21 = j[4];
        }
        *((_QWORD *)&v21 + 1) = j[5];
        (*((void (**)(CASpringAnimation *, uint64_t, _QWORD, void **, uint64_t))&v21 + 1))(v5, a2, 0, __p, a1);
        if (SBYTE7(v21) < 0)
          operator delete(__p[0]);
      }
      return v5;
    }
    goto LABEL_20;
  }
  v5 = objc_alloc_init(CAKeyframeAnimation);
  v16 = atomic_load((unsigned __int8 *)&_ZGVZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE13animation_map);
  if ((v16 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE13animation_map))
  {
    _ZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE_clEv();
    __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE13animation_map);
  }
  v17 = atomic_load((unsigned __int8 *)&_ZGVZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE17property_anim_map);
  if ((v17 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE17property_anim_map))
  {
    _ZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEv();
    __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE17property_anim_map);
  }
  v18 = atomic_load((unsigned __int8 *)&_ZGVZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE17keyframe_anim_map);
  if ((v18 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE17keyframe_anim_map))
  {
    _ZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEv();
    __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE17keyframe_anim_map);
  }
  get_setters_for_type<CA::Render::Layer>();
  for (k = (uint64_t *)xmmword_1EDD13A00; k; k = (uint64_t *)*k)
  {
    *(_OWORD *)__p = 0u;
    v21 = 0u;
    if (*((char *)k + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)k[2], k[3]);
    }
    else
    {
      *(_OWORD *)__p = *((_OWORD *)k + 1);
      *(_QWORD *)&v21 = k[4];
    }
    *((_QWORD *)&v21 + 1) = k[5];
    (*((void (**)(CASpringAnimation *, uint64_t, _QWORD, void **, uint64_t))&v21 + 1))(v5, a2, 0, __p, a1);
    if (SBYTE7(v21) < 0)
      operator delete(__p[0]);
  }
  return v5;
}

void sub_1845F73C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_guard_abort(&_ZGVZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE17keyframe_anim_map);
  _Unwind_Resume(a1);
}

CGColor *cg_color_from_values<double const*>(double *a1, CGColorSpace *a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGColor *v7;
  CGColorSpace *v8;
  CGColorSpace *v9;
  uint64_t v10;
  double v11;
  CGColorSpace *Extended;
  CGColorSpace *v14;
  CGColor *v15;
  float64x2_t v17;
  double v18[3];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = a1[1];
  v17.f64[0] = *a1;
  v17.f64[1] = v4;
  v5 = a1[2];
  v6 = a1[3];
  v18[0] = v5;
  v18[1] = v6;
  if (v6 == 0.0 && v5 == 0.0 && v4 == 0.0 && v3 == 0.0)
    return 0;
  v8 = (CGColorSpace *)CAGetColorSpace(0x1Cu);
  v9 = v8;
  v10 = 0;
  if (a2)
    v8 = a2;
  do
  {
    v11 = v17.f64[v10];
    if (v11 < 0.0 || v11 > 1.0)
    {
      Extended = CAColorSpaceCreateExtended(v8);
      goto LABEL_15;
    }
    ++v10;
  }
  while (v10 != 4);
  Extended = CGColorSpaceRetain(v8);
LABEL_15:
  v14 = Extended;
  v15 = CGColorCreate(Extended, v17.f64);
  CA_CGColorGetRGBComponents(v15, v9, v17.f64);
  CGColorRelease(v15);
  if (v18[1] <= 0.0)
  {
    v17 = 0u;
    *(_OWORD *)v18 = 0u;
  }
  else
  {
    v17 = vdivq_f64(v17, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v18[1], 0));
    v18[0] = v18[0] / v18[1];
  }
  v7 = CGColorCreate(v14, v17.f64);
  if (v14)
    CFRelease(v14);
  return v7;
}

void sub_1845F75E8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t id_from_value<CGRect,CA::Render::Vector const*&>(uint64_t a1)
{
  float64x2_t v1;
  _OWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 16) <= 3u)
    __assert_rtn("id_from_value", "CAReverseSerialization.mm", 316, "count >= 4");
  v1 = vsubq_f64(*(float64x2_t *)(a1 + 40), *(float64x2_t *)(a1 + 24));
  v3[0] = *(_OWORD *)(a1 + 24);
  v3[1] = v1;
  return objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v3, "{CGRect={CGPoint=dd}{CGSize=dd}}");
}

void CA::Render::path_iterate<ReverseSerializationPathIterator>(uint64_t a1, CGMutablePathRef *a2)
{
  uint64_t v2;
  unsigned __int8 *v4;
  CGFloat *v5;
  unsigned __int8 *v6;
  int v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;

  v2 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v2)
  {
    v5 = *(CGFloat **)(a1 + 32);
    v4 = *(unsigned __int8 **)(a1 + 40);
    v6 = &v4[v2];
    do
    {
      v7 = *v4++;
      switch(v7)
      {
        case 0:
          CGPathCloseSubpath(*a2);
          break;
        case 1:
          v8 = *v5;
          v9 = v5[1];
          v5 += 2;
          CGPathMoveToPoint(*a2, 0, v8, v9);
          break;
        case 2:
          v10 = *v5;
          v11 = v5[1];
          v5 += 2;
          CGPathAddLineToPoint(*a2, 0, v10, v11);
          break;
        case 3:
          CGPathAddQuadCurveToPoint(*a2, 0, *v5, v5[1], v5[2], v5[3]);
          v5 += 4;
          break;
        case 4:
          CGPathAddCurveToPoint(*a2, 0, *v5, v5[1], v5[2], v5[3], v5[4], v5[5]);
          v5 += 6;
          break;
        default:
          break;
      }
    }
    while (v4 < v6);
  }
}

uint64_t _ZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE_clEv()
{
  unsigned __int8 v0;
  _QWORD *v1;
  _QWORD *i;
  void *__p[2];
  char v5;
  _OWORD v6[2];
  uint64_t v7;
  void *v8[2];
  __int128 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  memset(v6, 0, sizeof(v6));
  v7 = 1065353216;
  snake_case_to_camel_case("timing_function", 15, (char *)v8);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v8);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v6[0], *((unint64_t *)&v6[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1167, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v8);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v6, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_;
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(v8, "preferredFrameRateRange");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v6[0], *((unint64_t *)&v6[0] + 1), (uint64_t)v8))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1168, "\"Duplicated Entry !!\" && map.map.find (\"preferredFrameRateRange\") == map.map.end ()");
  }
  if (SBYTE7(v9) < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:nn180100]<0>(v8, "preferredFrameRateRange");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v6, (uint64_t)v8, (uint64_t)v8)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_;
  if (SBYTE7(v9) < 0)
    operator delete(v8[0]);
  snake_case_to_camel_case("removed_on_completion", 21, (char *)v8);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v8);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v6[0], *((unint64_t *)&v6[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1171, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v8);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v6, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_;
  if (v5 < 0)
    operator delete(__p[0]);
  v0 = atomic_load((unsigned __int8 *)&_ZGVZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavE10timing_map);
  if ((v0 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavE10timing_map))
  {
    _ZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEv();
    __cxa_guard_release(&_ZGVZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavE10timing_map);
  }
  *(_OWORD *)v8 = 0u;
  v9 = 0u;
  v10 = dword_1EDD13B30;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)v8, qword_1EDD13B18);
  v1 = (_QWORD *)qword_1EDD13B20;
  if (qword_1EDD13B20)
  {
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)> const&>((uint64_t)v8, (uint64_t)(v1 + 2), (uint64_t)(v1 + 2));
      v1 = (_QWORD *)*v1;
    }
    while (v1);
  }
  for (i = (_QWORD *)v9; i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)> const&>((uint64_t)v6, (uint64_t)(i + 2), (uint64_t)(i + 2));
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table((uint64_t)&_ZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE13animation_map, (uint64_t *)v6);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)v8);
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)v6);
}

void sub_1845F7A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  __cxa_guard_abort(&_ZGVZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavE10timing_map);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t _ZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEv()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *i;
  unint64_t v13;
  _QWORD *v14;
  std::string *v15;
  __int128 v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  void *__p[2];
  char v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  void *v33[2];
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v30 = 0u;
  v31 = 0u;
  v32 = 1065353216;
  v0 = qword_1EDD13A60;
  if (qword_1EDD13A60)
  {
    v1 = 0;
    do
    {
      v2 = *(char *)(v0 + 39);
      if (v2 >= 0)
        v3 = (uint64_t *)(v0 + 16);
      else
        v3 = *(uint64_t **)(v0 + 16);
      if (v2 >= 0)
        v4 = *(unsigned __int8 *)(v0 + 39);
      else
        v4 = *(_QWORD *)(v0 + 24);
      v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v3, v4);
      v6 = v5;
      v7 = *((_QWORD *)&v30 + 1);
      if (*((_QWORD *)&v30 + 1))
      {
        v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v30 + 8));
        v8.i16[0] = vaddlv_u8(v8);
        v9 = v8.u32[0];
        if (v8.u32[0] > 1uLL)
        {
          v10 = v5;
          if (v5 >= *((_QWORD *)&v30 + 1))
            v10 = v5 % *((_QWORD *)&v30 + 1);
        }
        else
        {
          v10 = (*((_QWORD *)&v30 + 1) - 1) & v5;
        }
        v11 = *(unsigned __int8 ***)(v30 + 8 * v10);
        if (v11)
        {
          for (i = *v11; i; i = *(unsigned __int8 **)i)
          {
            v13 = *((_QWORD *)i + 1);
            if (v13 == v6)
            {
              if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)(v0 + 16)))
                goto LABEL_51;
            }
            else
            {
              if (v9 > 1)
              {
                if (v13 >= v7)
                  v13 %= v7;
              }
              else
              {
                v13 &= v7 - 1;
              }
              if (v13 != v10)
                break;
            }
          }
        }
      }
      else
      {
        v10 = 0;
      }
      v14 = operator new(0x30uLL);
      *v14 = 0;
      v14[1] = v6;
      v15 = (std::string *)(v14 + 2);
      if (*(char *)(v0 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)(v0 + 16), *(_QWORD *)(v0 + 24));
        v1 = *((_QWORD *)&v31 + 1);
      }
      else
      {
        v16 = *(_OWORD *)(v0 + 16);
        v14[4] = *(_QWORD *)(v0 + 32);
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
      }
      v14[5] = *(_QWORD *)(v0 + 40);
      v17 = (float)(unint64_t)(v1 + 1);
      if (!v7 || (float)(*(float *)&v32 * (float)v7) < v17)
      {
        v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v18 = 1;
        v19 = v18 | (2 * v7);
        v20 = vcvtps_u32_f32(v17 / *(float *)&v32);
        if (v19 <= v20)
          v21 = v20;
        else
          v21 = v19;
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)&v30, v21);
        v7 = *((_QWORD *)&v30 + 1);
        if ((*((_QWORD *)&v30 + 1) & (*((_QWORD *)&v30 + 1) - 1)) != 0)
        {
          if (v6 >= *((_QWORD *)&v30 + 1))
            v10 = v6 % *((_QWORD *)&v30 + 1);
          else
            v10 = v6;
        }
        else
        {
          v10 = (*((_QWORD *)&v30 + 1) - 1) & v6;
        }
      }
      v22 = v30;
      v23 = *(_QWORD **)(v30 + 8 * v10);
      if (v23)
      {
        *v14 = *v23;
      }
      else
      {
        *v14 = v31;
        *(_QWORD *)&v31 = v14;
        *(_QWORD *)(v22 + 8 * v10) = &v31;
        if (!*v14)
          goto LABEL_50;
        v24 = *(_QWORD *)(*v14 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7)
            v24 %= v7;
        }
        else
        {
          v24 &= v7 - 1;
        }
        v23 = (_QWORD *)(v30 + 8 * v24);
      }
      *v23 = v14;
LABEL_50:
      v1 = ++*((_QWORD *)&v31 + 1);
LABEL_51:
      v0 = *(_QWORD *)v0;
    }
    while (v0);
  }
  snake_case_to_camel_case("discretizes_time", 16, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1186, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "valueFunction");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1188, "\"Duplicated Entry !!\" && map.map.find (\"valueFunction\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "valueFunction");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "additive");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1189, "\"Duplicated Entry !!\" && map.map.find (\"additive\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "additive");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "highFrameRateReason");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1190, "\"Duplicated Entry !!\" && map.map.find (\"highFrameRateReason\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "highFrameRateReason");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  snake_case_to_camel_case("preferredFrameRateRangeMinimum", 30, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1197, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFrameRateRangeMaximum");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1198, "\"Duplicated Entry !!\" && map.map.find (\"preferredFrameRateRangeMaximum\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFrameRateRangeMaximum");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFrameRateRangePreferred");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1199, "\"Duplicated Entry !!\" && map.map.find (\"preferredFrameRateRangePreferred\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFrameRateRangePreferred");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  snake_case_to_camel_case("cumulative", 10, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1203, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("property", 8, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1210, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "beginTimeMode");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1214, "\"Duplicated Entry !!\" && map.map.find (\"beginTimeMode\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "beginTimeMode");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE8_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "delegate");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1215, "\"Duplicated Entry !!\" && map.map.find (\"delegate\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "delegate");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE9_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "keyPath");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1216, "\"Duplicated Entry !!\" && map.map.find (\"keyPath\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "keyPath");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE10_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "frameInterval");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1220, "\"Duplicated Entry !!\" && map.map.find (\"frameInterval\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "frameInterval");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE11_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFramesPerSecond");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1221, "\"Duplicated Entry !!\" && map.map.find (\"preferredFramesPerSecond\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFramesPerSecond");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE12_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  v25 = v30;
  v30 = 0uLL;
  _ZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE17property_anim_map = v25;
  xmmword_1EDD13A90 = v31;
  dword_1EDD13AA0 = v32;
  if (*((_QWORD *)&v31 + 1))
  {
    v26 = *(_QWORD *)(v31 + 8);
    if ((*((_QWORD *)&v25 + 1) & (*((_QWORD *)&v25 + 1) - 1)) != 0)
    {
      if (v26 >= *((_QWORD *)&v25 + 1))
        v26 %= *((_QWORD *)&v25 + 1);
    }
    else
    {
      v26 &= *((_QWORD *)&v25 + 1) - 1;
    }
    *(_QWORD *)(v25 + 8 * v26) = &xmmword_1EDD13A90;
    v31 = 0uLL;
  }
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&v30);
}

void sub_1845F8628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t _ZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEv()
{
  uint64_t *v0;
  uint64_t v1;
  int v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *i;
  unint64_t v13;
  _QWORD *v14;
  std::string *v15;
  __int128 v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  void *v28[2];
  char v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  void *__p[2];
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v30 = 0u;
  v31 = 0u;
  v32 = 1065353216;
  v0 = (uint64_t *)xmmword_1EDD13A90;
  if ((_QWORD)xmmword_1EDD13A90)
  {
    v1 = 0;
    do
    {
      v2 = *((char *)v0 + 39);
      if (v2 >= 0)
        v3 = v0 + 2;
      else
        v3 = (uint64_t *)v0[2];
      if (v2 >= 0)
        v4 = *((unsigned __int8 *)v0 + 39);
      else
        v4 = v0[3];
      v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v3, v4);
      v6 = v5;
      v7 = *((_QWORD *)&v30 + 1);
      if (*((_QWORD *)&v30 + 1))
      {
        v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v30 + 8));
        v8.i16[0] = vaddlv_u8(v8);
        v9 = v8.u32[0];
        if (v8.u32[0] > 1uLL)
        {
          v10 = v5;
          if (v5 >= *((_QWORD *)&v30 + 1))
            v10 = v5 % *((_QWORD *)&v30 + 1);
        }
        else
        {
          v10 = (*((_QWORD *)&v30 + 1) - 1) & v5;
        }
        v11 = *(unsigned __int8 ***)(v30 + 8 * v10);
        if (v11)
        {
          for (i = *v11; i; i = *(unsigned __int8 **)i)
          {
            v13 = *((_QWORD *)i + 1);
            if (v13 == v6)
            {
              if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)v0 + 16))
                goto LABEL_51;
            }
            else
            {
              if (v9 > 1)
              {
                if (v13 >= v7)
                  v13 %= v7;
              }
              else
              {
                v13 &= v7 - 1;
              }
              if (v13 != v10)
                break;
            }
          }
        }
      }
      else
      {
        v10 = 0;
      }
      v14 = operator new(0x30uLL);
      *v14 = 0;
      v14[1] = v6;
      v15 = (std::string *)(v14 + 2);
      if (*((char *)v0 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)v0[2], v0[3]);
        v1 = *((_QWORD *)&v31 + 1);
      }
      else
      {
        v16 = *((_OWORD *)v0 + 1);
        v14[4] = v0[4];
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
      }
      v14[5] = v0[5];
      v17 = (float)(unint64_t)(v1 + 1);
      if (!v7 || (float)(*(float *)&v32 * (float)v7) < v17)
      {
        v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v18 = 1;
        v19 = v18 | (2 * v7);
        v20 = vcvtps_u32_f32(v17 / *(float *)&v32);
        if (v19 <= v20)
          v21 = v20;
        else
          v21 = v19;
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)&v30, v21);
        v7 = *((_QWORD *)&v30 + 1);
        if ((*((_QWORD *)&v30 + 1) & (*((_QWORD *)&v30 + 1) - 1)) != 0)
        {
          if (v6 >= *((_QWORD *)&v30 + 1))
            v10 = v6 % *((_QWORD *)&v30 + 1);
          else
            v10 = v6;
        }
        else
        {
          v10 = (*((_QWORD *)&v30 + 1) - 1) & v6;
        }
      }
      v22 = v30;
      v23 = *(_QWORD **)(v30 + 8 * v10);
      if (v23)
      {
        *v14 = *v23;
      }
      else
      {
        *v14 = v31;
        *(_QWORD *)&v31 = v14;
        *(_QWORD *)(v22 + 8 * v10) = &v31;
        if (!*v14)
          goto LABEL_50;
        v24 = *(_QWORD *)(*v14 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7)
            v24 %= v7;
        }
        else
        {
          v24 &= v7 - 1;
        }
        v23 = (_QWORD *)(v30 + 8 * v24);
      }
      *v23 = v14;
LABEL_50:
      v1 = ++*((_QWORD *)&v31 + 1);
LABEL_51:
      v0 = (uint64_t *)*v0;
    }
    while (v0);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "byValue");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1235, "\"Duplicated Entry !!\" && map.map.find (\"byValue\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "byValue");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "fromValue");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1236, "\"Duplicated Entry !!\" && map.map.find (\"fromValue\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "fromValue");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "toValue");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1237, "\"Duplicated Entry !!\" && map.map.find (\"toValue\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "toValue");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("end_angle", 9, (char *)__p);
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)__p);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v28))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1238, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(v28[0]);
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)__p);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v28, (uint64_t)v28)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(v28[0]);
  snake_case_to_camel_case("start_angle", 11, (char *)__p);
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)__p);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v28))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1239, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(v28[0]);
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)__p);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v28, (uint64_t)v28)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(v28[0]);
  snake_case_to_camel_case("rounds_to_integer", 17, (char *)__p);
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)__p);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v28))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1242, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(v28[0]);
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)__p);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v28, (uint64_t)v28)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(v28[0]);
  v25 = v30;
  v30 = 0uLL;
  _ZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE14basic_anim_map = v25;
  xmmword_1EDD13AC0 = v31;
  dword_1EDD13AD0 = v32;
  if (*((_QWORD *)&v31 + 1))
  {
    v26 = *(_QWORD *)(v31 + 8);
    if ((*((_QWORD *)&v25 + 1) & (*((_QWORD *)&v25 + 1) - 1)) != 0)
    {
      if (v26 >= *((_QWORD *)&v25 + 1))
        v26 %= *((_QWORD *)&v25 + 1);
    }
    else
    {
      v26 &= *((_QWORD *)&v25 + 1) - 1;
    }
    *(_QWORD *)(v25 + 8 * v26) = &xmmword_1EDD13AC0;
    v31 = 0uLL;
  }
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&v30);
}

void sub_1845F8E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t _ZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEv()
{
  uint64_t *v0;
  uint64_t v1;
  int v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *i;
  unint64_t v13;
  _QWORD *v14;
  std::string *v15;
  __int128 v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  void *__p[2];
  char v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  void *v33[2];
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v30 = 0u;
  v31 = 0u;
  v32 = 1065353216;
  v0 = (uint64_t *)xmmword_1EDD13AC0;
  if ((_QWORD)xmmword_1EDD13AC0)
  {
    v1 = 0;
    do
    {
      v2 = *((char *)v0 + 39);
      if (v2 >= 0)
        v3 = v0 + 2;
      else
        v3 = (uint64_t *)v0[2];
      if (v2 >= 0)
        v4 = *((unsigned __int8 *)v0 + 39);
      else
        v4 = v0[3];
      v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v3, v4);
      v6 = v5;
      v7 = *((_QWORD *)&v30 + 1);
      if (*((_QWORD *)&v30 + 1))
      {
        v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v30 + 8));
        v8.i16[0] = vaddlv_u8(v8);
        v9 = v8.u32[0];
        if (v8.u32[0] > 1uLL)
        {
          v10 = v5;
          if (v5 >= *((_QWORD *)&v30 + 1))
            v10 = v5 % *((_QWORD *)&v30 + 1);
        }
        else
        {
          v10 = (*((_QWORD *)&v30 + 1) - 1) & v5;
        }
        v11 = *(unsigned __int8 ***)(v30 + 8 * v10);
        if (v11)
        {
          for (i = *v11; i; i = *(unsigned __int8 **)i)
          {
            v13 = *((_QWORD *)i + 1);
            if (v13 == v6)
            {
              if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)v0 + 16))
                goto LABEL_51;
            }
            else
            {
              if (v9 > 1)
              {
                if (v13 >= v7)
                  v13 %= v7;
              }
              else
              {
                v13 &= v7 - 1;
              }
              if (v13 != v10)
                break;
            }
          }
        }
      }
      else
      {
        v10 = 0;
      }
      v14 = operator new(0x30uLL);
      *v14 = 0;
      v14[1] = v6;
      v15 = (std::string *)(v14 + 2);
      if (*((char *)v0 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)v0[2], v0[3]);
        v1 = *((_QWORD *)&v31 + 1);
      }
      else
      {
        v16 = *((_OWORD *)v0 + 1);
        v14[4] = v0[4];
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
      }
      v14[5] = v0[5];
      v17 = (float)(unint64_t)(v1 + 1);
      if (!v7 || (float)(*(float *)&v32 * (float)v7) < v17)
      {
        v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v18 = 1;
        v19 = v18 | (2 * v7);
        v20 = vcvtps_u32_f32(v17 / *(float *)&v32);
        if (v19 <= v20)
          v21 = v20;
        else
          v21 = v19;
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)&v30, v21);
        v7 = *((_QWORD *)&v30 + 1);
        if ((*((_QWORD *)&v30 + 1) & (*((_QWORD *)&v30 + 1) - 1)) != 0)
        {
          if (v6 >= *((_QWORD *)&v30 + 1))
            v10 = v6 % *((_QWORD *)&v30 + 1);
          else
            v10 = v6;
        }
        else
        {
          v10 = (*((_QWORD *)&v30 + 1) - 1) & v6;
        }
      }
      v22 = v30;
      v23 = *(_QWORD **)(v30 + 8 * v10);
      if (v23)
      {
        *v14 = *v23;
      }
      else
      {
        *v14 = v31;
        *(_QWORD *)&v31 = v14;
        *(_QWORD *)(v22 + 8 * v10) = &v31;
        if (!*v14)
          goto LABEL_50;
        v24 = *(_QWORD *)(*v14 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7)
            v24 %= v7;
        }
        else
        {
          v24 &= v7 - 1;
        }
        v23 = (_QWORD *)(v30 + 8 * v24);
      }
      *v23 = v14;
LABEL_50:
      v1 = ++*((_QWORD *)&v31 + 1);
LABEL_51:
      v0 = (uint64_t *)*v0;
    }
    while (v0);
  }
  snake_case_to_camel_case("mass", 4, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1255, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEvENUlP17CASpringAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("stiffness", 9, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1256, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEvENUlP17CASpringAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("damping", 7, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1257, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEvENUlP17CASpringAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("velocity", 8, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1258, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEvENUlP17CASpringAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("allows_overdamping", 18, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1259, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEvENUlP17CASpringAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "initialVelocity");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1260, "\"Duplicated Entry !!\" && map.map.find (\"initialVelocity\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "initialVelocity");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEvENUlP17CASpringAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  v25 = v30;
  v30 = 0uLL;
  _ZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE15spring_anim_map = v25;
  xmmword_1EDD13AF0 = v31;
  dword_1EDD13B00 = v32;
  if (*((_QWORD *)&v31 + 1))
  {
    v26 = *(_QWORD *)(v31 + 8);
    if ((*((_QWORD *)&v25 + 1) & (*((_QWORD *)&v25 + 1) - 1)) != 0)
    {
      if (v26 >= *((_QWORD *)&v25 + 1))
        v26 %= *((_QWORD *)&v25 + 1);
    }
    else
    {
      v26 &= *((_QWORD *)&v25 + 1) - 1;
    }
    *(_QWORD *)(v25 + 8 * v26) = &xmmword_1EDD13AF0;
    v31 = 0uLL;
  }
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&v30);
}

void sub_1845F95B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  void *i;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = *(void **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11)
              v17 %= v11;
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  v18 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_QWORD *)i + 4) = v18;
  *((_QWORD *)i + 5) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v26)
  {
    *(_QWORD *)i = *v26;
LABEL_44:
    *v26 = i;
    goto LABEL_45;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v25 + 8 * v14) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v27 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11)
        v27 %= v11;
    }
    else
    {
      v27 &= v11 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1845F98C0(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEvENUlP17CASpringAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a2 + 152));
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEvENUlP17CASpringAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a2 + 160));
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEvENUlP17CASpringAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a2 + 168));
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEvENUlP17CASpringAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a2 + 176));
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEvENUlP17CASpringAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(unsigned __int8 *)(a2 + 184));
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEvENUlP17CASpringAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a2 + 176));
  if (result)
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "initialVelocity"));
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v72;
  unint64_t v73;

  if (a2 > 0x20)
  {
    if (a2 <= 0x40)
    {
      v5 = *(uint64_t *)((char *)a1 + a2 - 16);
      v6 = *a1 - 0x3C5A37A36834CED9 * (v5 + a2);
      v8 = a1[2];
      v7 = a1[3];
      v9 = __ROR8__(v6 + v7, 52);
      v10 = v6 + a1[1];
      v11 = __ROR8__(v10, 7);
      v12 = v10 + v8;
      v13 = *(uint64_t *)((char *)a1 + a2 - 32) + v8;
      v14 = *(uint64_t *)((char *)a1 + a2 - 8) + v7;
      v15 = __ROR8__(v14 + v13, 52);
      v16 = v11 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v5 + a2), 37) + v9;
      v17 = __ROR8__(v13, 37);
      v18 = *(uint64_t *)((char *)a1 + a2 - 24) + v13;
      v19 = __ROR8__(v18, 7);
      v20 = v16 + __ROR8__(v12, 31);
      v21 = v18 + v5;
      v22 = v21 + v14;
      v23 = 0x9AE16A3B2F90404FLL;
      v24 = 0xC3A5C85C97CB3127 * (v22 + v20) - 0x651E95C4D06FBFB1 * (v12 + v7 + v17 + v19 + v15 + __ROR8__(v21, 31));
      v25 = v20 - 0x3C5A37A36834CED9 * (v24 ^ (v24 >> 47));
      return (v25 ^ (v25 >> 47)) * v23;
    }
    v4 = 0x9DDFEA08EB382D69;
    v32 = *(uint64_t *)((char *)a1 + a2 - 48);
    v33 = *(uint64_t *)((char *)a1 + a2 - 40);
    v34 = *(uint64_t *)((char *)a1 + a2 - 24);
    v36 = *(uint64_t *)((char *)a1 + a2 - 64);
    v35 = *(uint64_t *)((char *)a1 + a2 - 56);
    v37 = *(uint64_t *)((char *)a1 + a2 - 16);
    v38 = *(uint64_t *)((char *)a1 + a2 - 8);
    v39 = v35 + v37;
    v40 = 0x9DDFEA08EB382D69
        * (v34 ^ ((0x9DDFEA08EB382D69 * (v34 ^ (v32 + a2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v34 ^ (v32 + a2))));
    v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
    v42 = v36 + a2 + v35 + v32;
    v43 = v42 + v33;
    v44 = __ROR8__(v42, 44) + v36 + a2 + __ROR8__(v33 + v36 + a2 - 0x622015F714C7D297 * (v40 ^ (v40 >> 47)), 21);
    v45 = v35 + v37 + *(uint64_t *)((char *)a1 + a2 - 32) - 0x4B6D499041670D8DLL;
    v46 = v45 + v34 + v37;
    v47 = __ROR8__(v46, 44);
    v48 = v46 + v38;
    v49 = v47 + v45 + __ROR8__(v45 + v33 + v38, 21);
    v51 = *a1;
    v50 = a1 + 4;
    v52 = v51 - 0x4B6D499041670D8DLL * v33;
    v53 = -(uint64_t)((a2 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      v54 = *(v50 - 3);
      v55 = v52 + v43 + v39 + v54;
      v56 = v50[2];
      v57 = v50[3];
      v58 = v50[1];
      v39 = v58 + v43 - 0x4B6D499041670D8DLL * __ROR8__(v39 + v44 + v56, 42);
      v59 = v41 + v48;
      v60 = *(v50 - 2);
      v61 = *(v50 - 1);
      v62 = *(v50 - 4) - 0x4B6D499041670D8DLL * v44;
      v63 = v62 + v48 + v61;
      v64 = v62 + v54 + v60;
      v43 = v64 + v61;
      v65 = __ROR8__(v64, 44) + v62;
      v66 = (0xB492B66FBE98F273 * __ROR8__(v55, 37)) ^ v49;
      v52 = 0xB492B66FBE98F273 * __ROR8__(v59, 33);
      v44 = v65 + __ROR8__(v63 + v66, 21);
      v67 = v52 + v49 + *v50;
      v48 = v67 + v58 + v56 + v57;
      v49 = __ROR8__(v67 + v58 + v56, 44) + v67 + __ROR8__(v39 + v60 + v67 + v57, 21);
      v50 += 8;
      v41 = v66;
      v53 += 64;
    }
    while (v53);
    v68 = v52
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) ^ ((0x9DDFEA08EB382D69 * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) >> 47));
    v69 = 0x9DDFEA08EB382D69
        * (v68 ^ (v66
                - 0x4B6D499041670D8DLL * (v39 ^ (v39 >> 47))
                - 0x622015F714C7D297
                * ((0x9DDFEA08EB382D69
                  * (v48 ^ ((0x9DDFEA08EB382D69 * (v48 ^ v43)) >> 47) ^ (0x9DDFEA08EB382D69 * (v48 ^ v43)))) ^ ((0x9DDFEA08EB382D69 * (v48 ^ ((0x9DDFEA08EB382D69 * (v48 ^ v43)) >> 47) ^ (0x9DDFEA08EB382D69 * (v48 ^ v43)))) >> 47))));
    v70 = 0x9DDFEA08EB382D69 * (v68 ^ (v69 >> 47) ^ v69);
    goto LABEL_13;
  }
  if (a2 > 0x10)
  {
    v26 = a1[1];
    v27 = 0xB492B66FBE98F273 * *a1;
    v28 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8), 30) + __ROR8__(v27 - v26, 43);
    v29 = v27 + a2 + __ROR8__(v26 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8);
    v23 = 0x9DDFEA08EB382D69;
    v30 = 0x9DDFEA08EB382D69 * (v29 ^ (v28 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a1 + a2 - 16)));
    v31 = v29 ^ (v30 >> 47) ^ v30;
LABEL_8:
    v25 = 0x9DDFEA08EB382D69 * v31;
    return (v25 ^ (v25 >> 47)) * v23;
  }
  if (a2 < 9)
  {
    if (a2 >= 4)
    {
      v72 = *(unsigned int *)((char *)a1 + a2 - 4);
      v23 = 0x9DDFEA08EB382D69;
      v73 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a1) + a2) ^ v72);
      v31 = v72 ^ (v73 >> 47) ^ v73;
      goto LABEL_8;
    }
    v4 = 0x9AE16A3B2F90404FLL;
    if (!a2)
      return v4;
    v70 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                   * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
LABEL_13:
    v4 *= v70 ^ (v70 >> 47);
    return v4;
  }
  v2 = *(uint64_t *)((char *)a1 + a2 - 8);
  v3 = __ROR8__(v2 + a2, a2);
  return (0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69
          * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) ^ ((0x9DDFEA08EB382D69 * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) >> 47))) ^ v2;
}

BOOL std::equal_to<std::string>::operator()[abi:nn180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  void *i;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = *(void **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11)
              v17 %= v11;
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  v18 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_QWORD *)i + 4) = v18;
  *((_QWORD *)i + 5) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v26)
  {
    *(_QWORD *)i = *v26;
LABEL_44:
    *v26 = i;
    goto LABEL_45;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v25 + 8 * v14) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v27 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11)
        v27 %= v11;
    }
    else
    {
      v27 &= v11 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1845FA2F0(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v6;

  v5 = *(_QWORD *)(a2 + 128);
  if (v5)
  {
    v6 = (void *)result;
    result = ns_object_from_render_object(a5, v5, 0);
    if (result)
      return objc_msgSend(v6, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "byValue"));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v6;

  v5 = *(_QWORD *)(a2 + 112);
  if (v5)
  {
    v6 = (void *)result;
    result = ns_object_from_render_object(a5, v5, 0);
    if (result)
      return objc_msgSend(v6, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "fromValue"));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v6;

  v5 = *(_QWORD *)(a2 + 120);
  if (v5)
  {
    v6 = (void *)result;
    result = ns_object_from_render_object(a5, v5, 0);
    if (result)
      return objc_msgSend(v6, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "toValue"));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a2 + 144));
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a2 + 136));
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SD_SM_SP_(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setRoundsToInteger:", HIBYTE(*((_DWORD *)a2 + 3)) & 1);
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  void *i;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = *(void **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11)
              v17 %= v11;
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  v18 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_QWORD *)i + 4) = v18;
  *((_QWORD *)i + 5) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v26)
  {
    *(_QWORD *)i = *v26;
LABEL_44:
    *v26 = i;
    goto LABEL_45;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v25 + 8 * v14) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v27 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11)
        v27 %= v11;
    }
    else
    {
      v27 &= v11 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1845FA770(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", ((unint64_t)*(unsigned int *)(a2 + 12) >> 15) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

CAValueFunction *_ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  CAValueFunction *result;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v4[0] = *(_QWORD *)(a2 + 104);
  result = id_from_value<void,CA::Render::Function *>(v4);
  if (result)
    return (CAValueFunction *)objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "valueFunction"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", ((unint64_t)*(unsigned int *)(a2 + 12) >> 9) & 1);
  if (result)
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "additive"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(unsigned int *)(a2 + 88));
  if (result)
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "highFrameRateReason"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_(void *a1, const char *a2, double a3, double a4, double a5)
{
  LODWORD(a3) = *((_DWORD *)a2 + 6);
  LODWORD(a4) = *((_DWORD *)a2 + 7);
  LODWORD(a5) = *((_DWORD *)a2 + 8);
  return objc_msgSend(a1, "setPreferredFrameRateRange:", a3, a4, a5);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES8_SA_SD_SM_SP_(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setCumulative:", (*((_DWORD *)a2 + 3) >> 10) & 1);
}

void _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  CFStringRef v3;
  CFStringRef v4;

  v3 = CA::Render::key_path_copy_string(*(_QWORD *)(a2 + 96), (void *const *)a2);
  if (v3)
  {
    v4 = v3;
    objc_msgSend(a1, "setKeyPath:", v3);
    CFRelease(v4);
  }
}

CAValueFunction *id_from_value<void,CA::Render::Function *>(_QWORD *a1)
{
  uint64_t v2;
  unsigned int v3;

  v2 = *a1;
  if (!v2)
    return 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 96))(v2) != 1)
    __assert_rtn("id_from_value", "CAReverseSerialization.mm", 466, "false");
  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 120))(*a1);
  if (v3 <= 0xC && *off_1E159D438[v3])
    return +[CAValueFunction functionWithName:](CAValueFunction, "functionWithName:");
  else
    return 0;
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  void *i;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = *(void **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11)
              v17 %= v11;
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  v18 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_QWORD *)i + 4) = v18;
  *((_QWORD *)i + 5) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v26)
  {
    *(_QWORD *)i = *v26;
LABEL_44:
    *v26 = i;
    goto LABEL_45;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v25 + 8 * v14) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v27 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11)
        v27 %= v11;
    }
    else
    {
      v27 &= v11 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1845FACD0(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

CAMediaTimingFunction *_ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_(CAMediaTimingFunction *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  CAMediaTimingFunction *v6;
  uint64_t *v7;

  v4 = *(_QWORD *)(a2 + 48);
  if (v4)
  {
    v6 = result;
    result = nsobject_from_values<CAMediaTimingFunction *,double>((double *)(v4 + 24), *(_DWORD *)(v4 + 16));
    if (result)
    {
      if (*((char *)a4 + 23) >= 0)
        v7 = a4;
      else
        v7 = (uint64_t *)*a4;
      return (CAMediaTimingFunction *)-[CAMediaTimingFunction setValue:forKey:](v6, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = v3;
  result = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v5, "{CAFrameRateRange=fff}");
  if (result)
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "preferredFrameRateRange"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setRemovedOnCompletion:", (*((_DWORD *)a2 + 3) >> 11) & 1);
}

void std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  _QWORD *v18;
  std::string *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2))
            return;
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11)
              v17 %= v11;
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  v18 = operator new(0x30uLL);
  *v18 = 0;
  v18[1] = v10;
  v19 = (std::string *)(v18 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v18[4] = *(_QWORD *)(a3 + 16);
  }
  v18[5] = *(_QWORD *)(a3 + 24);
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v27)
  {
    *v18 = *v27;
LABEL_47:
    *v27 = v18;
    goto LABEL_48;
  }
  *v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v26 + 8 * v14) = a1 + 16;
  if (*v18)
  {
    v28 = *(_QWORD *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_47;
  }
LABEL_48:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1845FB064(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEv()
{
  void *__p[2];
  char v2;
  _OWORD v3[2];
  uint64_t v4;
  char __s[256];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  memset(v3, 0, sizeof(v3));
  v4 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)v3, 0x40uLL);
  snake_case_to_camel_case("begin_time", 10, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 842, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("speed", 5, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 843, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("duration", 8, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 844, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("time_offset", 11, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 845, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("autoreverses", 12, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 846, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("fill_mode", 9, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 856, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("repeatDuration", 14, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 860, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("repeatCount", 11, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 864, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table((uint64_t)&_ZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavE10timing_map, (uint64_t *)v3);
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)v3);
}

void sub_1845FB5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void *_ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 5);
  if (v2)
    return (void *)objc_msgSend(a1, "setBeginTime:", *(double *)(v2 + 40));
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2, double a3)
{
  uint64_t v3;

  v3 = *((_QWORD *)a2 + 5);
  if (v3)
  {
    LODWORD(a3) = *(_DWORD *)(v3 + 16);
    return (void *)objc_msgSend(a1, "setSpeed:", a3);
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 5);
  if (v2)
    return (void *)objc_msgSend(a1, "setDuration:", *(double *)(v2 + 32));
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 5);
  if (v2)
    return (void *)objc_msgSend(a1, "setTimeOffset:", *(double *)(v2 + 48));
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 5);
  if (v2)
    return (void *)objc_msgSend(a1, "setAutoreverses:", (*(_DWORD *)(v2 + 12) >> 8) & 1);
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2;
  int v3;
  const CAMediaTimingFillMode *v4;

  v2 = *((_QWORD *)a2 + 5);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 12);
    if ((v3 & 0x200) != 0)
    {
      if ((v3 & 0x400) != 0)
        v4 = &kCAFillModeBoth;
      else
        v4 = &kCAFillModeForwards;
    }
    else
    {
      if ((v3 & 0x400) == 0)
        return a1;
      v4 = &kCAFillModeBackwards;
    }
    return (void *)objc_msgSend(a1, "setFillMode:", *v4);
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 5);
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 13) & 8) != 0)
      return (void *)objc_msgSend(a1, "setRepeatDuration:", *(double *)(v2 + 24));
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2;
  double v3;

  v2 = *((_QWORD *)a2 + 5);
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 13) & 8) == 0)
    {
      v3 = *(double *)(v2 + 24);
      *(float *)&v3 = v3;
      return (void *)objc_msgSend(a1, "setRepeatCount:", v3);
    }
  }
  return a1;
}

CAMediaTimingFunction *nsobject_from_values<CAMediaTimingFunction *,double>(double *a1, unsigned int a2)
{
  double v2;
  double v3;
  double v4;
  double v5;

  if (a2 <= 3)
    __assert_rtn("nsobject_from_values", "CAReverseSerialization.mm", 274, "count >= 4");
  v2 = *a1;
  v3 = a1[1];
  *(float *)&v2 = *a1;
  *(float *)&v3 = v3;
  v4 = a1[2];
  v5 = a1[3];
  *(float *)&v4 = v4;
  *(float *)&v5 = v5;
  return +[CAMediaTimingFunction functionWithControlPoints::::](CAMediaTimingFunction, "functionWithControlPoints::::", v2, v3, v4, v5);
}

uint64_t _ZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE_clEv()
{
  unsigned __int8 v0;
  _QWORD *v1;
  _QWORD *i;
  void *__p[2];
  char v5;
  _OWORD v6[2];
  uint64_t v7;
  void *v8[2];
  __int128 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  memset(v6, 0, sizeof(v6));
  v7 = 1065353216;
  snake_case_to_camel_case("timing_function", 15, (char *)v8);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v8);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v6[0], *((unint64_t *)&v6[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1167, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v8);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v6, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_;
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(v8, "preferredFrameRateRange");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v6[0], *((unint64_t *)&v6[0] + 1), (uint64_t)v8))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1168, "\"Duplicated Entry !!\" && map.map.find (\"preferredFrameRateRange\") == map.map.end ()");
  }
  if (SBYTE7(v9) < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:nn180100]<0>(v8, "preferredFrameRateRange");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v6, (uint64_t)v8, (uint64_t)v8)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_;
  if (SBYTE7(v9) < 0)
    operator delete(v8[0]);
  snake_case_to_camel_case("removed_on_completion", 21, (char *)v8);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v8);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v6[0], *((unint64_t *)&v6[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1171, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v8);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v6, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_;
  if (v5 < 0)
    operator delete(__p[0]);
  v0 = atomic_load((unsigned __int8 *)&_ZGVZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavE10timing_map);
  if ((v0 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavE10timing_map))
  {
    _ZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEv();
    __cxa_guard_release(&_ZGVZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavE10timing_map);
  }
  *(_OWORD *)v8 = 0u;
  v9 = 0u;
  v10 = dword_1EDD13A40;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)v8, qword_1EDD13A28);
  v1 = (_QWORD *)qword_1EDD13A30;
  if (qword_1EDD13A30)
  {
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)> const&>((uint64_t)v8, (uint64_t)(v1 + 2), (uint64_t)(v1 + 2));
      v1 = (_QWORD *)*v1;
    }
    while (v1);
  }
  for (i = (_QWORD *)v9; i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)> const&>((uint64_t)v6, (uint64_t)(i + 2), (uint64_t)(i + 2));
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table((uint64_t)&_ZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE13animation_map, (uint64_t *)v6);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)v8);
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)v6);
}

void sub_1845FBADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  __cxa_guard_abort(&_ZGVZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavE10timing_map);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t _ZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEv()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *i;
  unint64_t v13;
  _QWORD *v14;
  std::string *v15;
  __int128 v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  void *__p[2];
  char v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  void *v33[2];
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v30 = 0u;
  v31 = 0u;
  v32 = 1065353216;
  v0 = qword_1EDD139A0;
  if (qword_1EDD139A0)
  {
    v1 = 0;
    do
    {
      v2 = *(char *)(v0 + 39);
      if (v2 >= 0)
        v3 = (uint64_t *)(v0 + 16);
      else
        v3 = *(uint64_t **)(v0 + 16);
      if (v2 >= 0)
        v4 = *(unsigned __int8 *)(v0 + 39);
      else
        v4 = *(_QWORD *)(v0 + 24);
      v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v3, v4);
      v6 = v5;
      v7 = *((_QWORD *)&v30 + 1);
      if (*((_QWORD *)&v30 + 1))
      {
        v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v30 + 8));
        v8.i16[0] = vaddlv_u8(v8);
        v9 = v8.u32[0];
        if (v8.u32[0] > 1uLL)
        {
          v10 = v5;
          if (v5 >= *((_QWORD *)&v30 + 1))
            v10 = v5 % *((_QWORD *)&v30 + 1);
        }
        else
        {
          v10 = (*((_QWORD *)&v30 + 1) - 1) & v5;
        }
        v11 = *(unsigned __int8 ***)(v30 + 8 * v10);
        if (v11)
        {
          for (i = *v11; i; i = *(unsigned __int8 **)i)
          {
            v13 = *((_QWORD *)i + 1);
            if (v13 == v6)
            {
              if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)(v0 + 16)))
                goto LABEL_51;
            }
            else
            {
              if (v9 > 1)
              {
                if (v13 >= v7)
                  v13 %= v7;
              }
              else
              {
                v13 &= v7 - 1;
              }
              if (v13 != v10)
                break;
            }
          }
        }
      }
      else
      {
        v10 = 0;
      }
      v14 = operator new(0x30uLL);
      *v14 = 0;
      v14[1] = v6;
      v15 = (std::string *)(v14 + 2);
      if (*(char *)(v0 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)(v0 + 16), *(_QWORD *)(v0 + 24));
        v1 = *((_QWORD *)&v31 + 1);
      }
      else
      {
        v16 = *(_OWORD *)(v0 + 16);
        v14[4] = *(_QWORD *)(v0 + 32);
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
      }
      v14[5] = *(_QWORD *)(v0 + 40);
      v17 = (float)(unint64_t)(v1 + 1);
      if (!v7 || (float)(*(float *)&v32 * (float)v7) < v17)
      {
        v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v18 = 1;
        v19 = v18 | (2 * v7);
        v20 = vcvtps_u32_f32(v17 / *(float *)&v32);
        if (v19 <= v20)
          v21 = v20;
        else
          v21 = v19;
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)&v30, v21);
        v7 = *((_QWORD *)&v30 + 1);
        if ((*((_QWORD *)&v30 + 1) & (*((_QWORD *)&v30 + 1) - 1)) != 0)
        {
          if (v6 >= *((_QWORD *)&v30 + 1))
            v10 = v6 % *((_QWORD *)&v30 + 1);
          else
            v10 = v6;
        }
        else
        {
          v10 = (*((_QWORD *)&v30 + 1) - 1) & v6;
        }
      }
      v22 = v30;
      v23 = *(_QWORD **)(v30 + 8 * v10);
      if (v23)
      {
        *v14 = *v23;
      }
      else
      {
        *v14 = v31;
        *(_QWORD *)&v31 = v14;
        *(_QWORD *)(v22 + 8 * v10) = &v31;
        if (!*v14)
          goto LABEL_50;
        v24 = *(_QWORD *)(*v14 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7)
            v24 %= v7;
        }
        else
        {
          v24 &= v7 - 1;
        }
        v23 = (_QWORD *)(v30 + 8 * v24);
      }
      *v23 = v14;
LABEL_50:
      v1 = ++*((_QWORD *)&v31 + 1);
LABEL_51:
      v0 = *(_QWORD *)v0;
    }
    while (v0);
  }
  snake_case_to_camel_case("discretizes_time", 16, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1186, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "valueFunction");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1188, "\"Duplicated Entry !!\" && map.map.find (\"valueFunction\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "valueFunction");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "additive");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1189, "\"Duplicated Entry !!\" && map.map.find (\"additive\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "additive");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "highFrameRateReason");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1190, "\"Duplicated Entry !!\" && map.map.find (\"highFrameRateReason\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "highFrameRateReason");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  snake_case_to_camel_case("preferredFrameRateRangeMinimum", 30, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1197, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFrameRateRangeMaximum");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1198, "\"Duplicated Entry !!\" && map.map.find (\"preferredFrameRateRangeMaximum\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFrameRateRangeMaximum");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFrameRateRangePreferred");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1199, "\"Duplicated Entry !!\" && map.map.find (\"preferredFrameRateRangePreferred\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFrameRateRangePreferred");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  snake_case_to_camel_case("cumulative", 10, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1203, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("property", 8, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1210, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "beginTimeMode");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1214, "\"Duplicated Entry !!\" && map.map.find (\"beginTimeMode\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "beginTimeMode");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE8_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "delegate");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1215, "\"Duplicated Entry !!\" && map.map.find (\"delegate\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "delegate");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE9_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "keyPath");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1216, "\"Duplicated Entry !!\" && map.map.find (\"keyPath\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "keyPath");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE10_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "frameInterval");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1220, "\"Duplicated Entry !!\" && map.map.find (\"frameInterval\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "frameInterval");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE11_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFramesPerSecond");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1221, "\"Duplicated Entry !!\" && map.map.find (\"preferredFramesPerSecond\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFramesPerSecond");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE12_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  v25 = v30;
  v30 = 0uLL;
  _ZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE17property_anim_map = v25;
  xmmword_1EDD139D0 = v31;
  dword_1EDD139E0 = v32;
  if (*((_QWORD *)&v31 + 1))
  {
    v26 = *(_QWORD *)(v31 + 8);
    if ((*((_QWORD *)&v25 + 1) & (*((_QWORD *)&v25 + 1) - 1)) != 0)
    {
      if (v26 >= *((_QWORD *)&v25 + 1))
        v26 %= *((_QWORD *)&v25 + 1);
    }
    else
    {
      v26 &= *((_QWORD *)&v25 + 1) - 1;
    }
    *(_QWORD *)(v25 + 8 * v26) = &xmmword_1EDD139D0;
    v31 = 0uLL;
  }
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&v30);
}

void sub_1845FC6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t _ZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEv()
{
  uint64_t *v0;
  uint64_t v1;
  int v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *i;
  unint64_t v13;
  _QWORD *v14;
  std::string *v15;
  __int128 v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  void *__p[2];
  char v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  void *v33[2];
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v30 = 0u;
  v31 = 0u;
  v32 = 1065353216;
  v0 = (uint64_t *)xmmword_1EDD139D0;
  if ((_QWORD)xmmword_1EDD139D0)
  {
    v1 = 0;
    do
    {
      v2 = *((char *)v0 + 39);
      if (v2 >= 0)
        v3 = v0 + 2;
      else
        v3 = (uint64_t *)v0[2];
      if (v2 >= 0)
        v4 = *((unsigned __int8 *)v0 + 39);
      else
        v4 = v0[3];
      v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v3, v4);
      v6 = v5;
      v7 = *((_QWORD *)&v30 + 1);
      if (*((_QWORD *)&v30 + 1))
      {
        v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v30 + 8));
        v8.i16[0] = vaddlv_u8(v8);
        v9 = v8.u32[0];
        if (v8.u32[0] > 1uLL)
        {
          v10 = v5;
          if (v5 >= *((_QWORD *)&v30 + 1))
            v10 = v5 % *((_QWORD *)&v30 + 1);
        }
        else
        {
          v10 = (*((_QWORD *)&v30 + 1) - 1) & v5;
        }
        v11 = *(unsigned __int8 ***)(v30 + 8 * v10);
        if (v11)
        {
          for (i = *v11; i; i = *(unsigned __int8 **)i)
          {
            v13 = *((_QWORD *)i + 1);
            if (v13 == v6)
            {
              if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)v0 + 16))
                goto LABEL_51;
            }
            else
            {
              if (v9 > 1)
              {
                if (v13 >= v7)
                  v13 %= v7;
              }
              else
              {
                v13 &= v7 - 1;
              }
              if (v13 != v10)
                break;
            }
          }
        }
      }
      else
      {
        v10 = 0;
      }
      v14 = operator new(0x30uLL);
      *v14 = 0;
      v14[1] = v6;
      v15 = (std::string *)(v14 + 2);
      if (*((char *)v0 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)v0[2], v0[3]);
        v1 = *((_QWORD *)&v31 + 1);
      }
      else
      {
        v16 = *((_OWORD *)v0 + 1);
        v14[4] = v0[4];
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
      }
      v14[5] = v0[5];
      v17 = (float)(unint64_t)(v1 + 1);
      if (!v7 || (float)(*(float *)&v32 * (float)v7) < v17)
      {
        v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v18 = 1;
        v19 = v18 | (2 * v7);
        v20 = vcvtps_u32_f32(v17 / *(float *)&v32);
        if (v19 <= v20)
          v21 = v20;
        else
          v21 = v19;
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)&v30, v21);
        v7 = *((_QWORD *)&v30 + 1);
        if ((*((_QWORD *)&v30 + 1) & (*((_QWORD *)&v30 + 1) - 1)) != 0)
        {
          if (v6 >= *((_QWORD *)&v30 + 1))
            v10 = v6 % *((_QWORD *)&v30 + 1);
          else
            v10 = v6;
        }
        else
        {
          v10 = (*((_QWORD *)&v30 + 1) - 1) & v6;
        }
      }
      v22 = v30;
      v23 = *(_QWORD **)(v30 + 8 * v10);
      if (v23)
      {
        *v14 = *v23;
      }
      else
      {
        *v14 = v31;
        *(_QWORD *)&v31 = v14;
        *(_QWORD *)(v22 + 8 * v10) = &v31;
        if (!*v14)
          goto LABEL_50;
        v24 = *(_QWORD *)(*v14 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7)
            v24 %= v7;
        }
        else
        {
          v24 &= v7 - 1;
        }
        v23 = (_QWORD *)(v30 + 8 * v24);
      }
      *v23 = v14;
LABEL_50:
      v1 = ++*((_QWORD *)&v31 + 1);
LABEL_51:
      v0 = (uint64_t *)*v0;
    }
    while (v0);
  }
  snake_case_to_camel_case("bias_values", 11, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1279, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("continuity_values", 17, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1280, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("path", 4, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1281, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("tension_values", 14, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1282, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("timing_functions", 16, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1283, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("values", 6, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1284, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "keyTimes");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1285, "\"Duplicated Entry !!\" && map.map.find (\"keyTimes\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "keyTimes");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "calculationMode");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1286, "\"Duplicated Entry !!\" && map.map.find (\"calculationMode\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "calculationMode");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  snake_case_to_camel_case("rotation_mode", 13, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1292, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(__p[0]);
  v25 = v30;
  v30 = 0uLL;
  _ZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE17keyframe_anim_map = v25;
  xmmword_1EDD13A00 = v31;
  dword_1EDD13A10 = v32;
  if (*((_QWORD *)&v31 + 1))
  {
    v26 = *(_QWORD *)(v31 + 8);
    if ((*((_QWORD *)&v25 + 1) & (*((_QWORD *)&v25 + 1) - 1)) != 0)
    {
      if (v26 >= *((_QWORD *)&v25 + 1))
        v26 %= *((_QWORD *)&v25 + 1);
    }
    else
    {
      v26 &= *((_QWORD *)&v25 + 1) - 1;
    }
    *(_QWORD *)(v25 + 8 * v26) = &xmmword_1EDD13A00;
    v31 = 0uLL;
  }
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&v30);
}

void sub_1845FD090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  void *i;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = *(void **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11)
              v17 %= v11;
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  v18 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_QWORD *)i + 4) = v18;
  *((_QWORD *)i + 5) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v26)
  {
    *(_QWORD *)i = *v26;
LABEL_44:
    *v26 = i;
    goto LABEL_45;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v25 + 8 * v14) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v27 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11)
        v27 %= v11;
    }
    else
    {
      v27 &= v11 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1845FD3D4(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void *_ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *result;
  uint64_t *v7;

  result = id_from_value<NSArray,CA::Render::Vector *>(*(_QWORD *)(a2 + 168));
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return (void *)objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

void *_ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *result;
  uint64_t *v7;

  result = id_from_value<NSArray,CA::Render::Vector *>(*(_QWORD *)(a2 + 160));
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return (void *)objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

CGPath *_ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  CGPath *result;
  uint64_t *v7;
  uint64_t v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v8[0] = *(_QWORD *)(a2 + 136);
  result = id_from_value<void,CA::Render::Path *>(v8);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return (CGPath *)objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

void *_ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *result;
  uint64_t *v7;

  result = id_from_value<NSArray,CA::Render::Vector *>(*(_QWORD *)(a2 + 152));
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return (void *)objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  unint64_t v5;
  void *v8;
  void *v9;
  unint64_t v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t *v16;

  v4 = *(_QWORD *)(a2 + 128);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 + 16);
    if (v5 < 4 || (*(_DWORD *)(v4 + 16) & 3) != 0)
      __assert_rtn("id_from_value", "CAReverseSerialization.mm", 348, "count >=4 && count % 4 == 0");
    v8 = (void *)result;
    v9 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *(unsigned int *)(v4 + 16));
    v10 = 0;
    do
    {
      v11 = (double *)(v4 + 8 * v10);
      v12 = v11[3];
      v13 = v11[4];
      *(float *)&v12 = v12;
      *(float *)&v13 = v13;
      v14 = v11[5];
      v15 = v11[6];
      *(float *)&v14 = v14;
      *(float *)&v15 = v15;
      result = objc_msgSend(v9, "addObject:", +[CAMediaTimingFunction functionWithControlPoints::::](CAMediaTimingFunction, "functionWithControlPoints::::", v12, v13, v14, v15));
      v10 += 4;
    }
    while (v10 < v5);
    if (v9)
    {
      if (*((char *)a4 + 23) >= 0)
        v16 = a4;
      else
        v16 = (uint64_t *)*a4;
      return objc_msgSend(v8, "setValue:forKey:", v9, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16));
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SD_SM_SP_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  void *v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v5 = *(_QWORD *)(a2 + 112);
  if (v5)
  {
    v8 = (void *)result;
    result = objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *(unsigned int *)(v5 + 16));
    v9 = (void *)result;
    if (*(_DWORD *)(v5 + 16))
    {
      v10 = 0;
      do
      {
        v11 = *(_QWORD *)(v5 + 24 + 8 * v10);
        if (v11)
          v12 = ns_object_from_render_object(a5, v11, 0);
        else
          v12 = 0;
        result = objc_msgSend(v9, "addObject:", v12);
        ++v10;
      }
      while (v10 < *(unsigned int *)(v5 + 16));
    }
    if (v9)
    {
      if (*((char *)a4 + 23) >= 0)
        v13 = a4;
      else
        v13 = (uint64_t *)*a4;
      return objc_msgSend(v8, "setValue:forKey:", v9, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v13));
    }
  }
  return result;
}

void *_ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  void *result;

  result = id_from_value<NSArray,CA::Render::Vector *>(*(_QWORD *)(a2 + 120));
  if (result)
    return (void *)objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "keyTimes"));
  return result;
}

void *_ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES8_SA_SD_SM_SP_(void *result, uint64_t a2)
{
  unint64_t v2;
  const CAAnimationCalculationMode *v3;

  v2 = *(unsigned __int8 *)(a2 + 144);
  if (v2 > 4)
    v3 = &kCAAnimationLinear;
  else
    v3 = (const CAAnimationCalculationMode *)off_1E159D4A0[v2];
  if (*v3)
    return (void *)objc_msgSend(result, "setValue:forKey:", *v3, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "calculationMode"));
  return result;
}

void *_ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES8_SA_SD_SM_SP_(void *a1, const char *a2)
{
  int v2;
  const CAAnimationRotationMode *v3;

  v2 = *((_DWORD *)a2 + 3);
  if ((v2 & 0x1000000) != 0)
  {
    v3 = &kCAAnimationRotateAuto;
    return (void *)objc_msgSend(a1, "setRotationMode:", *v3);
  }
  if ((v2 & 0x2000000) != 0)
  {
    v3 = &kCAAnimationRotateAutoReverse;
    return (void *)objc_msgSend(a1, "setRotationMode:", *v3);
  }
  return a1;
}

void *id_from_value<NSArray,CA::Render::Vector *>(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  double *v4;
  double v5;

  if (!a1)
    return 0;
  v2 = *(unsigned int *)(a1 + 16);
  v3 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v2);
  if ((_DWORD)v2)
  {
    v4 = (double *)(a1 + 24);
    do
    {
      v5 = *v4++;
      objc_msgSend(v3, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v5));
      --v2;
    }
    while (v2);
  }
  return v3;
}

CGPath *id_from_value<void,CA::Render::Path *>(uint64_t *a1)
{
  CGPath *Mutable;
  CGPath *v3;
  CGMutablePathRef v5[2];

  v5[1] = *(CGMutablePathRef *)MEMORY[0x1E0C80C00];
  if (!*a1)
    return 0;
  Mutable = CGPathCreateMutable();
  v5[0] = Mutable;
  CA::Render::path_iterate<ReverseSerializationPathIterator>(*a1, v5);
  CGPathRetain(Mutable);
  v3 = Mutable;
  CGPathRelease(Mutable);
  return v3;
}

void sub_1845FDA00(_Unwind_Exception *a1)
{
  const CGPath *v1;

  CGPathRelease(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  void *i;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = *(void **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11)
              v17 %= v11;
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  v18 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_QWORD *)i + 4) = v18;
  *((_QWORD *)i + 5) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v26)
  {
    *(_QWORD *)i = *v26;
LABEL_44:
    *v26 = i;
    goto LABEL_45;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v25 + 8 * v14) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v27 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11)
        v27 %= v11;
    }
    else
    {
      v27 &= v11 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1845FDC54(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", ((unint64_t)*(unsigned int *)(a2 + 12) >> 15) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

CAValueFunction *_ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  CAValueFunction *result;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v4[0] = *(_QWORD *)(a2 + 104);
  result = id_from_value<void,CA::Render::Function *>(v4);
  if (result)
    return (CAValueFunction *)objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "valueFunction"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", ((unint64_t)*(unsigned int *)(a2 + 12) >> 9) & 1);
  if (result)
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "additive"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(unsigned int *)(a2 + 88));
  if (result)
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "highFrameRateReason"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_(void *a1, const char *a2, double a3, double a4, double a5)
{
  LODWORD(a3) = *((_DWORD *)a2 + 6);
  LODWORD(a4) = *((_DWORD *)a2 + 7);
  LODWORD(a5) = *((_DWORD *)a2 + 8);
  return objc_msgSend(a1, "setPreferredFrameRateRange:", a3, a4, a5);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES8_SA_SD_SM_SP_(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setCumulative:", (*((_DWORD *)a2 + 3) >> 10) & 1);
}

void _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  CFStringRef v3;
  CFStringRef v4;

  v3 = CA::Render::key_path_copy_string(*(_QWORD *)(a2 + 96), (void *const *)a2);
  if (v3)
  {
    v4 = v3;
    objc_msgSend(a1, "setKeyPath:", v3);
    CFRelease(v4);
  }
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  void *i;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = *(void **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11)
              v17 %= v11;
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  v18 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_QWORD *)i + 4) = v18;
  *((_QWORD *)i + 5) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v26)
  {
    *(_QWORD *)i = *v26;
LABEL_44:
    *v26 = i;
    goto LABEL_45;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v25 + 8 * v14) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v27 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11)
        v27 %= v11;
    }
    else
    {
      v27 &= v11 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1845FE118(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

CAMediaTimingFunction *_ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_(CAMediaTimingFunction *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  CAMediaTimingFunction *v6;
  uint64_t *v7;

  v4 = *(_QWORD *)(a2 + 48);
  if (v4)
  {
    v6 = result;
    result = nsobject_from_values<CAMediaTimingFunction *,double>((double *)(v4 + 24), *(_DWORD *)(v4 + 16));
    if (result)
    {
      if (*((char *)a4 + 23) >= 0)
        v7 = a4;
      else
        v7 = (uint64_t *)*a4;
      return (CAMediaTimingFunction *)-[CAMediaTimingFunction setValue:forKey:](v6, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = v3;
  result = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v5, "{CAFrameRateRange=fff}");
  if (result)
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "preferredFrameRateRange"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setRemovedOnCompletion:", (*((_DWORD *)a2 + 3) >> 11) & 1);
}

void std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  _QWORD *v18;
  std::string *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2))
            return;
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11)
              v17 %= v11;
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  v18 = operator new(0x30uLL);
  *v18 = 0;
  v18[1] = v10;
  v19 = (std::string *)(v18 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v18[4] = *(_QWORD *)(a3 + 16);
  }
  v18[5] = *(_QWORD *)(a3 + 24);
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v27)
  {
    *v18 = *v27;
LABEL_47:
    *v27 = v18;
    goto LABEL_48;
  }
  *v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v26 + 8 * v14) = a1 + 16;
  if (*v18)
  {
    v28 = *(_QWORD *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_47;
  }
LABEL_48:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1845FE4AC(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEv()
{
  void *__p[2];
  char v2;
  _OWORD v3[2];
  uint64_t v4;
  char __s[256];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  memset(v3, 0, sizeof(v3));
  v4 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)v3, 0x40uLL);
  snake_case_to_camel_case("begin_time", 10, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 842, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("speed", 5, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 843, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("duration", 8, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 844, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("time_offset", 11, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 845, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("autoreverses", 12, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 846, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("fill_mode", 9, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 856, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("repeatDuration", 14, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 860, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("repeatCount", 11, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 864, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table((uint64_t)&_ZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavE10timing_map, (uint64_t *)v3);
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)v3);
}

void sub_1845FEA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void *_ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 5);
  if (v2)
    return (void *)objc_msgSend(a1, "setBeginTime:", *(double *)(v2 + 40));
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2, double a3)
{
  uint64_t v3;

  v3 = *((_QWORD *)a2 + 5);
  if (v3)
  {
    LODWORD(a3) = *(_DWORD *)(v3 + 16);
    return (void *)objc_msgSend(a1, "setSpeed:", a3);
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 5);
  if (v2)
    return (void *)objc_msgSend(a1, "setDuration:", *(double *)(v2 + 32));
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 5);
  if (v2)
    return (void *)objc_msgSend(a1, "setTimeOffset:", *(double *)(v2 + 48));
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 5);
  if (v2)
    return (void *)objc_msgSend(a1, "setAutoreverses:", (*(_DWORD *)(v2 + 12) >> 8) & 1);
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2;
  int v3;
  const CAMediaTimingFillMode *v4;

  v2 = *((_QWORD *)a2 + 5);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 12);
    if ((v3 & 0x200) != 0)
    {
      if ((v3 & 0x400) != 0)
        v4 = &kCAFillModeBoth;
      else
        v4 = &kCAFillModeForwards;
    }
    else
    {
      if ((v3 & 0x400) == 0)
        return a1;
      v4 = &kCAFillModeBackwards;
    }
    return (void *)objc_msgSend(a1, "setFillMode:", *v4);
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 5);
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 13) & 8) != 0)
      return (void *)objc_msgSend(a1, "setRepeatDuration:", *(double *)(v2 + 24));
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2;
  double v3;

  v2 = *((_QWORD *)a2 + 5);
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 13) & 8) == 0)
    {
      v3 = *(double *)(v2 + 24);
      *(float *)&v3 = v3;
      return (void *)objc_msgSend(a1, "setRepeatCount:", v3);
    }
  }
  return a1;
}

uint64_t _ZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE_clEv()
{
  unsigned __int8 v0;
  _QWORD *v1;
  _QWORD *i;
  void *__p[2];
  char v5;
  _OWORD v6[2];
  uint64_t v7;
  void *v8[2];
  __int128 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  memset(v6, 0, sizeof(v6));
  v7 = 1065353216;
  snake_case_to_camel_case("timing_function", 15, (char *)v8);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v8);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v6[0], *((unint64_t *)&v6[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1167, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v8);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v6, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_;
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(v8, "preferredFrameRateRange");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v6[0], *((unint64_t *)&v6[0] + 1), (uint64_t)v8))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1168, "\"Duplicated Entry !!\" && map.map.find (\"preferredFrameRateRange\") == map.map.end ()");
  }
  if (SBYTE7(v9) < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:nn180100]<0>(v8, "preferredFrameRateRange");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v6, (uint64_t)v8, (uint64_t)v8)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_;
  if (SBYTE7(v9) < 0)
    operator delete(v8[0]);
  snake_case_to_camel_case("removed_on_completion", 21, (char *)v8);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v8);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v6[0], *((unint64_t *)&v6[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1171, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v8);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v6, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_;
  if (v5 < 0)
    operator delete(__p[0]);
  v0 = atomic_load((unsigned __int8 *)&_ZGVZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavE10timing_map);
  if ((v0 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavE10timing_map))
  {
    _ZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEv();
    __cxa_guard_release(&_ZGVZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavE10timing_map);
  }
  *(_OWORD *)v8 = 0u;
  v9 = 0u;
  v10 = dword_1EDD13980;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)v8, qword_1EDD13968);
  v1 = (_QWORD *)qword_1EDD13970;
  if (qword_1EDD13970)
  {
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)> const&>((uint64_t)v8, (uint64_t)(v1 + 2), (uint64_t)(v1 + 2));
      v1 = (_QWORD *)*v1;
    }
    while (v1);
  }
  for (i = (_QWORD *)v9; i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)> const&>((uint64_t)v6, (uint64_t)(i + 2), (uint64_t)(i + 2));
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table((uint64_t)&_ZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavE13animation_map, (uint64_t *)v6);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)v8);
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)v6);
}

void sub_1845FEEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  __cxa_guard_abort(&_ZGVZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavE10timing_map);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t _ZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEv()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *i;
  unint64_t v13;
  _QWORD *v14;
  std::string *v15;
  __int128 v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  void *__p[2];
  char v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  void *v33[2];
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v30 = 0u;
  v31 = 0u;
  v32 = 1065353216;
  v0 = qword_1EDD138E0;
  if (qword_1EDD138E0)
  {
    v1 = 0;
    do
    {
      v2 = *(char *)(v0 + 39);
      if (v2 >= 0)
        v3 = (uint64_t *)(v0 + 16);
      else
        v3 = *(uint64_t **)(v0 + 16);
      if (v2 >= 0)
        v4 = *(unsigned __int8 *)(v0 + 39);
      else
        v4 = *(_QWORD *)(v0 + 24);
      v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v3, v4);
      v6 = v5;
      v7 = *((_QWORD *)&v30 + 1);
      if (*((_QWORD *)&v30 + 1))
      {
        v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v30 + 8));
        v8.i16[0] = vaddlv_u8(v8);
        v9 = v8.u32[0];
        if (v8.u32[0] > 1uLL)
        {
          v10 = v5;
          if (v5 >= *((_QWORD *)&v30 + 1))
            v10 = v5 % *((_QWORD *)&v30 + 1);
        }
        else
        {
          v10 = (*((_QWORD *)&v30 + 1) - 1) & v5;
        }
        v11 = *(unsigned __int8 ***)(v30 + 8 * v10);
        if (v11)
        {
          for (i = *v11; i; i = *(unsigned __int8 **)i)
          {
            v13 = *((_QWORD *)i + 1);
            if (v13 == v6)
            {
              if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)(v0 + 16)))
                goto LABEL_51;
            }
            else
            {
              if (v9 > 1)
              {
                if (v13 >= v7)
                  v13 %= v7;
              }
              else
              {
                v13 &= v7 - 1;
              }
              if (v13 != v10)
                break;
            }
          }
        }
      }
      else
      {
        v10 = 0;
      }
      v14 = operator new(0x30uLL);
      *v14 = 0;
      v14[1] = v6;
      v15 = (std::string *)(v14 + 2);
      if (*(char *)(v0 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)(v0 + 16), *(_QWORD *)(v0 + 24));
        v1 = *((_QWORD *)&v31 + 1);
      }
      else
      {
        v16 = *(_OWORD *)(v0 + 16);
        v14[4] = *(_QWORD *)(v0 + 32);
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
      }
      v14[5] = *(_QWORD *)(v0 + 40);
      v17 = (float)(unint64_t)(v1 + 1);
      if (!v7 || (float)(*(float *)&v32 * (float)v7) < v17)
      {
        v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v18 = 1;
        v19 = v18 | (2 * v7);
        v20 = vcvtps_u32_f32(v17 / *(float *)&v32);
        if (v19 <= v20)
          v21 = v20;
        else
          v21 = v19;
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)&v30, v21);
        v7 = *((_QWORD *)&v30 + 1);
        if ((*((_QWORD *)&v30 + 1) & (*((_QWORD *)&v30 + 1) - 1)) != 0)
        {
          if (v6 >= *((_QWORD *)&v30 + 1))
            v10 = v6 % *((_QWORD *)&v30 + 1);
          else
            v10 = v6;
        }
        else
        {
          v10 = (*((_QWORD *)&v30 + 1) - 1) & v6;
        }
      }
      v22 = v30;
      v23 = *(_QWORD **)(v30 + 8 * v10);
      if (v23)
      {
        *v14 = *v23;
      }
      else
      {
        *v14 = v31;
        *(_QWORD *)&v31 = v14;
        *(_QWORD *)(v22 + 8 * v10) = &v31;
        if (!*v14)
          goto LABEL_50;
        v24 = *(_QWORD *)(*v14 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7)
            v24 %= v7;
        }
        else
        {
          v24 &= v7 - 1;
        }
        v23 = (_QWORD *)(v30 + 8 * v24);
      }
      *v23 = v14;
LABEL_50:
      v1 = ++*((_QWORD *)&v31 + 1);
LABEL_51:
      v0 = *(_QWORD *)v0;
    }
    while (v0);
  }
  snake_case_to_camel_case("discretizes_time", 16, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1186, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "valueFunction");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1188, "\"Duplicated Entry !!\" && map.map.find (\"valueFunction\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "valueFunction");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "additive");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1189, "\"Duplicated Entry !!\" && map.map.find (\"additive\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "additive");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "highFrameRateReason");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1190, "\"Duplicated Entry !!\" && map.map.find (\"highFrameRateReason\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "highFrameRateReason");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  snake_case_to_camel_case("preferredFrameRateRangeMinimum", 30, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1197, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFrameRateRangeMaximum");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1198, "\"Duplicated Entry !!\" && map.map.find (\"preferredFrameRateRangeMaximum\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFrameRateRangeMaximum");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFrameRateRangePreferred");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1199, "\"Duplicated Entry !!\" && map.map.find (\"preferredFrameRateRangePreferred\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFrameRateRangePreferred");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  snake_case_to_camel_case("cumulative", 10, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1203, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("property", 8, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1210, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "beginTimeMode");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1214, "\"Duplicated Entry !!\" && map.map.find (\"beginTimeMode\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "beginTimeMode");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE8_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "delegate");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1215, "\"Duplicated Entry !!\" && map.map.find (\"delegate\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "delegate");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE9_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "keyPath");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1216, "\"Duplicated Entry !!\" && map.map.find (\"keyPath\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "keyPath");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE10_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "frameInterval");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1220, "\"Duplicated Entry !!\" && map.map.find (\"frameInterval\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "frameInterval");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE11_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFramesPerSecond");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1221, "\"Duplicated Entry !!\" && map.map.find (\"preferredFramesPerSecond\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(v33[0]);
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFramesPerSecond");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE12_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(v33[0]);
  v25 = v30;
  v30 = 0uLL;
  _ZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavE17property_anim_map = v25;
  xmmword_1EDD13910 = v31;
  dword_1EDD13920 = v32;
  if (*((_QWORD *)&v31 + 1))
  {
    v26 = *(_QWORD *)(v31 + 8);
    if ((*((_QWORD *)&v25 + 1) & (*((_QWORD *)&v25 + 1) - 1)) != 0)
    {
      if (v26 >= *((_QWORD *)&v25 + 1))
        v26 %= *((_QWORD *)&v25 + 1);
    }
    else
    {
      v26 &= *((_QWORD *)&v25 + 1) - 1;
    }
    *(_QWORD *)(v25 + 8 * v26) = &xmmword_1EDD13910;
    v31 = 0uLL;
  }
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&v30);
}

void sub_1845FFAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t _ZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEv()
{
  uint64_t *v0;
  uint64_t v1;
  int v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *i;
  unint64_t v13;
  _QWORD *v14;
  std::string *v15;
  __int128 v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  void *v28[2];
  char v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  void *__p[2];
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v30 = 0u;
  v31 = 0u;
  v32 = 1065353216;
  v0 = (uint64_t *)xmmword_1EDD13910;
  if ((_QWORD)xmmword_1EDD13910)
  {
    v1 = 0;
    do
    {
      v2 = *((char *)v0 + 39);
      if (v2 >= 0)
        v3 = v0 + 2;
      else
        v3 = (uint64_t *)v0[2];
      if (v2 >= 0)
        v4 = *((unsigned __int8 *)v0 + 39);
      else
        v4 = v0[3];
      v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v3, v4);
      v6 = v5;
      v7 = *((_QWORD *)&v30 + 1);
      if (*((_QWORD *)&v30 + 1))
      {
        v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v30 + 8));
        v8.i16[0] = vaddlv_u8(v8);
        v9 = v8.u32[0];
        if (v8.u32[0] > 1uLL)
        {
          v10 = v5;
          if (v5 >= *((_QWORD *)&v30 + 1))
            v10 = v5 % *((_QWORD *)&v30 + 1);
        }
        else
        {
          v10 = (*((_QWORD *)&v30 + 1) - 1) & v5;
        }
        v11 = *(unsigned __int8 ***)(v30 + 8 * v10);
        if (v11)
        {
          for (i = *v11; i; i = *(unsigned __int8 **)i)
          {
            v13 = *((_QWORD *)i + 1);
            if (v13 == v6)
            {
              if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)v0 + 16))
                goto LABEL_51;
            }
            else
            {
              if (v9 > 1)
              {
                if (v13 >= v7)
                  v13 %= v7;
              }
              else
              {
                v13 &= v7 - 1;
              }
              if (v13 != v10)
                break;
            }
          }
        }
      }
      else
      {
        v10 = 0;
      }
      v14 = operator new(0x30uLL);
      *v14 = 0;
      v14[1] = v6;
      v15 = (std::string *)(v14 + 2);
      if (*((char *)v0 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)v0[2], v0[3]);
        v1 = *((_QWORD *)&v31 + 1);
      }
      else
      {
        v16 = *((_OWORD *)v0 + 1);
        v14[4] = v0[4];
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
      }
      v14[5] = v0[5];
      v17 = (float)(unint64_t)(v1 + 1);
      if (!v7 || (float)(*(float *)&v32 * (float)v7) < v17)
      {
        v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v18 = 1;
        v19 = v18 | (2 * v7);
        v20 = vcvtps_u32_f32(v17 / *(float *)&v32);
        if (v19 <= v20)
          v21 = v20;
        else
          v21 = v19;
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)&v30, v21);
        v7 = *((_QWORD *)&v30 + 1);
        if ((*((_QWORD *)&v30 + 1) & (*((_QWORD *)&v30 + 1) - 1)) != 0)
        {
          if (v6 >= *((_QWORD *)&v30 + 1))
            v10 = v6 % *((_QWORD *)&v30 + 1);
          else
            v10 = v6;
        }
        else
        {
          v10 = (*((_QWORD *)&v30 + 1) - 1) & v6;
        }
      }
      v22 = v30;
      v23 = *(_QWORD **)(v30 + 8 * v10);
      if (v23)
      {
        *v14 = *v23;
      }
      else
      {
        *v14 = v31;
        *(_QWORD *)&v31 = v14;
        *(_QWORD *)(v22 + 8 * v10) = &v31;
        if (!*v14)
          goto LABEL_50;
        v24 = *(_QWORD *)(*v14 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7)
            v24 %= v7;
        }
        else
        {
          v24 &= v7 - 1;
        }
        v23 = (_QWORD *)(v30 + 8 * v24);
      }
      *v23 = v14;
LABEL_50:
      v1 = ++*((_QWORD *)&v31 + 1);
LABEL_51:
      v0 = (uint64_t *)*v0;
    }
    while (v0);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "byValue");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1235, "\"Duplicated Entry !!\" && map.map.find (\"byValue\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "byValue");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "fromValue");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1236, "\"Duplicated Entry !!\" && map.map.find (\"fromValue\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "fromValue");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "toValue");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1237, "\"Duplicated Entry !!\" && map.map.find (\"toValue\") == map.map.end ()");
  }
  if (v34 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "toValue");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("end_angle", 9, (char *)__p);
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)__p);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v28))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1238, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(v28[0]);
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)__p);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v28, (uint64_t)v28)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(v28[0]);
  snake_case_to_camel_case("start_angle", 11, (char *)__p);
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)__p);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v28))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1239, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(v28[0]);
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)__p);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v28, (uint64_t)v28)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(v28[0]);
  snake_case_to_camel_case("rounds_to_integer", 17, (char *)__p);
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)__p);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v28))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1242, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0)
    operator delete(v28[0]);
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)__p);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v28, (uint64_t)v28)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0)
    operator delete(v28[0]);
  v25 = v30;
  v30 = 0uLL;
  _ZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavE14basic_anim_map = v25;
  xmmword_1EDD13940 = v31;
  dword_1EDD13950 = v32;
  if (*((_QWORD *)&v31 + 1))
  {
    v26 = *(_QWORD *)(v31 + 8);
    if ((*((_QWORD *)&v25 + 1) & (*((_QWORD *)&v25 + 1) - 1)) != 0)
    {
      if (v26 >= *((_QWORD *)&v25 + 1))
        v26 %= *((_QWORD *)&v25 + 1);
    }
    else
    {
      v26 &= *((_QWORD *)&v25 + 1) - 1;
    }
    *(_QWORD *)(v25 + 8 * v26) = &xmmword_1EDD13940;
    v31 = 0uLL;
  }
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&v30);
}

void sub_18460029C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  void *i;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = *(void **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11)
              v17 %= v11;
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  v18 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_QWORD *)i + 4) = v18;
  *((_QWORD *)i + 5) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v26)
  {
    *(_QWORD *)i = *v26;
LABEL_44:
    *v26 = i;
    goto LABEL_45;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v25 + 8 * v14) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v27 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11)
        v27 %= v11;
    }
    else
    {
      v27 &= v11 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1846005A0(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v6;

  v5 = *(_QWORD *)(a2 + 128);
  if (v5)
  {
    v6 = (void *)result;
    result = ns_object_from_render_object(a5, v5, 0);
    if (result)
      return objc_msgSend(v6, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "byValue"));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v6;

  v5 = *(_QWORD *)(a2 + 112);
  if (v5)
  {
    v6 = (void *)result;
    result = ns_object_from_render_object(a5, v5, 0);
    if (result)
      return objc_msgSend(v6, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "fromValue"));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v6;

  v5 = *(_QWORD *)(a2 + 120);
  if (v5)
  {
    v6 = (void *)result;
    result = ns_object_from_render_object(a5, v5, 0);
    if (result)
      return objc_msgSend(v6, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "toValue"));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a2 + 144));
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a2 + 136));
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SD_SM_SP_(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setRoundsToInteger:", HIBYTE(*((_DWORD *)a2 + 3)) & 1);
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  void *i;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = *(void **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11)
              v17 %= v11;
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  v18 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_QWORD *)i + 4) = v18;
  *((_QWORD *)i + 5) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v26)
  {
    *(_QWORD *)i = *v26;
LABEL_44:
    *v26 = i;
    goto LABEL_45;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v25 + 8 * v14) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v27 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11)
        v27 %= v11;
    }
    else
    {
      v27 &= v11 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_184600A20(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", ((unint64_t)*(unsigned int *)(a2 + 12) >> 15) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

CAValueFunction *_ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  CAValueFunction *result;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v4[0] = *(_QWORD *)(a2 + 104);
  result = id_from_value<void,CA::Render::Function *>(v4);
  if (result)
    return (CAValueFunction *)objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "valueFunction"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", ((unint64_t)*(unsigned int *)(a2 + 12) >> 9) & 1);
  if (result)
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "additive"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(unsigned int *)(a2 + 88));
  if (result)
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "highFrameRateReason"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_(void *a1, const char *a2, double a3, double a4, double a5)
{
  LODWORD(a3) = *((_DWORD *)a2 + 6);
  LODWORD(a4) = *((_DWORD *)a2 + 7);
  LODWORD(a5) = *((_DWORD *)a2 + 8);
  return objc_msgSend(a1, "setPreferredFrameRateRange:", a3, a4, a5);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES8_SA_SD_SM_SP_(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setCumulative:", (*((_DWORD *)a2 + 3) >> 10) & 1);
}

void _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  CFStringRef v3;
  CFStringRef v4;

  v3 = CA::Render::key_path_copy_string(*(_QWORD *)(a2 + 96), (void *const *)a2);
  if (v3)
  {
    v4 = v3;
    objc_msgSend(a1, "setKeyPath:", v3);
    CFRelease(v4);
  }
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  void *i;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = *(void **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11)
              v17 %= v11;
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  v18 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_QWORD *)i + 4) = v18;
  *((_QWORD *)i + 5) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v26)
  {
    *(_QWORD *)i = *v26;
LABEL_44:
    *v26 = i;
    goto LABEL_45;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v25 + 8 * v14) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v27 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11)
        v27 %= v11;
    }
    else
    {
      v27 &= v11 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_184600EE4(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

CAMediaTimingFunction *_ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_(CAMediaTimingFunction *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  CAMediaTimingFunction *v6;
  uint64_t *v7;

  v4 = *(_QWORD *)(a2 + 48);
  if (v4)
  {
    v6 = result;
    result = nsobject_from_values<CAMediaTimingFunction *,double>((double *)(v4 + 24), *(_DWORD *)(v4 + 16));
    if (result)
    {
      if (*((char *)a4 + 23) >= 0)
        v7 = a4;
      else
        v7 = (uint64_t *)*a4;
      return (CAMediaTimingFunction *)-[CAMediaTimingFunction setValue:forKey:](v6, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = v3;
  result = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v5, "{CAFrameRateRange=fff}");
  if (result)
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "preferredFrameRateRange"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setRemovedOnCompletion:", (*((_DWORD *)a2 + 3) >> 11) & 1);
}

void std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  _QWORD *v18;
  std::string *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2))
            return;
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11)
              v17 %= v11;
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  v18 = operator new(0x30uLL);
  *v18 = 0;
  v18[1] = v10;
  v19 = (std::string *)(v18 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v18[4] = *(_QWORD *)(a3 + 16);
  }
  v18[5] = *(_QWORD *)(a3 + 24);
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v27)
  {
    *v18 = *v27;
LABEL_47:
    *v27 = v18;
    goto LABEL_48;
  }
  *v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v26 + 8 * v14) = a1 + 16;
  if (*v18)
  {
    v28 = *(_QWORD *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_47;
  }
LABEL_48:
  ++*(_QWORD *)(a1 + 24);
}

void sub_184601278(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEv()
{
  void *__p[2];
  char v2;
  _OWORD v3[2];
  uint64_t v4;
  char __s[256];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  memset(v3, 0, sizeof(v3));
  v4 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)v3, 0x40uLL);
  snake_case_to_camel_case("begin_time", 10, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 842, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("speed", 5, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 843, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("duration", 8, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 844, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("time_offset", 11, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 845, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("autoreverses", 12, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 846, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("fill_mode", 9, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 856, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("repeatDuration", 14, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 860, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("repeatCount", 11, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 864, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table((uint64_t)&_ZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavE10timing_map, (uint64_t *)v3);
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)v3);
}

void sub_184601800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void *_ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 5);
  if (v2)
    return (void *)objc_msgSend(a1, "setBeginTime:", *(double *)(v2 + 40));
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2, double a3)
{
  uint64_t v3;

  v3 = *((_QWORD *)a2 + 5);
  if (v3)
  {
    LODWORD(a3) = *(_DWORD *)(v3 + 16);
    return (void *)objc_msgSend(a1, "setSpeed:", a3);
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 5);
  if (v2)
    return (void *)objc_msgSend(a1, "setDuration:", *(double *)(v2 + 32));
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 5);
  if (v2)
    return (void *)objc_msgSend(a1, "setTimeOffset:", *(double *)(v2 + 48));
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 5);
  if (v2)
    return (void *)objc_msgSend(a1, "setAutoreverses:", (*(_DWORD *)(v2 + 12) >> 8) & 1);
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2;
  int v3;
  const CAMediaTimingFillMode *v4;

  v2 = *((_QWORD *)a2 + 5);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 12);
    if ((v3 & 0x200) != 0)
    {
      if ((v3 & 0x400) != 0)
        v4 = &kCAFillModeBoth;
      else
        v4 = &kCAFillModeForwards;
    }
    else
    {
      if ((v3 & 0x400) == 0)
        return a1;
      v4 = &kCAFillModeBackwards;
    }
    return (void *)objc_msgSend(a1, "setFillMode:", *v4);
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 5);
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 13) & 8) != 0)
      return (void *)objc_msgSend(a1, "setRepeatDuration:", *(double *)(v2 + 24));
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2;
  double v3;

  v2 = *((_QWORD *)a2 + 5);
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 13) & 8) == 0)
    {
      v3 = *(double *)(v2 + 24);
      *(float *)&v3 = v3;
      return (void *)objc_msgSend(a1, "setRepeatCount:", v3);
    }
  }
  return a1;
}

void ___Z20get_setters_for_typeIN2CA6Render6FilterEERKDav_block_invoke()
{
  void *__p[2];
  char v1;
  void *v2[2];
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(vcvtps_u32_f32(8.0 / *(float *)&dword_1EDD137B0));
  snake_case_to_camel_case("name", 4, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1149, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavEUb_ENUlP8CAFilterPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(v2, "enabled");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v2))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1150, "\"Duplicated Entry !!\" && map.map.find (\"enabled\") == map.map.end ()");
  if (v3 < 0)
    operator delete(v2[0]);
  std::string::basic_string[abi:nn180100]<0>(v2, "enabled");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v2, (uint64_t)v2)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavEUb_ENUlP8CAFilterPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0)
    operator delete(v2[0]);
  snake_case_to_camel_case("accessibility", 13, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1153, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavEUb_ENUlP8CAFilterPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("caches_input_image", 18, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1156, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavEUb_ENUlP8CAFilterPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("inputs", 6, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1157, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavEUb_ENUlP8CAFilterPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_184601CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(size_t __n)
{
  size_t prime;
  size_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD **v6;
  size_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *i;
  size_t v13;
  void *v14;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v2 = *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1);
  if (prime <= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1))
  {
    if (prime >= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1))
      return;
    v9 = vcvtps_u32_f32((float)(unint64_t)qword_1EDD137A8 / *(float *)&dword_1EDD137B0);
    if (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1) < 3uLL
      || (v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8)),
          v10.i16[0] = vaddlv_u8(v10),
          v10.u32[0] > 1uLL))
    {
      v9 = std::__next_prime(v9);
    }
    else
    {
      v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2)
        v9 = v11;
    }
    if (prime <= v9)
      prime = v9;
    if (prime >= v2)
      return;
    if (!prime)
    {
      v14 = (void *)_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map;
      *(_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map = 0;
      if (v14)
        operator delete(v14);
      *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v3 = operator new(8 * prime);
  v4 = (void *)_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map;
  *(_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map = v3;
  if (v4)
    operator delete(v4);
  v5 = 0;
  *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1) = prime;
  do
    *(_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8 * v5++) = 0;
  while (prime != v5);
  v6 = (_QWORD **)qword_1EDD137A0;
  if (qword_1EDD137A0)
  {
    v7 = *(_QWORD *)(qword_1EDD137A0 + 8);
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= prime)
        v7 %= prime;
    }
    else
    {
      v7 &= prime - 1;
    }
    *(_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8 * v7) = &qword_1EDD137A0;
    for (i = *v6; i; v7 = v13)
    {
      v13 = i[1];
      if (v8.u32[0] > 1uLL)
      {
        if (v13 >= prime)
          v13 %= prime;
      }
      else
      {
        v13 &= prime - 1;
      }
      if (v13 != v7)
      {
        if (!*(_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8 * v13))
        {
          *(_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8 * v13) = v6;
          goto LABEL_31;
        }
        *v6 = (_QWORD *)*i;
        *i = **(_QWORD **)(_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8 * v13);
        **(_QWORD **)(_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8 * v13) = i;
        i = v6;
      }
      v13 = v7;
LABEL_31:
      v6 = (_QWORD **)i;
      i = (_QWORD *)*i;
    }
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(uint64_t a1)
{
  unsigned __int8 *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v1 = (unsigned __int8 *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(_QWORD *)a1;
    v3 = v2;
  }
  v4 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v3);
  v5 = *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1);
  if (!*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1))
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8));
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1))
      v9 = v4 % *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1);
  }
  else
  {
    v9 = (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1) - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v12 == v6)
    {
      if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, v1))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= v5)
          v12 %= v5;
      }
      else
      {
        v12 &= v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  void **v12;
  void *i;
  unint64_t v14;
  uint64_t v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v3 = (unsigned __int8 *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(_QWORD *)a1;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v5);
  v7 = v6;
  v8 = *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1);
  if (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1))
  {
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8));
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v11 = v6;
      if (v6 >= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1))
        v11 = v6 % *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1);
    }
    else
    {
      v11 = (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1) - 1) & v6;
    }
    v12 = *(void ***)(_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8 * v11);
    if (v12)
    {
      for (i = *v12; i; i = *(void **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v7)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, v3))
            return i;
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= v8)
              v14 %= v8;
          }
          else
          {
            v14 &= v8 - 1;
          }
          if (v14 != v11)
            break;
        }
      }
    }
  }
  else
  {
    v11 = 0;
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v7;
  *((_OWORD *)i + 1) = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *((_QWORD *)i + 4) = v15;
  *((_QWORD *)i + 5) = 0;
  v16 = (float)(unint64_t)(qword_1EDD137A8 + 1);
  if (!v8 || (float)(*(float *)&dword_1EDD137B0 * (float)v8) < v16)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v16 / *(float *)&dword_1EDD137B0);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(v20);
    v8 = *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1))
        v11 = v7 % *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1);
      else
        v11 = v7;
    }
    else
    {
      v11 = (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1) - 1) & v7;
    }
  }
  v21 = _ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map;
  v22 = *(_QWORD **)(_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8 * v11);
  if (v22)
  {
    *(_QWORD *)i = *v22;
LABEL_41:
    *v22 = i;
    goto LABEL_42;
  }
  *(_QWORD *)i = qword_1EDD137A0;
  qword_1EDD137A0 = (uint64_t)i;
  *(_QWORD *)(v21 + 8 * v11) = &qword_1EDD137A0;
  if (*(_QWORD *)i)
  {
    v23 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8 * v23);
    goto LABEL_41;
  }
LABEL_42:
  ++qword_1EDD137A8;
  return i;
}

void sub_1846022B4(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavEUb_ENUlP8CAFilterPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES7_S9_SC_SL_SO_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  void *v6;
  uint64_t *v7;

  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    v6 = (void *)result;
    result = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v4 + 28);
    if (result)
    {
      if (*((char *)a4 + 23) >= 0)
        v7 = a4;
      else
        v7 = (uint64_t *)*a4;
      return objc_msgSend(v6, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavEUb_ENUlP8CAFilterPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", ((unint64_t)*(unsigned int *)(a2 + 12) >> 8) & 1);
  if (result)
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "enabled"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavEUb_ENUlP8CAFilterPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES7_S9_SC_SL_SO_(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setAccessibility:", (*((_DWORD *)a2 + 3) >> 17) & 1);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavEUb_ENUlP8CAFilterPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES7_S9_SC_SL_SO_(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setCachesInputImage:", (*((_DWORD *)a2 + 3) >> 9) & 1);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavEUb_ENUlP8CAFilterPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES7_S9_SC_SL_SO_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, CGColorSpace **a5)
{
  uint64_t v5;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  const __CFString *String;
  CASpringAnimation *v11;

  v5 = *(_QWORD *)(a2 + 40);
  if (v5 && *(_DWORD *)(v5 + 16))
  {
    v7 = (void *)result;
    v8 = 0;
    v9 = v5 + 24;
    do
    {
      String = CAAtomGetString(*(_DWORD *)(*(_QWORD *)(v9 + 8 * v8) + 16));
      v11 = ns_object_from_render_object(a5, *(_QWORD *)(*(_QWORD *)(v9 + 8 * v8) + 24), (const char *)objc_msgSend((id)objc_msgSend(v7, "CAMLTypeForKey:", String), "UTF8String"));
      if (!v11)
        __assert_rtn("set_filter_inputs", "CAReverseSerialization.mm", 808, "input_value != nil");
      result = objc_msgSend(v7, "setValue:forKey:", v11, String);
      ++v8;
    }
    while (v8 < *(unsigned int *)(v5 + 16));
  }
  return result;
}

uint64_t id_from_value<CATransform3D,CA::Render::Vector *>(uint64_t result)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[8];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    if (*(_DWORD *)(result + 16) <= 0xFu)
      __assert_rtn("nsobject_from_values", "CAReverseSerialization.mm", 258, "count >= 16");
    v1 = *(_OWORD *)(result + 40);
    v2 = *(_OWORD *)(result + 56);
    v3 = *(_OWORD *)(result + 72);
    v4 = *(_OWORD *)(result + 88);
    v5 = *(_OWORD *)(result + 104);
    v6 = *(_OWORD *)(result + 120);
    v7 = *(_OWORD *)(result + 136);
    v8[0] = *(_OWORD *)(result + 24);
    v8[1] = v1;
    v8[2] = v2;
    v8[3] = v3;
    v8[4] = v4;
    v8[5] = v5;
    v8[6] = v6;
    v8[7] = v7;
    return objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCATransform3D:", v8);
  }
  return result;
}

uint64_t id_from_value<void,CA::Render::ImageFilter>(unsigned int a1)
{
  if (a1 > 0xB)
    return 0;
  else
    return (uint64_t)*(&off_1E15ABD30 + (int)a1);
}

void *id_from_value<void,CA::Render::TypedArray<CA::Render::Filter> *>(uint64_t a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  CAFilter *v8;

  if (!*a2)
    return 0;
  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *(unsigned int *)(*a2 + 16));
  v5 = *a2;
  if (*(_DWORD *)(*a2 + 16))
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6 + 24);
      if (v7)
        v8 = filter_from_render_filter(a1, v7);
      else
        v8 = 0;
      objc_msgSend(v4, "addObject:", v8);
      ++v6;
      v5 = *a2;
    }
    while (v6 < *(unsigned int *)(*a2 + 16));
  }
  return v4;
}

uint64_t id_from_value<CGRect,CA::Render::Vector *>(uint64_t result)
{
  float64x2_t v1;
  _OWORD v2[2];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    if (*(_DWORD *)(result + 16) <= 3u)
      __assert_rtn("id_from_value", "CAReverseSerialization.mm", 316, "count >= 4");
    v1 = vsubq_f64(*(float64x2_t *)(result + 40), *(float64x2_t *)(result + 24));
    v2[0] = *(_OWORD *)(result + 24);
    v2[1] = v1;
    return objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v2, "{CGRect={CGPoint=dd}{CGSize=dd}}");
  }
  return result;
}

uint64_t _ZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEv()
{
  void *__p[2];
  char v2;
  _OWORD v3[2];
  uint64_t v4;
  char __s[256];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  memset(v3, 0, sizeof(v3));
  v4 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)v3, 0x40uLL);
  snake_case_to_camel_case("begin_time", 10, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 842, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES6_S8_S8_SH_SK_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("speed", 5, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 843, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES6_S8_S8_SH_SK_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("duration", 8, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 844, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES6_S8_S8_SH_SK_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("time_offset", 11, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 845, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES6_S8_S8_SH_SK_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("autoreverses", 12, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 846, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES6_S8_S8_SH_SK_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("fill_mode", 9, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 856, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES6_S8_S8_SH_SK_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("repeatDuration", 14, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 860, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES6_S8_S8_SH_SK_;
  if (v2 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("repeatCount", 11, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 864, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES6_S8_S8_SH_SK_;
  if (v2 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table((uint64_t)&_ZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavE10timing_map, (uint64_t *)v3);
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)v3);
}

void sub_184602BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void *_ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES6_S8_S8_SH_SK_(void *a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)a2 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      return (void *)objc_msgSend(a1, "setBeginTime:", *(double *)(v3 + 40));
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES6_S8_S8_SH_SK_(void *a1, const char *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)a2 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      LODWORD(a3) = *(_DWORD *)(v4 + 16);
      return (void *)objc_msgSend(a1, "setSpeed:", a3);
    }
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES6_S8_S8_SH_SK_(void *a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)a2 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      return (void *)objc_msgSend(a1, "setDuration:", *(double *)(v3 + 32));
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES6_S8_S8_SH_SK_(void *a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)a2 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      return (void *)objc_msgSend(a1, "setTimeOffset:", *(double *)(v3 + 48));
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES6_S8_S8_SH_SK_(void *a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)a2 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      return (void *)objc_msgSend(a1, "setAutoreverses:", (*(_DWORD *)(v3 + 12) >> 8) & 1);
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES6_S8_S8_SH_SK_(void *a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  const CAMediaTimingFillMode *v5;

  v2 = *((_QWORD *)a2 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_DWORD *)(v3 + 12);
      if ((v4 & 0x200) != 0)
      {
        if ((v4 & 0x400) != 0)
          v5 = &kCAFillModeBoth;
        else
          v5 = &kCAFillModeForwards;
      }
      else
      {
        if ((v4 & 0x400) == 0)
          return a1;
        v5 = &kCAFillModeBackwards;
      }
      return (void *)objc_msgSend(a1, "setFillMode:", *v5);
    }
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES6_S8_S8_SH_SK_(void *a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)a2 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if ((*(_BYTE *)(v3 + 13) & 8) != 0)
        return (void *)objc_msgSend(a1, "setRepeatDuration:", *(double *)(v3 + 24));
    }
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES6_S8_S8_SH_SK_(void *a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;

  v2 = *((_QWORD *)a2 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if ((*(_BYTE *)(v3 + 13) & 8) == 0)
      {
        v4 = *(double *)(v3 + 24);
        *(float *)&v4 = v4;
        return (void *)objc_msgSend(a1, "setRepeatCount:", v4);
      }
    }
  }
  return a1;
}

void ___Z20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDav_block_invoke()
{
  void *v0[2];
  char v1;
  void *__p[2];
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(vcvtps_u32_f32(16.0 / *(float *)&dword_1EDD138B8));
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceAlphaOffset");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1451, "\"Duplicated Entry !!\" && map.map.find (\"instanceAlphaOffset\") == map.map.end ()");
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceAlphaOffset");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceBlueOffset");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1452, "\"Duplicated Entry !!\" && map.map.find (\"instanceBlueOffset\") == map.map.end ()");
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceBlueOffset");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceCount");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1453, "\"Duplicated Entry !!\" && map.map.find (\"instanceCount\") == map.map.end ()");
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceCount");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceDelay");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1454, "\"Duplicated Entry !!\" && map.map.find (\"instanceDelay\") == map.map.end ()");
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceDelay");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceGreenOffset");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1455, "\"Duplicated Entry !!\" && map.map.find (\"instanceGreenOffset\") == map.map.end ()");
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceGreenOffset");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceRedOffset");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1456, "\"Duplicated Entry !!\" && map.map.find (\"instanceRedOffset\") == map.map.end ()");
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceRedOffset");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceColor");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1457, "\"Duplicated Entry !!\" && map.map.find (\"instanceColor\") == map.map.end ()");
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceColor");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceTransform");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1458, "\"Duplicated Entry !!\" && map.map.find (\"instanceTransform\") == map.map.end ()");
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceTransform");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("preserves_depth", 15, (char *)__p);
  std::string::basic_string[abi:nn180100]<0>(v0, (char *)__p);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v0))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1462, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(v0[0]);
  std::string::basic_string[abi:nn180100]<0>(v0, (char *)__p);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v0, (uint64_t)v0)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(v0[0]);
}

void sub_18460331C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(size_t __n)
{
  size_t prime;
  size_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD **v6;
  size_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *i;
  size_t v13;
  void *v14;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v2 = *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1);
  if (prime <= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1))
  {
    if (prime >= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1))
      return;
    v9 = vcvtps_u32_f32((float)(unint64_t)qword_1EDD138B0 / *(float *)&dword_1EDD138B8);
    if (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1) < 3uLL
      || (v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3
                                               + 8)),
          v10.i16[0] = vaddlv_u8(v10),
          v10.u32[0] > 1uLL))
    {
      v9 = std::__next_prime(v9);
    }
    else
    {
      v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2)
        v9 = v11;
    }
    if (prime <= v9)
      prime = v9;
    if (prime >= v2)
      return;
    if (!prime)
    {
      v14 = (void *)_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3;
      *(_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 = 0;
      if (v14)
        operator delete(v14);
      *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v3 = operator new(8 * prime);
  v4 = (void *)_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3;
  *(_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 = v3;
  if (v4)
    operator delete(v4);
  v5 = 0;
  *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1) = prime;
  do
    *(_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 8 * v5++) = 0;
  while (prime != v5);
  v6 = (_QWORD **)qword_1EDD138A8;
  if (qword_1EDD138A8)
  {
    v7 = *(_QWORD *)(qword_1EDD138A8 + 8);
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= prime)
        v7 %= prime;
    }
    else
    {
      v7 &= prime - 1;
    }
    *(_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 8 * v7) = &qword_1EDD138A8;
    for (i = *v6; i; v7 = v13)
    {
      v13 = i[1];
      if (v8.u32[0] > 1uLL)
      {
        if (v13 >= prime)
          v13 %= prime;
      }
      else
      {
        v13 &= prime - 1;
      }
      if (v13 != v7)
      {
        if (!*(_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 8 * v13))
        {
          *(_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 8 * v13) = v6;
          goto LABEL_31;
        }
        *v6 = (_QWORD *)*i;
        *i = **(_QWORD **)(_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 8 * v13);
        **(_QWORD **)(_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 8 * v13) = i;
        i = v6;
      }
      v13 = v7;
LABEL_31:
      v6 = (_QWORD **)i;
      i = (_QWORD *)*i;
    }
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(uint64_t a1)
{
  unsigned __int8 *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v1 = (unsigned __int8 *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(_QWORD *)a1;
    v3 = v2;
  }
  v4 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v3);
  v5 = *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1);
  if (!*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1))
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 8));
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1))
      v9 = v4 % *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1);
  }
  else
  {
    v9 = (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1) - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v12 == v6)
    {
      if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, v1))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= v5)
          v12 %= v5;
      }
      else
      {
        v12 &= v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  void **v12;
  void *i;
  unint64_t v14;
  uint64_t v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v3 = (unsigned __int8 *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(_QWORD *)a1;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v5);
  v7 = v6;
  v8 = *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1);
  if (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1))
  {
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3
                                        + 8));
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v11 = v6;
      if (v6 >= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1))
        v11 = v6 % *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1);
    }
    else
    {
      v11 = (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1) - 1) & v6;
    }
    v12 = *(void ***)(_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 8 * v11);
    if (v12)
    {
      for (i = *v12; i; i = *(void **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v7)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, v3))
            return i;
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= v8)
              v14 %= v8;
          }
          else
          {
            v14 &= v8 - 1;
          }
          if (v14 != v11)
            break;
        }
      }
    }
  }
  else
  {
    v11 = 0;
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v7;
  *((_OWORD *)i + 1) = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *((_QWORD *)i + 4) = v15;
  *((_QWORD *)i + 5) = 0;
  v16 = (float)(unint64_t)(qword_1EDD138B0 + 1);
  if (!v8 || (float)(*(float *)&dword_1EDD138B8 * (float)v8) < v16)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v16 / *(float *)&dword_1EDD138B8);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(v20);
    v8 = *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1))
        v11 = v7 % *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1);
      else
        v11 = v7;
    }
    else
    {
      v11 = (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1) - 1) & v7;
    }
  }
  v21 = _ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3;
  v22 = *(_QWORD **)(_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 8 * v11);
  if (v22)
  {
    *(_QWORD *)i = *v22;
LABEL_41:
    *v22 = i;
    goto LABEL_42;
  }
  *(_QWORD *)i = qword_1EDD138A8;
  qword_1EDD138A8 = (uint64_t)i;
  *(_QWORD *)(v21 + 8 * v11) = &qword_1EDD138A8;
  if (*(_QWORD *)i)
  {
    v23 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 8 * v23);
    goto LABEL_41;
  }
LABEL_42:
  ++qword_1EDD138B0;
  return i;
}

void sub_184603904(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t result;
  double v4;
  double *v5;
  int v6;
  _BYTE v7[32];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 314;
  v5 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, _BYTE *, double **))(*(_QWORD *)a2 + 136))(a2, 1, &v6, 4, v7, &v5);
  if (result == 1)
  {
    v4 = *v5;
    *(float *)&v4 = *v5;
    return objc_msgSend(a1, "setInstanceAlphaOffset:", v4);
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t result;
  double v4;
  double *v5;
  int v6;
  _BYTE v7[32];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 315;
  v5 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, _BYTE *, double **))(*(_QWORD *)a2 + 136))(a2, 1, &v6, 4, v7, &v5);
  if (result == 1)
  {
    v4 = *v5;
    *(float *)&v4 = *v5;
    return objc_msgSend(a1, "setInstanceBlueOffset:", v4);
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t result;
  double *v4;
  int v5;
  _BYTE v6[32];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5 = 317;
  v4 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, _BYTE *, double **))(*(_QWORD *)a2 + 136))(a2, 1, &v5, 4, v6, &v4);
  if (result == 1)
    return objc_msgSend(a1, "setInstanceCount:", (uint64_t)*v4);
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t result;
  double *v4;
  int v5;
  _BYTE v6[32];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5 = 318;
  v4 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, _BYTE *, double **))(*(_QWORD *)a2 + 136))(a2, 1, &v5, 4, v6, &v4);
  if (result == 1)
    return objc_msgSend(a1, "setInstanceDelay:", *v4);
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t result;
  double v4;
  double *v5;
  int v6;
  _BYTE v7[32];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 319;
  v5 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, _BYTE *, double **))(*(_QWORD *)a2 + 136))(a2, 1, &v6, 4, v7, &v5);
  if (result == 1)
  {
    v4 = *v5;
    *(float *)&v4 = *v5;
    return objc_msgSend(a1, "setInstanceGreenOffset:", v4);
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t result;
  double v4;
  double *v5;
  int v6;
  _BYTE v7[32];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 320;
  v5 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, _BYTE *, double **))(*(_QWORD *)a2 + 136))(a2, 1, &v6, 4, v7, &v5);
  if (result == 1)
  {
    v4 = *v5;
    *(float *)&v4 = *v5;
    return objc_msgSend(a1, "setInstanceRedOffset:", v4);
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, CGColorSpace **a5)
{
  uint64_t result;
  double *v8;
  int v9;
  _BYTE v10[32];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9 = 316;
  v8 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, _BYTE *, double **))(*(_QWORD *)a2 + 136))(a2, 1, &v9, 4, v10, &v8);
  if (result == 4)
    return objc_msgSend(a1, "setInstanceColor:", cg_color_from_values<double const*>(v8, *a5));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[8];
  _OWORD *v9;
  int v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10 = 321;
  v9 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, _BYTE *, _OWORD **))(*(_QWORD *)a2 + 136))(a2, 1, &v10, 16, v11, &v9);
  if (result == 16)
  {
    v4 = v9[1];
    v8[0] = *v9;
    v8[1] = v4;
    v5 = v9[3];
    v8[2] = v9[2];
    v8[3] = v5;
    v6 = v9[5];
    v8[4] = v9[4];
    v8[5] = v6;
    v7 = v9[7];
    v8[6] = v9[6];
    v8[7] = v7;
    return objc_msgSend(a1, "setInstanceTransform:", v8);
  }
  return result;
}

void *_ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES7_S9_SC_SL_SO_(void *a1, const char *a2, uint64_t a3)
{
  if ((*(_BYTE *)(a3 + 13) & 1) != 0)
    return (void *)objc_msgSend(a1, "setPreservesDepth:", 1);
  return a1;
}

void ___Z20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDav_block_invoke()
{
  void *__p[2];
  char v1;
  void *v2[2];
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(vcvtps_u32_f32(32.0 / *(float *)&dword_1EDD13880));
  snake_case_to_camel_case("group_namespace", 15, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1414, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("allows_in_place_filtering", 25, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1416, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("backdrop_rect", 13, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1417, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("capture_only", 12, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1418, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("group_name", 10, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1419, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("ignores_screen_clip", 19, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1420, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("margin_width", 12, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1421, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("reduces_capture_bit_depth", 25, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1422, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("scale", 5, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1423, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("zoom", 4, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1424, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE8_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(v2, "enabled");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v2))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1426, "\"Duplicated Entry !!\" && map.map.find (\"enabled\") == map.map.end ()");
  if (v3 < 0)
    operator delete(v2[0]);
  std::string::basic_string[abi:nn180100]<0>(v2, "enabled");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v2, (uint64_t)v2)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE9_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0)
    operator delete(v2[0]);
  std::string::basic_string[abi:nn180100]<0>(v2, "tracksLuma");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v2))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1427, "\"Duplicated Entry !!\" && map.map.find (\"tracksLuma\") == map.map.end ()");
  if (v3 < 0)
    operator delete(v2[0]);
  std::string::basic_string[abi:nn180100]<0>(v2, "tracksLuma");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v2, (uint64_t)v2)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE10_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0)
    operator delete(v2[0]);
  std::string::basic_string[abi:nn180100]<0>(v2, "bleedAmount");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v2))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1429, "\"Duplicated Entry !!\" && map.map.find (\"bleedAmount\") == map.map.end ()");
  if (v3 < 0)
    operator delete(v2[0]);
  std::string::basic_string[abi:nn180100]<0>(v2, "bleedAmount");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v2, (uint64_t)v2)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE11_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0)
    operator delete(v2[0]);
  std::string::basic_string[abi:nn180100]<0>(v2, "delegate");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v2))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1430, "\"Duplicated Entry !!\" && map.map.find (\"delegate\") == map.map.end ()");
  if (v3 < 0)
    operator delete(v2[0]);
  std::string::basic_string[abi:nn180100]<0>(v2, "delegate");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v2, (uint64_t)v2)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE12_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0)
    operator delete(v2[0]);
  std::string::basic_string[abi:nn180100]<0>(v2, "disablesOccludedBackdropBlurs");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v2))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1431, "\"Duplicated Entry !!\" && map.map.find (\"disablesOccludedBackdropBlurs\") == map.map.end ()");
  if (v3 < 0)
    operator delete(v2[0]);
  std::string::basic_string[abi:nn180100]<0>(v2, "disablesOccludedBackdropBlurs");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v2, (uint64_t)v2)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE13_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0)
    operator delete(v2[0]);
  std::string::basic_string[abi:nn180100]<0>(v2, "ignoresOffscreenGroups");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v2))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1432, "\"Duplicated Entry !!\" && map.map.find (\"ignoresOffscreenGroups\") == map.map.end ()");
  if (v3 < 0)
    operator delete(v2[0]);
  std::string::basic_string[abi:nn180100]<0>(v2, "ignoresOffscreenGroups");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v2, (uint64_t)v2)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE14_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0)
    operator delete(v2[0]);
  std::string::basic_string[abi:nn180100]<0>(v2, "substituteColor");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v2))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1433, "\"Duplicated Entry !!\" && map.map.find (\"substituteColor\") == map.map.end ()");
  if (v3 < 0)
    operator delete(v2[0]);
  std::string::basic_string[abi:nn180100]<0>(v2, "substituteColor");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v2, (uint64_t)v2)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE15_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0)
    operator delete(v2[0]);
  std::string::basic_string[abi:nn180100]<0>(v2, "usesGlobalGroupNamespace");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v2))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1434, "\"Duplicated Entry !!\" && map.map.find (\"usesGlobalGroupNamespace\") == map.map.end ()");
  if (v3 < 0)
    operator delete(v2[0]);
  std::string::basic_string[abi:nn180100]<0>(v2, "usesGlobalGroupNamespace");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v2, (uint64_t)v2)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE16_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_18460489C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(size_t __n)
{
  size_t prime;
  size_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD **v6;
  size_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *i;
  size_t v13;
  void *v14;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v2 = *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1);
  if (prime <= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1))
  {
    if (prime >= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1))
      return;
    v9 = vcvtps_u32_f32((float)(unint64_t)qword_1EDD13878 / *(float *)&dword_1EDD13880);
    if (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1) < 3uLL
      || (v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2
                                               + 8)),
          v10.i16[0] = vaddlv_u8(v10),
          v10.u32[0] > 1uLL))
    {
      v9 = std::__next_prime(v9);
    }
    else
    {
      v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2)
        v9 = v11;
    }
    if (prime <= v9)
      prime = v9;
    if (prime >= v2)
      return;
    if (!prime)
    {
      v14 = (void *)_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2;
      *(_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 = 0;
      if (v14)
        operator delete(v14);
      *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v3 = operator new(8 * prime);
  v4 = (void *)_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2;
  *(_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 = v3;
  if (v4)
    operator delete(v4);
  v5 = 0;
  *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1) = prime;
  do
    *(_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 8 * v5++) = 0;
  while (prime != v5);
  v6 = (_QWORD **)qword_1EDD13870;
  if (qword_1EDD13870)
  {
    v7 = *(_QWORD *)(qword_1EDD13870 + 8);
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= prime)
        v7 %= prime;
    }
    else
    {
      v7 &= prime - 1;
    }
    *(_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 8 * v7) = &qword_1EDD13870;
    for (i = *v6; i; v7 = v13)
    {
      v13 = i[1];
      if (v8.u32[0] > 1uLL)
      {
        if (v13 >= prime)
          v13 %= prime;
      }
      else
      {
        v13 &= prime - 1;
      }
      if (v13 != v7)
      {
        if (!*(_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 8 * v13))
        {
          *(_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 8 * v13) = v6;
          goto LABEL_31;
        }
        *v6 = (_QWORD *)*i;
        *i = **(_QWORD **)(_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 8 * v13);
        **(_QWORD **)(_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 8 * v13) = i;
        i = v6;
      }
      v13 = v7;
LABEL_31:
      v6 = (_QWORD **)i;
      i = (_QWORD *)*i;
    }
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(uint64_t a1)
{
  unsigned __int8 *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v1 = (unsigned __int8 *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(_QWORD *)a1;
    v3 = v2;
  }
  v4 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v3);
  v5 = *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1);
  if (!*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1))
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 8));
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1))
      v9 = v4 % *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1);
  }
  else
  {
    v9 = (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1) - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v12 == v6)
    {
      if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, v1))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= v5)
          v12 %= v5;
      }
      else
      {
        v12 &= v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  void **v12;
  void *i;
  unint64_t v14;
  uint64_t v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v3 = (unsigned __int8 *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(_QWORD *)a1;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v5);
  v7 = v6;
  v8 = *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1);
  if (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1))
  {
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 8));
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v11 = v6;
      if (v6 >= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1))
        v11 = v6 % *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1);
    }
    else
    {
      v11 = (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1) - 1) & v6;
    }
    v12 = *(void ***)(_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 8 * v11);
    if (v12)
    {
      for (i = *v12; i; i = *(void **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v7)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, v3))
            return i;
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= v8)
              v14 %= v8;
          }
          else
          {
            v14 &= v8 - 1;
          }
          if (v14 != v11)
            break;
        }
      }
    }
  }
  else
  {
    v11 = 0;
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v7;
  *((_OWORD *)i + 1) = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *((_QWORD *)i + 4) = v15;
  *((_QWORD *)i + 5) = 0;
  v16 = (float)(unint64_t)(qword_1EDD13878 + 1);
  if (!v8 || (float)(*(float *)&dword_1EDD13880 * (float)v8) < v16)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v16 / *(float *)&dword_1EDD13880);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(v20);
    v8 = *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1))
        v11 = v7 % *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1);
      else
        v11 = v7;
    }
    else
    {
      v11 = (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1) - 1) & v7;
    }
  }
  v21 = _ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2;
  v22 = *(_QWORD **)(_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 8 * v11);
  if (v22)
  {
    *(_QWORD *)i = *v22;
LABEL_41:
    *v22 = i;
    goto LABEL_42;
  }
  *(_QWORD *)i = qword_1EDD13870;
  qword_1EDD13870 = (uint64_t)i;
  *(_QWORD *)(v21 + 8 * v11) = &qword_1EDD13870;
  if (*(_QWORD *)i)
  {
    v23 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 8 * v23);
    goto LABEL_41;
  }
LABEL_42:
  ++qword_1EDD13878;
  return i;
}

void sub_184604ECC(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void *_ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES7_S9_SC_SL_SO_(void *a1, const char *a2)
{
  unint64_t v2;

  v2 = *((unsigned __int8 *)a2 + 80);
  if (v2 <= 2)
    return (void *)objc_msgSend(a1, "setGroupNamespace:", *off_1E159D420[v2]);
  return a1;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", ((unint64_t)*(unsigned int *)(a2 + 12) >> 9) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v6;
  uint64_t result;
  uint64_t *v8;
  _OWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v6 = *(_OWORD *)(a2 + 64);
  v9[0] = *(_OWORD *)(a2 + 48);
  v9[1] = v6;
  result = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v9, "{CGRect={CGPoint=dd}{CGSize=dd}}");
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v8 = a4;
    else
      v8 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", ((unint64_t)*(unsigned int *)(a2 + 12) >> 12) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES7_S9_SC_SL_SO_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  void *v6;
  uint64_t *v7;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v6 = (void *)result;
    result = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v4 + 28);
    if (result)
    {
      if (*((char *)a4 + 23) >= 0)
        v7 = a4;
      else
        v7 = (uint64_t *)*a4;
      return objc_msgSend(v6, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", ((unint64_t)*(unsigned int *)(a2 + 12) >> 16) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(float *)(a2 + 36));
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", ((unint64_t)*(unsigned int *)(a2 + 12) >> 13) & 1);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(float *)(a2 + 32));
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE8_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(float *)(a2 + 40));
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE9_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", ((unint64_t)*(unsigned int *)(a2 + 12) >> 8) & 1);
  if (result)
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "enabled"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE10_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", ((unint64_t)*(unsigned int *)(a2 + 12) >> 10) & 1);
  if (result)
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "tracksLuma"));
  return result;
}

void ___Z20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDav_block_invoke()
{
  void *__p[2];
  char v1;
  void *v2[2];
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(vcvtps_u32_f32(16.0 / *(float *)&dword_1EDD13848));
  snake_case_to_camel_case("stroke_start", 12, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1355, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("stroke_end", 10, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1356, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("line_width", 10, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1357, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("miter_limit", 11, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1358, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("path", 4, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1359, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(v2, "lineDashPhase");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v2))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1360, "\"Duplicated Entry !!\" && map.map.find (\"lineDashPhase\") == map.map.end ()");
  if (v3 < 0)
    operator delete(v2[0]);
  std::string::basic_string[abi:nn180100]<0>(v2, "lineDashPhase");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v2, (uint64_t)v2)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0)
    operator delete(v2[0]);
  std::string::basic_string[abi:nn180100]<0>(v2, "lineDashPattern");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v2))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1361, "\"Duplicated Entry !!\" && map.map.find (\"lineDashPattern\") == map.map.end ()");
  if (v3 < 0)
    operator delete(v2[0]);
  std::string::basic_string[abi:nn180100]<0>(v2, "lineDashPattern");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v2, (uint64_t)v2)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0)
    operator delete(v2[0]);
  snake_case_to_camel_case("fill_color", 10, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1366, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("stroke_color", 12, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1370, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("fill_rule", 9, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1378, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE8_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("line_join", 9, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1386, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE9_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("line_cap", 8, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1394, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE10_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_184605BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(size_t __n)
{
  size_t prime;
  size_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD **v6;
  size_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *i;
  size_t v13;
  void *v14;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v2 = *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1);
  if (prime <= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1))
  {
    if (prime >= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1))
      return;
    v9 = vcvtps_u32_f32((float)(unint64_t)qword_1EDD13840 / *(float *)&dword_1EDD13848);
    if (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1) < 3uLL
      || (v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1
                                               + 8)),
          v10.i16[0] = vaddlv_u8(v10),
          v10.u32[0] > 1uLL))
    {
      v9 = std::__next_prime(v9);
    }
    else
    {
      v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2)
        v9 = v11;
    }
    if (prime <= v9)
      prime = v9;
    if (prime >= v2)
      return;
    if (!prime)
    {
      v14 = (void *)_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1;
      *(_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 = 0;
      if (v14)
        operator delete(v14);
      *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v3 = operator new(8 * prime);
  v4 = (void *)_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1;
  *(_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 = v3;
  if (v4)
    operator delete(v4);
  v5 = 0;
  *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1) = prime;
  do
    *(_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 8 * v5++) = 0;
  while (prime != v5);
  v6 = (_QWORD **)qword_1EDD13838;
  if (qword_1EDD13838)
  {
    v7 = *(_QWORD *)(qword_1EDD13838 + 8);
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= prime)
        v7 %= prime;
    }
    else
    {
      v7 &= prime - 1;
    }
    *(_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 8 * v7) = &qword_1EDD13838;
    for (i = *v6; i; v7 = v13)
    {
      v13 = i[1];
      if (v8.u32[0] > 1uLL)
      {
        if (v13 >= prime)
          v13 %= prime;
      }
      else
      {
        v13 &= prime - 1;
      }
      if (v13 != v7)
      {
        if (!*(_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 8 * v13))
        {
          *(_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 8 * v13) = v6;
          goto LABEL_31;
        }
        *v6 = (_QWORD *)*i;
        *i = **(_QWORD **)(_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 8 * v13);
        **(_QWORD **)(_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 8 * v13) = i;
        i = v6;
      }
      v13 = v7;
LABEL_31:
      v6 = (_QWORD **)i;
      i = (_QWORD *)*i;
    }
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(uint64_t a1)
{
  unsigned __int8 *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v1 = (unsigned __int8 *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(_QWORD *)a1;
    v3 = v2;
  }
  v4 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v3);
  v5 = *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1);
  if (!*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1))
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 8));
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1))
      v9 = v4 % *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1);
  }
  else
  {
    v9 = (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1) - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v12 == v6)
    {
      if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, v1))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= v5)
          v12 %= v5;
      }
      else
      {
        v12 &= v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  void **v12;
  void *i;
  unint64_t v14;
  uint64_t v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v3 = (unsigned __int8 *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(_QWORD *)a1;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v5);
  v7 = v6;
  v8 = *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1);
  if (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1))
  {
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 8));
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v11 = v6;
      if (v6 >= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1))
        v11 = v6 % *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1);
    }
    else
    {
      v11 = (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1) - 1) & v6;
    }
    v12 = *(void ***)(_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 8 * v11);
    if (v12)
    {
      for (i = *v12; i; i = *(void **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v7)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, v3))
            return i;
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= v8)
              v14 %= v8;
          }
          else
          {
            v14 &= v8 - 1;
          }
          if (v14 != v11)
            break;
        }
      }
    }
  }
  else
  {
    v11 = 0;
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v7;
  *((_OWORD *)i + 1) = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *((_QWORD *)i + 4) = v15;
  *((_QWORD *)i + 5) = 0;
  v16 = (float)(unint64_t)(qword_1EDD13840 + 1);
  if (!v8 || (float)(*(float *)&dword_1EDD13848 * (float)v8) < v16)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v16 / *(float *)&dword_1EDD13848);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(v20);
    v8 = *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1))
        v11 = v7 % *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1);
      else
        v11 = v7;
    }
    else
    {
      v11 = (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1) - 1) & v7;
    }
  }
  v21 = _ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1;
  v22 = *(_QWORD **)(_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 8 * v11);
  if (v22)
  {
    *(_QWORD *)i = *v22;
LABEL_41:
    *v22 = i;
    goto LABEL_42;
  }
  *(_QWORD *)i = qword_1EDD13838;
  qword_1EDD13838 = (uint64_t)i;
  *(_QWORD *)(v21 + 8 * v11) = &qword_1EDD13838;
  if (*(_QWORD *)i)
  {
    v23 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 8 * v23);
    goto LABEL_41;
  }
LABEL_42:
  ++qword_1EDD13840;
  return i;
}

void sub_1846061B4(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a2 + 72));
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a2 + 80));
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a2 + 88));
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a2 + 96));
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

CGPath *_ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  CGPath *result;
  uint64_t *v7;
  uint64_t v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v8[0] = *(_QWORD *)(a2 + 16);
  result = id_from_value<void,CA::Render::Path *>(v8);
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return (CGPath *)objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a2 + 104));
  if (result)
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "lineDashPhase"));
  return result;
}

void *_ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  void *result;

  result = id_from_value<NSArray,CA::Render::Vector *>(*(_QWORD *)(a2 + 112));
  if (result)
    return (void *)objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "lineDashPattern"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, CGColorSpace **a5)
{
  uint64_t v5;
  float v7[6];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)v7 = *(_OWORD *)(a2 + 24);
  return objc_msgSend(a1, "setValue:forKey:", cg_color_from_pattern_or_color(a5, v5, v7), CFSTR("fillColor"));
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, CGColorSpace **a5)
{
  uint64_t v5;
  float v7[6];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a2 + 64);
  *(_OWORD *)v7 = *(_OWORD *)(a2 + 48);
  return objc_msgSend(a1, "setValue:forKey:", cg_color_from_pattern_or_color(a5, v5, v7), CFSTR("strokeColor"));
}

void *_ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE8_8__invokeES7_S9_SC_SL_SO_(void *a1, const char *a2)
{
  const CAShapeLayerFillRule *v2;

  if (a2[120])
  {
    if (a2[120] != 1)
      return a1;
    v2 = &kCAFillRuleEvenOdd;
  }
  else
  {
    v2 = &kCAFillRuleNonZero;
  }
  return (void *)objc_msgSend(a1, "setFillRule:", *v2);
}

void *_ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE9_8__invokeES7_S9_SC_SL_SO_(void *a1, const char *a2)
{
  int v2;

  v2 = *((_DWORD *)a2 + 30);
  if (BYTE1(v2) <= 2u)
    return (void *)objc_msgSend(a1, "setLineJoin:", *off_1E159D3F0[BYTE1(v2)]);
  return a1;
}

void *_ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE10_8__invokeES7_S9_SC_SL_SO_(void *a1, const char *a2)
{
  int v2;

  v2 = *((_DWORD *)a2 + 30);
  if (BYTE2(v2) <= 2u)
    return (void *)objc_msgSend(a1, "setLineCap:", *off_1E159D408[BYTE2(v2)]);
  return a1;
}

void ___Z20get_setters_for_typeIN2CA6Render13GradientLayerEERKDav_block_invoke()
{
  void *__p[2];
  char v1;
  void *v2[2];
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(vcvtps_u32_f32(8.0 / *(float *)&dword_1EDD13778));
  snake_case_to_camel_case("start_point", 11, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1308, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("end_point", 9, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1309, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("noise_scale", 11, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1310, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("colorSpace", 10, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1314, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(v2, "premultiplied");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v2))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1315, "\"Duplicated Entry !!\" && map.map.find (\"premultiplied\") == map.map.end ()");
  if (v3 < 0)
    operator delete(v2[0]);
  std::string::basic_string[abi:nn180100]<0>(v2, "premultiplied");
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v2, (uint64_t)v2)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0)
    operator delete(v2[0]);
  snake_case_to_camel_case("interpolations", 14, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1323, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("color_map", 9, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1328, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("type", 4, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1336, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("colors", 6, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1338, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
  snake_case_to_camel_case("locations", 9, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p))
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1343, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE8_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_184606CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(size_t __n)
{
  size_t prime;
  size_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD **v6;
  size_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *i;
  size_t v13;
  void *v14;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v2 = *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1);
  if (prime <= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1))
  {
    if (prime >= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1))
      return;
    v9 = vcvtps_u32_f32((float)(unint64_t)qword_1EDD13770 / *(float *)&dword_1EDD13778);
    if (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1) < 3uLL
      || (v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0
                                               + 8)),
          v10.i16[0] = vaddlv_u8(v10),
          v10.u32[0] > 1uLL))
    {
      v9 = std::__next_prime(v9);
    }
    else
    {
      v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2)
        v9 = v11;
    }
    if (prime <= v9)
      prime = v9;
    if (prime >= v2)
      return;
    if (!prime)
    {
      v14 = (void *)_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0;
      *(_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 = 0;
      if (v14)
        operator delete(v14);
      *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v3 = operator new(8 * prime);
  v4 = (void *)_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0;
  *(_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 = v3;
  if (v4)
    operator delete(v4);
  v5 = 0;
  *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1) = prime;
  do
    *(_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 8 * v5++) = 0;
  while (prime != v5);
  v6 = (_QWORD **)qword_1EDD13768;
  if (qword_1EDD13768)
  {
    v7 = *(_QWORD *)(qword_1EDD13768 + 8);
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= prime)
        v7 %= prime;
    }
    else
    {
      v7 &= prime - 1;
    }
    *(_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 8 * v7) = &qword_1EDD13768;
    for (i = *v6; i; v7 = v13)
    {
      v13 = i[1];
      if (v8.u32[0] > 1uLL)
      {
        if (v13 >= prime)
          v13 %= prime;
      }
      else
      {
        v13 &= prime - 1;
      }
      if (v13 != v7)
      {
        if (!*(_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 8 * v13))
        {
          *(_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 8 * v13) = v6;
          goto LABEL_31;
        }
        *v6 = (_QWORD *)*i;
        *i = **(_QWORD **)(_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 8 * v13);
        **(_QWORD **)(_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 8 * v13) = i;
        i = v6;
      }
      v13 = v7;
LABEL_31:
      v6 = (_QWORD **)i;
      i = (_QWORD *)*i;
    }
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(uint64_t a1)
{
  unsigned __int8 *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v1 = (unsigned __int8 *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(_QWORD *)a1;
    v3 = v2;
  }
  v4 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v3);
  v5 = *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1);
  if (!*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1))
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 8));
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1))
      v9 = v4 % *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1);
  }
  else
  {
    v9 = (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1) - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v12 == v6)
    {
      if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, v1))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= v5)
          v12 %= v5;
      }
      else
      {
        v12 &= v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  void **v12;
  void *i;
  unint64_t v14;
  uint64_t v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v3 = (unsigned __int8 *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(_QWORD *)a1;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v5);
  v7 = v6;
  v8 = *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1);
  if (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1))
  {
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 8));
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v11 = v6;
      if (v6 >= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1))
        v11 = v6 % *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1);
    }
    else
    {
      v11 = (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1) - 1) & v6;
    }
    v12 = *(void ***)(_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 8 * v11);
    if (v12)
    {
      for (i = *v12; i; i = *(void **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v7)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, v3))
            return i;
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= v8)
              v14 %= v8;
          }
          else
          {
            v14 &= v8 - 1;
          }
          if (v14 != v11)
            break;
        }
      }
    }
  }
  else
  {
    v11 = 0;
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v7;
  *((_OWORD *)i + 1) = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *((_QWORD *)i + 4) = v15;
  *((_QWORD *)i + 5) = 0;
  v16 = (float)(unint64_t)(qword_1EDD13770 + 1);
  if (!v8 || (float)(*(float *)&dword_1EDD13778 * (float)v8) < v16)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v16 / *(float *)&dword_1EDD13778);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(v20);
    v8 = *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1))
        v11 = v7 % *((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1);
      else
        v11 = v7;
    }
    else
    {
      v11 = (*((_QWORD *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1) - 1) & v7;
    }
  }
  v21 = _ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0;
  v22 = *(_QWORD **)(_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 8 * v11);
  if (v22)
  {
    *(_QWORD *)i = *v22;
LABEL_41:
    *v22 = i;
    goto LABEL_42;
  }
  *(_QWORD *)i = qword_1EDD13768;
  qword_1EDD13768 = (uint64_t)i;
  *(_QWORD *)(v21 + 8 * v11) = &qword_1EDD13768;
  if (*(_QWORD *)i)
  {
    v23 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 8 * v23);
    goto LABEL_41;
  }
LABEL_42:
  ++qword_1EDD13770;
  return i;
}

void sub_1846072BC(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = *(_OWORD *)(a2 + 72);
  result = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v8, "{CGPoint=dd}");
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = *(_OWORD *)(a2 + 88);
  result = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v8, "{CGPoint=dd}");
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v7;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(float *)(a2 + 108));
  if (result)
  {
    if (*((char *)a4 + 23) >= 0)
      v7 = a4;
    else
      v7 = (uint64_t *)*a4;
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t result;
  CGColorSpace *v8;
  CGColorSpace *v9;

  result = *(_QWORD *)(a2 + 128);
  if (result != *a5)
  {
    result = CGColorSpaceEqualToColorSpaceIgnoringRange();
    if ((result & 1) == 0)
    {
      v8 = *(CGColorSpace **)(a2 + 128);
      if (v8)
        v9 = CGColorSpaceRetain(v8);
      else
        v9 = 0;
      return objc_msgSend(a1, "setColorSpace:", v9);
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", ((unint64_t)*(unsigned int *)(a2 + 28) >> 12) & 1);
  if (result)
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "premultiplied"));
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES7_S9_SC_SL_SO_(uint64_t result, uint64_t a2, const double *a3)
{
  const void *v4;
  void *v5;
  _DWORD *v6;
  unint64_t v7;
  _DWORD *v9;
  void *v10;
  unint64_t v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;

  v4 = *(const void **)(a2 + 64);
  if (v4)
  {
    v5 = (void *)result;
    v6 = CA::Render::Vector::new_vector((CA::Render::Vector *)*(unsigned int *)(a2 + 32), v4, a3);
    v7 = v6[4];
    if (v7 < 4 || (v6[4] & 3) != 0)
      __assert_rtn("id_from_value", "CAReverseSerialization.mm", 348, "count >=4 && count % 4 == 0");
    v9 = v6;
    v10 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v7);
    v11 = 0;
    do
    {
      v12 = (double *)&v9[2 * v11];
      v13 = v12[3];
      v14 = v12[4];
      *(float *)&v13 = v13;
      *(float *)&v14 = v14;
      v15 = v12[5];
      v16 = v12[6];
      *(float *)&v15 = v15;
      *(float *)&v16 = v16;
      objc_msgSend(v10, "addObject:", +[CAMediaTimingFunction functionWithControlPoints::::](CAMediaTimingFunction, "functionWithControlPoints::::", v13, v14, v15, v16));
      v11 += 4;
    }
    while (v11 < v7);
    objc_msgSend(v5, "setInterpolations:", v10);
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES7_S9_SC_SL_SO_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, CGColorSpace **a5)
{
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a2 + 13) & 8) != 0)
  {
    v6 = (void *)result;
    CA::Render::GradientLayer::color_map(v11, a2, 0);
    v7 = v11[0];
    result = objc_msgSend(v6, "setColorMap:", ns_object_from_render_object(a5, v11[0], 0));
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 8);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    }
  }
  return result;
}

void sub_184607730(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (v1)
  {
    v3 = v1 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES7_S9_SC_SL_SO_(void *a1, const char *a2)
{
  int v2;
  const __CFString *v3;
  const __CFString *v4;

  v2 = *((_DWORD *)a2 + 26);
  v3 = CFSTR("axial");
  if (v2 == 442)
    v3 = CFSTR("radial");
  if (v2 == 115)
    v4 = CFSTR("conic");
  else
    v4 = v3;
  return objc_msgSend(a1, "setType:", v4);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES7_S9_SC_SL_SO_(uint64_t result, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  float *v8;
  CGColorSpace *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  CGColor *v14;
  CGColorSpace *v15;
  CGColorSpace *v16;
  uint64_t v17;
  double v18;
  CGColorSpace *Extended;
  CGColorSpace *v21;
  CGColor *v22;
  float64x2_t v23;
  double v24[3];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 32))
  {
    v3 = (void *)result;
    v4 = objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:");
    if (*(_DWORD *)(a2 + 40) != 4)
      __assert_rtn("set_gradient_colors", "CAReverseSerialization.mm", 823, "gradient.width () == 4");
    v5 = (void *)v4;
    if (*(_QWORD *)(a2 + 32))
    {
      v6 = 0;
      v7 = *(_QWORD *)(a2 + 48);
      do
      {
        v8 = (float *)(v7 + 16 * v6);
        v9 = *(CGColorSpace **)(a2 + 128);
        v10 = *v8;
        v23.f64[0] = *v8;
        v11 = v8[1];
        v23.f64[1] = v11;
        v12 = v8[2];
        v24[0] = v12;
        v13 = v8[3];
        v24[1] = v13;
        if (v13 == 0.0 && v12 == 0.0 && v11 == 0.0 && v10 == 0.0)
        {
          v14 = 0;
        }
        else
        {
          v15 = (CGColorSpace *)CAGetColorSpace(0x1Cu);
          v16 = v15;
          v17 = 0;
          if (v9)
            v15 = v9;
          do
          {
            v18 = v23.f64[v17];
            if (v18 < 0.0 || v18 > 1.0)
            {
              Extended = CAColorSpaceCreateExtended(v15);
              goto LABEL_19;
            }
            ++v17;
          }
          while (v17 != 4);
          Extended = CGColorSpaceRetain(v15);
LABEL_19:
          v21 = Extended;
          v22 = CGColorCreate(Extended, v23.f64);
          CA_CGColorGetRGBComponents(v22, v16, v23.f64);
          CGColorRelease(v22);
          if (v24[1] <= 0.0)
          {
            v23 = 0u;
            *(_OWORD *)v24 = 0u;
          }
          else
          {
            v23 = vdivq_f64(v23, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v24[1], 0));
            v24[0] = v24[0] / v24[1];
          }
          v14 = CGColorCreate(v21, v23.f64);
          if (v21)
            CFRelease(v21);
        }
        objc_msgSend(v5, "addObject:", v14, *(_OWORD *)&v23, *(_OWORD *)v24);
        ++v6;
      }
      while (v6 < *(_QWORD *)(a2 + 32));
    }
    return objc_msgSend(v3, "setColors:", v5);
  }
  return result;
}

void sub_1846079B0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE8_8__invokeES7_S9_SC_SL_SO_(uint64_t result, uint64_t a2)
{
  float *v2;
  void *v3;
  uint64_t v4;
  void *i;
  float v6;

  v2 = *(float **)(a2 + 56);
  if (v2)
  {
    v3 = (void *)result;
    v4 = *(unsigned int *)(a2 + 32);
    for (i = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v4); v4; --v4)
    {
      v6 = *v2++;
      objc_msgSend(i, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v6));
    }
    return objc_msgSend(v3, "setLocations:", i);
  }
  return result;
}

void CATiledLayerDestroy(CATiledLayer *a1)
{
  id v2;
  uint64_t v3;
  CFTypeID v4;
  uint64_t v5;

  if ((*((_DWORD *)a1->super._attr.layer + 1) & 0x60000) == 0)
  {
    v2 = -[CALayer contents](a1, "contents");
    if (v2)
    {
      v3 = (uint64_t)v2;
      v4 = CFGetTypeID(v2);
      v5 = CAImageProviderGetTypeID::type;
      if (!CAImageProviderGetTypeID::type)
      {
        v5 = _CFRuntimeRegisterClass();
        CAImageProviderGetTypeID::type = v5;
      }
      if (v4 == v5)
      {
        CAImageProviderSetCallback(v3, 0, 0);
        CAImageProviderRemoveLayer(v3, (uint64_t)a1);
      }
    }
  }
}

void tiled_layer_render(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  CA::Layer **v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint32x2_t v29;
  int8x8_t v30;
  uint64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  unsigned int v34;
  double v35;
  double v36;
  BOOL v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  CA::Transaction *v51;
  CA::Transaction *v52;
  int v53;
  unsigned int v54;
  const __CFString *v55;
  __IOSurface *iosurface;
  __IOSurface *v57;
  int v58;
  malloc_zone_t *malloc_zone;
  CA::CG::IOSurfaceDrawable *v60;
  uint64_t v61;
  CGContext *v62;
  uint64_t v63;
  CA::Transaction *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  CA::Render::Shmem *v68;
  _DWORD *v69;
  uint64_t v70;
  unsigned int v71;
  size_t v72;
  _BYTE *v73;
  CA::Transaction *v74;
  CA::Layer *v75;
  CA::Transaction *v76;
  uint64_t v77;
  uint64_t v78;
  CA::Render::Texture *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  malloc_zone_t *v83;
  CA::Render::Texture *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t Instance;
  const void *v92;
  unsigned int *v93;
  unsigned int v94;
  CA::Render::Texture *v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int *v99;
  CA::Layer *v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  CA::Render::Shmem *v107;
  void *v108;
  CGColorSpace *space;
  unsigned int v110;
  unsigned int v111;
  CGFloat sx[2];
  CGAffineTransform v113;
  CGAffineTransform v114;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v117;
  CGAffineTransform transform;
  CGAffineTransform v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v11 = CALayerRetain(a6);
  if (v11)
  {
    v12 = (CA::Layer **)v11;
    v13 = (void *)MEMORY[0x186DBE2E4]();
    v110 = objc_msgSend(+[CATransaction valueForKey:](CATransaction, "valueForKey:", CFSTR("CATiledLayerFlags")), "unsignedIntValue");
    v15 = a1[57];
    v14 = a1[58];
    v111 = a3;
    v16 = v15 * a3;
    v17 = v14 * a4;
    v18 = a1[59];
    if (v18 <= a2)
    {
      if (-v16 < v15)
        v26 = -v16;
      else
        v26 = v15;
      if (-v17 < v14)
        v27 = -v17;
      else
        v27 = a1[58];
      if (v26 >= v27)
        v34 = v27;
      else
        v34 = v26;
      if (!v34)
      {
LABEL_122:
        objc_autoreleasePoolPop(v13);
        return;
      }
    }
    else
    {
      v19 = a2 - a1[60];
      v20 = a1[55];
      v21 = a1[56];
      v22 = v20 << (*((_BYTE *)a1 + 240) - a2);
      v23 = v20 >> (a2 - *((_BYTE *)a1 + 240));
      v24 = v19 < 0;
      if (v19 < 0)
        v23 = v22;
      v25 = v21 >> v19;
      if (v24)
        v25 = v21 << (*((_BYTE *)a1 + 240) - a2);
      if (v23 - v16 >= v15)
        v26 = v15;
      else
        v26 = v23 - v16;
      if (v25 - v17 >= v14)
        v27 = a1[58];
      else
        v27 = v25 - v17;
      if (v26 >= v27)
        v28 = v27;
      else
        v28 = v26;
      if (!v28)
        goto LABEL_122;
      if (v18 > a2)
      {
        v29 = *(uint32x2_t *)(a1 + 55);
        v30 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32((int)a2 - a1[60] < 0), 0x1FuLL)), (int8x8_t)vshl_u32(v29, (uint32x2_t)vdup_n_s32(a1[60] - (int)a2)), (int8x8_t)vshl_u32(v29, (uint32x2_t)vneg_s32(vdup_n_s32((int)a2 - a1[60]))));
        v31.i64[0] = v30.u32[0];
        v31.i64[1] = v30.u32[1];
        v32 = vcvtq_f64_u64(v31);
        v31.i64[0] = v29.u32[0];
        v31.i64[1] = v29.u32[1];
        v33 = vdivq_f64(v32, vcvtq_f64_u64(v31));
        goto LABEL_31;
      }
    }
    v33 = *(float64x2_t *)MEMORY[0x1E0C9D820];
LABEL_31:
    *(float64x2_t *)sx = v33;
    objc_msgSend(v12, "contentsScale");
    v35 = (double)v27;
    v37 = v36 == 1.0;
    v38 = 1.0 / v36;
    v39 = v38 * ((double)v16 / sx[0]);
    v40 = v38 * ((double)v17 / sx[1]);
    v41 = v38 * ((double)v26 / sx[0]);
    v42 = v38 * ((double)v27 / sx[1]);
    if (v37)
      v43 = (double)v16 / sx[0];
    else
      v43 = v39;
    if (v37)
      v44 = (double)v17 / sx[1];
    else
      v44 = v40;
    if (v37)
      v45 = (double)v26 / sx[0];
    else
      v45 = v41;
    if (v37)
      v46 = (double)v27 / sx[1];
    else
      v46 = v42;
    objc_msgSend(v12, "bounds", v42);
    if ((objc_msgSend(v12, "canDrawRect:levelOfDetail:", a2, v47 + v43, v48 + v44, v45, v46) & 1) == 0)
    {
      CAImageProviderSetSubImageWithSeed((uint64_t)a1, a2, v111, a4, 0, v110, a5);
      goto LABEL_118;
    }
    v105 = a4;
    v108 = v13;
    space = (CGColorSpace *)objc_msgSend(*((id *)v12[2] + 2), "_retainColorSpace");
    if ((a1[54] & 1) != 0)
      v49 = 3;
    else
      v49 = 1;
    v104 = a5;
    if ((objc_msgSend(v12, "drawsAsynchronously") & 1) != 0
      || (v50 = objc_msgSend(v12, "acceleratesDrawing"), (_DWORD)v50))
    {
      v50 = 256;
    }
    v51 = (CA::Transaction *)CABackingStoreSetDefaultAccelFlags(v50);
    if (v51 >= 0x100)
    {
      v52 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
      if (!v52)
        v52 = (CA::Transaction *)CA::Transaction::create(v51);
      v53 = *((_DWORD *)v52 + 25);
      *((_DWORD *)v52 + 25) = v53 + 1;
      if (!v53)
        os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
      v106 = *((_DWORD *)v12[2] + 13);
      CA::Transaction::unlock(v52);
      if (v106 << 11 < 0 && CAIOSurfaceIsAcceleratable(0, v26, v27, v49))
      {
        iosurface = CA::Render::create_iosurface((CA::Render *)v49, (CA::Render *)v26, v27, 0, v54, v55);
        if (iosurface)
        {
          v57 = iosurface;
          v58 = dword_184750360[v49];
          malloc_zone = (malloc_zone_t *)get_malloc_zone();
          v60 = (CA::CG::IOSurfaceDrawable *)malloc_type_zone_malloc(malloc_zone, 0x70uLL, 0x8BB15036uLL);
          if (v60)
            v60 = CA::CG::IOSurfaceDrawable::IOSurfaceDrawable(v60, v57, v49, v58, space, 0, 0, 0, 0);
          v103 = (uint64_t)v60;
          CFRelease(v57);
          v61 = CAGetCachedCGIOSurfaceContext(v103, v106 << 11 >> 31, 0);
          if (v61)
          {
            v62 = (CGContext *)v61;
            if ((objc_msgSend(v12, "isOpaque") & 1) == 0 && objc_msgSend(v12, "clearsContext"))
              CGContextClearRect(v62, *MEMORY[0x1E0C9D5E0]);
            v107 = 0;
            v63 = v103;
            goto LABEL_77;
          }
          v65 = (unsigned int *)(v103 + 8);
          do
          {
            v66 = __ldaxr(v65);
            v67 = v66 - 1;
          }
          while (__stlxr(v67, v65));
          if (!v67)
          {
            (**(void (***)(uint64_t))v103)(v103);
            (*(void (**)(uint64_t))(*(_QWORD *)v103 + 16))(v103);
          }
        }
      }
    }
    v68 = (CA::Render::Shmem *)CA::Render::Shmem::new_bitmap((CA::Render::Shmem *)v49, v26, v27, 0, 0, 1u);
    if (!v68)
    {
LABEL_117:
      v13 = v108;
      CGColorSpaceRelease(space);
LABEL_118:
      v99 = (unsigned int *)CA::Transaction::ensure_compat(v64);
      v100 = v12[2];
      v101 = v99[24];
      if ((v101 & 0x80000000) != 0 || !*((_DWORD *)v100 + v101 + 68))
        CA::Layer::thread_flags_(v100, (CA::Transaction *)v99);
      CALayerRelease((uint64_t)v12);
      goto LABEL_122;
    }
    v107 = v68;
    v69 = (_DWORD *)*((_QWORD *)v68 + 3);
    v70 = (int)v69[2];
    if (v69[4] <= 1u)
      v71 = 1;
    else
      v71 = v69[4];
    v72 = CA::Render::format_rowbytes((CA::Render *)v69[3], v71);
    v73 = CAGetCachedCGBitmapContext_((char *)v69 + v70, v26, v27, v49, v72, space);
    if (!v73 || (v62 = (CGContext *)*((_QWORD *)v73 + 2)) == 0)
    {
      v80 = (unsigned int *)((char *)v107 + 8);
      do
      {
        v81 = __ldaxr(v80);
        v82 = v81 - 1;
      }
      while (__stlxr(v82, v80));
      if (!v82)
        (*(void (**)(CA::Render::Shmem *))(*(_QWORD *)v107 + 16))(v107);
      goto LABEL_117;
    }
    v63 = 0;
LABEL_77:
    memset(&v119, 0, sizeof(v119));
    CGContextGetBaseCTM();
    if ((*((_DWORD *)v12[2] + 1) & 0x400000) == 0)
    {
      transform.b = 0.0;
      transform.c = 0.0;
      transform.a = 1.0;
      *(_OWORD *)&transform.d = xmmword_18474DFF0;
      transform.ty = v35;
      CGContextConcatCTM(v62, &transform);
      t1 = v119;
      t2.b = 0.0;
      t2.c = 0.0;
      t2.a = 1.0;
      *(_OWORD *)&t2.d = xmmword_18474DFF0;
      t2.ty = v35;
      CGAffineTransformConcat(&v117, &t1, &t2);
      v119 = v117;
    }
    CGContextTranslateCTM(v62, (double)-v16, (double)-v17);
    CGContextScaleCTM(v62, sx[0], sx[1]);
    v114 = v119;
    CGAffineTransformTranslate(&v117, &v114, (double)-v16, (double)-v17);
    v119 = v117;
    v113 = v117;
    CGAffineTransformScale(&v117, &v113, sx[0], sx[1]);
    v119 = v117;
    if (dyld_program_sdk_at_least())
      CGContextSetBaseCTM();
    v74 = (CA::Transaction *)CA::Layer::prepare_context_for_drawing(v12[2], v62, 0);
    v75 = v12[2];
    v76 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
    if (!v76)
      v76 = (CA::Transaction *)CA::Transaction::create(v74);
    objc_msgSend(CA::Layer::layer_being_drawn(v75, v76, 0x800000), "drawInContext:", v62);
    CAReleaseCachedCGContext(v62);
    if (v63)
    {
      v77 = *(_QWORD *)(v63 + 72);
      v78 = v111;
      if (v77)
        CA::CG::Queue::flush(v77, 3, 1);
      os_unfair_lock_lock((os_unfair_lock_t)(v63 + 12));
      if (*(_BYTE *)(v63 + 68))
      {
        v79 = 0;
      }
      else
      {
        v83 = (malloc_zone_t *)get_malloc_zone();
        v84 = (CA::Render::Texture *)malloc_type_zone_calloc(v83, 1uLL, 0x158uLL, 0x743898A5uLL);
        v79 = v84;
        if (v84)
          v84 = (CA::Render::Texture *)CA::Render::Surface::Surface((uint64_t)v84, *(IOSurfaceRef *)(v63 + 96), *(_DWORD *)(v63 + 16), 1, 0, 0, 0);
        CA::Render::Texture::set_colorspace(v84, *(CGColorSpace **)(v63 + 24));
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v63 + 12));
      v85 = (unsigned int *)(v63 + 8);
      do
      {
        v86 = __ldaxr(v85);
        v87 = v86 - 1;
      }
      while (__stlxr(v87, v85));
      if (!v87)
      {
        (**(void (***)(uint64_t))v63)(v63);
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63);
      }
    }
    else
    {
      v79 = 0;
      v78 = v111;
    }
    if (v107)
    {
      v79 = CA::Render::Shmem::copy_image(v107, space);
      v88 = (unsigned int *)((char *)v107 + 8);
      do
      {
        v89 = __ldaxr(v88);
        v90 = v89 - 1;
      }
      while (__stlxr(v90, v88));
      if (!v90)
        (*(void (**)(CA::Render::Shmem *))(*(_QWORD *)v107 + 16))(v107);
    }
    if (v79)
    {
      if (!CARenderObjectGetTypeID::type)
        CARenderObjectGetTypeID::type = _CFRuntimeRegisterClass();
      Instance = _CFRuntimeCreateInstance();
      v92 = (const void *)Instance;
      if (Instance)
      {
        *(_QWORD *)(Instance + 16) = 0;
        v93 = (unsigned int *)((char *)v79 + 8);
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 + 1, v93));
        v95 = v79;
        if (!v94)
        {
          v95 = 0;
          do
            v102 = __ldaxr(v93);
          while (__stlxr(v102 - 1, v93));
        }
        *(_QWORD *)(Instance + 16) = v95;
      }
      CAImageProviderSetSubImageWithSeed((uint64_t)a1, a2, v78, v105, Instance, v110, v104);
      CFRelease(v92);
      v96 = (unsigned int *)((char *)v79 + 8);
      do
      {
        v97 = __ldaxr(v96);
        v98 = v97 - 1;
      }
      while (__stlxr(v98, v96));
      if (!v98)
        (*(void (**)(CA::Render::Texture *))(*(_QWORD *)v79 + 16))(v79);
    }
    goto LABEL_117;
  }
}

void sub_184609074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *context)
{
  objc_autoreleasePoolPop(context);
  _Unwind_Resume(a1);
}

uint64_t convertRectToImageCoordinates(void *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  float64x2_t v16;
  float64x2_t v17;
  int8x16_t v23;
  double v24;
  float64x2_t v25;
  int8x16_t v26;
  int8x16_t v27;
  float64x2_t v28;
  float64x2_t v29;
  int8x16_t v30;
  int8x16_t v31;
  float64x2_t v32;
  float64x2_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x2_t v36;
  uint32x2_t v37;
  uint32x2_t v38;
  int32x2_t v39;
  int32x2_t v40;
  uint32x2_t v41;
  float64x2_t v42;

  if (*(double *)(a4 + 16) < 1.00000002e30 || *(double *)(a4 + 24) < 1.00000002e30)
  {
    v10 = *(double *)a4;
    v11 = *(double *)(a4 + 8);
    objc_msgSend(a1, "bounds", *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24));
    v13 = v10 - v12;
    v15 = v11 - v14;
    objc_msgSend(a1, "contentsScale");
    v16.f64[0] = 1.0;
    __asm { FMOV            V3.2D, #1.0 }
    v23 = (int8x16_t)vmulq_f64(v42, (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vceqq_f64(v17, v16)).i64[0], 0), (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v17.f64[0], 0), _Q3));
    v24 = v15 * v17.f64[0];
    v17.f64[0] = v13 * v17.f64[0];
    v17.f64[1] = v24;
    v25.f64[0] = 0.0;
    v26 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v25, (float64x2_t)v23).i64[0], 0);
    *(double *)&v27.i64[1] = v24;
    *(double *)v27.i64 = *(double *)v23.i64 + v17.f64[0];
    v28 = (float64x2_t)vbslq_s8(v26, v27, (int8x16_t)v17);
    v27.i64[1] = v23.i64[1];
    *(double *)v27.i64 = -*(double *)v23.i64;
    v29 = (float64x2_t)vbslq_s8(v26, v27, v23);
    if (*(double *)&v23.i64[1] < 0.0)
    {
      v28.f64[1] = *(double *)&v23.i64[1] + v24;
      v29.f64[1] = vnegq_f64(*(float64x2_t *)&v23).f64[1];
    }
    v30 = (int8x16_t)vceqzq_f64(v29);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v30, 1), v30).u64[0] & 0x8000000000000000) != 0
      || (v31 = vorrq_s8((int8x16_t)vcltzq_f64(v29), (int8x16_t)vcgezq_f64(v29)),
          (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v31), 1), v31).u64[0] & 0x8000000000000000) != 0))
    {
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      v35.i64[0] = 0;
      v36 = 0;
    }
    else
    {
      v32 = vmaxnmq_f64(v28, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000));
      v33 = vminnmq_f64(vaddq_f64(v28, v29), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
      v34 = (int32x4_t)vcvtmq_s64_f64(v32);
      v35 = vuzp1q_s32(v34, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v33), (int64x2_t)v34));
      *(int32x4_t *)a5 = v35;
      v36 = (int32x2_t)v35.u64[1];
    }
    v37 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v36);
    if ((vpmax_u32(v37, v37).u32[0] & 0x80000000) != 0)
    {
      return 0;
    }
    else
    {
      v38 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)__PAIR64__(a3, a2));
      if ((vpmax_u32(v38, v38).u32[0] & 0x80000000) != 0
        || (v39 = vadd_s32(*(int32x2_t *)v35.i8, v36),
            *(int32x2_t *)v35.i8 = vmax_s32(*(int32x2_t *)v35.i8, 0),
            v40 = vsub_s32(vmin_s32(v39, (int32x2_t)__PAIR64__(a3, a2)), *(int32x2_t *)v35.i8),
            v41 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v40),
            (vpmax_u32(v41, v41).u32[0] & 0x80000000) != 0))
      {
        result = 0;
        *(_QWORD *)(a5 + 8) = 0;
      }
      else
      {
        v35.u64[1] = (unint64_t)v40;
        *(int32x4_t *)a5 = v35;
        return 1;
      }
    }
  }
  else
  {
    *(_QWORD *)a5 = 0;
    result = 1;
    *(_DWORD *)(a5 + 8) = a2;
    *(_DWORD *)(a5 + 12) = a3;
  }
  return result;
}

void CA::CG::FillRectsShadow::~FillRectsShadow(CA::CG::FillRectsShadow *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E1591088;
  v2 = (unsigned int *)*((_QWORD *)this + 19);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1591088;
  v2 = (unsigned int *)*((_QWORD *)this + 19);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::CG::DrawOp::compute_dod_corners()
{
  return 0;
}

BOOL CA::CG::FillRectsShadow::may_flush(uint64_t a1)
{
  return ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 144) + 136))(*(_QWORD *)(a1 + 144)) & 5) == 0;
}

uint64_t CA::CG::DrawOp::shape_extent_contains(CA::CG::DrawOp *this, CA::CG::Renderer *a2, const CA::Shape *a3)
{
  return 0;
}

uint64_t CA::CG::DrawShadow::debug_color(CA::CG::DrawShadow *this)
{
  return 4068948448;
}

uint64_t CA::CG::DrawOp::clipping_planes(CA::CG::DrawOp *this, CA::CG::Renderer *a2)
{
  return 0;
}

void CA::CG::FillRectsShadow::draw_shadow(CA::CG::FillRectsShadow *this, CA::CG::Renderer *a2)
{
  _QWORD *v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  uint64_t v10;
  double *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  float16x4_t *v15;
  float16x4_t v16;
  float16x4_t v23;
  unint64_t v24;
  BOOL v25;
  float64x2_t v26;
  float64x2_t v27;
  float v28;
  double v29;
  float64x2_t v30;
  float64x2_t v31;
  int8x16_t v32;
  double v33;
  float64x2_t v34;
  double v35;
  int v36;
  double v37;
  double v38;
  double v39;
  double *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  BOOL v46;
  double v47;
  double v48;
  double v49;
  double v50;
  float v51;
  float v52;
  double v53;
  float v54;
  float v55;
  double v56;
  float v57;
  float16x4_t v58;
  float v59;
  double v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  float16x4_t v65;
  float32x4_t v66;
  unsigned int v67;
  int v68;
  float64x2_t v69;
  float64x2_t v70;
  __int128 v71;
  _OWORD v72[13];
  _DWORD v73[2];
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  double v78;
  double v79;
  double v80;
  double v81;
  float64x2_t v82;
  double v83;
  double v84;
  double v85;
  double v86;
  float64_t v87;
  double v88;
  _QWORD v89[5];

  v89[2] = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)*((_QWORD *)a2 + 1);
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 136))(*((_QWORD *)this + 18)) & 5) != 0)
  {
    if ((*((_DWORD *)this + 25) & 4) != 0)
      v10 = 88;
    else
      v10 = 32;
    if ((*((_DWORD *)this + 25) & 4) != 0)
      v11 = (double *)((char *)a2 + 88);
    else
      v11 = (double *)((char *)a2 + 32);
    v8.n128_u64[0] = *((_QWORD *)a2 + 10);
    v6.n128_u64[0] = *(_QWORD *)((char *)a2 + v10);
    v5.n128_f64[0] = v11[3];
    v12 = *(__n128 *)(v11 + 1);
    v14 = *((_QWORD *)this + 18);
    v13 = *((_QWORD *)this + 19);
    v9.n128_u64[0] = *(_QWORD *)(v13 + 80);
    v7.n128_u32[0] = *(_DWORD *)(v13 + 76);
    v68 = *(_DWORD *)(v14 + 100);
    if ((v68 & 0x400) == 0)
    {
      *(_BYTE *)(v4[2] + 16) = 3;
      v14 = *((_QWORD *)this + 18);
    }
    v89[0] = 0;
    v89[1] = 0;
    v15 = (float16x4_t *)v4[2];
    v16 = v15[1];
    _H6 = *(_WORD *)(v14 + 94);
    __asm { FCVT            S6, H6 }
    if (_S6 == 1.0)
      v23 = v15[1];
    else
      v23 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v16), _S6));
    if (*(_QWORD *)(v14 + 112))
    {
      v65 = v15[1];
      v24 = 0;
      v25 = 0;
      v26 = (float64x2_t)vdupq_lane_s64(v12.n128_i64[0], 0);
      *(_QWORD *)&v27.f64[1] = v12.n128_u64[1];
      *(_QWORD *)&v27.f64[0] = v5.n128_u64[0];
      *(_QWORD *)&v26.f64[0] = v6.n128_u64[0];
      v28 = v8.n128_f64[0];
      v29 = vmulq_f64((float64x2_t)v12, (float64x2_t)v12).f64[0];
      v30 = vmulq_f64(v27, v26);
      v31 = vcvtq_f64_f32(vmul_n_f32((float32x2_t)v9.n128_u64[0], v28));
      v32 = (int8x16_t)vmulq_f64((float64x2_t)v12, v31);
      *(float *)v27.f64 = v29 + v6.n128_f64[0] * v6.n128_f64[0];
      v5.n128_u64[1] = v6.n128_u64[0];
      v33 = (float)((float)(v7.n128_f32[0] * v28) / sqrtf(*(float *)v27.f64));
      v34 = vmulq_n_f64(vmlaq_f64(vnegq_f64((float64x2_t)vextq_s8(v32, v32, 8uLL)), v31, (float64x2_t)v5), 1.0 / vsubq_f64(v30, (float64x2_t)vdupq_laneq_s64((int64x2_t)v30, 1)).f64[0]);
      v35 = v33 * 2.8;
      if ((v68 & 0x400) != 0)
        v36 = 278528;
      else
        v36 = 0;
      v67 = v36;
      v37 = v33 * 5.6;
      v69 = v34;
      v38 = v34.f64[1];
      v39 = 1.0 / (v33 * 5.6);
      v66 = vcvtq_f32_f16(v23);
      do
      {
        v70 = 0u;
        v71 = 0u;
        v40 = (double *)(v14 + 32 * v24);
        v41 = v40[15];
        v70.f64[0] = v41;
        v42 = v40[16];
        v70.f64[1] = v42;
        v43 = v40[17];
        *(double *)&v71 = v43;
        v44 = v40[18];
        *((double *)&v71 + 1) = v44;
        if (v43 < 0.0)
        {
          v45 = v43 + v41;
          v43 = -v43;
          v70.f64[0] = v45;
          *(double *)&v71 = v43;
        }
        if (v44 < 0.0)
        {
          v42 = v44 + v42;
          v44 = -v44;
          v70.f64[1] = v42;
          *((double *)&v71 + 1) = v44;
        }
        v46 = v44 > v37 && v43 > v37;
        if (v46)
        {
          if ((v68 & 0x400) != 0)
            *(_BYTE *)(v4[2] + 16) = 12;
          if (!v25)
          {
            (*(void (**)(_QWORD *, _QWORD, _QWORD *))(*v4 + 496))(v4, 0, v89);
            v42 = v70.f64[1];
          }
          v47 = v69.f64[0] + v70.f64[0] - v35;
          v82.f64[0] = v47;
          v82.f64[1] = v47 + v37;
          v83 = *(double *)&v71 + v47;
          v84 = *(double *)&v71 + v47 + v37;
          v48 = v42 - v35 + v38;
          v49 = v48 + v37;
          v78 = v48;
          v79 = v48 + v37;
          v50 = *((double *)&v71 + 1) + v48;
          v80 = *((double *)&v71 + 1) + v48;
          v81 = *((double *)&v71 + 1) + v48 + v37;
          v75 = HIDWORD(v89[0]);
          v76 = v89[0];
          v77 = v89[0];
          v73[0] = HIDWORD(v89[0]);
          v73[1] = v89[0];
          v74 = v89[0];
          v51 = 1.0;
          if (v47 + v37 > *(double *)&v71 + v47)
          {
            v52 = (*(double *)&v71 + v47 + v47 + v37) * 0.5;
            v53 = v52;
            v54 = (v52 - v47) * v39;
            v51 = v54 * 2.0 + -0.9;
            v82.f64[1] = v53;
            v83 = v53;
          }
          if (v49 > v50)
          {
            v55 = (v50 + v49) * 0.5;
            v56 = v55;
            v57 = (v56 - v48) * v39;
            v51 = (v57 * 2.0 + -0.9) * v51;
            v79 = v56;
            v80 = v56;
          }
          v58 = v23;
          if (v51 < 1.0)
          {
            v59 = 0.0;
            if (v51 >= 0.0)
              v59 = v51;
            v58 = vcvt_f16_f32(vmulq_n_f32(v66, v59));
          }
          *(float16x4_t *)(v4[2] + 8) = v58;
          v60 = *(double *)((char *)a2 + v10);
          memset(v72, 0, 200);
          CA::Transform::set_affine((CA::Transform *)v72, v60, v11[1], v11[2], v11[3], v11[4], v11[5]);
          *((_QWORD *)&v72[9] + 1) = &v70;
          *(_QWORD *)&v72[10] = v72;
          DWORD2(v72[10]) = 63;
          memset((char *)&v72[10] + 12, 0, 28);
          CA::OGL::emit_nine_part_rect((uint64_t)v4, (uint64_t)&v72[9] + 8, (uint64_t)&v82, (uint64_t)&v78, (uint64_t)&v75, (uint64_t)v73, 0, 0, v67);
        }
        else
        {
          v70 = vaddq_f64(v70, v69);
          LOBYTE(v76) = 0;
          v75 = 33686017;
          v82 = v70;
          v84 = v70.f64[1];
          v83 = v70.f64[0] + v43;
          v85 = v70.f64[0] + v43;
          v86 = v70.f64[1] + v44;
          v87 = v70.f64[0];
          v88 = v70.f64[1] + v44;
          v61 = CA::Render::Path::new_path(0, 5u, (unsigned __int8 *)&v75, 4u, v82.f64, 0);
          v78 = 0.0;
          CA::Transform::set_affine((CA::Transform *)v72, *(double *)((char *)a2 + v10), v11[1], v11[2], v11[3], v11[4], v11[5]);
          CA::OGL::emit_shadow_path((uint64_t)v4);
          if (v61)
          {
            v62 = (unsigned int *)(v61 + 8);
            do
            {
              v63 = __ldaxr(v62);
              v64 = v63 - 1;
            }
            while (__stlxr(v64, v62));
            if (!v64)
              (*(void (**)(uint64_t))(*(_QWORD *)v61 + 16))(v61);
          }
        }
        ++v24;
        v14 = *((_QWORD *)this + 18);
        v25 = v46;
      }
      while (v24 < *(_QWORD *)(v14 + 112));
      v15 = (float16x4_t *)v4[2];
      v16 = v65;
    }
    v15[1] = v16;
    (*(void (**)(_QWORD *, _QWORD, _QWORD, __n128, __n128, __n128, __n128, __n128, __n128))(*v4 + 520))(v4, 0, 0, v5, v6, v7, v12, v8, v9);
    *(_BYTE *)(v4[2] + 16) = 0;
  }
  else
  {
    CA::CG::DrawShadow::draw_shadow(this, a2);
  }
}

uint64_t CA::OGL::GetPerfHud(CA::OGL *this)
{
  unsigned int v1;
  int *v2;
  int *v3;
  int *v4;
  int64_t v5;
  int *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  int *v15;
  __int128 v16;
  int *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  signed int v25;
  uint64_t v26;
  int v27;
  int v28;
  float v29;
  int v30;
  int v31;
  int v32;
  const char *v33;
  uint64_t v34;
  int out_token;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v1 = CARecordCurrentDisplayGet();
  os_unfair_lock_lock((os_unfair_lock_t)&CA::OGL::_perf_hud_list_lock);
  v3 = CA::OGL::_perf_hud_list[0];
  v2 = off_1EDD0FB38[0];
  if (CA::OGL::_perf_hud_list[0] == off_1EDD0FB38[0])
  {
LABEL_5:
    v5 = ((char *)off_1EDD0FB38[0] - (char *)CA::OGL::_perf_hud_list[0]) >> 4;
    if (qword_1EDD0FB48 < (unint64_t)(v5 + 1))
    {
      v6 = off_1EDD0FB40;
      v7 = (qword_1EDD0FB48 + 1) | ((unint64_t)(qword_1EDD0FB48 + 1) >> 1) | (((qword_1EDD0FB48 + 1) | ((unint64_t)(qword_1EDD0FB48 + 1) >> 1)) >> 2);
      v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
      v9 = v8 | (v8 >> 16) | ((v8 | (v8 >> 16)) >> 32);
      if (v9 + 1 > v5 + 1)
        v10 = v9 + 1;
      else
        v10 = v5 + 1;
      v11 = (int *)malloc_type_malloc(16 * v10, 0x1020040D5A9D86FuLL);
      v12 = v11;
      v13 = CA::OGL::_perf_hud_list[0];
      v14 = off_1EDD0FB38[0];
      if (CA::OGL::_perf_hud_list[0] != off_1EDD0FB38[0])
      {
        v15 = v11;
        do
        {
          v16 = *(_OWORD *)v13;
          v13 += 4;
          *(_OWORD *)v15 = v16;
          v15 += 4;
        }
        while (v13 != v14);
      }
      if (v3 != v6)
        free(CA::OGL::_perf_hud_list[0]);
      v2 = &v12[4 * v5];
      CA::OGL::_perf_hud_list[0] = v12;
      off_1EDD0FB38[0] = v2;
      qword_1EDD0FB48 = v10;
    }
    *v2 = 0;
    *((_QWORD *)v2 + 1) = 0;
    v17 = off_1EDD0FB38[0];
    v18 = off_1EDD0FB38[0];
    *off_1EDD0FB38[0] = v1;
    off_1EDD0FB38[0] = v18 + 4;
    v19 = operator new();
    v20 = v19;
    v21 = v19 + 768;
    v22 = 768;
    do
    {
      v23 = v19 + v22;
      *(_OWORD *)(v23 + 16) = 0uLL;
      *(_OWORD *)(v23 + 32) = 0uLL;
      *(_OWORD *)v23 = 0uLL;
      *(_QWORD *)(v23 + 48) = 0x200000001;
      *(_DWORD *)(v23 + 56) = 0;
      *(_BYTE *)(v23 + 60) = 0;
      v22 += 64;
    }
    while (v23 + 64 != v19 + 3840);
    CA::OGL::DebugRenderer::DebugRenderer((CA::OGL::DebugRenderer *)(v19 + 3976), 10000);
    *(_OWORD *)(v20 + 4072) = xmmword_18474E200;
    *(_QWORD *)(v20 + 4088) = 0x3885000000000000;
    *(_OWORD *)(v20 + 4096) = 0u;
    *(_OWORD *)(v20 + 4112) = 0u;
    *(_QWORD *)(v20 + 4128) = 0x3C00000000000000;
    *(_DWORD *)(v20 + 4136) = -1;
    *(_OWORD *)(v20 + 4144) = 0u;
    if (CA::OGL::timebase_once != -1)
      dispatch_once_f(&CA::OGL::timebase_once, 0, (dispatch_function_t)CA::OGL::PerformanceHUD::initialize_timebase);
    *(_QWORD *)(v20 + 4000) = 0x4180000041600000;
    *(_QWORD *)(v20 + 4128) = *(_QWORD *)(v20 + 4088);
    memcpy((void *)v20, (const void *)(v20 + 384), 0x180uLL);
    memcpy(&CA::OGL::PerformanceHUD::_prev_global_values, &CA::OGL::PerformanceHUD::_global_values, 0x180uLL);
    *(_OWORD *)(v20 + 384) = 0u;
    *(_OWORD *)(v20 + 400) = 0u;
    *(_OWORD *)(v20 + 416) = 0u;
    *(_OWORD *)(v20 + 432) = 0u;
    *(_OWORD *)(v20 + 448) = 0u;
    *(_OWORD *)(v20 + 464) = 0u;
    *(_OWORD *)(v20 + 480) = 0u;
    *(_OWORD *)(v20 + 496) = 0u;
    *(_OWORD *)(v20 + 512) = 0u;
    *(_OWORD *)(v20 + 528) = 0u;
    *(_OWORD *)(v20 + 544) = 0u;
    *(_OWORD *)(v20 + 560) = 0u;
    *(_OWORD *)(v20 + 576) = 0u;
    *(_OWORD *)(v20 + 592) = 0u;
    *(_OWORD *)(v20 + 608) = 0u;
    *(_OWORD *)(v20 + 624) = 0u;
    *(_OWORD *)(v20 + 640) = 0u;
    *(_OWORD *)(v20 + 656) = 0u;
    *(_OWORD *)(v20 + 672) = 0u;
    *(_OWORD *)(v20 + 688) = 0u;
    *(_OWORD *)(v20 + 704) = 0u;
    *(_OWORD *)(v20 + 720) = 0u;
    *(_OWORD *)(v20 + 736) = 0u;
    *(_OWORD *)(v20 + 752) = 0u;
    xmmword_1EDD12580 = 0u;
    unk_1EDD12590 = 0u;
    xmmword_1EDD12560 = 0u;
    unk_1EDD12570 = 0u;
    xmmword_1EDD12540 = 0u;
    unk_1EDD12550 = 0u;
    xmmword_1EDD12520 = 0u;
    *(_OWORD *)&qword_1EDD12530 = 0u;
    xmmword_1EDD12500 = 0u;
    unk_1EDD12510 = 0u;
    xmmword_1EDD124E0 = 0u;
    unk_1EDD124F0 = 0u;
    xmmword_1EDD124C0 = 0u;
    unk_1EDD124D0 = 0u;
    xmmword_1EDD124A0 = 0u;
    unk_1EDD124B0 = 0u;
    xmmword_1EDD12480 = 0u;
    unk_1EDD12490 = 0u;
    xmmword_1EDD12460 = 0u;
    unk_1EDD12470 = 0u;
    xmmword_1EDD12440 = 0u;
    unk_1EDD12450 = 0u;
    CA::OGL::PerformanceHUD::_global_values = 0u;
    *(_OWORD *)&qword_1EDD12430 = 0u;
    *((_QWORD *)v17 + 1) = v20;
    v24 = (uint64_t *)(v17 + 2);
    if (initialized[0] != -1)
      dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
    if ((int)*(float *)debug_values >= 1)
      v25 = *(float *)debug_values;
    else
      v25 = 20;
    *(_QWORD *)(v20 + 3848) = "Basic";
    *(_QWORD *)(v20 + 3856) = "Blurs";
    *(_QWORD *)(v20 + 3880) = "PerfStates";
    *(_QWORD *)(v20 + 3896) = "EDR";
    *(_QWORD *)(v20 + 3904) = "Glitches";
    *(_QWORD *)(v20 + 3912) = "GPU";
    *(_QWORD *)(v20 + 3920) = "Display Bandwidth";
    *(_QWORD *)(v20 + 3928) = "Tonemapping Accelerator";
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 0, 0, (uint64_t)"FPS", 3);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 0, 0x1Bu, (uint64_t)"Thermal Pressure", 3);
    if (CAFrameRateArbitrationEnabled(void)::once != -1)
      dispatch_once(&CAFrameRateArbitrationEnabled(void)::once, &__block_literal_global_14849);
    if (CAFrameRateArbitrationEnabled(void)::enabled)
      CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 1, 1u, (uint64_t)"Server FPS", 3);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 1, 2u, (uint64_t)"Frame Duration", 2);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 1, 3u, (uint64_t)"render_for_time", 2);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 7, 0x10u, (uint64_t)"Display nits", 7);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 7, 0x12u, (uint64_t)"Luma boost", 7);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 1, 4u, (uint64_t)"Offscreen Passes", 3);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 1, 5u, (uint64_t)"Dirty Area", 5);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 1, 8u, (uint64_t)"Frame Delay", 2);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 1, 6u, (uint64_t)"Update", 4);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 1, 7u, (uint64_t)"SwapID", 4);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 2, 9u, (uint64_t)"Backdrop Count", 3);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 2, 0xAu, (uint64_t)"Blur Count", 3);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 3, 0xBu, (uint64_t)"Emitter Count", 3);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 3, 0xCu, (uint64_t)"Particle Count", 3);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 5, 0x15u, (uint64_t)"CPU Freq", 5);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 5, 0x16u, (uint64_t)"GPU Freq", 5);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 5, 0x17u, (uint64_t)"SoC Freq", 5);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 5, 0x18u, (uint64_t)"DRAM Freq", 5);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 6, 0x1Au, (uint64_t)"Lost Perf", 7);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 6, 0x19u, (uint64_t)"Battery Drain", 6);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 6, 0x1Cu, (uint64_t)"CPU Power", 6);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 6, 0x1Du, (uint64_t)"GPU Power", 6);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 6, 0x1Eu, (uint64_t)"SoC Power", 6);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 6, 0x1Fu, (uint64_t)"DRAM Power", 6);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 6, 0x20u, (uint64_t)"ISP Power", 6);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 6, 0x21u, (uint64_t)"AP Power", 6);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 8, 0x22u, (uint64_t)"Detected Glitch", 2);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 9, 0x23u, (uint64_t)"GPU Time", 2);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 11, 0x2Du, (uint64_t)"GPU", 3);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 11, 0x2Eu, (uint64_t)"MSR", 3);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 11, 0x2Fu, (uint64_t)"Display", 3);
    if (CADeviceSupportsAPT::once != -1)
      dispatch_once(&CADeviceSupportsAPT::once, &__block_literal_global_37);
    if (CADeviceSupportsAPT::supports_apt)
      v26 = 120;
    else
      v26 = 60;
    v27 = *(_DWORD *)(v20 + 812);
    if (v27)
      *(_QWORD *)(v20 + 784) = v26;
    v28 = *(_DWORD *)(v20 + 876);
    if (v28)
      *(_QWORD *)(v20 + 848) = v26;
    if (*(_DWORD *)(v20 + 940))
      *(_QWORD *)(v20 + 912) = (unint64_t)(float)(*(float *)&CA::OGL::PerformanceHUD::_scale_ms_to_ticks * 33.333);
    v29 = 1000.0 / (float)v26;
    if (*(_DWORD *)(v20 + 1004))
      *(_QWORD *)(v20 + 976) = (unint64_t)(float)(*(float *)&CA::OGL::PerformanceHUD::_scale_ms_to_ticks * v29);
    if (*(_DWORD *)(v20 + 1068))
      *(_QWORD *)(v20 + 1040) = v25;
    if (*(_DWORD *)(v20 + 1324))
      *(_QWORD *)(v20 + 1296) = (unint64_t)(float)(*(float *)&CA::OGL::PerformanceHUD::_scale_ms_to_ticks * 50.0);
    if (*(_DWORD *)(v20 + 1388))
      *(_QWORD *)(v20 + 1360) = 4;
    if (*(_DWORD *)(v20 + 1452))
      *(_QWORD *)(v20 + 1424) = 4;
    if (*(_DWORD *)(v20 + 1516))
      *(_QWORD *)(v20 + 1488) = 100;
    if (*(_DWORD *)(v20 + 1580))
      *(_QWORD *)(v20 + 1552) = 1000;
    if (*(_DWORD *)(v20 + 1964))
      *(_QWORD *)(v20 + 1936) = 1;
    if (*(_DWORD *)(v20 + 1836))
      *(_DWORD *)(v20 + 1848) = 2;
    if (*(_DWORD *)(v20 + 2156))
      *(_QWORD *)(v20 + 2128) = 100;
    if (*(_DWORD *)(v20 + 2220))
      *(_QWORD *)(v20 + 2192) = 100;
    if (*(_DWORD *)(v20 + 2284))
      *(_QWORD *)(v20 + 2256) = 100;
    if (*(_DWORD *)(v20 + 2348))
      *(_QWORD *)(v20 + 2320) = 100;
    if (*(_DWORD *)(v20 + 2924))
      *(_QWORD *)(v20 + 2896) = 4000;
    if (*(_DWORD *)(v20 + 2412))
      *(_QWORD *)(v20 + 2384) = 6000;
    if (*(_DWORD *)(v20 + 2988))
      *(_QWORD *)(v20 + 2960) = 100;
    if (*(_DWORD *)(v20 + 3052))
      *(_QWORD *)(v20 + 3024) = (unint64_t)(float)(*(float *)&CA::OGL::PerformanceHUD::_scale_ms_to_ticks * v29);
    if (v27)
      *(_DWORD *)(v20 + 824) = 1;
    if (v28)
      *(_DWORD *)(v20 + 888) = 2;
    if (v27)
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v21, 3);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
      v28 = *(_DWORD *)(v20 + 876);
    }
    if (v28)
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 832, 3);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 940))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 896, 3);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 1004))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 960, 3);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 1068))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 1024, 3);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 1196))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 1152, 1);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 1260))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 1216, 1);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 2540))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 2496, 1);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 1324))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 1280, 3);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 1388))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 1344, 1);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 1452))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 1408, 3);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 1836))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 1792, 1);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 1132))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 1088, 3);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 1516))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 1472, 1);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 1580))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 1536, 3);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 1964))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 1920, 3);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 2156))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 2112, 3);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 2220))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 2176, 3);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 2284))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 2240, 1);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 2348))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 2304, 1);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 2412))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 2368, 3);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 2604))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 2560, 1);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 2668))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 2624, 1);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 2732))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 2688, 1);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 2796))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 2752, 1);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 2860))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 2816, 1);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 2924))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 2880, 3);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 2988))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 2944, 3);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 3052))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 3008, 3);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 7, 0xDu, (uint64_t)"Display EDR", 7);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 7, 0xEu, (uint64_t)"Render EDR", 7);
    CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 7, 0xFu, (uint64_t)"Desired EDR", 7);
    v30 = *(_DWORD *)(v20 + 1644);
    if (v30)
      *(_QWORD *)(v20 + 1616) = 1;
    v31 = *(_DWORD *)(v20 + 1708);
    if (v31)
      *(_QWORD *)(v20 + 1680) = 1;
    v32 = *(_DWORD *)(v20 + 1772);
    if (v32)
      *(_QWORD *)(v20 + 1744) = 1;
    if (v30)
      *(_DWORD *)(v20 + 1656) = 2;
    if (v31)
      *(_DWORD *)(v20 + 1720) = 2;
    if (v32)
      *(_DWORD *)(v20 + 1784) = 2;
    if (v30)
    {
      *(_DWORD *)(v20 + 1652) = 4;
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
      v31 = *(_DWORD *)(v20 + 1708);
    }
    if (v31)
    {
      *(_DWORD *)(v20 + 1716) = 4;
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 1644))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 1600, 3);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 1708))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 1664, 3);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (*(_DWORD *)(v20 + 1772))
    {
      CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 1728, 3);
      CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    }
    if (CADeviceNeedsDisplayWorkarounds::once[0] != -1)
      dispatch_once(CADeviceNeedsDisplayWorkarounds::once, &__block_literal_global_52_9800);
    if (CADeviceNeedsDisplayWorkarounds::needs_workarounds)
    {
      CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 7, 0x11u, (uint64_t)"Overdrive", 7);
      if (*(_DWORD *)(v20 + 1900))
      {
        *(_QWORD *)(v20 + 1872) = 1;
        CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 1856, 3);
        CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
      }
    }
    if (CADeviceSupportsBandwidthStatistics::once != -1)
      dispatch_once(&CADeviceSupportsBandwidthStatistics::once, &__block_literal_global_239);
    if (CADeviceSupportsBandwidthStatistics::bw_stats)
    {
      CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 10, 0x24u, (uint64_t)"GP0 Observed BW", 7);
      CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 10, 0x27u, (uint64_t)"GP1 Observed BW", 7);
      CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 10, 0x25u, (uint64_t)"GP0 Max BW", 7);
      CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 10, 0x28u, (uint64_t)"GP1 Max BW", 7);
      CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 10, 0x26u, (uint64_t)"GP0 Compression", 7);
      CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 10, 0x29u, (uint64_t)"GP1 Compression", 7);
      if (*(_DWORD *)(v20 + 3116))
      {
        CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 3072, 1);
        CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
      }
      if (*(_DWORD *)(v20 + 3308))
      {
        CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 3264, 1);
        CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
      }
      if (*(_DWORD *)(v20 + 3180))
      {
        CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 3136, 1);
        CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
      }
      if (*(_DWORD *)(v20 + 3372))
      {
        CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 3328, 1);
        CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
      }
      if (*(_DWORD *)(v20 + 3244))
      {
        CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 3200, 3);
        CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
      }
      if (*(_DWORD *)(v20 + 3436))
      {
        CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 3392, 3);
        CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
      }
    }
    if (CADeviceSupportsRTPLC::once != -1)
      dispatch_once(&CADeviceSupportsRTPLC::once, &__block_literal_global_218);
    if (CADeviceSupportsRTPLC::rtplc)
    {
      CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 7, 0x2Au, (uint64_t)"APCE", 7);
      CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 7, 0x2Bu, (uint64_t)"RTPLC Triggered", 3);
      CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 7, 0x2Cu, (uint64_t)"Brightness Capped", 3);
      if (*(_DWORD *)(v20 + 3500))
      {
        CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 3456, 3);
        CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
      }
      if (*(_DWORD *)(v20 + 3564))
      {
        CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 3520, 3);
        CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
      }
      if (*(_DWORD *)(v20 + 3628))
      {
        CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 3584, 3);
        CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
      }
      if (*(_DWORD *)(v20 + 3500))
        *(_QWORD *)(v20 + 3472) = 1;
      if (*(_DWORD *)(v20 + 3564))
        *(_QWORD *)(v20 + 3536) = 1;
      if (*(_DWORD *)(v20 + 3628))
        *(_QWORD *)(v20 + 3600) = 1;
    }
    if (CADeviceSupportsTwilight::once[0] != -1)
      dispatch_once(CADeviceSupportsTwilight::once, &__block_literal_global_220);
    if (CADeviceSupportsTwilight::twilight)
    {
      CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 7, 0x13u, (uint64_t)"Twilight Strength", 7);
      if (*(_DWORD *)(v20 + 2028))
      {
        *(_QWORD *)(v20 + 2000) = 1;
        CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 1984, 3);
        CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
      }
      CA::OGL::PerformanceHUD::register_counter((CA::OGL::PerformanceHUD *)v20, 7, 0x14u, (uint64_t)"Ammolite Strength", 7);
      if (*(_DWORD *)(v20 + 2092))
      {
        *(_QWORD *)(v20 + 2064) = 1;
        CA::OGL::PerformanceHUD::CounterInfo::set_display_mode(v20 + 2048, 3);
        CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
      }
    }
    if (*(_DWORD *)(v20 + 1004))
      *(_BYTE *)(v20 + 1020) = 1;
    if (*(_DWORD *)(v20 + 940))
      *(_BYTE *)(v20 + 956) = 1;
    if (*(_DWORD *)(v20 + 1260))
      *(_BYTE *)(v20 + 1276) = 1;
    if (*(_DWORD *)(v20 + 1324))
      *(_BYTE *)(v20 + 1340) = 1;
    if (*(_DWORD *)(v20 + 2988))
      *(_BYTE *)(v20 + 3004) = 1;
    *(_DWORD *)(v20 + 4136) = 2;
    CA::OGL::PerformanceHUD::layout((CA::OGL::PerformanceHUD *)v20);
    *(_QWORD *)(v20 + 4128) = *(_QWORD *)(v20 + 4088);
    if ((int *)((char *)off_1EDD0FB38[0] - (char *)CA::OGL::_perf_hud_list[0]) == (int *)16)
    {
      out_token = 0;
      v33 = (const char *)*MEMORY[0x1E0C83A00];
      if (!notify_register_check((const char *)*MEMORY[0x1E0C83A00], &out_token))
      {
        notify_get_state(out_token, CA::OGL::thermal_level);
        notify_cancel(out_token);
      }
      notify_register_dispatch(v33, &CA::OGL::thermal_level_register_token, MEMORY[0x1E0C80D38], &__block_literal_global_60);
    }
  }
  else
  {
    v4 = CA::OGL::_perf_hud_list[0];
    while (*v4 != v1)
    {
      v4 += 4;
      if (v4 == off_1EDD0FB38[0])
        goto LABEL_5;
    }
    v24 = (uint64_t *)(v4 + 2);
  }
  v34 = *v24;
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::OGL::_perf_hud_list_lock);
  return v34;
}

uint64_t ___ZN2CA3OGLL34register_for_thermal_notificationsEv_block_invoke(int a1, int token)
{
  uint64_t result;
  uint64_t v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  v3[0] = 0;
  result = notify_get_state(token, v3);
  if (!(_DWORD)result)
    CA::OGL::thermal_level[0] = LODWORD(v3[0]);
  return result;
}

void CA::OGL::update_perf_hud_pstate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double lostperf_ratio;
  float batterydrain_watts;
  float v18;

  if ((a2 & 0x60) != 0)
  {
    if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::once != -1)
      dispatch_once(&CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::once, &__block_literal_global_62);
    if (!CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate
      && (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_monitor_connecting & 1) == 0)
    {
      CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_current_options = 0;
    }
    if ((a2 & 0x40) != 0)
      v4 = (a2 >> 5) & 1 | 2;
    else
      v4 = (a2 >> 5) & 1;
    if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_current_options == v4)
    {
      if (!CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate)
      {
LABEL_12:
        if ((a2 & 0x20) != 0)
        {
          *(_OWORD *)(a1 + 568) = 0u;
          *(_OWORD *)(a1 + 552) = 0u;
        }
        else if ((a2 & 0x40) != 0)
        {
          *(_QWORD *)(a1 + 592) = 0;
          *(_QWORD *)(a1 + 584) = 0;
          *(_OWORD *)(a1 + 608) = 0u;
          *(_OWORD *)(a1 + 624) = 0u;
          *(_OWORD *)(a1 + 640) = 0u;
        }
        return;
      }
      goto LABEL_28;
    }
    if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate
      && CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_destroy)
    {
      if ((CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_monitor_connecting & 1) == 0)
      {
        CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_destroy();
        CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate = 0;
LABEL_25:
        if ((CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_monitor_connecting & 1) != 0)
          goto LABEL_12;
        if (!CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_connect)
          goto LABEL_12;
        CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_monitor_connecting = 1;
        CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_current_options = v4;
        CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_connect(v4, &__block_literal_global_80);
        if (!CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate)
          goto LABEL_12;
      }
    }
    else if (!CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate)
    {
      goto LABEL_25;
    }
LABEL_28:
    if ((a2 & 0x20) != 0)
    {
      if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_cpu)
        v7 = (uint64_t)(float)(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_cpu()
                            * 100.0);
      else
        v7 = 0;
      if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_gpu)
        v8 = (uint64_t)(float)(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_gpu(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate)
                            * 100.0);
      else
        v8 = 0;
      if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_soc)
        v9 = (uint64_t)(float)(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_soc(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate)
                            * 100.0);
      else
        v9 = 0;
      v10 = (uint64_t)CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_dram;
      if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_dram)
        v10 = (uint64_t)(float)(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_dram(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate)
                             * 100.0);
      *(_QWORD *)(a1 + 552) = v7;
      *(_QWORD *)(a1 + 560) = v8;
      *(_QWORD *)(a1 + 568) = v9;
      *(_QWORD *)(a1 + 576) = v10;
    }
    else if ((a2 & 0x40) != 0)
    {
      if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_cpu_watts)
        v6 = (uint64_t)(float)(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_cpu_watts()
                            * 1000.0);
      else
        v6 = 0;
      if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_gpu_watts)
        v11 = (uint64_t)(float)(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_gpu_watts(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate)
                             * 1000.0);
      else
        v11 = 0;
      if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_soc_watts)
        v12 = (uint64_t)(float)(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_soc_watts(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate)
                             * 1000.0);
      else
        v12 = 0;
      if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_dram_watts)
        v13 = (uint64_t)(float)(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_dram_watts(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate)
                             * 1000.0);
      else
        v13 = 0;
      if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_isp_watts)
        v14 = (uint64_t)(float)(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_isp_watts(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate)
                             * 1000.0);
      else
        v14 = 0;
      if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_ap_watts)
        v15 = (uint64_t)(float)(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_ap_watts(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate)
                             * 1000.0);
      else
        v15 = 0;
      if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_lostperf_ratio)
        lostperf_ratio = CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_lostperf_ratio(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate);
      else
        lostperf_ratio = 0.0;
      batterydrain_watts = 0.0;
      if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_batterydrain_watts)
        batterydrain_watts = CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_batterydrain_watts(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate, 0.0);
      *(_QWORD *)(a1 + 608) = v6;
      *(_QWORD *)(a1 + 616) = v11;
      *(_QWORD *)(a1 + 624) = v12;
      *(_QWORD *)(a1 + 632) = v13;
      *(_QWORD *)(a1 + 640) = v14;
      *(_QWORD *)(a1 + 648) = v15;
      if (batterydrain_watts < 0.0)
        v18 = 0.0;
      else
        v18 = batterydrain_watts * 1000.0;
      *(_QWORD *)(a1 + 584) = (uint64_t)v18;
      *(double *)(a1 + 592) = lostperf_ratio;
    }
    return;
  }
  if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate)
    v5 = CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_destroy == 0;
  else
    v5 = 1;
  if (!v5)
  {
    CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_current_options = 0;
    CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_destroy();
    CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate = 0;
  }
}

void ___ZN2CA3OGLL22update_perf_hud_pstateEPNS0_14PerformanceHUDEj_block_invoke_2(uint64_t a1, uint64_t a2)
{
  CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate = a2;
  CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_monitor_connecting = 0;
}

CA::OGL::DebugRenderer *std::unique_ptr<CA::OGL::DebugRenderer>::reset[abi:nn180100](CA::OGL::DebugRenderer **a1, CA::OGL::DebugRenderer *a2)
{
  CA::OGL::DebugRenderer *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CA::OGL::DebugRenderer::~DebugRenderer(result);
    JUMPOUT(0x186DBD990);
  }
  return result;
}

uint64_t ___ZN2CA3OGL7Context20update_debug_messageEPKNS_9TransformE_block_invoke()
{
  uint64_t result;

  result = MGGetBoolAnswer();
  CA::OGL::Context::update_debug_message(CA::Transform const*)::show_message = result;
  return result;
}

void CA::OGL::GLESContext::~GLESContext(CA::OGL::GLESContext *this, uint64_t a2, void *a3)
{
  malloc_zone_t *malloc_zone;

  CA::OGL::GLESContext::~GLESContext(this, a2, a3);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  CA::WindowServer::Surface **v4;
  CA::WindowServer::Surface **v5;
  CA::WindowServer::Surface *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (*v9)(void);
  CA::WindowServer::Surface **v11;
  void *v12;

  v4 = (CA::WindowServer::Surface **)*((_QWORD *)this + 273);
  if (v4)
  {
    *((_QWORD *)this + 273) = 0;
    v5 = v4;
    do
    {
      v6 = *v5;
      v7 = (_QWORD *)*((_QWORD *)*v5 + 10);
      v8 = v7 + 9;
      if (v7[9])
      {
        v9 = (uint64_t (*)(void))v7[10];
        if (v9 && (char *)v9 != (char *)CA::OGL::GLESContext::release_display_surface)
          v7 = (_QWORD *)v9();
      }
      *v8 = 0;
      v8[1] = 0;
      CA::OGL::GLESContext::release_display_surface((CA::OGL::GLESContext *)v7, v6, a3);
      v5 = (CA::WindowServer::Surface **)v5[1];
    }
    while (v5);
    do
    {
      v11 = (CA::WindowServer::Surface **)v4[1];
      free(v4);
      v4 = v11;
    }
    while (v11);
  }
  v12 = (void *)*((_QWORD *)this + 266);
  if (v12)
    free(v12);
  CA::OGL::Context::~Context(this);
}

uint64_t CA::OGL::GLESContext::set_destination_texture(uint64_t this, int a2, int a3, int a4)
{
  char v4;

  *(_DWORD *)(this + 2160) = a2;
  *(_DWORD *)(this + 2164) = a3;
  if (a4)
    v4 = 8;
  else
    v4 = 0;
  *(_BYTE *)(this + 2192) = *(_BYTE *)(this + 2192) & 0xF7 | v4;
  return this;
}

uint64_t CA::OGL::Context::set_destination_iosurface(CA::OGL::Context *this, __IOSurface *a2)
{
  return 0;
}

uint64_t CA::OGL::Context::alloc_destination_texture(CA::OGL::Context *this, __IOSurface *a2)
{
  return 0;
}

float CA::OGL::Context::destination_offset(CA::OGL::Context *this)
{
  return 0.0;
}

uint64_t CA::OGL::Context::enforces_protection(CA::OGL::Context *this)
{
  return 0;
}

uint64_t CA::OGL::Context::protection_options(CA::OGL::Context *this)
{
  return 0;
}

uint64_t CA::OGL::Context::compile_shader(CA::OGL::Context *this, const char *a2)
{
  return 0;
}

uint64_t CA::OGL::Context::load_pipeline(CA::OGL::Context *this, const char *a2)
{
  return 0;
}

uint64_t CA::OGL::Context::start_command_buffer(CA::OGL::Context *this, unint64_t a2, const char *a3)
{
  return 0;
}

uint64_t CA::OGL::Context::add_submitted_callback()
{
  return 0;
}

uint64_t CA::OGL::Context::add_completed_callback()
{
  return 0;
}

uint64_t CA::OGL::GLESContext::get(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;

  result = 0x10000;
  switch(a2)
  {
    case 1:
    case 2:
      return result;
    case 3:
      result = *(unsigned int *)(a1 + 2096);
      break;
    case 4:
      result = *(unsigned int *)(a1 + 2100);
      break;
    case 5:
      v4 = *(_QWORD *)(a1 + 2104);
      if (v4)
        result = v4;
      else
        result = 0x2000;
      break;
    case 6:
    case 13:
    case 20:
    case 22:
    case 26:
      result = 1;
      break;
    case 7:
      result = *(unsigned int *)(a1 + 2120);
      break;
    case 16:
      result = 0;
      break;
    case 17:
      result = (*(_DWORD *)(a1 + 2124) >> 2) & 1;
      break;
    case 18:
      result = (*(_DWORD *)(a1 + 2124) >> 7) & 1;
      break;
    case 21:
      result = (*(_DWORD *)(a1 + 2124) >> 20) & 1;
      break;
    case 23:
      result = (*(_DWORD *)(a1 + 2124) >> 11) & 1;
      break;
    default:
      result = CA::OGL::GLContext::get(a1, a2);
      break;
  }
  return result;
}

unint64_t CA::OGL::GLESContext::subimage_max_rowbytes(CA::OGL::GLESContext *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  unint64_t result;
  unint64_t v8;
  unint64_t v9;

  if (a2 == -1)
    v6 = 1;
  else
    v6 = a2;
  result = CA::Render::format_rowbytes((CA::Render *)v6, a3);
  if (result)
  {
    v8 = result + 16;
    if (a4 >= 0x100)
      v8 = result;
    if (a4 <= 0x7F)
      v8 = result + 32;
    if (a4 <= 0x3F)
      v8 = result + 64;
    v9 = *((_QWORD *)this + 263);
    if (v8 <= v9 || v9 == 0)
      return v8;
    else
      return *((_QWORD *)this + 263);
  }
  return result;
}

uint64_t CA::OGL::GLESContext::update(CA::OGL::GLESContext *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  float v8;
  float v9;
  float v10;
  int v11;
  float v12;
  uint8_t v14[16];
  uint8_t v15[16];
  uint8_t buf[8];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 2192) & 2) != 0)
  {
    CA::OGL::GLESContext::purge(this, 1);
    if (*((int *)this + 524) > 2)
    {
      *((_BYTE *)this + 2192) = *((_BYTE *)this + 2192) & 0xFC | 1;
    }
    else
    {
      *((_BYTE *)this + 2192) &= 0xFCu;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v2 = x_log_category_ogl_opengl;
        if (os_log_type_enabled((os_log_t)x_log_category_ogl_opengl, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v2, OS_LOG_TYPE_DEFAULT, "CoreAnimation: unsupported graphics hardware", buf, 2u);
        }
      }
      if (*((int *)this + 524) <= 2)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v3 = x_log_category_ogl_opengl;
          if (os_log_type_enabled((os_log_t)x_log_category_ogl_opengl, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v15 = 0;
            _os_log_impl(&dword_184457000, v3, OS_LOG_TYPE_DEFAULT, "; need three or more texture units", v15, 2u);
          }
        }
      }
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v4 = x_log_category_ogl_opengl;
        if (os_log_type_enabled((os_log_t)x_log_category_ogl_opengl, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v14 = 0;
          _os_log_impl(&dword_184457000, v4, OS_LOG_TYPE_DEFAULT, "\n", v14, 2u);
        }
      }
    }
  }
  v5 = *((_QWORD *)this + 22);
  if (v5)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    if (v6)
    {
      v7 = 10 * *(int *)(v6 + 180) * (uint64_t)*(int *)(v6 + 176);
      if (v7 <= 0x200000)
        v7 = 0x200000;
      *((_QWORD *)this + 47) = v7;
    }
  }
  if (*((_QWORD *)this + 31))
  {
    *((_DWORD *)this + 539) = 0;
  }
  else
  {
    v8 = (float)*((int *)this + 47);
    v9 = (float)*((int *)this + 49);
    v10 = v9 + v8;
    v11 = *((_DWORD *)this + 104);
    if ((v11 & 1) != 0)
      v12 = v9 + v8;
    else
      v12 = (float)*((int *)this + 47);
    if ((v11 & 1) == 0)
      v8 = v10;
    CA::OGL::GLContext::projection_matrix((uint64_t)this, (float)*((int *)this + 46), (float)*((int *)this + 48) + (float)*((int *)this + 46), v12, v8, 0);
    (*(void (**)(_QWORD, uint64_t, char *))(*((_QWORD *)this + 260) + 840))(**((_QWORD **)this + 260), 36006, (char *)this + 2156);
  }
  return *((_BYTE *)this + 2192) & 1;
}

uint64_t CA::OGL::GLESContext::purge(CA::OGL::GLESContext *this, int a2)
{
  _QWORD *v4;

  if (a2)
  {
    v4 = (_QWORD *)*((_QWORD *)this + 260);
    if (*((_DWORD *)this + 534))
    {
      ((void (*)(_QWORD, uint64_t, char *))v4[60])(*v4, 1, (char *)this + 2136);
      *((_DWORD *)this + 534) = 0;
    }
    if (*((_DWORD *)this + 535))
    {
      ((void (*)(_QWORD, uint64_t, char *))v4[60])(*v4, 1, (char *)this + 2140);
      *((_DWORD *)this + 535) = 0;
    }
    if (*((_DWORD *)this + 536))
    {
      ((void (*)(_QWORD, uint64_t, char *))v4[60])(*v4, 1, (char *)this + 2144);
      *((_DWORD *)this + 536) = 0;
    }
    if (*((_DWORD *)this + 537))
    {
      ((void (*)(_QWORD, uint64_t, char *))v4[60])(*v4, 1, (char *)this + 2148);
      *((_DWORD *)this + 537) = 0;
    }
    if (*((_DWORD *)this + 538))
    {
      ((void (*)(_QWORD, uint64_t, char *))v4[60])(*v4, 1, (char *)this + 2152);
      *((_DWORD *)this + 538) = 0;
    }
  }
  return CA::OGL::GLContext::purge(this, a2);
}

uint64_t CA::OGL::GLESContext::init_state(CA::OGL::GLESContext *this)
{
  CA::OGL::GLContext::init_state(this);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*((_QWORD *)this + 260) + 1568))(**((_QWORD **)this + 260), 3317, 1);
}

uint64_t CA::OGL::GLESContext::supports_fences(CA::OGL::GLESContext *this)
{
  return 1;
}

uint64_t CA::OGL::GLESContext::set_fence(CA::OGL::GLESContext *this)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*((_QWORD *)this + 260) + 6240))(**((_QWORD **)this + 260), 37143, 0);
}

BOOL CA::OGL::GLESContext::test_fence(CA::OGL::GLESContext *this, uint64_t a2)
{
  int v2;

  v2 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*((_QWORD *)this + 260) + 6264))(**((_QWORD **)this + 260), a2, 1, 0);
  return (v2 & 1) == 0 && (v2 - 37146) < 4;
}

uint64_t CA::OGL::GLESContext::delete_fence(CA::OGL::GLESContext *this)
{
  return (*(uint64_t (**)(_QWORD))(*((_QWORD *)this + 260) + 6256))(**((_QWORD **)this + 260));
}

uint64_t CA::OGL::GLContext::draw_elements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 280))(a1, a2, a3, a4, a5, a6, a7, 0);
}

uint64_t CA::OGL::Context::detach_surface(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 256);
  if (v1 != *(_QWORD *)(this + 248))
    return CA::OGL::Context::prepare_destination_((CA::OGL::Context *)this);
  if (v1)
    LODWORD(v1) = (*(unsigned __int8 *)(v1 + 72) >> 1) & 0x1F;
  if (*(_DWORD *)(this + 244) != (_DWORD)v1)
    return CA::OGL::Context::prepare_destination_((CA::OGL::Context *)this);
  return this;
}

uint64_t CA::OGL::GLESContext::destination_has_alpha_p(CA::OGL::GLESContext *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v2 = *((_QWORD *)this + 31);
  if (v2 && (*(_WORD *)(v2 + 112) & 0x100) == 0)
    return 1;
  v3 = *((_QWORD *)this + 25);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 504))
      return 1;
  }
  v5 = *((_QWORD *)this + 22);
  if (v5)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    v7 = *((unsigned __int16 *)this + 408);
    if ((v7 & 2) == 0 && v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 496))(v6);
  }
  else
  {
    v7 = *((unsigned __int16 *)this + 408);
  }
  return (v7 >> 2) & 1;
}

uint64_t CA::OGL::GLESContext::finish(CA::OGL::GLESContext *this)
{
  *((_BYTE *)this + 2192) &= ~4u;
  return (*(uint64_t (**)(_QWORD))(*((_QWORD *)this + 260) + 720))(**((_QWORD **)this + 260));
}

double CA::OGL::GLESContext::bind_gaussian(CA::OGL::GLESContext *this, unsigned int a2, float *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  char v13;
  _BYTE *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  double result;
  _BYTE v23[2740];
  unsigned int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 2);
  v7 = CA::OGL::state_image_texture_unit(v6, a2);
  v8 = v7;
  v9 = *((unsigned int *)this + 537);
  if ((_DWORD)v9)
  {
    *(_WORD *)(v6 + 2 * v7 + 144) = 3553;
    *(_QWORD *)(v6 + 8 * v7 + 176) = v9;
  }
  else
  {
    MEMORY[0x1E0C80A78](v7);
    v10 = v23;
    bzero(v23, 0xAAAuLL);
    v11 = 0;
    v12 = &CA::OGL::gaussian_data;
    do
    {
      v13 = *v12++;
      v14 = &v23[v11];
      *v14 = v13;
      v14[1] = v13;
      v11 += 2;
    }
    while (v11 != 2730);
    v15 = (_QWORD *)*((_QWORD *)this + 260);
    v24 = 0;
    ((void (*)(_QWORD, uint64_t, unsigned int *))v15[99])(*v15, 1, &v24);
    v16 = v24;
    v17 = *((_QWORD *)this + 2);
    *(_WORD *)(v17 + 2 * v8 + 144) = 3553;
    *(_QWORD *)(v17 + 8 * v8 + 176) = v16;
    CA::OGL::GLContext::update_texture((uint64_t)this, v8);
    ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))v15[305])(*v15, 3553, 10241, 9987);
    ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))v15[305])(*v15, 3553, 10240, 9729);
    ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))v15[305])(*v15, 3553, 10242, 33071);
    ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))v15[305])(*v15, 3553, 10243, 33071);
    v18 = *((_DWORD *)this + 531);
    if ((v18 & 0x100) != 0)
    {
      ((void (*)(_QWORD, uint64_t, uint64_t, float))v15[303])(*v15, 3553, 34046, 8.0);
      v18 = *((_DWORD *)this + 531);
    }
    if ((v18 & 0x200) != 0)
      ((void (*)(_QWORD, uint64_t, uint64_t, float))v15[303])(*v15, 3553, 34049, -0.25);
    v19 = 0;
    v20 = 32;
    do
    {
      v21 = v10;
      if (v10 && (*((_BYTE *)this + 2126) & 8) != 0)
        ((void (*)(_QWORD, uint64_t, unint64_t))v15[196])(*v15, 3314, v20);
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, _QWORD, uint64_t, int, _BYTE *))v15[302])(*v15, 3553, v19++, 6410, v20, v20, 0, 6410, 5121, v10);
      v10 += 2 * v20 * v20;
      v20 >>= 1;
    }
    while (v19 != 6);
    if (v21 && (*((_BYTE *)this + 2126) & 8) != 0)
      ((void (*)(_QWORD, uint64_t, _QWORD))v15[196])(*v15, 3314, 0);
    *((_DWORD *)this + 537) = v24;
    v6 = *((_QWORD *)this + 2);
  }
  *(_OWORD *)(v6 + 16 * a2 + 96) = xmmword_18474E210;
  result = 0.0078125;
  *(_QWORD *)a3 = 0x3F80000000000000;
  return result;
}

uint64_t CA::OGL::Context::create_lut_texture(CA::OGL::Context *this, const CA::Render::Vector *a2)
{
  return 0;
}

uint64_t CA::OGL::Context::create_lut_texture(CA::OGL::Context *this, const CA::Render::Interpolator *a2)
{
  return 0;
}

uint64_t CA::OGL::Context::bind_lut_texture(CA::OGL::Context *this, unsigned int a2, CA::Render::Texture *a3)
{
  return 0;
}

BOOL CA::OGL::GLESContext::should_tile_image(CA::OGL::GLESContext *this, CA::Render::Texture *a2)
{
  unsigned int v2;
  _BOOL8 result;
  unint64_t v4;

  v2 = *((_DWORD *)this + 525);
  result = 1;
  if (*((_DWORD *)a2 + 4) <= v2 && *((_DWORD *)a2 + 5) <= v2)
  {
    if (*((_BYTE *)a2 + 12) != 23)
      return 0;
    v4 = *((_QWORD *)this + 263);
    if (!v4 || *((_QWORD *)a2 + 20) <= v4)
      return 0;
  }
  return result;
}

uint64_t CA::OGL::Context::can_tile_image(CA::OGL::Context *this, CA::Render::Texture *a2)
{
  return 1;
}

uint64_t CA::OGL::GLESContext::bind_image_impl(CA::OGL::Context *this, unsigned int a2, CA::Render::Texture *a3, __int16 a4, unsigned int a5, unsigned int a6, int a7, uint64_t a8, const char *a9)
{
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  CFTypeRef *v24;
  CFTypeRef *v25;
  _BOOL4 v26;
  CFTypeRef *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  CA::OGL::Context *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  int v42;
  const char *v43;
  NSObject *v44;
  uint32_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  __int16 v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v67;
  __int16 v68;
  uint8_t buf[4];
  int v70;
  __int16 v71;
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if (*((CA::OGL::Context **)a3 + 11) != this || (v17 = *((_QWORD *)a3 + 10)) == 0)
  {
    v17 = CA::OGL::Context::lookup_image_(this, a3, 1);
    if (!v17)
      return v17;
  }
  if (*((_BYTE *)a3 + 12) == 23)
  {
    if (!*(_WORD *)(v17 + 52)
      && ((*((_BYTE *)this + 2126) & 4) != 0
       || (*((_DWORD *)a3 + 4) & (*((_DWORD *)a3 + 4) - 1)) == 0
       && (*((_DWORD *)a3 + 5) & (*((_DWORD *)a3 + 5) - 1)) == 0))
    {
      *(_BYTE *)(v17 + 73) |= 2u;
    }
    if (!*((_QWORD *)a3 + 12))
      goto LABEL_27;
    if (a5 == 2 && (*(_BYTE *)(v17 + 73) & 2) != 0)
    {
      v18 = *((unsigned __int8 *)a3 + 152);
      if (v18 > 0x25)
        v19 = 0;
      else
        v19 = dword_184750480[v18];
      v20 = *((unsigned __int8 *)a3 + 153);
      if (!*((_BYTE *)a3 + 153))
        goto LABEL_27;
      v21 = *((_DWORD *)a3 + 4);
      if (*((_QWORD *)a3 + 20) == v21 * v19)
      {
        v22 = 0;
        while (v20 - 1 != v22)
        {
          if (v21 <= 1)
            v21 = 1;
          else
            v21 >>= 1;
          v23 = *((_QWORD *)a3 + v22++ + 21);
          if (v23 != v21 * v19)
          {
            if (v22 >= v20)
              break;
            goto LABEL_26;
          }
        }
LABEL_27:
        v24 = CA::OGL::GLESContext::retain_image((uint64_t)this, v17, (CFTypeRef *)a3, 0);
        if (v24)
        {
          v25 = v24;
          v26 = 0;
          goto LABEL_33;
        }
        return 0;
      }
    }
LABEL_26:
    if (*((_BYTE *)a3 + 152) == 14)
      goto LABEL_27;
  }
  v27 = CA::OGL::GLESContext::retain_image((uint64_t)this, v17, (CFTypeRef *)a3, 1);
  if (!v27)
    return 0;
  v25 = v27;
  if (*(_QWORD *)(v17 + 32))
  {
    v68 = a4;
    v28 = (_BYTE *)(v17 + 74);
    v26 = 1;
    goto LABEL_43;
  }
  v26 = *(_QWORD *)(v17 + 40) != 0;
LABEL_33:
  v28 = (_BYTE *)(v17 + 74);
  v68 = a4;
  if (!v26 && (*(_BYTE *)(v17 + 74) & 1) != 0)
  {
    v29 = *(unsigned __int8 *)(v17 + 72);
    if (*(_BYTE *)(v17 + 72))
    {
      v30 = 0;
      v31 = *((_QWORD *)this + 3) + 144;
      do
      {
        v32 = 0;
        v33 = *(unsigned int *)(v17 + 4 * v30 + 64);
        do
        {
          v34 = v31 + 8 * v32;
          if (*(_QWORD *)(v34 + 32) == v33)
          {
            *(_QWORD *)(v34 + 32) = 0;
            *(_WORD *)(v31 + 2 * v32) = 0;
          }
          ++v32;
        }
        while (v32 != 13);
        ++v30;
      }
      while (v30 != v29);
    }
    CA::OGL::GLESContext::delete_image((uint64_t)this, v17);
    v26 = 0;
  }
LABEL_43:
  v35 = (_QWORD *)*((_QWORD *)this + 260);
  if ((unsigned __int16)*(_DWORD *)(v17 + 52))
  {
    if (*(_BYTE *)(v17 + 72))
    {
      if ((*v28 & 1) == 0)
      {
        v36 = *(_QWORD *)(v17 + 8);
        if (v36)
        {
          if (*(_BYTE *)(v36 + 12) == 23 && *(_DWORD *)(v17 + 16) != *(_DWORD *)(v36 + 36))
          {
            v37 = this;
            v38 = v17;
LABEL_68:
            CA::OGL::GLESContext::update_image((uint64_t)v37, v38, v36, a2);
            goto LABEL_69;
          }
        }
      }
    }
    goto LABEL_69;
  }
  v39 = *((_DWORD *)this + 525);
  if (*((_DWORD *)v25 + 4) > v39 || *((_DWORD *)v25 + 5) > v39)
  {
    if (x_log_hook_p())
    {
LABEL_53:
      x_log_();
      return 0;
    }
    v40 = x_log_category_ogl_opengl;
    if (!os_log_type_enabled((os_log_t)x_log_category_ogl_opengl, OS_LOG_TYPE_DEFAULT))
      return 0;
    v41 = *((_DWORD *)v25 + 4);
    v42 = *((_DWORD *)v25 + 5);
    *(_DWORD *)buf = 67109376;
    v70 = v41;
    v71 = 1024;
    v72 = v42;
    v43 = "CoreAnimation: %d by %d image is too large for GPU, ignoring\n";
    v44 = v40;
    v45 = 14;
LABEL_56:
    _os_log_impl(&dword_184457000, v44, OS_LOG_TYPE_DEFAULT, v43, buf, v45);
    return 0;
  }
  v46 = *((unsigned __int8 *)v25 + 12);
  if (v46 == 23)
  {
    v47 = *((_QWORD *)this + 263);
    if (v47)
    {
      if ((unint64_t)v25[20] > v47)
      {
        if (x_log_hook_p())
          goto LABEL_53;
        v67 = x_log_category_ogl_opengl;
        if (!os_log_type_enabled((os_log_t)x_log_category_ogl_opengl, OS_LOG_TYPE_DEFAULT))
          return 0;
        *(_WORD *)buf = 0;
        v43 = "CoreAnimation: image stride is too large for GPU, ignoring\n";
        v44 = v67;
        v45 = 2;
        goto LABEL_56;
      }
    }
  }
  *(_DWORD *)(v17 + 52) = *(_DWORD *)(v17 + 52) & 0xFFFF0000 | 0xDE1;
  *(_WORD *)(v17 + 58) |= 0x100u;
  if (v26)
  {
    CA::OGL::GLESContext::attach_surface_texture(this, v17, (CA::Render::Surface *)v25, a2, a9);
  }
  else
  {
    v48 = *(_QWORD *)(v17 + 8);
    if (v46 == 23 && v48)
    {
      v37 = this;
      v38 = v17;
      v36 = (uint64_t)v25;
      goto LABEL_68;
    }
    if (v46 == 9 && v48)
      CA::OGL::GLESContext::update_compressed_image((uint64_t)this, v17, (int32x2_t *)v25, a2);
  }
LABEL_69:
  if ((*v28 & 1) != 0)
  {
    if (*(_QWORD *)(v17 + 32))
    {
      v49 = *(_QWORD *)(v17 + 40);
      if (v49)
      {
        if (*(_DWORD *)(v17 + 16) != *((_DWORD *)v25 + 9))
        {
          (*(void (**)(uint64_t, float))(*(_QWORD *)v49 + 176))(v49, 1.0);
          *(_DWORD *)(v17 + 16) = *((_DWORD *)v25 + 9);
        }
      }
    }
  }
  v50 = *(unsigned __int8 *)(v17 + 72);
  if (*(_BYTE *)(v17 + 72))
  {
    v51 = *((_QWORD *)this + 2);
    v52 = (unsigned int *)(v17 + 64);
    v53 = a2;
    do
    {
      v54 = *v52++;
      *(_WORD *)(v51 + 2 * v53 + 144) = *(_DWORD *)(v17 + 52);
      *(_QWORD *)(v51 + 8 * v53++ + 176) = v54;
      --v50;
    }
    while (v50);
  }
  v55 = *(_WORD *)(v17 + 58);
  *(_WORD *)(v17 + 58) = v55 & 0xF7FF;
  v56 = *(_BYTE *)(v17 + 74);
  if ((v56 & 2) != 0)
  {
    if ((v68 & 0x24) != 0 && a6 == 1)
    {
LABEL_82:
      a6 = 0;
      a5 = 0;
      *(_WORD *)(v17 + 58) = v55 | 0x800;
      v56 = *(_BYTE *)(v17 + 74);
      goto LABEL_83;
    }
    a6 = 0;
    if (a5 == 1)
    {
      a5 = 0;
      if ((v68 & 0x12) == 0)
        goto LABEL_83;
      goto LABEL_82;
    }
    a5 = 0;
  }
LABEL_83:
  if ((v56 & 2) != 0)
    v57 = 0;
  else
    v57 = a6;
  if ((v56 & 2) != 0)
    v58 = 0;
  else
    v58 = a5;
  if (v58 == 2)
  {
    if ((*(_BYTE *)(v17 + 73) & 1) != 0)
    {
LABEL_94:
      v58 = 2;
      goto LABEL_97;
    }
    v58 = 1;
    if ((v56 & 1) == 0 && (*(_BYTE *)(v17 + 73) & 2) != 0)
    {
      CA::OGL::GLContext::update_texture((uint64_t)this, a2);
      ((void (*)(_QWORD, _QWORD))v35[682])(*v35, *(unsigned __int16 *)(v17 + 52));
      *(_BYTE *)(v17 + 73) |= 1u;
      goto LABEL_94;
    }
  }
  else
  {
    if (v58 < 4)
    {
      if (v57 > 3)
        v59 = 1;
      else
        v59 = v57;
      if (v58 == 3)
        v60 = 1;
      else
        v60 = v58;
      goto LABEL_107;
    }
    v58 = 1;
  }
LABEL_97:
  if (v57 > 3)
    v59 = 1;
  else
    v59 = v57;
  v60 = v58;
LABEL_107:
  if ((*((_BYTE *)this + 2124) & 4) != 0)
    v61 = v58;
  else
    v61 = v60;
  if ((*((_BYTE *)this + 2124) & 4) == 0 && v59 == 3)
    v63 = 1;
  else
    v63 = v59;
  v64 = *(_DWORD *)(v17 + 52);
  if ((HIWORD(v64) & 0xF) != v61 || ((v64 >> 20) & 0xF) != v63)
  {
    CA::OGL::GLContext::update_texture((uint64_t)this, a2);
    ((void (*)(_QWORD, _QWORD, uint64_t, _QWORD))v35[305])(*v35, *(unsigned __int16 *)(v17 + 52), 10241, dword_184755A14[v61]);
    ((void (*)(_QWORD, _QWORD, uint64_t, _QWORD))v35[305])(*v35, *(unsigned __int16 *)(v17 + 52), 10240, dword_184755A14[v63]);
    *(_DWORD *)(v17 + 52) = *(_DWORD *)(v17 + 52) & 0xFF00FFFF | ((v61 & 0xF) << 16) | (v63 << 20);
  }
  if (a7 == 1)
    a7 = (*(unsigned __int8 *)(v17 + 73) >> 1) & 1;
  if (((*(unsigned __int16 *)(v17 + 58) >> 3) & 3) != a7)
  {
    CA::OGL::GLContext::update_texture((uint64_t)this, a2);
    if (a7)
      v65 = 10497;
    else
      v65 = 33071;
    ((void (*)(_QWORD, _QWORD, uint64_t, uint64_t))v35[305])(*v35, *(unsigned __int16 *)(v17 + 52), 10242, v65);
    ((void (*)(_QWORD, _QWORD, uint64_t, uint64_t))v35[305])(*v35, *(unsigned __int16 *)(v17 + 52), 10243, v65);
    *(_WORD *)(v17 + 58) = *(_WORD *)(v17 + 58) & 0xFFE7 | (8 * (a7 & 3));
  }
  *(_OWORD *)a8 = xmmword_18474E220;
  if (((v68 & 0x800) == 0) != (*((_BYTE *)v25 + 13) & 8) >> 3)
  {
    *(_DWORD *)(a8 + 4) = 1065353216;
    *(_DWORD *)(a8 + 12) = 0;
  }
  return v17;
}

CA::Render::Texture *CA::OGL::GLESContext::create_mutable_image(CA::OGL::GLESContext *this, CA::Render::Image *a2, unsigned int a3, unsigned int a4, CGColorSpace *a5)
{
  void *v6;
  unint64_t v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v7[0] = 0;
  return CA::Render::Image::new_image(a2, a3, a4, 1u, a5, 0, v7, 0, 0, v6);
}

uint64_t CA::OGL::GLESContext::modify_subimage_impl(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10)
{
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  int v22;
  __int16 v23;
  int v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a3 + 153) == 1 && !*(_QWORD *)(a3 + 160))
  {
    v17 = result;
    v25[0] = 0;
    v24 = 0;
    v23 = 0;
    v18 = *(unsigned __int8 *)(a3 + 152);
    result = CA::OGL::GLESContext::image_parameters(result, *(unsigned __int8 *)(a3 + 152), 0, (int *)v25 + 1, (int *)v25, &v24, (char *)&v23 + 1, &v23);
    if (HIDWORD(v25[0]))
    {
      if (v18 > 0x25)
        v22 = 0;
      else
        v22 = dword_184750480[v18];
      v19 = *(_QWORD **)(v17 + 2080);
      CA::OGL::GLContext::update_texture(v17, a4);
      if ((*(_WORD *)(a2 + 58) & 0x400) == 0 && (!a10 || *(_DWORD *)(v17 + 216) >= a10))
      {
        ((void (*)(_QWORD, _QWORD, uint64_t, _QWORD))v19[305])(*v19, *(unsigned __int16 *)(a2 + 52), 10495, 0);
        *(_WORD *)(a2 + 58) |= 0x400u;
      }
      result = ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, int, uint64_t))v19[308])(*v19, *(unsigned __int16 *)(a2 + 52), 0, a5, a6, a7, a8, LODWORD(v25[0]), v24, a9);
      v20 = (unsigned int *)(a3 + 36);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
      *(_DWORD *)(a2 + 16) = *v20;
      *(_BYTE *)(a2 + 73) &= ~1u;
      *(_QWORD *)(v17 + 712) += (a8 * a7 * v22);
    }
  }
  return result;
}

BOOL CA::OGL::GLESContext::edge_mode_supported(uint64_t a1, uint64_t a2, int a3)
{
  return !a3
      || *(_BYTE *)(a2 + 12) == 23
      && ((*(_BYTE *)(a1 + 2126) & 4) != 0
       || (*(_DWORD *)(a2 + 16) & (*(_DWORD *)(a2 + 16) - 1)) == 0
       && (*(_DWORD *)(a2 + 20) & (*(_DWORD *)(a2 + 20) - 1)) == 0);
}

uint64_t CA::OGL::Context::can_render_to_format(CA::OGL::Context *this)
{
  return 1;
}

uint64_t CA::OGL::GLESContext::image_surface(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  CA::OGL::GLESContext::retain_image(a1, a2, a3, 1);
  return *(_QWORD *)(a2 + 32);
}

double CA::OGL::GLESContext::new_image(CA::OGL::GLESContext *this)
{
  malloc_zone_t *malloc_zone;
  _OWORD *v2;
  double result;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v2 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x50uLL, 0x743898A5uLL);
  if (v2)
  {
    result = 0.0;
    v2[3] = 0u;
    v2[4] = 0u;
    v2[1] = 0u;
    v2[2] = 0u;
    *v2 = 0u;
  }
  return result;
}

uint64_t CA::OGL::GLESContext::finish_image(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  __IOSurface *v7;
  __IOSurface *v8;
  unint64_t v9;
  uint64_t v10;

  if (!*(_BYTE *)(a2 + 72))
    return 1;
  if ((*(_BYTE *)(a1 + 2124) & 2) != 0)
  {
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 2080);
    do
      (*(void (**)(_QWORD, uint64_t, _QWORD))(v10 + 3768))(*(_QWORD *)v10, 5890, *(unsigned int *)(a2 + 64 + 4 * v9++));
    while (v9 < *(unsigned __int8 *)(a2 + 72));
    return 1;
  }
  v6 = *(_QWORD *)(a2 + 32);
  if (v6)
  {
    v7 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 160))(v6);
    if (v7)
    {
      v8 = v7;
      if (!IOSurfaceLock(v7, 0, 0))
        IOSurfaceUnlock(v8, 0, 0);
      return 1;
    }
  }
  if (a3)
  {
    if ((*(_BYTE *)(a1 + 2192) & 4) != 0)
    {
      *(_BYTE *)(a1 + 2192) &= ~4u;
      (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 2080) + 720))(**(_QWORD **)(a1 + 2080));
    }
    return 1;
  }
  return 0;
}

void CA::OGL::GLESContext::delete_image(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CA::WindowServer::Surface *v4;
  CA::WindowServer::Surface *v5;
  int v6;

  v3 = *(unsigned __int8 *)(a2 + 72);
  if ((_DWORD)v3)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 2080) + 480))(**(_QWORD **)(a1 + 2080), v3, a2 + 64);
    *(_BYTE *)(a2 + 72) = 0;
  }
  v4 = *(CA::WindowServer::Surface **)(a2 + 32);
  if (v4)
  {
    CA::WindowServer::Surface::unref(v4);
    *(_QWORD *)(a2 + 32) = 0;
  }
  v5 = *(CA::WindowServer::Surface **)(a2 + 40);
  if (v5)
  {
    CA::WindowServer::Surface::unref(v5);
    *(_QWORD *)(a2 + 40) = 0;
  }
  v6 = *(unsigned __int8 *)(a2 + 55) << 24;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 52) = v6;
  LOBYTE(v6) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a2 + 74) &= 0xFCu;
  *(_BYTE *)(a2 + 73) = v6 & 0xFC;
}

char *CA::OGL::GLESContext::create_surface(CA::OGL::GLESContext *this, int a2, const CA::Bounds *a3, char a4)
{
  uint64_t v4;
  char *v5;
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  int v14;
  int v15;
  void **v16;
  void **v17;
  int v18;
  int v19;
  char v20;
  int v21;
  int v22;
  __int128 v23;
  __int16 v24;
  __int16 v25;
  malloc_zone_t *malloc_zone;
  __int16 v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  NSObject *v34;
  uint8_t buf[4];
  int v37;
  __int16 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned int *)a3 + 2);
  if ((int)v4 < 1)
    return 0;
  v5 = 0;
  if (a2 != 1)
    return v5;
  v7 = *((unsigned int *)a3 + 3);
  if ((int)v7 < 1)
    return v5;
  if ((a4 & 0x40) == 0 || (*((_BYTE *)this + 2126) & 4) != 0)
  {
    v13 = 0;
  }
  else
  {
    if ((v4 & (v4 - 1)) != 0)
    {
      v9 = (v4 - 1) | ((unint64_t)(v4 - 1) >> 1) | (((v4 - 1) | ((unint64_t)(v4 - 1) >> 1)) >> 2);
      v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
      LODWORD(v4) = (((v10 | (v10 >> 16)) >> 32) | v10 | (v10 >> 16)) + 1;
    }
    if ((v7 & (v7 - 1)) != 0)
    {
      v11 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1) | (((v7 - 1) | ((unint64_t)(v7 - 1) >> 1)) >> 2);
      v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
      LODWORD(v7) = (((v12 | (v12 >> 16)) >> 32) | v12 | (v12 >> 16)) + 1;
    }
    v13 = 1;
  }
  v14 = *((_DWORD *)this + 530);
  if ((int)v4 > v14 || (int)v7 > v14)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v34 = x_log_category_ogl_opengl;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl_opengl, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        v37 = v4;
        v38 = 1024;
        v39 = v7;
        _os_log_impl(&dword_184457000, v34, OS_LOG_TYPE_DEFAULT, "CoreAnimation: surface %d x %d is too large\n", buf, 0xEu);
      }
    }
    return 0;
  }
  v15 = a4 & 0x40 | 0xF;
  v16 = (void **)((char *)this + 80);
  v5 = (char *)*((_QWORD *)this + 10);
  if (v5)
  {
    v17 = 0;
    v18 = 0x7FFFFFFF;
    do
    {
      if (*((_DWORD *)v5 + 17) == v15 && (v5[72] & 1) != 0)
      {
        v19 = *((_DWORD *)v5 + 6);
        if ((_DWORD)v4 == v19 && (_DWORD)v7 == *((_DWORD *)v5 + 7))
        {
          v17 = v16;
          goto LABEL_31;
        }
        if ((int)v4 > v19)
          v20 = 1;
        else
          v20 = v13;
        if ((v20 & 1) == 0)
        {
          v21 = *((_DWORD *)v5 + 7);
          v22 = v21 * v19 - v7 * v4;
          if (v22 >= v18)
          {
            v16 = v17;
            v22 = v18;
          }
          if ((int)v7 <= v21)
          {
            v17 = v16;
            v18 = v22;
          }
        }
      }
      v16 = (void **)(v5 + 8);
      v5 = (char *)*((_QWORD *)v5 + 1);
    }
    while (v5);
    if (!v17)
      goto LABEL_37;
    v5 = (char *)*v17;
LABEL_31:
    *v17 = (void *)*((_QWORD *)v5 + 1);
    v23 = *(_OWORD *)a3;
    *(_DWORD *)v5 = 1;
    *((_OWORD *)v5 + 2) = v23;
    v24 = *(_WORD *)(v5 + 75);
    if ((v24 & 0x40) != 0)
      v25 = -6672;
    else
      v25 = -6800;
    *(_WORD *)(v5 + 75) = v25 & v24;
    v5[73] &= 0xC0u;
  }
  else
  {
LABEL_37:
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v5 = (char *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x78uLL, 0x743898A5uLL);
    *(_DWORD *)v5 = 1;
    *((_DWORD *)v5 + 24) = 3553;
    v27 = *(_WORD *)(v5 + 75) | 0x10;
    *(_WORD *)(v5 + 75) = v27;
    *((_OWORD *)v5 + 2) = *(_OWORD *)a3;
    *((_DWORD *)v5 + 6) = v4;
    *((_DWORD *)v5 + 7) = v7;
    *((_DWORD *)v5 + 17) = v15;
    v5[72] |= 1u;
    *((_DWORD *)v5 + 27) = 35450;
    v28 = (*((unsigned __int16 *)v5 + 56) | (v5[114] << 16)) & 0xFDFF00;
    *((_WORD *)v5 + 56) = *((_WORD *)v5 + 56) & 0xFF00 | 0x11;
    v5[114] = BYTE2(v28);
    *(_WORD *)(v5 + 75) = v27 & 0xFF7F;
    v5[74] = v5[74] & 0xE0 | 4;
    v29 = (_QWORD *)*((_QWORD *)this + 260);
    ((void (*)(_QWORD, uint64_t, char *))v29[99])(*v29, 1, v5 + 100);
    v30 = *((unsigned int *)v5 + 25);
    v31 = *((_QWORD *)this + 2);
    *(_WORD *)(v31 + 144) = *((_DWORD *)v5 + 24);
    *(_QWORD *)(v31 + 176) = v30;
    CA::OGL::GLContext::update_texture((uint64_t)this, 0);
    if ((v5[112] & 0xFu) >= 0xC
      || (((void (*)(_QWORD, _QWORD, uint64_t, _QWORD))v29[305])(*v29, *((unsigned int *)v5 + 24), 10241, dword_184755A14[v5[112] & 0xF]), v32 = v5[112], v32 >= 0xC0))
    {
      __assert_rtn("gl_texture_filter", "ogl-gl.cpp", 4342, "filter < OGL_TEXTURE_FILTER_COUNT");
    }
    ((void (*)(_QWORD, _QWORD, uint64_t, _QWORD))v29[305])(*v29, *((unsigned int *)v5 + 24), 10240, dword_184755A14[v32 >> 4]);
    ((void (*)(_QWORD, _QWORD, uint64_t, uint64_t))v29[305])(*v29, *((unsigned int *)v5 + 24), 10242, 33071);
    ((void (*)(_QWORD, _QWORD, uint64_t, uint64_t))v29[305])(*v29, *((unsigned int *)v5 + 24), 10243, 33071);
    ((void (*)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, int, _QWORD))v29[302])(*v29, *((unsigned int *)v5 + 24), 0, 6408, *((unsigned int *)v5 + 6), *((unsigned int *)v5 + 7), 0, 6408, 5121, 0);
    if ((v5[68] & 0x40) != 0)
      ((void (*)(_QWORD, _QWORD))v29[682])(*v29, *((unsigned int *)v5 + 24));
    v33 = *((_QWORD *)this + 2);
    *(_WORD *)(v33 + 144) = 0;
    *(_QWORD *)(v33 + 176) = 0;
  }
  return v5;
}

uint64_t CA::OGL::Context::create_surface_from_data(CA::OGL::Context *this, void *a2)
{
  return 0;
}

char *CA::OGL::GLESContext::create_surface_from_iosurface(CA::OGL::GLESContext *this, int a2, int a3, int a4, IOSurfaceRef buffer)
{
  size_t Width;
  size_t Height;
  char *v12;
  size_t v13;
  int v14;
  malloc_zone_t *malloc_zone;
  __int16 v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  Width = IOSurfaceGetWidth(buffer);
  Height = IOSurfaceGetHeight(buffer);
  v12 = 0;
  if (a2 == 1 && (int)Width >= 1)
  {
    v13 = Height;
    if ((int)Height >= 1)
    {
      v14 = *((_DWORD *)this + 530);
      if (v14 < (int)Width || v14 < (int)Height)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v23 = x_log_category_ogl_opengl;
          if (os_log_type_enabled((os_log_t)x_log_category_ogl_opengl, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109376;
            v27 = Width;
            v28 = 1024;
            v29 = v13;
            _os_log_impl(&dword_184457000, v23, OS_LOG_TYPE_DEFAULT, "CoreAnimation: surface %d x %d is too large\n", buf, 0xEu);
          }
        }
        return 0;
      }
      else
      {
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        v12 = (char *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x78uLL, 0x743898A5uLL);
        *(_DWORD *)v12 = 1;
        *((_DWORD *)v12 + 24) = 3553;
        v16 = *(_WORD *)(v12 + 75);
        *((_DWORD *)v12 + 8) = a3;
        *((_DWORD *)v12 + 9) = a4;
        *((_DWORD *)v12 + 10) = Width;
        *((_DWORD *)v12 + 11) = v13;
        *((_DWORD *)v12 + 6) = Width;
        *((_DWORD *)v12 + 7) = v13;
        *((_DWORD *)v12 + 17) = 15;
        v12[72] |= 1u;
        v17 = (*((unsigned __int16 *)v12 + 56) | (v12[114] << 16)) & 0xFDFF00;
        *((_WORD *)v12 + 56) = *((_WORD *)v12 + 56) & 0xFF00 | 0x11;
        v12[114] = BYTE2(v17);
        *(_WORD *)(v12 + 75) = v16 | 0x190;
        v18 = (_QWORD *)*((_QWORD *)this + 260);
        ((void (*)(_QWORD, uint64_t, char *))v18[99])(*v18, 1, v12 + 100);
        v19 = *((unsigned int *)v12 + 25);
        v20 = *((_QWORD *)this + 2);
        *(_WORD *)(v20 + 144) = *((_DWORD *)v12 + 24);
        *(_QWORD *)(v20 + 176) = v19;
        CA::OGL::GLContext::update_texture((uint64_t)this, 0);
        if ((v12[112] & 0xFu) >= 0xC
          || (((void (*)(_QWORD, _QWORD, uint64_t, _QWORD))v18[305])(*v18, *((unsigned int *)v12 + 24), 10241, dword_184755A14[v12[112] & 0xF]), v21 = v12[112], v21 >= 0xC0))
        {
          __assert_rtn("gl_texture_filter", "ogl-gl.cpp", 4342, "filter < OGL_TEXTURE_FILTER_COUNT");
        }
        ((void (*)(_QWORD, _QWORD, uint64_t, _QWORD))v18[305])(*v18, *((unsigned int *)v12 + 24), 10240, dword_184755A14[v21 >> 4]);
        ((void (*)(_QWORD, _QWORD, uint64_t, uint64_t))v18[305])(*v18, *((unsigned int *)v12 + 24), 10242, 33071);
        ((void (*)(_QWORD, _QWORD, uint64_t, uint64_t))v18[305])(*v18, *((unsigned int *)v12 + 24), 10243, 33071);
        BYTE4(v25) = 0;
        LODWORD(v25) = 0;
        objc_msgSend(*((id *)this + 21), "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", buffer, *((unsigned int *)v12 + 24), 6408, Width, v13, 32993, 5121, v25);
        v22 = *((_QWORD *)this + 2);
        *(_WORD *)(v22 + 144) = 0;
        *(_QWORD *)(v22 + 176) = 0;
      }
    }
  }
  return v12;
}

uint64_t CA::OGL::Context::create_reinterpreted_surface()
{
  return 0;
}

void CA::OGL::Context::copy_surface_clear_flags(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int v4;

  v3 = *(_WORD *)(a2 + 75) & 0xFFDF | (32 * ((*(unsigned __int16 *)(a3 + 75) >> 5) & 1));
  *(_WORD *)(a2 + 75) = v3;
  v4 = v3 & 0xFFFFFFBF | (((*(unsigned __int16 *)(a3 + 75) >> 6) & 1) << 6);
  *(_WORD *)(a2 + 75) = v4;
  *(_WORD *)(a2 + 75) = v4 & 0xFF7F | *(_WORD *)(a3 + 75) & 0x80;
}

void CA::OGL::GLESContext::copy_destination(CA::OGL::Context *this, uint64_t a2, uint64_t a3, uint64_t a4, int32x2_t *a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v13 = *((_QWORD *)this + 32);
  if (v13 != *((_QWORD *)this + 31))
    goto LABEL_2;
  if (v13)
    LODWORD(v13) = (*(unsigned __int8 *)(v13 + 72) >> 1) & 0x1F;
  if (*((_DWORD *)this + 61) != (_DWORD)v13)
LABEL_2:
    CA::OGL::Context::prepare_destination_(this);
  if ((*((_WORD *)this + 408) & 0x200) != 0)
  {
    v14 = *((_QWORD *)this + 22);
    if (v14)
    {
      *((_WORD *)this + 408) &= ~0x200u;
    }
  }
  v15 = *((_QWORD *)this + 31);
  if (v15)
  {
    CA::OGL::Context::push_surface((uint64_t)this, a3, 0, 0x8000, 0);
    CA::OGL::emit_copy_surface((uint64_t)this, v15, a4, a5, a6);
    CA::OGL::Context::pop_surface(this);
    v16 = 0;
  }
  else
  {
    v17 = *((_QWORD *)this + 260);
    v18 = *(unsigned int *)(a3 + 100);
    v19 = *((_QWORD *)this + 2);
    *(_WORD *)(v19 + 144) = *(_DWORD *)(a3 + 96);
    *(_QWORD *)(v19 + 176) = v18;
    CA::OGL::GLContext::update_texture((uint64_t)this, 0);
    if (a4)
    {
      v20 = (unsigned int *)(a6 + 4);
      do
      {
        v21 = *(_OWORD *)a5->i8;
        a5 += 2;
        v23 = v21;
        CA::OGL::GLESContext::window_bounds((uint64_t)this, (int32x2_t *)&v23);
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))(v17 + 456))(*(_QWORD *)v17, *(unsigned int *)(a3 + 96), 0, *(v20 - 1), *v20, v23, DWORD1(v23), DWORD2(v23), HIDWORD(v23));
        v20 += 2;
        --a4;
      }
      while (a4);
    }
    v22 = *((_QWORD *)this + 2);
    *(_WORD *)(v22 + 144) = 0;
    *(_QWORD *)(v22 + 176) = 0;
    CA::OGL::Context::marked_surface((uint64_t)this, a3);
    v16 = *((_BYTE *)this + 416) & 1;
  }
  *a7 = v16;
}

double CA::OGL::GLESContext::create_null_surface(CA::OGL::GLESContext *this)
{
  malloc_zone_t *malloc_zone;
  char *v2;
  double result;
  int v4;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v2 = (char *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x78uLL, 0x743898A5uLL);
  *(_DWORD *)v2 = 1;
  result = 0.0;
  *((_OWORD *)v2 + 2) = xmmword_18474E230;
  *((_DWORD *)v2 + 17) = 15;
  v2[72] |= 1u;
  *((_DWORD *)v2 + 27) = 35450;
  v2[73] = v2[73] & 0xC0 | 0x13;
  *(_WORD *)(v2 + 75) |= 0x80u;
  v4 = (*((unsigned __int16 *)v2 + 56) | (v2[114] << 16)) & 0xFDFF00;
  *((_WORD *)v2 + 56) = *((_WORD *)v2 + 56) & 0xFF00 | 0x11;
  v2[114] = BYTE2(v4);
  return result;
}

void CA::OGL::GLESContext::finalize_surface(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  CA::WindowServer::Surface *v4;
  malloc_zone_t *malloc_zone;

  v3 = *(_QWORD **)(a1 + 2080);
  if (*(_DWORD *)(a2 + 100))
    ((void (*)(_QWORD, uint64_t, uint64_t))v3[60])(*v3, 1, a2 + 100);
  if (*(_DWORD *)(a2 + 104))
    ((void (*)(_QWORD, uint64_t, uint64_t))v3[674])(*v3, 1, a2 + 104);
  v4 = *(CA::WindowServer::Surface **)(a2 + 80);
  if (v4)
    CA::WindowServer::Surface::unref(v4);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, (void *)a2);
}

uint64_t CA::OGL::Context::calculate_average_luma()
{
  return 0;
}

uint64_t CA::OGL::Context::reset_attached_surface(uint64_t this)
{
  *(_QWORD *)(this + 256) = 0;
  return this;
}

uint64_t CA::OGL::GLESContext::bind_surface_impl(uint64_t this, uint64_t a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  int v6;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v19;
  __int16 v21;

  v6 = *(_DWORD *)(a2 + 96);
  if (!v6)
    return this;
  v10 = this;
  v11 = *(_QWORD **)(this + 2080);
  v12 = *(unsigned int *)(a2 + 100);
  v13 = *(_QWORD *)(this + 16);
  *(_WORD *)(v13 + 2 * a4 + 144) = v6;
  *(_QWORD *)(v13 + 8 * a4 + 176) = v12;
  if (a5 == 2)
  {
    if ((*(_BYTE *)(a2 + 68) & 0x40) != 0)
    {
      if (((*(unsigned __int16 *)(a2 + 112) | (*(unsigned __int8 *)(a2 + 114) << 16)) & 0x20000) != 0)
      {
        CA::OGL::GLContext::update_texture(this, a4);
        this = ((uint64_t (*)(_QWORD, _QWORD))v11[682])(*v11, *(unsigned int *)(a2 + 96));
        v14 = (*(unsigned __int16 *)(a2 + 112) | (*(unsigned __int8 *)(a2 + 114) << 16)) & 0xFFFDFFFF;
        *(_WORD *)(a2 + 112) = *(_WORD *)(a2 + 112);
        *(_BYTE *)(a2 + 114) = BYTE2(v14);
      }
      a5 = 2;
      goto LABEL_9;
    }
  }
  else if (a5 < 4)
  {
    if (a6 > 3)
      v15 = 1;
    else
      v15 = a6;
    if (a5 == 3)
      v16 = 1;
    else
      v16 = a5;
    goto LABEL_19;
  }
  a5 = 1;
LABEL_9:
  if (a6 > 3)
    v15 = 1;
  else
    v15 = a6;
  v16 = a5;
LABEL_19:
  if ((*(_BYTE *)(v10 + 2124) & 4) != 0)
    v17 = a5;
  else
    v17 = v16;
  if ((*(_BYTE *)(v10 + 2124) & 4) == 0 && v15 == 3)
    v19 = 1;
  else
    v19 = v15;
  if ((*(_WORD *)(a2 + 112) & 0xF) != v17 || *(_WORD *)(a2 + 112) >> 4 != v19)
  {
    CA::OGL::GLContext::update_texture(v10, a4);
    ((void (*)(_QWORD, _QWORD, uint64_t, _QWORD))v11[305])(*v11, *(unsigned int *)(a2 + 96), 10241, dword_184755A14[v17]);
    this = ((uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))v11[305])(*v11, *(unsigned int *)(a2 + 96), 10240, dword_184755A14[v19]);
    v21 = (v17 | (16 * v19)) | (unsigned __int16)(*(_WORD *)(a2 + 113) << 8);
    *(_BYTE *)(a2 + 114) = HIBYTE(*(_WORD *)(a2 + 113));
    *(_WORD *)(a2 + 112) = v21;
  }
  return this;
}

uint64_t CA::OGL::GLESContext::set_surface(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD **)(a1 + 2080);
  if (a2)
  {
    v5 = *(unsigned int *)(a2 + 104);
    v6 = *v3;
    if ((_DWORD)v5)
    {
      ((void (*)(uint64_t, uint64_t, uint64_t))v3[673])(v6, 36160, v5);
    }
    else
    {
      ((void (*)(uint64_t, uint64_t, uint64_t))v3[675])(v6, 1, a2 + 104);
      ((void (*)(_QWORD, uint64_t, _QWORD))v3[673])(*v3, 36160, *(unsigned int *)(a2 + 104));
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))v3[678])(*v3, 36160, 36064, *(unsigned int *)(a2 + 96), *(unsigned int *)(a2 + 100), 0);
    }
    if ((*(_BYTE *)(a1 + 2124) & 0x40) != 0)
    {
      v7 = ((*(unsigned __int16 *)(a2 + 112) | (*(unsigned __int8 *)(a2 + 114) << 16)) & 0x10000) != 0 ? 35453 : 35450;
      v17 = v7;
      if (*(_DWORD *)(a2 + 108) != v7)
      {
        ((void (*)(_QWORD, uint64_t, uint64_t, int *))v3[1025])(*v3, 36160, 35449, &v17);
        *(_DWORD *)(a2 + 108) = v17;
      }
    }
    v8 = *(_DWORD *)(a2 + 24);
    v9 = *(_DWORD *)(a2 + 28);
    v10 = (*(unsigned __int16 *)(a2 + 112) | (*(unsigned __int8 *)(a2 + 114) << 16)) & 0x10000;
    v11 = *(_QWORD *)(a1 + 2080);
    if (v10)
      v12 = *(_DWORD *)(a2 + 24);
    else
      v12 = *(_DWORD *)(a2 + 28);
    if (((*(unsigned __int16 *)(a2 + 112) | (*(unsigned __int8 *)(a2 + 114) << 16)) & 0x10000) != 0)
      v13 = *(_DWORD *)(a2 + 28);
    else
      v13 = *(_DWORD *)(a2 + 24);
    if (*(_DWORD *)(a1 + 2048)
      || *(_DWORD *)(a1 + 2052)
      || *(_DWORD *)(a1 + 2056) != v13
      || *(_DWORD *)(a1 + 2060) != v12)
    {
      *(_QWORD *)(a1 + 2048) = 0;
      *(_DWORD *)(a1 + 2056) = v13;
      *(_DWORD *)(a1 + 2060) = v12;
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v11 + 2688))(*(_QWORD *)v11, 0, 0);
      ++*(_DWORD *)(a1 + 240);
      v8 = *(_DWORD *)(a2 + 24);
      v9 = *(_DWORD *)(a2 + 28);
      v10 = (*(_BYTE *)(a2 + 114) & 1) << 16;
    }
    CA::OGL::GLContext::projection_matrix(a1, (float)*(int *)(a2 + 32), (float)(v8 + *(_DWORD *)(a2 + 32)), (float)*(int *)(a2 + 36), (float)(v9 + *(_DWORD *)(a2 + 36)), v10 != 0);
    if ((*(_WORD *)(a2 + 75) & 0x20) != 0)
    {
      if ((*(_BYTE *)(a1 + 65) & 1) != 0)
      {
        ((void (*)(_QWORD, uint64_t))v3[64])(*v3, 3089);
        *(_BYTE *)(a1 + 65) &= ~1u;
      }
      ((void (*)(_QWORD, uint64_t))v3[11])(*v3, 0x4000);
      *(_WORD *)(a2 + 75) = *(_WORD *)(a2 + 75) & 0xFF1F | 0xC0;
    }
    if ((*(_BYTE *)(a2 + 68) & 0x40) != 0)
    {
      v15 = *(unsigned __int16 *)(a2 + 112);
      v14 = a2 + 112;
      *(_BYTE *)(v14 + 2) = (v15 | (*(unsigned __int8 *)(v14 + 2) << 16) | 0x20000u) >> 16;
      *(_WORD *)v14 = v15;
    }
  }
  else
  {
    ((void (*)(_QWORD, uint64_t, _QWORD))v3[673])(*v3, 36160, *(unsigned int *)(a1 + 2156));
    if (*(_DWORD *)(a1 + 2048) != *(_DWORD *)(a1 + 1896)
      || *(_DWORD *)(a1 + 2052) != *(_DWORD *)(a1 + 1900)
      || *(_DWORD *)(a1 + 2056) != *(_DWORD *)(a1 + 1904)
      || *(_DWORD *)(a1 + 2060) != *(_DWORD *)(a1 + 1908))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 2080) + 2688))(**(_QWORD **)(a1 + 2080));
      *(_OWORD *)(a1 + 2048) = *(_OWORD *)(a1 + 1896);
      ++*(_DWORD *)(a1 + 240);
    }
    if (*(_QWORD *)(a1 + 2040) != a1 + 1912)
    {
      *(_QWORD *)(a1 + 2040) = a1 + 1912;
      ++*(_DWORD *)(a1 + 240);
    }
  }
  *(_QWORD *)(a1 + 56) = -1;
  *(_BYTE *)(a1 + 2192) |= 4u;
  return 1;
}

uint64_t CA::OGL::GLESContext::attached_to_framebuffer_p(CA::OGL::GLESContext *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 31);
  if (v1)
    return HIBYTE(*(unsigned __int16 *)(v1 + 112)) & 1;
  else
    return 1;
}

uint64_t CA::OGL::Context::set_surface_volatile()
{
  return 1;
}

uint64_t CA::OGL::Context::default_buffer_size(CA::OGL::Context *this)
{
  return 0;
}

uint64_t CA::OGL::Context::create_buffer(CA::OGL::Context *this)
{
  return 0;
}

uint64_t CA::OGL::Context::compute_surface_apl_dimming_factor()
{
  return 0;
}

uint64_t CA::OGL::Context::tile_downsample_surface()
{
  return 0;
}

uint64_t CA::OGL::Context::read_surface()
{
  return 0;
}

uint64_t CA::OGL::Context::read_destination(CA::OGL::Context *this)
{
  return 0;
}

uint64_t CA::OGL::GLESContext::make_buffer_current(CA::OGL::GLESContext *this, void (**a2)(CA::OGL::GLESContext *this, CA::WindowServer::Surface *a2, void *a3))
{
  uint64_t result;
  uint64_t v5;
  malloc_zone_t *malloc_zone;
  char *v7;
  _QWORD *v8;
  void (*v9)(CA::OGL::GLESContext *, CA::WindowServer::Surface *, void *);
  uint64_t v10;
  malloc_zone_t *v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  if (a2)
  {
    result = (*((uint64_t (**)(void (**)(CA::OGL::GLESContext *, CA::WindowServer::Surface *, void *)))*a2
              + 20))(a2);
    if (!result)
      return result;
    v5 = result;
    if (a2[10] != CA::OGL::GLESContext::release_display_surface || (v7 = (char *)a2[9]) == 0)
    {
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v7 = (char *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x78uLL, 0x743898A5uLL);
      *(_DWORD *)v7 = 1;
      *((_DWORD *)v7 + 17) = 15;
      v7[72] |= 1u;
      *(_WORD *)(v7 + 75) |= 0x10u;
      *((_WORD *)v7 + 56) = *((_WORD *)v7 + 56) | 0x100;
      *((_QWORD *)v7 + 10) = a2;
      *((_QWORD *)v7 + 11) = this;
      *((_DWORD *)v7 + 24) = 3553;
      *((_DWORD *)v7 + 27) = 35450;
      v8 = (_QWORD *)*((_QWORD *)this + 260);
      ((void (*)(_QWORD, uint64_t, char *))v8[99])(*v8, 1, v7 + 100);
      ((void (*)(_QWORD, _QWORD, _QWORD))v8[6])(*v8, *((unsigned int *)v7 + 24), *((unsigned int *)v7 + 25));
      ((void (*)(_QWORD, _QWORD, uint64_t, uint64_t))v8[305])(*v8, *((unsigned int *)v7 + 24), 10241, 9728);
      ((void (*)(_QWORD, _QWORD, uint64_t, uint64_t))v8[305])(*v8, *((unsigned int *)v7 + 24), 10240, 9728);
      ((void (*)(_QWORD, _QWORD, uint64_t, uint64_t))v8[305])(*v8, *((unsigned int *)v7 + 24), 10242, 33071);
      ((void (*)(_QWORD, _QWORD, uint64_t, uint64_t))v8[305])(*v8, *((unsigned int *)v7 + 24), 10243, 33071);
      objc_msgSend(*((id *)this + 21), "attachImage:toCoreSurface:invertedRender:", *((unsigned int *)v7 + 24), v5, 0);
      ((void (*)(_QWORD, uint64_t, char *))v8[675])(*v8, 1, v7 + 104);
      ((void (*)(_QWORD, uint64_t, _QWORD))v8[673])(*v8, 36160, *((unsigned int *)v7 + 26));
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))v8[678])(*v8, 36160, 36064, *((unsigned int *)v7 + 24), *((unsigned int *)v7 + 25), 0);
      ((void (*)(_QWORD, uint64_t, _QWORD))v8[673])(*v8, 36160, 0);
      if ((char *)a2[9] != v7)
      {
        v9 = a2[10];
        if (v9)
        {
          if (v9 != CA::OGL::GLESContext::release_display_surface)
            ((void (*)(void (**)(CA::OGL::GLESContext *, CA::WindowServer::Surface *, void *)))v9)(a2);
        }
      }
      a2[9] = (void (*)(CA::OGL::GLESContext *, CA::WindowServer::Surface *, void *))v7;
      a2[10] = CA::OGL::GLESContext::release_display_surface;
      v10 = *((_QWORD *)this + 273);
      v11 = (malloc_zone_t *)get_malloc_zone();
      v12 = malloc_type_zone_malloc(v11, 0x10uLL, 0x8BB15036uLL);
      *v12 = v7;
      v12[1] = v10;
      *((_QWORD *)this + 273) = v12;
    }
    *(_QWORD *)&v14 = a2[7];
    *((_QWORD *)&v14 + 1) = *((_QWORD *)this + 23);
    v15 = *((unsigned __int16 *)v7 + 56);
    *(_OWORD *)(v7 + 24) = v14;
    *((_QWORD *)v7 + 5) = *((_QWORD *)this + 24);
    v16 = (v15 | (v7[114] << 16)) & 0xFFFEFFFF;
    *((_WORD *)v7 + 56) = v16;
    v7[114] = BYTE2(v16);
    v17 = *((_QWORD *)this + 22);
    if (v17)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
      if (v18)
      {
        if ((*((_BYTE *)this + 2124) & 0x40) != 0
          && (*(_WORD *)(v18 + 656) & 0xFD) == 1
          && (v7[24] & 0x1F) == 0
          && (v7[28] & 0x1F) == 0)
        {
          v19 = *((unsigned __int16 *)v7 + 56);
          v7[114] = (v19 | (v7[114] << 16) | 0x10000u) >> 16;
          *((_WORD *)v7 + 56) = v19;
        }
      }
    }
    CA::OGL::Context::push_surface((uint64_t)this, (uint64_t)v7, 0, 0, 0);
  }
  else
  {
    CA::OGL::Context::pop_surface(this);
    v13 = *((_QWORD *)this + 32);
    if (v13 != *((_QWORD *)this + 31))
      goto LABEL_10;
    if (v13)
      LODWORD(v13) = (*(unsigned __int8 *)(v13 + 72) >> 1) & 0x1F;
    if (*((_DWORD *)this + 61) != (_DWORD)v13)
LABEL_10:
      CA::OGL::Context::prepare_destination_(this);
  }
  return 1;
}

uint64_t CA::OGL::Context::get_surface()
{
  return 0;
}

uint64_t CA::OGL::Context::backward_dm()
{
  return 0;
}

uint64_t CA::OGL::Context::surface_pixel_size()
{
  return 4;
}

uint64_t CA::OGL::Context::destination_bit_depth(CA::OGL::Context *this)
{
  return 8;
}

float CA::OGL::Context::hdr_scale(CA::OGL::Context *this)
{
  return 0.0;
}

void CA::OGL::Context::assembly_buffer_bounds(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t CA::OGL::Context::set_destination(CA::OGL::Context *this, void *a2, uint64_t a3, unint64_t a4, void *a5, uint64_t a6, int a7, int a8, int a9, int a10)
{
  return 0;
}

double CA::OGL::Context::last_command_buffer_duration(CA::OGL::Context *this)
{
  return 0.0;
}

uint64_t CA::OGL::GLESContext::destination_rotated_or_flipped(CA::OGL::GLESContext *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 31);
  if (v1)
    return *(_BYTE *)(v1 + 114) & 1;
  else
    return 0;
}

uint64_t CA::OGL::GLESContext::shader_preamble(CA::OGL::GLESContext *this)
{
  return *((_QWORD *)this + 266);
}

uint64_t CA::OGL::GLESContext::window_bounds(uint64_t this, int32x2_t *a2)
{
  int32x2_t *v2;
  int32x2_t v3;
  __int32 v4;
  __int32 v5;
  int v6;
  int v7;

  v2 = *(int32x2_t **)(this + 248);
  if (v2)
  {
    v3 = vsub_s32(*a2, v2[4]);
    *a2 = v3;
    if (((v2[14].u16[0] | (v2[14].u8[2] << 16)) & 0x10000) != 0)
    {
      v5 = a2[1].i32[0];
      v4 = a2[1].i32[1];
      a2->i32[0] = v2[5].i32[1] - v4 - v3.i32[1];
      a2->i32[1] = v3.i32[0];
      a2[1].i32[0] = v4;
      a2[1].i32[1] = v5;
    }
  }
  else
  {
    if ((*(_BYTE *)(this + 416) & 1) != 0)
    {
      v6 = *(_DWORD *)(this + 196) - (a2->i32[1] + a2[1].i32[1]);
      a2->i32[1] = v6;
    }
    else
    {
      v6 = a2->i32[1];
    }
    v7 = v6 - *(_DWORD *)(this + 188);
    a2->i32[0] -= *(_DWORD *)(this + 184);
    a2->i32[1] = v7;
  }
  return this;
}

uint64_t CA::OGL::GLESContext::bind_noise(uint64_t this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = this;
  v4 = *(unsigned int *)(this + 2152);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(this + 16);
    *(_WORD *)(v5 + 2 * a2 + 144) = 3553;
    *(_QWORD *)(v5 + 8 * a2 + 176) = v4;
  }
  else
  {
    v6 = *(_QWORD **)(this + 2080);
    ((void (*)(_QWORD, uint64_t, uint64_t))v6[99])(*v6, 1, this + 2152);
    v7 = *(unsigned int *)(v3 + 2152);
    v8 = *(_QWORD *)(v3 + 16);
    *(_WORD *)(v8 + 2 * a2 + 144) = 3553;
    *(_QWORD *)(v8 + 8 * a2 + 176) = v7;
    CA::OGL::GLContext::update_texture(v3, a2);
    ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))v6[305])(*v6, 3553, 10241, 9728);
    ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))v6[305])(*v6, 3553, 10240, 9728);
    ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))v6[305])(*v6, 3553, 10242, 10497);
    ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))v6[305])(*v6, 3553, 10243, 10497);
    return ((uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, int, void *))v6[302])(*v6, 3553, 0, 6408, 32, 32, 0, 32993, 5121, &CA::OGL::noise_data);
  }
  return this;
}

BOOL CA::OGL::GLESContext::ensure_destination_texture(int8x8_t *this, int32x2_t *a2, int32x2_t a3, int32x2_t a4)
{
  __int32 v4;
  int8x8_t v5;
  float v6;

  v4 = this[270].i32[1];
  if (v4)
  {
    a3.i32[0] = 3553;
    a4.i32[0] = this[270].i32[0];
    v5 = vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(a4, a3), 0), (int8x8_t)0x3F0000003F000000, (int8x8_t)vmul_f32(vcvt_f32_s32(a2[1]), (float32x2_t)0x3F0000003F000000));
    this[271].i32[0] = v5.i32[0];
    v6 = *(float *)&v5.i32[1];
    if ((this[274].i8[0] & 8) != 0)
      v6 = -*(float *)&v5.i32[1];
    *(float *)&this[271].i32[1] = v6;
    this[272] = v5;
  }
  return v4 != 0;
}

uint64_t CA::OGL::GLESContext::surface_texture_target(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 96);
}

uint64_t CA::OGL::GLESContext::destination_texture_target(CA::OGL::GLESContext *this)
{
  return *((unsigned int *)this + 540);
}

__n128 CA::OGL::GLESContext::bind_destination_with_filters(uint64_t a1, int a2)
{
  unint64_t v2;
  __n128 *v3;
  __n128 result;

  v2 = *(unsigned int *)(a1 + 2164);
  if ((_DWORD)v2)
  {
    v3 = *(__n128 **)(a1 + 16);
    v3[9].n128_u16[a2] = *(_DWORD *)(a1 + 2160);
    v3[11].n128_u64[a2] = v2;
    result = *(__n128 *)(a1 + 2168);
    v3[8] = result;
  }
  return result;
}

uint64_t CA::OGL::GLESContext::flush_texture_cache(CA::OGL::GLESContext *this)
{
  return (*(uint64_t (**)(_QWORD))(*((_QWORD *)this + 260) + 728))(**((_QWORD **)this + 260));
}

uint64_t CA::OGL::GLESContext::update_image(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  __int16 v30;
  int v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD **)(a1 + 2080);
  v32[0] = 0;
  v31 = 0;
  v30 = 0;
  result = CA::OGL::GLESContext::image_parameters(a1, *(unsigned __int8 *)(a3 + 152), 0, (int *)v32 + 1, (int *)v32, &v31, (char *)&v30 + 1, &v30);
  v10 = HIDWORD(v32[0]);
  if (HIDWORD(v32[0]))
  {
    v11 = *(unsigned __int8 *)(a2 + 72);
    result = CA::OGL::GLESContext::update_texture_plane((CA::OGL::GLContext *)a1, a2, a4, 0);
    if ((_DWORD)result)
    {
      v12 = *(_DWORD *)(a2 + 52);
      *(_DWORD *)(a2 + 52) = v12 & 0xC0FFFFFF | ((HIBYTE(v30) & 0x3F) << 24);
      *(_BYTE *)(a2 + 74) = (*(_BYTE *)(a2 + 74) & 0xFD | (2 * v30)) ^ 2;
      if ((*(_BYTE *)(a2 + 59) & 4) != 0)
      {
        ((void (*)(_QWORD, _QWORD, uint64_t, uint64_t))v8[305])(*v8, (unsigned __int16)v12, 10495, 1);
        *(_WORD *)(a2 + 58) &= ~0x400u;
      }
      v13 = *(unsigned __int8 *)(a3 + 152);
      if (v13 > 0x25)
        v14 = 0;
      else
        v14 = dword_184750480[v13];
      v16 = *(unsigned int *)(a3 + 16);
      v15 = *(unsigned int *)(a3 + 20);
      v17 = *(_QWORD *)(a3 + 96);
      if ((*(_BYTE *)(a1 + 2126) & 8) != 0 && (_DWORD)v14 != 4)
        ((void (*)(_QWORD, uint64_t, uint64_t))v8[196])(*v8, 3317, v14);
      v18 = *(unsigned __int16 *)(a2 + 52);
      if ((_DWORD)v18 == 3553 && *(_BYTE *)(a3 + 153) != 1 && (*(_BYTE *)(a2 + 73) & 2) != 0)
      {
        ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))v8[305])(*v8, 3553, 33084, 0);
        result = ((uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))v8[305])(*v8, *(unsigned __int16 *)(a2 + 52), 33085, *(unsigned __int8 *)(a3 + 153) - 1);
        if (*(_BYTE *)(a3 + 153))
        {
          v29 = v11;
          v21 = 0;
          v22 = v14;
          v23 = v31;
          v28 = v32[0];
          v26 = v22;
          v27 = a3 + 160;
          do
          {
            if (v17 && (*(_BYTE *)(a1 + 2126) & 8) != 0)
              ((void (*)(_QWORD, uint64_t, unint64_t))v8[196])(*v8, 3314, *(_QWORD *)(v27 + 8 * v21) / v26);
            v24 = *v8;
            v25 = *(unsigned __int16 *)(a2 + 52);
            if (v29)
              result = ((uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, int, uint64_t))v8[308])(v24, v25, v21, 0, 0, v16, v15, v28, v23, v17);
            else
              result = ((uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, int, uint64_t))v8[302])(v24, v25, v21, v10, v16, v15, 0, v28, v23, v17);
            if (v17)
              v17 += *(_QWORD *)(v27 + 8 * v21) * v15;
            if (v16 <= 1)
              v16 = 1;
            else
              v16 = v16 >> 1;
            if (v15 <= 1)
              v15 = 1;
            else
              v15 = v15 >> 1;
            ++v21;
          }
          while (v21 < *(unsigned __int8 *)(a3 + 153));
        }
        v20 = *(_BYTE *)(a2 + 73) | 1;
      }
      else
      {
        if (v17 && (*(_BYTE *)(a1 + 2126) & 8) != 0)
        {
          ((void (*)(_QWORD, uint64_t, unint64_t))v8[196])(*v8, 3314, *(_QWORD *)(a3 + 160) / (unint64_t)v14);
          v18 = *(unsigned __int16 *)(a2 + 52);
        }
        v19 = *v8;
        if (v11)
          result = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, int, uint64_t))v8[308])(v19, v18, 0, 0, 0, v16, v15, LODWORD(v32[0]), v31, v17);
        else
          result = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, int, uint64_t))v8[302])(v19, v18, 0, v10, v16, v15, 0, LODWORD(v32[0]), v31, v17);
        v20 = *(_BYTE *)(a2 + 73) & 0xFE;
      }
      *(_BYTE *)(a2 + 73) = v20;
      if (v17)
      {
        if ((*(_BYTE *)(a1 + 2126) & 8) != 0)
          ((void (*)(_QWORD, uint64_t, _QWORD))v8[196])(*v8, 3314, 0);
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 36);
        result = CA::Render::Image::data_size((CA::Render::Image *)a3);
        *(_QWORD *)(a1 + 712) += result;
      }
      else
      {
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 36);
      }
    }
  }
  return result;
}

uint64_t CA::OGL::GLESContext::image_parameters(uint64_t result, int a2, int a3, int *a4, int *a5, int *a6, char *a7, _BYTE *a8)
{
  char v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;

  *a6 = 0;
  *a5 = 0;
  *a4 = 0;
  *a7 = 0;
  *a8 = 1;
  if (!a3)
  {
    switch(a2)
    {
      case 0:
        *a4 = 6408;
        *a5 = 32993;
        *a6 = 5121;
        v8 = 2;
        goto LABEL_56;
      case 1:
        goto LABEL_7;
      case 2:
        *a4 = 6408;
        *a5 = 32993;
        *a6 = 5121;
        v8 = 3;
        goto LABEL_56;
      case 3:
        *a7 = 1;
LABEL_7:
        *a4 = 6408;
        v9 = 32993;
        goto LABEL_30;
      case 5:
        *a7 = 1;
        *a4 = 6408;
        v10 = 32993;
        goto LABEL_33;
      case 8:
        goto LABEL_10;
      case 9:
        *a7 = 21;
LABEL_10:
        v9 = 6406;
        goto LABEL_29;
      case 10:
        v9 = 6409;
        goto LABEL_29;
      case 11:
        goto LABEL_13;
      case 12:
        *a7 = 1;
LABEL_13:
        v9 = 6408;
        goto LABEL_29;
      case 13:
        goto LABEL_20;
      case 14:
        v11 = *(_DWORD *)(result + 2124);
        if ((v11 & 0x2000) == 0)
          return result;
        if ((v11 & 0x20000) != 0)
          v12 = 34836;
        else
          v12 = 6408;
        *a4 = v12;
        *a5 = 6408;
        goto LABEL_41;
      case 17:
        *a7 = 1;
LABEL_20:
        v13 = *(_DWORD *)(result + 2124);
        if ((v13 & 0x800) == 0)
          return result;
        if ((v13 & 0x20000) != 0)
          v14 = 34842;
        else
          v14 = 6408;
        *a4 = v14;
        *a5 = 6408;
        if ((*(_DWORD *)(result + 2124) & 0x20000) != 0)
          v15 = 5131;
        else
          v15 = 36193;
        goto LABEL_38;
      case 18:
        goto LABEL_28;
      case 19:
        *a7 = 1;
LABEL_28:
        v9 = 6410;
LABEL_29:
        *a4 = v9;
LABEL_30:
        *a5 = v9;
        v16 = 5121;
        goto LABEL_31;
      case 20:
        v10 = 6408;
        *a4 = 6408;
LABEL_33:
        *a5 = v10;
        v16 = 32820;
        goto LABEL_31;
      case 23:
        if ((*(_BYTE *)(result + 2125) & 8) == 0)
          return result;
        *a4 = 6406;
        *a5 = 6406;
        *a6 = 36193;
        *a7 = 21;
        goto LABEL_61;
      case 24:
        if ((*(_BYTE *)(result + 2125) & 0x20) == 0)
          return result;
        *a4 = 6406;
        *a5 = 6406;
        *a6 = 5126;
        *a7 = 21;
        goto LABEL_42;
      case 25:
        if ((*(_BYTE *)(result + 2125) & 8) == 0)
          return result;
        *a4 = 6409;
        *a5 = 6409;
        v15 = 36193;
LABEL_38:
        *a6 = v15;
LABEL_61:
        v17 = (*(_DWORD *)(result + 2124) >> 12) & 1;
        goto LABEL_62;
      case 26:
        if ((*(_BYTE *)(result + 2125) & 0x20) == 0)
          return result;
        *a4 = 6409;
        *a5 = 6409;
LABEL_41:
        *a6 = 5126;
LABEL_42:
        v17 = (*(_DWORD *)(result + 2124) >> 14) & 1;
LABEL_62:
        *a8 = v17;
        return result;
      case 27:
        v21 = 6410;
        goto LABEL_64;
      case 28:
        if ((*(_DWORD *)(result + 2124) & 0x20000) != 0)
          v18 = 33327;
        else
          v18 = 6410;
        *a4 = v18;
        if ((*(_DWORD *)(result + 2124) & 0x20000) != 0)
          v19 = 33319;
        else
          v19 = 6410;
        *a5 = v19;
        if ((*(_DWORD *)(result + 2124) & 0x20000) != 0)
          v20 = 5131;
        else
          v20 = 36193;
        *a6 = v20;
        if ((*(_BYTE *)(result + 2126) & 2) == 0)
          return result;
        v8 = 31;
        goto LABEL_56;
      case 33:
        if ((*(_BYTE *)(result + 2124) & 0x20) == 0)
          return result;
        *a4 = 32857;
        *a5 = 6408;
        *a6 = 33640;
        v8 = 23;
LABEL_56:
        *a7 = v8;
        break;
      case 34:
        if ((*(_BYTE *)(result + 2124) & 0x20) == 0)
          return result;
        v21 = 35446;
LABEL_64:
        *a4 = v21;
        *a5 = v21;
        v16 = 5123;
LABEL_31:
        *a6 = v16;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t CA::OGL::GLESContext::update_texture_plane(CA::OGL::GLContext *this, uint64_t a2, int a3, unsigned int a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(unsigned __int8 *)(a2 + 72);
  if ((int)v8 <= (int)a4)
  {
    if (v8 <= 1)
    {
      v12 = (_QWORD *)*((_QWORD *)this + 260);
      v13 = a2 + 4 * a4;
      v11 = 1;
      ((void (*)(_QWORD, uint64_t, uint64_t))v12[99])(*v12, 1, v13 + 64);
      v14 = *(unsigned int *)(v13 + 64);
      v15 = *((_QWORD *)this + 2);
      *(_WORD *)(v15 + 2 * (a4 + a3) + 144) = *(_DWORD *)(a2 + 52);
      *(_QWORD *)(v15 + 8 * (a4 + a3) + 176) = v14;
      CA::OGL::GLContext::update_texture((uint64_t)this, a4 + a3);
      *(_WORD *)(a2 + 58) &= 0xFFE7u;
      v16 = *(unsigned __int16 *)(a2 + 52);
      *(_BYTE *)(a2 + 54) = 17;
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))v12[305])(*v12, v16, 10242, 33071);
      ((void (*)(_QWORD, _QWORD, uint64_t, uint64_t))v12[305])(*v12, *(unsigned __int16 *)(a2 + 52), 10243, 33071);
      ((void (*)(_QWORD, _QWORD, uint64_t, uint64_t))v12[305])(*v12, *(unsigned __int16 *)(a2 + 52), 10241, 9729);
      ((void (*)(_QWORD, _QWORD, uint64_t, uint64_t))v12[305])(*v12, *(unsigned __int16 *)(a2 + 52), 10240, 9729);
      ++*(_BYTE *)(a2 + 72);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v9 = *(unsigned int *)(a2 + 4 * a4 + 64);
    v10 = *((_QWORD *)this + 2);
    *(_WORD *)(v10 + 2 * (a4 + a3) + 144) = *(_DWORD *)(a2 + 52);
    *(_QWORD *)(v10 + 8 * (a4 + a3) + 176) = v9;
    CA::OGL::GLContext::update_texture((uint64_t)this, a4 + a3);
    return 1;
  }
  return v11;
}

void CA::OGL::GLESContext::release_display_surface(CA::OGL::GLESContext *this, CA::WindowServer::Surface *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = *((_QWORD *)a2 + 11);
  v5 = *(_QWORD **)(v4 + 2184);
  if (v5)
    *(_QWORD *)(v4 + 2184) = x_list_remove(v5, (uint64_t)a2);
  *((_QWORD *)a2 + 10) = 0;
  CA::OGL::GLESContext::finalize_surface(v4, (uint64_t)a2);
}

CFTypeRef *CA::OGL::GLESContext::retain_image(uint64_t a1, uint64_t a2, CFTypeRef *this, int a4)
{
  int v8;
  __IOSurface *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  __IOSurface *v13;
  CA::WindowServer::IOSurface *v14;

  while (1)
  {
    v8 = *((unsigned __int8 *)this + 12);
    if (v8 != 38)
      break;
    this = (CFTypeRef *)CA::Render::PixelBuffer::image((CA::Render::PixelBuffer *)this);
    if (!this)
      return this;
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a2 + 56) & 0xC0 | 0x17;
  }
  switch(v8)
  {
    case 9:
      if (!*(_QWORD *)(a2 + 8))
      {
        *(_QWORD *)(a2 + 8) = this;
        (*((void (**)(CFTypeRef *))*this + 22))(this);
      }
      break;
    case 23:
      if (!*(_QWORD *)(a2 + 8))
      {
        *(_QWORD *)(a2 + 8) = this;
        v10 = (unsigned int *)this + 37;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
      }
      if (a4)
      {
        v12 = *(_QWORD *)(a2 + 32);
        if (v12)
        {
          v13 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 160))(v12);
          CA::Render::Image::update_iosurface((__IOSurface **)this, v13);
          return this;
        }
        v9 = CA::Render::Image::retain_iosurface((CA::Render::Image *)this);
        if (!v9)
          return this;
        goto LABEL_21;
      }
      break;
    case 51:
      if (!*(_QWORD *)(a2 + 8))
      {
        *(_QWORD *)(a2 + 8) = this;
        (*((void (**)(CFTypeRef *))*this + 22))(this);
      }
      if (!*(_QWORD *)(a2 + 32))
      {
        v9 = (__IOSurface *)this[14];
        if (v9)
        {
          CFRetain(this[14]);
LABEL_21:
          v14 = *(CA::WindowServer::IOSurface **)(a1 + 176);
          if (v14)
            v14 = (CA::WindowServer::IOSurface *)(*(uint64_t (**)(CA::WindowServer::IOSurface *))(*(_QWORD *)v14 + 16))(v14);
          *(_QWORD *)(a2 + 32) = CA::WindowServer::IOSurface::wrap_buffer(v14, v9, 0, 1);
        }
      }
      break;
  }
  return this;
}

uint64_t CA::OGL::GLESContext::attach_surface_texture(CA::OGL::GLContext *a1, uint64_t a2, CA::Render::Surface *a3, int a4, const char *a5)
{
  uint64_t result;
  CA::Render::Surface *v8;
  uint64_t v10;
  __IOSurface *v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  unsigned __int16 v15;
  char v16;
  int v17;
  uint64_t v19;
  CA::WindowServer::Display *v20;
  __CFRunLoop *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  const char *v27;
  char v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  __IOSurface *v32;
  int v33;
  int v34;
  int v35;
  _BOOL4 v36;
  _BOOL4 v37;
  CA::OGL::GLContext *v38;
  int v39;
  int v40;
  unsigned int WidthOfPlane;
  unsigned int HeightOfPlane;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  unint64_t v49;
  size_t v50;
  int v51;
  unsigned int v52;
  __IOSurface *v53;
  char v54;
  __int16 v55;
  __int16 v56;
  char v57;
  uint64_t v58;
  int v59;
  char v60;
  int v61;
  BOOL v62;
  BOOL v63;
  int v64;
  __IOSurface *buffer;
  unsigned int v68;
  CA::OGL::GLContext *v69;
  uint64_t v70;
  int v71;
  char v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  result = *(_QWORD *)(a2 + 32);
  if (!result)
    return result;
  v8 = a3;
  v10 = *((_QWORD *)a1 + 260);
  if (*(_QWORD *)(a2 + 8))
  {
    v11 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 104))(*(_QWORD *)(a2 + 8));
    v12 = result;
    if (!v11)
      return result;
LABEL_31:
    v69 = a1;
    v73 = 0;
    v72 = 1;
    buffer = v11;
    result = IOSurfaceGetPixelFormat(v11);
    v26 = 0;
    v62 = 0;
    v63 = 0;
    LOBYTE(v59) = 0;
    v60 = 0;
    v64 = result;
    v61 = result & 0xFFFFFFEF;
    if (a5)
      v27 = a5;
    else
      v27 = "CA::OGL::GLESImage";
    v28 = 1;
    v29 = 1;
    while (1)
    {
      v71 = 0;
      v70 = 0;
      v30 = *((unsigned int *)v8 + 4);
      v31 = *((_DWORD *)v8 + 5);
      v32 = (__IOSurface *)v12;
      if (v12 != -1)
      {
        result = CA::OGL::GLESContext::image_parameters((uint64_t)v69, v12, v26, &v71, (int *)&v70 + 1, (int *)&v70, &v73, &v72);
        v33 = v71;
        if (v71)
        {
          v68 = v31;
          goto LABEL_100;
        }
      }
      if (v64 > 1093677111)
      {
        v68 = v31;
        if (v64 > 1278555700)
        {
          if (v64 > 1380410944)
          {
            if (v64 == 1380410945)
            {
              v52 = *((_DWORD *)v69 + 531);
              if ((v52 & 0x2000) == 0)
                goto LABEL_121;
              if ((v52 & 0x20000) != 0)
                v33 = 34836;
              else
                v33 = 6408;
              v71 = v33;
              v70 = 0x190800001406;
              v47 = (v52 >> 14) & 1;
            }
            else
            {
              if (v64 != 1380411457 || (v45 = *((_DWORD *)v69 + 531), (v45 & 0x800) == 0))
              {
LABEL_121:
                v48 = v29;
LABEL_122:
                if (v48 == *(unsigned __int8 *)(a2 + 72))
                {
                  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a2 + 52) & 0xC0FFFFFF | ((v73 & 0x3F) << 24);
                  *(_BYTE *)(a2 + 57) = *(_BYTE *)(a2 + 57) & 0xF0 | v59 & 0xF;
                  if (v62)
                    v55 = 64;
                  else
                    v55 = 0;
                  if (v63)
                    v56 = 128;
                  else
                    v56 = 0;
                  *(_WORD *)(a2 + 58) = v55 & 0xFFF8 | v60 & 7 | v56 | *(_WORD *)(a2 + 58) & 0xFF38;
                  v57 = (*(_BYTE *)(a2 + 74) & 0xFC | (2 * v72)) ^ 3;
LABEL_132:
                  *(_BYTE *)(a2 + 74) = v57;
                }
                else
                {
                  result = CA::OGL::GLESContext::update_texture_plane(v69, a2, a4, 0);
                  if ((_DWORD)result)
                  {
                    result = objc_msgSend(*((id *)v69 + 21), "attachImage:toCoreSurface:invertedRender:", *(unsigned __int16 *)(a2 + 52), buffer, 0);
                    *(_DWORD *)(a2 + 52) &= 0xC0FFFFFF;
                    v57 = *(_BYTE *)(a2 + 74) | 1;
                    goto LABEL_132;
                  }
                }
                return result;
              }
              if ((v45 & 0x20000) != 0)
                v33 = 34842;
              else
                v33 = 6408;
              HIDWORD(v70) = 6408;
              v71 = v33;
              if ((v45 & 0x20000) != 0)
                v46 = 5131;
              else
                v46 = 36193;
              LODWORD(v70) = v46;
              v47 = (v45 >> 12) & 1;
            }
            v72 = v47;
            goto LABEL_100;
          }
          if (v64 == 1278555701)
          {
            v33 = 6407;
            HIDWORD(v70) = 6407;
            v34 = 33635;
            goto LABEL_99;
          }
          if (v64 != 1380401729)
            goto LABEL_121;
          v33 = 6408;
        }
        else if (v64 > 1278226487)
        {
          if (v64 != 1278226488)
          {
            if (v64 != 1278555445)
              goto LABEL_121;
            v33 = 6408;
            v70 = 0x190800008034;
            v73 = 1;
            goto LABEL_100;
          }
          v33 = 6409;
        }
        else
        {
          if (v64 != 1093677112)
          {
            if (v64 != 1111970369)
              goto LABEL_121;
            v70 = 0x80E100001401;
            v33 = 6408;
            goto LABEL_100;
          }
          v33 = 6406;
        }
        HIDWORD(v70) = v33;
        v71 = v33;
        goto LABEL_98;
      }
      if (v64 <= 875704949)
        break;
      if (v64 > 875836517)
      {
        if (v64 == 875836518)
          goto LABEL_62;
        v35 = 875836534;
LABEL_61:
        if (v64 != v35)
          goto LABEL_121;
        goto LABEL_62;
      }
      if (v64 != 875704950)
      {
        if (v64 != 875836468)
          goto LABEL_121;
        v68 = v31;
        v33 = 6408;
        HIDWORD(v70) = 32993;
        v71 = 6408;
        v34 = 32819;
        goto LABEL_99;
      }
LABEL_62:
      if ((v28 & 1) == 0)
      {
        WidthOfPlane = IOSurfaceGetWidthOfPlane(buffer, 1uLL);
        HeightOfPlane = IOSurfaceGetHeightOfPlane(buffer, 1uLL);
        v43 = v30 >> 1;
        if (v30 >> 1 >= WidthOfPlane)
          v43 = WidthOfPlane;
        if (v62)
          v30 = v43;
        else
          v30 = v30;
        v44 = v31 >> 1;
        if (v31 >> 1 >= HeightOfPlane)
          v44 = HeightOfPlane;
        v33 = 33323;
        if (v63)
          v31 = v44;
        v68 = v31;
        HIDWORD(v70) = 33319;
        v71 = 33323;
LABEL_98:
        v34 = 5121;
LABEL_99:
        LODWORD(v70) = v34;
LABEL_100:
        v48 = v29;
        v38 = v69;
        goto LABEL_101;
      }
      v36 = v61 == 875704422;
      v37 = v31 > 1;
      v62 = v30 > 1 && v61 != 875836518;
      if (v62)
        v30 = v30 & 0xFFFFFFFE;
      else
        v30 = v30;
      v63 = v37 && v36;
      if (v37 && v36)
        v31 &= ~1u;
      v38 = v69;
      v39 = *((_DWORD *)v69 + 531);
      v68 = v31;
      if ((v39 & 8) != 0 && v61 == 875704422)
      {
        v33 = 6407;
        v71 = 6407;
        v40 = 35429;
      }
      else if ((v39 & 0x10) != 0 && v61 == 875704934)
      {
        v33 = 6407;
        v71 = 6407;
        v40 = 35431;
      }
      else
      {
        if ((v39 & 0x10) == 0 || v61 != 875836518)
        {
          v73 = 22;
          if (*((_BYTE *)a3 + 12) == 51)
          {
            LOBYTE(v59) = CA::Render::Surface::ycbcr_matrix(a3, v32);
            v54 = CA::Render::Surface::chroma_location((__IOSurface **)a3, v53);
          }
          else
          {
            v59 = CA::Render::iosurface_ycbcr_matrix(buffer, v32);
            v54 = CA::Render::iosurface_chroma_location(buffer, v59);
          }
          v60 = v54;
          v33 = 33321;
          v71 = 33321;
          v70 = 0x190300001401;
          v48 = 2;
          goto LABEL_101;
        }
        v33 = 6407;
        v71 = 6407;
        v40 = 35432;
      }
      HIDWORD(v70) = v40;
      LODWORD(v70) = 5121;
      v48 = v29;
LABEL_101:
      result = CA::OGL::GLESContext::update_texture_plane(v38, a2, a4, v26);
      if ((_DWORD)result)
      {
        BYTE4(v58) = 0;
        LODWORD(v58) = v26;
        result = objc_msgSend(*((id *)v69 + 21), "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", buffer, *(unsigned __int16 *)(a2 + 52), v33, v30, v68, SHIDWORD(v70), (int)v70, v58);
        if (*(_BYTE *)(a2 + 72))
        {
          v49 = 0;
          do
          {
            v50 = strlen(v27);
            result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, size_t, const char *))(v10 + 6520))(*(_QWORD *)v10, 5890, *(unsigned int *)(a2 + 64 + 4 * v49++), v50, v27);
          }
          while (v49 < *(unsigned __int8 *)(a2 + 72));
        }
      }
      v28 = 0;
      v51 = v26 + 1;
      v29 = 2;
      v26 = 1;
      v8 = a3;
      if (v51 >= v48)
        goto LABEL_122;
    }
    if (v64 == 875704422 || v64 == 875704438)
      goto LABEL_62;
    v35 = 875704934;
    goto LABEL_61;
  }
  if (*((_BYTE *)a3 + 12) != 51)
  {
    v16 = 0;
LABEL_26:
    v12 = -1;
    goto LABEL_27;
  }
  v13 = *(_DWORD *)(result + 64);
  if (v13 > 875836517)
  {
    if (v13 > 1714696751)
    {
      v14 = v13 == 2033463856;
      v17 = 1714696752;
    }
    else
    {
      v14 = v13 == 875836518;
      v17 = 875836534;
    }
  }
  else
  {
    if (v13 > 875704933)
    {
      v14 = v13 == 875704934;
      v15 = 12918;
    }
    else
    {
      v14 = v13 == 875704422;
      v15 = 12406;
    }
    v17 = v15 | 0x34320000;
  }
  if (!v14 && v13 != v17)
  {
    v12 = (*(uint64_t (**)(CA::Render::Surface *))(*(_QWORD *)a3 + 104))(a3);
    v16 = 0;
    goto LABEL_27;
  }
  v19 = *((_QWORD *)a1 + 22);
  if (!v19
    || (v20 = (CA::WindowServer::Display *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19)) == 0)
  {
    v16 = 1;
    goto LABEL_26;
  }
  v22 = (uint64_t)v20;
  v23 = *((unsigned int *)v8 + 4);
  v24 = *((unsigned int *)v8 + 5);
  v25 = CA::WindowServer::Display::copy_iosa_manager(v20, v21);
  if (*(_QWORD *)(a2 + 40)
    || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 144))(v22, v23, v24, v23, v24))
  {
    v12 = -1;
  }
  else
  {
    *(_QWORD *)(a2 + 40) = CA::WindowServer::Display::allocate_surface(v22, v23, v24, (CA::Render *)0x42475241, 0, 2u, 0, 0, 0, 0);
    CA::OGL::Context::add_buffered_image(a1, a2);
    v12 = 1;
  }
  CA::IOSAManager::unref(v25);
  v16 = 1;
  v8 = a3;
LABEL_27:
  result = *(_QWORD *)(a2 + 40);
  if (!result)
  {
    if ((v16 & 1) != 0)
      return result;
    result = *(_QWORD *)(a2 + 32);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
  v11 = (__IOSurface *)result;
  if (result)
    goto LABEL_31;
  return result;
}

uint64_t CA::OGL::GLESContext::update_compressed_image(uint64_t this, uint64_t a2, int32x2_t *a3, int a4)
{
  unsigned int v4;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int32x2_t v15;
  int8x8_t v16;
  uint32x2_t v17;

  v4 = a3[19].i32[1] - 1;
  if (v4 <= 0x1B)
  {
    v7 = this;
    v8 = *(_QWORD **)(this + 2080);
    v9 = dword_18475D688[v4];
    if ((v9 - 37808) > 0x2D || ((1 << (v9 + 80)) & 0x3FFF00003FFFLL) == 0)
    {
      if ((v9 - 35840) >= 4)
        return this;
      v11 = 0x8000;
    }
    else
    {
      v11 = 0x10000;
    }
    if ((*(_DWORD *)(this + 2124) & v11) != 0)
    {
      this = CA::OGL::GLESContext::update_texture_plane((CA::OGL::GLContext *)this, a2, a4, 0);
      if ((_DWORD)this)
      {
        v12 = *(_DWORD *)(a2 + 52);
        *(_DWORD *)(a2 + 52) = v12 & 0xC0FFFFFF;
        *(_BYTE *)(a2 + 74) &= ~2u;
        v13 = a3[19].i32[0];
        if (v13 > 1)
        {
          ((void (*)(_QWORD, _QWORD, uint64_t, uint64_t))v8[305])(*v8, (unsigned __int16)v12, 10241, 9987);
          ((void (*)(_QWORD, _QWORD, uint64_t, _QWORD))v8[305])(*v8, *(unsigned __int16 *)(a2 + 52), 33084, 0);
          ((void (*)(_QWORD, _QWORD, uint64_t, _QWORD))v8[305])(*v8, *(unsigned __int16 *)(a2 + 52), 33085, (a3[19].i32[0] - 1));
          *(_BYTE *)(a2 + 73) |= 1u;
          *(_DWORD *)(a2 + 52) = *(_DWORD *)(a2 + 52) & 0xFFF0FFFF | 0x20000;
          v13 = a3[19].i32[0];
        }
        if (v13 >= 1)
        {
          v14 = 0;
          v15 = a3[2];
          do
          {
            v17 = (uint32x2_t)v15;
            ((void (*)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v8[381])(*v8, *(unsigned __int16 *)(a2 + 52), v14, v9, v15.u32[0], v15.u32[1], 0, *(unsigned int *)(*(_QWORD *)&a3[17] + 8 * v14), *(_QWORD *)&a3[12] + *(_QWORD *)(*(_QWORD *)&a3[16] + 8 * v14));
            v16 = (int8x8_t)vcgt_u32(v17, (uint32x2_t)0x100000001);
            v15 = vsub_s32((int32x2_t)vand_s8((int8x8_t)vshr_n_u32(v17, 1uLL), v16), (int32x2_t)vmvn_s8(v16));
            ++v14;
          }
          while (v14 < a3[19].i32[0]);
        }
        this = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a3 + 168))(a3);
        *(_QWORD *)(v7 + 712) += this;
        *(_DWORD *)(a2 + 16) = a3[4].i32[1];
      }
    }
  }
  return this;
}

CA::OGL::GLESContext *CA::OGL::GLESContext::GLESContext(CA::OGL::GLESContext *this, void *a2)
{
  _QWORD *v4;
  char *v5;
  char *v6;
  char *v7;
  CA::OGL::GLContext *v8;
  char *v9;
  const char *v10;
  int v11;
  const char *v12;
  _DWORD *v13;
  int v14;
  const char *v15;
  int v16;
  const char *v17;
  int v18;
  const char *v19;
  int v20;
  const char *v21;
  int v22;
  const char *v23;
  int v24;
  const char *v25;
  int v26;
  const char *v27;
  int v28;
  const char *v29;
  int v30;
  const char *v31;
  int v32;
  const char *v33;
  int v34;
  const char *v35;
  int v36;
  const char *v37;
  int v38;
  const char *v39;
  int v40;
  const char *v41;
  int v42;
  int v43;
  _DWORD *v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int v48;
  NSObject *v49;
  NSObject *v50;
  float v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  void *v64;
  int v66;
  uint8_t buf[8];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  if (*((void **)CA::OGL::Context::Context(this) + 21) != a2)
    *((_QWORD *)this + 21) = a2;
  *((_DWORD *)this + 522) = 1006632960;
  *(_QWORD *)this = off_1E1593FB8;
  *((_BYTE *)this + 2192) |= 2u;
  v4 = (_QWORD *)objc_msgSend(a2, "getMacroContextPrivate");
  *((_QWORD *)this + 260) = v4;
  *((_QWORD *)this + 9) = 0x4110000000000000;
  *((_QWORD *)this + 47) = 0x200000;
  if ((CA::OGL::GLESContext::update_limits(void)::initialized & 1) == 0)
  {
    v5 = getenv("CA_DISABLE_WORKAROUNDS");
    if (v5)
      CA::OGL::GLESContext::update_limits(void)::disable_workarounds = atoi(v5) != 0;
    v6 = getenv("CA_MAX_TEXTURE_UNITS");
    if (v6)
      CA::OGL::GLESContext::update_limits(void)::max_texture_units = atoi(v6);
    v7 = getenv("CA_MAX_TEXTURE_SIZE");
    if (v7)
      CA::OGL::GLESContext::update_limits(void)::max_texture_size = atoi(v7);
    CA::OGL::GLESContext::update_limits(void)::initialized = 1;
  }
  v8 = (CA::OGL::GLContext *)((uint64_t (*)(_QWORD, uint64_t))v4[118])(*v4, 7939);
  v9 = (char *)((uint64_t (*)(_QWORD, uint64_t))v4[118])(*v4, 35358);
  ((void (*)(_QWORD, uint64_t))v4[118])(*v4, 7937);
  v11 = CA::OGL::GLContext::check_extension(v8, v9, "GL_APPLE_fence", v10);
  v13 = (_DWORD *)((char *)this + 2096);
  if (v11)
    v14 = 2;
  else
    v14 = 0;
  *((_DWORD *)this + 531) = v14 | v11 | *((_DWORD *)this + 531) & 0xFFFFFFFC;
  if (CA::OGL::GLContext::check_extension(v8, v9, "GL_APPLE_texture_filter_cubic", v12))
    v16 = 4;
  else
    v16 = 0;
  *((_DWORD *)this + 531) = *((_DWORD *)this + 531) & 0xFFFFFFFB | v16;
  if (CA::OGL::GLContext::check_extension(v8, v9, "GL_APPLE_texture_ycbcr_basic_formats", v15))
    v18 = 8;
  else
    v18 = 0;
  *((_DWORD *)this + 531) = *((_DWORD *)this + 531) & 0xFFFFFFF7 | v18;
  if (CA::OGL::GLContext::check_extension(v8, v9, "GL_APPLE_texture_ycbcr_extended_formats", v17))
    v20 = 16;
  else
    v20 = 0;
  *((_DWORD *)this + 531) = *((_DWORD *)this + 531) & 0xFFFFFFEF | v20;
  if (CA::OGL::GLContext::check_extension(v8, v9, "GL_APPLE_texture_xr", v19))
    v22 = 32;
  else
    v22 = 0;
  *((_DWORD *)this + 531) = *((_DWORD *)this + 531) & 0xFFFFFFDF | v22;
  if (CA::OGL::GLContext::check_extension(v8, v9, "GL_APPLE_tile_order_rot", v21))
    v24 = 64;
  else
    v24 = 0;
  *((_DWORD *)this + 531) = *((_DWORD *)this + 531) & 0xFFFFFFBF | v24;
  if (CA::OGL::GLContext::check_extension(v8, v9, "GL_EXT_shader_framebuffer_fetch", v23))
    v26 = 128;
  else
    v26 = 0;
  *((_DWORD *)this + 531) = *((_DWORD *)this + 531) & 0xFFFFFF7F | v26;
  if (CA::OGL::GLContext::check_extension(v8, v9, "GL_EXT_texture_filter_anisotropic", v25))
    v28 = 256;
  else
    v28 = 0;
  *((_DWORD *)this + 531) = *((_DWORD *)this + 531) & 0xFFFFFEFF | v28;
  if (CA::OGL::GLContext::check_extension(v8, v9, "GL_EXT_texture_lod_bias", v27))
    v30 = 512;
  else
    v30 = 0;
  *((_DWORD *)this + 531) = *((_DWORD *)this + 531) & 0xFFFFFDFF | v30;
  if (CA::OGL::GLContext::check_extension(v8, v9, "GL_OES_standard_derivatives", v29))
    v32 = 1024;
  else
    v32 = 0;
  *((_DWORD *)this + 531) = *((_DWORD *)this + 531) & 0xFFFFFBFF | v32;
  if (CA::OGL::GLContext::check_extension(v8, v9, "GL_OES_texture_half_float", v31))
    v34 = 2048;
  else
    v34 = 0;
  *((_DWORD *)this + 531) = *((_DWORD *)this + 531) & 0xFFFFF7FF | v34;
  if (CA::OGL::GLContext::check_extension(v8, v9, "GL_OES_texture_half_float_linear", v33))
    v36 = 4096;
  else
    v36 = 0;
  *((_DWORD *)this + 531) = *((_DWORD *)this + 531) & 0xFFFFEFFF | v36;
  if (CA::OGL::GLContext::check_extension(v8, v9, "GL_OES_texture_float", v35))
    v38 = 0x2000;
  else
    v38 = 0;
  *((_DWORD *)this + 531) = *((_DWORD *)this + 531) & 0xFFFFDFFF | v38;
  if (CA::OGL::GLContext::check_extension(v8, v9, "GL_OES_texture_float_linear", v37))
    v40 = 0x4000;
  else
    v40 = 0;
  *((_DWORD *)this + 531) = *((_DWORD *)this + 531) & 0xFFFFBFFF | v40;
  if (CA::OGL::GLContext::check_extension(v8, v9, "GL_IMG_texture_compression_pvrtc", v39))
    v42 = 0x8000;
  else
    v42 = 0;
  *((_DWORD *)this + 531) = *((_DWORD *)this + 531) & 0xFFFF7FFF | v42;
  if (CA::OGL::GLContext::check_extension(v8, v9, "GL_KHR_texture_compression_astc_ldr", v41))
    v43 = 0x10000;
  else
    v43 = 0;
  *((_DWORD *)this + 531) = *((_DWORD *)this + 531) & 0xFFFEFFFF | v43;
  v44 = (_DWORD *)((char *)this + 2100);
  *((_OWORD *)this + 131) = 0u;
  v45 = objc_msgSend(*((id *)this + 21), "API");
  v46 = *((_DWORD *)this + 531);
  v47 = v46 & 0xFFF1FFFF;
  v48 = v46 | 0xE3800;
  if (v45 <= 2)
    v48 = v47;
  *((_DWORD *)this + 531) = v48;
  if (!CA::OGL::GLESContext::update_limits(void)::disable_workarounds)
    *((_DWORD *)this + 531) = v48 | 3;
  ((void (*)(_QWORD, uint64_t, char *))v4[105])(*v4, 34930, (char *)this + 2096);
  ((void (*)(_QWORD, uint64_t, char *))v4[105])(*v4, 3379, (char *)this + 2100);
  if (CA::OGL::GLESContext::update_limits(void)::max_texture_units >= 1
    && CA::OGL::GLESContext::update_limits(void)::max_texture_units < *v13)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v49 = x_log_category_ogl_opengl;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl_opengl, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = CA::OGL::GLESContext::update_limits(void)::max_texture_units;
        _os_log_impl(&dword_184457000, v49, OS_LOG_TYPE_DEFAULT, "CoreAnimation: maximum %d texture units\n", buf, 8u);
      }
    }
    *v13 = CA::OGL::GLESContext::update_limits(void)::max_texture_units;
  }
  if (CA::OGL::GLESContext::update_limits(void)::max_texture_size >= 1
    && CA::OGL::GLESContext::update_limits(void)::max_texture_size < *v44)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v50 = x_log_category_ogl_opengl;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl_opengl, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = CA::OGL::GLESContext::update_limits(void)::max_texture_size;
        _os_log_impl(&dword_184457000, v50, OS_LOG_TYPE_DEFAULT, "CoreAnimation: maximum texture %d pixels\n", buf, 8u);
      }
    }
    *v44 = CA::OGL::GLESContext::update_limits(void)::max_texture_size;
  }
  ((void (*)(_QWORD, uint64_t, char *))v4[105])(*v4, 3386, (char *)this + 2112);
  v66 = 0;
  ((void (*)(_QWORD, uint64_t, int *))v4[105])(*v4, 3408, &v66);
  v51 = 0.5;
  if ((v66 - 1) <= 0x1D)
    v51 = 0.5 - (float)(0.5 / (float)(1 << v66));
  *((float *)this + 199) = v51;
  v52 = MEMORY[0x186DBD438](*MEMORY[0x1E0CBC1E0]);
  v53 = MEMORY[0x186DBD438](*MEMORY[0x1E0CBC008]);
  if (v52 >= v53)
    v54 = v53;
  else
    v54 = v52;
  if (!v53)
    v54 = v52;
  if (!v52)
    v54 = v53;
  if (v54 && (!*v44 || *v44 > (int)v54))
    *v44 = v54;
  v55 = MEMORY[0x186DBD438](*MEMORY[0x1E0CBBF08]);
  if (v55 && *((_QWORD *)this + 263) - 1 >= v55)
    *((_QWORD *)this + 263) = v55;
  v62 = *((_DWORD *)this + 525);
  v63 = *((_DWORD *)this + 528);
  if (v63 >= *((_DWORD *)this + 529))
    v63 = *((_DWORD *)this + 529);
  if (v62 >= v63)
    v62 = v63;
  *((_DWORD *)this + 530) = v62;
  v64 = (void *)*((_QWORD *)this + 266);
  if (v64)
  {
    free(v64);
    *((_QWORD *)this + 266) = 0;
  }
  *((_DWORD *)this + 531) |= 0x100000u;
  *(_QWORD *)buf = 0;
  v68 = 0;
  v69 = 0;
  x_stream_printf((uint64_t)buf, "#define NOISE_SIZE %d\n", v56, v57, v58, v59, v60, v61, 32);
  x_stream_write((uint64_t)buf, "\n", 1uLL);
  *((_QWORD *)this + 266) = x_stream_finish((uint64_t)buf);
  return this;
}

uint64_t CA::OGL::Context::set_destination_texture(CA::OGL::Context *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v5[0] = a3;
  return (*(uint64_t (**)(CA::OGL::Context *, uint64_t, _QWORD *, BOOL, uint64_t, _QWORD))(*(_QWORD *)this + 24))(this, a2, v5, a3 != 0, a4, 0);
}

BOOL CA::OGL::Context::get(uint64_t a1, int a2)
{
  return a2 == 28 || a2 == 16;
}

char *CA::OGL::Context::get_error_string(CA::OGL::Context *this, int a2)
{
  snprintf(CA::OGL::Context::get_error_string(int)const::buf, 0xCuLL, "0x%x", a2);
  return CA::OGL::Context::get_error_string(int)const::buf;
}

uint64_t CA::OGL::Context::subimage_max_rowbytes(CA::OGL::Context *this)
{
  return (*(int (**)(CA::OGL::Context *, uint64_t))(*(_QWORD *)this + 184))(this, 5);
}

uint64_t CA::OGL::Context::update(CA::OGL::Context *this)
{
  return 1;
}

uint64_t CA::OGL::Context::supports_fences(CA::OGL::Context *this)
{
  return 0;
}

uint64_t CA::OGL::Context::set_fence(CA::OGL::Context *this)
{
  return 0;
}

uint64_t CA::OGL::Context::test_fence(CA::OGL::Context *this)
{
  return 0;
}

double CA::OGL::Context::bind_supercircle_field(CA::OGL::Context *this, unsigned int a2, int a3, BOOL a4, BOOL a5, float *a6, int a7, float *a8)
{
  uint64_t v8;
  __int128 v9;
  double result;

  v8 = *((_QWORD *)this + 2);
  *(_OWORD *)(v8 + 16 * a2 + 96) = xmmword_18474E210;
  *(_BYTE *)(v8 + a2 + 17) = byte_18474ECE8[a7];
  if (a8)
    *(_QWORD *)&v9 = *(_QWORD *)a8;
  else
    *(_QWORD *)&v9 = 0;
  *((_QWORD *)&v9 + 1) = v9;
  *(_OWORD *)(*((_QWORD *)this + 2) + 48 * a2 + 416) = v9;
  result = 0.00781250557;
  *(_QWORD *)a6 = 0x3F800000BF800000;
  return result;
}

double CA::OGL::Context::bind_uneven_supercircle(uint64_t a1, unsigned int a2, _OWORD *a3, _QWORD *a4, uint64_t a5, __int128 *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  double result;

  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(v6 + 16 * a2 + 96) = xmmword_18474E210;
  *(_BYTE *)(v6 + a2 + 17) = 16;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = v7 + 48 * a2;
  *(_OWORD *)(v8 + 384) = *a3;
  *(_OWORD *)(v8 + 400) = a3[1];
  if (a6)
    v9 = *a6;
  else
    v9 = 0uLL;
  *(_OWORD *)(v7 + 48 * a2 + 416) = v9;
  result = 0.0078125;
  *a4 = 0x3F80000000000000;
  return result;
}

uint64_t CA::OGL::Context::should_tile_image(CA::OGL::Context *this, CA::Render::Texture *a2)
{
  return 0;
}

CGColorSpace *CA::OGL::Context::create_mutable_image(CA::OGL::Context *this, CA::Render *a2, unsigned int a3, unsigned int a4, CGColorSpace *a5)
{
  unint64_t v9;
  CA::Render *v10;
  CGColorSpace *result;
  void (*v12)(const void *, void *);
  unint64_t v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v9 = CA::Render::format_rowbytes(a2, a3);
  v12 = 0;
  v13[0] = v9;
  if (is_mul_ok(v9, a4))
    v10 = (CA::Render *)(v9 * a4);
  else
    v10 = 0;
  result = (CGColorSpace *)CA::Render::aligned_malloc(v10, (unint64_t *)&v12, 0);
  if (result)
    return CA::Render::Image::new_image(a2, a3, a4, 1u, a5, result, v13, (const unint64_t *)CA::Render::aligned_free, v12, v12);
  return result;
}

_DWORD *CA::OGL::Context::modify_subimage_impl(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10)
{
  unsigned int *v11;
  unsigned int v12;

  if (*(_BYTE *)(a3 + 153) == 1)
  {
    if (a10 && result[54] < a10)
      (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)result + 640))(result, a2, 1);
    result = (_DWORD *)CGBlt_copyBytes();
    v11 = (unsigned int *)(a3 + 36);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  return result;
}

BOOL CA::OGL::Context::edge_mode_supported(uint64_t a1, uint64_t a2, int a3)
{
  return a3 == 0;
}

uint64_t CA::OGL::Context::image_surface()
{
  return 0;
}

double CA::OGL::Context::new_image(CA::OGL::Context *this)
{
  malloc_zone_t *malloc_zone;
  _OWORD *v2;
  double result;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v2 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x40uLL, 0x743898A5uLL);
  if (v2)
  {
    result = 0.0;
    v2[2] = 0u;
    v2[3] = 0u;
    *v2 = 0u;
    v2[1] = 0u;
  }
  return result;
}

uint64_t CA::OGL::Context::finish_image()
{
  return 1;
}

uint64_t CA::OGL::Context::needs_destination_group(CA::OGL::Context *this)
{
  return 1;
}

uint64_t CA::OGL::Context::state_requires_disjoint_primitives(CA::OGL::Context *this)
{
  return 0;
}

BOOL CA::OGL::Context::attached_to_framebuffer_p(CA::OGL::Context *this)
{
  return *((_QWORD *)this + 31) == 0;
}

uint64_t CA::OGL::Context::clear_region(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v4[0] = *a3;
  return CA::OGL::Context::paint_region(a1, a2, v4, 0);
}

uint64_t CA::OGL::Context::make_buffer_current()
{
  return 0;
}

uint64_t CA::OGL::Context::dynamic_cast_gl_context(CA::OGL::Context *this)
{
  return 0;
}

uint64_t CA::OGL::Context::destination_rotated_or_flipped(CA::OGL::Context *this)
{
  return 0;
}

void CA::OGL::export_surface(uint64_t a1, uint64_t a2, const char *a3)
{
  __int128 v4;
  const char *v5;
  uint64_t v6;
  CGImage *v7;
  size_t v8;
  const __CFURL *v9;
  CGImageDestination *v10;
  _BOOL4 v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  const char *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  __int128 v21;
  char __str[16];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char v38[1024];
  uint8_t buf[4];
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  ++CA::OGL::export_surface(CA::OGL::Context *,CA::OGL::Surface *,char const*,unsigned int,BOOL)::counter;
  v4 = *(_OWORD *)(a2 + 32);
  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    v5 = a3 ? a3 : "";
    v21 = *(_OWORD *)(a2 + 32);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 896))(a1, a2, 0, 0);
    v4 = v21;
    if (v6)
    {
      v7 = (CGImage *)v6;
      bzero(v38, 0x400uLL);
      if (getuid())
        confstr(65537, v38, 0x400uLL);
      else
        strcpy(v38, "/tmp/");
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      *(_OWORD *)__str = 0u;
      v23 = 0u;
      snprintf(__str, 0x100uLL, "%sca-image-%03d-%s-%d.png", v38, CA::OGL::export_surface(CA::OGL::Context *,CA::OGL::Surface *,char const*,unsigned int,BOOL)::counter, v5, 0);
      v8 = strlen(__str);
      v9 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)__str, v8, 0);
      v10 = CGImageDestinationCreateWithURL(v9, CFSTR("public.png"), 1uLL, 0);
      CFRelease(v9);
      if (v10)
      {
        CGImageDestinationAddImage(v10, v7, 0);
        v11 = CGImageDestinationFinalize(v10);
        CFRelease(v10);
        CGImageRelease(v7);
        if (v11)
        {
          v13 = *(_DWORD *)(a2 + 40);
          v12 = *(_DWORD *)(a2 + 44);
          if (x_log_hook_p())
            goto LABEL_15;
          v20 = x_log_category_utilities;
          if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
            goto LABEL_21;
          *(_DWORD *)buf = 67109634;
          v40 = v13;
          v41 = 1024;
          v42 = v12;
          v43 = 2080;
          v44 = __str;
          v17 = "exported [%d %d] buffer to %s\n";
          v18 = v20;
          v19 = OS_LOG_TYPE_DEFAULT;
          goto LABEL_20;
        }
      }
      else
      {
        CGImageRelease(v7);
      }
      if (x_log_hook_p())
      {
LABEL_15:
        x_log_();
LABEL_21:
        v4 = v21;
        goto LABEL_22;
      }
      v14 = x_log_category_ogl;
      if (!os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_ERROR))
        goto LABEL_21;
      v15 = *(_DWORD *)(a2 + 40);
      v16 = *(_DWORD *)(a2 + 44);
      *(_DWORD *)buf = 67109634;
      v40 = v15;
      v41 = 1024;
      v42 = v16;
      v43 = 2080;
      v44 = __str;
      v17 = "error: failed to export [%d %d] buffer to %s\n";
      v18 = v14;
      v19 = OS_LOG_TYPE_ERROR;
LABEL_20:
      _os_log_impl(&dword_184457000, v18, v19, v17, buf, 0x18u);
      goto LABEL_21;
    }
  }
LABEL_22:
  *(_OWORD *)(a2 + 32) = v4;
}

uint64_t CA::OGL::`anonymous namespace'::flatten_detached_layer(CA::OGL::_anonymous_namespace_ *this, CA::Render::Handle *a2, uint64_t a3, CA::Render::Texture *a4, void *a5)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, CA::Render::Texture *, CA::OGL::_anonymous_namespace_ *, CA::Render::Handle *, void *))(**((_QWORD **)a4 + 22) + 72))(*((_QWORD *)a4 + 22), a4, this, a2, a5);
  if (this)
    *((_QWORD *)this + 12) &= ~0x8000uLL;
  return result;
}

uint64_t std::__destroy_at[abi:nn180100]<CA::OGL::TransientRenderTexture,0>(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(unsigned int **)(a1 + 16);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v7 = (unsigned int *)(result + 8);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void CA::OGL::Context::~Context(CA::OGL::Context *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  void *v7;
  malloc_zone_t *malloc_zone;
  _QWORD **v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _QWORD *j;
  _QWORD *v16;
  void *v17;
  void *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  malloc_zone_t *v27;
  malloc_zone_t *v28;
  void **v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  malloc_zone_t *v34;
  CA::Shape *v35;

  *(_QWORD *)this = off_1E1595510;
  if (*((_QWORD *)this + 31))
    __assert_rtn("~Context", "ogl-context.cpp", 102, "current_surface () == nullptr");
  CA::Render::remove_observer(3u, 0, (uint64_t)CA::OGL::Context::image_deleted, (uint64_t)this);
  CA::Render::remove_observer(0xBu, 0, (uint64_t)CA::OGL::Context::image_volatile, (uint64_t)this);
  v2 = (_QWORD *)*((_QWORD *)this + 48);
  if (v2)
  {
    CA::Render::remove_observer(3u, 0, (uint64_t)CA::Render::TileCache::image_deleted, *((_QWORD *)this + 48));
    v3 = 0;
    v4 = v2[2];
    v5 = 1 << *(_DWORD *)v4;
    do
    {
      for (i = *(_QWORD **)(*(_QWORD *)(v4 + 16) + 8 * v3); i; i = (_QWORD *)*i)
      {
        v7 = (void *)i[3];
        CA::Render::tile_cache_entry_release_images(v2, (uint64_t)v7);
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(malloc_zone, v7);
      }
      ++v3;
    }
    while (v3 != v5);
    x_hash_table_free((_QWORD *)v2[2]);
    MEMORY[0x186DBD990](v2, 0x10A0C404FC77179);
    *((_QWORD *)this + 48) = 0;
  }
  v9 = (_QWORD **)*((_QWORD *)this + 49);
  if (v9)
  {
    CA::Render::remove_observer(0xAu, 0, (uint64_t)CA::Render::ShadowCache::path_deleted, *((_QWORD *)this + 49));
    x_list_foreach(v9[1]);
    v10 = v9[1];
    if (v10)
    {
      do
      {
        v11 = (_QWORD *)v10[1];
        free(v10);
        v10 = v11;
      }
      while (v11);
    }
    v12 = 0;
    v13 = *v9;
    v14 = 1 << *(_DWORD *)*v9;
    do
    {
      for (j = *(_QWORD **)(*((_QWORD *)v13 + 2) + 8 * v12); j; j = (_QWORD *)*j)
      {
        v16 = (_QWORD *)j[3];
        if (v16)
        {
          v17 = (void *)v16[14];
          if (v17)
          {
            v16[15] = v17;
            operator delete(v17);
          }
          v18 = (void *)v16[11];
          if (v18)
          {
            v16[12] = v18;
            operator delete(v18);
          }
          v19 = (unsigned int *)v16[4];
          if (v19)
          {
            v20 = v19 + 2;
            do
            {
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
              (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
          }
          v23 = (unsigned int *)v16[3];
          if (v23)
          {
            v24 = v23 + 2;
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
              (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 16))(v23);
          }
          v27 = (malloc_zone_t *)get_malloc_zone();
          malloc_zone_free(v27, v16);
        }
      }
      ++v12;
    }
    while (v12 != v14);
    x_hash_table_free(*v9);
    v28 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v28, v9);
    *((_QWORD *)this + 49) = 0;
  }
  x_hash_table_free(*((_QWORD **)this + 34));
  x_hash_table_free(*((_QWORD **)this + 37));
  v29 = (void **)*((_QWORD *)this + 43);
  if (v29)
  {
    v30 = *v29;
    if (*v29)
    {
      v31 = (uint64_t)v29[1];
      v32 = *v29;
      if ((void *)v31 != v30)
      {
        do
        {
          v31 -= 32;
          std::__destroy_at[abi:nn180100]<CA::OGL::TransientRenderTexture,0>(v31);
        }
        while ((void *)v31 != v30);
        v32 = *v29;
      }
      v29[1] = v30;
      operator delete(v32);
    }
    MEMORY[0x186DBD990](v29, 0x20C40960023A9);
  }
  CGColorSpaceRelease(*((CGColorSpaceRef *)this + 18));
  v33 = (void *)*((_QWORD *)this + 20);
  if (v33)
  {
    CA::ColorProgram::Cache::~Cache(*((CA::ColorProgram::Cache **)this + 20));
    v34 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v34, v33);
  }
  v35 = (CA::Shape *)*((_QWORD *)this + 51);
  if (v35)
    CA::Shape::unref(v35);
  std::unique_ptr<CA::OGL::DebugRenderer>::reset[abi:nn180100]((CA::OGL::DebugRenderer **)this + 50, 0);
}

_OWORD *CA::OGL::Context::bind_image(uint64_t a1, uint64_t a2, uint32x2_t *a3, double *a4, unsigned int a5, int a6, uint64_t a7, CA::OGL::ContentsGeometry *a8, float a9, float32x4_t *a10, uint64_t a11)
{
  uint64_t v13;
  float32x2_t *v18;
  int v19;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint32x2_t *v25;
  uint64_t v26;
  _OWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  int v32;
  int v33;
  CA::Render::TiledTexture *v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  unsigned int v40;
  float32x2_t v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  CA::Render::TiledTexture *v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  float v50;
  float v51;
  uint64_t v52;
  float *v53;
  float32x2_t *v54;
  __int16 v55;
  float *v56;
  unsigned int v57;
  float v58;
  float v59;
  uint64_t v60;
  float32x4_t v66;
  float32x2_t *v68;
  float32x2_t v69;
  float v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int32 v75;
  int AppBooleanValue;
  char *v77;
  CA::ColorProgram::Cache *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  float32x4_t v82;
  float32x4_t v83;
  int v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  CGColorSpace *v89;
  uint64_t v90;
  _DWORD *v91;
  CA::OGL::ContentsGeometry *v92;
  BOOL v93;
  float32x4_t *v94;
  unsigned int v96;
  float32x2_t v97;
  float32x2_t v98;
  Boolean keyExistsAndHasValidFormat[16];
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;

  LODWORD(v13) = a6;
  v109 = *MEMORY[0x1E0C80C00];
  v97 = 0;
  v98 = 0;
  v18 = &v97;
  if (((unsigned __int16)a4 & 0x400) == 0)
    v18 = (float32x2_t *)a10;
  v94 = (float32x4_t *)v18;
  v19 = a3[1].i32[1] & 0x40000;
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, 20);
  v93 = v21 == 0;
  v92 = a8;
  if (!(v19 | (unsigned __int16)a4 & 0x1000))
  {
    v33 = v21;
    if (!a8 || !*((_BYTE *)a8 + 337) && !*((_BYTE *)a8 + 338))
    {
      v34 = (CA::Render::TiledTexture *)(*(uint64_t (**)(uint32x2_t *))(*(_QWORD *)a3 + 200))(a3);
      if (v34)
      {
        v108 = 0;
        v106 = 0u;
        v107 = 0u;
        v104 = 0u;
        v105 = 0u;
        v102 = 0u;
        v103 = 0u;
        v100 = 0u;
        v101 = 0u;
        *(_OWORD *)keyExistsAndHasValidFormat = 0u;
        CA::OGL::TiledImageGeometry::TiledImageGeometry((uint64_t)keyExistsAndHasValidFormat, v34, a1, a4, a5, v13, a8, a9);
        v23 = a2;
        v27 = CA::OGL::TiledImageGeometry::bind_image((int32x2_t **)keyExistsAndHasValidFormat, a2, v94);
        v25 = a3;
        goto LABEL_24;
      }
      if ((*(unsigned int (**)(uint64_t, uint32x2_t *))(*(_QWORD *)a1 + 568))(a1, a3))
      {
        *(_DWORD *)keyExistsAndHasValidFormat = 0;
        v96 = 0;
        if (((*(uint64_t (**)(uint32x2_t *, Boolean *, unsigned int *))(*(_QWORD *)a3 + 216))(a3, keyExistsAndHasValidFormat, &v96) & 1) != 0)
        {
          if (((*(uint64_t (**)(uint64_t, uint32x2_t *, _QWORD, _QWORD))(*(_QWORD *)a1 + 576))(a1, a3, *(unsigned int *)keyExistsAndHasValidFormat, v96) & 1) == 0)
          {
            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 520))(a1, 0, a2);
            return 0;
          }
          v43 = (*(uint64_t (**)(uint32x2_t *))(*(_QWORD *)a3 + 104))(a3);
          v44 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 200))(a1, v43, *(unsigned int *)keyExistsAndHasValidFormat, v96);
          v45 = (CA::Render::TiledTexture *)(*(uint64_t (**)(uint32x2_t *, uint64_t, _QWORD))(*(_QWORD *)a3 + 208))(a3, v44, (a4 >> 11) & 1);
          if (v45)
          {
            v46 = (unsigned int *)v45;
            v23 = a2;
            v27 = CA::OGL::bind_tiled_image(a1, a2, v45, a4, a5, v13, v92, v94, a9);
            v47 = v46 + 2;
            do
            {
              v48 = __ldaxr(v47);
              v49 = v48 - 1;
            }
            while (__stlxr(v49, v47));
            v25 = a3;
            if (!v49)
              (*(void (**)(unsigned int *))(*(_QWORD *)v46 + 16))(v46);
LABEL_24:
            if (!v27)
              return v27;
            if (!v33)
              goto LABEL_122;
            goto LABEL_100;
          }
        }
      }
    }
  }
  if (((unsigned __int16)a4 & 0x43F) != 0)
    v13 = v13;
  else
    v13 = 0;
  if (((unsigned __int16)a4 & 0x43F) != 0)
    v22 = a5;
  else
    v22 = 0;
  v23 = a2;
  v24 = CA::OGL::state_image_texture_unit(*(_QWORD *)(a1 + 16), a2);
  v25 = a3;
  v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint32x2_t *, double *, uint64_t, uint64_t, uint64_t, float32x4_t *, float, uint64_t))(*(_QWORD *)a1 + 584))(a1, v24, a3, a4, v22, v13, a7, v94, a9, a11);
  v27 = (_OWORD *)v26;
  if (v26)
  {
    v28 = *(_BYTE *)(v26 + 55) & 0x3F;
    v29 = *(_QWORD *)(a1 + 16);
    v30 = *(_QWORD *)(v29 + 360);
    if (v30)
    {
      v31 = v93;
      if ((*(_DWORD *)v30 - 1) <= 3)
      {
        if (*(_DWORD *)v30 == 1)
          v32 = 24;
        else
          v32 = 26;
        v31 = 1;
        if (*(float *)(v30 + 16) > 0.0)
          v28 = v32 | 1;
        else
          v28 = v32;
      }
    }
    else
    {
      v31 = v93;
    }
    if (v28 > 20)
    {
      switch(v28)
      {
        case ' ':
        case '\'':
          v35 = v29 + a2;
          *(_BYTE *)(v35 + 60) = *(_BYTE *)(v26 + 57) & 0xF;
          *(_BYTE *)(v35 + 62) = (*(_BYTE *)(v26 + 57) >> 4) & 3;
          break;
        case '!':
        case '"':
        case '#':
        case '$':
        case '&':
          break;
        case '%':
        case '(':
          goto LABEL_59;
        default:
          if (v28 == 21)
          {
            if (a3[1].i32[1] & 0x1000 | (unsigned __int16)a4 & 0x200
              && (((unsigned __int16)a4 & 0x100) != 0
               || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 400))(a1)))
            {
              LOBYTE(v28) = 29;
            }
            else
            {
              LOBYTE(v28) = 21;
            }
          }
          else if (v28 == 22)
          {
LABEL_59:
            v39 = v29 + a2;
            *(_BYTE *)(v39 + 60) = *(_BYTE *)(v26 + 57) & 0xF;
            *(_BYTE *)(v39 + 62) = (*(_BYTE *)(v26 + 57) >> 4) & 3;
            v40 = (*(_WORD *)(v26 + 58) & 7) - 2;
            if (v40 > 4)
            {
              v42 = 0.0;
              v41.i32[0] = 0.5;
            }
            else
            {
              v41.i32[0] = dword_184751E40[v40];
              v42 = flt_184751E54[v40];
            }
            v50 = v94->f32[1];
            v51 = v94->f32[3];
            v52 = v29 + 16 * a2;
            *(float *)(v52 + 76) = v42;
            v53 = (float *)(v52 + 76);
            *(v53 - 1) = v41.f32[0];
            v54 = (float32x2_t *)(v53 - 1);
            v55 = *(_WORD *)(v26 + 58);
            if ((v55 & 0x40) != 0)
            {
              v41.f32[0] = v41.f32[0] * 0.5;
              v54->i32[0] = v41.i32[0];
              v55 = *(_WORD *)(v26 + 58);
            }
            if ((v55 & 0x80) != 0)
            {
              v42 = v42 * 0.5;
              *v53 = v42;
            }
            if (v50 > v51)
            {
              v42 = -v42;
              *v53 = v42;
            }
            v56 = (float *)(v29 + 16 * a2 + 64);
            v57 = *(unsigned __int16 *)(v26 + 58);
            if ((v57 & 0x100) != 0)
            {
              *v56 = 1.0;
              v41.f32[1] = v42;
              *v54 = vdiv_f32(v41, vcvt_f32_u32(vshl_u32(a3[2], (uint32x2_t)vneg_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v57), (uint32x2_t)0xFFFFFFF9FFFFFFFALL), (int8x8_t)0x100000001)))));
              v58 = 1.0;
            }
            else
            {
              v58 = 0.5;
              if ((v57 & 0x40) != 0)
                v59 = 0.5;
              else
                v59 = 1.0;
              *v56 = v59;
              if ((*(_WORD *)(v26 + 58) & 0x80) == 0)
                v58 = 1.0;
            }
            *(float *)(v29 + 16 * a2 + 68) = v58;
          }
          break;
      }
LABEL_85:
      if ((*((_WORD *)v27 + 29) & 0x800) != 0)
      {
        if ((*((_WORD *)v27 + 29) & 0x100) != 0)
        {
          *(float32x2_t *)v66.f32 = vcvt_f32_u32(a3[2]);
          __asm { FMOV            V1.2S, #1.0 }
          _D8 = vdiv_f32(_D1, *(float32x2_t *)v66.f32);
          v66.i64[1] = v66.i64[0];
          *v94 = vmulq_f32(*v94, v66);
        }
        else
        {
          __asm { FMOV            V8.2S, #1.0 }
        }
        v60 = *(_QWORD *)(a1 + 16);
        *(_BYTE *)(v60 + 304) |= 1 << a2;
      }
      else
      {
        v60 = *(_QWORD *)(a1 + 16);
        __asm { FMOV            V8.2S, #1.0 }
      }
      v68 = (float32x2_t *)(v60 + 16 * a2);
      v69 = vcvt_f32_u32(a3[2]);
      __asm { FMOV            V1.2S, #1.0 }
      v68[40] = v69;
      v68[41] = vdiv_f32(_D1, v69);
      v71 = (*(float (**)(uint32x2_t *))(*(_QWORD *)a3 + 152))(a3);
      v72 = *(_BYTE **)(a1 + 16);
      if (v71 != 1.0)
      {
        *(float *)&v72[4 * a2 + 312] = 1.0 / v71;
        v72[305] |= 1 << a2;
        if (((*(uint64_t (**)(uint32x2_t *))(*(_QWORD *)a3 + 160))(a3) & 1) != 0)
        {
          v72 = *(_BYTE **)(a1 + 16);
          if (*(float *)(a1 + 152) != 1.0)
            v72[306] |= 1 << a2;
        }
        else
        {
          v72 = *(_BYTE **)(a1 + 16);
        }
        v25 = a3;
      }
      if ((*((_WORD *)v27 + 29) & 0x20) != 0)
        v72[307] |= 1 << a2;
      v72[a2 + 17] = v28;
      v73 = *(_QWORD *)(a1 + 16) + 16 * a2;
      *(float32x2_t *)(v73 + 96) = _D8;
      *(_QWORD *)(v73 + 104) = 0;
      if ((v31 & 1) != 0)
        goto LABEL_122;
LABEL_100:
      v74 = (uint64_t)v25[6];
      if (v74)
      {
        if ((*(_BYTE *)(a1 + 416) & 0x80) == 0)
        {
          v75 = v25[1].u32[1];
          if ((v75 & 0x80000) == 0 && (!v92 || !*((_BYTE *)v92 + 340)))
          {
            if ((CA::OGL::Context::lookup_color_program(CGColorSpace *,BOOL,BOOL)::initialized & 1) == 0)
            {
              keyExistsAndHasValidFormat[0] = 0;
              AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("CADisableColorMatching"), (CFStringRef)*MEMORY[0x1E0C9B248], keyExistsAndHasValidFormat);
              if (keyExistsAndHasValidFormat[0])
                CA::OGL::Context::lookup_color_program(CGColorSpace *,BOOL,BOOL)::disable_colormatch = AppBooleanValue != 0;
              v77 = getenv("CA_DISABLE_COLOR_MATCHING");
              if (v77)
                CA::OGL::Context::lookup_color_program(CGColorSpace *,BOOL,BOOL)::disable_colormatch = atoi(v77) != 0;
              CA::OGL::Context::lookup_color_program(CGColorSpace *,BOOL,BOOL)::initialized = 1;
            }
            if (!CA::OGL::Context::lookup_color_program(CGColorSpace *,BOOL,BOOL)::disable_colormatch
              && (*(_BYTE *)(a1 + 488) & 1) == 0)
            {
              v78 = CA::OGL::Context::color_program_cache((CA::OGL::Context *)a1);
              v79 = *(_QWORD *)(a1 + 200);
              if (v79)
              {
                v80 = v79 + 352;
                if ((CACGColorSpaceIsRec709(v74) & 1) == 0)
                  goto LABEL_130;
                if (*(_BYTE *)(v79 + 404))
                {
                  v81 = 19;
LABEL_129:
                  v74 = CAGetColorSpace(v81);
LABEL_130:
                  if (v74 == CAGetColorSpace(9u))
                    v85 = 1;
                  else
                    v85 = CGColorSpaceEqualToColorSpaceIgnoringRange();
                  if (v85 && v80 && !*(_BYTE *)(v80 + 54))
                    v74 = CAGetColorSpace(0x1Fu);
                  if ((CACGColorSpaceIsRec601NTSC(v74) & 1) != 0 || CACGColorSpaceIsRec601PAL(v74))
                  {
                    if (v80 && *(_BYTE *)(v80 + 52) && *(_BYTE *)(v80 + 54))
                    {
                      if (CACGColorSpaceIsRec601NTSC(v74))
                        v86 = 24;
                      else
                        v86 = 25;
                      v74 = CAGetColorSpace(v86);
                      goto LABEL_148;
                    }
                    v74 = CAGetColorSpace(0x1Du);
                  }
                  if (!v80)
                  {
                    v87 = (v75 >> 12) & 1;
                    v88 = (uint64_t)v78;
                    v89 = (CGColorSpace *)v74;
                    v90 = 0;
                    goto LABEL_150;
                  }
LABEL_148:
                  v87 = (v75 >> 12) & 1;
                  *((_BYTE *)v78 + 63) = *(_BYTE *)(v80 + 54);
                  v88 = (uint64_t)v78;
                  v89 = (CGColorSpace *)v74;
                  v90 = v80;
LABEL_150:
                  v91 = CA::ColorProgram::Cache::lookup(v88, v89, v87, v90);
                  CA::OGL::Context::color_program(a1, v23, (uint64_t)v91);
                  if (v92 && v91)
                    *((_BYTE *)v92 + 495) = 1;
                  goto LABEL_122;
                }
              }
              else
              {
                v80 = 0;
                if ((CACGColorSpaceIsRec709(v74) & 1) == 0)
                  goto LABEL_130;
              }
              v81 = 29;
              goto LABEL_129;
            }
            CA::OGL::Context::color_program(a1, v23, 0);
          }
        }
      }
LABEL_122:
      *((_DWORD *)v27 + 5) = *(_DWORD *)(a1 + 212);
      if (((unsigned __int16)a4 & 0x400) != 0)
      {
        *(float32x2_t *)v82.f32 = v97;
        *(float32x2_t *)v83.f32 = vsub_f32(v98, v97);
        v83.i64[1] = v83.i64[0];
        *(float32x2_t *)&v82.u32[2] = v97;
        *a10 = vmlaq_f32(v82, *a10, v83);
      }
      return v27;
    }
    if (v28 <= 2)
    {
      if (v28)
      {
        if (v28 != 1)
        {
          if (v28 != 2)
            goto LABEL_85;
          goto LABEL_47;
        }
        goto LABEL_39;
      }
LABEL_47:
      if ((*(unsigned int (**)(uint32x2_t *))(*(_QWORD *)a3 + 136))(a3) <= 3
        && a3[1].i32[1] & 0x1000 | (unsigned __int16)a4 & 0x200
        && (((unsigned __int16)a4 & 0x100) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 400))(a1)))
      {
        if (v28 == 2)
          v38 = 3;
        else
          v38 = 5;
        if (v28)
          LOBYTE(v28) = v38;
        else
          LOBYTE(v28) = 1;
      }
      goto LABEL_85;
    }
    if (v28 != 3)
    {
      if (v28 == 4)
        goto LABEL_47;
      if (v28 != 5)
        goto LABEL_85;
    }
LABEL_39:
    if (((unsigned __int16)a4 & 0x100) == 0)
    {
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 400))(a1);
      if (v28 == 3)
        v37 = 2;
      else
        v37 = 4;
      if (v28 == 1)
        v37 = 0;
      if ((v36 & 1) == 0)
        LOBYTE(v28) = v37;
    }
    goto LABEL_85;
  }
  return v27;
}

CA::OGL::Context *CA::OGL::wait_image(CA::OGL::Context *this, CA::Render::Texture *a2, CA::Render::Image *a3)
{
  CA::OGL::Context *v3;
  CA::OGL::Context *v4;

  v3 = this;
  if (*((CA::OGL::Context **)a2 + 11) == this && (v4 = (CA::OGL::Context *)*((_QWORD *)a2 + 10)) != 0
    || (this = (CA::OGL::Context *)CA::OGL::Context::lookup_image_(this, a2, 0), (v4 = this) != 0))
  {
    if (*((_DWORD *)v4 + 5) > *((_DWORD *)v3 + 54))
      return (CA::OGL::Context *)(*(uint64_t (**)(CA::OGL::Context *, CA::OGL::Context *, uint64_t))(*(_QWORD *)v3 + 640))(v3, v4, 1);
  }
  return this;
}

uint64_t CA::OGL::Context::tile_cache(CA::OGL::Context *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 48);
  if (!v1)
  {
    v1 = operator new();
    *(_QWORD *)v1 = this;
    *(_QWORD *)(v1 + 8) = CA::OGL::wait_image;
    *(_QWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 32) = 0x7FF0000000000000;
    *(_DWORD *)(v1 + 40) = 0;
    *(_QWORD *)(v1 + 16) = x_hash_table_new_(0, 0, 0, 0, 0, 0);
    CA::Render::add_observer(3u, 0, (uint64_t)CA::Render::TileCache::image_deleted, v1, 0);
    *((_QWORD *)this + 48) = v1;
  }
  return v1;
}

_QWORD *CA::OGL::Context::add_buffered_image(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  malloc_zone_t *malloc_zone;

  if ((*(_WORD *)(a2 + 58) & 0x200) == 0)
  {
    v3 = result;
    v4 = result[40];
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    result = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
    *result = a2;
    result[1] = v4;
    v3[40] = result;
    *(_WORD *)(a2 + 58) |= 0x200u;
  }
  return result;
}

void CA::OGL::Context::add_transient_render_texture(CA::OGL::Context *this, uint64_t a2, const CA::Render::Object *a3, CA::Render::Texture *a4)
{
  CA::Render::Texture *v4;
  char **v8;
  char *i;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  unsigned int v30;
  unsigned int v31;

  if (!a2)
    goto LABEL_37;
  v4 = a4;
  if (!a4)
    goto LABEL_37;
  v8 = (char **)*((_QWORD *)this + 43);
  if (!v8)
  {
    v8 = (char **)operator new();
    v8[1] = 0;
    v8[2] = 0;
    *v8 = 0;
    *((_QWORD *)this + 43) = v8;
    goto LABEL_10;
  }
  for (i = *v8; ; i += 32)
  {
    if (i == v8[1])
      goto LABEL_10;
    if (*(_QWORD *)i == a2)
      break;
  }
  if (*((_QWORD *)i + 2))
LABEL_37:
    __assert_rtn("add_transient_render_texture", "ogl-context.cpp", 2464, "key && img && !lookup_transient_render_texture (key, false)");
LABEL_10:
  if (a3)
  {
    v10 = (unsigned int *)((char *)a3 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    if (!v11)
    {
      a3 = 0;
      do
        v31 = __ldaxr(v10);
      while (__stlxr(v31 - 1, v10));
    }
  }
  v12 = (unsigned int *)((char *)v4 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  if (!v13)
  {
    v4 = 0;
    do
      v30 = __ldaxr(v12);
    while (__stlxr(v30 - 1, v12));
  }
  v14 = (unint64_t)v8[1];
  v15 = (unint64_t)v8[2];
  if (v14 < v15)
  {
    *(_QWORD *)v14 = a2;
    *(_QWORD *)(v14 + 8) = a3;
    *(_QWORD *)(v14 + 16) = v4;
    *(_DWORD *)(v14 + 24) = 262148;
    v16 = (char *)(v14 + 32);
    goto LABEL_34;
  }
  v17 = *v8;
  v18 = (uint64_t)(v14 - (_QWORD)*v8) >> 5;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 59)
    abort();
  v20 = v15 - (_QWORD)v17;
  if (v20 >> 4 > v19)
    v19 = v20 >> 4;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0)
    v21 = 0x7FFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21 >> 59)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v22 = (char *)operator new(32 * v21);
  v23 = &v22[32 * v18];
  v24 = &v22[32 * v21];
  *(_QWORD *)v23 = a2;
  *((_QWORD *)v23 + 1) = a3;
  *((_QWORD *)v23 + 2) = v4;
  *((_DWORD *)v23 + 6) = 262148;
  v16 = v23 + 32;
  v25 = v8[1];
  if (v25 == v17)
  {
    *v8 = v23;
    v8[1] = v16;
    v8[2] = v24;
    if (!v17)
      goto LABEL_34;
    goto LABEL_33;
  }
  v26 = 0;
  do
  {
    v27 = &v23[v26];
    v28 = &v25[v26];
    *((_QWORD *)v27 - 4) = *(_QWORD *)&v25[v26 - 32];
    *(_OWORD *)(v27 - 24) = *(_OWORD *)&v25[v26 - 24];
    *((_QWORD *)v28 - 3) = 0;
    *((_QWORD *)v28 - 2) = 0;
    *((_DWORD *)v27 - 2) = *(_DWORD *)&v25[v26 - 8];
    v26 -= 32;
  }
  while (&v25[v26] != v17);
  v29 = *v8;
  v17 = v8[1];
  *v8 = &v23[v26];
  v8[1] = v16;
  v8[2] = v24;
  if (v17 != v29)
  {
    do
    {
      v17 -= 32;
      std::__destroy_at[abi:nn180100]<CA::OGL::TransientRenderTexture,0>((uint64_t)v17);
    }
    while (v17 != v29);
    v17 = v29;
  }
  if (v17)
LABEL_33:
    operator delete(v17);
LABEL_34:
  v8[1] = v16;
}

double CA::OGL::Context::reset_statistics(CA::OGL::Context *this)
{
  double result;

  *((_DWORD *)this + 172) = 0;
  x_hash_table_remove_all(*((_QWORD **)this + 34));
  *((_QWORD *)this + 35) = 0;
  *((_DWORD *)this + 173) = *((_QWORD *)this + 31) == *((_QWORD *)this + 32);
  result = 0.0;
  *((_QWORD *)this + 87) = 0;
  *((_DWORD *)this + 176) = 0;
  *((_QWORD *)this + 89) = 0;
  *((_WORD *)this + 408) &= 0xFC7Fu;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *((_DWORD *)this + 198) = 0;
  return result;
}

void CA::WindowServer::MemorySurface::~MemorySurface(CA::WindowServer::MemorySurface *this)
{
  void (*v2)(_QWORD, _QWORD);

  *(_QWORD *)this = off_1E158DA68;
  v2 = (void (*)(_QWORD, _QWORD))*((_QWORD *)this + 32);
  if (v2)
    v2(*((_QWORD *)this + 30), *((_QWORD *)this + 33));
  CA::WindowServer::Surface::~Surface(this);
}

{
  void (*v2)(_QWORD, _QWORD);
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E158DA68;
  v2 = (void (*)(_QWORD, _QWORD))*((_QWORD *)this + 32);
  if (v2)
    v2(*((_QWORD *)this + 30), *((_QWORD *)this + 33));
  CA::WindowServer::Surface::~Surface(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::WindowServer::Surface::cache_mode(CA::WindowServer::Surface *this)
{
  return 0;
}

uint64_t CA::WindowServer::Surface::ycbcr_matrix(CA::WindowServer::Surface *this)
{
  return 0;
}

uint64_t CA::WindowServer::Surface::transfer_function(CA::WindowServer::Surface *this)
{
  return 0;
}

uint64_t CA::WindowServer::Surface::color_primaries(CA::WindowServer::Surface *this)
{
  return 1;
}

uint64_t CA::WindowServer::Surface::is_linear(CA::WindowServer::Surface *this)
{
  return 0;
}

uint64_t CA::WindowServer::Surface::colorspace(CA::WindowServer::Surface *this)
{
  return 0;
}

BOOL CA::WindowServer::Surface::is_fp16(CA::WindowServer::Surface *this)
{
  int v1;

  v1 = *((_DWORD *)this + 16);
  return v1 == 1380411457 || v1 == 642934849;
}

uint64_t CA::WindowServer::MemorySurface::lock(CA::WindowServer::MemorySurface *this, unsigned __int8 **a2, unint64_t *a3)
{
  unint64_t v3;

  v3 = *((_QWORD *)this + 31);
  *a2 = (unsigned __int8 *)*((_QWORD *)this + 30);
  *a3 = v3;
  return 1;
}

BOOL CA::WindowServer::MemorySurface::check_alignment(CA::WindowServer::MemorySurface *this, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_QWORD *)this + 31);
  v4 = v3 % a3;
  v5 = v3 & (a3 - 1);
  if ((a3 & (a3 - 1)) != 0)
    v5 = v4;
  return v5 == 0;
}

uint64_t CA::WindowServer::Surface::iosurface(CA::WindowServer::Surface *this)
{
  return 0;
}

uint64_t CA::WindowServer::Surface::clear_iosurface(CA::WindowServer::Surface *this, CA::WindowServer::Surface *a2, unsigned int a3, CA::Rect *a4)
{
  return 0;
}

uint64_t CA::WindowServer::Surface::copy_iosurface()
{
  return 0;
}

uint64_t CA::WindowServer::Surface::id(CA::WindowServer::Surface *this)
{
  return 0;
}

float CA::WindowServer::Surface::edr_factor(CA::WindowServer::Surface *this)
{
  return 1.0;
}

uint64_t CA::WindowServer::Surface::protection_options(CA::WindowServer::Surface *this)
{
  return 0;
}

uint64_t CA::WindowServer::`anonymous namespace'::release_shmem(CA::WindowServer::_anonymous_namespace_ *this, unsigned int *a2, void *a3)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;

  v3 = a2 + 2;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (!v5)
    return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a2 + 16))(a2);
  return result;
}

CA::Render::Texture *CA::Render::Image::copy_subimage(CA::Render::Image *this, unsigned int a2, const CA::Bounds *a3, unint64_t a4, int a5)
{
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  CA::Render::Texture *result;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  CGColorSpace *v27;
  unint64_t v28;
  CA::Render *v29;
  CGColorSpace *v30;
  void (*v31)(const void *, void *);
  void *v32;
  malloc_zone_t *malloc_zone;
  CA::Render::Image **v34;
  CA::Render::Image **v35;
  unsigned int *v36;
  unsigned int v37;
  malloc_zone_t *v38;
  void *v39;
  void (*v40)(const void *, void *);
  unint64_t v41;
  unint64_t v42[2];

  v42[1] = *MEMORY[0x1E0C80C00];
  if (*((unsigned __int8 *)this + 153) <= a2)
    return 0;
  v8 = *(_DWORD *)a3;
  v7 = *((_DWORD *)a3 + 1);
  v9 = *((_DWORD *)this + 5);
  if (*((_DWORD *)this + 4) >> a2 <= 1u)
    v10 = 1;
  else
    v10 = *((_DWORD *)this + 4) >> a2;
  v11 = v9 >> a2;
  if (v9 >> a2 <= 1)
    v11 = 1;
  if (v10 <= v8 || v11 <= v7)
    return 0;
  v13 = *((_DWORD *)a3 + 3);
  v14 = *((_DWORD *)a3 + 2) + v8 <= v10 ? *((_DWORD *)a3 + 2) : v10 - v8;
  v15 = (int)(v13 + v7) <= v11 ? v13 : (v11 - v7);
  if (!v14 || (_DWORD)v15 == 0)
    return 0;
  v18 = v11 - v7 - v15;
  if (a5)
    v19 = v18;
  else
    v19 = *((_DWORD *)a3 + 1);
  v20 = *((_QWORD *)this + a2 + 20);
  v42[0] = v20;
  v21 = *((unsigned __int8 *)this + 152);
  if (v21 > 0x25)
    v22 = 0;
  else
    v22 = dword_184750480[v21];
  v23 = 0;
  if (a2)
  {
    v24 = a2;
    v25 = (uint64_t *)((char *)this + 160);
    do
    {
      v26 = *v25++;
      v23 += v26 * v9;
      if (v9 <= 1)
        v9 = 1;
      else
        v9 >>= 1;
      --v24;
    }
    while (v24);
  }
  v27 = (CGColorSpace *)(*((_QWORD *)this + 12) + v23 + v20 * v19 + v22 * v8);
  if (!a4 || v20 <= a4)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v34 = (CA::Render::Image **)malloc_type_zone_malloc(malloc_zone, 0x18uLL, 0x8BB15036uLL);
    if (!v34)
      return CA::Render::Image::new_image((CA::Render::Image *)*((unsigned __int8 *)this + 152), v14, v15, 1u, *((CGColorSpace **)this + 6), v27, v42, (const unint64_t *)CA::Render::Image::SubimageInfo::release, 0, v39);
    v35 = v34;
    *v34 = this;
    *((_DWORD *)v34 + 2) = a2;
    *((_DWORD *)v34 + 3) = v8;
    v36 = (unsigned int *)((char *)this + 148);
    *((_DWORD *)v34 + 4) = v19;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
    result = CA::Render::Image::new_image((CA::Render::Image *)*((unsigned __int8 *)this + 152), v14, v15, 1u, *((CGColorSpace **)this + 6), v27, v42, (const unint64_t *)CA::Render::Image::SubimageInfo::release, (void (*)(const void *, void *))v34, v39);
    if (result)
      return result;
    CA::Render::Image::release_data(*v35);
    v38 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v38, v35);
    return 0;
  }
  v28 = CA::Render::format_rowbytes((CA::Render *)v21, v14);
  v40 = 0;
  v41 = v28;
  if (is_mul_ok(v28, v15))
    v29 = (CA::Render *)(v28 * v15);
  else
    v29 = 0;
  result = (CA::Render::Texture *)CA::Render::aligned_malloc(v29, (unint64_t *)&v40, 0);
  if (result)
  {
    v30 = result;
    CGBlt_copyBytes();
    v31 = v40;
    MEMORY[0x186DBEA7C](*MEMORY[0x1E0C83DA0], v30, v40, 1, 1);
    result = CA::Render::Image::new_image((CA::Render::Image *)*((unsigned __int8 *)this + 152), v14, v15, 1u, *((CGColorSpace **)this + 6), v30, &v41, (const unint64_t *)CA::Render::aligned_free, v31, v39);
    if (result)
    {
      *((_DWORD *)result + 3) |= 0x800000u;
      return result;
    }
    CA::Render::aligned_free(v30, (size_t)v31, v32);
    return 0;
  }
  return result;
}

void CA::Render::Image::SubimageInfo::release(CA::Render::Image::SubimageInfo *this, CA::Render::Image **a2, void *a3)
{
  malloc_zone_t *malloc_zone;

  if (a2)
  {
    CA::Render::Image::release_data(*a2);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, a2);
  }
}

uint64_t CA::Render::Image::SubimageKey::hash(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(int *)(a1 + 28);
  if (v1)
    return 33
         * (33
          * (33 * (33 * (33 * (33 * *(_QWORD *)a1 + *(int *)(a1 + 16)) + *(int *)(a1 + 20)) + *(int *)(a1 + 24)) + v2)
          + *(unsigned int *)(a1 + 32))
         + v1;
  else
    return 33
         * (33 * (33 * (33 * (33 * *(_QWORD *)a1 + *(int *)(a1 + 16)) + *(int *)(a1 + 20)) + *(int *)(a1 + 24)) + v2)
         + *(unsigned int *)(a1 + 32);
}

BOOL CA::Render::Image::SubimageKey::compare(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 != *(_QWORD *)a2
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)
      || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)
      || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)
      || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)
      || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)
      || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8);
}

uint64_t CA::Render::Image::SubimageKey::delete_images(_QWORD *a1, unsigned int *a2, uint64_t a3)
{
  malloc_zone_t *malloc_zone;
  unsigned int *v7;
  unsigned int v8;

  if (*a1 != a3)
    return 0;
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, a1);
  if (a2)
  {
    v7 = a2 + 2;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (v8 == 1)
      (*(void (**)(unsigned int *))(*(_QWORD *)a2 + 16))(a2);
  }
  return 1;
}

uint64_t CA::Render::Image::collect_subimages_(double *a1, unsigned int *a2, double *a3)
{
  double v3;
  uint64_t result;
  malloc_zone_t *malloc_zone;
  unsigned int *v8;
  unsigned int v9;

  v3 = a1[5];
  if (*a3 >= v3)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, a1);
    if (a2)
    {
      v8 = a2 + 2;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (v9 == 1)
        (*(void (**)(unsigned int *))(*(_QWORD *)a2 + 16))(a2);
    }
    return 1;
  }
  else
  {
    result = 0;
    if (v3 < *(double *)&CA::Render::Image::_subimage_deadline)
      CA::Render::Image::_subimage_deadline = *(_QWORD *)&v3;
  }
  return result;
}

void CA::CG::AccelDataProvider::set_image(CA::CG::AccelDataProvider *this, CGImage *a2)
{
  int *v3;

  *((_DWORD *)this + 10) = CGImageGetIdentifier();
  os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::AccelDataProvider::_table_lock);
  v3 = (int *)CA::CG::AccelDataProvider::_table;
  if (!CA::CG::AccelDataProvider::_table)
  {
    v3 = (int *)x_hash_table_new_((unint64_t (*)(uint64_t))CA::CG::identifier_hash, 0, 0, 0, 0, 0);
    CA::CG::AccelDataProvider::_table = (uint64_t)v3;
  }
  hash_table_modify(v3, *((unsigned int *)this + 10), (uint64_t)this, 0);
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelDataProvider::_table_lock);
}

uint64_t CA::CG::identifier_hash(uint64_t this)
{
  return this;
}

void (***CA::CG::AccelDataProvider::retain_texture(CA::CG::Renderer &)::$_0::__invoke(void (***result)(_QWORD)))(_QWORD)
{
  void (***v1)(_QWORD);
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = result;
  v2 = (unsigned int *)(result + 1);
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    (**result)(result);
    return (void (***)(_QWORD))((uint64_t (*)(_QWORD))(*v1)[2])(v1);
  }
  return result;
}

uint64_t CA::CG::AccelDataProvider::AccelDataProvider(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  malloc_zone_t *malloc_zone;
  _QWORD *v9;

  *(_QWORD *)a1 = &unk_1E1592838;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 1;
  v5 = (unsigned int *)(a1 + 12);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = a3;
  *(_BYTE *)(a1 + 48) = 0;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 12));
  v7 = *(_QWORD *)(a2 + 88);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v9 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
  *v9 = a1;
  v9[1] = v7;
  *(_QWORD *)(a2 + 88) = v9;
  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 12));
  return a1;
}

void CA::CG::AccelDataProvider::~AccelDataProvider(CA::CG::AccelDataProvider *this, uint64_t a2, void *a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  CA::Render *v8;

  *(_QWORD *)this = &unk_1E1592838;
  if (*((_DWORD *)this + 10))
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::AccelDataProvider::_table_lock);
    x_hash_table_remove(CA::CG::AccelDataProvider::_table, *((unsigned int *)this + 10));
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelDataProvider::_table_lock);
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 12));
    *(_QWORD *)(v4 + 88) = x_list_remove(*(_QWORD **)(v4 + 88), (uint64_t)this);
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 12));
    v5 = (unsigned int *)((char *)this + 12);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(CA::CG::AccelDataProvider *))(*(_QWORD *)this + 16))(this);
  }
  v8 = (CA::Render *)*((_QWORD *)this + 3);
  if (v8)
    CA::Render::aligned_free(v8, *((_QWORD *)this + 4), a3);
}

void CA::CG::AccelDataProvider::detach(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;

  v2 = this + 2;
  os_unfair_lock_lock(this + 2);
  if (*(_QWORD *)&this[4]._os_unfair_lock_opaque)
  {
    (**(void (***)(os_unfair_lock_s *))&this->_os_unfair_lock_opaque)(this);
    *(_QWORD *)&this[4]._os_unfair_lock_opaque = 0;
  }
  os_unfair_lock_unlock(v2);
}

uint64_t CA::CG::AccelDataProvider::get_byte_pointer(os_unfair_lock_s *this, void *a2)
{
  os_unfair_lock_s *v3;
  uint64_t v4;

  v3 = this + 2;
  os_unfair_lock_lock(this + 2);
  (**(void (***)(os_unfair_lock_s *))&this->_os_unfair_lock_opaque)(this);
  v4 = *(_QWORD *)&this[6]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v3);
  return v4;
}

unsigned int *CA::CG::AccelDataProvider::release_info(unsigned int *this, void *a2)
{
  unsigned int *v2;
  unsigned int v3;

  *((_BYTE *)this + 48) = 1;
  v2 = this + 3;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - 1, v2));
  if (this)
  {
    if (v3 == 1)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 16))(this);
  }
  return this;
}

void CA::Render::memory_warning(CA::Render *this, void *a2)
{
  uint64_t v2;

  v2 = mach_absolute_time();
  CA::Render::last_memory_warning = CATimeWithHostTime(v2);
  CA::Render::collect((CA::Render *)1, *(double *)&CA::Render::last_memory_warning);
  CA::Render::post_notification(0x31u, 0, 0, 0);
}

void CA::Render::remove_observer(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v8;
  __int128 *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  malloc_zone_t *malloc_zone;
  uint64_t v17;
  int64x2_t *v18;
  _QWORD *v19;

  if (a1 <= 0x49)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::notification_lock);
    if ((CA::Render::initialize_notifications(void)::initialized & 1) == 0)
    {
      v17 = 0;
      v18 = (int64x2_t *)CA::Render::notifications;
      do
      {
        v19 = &CA::Render::notifications_map_data[v17];
        *(_OWORD *)v19 = 0uLL;
        *((_OWORD *)v19 + 1) = 0uLL;
        *((_DWORD *)v19 + 8) = 1065353216;
        *v18 = vdupq_n_s64((unint64_t)v18);
        ++v18;
        v17 += 5;
      }
      while (v17 != 370);
      CA::Render::initialize_notifications(void)::initialized = 1;
    }
    v8 = &CA::Render::notifications[a1];
    v9 = (__int128 *)*((_QWORD *)v8 + 1);
    if (v9 == v8)
    {
LABEL_9:
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::notification_lock);
    }
    else
    {
      while (a2 && *((_QWORD *)v9 + 6) != a2 || *((_QWORD *)v9 + 5) != a3 || *((_QWORD *)v9 + 7) != a4)
      {
        v9 = (__int128 *)*((_QWORD *)v9 + 1);
        if (v9 == v8)
          goto LABEL_9;
      }
      v11 = *(_QWORD *)v9;
      v10 = (_QWORD *)*((_QWORD *)v9 + 1);
      *(_QWORD *)(v11 + 8) = v10;
      *v10 = v11;
      *(_QWORD *)v9 = v9;
      *((_QWORD *)v9 + 1) = v9;
      v12 = *((_QWORD *)v9 + 2);
      v13 = (_QWORD *)*((_QWORD *)v9 + 3);
      *(_QWORD *)(v12 + 8) = v13;
      *v13 = v12;
      *((_QWORD *)v9 + 2) = v9 + 1;
      *((_QWORD *)v9 + 3) = v9 + 1;
      v14 = *((_QWORD *)v9 + 6);
      if (v14)
      {
        v15 = std::__hash_table<std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::__unordered_map_hasher<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::hash<CA::Render::Object *>,std::equal_to<CA::Render::Object *>,true>,std::__unordered_map_equal<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::equal_to<CA::Render::Object *>,std::hash<CA::Render::Object *>,true>,std::allocator<std::__hash_value_type<CA::Render::Object *,x_link_struct>>>::find<CA::Render::Object *>(&CA::Render::notifications_map_data[5 * a1], v14);
        if (v15)
        {
          if ((_QWORD *)v15[4] == v15 + 3)
            std::__hash_table<std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::__unordered_map_hasher<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::hash<CA::Render::Object *>,std::equal_to<CA::Render::Object *>,true>,std::__unordered_map_equal<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::equal_to<CA::Render::Object *>,std::hash<CA::Render::Object *>,true>,std::allocator<std::__hash_value_type<CA::Render::Object *,x_link_struct>>>::erase(&CA::Render::notifications_map_data[5 * a1], v15);
        }
      }
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::notification_lock);
      dispatch_semaphore_wait(*((dispatch_semaphore_t *)v9 + 8), 0xFFFFFFFFFFFFFFFFLL);
      dispatch_semaphore_signal(*((dispatch_semaphore_t *)v9 + 8));
      dispatch_release(*((dispatch_object_t *)v9 + 8));
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(malloc_zone, v9);
    }
  }
}

float CA::HalfFloat::to_float(CA::HalfFloat *this)
{
  unsigned int v1;
  float result;

  v1 = (this >> 10) & 0x1F;
  if (v1 && v1 != 31)
  {
    v1 = (v1 << 23) + 939524096;
  }
  else if (v1 == 31)
  {
    v1 = 2139095040;
  }
  LODWORD(result) = ((_DWORD)this << 16) & 0x80000000 | (this >> 7) & 7 | (8
                                                                                       * ((unsigned __int16)this & 0x3FF)) & 0x1FFF | (((unsigned __int16)this & 0x3FF) << 13) | v1;
  return result;
}

void CA::Render::ShapeLayer::show(CA::Render::ShapeLayer *this, int a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  NSObject *v20;
  uint32_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  NSObject *v27;
  double v28;
  NSObject *v29;
  double v30;
  NSObject *v31;
  double v32;
  NSObject *v33;
  double v34;
  NSObject *v35;
  double v36;
  NSObject *v37;
  NSObject *v38;
  NSObject *v39;
  NSObject *v40;
  const char *v41;
  NSObject *v42;
  const char *v43;
  NSObject *v44;
  const char *v45;
  uint64_t v46;
  _BOOL4 v47;
  uint8_t buf[4];
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  double v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if ((a3 & 1) == 0)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v6 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v6, OS_LOG_TYPE_DEFAULT, "(shape-layer", buf, 2u);
      }
    }
    if (*((_QWORD *)this + 2))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2), (a2 + 1), a3);
    }
    if (*((_QWORD *)this + 5))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v7 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_DEFAULT, "(fillColor ", buf, 2u);
        }
      }
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5), (a2 + 1), a3);
      if (x_log_hook_p())
      {
LABEL_17:
        x_log_();
        goto LABEL_23;
      }
      v8 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v9 = ")";
        v10 = v8;
        v11 = 2;
LABEL_22:
        _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_DEFAULT, v9, buf, v11);
      }
    }
    else
    {
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(*(float32x4_t *)((char *)this + 24))))) & 1) == 0)
        goto LABEL_23;
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
        goto LABEL_17;
      v12 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *((float *)this + 6);
        v14 = *((float *)this + 7);
        v15 = *((float *)this + 8);
        v16 = *((float *)this + 9);
        *(_DWORD *)buf = 134218752;
        v49 = v13;
        v50 = 2048;
        v51 = v14;
        v52 = 2048;
        v53 = v15;
        v54 = 2048;
        v55 = v16;
        v9 = "(fillColor %.3g %.3g %.3g %.3g)";
        v10 = v12;
        v11 = 42;
        goto LABEL_22;
      }
    }
LABEL_23:
    if (*((_QWORD *)this + 8))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v17 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v17, OS_LOG_TYPE_DEFAULT, "(strokeColor ", buf, 2u);
        }
      }
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), (a2 + 1), a3);
      if (x_log_hook_p())
      {
LABEL_32:
        x_log_();
        goto LABEL_38;
      }
      v18 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v19 = ")";
        v20 = v18;
        v21 = 2;
LABEL_37:
        _os_log_impl(&dword_184457000, v20, OS_LOG_TYPE_DEFAULT, v19, buf, v21);
      }
    }
    else
    {
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(*((float32x4_t *)this + 3))))) & 1) == 0)
        goto LABEL_38;
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
        goto LABEL_32;
      v22 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v23 = *((float *)this + 12);
        v24 = *((float *)this + 13);
        v25 = *((float *)this + 14);
        v26 = *((float *)this + 15);
        *(_DWORD *)buf = 134218752;
        v49 = v23;
        v50 = 2048;
        v51 = v24;
        v52 = 2048;
        v53 = v25;
        v54 = 2048;
        v55 = v26;
        v19 = "(strokeColor %.3g %.3g %.3g %.3g)";
        v20 = v22;
        v21 = 42;
        goto LABEL_37;
      }
    }
LABEL_38:
    if (*((double *)this + 9) != 0.0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v27 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v28 = *((double *)this + 9);
          *(_DWORD *)buf = 134217984;
          v49 = v28;
          _os_log_impl(&dword_184457000, v27, OS_LOG_TYPE_DEFAULT, "(strokeStart %g)", buf, 0xCu);
        }
      }
    }
    if (*((double *)this + 10) != 0.0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v29 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v30 = *((double *)this + 10);
          *(_DWORD *)buf = 134217984;
          v49 = v30;
          _os_log_impl(&dword_184457000, v29, OS_LOG_TYPE_DEFAULT, "(strokeEnd %g)", buf, 0xCu);
        }
      }
    }
    if (*((double *)this + 11) != 0.0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v31 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v32 = *((double *)this + 11);
          *(_DWORD *)buf = 134217984;
          v49 = v32;
          _os_log_impl(&dword_184457000, v31, OS_LOG_TYPE_DEFAULT, "(lineWidth %g)", buf, 0xCu);
        }
      }
    }
    if (*((double *)this + 12) != 10.0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v33 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v34 = *((double *)this + 12);
          *(_DWORD *)buf = 134217984;
          v49 = v34;
          _os_log_impl(&dword_184457000, v33, OS_LOG_TYPE_DEFAULT, "(miterLimit %g)", buf, 0xCu);
        }
      }
    }
    if (*((double *)this + 13) != 0.0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v35 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v36 = *((double *)this + 13);
          *(_DWORD *)buf = 134217984;
          v49 = v36;
          _os_log_impl(&dword_184457000, v35, OS_LOG_TYPE_DEFAULT, "(dashPhase %g)", buf, 0xCu);
        }
      }
    }
    if (*((_QWORD *)this + 14))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v37 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v37, OS_LOG_TYPE_DEFAULT, "(dashPattern ", buf, 2u);
        }
      }
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 14) + 40))(*((_QWORD *)this + 14), (a2 + 1), a3);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v38 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v38, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
    if (*((_BYTE *)this + 120))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v39 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v39, OS_LOG_TYPE_DEFAULT, "(fillRule evenOdd)", buf, 2u);
        }
      }
    }
    if (*((_BYTE *)this + 121))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v40 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          if (*((unsigned __int8 *)this + 121) << 8 == 256)
            *(double *)&v41 = COERCE_DOUBLE("round");
          else
            *(double *)&v41 = COERCE_DOUBLE("bevel");
          *(_DWORD *)buf = 136315138;
          v49 = *(double *)&v41;
          _os_log_impl(&dword_184457000, v40, OS_LOG_TYPE_DEFAULT, "(lineJoin %s)", buf, 0xCu);
        }
      }
    }
    if (*((_BYTE *)this + 122))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v42 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          if (*((unsigned __int8 *)this + 122) << 16 == 0x10000)
            *(double *)&v43 = COERCE_DOUBLE("round");
          else
            *(double *)&v43 = COERCE_DOUBLE("square");
          *(_DWORD *)buf = 136315138;
          v49 = *(double *)&v43;
          _os_log_impl(&dword_184457000, v42, OS_LOG_TYPE_DEFAULT, "(lineCap %s)", buf, 0xCu);
        }
      }
    }
    if (x_log_hook_p())
    {
      x_log_();
      return;
    }
    v44 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v45 = ")";
LABEL_97:
      _os_log_impl(&dword_184457000, v44, OS_LOG_TYPE_DEFAULT, v45, buf, 2u);
      return;
    }
    return;
  }
  v46 = *((_QWORD *)this + 2);
  v47 = x_log_hook_p();
  if (!v46)
  {
    if (!v47)
    {
      v44 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v45 = "shape-layer";
        goto LABEL_97;
      }
      return;
    }
LABEL_103:
    x_log_();
    return;
  }
  if (v47)
    goto LABEL_103;
  v44 = x_log_category_render;
  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    v45 = "shape-layer-path";
    goto LABEL_97;
  }
}

uint64_t CA::Render::ShapeLayer::get_keypath_object(CA::Render::ShapeLayer *this, void *const *a2)
{
  unint64_t v2;
  char *v3;

  v2 = (unint64_t)*a2;
  if (!*a2)
    return 0;
  if ((v2 & 1) != 0)
  {
    v2 >>= 1;
  }
  else
  {
    if (*(_DWORD *)v2 != 1)
      return 0;
    LODWORD(v2) = *(_DWORD *)(v2 + 4);
  }
  if ((_DWORD)v2 == 346)
  {
    v3 = (char *)this + 112;
    return *(_QWORD *)v3;
  }
  if ((_DWORD)v2 != 414)
    return 0;
  v3 = (char *)this + 16;
  return *(_QWORD *)v3;
}

unsigned int *CA::Render::ShapeLayer::set_keypath_object(unsigned int *this, void *const *a2, CA::Render::Object *a3)
{
  unint64_t v3;
  CA::Render::Object *v4;
  unsigned int *v5;
  CA::Render::Path *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  v3 = (unint64_t)*a2;
  if (*a2)
  {
    v4 = a3;
    v5 = this;
    if ((v3 & 1) != 0)
    {
      v3 >>= 1;
    }
    else
    {
      if (*(_DWORD *)v3 != 1)
        return this;
      LODWORD(v3) = *(_DWORD *)(v3 + 4);
    }
    if ((_DWORD)v3 == 346)
    {
      if (a3)
      {
        if (*((_BYTE *)a3 + 12) == 56)
        {
          this = (unsigned int *)*((_QWORD *)this + 14);
          if (this != (unsigned int *)a3)
          {
            if (this)
            {
              v7 = this + 2;
              do
              {
                v8 = __ldaxr(v7);
                v9 = v8 - 1;
              }
              while (__stlxr(v9, v7));
              if (!v9)
                this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 16))(this);
            }
            v10 = (unsigned int *)((char *)v4 + 8);
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 + 1, v10));
            if (!v11)
            {
              v4 = 0;
              do
                v15 = __ldaxr(v10);
              while (__stlxr(v15 - 1, v10));
            }
            *((_QWORD *)v5 + 14) = v4;
          }
        }
      }
      else
      {
        this = (unsigned int *)*((_QWORD *)this + 14);
        if (this)
        {
          v12 = this + 2;
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
            this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 16))(this);
          *((_QWORD *)v5 + 14) = 0;
        }
      }
    }
    else if ((_DWORD)v3 == 414)
    {
      if (!a3)
      {
        v6 = 0;
        return CA::Render::ShapeLayer::set_path((CA::Render::ShapeLayer *)this, v6);
      }
      if (*((_BYTE *)a3 + 12) == 36)
      {
        v6 = a3;
        return CA::Render::ShapeLayer::set_path((CA::Render::ShapeLayer *)this, v6);
      }
    }
  }
  return this;
}

void sub_184613430(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

Class init_alignment(void)
{
  Class result;

  result = NSClassFromString(CFSTR("UIApplication"));
  if (result)
  {
    init_alignment(void)::app = (uint64_t)-[objc_class sharedApplication](result, sel_sharedApplication);
    result = (Class)objc_msgSend((id)init_alignment(void)::app, sel_userInterfaceLayoutDirection);
    if ((_DWORD)result == 1)
      natural_alignment = 1;
  }
  return result;
}

_BYTE *x_stream_finish(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;

  v2 = malloc_type_realloc(*(void **)a1, *(_QWORD *)(a1 + 8) - *(_QWORD *)a1 + 1, 0x5BC272C8uLL);
  v3 = v2;
  if (v2)
    v2[*(_QWORD *)(a1 + 8) - *(_QWORD *)a1] = 0;
  else
    free(*(void **)a1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return v3;
}

uint64_t addDependentStates(CAState *a1, __CFSet *a2, NSArray *a3)
{
  uint64_t result;
  NSString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CAState *v11;
  NSString *v12;
  NSString *v13;
  _BYTE v14[128];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  result = CFSetContainsValue(a2, a1);
  if (!(_DWORD)result)
  {
    CFSetAddValue(a2, a1);
    v7 = -[CAState name](a1, "name");
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    result = -[NSArray countByEnumeratingWithState:objects:count:](a3, "countByEnumeratingWithState:objects:count:", &v15, v14, 16);
    if (result)
    {
      v8 = result;
      v9 = *(_QWORD *)v16;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v16 != v9)
            objc_enumerationMutation(a3);
          v11 = *(CAState **)(*((_QWORD *)&v15 + 1) + 8 * v10);
          v12 = -[CAState basedOn](v11, "basedOn");
          if (-[NSString length](v12, "length"))
            v13 = v12;
          else
            v13 = 0;
          if (v13 == v7 || -[NSString isEqualToString:](v13, "isEqualToString:", v7))
            addDependentStates(v11, a2, a3);
          ++v10;
        }
        while (v8 != v10);
        result = -[NSArray countByEnumeratingWithState:objects:count:](a3, "countByEnumeratingWithState:objects:count:", &v15, v14, 16);
        v8 = result;
      }
      while (result);
    }
  }
  return result;
}

void CA::CG::TransparencyLayer::unref(CA::CG::TransparencyLayer *this)
{
  unsigned int v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  malloc_zone_t *malloc_zone;

  do
    v2 = __ldaxr((unsigned int *)this);
  while (__stlxr(v2 - 1, (unsigned int *)this));
  if (this && v2 == 1)
  {
    v3 = (unsigned int *)*((_QWORD *)this + 23);
    if (v3)
    {
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
        CA::CG::ClipStack::destroy_clip_stack((void (***)(char *))v3);
    }
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, this);
  }
}

uint64_t indicator_id_from_name(NSString *a1)
{
  if (!a1)
    __assert_rtn("indicator_id_from_name", "CASecureIndicatorLayer.mm", 63, "name");
  if (MEMORY[0x1E0D897C8])
    return MEMORY[0x186DBD690](-[NSString UTF8String](a1, "UTF8String"));
  if (-[NSString isEqualToString:](a1, "isEqualToString:", CFSTR("Camera")))
    return 0;
  if (-[NSString isEqualToString:](a1, "isEqualToString:", CFSTR("Microphone")))
    return 1;
  if (-[NSString isEqualToString:](a1, "isEqualToString:", CFSTR("MicrophoneAccessibility")))
    return 2;
  if (-[NSString isEqualToString:](a1, "isEqualToString:", CFSTR("FaceID")))
    return 3;
  return 0xFFFFFFFFLL;
}

void sub_184614438(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

CA::Render::Context *CARenderContextNew(const __CFDictionary *a1)
{
  malloc_zone_t *malloc_zone;
  CA::Render::Context *result;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = (CA::Render::Context *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x2E8uLL, 0x743898A5uLL);
  if (result)
    return CA::Render::Context::Context(result, a1, 0, 0, 0);
  return result;
}

uint64_t CARenderContextDestroy(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v4;

  v1 = (unsigned int *)(a1 + 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  if (!v2)
  {
    do
      v4 = __ldaxr(v1);
    while (__stlxr(v4 - 1, v1));
  }
  return CA::Render::Server::add_callback(0, (uint64_t)CA::Render::Context::schedule_destroy(void)::$_0::__invoke, a1, 0.0);
}

uint64_t CARenderContextGetOptions(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t CARenderContextGetId(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t CARenderContextGetProcessId(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;
  unsigned int v4;
  int v5;

  v2 = (unsigned int *)(a1 + 228);
  result = atomic_load((unsigned int *)(a1 + 228));
  if (!(_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 252))
      LODWORD(result) = 0;
    else
      LODWORD(result) = getpid();
    while (1)
    {
      v4 = __ldaxr(v2);
      if (v4)
        break;
      if (!__stlxr(result, v2))
      {
        v5 = 1;
        goto LABEL_9;
      }
    }
    v5 = 0;
    __clrex();
LABEL_9:
    if (v5)
      return result;
    else
      return v4;
  }
  return result;
}

__n128 CARenderContextGetAuditToken@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 196);
  v3 = *(_OWORD *)(a1 + 212);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t CARenderContextGetCommitSeed(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t CARenderContextGetChangedSeed(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t CARenderContextGetColorspace(uint64_t a1)
{
  return *(_QWORD *)(a1 + 448);
}

uint64_t CARenderContextLock(uint64_t a1)
{
  return pthread_mutex_lock((pthread_mutex_t *)(a1 + 72));
}

uint64_t CARenderContextUnlock(uint64_t a1)
{
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 72));
}

void CARenderContextInvalidateRect(CA::Render::Context *a1, uint64_t a2, const CA::Bounds *a3, double a4, float64x2_t a5)
{
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  float64x2_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  float64x2_t v17;
  int32x4_t v18;
  int32x4_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *(int8x16_t *)(a2 + 16);
  a5.f64[0] = 0.0;
  v6 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a5, (float64x2_t)v5).i64[0], 0);
  v7.i64[1] = *(_QWORD *)(a2 + 24);
  *(double *)v7.i64 = -*(double *)v5.i64;
  v8 = vbslq_s8(v6, v7, v5);
  v9 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a5, (float64x2_t)vdupq_laneq_s64((int64x2_t)v5, 1)).i64[0], 0);
  v10.i64[0] = v8.i64[0];
  v10.i64[1] = *(_QWORD *)&vnegq_f64(*(float64x2_t *)&v5).f64[1];
  v11 = (float64x2_t)vbslq_s8(v9, v10, v8);
  v12 = (int8x16_t)vceqzq_f64(v11);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v12, 1), v12).u64[0] & 0x8000000000000000) != 0
    || (v13 = vorrq_s8((int8x16_t)vcltzq_f64(v11), (int8x16_t)vcgezq_f64(v11)),
        v14 = (int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v13), 1),
        (vornq_s8(v14, v13).u64[0] & 0x8000000000000000) != 0))
  {
    v19 = 0uLL;
  }
  else
  {
    v14.i64[0] = 0x8000000000000000;
    v15.i64[0] = *(_OWORD *)&vaddq_f64(*(float64x2_t *)a2, (float64x2_t)vbslq_s8(v6, v5, v14));
    v16.i64[0] = v15.i64[0];
    v16.i64[1] = *(_QWORD *)(a2 + 8);
    v15.i64[1] = *(_QWORD *)&vaddq_f64(*(float64x2_t *)&v5, *(float64x2_t *)a2).f64[1];
    v17 = (float64x2_t)vbslq_s8(v9, v15, v16);
    v18 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v17, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    v19 = vuzp1q_s32(v18, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v17, v11), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v18));
  }
  CA::Render::Context::invalidate(a1, (int32x2_t *)&v19, a3);
}

uint64_t CARenderContextHitTest(uint64_t a1)
{
  return CA::Render::Context::hit_test(a1);
}

uint64_t CARenderLayerGetContextId(uint64_t a1)
{
  CA::Render::Handle *v1;
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v1 = *(CA::Render::Handle **)(a1 + 144);
  if (!v1)
    return 0;
  v2 = (unsigned int *)CA::Render::Handle::retain_context(v1);
  if (!v2)
    return 0;
  v3 = v2[4];
  v4 = v2 + 2;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
    (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  return v3;
}

CA::Render::Context *CARenderContextGetRootLayer(CA::Render::Context *result)
{
  if (result)
  {
    result = (CA::Render::Context *)CA::Render::Context::root_layer_handle(result);
    if (result)
      return (CA::Render::Context *)*((_QWORD *)result + 2);
  }
  return result;
}

uint64_t CARenderContextGetInputTime(uint64_t a1)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)(a1 + 72);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 72));
  *(_QWORD *)(a1 + 456) = 0x7FF0000000000000;
  return pthread_mutex_unlock(v2);
}

uint64_t CARenderContextGetBeginTime(uint64_t a1, double a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)(a1 + 72);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 72));
  CA::Render::Context::get_begin_time((os_unfair_lock_s *)a1, a2);
  return pthread_mutex_unlock(v4);
}

void CARenderContextSetBeginTimeThreshold(double a1)
{
  atomic_store(*(unint64_t *)&a1, &CA::Render::Context::_begin_time_threshold);
}

uint64_t CARenderContextGetRequestsFrameStallSkip(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int16 *)(a1 + 552);
  *(_WORD *)(a1 + 552) = v1 & 0xFF7F;
  return (v1 >> 7) & 1;
}

CFStringRef CARenderContextCopyProcessPath(CA::Render::Context *a1)
{
  const char *v1;

  v1 = (const char *)CA::Render::Context::process_path(a1);
  return CFStringCreateWithCString(0, v1 + 28, 0x8000100u);
}

CFTypeRef CARenderContextCopyClientAnnotation(uint64_t a1)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a1 + 520);
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t CARenderContextNeedsDeferUpdate(os_unfair_lock_s *a1)
{
  uint64_t updated;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
  updated = CA::Render::Context::needs_defer_update_locked(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
  return updated;
}

uint64_t CARenderContextGetPayloadSeed(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

CFTypeRef CARenderContextCopyPayload(uint64_t a1)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a1 + 528);
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t CARenderImageBitsPerPixel(unsigned int a1)
{
  if (a1 > 0x23)
    return 0;
  else
    return dword_1847503F0[a1];
}

uint64_t CARenderImageBitsPerComponent(unsigned int a1)
{
  if (a1 > 0x23)
    return 0;
  else
    return dword_184750518[a1];
}

uint64_t CARenderImageHasAlpha(unsigned int a1)
{
  return (a1 < 0x24) & (0xC99B4EB03uLL >> a1);
}

uint64_t CARenderImageCGBitmapInfo(unsigned int a1)
{
  if (a1 > 0x23)
    return 0;
  else
    return dword_184750360[a1];
}

unint64_t CARenderImageIsNative(unsigned int a1)
{
  return (a1 > 0x23) | (0x1FFFFFF2FuLL >> a1) & 1;
}

const char *CARenderImageFormatName(unsigned int a1)
{
  if (a1 > 0x23)
    return "UNKNOWN";
  else
    return off_1E159CBE8[a1];
}

CA::Render::Texture *CARenderImageNew(CA::Render::Image *a1, unsigned int a2, unsigned int a3, CGColorSpace *a4, unint64_t a5, unint64_t *a6, void (*a7)(const void *, void *))
{
  void *v8;
  unint64_t v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v9[0] = a5;
  return CA::Render::Image::new_image(a1, a2, a3, 1u, 0, a4, v9, a6, a7, v8);
}

CA::Render::Texture *CARenderImageNewMipmapped(CA::Render::Image *this, unsigned int a2, unsigned int a3, unsigned int a4, CGColorSpace *a5, CGColorSpace *a6, unint64_t *a7, const unint64_t *a8, void (*a9)(const void *, void *), void *a10)
{
  return CA::Render::Image::new_image(this, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

char *CARenderImageNewWithCGImage(CA::Render *a1, CGImage *a2, CGColorSpace *a3)
{
  char *result;
  unsigned int *v4;
  unsigned int v5;

  result = CA::Render::copy_image(a1, a2, a3, 0.0, 1.0);
  if (result && result[12] != 23)
  {
    v4 = (unsigned int *)(result + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (v5 == 1)
      (*(void (**)(char *))(*(_QWORD *)result + 16))(result);
    return 0;
  }
  return result;
}

uint64_t CARenderImageGetWidth(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t CARenderImageGetHeight(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void CARenderNotificationAddObserver(unsigned int a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  CA::Render::add_observer(a1, a2, a3, a4, 0);
}

void CARenderShowImages()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  double *i;
  double v5;
  uint64_t v6;
  const CA::Render::Object *v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  char *v16;
  int v17;
  uint64_t v18;
  char *v19;
  int v20;
  unsigned int v21;
  int v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  uint8_t buf[4];
  double v30;
  __int16 v31;
  _BYTE v32[18];
  __int16 v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  const char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  x_log_begin();
  if (CA::Render::image_cache)
  {
    if (x_log_hook_p())
    {
      v0 = mach_absolute_time();
      CATimeWithHostTime(v0);
      x_log_();
    }
    else
    {
      v1 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v2 = mach_absolute_time();
        *(_DWORD *)buf = 134217984;
        v30 = CATimeWithHostTime(v2);
        _os_log_impl(&dword_184457000, v1, OS_LOG_TYPE_DEFAULT, "CG image cache at time %f:\n", buf, 0xCu);
      }
    }
    v3 = 0;
    v27 = CA::Render::image_cache;
    v26 = 1 << *(_DWORD *)CA::Render::image_cache;
    do
    {
      for (i = *(double **)(*(_QWORD *)(v27 + 16) + 8 * v3); i; i = *(double **)i)
      {
        v5 = i[2];
        v6 = *((_QWORD *)i + 3);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v8 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            v9 = *(_QWORD *)(v6 + 32);
            v10 = *(_DWORD *)(v6 + 40);
            v11 = "mipmaps ";
            if ((v10 & 1) == 0)
              v11 = "";
            v12 = "mask ";
            if ((v10 & 2) == 0)
              v12 = "";
            *(_DWORD *)buf = 134219522;
            if ((v10 & 4) != 0)
              v13 = "transient ";
            else
              v13 = "";
            v30 = v5;
            if ((v10 & 8) != 0)
              v14 = "unmatched ";
            else
              v14 = "";
            v31 = 2048;
            if ((v10 & 0x10) != 0)
              v15 = "partial ";
            else
              v15 = "";
            *(_QWORD *)v32 = v9;
            *(_WORD *)&v32[8] = 2080;
            *(_QWORD *)&v32[10] = v11;
            v33 = 2080;
            v34 = v12;
            v35 = 2080;
            v36 = v13;
            v37 = 2080;
            v38 = v14;
            v39 = 2080;
            v40 = v15;
            _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_DEFAULT, "  %p deadline %f %s%s%s%s%s", buf, 0x48u);
          }
        }
        CA::Render::show_object(*(CA::Render **)(v6 + 24), v7);
      }
      ++v3;
    }
    while (v3 != v26);
  }
  v28 = (void **)x_stream_pop_(0);
  v16 = x_stream_get(v28);
  v17 = 0;
  while (2)
  {
    v18 = 0;
    v19 = &v16[v17];
    v20 = -1;
    while (1)
    {
      if (v19[v18] == 10)
      {
        v20 = v18;
        goto LABEL_33;
      }
      if (!v19[v18])
        break;
LABEL_33:
      ++v18;
      v21 = 32512;
      if (v18 == 32512)
        goto LABEL_34;
    }
    v21 = v18;
LABEL_34:
    if (v20 <= -1 || v19[v21] == 0)
      v23 = v21;
    else
      v23 = v20 + 1;
    if (v23 >= 1)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v24 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          if (v17)
            *(double *)&v25 = COERCE_DOUBLE("continued...\n");
          else
            *(double *)&v25 = COERCE_DOUBLE("");
          v30 = *(double *)&v25;
          v31 = 1040;
          *(_DWORD *)v32 = v23;
          *(_WORD *)&v32[4] = 2080;
          *(_QWORD *)&v32[6] = &v16[v17];
          _os_log_impl(&dword_184457000, v24, OS_LOG_TYPE_DEFAULT, "%s%.*s", buf, 0x1Cu);
        }
      }
      v17 += v23;
      continue;
    }
    break;
  }
  x_log_end_free_(v28);
}

void CAFenceBatchWaitLockAcquire()
{
  malloc_zone_t *malloc_zone;
  CA::Render::Fence::BatchWaitLock *v1;

  os_unfair_lock_lock((os_unfair_lock_t)&_batching_lock);
  if (_batching)
    __assert_rtn("CAFenceBatchWaitLockAcquire", "CARender.cpp", 801, "!_batching");
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v1 = (CA::Render::Fence::BatchWaitLock *)malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
  if (v1)
    v1 = CA::Render::Fence::BatchWaitLock::BatchWaitLock(v1);
  _batching = (uint64_t)v1;
  os_unfair_lock_unlock((os_unfair_lock_t)&_batching_lock);
}

void CAFenceBatchWaitLockRelease()
{
  void *v0;
  malloc_zone_t *malloc_zone;

  os_unfair_lock_lock((os_unfair_lock_t)&_batching_lock);
  v0 = (void *)_batching;
  if (!_batching)
    __assert_rtn("CAFenceBatchWaitLockRelease", "CARender.cpp", 809, "_batching");
  CA::Render::Fence::BatchWaitLock::invalidate(_batching);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, v0);
  _batching = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)&_batching_lock);
}

float64x2_t CA::Mat4Impl::mat4_concat(float64x2_t *this, double *a2, const CGAffineTransform *a3, const double *a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t result;

  v4 = *((_OWORD *)a2 + 1);
  v5 = *(_OWORD *)(a2 + 1);
  v6 = *((_OWORD *)a2 + 2);
  v7 = *(_OWORD *)(a2 + 3);
  v8 = a2[5];
  v9 = *(float64x2_t *)&a3->c;
  v10 = *(float64x2_t *)&a3->tx;
  v11 = *(float64x2_t *)&a3[1].a;
  v12 = vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)&a3[2].a, *(float64x2_t *)&a3->a, *(double *)&v6), v10, v8);
  v13 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&a3->a, *a2), v10, *(double *)&v5);
  v14 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&a3->a, *(double *)&v4), v10, *(double *)&v7);
  v15 = *(float64x2_t *)&a3[1].c;
  v16 = *(float64x2_t *)&a3[1].tx;
  v17 = vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)&a3[2].c, v9, *(double *)&v6), v11, v8);
  result = vmlaq_n_f64(vmulq_n_f64(v9, *a2), v11, *(double *)&v5);
  *this = v13;
  this[1] = result;
  this[2] = v14;
  this[3] = vmlaq_n_f64(vmulq_n_f64(v9, *(double *)&v4), v11, *(double *)&v7);
  this[4] = v15;
  this[5] = v16;
  this[6] = v12;
  this[7] = v17;
  return result;
}

float64x2_t CA::Mat4Impl::mat4_translate(float64x2_t *this, double *a2, double a3, double a4, double a5)
{
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t result;
  float64x2_t v8;

  v5 = vmlaq_n_f64(vmlaq_n_f64(this[6], *this, a3), this[2], a4);
  v6 = vmlaq_n_f64(vmlaq_n_f64(this[7], this[1], a3), this[3], a4);
  result = this[4];
  v8 = vmlaq_n_f64(v6, this[5], a5);
  this[6] = vmlaq_n_f64(v5, result, a5);
  this[7] = v8;
  return result;
}

float64x2_t CA::Mat4Impl::mat4_translate_right(float64x2_t *this, double *a2, float64x2_t result, float64_t a4, double a5)
{
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;

  result.f64[1] = a4;
  v6 = this[1];
  v7 = this[3];
  v8 = this[5];
  v9 = this[7];
  v10 = vmlaq_laneq_f64(this[2], result, v7, 1);
  v11 = vmlaq_laneq_f64(this[4], result, v8, 1);
  v12 = vmlaq_laneq_f64(this[6], result, v9, 1);
  *this = vmlaq_laneq_f64(*this, result, v6, 1);
  this[1] = vmlaq_laneq_f64(v6, (float64x2_t)*(unint64_t *)&a5, v6, 1);
  this[2] = v10;
  this[3] = vmlaq_laneq_f64(v7, (float64x2_t)*(unint64_t *)&a5, v7, 1);
  this[4] = v11;
  this[5] = vmlaq_laneq_f64(v8, (float64x2_t)*(unint64_t *)&a5, v8, 1);
  this[6] = v12;
  this[7] = vmlaq_laneq_f64(v9, (float64x2_t)*(unint64_t *)&a5, v9, 1);
  return result;
}

float32x4_t CA::Mat4Impl::mat4_scale(CA::Mat4Impl *this, float *a2, float a3, float a4, float a5)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t result;

  v5 = *((float32x4_t *)this + 2);
  v6 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)this), a3)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)this), a3));
  v7 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)this + 16)), a4)), vmulq_n_f64(vcvt_hight_f64_f32(*((float32x4_t *)this + 1)), a4));
  *(float32x4_t *)this = v6;
  *((float32x4_t *)this + 1) = v7;
  result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v5.f32), a5)), vmulq_n_f64(vcvt_hight_f64_f32(v5), a5));
  *((float32x4_t *)this + 2) = result;
  return result;
}

BOOL CA::Mat4Impl::mat4_is_fixed_z_with_z_translate(CA::Mat4Impl *this, const double *a2)
{
  return *((double *)this + 2) == 0.0
      && *((double *)this + 3) == 0.0
      && *((double *)this + 6) == 0.0
      && *((double *)this + 7) == 0.0
      && *((double *)this + 10) == 1.0
      && *((double *)this + 15) == 1.0;
}

BOOL CA::Mat4Impl::mat4_is_front_facing(CA::Mat4Impl *this, const double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;

  v2 = *((double *)this + 1);
  v3 = *((double *)this + 3);
  v4 = *((double *)this + 4);
  v5 = *((double *)this + 5);
  v6 = *((double *)this + 6);
  v7 = *((double *)this + 7);
  v8 = *((double *)this + 8);
  v9 = *((double *)this + 9);
  v10 = *((double *)this + 10);
  v11 = *((double *)this + 11);
  v12 = *((double *)this + 12);
  v13 = *((double *)this + 13);
  v14 = *((double *)this + 14);
  v15 = *((double *)this + 15);
  v16 = -(v14 * v11 - v15 * v10);
  v17 = -(v14 * v7 - v15 * v6);
  v18 = -(v10 * v7 - v11 * v6);
  return ((v13 * v18 + v16 * v5 - v17 * v9) * *(double *)this
        - (-(v11 * v5 - v9 * v7) * v12 + -(v15 * v9 - v13 * v11) * v4 + -(v13 * v7 - v15 * v5) * v8)
        * *((double *)this + 2)
        + (v12 * -(v10 * v5 - v9 * v6) + -(v14 * v9 - v13 * v10) * v4 + -(v13 * v6 - v14 * v5) * v8) * v3
        + -(v18 * v12 + v16 * v4 - v17 * v8) * v2)
       * (v12 * -(v5 * v3 - v7 * v2) + -(v13 * v7 - v15 * v5) * *(double *)this + -(v15 * v2 - v13 * v3) * v4) >= 0.0;
}

double CA::Mat4Impl::mat4_set_transform(CA::Mat4Impl *this, double *a2, const CGAffineTransform *a3)
{
  double result;

  *(_OWORD *)this = xmmword_18474DF40;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = xmmword_18474DF50;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = xmmword_18474DF40;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = xmmword_18474DF50;
  *(double *)this = *a2;
  *((double *)this + 1) = a2[1];
  *((double *)this + 4) = a2[2];
  *((double *)this + 5) = a2[3];
  *((double *)this + 12) = a2[4];
  result = a2[5];
  *((double *)this + 13) = result;
  return result;
}

void CA::mix(uint64_t a1, float64x2_t *a2, float64x2_t *a3, double a4)
{
  float64x2_t v6;
  float64x2_t v7;
  double v8;
  double v9;
  float64_t v10;
  float64x2_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  long double v33;
  __double2 v34;
  double v35;
  double v36;

  v6 = vmlaq_n_f64(a2[1], vsubq_f64(a3[1], a2[1]), a4);
  *(float64x2_t *)a1 = vmlaq_n_f64(*a2, vsubq_f64(*a3, *a2), a4);
  *(float64x2_t *)(a1 + 16) = v6;
  v7 = vmlaq_n_f64(a2[3], vsubq_f64(a3[3], a2[3]), a4);
  *(float64x2_t *)(a1 + 32) = vmlaq_n_f64(a2[2], vsubq_f64(a3[2], a2[2]), a4);
  *(float64x2_t *)(a1 + 48) = v7;
  v8 = a2[6].f64[1];
  v9 = a3[6].f64[1];
  v10 = a2[6].f64[0] + (a3[6].f64[0] - a2[6].f64[0]) * a4;
  v11 = vmlaq_n_f64(a2[5], vsubq_f64(a3[5], a2[5]), a4);
  *(float64x2_t *)(a1 + 64) = vmlaq_n_f64(a2[4], vsubq_f64(a3[4], a2[4]), a4);
  *(float64x2_t *)(a1 + 80) = v11;
  *(float64_t *)(a1 + 96) = v10;
  v13 = a2[7].f64[0];
  v12 = a2[7].f64[1];
  v14 = a2[8].f64[0];
  v16 = a3[7].f64[0];
  v15 = a3[7].f64[1];
  v17 = a3[8].f64[0];
  v18 = v9 * v8 + v16 * v13 + v15 * v12 + v17 * v14;
  if (v18 < 0.0)
  {
    v8 = -v8;
    v13 = -v13;
    v12 = -v12;
    v14 = -v14;
    v18 = -v18;
  }
  v19 = fmin(v18, 1.0);
  if (v19 <= 0.9999)
  {
    v29 = v9 - v19 * v8;
    v30 = v16 - v19 * v13;
    v31 = v15 - v19 * v12;
    v32 = v17 - v19 * v14;
    v36 = a4;
    v33 = acos(v19);
    v34 = __sincos_stret(v33 * v36);
    v35 = v34.__sinval / sqrt(v29 * v29 + v30 * v30 + v31 * v31 + v32 * v32);
    v25 = v34.__cosval * v8 + v35 * v29;
    v26 = v34.__cosval * v13 + v35 * v30;
    v27 = v34.__cosval * v12 + v35 * v31;
    v28 = v34.__cosval * v14 + v35 * v32;
  }
  else
  {
    v20 = v8 + (v9 - v8) * a4;
    v21 = v13 + (v16 - v13) * a4;
    v22 = v12 + (v15 - v12) * a4;
    v23 = v14 + (v17 - v14) * a4;
    v24 = 1.0 / sqrt(v20 * v20 + v21 * v21 + v22 * v22 + v23 * v23);
    v25 = v24 * v20;
    v26 = v24 * v21;
    v27 = v24 * v22;
    v28 = v24 * v23;
  }
  *(double *)(a1 + 104) = v25;
  *(double *)(a1 + 112) = v26;
  *(double *)(a1 + 120) = v27;
  *(double *)(a1 + 128) = v28;
  *(_BYTE *)(a1 + 136) = 1;
}

float64x2_t CA::Mat2Impl::mat2_rotate(float64x2_t *this, double *a2, double a3)
{
  int8x16_t v4;
  int8x16_t v5;
  __double2 v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t result;

  v6 = __sincos_stret(a3);
  *(double *)v5.i64 = v6.__cosval;
  *(double *)v4.i64 = v6.__sinval;
  if (fabs(v6.__sinval) >= 0.0000001)
  {
    if (fabs(v6.__cosval) < 0.0000001)
    {
      v5.i64[0] = 1.0;
      v8.f64[0] = NAN;
      v8.f64[1] = NAN;
      v4.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v8), v5, v4).u64[0];
      v5.i64[0] = 0;
    }
  }
  else
  {
    v4.i64[0] = 1.0;
    v7.f64[0] = NAN;
    v7.f64[1] = NAN;
    v5.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v7), v4, v5).u64[0];
    v4.i64[0] = 0;
  }
  v9 = *this;
  v10 = this[1];
  v11 = this[2];
  v12 = vmlaq_n_f64(vmulq_n_f64(*this, *(double *)v5.i64), v10, *(double *)v4.i64);
  v13 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(*this, *(double *)v4.i64)), v10, *(double *)v5.i64);
  *this = v12;
  this[1] = v13;
  result = vaddq_f64(v10, v9);
  this[2] = vmlaq_f64(v11, (float64x2_t)0, result);
  return result;
}

float64x2_t CA::Mat2Impl::mat2_concat(float64x2_t *this, double *a2, const double *a3, const double *a4)
{
  double v4;
  double v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t result;
  float64x2_t v10;

  v4 = a2[4];
  v5 = a2[5];
  v6 = *(float64x2_t *)a3;
  v7 = *(float64x2_t *)(a3 + 2);
  v8 = *(float64x2_t *)(a3 + 4);
  result = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a3, *a2), v7, a2[1]);
  v10 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a3, a2[2]), v7, a2[3]);
  *this = result;
  this[1] = v10;
  this[2] = vmlaq_n_f64(vmlaq_n_f64(v8, v6, v4), v7, v5);
  return result;
}

float64_t CA::Mat2Impl::mat2_pow(CA::Mat2Impl *this, double *a2, const double *a3, const double *a4)
{
  unsigned int v5;
  float64x2_t v6;
  float64x2_t v7;
  BOOL v8;
  float64_t result;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;

  if ((_DWORD)a2)
  {
    v5 = a2;
    if ((a2 & 0x80000000) != 0)
    {
      CA::Mat2Impl::mat2_invert(this, (double *)this, a3);
      v5 = -v5;
    }
    v10 = (float64x2_t)xmmword_18474DF40;
    v11 = (float64x2_t)xmmword_18474DF50;
    v12 = 0u;
    do
    {
      if ((v5 & 1) != 0)
      {
        v6 = vmlaq_n_f64(vmulq_n_f64(v10, *(double *)this), v11, *((double *)this + 1));
        v7 = vmlaq_n_f64(vmlaq_n_f64(v12, v10, *((double *)this + 4)), v11, *((double *)this + 5));
        v11 = vmlaq_n_f64(vmulq_n_f64(v10, *((double *)this + 2)), v11, *((double *)this + 3));
        v12 = v7;
        v10 = v6;
      }
      CA::Mat2Impl::mat2_concat((float64x2_t *)this, (double *)this, (const double *)this, a4);
      v8 = v5 >= 2;
      v5 >>= 1;
    }
    while (v8);
    *(float64x2_t *)this = v10;
    *((float64x2_t *)this + 1) = v11;
    result = v12.f64[0];
    *((float64x2_t *)this + 2) = v12;
  }
  else if (this != (CA::Mat2Impl *)&CA::Mat2Impl::mat2_identity_double)
  {
    result = 1.0;
    *(_OWORD *)this = xmmword_18474DF40;
    *((_OWORD *)this + 1) = xmmword_18474DF50;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
  }
  return result;
}

double CA::Mat2Impl::mat2_get_scale(CA::Mat2Impl *this, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  _BOOL4 v6;
  double v7;
  double v8;
  double result;

  v4 = *(double *)this * *(double *)this + *((double *)this + 1) * *((double *)this + 1);
  v5 = *((double *)this + 2) * *((double *)this + 2) + *((double *)this + 3) * *((double *)this + 3);
  v6 = v4 != 1.0;
  if (v5 != 1.0)
    v6 = 1;
  v7 = sqrt(v4);
  v8 = sqrt(v5);
  if (v6)
    v5 = v8;
  if (a2)
  {
    if (v6)
      v4 = v7;
    *a2 = v4;
  }
  if (a3)
    *a3 = v5;
  result = (v8 + v7) * 0.5;
  if (!v6)
    return 1.0;
  return result;
}

double CA::Mat2Impl::mat2_get_scale_2d(CA::Mat2Impl *this, const double *a2)
{
  double v2;
  double v3;
  double result;
  double v5;
  double v6;
  double v7;
  double v8;

  v3 = *((double *)this + 2);
  v2 = *((double *)this + 3);
  result = *(double *)this;
  v5 = *((double *)this + 1);
  if (vabdd_f64(*(double *)this, trunc(v2)) >= 0.000001 || fabs(v5) >= 0.000001 || fabs(v3) >= 0.000001)
  {
    v6 = result * result + v5 * v5;
    v7 = v2 * v2 + v3 * v3;
    v8 = -(v6 - v7);
    if (v6 - v7 >= 0.0)
      v8 = v6 - v7;
    result = 0.0;
    if (v8 < 1.0e-10)
      return (sqrt(v7) + sqrt(v6)) * 0.5;
  }
  return result;
}

void CA::Render::DeferredImageSlot::~DeferredImageSlot(CA::Render::DeferredImageSlot *this, const CA::Render::Object *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = off_1E1597C70;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  --dword_1ECDC7C54;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1597C70;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  --dword_1ECDC7C54;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::Render::DeferredImageSlot::show(CA::Render::DeferredImageSlot *this, int a2, uint64_t a3)
{
  NSObject *v6;
  CA::Render *v7;
  NSObject *v8;
  NSObject *v9;
  uint8_t v10[16];
  uint8_t v11[16];
  uint8_t buf[8];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((a3 & 1) == 0)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v6 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v6, OS_LOG_TYPE_DEFAULT, "(deferred-image-slot ", buf, 2u);
      }
    }
    if (*((_QWORD *)this + 2))
    {
      v7 = (CA::Render *)(a2 + 1);
      CA::Render::show_newline(v7);
      (*(void (**)(_QWORD, CA::Render *, uint64_t))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2), v7, a3);
    }
    else if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v8 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v11 = 0;
        _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_DEFAULT, "(no texture)", v11, 2u);
      }
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v9 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_184457000, v9, OS_LOG_TYPE_DEFAULT, ")", v10, 2u);
      }
    }
  }
}

uint64_t CA::Render::DeferredImageSlot::texture_cast(CA::Render::DeferredImageSlot *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t CA::Render::Context::new_image_slot(CA::Render::Context *this, CA::Render *a2, unsigned int a3, char a4, char a5)
{
  uint64_t v5;
  int v7;
  malloc_zone_t *malloc_zone;
  _DWORD *v12;
  _DWORD *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v5 = 0;
  if ((_DWORD)a2)
  {
    if (a3)
    {
      v7 = (int)a2;
      if (!((a3 | a2) >> 13))
      {
        if (CA::Render::iosurface_size_supported(a2, a3))
        {
          v5 = CA::Render::Context::new_slot(this);
          malloc_zone = (malloc_zone_t *)get_malloc_zone();
          v12 = malloc_type_zone_malloc(malloc_zone, 0x28uLL, 0x8BB15036uLL);
          if (v12)
          {
            v13 = v12;
            v12[2] = 1;
            v14 = v12 + 2;
            v12[3] = 11;
            ++dword_1ECDC7C54;
            *(_QWORD *)v12 = off_1E1597C70;
            *((_QWORD *)v12 + 2) = 0;
            v12[6] = v7;
            v12[7] = a3;
            *((_BYTE *)v12 + 32) = a4;
            *((_BYTE *)v12 + 33) = a5;
            CA::Render::Context::set_slot(this, v5, (CA::Render::Object *)v12);
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
              (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
          }
          else
          {
            CA::Render::Context::set_slot(this, v5, 0);
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return v5;
}

void CA::Render::Context::transfer_slot(CA::Render::Context *this, int a2, CA::Render::Context *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  int v24;
  char v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;

  if (a2 && CA::Render::Context::_slot_table)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 21);
    v4 = (uint64_t *)*((_QWORD *)this + 22);
    if (v5 != v4)
    {
      while (*(_DWORD *)v5 != a2)
      {
        if (++v5 == v4)
          return;
      }
    }
    if (v5 != v4)
    {
      v6 = CA::Render::Context::context_by_id(a3);
      if (v6)
      {
        v7 = (unsigned int *)v6;
        os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
        v8 = *v5;
        v9 = *((_QWORD *)this + 22);
        v10 = *(_DWORD *)(v9 - 8);
        *((_BYTE *)v5 + 4) = *(_BYTE *)(v9 - 4);
        *(_DWORD *)v5 = v10;
        *((_QWORD *)this + 22) -= 8;
        v12 = (unint64_t *)*((_QWORD *)v7 + 22);
        v11 = *((_QWORD *)v7 + 23);
        if ((unint64_t)v12 >= v11)
        {
          v14 = *((_QWORD *)v7 + 21);
          v15 = ((uint64_t)v12 - v14) >> 3;
          if ((unint64_t)(v15 + 1) >> 61)
            abort();
          v16 = v11 - v14;
          v17 = v16 >> 2;
          if (v16 >> 2 <= (unint64_t)(v15 + 1))
            v17 = v15 + 1;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v17;
          if (v18)
            v18 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v18);
          else
            v19 = 0;
          v20 = v18 + 8 * v15;
          v21 = v18 + 8 * v19;
          *(_QWORD *)v20 = v8 & 0xFFFFFF00FFFFFFFFLL | 0x100000000;
          v13 = (_QWORD *)(v20 + 8);
          v23 = (_BYTE *)*((_QWORD *)v7 + 21);
          v22 = (_BYTE *)*((_QWORD *)v7 + 22);
          if (v22 != v23)
          {
            do
            {
              v24 = *((_DWORD *)v22 - 2);
              v22 -= 8;
              v25 = v22[4];
              *(_DWORD *)(v20 - 8) = v24;
              v20 -= 8;
              *(_BYTE *)(v20 + 4) = v25;
            }
            while (v22 != v23);
            v22 = (_BYTE *)*((_QWORD *)v7 + 21);
          }
          *((_QWORD *)v7 + 21) = v20;
          *((_QWORD *)v7 + 22) = v13;
          *((_QWORD *)v7 + 23) = v21;
          if (v22)
            operator delete(v22);
        }
        else
        {
          *v12 = v8 & 0xFFFFFF00FFFFFFFFLL | 0x100000000;
          v13 = v12 + 1;
        }
        *((_QWORD *)v7 + 22) = v13;
        os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
        v26 = v7 + 2;
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
          (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
      }
    }
  }
}

void CA::Render::Context::delete_slot(CA::Render::Context *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  if (a2 && CA::Render::Context::_slot_table)
  {
    v5 = *((_QWORD *)this + 21);
    v4 = *((_QWORD *)this + 22);
    if (v5 != v4)
    {
      while (*(_DWORD *)v5 != a2)
      {
        v5 += 8;
        if (v5 == v4)
          return;
      }
    }
    if (v5 != v4)
    {
      os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
      v6 = x_hash_table_remove(CA::Render::Context::_slot_table, a2);
      v7 = *((_QWORD *)this + 22);
      v8 = *(_BYTE *)(v7 - 4);
      *(_DWORD *)v5 = *(_DWORD *)(v7 - 8);
      *(_BYTE *)(v5 + 4) = v8;
      *((_QWORD *)this + 22) -= 8;
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
      if (v6)
      {
        v9 = (unsigned int *)(v6 + 8);
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      }
      CA::Render::post_notification(0x3Au, 0, (uint64_t)&v12, 0);
    }
  }
}

uint64_t CA::Render::Context::flush_presentation_modifier_shmem(uint64_t this, CA::Render::Shmem *a2)
{
  unsigned int *v2;
  int v3;
  unsigned int v4;
  unsigned int v5;

  if (this && *(_QWORD *)(this + 16) >= 0x28uLL)
  {
    v2 = *(unsigned int **)(this + 24);
    v2[1] = v2[1] == 0;
    while (1)
    {
      v3 = *v2 & 0x7FFFFFFF;
      v4 = *v2 & 0x7FFFFFFE | v2[1];
      while (1)
      {
        v5 = __ldaxr(v2);
        if (v5 != v3)
          break;
        if (!__stlxr(v4, v2))
          return this;
      }
      __clrex();
    }
  }
  return this;
}

void CA::Render::Context::get_debug_log(CA::Render::Context *this, CA::Render::Object *a2, _QWORD *a3, void *a4)
{
  _QWORD *v4;
  void *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  _QWORD *v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  pthread_mutex_t *v19;
  const __CFString *v20;
  const __CFString *v21;
  unsigned int *v22;
  pid_t v24;
  uint64_t v25;
  __int32 v26;
  const char *v27;
  const char *v28;
  float v29;
  unsigned int *v30;
  unsigned int v31;
  pid_t v32;
  uint64_t v34;
  unsigned int v35;
  int v36;
  double v37;
  __int16 v38;
  const char *v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  _QWORD *v51;
  _QWORD *v52;
  CA::Render *v53;
  char v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  pid_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float v74;
  uint64_t v75;
  const __CFString *v76;
  const char *CStringPtr;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  const char *i;
  _QWORD *v86;
  uint64_t v87;
  const char *v88;
  const char *v89;
  uint64_t v90;
  unsigned int *v91;
  pid_t v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int32 *v101;
  unsigned int *v102;
  NSObject *v103;
  __int32 v104;
  CA::Render *v105;
  NSObject *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int *v111;
  pid_t v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t j;
  uint64_t **v129;
  char v130;
  CA::Render::Context **v131;
  CA::Render::Context *v132;
  double v133;
  void *v134;
  _QWORD *v135;
  double v136;
  double v137;
  double v138;
  uint64_t v139;
  uint64_t v140;
  const CA::Bounds *v141;
  unint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  CA::Shape *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint8x8_t v153;
  unint64_t v154;
  CA::Shape ***v155;
  CA::Shape **k;
  CA::Shape *v157;
  float v158;
  _BOOL8 v159;
  unint64_t v160;
  unint64_t v161;
  int8x8_t prime;
  void *v163;
  void *v164;
  uint64_t v165;
  _QWORD **v166;
  unint64_t v167;
  uint8x8_t v168;
  unint64_t v169;
  uint8x8_t v170;
  uint64_t v171;
  _QWORD *m;
  unint64_t v173;
  int8x8_t v174;
  CA::Shape ***v175;
  unint64_t v176;
  CA::Shape **v177;
  CA::Shape *v178;
  CA::Shape **v179;
  void *v180;
  uint64_t v181;
  unsigned int *v182;
  pid_t v184;
  pthread_mutex_t *v185;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  double v194;
  double v195;
  double v196;
  double v197;
  _DWORD *v198;
  CA::Shape *v199;
  NSObject *v200;
  int v201;
  const CA::Bounds *v202;
  NSObject *v203;
  double v204;
  CA::Shape *v205;
  double v206;
  double v207;
  double v208;
  double v209;
  NSObject *v210;
  unint64_t v211;
  double v212;
  double v213;
  double v214;
  double v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  double v219;
  NSObject *v220;
  unint64_t v221;
  double v222;
  double v223;
  double v224;
  double v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  _QWORD *v229;
  _QWORD *v230;
  void *v231;
  double v232;
  NSObject *v233;
  unint64_t v234;
  double v235;
  double v236;
  double v237;
  double v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  void *v242;
  double v243;
  double v244;
  double v245;
  unsigned int v246;
  double v247;
  int v248;
  pthread_mutex_t *v249;
  const char *v250;
  _QWORD *v251;
  _QWORD *v252;
  _QWORD *v253;
  _DWORD *v254;
  NSObject *v255;
  uint64_t v256;
  pthread_mutex_t *v257;
  CA::Shape *v258;
  uint64_t v259;
  CA::Shape *v260;
  uint8_t v261[4];
  _BYTE v262[10];
  double v263;
  _BYTE v264[10];
  int v265[2];
  uint64_t v266;
  uint64_t v267;
  int8x8_t buf[6];
  __int16 v269;
  unsigned int v270;
  __int16 v271;
  _DWORD *v272;
  __int16 v273;
  const char *v274;
  __int16 v275;
  const char *v276;
  __int16 v277;
  const char *v278;
  __int16 v279;
  double v280;
  __int128 buffer;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  uint64_t v297;

  v4 = a3;
  v297 = *MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x186DBE2E4](this, a2, a3, a4);
  v295 = 0u;
  v296 = 0u;
  v293 = 0u;
  v294 = 0u;
  v291 = 0u;
  v292 = 0u;
  v289 = 0u;
  v290 = 0u;
  v287 = 0u;
  v288 = 0u;
  v285 = 0u;
  v286 = 0u;
  v283 = 0u;
  v284 = 0u;
  buffer = 0u;
  v282 = 0u;
  v6 = *(_DWORD *)v4;
  if (*(_DWORD *)v4 > 0xDu)
    goto LABEL_87;
  v7 = v4[2];
  if (((1 << v6) & 0x3617) == 0)
  {
    if (v6 == 3)
    {
      v53 = (CA::Render *)x_stream_push(v4[2]);
      CA::Render::show_statistics(v53);
      x_stream_pop_(v7);
    }
    goto LABEL_87;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
  v8 = x_hash_table_values(CA::Render::Context::_context_table);
  if (!v8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
    goto LABEL_87;
  }
  v242 = v5;
  v252 = v8;
  v9 = v8;
  do
  {
    v10 = (unsigned int *)(*v9 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    if (!v11)
    {
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 - 1, v10));
    }
    v9 = (_QWORD *)v9[1];
  }
  while (v9);
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
  v13 = *(_DWORD *)v4;
  v14 = v252;
  v253 = v4;
  switch(v13)
  {
    case 0:
      v54 = 0;
      v55 = v252;
      do
      {
        while (1)
        {
          v56 = *v55;
          if ((*(_BYTE *)(*v55 + 13) & 2) != 0)
            break;
          if ((v54 & 1) == 0)
            x_stream_write(v7, "Unattached contexts:\n", 0x15uLL);
          v57 = *(unsigned int *)(v56 + 16);
          v58 = (unsigned int *)(v56 + 228);
          if (!atomic_load((unsigned int *)(v56 + 228)))
          {
            if (*(_DWORD *)(v56 + 252))
              v60 = 0;
            else
              v60 = getpid();
            while (!__ldaxr(v58))
            {
              if (!__stlxr(v60, v58))
                goto LABEL_102;
            }
            __clrex();
          }
LABEL_102:
          CA::Render::Context::process_path((CA::Render::Context *)v56);
          x_stream_printf(v7, "  %x: pid %d [%s]", v62, v63, v64, v65, v66, v67, v57);
          if (!*(_DWORD *)(v56 + 256))
            x_stream_write(v7, " (local)", 8uLL);
          if (*(_DWORD *)(v56 + 352))
            x_stream_write(v7, " (visible)", 0xAuLL);
          if ((*(_WORD *)(v56 + 552) & 4) != 0)
            x_stream_write(v7, " (secure)", 9uLL);
          v74 = *(float *)(v56 + 308);
          if (v74 > 1.0)
            x_stream_printf(v7, " (requested headroom: %f)", v68, v69, v70, v71, v72, v73, COERCE__INT64(v74));
          if ((*(_WORD *)(v56 + 552) & 0x800) != 0)
            x_stream_write(v7, " (decode-error)", 0xFuLL);
          v75 = *(_QWORD *)(v56 + 240);
          if (v75)
            x_stream_printf(v7, " \"%s\"", v68, v69, v70, v71, v72, v73, v75 + 28);
          v76 = *(const __CFString **)(v56 + 520);
          if (v76)
          {
            CStringPtr = CFStringGetCStringPtr(v76, 0x8000100u);
            x_stream_printf(v7, " (client-annotation: %s)", v78, v79, v80, v81, v82, v83, (uint64_t)CStringPtr);
          }
          v54 = 1;
          x_stream_write(v7, "\n", 1uLL);
          v55 = (_QWORD *)v55[1];
          if (!v55)
            goto LABEL_353;
        }
        v55 = (_QWORD *)v55[1];
      }
      while (v55);
      v14 = v252;
      if ((v54 & 1) != 0)
      {
LABEL_353:
        x_stream_write(v7, "\n", 1uLL);
        goto LABEL_75;
      }
      goto LABEL_76;
    case 1:
    case 9:
    case 10:
    case 14:
      if (v13 == 9)
        v15 = 6;
      else
        v15 = 4;
      if (v13 == 10)
        v15 = 0;
      v248 = *(_DWORD *)v4;
      v246 = v15 | (v13 == 14);
      x_stream_push(v7);
      v16 = v252;
      while (1)
      {
        v17 = *v16;
        if ((*(_BYTE *)(*v16 + 13) & 2) == 0)
        {
          v18 = v4[1];
          if (!v18 || v18 == *(_DWORD *)(v17 + 16))
            break;
        }
LABEL_73:
        v16 = (_QWORD *)v16[1];
        if (!v16)
          goto LABEL_74;
      }
      v19 = (pthread_mutex_t *)(v17 + 72);
      pthread_mutex_lock((pthread_mutex_t *)(v17 + 72));
      buffer = 0u;
      v282 = 0u;
      v283 = 0u;
      v284 = 0u;
      v285 = 0u;
      v286 = 0u;
      v287 = 0u;
      v288 = 0u;
      v289 = 0u;
      v290 = 0u;
      v291 = 0u;
      v292 = 0u;
      v293 = 0u;
      v294 = 0u;
      v295 = 0u;
      v296 = 0u;
      if (*(_QWORD *)(v17 + 448))
      {
        v20 = (const __CFString *)CGColorSpaceCopyICCProfileDescription();
        if (v20)
        {
          v21 = v20;
          CFStringGetCString(v20, (char *)&buffer, 255, 0x8000100u);
          CFRelease(v21);
        }
      }
      if (x_log_hook_p())
      {
        v257 = (pthread_mutex_t *)(v17 + 72);
        v22 = (unsigned int *)(v17 + 228);
        if (!atomic_load((unsigned int *)(v17 + 228)))
        {
          if (*(_DWORD *)(v17 + 252))
            v24 = 0;
          else
            v24 = getpid();
          while (!__ldaxr(v22))
          {
            if (!__stlxr(v24, v22))
              goto LABEL_44;
          }
          __clrex();
        }
LABEL_44:
        CA::Render::Context::process_path((CA::Render::Context *)v17);
        v34 = mach_absolute_time();
        CATimeWithHostTime(v34);
        v4 = v253;
        x_log_();
      }
      else
      {
        v25 = x_log_category_render;
        if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          goto LABEL_63;
        v255 = v25;
        v257 = (pthread_mutex_t *)(v17 + 72);
        v26 = *(_DWORD *)(v17 + 16);
        if ((_BYTE)buffer)
          v27 = "; colorspace \"";
        else
          v27 = "";
        if ((_BYTE)buffer)
          v28 = "\"";
        else
          v28 = "";
        v29 = *(float *)(v17 + 192);
        v30 = (unsigned int *)(v17 + 228);
        v31 = atomic_load((unsigned int *)(v17 + 228));
        if (!v31)
        {
          if (*(_DWORD *)(v17 + 252))
            v32 = 0;
          else
            v32 = getpid();
          while (1)
          {
            v35 = __ldaxr(v30);
            if (v35)
              break;
            if (!__stlxr(v32, v30))
            {
              v36 = 1;
              goto LABEL_50;
            }
          }
          v36 = 0;
          __clrex();
LABEL_50:
          if (v36)
            v31 = v32;
          else
            v31 = v35;
        }
        v37 = v29;
        v254 = CA::Render::Context::process_path((CA::Render::Context *)v17) + 7;
        v38 = *(_WORD *)(v17 + 552);
        v39 = "(secure) ";
        if ((v38 & 4) == 0)
          v39 = "";
        v250 = v39;
        if ((v38 & 0x10) != 0)
          v40 = "(start security analysis) ";
        else
          v40 = "";
        if ((v38 & 0x20) != 0)
          v41 = "(stop security analysis) ";
        else
          v41 = "";
        v42 = mach_absolute_time();
        v43 = CATimeWithHostTime(v42);
        buf[0].i32[0] = 67111682;
        buf[0].i32[1] = v26;
        buf[1].i16[0] = 2080;
        *(int8x8_t *)((char *)&buf[1] + 2) = (int8x8_t)v27;
        buf[2].i16[1] = 2080;
        *(int8x8_t *)((char *)&buf[2] + 4) = (int8x8_t)&buffer;
        buf[3].i16[2] = 2080;
        *(int8x8_t *)((char *)&buf[3] + 6) = (int8x8_t)v28;
        buf[4].i16[3] = 2048;
        buf[5] = *(int8x8_t *)&v37;
        v269 = 1024;
        v270 = v31;
        v271 = 2080;
        v272 = v254;
        v273 = 2080;
        v274 = v250;
        v275 = 2080;
        v276 = v40;
        v277 = 2080;
        v278 = v41;
        v279 = 2048;
        v280 = v43;
        _os_log_impl(&dword_184457000, v255, OS_LOG_TYPE_DEFAULT, "== context %x%s%s%s; level %f; pid %d [%s] %s%s%sat time %f ==\n\n",
          (uint8_t *)buf,
          0x68u);
        v4 = v253;
      }
      v19 = v257;
LABEL_63:
      v44 = CA::Render::Context::root_layer_handle((CA::Render::Context *)v17);
      if (v44 && (v45 = *(_QWORD *)(v44 + 16)) != 0)
      {
        if (v248 == 14)
        {
          *(_DWORD *)v261 = 0;
          v265[0] = 0;
          CA::Render::Layer::count_layers(v45, (int *)v261, v265, 0);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v46 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              buf[0].i32[0] = 67109376;
              buf[0].i32[1] = *(_DWORD *)v261;
              buf[1].i16[0] = 1024;
              *(__int32 *)((char *)buf[1].i32 + 2) = v265[0];
              _os_log_impl(&dword_184457000, v46, OS_LOG_TYPE_DEFAULT, "\n*** Total Layers: %d, Hidden/Culled Layers: %d ***\n\n", (uint8_t *)buf, 0xEu);
            }
          }
        }
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v45 + 40))(v45, 0, v246);
      }
      else
      {
        x_stream_write(v7, "  <null>\n", 9uLL);
      }
      x_stream_write(v7, "\n\n", 2uLL);
      pthread_mutex_unlock(v19);
      goto LABEL_73;
    case 2:
      x_stream_push(v7);
      v84 = "  slot %u:";
      i = "\n";
      v86 = v252;
      do
      {
        v87 = *v86;
        if (*(_QWORD *)(*v86 + 168) != *(_QWORD *)(*v86 + 176))
        {
          v88 = i;
          v89 = v84;
          v90 = *(unsigned int *)(v87 + 16);
          v91 = (unsigned int *)(v87 + 228);
          if (!atomic_load((unsigned int *)(v87 + 228)))
          {
            if (*(_DWORD *)(v87 + 252))
              v93 = 0;
            else
              v93 = getpid();
            while (!__ldaxr(v91))
            {
              if (!__stlxr(v93, v91))
                goto LABEL_128;
            }
            __clrex();
          }
LABEL_128:
          CA::Render::Context::process_path((CA::Render::Context *)v87);
          x_stream_printf(v7, "Context %x (pid %d [%s]):\n", v95, v96, v97, v98, v99, v100, v90);
          v101 = *(__int32 **)(v87 + 168);
          v102 = *(unsigned int **)(v87 + 176);
          v84 = v89;
          for (i = v88; v101 != (__int32 *)v102; v101 += 2)
          {
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v103 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                v104 = *v101;
                buf[0].i32[0] = 67109120;
                buf[0].i32[1] = v104;
                _os_log_impl(&dword_184457000, v103, OS_LOG_TYPE_DEFAULT, "  slot %u:", (uint8_t *)buf, 8u);
              }
            }
            CA::Render::show_newline((CA::Render *)2);
            v105 = (CA::Render *)CA::Render::Context::_slot_table;
            if (CA::Render::Context::_slot_table)
              v105 = (CA::Render *)x_hash_table_lookup(CA::Render::Context::_slot_table, *v101, 0);
            CA::Render::show_object(v105, (const CA::Render::Object *)2);
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v106 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                buf[0].i16[0] = 0;
                _os_log_impl(&dword_184457000, v106, OS_LOG_TYPE_DEFAULT, "\n", (uint8_t *)buf, 2u);
              }
            }
          }
        }
        v86 = (_QWORD *)v86[1];
      }
      while (v86);
      goto LABEL_74;
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 11:
      goto LABEL_75;
    case 4:
      x_stream_push(v7);
      v107 = v252;
      do
      {
        v108 = *v107;
        v109 = v4[1];
        if (!v109 || v109 == *(_DWORD *)(v108 + 16))
        {
          pthread_mutex_lock((pthread_mutex_t *)(v108 + 72));
          v110 = *(unsigned int *)(v108 + 16);
          v111 = (unsigned int *)(v108 + 228);
          if (!atomic_load((unsigned int *)(v108 + 228)))
          {
            if (*(_DWORD *)(v108 + 252))
              v113 = 0;
            else
              v113 = getpid();
            while (!__ldaxr(v111))
            {
              if (!__stlxr(v113, v111))
                goto LABEL_153;
            }
            __clrex();
          }
LABEL_153:
          CA::Render::Context::process_path((CA::Render::Context *)v108);
          x_stream_printf(v7, "Context %x (pid %d [%s]):\n", v115, v116, v117, v118, v119, v120, v110);
          v127 = *(unsigned int *)(v108 + 144);
          if ((_DWORD)v127)
          {
            for (j = 0; j < v127; ++j)
            {
              v129 = *(uint64_t ***)(*(_QWORD *)(v108 + 136) + 8 * j);
              if (v129)
              {
                do
                {
                  x_stream_printf(v7, "  name 0x%lx = object 0x%lx ", v121, v122, v123, v124, v125, v126, (unint64_t)v129[1] ^ 0x8000000000000000);
                  (*(void (**)(uint64_t *, _QWORD, _QWORD))(*v129[2] + 40))(v129[2], 0, 0);
                  x_stream_write(v7, "\n", 1uLL);
                  v129 = (uint64_t **)*v129;
                }
                while (v129);
                v127 = *(unsigned int *)(v108 + 144);
              }
            }
          }
          x_stream_write(v7, "\n", 1uLL);
          pthread_mutex_unlock((pthread_mutex_t *)(v108 + 72));
          v4 = v253;
        }
        v107 = (uint64_t *)v107[1];
      }
      while (v107);
      goto LABEL_74;
    case 12:
      x_stream_push(v7);
      v130 = 0;
      v131 = (CA::Render::Context **)v252;
      do
      {
        v132 = *v131;
        if ((*((_BYTE *)*v131 + 13) & 2) == 0)
        {
          if ((v130 & 1) == 0)
            x_stream_write(v7, "Unattached contexts:\n", 0x15uLL);
          CA::Render::Context::show_hosts(v132);
          v130 = 1;
        }
        v131 = (CA::Render::Context **)v131[1];
      }
      while (v131);
      goto LABEL_74;
    case 13:
      x_stream_push(v7);
      v133 = 0.0;
      v134 = &unk_1ECDC6000;
      v135 = v252;
      v136 = 0.0;
      v137 = 0.0;
      v138 = 0.0;
      break;
    default:
      goto LABEL_76;
  }
  do
  {
    memset(buf, 0, 32);
    buf[4] = (int8x8_t)1065353216;
    v139 = *v135;
    v140 = v4[1];
    if (!v140 || v140 == *(_DWORD *)(v139 + 16))
    {
      v249 = (pthread_mutex_t *)(v139 + 72);
      v251 = v135;
      pthread_mutex_lock((pthread_mutex_t *)(v139 + 72));
      v142 = *(unsigned int *)(v139 + 144);
      if ((_DWORD)v142)
      {
        v143 = 0;
        v256 = v139;
        while (1)
        {
          v144 = *(_QWORD **)(*(_QWORD *)(v139 + 136) + 8 * v143);
          if (v144)
            break;
LABEL_267:
          if (++v143 >= v142)
            goto LABEL_268;
        }
        while (1)
        {
          v145 = v144[2];
          if (*(_BYTE *)(v145 + 12) == 22)
          {
            v146 = *(_QWORD *)(v145 + 16);
            if (v146)
            {
              v147 = *(_QWORD *)(v146 + 96);
              if (v147)
              {
                if (*(_BYTE *)(v147 + 12) == 50)
                  break;
              }
            }
          }
LABEL_256:
          v144 = (_QWORD *)*v144;
          if (!v144)
          {
            v139 = v256;
            v142 = *(unsigned int *)(v256 + 144);
            goto LABEL_267;
          }
        }
        v148 = *(CA::Shape **)(v147 + 16);
        v149 = 0x9DDFEA08EB382D69 * (((8 * (_DWORD)v148) + 8) ^ ((unint64_t)v148 >> 32));
        v150 = 0x9DDFEA08EB382D69 * (((unint64_t)v148 >> 32) ^ (v149 >> 47) ^ v149);
        v151 = 0x9DDFEA08EB382D69 * (v150 ^ (v150 >> 47));
        v152 = (unint64_t)buf[1];
        if (buf[1])
        {
          v153 = (uint8x8_t)vcnt_s8(buf[1]);
          v153.i16[0] = vaddlv_u8(v153);
          if (v153.u32[0] > 1uLL)
          {
            v154 = 0x9DDFEA08EB382D69 * (v150 ^ (v150 >> 47));
            if (v151 >= *(_QWORD *)&buf[1])
              v154 = v151 % *(_QWORD *)&buf[1];
          }
          else
          {
            v154 = v151 & (*(_QWORD *)&buf[1] - 1);
          }
          v155 = *(CA::Shape ****)(*(_QWORD *)buf + 8 * v154);
          if (v155)
          {
            for (k = *v155; k; k = (CA::Shape **)*k)
            {
              v157 = k[1];
              if (v157 == (CA::Shape *)v151)
              {
                if (k[2] == v148)
                  goto LABEL_252;
              }
              else
              {
                if (v153.u32[0] > 1uLL)
                {
                  if ((unint64_t)v157 >= *(_QWORD *)&buf[1])
                    v157 = (CA::Shape *)((unint64_t)v157 % *(_QWORD *)&buf[1]);
                }
                else
                {
                  v157 = (CA::Shape *)((unint64_t)v157 & (*(_QWORD *)&buf[1] - 1));
                }
                if (v157 != (CA::Shape *)v154)
                  break;
              }
            }
          }
        }
        else
        {
          v154 = 0;
        }
        k = (CA::Shape **)operator new(0x20uLL);
        *k = 0;
        k[1] = (CA::Shape *)v151;
        k[2] = v148;
        k[3] = 0;
        v158 = (float)(unint64_t)(*(_QWORD *)&buf[3] + 1);
        if (v152 && (float)(*(float *)buf[4].i32 * (float)v152) >= v158)
        {
LABEL_242:
          v174 = buf[0];
          v175 = *(CA::Shape ****)(*(_QWORD *)buf + 8 * v154);
          if (v175)
          {
            *k = (CA::Shape *)*v175;
          }
          else
          {
            *k = (CA::Shape *)buf[2];
            buf[2] = (int8x8_t)k;
            *(_QWORD *)(*(_QWORD *)&v174 + 8 * v154) = &buf[2];
            if (!*k)
              goto LABEL_251;
            v176 = *((_QWORD *)*k + 1);
            if ((v152 & (v152 - 1)) != 0)
            {
              if (v176 >= v152)
                v176 %= v152;
            }
            else
            {
              v176 &= v152 - 1;
            }
            v175 = (CA::Shape ***)(*(_QWORD *)buf + 8 * v176);
          }
          *v175 = k;
LABEL_251:
          ++*(_QWORD *)&buf[3];
LABEL_252:
          v178 = k[3];
          v177 = k + 3;
          v179 = (CA::Shape **)(v147 + 24);
          if (v178)
            CA::shape_union(v177, v179, v141);
          else
            *v177 = (CA::Shape *)CA::Shape::new_shape((CA::Shape *)(v147 + 24), (const CA::Bounds *)v179);
          v134 = &unk_1ECDC6000;
          goto LABEL_256;
        }
        v159 = (v152 & (v152 - 1)) != 0;
        if (v152 < 3)
          v159 = 1;
        v160 = v159 | (2 * v152);
        v161 = vcvtps_u32_f32(v158 / *(float *)buf[4].i32);
        if (v160 <= v161)
          prime = (int8x8_t)v161;
        else
          prime = (int8x8_t)v160;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
          v152 = (unint64_t)buf[1];
        }
        if (*(_QWORD *)&prime > v152)
          goto LABEL_208;
        if (*(_QWORD *)&prime < v152)
        {
          v169 = vcvtps_u32_f32((float)(unint64_t)buf[3] / *(float *)buf[4].i32);
          if (v152 < 3
            || (v170 = (uint8x8_t)vcnt_s8((int8x8_t)v152), v170.i16[0] = vaddlv_u8(v170), v170.u32[0] > 1uLL))
          {
            v169 = std::__next_prime(v169);
          }
          else
          {
            v171 = 1 << -(char)__clz(v169 - 1);
            if (v169 >= 2)
              v169 = v171;
          }
          if (*(_QWORD *)&prime <= v169)
            prime = (int8x8_t)v169;
          if (*(_QWORD *)&prime >= v152)
          {
            v152 = (unint64_t)buf[1];
          }
          else
          {
            if (prime)
            {
LABEL_208:
              if (*(_QWORD *)&prime >> 61)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v163 = operator new(8 * *(_QWORD *)&prime);
              v164 = (void *)buf[0];
              buf[0] = (int8x8_t)v163;
              if (v164)
                operator delete(v164);
              v165 = 0;
              buf[1] = prime;
              do
                *(_QWORD *)(*(_QWORD *)buf + 8 * v165++) = 0;
              while (*(_QWORD *)&prime != v165);
              v166 = (_QWORD **)buf[2];
              if (buf[2])
              {
                v167 = *(_QWORD *)(*(_QWORD *)&buf[2] + 8);
                v168 = (uint8x8_t)vcnt_s8(prime);
                v168.i16[0] = vaddlv_u8(v168);
                if (v168.u32[0] > 1uLL)
                {
                  if (v167 >= *(_QWORD *)&prime)
                    v167 %= *(_QWORD *)&prime;
                }
                else
                {
                  v167 &= *(_QWORD *)&prime - 1;
                }
                *(_QWORD *)(*(_QWORD *)buf + 8 * v167) = &buf[2];
                for (m = *v166; m; v167 = v173)
                {
                  v173 = m[1];
                  if (v168.u32[0] > 1uLL)
                  {
                    if (v173 >= *(_QWORD *)&prime)
                      v173 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v173 &= *(_QWORD *)&prime - 1;
                  }
                  if (v173 != v167)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)buf + 8 * v173))
                    {
                      *(_QWORD *)(*(_QWORD *)buf + 8 * v173) = v166;
                      goto LABEL_233;
                    }
                    *v166 = (_QWORD *)*m;
                    *m = **(_QWORD **)(*(_QWORD *)buf + 8 * v173);
                    **(_QWORD **)(*(_QWORD *)buf + 8 * v173) = m;
                    m = v166;
                  }
                  v173 = v167;
LABEL_233:
                  v166 = (_QWORD **)m;
                  m = (_QWORD *)*m;
                }
              }
              v152 = (unint64_t)prime;
              goto LABEL_237;
            }
            v180 = (void *)buf[0];
            buf[0] = 0;
            if (v180)
              operator delete(v180);
            v152 = 0;
            buf[1] = 0;
          }
        }
LABEL_237:
        if ((v152 & (v152 - 1)) != 0)
        {
          if (v151 >= v152)
            v154 = v151 % v152;
          else
            v154 = v151;
        }
        else
        {
          v154 = (v152 - 1) & v151;
        }
        goto LABEL_242;
      }
LABEL_268:
      if (buf[3])
      {
        v181 = *(unsigned int *)(v139 + 16);
        v182 = (unsigned int *)(v139 + 228);
        if (!atomic_load((unsigned int *)(v139 + 228)))
        {
          if (*(_DWORD *)(v139 + 252))
            v184 = 0;
          else
            v184 = getpid();
          while (!__ldaxr(v182))
          {
            if (!__stlxr(v184, v182))
              goto LABEL_278;
          }
          __clrex();
        }
LABEL_278:
        v243 = v138;
        v244 = v136;
        v245 = v137;
        v247 = v133;
        CA::Render::Context::process_path((CA::Render::Context *)v139);
        x_stream_printf(v7, "\nContext %x (pid %d [%s]):", v187, v188, v189, v190, v191, v192, v181);
        v193 = (_QWORD *)buf[2];
        if (buf[2])
        {
          v194 = 0.0;
          v195 = 0.0;
          v196 = 0.0;
          v197 = 0.0;
          do
          {
            v198 = (_DWORD *)v193[2];
            if (v198)
            {
              v199 = (CA::Shape *)v193[3];
              v260 = v199;
              CA::Render::show_newline((CA::Render *)1);
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                v200 = *((_QWORD *)v134 + 56);
                if (os_log_type_enabled(v200, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)v261 = 0;
                  _os_log_impl(&dword_184457000, v200, OS_LOG_TYPE_DEFAULT, "Texture ", v261, 2u);
                }
              }
              (*(void (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v198 + 40))(v198, 1, 0);
              v258 = 0;
              v259 = 0;
              *(_QWORD *)v265 = v199;
              v266 = 0;
              v267 = 0;
              while (1)
              {
                v201 = CA::ShapeIterator::iterate((uint64_t *)v265, (int *)&v258);
                CA::Render::show_newline((CA::Render *)2);
                if (!v201)
                  break;
                if (x_log_hook_p())
                {
                  x_log_();
                }
                else
                {
                  v203 = *((_QWORD *)v134 + 56);
                  if (os_log_type_enabled(v203, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)v261 = 67109888;
                    *(_DWORD *)v262 = (_DWORD)v258;
                    *(_WORD *)&v262[4] = 1024;
                    *(_DWORD *)&v262[6] = HIDWORD(v258);
                    LOWORD(v263) = 1024;
                    *(_DWORD *)((char *)&v263 + 2) = v259;
                    HIWORD(v263) = 1024;
                    *(_DWORD *)v264 = HIDWORD(v259);
                    _os_log_impl(&dword_184457000, v203, OS_LOG_TYPE_DEFAULT, "[%d %d %d %d]", v261, 0x1Au);
                  }
                }
                CA::shape_union(&v260, &v258, v202);
              }
              v204 = (double)(v198[5] * v198[4]);
              v205 = v260;
              v206 = (double)CA::Shape::area(v260);
              v207 = (double)(unint64_t)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v198 + 168))(v198);
              v208 = v207 * v206 / v204;
              if (x_log_hook_p())
              {
                v209 = trunc(v207 - v208);
                if ((unint64_t)(v207 - v208) >= 0x400)
                {
                  v214 = 1.0;
                  do
                    v214 = v214 * 0.0009765625;
                  while (v214 * v209 >= 1024.0);
                }
                x_log_();
              }
              else
              {
                v210 = *((_QWORD *)v134 + 56);
                if (os_log_type_enabled(v210, OS_LOG_TYPE_DEFAULT))
                {
                  v211 = (unint64_t)(v207 - v208);
                  v212 = trunc(v207 - v208);
                  if (v211 >= 0x400)
                  {
                    v215 = 1.0;
                    do
                    {
                      v215 = v215 * 0.0009765625;
                      v213 = v215 * v212;
                    }
                    while (v215 * v212 >= 1024.0);
                  }
                  else
                  {
                    v213 = v212;
                  }
                  v216 = v211 > 0x3FF;
                  if ((v211 & 0xFFFFFFFFFFF00000) != 0)
                    ++v216;
                  if ((v211 & 0xFFFFFFFFC0000000) != 0)
                    ++v216;
                  if (v211 >> 40)
                    ++v216;
                  if (v211 >> 50)
                    ++v216;
                  if (v211 >> 60)
                    v217 = v216 + 1;
                  else
                    v217 = v216;
                  v218 = off_1E15AAF00[v217];
                  *(_DWORD *)v261 = 134218498;
                  *(double *)v262 = v206 * 100.0 / v204;
                  *(_WORD *)&v262[8] = 2048;
                  v263 = v213;
                  *(_WORD *)v264 = 2080;
                  *(_QWORD *)&v264[2] = v218;
                  _os_log_impl(&dword_184457000, v210, OS_LOG_TYPE_DEFAULT, "Utilization: %.2f%%, wasted memory: %.2lf %s\n", v261, 0x20u);
                }
              }
              CA::Shape::unref(v205);
              v197 = v197 + v207;
              v196 = v208 + v196;
              v195 = v195 + v204;
              v194 = v194 + v206;
            }
            v193 = (_QWORD *)*v193;
          }
          while (v193);
          v4 = v253;
          v185 = v249;
          v135 = v251;
          if (v195 != 0.0)
          {
            if (x_log_hook_p())
            {
              v219 = trunc(v197 - v196);
              if ((unint64_t)(v197 - v196) >= 0x400)
              {
                v224 = 1.0;
                do
                  v224 = v224 * 0.0009765625;
                while (v224 * v219 >= 1024.0);
              }
              x_log_();
            }
            else
            {
              v220 = *((_QWORD *)v134 + 56);
              if (os_log_type_enabled(v220, OS_LOG_TYPE_DEFAULT))
              {
                v221 = (unint64_t)(v197 - v196);
                v222 = trunc(v197 - v196);
                if (v221 >= 0x400)
                {
                  v225 = 1.0;
                  do
                  {
                    v225 = v225 * 0.0009765625;
                    v223 = v225 * v222;
                  }
                  while (v225 * v222 >= 1024.0);
                }
                else
                {
                  v223 = v222;
                }
                v226 = v221 > 0x3FF;
                if ((v221 & 0xFFFFFFFFFFF00000) != 0)
                  ++v226;
                if ((v221 & 0xFFFFFFFFC0000000) != 0)
                  ++v226;
                if (v221 >> 40)
                  ++v226;
                if (v221 >> 50)
                  ++v226;
                if (v221 >> 60)
                  v227 = v226 + 1;
                else
                  v227 = v226;
                v228 = off_1E15AAF00[v227];
                *(_DWORD *)v261 = 134218498;
                *(double *)v262 = v194 * 100.0 / v195;
                *(_WORD *)&v262[8] = 2048;
                v263 = v223;
                *(_WORD *)v264 = 2080;
                *(_QWORD *)&v264[2] = v228;
                _os_log_impl(&dword_184457000, v220, OS_LOG_TYPE_DEFAULT, "\n  Context utilization: %.2f%%, wasted memory: %.2lf %s\n", v261, 0x20u);
              }
            }
          }
        }
        else
        {
          v194 = 0.0;
          v195 = 0.0;
          v196 = 0.0;
          v197 = 0.0;
          v4 = v253;
          v185 = v249;
          v135 = v251;
        }
        v138 = v197 + v243;
        v137 = v196 + v245;
        v136 = v195 + v244;
        v133 = v194 + v247;
        x_stream_write(v7, "\n", 1uLL);
      }
      else
      {
        v4 = v253;
        v185 = v249;
        v135 = v251;
      }
      pthread_mutex_unlock(v185);
      v229 = (_QWORD *)buf[2];
      if (buf[2])
      {
        do
        {
          v230 = (_QWORD *)*v229;
          operator delete(v229);
          v229 = v230;
        }
        while (v230);
      }
    }
    v231 = (void *)buf[0];
    buf[0] = 0;
    if (v231)
      operator delete(v231);
    v135 = (_QWORD *)v135[1];
  }
  while (v135);
  if (v136 != 0.0)
  {
    if (x_log_hook_p())
    {
      v232 = trunc(v138 - v137);
      if ((unint64_t)(v138 - v137) >= 0x400)
      {
        v237 = 1.0;
        do
          v237 = v237 * 0.0009765625;
        while (v237 * v232 >= 1024.0);
      }
      x_log_();
    }
    else
    {
      v233 = *((_QWORD *)v134 + 56);
      if (os_log_type_enabled(v233, OS_LOG_TYPE_DEFAULT))
      {
        v234 = (unint64_t)(v138 - v137);
        v235 = trunc(v138 - v137);
        if (v234 >= 0x400)
        {
          v238 = 1.0;
          do
          {
            v238 = v238 * 0.0009765625;
            v236 = v238 * v235;
          }
          while (v238 * v235 >= 1024.0);
        }
        else
        {
          v236 = v235;
        }
        v239 = v234 > 0x3FF;
        if ((v234 & 0xFFFFFFFFFFF00000) != 0)
          ++v239;
        if ((v234 & 0xFFFFFFFFC0000000) != 0)
          ++v239;
        if (v234 >> 40)
          ++v239;
        if (v234 >> 50)
          ++v239;
        if (v234 >> 60)
          v240 = v239 + 1;
        else
          v240 = v239;
        v241 = off_1E15AAF00[v240];
        buf[0].i32[0] = 134218498;
        *(double *)((char *)buf + 4) = v133 * 100.0 / v136;
        buf[1].i16[2] = 2048;
        *(int8x8_t *)((char *)&buf[1] + 6) = *(int8x8_t *)&v236;
        buf[2].i16[3] = 2080;
        buf[3] = (int8x8_t)v241;
        _os_log_impl(&dword_184457000, v233, OS_LOG_TYPE_DEFAULT, "Total utilization: %.2f%%, wasted memory: %.2lf %s\n\n", (uint8_t *)buf, 0x20u);
      }
    }
  }
LABEL_74:
  x_stream_pop_(v7);
LABEL_75:
  v14 = v252;
  do
  {
LABEL_76:
    v47 = *v14;
    v48 = (unsigned int *)(*v14 + 8);
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
    v14 = (_QWORD *)v14[1];
  }
  while (v14);
  v5 = v242;
  v51 = v252;
  do
  {
    v52 = (_QWORD *)v51[1];
    free(v51);
    v51 = v52;
  }
  while (v52);
LABEL_87:
  objc_autoreleasePoolPop(v5);
}

_DWORD *CA::Render::Context::copy_all_contexts(CA::Render::Context *this)
{
  uint64_t v1;
  uint64_t v2;
  CA::Render::Array *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  CA::Render::Array *v15;
  _DWORD *v16;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
  v2 = CA::Render::Context::_context_table;
  if (!CA::Render::Context::_context_table)
    goto LABEL_16;
  v3 = *(CA::Render::Array **)(CA::Render::Context::_context_table + 24);
  v4 = 24 * (_QWORD)v3;
  if ((unint64_t)(24 * (_QWORD)v3) <= 0x1000)
  {
    MEMORY[0x1E0C80A78](v1);
    v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v5, 24 * (_QWORD)v3);
    goto LABEL_6;
  }
  v6 = (char *)malloc_type_malloc(24 * (_QWORD)v3, 0xF0E86077uLL);
  if (!v6)
  {
LABEL_16:
    v16 = 0;
    goto LABEL_18;
  }
  v5 = v6;
  v2 = CA::Render::Context::_context_table;
LABEL_6:
  v7 = 0;
  v8 = 1 << *(_DWORD *)v2;
  v9 = v5;
  do
  {
    v10 = *(_QWORD **)(*(_QWORD *)(v2 + 16) + 8 * v7);
    if (v10)
    {
      do
      {
        *v9 = v10[2];
        v11 = v9 + 2;
        v9[1] = v10[3];
        v10 = (_QWORD *)*v10;
        v9 += 2;
      }
      while (v10);
      v9 = v11;
    }
    ++v7;
  }
  while (v7 != v8);
  v12 = &v5[16 * (_QWORD)v3];
  if (v3)
  {
    v13 = 16 * (_QWORD)v3;
    v14 = 8;
    v15 = v3;
    do
    {
      *(_QWORD *)&v5[v13] = *(_QWORD *)&v5[v14];
      v13 += 8;
      v14 += 16;
      v15 = (CA::Render::Array *)((char *)v15 - 1);
    }
    while (v15);
    v16 = CA::Render::Array::new_array(v3, v12, (CA::Render::Object *const *)1, 0);
    if (v4 > 0x1000)
      free(v5);
  }
  else
  {
    v16 = CA::Render::Array::new_array(0, v12, (CA::Render::Object *const *)1, 0);
  }
LABEL_18:
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
  return v16;
}

uint64_t CA::Render::Context::show_source_layer(uint64_t this, CA::Render::Object *a2, CA::Render *a3, int a4)
{
  CA::Render::Context *v7;
  pthread_mutex_t *v8;
  CA::Render::Object *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint8_t v16[16];
  uint8_t buf[8];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((a4 & 4) == 0)
  {
    this = CA::Render::Context::context_by_id((CA::Render::Context *)this);
    if (this)
    {
      v7 = (CA::Render::Context *)this;
      v8 = (pthread_mutex_t *)(this + 72);
      pthread_mutex_lock((pthread_mutex_t *)(this + 72));
      v9 = CA::Render::Context::lookup_handle(v7, a2, 0, 0, 0);
      if (v9)
      {
        v10 = *((_QWORD *)v9 + 2);
        if (v10)
        {
          CA::Render::show_newline(a3);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v11 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184457000, v11, OS_LOG_TYPE_DEFAULT, "(source ", buf, 2u);
            }
          }
          (*(void (**)(uint64_t, CA::Render *, _QWORD))(*(_QWORD *)v10 + 40))(v10, a3, a4 | 4u);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v12 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v16 = 0;
              _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_DEFAULT, ")", v16, 2u);
            }
          }
        }
      }
      this = pthread_mutex_unlock(v8);
      v13 = (unsigned int *)((char *)v7 + 8);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        return (*(uint64_t (**)(CA::Render::Context *))(*(_QWORD *)v7 + 16))(v7);
    }
  }
  return this;
}

void CA::Render::Context::schedule_destroy(void)::$_0::__invoke(CA::Render::Context *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  CA::Render::Context::destroy(a1);
  v2 = (unsigned int *)((char *)a1 + 8);
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
    (*(void (**)(CA::Render::Context *))(*(_QWORD *)a1 + 16))(a1);
}

void std::__throw_bad_function_call[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  JUMPOUT(0x184617FF0);
}

void std::__function::__func<CA::Render::Context::secure_mode_violations(void)::$_0,std::allocator<CA::Render::Context::secure_mode_violations(void)::$_0>,void ()(unsigned int,CA::Render::Context*)>::~__func()
{
  JUMPOUT(0x186DBD990);
}

_QWORD *std::__function::__func<CA::Render::Context::secure_mode_violations(void)::$_0,std::allocator<CA::Render::Context::secure_mode_violations(void)::$_0>,void ()(unsigned int,CA::Render::Context*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E159A4A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CA::Render::Context::secure_mode_violations(void)::$_0,std::allocator<CA::Render::Context::secure_mode_violations(void)::$_0>,void ()(unsigned int,CA::Render::Context*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E159A4A0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<CA::Render::Context::secure_mode_violations(void)::$_0,std::allocator<CA::Render::Context::secure_mode_violations(void)::$_0>,void ()(unsigned int,CA::Render::Context*)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  char **v4;
  unsigned int *v5;
  unsigned int v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a3;
  if ((*(_BYTE *)(*a3 + 14) & 4) != 0)
  {
    v4 = *(char ***)(a1 + 8);
    v5 = (unsigned int *)(v3 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    if (!v6)
    {
      v3 = 0;
      do
        v18 = __ldaxr(v5);
      while (__stlxr(v18 - 1, v5));
    }
    v8 = v4[1];
    v7 = (unint64_t)v4[2];
    if ((unint64_t)v8 >= v7)
    {
      v10 = *v4;
      v11 = (v8 - *v4) >> 3;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        abort();
      v13 = v7 - (_QWORD)v10;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v15 = (char *)operator new(8 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * v11];
      *(_QWORD *)v16 = v3;
      v9 = v16 + 8;
      if (v8 != v10)
      {
        do
        {
          v17 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v16 - 1) = v17;
          v16 -= 8;
        }
        while (v8 != v10);
        v8 = *v4;
      }
      *v4 = v16;
      v4[1] = v9;
      v4[2] = &v15[8 * v14];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *(_QWORD *)v8 = v3;
      v9 = v8 + 8;
    }
    v4[1] = v9;
  }
}

void CA::Render::collect_insecure_process_ids(CA::Render *this, uint64_t a2, CA::Render::Context *a3, void *a4)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  unsigned int *v12;
  _DWORD *v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unsigned int *v20;
  unsigned int v21;

  if ((*(_BYTE *)(a2 + 14) & 4) != 0)
  {
    v6 = (unsigned int *)(a2 + 228);
    v7 = atomic_load((unsigned int *)(a2 + 228));
    if (v7)
      goto LABEL_14;
    v8 = *(_DWORD *)(a2 + 252) ? 0 : getpid();
    while (1)
    {
      v9 = __ldaxr(v6);
      if (v9)
        break;
      if (!__stlxr(v8, v6))
      {
        v10 = 1;
        goto LABEL_10;
      }
    }
    v10 = 0;
    __clrex();
LABEL_10:
    v7 = v10 ? v8 : v9;
    if (v7)
    {
LABEL_14:
      v12 = (unsigned int *)*((_QWORD *)a3 + 1);
      v11 = *((_QWORD *)a3 + 2);
      if ((unint64_t)v12 >= v11)
      {
        v14 = *(unsigned int **)a3;
        v15 = ((uint64_t)v12 - *(_QWORD *)a3) >> 2;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
          abort();
        v17 = v11 - (_QWORD)v14;
        if (v17 >> 1 > v16)
          v16 = v17 >> 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          if (v18 >> 62)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v19 = (char *)operator new(4 * v18);
        }
        else
        {
          v19 = 0;
        }
        v20 = (unsigned int *)&v19[4 * v15];
        *v20 = v7;
        v13 = v20 + 1;
        while (v12 != v14)
        {
          v21 = *--v12;
          *--v20 = v21;
        }
        *(_QWORD *)a3 = v20;
        *((_QWORD *)a3 + 1) = v13;
        *((_QWORD *)a3 + 2) = &v19[4 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v12 = v7;
        v13 = v12 + 1;
      }
      *((_QWORD *)a3 + 1) = v13;
    }
    *(_DWORD *)(a2 + 12) &= ~0x40000u;
  }
}

void std::__hash_table<CA::Render::String *,std::hash<CA::Render::String *>,std::equal_to<CA::Render::String *>,std::allocator<CA::Render::String *>>::__emplace_unique_key_args<CA::Render::String *,CA::Render::String * const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;

  v5 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v6 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v5 >> 47) ^ v5);
  v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
      if (v7 >= v8)
        v10 = v7 % v8;
    }
    else
    {
      v10 = v7 & (v8 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v7)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= v8)
              v13 %= v8;
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v10)
            break;
        }
      }
    }
  }
  else
  {
    v10 = 0;
  }
  v14 = operator new(0x18uLL);
  v14[1] = v7;
  v14[2] = a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v10 = v7 % v8;
      else
        v10 = v7;
    }
    else
    {
      v10 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
  if (v22)
  {
    *v14 = *v22;
LABEL_38:
    *v22 = v14;
    goto LABEL_39;
  }
  v23 = *(_QWORD *)(a1 + 16);
  *v14 = v23;
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v21 + 8 * v10) = a1 + 16;
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v24 >= v8)
        v24 %= v8;
    }
    else
    {
      v24 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void CA::Render::Context::enqueue_command_stream(CA::Render::Context::CommandStream *)::$_0::__invoke(os_unfair_lock_s *a1, double a2)
{
  os_unfair_lock_s *v4;
  unsigned int *p_os_unfair_lock_opaque;
  unsigned int v6;
  unsigned int v7;

  v4 = a1 + 170;
  os_unfair_lock_lock(a1 + 170);
  CA::Render::Context::drain_deferred((uint64_t)a1, a2);
  os_unfair_lock_unlock(v4);
  p_os_unfair_lock_opaque = &a1[2]._os_unfair_lock_opaque;
  do
  {
    v6 = __ldaxr(p_os_unfair_lock_opaque);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, p_os_unfair_lock_opaque));
  if (!v7)
    (*(void (**)(os_unfair_lock_s *))(*(_QWORD *)&a1->_os_unfair_lock_opaque + 16))(a1);
}

void CA::Render::Context::did_commit(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  CA::Render::Object *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint8_t v29[8];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v12 = *(unsigned int **)(a1 + 432);
  v13 = (unsigned int *)(a1 + 440);
  do
  {
    v14 = __ldaxr(v13);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v13));
  if (!v15)
    *(_QWORD *)(a1 + 432) = 0;
  ++*(_DWORD *)(a1 + 40);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 72));
  if ((_DWORD)a2)
    CA::Render::Context::mark_changed(a1, a5, a6, a3, a4);
  if ((_DWORD)a5 && BYTE9(xmmword_1ECDC6A90))
    kdebug_trace();
  if (*(_QWORD *)(a1 + 416) | (unint64_t)v12)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
    v16 = *(_QWORD *)(a1 + 416);
    if (v16)
    {
      if ((*(_BYTE *)(v16 + 13) & 4) != 0)
      {
        if ((_DWORD)a2)
        {
          v17 = *(_QWORD *)(v16 + 32);
          if (v17)
          {
            v18 = *(_QWORD *)(v17 + 24);
            if (v18)
              (*(void (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
          }
        }
      }
      else
      {
        if (*(unsigned int **)(v16 + 80) != v12)
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v19 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v29 = 0;
              _os_log_impl(&dword_184457000, v19, OS_LOG_TYPE_DEFAULT, "CoreAnimation: context hosting changed while locked!\n", v29, 2u);
            }
          }
        }
        v20 = *(CA::Render::Object **)(*(_QWORD *)(a1 + 416) + 24);
        if (v20)
        {
          v21 = (unsigned int *)((char *)v20 + 8);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 + 1, v21));
          if (v22)
          {
            CA::Render::Handle::set_update_flags(v20, 4);
            do
            {
              v23 = __ldaxr(v21);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v21));
            if (!v24)
              (*(void (**)(CA::Render::Object *))(*(_QWORD *)v20 + 16))(v20);
          }
          else
          {
            do
              v28 = __ldaxr(v21);
            while (__stlxr(v28 - 1, v21));
          }
        }
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
    if (v12)
    {
      CA::Render::Context::did_commit(v12, a2, a3, a4, a5, a6);
      v25 = v12 + 2;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 16))(v12);
    }
  }
  if ((*(_WORD *)(a1 + 552) & 0x40) == 0)
    CA::Render::post_notification(5u, a1, 0, 0);
}

void CA::Render::Context::mark_changed(unint64_t a1, int a2, char a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(a1 + 44);
  if ((*(_WORD *)(a1 + 552) & 0x40) == 0)
  {
    v6[0] = a2;
    if (a2)
      *(double *)&a4 = -1.0;
    BYTE1(v6[0]) = a3;
    v6[1] = a4;
    v6[2] = a5;
    CA::Render::post_notification(0, a1, (uint64_t)v6, 0);
  }
}

void CA::Render::sync_req_timeout(os_unfair_lock_s *this, double a2, void *a3)
{
  os_unfair_lock_s *v5;
  unsigned int *p_os_unfair_lock_opaque;
  unsigned int v7;
  unsigned int v8;

  v5 = this + 13;
  os_unfair_lock_lock(this + 13);
  CA::Render::Context::check_sync_reqs((CA::Render::Context *)this, a2);
  os_unfair_lock_unlock(v5);
  p_os_unfair_lock_opaque = &this[2]._os_unfair_lock_opaque;
  do
  {
    v7 = __ldaxr(p_os_unfair_lock_opaque);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, p_os_unfair_lock_opaque));
  if (!v8)
    (*(void (**)(os_unfair_lock_s *))(*(_QWORD *)&this->_os_unfair_lock_opaque + 16))(this);
}

void ___ZN2CA6Render7Context19request_synchronizeEjijjb_block_invoke(uint64_t a1, void *a2)
{
  CA::Render::sync_req_timeout(*(os_unfair_lock_s **)(a1 + 40), *(double *)(a1 + 32), a2);
}

void CA::Render::Context::set_client_annotation(CA::Render::Context *this, CFTypeRef cf)
{
  const void *v4;

  v4 = (const void *)*((_QWORD *)this + 65);
  if (v4)
    CFRelease(v4);
  if (cf)
  {
    *((_QWORD *)this + 65) = cf;
    CFRetain(cf);
  }
  else
  {
    *((_QWORD *)this + 65) = 0;
  }
}

uint64_t CA::Render::Context::hit_test(uint64_t a1)
{
  char v1;
  char v2;
  float64x2_t *v3;
  float64x2_t *v4;
  double *v5;
  double *v6;
  double v7;
  CA::Render::LayerNode *v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  __int128 buf;
  _QWORD v22[27];
  uint64_t v23;
  uint64_t *v24;
  int v25;
  int v26;
  char v27[8192];
  uint64_t v28;

  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v28 = *MEMORY[0x1E0C80C00];
  bzero(v22, 0x430uLL);
  v7 = v6[70];
  *(int32x2_t *)&buf = vmovn_s64(vcvtq_s64_f64(*v4));
  *((_QWORD *)&buf + 1) = 0x100000001;
  CA::Render::Update::Update((CA::Render::Update *)v22, (const CA::Bounds *)v27, 0x2000uLL, v7, 0, 0, 0, 0, (const CA::Bounds *)&buf, 0);
  if (v22[0])
  {
    v9 = byte_1ECDC6AAF;
    if (byte_1ECDC6AAF)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v11 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 67109120;
          DWORD1(buf) = v25;
          _os_log_impl(&dword_184457000, v11, OS_LOG_TYPE_DEFAULT, "HitTest: starting (%u)", (uint8_t *)&buf, 8u);
        }
      }
    }
    v26 |= 0x8014u;
    CA::Render::Update::add_context((CA::Render::Update *)v22, (CA::Render::Context *)v6);
    v13 = v24;
    if (v24 == &v23)
    {
LABEL_15:
      v10 = 0;
    }
    else
    {
      v14 = 2 * (v2 & 1);
      while (1)
      {
        v15 = CA::Render::LayerNode::hit_test_((uint64_t)v13, v4, v14, v12);
        if (v15)
          break;
LABEL_14:
        v13 = (uint64_t *)v13[1];
        if (v13 == &v23)
          goto LABEL_15;
      }
      v10 = v15;
      while (!*(_QWORD *)(*(_QWORD *)(v10 + 32) + 144))
      {
        v10 = *(_QWORD *)(v10 + 88);
        if (!v10)
          goto LABEL_14;
      }
    }
    if (v9)
    {
      if (v10)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v16 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 144) + 16) + 120);
            if (v17)
            {
              v18 = *(_DWORD *)(v17 + 24);
              v17 += 28;
              if (!v18)
                v17 = 0;
            }
            LODWORD(buf) = 136315138;
            *(_QWORD *)((char *)&buf + 4) = v17;
            _os_log_impl(&dword_184457000, v16, OS_LOG_TYPE_DEFAULT, "HitTest: got layer \"%s\"", (uint8_t *)&buf, 0xCu);
          }
        }
      }
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v19 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 67109120;
          DWORD1(buf) = v25;
          _os_log_impl(&dword_184457000, v19, OS_LOG_TYPE_DEFAULT, "HitTest: ending (%u)", (uint8_t *)&buf, 8u);
        }
      }
    }
    if (v10)
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 144) + 16);
  }
  else
  {
    v10 = 0;
  }
  CA::Render::Update::~Update((CA::Render::Update *)v22, v8);
  return v10;
}

uint64_t CA::Render::Context::hit_test_context(uint64_t a1)
{
  uint64_t v1;
  CA::Render::Handle *v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v1 = CA::Render::Context::hit_test(a1);
  if (!v1)
    return 0;
  v2 = *(CA::Render::Handle **)(v1 + 144);
  if (!v2)
    return 0;
  v3 = (unsigned int *)CA::Render::Handle::retain_context(v2);
  if (!v3)
    return 0;
  v4 = v3[4];
  v5 = v3 + 2;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
    (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  return v4;
}

uint64_t CA::Render::Context::get_layer_renderer_info(CA::Render::Context *this, CA::Render::Object *a2, int a3, int *a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t result;
  int v10;

  result = (uint64_t)CA::Render::Context::lookup_handle(this, a2, a3, 0, 0);
  if (result)
  {
    v10 = *(_DWORD *)(result + 120);
    if (v10 >= *(_DWORD *)(result + 124))
      v10 = *(_DWORD *)(result + 124);
    if (v10 < 1)
    {
      return 0;
    }
    else
    {
      *a4 = *(_DWORD *)(result + 92) >> 28;
      *a5 = *(_DWORD *)(result + 92) & 0x1FFFF;
      *a6 = (*(_DWORD *)(result + 92) >> 17) & 0x7FF;
      return 1;
    }
  }
  return result;
}

void CA::Render::Context::order_relative(CA::Render::Context *this, int a2, int a3)
{
  void **v4;
  const __CFAllocator *v5;
  CFDictionaryRef v6;
  int valuePtr;
  void *values;
  CFTypeRef cf;
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  valuePtr = a3;
  v4 = (void **)MEMORY[0x1E0C9AE50];
  if (!a2)
    v4 = (void **)MEMORY[0x1E0C9AE40];
  values = *v4;
  keys[0] = CFSTR("above");
  keys[1] = CFSTR("siblingId");
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE18];
  cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE18], kCFNumberSInt32Type, &valuePtr);
  v6 = CFDictionaryCreate(v5, (const void **)keys, (const void **)&values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFRelease(cf);
  CA::Render::post_notification(8u, (unint64_t)this, (uint64_t)v6, 0);
  CFRelease(v6);
}

CA::Render::Object *CA::Render::Context::update_layer(CA::Render::Context *this, CA::Render::Object *a2)
{
  CA::Render::Object *result;

  result = CA::Render::Context::lookup_handle(this, a2, 0, 0, 0);
  if (result)
    return CA::Render::Handle::set_update_flags(result, 7);
  return result;
}

void CA::Render::Context::remove_all_animations(CA::Render::Context *this, CA::Render::Object *a2)
{
  CA::Render::Object *v2;
  CA::Render::Animation *v3;
  CA::Render::Object *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  CA::Render *v16;
  const CA::Render::Object *v17;
  NSObject *v18;
  int v19;
  int v20;
  char *v21;
  int v22;
  uint64_t v23;
  char *v24;
  int v25;
  unsigned int v26;
  int v28;
  NSObject *v29;
  const char *v30;
  void **v31;
  uint8_t buf[4];
  double v33;
  __int16 v34;
  int v35;
  __int16 v36;
  char *v37;
  __int16 v38;
  CA::Render::Object *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v2 = CA::Render::Context::lookup_handle(this, a2, 0, 0, 0);
  if (v2)
  {
    v4 = v2;
    v5 = *((_QWORD *)v2 + 6);
    if (v5)
    {
      if (!byte_1ECDC6A67)
        goto LABEL_4;
      x_log_begin();
      if (x_log_hook_p())
      {
        v8 = mach_absolute_time();
        CATimeWithHostTime(v8);
        x_log_();
      }
      else
      {
        v9 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v10 = mach_absolute_time();
          v11 = CATimeWithHostTime(v10);
          v12 = *((_QWORD *)v4 + 3);
          if (v12)
            LODWORD(v12) = *(_DWORD *)(v12 + 16);
          v13 = *((_QWORD *)v4 + 2);
          if (v13)
          {
            v14 = *(_QWORD *)(v13 + 120);
            if (v14)
              v13 = v14 + 28;
            else
              v13 = 0;
          }
          *(_DWORD *)buf = 134218754;
          v33 = v11;
          v34 = 1024;
          v35 = v12;
          v36 = 2080;
          v37 = (char *)v13;
          v38 = 2048;
          v39 = v4;
          _os_log_impl(&dword_184457000, v9, OS_LOG_TYPE_DEFAULT, "%f %x \"%s\" (%p): removing all:\n", buf, 0x26u);
        }
      }
      for (i = *((_QWORD *)v4 + 6); i; i = *(_QWORD *)(i + 8))
      {
        v16 = *(CA::Render **)i;
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v18 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            v19 = *((_DWORD *)v16 + 20);
            v20 = *((_DWORD *)v16 + 21);
            *(_DWORD *)buf = 134218496;
            v33 = *(double *)&v16;
            v34 = 1024;
            v35 = v19;
            v36 = 1024;
            LODWORD(v37) = v20;
            _os_log_impl(&dword_184457000, v18, OS_LOG_TYPE_DEFAULT, "%p (eval %u; frames %u):\n", buf, 0x18u);
          }
        }
        CA::Render::show_object(v16, v17);
      }
      v31 = (void **)x_stream_pop_(0);
      v21 = x_stream_get(v31);
      v22 = 0;
LABEL_28:
      v23 = 0;
      v24 = &v21[v22];
      v25 = -1;
      while (1)
      {
        if (v24[v23] == 10)
        {
          v25 = v23;
        }
        else if (!v24[v23])
        {
          v26 = v23;
LABEL_34:
          if (v25 <= -1 || v24[v26] == 0)
            v28 = v26;
          else
            v28 = v25 + 1;
          if (v28 >= 1)
          {
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v29 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315650;
                if (v22)
                  v30 = "continued...\n";
                else
                  v30 = "";
                v33 = *(double *)&v30;
                v34 = 1040;
                v35 = v28;
                v36 = 2080;
                v37 = &v21[v22];
                _os_log_impl(&dword_184457000, v29, OS_LOG_TYPE_DEFAULT, "%s%.*s", buf, 0x1Cu);
              }
            }
            v22 += v28;
            goto LABEL_28;
          }
          x_log_end_free_(v31);
          v5 = *((_QWORD *)v4 + 6);
          if (!v5)
          {
LABEL_9:
            *((_QWORD *)v4 + 6) = 0;
            *((_QWORD *)v4 + 12) |= 0x10080003uLL;
            return;
          }
          do
          {
LABEL_4:
            if (BYTE9(xmmword_1ECDC6A90))
              kdebug_trace();
            CA::Render::invalidate_animation(v4, *(CA::Render::Handle **)v5, v3);
            v5 = *(_QWORD *)(v5 + 8);
          }
          while (v5);
          v6 = (_QWORD *)*((_QWORD *)v4 + 6);
          if (v6)
          {
            do
            {
              v7 = (_QWORD *)v6[1];
              free(v6);
              v6 = v7;
            }
            while (v7);
          }
          goto LABEL_9;
        }
        ++v23;
        v26 = 32512;
        if (v23 == 32512)
          goto LABEL_34;
      }
    }
  }
}

void CA::Render::Context::set_glitch_request(CA::Render::Context *this, double a2)
{
  double v4;
  int32x2_t *v5;
  const CA::Bounds *v6;

  if (CADeviceHasInternalBuild::once != -1)
    dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
  if (CADeviceHasInternalBuild::internal)
  {
    v4 = *((double *)this + 67);
    if (v4 < a2)
      v4 = a2;
    *((double *)this + 67) = v4;
    v5 = (int32x2_t *)CA::Render::Context::root_layer_handle(this);
    if (v5)
      CA::Render::Context::invalidate(this, v5 + 14, v6);
  }
}

CA::Render::Context *CA::Render::Context::add_remote_input_mach_time(CA::Render::Context *this, unint64_t a2)
{
  CA::Render::Context *result;
  CA::Render::Context *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;

  result = (CA::Render::Context *)CA::Render::Context::retain_host_context(this);
  if (result)
  {
    v5 = result;
    result = (CA::Render::Context *)CA::Render::Context::add_remote_input_mach_time(result, a2);
    v6 = (unsigned int *)((char *)v5 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (CA::Render::Context *)(*(uint64_t (**)(CA::Render::Context *))(*(_QWORD *)v5 + 16))(v5);
  }
  else
  {
    v9 = *((_QWORD *)this + 59);
    if (v9 >= a2)
      v9 = a2;
    *((_QWORD *)this + 59) = v9;
  }
  return result;
}

uint64_t CA::Render::FilterSubclass::identity(CA::Render::FilterSubclass *this, const CA::Render::Filter *a2)
{
  return 0;
}

uint64_t CA::Render::FilterSubclass::empty_opaque_shape(CA::Render::FilterSubclass *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3)
{
  return 1;
}

uint64_t CA::OGL::`anonymous namespace'::PageCurlFilter::is_opacity_commutative(CA::OGL::_anonymous_namespace_::PageCurlFilter *this, const CA::Render::Filter *a2)
{
  return 1;
}

double *CA::OGL::`anonymous namespace'::PageCurlFilter::DOD(CA::OGL::_anonymous_namespace_::PageCurlFilter *this, CA::Render::KeyValueArray **a2, const CA::Render::Layer *a3, CA::Rect *a4)
{
  __int128 v4;
  double v5;
  double *result;
  _OWORD v8[2];
  _OWORD v9[6];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = *((_OWORD *)a3 + 5);
  v8[0] = *((_OWORD *)a3 + 4);
  v8[1] = v4;
  v5 = *((double *)a4 + 2);
  if (v5 >= *((double *)a4 + 3))
    v5 = *((double *)a4 + 3);
  if (v5 > 0.0)
  {
    v10 = 0;
    memset(v9, 0, sizeof(v9));
  }
  return result;
}

__n128 CA::OGL::`anonymous namespace'::PageCurlFilter::ROI(CA::OGL::_anonymous_namespace_::PageCurlFilter *this, const CA::Render::Filter *a2, __n128 *a3, __n128 *a4)
{
  __n128 result;

  *a4 = a3[4];
  result = a3[5];
  a4[1] = result;
  return result;
}

uint64_t CA::OGL::FilterSubclass::can_append_color_matrix(CA::OGL::FilterSubclass *this, const CA::Render::Filter *a2, CA::OGL::Context *a3)
{
  return 0;
}

BOOL CA::OGL::`anonymous namespace'::PageCurlFilter::can_render(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return *(_QWORD *)(a5 + 16) == 0;
}

uint64_t CA::OGL::`anonymous namespace'::PageCurlFilter::render(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  const double *v15;
  int8x16_t v16;
  int32x2_t v17;
  double v18;
  unsigned int *v19;
  double *v20;
  int32x4_t v21;
  int32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int8x16_t v28;
  uint64_t v29;
  int64x2_t v30;
  double v31;
  int8x16_t v32;
  double v33;
  int8x16_t v34;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float16x4_t v45;
  unsigned int v46;
  int8x16_t v47;
  int8x16_t v48;
  int32x4_t v49;
  uint64_t v50;
  uint64_t v51;
  float16x4_t v52;
  float16x4_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  int8x16_t v58;
  int8x16_t v59;
  int32x4_t v60;
  unsigned int v62;
  int8x16_t v63;
  int8x16_t v64;
  int32x4_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  int8x16_t v69;
  int8x16_t v70;
  int32x4_t v71;
  int8x16_t v72;
  double v73;
  double v74;
  int32x4_t v75;
  int8x16_t v76[2];
  float64x2_t v77;
  __int128 v78;
  float64x2_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _OWORD v85[12];
  __int128 v86;
  float64x2_t v87[2];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _OWORD v91[4];
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v94 = 0;
  v92 = 0u;
  v93 = 0u;
  memset(v91, 0, sizeof(v91));
  v89 = 0u;
  v90 = 0u;
  v88 = 0u;
  v86 = 0u;
  memset(v87, 0, sizeof(v87));
  memset(v85, 0, sizeof(v85));
  v8 = *(_QWORD *)(a4 + 232);
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  v9 = *(_QWORD *)(a3 + 24);
  v10 = *(double **)(v8 + 24);
  v12 = *v10;
  v11 = v10[1];
  v14 = v10[4];
  v13 = v10[5];
  *((double *)&v86 + 1) = *((double *)&v91[2] + 1) * *v10 + *(double *)&v91[3] * v14;
  v87[0].f64[0] = *((double *)&v91[2] + 1) * v11 + *(double *)&v91[3] * v13;
  v87[0].f64[1] = *((double *)&v91[3] + 1) * v12 + *(double *)&v92 * v14;
  v87[1].f64[0] = *((double *)&v91[3] + 1) * v11 + *(double *)&v92 * v13;
  CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)&v77, (CA::Mat4Impl *)v10, v15);
  *(float64x2_t *)((char *)v85 + 8) = v77;
  *(_OWORD *)((char *)&v85[1] + 8) = v78;
  *(float64x2_t *)((char *)&v85[2] + 8) = v79;
  *(_OWORD *)((char *)&v85[3] + 8) = v80;
  *(_OWORD *)((char *)&v85[4] + 8) = v81;
  *(_OWORD *)((char *)&v85[5] + 8) = v82;
  *(_OWORD *)((char *)&v85[6] + 8) = v83;
  *(_OWORD *)((char *)&v85[7] + 8) = v84;
  v16 = (int8x16_t)vcgtq_f64((float64x2_t)vdupq_n_s64(0x3F50624DE0000000uLL), vabsq_f64(*(float64x2_t *)((char *)v87 + 8)));
  v17 = vmovn_s64((int64x2_t)v16);
  if (((v17.i32[0] | v17.i32[1]) & 1) != 0)
  {
    v18 = vaddvq_f64(vmulq_f64(*(float64x2_t *)((char *)v87 + 8), *(float64x2_t *)((char *)v87 + 8)));
    *(float *)&v18 = v18;
    *(float *)&v18 = sqrtf(*(float *)&v18);
    *(int8x16_t *)((char *)v87 + 8) = vbicq_s8((int8x16_t)vcvtq_f64_f32((float32x2_t)vbsl_s8((int8x8_t)0x8000000080000000, (int8x8_t)vdup_lane_s32(*(int32x2_t *)&v18, 0), (int8x8_t)vcvt_f32_f64(*(float64x2_t *)((char *)v87 + 8)))), v16);
    *(float64x2_t *)((char *)&v91[2] + 8) = vmlaq_n_f64(vmulq_n_f64(v77, *((double *)&v86 + 1)), v79, v87[0].f64[0]);
    *((double *)&v91[3] + 1) = -*(double *)&v91[3];
    *(_QWORD *)&v92 = *((_QWORD *)&v91[2] + 1);
    *((double *)&v86 + 1) = *((double *)&v91[2] + 1) * v12 + *(double *)&v91[3] * v14;
    v87[0].f64[0] = *((double *)&v91[2] + 1) * v11 + *(double *)&v91[3] * v13;
  }
  v19 = *(unsigned int **)(a2 + 40);
  LOBYTE(v85[0]) = CA::Render::KeyValueArray::get_float_key((CA::Render::KeyValueArray *)v19, (const CA::Render::KeyValueArray *)0x121, 1.0) != 0.0;
  BYTE1(v85[0]) = CA::Render::KeyValueArray::get_float_key((CA::Render::KeyValueArray *)v19, (const CA::Render::KeyValueArray *)0x113, 1.0) != 0.0;
  v22 = *(int32x4_t *)(v9 + 64);
  v75 = v22;
  v23 = *(_QWORD *)(v9 + 80);
  v24 = *(_QWORD *)(v9 + 88);
  v25 = *(_DWORD *)(a5 + 40);
  v26 = *(_DWORD *)(a5 + 44);
  if (v25 <= v26)
    v27 = *(_DWORD *)(a5 + 44);
  else
    v27 = *(_DWORD *)(a5 + 40);
  v22.i32[0] = 1073741822;
  v21.i32[0] = v27;
  v28 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v21, v22), 0);
  v29 = *(_QWORD *)(a5 + 32);
  v30.i64[0] = (int)v29;
  v30.i64[1] = SHIDWORD(v29);
  v31 = (double)v25;
  v32 = vbslq_s8(v28, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v30));
  v33 = 1.79769313e308;
  if (v27 > 1073741822)
    v31 = 1.79769313e308;
  v72 = v32;
  v73 = v31;
  if (v27 <= 1073741822)
    v33 = (double)v26;
  v74 = v33;
  *(double *)v34.i64 = v31;
  *(double *)&v34.i64[1] = v33;
  v76[0] = v32;
  v76[1] = v34;
  CA::Mat4Impl::mat4_apply_to_rect(&v77, v76, v20);
  *(int32x4_t *)((char *)&v85[8] + 8) = v75;
  *((_QWORD *)&v85[9] + 1) = v23;
  *(_QWORD *)&v85[10] = v24;
  *(int8x16_t *)((char *)&v85[10] + 8) = v72;
  *((double *)&v85[11] + 1) = v73;
  *(double *)&v86 = v74;
  _D0 = *(double *)v91 * -0.5 + 1.0;
  __asm { FCVT            H0, D0 }
  v40 = 0x100010001 * LOWORD(_D0);
  v41 = v40 | 0x3C00000000000000;
  if (v19)
  {
    v42 = v19[4];
    if ((_DWORD)v42)
    {
      v43 = 0;
      while (1)
      {
        v44 = *(_QWORD *)&v19[2 * v43 + 6];
        if (*(_DWORD *)(v44 + 16) == 288)
          break;
        if (v42 == ++v43)
          goto LABEL_21;
      }
      if ((v43 & 0x80000000) == 0 && *(_QWORD *)(v44 + 24))
      {
        v46 = bswap32(CA::Render::KeyValueArray::get_color_key((CA::Render::KeyValueArray *)v19, (const CA::Render::KeyValueArray *)0x120, 0xFFFFFFFFLL));
        v47.i32[0] = v46;
        v47.i32[1] = v46 >> 8;
        v47.i32[2] = HIWORD(v46);
        v48.i64[0] = 0xFF000000FFLL;
        v48.i64[1] = 0xFF000000FFLL;
        v49 = (int32x4_t)vandq_s8(v47, v48);
        v49.i32[3] = vshrq_n_u32((uint32x4_t)vdupq_n_s32(v46), 0x18uLL).i32[3];
        v41 = (uint64_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v49), (float32x4_t)vdupq_n_s32(0x3B808081u)));
      }
LABEL_21:
      *(_QWORD *)&v87[1].f64[1] = v41;
      v50 = 0;
      while (1)
      {
        v51 = *(_QWORD *)&v19[2 * v50 + 6];
        if (*(_DWORD *)(v51 + 16) == 273)
          break;
        if (v42 == ++v50)
        {
          v52 = (float16x4_t)0x3AFF3AFF3AFF3AFFLL;
          goto LABEL_37;
        }
      }
      v52 = (float16x4_t)0x3AFF3AFF3AFF3AFFLL;
      if ((v50 & 0x80000000) == 0 && *(_QWORD *)(v51 + 24))
      {
        v62 = bswap32(CA::Render::KeyValueArray::get_color_key((CA::Render::KeyValueArray *)v19, (const CA::Render::KeyValueArray *)0x111, 0xFFFFFFFFLL));
        v63.i32[0] = v62;
        v63.i32[1] = v62 >> 8;
        v63.i32[2] = HIWORD(v62);
        v64.i64[0] = 0xFF000000FFLL;
        v64.i64[1] = 0xFF000000FFLL;
        v65 = (int32x4_t)vandq_s8(v63, v64);
        v65.i32[3] = vshrq_n_u32((uint32x4_t)vdupq_n_s32(v62), 0x18uLL).i32[3];
        v52 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v65), (float32x4_t)vdupq_n_s32(0x3B808081u)));
      }
LABEL_37:
      v53 = (float16x4_t)0x3C00356534743434;
      *((float16x4_t *)&v88 + 1) = v52;
      v66 = 0;
      while (1)
      {
        v67 = *(_QWORD *)&v19[2 * v66 + 6];
        if (*(_DWORD *)(v67 + 16) == 274)
          break;
        if (v42 == ++v66)
          goto LABEL_25;
      }
      if ((v66 & 0x80000000) == 0 && *(_QWORD *)(v67 + 24))
      {
        v68 = bswap32(CA::Render::KeyValueArray::get_color_key((CA::Render::KeyValueArray *)v19, (const CA::Render::KeyValueArray *)0x112, 0xFFFFFFFFLL));
        v69.i32[0] = v68;
        v69.i32[1] = v68 >> 8;
        v69.i32[2] = HIWORD(v68);
        v70.i64[0] = 0xFF000000FFLL;
        v70.i64[1] = 0xFF000000FFLL;
        v71 = (int32x4_t)vandq_s8(v69, v70);
        v71.i32[3] = vshrq_n_u32((uint32x4_t)vdupq_n_s32(v68), 0x18uLL).i32[3];
        v53 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v71), (float32x4_t)vdupq_n_s32(0x3B808081u)));
      }
    }
    else
    {
      *(_QWORD *)&v87[1].f64[1] = v40 | 0x3C00000000000000;
      v53 = (float16x4_t)0x3C00356534743434;
      *((_QWORD *)&v88 + 1) = 0x3AFF3AFF3AFF3AFFLL;
    }
LABEL_25:
    v45 = (float16x4_t)0x3C002E462A870000;
    *(float16x4_t *)&v89 = v53;
    v54 = v19[4];
    if ((_DWORD)v54)
    {
      v55 = 0;
      while (1)
      {
        v56 = *(_QWORD *)&v19[2 * v55 + 6];
        if (*(_DWORD *)(v56 + 16) == 308)
          break;
        if (v54 == ++v55)
          goto LABEL_33;
      }
      if ((v55 & 0x80000000) == 0 && *(_QWORD *)(v56 + 24))
      {
        v57 = bswap32(CA::Render::KeyValueArray::get_color_key((CA::Render::KeyValueArray *)v19, (const CA::Render::KeyValueArray *)0x134, 0xFFFFFFFFLL));
        v58.i32[0] = v57;
        v58.i32[1] = v57 >> 8;
        v58.i32[2] = HIWORD(v57);
        v59.i64[0] = 0xFF000000FFLL;
        v59.i64[1] = 0xFF000000FFLL;
        v60 = (int32x4_t)vandq_s8(v58, v59);
        v60.i32[3] = vshrq_n_u32((uint32x4_t)vdupq_n_s32(v57), 0x18uLL).i32[3];
        v45 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v60), (float32x4_t)vdupq_n_s32(0x3B808081u)));
      }
    }
  }
  else
  {
    v45 = (float16x4_t)0x3C002E462A870000;
    *(_QWORD *)&v87[1].f64[1] = v41;
    *((_QWORD *)&v88 + 1) = 0x3AFF3AFF3AFF3AFFLL;
    *(_QWORD *)&v89 = 0x3C00356534743434;
  }
LABEL_33:
  *(_QWORD *)&v88 = 0x3C003C003C003C00;
  BYTE8(v89) = 1;
  *(float16x4_t *)&v90 = v45;
  *((_QWORD *)&v90 + 1) = 0x3FF0000000000000;
}

uint64_t CA::OGL::FilterSubclass::render(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, a2, a3, a4, a5, a7);
}

uint64_t CA::OGL::FilterSubclass::filter_flags()
{
  return 0;
}

uint64_t CA::OGL::FilterSubclass::filter_alignment()
{
  return 0;
}

uint64_t CA::OGL::FilterSubclass::source_requirement(CA::OGL::FilterSubclass *this, const CA::Render::Filter *a2)
{
  return 3;
}

uint64_t CA::OGL::FilterSubclass::get_edge_info()
{
  return 0;
}

void CA::OGL::`anonymous namespace'::curl_filter_get_in_state(CA::Render::KeyValueArray *a1, float64x2_t *a2, uint64_t a3)
{
  double float_key;
  double v7;
  _BOOL4 v8;
  double v9;
  double v10;
  double v11;
  float v12;
  __float2 v13;
  double cosval;
  double sinval;
  float64x2_t v16;
  float64x2_t v17;
  double v18;
  double v19;
  int8x16_t v26;
  int8x16_t v27;
  float64x2_t v28;
  float64x2_t v29[2];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  float_key = CA::Render::KeyValueArray::get_float_key(a1, (const CA::Render::KeyValueArray *)0x136, 0.0);
  v7 = 1.0;
  v8 = float_key > 1.0 || float_key < 0.0;
  if (float_key < 0.0 && float_key <= 1.0)
    v7 = 0.0;
  if (v8)
    float_key = v7;
  *(double *)a3 = float_key;
  v9 = CA::Render::KeyValueArray::get_float_key(a1, (const CA::Render::KeyValueArray *)0x10F, 0.0);
  *(double *)(a3 + 8) = v9;
  *(double *)(a3 + 16) = CA::Render::KeyValueArray::get_float_key(a1, (const CA::Render::KeyValueArray *)0x12E, 100.0);
  v10 = CA::Render::KeyValueArray::get_float_key(a1, (const CA::Render::KeyValueArray *)0x135, 0.0);
  *(double *)(a3 + 24) = v10;
  v11 = CA::Render::KeyValueArray::get_float_key(a1, (const CA::Render::KeyValueArray *)0x11F, 3.14159265);
  if (v11 < v10)
    v11 = v10;
  *(double *)(a3 + 32) = v11;
  v12 = v9;
  v13 = __sincosf_stret(v12);
  cosval = v13.__cosval;
  if (fabs(v13.__cosval) < 0.001 || (sinval = v13.__sinval, fabs(v13.__sinval) < 0.001))
  {
    cosval = roundf(v13.__cosval);
    sinval = roundf(v13.__sinval);
  }
  v16 = a2[4];
  v17 = a2[5];
  v18 = a2[5].f64[1];
  if (v17.f64[0] <= v18)
    v19 = a2[5].f64[1];
  else
    v19 = a2[5].f64[0];
  if (v19 < 1.79769313e308)
  {
    if (v17.f64[0] < v18)
      v18 = a2[5].f64[0];
    if (v18 > 0.0)
    {
      __asm
      {
        FMOV            V4.2D, #1.0
        FMOV            V5.2D, #-2.0
      }
      v26 = (int8x16_t)vaddq_f64(v17, _Q5);
      *(int32x2_t *)&_Q5.f64[0] = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vclezq_f64((float64x2_t)v26)));
      v16 = vaddq_f64(v16, _Q4);
      *(int32x2_t *)&_Q4.f64[0] = vdup_lane_s32((int32x2_t)vand_s8(*(int8x8_t *)&_Q5.f64[0], (int8x8_t)vdup_lane_s32(*(int32x2_t *)&_Q5.f64[0], 1)), 0);
      v27.i64[0] = SLODWORD(_Q4.f64[0]);
      v27.i64[1] = SHIDWORD(_Q4.f64[0]);
      v17 = (float64x2_t)vandq_s8(v26, v27);
    }
  }
  *(double *)(a3 + 40) = cosval;
  *(double *)(a3 + 48) = sinval;
  *(double *)(a3 + 56) = -sinval;
  *(double *)(a3 + 64) = cosval;
  CA::Render::KeyValueArray::get_rect_key(v29, a1, (const CA::Rect *)0x133, v16, v17);
  v28 = v29[1];
  *(float64x2_t *)(a3 + 72) = v29[0];
  *(float64x2_t *)(a3 + 88) = v28;
}

uint64_t CA::OGL::`anonymous namespace'::curl_render(uint64_t a1)
{
  CA::Mat4Impl *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  int8x16_t v10;
  __int128 v11;
  float16x4_t *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  double v19;
  double v20;
  double v21;
  int8x16_t v22;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  BOOL v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  float16x4_t v52;
  float16x4_t v53;
  double v54;
  float64x2_t v55;
  int8x16_t v56;
  float64x2_t v57;
  double v58;
  double v59;
  float v60;
  double v61;
  double v62;
  double v63;
  int8x16_t v64;
  double v65;
  double v66;
  double v67;
  const double *v68;
  __int128 v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  const double *v74;
  double v75;
  double v76;
  uint64_t i;
  double v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  int v88;
  double v89;
  double v90;
  float v91;
  int v92;
  float v93;
  int v94;
  int v95;
  double v96;
  uint64_t v97;
  int v98;
  int v99;
  BOOL v100;
  double v101;
  double v102;
  uint64_t v103;
  unsigned int v104;
  double v105;
  uint64_t v107;
  unsigned int v108;
  int v109;
  double v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  int v114;
  double v115;
  int v116;
  unint64_t v117;
  _BOOL4 v118;
  float16x4_t v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  _BOOL4 v127;
  double v128;
  _BOOL4 v129;
  double v130;
  double v131;
  double v132;
  _BOOL4 v133;
  double v134;
  double v135;
  _BOOL4 v136;
  double v137;
  float v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  float v146;
  float16x4_t v147;
  _BOOL4 v149;
  double v150;
  double v151;
  uint64_t v153;
  uint64_t v154;
  float v155;
  float v156;
  float v157;
  float v158;
  int v159;
  double v160;
  double v161;
  int v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  BOOL v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  unsigned int v193;
  uint64_t v194;
  double v195;
  double v196;
  int v197;
  int v198;
  _BYTE *v199;
  double v200;
  double v201;
  uint64_t v202;
  int v203;
  _QWORD *v204;
  double v205;
  int v206;
  double v207;
  _BOOL4 v208;
  uint64_t v209;
  double v210;
  BOOL v212;
  uint64_t v213;
  int v214;
  int v215;
  double v216;
  double v217;
  BOOL v218;
  uint64_t v219;
  int v220;
  int v221;
  double v222;
  double v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  double v227;
  double v228;
  double v229;
  uint64_t v230;
  double v231;
  double v232;
  _BOOL4 v233;
  uint64_t v234;
  double *v235;
  double *v236;
  double v237;
  double v238;
  double v239;
  double v240;
  float v241;
  double v242;
  double v243;
  _BOOL4 v244;
  double v245;
  _BOOL4 v246;
  double v247;
  float v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double v256;
  float v257;
  _BYTE *v258;
  float16x4_t v259;
  _BYTE *v260;
  float16x4_t v261;
  int64_t v262;
  uint64_t v263;
  float64x2_t v264;
  _BYTE *v265;
  float64x2_t v266;
  _BYTE *v267;
  float64x2_t v268;
  double v269;
  double v270;
  uint64_t v271;
  uint64_t v272;
  _BOOL4 v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  int v278;
  BOOL v279;
  int v280;
  float *v281;
  double v282;
  double v283;
  float *v284;
  double v285;
  double v286;
  double v287;
  float64x2_t v288;
  double v289;
  int v291;
  float *v292;
  double v293;
  double v294;
  float *v295;
  double v296;
  double v297;
  double v298;
  float64x2_t v299;
  double v300;
  uint64_t v302;
  float32x2_t *v303;
  float64x2_t v304;
  float16x4_t v305;
  const double *v306;
  float64x2_t v307;
  float32x4_t v308;
  uint64_t v309;
  float32x2_t *v310;
  double v311;
  float32x2_t *v312;
  float16x4_t v313;
  uint64_t v314;
  float32x2_t *v315;
  float64x2_t v316;
  float32x4_t v317;
  uint64_t v318;
  float32x2_t *v319;
  double v320;
  float32x2_t *v321;
  float16x4_t v322;
  BOOL v323;
  uint64_t v324;
  double v325;
  uint64_t v326;
  uint64_t v327;
  float32x2_t *v328;
  float64x2_t v329;
  uint64_t v330;
  float32x2_t *v331;
  float64x2_t v332;
  float16x4_t v333;
  float16x4_t v334;
  float16x4_t v335;
  float16x4_t v336;
  double v337;
  double v338;
  float32x4_t v339;
  uint64_t *v340;
  double *v341;
  float32x4_t v342;
  double v343;
  double v344;
  double v345;
  double v346;
  double v347;
  double v348;
  double v349;
  float v350;
  float *v351;
  float v352;
  float v353;
  float v354;
  float v355;
  float v356;
  float v357;
  int v358;
  uint64_t v359;
  _BYTE *v360;
  float64x2_t v361;
  float64x2_t v362;
  double v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float v368;
  double v369;
  uint64_t v370;
  float16x4_t v371;
  float32x4_t v372;
  double a;
  double b;
  double c;
  double d;
  double tx;
  double ty;
  _BYTE *v379;
  uint64_t v380;
  double *v381;
  uint64_t *v382;
  float16x4_t v383;
  double v384;
  double v385;
  double v386;
  double v387;
  double v388;
  float v389;
  float v390;
  _BYTE *v391;
  float16x4_t v392;
  float v393;
  float v394;
  double v395;
  int v396;
  double v397;
  double v398;
  double v399;
  double v400;
  double *v401;
  float v402;
  signed int v403;
  uint64_t v404;
  double v405;
  double v406;
  double v407;
  double v408;
  uint64_t v409;
  uint64x2_t v410;
  float64x2_t v411;
  int32x2_t v412;
  float64x2_t v413;
  int8x16_t v414;
  int64x2_t v415;
  double *v416;
  int64x2_t v417;
  int32x2_t v418;
  int8x16_t v419;
  int8x16_t v420;
  double v421;
  double v422;
  double v423;
  _BOOL4 v424;
  int v425;
  double v426;
  BOOL v428;
  uint64_t v429;
  double v430;
  int v431;
  int v432;
  double v433;
  double v434;
  float v435;
  double v436;
  double v437;
  double v438;
  float v439;
  uint64_t v440;
  double *v441;
  double v442;
  _BOOL4 v443;
  double v444;
  double v445;
  double v446;
  float v447;
  double v448;
  _BOOL4 v449;
  double v450;
  _BOOL4 v451;
  double v452;
  float v453;
  double v454;
  double v455;
  double v456;
  double v457;
  double v458;
  double v459;
  double v460;
  double v461;
  float v462;
  float v463;
  double v464;
  double v465;
  double v466;
  double v467;
  double v468;
  float v469;
  float v470;
  float v471;
  uint64_t v472;
  double *v473;
  float32x4_t *v474;
  double scale;
  float v476;
  double v477;
  uint64_t v480;
  uint64_t v481;
  _BYTE *v482;
  _BYTE *v483;
  _BYTE *v484;
  int *v485;
  uint64_t v486;
  uint64_t v487;
  _BYTE *v488;
  uint64_t v489;
  uint64_t result;
  unint64_t v491;
  _QWORD *v492;
  int *v493;
  int *v494;
  int v495;
  int v496;
  int v497;
  int v498;
  float64x2_t *v499;
  float64x2_t *v500;
  double *f64;
  BOOL v502;
  float32x2_t *v505;
  unint64_t v506;
  int v507;
  float32x2_t *v508;
  float *v509;
  float32x2_t *v510;
  float *v511;
  double v512;
  double v513;
  float16x4_t v514;
  double v515;
  int v516;
  double v517;
  int v518;
  float16x4_t v519;
  double *v520;
  float16x4_t *v521;
  CA::Mat4Impl *v522;
  unsigned int v523;
  double v524;
  int v525;
  uint64_t v526;
  float16x4_t v527;
  unsigned int v528;
  unsigned int v529;
  double v530;
  double v531;
  double v532;
  float32x4_t v533;
  unsigned int v534;
  float32x4_t v535;
  double v536;
  double v537;
  double v538;
  double v539;
  double v540;
  double v541;
  double v542;
  double v543;
  double v544;
  int v545;
  double v546;
  uint64_t v547;
  float32x4_t v548;
  int v549;
  double v550;
  double v551;
  double v552;
  double v553;
  double v554;
  double v555;
  double v556;
  float32x4_t v557;
  double v558;
  double v559;
  double v560;
  double v561;
  double v562;
  double v563;
  double v564;
  double v565;
  double v566;
  double v567;
  __int128 v568;
  double v569;
  float64x2_t v570;
  double v571;
  double v572;
  float64x2_t v573;
  uint64_t v574;
  double v575;
  double v576;
  int v577;
  int v578;
  _BYTE *v579;
  double v580;
  double v581;
  unsigned int v582;
  double v583;
  double v584;
  unsigned int v585;
  double v586;
  double v587;
  unsigned int v588;
  double v589;
  unsigned int v590;
  double v591;
  unsigned int v592;
  double v593;
  double v594;
  double v595;
  BOOL v596;
  double v597;
  int v598;
  int v599;
  double v600;
  int v601;
  double v602;
  float16x4_t v603;
  CGAffineTransform v604;
  uint64_t v605;
  double v606[3];
  __int128 v607;
  __int128 v608;
  int32x2_t v609;
  uint64_t v610;
  double v611;
  double v612;
  _QWORD v613[62];
  double v614;
  double v615;
  _QWORD v616[4];
  float64x2_t v617[1];
  float64x2_t v618;
  __int128 v619;
  __int128 v620;
  float64x2_t v621[1];
  float64x2_t v622;
  __int128 v623;
  __int128 v624;
  float64x2_t v625[1];
  float64x2_t v626;
  __int128 v627;
  __int128 v628;
  _QWORD v629[2];
  _QWORD v630[2];
  double v631[16];
  _QWORD v632[6];
  __int128 v633;
  double v634[26];
  double v635[34];
  _BYTE v636[9888];
  _BYTE v637[9888];
  _BYTE v638[9888];
  _QWORD v639[2];
  _BYTE v640[34560];
  _BYTE v641[432];
  float32x2_t v642;
  float32x2_t v643;
  _BYTE v644[19008];
  _BYTE v645[19008];
  _OWORD v646[204];
  _OWORD v647[204];
  _OWORD v648[204];
  _OWORD v649[204];
  _OWORD v650[204];
  _OWORD v651[204];
  uint64_t v652;
  float64x2x2_t v653;

  MEMORY[0x1E0C80A78](a1);
  v522 = v1;
  v526 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v652 = *MEMORY[0x1E0C80C00];
  bzero(v651, 0xCC0uLL);
  bzero(v650, 0xCC0uLL);
  bzero(v649, 0xCC0uLL);
  bzero(v648, 0xCC0uLL);
  bzero(v647, 0xCC0uLL);
  bzero(v646, 0xCC0uLL);
  bzero(v645, 0x4A40uLL);
  bzero(v644, 0x4A40uLL);
  bzero(v641, 0x240uLL);
  bzero(v640, 0x8700uLL);
  v639[1] = 0;
  v639[0] = 0;
  bzero(v638, 0x26A0uLL);
  bzero(v637, 0x26A0uLL);
  bzero(v636, 0x26A0uLL);
  v12 = *(float16x4_t **)(v8 + 232);
  memset(v635, 0, sizeof(v635));
  memset(v634, 0, sizeof(v634));
  v13 = vcvtq_f32_f16(v12[4]);
  v14 = vmulq_f32(v13, vcvtq_f32_f16(*(float16x4_t *)(v4 + 232)));
  v15 = vmulq_f32(v13, vcvtq_f32_f16(*(float16x4_t *)(v4 + 240)));
  v16 = vmulq_f32(v13, vcvtq_f32_f16(*(float16x4_t *)(v4 + 256)));
  v17 = vmulq_f32(v13, vcvtq_f32_f16(*(float16x4_t *)(v4 + 248)));
  v18 = vmulq_f32(v13, vcvtq_f32_f16(*(float16x4_t *)(v4 + 272)));
  v19 = v6[7];
  v20 = v6[8];
  v21 = *(double *)(v4 + 216);
  v22.i64[0] = *(_QWORD *)(v4 + 224);
  _NF = v21 < 0.0;
  v24 = 0.449999988;
  v597 = v21;
  if (v21 != 0.0)
    v21 = 0.449999988;
  if (_NF)
    v21 = -v21;
  v589 = v21;
  v26 = *(double *)(v4 + 184);
  v25 = *(double *)(v4 + 192);
  v27 = 0.0;
  if (_NF)
    v28 = 0.0;
  else
    v28 = *(double *)(v4 + 192);
  if (_NF)
    v29 = *(double *)(v4 + 192);
  else
    v29 = 0.0;
  if (_NF)
    v30 = *(double *)(v4 + 184);
  else
    v30 = 0.0;
  if (_NF)
    v31 = 0.0;
  else
    v31 = *(double *)(v4 + 184);
  v32 = *(double *)v22.i64 <= 0.0;
  v595 = *(double *)(v4 + 224);
  if (*(double *)v22.i64 == 0.0)
    v24 = *(double *)(v4 + 224);
  if (*(double *)v22.i64 <= 0.0)
    v24 = -v24;
  v600 = v24;
  if (*(double *)v22.i64 > 0.0)
    v33 = 0.0;
  else
    v33 = *(double *)(v4 + 184);
  v35 = *(double *)(v4 + 168);
  v34 = *(double *)(v4 + 176);
  v572 = v33;
  *(double *)&v11 = v33 + v35;
  v576 = v28;
  v36 = v28 + v34;
  if (v32)
    v26 = 0.0;
  v564 = v30 + v35;
  if (v32)
    v37 = *(double *)(v4 + 192);
  else
    v37 = 0.0;
  v562 = v31 + v35;
  if (v32)
    v25 = 0.0;
  v39 = *(double *)(v4 + 136);
  v38 = *(double *)(v4 + 144);
  v40 = *(double *)(v4 + 152);
  if (v20 > 0.0)
    v41 = 0.0;
  else
    v41 = *(double *)(v4 + 152);
  if (v20 <= 0.0)
    v40 = 0.0;
  if (v19 < 0.0)
    v42 = 0.0;
  else
    v42 = *(double *)(v4 + 160);
  if (v19 < 0.0)
    v27 = *(double *)(v4 + 160);
  v566 = v36;
  v568 = v11;
  *(double *)v22.i64 = *(double *)(v4 + 128) + *(double *)(v4 + 32) * *(double *)&v11 + *(double *)(v4 + 64) * v36;
  v44 = v6[2];
  v43 = v6[3];
  v45 = v41 + v39;
  *(double *)v10.i64 = v40 + v39;
  v46 = v42 + v38;
  v47 = v27 + v38;
  v48 = fmax(v43, 1.57079633);
  v49 = v6[5];
  v50 = *((uint64_t *)v6 + 6);
  if (fabs(*(double *)v22.i64 + -1.0) >= 0.000001)
  {
    if (*(double *)v22.i64 <= 0.0)
      v22.i64[0] = 0x7FF0000000000000;
    else
      *(double *)v22.i64 = 1.0 / *(double *)v22.i64;
  }
  v51 = 0;
  v549 = *(unsigned __int8 *)(v4 + 264);
  v52 = vcvt_f16_f32(v14);
  v519 = vcvt_f16_f32(v15);
  v53 = vcvt_f16_f32(v16);
  v527 = vcvt_f16_f32(v17);
  v514 = vcvt_f16_f32(v18);
  v54 = v6[4];
  v556 = *(double *)(v4 + 200);
  v554 = *(double *)(v4 + 208);
  v552 = 1.0 / v597;
  v633 = 0uLL;
  memset(v632, 0, sizeof(v632));
  v55 = *(float64x2_t *)(v4 + 40);
  v56.i64[1] = *((_QWORD *)&v568 + 1);
  v57 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(v4 + 104), *(float64x2_t *)(v4 + 8), *(double *)&v568), v55, v36), *(double *)v22.i64);
  v58 = v57.f64[1];
  v524 = (1.57079633 - v43) * v44;
  v59 = *(double *)v10.i64 - v57.f64[0];
  *(double *)v56.i64 = v47 - v57.f64[1];
  *(float *)v10.i32 = v48;
  v60 = v43;
  *(double *)v10.i64 = (v43
                      + (float)((float)((float)((float)((float)((float)(*(float *)v10.i32 * *(float *)v10.i32)
                                                              * 0.0054654)
                                                      + -0.15346)
                                              * (float)(*(float *)v10.i32 * *(float *)v10.i32))
                                      + 0.98442)
                              * *(float *)v10.i32)
                      - ((float)((float)((float)((float)((float)((float)(v60 * v60) * 0.0054654) + -0.15346)
                                               * (float)(v60 * v60))
                                       + 0.98442)
                               * v60)
                       + 1.57079633))
                     * v44;
  v61 = *(double *)v10.i64 + v59 * v49 + *(double *)v56.i64 * *(double *)&v50;
  v62 = v26 - v572;
  v56.i32[1] = HIDWORD(v576);
  v63 = v29 - v576;
  *(float *)v56.i32 = v589;
  *(float *)v10.i32 = v62;
  v64.i64[0] = 0x8000000080000000;
  v64.i64[1] = 0x8000000080000000;
  *(double *)v56.i64 = *(float *)vbslq_s8(v64, v56, v10).i32;
  v10.i32[1] = HIDWORD(v600);
  *(float *)v10.i32 = v600;
  *(float *)v22.i32 = v63;
  v65 = *(float *)vbslq_s8(v64, v10, v22).i32;
  v631[0] = v62 + *(double *)v56.i64;
  v631[1] = v63 + v65;
  v631[4] = -*(double *)v56.i64;
  v631[5] = v63 + v65;
  v631[2] = v62 - *(double *)v56.i64;
  v631[3] = v63 - v65;
  v631[6] = *(double *)v56.i64;
  v631[7] = v63 - v65;
  v546 = v564 + v589;
  v631[10] = v62 - *(double *)v56.i64;
  v631[8] = v62 + *(double *)v56.i64;
  v66 = *v6;
  v67 = v61 - -(v524 + (v57.f64[0] - v45) * v49 - (v46 - v57.f64[1]) * *(double *)&v50);
  v631[9] = -v65;
  v631[11] = v65;
  v631[12] = *(double *)v56.i64;
  v631[13] = v65;
  v631[14] = -*(double *)v56.i64;
  v631[15] = -v65;
  v68 = (const double *)(v4 + 16);
  v69 = *(_OWORD *)(v4 + 8);
  v70 = (float64x2_t)vdupq_lane_s64(*(_QWORD *)(v4 + 40), 0);
  v71 = vld1q_dup_f64(v68);
  v72 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v55, 1);
  v73 = (float64x2_t)vdupq_lane_s64(v50, 0);
  v74 = v631;
  do
  {
    v653 = vld2q_f64(v74);
    v74 += 4;
    *(float64x2_t *)&v632[v51] = vmlaq_f64(vmulq_n_f64(vmlaq_f64(vmulq_n_f64(v653.val[0], *(double *)&v69), v70, v653.val[1]), v49), v73, vmlaq_f64(vmulq_f64(v653.val[0], v71), v72, v653.val[1]));
    v51 += 2;
  }
  while (v51 != 8);
  v541 = v37 + v34 + v600;
  v543 = v37 + v34;
  v75 = *(double *)&v633;
  v76 = *(double *)&v632[1];
  for (i = 1; i != 8; ++i)
  {
    v78 = *(double *)&v632[i];
    v79 = i;
    while (1)
    {
      v80 = v79 - 1;
      v81 = *(double *)&v632[(v79 - 1)];
      if (v78 <= v81)
        break;
      *(double *)&v632[v79--] = v81;
      if (v80 + 1 <= 1)
      {
        LODWORD(v79) = 0;
        break;
      }
    }
    *(double *)&v632[(int)v79] = v78;
  }
  v559 = v25 + v34;
  v82 = v67 * v66 - (v524 + (v57.f64[0] - v45) * v49 - (v46 - v57.f64[1]) * *(double *)&v50);
  v83 = v82 + (1.57079633 - v48) * v44;
  v84 = v48 - v43;
  v85 = v54 - v48;
  if (v48 - v43 <= v54 - v48)
    v86 = v54 - v48;
  else
    v86 = v48 - v43;
  v87 = v44 * 0.0833333333 * v86;
  if (v87 == 0.0)
  {
    v634[1] = v82 + (1.57079633 - v48) * v44;
    v634[0] = v634[1];
    v88 = 2;
  }
  else
  {
    v89 = v82 + v524;
    if (v76 < v82 + v524)
      v89 = v76;
    v90 = v82 + (1.57079633 - v54) * v44;
    if (v75 > v90)
      v90 = v75;
    v91 = (v83 - v89) / v87;
    v92 = (int)fmaxf(floorf(v91), -12.0);
    v93 = (v83 - v90) / v87;
    v94 = (int)fminf(ceilf(v93), 12.0);
    if (v92 <= v94)
    {
      v88 = 0;
      v95 = v94 + 1;
      do
      {
        v96 = v83 - v87 * (float)v92;
        if (v89 < v96)
          v96 = v89;
        if (v90 > v96)
          v96 = v90;
        if (v92 > 0 || (v634[v88] = v96, ++v88, (v92 & 0x80000000) == 0))
          v634[v88++] = v96;
        ++v92;
      }
      while (v95 != v92);
    }
    else
    {
      v88 = 0;
    }
  }
  v584 = v43;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v100 = v88 > 0;
  v551 = 1.0 / v595;
  do
  {
    if (v98 == 8)
    {
      v101 = v634[v99];
    }
    else
    {
      if (!v100)
      {
        v102 = *(double *)&v632[v98];
LABEL_81:
        ++v98;
        v101 = v102;
        goto LABEL_82;
      }
      v101 = v634[v99];
      v102 = *(double *)&v632[v98];
      if (v101 <= v102)
        goto LABEL_81;
    }
    ++v99;
LABEL_82:
    v635[v97++] = v101;
    v100 = v99 < v88;
  }
  while (v99 < v88 || v98 < 8);
  v103 = 0;
  v104 = 1;
  do
  {
    v105 = v635[v103++];
    v104 += 2;
  }
  while (v105 > v83 && v103 < (int)v97);
  v107 = 0;
  v108 = v104 - 1;
  do
  {
    v109 = v107;
    v110 = v635[v107++];
  }
  while (v110 > v76);
  LODWORD(v111) = v88 + 7;
  if (v109 <= (int)v111)
    v112 = v111;
  else
    v112 = v109;
  if ((int)v107 - 1 <= (int)v111)
    v111 = v111;
  else
    v111 = (v107 - 1);
  v113 = v111 + 1;
  v579 = (_BYTE *)v4;
  v531 = 1.0 / v19;
  v593 = *(double *)&v50;
  v594 = v49;
  v587 = v57.f64[0];
  v591 = v67 * v66 - (v524 + (v57.f64[0] - v45) * v49 - (v46 - v57.f64[1]) * *(double *)&v50);
  v515 = v66;
  v528 = v109;
  v520 = v6;
  v521 = v12;
  v580 = v44;
  v586 = v54;
  v530 = 1.0 / v20;
  v517 = v84;
  v512 = v85;
  v513 = v83;
  while (v113 != v107)
  {
    v114 = v107;
    v115 = v635[v107++];
    if (v115 < v75)
    {
      v112 = v114 - 1;
      break;
    }
  }
  v529 = v103;
  v523 = v112;
  v116 = v112 - v103;
  if (v112 < (int)v103)
    v116 = -1;
  v516 = v116;
  v518 = v116 + 1;
  v525 = v97;
  v583 = v19;
  v581 = v20;
  if ((int)v97 >= 1)
  {
    v117 = 0;
    v118 = COERCE_UNSIGNED_INT64(fabs(1.0 / v597)) > 0x7FEFFFFFFFFFFFFFLL;
    v533 = vcvtq_f32_f16(v53);
    v535 = vcvtq_f32_f16(v527);
    v119 = v52;
    v532 = 1.0 / (fabs(v556 / v554) + 1.0);
    v120 = v97;
    v121 = (v97 - 1);
    do
    {
      v122 = v58;
      v606[0] = 0.0;
      v123 = v635[v117];
      v124 = v123 * v556;
      v125 = v123 * v556 + *(double *)&v568;
      v126 = v123 * v554 + v566;
      v127 = (v541 - v126) * v551 > (v546 - v125) * v552
          && COERCE_UNSIGNED_INT64(fabs(1.0 / v595)) <= 0x7FEFFFFFFFFFFFFFLL;
      if (v127 || v118)
        v128 = (v541 - v126) * v551;
      else
        v128 = (v546 - v125) * v552;
      v129 = (v559 - (v600 + v126)) * v551 < (v562 - (v589 + v125)) * v552
          && COERCE_UNSIGNED_INT64(fabs(1.0 / v595)) <= 0x7FEFFFFFFFFFFFFFLL;
      if (v129 || v118)
        v130 = (v559 - (v600 + v126)) * v551;
      else
        v130 = (v562 - (v589 + v125)) * v552;
      v131 = (v564 - (v589 + v125)) * v552;
      v132 = (v562 + v589 - v125) * v552;
      v133 = (v543 - (v600 + v126)) * v551 > v131 && COERCE_UNSIGNED_INT64(fabs(1.0 / v595)) <= 0x7FEFFFFFFFFFFFFFLL;
      if (v133 || v118)
        v134 = (v543 - (v600 + v126)) * v551;
      else
        v134 = v131;
      v135 = (v559 + v600 - v126) * v551;
      v136 = v135 < v132 && COERCE_UNSIGNED_INT64(fabs(1.0 / v595)) <= 0x7FEFFFFFFFFFFFFFLL;
      if (v136 || v118)
        v137 = v135;
      else
        v137 = v132;
      v139 = v606[0];
      if (v549)
      {
        v140 = v606[0] * 2.5 + -1.50000006;
        if (v140 > 1.0)
          v140 = 1.0;
        if (v140 < 0.0)
          v140 = 0.0;
        v141 = v587;
        if (v140 <= 0.754999995)
          v139 = (v140 * 0.375 + 0.349999994) * v140;
        else
          v139 = (v140 + -0.819999993) * (v140 + -0.819999993) * 15.0 + 0.400000006;
      }
      else
      {
        v141 = v587;
      }
      v142 = v123 * v554 + v576;
      v143 = v123 + v138;
      v144 = v141 + v143 * v594;
      v58 = v122;
      v145 = v122 + v143 * v593;
      v146 = v139;
      v147 = vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(v535, 1.0 - v146), v533, v146));
      v149 = v117 < v528 || v117 > v523;
      v150 = v134 + (v137 - v134) * v532;
      if (v149)
        v151 = v134 + (v137 - v134) * v532;
      else
        v151 = v128;
      if (!v149)
        v150 = v130;
      if (v117)
        _ZF = v121 == v117;
      else
        _ZF = 1;
      v153 = (uint64_t)v147;
      if (_ZF)
      {
        v153 = 0;
        v154 = 0;
      }
      else
      {
        v154 = (uint64_t)v119;
      }
      if (v117 < v529)
        v153 = v154;
      v605 = v153;
      v155 = v134;
      v156 = v137;
      v157 = v151;
      v158 = v150;
      v19 = v583;
      v20 = v581;
    }
    while (v120 != v117);
  }
  v159 = v579[1];
  v590 = 2 * v518;
  v160 = v580;
  v161 = v586;
  v162 = v525;
  v163 = v529;
  if (v579[1])
  {
    v164 = 2 * v529;
    memcpy(&v648[3 * v164], &v651[3 * v164], 48 * (int)v590);
    v163 = v529;
    if ((v516 & 0x80000000) == 0)
    {
      LODWORD(v165) = v523 - v529;
      if ((int)(v523 - v529) < 0)
        v165 = 0xFFFFFFFFLL;
      else
        v165 = v165;
      v166 = v165 + 1;
      do
      {
        *(float16x4_t *)&v648[3 * v104 - 1] = v519;
        *(float16x4_t *)&v648[3 * v104 + 2] = v519;
        v104 += 2;
        --v166;
      }
      while (v166);
    }
    _H0 = v527.i16[3];
    __asm { FCVT            S0, H0 }
    if (_S0 == 0.0)
    {
      memcpy(&v647[3 * v164], &v650[3 * v164], 48 * (int)(2 * (v525 - v529)));
      memcpy(&v646[3 * v164], &v649[3 * v164], 48 * (int)(2 * (v525 - v529)));
      v163 = v529;
      if (v525 > (int)v529)
      {
        v171 = v529;
        do
        {
          *(float16x4_t *)&v647[3 * v108 + 5] = v519;
          *(float16x4_t *)&v646[3 * v108 + 2] = v519;
          ++v171;
          v108 += 2;
        }
        while (v171 < v525);
      }
    }
  }
  v172 = v520[9];
  v173 = v520[10];
  if (v19 < 0.0)
    v174 = 0.0;
  else
    v174 = v520[12];
  if (v19 < 0.0)
    v175 = v520[12];
  else
    v175 = 0.0;
  if (v19 >= 0.0)
    v176 = 0.0;
  else
    v176 = v520[11];
  if (v19 >= 0.0)
    v177 = v520[11];
  else
    v177 = 0.0;
  v178 = v20 <= 0.0;
  if (v20 > 0.0)
    v179 = 0.0;
  else
    v179 = v520[11];
  v180 = v179 + v172;
  v181 = v174 + v173;
  if (v20 > 0.0)
    v182 = v520[11];
  else
    v182 = 0.0;
  v183 = v176 + v172;
  if (v178)
    v184 = v520[12];
  else
    v184 = 0.0;
  v185 = v184 + v173;
  v567 = v177 + v172;
  if (v178)
    v186 = 0.0;
  else
    v186 = v520[12];
  v187 = v186 + v173;
  if (!v159)
  {
    v598 = 0;
    v596 = 0;
    v601 = 0;
    v198 = 0;
    v199 = v579;
    v190 = v593;
    v189 = v594;
    v188 = v587;
    v192 = v591;
    v193 = v528;
    goto LABEL_353;
  }
  v188 = v587;
  v190 = v593;
  v189 = v594;
  v191 = (v180 - v587) * v594 + (v181 - v58) * v593;
  v192 = v591;
  v193 = v528;
  if (v591 <= v191)
  {
    v598 = 0;
    v596 = 0;
    v601 = 0;
    v198 = 0;
    v199 = v579;
    goto LABEL_353;
  }
  v536 = v182;
  v537 = v181;
  v539 = v180;
  v540 = v175;
  v542 = v520[10];
  v544 = v520[9];
  v630[1] = 0;
  v630[0] = 0;
  v629[1] = 0;
  v629[0] = 0;
  v628 = 0u;
  v627 = 0u;
  v626 = 0u;
  v625[0] = 0u;
  v624 = 0u;
  v623 = 0u;
  v622 = 0u;
  v621[0] = 0u;
  v620 = 0u;
  v619 = 0u;
  v618 = 0u;
  v617[0] = 0u;
  memset(v616, 0, sizeof(v616));
  bzero(v606, 0x210uLL);
  bzero(&v609, 0x210uLL);
  bzero(&v614, 0x210uLL);
  v194 = 0;
  memset(v613, 0, 488);
  if (v191 <= v591 + (1.57079633 - v586) * v580)
    v195 = v591 + (1.57079633 - v586) * v580;
  else
    v195 = v191;
  while (1)
  {
    v196 = v513 - v580 * 0.02 * v512 * (float)(int)v194;
    if (v196 <= v195)
      break;
    *(double *)&v613[v194++] = v196;
    if (v194 == 50)
    {
      v197 = 50;
      v195 = v196;
      goto LABEL_204;
    }
  }
  v197 = v194 + 1;
  *(double *)&v613[v194] = v195;
LABEL_204:
  v200 = (v195 - v191) * 0.1;
  v201 = v587;
  if (v200 <= 0.0)
  {
    v205 = v195;
  }
  else
  {
    v202 = 0;
    v203 = v197;
    v204 = &v613[v197];
    while (1)
    {
      v205 = v195 - v200 * (float)(v202 + 1);
      if (v205 <= v191)
        break;
      *(double *)&v204[v202++] = v205;
      if ((_DWORD)v202 == 10)
      {
        v197 = v203 + 10;
        goto LABEL_211;
      }
    }
    v206 = v203 + v202;
    v197 = v206 + 1;
    *(double *)&v613[v206] = v191;
    v205 = v191;
  }
LABEL_211:
  *(double *)&v613[v197] = v205;
  v612 = 0.0;
  v611 = 0.0;
  v207 = (v183 - v587) * v594 + (v185 - v58) * v593;
  v208 = v207 > v191;
  if (v207 >= v513)
    v208 = 0;
  if (v208)
  {
    v611 = (v183 - v587) * v594 + (v185 - v58) * v593;
    v209 = 1;
  }
  else
  {
    v209 = 0;
  }
  v210 = (v567 - v587) * v594 + (v187 - v58) * v593;
  if (v210 > v191 && v210 < v513)
  {
    *(&v611 + v209) = v210;
    if ((_DWORD)v209 == 1 && v612 > v611)
    {
      v612 = v611;
      v611 = (v567 - v587) * v594 + (v187 - v58) * v593;
    }
    v212 = v197 >= 0;
    v209 = (v209 + 1);
LABEL_228:
    v213 = 0;
    v214 = 0;
    v215 = 0;
    while (v214 != (_DWORD)v209)
    {
      if (v212)
      {
        v216 = *(double *)&v613[v215];
        v217 = *(&v611 + v214);
        if (v216 > v217)
          goto LABEL_231;
      }
      else
      {
        v217 = *(&v611 + v214);
      }
      ++v214;
      v216 = v217;
LABEL_237:
      *(&v614 + v213++) = v216;
      v212 = v215 <= v197;
      if (v215 > v197 && v214 >= (int)v209)
        goto LABEL_241;
    }
    v216 = *(double *)&v613[v215];
LABEL_231:
    ++v215;
    goto LABEL_237;
  }
  if (v197 >= 0)
    v208 = 1;
  if (v208)
  {
    v212 = v197 >= 0;
    goto LABEL_228;
  }
  v209 = 0;
  LODWORD(v213) = 0;
LABEL_241:
  v218 = (int)v213 > 0;
  if ((int)v213 > 0 || (int)v209 >= 1)
  {
    v219 = 0;
    v220 = 0;
    v221 = 0;
    while (v220 != (_DWORD)v209)
    {
      if (v218)
      {
        v222 = *(&v614 + v221);
        v223 = *(&v611 + v220);
        if (v222 > v223)
          goto LABEL_247;
        v224 = v220;
      }
      else
      {
        v224 = v220;
        v223 = *(&v611 + v220);
      }
      *((_DWORD *)v630 + v224) = v219;
      ++v220;
      v222 = v223;
LABEL_253:
      *((double *)&v609 + v219++) = v222;
      v218 = v221 < (int)v213;
      if (v221 >= (int)v213 && v220 >= (int)v209)
        goto LABEL_255;
    }
    v222 = *(&v614 + v221);
LABEL_247:
    ++v221;
    goto LABEL_253;
  }
  LODWORD(v219) = 0;
LABEL_255:
  v225 = 0;
  *((_DWORD *)v630 + v209) = v219 - 2;
  v226 = v209;
  do
  {
    v227 = *((double *)&v609 + *(int *)((char *)v630 + v225));
    if (v227 == v205)
    {
      *(_DWORD *)((char *)v629 + v225) = 1;
    }
    else if (v227 == v207)
    {
      *(_DWORD *)((char *)v629 + v225) = 0;
    }
    else if (v227 == v210)
    {
      *(_DWORD *)((char *)v629 + v225) = 2;
    }
    else
    {
      *(_DWORD *)((char *)v629 + v225) = 4;
    }
    v225 += 4;
  }
  while (4 * v209 + 4 != v225);
  v545 = v219 - 2;
  v599 = v209 + 1;
  if (v515 * 1.35000002 <= 1.0)
    v228 = v515 * 1.35000002;
  else
    v228 = 1.0;
  v229 = 170.0;
  if (v515 * 1.35000002 <= 1.0)
    v229 = v515 * 229.500004;
  if (v228 < 0.400000006)
    v229 = 68.000001;
  v602 = v229;
  v577 = v219;
  v534 = v209;
  if ((int)v219 <= 0)
  {
    LODWORD(v639[0]) = 0;
    v601 = 1;
    v270 = v593;
    v269 = v594;
  }
  else
  {
    v230 = 0;
    v231 = 180.0;
    if (v515 * 1.35000002 <= 1.0)
      v231 = v515 * 243.000004;
    _NF = v228 < 0.400000006;
    v232 = 72.0000011;
    if (!_NF)
      v232 = v231;
    v233 = (*(_QWORD *)&v531 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL;
    v569 = v232 - v229;
    v547 = v219;
    v557 = vcvtq_f32_f16(v514);
    v234 = 96 * v219;
    v235 = (double *)&v609;
    v236 = v606;
    v560 = v187;
    do
    {
      v237 = *v235++;
      v238 = v237;
      v239 = v201 + v237 * v594;
      v240 = v58 + v237 * v593;
      v201 = v587;
      v242 = (v183 - v239) * v531;
      v243 = (v567 - v239) * v531;
      v244 = (v185 - v240) * v530 > v242 && (*(_QWORD *)&v530 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
      v245 = v560 - v240;
      if (v244 || v233)
        v242 = (v185 - v240) * v530;
      v246 = v245 * v530 < v243 && (*(_QWORD *)&v530 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
      if (v246 || v233)
        v243 = v245 * v530;
      v247 = (v591 - v238) * (1.0 / v580);
      if (v247 > 1.57079633)
        v247 = 1.57079633;
      v248 = v247;
      v249 = v241;
      v250 = v239 + v594 * v249;
      v251 = v240 + v593 * v249;
      v252 = (v580 * 0.300000012 + 30.0)
           * v580
           / (v580 + 50.0)
           * (float)((float)((float)((float)((float)((float)(v248 * v248) * 0.0054654) + -0.15346) * (float)(v248 * v248))
                           + 0.98442)
                   * v248);
      *v236++ = v252;
      *(float *)&v252 = (v602 - (v252 * (1.0 / ((v580 * 0.300000012 + 30.0) * v580 / (v580 + 50.0))) + -1.0) * v569)
                      * 0.00392156863;
      v253 = v250 + v242 * v583;
      v254 = v251 + v242 * v581;
      v255 = v250 + v243 * v583;
      v256 = v251 + v243 * v581;
      v257 = v253;
      v258 = &v645[v230];
      *(float *)&v254 = v254;
      *((float *)v258 + 12) = v257;
      *((_DWORD *)v258 + 13) = LODWORD(v254);
      v259 = vcvt_f16_f32(vmulq_n_f32(v557, *(float *)&v252));
      *(_OWORD *)(v258 + 56) = xmmword_18474DFC0;
      *(float *)&v254 = v255;
      v260 = &v644[v230];
      *(float *)&v256 = v256;
      *((float16x4_t *)v258 + 10) = v259;
      *(_DWORD *)v260 = LODWORD(v254);
      *((_DWORD *)v260 + 1) = LODWORD(v256);
      *(_OWORD *)(v260 + 8) = xmmword_18474DFC0;
      *((float16x4_t *)v260 + 4) = v259;
      v230 += 96;
    }
    while (v234 != v230);
    v261 = 0;
    v262 = 0;
    LODWORD(v639[0]) = 0;
    v263 = LODWORD(v630[0]);
    v264 = 0uLL;
    v265 = v644;
    v266 = 0uLL;
    v267 = v645;
    v268 = 0uLL;
    v601 = 1;
    v160 = v580;
    v270 = v593;
    v269 = v594;
    v161 = v586;
    v187 = v560;
    v271 = v547;
    do
    {
      ++*((_DWORD *)v639 + v601 - 1);
      if (v262 == v263)
      {
        v272 = 0;
        v273 = 1;
LABEL_297:
        v276 = v601;
        v277 = *((_DWORD *)v629 + v272);
        ++v601;
        *((_DWORD *)v639 + v276) = 0;
      }
      else
      {
        v274 = 0;
        while (v226 != v274)
        {
          v272 = v274 + 1;
          v275 = *((unsigned int *)v630 + ++v274);
          if (v262 == v275)
          {
            v273 = v272 - 1 < v226;
            goto LABEL_297;
          }
        }
        v273 = 0;
        v277 = 4;
      }
      if (v262 < (unint64_t)(v577 - 1))
      {
        v278 = !v273;
        if (!v273 || v277 == 2)
        {
          v279 = v277 == 2 && v273;
          if (v279 && v262 < v545)
            v280 = 5;
          else
            v280 = 3;
          v281 = (float *)&v645[48 * (v280 + 2 * v262)];
          v282 = v281[1];
          v283 = *v281;
          v284 = (float *)&v645[48 * ((2 * (_DWORD)v262) | 1)];
          v285 = v282 - v284[1];
          v286 = *v284 - v283;
          v287 = 1.0 / sqrt(v285 * v285 + v286 * v286);
          v288.f64[0] = v287 * v285;
          v289 = v287 * v286;
          if ((*(_QWORD *)&v288.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (*(_QWORD *)&v289 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          {
            v288.f64[1] = v289;
            v266 = v288;
          }
          v271 = v547;
        }
        if (!v277)
          v278 = 1;
        if (v278 == 1)
        {
          if (v277)
            LOBYTE(v273) = 0;
          if (v273 && v262 < v545)
            v291 = 4;
          else
            v291 = 2;
          v292 = (float *)&v644[48 * (v291 + 2 * v262)];
          v293 = v292[1];
          v294 = *v292;
          v295 = (float *)&v644[48 * (2 * v262)];
          v296 = v294 - *v295;
          v297 = v295[1] - v293;
          v298 = 1.0 / sqrt(v297 * v297 + v296 * v296);
          v299.f64[0] = v298 * v297;
          v300 = v298 * v296;
          if ((*(_QWORD *)&v299.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (*(_QWORD *)&v300 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          {
            v299.f64[1] = v300;
            v264 = v299;
          }
        }
      }
      v302 = 0;
      v303 = (float32x2_t *)&v645[48 * ((2 * v262) | 1)];
      v304 = vcvtq_f64_f32(*v303);
      v305 = (float16x4_t)v303[4];
      v306 = &v606[v262];
      v307 = vld1q_dup_f64(v306);
      v308 = vcvtq_f32_f16(v305);
      v309 = -19008;
      do
      {
        if (v302 * 8)
        {
          v310 = (float32x2_t *)&v267[v309];
          v310[2382] = vcvt_f32_f64(v268);
          v310[2383] = (float32x2_t)0x3F80000000000000;
          v310[2386] = (float32x2_t)v261;
        }
        v311 = *(double *)&top_shadow_rim_interp_colors[v302];
        v312 = (float32x2_t *)&v267[v309];
        v268 = vmlaq_f64(v304, v307, vmulq_n_f64(v266, *(double *)&top_shadow_rim_interp_values[v302]));
        v312[2376] = vcvt_f32_f64(v268);
        v312[2377] = (float32x2_t)0x3F80000000000000;
        *(float *)&v311 = v311;
        v313 = vcvt_f16_f32(vmulq_n_f32(v308, *(float *)&v311));
        v312[2380] = (float32x2_t)v313;
        v261 = v313;
        ++v302;
        v309 += 6336;
      }
      while (v309);
      v314 = 0;
      v315 = (float32x2_t *)&v644[96 * v262];
      v316 = vcvtq_f64_f32(*v315);
      v317 = vcvtq_f32_f16((float16x4_t)v315[4]);
      v318 = -19008;
      do
      {
        if (v314 * 8)
        {
          v319 = (float32x2_t *)&v265[v318];
          v319[2376] = vcvt_f32_f64(v268);
          v319[2377] = (float32x2_t)0x3F80000000000000;
          v319[2380] = (float32x2_t)v261;
        }
        v320 = *(double *)&top_shadow_rim_interp_colors[v314];
        v321 = (float32x2_t *)&v265[v318];
        v268 = vmlaq_f64(v316, v307, vmulq_n_f64(v264, *(double *)&top_shadow_rim_interp_values[v314]));
        v321[2382] = vcvt_f32_f64(v268);
        v321[2383] = (float32x2_t)0x3F80000000000000;
        *(float *)&v320 = v320;
        v322 = vcvt_f16_f32(vmulq_n_f32(v317, *(float *)&v320));
        v321[2386] = (float32x2_t)v322;
        v261 = v322;
        ++v314;
        v318 += 6336;
      }
      while (v318);
      ++v262;
      v267 += 96;
      v265 += 96;
    }
    while (v262 != v271);
  }
  v323 = fabs(v269) == 1.0;
  if (v269 == 0.0)
    v323 = 1;
  v596 = v323;
  if (!v323)
  {
    v491 = 0;
    v492 = v616;
    v493 = (int *)v629;
    v494 = (int *)v630;
    v358 = v599;
    while (1)
    {
      v496 = *v494++;
      v495 = v496;
      v498 = *v493++;
      v497 = v498;
      v499 = &v625[v491 / 0x10];
      v500 = &v621[v491 / 0x10];
      v499->f64[0] = 0.0;
      v499->f64[1] = 0.0;
      f64 = v617[v491 / 0x10].f64;
      v500->f64[0] = 0.0;
      v500->f64[1] = 0.0;
      *f64 = 0.0;
      f64[1] = 0.0;
      v502 = v498 || v495 < 1;
      if (!v502 && v495 < v545)
        break;
      if (v497 == 2 && v495 >= 1 && v495 < v545)
      {
        v505 = (float32x2_t *)&v644[96 * v495];
        *v499 = vcvtq_f64_f32(*v505);
        *v492 = v505[4];
        *v500 = vcvtq_f64_f32(*(float32x2_t *)&v644[48 * (2 * v495 + 3) + 12672]);
        v506 = (unint64_t)&v644[48 * ((2 * v495) | 1) + 12672];
LABEL_468:
        *f64 = *(float *)v506;
        v509 = (float *)(v506 | 4);
        goto LABEL_469;
      }
      if (v497 != 1)
        goto LABEL_470;
      v510 = (float32x2_t *)&v645[48 * ((2 * v495) | 1)];
      *v499 = vcvtq_f64_f32(*v510);
      *v492 = v510[4];
      *v500 = vcvtq_f64_f32(*(float32x2_t *)&v645[96 * v495 + 12672]);
      v511 = (float *)&v644[48 * ((2 * v495) | 1)];
      *f64 = v511[3168];
      v509 = v511 + 3169;
LABEL_469:
      f64[1] = *v509;
LABEL_470:
      v491 += 16;
      ++v492;
      if (16 * v534 + 16 == v491)
        goto LABEL_346;
    }
    v507 = 2 * v495;
    v508 = (float32x2_t *)&v645[48 * ((2 * v495) | 1)];
    *v499 = vcvtq_f64_f32(*v508);
    *v492 = v508[4];
    *v500 = vcvtq_f64_f32(*(float32x2_t *)&v645[48 * (v507 & 0xFFFFFFFE) + 12672]);
    v506 = (unint64_t)&v645[48 * (v507 + 2) + 12672];
    goto LABEL_468;
  }
  v324 = 0;
  v325 = v606[v577 - 1];
  v326 = 2 * v577;
  v327 = v326 - 1;
  v328 = (float32x2_t *)&v645[48 * v326 - 48];
  v329 = vcvtq_f64_f32(*v328);
  v330 = (int)v326 - 2;
  v331 = (float32x2_t *)&v644[48 * v330];
  v332 = vcvtq_f64_f32(*v331);
  v333 = (float16x4_t)v328[4];
  v334 = v333;
  v335 = (float16x4_t)v331[4];
  v336 = v335;
  v337 = v325 * v269;
  v338 = v325 * v270;
  v339 = vcvtq_f32_f16(v333);
  v340 = top_shadow_rim_interp_colors;
  v341 = (double *)top_shadow_rim_interp_values;
  v342 = vcvtq_f32_f16(v335);
  v343 = v332.f64[1];
  v344 = v332.f64[0];
  v345 = v329.f64[1];
  v346 = v329.f64[0];
  do
  {
    v347 = *(double *)v340++;
    v348 = v347;
    v349 = *v341++;
    v350 = v346;
    v351 = (float *)&v641[v324];
    v352 = v345;
    *v351 = v350;
    v351[1] = v352;
    *((_QWORD *)v351 + 1) = 0x3F80000000000000;
    *((float16x4_t *)v351 + 4) = v334;
    *(float *)&v348 = v348;
    v334 = vcvt_f16_f32(vmulq_n_f32(v339, *(float *)&v348));
    v346 = v337 * v349 + v329.f64[0];
    v345 = v338 * v349 + v329.f64[1];
    v353 = v346;
    v354 = v345;
    v351[12] = v353;
    v351[13] = v354;
    *((_QWORD *)v351 + 7) = 0x3F80000000000000;
    *((float16x4_t *)v351 + 10) = v334;
    v355 = v344;
    v356 = v343;
    v351[24] = v355;
    v351[25] = v356;
    *((_QWORD *)v351 + 13) = 0x3F80000000000000;
    *((float16x4_t *)v351 + 16) = v336;
    v336 = vcvt_f16_f32(vmulq_n_f32(v342, *(float *)&v348));
    v344 = v337 * v349 + v332.f64[0];
    v343 = v338 * v349 + v332.f64[1];
    *(float *)&v348 = v344;
    v357 = v343;
    v351[36] = *(float *)&v348;
    v351[37] = v357;
    *((_QWORD *)v351 + 19) = 0x3F80000000000000;
    *((float16x4_t *)v351 + 22) = v336;
    v324 += 192;
  }
  while (v324 != 576);
  v625[0] = v329;
  v621[0] = vcvtq_f64_f32(*(float32x2_t *)&v645[48 * v330 + 12672]);
  v617[0] = vcvtq_f64_f32(v642);
  v626 = v332;
  v616[0] = v333;
  v616[1] = v335;
  v622 = vcvtq_f64_f32(v643);
  v618 = vcvtq_f64_f32(*(float32x2_t *)&v644[48 * v327 + 12672]);
  v358 = 2;
LABEL_346:
  v359 = 0;
  v598 = v358;
  v360 = v640;
  do
  {
    v361 = v625[v359];
    v570 = vsubq_f64(v621[v359], v361);
    v573 = v361;
    v362 = vsubq_f64(v617[v359], v361);
    v363 = v570.f64[1];
    v364 = (float64x2_t)vzip1q_s64((int64x2_t)v570, (int64x2_t)v362);
    v365 = (float64x2_t)vzip2q_s64((int64x2_t)v570, (int64x2_t)v362);
    v366 = vsqrtq_f64(vmlaq_f64(vmulq_f64(v364, v364), v365, v365));
    v367 = vmulq_f64(v362, v570);
    *(float *)v367.f64 = vdivq_f64(vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v367, 1), v367), vmulq_laneq_f64(v366, v366, 1)).f64[0];
    v368 = acosf(*(float *)v367.f64);
    memset(&v604, 0, sizeof(v604));
    CGAffineTransformMakeRotation(&v604, v368 * 0.0344827586);
    v369 = v570.f64[0];
    v370 = 0;
    v371 = (float16x4_t)v616[v359];
    v372 = vcvtq_f32_f16(v371);
    a = v604.a;
    b = v604.b;
    c = v604.c;
    d = v604.d;
    tx = v604.tx;
    ty = v604.ty;
    v379 = v360;
    do
    {
      v380 = -8640;
      v381 = (double *)top_shadow_rim_interp_values;
      v382 = top_shadow_rim_interp_colors;
      v383 = v371;
      v384 = v573.f64[1];
      v385 = v573.f64[0];
      do
      {
        v386 = *(double *)v382++;
        v387 = v386;
        v388 = *v381++;
        v389 = v385;
        v390 = v384;
        *(float *)&v387 = v387;
        v391 = &v379[v380];
        *((float16x4_t *)v391 + 1084) = v383;
        v392 = vcvt_f16_f32(vmulq_n_f32(v372, *(float *)&v387));
        *((float *)v391 + 2160) = v389;
        *(_OWORD *)(v391 + 8648) = xmmword_18474DFC0;
        *((float *)v391 + 2161) = v390;
        *((float16x4_t *)v391 + 1090) = v392;
        v383 = v392;
        v393 = v573.f64[0] + v388 * v369;
        *((float *)v391 + 2172) = v393;
        v394 = v573.f64[1] + v388 * v363;
        *((float *)v391 + 2173) = v394;
        *(_OWORD *)(v391 + 8696) = xmmword_18474DFC0;
        v384 = v573.f64[1] + v388 * v363;
        v385 = v573.f64[0] + v388 * v369;
        v380 += 2880;
      }
      while (v380);
      v395 = tx + a * v369 + c * v363;
      v363 = ty + b * v369 + d * v363;
      ++v370;
      v379 += 96;
      v369 = v395;
    }
    while (v370 != 30);
    ++v359;
    v360 += 8640;
  }
  while (v359 != v358);
  v198 = v577;
  v199 = v579;
  v190 = v593;
  v189 = v594;
  v188 = v587;
  v162 = v525;
  v192 = v591;
  v193 = v528;
  v163 = v529;
  v173 = v542;
  v172 = v544;
  v180 = v539;
  v175 = v540;
  v181 = v537;
  v182 = v536;
LABEL_353:
  v396 = v163 - v193;
  v578 = v198;
  if (!*v199)
  {
    v592 = 0;
    goto LABEL_428;
  }
  v397 = v181 - v58;
  v398 = (v182 + v172 - v188) * v189 + (v175 + v173 - v58) * v190;
  v399 = v160 * 0.01;
  if ((v180 - v188) * v189 + v397 * v190 <= v192)
    v400 = v192;
  else
    v400 = (v180 - v188) * v189 + v397 * v190;
  v558 = v192 + v524;
  if (v398 >= v192 + v524)
    v398 = v192 + v524;
  *(double *)&v574 = v398;
  bzero(&v609, 0x328uLL);
  v615 = 0.0;
  v614 = 0.0;
  bzero(v606, 0x338uLL);
  v402 = fmax(*(double *)&v574 - v591, 0.0) / -(v399 * v517);
  v403 = (int)fmaxf(floorf(v402), -100.0);
  if (v403 <= 0)
  {
    v404 = (1 - v403);
    v409 = (v404 + 1) & 0x1FFFFFFFELL;
    v410 = (uint64x2_t)vdupq_n_s64(v404 - 1);
    v411 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v399 * v517), 0);
    v412 = vadd_s32(vdup_n_s32(v403), (int32x2_t)0x100000000);
    v413 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v591, 0);
    v414 = (int8x16_t)vdupq_lane_s64(v574, 0);
    v415 = (int64x2_t)xmmword_18474E1C0;
    v416 = (double *)&v610;
    v417 = vdupq_n_s64(2uLL);
    v405 = v584;
    v407 = v593;
    v406 = v594;
    v408 = v587;
    do
    {
      v418 = vmovn_s64((int64x2_t)vcgeq_u64(v410, (uint64x2_t)v415));
      v419 = (int8x16_t)vmlsq_f64(v413, vcvtq_f64_f32(vcvt_f32_s32(v412)), v411);
      v420 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v419, (float64x2_t)v414), v414, v419);
      if ((v418.i8[0] & 1) != 0)
      {
        if (v400 <= *(double *)v420.i64)
          v421 = *(double *)v420.i64;
        else
          v421 = v400;
        *(v416 - 1) = v421;
      }
      if ((v418.i8[4] & 1) != 0)
      {
        v422 = *(double *)&v420.i64[1];
        if (v400 > *(double *)&v420.i64[1])
          v422 = v400;
        *v416 = v422;
      }
      v415 = vaddq_s64(v415, v417);
      v412 = vadd_s32(v412, (int32x2_t)0x200000002);
      v416 += 2;
      v409 -= 2;
    }
    while (v409);
  }
  else
  {
    LODWORD(v404) = 0;
    v405 = v584;
    v407 = v593;
    v406 = v594;
    v408 = v587;
  }
  v423 = (v183 - v408) * v406 + (v185 - v58) * v407;
  v424 = v423 < *(double *)&v574 && v423 > v400;
  if (v424)
  {
    v614 = (v183 - v408) * v406 + (v185 - v58) * v407;
    v425 = 1;
  }
  else
  {
    v425 = 0;
  }
  v426 = (v567 - v408) * v406 + (v187 - v58) * v407;
  if (v426 > v400 && v426 < *(double *)&v574)
  {
    *(&v614 + v425) = v426;
    if (v425 == 1 && v615 > v614)
    {
      v615 = v614;
      v614 = (v567 - v408) * v406 + (v187 - v58) * v407;
    }
    v428 = (_DWORD)v404 != 0;
    ++v425;
  }
  else
  {
    v428 = (_DWORD)v404 != 0;
    if ((_DWORD)v404)
      LOBYTE(v424) = 1;
    if (!v424)
    {
      LODWORD(v429) = 0;
      goto LABEL_427;
    }
  }
  v430 = v160;
  v429 = 0;
  v431 = 0;
  v432 = 0;
  while (2)
  {
    if (v431 == v425)
    {
      v433 = *((double *)&v609 + v432);
      goto LABEL_394;
    }
    if (!v428)
    {
      v434 = *(&v614 + v431);
      goto LABEL_399;
    }
    v433 = *((double *)&v609 + v432);
    v434 = *(&v614 + v431);
    if (v433 > v434)
    {
LABEL_394:
      ++v432;
    }
    else
    {
LABEL_399:
      ++v431;
      v433 = v434;
    }
    v606[v429++] = v433;
    v428 = v432 < (int)v404;
    if (v432 < (int)v404 || v431 < v425)
      continue;
    break;
  }
  if ((int)v429 >= 1)
  {
    v555 = v160 * 0.400000006;
    v553 = 1.0 / v160;
    v436 = (v524 + v160 * 0.399745986 - v435) * (1.0 / v160) + -0.949999988;
    v437 = v436 * 3.0;
    v32 = v436 <= 0.0;
    v438 = 0.0;
    if (!v32)
      v438 = v437;
    v439 = -(v438 * v438);
    v440 = 0;
    v442 = expf(v439);
    v443 = (*(_QWORD *)&v531 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL;
    v550 = -(v442 + v442 * v442 * (v442 * v442));
    v548 = vcvtq_f32_f16(v514);
    v538 = 76.5 * fmin(v515 * 15.0, 1.0);
    v561 = v187;
    v563 = v58;
    v565 = v183;
    do
    {
      v444 = v606[v440];
      v445 = v587 + v444 * v594;
      v446 = v563 + v444 * v593;
      v448 = v447;
      v449 = (v185 - v446) * v530 > (v183 - v445) * v531
          && (*(_QWORD *)&v530 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
      if (v449 || v443)
        v450 = (v185 - v446) * v530;
      else
        v450 = (v183 - v445) * v531;
      v451 = (v561 - v446) * v530 < (v567 - v445) * v531
          && (*(_QWORD *)&v530 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
      if (v451 || v443)
        v452 = (v561 - v446) * v530;
      else
        v452 = (v567 - v445) * v531;
      v453 = (v591 - v444) * v553 + 1.57079633;
      v454 = v430;
      v455 = v555
           * ((float)((float)((float)((float)((float)((float)((float)(v453 * v453) * 0.00096967) + -0.039228)
                                            * (float)(v453 * v453))
                                    + 0.49535)
                            * (float)(v453 * v453))
                    + -0.99861)
            + 1.0);
      v571 = v445 + (v448 - v455) * v594;
      v575 = v446 + (v448 - v455) * v593;
      v456 = v450 - v455;
      v457 = v454;
      v458 = v452 + v455;
      v459 = (v558 - (v444 + v448) + v455) * v553 + -0.949999988;
      v460 = v459 * 3.0;
      v32 = v459 <= 0.0;
      v461 = 0.0;
      if (!v32)
        v461 = v460;
      v462 = -(v461 * v461);
      v463 = expf(v462);
      v464 = (v550 + v463 + v463 * v463 * (v463 * v463)) * v538;
      v465 = (v452 - v450) * 0.5;
      if (v465 < v455)
        v464 = v464 * ((v452 - v450) * 0.25 / v455 + 0.5);
      if (v455 >= v465)
        v466 = (v452 - v450) * 0.5;
      else
        v466 = v455;
      v467 = v466 + v450;
      v183 = v565;
      v468 = v452 - v466;
      v161 = v586;
      v469 = v464 * 0.00392156863;
      v603 = vcvt_f16_f32(vmulq_n_f32(v548, v469));
      v470 = v456;
      v405 = v584;
      v471 = v458;
      v430 = v457;
      *(float *)&v467 = v467;
      *(float *)&v468 = v468;
    }
    while (v429 != v440);
  }
  v199 = v579;
  v193 = v528;
LABEL_427:
  v592 = 2 * v429;
LABEL_428:
  *(_BYTE *)(*(_QWORD *)(v8 + 16) + 481) |= 1u;
  v472 = *(_QWORD *)(v8 + 16);
  *(_BYTE *)(v472 + 480) = 3;
  *(float16x4_t *)(v8 + 800) = v521[3];
  ++*(_DWORD *)(v8 + 240);
  *(_BYTE *)(v472 + 16) = 3;
  CA::OGL::Context::bind_surface(v8, v526, 0, 1u, 1, 0.0);
  if (v522)
  {
    v474 = *(float32x4_t **)(v8 + 16);
    if ((*((_BYTE *)v522 + 144) & 0x10) != 0)
      scale = CA::Mat4Impl::mat4_get_scale(v522, 0, 0, v473);
    else
      scale = *((double *)v522 + 16);
    v476 = 1.0 / scale;
    v474[6] = vmulq_n_f32(v474[6], v476);
  }
  v608 = 0u;
  v477 = *(double *)(*(_QWORD *)(v8 + 232) + 8);
  *(_QWORD *)&v606[0] = v8;
  v606[1] = v477;
  v607 = 0u;
  v606[2] = 0.0;
  WORD4(v607) = 0;
  CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v606);
  v588 = 2 * (v396 & ~(v396 >> 31));
  v610 = 0;
  v609 = 0;
  _H0 = v527.i16[3];
  __asm { FCVT            S8, H0 }
  v585 = 2 * v529;
  v582 = 2 * (v162 - v529);
  while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v606, &v609))
  {
    if (*v199)
    {
      *(_BYTE *)(*(_QWORD *)(v8 + 16) + 16) = 0;
      v480 = v592;
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _BYTE *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v8 + 280))(v8, 2, v592, 0, v638, 0, v592, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v8 + 280))(v8, 2, v480, 0, v637, 0, v480, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v8 + 280))(v8, 2, v480, 0, v636, 0, v480, 0);
      *(_BYTE *)(*(_QWORD *)(v8 + 16) + 16) = 3;
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _OWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v8 + 280))(v8, 2, v588, 0, &v651[6 * v193], 0, v588, 0);
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _OWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v8 + 280))(v8, 2, v585, 0, v650, 0, v585, 0);
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _OWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v8 + 280))(v8, 2, v585, 0, v649, 0, v585, 0);
    }
    if (v199[1])
    {
      if (v578)
      {
        v481 = 0;
        *(_BYTE *)(*(_QWORD *)(v8 + 16) + 16) = 0;
        v482 = v640;
        do
        {
          if (v601 >= 1)
          {
            v483 = &v644[6336 * v481];
            v484 = &v645[6336 * v481];
            v485 = (int *)v639;
            v486 = v601;
            do
            {
              v487 = *v485++;
              (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _BYTE *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v8 + 280))(v8, 2, (2 * v487), 0, v484, 0, (2 * v487), 0);
              (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _BYTE *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v8 + 280))(v8, 2, (2 * v487), 0, v483, 0, (2 * v487), 0);
              v484 += 96 * v487;
              v483 += 96 * v487;
              --v486;
            }
            while (v486);
          }
          if (v596)
            (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v8 + 280))(v8, 2, 4, 0, &v641[192 * v481], 0, 4, 0);
          v488 = v482;
          v489 = v598;
          if (v598 >= 1)
          {
            do
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v8 + 280))(v8, 2, 60, 0, v488, 0, 60, 0);
              v488 += 8640;
              --v489;
            }
            while (v489);
          }
          ++v481;
          v482 += 2880;
        }
        while (v481 != 3);
      }
      *(_BYTE *)(*(_QWORD *)(v8 + 16) + 16) = 3;
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _OWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v8 + 280))(v8, 2, v590, 0, &v648[6 * v529], 0, v590, 0);
      if (_S8 == 0.0)
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _OWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v8 + 280))(v8, 2, v582, 0, &v647[6 * v529], 0, v582, 0);
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _OWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v8 + 280))(v8, 2, v582, 0, &v646[6 * v529], 0, v582, 0);
      }
      *(_BYTE *)(*(_QWORD *)(v8 + 16) + 16) = 11;
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _OWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v8 + 280))(v8, 2, v590, 0, &v651[6 * v529], 0, v590, 0);
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _OWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v8 + 280))(v8, 2, v582, 0, &v650[6 * v529], 0, v582, 0);
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _OWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v8 + 280))(v8, 2, v582, 0, &v649[6 * v529], 0, v582, 0);
      v199 = v579;
    }
  }
  result = CA::OGL::Context::unbind_surface((_QWORD *)v8, v526, 0);
  *(_QWORD *)(v8 + 800) = 0;
  ++*(_DWORD *)(v8 + 240);
  *(_BYTE *)(*(_QWORD *)(v8 + 16) + 16) = 0;
  *(_BYTE *)(*(_QWORD *)(v8 + 16) + 481) &= ~1u;
  return result;
}

double *CA::OGL::`anonymous namespace'::curl_displace(double *this, double a2, double a3, double a4, double *a5, double a6, double a7)
{
  double v7;
  double v8;
  float v9;

  v7 = (a3 - a2) / a4;
  if (v7 + 1.57079633 <= a7)
    v8 = v7 + 1.57079633;
  else
    v8 = a7;
  if (v8 < a6)
    v8 = a6;
  v9 = v8;
  if (this)
    *this = (float)((float)((float)((float)((float)((float)(v9 * v9) * 0.0054654) + -0.15346) * (float)(v9 * v9))
                          + 0.98442)
                  * v9);
  return this;
}

float CA::OGL::`anonymous namespace'::curl_strip_emit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, float a14, float a15, float a16, float a17)
{
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  float v30;
  uint64_t v31;
  float v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float result;

  v20 = a6 + a10 * a14;
  v21 = a7 + a11 * a14;
  v22 = a6 + a10 * a16;
  v23 = a7 + a11 * a16;
  v24 = a6 + a10 * a17;
  v25 = a7 + a11 * a17;
  v26 = a6 + a10 * a15;
  v27 = a7 + a11 * a15;
  v28 = a8 + a12 * a16;
  v29 = a8 + a12 * a17;
  v30 = v20;
  v31 = a2 + 96 * a4;
  v32 = v21;
  *(float *)v31 = v30;
  *(float *)(v31 + 4) = v32;
  *(_QWORD *)(v31 + 8) = 0x3F80000000000000;
  *(float *)&v28 = v28;
  v33 = a9 + a13 * a16;
  *(_DWORD *)(v31 + 16) = LODWORD(v28);
  *(float *)(v31 + 20) = v33;
  *(_QWORD *)(v31 + 32) = 0;
  v34 = *a5;
  v35 = v22;
  v36 = a2 + 48 * ((2 * a4) | 1);
  v37 = v23;
  *(float *)v36 = v35;
  *(float *)(v36 + 4) = v37;
  *(_QWORD *)(v36 + 8) = 0x3F80000000000000;
  *(_DWORD *)(v36 + 16) = LODWORD(v28);
  *(float *)(v36 + 20) = v33;
  *(_QWORD *)(v36 + 32) = v34;
  v38 = *a5;
  v39 = a1 + 96 * a4;
  *(float *)v39 = v35;
  *(float *)(v39 + 4) = v37;
  *(_QWORD *)(v39 + 8) = 0x3F80000000000000;
  *(_DWORD *)(v39 + 16) = LODWORD(v28);
  *(float *)(v39 + 20) = v33;
  *(_QWORD *)(v39 + 32) = v38;
  v40 = *a5;
  *(float *)&v28 = v24;
  v41 = a1 + 48 * ((2 * a4) | 1);
  v42 = v25;
  *(_DWORD *)v41 = LODWORD(v28);
  *(float *)(v41 + 4) = v42;
  *(_QWORD *)(v41 + 8) = 0x3F80000000000000;
  *(float *)&v29 = v29;
  v43 = a9 + a13 * a17;
  *(_DWORD *)(v41 + 16) = LODWORD(v29);
  *(float *)(v41 + 20) = v43;
  *(_QWORD *)(v41 + 32) = v40;
  v44 = *a5;
  v45 = a3 + 96 * a4;
  *(_DWORD *)v45 = LODWORD(v28);
  *(float *)(v45 + 4) = v42;
  *(_QWORD *)(v45 + 8) = 0x3F80000000000000;
  *(_DWORD *)(v45 + 16) = LODWORD(v29);
  *(float *)(v45 + 20) = v43;
  *(_QWORD *)(v45 + 32) = v44;
  *(float *)&v28 = v26;
  v46 = a3 + 48 * ((2 * a4) | 1);
  result = v27;
  *(_DWORD *)v46 = LODWORD(v28);
  *(float *)(v46 + 4) = result;
  *(_QWORD *)(v46 + 8) = 0x3F80000000000000;
  *(_DWORD *)(v46 + 16) = LODWORD(v29);
  *(float *)(v46 + 20) = v43;
  *(_QWORD *)(v46 + 32) = 0;
  return result;
}

double *CA::OGL::`anonymous namespace'::curl_bounds(double *a1, double *a2, double *a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  float64x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  double v31;
  double v32;
  float64x2_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  BOOL v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  uint64_t v67;
  double v68;
  double v69;
  double v70;
  double v71;
  float v72;
  double v73;
  double *v74;
  double *result;
  double *v76;
  float64x2_t v77;
  float64x2_t v78;
  double v79;
  uint64_t v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  BOOL v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double *v107;
  uint64_t v108;
  double *v109;
  unint64_t v110;
  const double *v111;
  double v112;
  double v113;
  double v114;
  double *v115;
  double v116;
  double v117;
  double v118;
  double v119;
  BOOL v120;
  float v121;
  double v122;
  double *v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  float64x2_t v134;
  int64x2_t v135;
  int64x2_t v136;
  int32x2_t v137;
  float64x2_t v138;
  double v139;
  double v140;
  double v141;
  double v142;
  unint64_t v147;
  const double *v148;
  double v149;
  double *v150;
  double v151;
  double v152;
  double v153;
  _BOOL4 v154;
  float v155;
  double v156;
  double *v157;
  float64x2_t v158;
  float64x2_t v159;
  int64x2_t v160;
  int64x2_t v161;
  int32x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  float64x2_t v186;
  double v187;
  double v188;
  double v189;
  double v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  _OWORD v197[10];
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;

  v210 = *MEMORY[0x1E0C80C00];
  v208 = 0u;
  v209 = 0u;
  v206 = 0u;
  v207 = 0u;
  v6 = a1[7];
  v5 = a1[8];
  v7 = 0.0;
  if (v6 < 0.0)
    v8 = 0.0;
  else
    v8 = a3[3];
  v10 = a2[2];
  v9 = a2[3];
  if (v6 < 0.0)
    v11 = 0.0;
  else
    v11 = a2[3];
  if (v6 < 0.0)
    v12 = a2[3];
  else
    v12 = 0.0;
  v13 = a1[12];
  if (v6 < 0.0)
    v14 = 0.0;
  else
    v14 = a1[12];
  if (v6 < 0.0)
    v15 = a1[12];
  else
    v15 = 0.0;
  if (v6 >= 0.0)
    v16 = 0.0;
  else
    v16 = a1[11];
  if (v6 >= 0.0)
    v17 = a1[11];
  else
    v17 = 0.0;
  if (v5 > 0.0)
    v18 = 0.0;
  else
    v18 = a3[2];
  v19 = v18 + *a3;
  v20 = v8 + a3[1];
  if (v5 > 0.0)
    v21 = 0.0;
  else
    v21 = a2[2];
  v22 = *a2;
  v23 = a2[1];
  if (v5 > 0.0)
    v24 = a2[2];
  else
    v24 = 0.0;
  if (v5 > 0.0)
    v25 = a2[3];
  else
    v25 = 0.0;
  v26 = a1[3];
  v179 = a1[2];
  v27.f64[0] = fmax(v26, 1.57079633);
  v27.f64[1] = v26;
  v28 = vcvt_f32_f64(v27);
  v29 = vmul_f32(v28, v28);
  v30 = vmla_f32((float32x2_t)vdup_n_s32(0x3F7C02BDu), v29, vmla_f32((float32x2_t)vdup_n_s32(0xBE1D2553), (float32x2_t)vdup_n_s32(0x3BB31712u), v29));
  v31 = a1[5];
  v32 = a1[6];
  v33 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL), vcvtq_f64_f32(vmul_f32(v30, v28)));
  v166 = 1.57079633 - v26;
  v167 = a1[11];
  v34 = a1[9];
  v35 = a1[10];
  v36 = vmlad_n_f64(fabs(v32) * a3[3] - (-(v179 * (1.57079633 - v26)) - fabs(v31) * a3[2]), v179, vsubq_f64(v33, (float64x2_t)vdupq_laneq_s64((int64x2_t)v33, 1)).f64[0])* *a1- v179 * (1.57079633 - v26);
  v37 = v31 * (v22 - v19 + v21) + v32 * (v23 - v20 + v11);
  if (v5 > 0.0)
    v38 = 0.0;
  else
    v38 = a1[11];
  v39 = v22 - v19 + v24;
  if (v5 > 0.0)
    v40 = a1[11];
  else
    v40 = 0.0;
  v41 = v31 * v39 + v32 * (v23 - v20 + v12);
  v181 = a1[10];
  v182 = a1[9];
  v42 = v34 - v19 + v38;
  v43 = v35 - v20 + v14;
  v44 = v34 - v19 + v40;
  v45 = v35 - v20 + v15;
  v199 = a2[1];
  v200 = v10 + v22;
  v202 = v10 + v22;
  v203 = v9 + v23;
  if (v5 > 0.0)
    v46 = 0.0;
  else
    v46 = v13;
  v204 = v22;
  v205 = v9 + v23;
  v169 = v13;
  if (v5 > 0.0)
    v47 = v13;
  else
    v47 = 0.0;
  v48 = v36 > v37 && v36 < v41;
  v49 = 1.0 / v6;
  v50 = 1.0 / v5;
  v51 = v31 * v44;
  v198 = v22;
  v201 = v23;
  v188 = v19;
  v189 = v20;
  v176 = 1.0 / v6;
  v177 = v6;
  v175 = 1.0 / v5;
  v178 = v5;
  if (v48)
  {
    v53 = v25 + v23;
    if (v5 > 0.0)
      v9 = 0.0;
    if (v6 >= 0.0)
      v54 = v10;
    else
      v54 = 0.0;
    v55 = v54 + v22;
    v56 = v9 + v23;
    if (v6 < 0.0)
      v7 = v10;
    v57 = v7 + v22;
    v58 = v19 + v36 * v31;
    v59 = v20 + v36 * v32;
    v60 = (v57 - v58) * v49;
    v61 = (v55 - v58) * v49;
    v62 = (v56 - v59) * v50;
    if (v62 > v60 && COERCE_UNSIGNED_INT64(fabs(1.0 / v5)) < 0x7FF0000000000000
      || COERCE_UNSIGNED_INT64(fabs(1.0 / v6)) >= 0x7FF0000000000000)
    {
      v60 = v62;
    }
    if ((v53 - v59) * v50 < v61 && COERCE_UNSIGNED_INT64(fabs(1.0 / v5)) < 0x7FF0000000000000
      || COERCE_UNSIGNED_INT64(fabs(1.0 / v6)) >= 0x7FF0000000000000)
    {
      v61 = (v53 - v59) * v50;
    }
    *(double *)&v206 = v58 + v60 * v6;
    *((double *)&v206 + 1) = v59 + v60 * v5;
    *(double *)&v207 = v58 + v61 * v6;
    *((double *)&v207 + 1) = v59 + v61 * v5;
    v52 = 6;
  }
  else
  {
    v52 = 4;
  }
  v185 = v26;
  v67 = 0;
  v172 = v16 + v182;
  v173 = v46 + v181;
  v171 = v17 + v182;
  v174 = v47 + v181;
  v183 = v31 * v42 + v32 * v43;
  v180 = v51 + v32 * v45;
  memset(v197, 0, sizeof(v197));
  v68 = a1[4];
  v190 = v31;
  do
  {
    v69 = *(double *)((char *)&v198 + v67 * 16);
    v70 = *(double *)((char *)&v198 + v67 * 16 + 8);
    v71 = v32;
    v32 = v71;
    v31 = v190;
    v73 = v72;
    v74 = (double *)&v197[v67];
    *v74 = v69 + v190 * v73;
    v74[1] = v70 + v71 * v73;
    ++v67;
  }
  while (v52 != v67);
  v195 = 0u;
  v196 = 0u;
  result = CA::BoundsImpl::set_points(v195.f64, (double *)v197, (const double *)v52);
  v78 = v195;
  v77 = v196;
  *(float64x2_t *)a2 = v195;
  *((float64x2_t *)a2 + 1) = v77;
  v186 = v77;
  v79 = v36 + v166 * v179;
  v198 = v182;
  v199 = v181;
  v200 = v167 + v182;
  v201 = v181;
  v168 = v169 + v181;
  v170 = v200;
  v202 = v200;
  v203 = v168;
  v204 = v182;
  v205 = v168;
  v80 = 4;
  v81 = v36;
  if (v36 <= v183)
  {
    v83 = v188;
    v82 = v20;
    v84 = v6;
    v85 = v178;
    v86 = v190;
    v87 = v71;
    v89 = v175;
    v88 = 1.0 / v6;
  }
  else
  {
    v83 = v188;
    v82 = v20;
    v84 = v6;
    v85 = v178;
    v86 = v190;
    v87 = v71;
    v89 = v175;
    v88 = 1.0 / v6;
    if (v36 < v180)
    {
      v90 = v188 + v36 * v190;
      v91 = v20 + v36 * v71;
      v92 = (v172 - v90) * v176;
      v93 = (v171 - v90) * v176;
      if ((v173 - v91) * v175 > v92 && (*(_QWORD *)&v175 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
        || COERCE_UNSIGNED_INT64(fabs(1.0 / v6)) >= 0x7FF0000000000000)
      {
        v92 = (v173 - v91) * v175;
      }
      if ((v174 - v91) * v175 < v93 && (*(_QWORD *)&v175 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
        || COERCE_UNSIGNED_INT64(fabs(1.0 / v6)) >= 0x7FF0000000000000)
      {
        v93 = (v174 - v91) * v175;
      }
      *(double *)&v206 = v90 + v92 * v6;
      *((double *)&v206 + 1) = v91 + v92 * v178;
      *(double *)&v207 = v90 + v93 * v6;
      *((double *)&v207 + 1) = v91 + v93 * v178;
      v80 = 6;
    }
  }
  v98 = v79 > v183 && v79 < v180;
  v165 = v78;
  if (v98)
  {
    v99 = v83 + v79 * v86;
    v100 = v82 + v79 * v87;
    v101 = (v172 - v99) * v88;
    v102 = (v171 - v99) * v88;
    if ((v173 - v100) * v89 > v101 && (*(_QWORD *)&v89 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
      || (*(_QWORD *)&v88 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      v101 = (v173 - v100) * v89;
    }
    if ((v174 - v100) * v89 < v102 && (*(_QWORD *)&v89 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
      || (*(_QWORD *)&v88 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      v102 = (v174 - v100) * v89;
    }
    v107 = &v198 + 2 * v80;
    v108 = 16 * v80;
    *v107 = v99 + v101 * v84;
    v107[1] = v100 + v101 * v85;
    v80 += 2;
    v109 = (double *)((char *)&v198 + (v108 | 0x10));
    *v109 = v99 + v102 * v84;
    v109[1] = v100 + v102 * v85;
  }
  v110 = 0;
  v111 = 0;
  v112 = a1[2];
  v113 = a1[3];
  v114 = a1[4];
  v115 = &v199;
  do
  {
    v116 = *(v115 - 1);
    v117 = v116 - v83;
    v118 = *v115;
    v119 = v117 * v86 + (*v115 - v82) * v87;
    if (v110 > 3 || (v119 > v81 ? (v120 = v119 < v79) : (v120 = 0), v120))
    {
      v87 = v71;
      v82 = v189;
      v86 = v190;
      v81 = v36;
      v122 = v121;
      v123 = (double *)&v197[(_QWORD)v111];
      v111 = (const double *)((char *)v111 + 1);
      *v123 = v116 + v190 * v122;
      v123[1] = v118 + v71 * v122;
    }
    ++v110;
    v115 += 2;
    v83 = v188;
  }
  while (v80 != v110);
  if (!v111)
  {
    v125 = v178;
    v126 = v179;
    v124 = v177;
    goto LABEL_155;
  }
  v193 = 0u;
  v194 = 0u;
  result = CA::BoundsImpl::set_points(v193.f64, (double *)v197, v111);
  v87 = v71;
  v86 = v190;
  v124 = v177;
  v125 = v178;
  v126 = v179;
  v127 = v179 * -0.400000006 * (v190 + v177);
  v128 = (v177 - v190) * (v179 * 0.400000006);
  if (v127 >= v128)
    v129 = (v177 - v190) * (v179 * 0.400000006);
  else
    v129 = v179 * -0.400000006 * (v190 + v177);
  if (v129 < 0.0)
  {
    v193.f64[0] = v193.f64[0] + v129;
    v194.f64[0] = v194.f64[0] - v129;
  }
  v130 = v179 * -0.400000006 * (v178 + v71);
  v131 = (v178 - v71) * (v179 * 0.400000006);
  if (v127 <= v128)
    v132 = (v177 - v190) * (v179 * 0.400000006);
  else
    v132 = v179 * -0.400000006 * (v190 + v177);
  if (v132 > 0.0)
    v194.f64[0] = v194.f64[0] + v132;
  if (v130 >= v131)
    v133 = (v178 - v71) * (v179 * 0.400000006);
  else
    v133 = v179 * -0.400000006 * (v178 + v71);
  v82 = v189;
  v81 = v36;
  if (v133 < 0.0)
  {
    v193.f64[1] = v193.f64[1] + v133;
    v194.f64[1] = v194.f64[1] - v133;
  }
  if (v130 <= v131)
    v130 = (v178 - v71) * (v179 * 0.400000006);
  if (v130 > 0.0)
    v194.f64[1] = v194.f64[1] + v130;
  v134 = v194;
  v135 = vclezq_f64(v186);
  v136 = vclezq_f64(v194);
  v137 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v136, v135), (int8x16_t)vzip2q_s64(v136, v135))));
  if ((v137.i8[4] & 1) != 0)
  {
    if ((v137.i8[0] & 1) != 0)
      goto LABEL_155;
    v138 = v193;
  }
  else
  {
    if ((v137.i8[0] & 1) != 0)
      goto LABEL_155;
    v138 = vminnmq_f64(v165, v193);
    v134 = vsubq_f64(vmaxnmq_f64(vaddq_f64(v165, v186), vaddq_f64(v193, v194)), v138);
  }
  v165 = v138;
  *(float64x2_t *)a2 = v138;
  *((float64x2_t *)a2 + 1) = v134;
LABEL_155:
  if (v81 <= v183)
    return result;
  v198 = v182;
  v199 = v181;
  v200 = v170;
  v201 = v181;
  v202 = v170;
  v203 = v168;
  v204 = v182;
  v205 = v168;
  v139 = v188 + v81 * v86;
  v140 = v82 + v81 * v87;
  v141 = (v172 - v139) * v176;
  v142 = (v171 - v139) * v176;
  if ((v173 - v140) * v175 > v141 && (*(_QWORD *)&v175 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
    || (*(_QWORD *)&v176 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v141 = (v173 - v140) * v175;
  }
  if ((v174 - v140) * v175 < v142 && (*(_QWORD *)&v175 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
    || (*(_QWORD *)&v176 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v142 = (v174 - v140) * v175;
  }
  v147 = 0;
  v148 = 0;
  *(double *)&v206 = v139 + v141 * v124;
  *((double *)&v206 + 1) = v140 + v141 * v125;
  *(double *)&v207 = v139 + v142 * v124;
  *((double *)&v207 + 1) = v140 + v142 * v125;
  v149 = a1[4];
  v184 = a1[3];
  v187 = a1[2];
  v150 = &v199;
  do
  {
    v151 = *(v150 - 1);
    v152 = *v150;
    v153 = (v151 - v188) * v86 + (*v150 - v82) * v87;
    v154 = v81 > v153;
    if (v81 >= v180)
      v154 = 0;
    if (v147 > 3 || v154)
    {
      v87 = v71;
      v82 = v189;
      v86 = v190;
      v81 = v36;
      v156 = v155;
      v157 = (double *)&v197[(_QWORD)v148];
      v148 = (const double *)((char *)v148 + 1);
      *v157 = v151 + v190 * v156;
      v157[1] = v152 + v71 * v156;
    }
    ++v147;
    v150 += 2;
  }
  while (v147 != 6);
  v191 = 0u;
  v192 = 0u;
  CA::BoundsImpl::set_points(v191.f64, (double *)v197, v148);
  result = CA::BoundsImpl::inset(v191.f64, (-30.0 - v126 * 0.300000012) * v126 / (v126 + 50.0), (-30.0 - v126 * 0.300000012) * v126 / (v126 + 50.0));
  v158 = *(float64x2_t *)(a2 + 2);
  v159 = v192;
  v160 = vclezq_f64(v158);
  v161 = vclezq_f64(v192);
  v162 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v161, v160), (int8x16_t)vzip2q_s64(v161, v160))));
  if ((v162.i8[4] & 1) != 0)
  {
    if ((v162.i8[0] & 1) != 0)
      return result;
    v163 = v191;
  }
  else
  {
    if ((v162.i8[0] & 1) != 0)
      return result;
    v164 = vaddq_f64(v165, v158);
    v163 = vminnmq_f64(v165, v191);
    v159 = vsubq_f64(vmaxnmq_f64(v164, vaddq_f64(v191, v192)), v163);
  }
  *(float64x2_t *)a2 = v163;
  *((float64x2_t *)a2 + 1) = v159;
  return result;
}

double CA::OGL::`anonymous namespace'::PageCurlTransition::DOD@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, const CA::Transform *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double *v12;
  float64x2_t v13;
  float64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int32x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  _OWORD v21[4];
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  v8 = a3->n128_u64[0];
  v9 = a3->n128_u64[1];
  *(_QWORD *)a5 = a3->n128_u64[0];
  *(_QWORD *)(a5 + 8) = v9;
  v10 = a3[1].n128_u64[0];
  v11 = a3[1].n128_u64[1];
  *(_QWORD *)(a5 + 16) = v10;
  *(_QWORD *)(a5 + 24) = v11;
  v23 = v8;
  v24 = v9;
  v25 = v10;
  v26 = v11;
  v13 = *(float64x2_t *)(a5 + 16);
  v14 = (float64x2_t)a3[1];
  v15 = vclezq_f64(v13);
  v16 = vclezq_f64(v14);
  v17 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v16, v15), (int8x16_t)vzip2q_s64(v16, v15))));
  if ((v17.i8[4] & 1) != 0)
  {
    if ((v17.i8[0] & 1) == 0)
    {
      v18 = *(float64x2_t *)a3;
LABEL_6:
      *(float64x2_t *)a5 = v18;
      *(float64x2_t *)(a5 + 16) = v14;
    }
  }
  else if ((v17.i8[0] & 1) == 0)
  {
    v19 = vaddq_f64(*(float64x2_t *)a5, v13);
    v18 = vminnmq_f64(*(float64x2_t *)a5, *(float64x2_t *)a3);
    v14 = vsubq_f64(vmaxnmq_f64(v19, vaddq_f64(*(float64x2_t *)a3, v14)), v18);
    goto LABEL_6;
  }
  return CA::Rect::apply_transform((int8x16_t *)a5, a4, v12);
}

__n128 CA::OGL::`anonymous namespace'::PageCurlTransition::ROI(uint64_t a1, uint64_t a2, __n128 *a3, uint64_t a4, uint64_t a5, __n128 *a6, __n128 *a7)
{
  __n128 result;

  *a6 = *a3;
  a6[1] = a3[1];
  *a7 = *a3;
  result = a3[1];
  a7[1] = result;
  return result;
}

uint64_t CA::OGL::`anonymous namespace'::PageCurlTransition::render(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, CA::Transform *a5, uint64_t a6, uint64_t a7, double a8, int32x4_t a9)
{
  uint64_t v13;
  uint64_t v14;
  int32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  int v22;
  int v23;
  int v24;
  int8x16_t v25;
  uint64_t v26;
  int64x2_t v27;
  int8x16_t v28;
  double v29;
  double v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  float64x2_t v35;
  float64x2_t v36;
  unint64_t v37;
  double *v38;
  float32x4_t *v39;
  double scale;
  float v41;
  uint64_t v42;
  double *v43;
  int32x4_t v44;
  int32x4_t v45;
  int v46;
  int v47;
  int v48;
  int8x16_t v49;
  uint64_t v50;
  int64x2_t v51;
  int8x16_t v52;
  double v53;
  double v54;
  uint64_t v55;
  unsigned int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int8x16_t v61;
  int8x16_t v62;
  int32x4_t v63;
  float16x4_t v64;
  float16x4_t v65;
  __int128 v66;
  float32x4_t v72;
  float64x2_t v73;
  int32x4_t v74;
  int32x2_t v75[2];
  float64x2_t v76;
  __int128 v77;
  _OWORD v78[5];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _OWORD v91[17];
  __int128 v92;
  uint64_t v93;

  v13 = result;
  v93 = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)(a3 + 232);
  v15.i64[1] = 0;
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  if (*(_BYTE *)(result + 8))
    v16 = a6;
  else
    v16 = a7;
  if (*(_BYTE *)(result + 8))
    v17 = a7;
  else
    v17 = a6;
  *(_BYTE *)(*(_QWORD *)(a3 + 16) + 481) |= 1u;
  *(_QWORD *)(a3 + 800) = *(_QWORD *)(v14 + 24);
  ++*(_DWORD *)(a3 + 240);
  *(_BYTE *)(*(_QWORD *)(a3 + 16) + 16) = 1;
  if (v16)
  {
    v18 = *(double *)a4;
    v19 = *(double *)(a4 + 8);
    v15.i64[0] = *(_QWORD *)(a4 + 16);
    a9.i64[0] = *(_QWORD *)(a4 + 24);
    v20 = *(double *)v15.i64 + *(double *)a4;
    v21 = *(double *)a9.i64 + v19;
    v22 = *(_DWORD *)(v16 + 40);
    v23 = *(_DWORD *)(v16 + 44);
    if (v22 <= v23)
      v24 = *(_DWORD *)(v16 + 44);
    else
      v24 = *(_DWORD *)(v16 + 40);
    v15.i32[0] = 1073741822;
    a9.i32[0] = v24;
    v25 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(a9, v15), 0);
    v26 = *(_QWORD *)(v16 + 32);
    v27.i64[0] = (int)v26;
    v27.i64[1] = SHIDWORD(v26);
    v28 = vbslq_s8(v25, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v27));
    v29 = (double)v22;
    v30 = (double)v23;
    if (v24 > 1073741822)
    {
      v29 = 1.79769313e308;
      v30 = 1.79769313e308;
    }
    v76 = (float64x2_t)v28;
    *(double *)&v77 = v29;
    *((double *)&v77 + 1) = v30;
    CA::Rect::apply_transform((int8x16_t *)&v76, a5, (double *)a3);
    *(float *)&v31 = v18;
    *(float *)&v32 = v19;
    *(_QWORD *)&v79 = __PAIR64__(v32, v31);
    *(_QWORD *)&v81 = 0x3C003C003C003C00;
    *(float *)&v33 = v21;
    *(_QWORD *)&v82 = __PAIR64__(v33, v31);
    *(_QWORD *)&v84 = 0x3C003C003C003C00;
    *(float *)&v34 = v20;
    *(_QWORD *)&v85 = __PAIR64__(v32, v34);
    *(_QWORD *)&v87 = 0x3C003C003C003C00;
    *(_QWORD *)&v88 = __PAIR64__(v33, v34);
    v35 = vsubq_f64(*(float64x2_t *)a4, v76);
    v36 = vaddq_f64(*(float64x2_t *)(a4 + 16), v35);
    *(float32x2_t *)&v35.f64[0] = vcvt_f32_f64(v35);
    *((_QWORD *)&v79 + 1) = 0x3F80000000000000;
    *(float64_t *)&v80 = v35.f64[0];
    *(float32x2_t *)&v36.f64[0] = vcvt_f32_f64(v36);
    v37 = __PAIR64__(HIDWORD(v35.f64[0]), LODWORD(v36.f64[0]));
    HIDWORD(v35.f64[0]) = HIDWORD(v36.f64[0]);
    *((_QWORD *)&v82 + 1) = 0x3F80000000000000;
    *(float64_t *)&v83 = v35.f64[0];
    *((_QWORD *)&v85 + 1) = 0x3F80000000000000;
    *(_QWORD *)&v86 = v37;
    *((_QWORD *)&v88 + 1) = 0x3F80000000000000;
    *(float64_t *)&v89 = v36.f64[0];
    *(_QWORD *)&v90 = 0x3C003C003C003C00;
    CA::OGL::Context::bind_surface(a3, v16, 0, 1u, 1, 0.0);
    v39 = *(float32x4_t **)(a3 + 16);
    if ((*((_BYTE *)a5 + 144) & 0x10) != 0)
      scale = CA::Mat4Impl::mat4_get_scale(a5, 0, 0, v38);
    else
      scale = *((double *)a5 + 16);
    v41 = 1.0 / scale;
    v39[6] = vmulq_n_f32(v39[6], v41);
    v42 = *(_QWORD *)(*(_QWORD *)(a3 + 232) + 8);
    *(_QWORD *)&v91[0] = a3;
    *((_QWORD *)&v91[0] + 1) = v42;
    memset(&v91[1], 0, 40);
    LOWORD(v91[2]) = 0;
    CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v91);
    v75[0] = 0;
    v75[1] = 0;
    while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v91, v75))
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, __int128 *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a3 + 280))(a3, 2, 4, 0, &v79, 0, 4, 0);
    result = CA::OGL::Context::unbind_surface((_QWORD *)a3, v16, 0);
  }
  if (v17)
  {
    memset(v78, 0, 72);
    v76 = 0u;
    v77 = 0u;
    memset(v91, 0, sizeof(v91));
    v92 = 0u;
    LOWORD(v91[0]) = 257;
    *(_OWORD *)((char *)&v91[12] + 8) = *(_OWORD *)((char *)v78 + 8);
    *(_OWORD *)((char *)&v91[13] + 8) = *(_OWORD *)((char *)&v78[1] + 8);
    *(_OWORD *)((char *)v91 + 8) = xmmword_18474DF40;
    *(_OWORD *)((char *)&v91[1] + 8) = 0u;
    *(_OWORD *)((char *)&v91[2] + 8) = xmmword_18474DF50;
    memset((char *)&v91[3] + 8, 0, 32);
    *(_OWORD *)((char *)&v91[5] + 8) = xmmword_18474DF40;
    *(_OWORD *)((char *)&v91[6] + 8) = 0u;
    *(_OWORD *)((char *)&v91[7] + 8) = xmmword_18474DF50;
    v44 = *(int32x4_t *)a4;
    v45 = *(int32x4_t *)(a4 + 16);
    v73 = *(float64x2_t *)a4;
    v74 = v45;
    *(_OWORD *)((char *)&v91[8] + 8) = *(_OWORD *)a4;
    *(int32x4_t *)((char *)&v91[9] + 8) = v45;
    v46 = *(_DWORD *)(v17 + 40);
    v47 = *(_DWORD *)(v17 + 44);
    if (v46 <= v47)
      v48 = *(_DWORD *)(v17 + 44);
    else
      v48 = *(_DWORD *)(v17 + 40);
    v44.i32[0] = 1073741822;
    v45.i32[0] = v48;
    v49 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v45, v44), 0);
    v50 = *(_QWORD *)(v17 + 32);
    v51.i64[0] = (int)v50;
    v51.i64[1] = SHIDWORD(v50);
    v52 = vbslq_s8(v49, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v51));
    v53 = (double)v46;
    v54 = (double)v47;
    if (v48 > 1073741822)
    {
      v53 = 1.79769313e308;
      v54 = 1.79769313e308;
    }
    *(int8x16_t *)((char *)&v91[10] + 8) = v52;
    *((double *)&v91[11] + 1) = v53;
    *(double *)&v91[12] = v54;
    CA::Rect::apply_transform((int8x16_t *)((char *)&v91[10] + 8), a5, v43);
    *(float64x2_t *)((char *)&v78[2] + 8) = v73;
    *(int32x4_t *)((char *)&v78[3] + 8) = v74;
    v55 = *(_QWORD *)(a2 + 32);
    if (!v55)
      goto LABEL_37;
    v56 = *(unsigned int **)(v55 + 40);
    if (!v56)
      goto LABEL_37;
    v57 = v56[4];
    if (!(_DWORD)v57)
      goto LABEL_37;
    v58 = 0;
    while (1)
    {
      v59 = *(_QWORD *)&v56[2 * v58 + 6];
      if (*(_DWORD *)(v59 + 16) == 280)
        break;
      if (v57 == ++v58)
        goto LABEL_37;
    }
    if ((v58 & 0x80000000) == 0 && *(_QWORD *)(v59 + 24))
    {
      BYTE8(v91[16]) = 0;
      v60 = bswap32(CA::Render::KeyValueArray::get_color_key((CA::Render::KeyValueArray *)v56, (const CA::Render::KeyValueArray *)0x118, 0));
      v61.i32[0] = v60;
      v61.i32[1] = v60 >> 8;
      v61.i32[2] = HIWORD(v60);
      v62.i64[0] = 0xFF000000FFLL;
      v62.i64[1] = 0xFF000000FFLL;
      v63 = (int32x4_t)vandq_s8(v61, v62);
      v63.i32[3] = vshrq_n_u32((uint32x4_t)vdupq_n_s32(v60), 0x18uLL).i32[3];
      v64 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v63), (float32x4_t)vdupq_n_s32(0x3B808081u)));
      v65 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16((float16x4_t)0x3C003A063A063A06), vcvtq_f32_f16(v64)));
      *((float16x4_t *)&v91[15] + 1) = v64;
      *(float16x4_t *)&v91[16] = v65;
    }
    else
    {
LABEL_37:
      BYTE8(v91[16]) = 1;
      *(_OWORD *)((char *)&v91[15] + 8) = xmmword_18474E270;
      v65 = (float16x4_t)0x3C00356534743434;
      v64 = (float16x4_t)0xC500C500C500C500;
    }
    *(_QWORD *)&v66 = 0x3C003C003C003C00;
    *((_QWORD *)&v66 + 1) = 0x3C003C003C003C00;
    *(_OWORD *)((char *)&v91[14] + 8) = v66;
    *(_QWORD *)&v92 = 0x3C002E462A870000;
    *((_QWORD *)&v92 + 1) = 0x4014000000000000;
    if (v76.f64[0] > 0.850000024)
    {
      _D3 = v76.f64[0] * -1699.99993 + 1699.99998;
      *(float *)&_D3 = (float)(int)_D3 * 0.0039216;
      __asm { FCVT            H3, S3 }
      v72 = vcvtq_f32_f16((float16x4_t)vdup_lane_s16(*(int16x4_t *)&_D3, 0));
      *((float16x4_t *)&v91[14] + 1) = vcvt_f16_f32(vmulq_f32(v72, vcvtq_f32_f16((float16x4_t)0x3C003C003C003C00)));
      *(_QWORD *)&v91[15] = *((_QWORD *)&v91[14] + 1);
      *(float16x4_t *)&v91[16] = vcvt_f16_f32(vmulq_f32(v72, vcvtq_f32_f16(v65)));
      *((float16x4_t *)&v91[15] + 1) = vcvt_f16_f32(vmulq_f32(v72, vcvtq_f32_f16(v64)));
      *(float16x4_t *)&v92 = vcvt_f16_f32(vmulq_f32(v72, vcvtq_f32_f16((float16x4_t)0x3C002E462A870000)));
    }
  }
  else
  {
    *(_QWORD *)(a3 + 800) = 0;
    ++*(_DWORD *)(a3 + 240);
    *(_BYTE *)(*(_QWORD *)(a3 + 16) + 16) = 0;
    *(_BYTE *)(*(_QWORD *)(a3 + 16) + 481) &= ~1u;
  }
  return result;
}

uint64_t CA::OGL::`anonymous namespace'::PageCurlTransition::source_requirement()
{
  return 5;
}

__n128 CA::OGL::`anonymous namespace'::curl_transition_get_in_state(uint64_t a1, __n128 *a2, uint64_t a3, int a4)
{
  float v7;
  double v8;
  double v9;
  double v10;
  int v11;
  double v12;
  float v13;
  __float2 v14;
  double cosval;
  double sinval;
  __n128 result;

  v7 = *(float *)(a1 + 48);
  if (a4)
    v7 = 1.0 - v7;
  v8 = v7;
  *(double *)a3 = v8;
  *(_QWORD *)(a3 + 16) = 0x4062C00000000000;
  v9 = CA::Render::TimingFunction::evaluate((CA::Render::TimingFunction *)&unk_184751EA8, a2->n128_f64, v8, 0.00001)
     * 0.523598776;
  v10 = v9 + 3.92699082;
  *(double *)(a3 + 8) = v9 + 3.92699082;
  *(_OWORD *)(a3 + 24) = xmmword_18474E280;
  v11 = *(_DWORD *)(a1 + 20);
  if (v11 == 235)
  {
    v12 = 5.49778714;
    goto LABEL_7;
  }
  if (v11 == 236)
  {
    v12 = 2.35619449;
LABEL_7:
    v10 = v9 + v12;
    *(double *)(a3 + 8) = v10;
  }
  v13 = v10;
  v14 = __sincosf_stret(v13);
  cosval = v14.__cosval;
  if (fabs(v14.__cosval) < 0.001 || (sinval = v14.__sinval, fabs(v14.__sinval) < 0.001))
  {
    cosval = roundf(v14.__cosval);
    sinval = roundf(v14.__sinval);
  }
  *(double *)(a3 + 40) = cosval;
  *(double *)(a3 + 48) = sinval;
  *(double *)(a3 + 56) = -sinval;
  *(double *)(a3 + 64) = cosval;
  *(__n128 *)(a3 + 72) = *a2;
  result = a2[1];
  *(__n128 *)(a3 + 88) = result;
  return result;
}

void CA::Render::Object::~Object(CA::Render::Object *this, const CA::Render::Object *a2)
{
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

{
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  JUMPOUT(0x186DBD990);
}

void CA::Render::Object::show(CA::Render::Object *this)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  uint8_t buf[4];
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v2 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *((unsigned __int8 *)this + 12);
      if (v3 > 0x38 || (v4 = CA::Render::type_names[v3], !*v4))
        v4 = "<unknown>";
      *(_DWORD *)buf = 136315138;
      v6 = v4;
      _os_log_impl(&dword_184457000, v2, OS_LOG_TYPE_DEFAULT, "(%s)", buf, 0xCu);
    }
  }
}

_QWORD *CA::Render::mix_objects(_QWORD *this, unint64_t a2, CA::Render::Object *a3, CA::Render::Object *a4, unint64_t a5, const CA::Render::ValueInterpolator *a6)
{
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;

  if (!a3 || !a4)
    goto LABEL_25;
  if (*(double *)a6 <= 0.0)
  {
    v13 = (unsigned int *)((char *)a3 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    if (!v14)
    {
      a3 = 0;
      do
        v17 = __ldaxr(v13);
      while (__stlxr(v17 - 1, v13));
    }
    *this = a3;
  }
  else if (*(double *)a6 >= 1.0)
  {
    v15 = (unsigned int *)((char *)a4 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    if (!v16)
    {
      a4 = 0;
      do
        v18 = __ldaxr(v15);
      while (__stlxr(v18 - 1, v15));
    }
    *this = a4;
  }
  else
  {
    if (*((_BYTE *)a6 + 112) && a2 | a5)
    {
      v6 = *((unsigned __int8 *)a3 + 12);
      if (v6 == 26)
      {
        a3 = (CA::Render::Object *)*((_QWORD *)a3 + 4);
        if (!a3)
          goto LABEL_25;
        v6 = *((unsigned __int8 *)a3 + 12);
      }
      v7 = *((unsigned __int8 *)a4 + 12);
      if (v7 == 26)
      {
        v8 = *((_QWORD *)a4 + 4);
        if (!v8)
          goto LABEL_25;
        v7 = *(unsigned __int8 *)(v8 + 12);
      }
      if (v6 == v7)
      {
        if (a2)
        {
          v9 = *(unsigned __int8 *)(a2 + 12);
          if (v9 == 26)
          {
            v10 = *(_QWORD *)(a2 + 32);
            if (!v10)
              goto LABEL_25;
            v9 = *(unsigned __int8 *)(v10 + 12);
          }
          if (v9 != v6)
            goto LABEL_25;
        }
        if (!a5)
          return (_QWORD *)(*(uint64_t (**)(CA::Render::Object *))(*(_QWORD *)a3 + 64))(a3);
        v11 = *(unsigned __int8 *)(a5 + 12);
        if (v11 != 26)
          goto LABEL_23;
        v12 = *(_QWORD *)(a5 + 32);
        if (v12)
        {
          v11 = *(unsigned __int8 *)(v12 + 12);
LABEL_23:
          if (v11 == v6)
            return (_QWORD *)(*(uint64_t (**)(CA::Render::Object *))(*(_QWORD *)a3 + 64))(a3);
        }
      }
LABEL_25:
      *this = 0;
      return this;
    }
    return (_QWORD *)(*(uint64_t (**)(CA::Render::Object *, CA::Render::Object *, const CA::Render::ValueInterpolator *))(*(_QWORD *)a3 + 56))(a3, a4, a6);
  }
  return this;
}

void CA::Render::show_object(CA::Render *this, const CA::Render::Object *a2)
{
  NSObject *v2;
  uint8_t v3[8];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  CA::Render::show_object(this, 0);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v2 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_184457000, v2, OS_LOG_TYPE_DEFAULT, "\n", v3, 2u);
    }
  }
}

{
  NSObject *v2;
  uint8_t v3[8];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (this)
  {
    (*(void (**)(CA::Render *, const CA::Render::Object *))(*(_QWORD *)this + 40))(this, a2);
  }
  else if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v2 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_184457000, v2, OS_LOG_TYPE_DEFAULT, "()", v3, 2u);
    }
  }
}

void CA::Render::show_newline(CA::Render *this)
{
  int v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  uint64_t v7;

  v1 = (int)this;
  v7 = *MEMORY[0x1E0C80C00];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v2 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      v4 = 2 * v1;
      v5 = 2080;
      v6 = "";
      _os_log_impl(&dword_184457000, v2, OS_LOG_TYPE_DEFAULT, "\n%*s", buf, 0x12u);
    }
  }
}

void CA::Render::show_transform(CA::Render *this, const char *a2, const double *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t buf[4];
  CA::Render *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  CA::Render::show_newline((CA::Render *)((_DWORD)a3 + 1));
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v5 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)a2;
      v7 = *((_QWORD *)a2 + 1);
      v8 = *((_QWORD *)a2 + 2);
      v9 = *((_QWORD *)a2 + 3);
      v10 = *((_QWORD *)a2 + 4);
      v11 = *((_QWORD *)a2 + 5);
      v12 = *((_QWORD *)a2 + 6);
      v13 = *((_QWORD *)a2 + 7);
      v15 = *((_QWORD *)a2 + 8);
      v14 = *((_QWORD *)a2 + 9);
      v16 = *((_QWORD *)a2 + 10);
      v17 = *((_QWORD *)a2 + 11);
      v18 = *((_QWORD *)a2 + 12);
      v19 = *((_QWORD *)a2 + 13);
      v20 = *((_QWORD *)a2 + 14);
      v21 = *((_QWORD *)a2 + 15);
      *(_DWORD *)buf = 136319234;
      v23 = this;
      v24 = 2048;
      v25 = v6;
      v26 = 2048;
      v27 = v7;
      v28 = 2048;
      v29 = v8;
      v30 = 2048;
      v31 = v9;
      v32 = 2048;
      v33 = v10;
      v34 = 2048;
      v35 = v11;
      v36 = 2048;
      v37 = v12;
      v38 = 2048;
      v39 = v13;
      v40 = 2048;
      v41 = v15;
      v42 = 2048;
      v43 = v14;
      v44 = 2048;
      v45 = v16;
      v46 = 2048;
      v47 = v17;
      v48 = 2048;
      v49 = v18;
      v50 = 2048;
      v51 = v19;
      v52 = 2048;
      v53 = v20;
      v54 = 2048;
      v55 = v21;
      _os_log_impl(&dword_184457000, v5, OS_LOG_TYPE_DEFAULT, "(%s [%g %g %g %g; %g %g %g %g; %g %g %g %g; %g %g %g %g])",
        buf,
        0xACu);
    }
  }
}

void CA::Render::show_affine_transform(CA::Render *this, const char *a2, const CGAffineTransform *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t buf[4];
  CA::Render *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  CA::Render::show_newline((CA::Render *)((_DWORD)a3 + 1));
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v5 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)a2;
      v7 = *((_QWORD *)a2 + 1);
      v8 = *((_QWORD *)a2 + 2);
      v9 = *((_QWORD *)a2 + 3);
      v10 = *((_QWORD *)a2 + 4);
      v11 = *((_QWORD *)a2 + 5);
      *(_DWORD *)buf = 136316674;
      v13 = this;
      v14 = 2048;
      v15 = v6;
      v16 = 2048;
      v17 = v7;
      v18 = 2048;
      v19 = v8;
      v20 = 2048;
      v21 = v9;
      v22 = 2048;
      v23 = v10;
      v24 = 2048;
      v25 = v11;
      _os_log_impl(&dword_184457000, v5, OS_LOG_TYPE_DEFAULT, "(%s [%g %g %g %g %g %g])", buf, 0x48u);
    }
  }
}

void CA::Render::show_cfstring(const __CFString *this, const __CFString *a2)
{
  NSObject *v2;
  uint8_t buf[4];
  char *v4;
  char buffer[16];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (this)
  {
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    *(_OWORD *)buffer = 0u;
    v6 = 0u;
    if (CFStringGetCString(this, buffer, 512, 0x8000100u))
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v2 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v4 = buffer;
          _os_log_impl(&dword_184457000, v2, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
        }
      }
    }
  }
}

void CA::Render::show_statistics(CA::Render *this)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t i;
  NSObject *v6;
  const char *v7;
  int v8;
  uint8_t buf[4];
  double v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (x_log_hook_p())
  {
    v1 = mach_absolute_time();
    CATimeWithHostTime(v1);
    x_log_();
  }
  else
  {
    v2 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v3 = mach_absolute_time();
      *(_DWORD *)buf = 134217984;
      v10 = CATimeWithHostTime(v3);
      _os_log_impl(&dword_184457000, v2, OS_LOG_TYPE_DEFAULT, "\n** Render objects at time %f **\n\n", buf, 0xCu);
    }
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v4 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v10 = COERCE_DOUBLE("TYPE");
      v11 = 2080;
      v12 = "COUNT";
      _os_log_impl(&dword_184457000, v4, OS_LOG_TYPE_DEFAULT, "%20s %s\n", buf, 0x16u);
    }
  }
  for (i = 0; i != 57; ++i)
  {
    if (CA::Render::Object::_instance_counts[i])
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v6 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v7 = CA::Render::type_names[i];
          if (!*v7)
            v7 = "<unknown>";
          v8 = CA::Render::Object::_instance_counts[i];
          *(_DWORD *)buf = 136315394;
          v10 = *(double *)&v7;
          v11 = 1024;
          LODWORD(v12) = v8;
          _os_log_impl(&dword_184457000, v6, OS_LOG_TYPE_DEFAULT, "%20s %d\n", buf, 0x12u);
        }
      }
    }
  }
}

double CA::WindowServer::Display::panel_physical_size(CA::WindowServer::Display *this)
{
  return 0.0;
}

double CA::WindowServer::Display::min_scale(CA::WindowServer::Display *this)
{
  return 1.0;
}

double CA::WindowServer::Display::max_scale(CA::WindowServer::Display *this)
{
  return 1.0;
}

BOOL CA::WindowServer::Display::supports_pq(CA::WindowServer::Display *this)
{
  return ((*((_QWORD *)this + 80) >> 55) & 0x1E) - 16 < 0xA;
}

uint64_t CA::WindowServer::Display::supports_hlg(CA::WindowServer::Display *this)
{
  return 0;
}

void CA::WindowServer::Display::iosurface_alignment(_QWORD *a1@<X8>)
{
  *a1 = 64;
  a1[1] = qword_1ECDC4CD8;
  a1[2] = 1;
  a1[3] = *MEMORY[0x1E0C85AD8];
  a1[4] = 0;
}

uint64_t CA::WindowServer::Display::framebuffer_format(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::finish_update(CA::WindowServer::Display *this, CA::Render::Update *a2)
{
  return 0;
}

uint64_t CA::WindowServer::Display::current_surface(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::color_flush_shape(CA::WindowServer::Display *this, const CA::Render::Update *a2)
{
  if ((_BYTE)ca_debug_options)
    return *((_QWORD *)a2 + 2);
  else
    return 0;
}

uint64_t CA::WindowServer::Display::clone_update(CA::WindowServer::Display *this, CA::WindowServer::Server *a2, CA::WindowServer::Display *a3, CA::Render::Update *a4, unsigned int *a5, BOOL *a6)
{
  return 0;
}

uint64_t CA::WindowServer::Display::set_mode(CA::WindowServer::Display *this, const CA::WindowServer::Display::Mode *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)a2;
  result = CA::WindowServer::Display::Mode::operator==(*((_QWORD *)this + 80), *(_QWORD *)a2);
  if ((result & 1) == 0)
  {
    *((_QWORD *)this + 80) = v3;
    return CA::WindowServer::Display::post_display_changed((uint64_t)this);
  }
  return result;
}

uint64_t CA::WindowServer::Display::refresh_rate(CA::WindowServer::Display *this)
{
  return (*(uint64_t (**)(CA::WindowServer::Display *))(*(_QWORD *)this + 736))(this);
}

uint64_t CA::WindowServer::Display::copy_string()
{
  return 0;
}

void CA::WindowServer::Display::emit_mode_set_signpost(CA::WindowServer::Display *this)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint64_t v4;
  _DWORD v5[2];
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (CA::WindowServer::Display::get_display_perf_log(void)::once_token[0] != -1)
    dispatch_once(CA::WindowServer::Display::get_display_perf_log(void)::once_token, &__block_literal_global_61);
  v2 = *((unsigned int *)this + 6);
  if ((_DWORD)v2)
  {
    v3 = CA::WindowServer::Display::get_display_perf_log(void)::log;
    if (os_signpost_enabled((os_log_t)CA::WindowServer::Display::get_display_perf_log(void)::log))
    {
      v4 = *((_QWORD *)this + 83);
      v5[0] = 67240448;
      v5[1] = v2;
      v6 = 2050;
      v7 = v4;
      _os_signpost_emit_with_name_impl(&dword_184457000, v3, OS_SIGNPOST_EVENT, v2, "ModeSet", "displayId=%{public, name=displayId}u begin=%{public,signpost.description:begin_time}llu", (uint8_t *)v5, 0x12u);
    }
  }
}

uint64_t CA::WindowServer::Display::set_signal_type(uint64_t result, char a2)
{
  *(_BYTE *)(result + 636) = a2;
  return result;
}

uint64_t CA::WindowServer::Display::release_resources(os_unfair_lock_s *this)
{
  uint64_t result;

  CA::WindowServer::Display::purge_surfaces(this, 1);
  result = *(_QWORD *)&this[72]._os_unfair_lock_opaque;
  if (result)
  {
    result = CA::IOSAManager::unref(result);
    *(_QWORD *)&this[72]._os_unfair_lock_opaque = 0;
  }
  return result;
}

uint64_t CA::WindowServer::Display::idle(os_unfair_lock_s *this)
{
  uint64_t result;

  CA::WindowServer::Display::purge_surfaces(this, 1);
  result = *(_QWORD *)&this[72]._os_unfair_lock_opaque;
  if (result)
  {
    result = CA::IOSAManager::unref(result);
    *(_QWORD *)&this[72]._os_unfair_lock_opaque = 0;
  }
  return result;
}

uint64_t CA::WindowServer::Display::create_surface()
{
  return 0;
}

os_log_t ___ZN2CA12WindowServer7Display20get_display_perf_logEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreanimation", "Display.Performance");
  CA::WindowServer::Display::get_display_perf_log(void)::log = (uint64_t)result;
  return result;
}

uint64_t CA::WindowServer::Display::Mode::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  int8x16_t v3;
  int8x16_t v4;
  int64x2_t v5;
  int64x2_t v6;

  if (a1 == a2)
  {
    v2 = 1;
  }
  else
  {
    v3.i64[0] = a1;
    v3.i64[1] = a2;
    v4 = vandq_s8(v3, (int8x16_t)vdupq_n_s64(0xFFC000001FFFFFFFLL));
    *(int32x2_t *)v3.i8 = vshrn_n_s64((int64x2_t)v3, 0x1DuLL);
    v5.i64[0] = v3.i32[0] & 0x1FFFFFF;
    v5.i64[1] = v3.i32[1] & 0x1FFFFFF;
    v6 = (int64x2_t)vorrq_s8((int8x16_t)vshll_n_u32((uint32x2_t)(*(_QWORD *)&vshl_n_s32(vmovn_s64((int64x2_t)vcvtq_u64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_s64(v5), (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL))))), 0x10uLL) & 0x1FFFFFF01FFFFFFLL), 0x1DuLL), v4);
    v2 = vmovn_s64(vceqq_s64(v6, vdupq_laneq_s64(v6, 1))).u8[0];
  }
  return v2 & 1;
}

CA::WindowServer::Display::Mode *CA::WindowServer::Display::Mode::Mode(CA::WindowServer::Display::Mode *this, CFDictionaryRef theDict)
{
  const void *Value;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  const void *v10;
  _BOOL4 v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  const void *v17;
  _BOOL4 v18;
  uint64_t v19;

  *(_QWORD *)this = 0;
  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, CFSTR("width"));
    if (Value)
      v5 = CA_CFIntValue(Value) & 0x3FFF;
    else
      v5 = 0;
    *(_QWORD *)this = *(_QWORD *)this & 0xFFFFFFFFFFFFC000 | v5;
    v6 = CFDictionaryGetValue(theDict, CFSTR("height"));
    if (v6)
      v7 = (unsigned __int16)(CA_CFIntValue(v6) & 0x3FFF) << 14;
    else
      v7 = 0;
    *(_QWORD *)this = *(_QWORD *)this & 0xFFFFFFFFF0003FFFLL | v7;
    v8 = CFDictionaryGetValue(theDict, CFSTR("refreshRate"));
    if (v8)
      v9 = (CA_CFIntValue(v8) & 0x1FFFFFF) << 29;
    else
      v9 = 0;
    *(_QWORD *)this = v9 | *(_QWORD *)this & 0xFFC000001FFFFFFFLL;
    v10 = CFDictionaryGetValue(theDict, CFSTR("isVirtual"));
    if (v10)
    {
      v11 = CA_CFBoolValue(v10);
      v12 = 0x40000000000000;
      if (!v11)
        v12 = 0;
    }
    else
    {
      v12 = 0;
    }
    *(_QWORD *)this = *(_QWORD *)this & 0xFFBFFFFFFFFFFFFFLL | v12;
    v13 = CFDictionaryGetValue(theDict, CFSTR("pixelFormat"));
    if (v13)
      v14 = (CA_CFIntValue(v13) & 0x1F) << 55;
    else
      v14 = 0;
    *(_QWORD *)this = v14 | *(_QWORD *)this & 0xF07FFFFFFFFFFFFFLL;
    v15 = CFDictionaryGetValue(theDict, CFSTR("colorRange"));
    if (v15)
      v16 = (CA_CFIntValue(v15) & 3) << 60;
    else
      v16 = 0;
    *(_QWORD *)this = v16 | *(_QWORD *)this & 0xCFFFFFFFFFFFFFFFLL;
    v17 = CFDictionaryGetValue(theDict, CFSTR("isUnsafe"));
    if (v17)
    {
      v18 = CA_CFBoolValue(v17);
      v19 = 0x4000000000000000;
      if (!v18)
        v19 = 0;
    }
    else
    {
      v19 = 0;
    }
    *(_QWORD *)this = *(_QWORD *)this & 0xBFFFFFFFFFFFFFFFLL | v19;
  }
  return this;
}

BOOL CA::WindowServer::Display::Mode::operator<(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;

  v3 = *a1;
  v4 = ((v3 >> 14) & 0x3FFF) * (v3 & 0x3FFF) * (((v3 >> 29) >> 16) & 0x1FF);
  v5 = ((*a2 >> 14) & 0x3FFF) * (*a2 & 0x3FFF) * (((*a2 >> 29) >> 16) & 0x1FF);
  if (v4 < v5)
    return 1;
  if (v4 > v5)
    return 0;
  v6 = (v3 >> 29) & 0x1FFFFFF;
  v7 = (*a2 >> 29) & 0x1FFFFFF;
  if (v6 < v7)
    return 1;
  if (v6 > v7)
    return 0;
  v9 = CA::WindowServer::Display::Mode::hdr_type(v3);
  if (v9 < CA::WindowServer::Display::Mode::hdr_type(*a2))
    return 1;
  v10 = CA::WindowServer::Display::Mode::hdr_type(*a1);
  if (v10 > CA::WindowServer::Display::Mode::hdr_type(*a2))
    return 0;
  v11 = *a1;
  v12 = (*a1 >> 52) & 0xF8 | (*a1 >> 60) & 3;
  v13 = *a2;
  v14 = (*a2 >> 52) & 0xF8 | (*a2 >> 60) & 3;
  if (v12 < v14)
    return 1;
  if (v12 > v14)
    return 0;
  if ((v11 & 0x40000000000000) != 0)
  {
    if ((v13 & 0x40000000000000) == 0)
      return 1;
  }
  else if ((v13 & 0x40000000000000) != 0)
  {
    return 0;
  }
  return v11 < 0 && v13 >= 0;
}

uint64_t CA::WindowServer::Display::Mode::hdr_type(unint64_t this)
{
  unint64_t v1;
  unsigned int v3;

  v1 = (this >> 55) & 0x1F;
  if (!this || (this & 0x10000000) != 0)
  {
    if (CADeviceIsVirtualized::once[0] != -1)
      dispatch_once(CADeviceIsVirtualized::once, &__block_literal_global_204);
    if ((((_DWORD)v1 - 22) & 0xFFFFFFFD) != 0)
      v3 = 2;
    else
      v3 = 3;
    if (CADeviceIsVirtualized::is_virtualized)
      return v3;
    else
      return 2;
  }
  else if ((v1 - 16) > 0xC)
  {
    return 1;
  }
  else
  {
    return dword_184751F00[(v1 - 16)];
  }
}

uint64_t CA::WindowServer::Display::ModeSet::sort(CA::WindowServer::Display::ModeSet *this)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;

  v2 = *(_QWORD *)this;
  v3 = (unint64_t *)*((_QWORD *)this + 1);
  v4 = 126 - 2 * __clz(((uint64_t)v3 - v2) >> 3);
  if (v3 == (unint64_t *)v2)
    v5 = 0;
  else
    v5 = v4;
  result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *,false>(v2, v3, v5, 1);
  v7 = *(_QWORD *)this;
  v8 = *((_QWORD *)this + 1);
  v9 = (_QWORD *)(v8 - 8);
  if (*(_QWORD *)this != v8 && (unint64_t)v9 > v7)
  {
    v11 = v7 + 8;
    do
    {
      v12 = *(_QWORD *)(v11 - 8);
      *(_QWORD *)(v11 - 8) = *v9;
      *v9-- = v12;
      v13 = v11 >= (unint64_t)v9;
      v11 += 8;
    }
    while (!v13);
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *,false>(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  BOOL v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  BOOL v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t *v33;
  int64_t v34;
  int64_t v35;
  int64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t *v56;
  BOOL v57;
  unint64_t *v58;
  unint64_t *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66[2];

  v7 = (unint64_t *)result;
  v66[1] = *MEMORY[0x1E0C80C00];
LABEL_2:
  v8 = a2 - 1;
  v62 = a2 - 3;
  v63 = a2 - 2;
  v9 = v7;
  v64 = a2;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = v10 >> 3;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = CA::WindowServer::Display::Mode::operator<(v8, v7);
        if ((_DWORD)result)
        {
          v25 = *v7;
          *v7 = *v8;
          *v8 = v25;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(v7, v7 + 1, v8);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(v7, v7 + 1, v7 + 2, v8);
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(v7, v7 + 1, v7 + 2, v7 + 3, v8);
      default:
        if (v10 <= 191)
        {
          v26 = v7 + 1;
          v28 = v7 == a2 || v26 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v28)
            {
              v29 = 0;
              v30 = v7;
              do
              {
                v31 = v30;
                v30 = v26;
                result = CA::WindowServer::Display::Mode::operator<(v26, v31);
                if ((_DWORD)result)
                {
                  v66[0] = *v30;
                  v32 = v29;
                  while (1)
                  {
                    *(unint64_t *)((char *)v7 + v32 + 8) = *(unint64_t *)((char *)v7 + v32);
                    if (!v32)
                      break;
                    v32 -= 8;
                    result = CA::WindowServer::Display::Mode::operator<(v66, (unint64_t *)((char *)v7 + v32));
                    if ((result & 1) == 0)
                    {
                      v33 = (unint64_t *)((char *)v7 + v32 + 8);
                      goto LABEL_72;
                    }
                  }
                  v33 = v7;
LABEL_72:
                  *v33 = v66[0];
                }
                v26 = v30 + 1;
                v29 += 8;
              }
              while (v30 + 1 != a2);
            }
          }
          else if (!v28)
          {
            do
            {
              v58 = v7;
              v7 = v26;
              result = CA::WindowServer::Display::Mode::operator<(v26, v58);
              if ((_DWORD)result)
              {
                v66[0] = *v7;
                v59 = v7;
                do
                {
                  v60 = v59;
                  v61 = *--v59;
                  *v60 = v61;
                  result = CA::WindowServer::Display::Mode::operator<(v66, v60 - 2);
                }
                while ((result & 1) != 0);
                *v59 = v66[0];
              }
              v26 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v34 = (v11 - 2) >> 1;
            v35 = v34;
            do
            {
              v36 = v35;
              if (v34 >= v35)
              {
                v37 = (2 * v35) | 1;
                v38 = &v7[v37];
                if (2 * v35 + 2 < (uint64_t)v11 && CA::WindowServer::Display::Mode::operator<(&v7[v37], v38 + 1))
                {
                  ++v38;
                  v37 = 2 * v36 + 2;
                }
                v39 = &v7[v36];
                result = CA::WindowServer::Display::Mode::operator<(v38, v39);
                if ((result & 1) == 0)
                {
                  v66[0] = *v39;
                  do
                  {
                    v40 = v38;
                    *v39 = *v38;
                    if (v34 < v37)
                      break;
                    v41 = (2 * v37) | 1;
                    v38 = &v7[v41];
                    v42 = 2 * v37 + 2;
                    if (v42 < (uint64_t)v11 && CA::WindowServer::Display::Mode::operator<(&v7[v41], v38 + 1))
                    {
                      ++v38;
                      v41 = v42;
                    }
                    result = CA::WindowServer::Display::Mode::operator<(v38, v66);
                    v39 = v40;
                    v37 = v41;
                  }
                  while (!(_DWORD)result);
                  *v40 = v66[0];
                }
              }
              v35 = v36 - 1;
            }
            while (v36);
            v43 = (unint64_t)v10 >> 3;
            v44 = v64;
            do
            {
              v45 = 0;
              v65 = *v7;
              v46 = v43 - 2;
              if (v43 < 2)
                v46 = v43 - 1;
              v47 = v46 >> 1;
              v48 = v7;
              do
              {
                v49 = &v48[v45 + 1];
                v50 = (2 * v45) | 1;
                v51 = 2 * v45 + 2;
                if (v51 < v43)
                {
                  result = CA::WindowServer::Display::Mode::operator<(&v48[v45 + 1], &v48[v45 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v49;
                    v50 = v51;
                  }
                }
                *v48 = *v49;
                v48 = v49;
                v45 = v50;
              }
              while (v50 <= v47);
              if (v49 == --v44)
              {
                *v49 = v65;
                v53 = v43 - 1;
              }
              else
              {
                *v49 = *v44;
                *v44 = v65;
                v52 = (char *)v49 - (char *)v7 + 8;
                v53 = v43 - 1;
                if (v52 >= 9)
                {
                  v54 = (unint64_t)((v52 >> 3) - 2) >> 1;
                  v55 = &v7[v54];
                  result = CA::WindowServer::Display::Mode::operator<(v55, v49);
                  if ((_DWORD)result)
                  {
                    v66[0] = *v49;
                    do
                    {
                      v56 = v55;
                      *v49 = *v55;
                      if (!v54)
                        break;
                      v54 = (v54 - 1) >> 1;
                      v55 = &v7[v54];
                      result = CA::WindowServer::Display::Mode::operator<(v55, v66);
                      v49 = v56;
                    }
                    while ((result & 1) != 0);
                    *v56 = v66[0];
                  }
                }
              }
              v57 = v43 <= 2;
              v43 = v53;
            }
            while (!v57);
          }
          return result;
        }
        v12 = &v7[v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(&v7[v11 >> 1], v7, v8);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(v7, &v7[v11 >> 1], v8);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(v7 + 1, v12 - 1, v63);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(v7 + 2, &v7[(v11 >> 1) + 1], v62);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(v12 - 1, &v7[v11 >> 1], &v7[(v11 >> 1) + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        a2 = v64;
        if ((a4 & 1) == 0 && !CA::WindowServer::Display::Mode::operator<(v7 - 1, v7))
        {
          v66[0] = *v7;
          result = CA::WindowServer::Display::Mode::operator<(v66, v8);
          if ((result & 1) != 0)
          {
            v9 = v7;
            do
              result = CA::WindowServer::Display::Mode::operator<(v66, ++v9);
            while ((result & 1) == 0);
          }
          else
          {
            v21 = v7 + 1;
            do
            {
              v9 = v21;
              if (v21 >= v64)
                break;
              result = CA::WindowServer::Display::Mode::operator<(v66, v21);
              v21 = v9 + 1;
            }
            while (!(_DWORD)result);
          }
          v22 = v64;
          if (v9 < v64)
          {
            v22 = v64;
            do
              result = CA::WindowServer::Display::Mode::operator<(v66, --v22);
            while ((result & 1) != 0);
          }
          while (v9 < v22)
          {
            v23 = *v9;
            *v9 = *v22;
            *v22 = v23;
            do
              ++v9;
            while (!CA::WindowServer::Display::Mode::operator<(v66, v9));
            do
              result = CA::WindowServer::Display::Mode::operator<(v66, --v22);
            while ((result & 1) != 0);
          }
          v24 = v9 - 1;
          if (v9 - 1 != v7)
            *v7 = *v24;
          a4 = 0;
          *v24 = v66[0];
          continue;
        }
        v66[0] = *v7;
        v14 = v7;
        do
          v15 = v14++;
        while (CA::WindowServer::Display::Mode::operator<(v14, v66));
        v16 = v64;
        if (v15 == v7)
        {
          v16 = v64;
          do
          {
            if (v14 >= v16)
              break;
            --v16;
          }
          while (!CA::WindowServer::Display::Mode::operator<(v16, v66));
        }
        else
        {
          do
            --v16;
          while (!CA::WindowServer::Display::Mode::operator<(v16, v66));
        }
        if (v14 < v16)
        {
          v17 = v16;
          v18 = v14;
          do
          {
            v19 = *v18;
            *v18 = *v17;
            *v17 = v19;
            do
              v15 = v18++;
            while (CA::WindowServer::Display::Mode::operator<(v18, v66));
            do
              --v17;
            while (!CA::WindowServer::Display::Mode::operator<(v17, v66));
          }
          while (v18 < v17);
        }
        if (v15 != v7)
          *v7 = *v15;
        *v15 = v66[0];
        if (v14 < v16)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *,false>(v7, v15, a3, a4 & 1);
          a4 = 0;
          v9 = v15 + 1;
          continue;
        }
        v20 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(v7, v15);
        v9 = v15 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(v15 + 1, v64);
        if (!(_DWORD)result)
        {
          if (v20)
            continue;
          goto LABEL_30;
        }
        a2 = v15;
        if (!v20)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  BOOL v6;
  _BOOL8 result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v6 = CA::WindowServer::Display::Mode::operator<(a2, a1);
  result = CA::WindowServer::Display::Mode::operator<(a3, a2);
  if (v6)
  {
    v8 = *a1;
    if (result)
    {
      *a1 = *a3;
    }
    else
    {
      *a1 = *a2;
      *a2 = v8;
      result = CA::WindowServer::Display::Mode::operator<(a3, a2);
      if (!result)
        return result;
      v8 = *a2;
      *a2 = *a3;
    }
    *a3 = v8;
  }
  else if (result)
  {
    v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    result = CA::WindowServer::Display::Mode::operator<(a2, a1);
    if (result)
    {
      v10 = *a1;
      *a1 = *a2;
      *a2 = v10;
    }
  }
  return result;
}

BOOL std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  _BOOL8 result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(a1, a2, a3);
  result = CA::WindowServer::Display::Mode::operator<(a4, a3);
  if (result)
  {
    v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    result = CA::WindowServer::Display::Mode::operator<(a3, a2);
    if (result)
    {
      v10 = *a2;
      *a2 = *a3;
      *a3 = v10;
      result = CA::WindowServer::Display::Mode::operator<(a2, a1);
      if (result)
      {
        v11 = *a1;
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

BOOL std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  _BOOL8 result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(a1, a2, a3, a4);
  result = CA::WindowServer::Display::Mode::operator<(a5, a4);
  if (result)
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    result = CA::WindowServer::Display::Mode::operator<(a4, a3);
    if (result)
    {
      v12 = *a3;
      *a3 = *a4;
      *a4 = v12;
      result = CA::WindowServer::Display::Mode::operator<(a3, a2);
      if (result)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
        result = CA::WindowServer::Display::Mode::operator<(a2, a1);
        if (result)
        {
          v14 = *a1;
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 1;
      if (CA::WindowServer::Display::Mode::operator<(a2 - 1, a1))
      {
        v7 = *a1;
        *a1 = *v6;
        *v6 = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (CA::WindowServer::Display::Mode::operator<(v9, v8))
    {
      v15[0] = *v9;
      v12 = v10;
      while (1)
      {
        v13 = (unint64_t *)((char *)a1 + v12);
        *(unint64_t *)((char *)a1 + v12 + 24) = *(unint64_t *)((char *)a1 + v12 + 16);
        if (v12 == -16)
          break;
        v12 -= 8;
        if (!CA::WindowServer::Display::Mode::operator<(v15, v13 + 1))
        {
          v14 = (unint64_t *)((char *)a1 + v12 + 24);
          goto LABEL_12;
        }
      }
      v14 = a1;
LABEL_12:
      *v14 = v15[0];
      if (++v11 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v10 += 8;
    if (++v9 == a2)
      return 1;
  }
}

void CA::WindowServer::Display::ModeSet::set_mig_representation(CA::WindowServer::Display::ModeSet *this, unint64_t *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int a6, PerModeInfo *a7, unint64_t a8, unsigned int a9)
{
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t i;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int *v22;
  _QWORD *v23;
  unsigned int v24;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 1) = *(_QWORD *)this;
  v14 = (_QWORD *)((char *)this + 48);
  if (*((_QWORD *)this + 9))
  {
    v15 = (_QWORD *)*((_QWORD *)this + 8);
    if (v15)
    {
      do
      {
        v16 = (_QWORD *)*v15;
        operator delete(v15);
        v15 = v16;
      }
      while (v16);
    }
    *((_QWORD *)this + 8) = 0;
    v17 = *((_QWORD *)this + 7);
    if (v17)
    {
      for (i = 0; i != v17; ++i)
        *(_QWORD *)(*v14 + 8 * i) = 0;
    }
    *((_QWORD *)this + 9) = 0;
  }
  if (a3)
  {
    v19 = 0;
    v20 = 1;
    do
    {
      v21 = a2[v19];
      v26[0] = v21;
      CA::WindowServer::Display::ModeSet::add_mode(this, (const CA::WindowServer::Display::Mode *)v26);
      if (a5 == a3)
      {
        v22 = &a4[3 * v19];
        v26[0] = v21;
        v23 = std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v14, v21, v26);
        v24 = v22[2];
        v23[3] = *(_QWORD *)v22;
        *((_DWORD *)v23 + 8) = v24;
      }
      v19 = v20++;
    }
    while (v19 < (unint64_t)a3);
  }
  *((_DWORD *)this + 22) = a6;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = (v6 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6)
                v11 %= v6;
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v10 = operator new(0x28uLL);
  *v10 = 0;
  v10[1] = a2;
  v10[2] = *a3;
  v10[3] = 0;
  *((_DWORD *)v10 + 8) = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v14 = 1;
    if (v6 >= 3)
      v14 = (v6 & (v6 - 1)) != 0;
    v15 = v14 | (2 * v6);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v17);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= a2)
        v8 = a2 % v6;
      else
        v8 = a2;
    }
    else
    {
      v8 = (v6 - 1) & a2;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v8) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6)
        v20 %= v6;
    }
    else
    {
      v20 &= v6 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

uint64_t CA::WindowServer::Display::ModeSet::get_per_mode_info(uint64_t this, unint64_t a2, PerModeInfo *a3)
{
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *i;
  unint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(this + 56);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = a2;
      if (v3 <= a2)
        v5 = a2 % v3;
    }
    else
    {
      v5 = (v3 - 1) & a2;
    }
    v6 = *(uint64_t ***)(*(_QWORD *)(this + 48) + 8 * v5);
    if (v6)
    {
      for (i = *v6; i; i = (uint64_t *)*i)
      {
        v8 = i[1];
        if (v8 == a2)
        {
          if (i[2] == a2)
          {
            v9 = i[3];
            *(_DWORD *)&a3->var2 = *((_DWORD *)i + 8);
            *(_QWORD *)&a3->var0 = v9;
            return this;
          }
        }
        else
        {
          if (v4.u32[0] > 1uLL)
          {
            if (v8 >= v3)
              v8 %= v3;
          }
          else
          {
            v8 &= v3 - 1;
          }
          if (v8 != v5)
            break;
        }
      }
    }
  }
  *(_WORD *)&a3->var2 = 0;
  *(_QWORD *)&a3->var0 = 0;
  return this;
}

uint64_t CA::WindowServer::Display::ModeSet::remove_mode(uint64_t this, const CA::WindowServer::Display::Mode *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;

  v3 = this;
  v4 = *(uint64_t **)this;
  v5 = *(uint64_t **)(this + 8);
  if (*(uint64_t **)this != v5)
  {
    v6 = *(_QWORD *)a2;
    while (1)
    {
      this = CA::WindowServer::Display::Mode::operator==(*v4, v6);
      if ((this & 1) != 0)
        break;
      if (++v4 == v5)
      {
        v4 = v5;
        break;
      }
    }
  }
  v7 = v4 + 1;
  if (v4 != v5 && v7 != v5)
  {
    v9 = *(_QWORD *)a2;
    do
    {
      v10 = *v7;
      this = CA::WindowServer::Display::Mode::operator==(*v7, v9);
      if ((this & 1) == 0)
      {
        *v4++ = v10;
        v9 = *(_QWORD *)a2;
      }
      ++v7;
    }
    while (v7 != v5);
    v5 = *(uint64_t **)(v3 + 8);
  }
  if (v5 != v4)
  {
    if (v5 != v4 + 1)
      this = (uint64_t)memmove(v4, v4 + 1, (char *)v5 - (char *)(v4 + 1));
    *(_QWORD *)(v3 + 8) = v5 - 1;
  }
  return this;
}

BOOL CA::WindowServer::Display::Mode::is_hdr(CA::WindowServer::Display::Mode *this)
{
  BOOL v1;
  uint64_t v3;

  if (*(_QWORD *)this)
    v1 = (*(_QWORD *)this & 0x10000000) == 0;
  else
    v1 = 0;
  if (v1)
    return ((*(_QWORD *)this >> 55) & 0x1F) - 16 < 0xD;
  if (CADeviceIsVirtualized::once[0] != -1)
    dispatch_once(CADeviceIsVirtualized::once, &__block_literal_global_204);
  if (!CADeviceIsVirtualized::is_virtualized)
    return 0;
  v3 = (*(_QWORD *)this >> 55) & 0x1FLL;
  return (_DWORD)v3 == 22 || (_DWORD)v3 == 24;
}

__CFDictionary *CA::WindowServer::Display::Mode::create_dictionary_representation(CA::WindowServer::Display::Mode *this)
{
  __CFDictionary *Mutable;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CA_CFDictionarySetInt(Mutable, CFSTR("width"), *(_DWORD *)this & 0x3FFF);
  CA_CFDictionarySetInt(Mutable, CFSTR("height"), (*(_DWORD *)this >> 14) & 0x3FFF);
  CA_CFDictionarySetInt(Mutable, CFSTR("refreshRate"), (*(_QWORD *)this >> 29) & 0x1FFFFFF);
  v3 = (const void *)*MEMORY[0x1E0C9AE50];
  v4 = (const void *)*MEMORY[0x1E0C9AE40];
  if ((*(_QWORD *)this & 0x40000000000000) != 0)
    v5 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v5 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(Mutable, CFSTR("isVirtual"), v5);
  CA_CFDictionarySetInt(Mutable, CFSTR("pixelFormat"), (*(_QWORD *)this >> 55) & 0x1F);
  CA_CFDictionarySetInt(Mutable, CFSTR("colorRange"), (*(_QWORD *)this >> 60) & 3);
  if ((*(_QWORD *)this & 0x4000000000000000) != 0)
    v6 = v3;
  else
    v6 = v4;
  CFDictionarySetValue(Mutable, CFSTR("isUnsafe"), v6);
  return Mutable;
}

CA::WindowServer::Display *CA::WindowServer::Display::Display(CA::WindowServer::Display *this, const __CFString *a2)
{
  unsigned int v3;
  unsigned int v4;
  _DWORD *v10;
  _WORD *v11;
  void *v12;

  *(_QWORD *)this = off_1E1590398;
  *((_QWORD *)this + 1) = a2;
  do
  {
    v3 = __ldaxr(CA::WindowServer::Display::_id_generator);
    v4 = v3 + 1;
  }
  while (__stlxr(v4, CA::WindowServer::Display::_id_generator));
  *((_DWORD *)this + 6) = v4;
  *(_QWORD *)((char *)this + 28) = 0x100000001;
  *(int32x2_t *)((char *)this + 60) = vdup_n_s32(0x3F666666u);
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 17) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)this + 8) = _Q0;
  *((_BYTE *)this + 144) = 0;
  *((_DWORD *)this + 37) = 1;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_QWORD *)this + 27) = 1;
  *((_DWORD *)this + 56) = 0;
  *((_DWORD *)this + 98) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_QWORD *)this + 53) = (char *)this + 432;
  *((_OWORD *)this + 28) = 0u;
  *((_DWORD *)this + 120) = 1065353216;
  *((_OWORD *)this + 29) = 0u;
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 560), 0);
  *((_DWORD *)this + 156) = 0;
  *((_BYTE *)this + 636) = 1;
  *((_QWORD *)this + 80) = -1;
  *((_QWORD *)this + 81) = -1;
  *((_WORD *)this + 328) = *((_WORD *)this + 328) & 0xE000 | 0x100;
  *((_DWORD *)this + 179) = 0;
  *(_DWORD *)((char *)this + 745) &= 0xFFFFE9BF;
  *((_QWORD *)this + 3166) = 0;
  os_unfair_lock_lock((os_unfair_lock_t)this + 98);
  CA::WindowServer::Display::ModeSet::add_mode((CA::WindowServer::Display *)((char *)this + 400), (CA::WindowServer::Display *)((char *)this + 640));
  os_unfair_lock_unlock((os_unfair_lock_t)this + 98);
  os_unfair_lock_lock((os_unfair_lock_t)this + 179);
  if (!*((_QWORD *)this + 90))
  {
    v10 = CA::Render::Shmem::new_shmem((CA::Render::Shmem *)4);
    *((_QWORD *)this + 90) = v10;
    v11 = (_WORD *)*((_QWORD *)v10 + 3);
    *((_QWORD *)this + 91) = v11;
    *v11 = 257;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 179);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 496), 0);
  if (CADeviceUseSharedEvents())
    *((_QWORD *)this + 35) = objc_alloc_init(MEMORY[0x1E0CBBEC0]);
  CFRetain(*((CFTypeRef *)this + 1));
  v12 = malloc_type_malloc(0x788uLL, 0x100004000313F17uLL);
  *((_QWORD *)this + 3171) = v12;
  bzero(v12, 0x788uLL);
  return this;
}

void CA::WindowServer::Display::~Display(CA::WindowServer::Display *this)
{
  const void *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t i;
  const void *v23;
  mach_port_name_t v24;
  void *v25;
  void *v26;
  void *v27;

  *(_QWORD *)this = off_1E1590398;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 496));
  CFRelease(*((CFTypeRef *)this + 1));
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  CA::Shape::unref(*((CA::Shape **)this + 27));
  v3 = (_QWORD *)*((_QWORD *)this + 29);
  v4 = (_QWORD *)*((_QWORD *)this + 30);
  if (v3 != v4)
  {
    do
    {
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      ++v3;
    }
    while (v3 != v4);
    v3 = (_QWORD *)*((_QWORD *)this + 29);
  }
  *((_QWORD *)this + 30) = v3;
  v5 = (_QWORD *)*((_QWORD *)this + 32);
  v6 = (_QWORD *)*((_QWORD *)this + 33);
  if (v5 != v6)
  {
    do
    {
      if (*v5)
        (*(void (**)(_QWORD))(*(_QWORD *)*v5 + 8))(*v5);
      ++v5;
    }
    while (v5 != v6);
    v5 = (_QWORD *)*((_QWORD *)this + 32);
  }
  *((_QWORD *)this + 33) = v5;
  v7 = (void *)*((_QWORD *)this + 35);
  if (v7)

  *((_QWORD *)this + 35) = 0;
  v8 = *((_QWORD *)this + 36);
  if (v8)
  {
    CA::IOSAManager::unref(v8);
    *((_QWORD *)this + 36) = 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)this + 179);
  v9 = (unsigned int *)*((_QWORD *)this + 90);
  if (v9)
  {
    *((_QWORD *)this + 91) = 0;
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 179);
  v13 = (unsigned int *)*((_QWORD *)this + 85);
  if (v13)
  {
    v14 = v13 + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
  }
  v17 = (const void *)*((_QWORD *)this + 37);
  if (v17)
    CFRelease(v17);
  v18 = *((_QWORD *)this + 38);
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)this + 40);
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = (_QWORD *)*((_QWORD *)this + 5);
  if (v20)
  {
    do
    {
      v21 = (_QWORD *)v20[1];
      free(v20);
      v20 = v21;
    }
    while (v21);
  }
  free(*((void **)this + 3171));
  for (i = 328; i != 392; i += 16)
  {
    v23 = *(const void **)((char *)this + i);
    if (v23)
      CFRelease(v23);
  }
  v24 = *((_DWORD *)this + 185);
  if (v24)
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], v24);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 560));
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 448);
  std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*((_QWORD **)this + 54));
  v25 = (void *)*((_QWORD *)this + 50);
  if (v25)
  {
    *((_QWORD *)this + 51) = v25;
    operator delete(v25);
  }
  v26 = (void *)*((_QWORD *)this + 32);
  if (v26)
  {
    *((_QWORD *)this + 33) = v26;
    operator delete(v26);
  }
  v27 = (void *)*((_QWORD *)this + 29);
  if (v27)
  {
    *((_QWORD *)this + 30) = v27;
    operator delete(v27);
  }
}

uint64_t CA::WindowServer::Display::set_size(uint64_t result, uint64_t a2, uint64_t a3, double *a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, int32x4_t a12)
{
  __int128 v12;

  if (*(_DWORD *)(result + 88) != *(_DWORD *)a2
    || *(_DWORD *)(result + 92) != *(_DWORD *)(a2 + 4)
    || *(_DWORD *)(result + 96) != *(_DWORD *)a3
    || *(_DWORD *)(result + 100) != *(_DWORD *)(a3 + 4)
    || (a6 = *a4, *(double *)(result + 112) != *a4)
    || (a6 = a4[1], *(double *)(result + 120) != a6))
  {
    *(_QWORD *)(result + 88) = *(_QWORD *)a2;
    *(_QWORD *)(result + 96) = *(_QWORD *)a3;
    v12 = *(_OWORD *)a4;
    *(_OWORD *)(result + 112) = *(_OWORD *)a4;
    return CA::WindowServer::Display::update_geometry(result, *(double *)&v12, a6, a7, a8, a9, a10, a11, a12);
  }
  return result;
}

uint64_t CA::WindowServer::Display::update_geometry(uint64_t this, double a2, double a3, double a4, double a5, double a6, double a7, double a8, int32x4_t a9)
{
  uint64_t v9;
  int32x2_t v10;
  int32x2_t v11;
  __int32 v12;
  int8x16_t v13;
  double v14;
  double v15;
  int v17;
  int64x2_t v18;
  int8x16_t v19;
  int32x2_t v20;
  int32x4_t v21;
  int8x16_t v22;
  BOOL v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  unint64_t v27;
  int8x16_t v28;
  float64x2_t v29;
  int8x16_t v30;
  double v31;
  int32x2_t v32;
  float64x2_t v33;
  int8x16_t v34;
  int8x16_t v38;
  int32x2_t v39;
  int64x2_t v40;
  float64x2_t v41;
  int32x2_t v42;
  float64x2_t v43;
  float32x2_t v44;
  int v45;
  int8x16_t v46;
  double v47;
  int v48;
  int v49;
  int32x2_t v51;
  int8x16_t v52;
  unsigned int v54;
  int v55;
  int v56;
  float32x2_t v57;
  BOOL v59;
  int32x2_t v60;
  int32x2_t v61;
  int32x2_t v62;
  int v63;
  int v64;
  int8x16_t v66;
  unsigned int v68;
  int32x2_t v69;
  int64x2_t v70;
  float64x2_t v71;
  int v72;
  int v74;
  int v75;
  int v76;
  float v77;
  float32x2_t v78;
  float v79;
  float32x2_t v80;
  float32x4_t v81;
  __int32 v82;

  v9 = this;
  v11 = *(int32x2_t *)(this + 88);
  v10 = *(int32x2_t *)(this + 96);
  v12 = v10.i32[1];
  v13.i64[0] = 0;
  v15 = *(double *)(this + 128);
  v14 = *(double *)(this + 136);
  if (v15 == 1.0 && v14 == 1.0)
  {
    v14 = 1.0;
    v32 = 0;
  }
  else
  {
    v17 = v10.i32[0];
    if (v10.i32[0] <= v10.i32[1])
      v17 = HIDWORD(*(_QWORD *)(this + 96));
    v18.i64[0] = v10.i32[0];
    v18.i64[1] = v10.i32[1];
    v19 = (int8x16_t)vcvtq_f64_s64(v18);
    v20 = vdup_n_s32(v17 > 1073741822);
    v18.i64[0] = v20.u32[0];
    v18.i64[1] = v20.u32[1];
    v21 = (int32x4_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v22 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v18, 0x3FuLL)), (int8x16_t)v21, v19);
    v23 = *(double *)v22.i64 >= 1.79769313e308 || v15 == 1.0;
    v21.i32[0] = v17;
    a9.i32[0] = 1073741822;
    v24 = vandq_s8((int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v21, a9), 0));
    v25.i64[1] = v24.i64[1];
    v26.i64[1] = v22.i64[1];
    if (v23)
      v27 = 0;
    else
      v27 = -1;
    v28 = (int8x16_t)vdupq_n_s64(v27);
    *(double *)v26.i64 = v15 * *(double *)v22.i64;
    v29 = (float64x2_t)vbslq_s8(v28, v26, v22);
    *(double *)v25.i64 = v15 * *(double *)v24.i64;
    v30 = vbslq_s8(v28, v25, v24);
    if (v14 != 1.0 && v29.f64[1] < 1.79769313e308)
    {
      v30.i64[1] = vmuld_lane_f64(v14, (float64x2_t)v30, 1);
      v29.f64[1] = v29.f64[1] * v14;
    }
    v31 = v29.f64[1];
    if (v29.f64[0] > v29.f64[1])
      v31 = v29.f64[0];
    if (v31 < 1073741820.0)
    {
      v33.f64[0] = NAN;
      v33.f64[1] = NAN;
      v34 = (int8x16_t)vnegq_f64(v33);
      __asm { FMOV            V16.2D, #0.5 }
      v32 = vmovn_s64(vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8(v34, _Q16, v30), (float64x2_t)v30)));
      v38 = (int8x16_t)vaddq_f64((float64x2_t)v30, v29);
      v10 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8(v34, _Q16, v38), (float64x2_t)v38))), v32);
    }
    else
    {
      v32 = vdup_n_s32(0xE0000001);
      v10 = (int32x2_t)0xC0000000C0000000;
    }
  }
  v13.i64[1] = *(_QWORD *)(this + 88);
  if (*(_BYTE *)(this + 144))
  {
    v39 = vzip1_s32(v10, v11);
    v40.i64[0] = v39.i32[0];
    v40.i64[1] = v39.i32[1];
    v41 = vcvtq_f64_s64(v40);
    v42 = vzip2_s32(v10, v11);
    v40.i64[0] = v42.i32[0];
    v40.i64[1] = v42.i32[1];
    v43 = vcvtq_f64_s64(v40);
    v44 = vcvt_f32_f64(vdivq_f64(v41, v43));
    v45 = (int)((v43.f64[1] - v43.f64[0] / v15) * 0.5);
    v46.i32[0] = 0;
    v46.i64[1] = 0;
    v46.i32[1] = v45;
    *(_QWORD *)&v47 = (int)((v41.f64[1] - v41.f64[0] / v14) * 0.5);
    if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v44, 1), v44).u8[0] & 1) != 0)
      *(double *)v46.i64 = v47;
    v48 = *(_QWORD *)(this + 88);
    if (v11.i32[0] <= v11.i32[1])
      v49 = HIDWORD(*(_QWORD *)(this + 88));
    else
      v49 = *(_QWORD *)(this + 88);
    if (v11.i32[0] >= v11.i32[1])
      v48 = HIDWORD(*(_QWORD *)(this + 88));
    if (v49 <= 1073741822 && v48 >= 1)
    {
      v51 = vsub_s32(v11, vadd_s32(*(int32x2_t *)v46.i8, *(int32x2_t *)v46.i8));
      v52.i64[0] = v46.i64[0];
      v52.u64[1] = (unint64_t)v51;
      if (v51.i32[1] < 1 || v51.i32[0] < 1)
        v54 = -1;
      else
        v54 = 0;
      v13 = vbslq_s8((int8x16_t)vdupq_n_s32(v54), v46, v52);
    }
  }
  if ((*(_DWORD *)(this + 624) & 1) != 0)
  {
    v55 = *(unsigned __int16 *)(this + 656);
    if ((v55 & 0x200) != 0)
    {
      v56 = v10.i32[0];
      if (v10.i32[0] >= v10.i32[1])
        v56 = v10.i32[1];
      if (v56 >= 1)
      {
        v57 = *(float32x2_t *)(this + 60);
        _NF = v57.f32[0] > 0.0 && v57.f32[0] < 1.0;
        if (_NF || (v57.f32[1] > 0.0 ? (v59 = v57.f32[1] < 1.0) : (v59 = 0), v59))
        {
          v60 = (int32x2_t)vextq_s8(v13, v13, 8uLL).u64[0];
          v61 = vcvt_s32_f32(vmla_f32((float32x2_t)0x3F0000003F000000, vcvt_f32_s32(v60), vmls_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x3F0000003F000000, v57)));
          v62 = (int32x2_t)vand_s8((int8x8_t)v61, (int8x8_t)vcgt_s32(v60, vadd_s32(v61, v61)));
          v63 = v13.i32[2];
          if (v13.i32[2] <= v13.i32[3])
            v64 = v13.i32[3];
          else
            v64 = v13.i32[2];
          if (v13.i32[2] >= v13.i32[3])
            v63 = v13.i32[3];
          if (v64 <= 1073741822 && v63 >= 1)
          {
            *(int32x2_t *)v13.i8 = vadd_s32(*(int32x2_t *)v13.i8, v62);
            v66.i64[0] = v13.i64[0];
            v66.u64[1] = (unint64_t)vsub_s32(v60, vadd_s32(v62, v62));
            if (v66.i32[3] < 1 || v66.i32[2] < 1)
              v68 = -1;
            else
              v68 = 0;
            v13 = vbslq_s8((int8x16_t)vdupq_n_s32(v68), v13, v66);
          }
          if ((~v55 & 0x300) == 0)
          {
            v69 = vadd_s32(v62, v62);
            v70.i64[0] = v69.i32[0];
            v70.i64[1] = v69.i32[1];
            v71 = vcvtq_f64_s64(v70);
            v70.i64[0] = v10.i32[0];
            v70.i64[1] = v10.i32[1];
            v10 = vmovn_s64(vcvtq_s64_f64(vmlsq_f64(vcvtq_f64_s64(v70), v71, *(float64x2_t *)(this + 128))));
            v14 = *(double *)(this + 136);
          }
        }
      }
    }
  }
  v72 = *(_DWORD *)(this + 68);
  if (v72 >= 1 && v72 > v13.i32[1])
  {
    v74 = llround(v14 * (double)v13.i32[3] / *(double *)(this + 128));
    v75 = v72 - v13.i32[1];
    v76 = v72 - v12 + v74;
    if (v76 <= 0)
    {
      v78.f32[0] = (float)v13.i32[2];
      v79 = 1.0;
      v80.i32[0] = 0;
    }
    else
    {
      v77 = (float)v76 / (float)v74;
      v78.f32[0] = (float)v13.i32[2];
      v79 = 1.0 - v77;
      v80.f32[0] = truncf(v77 * (float)(0.5 * (float)v13.i32[2]));
    }
    v78.f32[1] = (float)v74;
    v80.f32[1] = (float)v75;
    *(float32x2_t *)v81.f32 = vadd_f32(v80, vcvt_f32_s32(*(int32x2_t *)v13.i8));
    *(float32x2_t *)&v81.u32[2] = vrnda_f32(vmul_n_f32(v78, v79));
    v13 = (int8x16_t)vcvtq_s32_f32(v81);
  }
  if (*(_DWORD *)(this + 168) != v32.i32[0])
  {
    v82 = v10.i32[0];
LABEL_87:
    *(int32x2_t *)(this + 168) = v32;
    *(_DWORD *)(this + 176) = v82;
    *(_DWORD *)(this + 180) = v10.i32[1];
    *(int8x16_t *)(this + 152) = v13;
    CA::WindowServer::Display::update_actual_bounds((CA::WindowServer::Display *)this);
    return CA::WindowServer::Display::post_display_changed(v9);
  }
  v82 = v10.i32[0];
  if (*(_DWORD *)(this + 172) != v32.i32[1]
    || *(_QWORD *)(this + 176) != *(_QWORD *)&v10
    || *(_OWORD *)(this + 152) != *(_OWORD *)&v13)
  {
    goto LABEL_87;
  }
  return this;
}

uint64_t CA::WindowServer::Display::update_actual_bounds(CA::WindowServer::Display *this)
{
  const CA::Bounds *v2;
  unsigned int v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  _BOOL4 v8;
  int v9;
  unsigned int v11;
  int v12;
  CA::Shape *v13;

  (*(void (**)(CA::WindowServer::Display *))(*(_QWORD *)this + 264))(this);
  v3 = *(_DWORD *)((char *)this + 745);
  v4 = (_DWORD *)((char *)this + 168);
  if ((v3 & 2) != 0)
    v5 = 184;
  else
    v5 = 168;
  if ((v3 & 2) != 0)
    v4 = (_DWORD *)((char *)this + 184);
  v6 = v4[2];
  if (*((_DWORD *)this + 40) == v6 && *((_DWORD *)this + 41) == v4[3])
  {
    if (*((_DWORD *)this + 38) == *(_DWORD *)((char *)this + v5))
    {
      v7 = 0;
      v8 = *((_DWORD *)this + 39) != v4[1];
      goto LABEL_12;
    }
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  v8 = 1;
LABEL_12:
  if (((v3 >> 2) & 1) == v8)
  {
    v9 = *(_DWORD *)((char *)this + v5);
    if (((*(_DWORD *)((_BYTE *)this + 745) & 8) == 0) != v7
      && *((_DWORD *)this + 50) == v9
      && *((_DWORD *)this + 51) == v4[1]
      && *((_DWORD *)this + 52) == v6
      && *((_DWORD *)this + 53) == v4[3])
    {
      return 0;
    }
  }
  else
  {
    v9 = *(_DWORD *)((char *)this + v5);
  }
  v11 = v3 & 0xFFFFFFF3 | (4 * v8);
  if (v7)
    v12 = 8;
  else
    v12 = 0;
  *((_DWORD *)this + 50) = v9;
  *(_DWORD *)((char *)this + 745) = v11 | v12;
  *(_QWORD *)((char *)this + 204) = *(_QWORD *)(v4 + 1);
  *((_DWORD *)this + 53) = v4[3];
  v13 = (CA::Shape *)*((_QWORD *)this + 27);
  if (v13)
    CA::Shape::unref(v13);
  *((_QWORD *)this + 27) = CA::Shape::new_shape((CA::WindowServer::Display *)((char *)this + 200), v2);
  return 1;
}

uint64_t CA::WindowServer::Display::set_logical_bounds(CA::WindowServer::Display *this, const CA::Bounds *a2, int a3)
{
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;

  v3 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 == *((_DWORD *)this + 42)
    && *((_DWORD *)a2 + 1) == *((_DWORD *)this + 43)
    && *((_DWORD *)a2 + 2) == *((_DWORD *)this + 44)
    && *((_DWORD *)a2 + 3) == *((_DWORD *)this + 45))
  {
    v4 = *(_DWORD *)((char *)this + 745);
    if ((v4 & 2) != 0)
    {
      *((_QWORD *)this + 23) = 0;
      *((_QWORD *)this + 24) = 0;
      *(_DWORD *)((char *)this + 745) = v4 & 0xFFFFFFED;
      return CA::WindowServer::Display::update_actual_bounds(this);
    }
  }
  else
  {
    v5 = *(_DWORD *)((char *)this + 745);
    if ((v5 & 2) == 0
      || *((_DWORD *)this + 46) != v3
      || *((_DWORD *)this + 47) != *((_DWORD *)a2 + 1)
      || *((_DWORD *)this + 48) != *((_DWORD *)a2 + 2)
      || *((_DWORD *)this + 49) != *((_DWORD *)a2 + 3)
      || ((((*(_DWORD *)((_BYTE *)this + 745) & 0x10) == 0) ^ a3) & 1) == 0)
    {
      *((_DWORD *)this + 46) = v3;
      *(_QWORD *)((char *)this + 188) = *(_QWORD *)((char *)a2 + 4);
      *((_DWORD *)this + 49) = *((_DWORD *)a2 + 3);
      v6 = v5 & 0xFFFFFFED;
      if (a3)
        v7 = 18;
      else
        v7 = 2;
      *(_DWORD *)((char *)this + 745) = v7 | v6;
      return CA::WindowServer::Display::update_actual_bounds(this);
    }
  }
  return 0;
}

uint64_t CA::WindowServer::Display::set_all_modes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  CA::WindowServer::Display::ModeSet *v8;
  const CA::WindowServer::Display::Mode *v9;
  os_unfair_lock_s *v10;
  uint64_t v11;

  if (a4)
  {
    v7 = a4;
    v8 = *(CA::WindowServer::Display::ModeSet **)a2;
    v9 = *(const CA::WindowServer::Display::Mode **)(a2 + 8);
    if (CA::WindowServer::Display::ModeSet::contains_mode(*(CA::WindowServer::Display::ModeSet **)a2, v9, a4))
    {
LABEL_7:
      if (!a3)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  else
  {
    v8 = *(CA::WindowServer::Display::ModeSet **)a2;
    v9 = *(const CA::WindowServer::Display::Mode **)(a2 + 8);
  }
  if (v9 != v8)
  {
    v7 = *(_QWORD *)v8;
    goto LABEL_7;
  }
  v9 = v8;
  v7 = a3;
  if (!a3)
  {
LABEL_11:
    a3 = v7;
    goto LABEL_12;
  }
LABEL_10:
  if (!CA::WindowServer::Display::ModeSet::contains_mode(v8, v9, a3))
    goto LABEL_11;
LABEL_12:
  v10 = (os_unfair_lock_s *)(a1 + 392);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 392));
  if (CA::WindowServer::Display::ModeSet::operator==(a1 + 400, a2)
    && CA::WindowServer::Display::Mode::operator==(*(_QWORD *)(a1 + 640), a3)
    && (CA::WindowServer::Display::Mode::operator==(*(_QWORD *)(a1 + 648), v7) & 1) != 0)
  {
    v11 = 0;
  }
  else
  {
    if ((*(_QWORD *)(a1 + 408) == *(_QWORD *)(a1 + 400)) != (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2))
      ++*(_DWORD *)(a1 + 32);
    CA::WindowServer::Display::ModeSet::operator=((char **)(a1 + 400), (char **)a2);
    *(_QWORD *)(a1 + 640) = a3;
    *(_QWORD *)(a1 + 648) = v7;
    if (v7)
      *(_QWORD *)(a1 + 104) = v7 & 0x3FFF | (((v7 >> 14) & 0x3FFF) << 32);
    v11 = 1;
  }
  os_unfair_lock_unlock(v10);
  return v11;
}

uint64_t CA::WindowServer::Display::set_user_preferences(uint64_t result, int a2, int a3, int a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int *v6;
  int v7;
  CFStringRef v8;
  CFStringRef v9;
  const __CFString *v10;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  CFTypeID v13;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v15;
  __CFDictionary *Mutable;
  __CFDictionary *v17;
  const void **v18;
  _OWORD v19[4];
  uint64_t v20;

  v4 = result;
  v20 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int16 *)(result + 656);
  if (a3 == v5 >> 13)
  {
    v6 = (unsigned int *)(result + 745);
    v7 = *(_DWORD *)(result + 745);
    if (((((v7 & 1) == 0) ^ a2) & 1) != 0)
    {
      if (!a4)
        return result;
      goto LABEL_7;
    }
  }
  else
  {
    *(_WORD *)(result + 656) = v5 & 0x1FFF | ((_WORD)a3 << 13);
    v6 = (unsigned int *)(result + 745);
    v7 = *(_DWORD *)(result + 745);
    if (((((v7 & 1) == 0) ^ a2) & 1) != 0)
      goto LABEL_7;
  }
  *v6 = v7 & 0xFFFFFFFE | a2;
LABEL_7:
  memset(v19, 0, sizeof(v19));
  if ((*(unsigned int (**)(uint64_t, _QWORD, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)result + 800))(result, 0, v19, 64, 0))
  {
    v8 = CFStringCreateWithCString(0, (const char *)v19, 0x8000100u);
    if (v8)
    {
      v9 = v8;
      v10 = (const __CFString *)*MEMORY[0x1E0C9B248];
      v11 = (const __CFDictionary *)CFPreferencesCopyAppValue(CFSTR("CADisplayPreferences"), (CFStringRef)*MEMORY[0x1E0C9B248]);
      v12 = v11;
      if (v11 && (v13 = CFGetTypeID(v11), v13 == CFDictionaryGetTypeID()))
        MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v12);
      else
        MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v15 = MutableCopy;
      if (MutableCopy)
      {
        Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v17 = Mutable;
          v18 = (const void **)MEMORY[0x1E0C9AE50];
          if ((*v6 & 1) == 0)
            v18 = (const void **)MEMORY[0x1E0C9AE40];
          CFDictionarySetValue(Mutable, CFSTR("matchContent"), *v18);
          CA_CFDictionarySetInt(v17, CFSTR("preferredHdrType"), *(unsigned __int16 *)(v4 + 656) >> 13);
          CFDictionarySetValue(v15, v9, v17);
          CFRelease(v17);
          CFPreferencesSetAppValue(CFSTR("CADisplayPreferences"), v15, v10);
        }
        CFRelease(v15);
      }
      if (v12)
        CFRelease(v12);
      CFRelease(v9);
    }
  }
  return CA::WindowServer::Display::post_display_changed(v4);
}

uint64_t CA::WindowServer::Display::allocate_surface(uint64_t a1, uint64_t a2, uint64_t a3, CA::Render *a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v16;
  uint64_t *i;
  uint64_t surface;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  os_unfair_lock_s *lock;

  if ((((a7 & 0x21) == 1) & ((*(_DWORD *)(a1 + 745) & 0x20u) >> 5)) != 0)
    v16 = a7 | 2;
  else
    v16 = a7;
  lock = (os_unfair_lock_s *)(a1 + 224);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 224));
  for (i = *(uint64_t **)(a1 + 256); ; ++i)
  {
    if (i == *(uint64_t **)(a1 + 264))
    {
      os_unfair_lock_unlock(lock);
      if ((a10 & 1) != 0)
        return 0;
      v22 = CA::Render::fourcc_compressed_of_type(a4, 0, 0);
      if ((_DWORD)v22 != (_DWORD)a4)
      {
        surface = CA::WindowServer::Display::allocate_surface(a1, a2, a3, v22, a5, a6, v16, a8, a9, 1);
        if (surface)
          return surface;
      }
      surface = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CA::Render *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 2160))(a1, a2, a3, a4, a5, a6, v16, a8, a9);
      if (!surface)
      {
        if (!CA::WindowServer::Display::purge_surfaces((os_unfair_lock_s *)a1, 1))
          return 0;
        surface = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CA::Render *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 2160))(a1, a2, a3, a4, a5, a6, v16, a8, a9);
        if (!surface)
          return surface;
      }
      os_unfair_lock_lock(lock);
      v24 = *(uint64_t **)(a1 + 240);
      v23 = *(_QWORD *)(a1 + 248);
      if ((unint64_t)v24 >= v23)
      {
        v26 = *(_QWORD *)(a1 + 232);
        v27 = ((uint64_t)v24 - v26) >> 3;
        if ((unint64_t)(v27 + 1) >> 61)
          goto LABEL_61;
        v28 = v23 - v26;
        v29 = v28 >> 2;
        if (v28 >> 2 <= (unint64_t)(v27 + 1))
          v29 = v27 + 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v29;
        if (v30)
          v30 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v30);
        else
          v31 = 0;
        v32 = (uint64_t *)(v30 + 8 * v27);
        v33 = v30 + 8 * v31;
        *v32 = surface;
        v25 = v32 + 1;
        v35 = *(char **)(a1 + 232);
        v34 = *(char **)(a1 + 240);
        if (v34 != v35)
        {
          do
          {
            v36 = *((_QWORD *)v34 - 1);
            v34 -= 8;
            *--v32 = v36;
          }
          while (v34 != v35);
          v34 = *(char **)(a1 + 232);
        }
        *(_QWORD *)(a1 + 232) = v32;
        *(_QWORD *)(a1 + 240) = v25;
        *(_QWORD *)(a1 + 248) = v33;
        if (v34)
          operator delete(v34);
      }
      else
      {
        *v24 = surface;
        v25 = v24 + 1;
      }
      *(_QWORD *)(a1 + 240) = v25;
      os_unfair_lock_unlock(lock);
      return surface;
    }
    surface = *i;
    if (*(_DWORD *)(*i + 56) == (_DWORD)a2
      && *(_DWORD *)(surface + 60) == (_DWORD)a3
      && *(_DWORD *)(surface + 64) == (_DWORD)a4
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)surface + 24))(*i) == (_DWORD)a5)
    {
      v19 = *(unsigned int *)(surface + 224) | ((unint64_t)*(unsigned __int8 *)(surface + 228) << 32);
      if (((v16 & 4) == 0) != ((v19 >> 24) & 1)
        && ((v16 & 1) == 0) != ((v19 >> 34) & 1)
        && (*(uint64_t (**)(uint64_t))(*(_QWORD *)surface + 216))(surface) == a8
        && ((v16 & 2) == 0) != ((*(_DWORD *)(surface + 224) >> 29) & 1))
      {
        v20 = *(_QWORD *)(surface + 16);
        if (!v20)
          break;
        v21 = *(void **)(v20 + 8);
        if (!v21 || objc_msgSend(v21, "signaledValue") == *(_QWORD *)(v20 + 16))
          break;
      }
    }
  }
  v39 = *(uint64_t **)(a1 + 240);
  v38 = *(_QWORD *)(a1 + 248);
  if ((unint64_t)v39 < v38)
  {
    *v39 = surface;
    v40 = v39 + 1;
    v41 = a6;
    goto LABEL_60;
  }
  v42 = *(_QWORD *)(a1 + 232);
  v43 = ((uint64_t)v39 - v42) >> 3;
  v41 = a6;
  if ((unint64_t)(v43 + 1) >> 61)
LABEL_61:
    abort();
  v44 = v38 - v42;
  v45 = v44 >> 2;
  if (v44 >> 2 <= (unint64_t)(v43 + 1))
    v45 = v43 + 1;
  if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
    v46 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v46 = v45;
  if (v46)
    v46 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v46);
  else
    v47 = 0;
  v48 = (uint64_t *)(v46 + 8 * v43);
  v49 = v46 + 8 * v47;
  *v48 = surface;
  v40 = v48 + 1;
  v51 = *(char **)(a1 + 232);
  v50 = *(char **)(a1 + 240);
  if (v50 != v51)
  {
    do
    {
      v52 = *((_QWORD *)v50 - 1);
      v50 -= 8;
      *--v48 = v52;
    }
    while (v50 != v51);
    v50 = *(char **)(a1 + 232);
  }
  *(_QWORD *)(a1 + 232) = v48;
  *(_QWORD *)(a1 + 240) = v40;
  *(_QWORD *)(a1 + 248) = v49;
  if (v50)
    operator delete(v50);
LABEL_60:
  *(_QWORD *)(a1 + 240) = v40;
  *i = *(_QWORD *)(*(_QWORD *)(a1 + 264) - 8);
  *(_QWORD *)(a1 + 264) -= 8;
  os_unfair_lock_unlock(lock);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)surface + 72))(surface, v41, 0);
  return surface;
}

uint64_t CA::WindowServer::Display::copy_iosa_manager(CA::WindowServer::Display *this, __CFRunLoop *a2)
{
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;

  result = *((_QWORD *)this + 36);
  if (!result)
  {
    if (CA::WindowServer::accelerator_runloop(void)::once != -1)
      dispatch_once(&CA::WindowServer::accelerator_runloop(void)::once, &__block_literal_global_5307);
    result = CA::IOSAManager::create_new_iosa_manager((CA::IOSAManager *)CA::WindowServer::accelerator_runloop(void)::runloop, a2);
    *((_QWORD *)this + 36) = result;
  }
  v4 = (unsigned int *)(result + 24);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  return result;
}

os_log_t ___ZN2CA12WindowServer7Display15get_display_logEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreanimation", "WindowServer.Display");
  CA::WindowServer::Display::get_display_log(void)::log = (uint64_t)result;
  return result;
}

os_log_t ___ZN2CA12WindowServer7Display21get_display_trace_logEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreanimation", "Display.Trace");
  CA::WindowServer::Display::get_display_trace_log(void)::log = (uint64_t)result;
  return result;
}

unint64_t CA::WindowServer::Display::ModeSet::preferred_mode_with_criteria(unint64_t **a1, int a2, uint64_t a3, int a4, unsigned int *a5, double a6, double a7, float a8)
{
  unsigned int v8;
  unint64_t v13;
  NSObject *v14;
  const char *v15;
  char *v16;
  unsigned int v17;
  const char *v18;
  uint8_t buf[4];
  double v21;
  __int16 v22;
  double v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  double v29;
  __int16 v30;
  int v31;
  __int16 v32;
  unsigned int v33;
  __int16 v34;
  double v35;
  __int16 v36;
  const char *v37;
  uint64_t v38;

  v8 = a3;
  v38 = *MEMORY[0x1E0C80C00];
  v13 = CA::WindowServer::Display::ModeSet::preferred_mode_with_criteria_internal(a1, a2, a3, a4, 1, a5, a6, a7, a8);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v14 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      if (v8 > 5)
        v15 = "UNKNOWN";
      else
        v15 = CA::WindowServer::hdr_type_name(CA::WindowServer::Display::HDRType)::names[v8];
      v16 = CA::WindowServer::hdr_type_name(CA::WindowServer::Display::HDRType)::names[a2];
      v17 = ((v13 >> 55) & 0x1F) - 1;
      if (v17 > 0x1B)
        v18 = "";
      else
        v18 = off_1E159D930[v17];
      *(_DWORD *)buf = 134220034;
      v21 = a6;
      v22 = 2048;
      v23 = a7;
      v24 = 2080;
      v25 = v16;
      v26 = 2080;
      v27 = v15;
      v28 = 2048;
      v29 = a8;
      v30 = 1024;
      v31 = v13 & 0x3FFF;
      v32 = 1024;
      v33 = (v13 >> 14) & 0x3FFF;
      v34 = 2048;
      v35 = (double)((v13 >> 29) & 0x1FFFFFF) * 0.0000152587891;
      v36 = 2080;
      v37 = v18;
      _os_log_impl(&dword_184457000, v14, OS_LOG_TYPE_DEFAULT, "preferred_mode_with_criteria: resolution [%g x %g], target hdr (%s), user hdr (%s), rate (%g) --> %dx%d@%g %s", buf, 0x54u);
    }
  }
  return v13;
}

unint64_t CA::WindowServer::Display::ModeSet::preferred_mode_with_criteria_internal(unint64_t **a1, int a2, uint64_t a3, int a4, int a5, unsigned int *a6, double a7, double a8, float a9)
{
  unsigned int *v9;
  uint64_t v11;
  unint64_t **v14;
  int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t **v25;
  BOOL v26;
  double v27;
  _BOOL4 v28;
  unint64_t v29;
  BOOL v30;
  double v31;
  float v32;
  BOOL v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  BOOL v39;
  unsigned int v41;
  double v42;
  BOOL v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  int v47;
  int v48;
  uint64_t v49;
  float v50;
  float v51;
  double v52;
  float v53;
  float v54;
  int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v64;
  uint64_t v65;
  float v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v72;
  unint64_t *v74;
  unint64_t *v75;
  unsigned int *v76;
  BOOL v77;
  int v78;
  double v79;
  _BOOL4 v80;
  int v81;
  unint64_t **v82;
  unsigned int v83;
  CA::WindowServer::Display::Mode *v84;
  unint64_t v85;
  unint64_t v86[2];

  v9 = a6;
  v11 = a3;
  v14 = a1;
  v86[1] = *MEMORY[0x1E0C80C00];
  if (!a4)
    a9 = 0.0;
  if (!a4)
    a2 = 0;
  if ((_DWORD)a3 == 5 && !a2)
  {
    if (CA::WindowServer::Display::ModeSet::supports_4k60_dovi(a1, (const EDIDAttributes *)*a6))
    {
      a2 = 0;
    }
    else
    {
      a9 = 30.0;
      a2 = 5;
    }
  }
  if (a2)
    v17 = a2;
  else
    v17 = v11;
  if (v9[7] == 1552)
  {
    v18 = v9[6] - 44577;
    v33 = v18 > 0xE;
    v19 = (0x7007u >> v18) & 1;
    if (v33)
      v20 = 0;
    else
      v20 = v19;
  }
  else
  {
    v20 = 0;
  }
  v86[0] = 0;
  v21 = *v14;
  v22 = v14[1];
  if (*v14 == v22)
  {
    v84 = 0;
LABEL_142:
    v23 = 0;
    goto LABEL_143;
  }
  v81 = a5;
  v83 = v11;
  v84 = 0;
  v23 = 0;
  v24 = (uint64_t)(v14 + 3);
  v82 = v14;
  v25 = v14 + 4;
  v26 = a9 > 30.0 || a9 == 0.0;
  v27 = a9;
  v79 = 0.5 - a9;
  v28 = a7 != 0.0;
  if (a8 == 0.0)
    v28 = 0;
  v80 = v28;
  v77 = v26;
  v78 = (int)(a7 * a8);
  do
  {
    v29 = *v21;
    v85 = v29;
    if (!v29)
      goto LABEL_138;
    if ((v20 & 1) == 0)
    {
      if (CADeviceSupportsHDRTVModes::once != -1)
        dispatch_once(&CADeviceSupportsHDRTVModes::once, &__block_literal_global_124);
      if ((CADeviceSupportsHDRTVModes::supports_hdr_modes & 1) == 0
        && CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::Display::Mode *)&v85))
      {
        goto LABEL_138;
      }
    }
    v30 = a9 == 0.0;
    v31 = (double)((v29 >> 29) & 0x1FFFFFF) * 0.0000152587891;
    v32 = v31;
    if (v32 >= 49.0)
      v30 = 0;
    v33 = v32 >= 23.9 && v32 <= 60.5;
    if (!v33 || v30)
      goto LABEL_138;
    v34 = v29 & 0x3FFF;
    if (v34 == 1920)
    {
      if ((v29 & 0xFFFC000) != 0x21C0000 || a7 == 1920.0 || a8 == 2160.0)
        goto LABEL_54;
LABEL_53:
      if (v25 != (unint64_t **)std::__tree<std::tuple<unsigned short,unsigned short>>::find<std::tuple<unsigned short,unsigned short>>(v24, 0xF00u, 0x870u))goto LABEL_138;
      goto LABEL_54;
    }
    if (v34 == 3840)
    {
      if ((v29 & 0xFFFC000) != 0x10E0000 || a7 == 3840.0 || a8 == 1080.0)
        goto LABEL_54;
      goto LABEL_53;
    }
    if (v34 == 4096 && (v29 & 0xFFFC000) == 0x21C0000)
      goto LABEL_138;
LABEL_54:
    if (v17 && (int)CA::WindowServer::Display::Mode::hdr_type(v29) > v17
      || CA::WindowServer::Display::Mode::hdr_type(v29) == 1
      && (v29 & 0x4000000000000000) != 0
      && *((_BYTE *)v9 + 20))
    {
      goto LABEL_138;
    }
    if ((v29 & 0x40000000000000) != 0)
    {
      if (CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::Display::Mode *)&v85) && !*((_BYTE *)v9 + 20)
        || v25 == (unint64_t **)std::__tree<std::tuple<unsigned short,unsigned short>>::find<std::tuple<unsigned short,unsigned short>>(v24, v29 & 0x3FFF, (v29 >> 14) & 0x3FFF))
      {
        goto LABEL_138;
      }
      if (CA::WindowServer::Display::Mode::hdr_type(v29) == 5)
      {
        v59 = *v9;
        if (!*v9 || v59 == 3 || v59 == 1 && v77)
          goto LABEL_138;
      }
      else if (CA::WindowServer::Display::Mode::hdr_type(v29) == 4
             || CA::WindowServer::Display::Mode::hdr_type(v29) != 3
             || v9[2] != 2 && v9[1] != 2 && v9[3] != 2)
      {
        goto LABEL_138;
      }
    }
    if (!v23)
      goto LABEL_137;
    if (v17)
    {
      if (CA::WindowServer::Display::Mode::hdr_type(v29) == v17
        && CA::WindowServer::Display::Mode::hdr_type((unint64_t)v84) != v17)
      {
        goto LABEL_137;
      }
      if (CA::WindowServer::Display::Mode::hdr_type((unint64_t)v84) == v17
        && CA::WindowServer::Display::Mode::hdr_type(v29) != v17)
      {
        goto LABEL_138;
      }
      v76 = v9;
      v35 = CA::WindowServer::Display::Mode::hdr_type(v29);
      v39 = v35 == CA::WindowServer::Display::Mode::hdr_type((unint64_t)v84);
      v9 = v76;
      if (!v39)
      {
        v36 = CA::WindowServer::Display::Mode::hdr_type(v29);
        v33 = v36 > CA::WindowServer::Display::Mode::hdr_type((unint64_t)v84);
        v9 = v76;
        if (v33)
          goto LABEL_137;
      }
    }
    if (a9 <= 0.0)
      goto LABEL_88;
    v37 = (int)fabs(v79 + v31);
    v38 = (int)fabs(v79 + (double)((v23 >> 29) & 0x1FFFFFF) * 0.0000152587891);
    if (v37)
      v39 = 1;
    else
      v39 = v38 == 0;
    if (!v39)
      goto LABEL_137;
    if (!v37 || v38 != 0)
    {
LABEL_88:
      if (!v80)
        goto LABEL_98;
      v41 = (v29 >> 14) & 0x3FFF;
      v42 = (double)v41;
      v43 = a7 == (double)v34 && a8 == v42;
      if (v43 && (a7 != (double)(v23 & 0x3FFF) || a8 != (double)((v23 >> 14) & 0x3FFF)))
        goto LABEL_137;
      if ((v44 = v23 & 0x3FFF, v45 = (v23 >> 14) & 0x3FFF, a7 != (double)v44)
        || a8 != (double)v45
        || (a7 == (double)v34 ? (v46 = a8 == v42) : (v46 = 0), v46))
      {
        if (v34 != v44 || ((v23 ^ v29) & 0xFFFC000) != 0)
        {
          v47 = v41 * v34 - v78;
          if (v47 < 0)
            v47 = -v47;
          v48 = v45 * v44 - v78;
          if (v48 < 0)
            v48 = -v48;
          if (v47 < v48)
          {
LABEL_137:
            v86[0] = v29;
            v84 = (CA::WindowServer::Display::Mode *)v29;
            v23 = v29;
            goto LABEL_138;
          }
          if (v47 > v48)
            goto LABEL_138;
        }
LABEL_98:
        v49 = (v23 >> 29) & 0x1FFFFFF;
        if (a9 <= 0.0)
        {
          v52 = (double)v49 * 0.0000152587891;
        }
        else
        {
          v50 = v31 - v27;
          v51 = fabsf(v50);
          v52 = (double)v49 * 0.0000152587891;
          v53 = v52 - v27;
          v54 = fabsf(v53);
          if (v51 <= 0.5
            && v51 < v54
            && v34 == (v23 & 0x3FFF)
            && ((v23 ^ v29) & 0xFFFC000) == 0
            && ((v23 ^ v29) & 0xF80000000000000) == 0)
          {
LABEL_134:
            v86[0] = v29;
            v84 = (CA::WindowServer::Display::Mode *)v29;
            v23 = v29;
            goto LABEL_138;
          }
        }
        v60 = (v52 + 0.5);
        v61 = (v31 + 0.5);
        if (v60 <= v61
          && (v60 < v61
           || (CA::WindowServer::Display::Mode::operator==(v29, (uint64_t)v84) & 1) == 0
           && !CA::WindowServer::Display::Mode::operator<(&v85, v86)))
        {
          goto LABEL_134;
        }
      }
    }
LABEL_138:
    ++v21;
  }
  while (v21 != v22);
  v11 = v83;
  if (v23)
  {
    v14 = v82;
    a5 = v81;
    goto LABEL_143;
  }
  v14 = v82;
  v74 = *v82;
  v75 = v82[1];
  a5 = v81;
  if (*v82 == v75)
    goto LABEL_142;
  while (1)
  {
    v23 = *v74;
    if ((*v74 & 0x40000000000000) == 0)
      break;
    if (++v74 == v75)
      goto LABEL_142;
  }
  v86[0] = *v74;
  v84 = (CA::WindowServer::Display::Mode *)v23;
LABEL_143:
  if (a9 > 0.0 && a9 <= 30.0 && a5 != 0)
  {
    v64 = (v23 >> 14) & 0x3FFF;
    v65 = CA::WindowServer::Display::Mode::hdr_type((unint64_t)v84);
    v66 = a9 + a9;
    v67 = CA::WindowServer::Display::ModeSet::preferred_mode_with_criteria_internal(v14, v65, v11, 1, 0, v9, (double)(v23 & 0x3FFF), (double)v64, v66);
    v68 = v67;
    v72 = ((double)((v67 >> 29) & 0x1FFFFFF) * 0.0000152587891 + 0.5) == (uint64_t)rintf(v66)
       && (v67 & 0x3FFF) == (v23 & 0x3FFF)
       && ((v67 >> 14) & 0x3FFF) == v64
       && ((v67 ^ v23) & 0xF80000000000000) == 0
       && ((v23 >> 54) & 1) == ((v67 >> 54) & 1);
    if (v72
      && (((v23 & 0x4000000000000000) != 0) == ((v67 & 0x4000000000000000) != 0)
       || CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::Display::Mode *)v86)))
    {
      return v68;
    }
  }
  return v23;
}

uint64_t CA::WindowServer::Display::ModeSet::supports_4k60_dovi(unint64_t **this, const EDIDAttributes *a2)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v4;
  int v5;

  if ((_DWORD)a2 == 2)
    return 1;
  if ((_DWORD)a2 != 3)
    return 0;
  v2 = *this;
  v3 = this[1];
  if (*this == v3)
    return 0;
  while (1)
  {
    v4 = *v2;
    if ((*v2 & 0xFFC0000) >= 0x21BC001)
    {
      if (CA::WindowServer::Display::Mode::hdr_type(*v2) == 5)
      {
        if ((v4 & 0x40000000000000) != 0)
          goto LABEL_11;
      }
      else
      {
        v5 = CA::WindowServer::Display::Mode::hdr_type(v4);
        if ((v4 & 0x40000000000000) != 0 || v5 != 4)
          goto LABEL_11;
      }
      if (((double)((v4 >> 29) & 0x1FFFFFF) * 0.0000152587891 + 0.5) > 0x3B)
        return 1;
    }
LABEL_11:
    if (++v2 == v3)
      return 0;
  }
}

uint64_t std::__tree<std::tuple<unsigned short,unsigned short>>::find<std::tuple<unsigned short,unsigned short>>(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  char v9;
  unsigned int v10;
  BOOL v11;
  BOOL v12;
  uint64_t *v13;
  unsigned int v14;
  char v15;
  unsigned int v16;
  char v17;

  v5 = *(_QWORD *)(a1 + 8);
  v3 = a1 + 8;
  v4 = v5;
  if (!v5)
    return v3;
  v6 = v3;
  do
  {
    v7 = *(unsigned __int16 *)(v4 + 26);
    v8 = v7 == a2;
    if (v7 >= a2)
      v9 = 1;
    else
      v9 = -1;
    if (v8)
    {
      v10 = *(unsigned __int16 *)(v4 + 28);
      v11 = v10 == a3;
      v9 = v10 >= a3 ? 1 : -1;
      if (v11)
        v9 = 0;
    }
    v12 = (v9 & 0x80) == 0;
    if (v9 < 0)
      v13 = (uint64_t *)(v4 + 8);
    else
      v13 = (uint64_t *)v4;
    if (v12)
      v6 = v4;
    v4 = *v13;
  }
  while (*v13);
  if (v3 == v6)
    return v3;
  v14 = *(unsigned __int16 *)(v6 + 26);
  if (v14 <= a2)
    v15 = 1;
  else
    v15 = -1;
  if (v14 == a2)
  {
    v16 = *(unsigned __int16 *)(v6 + 28);
    v17 = -1;
    if (v16 <= a3)
      v17 = 1;
    if (v16 == a3)
      v15 = 0;
    else
      v15 = v17;
  }
  if (v15 < 0)
    return v3;
  return v6;
}

void CA::WindowServer::`anonymous namespace'::OGLDisplay::~OGLDisplay(CA::WindowServer::_anonymous_namespace_::OGLDisplay *this)
{
  malloc_zone_t *malloc_zone;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::WindowServer::Display::render_surface(CA::WindowServer::Display *this, CA::Shape **a2, CA::WindowServer::Surface *a3, CA::Render::Update *a4, const CA::Bounds *a5, unsigned int a6, int a7)
{
  const CA::Render::LayerNode *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t surface;
  CA::Shape *v21;
  int v22;
  _QWORD *v23;
  malloc_zone_t *malloc_zone;
  __n128 v25;
  float v26;
  unsigned int v27;
  __n128 v28;
  int v29;
  int v30;
  CA::WindowServer::Surface *v31;
  CA::WindowServer::SharedEvent *v32;
  char *v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unsigned int v41;
  unint64_t v42;
  CA::Shape *v43;
  char *v45;
  unsigned int v46;
  uint64_t v47;
  NSObject *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint8_t buf[16];
  _OWORD v53[3];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[56];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v15 = (void *)MEMORY[0x186DBE2E4]();
  v50 = a6;
  if (((*((unsigned int *)a4 + 266) | ((unint64_t)*((unsigned __int16 *)a4 + 534) << 32)) & 0x100000000000) != 0
    || !CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::Display *)((char *)this + 640)))
  {
    goto LABEL_12;
  }
  if (CADeviceHasHardwareAcceleratedHDR::once != -1)
    dispatch_once(&CADeviceHasHardwareAcceleratedHDR::once, &__block_literal_global_93);
  if (!CADeviceHasHardwareAcceleratedHDR::has_capability)
  {
    if (CADeviceIsVirtualized::once[0] != -1)
      dispatch_once(CADeviceIsVirtualized::once, &__block_literal_global_204);
    if (!CADeviceIsVirtualized::is_virtualized)
      goto LABEL_12;
  }
  if ((*((_DWORD *)a4 + 67) & 0x38000) != 0
    && ((*((unsigned int *)a4 + 266) | ((unint64_t)*((unsigned __int16 *)a4 + 534) << 32)) & 0x200000000) == 0)
  {
    v16 = *((unsigned int *)a3 + 14);
    v49 = *((_DWORD *)a3 + 15);
    v17 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)a3 + 24))(a3);
    v18 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)a3 + 56))(a3);
    v19 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)a3 + 216))(a3);
    surface = CA::WindowServer::Display::allocate_surface((uint64_t)this, v16, v49, (CA::Render *)0x52476841, v17, v18, 0, v19, (uint64_t)CFSTR("CA HDR Snapshot"), 0);
  }
  else
  {
LABEL_12:
    surface = 0;
  }
  v21 = *a2;
  v22 = *((_DWORD *)*a2 + 84);
  *((_DWORD *)*a2 + 84) = a7;
  v23 = (_QWORD *)*((_QWORD *)this + 38);
  if (!v23)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v23 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
    if (v23)
    {
      *v23 = off_1E158D840;
      v23[1] = this;
    }
    *((_QWORD *)this + 38) = v23;
  }
  *((_QWORD *)v21 + 22) = v23;
  *(_OWORD *)((char *)v21 + 184) = *(_OWORD *)a5;
  *((_WORD *)v21 + 408) |= 2u;
  CA::Render::Update::render_edr_factor(a4, v14);
  v26 = v25.n128_f32[0];
  if (a3)
  {
    v27 = CA::Render::fourcc_to_format((CA::Render *)*((unsigned int *)a3 + 16));
    v28.n128_u32[0] = 1.0;
    if (((v27 < 0x1D) & (0x17826000u >> v27)) == 0)
      v28.n128_f32[0] = v26;
    (*(void (**)(CA::Shape *, __n128))(*(_QWORD *)v21 + 1048))(v21, v28);
    CA::OGL::Renderer::prepare_clip_shape((CA::OGL::Renderer *)a2, *((const CA::Render::Update **)a4 + 2));
    v29 = *((_DWORD *)a3 + 16);
    if (v29 == 1647534392 || v29 == 643969848)
    {
      v30 = *((_DWORD *)a3 + 56);
      if ((v30 & 0x40000000) == 0)
      {
        *((_BYTE *)a3 + 228) = *((_BYTE *)a3 + 228);
        *((_DWORD *)a3 + 56) = v30 | 0xC0000000;
      }
    }
  }
  else
  {
    (*(void (**)(CA::Shape *, __n128))(*(_QWORD *)v21 + 1048))(v21, v25);
    CA::OGL::Renderer::prepare_clip_shape((CA::OGL::Renderer *)a2, *((const CA::Render::Update **)a4 + 2));
  }
  if (surface)
    v31 = (CA::WindowServer::Surface *)surface;
  else
    v31 = a3;
  if (v31
    && (*(unsigned int (**)(CA::Shape *, CA::WindowServer::Surface *))(*(_QWORD *)v21 + 920))(v21, v31))
  {
    memset(v59, 0, 48);
    v53[0] = *(_OWORD *)a5;
    CA::Shape::operator=((uint64_t)v59, v53);
    v51 = 0;
    (*(void (**)(CA::Shape *, _BYTE *, uint64_t *))(*(_QWORD *)v21 + 912))(v21, v59, &v51);
    CA::OGL::Renderer::render((CA::OGL::Renderer *)a2, a4, *((_QWORD *)a3 + 2), v32);
    (*(void (**)(CA::Shape *, _QWORD))(*(_QWORD *)v21 + 408))(v21, v50);
    v34 = *((_DWORD *)v31 + 56);
    v33 = (char *)v31 + 224;
    v35 = v33[4];
    *(_DWORD *)v33 = v34;
    v33[4] = ((v34 | (unint64_t)(v35 << 32)) & 0xFFFFFFFDFFFFFFFFLL) >> 32;
    (*(void (**)(CA::Shape *, _QWORD))(*(_QWORD *)v21 + 920))(v21, 0);
    if (surface)
    {
      v36 = *(_DWORD *)(surface + 224) & 0xFDFFFFFF | ((unint64_t)*(unsigned __int8 *)(surface + 228) << 32);
      *(_DWORD *)(surface + 224) &= ~0x2000000u;
      *(_BYTE *)(surface + 228) = BYTE4(v36);
      v58 = 0u;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      memset(v53, 0, sizeof(v53));
      CA::WindowServer::Display::display_attributes((CA::WindowServer::Display *)v53, (uint64_t)this);
      HIDWORD(v54) = 0;
      v37 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)a3 + 216))(a3);
      v38 = (*(uint64_t (**)(CA::WindowServer::Display *, CA::WindowServer::Surface *, uint64_t, _OWORD *, CA::Render::Update *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)this + 640))(this, a3, surface, v53, a4, 0, v37, 0);
      if ((_DWORD)v38)
      {
        v39 = *((_DWORD *)a4 + 120) == 2;
        v41 = *((_DWORD *)a3 + 56);
        v40 = (char *)a3 + 224;
        v42 = (v41 | ((unint64_t)v40[4] << 32)) & 0xFFFFFFEFFFFFFFFFLL;
        *(_DWORD *)v40 = v41;
        v40[4] = (v42 | (v39 << 36)) >> 32;
        CA::WindowServer::Surface::unref((CA::WindowServer::Surface *)surface);
      }
      else
      {
        v46 = *((_DWORD *)a3 + 56);
        v45 = (char *)a3 + 224;
        v47 = v45[4];
        *(_DWORD *)v45 = v46;
        v45[4] = ((v46 | (unint64_t)(v47 << 32)) & 0xFFFFFFEFFFFFFFFFLL) >> 32;
        CA::WindowServer::Surface::unref((CA::WindowServer::Surface *)surface);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v48 = x_log_category_windowserver;
          if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184457000, v48, OS_LOG_TYPE_ERROR, "Unable to tonemap surface.", buf, 2u);
          }
        }
      }
    }
    else
    {
      v38 = 1;
    }
  }
  else
  {
    v38 = 0;
  }
  v43 = a2[2];
  if (v43)
  {
    CA::Shape::unref(v43);
    a2[2] = 0;
  }
  (*(void (**)(CA::Shape *, float))(*(_QWORD *)v21 + 1048))(v21, 1.0);
  *((_QWORD *)v21 + 22) = 0;
  *((_WORD *)v21 + 408) &= ~2u;
  *((_DWORD *)v21 + 84) = v22;
  objc_autoreleasePoolPop(v15);
  return v38;
}

void CA::WindowServer::Display::print_display_trace_log_in_range(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char **v14;
  unint64_t v15;
  const __CFString *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *CString;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  NSObject *v30;
  const char *v31;
  const char *v32;
  uint32_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  unsigned int v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  NSObject *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *log;
  uint8_t buf[4];
  _BYTE v56[18];
  __int16 v57;
  char *v58;
  __int16 v59;
  char *v60;
  __int16 v61;
  char *v62;
  __int16 v63;
  char *v64;
  __int16 v65;
  char *v66;
  _OWORD v67[2];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (CA::WindowServer::Display::get_display_trace_log(void)::once[0] != -1)
    dispatch_once(CA::WindowServer::Display::get_display_trace_log(void)::once, &__block_literal_global_64);
  log = CA::WindowServer::Display::get_display_trace_log(void)::log;
  v7 = a1 + 752;
  if (*(_QWORD *)(a1 + 25328) == a3)
  {
    v8 = CA::WindowServer::Display::get_display_trace_log(void)::log;
    if (os_signpost_enabled((os_log_t)CA::WindowServer::Display::get_display_trace_log(void)::log))
    {
      v9 = *(_DWORD *)(a1 + 24);
      v10 = *(_QWORD *)(v7 + 48 * a3 + 8);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)v56 = v9;
      *(_WORD *)&v56[4] = 2050;
      *(_QWORD *)&v56[6] = v10;
      _os_signpost_emit_with_name_impl(&dword_184457000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "DisplayTrace", "DisplayID=%{public, name=DisplayID}u %{public, signpost.description:begin_time}llu", buf, 0x12u);
    }
  }
  v51 = a1;
  v11 = a3;
  if (a3 < a4)
  {
    v52 = a2;
    v12 = a3 + 1;
    do
    {
      v13 = v7 + 48 * v11;
      memset(v67, 0, sizeof(v67));
      v15 = *(_QWORD *)(v13 + 8);
      v14 = (char **)(v13 + 8);
      v16 = CACreateDateStringFromHostContinuousTime(v15, CFSTR("yyyy-MM-dd HH:mm:ss.SSS"));
      CString = CA_CFStringGetCString(v16, (char *)v67, 32);
      switch(*(_DWORD *)(v7 + 48 * v11))
      {
        case 1:
          if (v52)
            x_stream_printf(v52, "%s  Detach Surface: %llu x %llu Displayed Surface: %llu x %llu\n", v17, v18, v19, v20, v21, v22, (uint64_t)CString);
          if (os_signpost_enabled(log))
          {
            v24 = (_QWORD *)(v7 + 48 * v11);
            v25 = v24[2];
            v26 = (char *)v24[3];
            v28 = (char *)v24[4];
            v27 = (char *)v24[5];
            v29 = *v14;
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)v56 = CString;
            *(_WORD *)&v56[8] = 2050;
            *(_QWORD *)&v56[10] = v25;
            v57 = 2050;
            v58 = v26;
            v59 = 2050;
            v60 = v28;
            v61 = 2050;
            v62 = v27;
            v63 = 2050;
            v64 = v29;
            v30 = log;
            v31 = "DetachedDimensions";
            v32 = " DateTime=%{public, name=DateTime}s detachedWidth=%{public, name=detachedWidth}llu detachedHeight=%{pu"
                  "blic, name=detachedHeight}llu displayedWidth=%{public, name=displayedWidth}llu displayedHeight=%{publi"
                  "c, name=displayedHeight}llu eventTime=%{public, signpost.description:event_time}llu";
            v33 = 62;
            goto LABEL_26;
          }
          break;
        case 2:
          if (v52)
            x_stream_printf(v52, "%s  Speculative Release Surface ID: 0x%llx\n", v17, v18, v19, v20, v21, v22, (uint64_t)CString);
          if (os_signpost_enabled(log))
          {
            v34 = *(_QWORD *)(v7 + 48 * v11 + 16);
            v35 = *v14;
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)v56 = CString;
            *(_WORD *)&v56[8] = 2050;
            *(_QWORD *)&v56[10] = v34;
            v57 = 2050;
            v58 = v35;
            v30 = log;
            v31 = "SpeculativeRelease";
            v32 = " DateTime=%{public, name=DateTime}s IOSurfaceID=%{public, name=IOSurfaceID}#llx eventTime=%{public, si"
                  "gnpost.description:event_time}llu";
            goto LABEL_21;
          }
          break;
        case 3:
          if (v52)
            x_stream_printf(v52, "%s  Detach Disable Reason: %llu\n", v17, v18, v19, v20, v21, v22, (uint64_t)CString);
          if (os_signpost_enabled(log))
          {
            v36 = *(_QWORD *)(v7 + 48 * v11 + 16);
            v37 = *v14;
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)v56 = CString;
            *(_WORD *)&v56[8] = 2050;
            *(_QWORD *)&v56[10] = v36;
            v57 = 2050;
            v58 = v37;
            v30 = log;
            v31 = "DisableDetach";
            v32 = " DateTime=%{public, name=DateTime}s Reason=%{public, name=Reason}llu eventTime=%{public, signpost.desc"
                  "ription:event_time}llu";
LABEL_21:
            v33 = 32;
            goto LABEL_26;
          }
          break;
        case 4:
          v38 = v7 + 48 * v11;
          v39 = (uint64_t *)(v38 + 16);
          v40 = *(unsigned __int16 *)(v38 + 24);
          if (v52)
            x_stream_printf(v52, "%20s  SharedEvent IOSurface ID: 0x%16llx  Usage: %23s  Operation: %9s  Access: %6s  Value: 0x%16llx\n", v17, v18, v19, v20, v21, v22, (uint64_t)CString);
          if (os_signpost_enabled(log))
          {
            v41 = CA::WindowServer::SharedEvent::UsageString[v40 & 0x1F];
            v42 = CA::WindowServer::SharedEvent::OperationString[(v40 >> 5) & 3];
            v43 = CA::WindowServer::SharedEvent::AccessString[(v40 >> 7) & 3];
            v44 = *v39;
            v45 = *(char **)(v7 + 48 * v11 + 32);
            v46 = *v14;
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)v56 = CString;
            *(_WORD *)&v56[8] = 2050;
            *(_QWORD *)&v56[10] = v44;
            v57 = 2082;
            v58 = v41;
            v59 = 2082;
            v60 = v42;
            v61 = 2082;
            v62 = v43;
            v63 = 2050;
            v64 = v45;
            v65 = 2050;
            v66 = v46;
            v30 = log;
            v31 = "SharedEvent";
            v32 = " DateTime=%{public, name=DateTime}s IOSurfaceID=%{public, name=IOSurfaceID}#llx Usage=%{public, name=U"
                  "sage}s Operation=%{public, name=Operation}s Access=%{public, name=Access}s Value=%{public, name=Value}"
                  "#llx eventTime=%{public, signpost.description:event_time}llu";
            v33 = 72;
LABEL_26:
            _os_signpost_emit_with_name_impl(&dword_184457000, v30, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v31, v32, buf, v33);
          }
          break;
        default:
          break;
      }
      if (v16)
        CFRelease(v16);
      a3 = v11;
      v47 = v12++;
      v11 = v47;
    }
    while (v47 < a4);
  }
  if (*(_QWORD *)(v51 + 25328) == a4)
  {
    if (CA::WindowServer::Display::get_display_trace_log(void)::once[0] != -1)
      dispatch_once(CA::WindowServer::Display::get_display_trace_log(void)::once, &__block_literal_global_64);
    v48 = CA::WindowServer::Display::get_display_trace_log(void)::log;
    if (os_signpost_enabled((os_log_t)CA::WindowServer::Display::get_display_trace_log(void)::log))
    {
      v49 = *(_DWORD *)(v51 + 24);
      v50 = *(_QWORD *)(v7 + 48 * a3 + 8);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)v56 = v49;
      *(_WORD *)&v56[4] = 2050;
      *(_QWORD *)&v56[6] = v50;
      _os_signpost_emit_with_name_impl(&dword_184457000, v48, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "DisplayTrace", "DisplayID=%{public, name=DisplayID}u %{public, signpost.description:end_time}llu", buf, 0x12u);
    }
  }
}

uint64_t CA::WindowServer::Display::send_display_state_change_reply(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  NSObject *v4;
  int v5;
  const char *v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(this + 740))
  {
    v1 = this;
    v2 = **(unsigned __int8 **)(this + 728);
    v3 = (_DWORD)v2 != *(unsigned __int8 *)(this + 736);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v4 = x_log_category_display_state;
      if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
      {
        v5 = *(_DWORD *)(v1 + 24);
        if (v2 > 0xB)
          v6 = "unknown";
        else
          v6 = off_1E159DA10[v2];
        *(_DWORD *)buf = 67109378;
        v8 = v5;
        v9 = 2080;
        v10 = v6;
        _os_log_impl(&dword_184457000, v4, OS_LOG_TYPE_DEFAULT, "(send) signal clients display %u state changed to %s", buf, 0x12u);
      }
    }
    _CACDisplayDidChangeToState(*(_DWORD *)(v1 + 740), *(_DWORD *)(v1 + 24), v2, *(_BYTE *)(v1 + 744), v3);
    this = mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(_DWORD *)(v1 + 740));
    *(_DWORD *)(v1 + 740) = 0;
  }
  return this;
}

uint64_t CA::WindowServer::Display::flush_display_state_change_reply(uint64_t this)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  unint64_t v4;
  const char *v5;
  uint8_t buf[4];
  int v7;
  __int16 v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(this + 740))
  {
    v1 = this;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v2 = x_log_category_display_state;
      if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
      {
        v3 = *(_DWORD *)(v1 + 24);
        v4 = **(unsigned __int8 **)(v1 + 728);
        if (v4 > 0xB)
          v5 = "unknown";
        else
          v5 = off_1E159DA10[v4];
        *(_DWORD *)buf = 67109378;
        v7 = v3;
        v8 = 2080;
        v9 = v5;
        _os_log_impl(&dword_184457000, v2, OS_LOG_TYPE_DEFAULT, "(flush) signal clients display %u state changed to %s", buf, 0x12u);
      }
    }
    _CACDisplayDidChangeToState(*(_DWORD *)(v1 + 740), *(_DWORD *)(v1 + 24), **(_BYTE **)(v1 + 728), *(_BYTE *)(v1 + 744), 3);
    this = mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(_DWORD *)(v1 + 740));
    *(_DWORD *)(v1 + 740) = 0;
  }
  return this;
}

void CA::WindowServer::Display::complete_powering_on(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  NSObject *v3;
  uint8_t v4[8];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = this + 179;
  os_unfair_lock_lock(this + 179);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v3 = x_log_category_display_state;
    if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_184457000, v3, OS_LOG_TYPE_DEFAULT, "Display::complete_powering_on", v4, 2u);
    }
  }
  *(_BYTE *)(*(_QWORD *)&this[182]._os_unfair_lock_opaque + 2) = 1;
  os_unfair_lock_unlock(v2);
}

void CA::Render::LayerHost::show(CA::Render::LayerHost *this, int a2, uint64_t a3)
{
  _BOOL4 v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  CA::Render *v25;
  unsigned int v26;
  unsigned int v27;
  NSObject *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  NSObject *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  uint8_t buf[8];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v6 = x_log_hook_p();
  if ((a3 & 1) == 0)
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *((_DWORD *)this + 4);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v8;
        _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_DEFAULT, "(layer-host %x", buf, 8u);
      }
    }
    if ((*((_BYTE *)this + 13) & 2) != 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v9 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v9, OS_LOG_TYPE_DEFAULT, "(inherits-security true)", buf, 2u);
        }
      }
    }
    if ((*((_BYTE *)this + 13) & 4) != 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v10 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_DEFAULT, "(renders-asynchronously true)", buf, 2u);
        }
      }
    }
    if ((*((_BYTE *)this + 13) & 8) != 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v11 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v11, OS_LOG_TYPE_DEFAULT, "(renders-opaque true)", buf, 2u);
        }
      }
    }
    if ((*((_BYTE *)this + 13) & 0x10) != 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v12 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_DEFAULT, "(resizes-hosted-context true)", buf, 2u);
        }
      }
    }
    if ((*((_BYTE *)this + 13) & 0x80) != 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v13 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v13, OS_LOG_TYPE_DEFAULT, "(sequestered true)", buf, 2u);
        }
      }
    }
    if ((*((_BYTE *)this + 13) & 0x40) != 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v14 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v14, OS_LOG_TYPE_DEFAULT, "(transforms-to-screen-space true)", buf, 2u);
        }
      }
    }
    if ((*((_BYTE *)this + 13) & 0x20) != 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v15 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v15, OS_LOG_TYPE_DEFAULT, "(stops-hit-test-transform-accumulation true)", buf, 2u);
        }
      }
    }
    v16 = *((_QWORD *)this + 10);
    if (v16 && (*(_WORD *)(v16 + 552) & 0x20) != 0 || (*((_BYTE *)this + 14) & 1) != 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v17 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v17, OS_LOG_TYPE_DEFAULT, "(stop-secure-superlayers-validation true)", buf, 2u);
        }
      }
    }
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
    v18 = *((_QWORD *)this + 9);
    if (v18)
    {
      v19 = (unsigned int *)(v18 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
      if (!v20)
      {
        do
          v26 = __ldaxr(v19);
        while (__stlxr(v26 - 1, v19));
        os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
        v22 = 0;
        v18 = 0;
        goto LABEL_64;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
      pthread_mutex_lock((pthread_mutex_t *)(v18 + 72));
      v21 = CA::Render::Context::root_layer_handle(*((CA::Render::Context **)this + 9));
      if (v21)
      {
        v22 = *(unsigned int **)(v21 + 16);
        if (v22)
        {
          v23 = v22 + 2;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 + 1, v23));
          if (v24)
          {
            pthread_mutex_unlock((pthread_mutex_t *)(v18 + 72));
            v25 = (CA::Render *)(a2 + 1);
            CA::Render::show_newline(v25);
            (*(void (**)(unsigned int *, CA::Render *, uint64_t))(*(_QWORD *)v22 + 40))(v22, v25, a3);
LABEL_64:
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v28 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v28, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
              }
            }
            if (v22)
            {
              v29 = v22 + 2;
              do
              {
                v30 = __ldaxr(v29);
                v31 = v30 - 1;
              }
              while (__stlxr(v31, v29));
              if (!v31)
                (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 16))(v22);
            }
            if (v18)
            {
              v32 = (unsigned int *)(v18 + 8);
              do
              {
                v33 = __ldaxr(v32);
                v34 = v33 - 1;
              }
              while (__stlxr(v34, v32));
              if (!v34)
                (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
            }
            return;
          }
          do
            v27 = __ldaxr(v23);
          while (__stlxr(v27 - 1, v23));
        }
      }
      pthread_mutex_unlock((pthread_mutex_t *)(v18 + 72));
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
    }
    v22 = 0;
    goto LABEL_64;
  }
  if (v6)
  {
    x_log_();
  }
  else
  {
    v35 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184457000, v35, OS_LOG_TYPE_DEFAULT, "layer-host ", buf, 2u);
    }
  }
  *(_QWORD *)buf = 0;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
  X::Ref<CA::Render::Texture>::operator=((unsigned int **)buf, *((unsigned int **)this + 9));
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
  v46 = 0;
  if (*(_QWORD *)buf)
  {
    pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)buf + 72));
    v36 = CA::Render::Context::root_layer_handle(*((CA::Render::Context **)this + 9));
    if (v36)
      v37 = *(unsigned int **)(v36 + 16);
    else
      v37 = 0;
    X::Ref<CA::Render::Texture>::operator=(&v46, v37);
    pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)buf + 72));
    if (v46)
    {
      (*(void (**)(unsigned int *, _QWORD, uint64_t))(*(_QWORD *)v46 + 40))(v46, (a2 + 1), a3);
      v38 = v46;
      if (v46)
      {
        v39 = v46 + 2;
        do
        {
          v40 = __ldaxr(v39);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, v39));
        if (!v41)
          (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 16))(v38);
      }
    }
    v42 = *(_QWORD *)buf;
    if (*(_QWORD *)buf)
    {
      v43 = (unsigned int *)(*(_QWORD *)buf + 8);
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
    }
  }
}

void CA::Render::LayerHost::count_layers(CA::Render::LayerHost *this, int *a2, int *a3, char a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
  v8 = *((_QWORD *)this + 9);
  if (!v8)
    goto LABEL_15;
  v9 = (unsigned int *)(v8 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  if (!v10)
  {
    do
      v17 = __ldaxr(v9);
    while (__stlxr(v17 - 1, v9));
LABEL_15:
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
    return;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
  pthread_mutex_lock((pthread_mutex_t *)(v8 + 72));
  v11 = CA::Render::Context::root_layer_handle(*((CA::Render::Context **)this + 9));
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v13 = (unsigned int *)(v12 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      if (v14)
      {
        pthread_mutex_unlock((pthread_mutex_t *)(v8 + 72));
        CA::Render::Layer::count_layers(v12, a2, a3, a4);
        do
        {
          v15 = __ldaxr(v13);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v13));
        if (!v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        goto LABEL_18;
      }
      do
        v18 = __ldaxr(v13);
      while (__stlxr(v18 - 1, v13));
    }
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v8 + 72));
  do
  {
LABEL_18:
    v19 = __ldaxr(v9);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, v9));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
}

unsigned int **X::Ref<CA::Render::AsynchronousState>::operator=(unsigned int **a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v12;

  v3 = *a1;
  v4 = *a2;
  if (v3 != *a2)
  {
    if (v3)
    {
      v6 = v3 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v4 = *a2;
    }
    if (v4)
    {
      v9 = v4 + 2;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      if (!v10)
      {
        v4 = 0;
        do
          v12 = __ldaxr(v9);
        while (__stlxr(v12 - 1, v9));
      }
    }
    *a1 = v4;
  }
  return a1;
}

dispatch_queue_t ___ZN2CA6Render16AsynchronousItemD2Ev_block_invoke()
{
  NSObject *v0;
  dispatch_queue_t result;

  v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  result = dispatch_queue_create("com.apple.coreanimation.async_hit_test_tree_dealloc", v0);
  CA::Render::AsynchronousItem::~AsynchronousItem()::queue = (uint64_t)result;
  return result;
}

void CA::Render::Context::show_hosts(CA::Render::Context *this)
{
  NSObject *v2;
  uint8_t v3[8];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
  if (!*((_QWORD *)this + 52))
  {
    CA::Render::Context::show_hosts_(this, 0);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v2 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v3 = 0;
        _os_log_impl(&dword_184457000, v2, OS_LOG_TYPE_DEFAULT, "\n", v3, 2u);
      }
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
}

uint64_t CA::Render::Context::show_hosts_(CA::Render::Context *this, int a2)
{
  pthread_mutex_t *v4;
  unsigned int *v5;
  pid_t v7;
  NSObject *v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  pid_t v12;
  unsigned int v14;
  int v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  CA::Render *v19;
  _QWORD *i;
  CA::Render::Context *v21;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  _DWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = (pthread_mutex_t *)((char *)this + 72);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 72));
  if (x_log_hook_p())
  {
    v5 = (unsigned int *)((char *)this + 228);
    if (!atomic_load((unsigned int *)this + 57))
    {
      if (*((_DWORD *)this + 63))
        v7 = 0;
      else
        v7 = getpid();
      while (!__ldaxr(v5))
      {
        if (!__stlxr(v7, v5))
          goto LABEL_14;
      }
      __clrex();
    }
LABEL_14:
    CA::Render::Context::process_path(this);
    x_log_();
  }
  else
  {
    v8 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *((_DWORD *)this + 4);
      v10 = (unsigned int *)((char *)this + 228);
      v11 = atomic_load((unsigned int *)this + 57);
      if (!v11)
      {
        if (*((_DWORD *)this + 63))
          v12 = 0;
        else
          v12 = getpid();
        while (1)
        {
          v14 = __ldaxr(v10);
          if (v14)
            break;
          if (!__stlxr(v12, v10))
          {
            v15 = 1;
            goto LABEL_20;
          }
        }
        v15 = 0;
        __clrex();
LABEL_20:
        if (v15)
          v11 = v12;
        else
          v11 = v14;
      }
      *(_DWORD *)buf = 67109890;
      v24 = v9;
      v25 = 2080;
      v26 = "";
      v27 = 1024;
      v28 = v11;
      v29 = 2080;
      v30 = CA::Render::Context::process_path(this) + 7;
      _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_DEFAULT, "  %x; %spid %d [%s]", buf, 0x22u);
    }
  }
  if (!*((_DWORD *)this + 64))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v16 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v16, OS_LOG_TYPE_DEFAULT, " (local)", buf, 2u);
      }
    }
  }
  if (*((_DWORD *)this + 88))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v17 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v17, OS_LOG_TYPE_DEFAULT, " (visible)", buf, 2u);
      }
    }
  }
  if ((*((_WORD *)this + 276) & 4) != 0)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v18 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v18, OS_LOG_TYPE_DEFAULT, " (secure)", buf, 2u);
      }
    }
  }
  v19 = (CA::Render *)(a2 + 1);
  CA::Render::show_newline(v19);
  for (i = (_QWORD *)*((_QWORD *)this + 53); i; i = (_QWORD *)i[1])
  {
    v21 = *(CA::Render::Context **)(*i + 72);
    if (v21)
      CA::Render::Context::show_hosts_(v21, v19);
  }
  return pthread_mutex_unlock(v4);
}

uint64_t CA::Render::Context::needs_defer_update_locked(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  _QWORD *v5;
  CA::Render::Context *v6;

  v2 = this + 158;
  os_unfair_lock_lock(this + 158);
  v3 = *(_QWORD *)&this[166]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2);
  if (v3)
    return 1;
  v5 = *(_QWORD **)&this[106]._os_unfair_lock_opaque;
  if (v5)
  {
    while (1)
    {
      v6 = *(CA::Render::Context **)(*v5 + 72);
      if (v6)
      {
        if ((CA::Render::Context::needs_defer_update_locked(v6) & 1) != 0)
          break;
      }
      v5 = (_QWORD *)v5[1];
      if (!v5)
        return 0;
    }
    return 1;
  }
  return 0;
}

_QWORD *x_list_prepend(uint64_t a1, uint64_t a2)
{
  malloc_zone_t *malloc_zone;
  _QWORD *result;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
  *result = a2;
  result[1] = a1;
  return result;
}

void x_list_foreach(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  malloc_zone_t *malloc_zone;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      v3 = *(unsigned int **)(*v1 + 104);
      if (v3)
      {
        v4 = v3 + 2;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
        v2[13] = 0;
      }
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(malloc_zone, v2);
      v1 = (_QWORD *)v1[1];
    }
    while (v1);
  }
}

int32x2_t CA::WindowServer::d65a_to_d65_matrix(int32x2_t *a1, unint64_t *a2, double a3, float32x4_t a4, double a5, double a6, float32x4_t a7)
{
  unsigned __int8 v8;
  float32x4_t *v9;
  unsigned __int8 v10;
  float32x4_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  float32x4_t v36;
  int32x2_t v37;
  int32x2_t result;
  int v39;
  int v40;
  __int128 v41;
  float32x4_t v42;
  __int128 v43;
  float32x4_t v44;
  __int128 v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  unint64_t *v49;
  unint64_t *v50;
  _OWORD v51[6];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  uint64_t v64;
  simd_float3x3 v65;

  v64 = *MEMORY[0x1E0C80C00];
  v9 = (float32x4_t *)&unk_1EDD13000;
  if ((v8 & 1) == 0)
  {
    v49 = a2;
    v9 = (float32x4_t *)&unk_1EDD13000;
    a2 = v49;
    if (v39)
    {
      CA::WindowServer::d65a_to_d65_matrix(CAChromaticities)::D65_xyY = xmmword_18474E2A0;
      v9 = (float32x4_t *)&unk_1EDD13000;
      a2 = v49;
    }
  }
  v11 = (float32x4_t *)&unk_1EDD13000;
  if ((v10 & 1) == 0)
  {
    v50 = a2;
    v11 = (float32x4_t *)&unk_1EDD13000;
    v9 = (float32x4_t *)&unk_1EDD13000;
    a2 = v50;
    if (v40)
    {
      CA::WindowServer::d65a_to_d65_matrix(CAChromaticities)::D65a_xyY = xmmword_18474E2B0;
      v11 = (float32x4_t *)&unk_1EDD13000;
      v9 = (float32x4_t *)&unk_1EDD13000;
      a2 = v50;
    }
  }
  a4.i64[0] = *a2;
  a7.i64[0] = a2[1];
  a4.i32[2] = 1.0;
  v12 = a4;
  v47 = a4;
  a7.i32[2] = 1.0;
  v48 = v9[205];
  v13.i64[0] = a2[2];
  v13.i64[1] = __PAIR64__(v48.u32[3], 1.0);
  v42 = v13;
  v44 = a7;
  v14 = v11[207];
  v46 = v14;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  RGBXYZConversionMatrices<float>::RGBXYZConversionMatrices((uint64_t)&v52, v12, a7, v13, v14);
  memset(v51, 0, sizeof(v51));
  RGBXYZConversionMatrices<float>::RGBXYZConversionMatrices((uint64_t)v51, v47, v44, v42, v48);
  v15 = vdivq_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmulq_n_f32((float32x4_t)xmmword_18474E2C0, vmuls_lane_f32(v48.f32[0], v48, 2) / v48.f32[1]), (float32x4_t)xmmword_18474E2D0, v48, 2), (float32x4_t)xmmword_18474E2E0, vmuls_lane_f32(1.0 - vaddv_f32(*(float32x2_t *)v48.f32), v48, 2) / v48.f32[1]), vmlaq_n_f32(vmlaq_laneq_f32(vmulq_n_f32((float32x4_t)xmmword_18474E2C0, vmuls_lane_f32(v46.f32[0], v46, 2) / v46.f32[1]), (float32x4_t)xmmword_18474E2D0, v46, 2), (float32x4_t)xmmword_18474E2E0, vmuls_lane_f32(1.0 - vaddv_f32(*(float32x2_t *)v46.f32), v46, 2) / v46.f32[1]));
  *(_QWORD *)&v16 = 0;
  *((_QWORD *)&v16 + 1) = v15.u32[2];
  v45 = v16;
  DWORD1(v16) = v15.i32[1];
  v43 = (unint64_t)v16;
  v41 = v15.u32[0];
  v65 = __invert_f3(*(simd_float3x3 *)_PromotedConst);
  v17 = 0;
  v58 = v41;
  v59 = v43;
  v60 = v45;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v61 + v17) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v65.columns[0], COERCE_FLOAT(*(__int128 *)((char *)&v58 + v17))), (float32x4_t)v65.columns[1], *(float32x2_t *)((char *)&v58 + v17), 1), (float32x4_t)v65.columns[2], *(float32x4_t *)((char *)&v58 + v17), 2);
    v17 += 16;
  }
  while (v17 != 48);
  v18 = 0;
  v19 = v61;
  v20 = v62;
  v21 = v63;
  v58 = xmmword_18474E2C0;
  v59 = xmmword_18474E2D0;
  v60 = xmmword_18474E2E0;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v61 + v18) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, COERCE_FLOAT(*(__int128 *)((char *)&v58 + v18))), v20, *(float32x2_t *)((char *)&v58 + v18), 1), v21, *(float32x4_t *)((char *)&v58 + v18), 2);
    v18 += 16;
  }
  while (v18 != 48);
  v22 = 0;
  v23 = v61;
  v24 = v62;
  v25 = v63;
  v23.i32[3] = 0;
  v24.i32[3] = 0;
  v25.i32[3] = 0;
  v26 = v55;
  v27 = v56;
  v28 = v57;
  v58 = (__int128)v23;
  v59 = (__int128)v24;
  v60 = (__int128)v25;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v61 + v22) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(__int128 *)((char *)&v58 + v22))), v27, *(float32x2_t *)((char *)&v58 + v22), 1), v28, *(float32x4_t *)((char *)&v58 + v22), 2);
    v22 += 16;
  }
  while (v22 != 48);
  v29 = 0;
  v30 = v61;
  v31 = v62;
  v32 = v63;
  v58 = v52;
  v59 = v53;
  v60 = v54;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v61 + v29) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v30, COERCE_FLOAT(*(__int128 *)((char *)&v58 + v29))), v31, *(float32x2_t *)((char *)&v58 + v29), 1), v32, *(float32x4_t *)((char *)&v58 + v29), 2);
    v29 += 16;
  }
  while (v29 != 48);
  v33 = vaddq_f32(vaddq_f32(v62, v61), v63);
  v33.f32[0] = 1.0 / fmaxf(fmaxf(v33.f32[0], v33.f32[2]), v33.f32[1]);
  v34 = (int8x16_t)vmulq_n_f32(v61, v33.f32[0]);
  v35 = (int8x16_t)vmulq_n_f32(v62, v33.f32[0]);
  v36 = vmulq_n_f32(v63, v33.f32[0]);
  v37 = vzip2_s32(*(int32x2_t *)v35.i8, *(int32x2_t *)v36.f32);
  a1[4].i32[0] = v36.i32[2];
  v36.i32[1] = v34.i32[1];
  *a1 = vzip1_s32(*(int32x2_t *)v34.i8, *(int32x2_t *)v35.i8);
  a1[1] = *(int32x2_t *)v36.f32;
  result = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
  a1[2] = v37;
  a1[3] = result;
  return result;
}

uint64_t RGBXYZConversionMatrices<float>::RGBXYZConversionMatrices(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  simd_float3 v5;
  simd_float3 v6;
  simd_float3 v7;
  float32x4_t v9;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  float v16;
  simd_float3x3 v17;
  simd_float3x3 v18;
  simd_float3x3 v19;

  v5.f32[0] = vmuls_lane_f32(a2.f32[0], a2, 2) / a2.f32[1];
  v6.f32[0] = vmuls_lane_f32(a3.f32[0], a3, 2) / a3.f32[1];
  v7.f32[0] = vmuls_lane_f32(a4.f32[0], a4, 2) / a4.f32[1];
  v16 = vmuls_lane_f32(a5.f32[0], a5, 2) / a5.f32[1];
  v5.i32[1] = a2.i32[2];
  v5.f32[2] = vmuls_lane_f32(1.0 - vaddv_f32(*(float32x2_t *)a2.f32), a2, 2) / a2.f32[1];
  v6.i32[1] = a3.i32[2];
  v6.f32[2] = vmuls_lane_f32(1.0 - vaddv_f32(*(float32x2_t *)a3.f32), a3, 2) / a3.f32[1];
  v17.columns[1] = v6;
  v12 = (float32x4_t)v6;
  v13 = (float32x4_t)v5;
  v7.i32[1] = a4.i32[2];
  v7.f32[2] = vmuls_lane_f32(1.0 - vaddv_f32(*(float32x2_t *)a4.f32), a4, 2) / a4.f32[1];
  v17.columns[2] = v7;
  v11 = (float32x4_t)v7;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v14 = vmuls_lane_f32(1.0 - vaddv_f32(*(float32x2_t *)a5.f32), a5, 2) / a5.f32[1];
  v17.columns[0] = v5;
  v18 = __invert_f3(v17);
  v9 = vmlaq_n_f32(vmlaq_laneq_f32(vmulq_n_f32((float32x4_t)v18.columns[0], v16), (float32x4_t)v18.columns[1], a5, 2), (float32x4_t)v18.columns[2], v14);
  v18.columns[0] = (simd_float3)vmulq_n_f32(v13, v9.f32[0]);
  v18.columns[1] = (simd_float3)vmulq_lane_f32(v12, *(float32x2_t *)v9.f32, 1);
  v18.columns[2] = (simd_float3)vmulq_laneq_f32(v11, v9, 2);
  *(simd_float3x3 *)a1 = v18;
  v19 = __invert_f3(v18);
  *(_DWORD *)(a1 + 56) = v19.columns[0].i32[2];
  *(_QWORD *)(a1 + 48) = v19.columns[0].i64[0];
  *(_DWORD *)(a1 + 72) = v19.columns[1].i32[2];
  *(_QWORD *)(a1 + 64) = v19.columns[1].i64[0];
  *(_DWORD *)(a1 + 88) = v19.columns[2].i32[2];
  *(_QWORD *)(a1 + 80) = v19.columns[2].i64[0];
  return a1;
}

void ___ZN2CA12WindowServer11DebugPresetEj_block_invoke(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  double v9;
  int v10;
  void *v11;
  float32x4_t v12;
  double v13;
  double v14;
  float32x4_t v15;
  double v16;
  void *v17;
  float32x4_t v18;
  double v19;
  double v20;
  float32x4_t v21;
  double v22;
  void *v23;
  double v24;
  void *context;
  __int128 v26;
  __int128 v27;
  int v28;
  _BYTE v29[128];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = +[CAWindowServer serverIfRunning](CAWindowServer, "serverIfRunning");
  if (v2)
  {
    v3 = v2;
    context = (void *)MEMORY[0x186DBE2E4]();
    v4 = (void *)objc_msgSend(v3, "displays");
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v30, v29, 16);
    if (v5)
    {
      v6 = *(_QWORD *)v31;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v31 != v6)
            objc_enumerationMutation(v4);
          v8 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
          if (!objc_msgSend(v8, "displayType"))
          {
            v10 = *(_DWORD *)(a1 + 32);
            if (v10 == 2)
            {
              LODWORD(v9) = 1.0;
              objc_msgSend(v8, "setUserAdjustment:scale:", &_ZZZN2CA12WindowServer11DebugPresetEjEUb_E8identity, v9);
              objc_msgSend(v8, "setMaximumSDRLuminance:", 100.0);
              objc_msgSend(v8, "setMaximumHDRLuminance:", 1000.0);
              objc_msgSend(v8, "setMinimumLuminance:", 0.0005);
              objc_msgSend(v8, "setMaximumReferenceLuminance:", 1000.0);
              objc_msgSend(v8, "setTrinityCabalConfig:", 1);
              objc_msgSend(v8, "setPreserveAppleSRGBGammaResponse:", 0);
              objc_msgSend(v8, "setIsReferencePreset:", 1);
              v17 = (void *)objc_msgSend((id)objc_msgSend(v8, "brightnessCapabilities"), "mutableCopy");
              objc_msgSend(v17, "setObject:forKeyedSubscript:", &unk_1E15D6DF0, CFSTR("EDRPotentialHeadroom"));
              objc_msgSend(v17, "setObject:forKeyedSubscript:", &unk_1E15D6DF0, CFSTR("EDRReferenceHeadroom"));
              objc_msgSend(v17, "setObject:forKeyedSubscript:", &unk_1E15D6E00, CFSTR("MinNits"));
              objc_msgSend(v17, "setObject:forKeyedSubscript:", &unk_1E15D6E00, CFSTR("MaxNits"));
              objc_msgSend(v17, "setObject:forKeyedSubscript:", &unk_1E15D6E10, CFSTR("MaxNitsEDR"));
              objc_msgSend(v8, "setBrightnessCapabilities:", v17);

              v28 = 0;
              v26 = 0u;
              v27 = 0u;
              *(int32x2_t *)&v22 = CA::WindowServer::d65a_to_d65_matrix((int32x2_t *)&v26, _ZZZN2CA12WindowServer11DebugPresetEjEUb_E4srgb, 0.0, v18, v19, v20, v21);
              LODWORD(v22) = 1.0;
              objc_msgSend(v8, "setColorMatrix:scale:rampDuration:", &v26, v22, 0.0);
            }
            else
            {
              LODWORD(v9) = 1.0;
              if (v10 == 1)
              {
                objc_msgSend(v8, "setUserAdjustment:scale:", &_ZZZN2CA12WindowServer11DebugPresetEjEUb_E8identity, v9);
                objc_msgSend(v8, "setMaximumSDRLuminance:", 100.0);
                objc_msgSend(v8, "setMaximumHDRLuminance:", 1000.0);
                objc_msgSend(v8, "setMinimumLuminance:", 0.0005);
                objc_msgSend(v8, "setMaximumReferenceLuminance:", 1000.0);
                objc_msgSend(v8, "setTrinityCabalConfig:", 1);
                objc_msgSend(v8, "setPreserveAppleSRGBGammaResponse:", 0);
                objc_msgSend(v8, "setIsReferencePreset:", 1);
                v11 = (void *)objc_msgSend((id)objc_msgSend(v8, "brightnessCapabilities"), "mutableCopy");
                objc_msgSend(v11, "setObject:forKeyedSubscript:", &unk_1E15D6DF0, CFSTR("EDRPotentialHeadroom"));
                objc_msgSend(v11, "setObject:forKeyedSubscript:", &unk_1E15D6DF0, CFSTR("EDRReferenceHeadroom"));
                objc_msgSend(v11, "setObject:forKeyedSubscript:", &unk_1E15D6E00, CFSTR("MinNits"));
                objc_msgSend(v11, "setObject:forKeyedSubscript:", &unk_1E15D6E00, CFSTR("MaxNits"));
                objc_msgSend(v11, "setObject:forKeyedSubscript:", &unk_1E15D6E10, CFSTR("MaxNitsEDR"));
                objc_msgSend(v8, "setBrightnessCapabilities:", v11);

                v28 = 0;
                v26 = 0u;
                v27 = 0u;
                *(int32x2_t *)&v16 = CA::WindowServer::d65a_to_d65_matrix((int32x2_t *)&v26, _ZZZN2CA12WindowServer11DebugPresetEjEUb_E2p3, 0.0, v12, v13, v14, v15);
                LODWORD(v16) = 1.0;
                objc_msgSend(v8, "setColorMatrix:scale:rampDuration:", &v26, v16, 0.0);
              }
              else
              {
                objc_msgSend(v8, "setUserAdjustment:scale:", &_ZZZN2CA12WindowServer11DebugPresetEjEUb_E8identity, v9);
                objc_msgSend(v8, "setMaximumSDRLuminance:", 500.0);
                objc_msgSend(v8, "setMaximumHDRLuminance:", 1600.0);
                objc_msgSend(v8, "setMinimumLuminance:", 0.0005);
                objc_msgSend(v8, "setMaximumReferenceLuminance:", 600.0);
                objc_msgSend(v8, "setTrinityCabalConfig:", 1);
                objc_msgSend(v8, "setPreserveAppleSRGBGammaResponse:", 1);
                objc_msgSend(v8, "setIsReferencePreset:", 0);
                v23 = (void *)objc_msgSend((id)objc_msgSend(v8, "brightnessCapabilities"), "mutableCopy");
                objc_msgSend(v23, "setObject:forKeyedSubscript:", &unk_1E15D6E20, CFSTR("EDRPotentialHeadroom"));
                objc_msgSend(v23, "setObject:forKeyedSubscript:", &unk_1E15D6E30, CFSTR("EDRReferenceHeadroom"));
                objc_msgSend(v23, "setObject:forKeyedSubscript:", &unk_1E15D6E40, CFSTR("MinNits"));
                objc_msgSend(v23, "setObject:forKeyedSubscript:", &unk_1E15D6E50, CFSTR("MaxNits"));
                objc_msgSend(v23, "setObject:forKeyedSubscript:", &unk_1E15D6E60, CFSTR("MaxNitsEDR"));
                objc_msgSend(v8, "setBrightnessCapabilities:", v23);

                LODWORD(v24) = 1.0;
                objc_msgSend(v8, "setColorMatrix:scale:rampDuration:", &_ZZZN2CA12WindowServer11DebugPresetEjEUb_E8identity, v24, 0.0);
              }
            }
            NSLog(CFSTR("success: %d"), objc_msgSend(v8, "commitPreset"));
          }
        }
        v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v30, v29, 16);
      }
      while (v5);
    }
    objc_autoreleasePoolPop(context);
  }
}

void sub_18462617C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *context)
{
  objc_autoreleasePoolPop(context);
  _Unwind_Resume(a1);
}

void ___ZN2CA12WindowServer15DebugBrightnessEd_block_invoke(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  int v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  int v18;
  NSObject *v19;
  int v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  const char *v29;
  uint32_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  CABrightnessRamper *v38;
  CABrightnessRamper *v39;
  double v40;
  double v41;
  CABrightnessRamper *v42;
  CABrightnessRamper *v43;
  CABrightnessRamper *v44;
  CABrightnessRamper *v45;
  double v46;
  CABrightnessRamper *v47;
  CABrightnessRamper *v48;
  CABrightnessRamper *v49;
  CABrightnessRamper *v50;
  CABrightnessRamper *v51;
  CABrightnessRamper *v52;
  CABrightnessRamper *v53;
  double v54;
  CAWhitePointRamper *v55;
  double v56;
  double v57;
  CAWhitePointRamper *v58;
  double v59;
  double v60;
  CAWhitePointRamper *v61;
  NSObject *v62;
  CAAccessibilityRamper *v63;
  CAAccessibilityRamper *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *context;
  id obj;
  uint64_t v70;
  uint64_t v71;
  const __CFString *v72;
  _OWORD v73[2];
  int v74;
  _QWORD v75[3];
  int v76;
  uint64_t v77;
  _QWORD v78[3];
  int v79;
  uint64_t v80;
  _QWORD v81[3];
  int v82;
  uint64_t v83;
  _QWORD v84[3];
  int v85;
  uint64_t v86;
  _OWORD v87[2];
  int v88;
  _OWORD v89[2];
  int v90;
  uint8_t buf[16];
  __int128 v92;
  int v93;
  _BYTE v94[128];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v2 = +[CAWindowServer serverIfRunning](CAWindowServer, "serverIfRunning");
  if (v2)
  {
    v3 = v2;
    context = (void *)MEMORY[0x186DBE2E4]();
    v4 = (void *)objc_msgSend(v3, "displays");
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v95, v94, 16);
    if (!v5)
      goto LABEL_54;
    v70 = *(_QWORD *)v96;
    __asm { FMOV            V15.2S, #1.0 }
    obj = v4;
    while (1)
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v96 != v70)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v95 + 1) + 8 * v11);
        if (!objc_msgSend(v12, "displayType") || objc_msgSend(v12, "displayType") == 1)
        {
          if (x_log_hook_p())
          {
            v65 = objc_msgSend(v12, "displayId");
            x_log_();
          }
          else
          {
            v13 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
            {
              v14 = objc_msgSend(v12, "displayId");
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = v14;
              _os_log_impl(&dword_184457000, v13, OS_LOG_TYPE_DEFAULT, "Debug Brightness Display %u", buf, 8u);
            }
          }
          if (x_log_hook_p())
          {
            v65 = objc_msgSend(v12, "brightnessAvailable");
            x_log_();
          }
          else
          {
            v15 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
            {
              v16 = objc_msgSend(v12, "brightnessAvailable");
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = v16;
              _os_log_impl(&dword_184457000, v15, OS_LOG_TYPE_DEFAULT, "    Brightness Available: %d", buf, 8u);
            }
          }
          if (x_log_hook_p())
          {
            v65 = objc_msgSend(v12, "whitePointAvailable");
            x_log_();
          }
          else
          {
            v17 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
            {
              v18 = objc_msgSend(v12, "whitePointAvailable");
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = v18;
              _os_log_impl(&dword_184457000, v17, OS_LOG_TYPE_DEFAULT, "    WhitePoint Available: %d", buf, 8u);
            }
          }
          if (x_log_hook_p())
          {
            v65 = objc_msgSend(v12, "whitePointD50XYZ");
            x_log_();
          }
          else
          {
            v19 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
            {
              v20 = objc_msgSend(v12, "whitePointD50XYZ");
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = v20;
              _os_log_impl(&dword_184457000, v19, OS_LOG_TYPE_DEFAULT, "    WhitePoint XYZD50: %d", buf, 8u);
            }
          }
          v21 = (void *)objc_msgSend(v12, "brightnessCapabilities", v65);
          if (x_log_hook_p())
          {
            v66 = objc_msgSend((id)objc_msgSend(v21, "debugDescription"), "UTF8String");
            x_log_();
          }
          else
          {
            v22 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
            {
              v23 = objc_msgSend((id)objc_msgSend(v21, "debugDescription"), "UTF8String");
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v23;
              _os_log_impl(&dword_184457000, v22, OS_LOG_TYPE_DEFAULT, "    Capabilities: %s", buf, 0xCu);
            }
          }
          v24 = (void *)objc_msgSend(v12, "averagePixelConstraints", v66);
          v25 = x_log_hook_p();
          if (v24)
          {
            if (v25)
            {
              v67 = objc_msgSend((id)objc_msgSend(v24, "debugDescription"), "UTF8String");
              goto LABEL_33;
            }
            v26 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
            {
              v27 = objc_msgSend((id)objc_msgSend(v24, "debugDescription"), "UTF8String");
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v27;
              v28 = v26;
              v29 = "    Average Pixel Constraints: %s";
              v30 = 12;
              goto LABEL_38;
            }
          }
          else if (v25)
          {
LABEL_33:
            x_log_();
          }
          else
          {
            v31 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              v28 = v31;
              v29 = "    Average Pixel Constraints: NONE";
              v30 = 2;
LABEL_38:
              _os_log_impl(&dword_184457000, v28, OS_LOG_TYPE_DEFAULT, v29, buf, v30);
            }
          }
          objc_msgSend((id)objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("MinNits"), v67), "doubleValue");
          v33 = v32;
          objc_msgSend((id)objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("MaxNits")), "doubleValue");
          v35 = v34;
          if (objc_msgSend(v12, "brightnessAvailable"))
          {
            v71 = 0;
            if (CADeviceSupportsRTPLC::once != -1)
              dispatch_once(&CADeviceSupportsRTPLC::once, &__block_literal_global_218);
            if (CADeviceSupportsRTPLC::rtplc)
            {
              LODWORD(v36) = 2.0;
              objc_msgSend(v12, "setSDRBrightness:", v36);
              LODWORD(v37) = 10.0;
              objc_msgSend(v12, "setAmbient:", v37);
              objc_msgSend(v12, "commitBrightness:", &v71);
              usleep(0xF4240u);
              v38 = -[CABrightnessRamper initWithDisplay:]([CABrightnessRamper alloc], "initWithDisplay:", v12);
              -[CABrightnessRamper setLowAmbientStrengthBegin:](v38, "setLowAmbientStrengthBegin:", 0.0);
              -[CABrightnessRamper setLowAmbientStrengthEnd:](v38, "setLowAmbientStrengthEnd:", 1.0);
              -[CAWindowServerRamper setDuration:](v38, "setDuration:", *(double *)(a1 + 32));
              -[CAWindowServerRamper runRamp](v38, "runRamp");

              usleep(0x1E8480u);
              v39 = -[CABrightnessRamper initWithDisplay:]([CABrightnessRamper alloc], "initWithDisplay:", v12);
              -[CABrightnessRamper setLowAmbientStrengthBegin:](v39, "setLowAmbientStrengthBegin:", 1.0);
              -[CABrightnessRamper setLowAmbientStrengthEnd:](v39, "setLowAmbientStrengthEnd:", 0.0);
              -[CAWindowServerRamper setDuration:](v39, "setDuration:", *(double *)(a1 + 32));
              -[CAWindowServerRamper runRamp](v39, "runRamp");

              usleep(0x2DC6C0u);
            }
            if (MGGetSInt64Answer() == 33072)
            {
              LODWORD(v40) = 1146388480;
              objc_msgSend(v12, "setSDRBrightness:", v40);
              LODWORD(v41) = 1189765120;
              objc_msgSend(v12, "setAmbient:", v41);
              objc_msgSend(v12, "commitBrightness:", &v71);
              usleep(0xF4240u);
              v42 = -[CABrightnessRamper initWithDisplay:]([CABrightnessRamper alloc], "initWithDisplay:", v12);
              -[CABrightnessRamper setHighAmbientStrengthBegin:](v42, "setHighAmbientStrengthBegin:", 0.0);
              -[CABrightnessRamper setHighAmbientStrengthEnd:](v42, "setHighAmbientStrengthEnd:", 1.0);
              -[CAWindowServerRamper setDuration:](v42, "setDuration:", *(double *)(a1 + 32));
              -[CAWindowServerRamper runRamp](v42, "runRamp");

              usleep(0x1E8480u);
              v43 = -[CABrightnessRamper initWithDisplay:]([CABrightnessRamper alloc], "initWithDisplay:", v12);
              -[CABrightnessRamper setHighAmbientStrengthBegin:](v43, "setHighAmbientStrengthBegin:", 1.0);
              -[CABrightnessRamper setHighAmbientStrengthEnd:](v43, "setHighAmbientStrengthEnd:", 0.0);
              -[CAWindowServerRamper setDuration:](v43, "setDuration:", *(double *)(a1 + 32));
              -[CAWindowServerRamper runRamp](v43, "runRamp");

              usleep(0x2DC6C0u);
            }
            if (CADeviceSupportsMedina::once != -1)
              dispatch_once(&CADeviceSupportsMedina::once, &__block_literal_global_227);
            if (CADeviceSupportsMedina::medina)
            {
              LODWORD(v40) = 1133903872;
              objc_msgSend(v12, "setSDRBrightness:", v40);
              objc_msgSend(v12, "commitBrightness:", &v71);
              usleep(0xF4240u);
              v44 = -[CABrightnessRamper initWithDisplay:]([CABrightnessRamper alloc], "initWithDisplay:", v12);
              -[CABrightnessRamper setIndicatorNitsBegin:](v44, "setIndicatorNitsBegin:", 0.0);
              -[CABrightnessRamper setIndicatorNitsEnd:](v44, "setIndicatorNitsEnd:", 1000.0);
              -[CAWindowServerRamper setDuration:](v44, "setDuration:", *(double *)(a1 + 32));
              -[CAWindowServerRamper runRamp](v44, "runRamp");

              usleep(0x1E8480u);
            }
            LODWORD(v40) = 1153957888;
            objc_msgSend(v12, "setBrightnessLimit:", v40);
            objc_msgSend(v12, "commitBrightness:", &v71);
            v45 = -[CABrightnessRamper initWithDisplay:]([CABrightnessRamper alloc], "initWithDisplay:", v12);
            -[CABrightnessRamper setSdrNitsBegin:](v45, "setSdrNitsBegin:", v33);
            v46 = fmin(v35, 600.0);
            -[CABrightnessRamper setSdrNitsEnd:](v45, "setSdrNitsEnd:", v46);
            -[CAWindowServerRamper setDuration:](v45, "setDuration:", *(double *)(a1 + 32));
            -[CAWindowServerRamper runRamp](v45, "runRamp");

            v47 = -[CABrightnessRamper initWithDisplay:]([CABrightnessRamper alloc], "initWithDisplay:", v12);
            -[CABrightnessRamper setSdrNitsBegin:](v47, "setSdrNitsBegin:", v46);
            -[CABrightnessRamper setSdrNitsEnd:](v47, "setSdrNitsEnd:", v33);
            -[CAWindowServerRamper setDuration:](v47, "setDuration:", *(double *)(a1 + 32));
            -[CAWindowServerRamper runRamp](v47, "runRamp");

            v48 = -[CABrightnessRamper initWithDisplay:]([CABrightnessRamper alloc], "initWithDisplay:", v12);
            -[CABrightnessRamper setSdrNitsBegin:](v48, "setSdrNitsBegin:", 100.0);
            -[CABrightnessRamper setSdrNitsEnd:](v48, "setSdrNitsEnd:", 100.0);
            -[CABrightnessRamper setHeadroomBegin:](v48, "setHeadroomBegin:", 1.0);
            -[CABrightnessRamper setHeadroomEnd:](v48, "setHeadroomEnd:", 16.0);
            -[CAWindowServerRamper setDuration:](v48, "setDuration:", *(double *)(a1 + 32));
            -[CAWindowServerRamper runRamp](v48, "runRamp");

            v49 = -[CABrightnessRamper initWithDisplay:]([CABrightnessRamper alloc], "initWithDisplay:", v12);
            -[CABrightnessRamper setSdrNitsBegin:](v49, "setSdrNitsBegin:", 100.0);
            -[CABrightnessRamper setSdrNitsEnd:](v49, "setSdrNitsEnd:", 100.0);
            -[CABrightnessRamper setHeadroomBegin:](v49, "setHeadroomBegin:", 16.0);
            -[CABrightnessRamper setHeadroomEnd:](v49, "setHeadroomEnd:", 1.0);
            -[CAWindowServerRamper setDuration:](v49, "setDuration:", *(double *)(a1 + 32));
            -[CAWindowServerRamper runRamp](v49, "runRamp");

            v50 = -[CABrightnessRamper initWithDisplay:]([CABrightnessRamper alloc], "initWithDisplay:", v12);
            -[CABrightnessRamper setLimitBegin:](v50, "setLimitBegin:", 100.0);
            -[CABrightnessRamper setLimitEnd:](v50, "setLimitEnd:", v33);
            -[CAWindowServerRamper setDuration:](v50, "setDuration:", *(double *)(a1 + 32));
            -[CAWindowServerRamper runRamp](v50, "runRamp");

            v51 = -[CABrightnessRamper initWithDisplay:]([CABrightnessRamper alloc], "initWithDisplay:", v12);
            -[CABrightnessRamper setLimitBegin:](v51, "setLimitBegin:", v33);
            -[CABrightnessRamper setLimitEnd:](v51, "setLimitEnd:", 100.0);
            -[CAWindowServerRamper setDuration:](v51, "setDuration:", *(double *)(a1 + 32));
            -[CAWindowServerRamper runRamp](v51, "runRamp");

            v52 = -[CABrightnessRamper initWithDisplay:]([CABrightnessRamper alloc], "initWithDisplay:", v12);
            -[CABrightnessRamper setContrastEnhancerBegin:](v52, "setContrastEnhancerBegin:", 0.0);
            -[CABrightnessRamper setContrastEnhancerEnd:](v52, "setContrastEnhancerEnd:", 1.0);
            -[CAWindowServerRamper setDuration:](v52, "setDuration:", *(double *)(a1 + 32));
            -[CAWindowServerRamper runRamp](v52, "runRamp");

            v53 = -[CABrightnessRamper initWithDisplay:]([CABrightnessRamper alloc], "initWithDisplay:", v12);
            -[CABrightnessRamper setContrastEnhancerBegin:](v53, "setContrastEnhancerBegin:", 1.0);
            -[CABrightnessRamper setContrastEnhancerEnd:](v53, "setContrastEnhancerEnd:", 0.0);
            -[CAWindowServerRamper setDuration:](v53, "setDuration:", *(double *)(a1 + 32));
            -[CAWindowServerRamper runRamp](v53, "runRamp");

            LODWORD(v54) = 1153957888;
            objc_msgSend(v12, "setBrightnessLimit:", v54);
            objc_msgSend(v12, "commitBrightness:", &v71);
            v92 = 0x3F800000uLL;
            *(_DWORD *)&buf[12] = 0;
            *(_QWORD *)&buf[4] = 0;
            *(_DWORD *)buf = 1065353216;
            v93 = 1065353216;
            memset(v89, 0, sizeof(v89));
            DWORD1(v89[0]) = 1065353216;
            HIDWORD(v89[0]) = 1065353216;
            v90 = 1065353216;
            objc_msgSend(v12, "setWhitePoint:rampDuration:error:", v89, &v71, 2.0);
            usleep(0x2DC6C0u);
            objc_msgSend(v12, "setWhitePoint:rampDuration:error:", buf, &v71, 2.0);
            usleep(0x2DC6C0u);
            v55 = -[CAWhitePointRamper initWithDisplay:]([CAWhitePointRamper alloc], "initWithDisplay:", v12);
            -[CAWindowServerRamper setDuration:](v55, "setDuration:", 2.0);
            v87[0] = *(_OWORD *)buf;
            v87[1] = v92;
            v88 = v93;
            -[CAWhitePointRamper setWhitePointStart:](v55, "setWhitePointStart:", v87);
            v85 = 0;
            v84[2] = 0;
            v84[0] = 0;
            v84[1] = _D15;
            v86 = 1065353216;
            -[CAWhitePointRamper setWhitePointEnd:](v55, "setWhitePointEnd:", v84);
            LODWORD(v56) = 1.0;
            -[CAWhitePointRamper setScaleStart:](v55, "setScaleStart:", v56);
            LODWORD(v57) = 1050253722;
            -[CAWhitePointRamper setScaleEnd:](v55, "setScaleEnd:", v57);
            -[CAWindowServerRamper runRamp](v55, "runRamp");

            v58 = -[CAWhitePointRamper initWithDisplay:]([CAWhitePointRamper alloc], "initWithDisplay:", v12);
            -[CAWindowServerRamper setDuration:](v58, "setDuration:", 2.0);
            v81[0] = 0;
            v81[1] = _D15;
            v81[2] = 0;
            v82 = 0;
            v83 = 1065353216;
            -[CAWhitePointRamper setWhitePointEnd:](v58, "setWhitePointEnd:", v81);
            v78[0] = 0;
            v78[1] = _D15;
            v78[2] = 0;
            v79 = 0;
            v80 = 1065353216;
            -[CAWhitePointRamper setWhitePointStart:](v58, "setWhitePointStart:", v78);
            LODWORD(v59) = 1050253722;
            -[CAWhitePointRamper setScaleStart:](v58, "setScaleStart:", v59);
            LODWORD(v60) = 1.0;
            -[CAWhitePointRamper setScaleEnd:](v58, "setScaleEnd:", v60);
            -[CAWindowServerRamper runRamp](v58, "runRamp");

            v61 = -[CAWhitePointRamper initWithDisplay:]([CAWhitePointRamper alloc], "initWithDisplay:", v12);
            -[CAWindowServerRamper setDuration:](v61, "setDuration:", 2.0);
            v76 = 0;
            v75[2] = 0;
            v75[0] = 0;
            v75[1] = _D15;
            v77 = 1065353216;
            -[CAWhitePointRamper setWhitePointStart:](v61, "setWhitePointStart:", v75);
            v73[0] = *(_OWORD *)buf;
            v73[1] = v92;
            v74 = v93;
            -[CAWhitePointRamper setWhitePointEnd:](v61, "setWhitePointEnd:", v73);
            -[CAWindowServerRamper runRamp](v61, "runRamp");

            v62 = dispatch_queue_create("CA Debug Brightness", 0);
            objc_msgSend(v12, "setNotificationQueue:", v62);
            v72 = CFSTR("notificationEDR");
            objc_msgSend(v12, "registerForNotifications:withBlock:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v72, 1), &__block_literal_global_4350);
            dispatch_release(v62);
          }
          v63 = -[CAAccessibilityRamper initWithDisplay:]([CAAccessibilityRamper alloc], "initWithDisplay:", v12);
          -[CAAccessibilityRamper setAxScaleBegin:](v63, "setAxScaleBegin:", 1.0);
          -[CAAccessibilityRamper setAxScaleEnd:](v63, "setAxScaleEnd:", 0.25);
          -[CAWindowServerRamper setDuration:](v63, "setDuration:", 2.0);
          -[CAWindowServerRamper runRamp](v63, "runRamp");

          v64 = -[CAAccessibilityRamper initWithDisplay:]([CAAccessibilityRamper alloc], "initWithDisplay:", v12);
          -[CAAccessibilityRamper setAxScaleBegin:](v64, "setAxScaleBegin:", 0.25);
          -[CAAccessibilityRamper setAxScaleEnd:](v64, "setAxScaleEnd:", 1.0);
          -[CAWindowServerRamper setDuration:](v64, "setDuration:", 2.0);
          -[CAWindowServerRamper runRamp](v64, "runRamp");

        }
        ++v11;
      }
      while (v5 != v11);
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v95, v94, 16);
      if (!v5)
      {
LABEL_54:
        objc_autoreleasePoolPop(context);
        return;
      }
    }
  }
}

void sub_184626F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *context)
{
  objc_autoreleasePoolPop(context);
  _Unwind_Resume(a1);
}

void ___ZN2CA12WindowServer15DebugBrightnessEd_block_invoke_202(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  uint8_t buf[4];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (x_log_hook_p())
  {
    objc_msgSend((id)objc_msgSend(a3, "debugDescription"), "UTF8String");
    x_log_();
  }
  else
  {
    v4 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v6 = objc_msgSend((id)objc_msgSend(a3, "debugDescription"), "UTF8String");
      _os_log_impl(&dword_184457000, v4, OS_LOG_TYPE_DEFAULT, "Received EDRRequest notification with payload: %s", buf, 0xCu);
    }
  }
}

void ___ZN2CA12WindowServer22DebugFrameInfoCallbackEv_block_invoke()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  _QWORD v9[5];
  _BYTE v10[128];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v0 = +[CAWindowServer serverIfRunning](CAWindowServer, "serverIfRunning");
  if (v0)
  {
    v1 = v0;
    v2 = (void *)MEMORY[0x186DBE2E4]();
    v3 = (void *)objc_msgSend(v1, "displays");
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v10, 16);
    if (v4)
    {
      v5 = *(_QWORD *)v12;
      v6 = MEMORY[0x1E0C809B0];
      do
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v12 != v5)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
          if (!objc_msgSend(v8, "displayType") || objc_msgSend(v8, "displayType") == 1)
          {
            v9[0] = v6;
            v9[1] = 3221225472;
            v9[2] = ___ZN2CA12WindowServer22DebugFrameInfoCallbackEv_block_invoke_2;
            v9[3] = &unk_1E159DBD8;
            v9[4] = v8;
            objc_msgSend(v8, "setFrameInfoCallback:", v9);
          }
        }
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v10, 16);
      }
      while (v4);
    }
    objc_autoreleasePoolPop(v2);
  }
}

void sub_1846271D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

double ___ZN2CA12WindowServer22DebugFrameInfoCallbackEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  double result;
  NSObject *v5;
  int v6;
  double v7;
  int v8;
  int v9;
  double v10;
  double v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  double v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  double v21;
  __int16 v22;
  double v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (x_log_hook_p())
  {
    objc_msgSend(*(id *)(a1 + 32), "displayId");
    x_log_();
  }
  else
  {
    v5 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      v6 = objc_msgSend(*(id *)(a1 + 32), "displayId");
      v7 = *(float *)(a2 + 56);
      v8 = *(unsigned __int8 *)(a2 + 45);
      v9 = *(unsigned __int8 *)(a2 + 46);
      v10 = *(float *)(a2 + 48);
      v11 = *(float *)(a2 + 52);
      *(_DWORD *)buf = 67110400;
      v13 = v6;
      v14 = 2048;
      v15 = v7;
      v16 = 1024;
      v17 = v8;
      v18 = 1024;
      v19 = v9;
      v20 = 2048;
      v21 = v10;
      v22 = 2048;
      v23 = v11;
      _os_log_impl(&dword_184457000, v5, OS_LOG_TYPE_DEFAULT, "CAExternalFrameInfo Display %u\n    APCE:               %f\n    RTPLC Triggered:    %d\n    RTPLC Capping:      %d\n    Nominal Brightness: %f\n    Brightness Scale:   %f\n", buf, 0x32u);
    }
  }
  return result;
}

int64x2_t CA::Render::update_z_range_clip(CA::Render *this, CA::Render::LayerNode *a2)
{
  size_t v3;
  double *v4;
  double *v5;
  unsigned int v6;
  int64x2_t result;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](this);
  v4 = (double *)((char *)v12 - ((v3 + 15) & 0xFFFFFFFF0));
  bzero(v4, v3);
  v6 = CA::Render::clip_layer(this, 0, 0, v4, v5);
  if (v6)
  {
    v8 = v6;
    result.i64[0] = 0x7FF0000000000000;
    v9 = -INFINITY;
    do
    {
      v10 = *v4++;
      v11 = v10;
      if (v10 < *(double *)result.i64)
        *(double *)result.i64 = v11;
      if (v11 > v9)
        v9 = v11;
      --v8;
    }
    while (v8);
    *((_QWORD *)this + 30) = result.i64[0];
    *((double *)this + 31) = v9;
  }
  else
  {
    result = vdupq_n_s64(0xFFF0000000000000);
    *((int64x2_t *)this + 15) = result;
    *((_QWORD *)this + 3) |= 8uLL;
  }
  return result;
}

void CAColorMatrixMakeBrightness(uint64_t a1@<X8>, float a2@<S0>)
{
  *(_DWORD *)a1 = 1065353216;
  *(_QWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(float *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 20) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 28) = 0;
  *(float *)(a1 + 36) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 1065353216;
  *(float *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 72) = 1065353216;
}

double CAColorMatrixMakeContrast@<D0>(uint64_t a1@<X8>, float a2@<S0>)
{
  float v2;
  double result;

  *(float *)a1 = a2;
  *(_QWORD *)(a1 + 4) = 0;
  v2 = 0.5 - (float)(a2 * 0.5);
  *(_DWORD *)(a1 + 12) = 0;
  *(float *)(a1 + 16) = v2;
  *(_DWORD *)(a1 + 20) = 0;
  *(float *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 28) = 0;
  *(float *)(a1 + 36) = v2;
  *(_QWORD *)(a1 + 40) = 0;
  *(float *)(a1 + 48) = a2;
  *(_DWORD *)(a1 + 52) = 0;
  *(float *)(a1 + 56) = v2;
  *(_QWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(_QWORD *)&result = 1065353216;
  *(_QWORD *)(a1 + 72) = 1065353216;
  return result;
}

void CAColorMatrixMakeMultiplyColor(uint64_t a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>)
{
  *(float *)a1 = a2;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(float *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(float *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(float *)(a1 + 72) = a5;
  *(_DWORD *)(a1 + 76) = 0;
}

double CAColorMatrixMakePlusL@<D0>(uint64_t a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>)
{
  double result;

  *(_DWORD *)a1 = 1065353216;
  *(_QWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(float *)(a1 + 16) = a5 * a2;
  *(_QWORD *)(a1 + 20) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 28) = 0;
  *(float *)(a1 + 36) = a5 * a3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)&result = 1065353216;
  *(_QWORD *)(a1 + 48) = 1065353216;
  *(float *)(a1 + 56) = a5 * a4;
  *(_QWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 68) = 0x3F80000000000000;
  *(float *)(a1 + 76) = a5;
  return result;
}

double CAColorMatrixMakePlusD@<D0>(uint64_t a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>)
{
  double result;

  *(_DWORD *)a1 = 1065353216;
  *(_QWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(float *)(a1 + 16) = -(float)(a5 - (float)(a5 * a2));
  *(_QWORD *)(a1 + 20) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 28) = 0;
  *(float *)(a1 + 36) = -(float)(a5 - (float)(a5 * a3));
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)&result = 1065353216;
  *(_QWORD *)(a1 + 48) = 1065353216;
  *(float *)(a1 + 56) = -(float)(a5 - (float)(a5 * a4));
  *(_QWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 68) = 0x3F80000000000000;
  *(float *)(a1 + 76) = a5;
  return result;
}

uint64_t CA::CG::DrawOp::debug_color(CA::CG::DrawOp *this)
{
  return 4278190304;
}

uint64_t CA::CG::FillPath::compute_dod_corners(uint64_t a1, float64x2_t *a2)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  uint64_t v5;
  const double *v6;
  const double *v7;
  const double *v8;
  const double *v9;
  const double *v10;
  const double *v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  double *f64;
  float64x2x2_t v20;
  float64x2x2_t v21;

  v2 = *(float64x2_t *)(a1 + 120);
  v3 = vaddq_f64(*(float64x2_t *)(a1 + 136), v2);
  v4.f64[0] = v3.f64[0];
  v4.f64[1] = *(float64_t *)(a1 + 128);
  *a2 = v2;
  a2[1] = v4;
  v2.f64[1] = v3.f64[1];
  a2[2] = v3;
  a2[3] = v2;
  if ((*(_BYTE *)(a1 + 100) & 4) == 0)
  {
    v5 = 0;
    v6 = (const double *)(a1 + 48);
    v7 = (const double *)(a1 + 8);
    v8 = (const double *)(a1 + 32);
    v9 = (const double *)(a1 + 16);
    v10 = (const double *)(a1 + 40);
    v11 = (const double *)(a1 + 24);
    v12 = vld1q_dup_f64(v7);
    v13 = vld1q_dup_f64(v11);
    v14 = vld1q_dup_f64(v10);
    v15 = vld1q_dup_f64(v9);
    v16 = vld1q_dup_f64(v8);
    v17 = vld1q_dup_f64(v6);
    do
    {
      f64 = a2[v5].f64;
      v20 = vld2q_f64(f64);
      v21.val[0] = vmlaq_f64(vmlaq_f64(v14, v20.val[0], v12), v20.val[1], v13);
      v21.val[1] = vmlaq_f64(vmlaq_f64(v17, v20.val[0], v15), v20.val[1], v16);
      vst2q_f64(f64, v21);
      v5 += 2;
    }
    while (v5 != 4);
  }
  return 1;
}

_QWORD *CA::CG::FillPath::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  malloc_zone_t *malloc_zone;
  _QWORD *v11;
  int v12;
  CGColor *Color;
  unsigned int *v14;
  unsigned int v15;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v11 = malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
  if (v11)
  {
    v12 = *(_DWORD *)(a1 + 100) & 4;
    Color = (CGColor *)CGStyleGetColor();
    CA::CG::DrawOp::DrawOp((uint64_t)v11, a2, a1, a4, a5, Color, v12 | 0x840);
    *v11 = off_1E1591088;
    v11[18] = a1;
    v14 = (unsigned int *)(a3 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    v11[19] = a3;
    *v11 = off_1E1591FF0;
  }
  return v11;
}

uint64_t CA::CG::FillPath::debug_color(CA::CG::FillPath *this)
{
  return 2338567136;
}

float CA::OGL::PathFiller::PathFiller(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  float v10;
  float v11;
  int v12;
  int v13;
  float v14;
  float v15;
  int v16;
  int v17;
  double v18;
  uint64_t v19;
  float v20;
  float v21;
  _BOOL4 v22;
  unsigned int v23;
  int v24;
  int32x2_t *v25;
  int32x2_t v26;
  float v27;
  int64x2_t v28;
  int32x2_t v34;
  int v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64x2_t v40;
  uint64_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int32x2_t v44;
  int32x2_t v45;
  float32x2_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64x2_t v49;
  uint64_t v50;
  float v51;
  int64x2_t v52;
  int64x2_t v53;
  int32x2_t v54;
  int32x2_t v55;
  float32x2_t v56;
  float result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  v8 = a4[2];
  v9 = a4[3];
  v10 = (float)v8;
  v11 = (float)v9;
  *(float *)(a1 + 16) = (float)v8;
  *(float *)(a1 + 20) = (float)v9;
  v12 = *a4;
  v13 = a4[1];
  v14 = (float)*a4;
  v15 = (float)v13;
  *(float *)(a1 + 24) = v14;
  *(float *)(a1 + 28) = (float)v13;
  *(float *)(a1 + 32) = (float)(v12 + v8);
  *(float *)(a1 + 36) = (float)(v13 + v9);
  *(_OWORD *)(a1 + 40) = 0u;
  v16 = a4[2];
  v17 = a4[3];
  v18 = ceil((double)v16 * 0.015625);
  if (v18 >= 32.0)
    v18 = 32.0;
  v19 = (int)v18;
  v20 = (double)v17 * 0.03125;
  v21 = floorf(v20);
  v22 = v21 > 32.0 || v21 < 1.0;
  v23 = vcvtms_s32_f32(v20);
  if (v21 < 1.0 && v21 <= 32.0)
    v24 = 1;
  else
    v24 = 32;
  if (!v22)
    v24 = v23;
  *(_DWORD *)(a1 + 56) = v19;
  *(_DWORD *)(a1 + 60) = v24;
  *(_QWORD *)(a1 + 584) = a5;
  *(_QWORD *)(a1 + 592) = a6;
  *(_QWORD *)(a1 + 600) = a7;
  *(_QWORD *)(a1 + 608) = 0x20000000600;
  *(_DWORD *)(a1 + 616) = 1024;
  v25 = *(int32x2_t **)(a2 + 248);
  v26 = v25[3];
  v27 = (float)v26.i32[1];
  v28.i64[0] = v26.i32[0];
  v28.i64[1] = v26.i32[1];
  __asm { FMOV            V16.2D, #1.125 }
  v34 = vdup_lane_s32(v26, 0);
  v34.i32[0] = v25[4].i32[0];
  *(float32x2_t *)(a1 + 620) = vcvt_f32_s32(v34);
  *(float *)(a1 + 628) = v27;
  *(float32x2_t *)(a1 + 632) = vcvt_f32_f64(vdivq_f64(_Q16, vcvtq_f64_s64(v28)));
  *(_BYTE *)(a1 + 640) = 0;
  *(_BYTE *)(a1 + 641) = v17 * v16 > 2048;
  *(_BYTE *)(a1 + 664) = 0;
  v35 = (1 << v24) - 1;
  if (!a8)
    v35 = 0;
  *(_OWORD *)(a1 + 644) = 0uLL;
  if ((int)v19 >= 1)
  {
    v36 = (_DWORD *)(a1 + 456);
    v37 = v19;
    do
    {
      *(v36 - 32) = v35;
      *v36++ = 0;
      --v37;
    }
    while (v37);
  }
  if ((v19 & 0x80000000) == 0)
  {
    v38 = 0;
    v39 = (v19 + 1);
    v40 = (uint64x2_t)vdupq_n_s64(v39 - 1);
    v41 = (v39 + 1) & 0x1FFFFFFFELL;
    v42 = (int64x2_t)xmmword_18474E1C0;
    v43 = vdupq_n_s64(2uLL);
    do
    {
      v44 = vmovn_s64((int64x2_t)vcgeq_u64(v40, (uint64x2_t)v42));
      v45.i32[0] = v38;
      v45.i32[1] = v38 + 1;
      v46 = vrndm_f32(vmul_n_f32(vcvt_f32_s32(v45), v10 / (float)(int)v19));
      if ((v44.i8[0] & 1) != 0)
        *(float *)(a1 + 4 * v38 + 64) = v46.f32[0] + v14;
      if ((v44.i8[4] & 1) != 0)
        *(float *)(a1 + 4 * v38 + 68) = v46.f32[1] + v14;
      v38 += 2;
      v42 = vaddq_s64(v42, v43);
    }
    while (v41 != v38);
  }
  if ((v24 & 0x80000000) == 0)
  {
    v47 = 0;
    v48 = (v24 + 1);
    v49 = (uint64x2_t)vdupq_n_s64(v48 - 1);
    v50 = (v48 + 1) & 0x1FFFFFFFELL;
    v51 = v11 / (float)v24;
    v52 = (int64x2_t)xmmword_18474E1C0;
    v53 = vdupq_n_s64(2uLL);
    do
    {
      v54 = vmovn_s64((int64x2_t)vcgeq_u64(v49, (uint64x2_t)v52));
      v55.i32[0] = v47;
      v55.i32[1] = v47 + 1;
      v56 = vrndm_f32(vmul_n_f32(vcvt_f32_s32(v55), v51));
      if ((v54.i8[0] & 1) != 0)
        *(float *)(a1 + 4 * v47 + 196) = v56.f32[0] + v15;
      if ((v54.i8[4] & 1) != 0)
        *(float *)(a1 + 4 * v47 + 200) = v56.f32[1] + v15;
      v47 += 2;
      v52 = vaddq_s64(v52, v53);
    }
    while (v50 != v47);
  }
  *(float *)(a1 + 4 * (int)v19 + 64) = v14 + v10;
  result = *(float *)(a1 + 28) + *(float *)(a1 + 20);
  *(float *)(a1 + 4 * v24 + 196) = result;
  return result;
}

uint64_t CA::OGL::Mosaic::Delegate::aa_quad(CA::OGL::Mosaic::Delegate *this, const CA::Bounds *a2, float *a3)
{
  return (*(uint64_t (**)(CA::OGL::Mosaic::Delegate *, const CA::Bounds *, float *))(*(_QWORD *)this + 24))(this, a2, a3);
}

double CA::CG::MosaicDelegate::flush(CA::CG::MosaicDelegate **this)
{
  return CA::CG::MosaicDelegate::draw_array(this[2]);
}

void CA::CG::PathDelegate::~PathDelegate(CA::CG::MosaicDelegate **this)
{
  *this = (CA::CG::MosaicDelegate *)off_1E1592170;
  CA::CG::MosaicDelegate::draw_array(this[2]);
}

{
  *this = (CA::CG::MosaicDelegate *)off_1E1592170;
  CA::CG::MosaicDelegate::draw_array(this[2]);
  JUMPOUT(0x186DBD990);
}

void CA::CG::StrokePath::~StrokePath(CA::CG::StrokePath *this, const void *a2)
{
  *(_QWORD *)this = off_1E1591288;
  if (*((_QWORD *)this + 21))
    CGDashRelease();
  *(_QWORD *)this = off_1E1593890;
  CA::CG::Renderer::release_object(*((CA::CG::Renderer **)this + 14), a2);
  CA::CG::DrawOp::~DrawOp(this);
}

{
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1591288;
  if (*((_QWORD *)this + 21))
    CGDashRelease();
  *(_QWORD *)this = off_1E1593890;
  CA::CG::Renderer::release_object(*((CA::CG::Renderer **)this + 14), a2);
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

double *CA::CG::StrokePath::compute_dod(CA::CG::StrokePath *this, CA::Rect *a2)
{
  double v4;
  double v5;

  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 120);
  *((_OWORD *)a2 + 1) = *(_OWORD *)((char *)this + 136);
  if ((*((_BYTE *)this + 100) & 4) == 0)
    CA::Rect::apply_transform((float64x2_t *)a2, (const CGAffineTransform *)((char *)this + 8));
  v4 = CA::CG::stroke_radius((uint64_t)this + 152, *(float64x2_t *)((char *)this + 8), *(float64x2_t *)((char *)this + 24));
  return CA::BoundsImpl::inset_point((double *)a2, -v4, -v5);
}

_QWORD *CA::CG::StrokePath::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  malloc_zone_t *malloc_zone;
  _QWORD *v11;
  int v12;
  CGColor *Color;
  unsigned int *v14;
  unsigned int v15;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v11 = malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
  if (v11)
  {
    v12 = *(_DWORD *)(a1 + 100) & 4;
    Color = (CGColor *)CGStyleGetColor();
    CA::CG::DrawOp::DrawOp((uint64_t)v11, a2, a1, a4, a5, Color, v12 | 0x840);
    *v11 = off_1E1591088;
    v11[18] = a1;
    v14 = (unsigned int *)(a3 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    v11[19] = a3;
    *v11 = off_1E1592748;
  }
  return v11;
}

uint64_t CA::CG::StrokePath::debug_color(CA::CG::StrokePath *this)
{
  return 3695562720;
}

void CA::CG::StrokePath::draw_shape(CA::CG::StrokePath *this, CA::CG::Renderer *a2)
{
  CA::CG::stroke_path((uint64_t)a2, *((_QWORD *)this + 14), (uint64_t)this + 120, (uint64_t)this + 8, (uint64_t)this + 152);
}

void CA::CG::stroke_path(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_QWORD *)(a5 + 16))
    CGDashGetPattern();
  CA::CG::fill_path(a1);
}

CA::OGL::DebugRenderer *CA::OGL::DebugRenderer::DebugRenderer(CA::OGL::DebugRenderer *this, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v8;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 24) = xmmword_18474E300;
  *((_QWORD *)this + 5) = a2;
  *((_QWORD *)this + 6) = operator new[]();
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0x3C003C003C003C00;
  *((_DWORD *)this + 22) = 1056964608;
  if (CA::OGL::DebugRenderer::DebugRenderer(unsigned long)::onceToken != -1)
    dispatch_once(&CA::OGL::DebugRenderer::DebugRenderer(unsigned long)::onceToken, &__block_literal_global_4359);
  *((_QWORD *)this + 9) = CA::Render::Image::new_image((CA::Render::Image *)9, 0x400u, 8u, 1u, 0, (CGColorSpace *)CA::OGL::DebugRenderer::DebugRenderer(unsigned long)::fontData, &CA::OGL::DebugFont::kBitmapRowbytes, 0, 0, v8);
  v4 = *((_QWORD *)this + 5);
  v3 = *((_QWORD *)this + 6);
  v5 = v3 + 48 * v4;
  *((_QWORD *)this + 7) = v5;
  if (v4 >= 1)
  {
    v6 = v3;
    do
    {
      *(_QWORD *)(v6 + 8) = 0x3F80000000000000;
      v6 += 48;
    }
    while (v6 < v5);
  }
  *((_QWORD *)this + 8) = v3;
  return this;
}

void CA::OGL::DebugRenderer::~DebugRenderer(CA::OGL::DebugRenderer *this)
{
  CA::Render::Image *v2;
  uint64_t v3;

  v2 = (CA::Render::Image *)*((_QWORD *)this + 9);
  if (v2)
    CA::Render::Image::finalize(v2);
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    MEMORY[0x186DBD978](v3, 0x1000C803C748740);
}

uint64_t CA::OGL::DebugRenderer::render(uint64_t this, CA::OGL::Context *a2, const CA::Transform *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  _OWORD v17[9];
  uint64_t v18;
  _QWORD v19[2];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(this + 64);
  v4 = *(_QWORD *)(this + 48);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    v7 = this;
    v26 = 0uLL;
    v25 = 0;
    v18 = 0;
    v8 = *((_OWORD *)a3 + 1);
    v9 = *((_OWORD *)a3 + 2);
    v10 = *((_OWORD *)a3 + 3);
    v17[0] = *(_OWORD *)a3;
    v17[1] = v8;
    v17[2] = v9;
    v17[3] = v10;
    v11 = *((_OWORD *)a3 + 5);
    v12 = *((_OWORD *)a3 + 6);
    v13 = *((_OWORD *)a3 + 7);
    v17[4] = *((_OWORD *)a3 + 4);
    v17[5] = v11;
    v17[6] = v12;
    v17[7] = v13;
    v17[8] = *((_OWORD *)a3 + 8);
    LOBYTE(v18) = *((_BYTE *)a3 + 144) & 0x1F;
    CA::OGL::DebugRenderer::apply_display_rotation(*((CA::OGL::DebugRenderer **)a2 + 22), (CA::OGL::Context *)v17, a3);
    v21 = 0x3C003C003C003C00;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    v19[0] = 0;
    v20 = 0uLL;
    LODWORD(v25) = 1065353216;
    WORD2(v25) = 1025;
    v19[1] = &CA::Shape::_infinite_shape;
    v19[0] = CA::OGL::Context::set_gstate((uint64_t)a2, (uint64_t)v19);
    v14 = CA::OGL::Context::bind_image((uint64_t)a2, 0, *(uint32x2_t **)(v7 + 72), (double *)0x100, 0, 0, 0, 0, 0.0, &v26, 0);
    if (v14)
    {
      v15 = v14;
      *((_QWORD *)a2 + 100) = v17;
      ++*((_DWORD *)a2 + 60);
      v16 = *((_QWORD *)a2 + 2);
      *(_BYTE *)(v16 + 480) = 3;
      *(_BYTE *)(v16 + 481) |= 1u;
      *(_BYTE *)(*((_QWORD *)a2 + 2) + 16) = 3;
      (*(void (**)(CA::OGL::Context *, uint64_t, unint64_t, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))(*(_QWORD *)a2 + 280))(a2, 1, 0xAAAAAAAAAAAAAAABLL * (v5 >> 4), 0, *(_QWORD *)(v7 + 48), 0, 0xAAAAAAAAAAAAAAABLL * (v5 >> 4), 0);
      *(_BYTE *)(*((_QWORD *)a2 + 2) + 481) &= ~1u;
      *((_QWORD *)a2 + 100) = 0;
      ++*((_DWORD *)a2 + 60);
      (*(void (**)(CA::OGL::Context *, _OWORD *, _QWORD))(*(_QWORD *)a2 + 520))(a2, v15, 0);
    }
    *(_BYTE *)(*((_QWORD *)a2 + 2) + 16) = 0;
    return CA::OGL::Context::set_gstate((uint64_t)a2, **((_QWORD **)a2 + 29));
  }
  return this;
}

float64_t CA::OGL::DebugRenderer::apply_display_rotation(CA::OGL::DebugRenderer *this, CA::OGL::Context *a2, CA::Transform *a3)
{
  uint64_t v4;
  float64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const double *v9;
  int v10;
  int v11;
  int v12;

  if (this)
  {
    v4 = (*(uint64_t (**)(CA::OGL::DebugRenderer *, CA::OGL::Context *, CA::Transform *))(*(_QWORD *)this
                                                                                                  + 16))(this, a2, a3);
    if (v4)
    {
      v6 = v4;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 696))(v4))
        v6 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 96);
      v10 = *(unsigned __int8 *)(v6 + 656);
      v11 = *(_DWORD *)(v6 + 176);
      if (v10 == 3)
      {
        *(_OWORD *)a2 = xmmword_18474DF40;
        *((_QWORD *)a2 + 2) = 0;
        *((_QWORD *)a2 + 3) = 0;
        *((_OWORD *)a2 + 2) = xmmword_18474DF50;
        *((_OWORD *)a2 + 3) = 0u;
        *((_OWORD *)a2 + 4) = 0u;
        *((_OWORD *)a2 + 5) = xmmword_18474DF40;
        *((double *)a2 + 12) = (double)v11;
        __asm { FMOV            V0.2D, #1.0 }
        *((_OWORD *)a2 + 7) = xmmword_18474DF50;
        *((_OWORD *)a2 + 8) = _Q0;
        *((_QWORD *)a2 + 13) = 0;
        *((_QWORD *)a2 + 14) = 0;
        *((_BYTE *)a2 + 144) &= 0xE0u;
        return CA::Transform::rotate90(a2, v7, v8, v9);
      }
      v12 = *(_DWORD *)(v6 + 180);
      if (v10 == 2)
      {
        *(_OWORD *)a2 = xmmword_18474DF40;
        *((_QWORD *)a2 + 2) = 0;
        *((_QWORD *)a2 + 3) = 0;
        *((_OWORD *)a2 + 2) = xmmword_18474DF50;
        *((_OWORD *)a2 + 3) = 0u;
        *((_OWORD *)a2 + 4) = 0u;
        *((_OWORD *)a2 + 5) = xmmword_18474DF40;
        *((double *)a2 + 12) = (double)v11;
        *((double *)a2 + 13) = (double)v12;
        __asm { FMOV            V0.2D, #1.0 }
        *((_OWORD *)a2 + 7) = xmmword_18474DF50;
        *((_OWORD *)a2 + 8) = _Q0;
        *((_QWORD *)a2 + 14) = 0;
        *((_BYTE *)a2 + 144) &= 0xE0u;
        goto LABEL_12;
      }
      if (v10 == 1)
      {
        *(_OWORD *)a2 = xmmword_18474DF40;
        *((_QWORD *)a2 + 2) = 0;
        *((_QWORD *)a2 + 3) = 0;
        *((_OWORD *)a2 + 2) = xmmword_18474DF50;
        *((_OWORD *)a2 + 3) = 0u;
        *((_OWORD *)a2 + 4) = 0u;
        *((_OWORD *)a2 + 5) = xmmword_18474DF40;
        *((_QWORD *)a2 + 12) = 0;
        *((double *)a2 + 13) = (double)v12;
        __asm { FMOV            V0.2D, #1.0 }
        *((_OWORD *)a2 + 7) = xmmword_18474DF50;
        *((_OWORD *)a2 + 8) = _Q0;
        *((_QWORD *)a2 + 14) = 0;
        *((_BYTE *)a2 + 144) &= 0xE0u;
        CA::Transform::rotate90(a2, v7, v8, v9);
LABEL_12:
        CA::Transform::rotate90(a2, v7, v8, v9);
        return CA::Transform::rotate90(a2, v7, v8, v9);
      }
    }
  }
  return result;
}

double CA::OGL::DebugRenderer::visible_bounds(CA::OGL::DebugRenderer *this, CA::OGL::Context *a2, const CA::Transform *a3, uint64_t a4)
{
  int v5;
  int v6;
  int v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  double v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  double result;
  _OWORD v23[6];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  v6 = *(_DWORD *)a2;
  v5 = *((_DWORD *)a2 + 1);
  v8 = *((_DWORD *)a2 + 2);
  v7 = *((_DWORD *)a2 + 3);
  *((_DWORD *)this + 2) = v8;
  *((_DWORD *)this + 3) = v7;
  v27 = 0;
  v9 = *(_OWORD *)(a4 + 16);
  v10 = *(_OWORD *)(a4 + 32);
  v11 = *(_OWORD *)(a4 + 48);
  v23[0] = *(_OWORD *)a4;
  v23[1] = v9;
  v23[2] = v10;
  v23[3] = v11;
  v12 = *(_OWORD *)(a4 + 80);
  v13 = *(_OWORD *)(a4 + 96);
  v14 = *(_OWORD *)(a4 + 112);
  v23[4] = *(_OWORD *)(a4 + 64);
  v23[5] = v12;
  v24 = v13;
  v25 = v14;
  v26 = *(_OWORD *)(a4 + 128);
  LOBYTE(v27) = *(_BYTE *)(a4 + 144) & 0x1F;
  CA::OGL::DebugRenderer::apply_display_rotation(a3, (CA::OGL::Context *)v23, a3);
  v15 = v27;
  if ((v27 & 8) != 0)
  {
    v16 = *(double *)&v26;
    v6 = (int)(*(double *)&v26 * (double)v6);
    v5 = (int)(*(double *)&v26 * (double)v5);
    v8 = (int)(*(double *)&v26 * (double)v8);
    *(_DWORD *)this = v6;
    v7 = (int)(v16 * (double)v7);
    *((_DWORD *)this + 2) = v8;
    *((_DWORD *)this + 3) = v7;
  }
  if ((v15 & 4) != 0)
  {
    v18 = -v5;
    v5 = v6;
    v6 = v18 - v7;
    *((_DWORD *)this + 2) = v7;
    *((_DWORD *)this + 3) = v8;
    v17 = v8;
  }
  else
  {
    v17 = v7;
    v7 = v8;
  }
  if ((v15 & 2) != 0)
    v19 = -(v6 + v7);
  else
    v19 = v6;
  v20 = v5 + v17;
  if ((v15 & 1) != 0)
    v21 = -v20;
  else
    v21 = v5;
  result = *((double *)&v24 + 1) + (double)v21;
  *(_DWORD *)this = (int)(*(double *)&v24 + (double)v19);
  *((_DWORD *)this + 1) = (int)result;
  return result;
}

uint64_t CA::OGL::DebugRenderer::draw_string(uint64_t this, const char *a2, uint64_t a3)
{
  float v3;
  float v4;
  unint64_t v5;
  float v7;
  unsigned int v8;
  unsigned int v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  if (!a2)
    __assert_rtn("draw_string", "ogl-debug-renderer.cpp", 297, "text");
  v4 = *(float *)(this + 16);
  v3 = *(float *)(this + 20);
  v5 = *(_QWORD *)(this + 64);
  if (v5 + 288 * a3 > *(_QWORD *)(this + 56) || a3 == 0)
  {
    v7 = *(float *)(this + 16);
  }
  else
  {
    do
    {
      v9 = *(unsigned __int8 *)a2++;
      v8 = v9;
      if (v9 < 0x21)
      {
        switch(v8)
        {
          case 0x20u:
            v7 = *(float *)(this + 24) + v4;
            break;
          case 0xAu:
            v7 = *(float *)(this + 16);
            v3 = *(float *)(this + 20) + (float)(*(float *)(this + 28) * 1.125);
            *(float *)(this + 20) = v3;
            break;
          case 9u:
            v7 = v4 + (float)(*(float *)(this + 24) * 4.0);
            break;
          default:
            v7 = v4;
            break;
        }
      }
      else
      {
        if (v5 >= *(_QWORD *)(this + 56))
          goto LABEL_25;
        v10 = (float)(int)(v8 - 32) * 0.0068359;
        v11 = *(_QWORD *)(this + 80);
        v13 = *(float *)(this + 24);
        v12 = *(float *)(this + 28);
        *(float *)v5 = v4;
        *(float *)(v5 + 4) = v3;
        *(float *)(v5 + 16) = v10;
        *(_DWORD *)(v5 + 20) = 0;
        *(_QWORD *)(v5 + 32) = v11;
        v15 = *(_QWORD *)(this + 56);
        v14 = *(_QWORD *)(this + 64);
        *(_QWORD *)(this + 64) = v14 + 48;
        if (v14 + 48 >= v15)
          goto LABEL_25;
        v16 = v12 + v3;
        v17 = *(_QWORD *)(this + 80);
        *(float *)(v14 + 48) = v4;
        *(float *)(v14 + 52) = v16;
        *(float *)(v14 + 64) = v10;
        *(_DWORD *)(v14 + 68) = 1065353216;
        *(_QWORD *)(v14 + 80) = v17;
        v19 = *(_QWORD *)(this + 56);
        v18 = *(_QWORD *)(this + 64);
        *(_QWORD *)(this + 64) = v18 + 48;
        if (v18 + 48 >= v19)
          goto LABEL_25;
        v20 = v10 + 0.0068359;
        v7 = v13 + v4;
        v21 = *(_QWORD *)(this + 80);
        *(float *)(v18 + 48) = v13 + v4;
        *(float *)(v18 + 52) = v3;
        *(float *)(v18 + 64) = v10 + 0.0068359;
        *(_DWORD *)(v18 + 68) = 0;
        *(_QWORD *)(v18 + 80) = v21;
        v23 = *(_QWORD *)(this + 56);
        v22 = *(_QWORD *)(this + 64);
        *(_QWORD *)(this + 64) = v22 + 48;
        if (v22 + 48 >= v23)
          goto LABEL_25;
        v24 = *(_QWORD *)(this + 80);
        *(float *)(v22 + 48) = v7;
        *(float *)(v22 + 52) = v3;
        *(float *)(v22 + 64) = v20;
        *(_DWORD *)(v22 + 68) = 0;
        *(_QWORD *)(v22 + 80) = v24;
        v26 = *(_QWORD *)(this + 56);
        v25 = *(_QWORD *)(this + 64);
        *(_QWORD *)(this + 64) = v25 + 48;
        if (v25 + 48 >= v26)
          goto LABEL_25;
        v27 = *(_QWORD *)(this + 80);
        *(float *)(v25 + 48) = v4;
        *(float *)(v25 + 52) = v16;
        *(float *)(v25 + 64) = v10;
        *(_DWORD *)(v25 + 68) = 1065353216;
        *(_QWORD *)(v25 + 80) = v27;
        v29 = *(_QWORD *)(this + 56);
        v28 = *(_QWORD *)(this + 64);
        *(_QWORD *)(this + 64) = v28 + 48;
        if (v28 + 48 >= v29)
LABEL_25:
          __assert_rtn("add_vertex", "ogl-debug-renderer.cpp", 244, "_vertices_cur < _vertices_end");
        v30 = *(_QWORD *)(this + 80);
        *(float *)(v28 + 48) = v7;
        *(float *)(v28 + 52) = v16;
        *(float *)(v28 + 64) = v20;
        *(_DWORD *)(v28 + 68) = 1065353216;
        *(_QWORD *)(v28 + 80) = v30;
        v5 = *(_QWORD *)(this + 64) + 48;
        *(_QWORD *)(this + 64) = v5;
      }
      v4 = v7;
      --a3;
    }
    while (a3);
  }
  *(float *)(this + 16) = v7;
  *(float *)(this + 20) = v3;
  return this;
}

float CA::OGL::DebugRenderer::draw_bar(CA::OGL::DebugRenderer *this, float result)
{
  _QWORD *v2;
  float v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  unint64_t v22;
  float v23;
  uint64_t v24;

  v2 = (_QWORD *)*((_QWORD *)this + 8);
  if ((unint64_t)(v2 + 36) <= *((_QWORD *)this + 7))
  {
    v3 = *((float *)this + 7);
    v4 = *((_QWORD *)this + 10);
    *v2 = *((_QWORD *)this + 2);
    v2[2] = 1059586048;
    v2[4] = v4;
    v6 = *((_QWORD *)this + 7);
    v5 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v5 + 48;
    if (v5 + 48 >= v6)
      goto LABEL_9;
    v7 = *((_QWORD *)this + 10);
    v8 = *((float *)this + 5) + v3;
    *(_DWORD *)(v5 + 48) = *((_DWORD *)this + 4);
    *(float *)(v5 + 52) = v8;
    *(_QWORD *)(v5 + 64) = 0x3F8000003F280000;
    *(_QWORD *)(v5 + 80) = v7;
    v10 = *((_QWORD *)this + 7);
    v9 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v9 + 48;
    if (v9 + 48 >= v10)
      goto LABEL_9;
    v11 = *((_QWORD *)this + 10);
    v12 = *((_DWORD *)this + 5);
    *(float *)(v9 + 48) = *((float *)this + 4) + result;
    *(_DWORD *)(v9 + 52) = v12;
    *(_QWORD *)(v9 + 64) = 1059700736;
    *(_QWORD *)(v9 + 80) = v11;
    v14 = *((_QWORD *)this + 7);
    v13 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v13 + 48;
    if (v13 + 48 >= v14)
      goto LABEL_9;
    v15 = *((_QWORD *)this + 10);
    v16 = *((_DWORD *)this + 5);
    *(float *)(v13 + 48) = *((float *)this + 4) + result;
    *(_DWORD *)(v13 + 52) = v16;
    *(_QWORD *)(v13 + 64) = 1059700736;
    *(_QWORD *)(v13 + 80) = v15;
    v18 = *((_QWORD *)this + 7);
    v17 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v17 + 48;
    if (v17 + 48 >= v18)
      goto LABEL_9;
    v19 = *((_QWORD *)this + 10);
    v20 = *((float *)this + 5) + v3;
    *(_DWORD *)(v17 + 48) = *((_DWORD *)this + 4);
    *(float *)(v17 + 52) = v20;
    *(_QWORD *)(v17 + 64) = 0x3F8000003F280000;
    *(_QWORD *)(v17 + 80) = v19;
    v22 = *((_QWORD *)this + 7);
    v21 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v21 + 48;
    if (v21 + 48 >= v22)
LABEL_9:
      __assert_rtn("add_vertex", "ogl-debug-renderer.cpp", 244, "_vertices_cur < _vertices_end");
    v23 = *((float *)this + 5) + v3;
    v24 = *((_QWORD *)this + 10);
    *(float *)(v21 + 48) = *((float *)this + 4) + result;
    *(float *)(v21 + 52) = v23;
    *(_QWORD *)(v21 + 64) = 0x3F8000003F29C000;
    *(_QWORD *)(v21 + 80) = v24;
    *((_QWORD *)this + 8) += 48;
    result = *((float *)this + 4) + result;
    *((float *)this + 4) = result;
  }
  return result;
}

double CA::OGL::DebugRenderer::draw_rectangle_with_fill(uint64_t a1, float *a2, double result)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  float v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  unint64_t v28;
  float v29;
  uint64_t v30;

  v3 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(v3 + 288) <= *(_QWORD *)(a1 + 56))
  {
    v5 = *a2;
    v4 = a2[1];
    v7 = *(float *)(a1 + 16);
    v6 = *(float *)(a1 + 20);
    v8 = *(_QWORD *)(a1 + 80);
    *(float *)v3 = v7;
    *(float *)(v3 + 4) = v6;
    *(_QWORD *)(v3 + 16) = 1063141376;
    *(_QWORD *)(v3 + 32) = v8;
    v10 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v9 + 48;
    if (v9 + 48 >= v10)
      goto LABEL_9;
    v11 = v4 - v6;
    v12 = *(_QWORD *)(a1 + 80);
    v13 = *(float *)(a1 + 20) + v11;
    *(_DWORD *)(v9 + 48) = *(_DWORD *)(a1 + 16);
    *(float *)(v9 + 52) = v13;
    *(_QWORD *)(v9 + 64) = 0x3F8000003F5E4000;
    *(_QWORD *)(v9 + 80) = v12;
    v15 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v14 + 48;
    if (v14 + 48 >= v15)
      goto LABEL_9;
    v16 = v5 - v7;
    v17 = *(_QWORD *)(a1 + 80);
    v18 = *(_DWORD *)(a1 + 20);
    *(float *)(v14 + 48) = *(float *)(a1 + 16) + v16;
    *(_DWORD *)(v14 + 52) = v18;
    *(_QWORD *)(v14 + 64) = 1063256064;
    *(_QWORD *)(v14 + 80) = v17;
    v20 = *(_QWORD *)(a1 + 56);
    v19 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v19 + 48;
    if (v19 + 48 >= v20)
      goto LABEL_9;
    v21 = *(_QWORD *)(a1 + 80);
    v22 = *(_DWORD *)(a1 + 20);
    *(float *)(v19 + 48) = *(float *)(a1 + 16) + v16;
    *(_DWORD *)(v19 + 52) = v22;
    *(_QWORD *)(v19 + 64) = 1063256064;
    *(_QWORD *)(v19 + 80) = v21;
    v24 = *(_QWORD *)(a1 + 56);
    v23 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v23 + 48;
    if (v23 + 48 >= v24)
      goto LABEL_9;
    v25 = *(_QWORD *)(a1 + 80);
    v26 = *(float *)(a1 + 20) + v11;
    *(_DWORD *)(v23 + 48) = *(_DWORD *)(a1 + 16);
    *(float *)(v23 + 52) = v26;
    *(_QWORD *)(v23 + 64) = 0x3F8000003F5E4000;
    *(_QWORD *)(v23 + 80) = v25;
    v28 = *(_QWORD *)(a1 + 56);
    v27 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v27 + 48;
    if (v27 + 48 >= v28)
LABEL_9:
      __assert_rtn("add_vertex", "ogl-debug-renderer.cpp", 244, "_vertices_cur < _vertices_end");
    v29 = *(float *)(a1 + 20);
    v30 = *(_QWORD *)(a1 + 80);
    *(float *)(v27 + 48) = *(float *)(a1 + 16) + v16;
    *(float *)(v27 + 52) = v29 + v11;
    result = 0.00781250184;
    *(_QWORD *)(v27 + 64) = 4575657222471680000;
    *(_QWORD *)(v27 + 80) = v30;
    *(_QWORD *)(a1 + 64) += 48;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  }
  return result;
}

uint64_t VideoToolboxLibrary(void)
{
  uint64_t v0;
  void *v2;

  if (VideoToolboxLibraryCore(char **)::frameworkLibrary)
    return VideoToolboxLibraryCore(char **)::frameworkLibrary;
  VideoToolboxLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  v0 = VideoToolboxLibraryCore(char **)::frameworkLibrary;
  if (!VideoToolboxLibraryCore(char **)::frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

uint64_t VTSessionSetPropertyFunc(const void *a1, const __CFString *a2, const void *a3)
{
  void *v6;
  void *v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v6 = getVTSessionSetPropertySymbolLoc(void)::ptr;
  v12 = getVTSessionSetPropertySymbolLoc(void)::ptr;
  if (!getVTSessionSetPropertySymbolLoc(void)::ptr)
  {
    v7 = (void *)VideoToolboxLibrary();
    v6 = dlsym(v7, "VTSessionSetProperty");
    v10[3] = (uint64_t)v6;
    getVTSessionSetPropertySymbolLoc(void)::ptr = v6;
  }
  _Block_object_dispose(&v9, 8);
  if (!v6)
  {
    dlerror();
    abort_report_np();
    __break(1u);
  }
  return ((uint64_t (*)(const void *, const __CFString *, const void *))v6)(a1, a2, a3);
}

void sub_184628B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CA::VideoToolbox::~VideoToolbox(CFTypeRef *this)
{
  CFTypeRef v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*this)
  {
    v5 = 0;
    v6 = &v5;
    v7 = 0x2020000000;
    v3 = getVTPixelTransferSessionInvalidateSymbolLoc(void)::ptr;
    v8 = getVTPixelTransferSessionInvalidateSymbolLoc(void)::ptr;
    if (!getVTPixelTransferSessionInvalidateSymbolLoc(void)::ptr)
    {
      v4 = (void *)VideoToolboxLibrary();
      v3 = dlsym(v4, "VTPixelTransferSessionInvalidate");
      v6[3] = (uint64_t)v3;
      getVTPixelTransferSessionInvalidateSymbolLoc(void)::ptr = v3;
    }
    _Block_object_dispose(&v5, 8);
    if (!v3)
    {
      dlerror();
      abort_report_np();
    }
    ((void (*)(CFTypeRef))v3)(v2);
    CFRelease(*this);
  }
}

void sub_184628C14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CA::VideoToolbox::copy_surface(OpaqueVTPixelTransferSession **this, __IOSurface *a2, __IOSurface *a3)
{
  CVReturn v5;
  CVReturn v6;
  NSObject *v7;
  CVReturn v8;
  CVReturn v9;
  NSObject *v10;
  CVReturn v11;
  CVReturn v12;
  NSObject *v13;
  __CVBuffer *v14;
  __CVBuffer *v15;
  CVReturn v16;
  CVReturn v17;
  NSObject *v18;
  CVPixelBufferRef pixelBufferOut;
  uint8_t v20[4];
  CVReturn v21;
  uint8_t buf[8];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  pixelBufferOut = 0;
  v5 = CVPixelBufferCreateWithIOSurface(0, a2, 0, &pixelBufferOut);
  if (v5)
  {
    v6 = v5;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v7 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v6;
        _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_ERROR, "CVPixelBufferCreateWithIOSurface failed (src): %d", buf, 8u);
      }
    }
  }
  *(_QWORD *)buf = 0;
  v8 = CVPixelBufferCreateWithIOSurface(0, a3, 0, (CVPixelBufferRef *)buf);
  if (v8)
  {
    v9 = v8;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v10 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v20 = 67109120;
        v21 = v9;
        _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_ERROR, "CVPixelBufferCreateWithIOSurface failed (dst): %d", v20, 8u);
      }
    }
  }
  if (pixelBufferOut)
  {
    if (*(_QWORD *)buf)
    {
      v11 = VTPixelTransferSessionTransferImageFunc(*this, pixelBufferOut, *(__CVBuffer **)buf);
      if (v11)
      {
        v12 = v11;
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v13 = x_log_category_utilities;
          if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v20 = 67109120;
            v21 = v12;
            _os_log_impl(&dword_184457000, v13, OS_LOG_TYPE_ERROR, "VTPixelTransferSessionTransferImage failed: %d", v20, 8u);
          }
        }
      }
    }
  }
  if (*((_BYTE *)this + 8))
  {
    v14 = pixelBufferOut;
    if (pixelBufferOut)
    {
      v15 = *(__CVBuffer **)buf;
      if (*(_QWORD *)buf)
      {
        *((_BYTE *)this + 8) = 0;
        v16 = VTPixelTransferSessionTransferImageFunc(*this, v14, v15);
        if (v16)
        {
          v17 = v16;
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v18 = x_log_category_utilities;
            if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v20 = 67109120;
              v21 = v17;
              _os_log_impl(&dword_184457000, v18, OS_LOG_TYPE_ERROR, "VTPixelTransferSessionTransferImage failed: %d", v20, 8u);
            }
          }
        }
      }
    }
  }
  CVPixelBufferRelease(pixelBufferOut);
  CVPixelBufferRelease(*(CVPixelBufferRef *)buf);
}

uint64_t VTPixelTransferSessionTransferImageFunc(OpaqueVTPixelTransferSession *a1, __CVBuffer *a2, __CVBuffer *a3)
{
  void *v6;
  void *v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v6 = getVTPixelTransferSessionTransferImageSymbolLoc(void)::ptr;
  v12 = getVTPixelTransferSessionTransferImageSymbolLoc(void)::ptr;
  if (!getVTPixelTransferSessionTransferImageSymbolLoc(void)::ptr)
  {
    v7 = (void *)VideoToolboxLibrary();
    v6 = dlsym(v7, "VTPixelTransferSessionTransferImage");
    v10[3] = (uint64_t)v6;
    getVTPixelTransferSessionTransferImageSymbolLoc(void)::ptr = v6;
  }
  _Block_object_dispose(&v9, 8);
  if (!v6)
  {
    dlerror();
    abort_report_np();
    __break(1u);
  }
  return ((uint64_t (*)(OpaqueVTPixelTransferSession *, __CVBuffer *, __CVBuffer *))v6)(a1, a2, a3);
}

void sub_184628FBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sil_mgr_instance(void *a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  std::chrono::steady_clock::time_point v6;
  std::mutex *m;
  unsigned int v8;
  std::chrono::steady_clock::time_point v9;
  std::chrono::system_clock::time_point v10;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v12;
  unsigned int v13;
  BOOL v14;
  int v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  unint64_t *v29;
  std::mutex *v30;
  std::__thread_struct *v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__assoc_sub_state *v40;
  void *ptr;
  uint64_t v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  std::exception_ptr v45;
  std::thread v46;
  std::unique_lock<std::mutex> __lk;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  {
    sil_mgr_instance(void *,unsigned int)::pending_sil = 0;
  }
  if (g_sil_mgr_inst)
    return;
  v5 = sil_mgr_instance(void *,unsigned int)::pending_sil;
  if (!sil_mgr_instance(void *,unsigned int)::pending_sil)
  {
    if (MEMORY[0x1E0D897A0])
      v14 = MEMORY[0x1E0D897D0] == 0;
    else
      v14 = 1;
    if (v14
      || MEMORY[0x1E0D897E8] == 0
      || MEMORY[0x1E0D897E0] == 0
      || MEMORY[0x1E0D897F8] == 0
      || MEMORY[0x1E0D897A8] == 0
      || MEMORY[0x1E0D897B8] == 0
      || MEMORY[0x1E0D897D8] == 0)
    {
      return;
    }
    v22 = (void *)MEMORY[0x186DBE2E4]();
    v23 = (id)objc_opt_new();
    v24 = *MEMORY[0x1E0D89838];
    objc_msgSend(v23, "setObject:forKeyedSubscript:", &unk_1E15D6EA0, *MEMORY[0x1E0D89838]);
    if (CADeviceSupportsMedina::once != -1)
      dispatch_once(&CADeviceSupportsMedina::once, &__block_literal_global_227);
    if (!CADeviceSupportsMedina::medina)
    {
      if (!a1)
        goto LABEL_67;
      v25 = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithPointer:", a1);
      objc_msgSend(v23, "setObject:forKeyedSubscript:", v25, *MEMORY[0x1E0D89840]);
      v26 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a2);
      objc_msgSend(v23, "setObject:forKeyedSubscript:", v26, *MEMORY[0x1E0D89848]);
      objc_msgSend(v23, "setObject:forKeyedSubscript:", &unk_1E15D6EB8, v24);
    }
    v27 = v23;
    v28 = operator new();
    *(_QWORD *)(v28 + 8) = 0;
    v29 = (unint64_t *)(v28 + 8);
    *(_QWORD *)(v28 + 24) = 850045863;
    v30 = (std::mutex *)(v28 + 24);
    *(_QWORD *)(v28 + 16) = 0;
    *(_OWORD *)(v28 + 32) = 0u;
    *(_OWORD *)(v28 + 48) = 0u;
    *(_OWORD *)(v28 + 64) = 0u;
    *(_QWORD *)(v28 + 80) = 0;
    *(_QWORD *)(v28 + 88) = 1018212795;
    *(_OWORD *)(v28 + 96) = 0u;
    *(_OWORD *)(v28 + 112) = 0u;
    *(_OWORD *)(v28 + 124) = 0u;
    *(_QWORD *)v28 = &off_1E158A810;
    *(_QWORD *)(v28 + 152) = v23;
    v31 = (std::__thread_struct *)operator new();
    std::__thread_struct::__thread_struct(v31);
    v32 = operator new();
    *(_QWORD *)v32 = v31;
    *(_OWORD *)(v32 + 8) = xmmword_18474E310;
    *(_QWORD *)(v32 + 24) = v28;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)v32;
    v33 = pthread_create(&v46.__t_, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:nn180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>::*)(void),std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>*>>, (void *)v32);
    if (v33)
    {
      std::__throw_system_error(v33, "thread constructor failed");
      goto LABEL_89;
    }
    __lk.__m_ = 0;
    std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>::*)(void),std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>*>>::~unique_ptr[abi:nn180100]((uint64_t **)&__lk);
    std::thread::detach(&v46);
    std::thread::~thread(&v46);
    std::mutex::lock(v30);
    v34 = *(_DWORD *)(v28 + 136);
    if ((v34 & 2) != 0)
    {
      std::__throw_future_error[abi:nn180100]();
      goto LABEL_89;
    }
    do
      v35 = __ldxr(v29);
    while (__stxr(v35 + 1, v29));
    *(_DWORD *)(v28 + 136) = v34 | 2;
    std::mutex::unlock(v30);
    do
      v36 = __ldaxr(v29);
    while (__stlxr(v36 - 1, v29));
    if (!v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
    v37 = sil_mgr_instance(void *,unsigned int)::pending_sil;
    sil_mgr_instance(void *,unsigned int)::pending_sil = v28;
    if (v37)
    {
      v38 = (unint64_t *)(v37 + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
    }
LABEL_67:
    objc_autoreleasePoolPop(v22);
    return;
  }
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  m = (std::mutex *)(v5 + 24);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v5 + 24);
  *(_QWORD *)&__lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v5 + 24));
  v8 = *(_DWORD *)(v5 + 136);
  if ((v8 & 8) != 0)
  {
    v21 = 2;
    goto LABEL_72;
  }
  if ((v8 & 4) != 0)
  {
    v21 = ((v8 >> 2) & 1) == 0;
    goto LABEL_72;
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v6.__d_.__rep_)
  {
    if (v6.__d_.__rep_ > std::chrono::steady_clock::now().__d_.__rep_)
    {
      v9.__d_.__rep_ = v6.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
      if (v9.__d_.__rep_ >= 1)
      {
        std::chrono::steady_clock::now();
        v10.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v10.__d_.__rep_)
        {
          v11 = 0;
          goto LABEL_18;
        }
        if (v10.__d_.__rep_ < 1)
        {
          if ((unint64_t)v10.__d_.__rep_ >= 0xFFDF3B645A1CAC09)
            goto LABEL_17;
          v11 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v10.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            v11 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_18;
          }
LABEL_17:
          v11 = 1000 * v10.__d_.__rep_;
LABEL_18:
          if (v11 > (v9.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v12.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_21;
          }
        }
        v12.__d_.__rep_ = v11 + v9.__d_.__rep_;
LABEL_21:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(v5 + 88), &__lk, v12);
        std::chrono::steady_clock::now();
      }
      std::chrono::steady_clock::now();
    }
    v13 = *(_DWORD *)(v5 + 136);
    if ((v13 & 4) != 0)
      goto LABEL_70;
  }
  v13 = *(_DWORD *)(v5 + 136);
LABEL_70:
  v21 = ((v13 >> 2) & 1) == 0;
  if (__lk.__owns_)
  {
    m = __lk.__m_;
LABEL_72:
    std::mutex::unlock(m);
  }
  if (!v21)
  {
    v40 = (std::__assoc_sub_state *)sil_mgr_instance(void *,unsigned int)::pending_sil;
    sil_mgr_instance(void *,unsigned int)::pending_sil = 0;
    __lk.__m_ = &v40->__mut_;
    *(_QWORD *)&__lk.__owns_ = 1;
    std::mutex::lock(&v40->__mut_);
    std::__assoc_sub_state::__sub_wait(v40, &__lk);
    ptr = v40->__exception_.__ptr_;
    v46.__t_ = 0;
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&v46);
    if (!ptr)
    {
      v42 = (uint64_t)v40[1].__vftable;
      if (__lk.__owns_)
        std::mutex::unlock(__lk.__m_);
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v44 = __ldaxr(p_shared_owners);
      while (__stlxr(v44 - 1, p_shared_owners));
      if (!v44)
        ((void (*)(std::__assoc_sub_state *))v40->__on_zero_shared)(v40);
      g_sil_mgr_inst = v42;
      if (!v42)
      {
        x_log_crash("Failed to create SILManager, aborting...");
        abort();
      }
      return;
    }
    std::exception_ptr::exception_ptr((std::exception_ptr *)&v46, &v40->__exception_);
    v45.__ptr_ = &v46;
    std::rethrow_exception(v45);
LABEL_89:
    __break(1u);
  }
}

void sub_184629568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, char a11)
{
  void *v11;
  uint64_t v12;
  std::mutex *v13;
  unint64_t *v14;
  unint64_t v16;

  std::mutex::unlock(v13);
  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (!v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  objc_autoreleasePoolPop(v11);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:nn180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>::*)(void),std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>*>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  void (*v3)(_QWORD *);
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v7[2];

  v7[1] = *(uint64_t **)MEMORY[0x1E0C80C00];
  v7[0] = a1;
  v1 = std::__thread_local_data();
  v2 = (const void *)*v7[0];
  *v7[0] = 0;
  pthread_setspecific(v1->__key_, v2);
  v3 = (void (*)(_QWORD *))v7[0][1];
  v4 = v7[0][2];
  v5 = (_QWORD *)(v7[0][3] + (v4 >> 1));
  if ((v4 & 1) != 0)
    v3 = *(void (**)(_QWORD *))(*v5 + v3);
  v3(v5);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>::*)(void),std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>*>>::~unique_ptr[abi:nn180100](v7);
  return 0;
}

void sub_184629708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>::*)(void),std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>*>>::~unique_ptr[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>::*)(void),std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>*>>::~unique_ptr[abi:nn180100](uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x186DBD858]();
      MEMORY[0x186DBD990](v4, 0x20C4093837F09);
    }
    MEMORY[0x186DBD990](v2, 0xA0C40F20CD8FBLL);
  }
  return a1;
}

uint64_t std::__throw_future_error[abi:nn180100]()
{
  std::__libcpp_verbose_abort("future_error was thrown in -fno-exceptions mode");
  return std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>::~__async_assoc_state();
}

void std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>::~__async_assoc_state(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x1E0DE4FC8] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x1E0DE4FC8] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x186DBD990);
}

uint64_t std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>::__on_zero_shared(std::__assoc_sub_state *a1)
{
  std::__assoc_sub_state::wait(a1);
  return ((uint64_t (*)(std::__assoc_sub_state *))a1->~__assoc_sub_state_0)(a1);
}

void std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>::__execute(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  std::exception_ptr v5[2];

  v5[1] = *(std::exception_ptr *)MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 152);
  v3 = SILManagerCreate();
  if (v3)
    atexit((void (*)(void))cleanup_stale_indicators);

  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v5[0].__ptr_ = 0, v4 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(v5), v4))
  {
    std::__throw_future_error[abi:nn180100]();
    __break(1u);
  }
  *(_QWORD *)(a1 + 144) = v3;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock((std::mutex *)(a1 + 24));
}

void sub_184629940(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t cleanup_stale_indicators(void)
{
  if (!g_sil_mgr_inst)
    __assert_rtn("cleanup_stale_indicators", "windowserver-secure-indicators.mm", 80, "g_sil_mgr_inst");
  return SILManagerTurnOffRegions();
}

uint64_t CA::WindowServer::SILMgr::set_power(CA::WindowServer::SILMgr *this, int a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  uint8_t buf[8];
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v6 = x_log_category_secure_indicators;
    if (os_log_type_enabled((os_log_t)x_log_category_secure_indicators, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = a2;
      LOWORD(v16) = 1024;
      *(_DWORD *)((char *)&v16 + 2) = a3;
      _os_log_impl(&dword_184457000, v6, OS_LOG_TYPE_INFO, "SILMgr::set_power %u sync : %u", buf, 0xEu);
    }
  }
  if ((a2 & 1) == 0)
    CA::WindowServer::SILMgr::turn_off_all_regions(this, 1);
  v7 = *(_QWORD *)this;
  if ((a3 & 1) != 0 || !MEMORY[0x1E0D897F0])
  {
    if (*((_BYTE *)this + 123))
    {
      v11 = 0;
      v12 = &v11;
      v13 = 0x2020000000;
      v14 = 0;
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      v16 = 3221225472;
      v17 = ___ZL19_SILManagerSetPowerP10SILManagerbb_block_invoke;
      v18 = &unk_1E159DC88;
      v19 = &v11;
      v20 = v7;
      v21 = a2;
      BMMonitorBlockExecutionWithSignature();
      goto LABEL_13;
    }
    return SILManagerSetPower();
  }
  if (!*((_BYTE *)this + 123))
    return SILManagerTrySetPower();
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  v16 = 3221225472;
  v17 = ___ZL22_SILManagerTrySetPowerP10SILManagerbb_block_invoke;
  v18 = &unk_1E159DC88;
  v19 = &v11;
  v20 = v7;
  v21 = a2;
  BMMonitorBlockExecutionWithSignature();
LABEL_13:
  v8 = *((_BYTE *)v12 + 24) != 0;
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_184629BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CA::WindowServer::SILMgr::turn_off_all_regions(CA::WindowServer::SILMgr *this, uint64_t a2)
{
  uint64_t i;

  for (i = 28; i != 124; i += 24)
    *(_DWORD *)((char *)this + i) = -1082130432;
  *((_WORD *)this + 60) = 0;
  return _SILManagerTurnOffRegions(*(_QWORD *)this, 15, a2, *((unsigned __int8 *)this + 123));
}

uint64_t ___ZL22_SILManagerTrySetPowerP10SILManagerbb_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = SILManagerTrySetPower();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ___ZL19_SILManagerSetPowerP10SILManagerbb_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = SILManagerSetPower();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _SILManagerTurnOffRegions(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!a4)
    return SILManagerTurnOffRegions();
  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  BMMonitorBlockExecutionWithSignature();
  v4 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v4;
}

void sub_184629D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL25_SILManagerTurnOffRegionsP10SILManagerjbb_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = SILManagerTurnOffRegions();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t CA::WindowServer::SILMgr::swap_region_private(uint64_t *a1, unsigned int a2, unsigned int *a3, _BYTE *a4)
{
  unsigned int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  BOOL v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t result;
  int v21;
  int v22;
  const char *v23;
  NSObject *v24;
  uint32_t v25;
  uint64_t v26;
  float v27;
  int v28;
  NSObject *v29;
  float v30;
  double v31;
  double v32;
  double v33;
  int32x4_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  float v38;
  float v39;
  _BOOL8 v40;
  _BOOL4 v41;
  unsigned __int8 v42;
  unsigned int v43;
  char v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  int32x4_t v52;
  int v53;
  _BYTE buf[24];
  _BYTE v55[24];
  uint64_t *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (*((float *)a3 + 3) < 0.0)
    __assert_rtn("swap_region_private", "windowserver-secure-indicators.mm", 355, "state.opacity >= 0.0f");
  if (a2 > 3)
    return 0;
  if (MEMORY[0x1E0D897B0])
  {
    v8 = SILManagerIndicatorExtent();
    if (!v8)
    {
      if (x_log_hook_p())
        goto LABEL_25;
      v26 = x_log_category_secure_indicators;
      result = os_log_type_enabled((os_log_t)x_log_category_secure_indicators, OS_LOG_TYPE_ERROR);
      if (!(_DWORD)result)
        return result;
      v27 = *(float *)a3;
      v28 = *((unsigned __int16 *)a3 + 10);
      *(_DWORD *)buf = 67109376;
      *(float *)&buf[4] = v27;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v28;
      v23 = "Failure to query indicator extent for indicator: %u frame: %u";
      v24 = v26;
      v25 = 14;
      goto LABEL_30;
    }
  }
  else
  {
    v8 = 20;
  }
  v9 = (float)v8 * 0.5;
  v10 = *((float *)a3 + 1) - v9;
  v11 = *((float *)a3 + 2) - v9;
  *((float *)a3 + 1) = v10;
  *((float *)a3 + 2) = v11;
  v12 = roundf(v10 + (float)v8);
  v13 = roundf(v11 + (float)v8);
  v14 = v12 < (float)v8 || v13 < (float)v8;
  if (v14 || v12 >= (float)*((int *)a1 + 28) || v13 >= (float)*((int *)a1 + 29))
  {
    if (x_log_hook_p())
    {
LABEL_25:
      x_log_();
      return 0;
    }
    v19 = x_log_category_secure_indicators;
    result = os_log_type_enabled((os_log_t)x_log_category_secure_indicators, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    v21 = *((_DWORD *)a1 + 28);
    v22 = *((_DWORD *)a1 + 29);
    *(_DWORD *)buf = 134218752;
    *(double *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v13;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)v55 = v21;
    *(_WORD *)&v55[4] = 1024;
    *(_DWORD *)&v55[6] = v22;
    v23 = "Region swapped outside of display bounds [%f %f] outside of [%d %d]";
    v24 = v19;
    v25 = 34;
LABEL_30:
    _os_log_impl(&dword_184457000, v24, OS_LOG_TYPE_ERROR, v23, buf, v25);
    return 0;
  }
  v15 = a2;
  v16 = &a1[3 * a2];
  v18 = *((_DWORD *)v16 + 4);
  v17 = v16 + 2;
  if (*a3 == v18
    && *((unsigned __int16 *)a3 + 10) == WORD2(a1[3 * a2 + 4])
    && vabds_f32(v10, *((float *)&a1[3 * a2 + 2] + 1)) < 0.001
    && vabds_f32(v11, *(float *)&a1[3 * a2 + 3]) < 0.001
    && vabds_f32(*((float *)a3 + 3), *((float *)&a1[3 * a2 + 3] + 1)) < 0.001
    && vabds_f32(*((float *)a3 + 4), *(float *)&a1[3 * a2 + 4]) < 0.001)
  {
    return 1;
  }
  if (a4)
    *a4 = 1;
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v29 = x_log_category_secure_indicators;
    if (os_log_type_enabled((os_log_t)x_log_category_secure_indicators, OS_LOG_TYPE_INFO))
    {
      v30 = *(float *)a3;
      v31 = *((float *)a3 + 1);
      v32 = *((float *)a3 + 2);
      v33 = *((float *)a3 + 3);
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)&buf[4] = a2;
      *(_WORD *)&buf[8] = 1024;
      *(float *)&buf[10] = v30;
      *(_WORD *)&buf[14] = 2048;
      *(double *)&buf[16] = v31;
      *(_WORD *)v55 = 2048;
      *(double *)&v55[2] = v32;
      *(_WORD *)&v55[10] = 2048;
      *(double *)&v55[12] = v33;
      _os_log_impl(&dword_184457000, v29, OS_LOG_TYPE_INFO, "SILMgr::swap_region_private region: %u indicator %u pos: [%f %f] opacity: %f", buf, 0x2Cu);
    }
  }
  v52 = 0uLL;
  v53 = 0;
  v51 = a2;
  v34 = vrev64q_s32(*(int32x4_t *)(a3 + 1));
  v34.i64[0] = *(_QWORD *)(a3 + 1);
  HIDWORD(v51) = *a3;
  v52 = v34;
  LOWORD(v53) = *((_WORD *)a3 + 10);
  v35 = *a1;
  if (*((_BYTE *)a1 + 123))
  {
    v47 = 0;
    v48 = &v47;
    v49 = 0x2020000000;
    v50 = 0;
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZL15_SILManagerSwapP10SILManagerPK18SILManagerSwapInfob_block_invoke;
    *(_QWORD *)v55 = &unk_1E159DCB0;
    *(_QWORD *)&v55[8] = &v47;
    *(_QWORD *)&v55[16] = v35;
    v56 = &v51;
    BMMonitorBlockExecutionWithSignature();
    v36 = *((unsigned __int8 *)v48 + 24);
    _Block_object_dispose(&v47, 8);
    if (!v36)
      return 0;
    goto LABEL_39;
  }
  result = SILManagerSwap();
  if ((_DWORD)result)
  {
LABEL_39:
    v38 = *((float *)&a1[3 * v15 + 3] + 1);
    if (v38 == -1.0)
      ++*((_BYTE *)a1 + 121);
    v39 = *((float *)a3 + 3);
    v40 = v39 > 0.0;
    v41 = v38 <= 0.0;
    v42 = *((_BYTE *)a1 + 120);
    if (v41 == v40)
    {
      if (v39 > 0.0)
        ++v42;
      else
        --v42;
      *((_BYTE *)a1 + 120) = v42;
      if (v42 > 4u || (v43 = *((unsigned __int8 *)a1 + 121), v43 >= 5))
        __assert_rtn("swap_region_private", "windowserver-secure-indicators.mm", 422, "_visible_regions_count <= kSILManagerRegionCount && _active_regions_count <= kSILManagerRegionCount");
    }
    else
    {
      v43 = *((unsigned __int8 *)a1 + 121);
    }
    if (v42 > v43)
      __assert_rtn("swap_region_private", "windowserver-secure-indicators.mm", 424, "_visible_regions_count <= _active_regions_count");
    v44 = v41 ^ v40;
    v45 = a1[1];
    if (!v45)
      v44 = 1;
    if ((v44 & 1) == 0)
      (*(void (**)(uint64_t, _BOOL8, _QWORD, _QWORD, uint64_t))(v45 + 16))(v45, v40, *a3, v42, v37);
    v46 = *(_OWORD *)a3;
    *(uint64_t *)((char *)v17 + 14) = *(_QWORD *)((char *)a3 + 14);
    *(_OWORD *)v17 = v46;
    if (initialized[0] != -1)
      dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
    if (BYTE9(xmmword_1ECDC6A90))
      kdebug_trace();
    return 1;
  }
  return result;
}

void sub_18462A3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CA::WindowServer::SILMgr::turn_off_region(CA::WindowServer::SILMgr *this, unsigned int a2)
{
  NSObject *v4;
  float *v5;
  _DWORD *v6;
  float v7;
  uint64_t result;
  unsigned int v9;
  uint8_t buf[4];
  unsigned int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v4 = x_log_category_secure_indicators;
    if (os_log_type_enabled((os_log_t)x_log_category_secure_indicators, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      v11 = a2;
      _os_log_impl(&dword_184457000, v4, OS_LOG_TYPE_INFO, "Turning off region %u", buf, 8u);
    }
  }
  v5 = (float *)((char *)this + 24 * a2);
  v7 = v5[7];
  v6 = v5 + 7;
  if (v7 != 0.0)
    __assert_rtn("turn_off_region", "windowserver-secure-indicators.mm", 473, "_regions[region].opacity == 0.0f");
  result = _SILManagerTurnOffRegions(*(_QWORD *)this, (1 << a2), 0, *((unsigned __int8 *)this + 123));
  if ((_DWORD)result)
  {
    *v6 = -1082130432;
    v9 = (*((_BYTE *)this + 121))-- - 1;
    if (v9 >= 5)
      __assert_rtn("turn_off_region", "windowserver-secure-indicators.mm", 480, "_active_regions_count <= kSILManagerRegionCount");
  }
  return result;
}

uint64_t ___ZL15_SILManagerSwapP10SILManagerPK18SILManagerSwapInfob_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = SILManagerSwap();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t CAEmitterCell_setter(CA::Transaction *a1, const void *a2, int a3, unsigned __int8 *a4)
{
  CA::Transaction *v8;
  const __CFString *String;
  int v10;
  CA::AttrList *v11;
  malloc_zone_t *malloc_zone;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;

  v8 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
  if (!v8)
    v8 = (CA::Transaction *)CA::Transaction::create(a1);
  String = CAAtomGetString(a2);
  -[CA::Transaction willChangeValueForKey:](a1, "willChangeValueForKey:", String);
  v10 = *((_DWORD *)v8 + 25);
  *((_DWORD *)v8 + 25) = v10 + 1;
  if (!v10)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v11 = (CA::AttrList *)*((_QWORD *)a1 + 1);
  if (!v11)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v11 = (CA::AttrList *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x10uLL, 0x743898A5uLL);
  }
  *((_QWORD *)a1 + 1) = CA::AttrList::set(v11, a2, a3, a4);
  CA::Transaction::unlock(v8);
  v13 = (unsigned int *)*((_QWORD *)a1 + 3);
  if (v13
    && CAAtomIndexInArray(56, (uint64_t)&CAEmitterCell_setter(CAEmitterCell *,unsigned int,_CAValueType,void const*)::atoms, (int)a2) != -1)
  {
    v14 = v13 + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
    v17 = 0;
    *((_QWORD *)a1 + 3) = 0;
    while ((unsigned __int16)CAEmitterCell_setter(CAEmitterCell *,unsigned int,_CAValueType,void const*)::timing_atoms[v17] != (_DWORD)a2)
    {
      if (++v17 == 9)
        return -[CA::Transaction didChangeValueForKey:](a1, "didChangeValueForKey:", String);
    }
    CAMediaTimingInvalidate((uint64_t)a1);
  }
  return -[CA::Transaction didChangeValueForKey:](a1, "didChangeValueForKey:", String);
}

void CAEmitterCell_getter(CA::Transaction *a1, unsigned int a2, const CGAffineTransform *a3, CA::Mat4Impl *this)
{
  CA::Transaction *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  objc_class *v12;
  const __CFString *String;
  id v14;
  void *v15;
  objc_class *v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v8 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
  if (!v8)
    v8 = (CA::Transaction *)CA::Transaction::create(a1);
  v17 = 0;
  v9 = *((_DWORD *)v8 + 25);
  *((_DWORD *)v8 + 25) = v9 + 1;
  if (!v9)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v10 = *((_QWORD *)a1 + 1);
  if (!v10)
    goto LABEL_9;
  if ((CA::AttrList::get(v10, a2, a3, this) & 1) != 0)
    goto LABEL_15;
  v11 = *((_QWORD *)a1 + 1);
  if (!v11 || (CA::AttrList::get(v11, 534, (const CGAffineTransform *)1, (CA::Mat4Impl *)&v17) & 1) == 0)
  {
LABEL_9:
    v12 = (objc_class *)objc_opt_class();
    CAObject_defaultValueForAtom(v12, 534, (const CGAffineTransform *)1, (uint64_t)&v17);
  }
  if (v17 && (String = CAAtomGetString(a2), (v14 = v17) != 0))
  {
    while (1)
    {
      v15 = (void *)objc_msgSend(v14, "objectForKey:", String, v17, v18);
      if (v15)
        break;
      v14 = (id)objc_msgSend(v17, "objectForKey:", CFSTR("style"));
      v17 = v14;
      if (!v14)
        goto LABEL_14;
    }
    if (v15 == (void *)*MEMORY[0x1E0C9B0D0])
      v15 = 0;
    CAValueObjCUnbox(v15, (int)a3, (uint64_t)this);
  }
  else
  {
LABEL_14:
    v16 = (objc_class *)objc_opt_class();
    CAObject_defaultValueForAtom(v16, a2, a3, (uint64_t)this);
  }
LABEL_15:
  CA::Transaction::unlock(v8);
}

uint64_t CA::OGL::BlurFilter::empty_opaque_shape(CA::OGL::BlurFilter *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3)
{
  return 0;
}

uint64_t CA::OGL::GaussianBlurFilter::opaque_shape(CA::OGL::GaussianBlurFilter *this, CA::Render::KeyValueArray **a2, const CA::Render::Layer *a3, float64x2_t *a4)
{
  double float_key;
  double *v8;
  uint64_t result;
  float64x2_t v10;
  int8x16_t v11;
  int8x16_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  int8x16_t v16;
  float64x2_t v17;
  float64x2_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  float_key = CA::Render::KeyValueArray::get_float_key(a2[5], (const CA::Render::KeyValueArray *)0x12E, 0.0);
  v8 = CA::BoundsImpl::inset(a4->f64, float_key * 2.79999995, float_key * 2.79999995);
  v17 = 0u;
  v18 = 0u;
  result = CA::OGL::GaussianBlurFilter::get_bounds((CA::OGL::GaussianBlurFilter *)v8, (const CA::Render::Filter *)a2, a3, (Rect *)&v17);
  if ((_DWORD)result)
  {
    v10 = a4[1];
    v11 = (int8x16_t)vclezq_f64(v10);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v11, 1), v11).u64[0] & 0x8000000000000000) == 0)
    {
      v12 = (int8x16_t)vclezq_f64(v18);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v12, 1), v12).u64[0] & 0x8000000000000000) != 0
        || (v13 = vaddq_f64(*a4, v10),
            v14 = vmaxnmq_f64(*a4, v17),
            v15 = vsubq_f64(vminnmq_f64(v13, vaddq_f64(v17, v18)), v14),
            v16 = (int8x16_t)vclezq_f64(v15),
            (vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v16, 1), v16).u64[0] & 0x8000000000000000) != 0))
      {
        a4[1].f64[0] = 0.0;
        a4[1].f64[1] = 0.0;
      }
      else
      {
        *a4 = v14;
        a4[1] = v15;
      }
    }
  }
  return result;
}

uint64_t CA::OGL::BlurFilter::render(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 104))(a1, a2, a3, a4, a5, 0, a6, 0, 0);
}

uint64_t CA::OGL::VariableBlurFilter::opaque_shape(CA::OGL::VariableBlurFilter *this, const CA::Render::Filter *a2, float64x2_t *a3, CA::Rect *a4)
{
  CA::Render::KeyValueArray *v6;
  double float_key;

  v6 = (CA::Render::KeyValueArray *)*((_QWORD *)a2 + 5);
  if (!CA::Render::KeyValueArray::get_int_key(v6, (const CA::Render::KeyValueArray *)0x129, 0))
  {
    float_key = CA::Render::KeyValueArray::get_float_key(v6, (const CA::Render::KeyValueArray *)0x12E, 0.0);
    CA::BoundsImpl::inset((double *)a4, float_key * 5.5999999, float_key * 5.5999999);
  }
  return CA::BoundsImpl::intersect((uint64_t)a4, a3[4], a3[5]);
}

BOOL CA::OGL::LanczosResizeFilter::identity(CA::OGL::LanczosResizeFilter *this, const CA::Render::Filter *a2)
{
  CA::Render::KeyValueArray *v2;
  double float_key;
  double v4;
  _BOOL4 v5;

  v2 = (CA::Render::KeyValueArray *)*((_QWORD *)a2 + 5);
  float_key = CA::Render::KeyValueArray::get_float_key(v2, (const CA::Render::KeyValueArray *)0x132, 1.0);
  v4 = CA::Render::KeyValueArray::get_float_key(v2, (const CA::Render::KeyValueArray *)0x110, 1.0);
  v5 = fabs(float_key + -1.0) < 0.0001;
  return fabs(v4 + -1.0) < 0.0001 && v5;
}

uint64_t CA::OGL::LanczosResizeFilter::empty_opaque_shape(CA::OGL::LanczosResizeFilter *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3)
{
  return 0;
}

uint64_t CA::Render::FilterSubclass::is_opacity_commutative(CA::Render::FilterSubclass *this, const CA::Render::Filter *a2)
{
  return 0;
}

double CA::OGL::LanczosResizeFilter::DOD(CA::OGL::LanczosResizeFilter *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3, CA::Rect *a4)
{
  CA::Render::KeyValueArray *v5;
  double float_key;
  double v7;

  v5 = (CA::Render::KeyValueArray *)*((_QWORD *)a2 + 5);
  float_key = CA::Render::KeyValueArray::get_float_key(v5, (const CA::Render::KeyValueArray *)0x132, 1.0);
  v7 = CA::Render::KeyValueArray::get_float_key(v5, (const CA::Render::KeyValueArray *)0x110, 1.0) * float_key;
  return CA::BoundsImpl::scale((double *)a4, v7, float_key);
}

double CA::OGL::LanczosResizeFilter::opaque_shape(CA::OGL::LanczosResizeFilter *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3, CA::Rect *a4)
{
  CA::Render::KeyValueArray *v5;
  double float_key;
  double v7;

  v5 = (CA::Render::KeyValueArray *)*((_QWORD *)a2 + 5);
  float_key = CA::Render::KeyValueArray::get_float_key(v5, (const CA::Render::KeyValueArray *)0x132, 1.0);
  v7 = CA::Render::KeyValueArray::get_float_key(v5, (const CA::Render::KeyValueArray *)0x110, 1.0) * float_key;
  return CA::BoundsImpl::scale((double *)a4, v7, float_key);
}

double CA::OGL::LanczosResizeFilter::ROI(CA::OGL::LanczosResizeFilter *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3, CA::Rect *a4)
{
  CA::Render::KeyValueArray *v5;
  double float_key;
  double v7;

  v5 = (CA::Render::KeyValueArray *)*((_QWORD *)a2 + 5);
  float_key = CA::Render::KeyValueArray::get_float_key(v5, (const CA::Render::KeyValueArray *)0x132, 1.0);
  v7 = 1.0 / (CA::Render::KeyValueArray::get_float_key(v5, (const CA::Render::KeyValueArray *)0x110, 1.0) * float_key);
  return CA::BoundsImpl::scale((double *)a4, v7, 1.0 / float_key);
}

BOOL CA::OGL::LanczosResizeFilter::can_render(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return *(_QWORD *)(a5 + 16) == 0;
}

uint64_t CA::OGL::LanczosResizeFilter::render(float a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  CA::Render::KeyValueArray *v11;
  double float_key;
  double v13;
  uint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  double v21;
  uint64_t v22;
  const double *v23;
  float64x2_t v24;
  uint64_t v25;
  const double *v26;
  uint64_t result;
  double v28[2];
  int8x16_t v29[9];
  uint64_t v30;
  float64x2_t v31[4];
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a7)
  {
    v11 = *(CA::Render::KeyValueArray **)(a4 + 40);
    float_key = CA::Render::KeyValueArray::get_float_key(v11, (const CA::Render::KeyValueArray *)0x110, 1.0);
    v13 = CA::Render::KeyValueArray::get_float_key(v11, (const CA::Render::KeyValueArray *)0x132, 1.0);
    v37 = 0;
    v14 = *(_QWORD *)(a6[29] + 24);
    v15 = *(int8x16_t *)(v14 + 16);
    v16 = *(int8x16_t *)(v14 + 32);
    v17 = *(int8x16_t *)(v14 + 48);
    v31[0] = *(float64x2_t *)v14;
    v31[1] = (float64x2_t)v15;
    v31[2] = (float64x2_t)v16;
    v31[3] = (float64x2_t)v17;
    v18 = *(int8x16_t *)(v14 + 80);
    v19 = *(int8x16_t *)(v14 + 96);
    v20 = *(int8x16_t *)(v14 + 112);
    v32 = *(int8x16_t *)(v14 + 64);
    v33 = v18;
    v21 = v13 * (float)(a1 / a2);
    v34 = v19;
    v35 = v20;
    v36 = *(int8x16_t *)(v14 + 128);
    LOBYTE(v37) = *(_BYTE *)(v14 + 144) & 0x1F;
    v29[0] = (int8x16_t)v31[0];
    v29[1] = v15;
    v29[2] = v16;
    v29[3] = v17;
    v29[4] = v32;
    v29[5] = v18;
    v29[6] = v19;
    v29[7] = v20;
    v29[8] = v36;
    v30 = v37;
    CA::Transform::invert(v29, v22, v23);
    v24.f64[0] = float_key * v21;
    CA::Transform::scale(v31, v24, v21, 1.0);
    CA::Transform::concat_left((CA::Transform *)v31, (float64x2_t *)v29, v25, v26);
    v28[0] = float_key * v21;
    v28[1] = v21;
    return (*(uint64_t (**)(_QWORD *, uint64_t, double *, float64x2_t *, uint64_t, float))(*a6 + 864))(a6, a7, v28, v31, 1, 0.0);
  }
  return result;
}

uint64_t CA::OGL::LanczosResizeFilter::filter_flags()
{
  return 7;
}

uint64_t CA::OGL::LanczosResizeFilter::source_requirement(CA::OGL::LanczosResizeFilter *this, const CA::Render::Filter *a2)
{
  return 4;
}

BOOL CA::OGL::ChromaticAberrationFilter::identity(CA::OGL::ChromaticAberrationFilter *this, const CA::Render::Filter *a2)
{
  CA::Render::KeyValueArray *v2;
  double vec2_key;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (CA::Render::KeyValueArray *)*((_QWORD *)a2 + 5);
  v13 = 0;
  v14 = 0;
  vec2_key = CA::Render::KeyValueArray::get_vec2_key(v2, (const CA::Render::KeyValueArray *)0x12F, (uint64_t)&v13);
  v5 = v4;
  v13 = 0;
  v14 = 0;
  v6 = CA::Render::KeyValueArray::get_vec2_key(v2, (const CA::Render::KeyValueArray *)0x122, (uint64_t)&v13);
  v8 = v7;
  v13 = 0;
  v14 = 0;
  v9 = CA::Render::KeyValueArray::get_vec2_key(v2, (const CA::Render::KeyValueArray *)0x115, (uint64_t)&v13);
  v11 = vec2_key == 0.0;
  if (v5 != 0.0)
    v11 = 0;
  if (v6 != 0.0)
    v11 = 0;
  if (v8 != 0.0)
    v11 = 0;
  if (v9 != 0.0)
    v11 = 0;
  return v10 == 0.0 && v11;
}

uint64_t CA::OGL::ChromaticAberrationFilter::empty_opaque_shape(CA::OGL::ChromaticAberrationFilter *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3)
{
  return 0;
}

float64x2_t CA::OGL::ChromaticAberrationFilter::DOD(CA::OGL::ChromaticAberrationFilter *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3, float64x2_t *a4)
{
  CA::Render::KeyValueArray *v5;
  double vec2_key;
  double v7;
  double v8;
  double v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64_t v13;
  float32x2_t v14;
  float64x2_t result;
  float64_t v16;
  float64_t v17;
  float64_t v18;
  float64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = (CA::Render::KeyValueArray *)*((_QWORD *)a2 + 5);
  v20 = 0;
  v21 = 0;
  vec2_key = CA::Render::KeyValueArray::get_vec2_key(v5, (const CA::Render::KeyValueArray *)0x12F, (uint64_t)&v20);
  v18 = v7;
  v19 = vec2_key;
  v20 = 0;
  v21 = 0;
  v8 = CA::Render::KeyValueArray::get_vec2_key(v5, (const CA::Render::KeyValueArray *)0x122, (uint64_t)&v20);
  v16 = v9;
  v17 = v8;
  v20 = 0;
  v21 = 0;
  v10.f64[0] = CA::Render::KeyValueArray::get_vec2_key(v5, (const CA::Render::KeyValueArray *)0x115, (uint64_t)&v20);
  v11.f64[0] = v19;
  v11.f64[1] = v18;
  *(float32x2_t *)&v11.f64[0] = vcvt_f32_f64(v11);
  v12.f64[0] = v17;
  v12.f64[1] = v16;
  *(float32x2_t *)&v12.f64[0] = vcvt_f32_f64(v12);
  v10.f64[1] = v13;
  *(float32x2_t *)&v10.f64[0] = vcvt_f32_f64(v10);
  v14 = vminnm_f32(*(float32x2_t *)&v11.f64[0], vminnm_f32(*(float32x2_t *)&v12.f64[0], vminnm_f32(*(float32x2_t *)&v10.f64[0], 0)));
  result = vaddq_f64(a4[1], vcvtq_f64_f32(vadd_f32(vmaxnm_f32(*(float32x2_t *)&v11.f64[0], vmaxnm_f32(*(float32x2_t *)&v12.f64[0], vmaxnm_f32(*(float32x2_t *)&v10.f64[0], 0))), vabs_f32(v14))));
  *a4 = vaddq_f64(*a4, vcvtq_f64_f32(v14));
  a4[1] = result;
  return result;
}

void CA::OGL::ChromaticAberrationFilter::opaque_shape(CA::OGL::ChromaticAberrationFilter *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3, float64x2_t *a4)
{
  CA::Render::KeyValueArray *v5;
  double vec2_key;
  double v7;
  double v8;
  double v9;
  float64x2_t v10;
  float64_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  int8x16_t v15;
  int8x16_t v16;
  unint64_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int64x2_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int64x2_t v36;
  int8x16_t v37;
  int8x16_t v38;
  float64_t v39;
  float64_t v40;
  float64_t v41;
  float64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v5 = (CA::Render::KeyValueArray *)*((_QWORD *)a2 + 5);
  v43 = 0;
  v44 = 0;
  vec2_key = CA::Render::KeyValueArray::get_vec2_key(v5, (const CA::Render::KeyValueArray *)0x12F, (uint64_t)&v43);
  v41 = v7;
  v42 = vec2_key;
  v43 = 0;
  v44 = 0;
  v8 = CA::Render::KeyValueArray::get_vec2_key(v5, (const CA::Render::KeyValueArray *)0x122, (uint64_t)&v43);
  v39 = v9;
  v40 = v8;
  v43 = 0;
  v44 = 0;
  v10.f64[0] = CA::Render::KeyValueArray::get_vec2_key(v5, (const CA::Render::KeyValueArray *)0x115, (uint64_t)&v43);
  v13 = *a4;
  v12 = a4[1];
  v14.f64[0] = v42;
  v14.f64[1] = v41;
  v15 = (int8x16_t)vaddq_f64(*a4, vcvtq_f64_f32(vcvt_f32_f64(v14)));
  v16 = (int8x16_t)vclezq_f64(v12);
  v17 = vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v16, 1), v16).u64[0];
  if ((v17 & 0x8000000000000000) != 0)
  {
    v27 = (int8x16_t)a4[1];
  }
  else
  {
    v18.f64[0] = v40;
    v18.f64[1] = v39;
    v19 = vaddq_f64(v13, vcvtq_f64_f32(vcvt_f32_f64(v18)));
    v20 = vaddq_f64(v19, v12);
    v21 = (int8x16_t)vmaxnmq_f64((float64x2_t)v15, v19);
    v22 = (int8x16_t)vsubq_f64(vminnmq_f64(vaddq_f64((float64x2_t)v15, v12), v20), (float64x2_t)v21);
    v23 = (int8x16_t)vclezq_f64((float64x2_t)v22);
    v24 = (int8x16_t)vdupq_laneq_s64((int64x2_t)v23, 1);
    v25 = (int64x2_t)vorrq_s8(v24, v23);
    v24.i64[0] = -1;
    v26 = (int8x16_t)vdupq_lane_s64(vcgtq_s64(v25, (int64x2_t)v24).i64[0], 0);
    v15 = vbslq_s8(v26, v21, v15);
    v27 = vandq_s8(v22, v26);
  }
  v28 = (int8x16_t)vclezq_f64((float64x2_t)v27);
  v29 = (int64x2_t)vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v28, 1), v28);
  if (((v29.i64[0] | v17) & 0x8000000000000000) != 0)
  {
    v10.f64[0] = 0.0;
    v38 = vandq_s8(v27, (int8x16_t)vdupq_lane_s64(vcgtq_s64((int64x2_t)v10, v29).i64[0], 0));
  }
  else
  {
    v10.f64[1] = v11;
    v30 = vaddq_f64(v13, vcvtq_f64_f32(vcvt_f32_f64(v10)));
    v31 = vaddq_f64(v30, v12);
    v32 = (int8x16_t)vmaxnmq_f64((float64x2_t)v15, v30);
    v33 = (int8x16_t)vsubq_f64(vminnmq_f64(vaddq_f64((float64x2_t)v15, (float64x2_t)v27), v31), (float64x2_t)v32);
    v34 = (int8x16_t)vclezq_f64((float64x2_t)v33);
    v35 = (int8x16_t)vdupq_laneq_s64((int64x2_t)v34, 1);
    v36 = (int64x2_t)vorrq_s8(v35, v34);
    v35.i64[0] = -1;
    v37 = (int8x16_t)vdupq_lane_s64(vcgtq_s64(v36, (int64x2_t)v35).i64[0], 0);
    v15 = vbslq_s8(v37, v32, v15);
    v38 = vandq_s8(v33, v37);
  }
  *a4 = (float64x2_t)v15;
  a4[1] = (float64x2_t)v38;
}

double *CA::OGL::ChromaticAberrationFilter::ROI(CA::OGL::ChromaticAberrationFilter *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3, float64x2_t *a4)
{
  CA::Render::KeyValueArray *v5;
  double vec2_key;
  double v7;
  double v8;
  double v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64_t v13;
  float32x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64_t v18;
  float64_t v19;
  float64_t v20;
  float64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = (CA::Render::KeyValueArray *)*((_QWORD *)a2 + 5);
  v22 = 0;
  v23 = 0;
  vec2_key = CA::Render::KeyValueArray::get_vec2_key(v5, (const CA::Render::KeyValueArray *)0x12F, (uint64_t)&v22);
  v20 = v7;
  v21 = vec2_key;
  v22 = 0;
  v23 = 0;
  v8 = CA::Render::KeyValueArray::get_vec2_key(v5, (const CA::Render::KeyValueArray *)0x122, (uint64_t)&v22);
  v18 = v9;
  v19 = v8;
  v22 = 0;
  v23 = 0;
  v10.f64[0] = CA::Render::KeyValueArray::get_vec2_key(v5, (const CA::Render::KeyValueArray *)0x115, (uint64_t)&v22);
  v11.f64[0] = v21;
  v11.f64[1] = v20;
  *(float32x2_t *)&v11.f64[0] = vcvt_f32_f64(v11);
  v12.f64[0] = v19;
  v12.f64[1] = v18;
  *(float32x2_t *)&v12.f64[0] = vcvt_f32_f64(v12);
  v10.f64[1] = v13;
  *(float32x2_t *)&v10.f64[0] = vcvt_f32_f64(v10);
  v14 = vminnm_f32(*(float32x2_t *)&v11.f64[0], vminnm_f32(*(float32x2_t *)&v12.f64[0], vminnm_f32(*(float32x2_t *)&v10.f64[0], 0)));
  *(float32x2_t *)&v10.f64[0] = vmaxnm_f32(*(float32x2_t *)&v11.f64[0], vmaxnm_f32(*(float32x2_t *)&v12.f64[0], vmaxnm_f32(*(float32x2_t *)&v10.f64[0], 0)));
  v15 = vsubq_f64(*a4, vcvtq_f64_f32(*(float32x2_t *)&v10.f64[0]));
  v16 = vaddq_f64(a4[1], vcvtq_f64_f32(vadd_f32(*(float32x2_t *)&v10.f64[0], vabs_f32(v14))));
  *a4 = v15;
  a4[1] = v16;
  return CA::BoundsImpl::inset(a4->f64, -1.0, -1.0);
}

BOOL CA::OGL::ChromaticAberrationFilter::can_render(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return *(_QWORD *)(a5 + 16) == 0;
}

void CA::OGL::ChromaticAberrationFilter::render(float a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, CA::OGL::Context *a6, uint64_t a7)
{
  CA::Render::KeyValueArray *v11;
  double v12;
  double v13;
  double *v14;
  int32x4_t v15;
  int32x4_t v16;
  float64x2_t v17;
  float64_t v18;
  float64x2_t v19;
  uint64_t v20;
  float64x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float v26;
  double v27;
  int v28;
  int v29;
  int v30;
  int8x16_t v31;
  uint64_t v32;
  int32x2_t v33;
  int64x2_t v34;
  int8x16_t v35;
  double v36;
  double v37;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v44;
  float32x2_t v49;
  __int128 v50;
  uint64_t v51;
  int64x2_t v52;
  float v54;
  uint64_t v55;
  int64x2_t v56;
  float64x2_t v57;
  float64_t v58;
  float64_t v59;
  float64x2_t v60;
  double v61;
  float64x2_t v62;
  float64x2_t v63;
  double vec2_key;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  double v69;
  float64_t v70;
  float64x2_t *v71;
  void *v72;
  __int128 v73;
  __int128 v74;
  _QWORD v75[2];
  __int128 v76;
  float32x2_t v77;
  float32x4_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  if (a7)
  {
    v11 = *(CA::Render::KeyValueArray **)(a4 + 40);
    v71 = 0;
    v72 = 0;
    vec2_key = CA::Render::KeyValueArray::get_vec2_key(v11, (const CA::Render::KeyValueArray *)0x12F, (uint64_t)&v71);
    v59 = v12;
    v71 = 0;
    v72 = 0;
    v61 = CA::Render::KeyValueArray::get_vec2_key(v11, (const CA::Render::KeyValueArray *)0x122, (uint64_t)&v71);
    v58 = v13;
    v71 = 0;
    v72 = 0;
    v19.f64[0] = CA::Render::KeyValueArray::get_vec2_key(v11, (const CA::Render::KeyValueArray *)0x115, (uint64_t)&v71);
    v17.f64[0] = vec2_key;
    v17.f64[1] = v59;
    v65 = v17;
    v17.f64[0] = v61;
    v17.f64[1] = v58;
    v62 = v17;
    v19.f64[1] = v18;
    v20 = *(_QWORD *)(*((_QWORD *)a6 + 29) + 24);
    v69 = 0.0;
    v70 = 0.0;
    if ((*(_BYTE *)(v20 + 144) & 0x10) != 0)
    {
      v60 = v19;
      CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v20, &v70, &v69, v14);
      v19 = v60;
      *(double *)v15.i64 = v69;
      v21.f64[0] = v70;
    }
    else
    {
      v15.i64[0] = *(_QWORD *)(v20 + 128);
      v69 = *(double *)v15.i64;
      v70 = *(double *)v15.i64;
      *(_QWORD *)&v21.f64[0] = v15.i64[0];
    }
    v22 = vcvt_f32_f64(v65);
    v23 = vcvt_f32_f64(v62);
    v24 = vcvt_f32_f64(v19);
    *(_QWORD *)&v21.f64[1] = v15.i64[0];
    v25 = vcvt_f32_f64(vmulq_n_f64(v21, a2));
    v26 = a1 / a2;
    v27 = (float)(a1 / a2);
    v28 = *(_DWORD *)(a7 + 40);
    v29 = *(_DWORD *)(a7 + 44);
    if (v28 <= v29)
      v30 = *(_DWORD *)(a7 + 44);
    else
      v30 = *(_DWORD *)(a7 + 40);
    v15.i32[0] = 1073741822;
    v16.i32[0] = v30;
    v31 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v16, v15), 0);
    v33 = *(int32x2_t *)(a7 + 24);
    v32 = *(_QWORD *)(a7 + 32);
    v34.i64[0] = (int)v32;
    v34.i64[1] = SHIDWORD(v32);
    v35 = vbslq_s8(v31, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v34));
    v36 = (double)v28;
    v37 = (double)v29;
    if (v30 > 1073741822)
    {
      v36 = 1.79769313e308;
      v37 = 1.79769313e308;
    }
    v67 = (float64x2_t)v35;
    v68.f64[0] = v36;
    v68.f64[1] = v37;
    if (v26 != 1.0 && v36 < 1.79769313e308)
    {
      v67.f64[0] = v27 * *(double *)v35.i64;
      v68.f64[0] = v36 * v27;
    }
    v39 = vmul_f32(v25, v22);
    v40 = vmul_f32(v25, v23);
    v41 = vmul_f32(v25, v24);
    v42 = vcvt_f32_s32(v33);
    if (v26 != 1.0 && v37 < 1.79769313e308)
    {
      v67.f64[1] = *(double *)&v35.i64[1] * v27;
      v68.f64[1] = v37 * v27;
    }
    v44 = vminnm_f32(v39, vminnm_f32(v40, vminnm_f32(v41, 0)));
    v66 = vaddq_f64(v67, vcvtq_f64_f32(v44));
    v67 = v66;
    v63 = vaddq_f64(v68, vcvtq_f64_f32(vadd_f32(vmaxnm_f32(v39, vmaxnm_f32(v40, vmaxnm_f32(v41, 0))), vabs_f32(v44))));
    v68 = v63;
    __asm { FMOV            V1.2S, #-1.0 }
    v49 = vdiv_f32(_D1, v42);
    *(float32x2_t *)&v50 = vmul_f32(v39, v49);
    *((float32x2_t *)&v50 + 1) = vmul_f32(v40, v49);
    v76 = v50;
    v77 = vmul_f32(v41, v49);
    v51 = *(_QWORD *)(a7 + 40);
    v52.i64[0] = (int)v51;
    v52.i64[1] = SHIDWORD(v51);
    __asm { FMOV            V4.2D, #-0.5 }
    v75[0] = vdiv_f32((float32x2_t)0x3F0000003F000000, v42);
    v75[1] = vcvt_f32_f64(vdivq_f64(vaddq_f64(vcvtq_f64_s64(v52), _Q4), vcvtq_f64_f32(v42)));
    v54 = 1.0 / v26;
    if (*((_QWORD *)a6 + 31) == a7)
      *(_BYTE *)(*((_QWORD *)a6 + 2) + 17) = 38;
    else
      CA::OGL::Context::bind_surface((uint64_t)a6, a7, 0, 0, 0, 0.0);
    *(_BYTE *)(*((_QWORD *)a6 + 2) + 16) = 40;
    (*(void (**)(CA::OGL::Context *, _QWORD, uint64_t, uint64_t, __int128 *))(*(_QWORD *)a6 + 1000))(a6, 0, 2, 3, &v76);
    (*(void (**)(CA::OGL::Context *, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a6 + 1000))(a6, 1, 2, 2, v75);
    v71 = &v67;
    v72 = &CA::identity_transform;
    v73 = 0u;
    v74 = 0u;
    v55 = *(_QWORD *)(a7 + 32);
    v56.i64[0] = (int)v55;
    v56.i64[1] = SHIDWORD(v55);
    v57 = vnegq_f64(vcvtq_f64_s64(v56));
    v78 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_n_f64(v57, v66, v54)), vmlaq_n_f64(v57, vaddq_f64(v63, v66), v54));
    CA::OGL::emit_one_part_rect(a6, (uint64_t)&v71, (const CA::Transform *)&v78, 0, 0);
    if (*((_QWORD *)a6 + 31) != a7)
      CA::OGL::Context::unbind_surface(a6, a7, 0);
    *(_BYTE *)(*((_QWORD *)a6 + 2) + 16) = 0;
    *(_BYTE *)(*((_QWORD *)a6 + 2) + 19) = 0;
  }
}

uint64_t CA::OGL::ChromaticAberrationFilter::filter_flags()
{
  return 6;
}

uint64_t CA::OGL::ChromaticAberrationFilter::source_requirement(CA::OGL::ChromaticAberrationFilter *this, const CA::Render::Filter *a2)
{
  return 4;
}

float64_t CA::OGL::LayerDODFilter::DOD(CA::OGL::LayerDODFilter *this, const CA::Render::Filter *a2, float64x2_t *a3, float64x2_t *a4)
{
  float64x2_t v4;
  int64x2_t v5;
  float64x2_t v6;
  int64x2_t v7;
  float64x2_t v8;
  int64x2_t v9;
  float64x2_t v10;

  v4 = a4[1];
  v5 = vclezq_f64(v4);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v5, 1), (int8x16_t)v5).u64[0] & 0x8000000000000000) != 0
    || (v6 = a3[5],
        v7 = vclezq_f64(v6),
        (vorrq_s8((int8x16_t)vdupq_laneq_s64(v7, 1), (int8x16_t)v7).u64[0] & 0x8000000000000000) != 0)
    || (v8 = a3[4],
        v9 = vclezq_f64(vsubq_f64(vminnmq_f64(vaddq_f64(*a4, v4), vaddq_f64(v8, v6)), vmaxnmq_f64(*a4, v8))),
        (vorrq_s8((int8x16_t)vdupq_laneq_s64(v9, 1), (int8x16_t)v9).u64[0] & 0x8000000000000000) != 0))
  {
    v10.f64[0] = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  else
  {
    *a4 = v8;
    v10 = a3[5];
    a4[1] = v10;
  }
  return v10.f64[0];
}

float64_t CA::OGL::LayerDODFilter::ROI(CA::OGL::LayerDODFilter *this, const CA::Render::Filter *a2, float64x2_t *a3, float64x2_t *a4)
{
  float64x2_t v4;
  int64x2_t v5;
  float64x2_t v6;
  int64x2_t v7;
  float64x2_t v8;
  int64x2_t v9;
  float64x2_t v10;

  v4 = a4[1];
  v5 = vclezq_f64(v4);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v5, 1), (int8x16_t)v5).u64[0] & 0x8000000000000000) != 0
    || (v6 = a3[5],
        v7 = vclezq_f64(v6),
        (vorrq_s8((int8x16_t)vdupq_laneq_s64(v7, 1), (int8x16_t)v7).u64[0] & 0x8000000000000000) != 0)
    || (v8 = a3[4],
        v9 = vclezq_f64(vsubq_f64(vminnmq_f64(vaddq_f64(*a4, v4), vaddq_f64(v8, v6)), vmaxnmq_f64(*a4, v8))),
        (vorrq_s8((int8x16_t)vdupq_laneq_s64(v9, 1), (int8x16_t)v9).u64[0] & 0x8000000000000000) != 0))
  {
    v10.f64[0] = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  else
  {
    *a4 = v8;
    v10 = a3[5];
    a4[1] = v10;
  }
  return v10.f64[0];
}

uint64_t CA::OGL::LayerDODFilter::can_render()
{
  return 1;
}

uint64_t CA::OGL::LayerDODFilter::source_requirement(CA::OGL::LayerDODFilter *this, const CA::Render::Filter *a2)
{
  return 4;
}

float32x2_t *CA::OGL::get_filter_apl_params(float32x2_t *this, const CA::Render::Filter *a2, int a3, int a4)
{
  char v4;
  float32x2_t *v6;
  unsigned int *v7;
  float32_t float_key;
  float32_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32_t v15;
  char v16;

  this[2] = 0;
  *this = 0;
  this[1] = (float32x2_t)0x3E851EB83E5A1CACLL;
  this[2].i32[0] = 1057417593;
  if (a3)
    v4 = 2;
  else
    v4 = 0;
  this[2].i8[4] = v4;
  if (a2 && *((_DWORD *)a2 + 6) == 343)
  {
    v6 = this;
    v7 = (unsigned int *)*((_QWORD *)a2 + 5);
    float_key = CA::Render::KeyValueArray::get_float_key((CA::Render::KeyValueArray *)v7, (const CA::Render::KeyValueArray *)0x10E, 1.0);
    v6->f32[0] = float_key;
    v9 = CA::Render::KeyValueArray::get_float_key((CA::Render::KeyValueArray *)v7, (const CA::Render::KeyValueArray *)0x132, 0.0);
    v6->f32[1] = v9;
    v10 = CA::Render::KeyValueArray::get_int_key((CA::Render::KeyValueArray *)v7, (const CA::Render::KeyValueArray *)0x137, 0) != 0;
    this = (float32x2_t *)CA::Render::KeyValueArray::get_int_key((CA::Render::KeyValueArray *)v7, (const CA::Render::KeyValueArray *)0x11D, 1);
    if (v7)
    {
      v11 = v7[4];
      if ((_DWORD)v11)
      {
        v12 = 0;
        while (1)
        {
          v13 = *(_QWORD *)&v7[2 * v12 + 6];
          if (*(_DWORD *)(v13 + 16) == 312)
            break;
          if (v11 == ++v12)
            goto LABEL_17;
        }
        if ((v12 & 0x80000000) == 0)
        {
          v14 = *(_QWORD *)(v13 + 24);
          if (v14)
          {
            if (*(_BYTE *)(v14 + 12) == 56 && *(_DWORD *)(v14 + 16) >= 3u)
            {
              v6[1] = vcvt_f32_f64(*(float64x2_t *)(v14 + 24));
              v15 = *(double *)(v14 + 40);
              v6[2].f32[0] = v15;
            }
          }
        }
      }
    }
LABEL_17:
    if (a4)
      v16 = 16;
    else
      v16 = 0;
    v6[2].i8[4] = (4 * ((_DWORD)this != 0)) | (8 * v10) | v4 | v16 | 1;
  }
  return this;
}

float CA::OGL::edr_gain_filter_gain(CA::OGL *this, const CA::Render::Filter *a2, float a3, float a4)
{
  float v6;
  float float_key;
  float v8;
  float v9;
  float v10;

  v6 = 1.0 / a3;
  float_key = CA::Render::KeyValueArray::get_float_key(this, (const CA::Render::KeyValueArray *)0x10E, (float)(1.0 / a3));
  if (v6 <= float_key)
    float_key = v6;
  v8 = float_key + -1.0;
  if (v8 >= 0.0)
    v9 = v8;
  else
    v9 = 0.0;
  v10 = CA::Render::KeyValueArray::get_float_key(this, (const CA::Render::KeyValueArray *)0x132, 1.0);
  if (v10 > 1.0)
    v10 = 1.0;
  if (v10 < 0.0)
    v10 = 0.0;
  return powf(v10, a4) * v9;
}

uint64_t CA::OGL::render_distance_field_filter(_QWORD *a1, unsigned int *a2, int *a3, float a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  int v13;
  float float_key;
  float v15;
  float v16;
  unsigned int v17;
  double v18;
  float16x4_t *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t result;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float32x4_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  if (!a2)
    goto LABEL_14;
  v8 = a2[4];
  if (!(_DWORD)v8)
    goto LABEL_14;
  v9 = 0;
  while (1)
  {
    v10 = *(_QWORD *)&a2[2 * v9 + 6];
    if (*(_DWORD *)(v10 + 16) == 457)
      break;
    if (v8 == ++v9)
      goto LABEL_14;
  }
  if ((v9 & 0x80000000) == 0 && (v11 = *(_QWORD *)(v10 + 24)) != 0 && *(_BYTE *)(v11 + 12) == 49)
  {
    LODWORD(v27) = 1;
    v12 = (const char *)(v11 + 28);
    if (!strcmp((const char *)(v11 + 28), "stroke"))
    {
      v13 = 2;
    }
    else if (!strcmp(v12, "innerStroke"))
    {
      v13 = 3;
    }
    else
    {
      if (strcmp(v12, "outerStroke"))
        goto LABEL_16;
      v13 = 4;
    }
  }
  else
  {
LABEL_14:
    v13 = 1;
  }
  LODWORD(v27) = v13;
LABEL_16:
  BYTE4(v27) = CA::Render::KeyValueArray::get_int_key((CA::Render::KeyValueArray *)a2, (const CA::Render::KeyValueArray *)0x147, 0) != 0;
  float_key = CA::Render::KeyValueArray::get_float_key((CA::Render::KeyValueArray *)a2, (const CA::Render::KeyValueArray *)0x18B, 0.5);
  v28 = float_key;
  v15 = CA::Render::KeyValueArray::get_float_key((CA::Render::KeyValueArray *)a2, (const CA::Render::KeyValueArray *)0x15D, 0.0);
  v29 = v15;
  v16 = CA::Render::KeyValueArray::get_float_key((CA::Render::KeyValueArray *)a2, (const CA::Render::KeyValueArray *)0x1F0, 0.0);
  v30 = v16;
  *(_QWORD *)(a1[2] + 360) = &v27;
  v31 = 0uLL;
  if (CA::Render::KeyValueArray::get_float_color_key((CA::Render::KeyValueArray *)a2, (const CA::Render::KeyValueArray *)0x118, &v31))v17 = -1;
  else
    v17 = 0;
  v18 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vdup_n_s16(v17), (int8x8_t)vcvt_f16_f32(v31), (int8x8_t)0x3C003C003C003C00));
  v19 = (float16x4_t *)a1[2];
  v20 = COERCE_DOUBLE(vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16(v19[1]), vcvtq_f32_f16(*(float16x4_t *)&v18))));
  if (*(_QWORD *)&v19[1] != 0x3C003C003C003C00)
    v18 = v20;
  *(double *)&v19[1] = v18;
  v21 = a1[2];
  v22 = *(_QWORD *)(v21 + 360);
  v23 = *(_QWORD *)(v21 + 8);
  if (v23 == 0x3C003C003C003C00)
    v24 = 1;
  else
    v24 = 3;
  *(_BYTE *)(v21 + 16) = v24;
  CA::OGL::Context::bind_surface((uint64_t)a1, (uint64_t)a3, 0, a4 != 1.0, a4 != 1.0, 0.0);
  if (*(_DWORD *)v22 == 1)
    v25 = 24;
  else
    v25 = 26;
  *(_BYTE *)(a1[2] + 17) = v25 | (*(float *)(v22 + 16) > 0.0);
  v31.i64[0] = v23;
  CA::OGL::emit_filter_quads_color((uint64_t)a1, a3, (uint64_t *)&v31, a4);
  result = CA::OGL::Context::unbind_surface(a1, (uint64_t)a3, 0);
  *(_BYTE *)(a1[2] + 16) = 0;
  *(_QWORD *)(a1[2] + 360) = 0;
  return result;
}

uint64_t CA::OGL::render_hue_rotate(_QWORD *a1, CA::Render::KeyValueArray *this, int *a3, float a4)
{
  int32x2_t v7;
  uint64_t result;
  int32x2_t v9;

  *(double *)&v7 = CA::Render::KeyValueArray::get_float_key(this, (const CA::Render::KeyValueArray *)0x10F, 0.0)
                 * 0.159154937;
  *(float *)v7.i32 = *(double *)v7.i32;
  v9 = v7;
  CA::OGL::bind_filter_surface((uint64_t)a1, (uint64_t)a3, a4);
  *(_BYTE *)(a1[2] + 16) = 53;
  *(int32x4_t *)(a1[2] + 24) = vdupq_lane_s32(v9, 0);
  result = CA::OGL::emit_filter_quads((uint64_t)a1, a3, a4);
  if ((int *)a1[31] != a3)
    result = CA::OGL::Context::unbind_surface(a1, (uint64_t)a3, 0);
  *(_BYTE *)(a1[2] + 16) = 0;
  *(_BYTE *)(a1[2] + 19) = 0;
  return result;
}

uint64_t CA::OGL::render_luminance_map(uint64_t result, uint64_t a2, int *a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint32x2_t *v13;
  double float_key;
  int32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  __int32 v23;
  __int32 v24;
  int32x2_t v25[2];
  _QWORD v26[3];
  __int128 v27;
  __int128 v28;
  float32x4_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 + 16);
    if ((_DWORD)v5)
    {
      v9 = result;
      v10 = 0;
      v11 = v4 + 24;
      while (1)
      {
        v12 = *(_QWORD *)(v11 + 8 * v10);
        if (*(_DWORD *)(v12 + 16) == 283)
          break;
        if (v5 == ++v10)
          return result;
      }
      if ((v10 & 0x80000000) == 0)
      {
        result = *(_QWORD *)(v12 + 24);
        if (result)
        {
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
          if (result)
          {
            v13 = (uint32x2_t *)result;
            float_key = CA::Render::KeyValueArray::get_float_key(*(CA::Render::KeyValueArray **)(a2 + 40), (const CA::Render::KeyValueArray *)0x10E, 1.0);
            CA::OGL::bind_filter_surface(v9, (uint64_t)a3, a4);
            *(_BYTE *)(*(_QWORD *)(v9 + 16) + 16) = 50;
            v29 = 0uLL;
            result = (uint64_t)CA::OGL::Context::bind_image(v9, 1, v13, (double *)0x100, 1u, 1, 0, 0, 0.0, &v29, 0);
            if (result)
            {
              v16 = result;
              *(float *)v15.i32 = float_key;
              *(_BYTE *)(*(_QWORD *)(v9 + 16) + 20) = 4;
              *(int32x4_t *)(*(_QWORD *)(v9 + 16) + 24) = vdupq_lane_s32(v15, 0);
              v28 = 0u;
              v17 = *(_QWORD *)(*(_QWORD *)(v9 + 232) + 8);
              v26[0] = v9;
              v26[1] = v17;
              v27 = 0u;
              v26[2] = 0;
              WORD4(v27) = 256;
              CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v26);
              v25[0] = 0;
              v25[1] = 0;
              while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v26, v25))
              {
                if (*(_DWORD *)(v9 + 92))
                  v18 = 6;
                else
                  v18 = 4;
                if ((unint64_t)(*(_QWORD *)(v9 + 128) + 4) > *(_QWORD *)(v9 + 136)
                  || (v19 = *(_QWORD *)(v9 + 112)) != 0 && *(_QWORD *)(v9 + 104) + v18 > v19)
                {
                  *(_WORD *)(v9 + 816) |= 0x20u;
                  CA::OGL::Context::array_flush(v9);
                  *(_QWORD *)(v9 + 128) = 0;
                  *(_QWORD *)(v9 + 96) = v9 + 818;
                  *(_OWORD *)(v9 + 104) = xmmword_18474E060;
                }
                CA::OGL::Context::array_rect((_QWORD *)v9, (float)a3[8] * a4, (float)a3[9] * a4, (float)(a3[10] + a3[8]) * a4, (float)(a3[11] + a3[9]) * a4);
                v20 = (float)a3[10];
                v21 = (float)a3[11];
                v22 = *(_QWORD *)(v9 + 120) + 48 * *(_QWORD *)(v9 + 128);
                *(_QWORD *)(v22 - 176) = 0;
                *(float *)(v22 - 128) = v20;
                *(_DWORD *)(v22 - 124) = 0;
                *(float *)(v22 - 80) = v20;
                *(float *)(v22 - 76) = v21;
                *(_DWORD *)(v22 - 32) = 0;
                *(float *)(v22 - 28) = v21;
                v23 = v29.i32[0];
                v24 = v29.i32[2];
                *(_DWORD *)(v22 - 168) = v29.i32[0];
                *(_DWORD *)(v22 - 164) = v24;
                *(_DWORD *)(v22 - 120) = v23;
                *(_DWORD *)(v22 - 116) = v24;
                *(_DWORD *)(v22 - 72) = v23;
                *(_DWORD *)(v22 - 68) = v24;
                *(_DWORD *)(v22 - 24) = v23;
                *(_DWORD *)(v22 - 20) = v24;
              }
              *(_BYTE *)(*(_QWORD *)(v9 + 16) + 20) = 0;
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 520))(v9, v16, 1);
            }
            if (*(int **)(v9 + 248) != a3)
              result = CA::OGL::Context::unbind_surface((_QWORD *)v9, (uint64_t)a3, 0);
            *(_BYTE *)(*(_QWORD *)(v9 + 16) + 16) = 0;
            *(_BYTE *)(*(_QWORD *)(v9 + 16) + 19) = 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t CA::OGL::render_curves(_QWORD *a1, unsigned int *a2, int *a3, float a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CA::Render::Object *v10;
  float v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  CA::OGL *v18;
  float v19;
  int v20;
  int v21;
  int v22;
  int v23;
  CA::Render::Object *v24;
  int v25;
  int v26;
  CA::OGL *v27;
  CA::Render::Object *v28;
  float v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  CA::Render::Object *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t result;
  CA::OGL *v46;
  CA::Render::Object *v47;
  float v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  CA::OGL *v54;
  float v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  int v62;
  int v63;
  float v64;
  int v65;
  int v66;
  int v67;
  float v68;
  int v69;
  int v70;
  int v71;
  _DWORD v73[16];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v11 = CA::OGL::curve_horner_coeffecients(0, 0);
    v13 = v12;
    v15 = v14;
    v17 = v16;
    v18 = 0;
    v19 = v11;
    v20 = v12;
    v21 = v14;
    v22 = v16;
    v68 = v11;
    v69 = v12;
    v70 = v14;
    v71 = v16;
    goto LABEL_21;
  }
  v7 = a2[4];
  if ((_DWORD)v7)
  {
    v8 = 0;
    while (1)
    {
      v9 = *(_QWORD *)&a2[2 * v8 + 6];
      if (*(_DWORD *)(v9 + 16) == 304)
        break;
      if (v7 == ++v8)
        goto LABEL_11;
    }
    if ((v8 & 0x80000000) == 0)
    {
      v27 = *(CA::OGL **)(v9 + 24);
      goto LABEL_12;
    }
LABEL_11:
    v27 = 0;
LABEL_12:
    v29 = CA::OGL::curve_horner_coeffecients(v27, (CA::Render::Object *)a2);
    v66 = v30;
    v67 = v31;
    v64 = v29;
    v65 = v32;
    v33 = 0;
    while (1)
    {
      v34 = *(_QWORD *)&a2[2 * v33 + 6];
      if (*(_DWORD *)(v34 + 16) == 291)
        break;
      if (v7 == ++v33)
        goto LABEL_26;
    }
    if ((v33 & 0x80000000) == 0)
    {
      v46 = *(CA::OGL **)(v34 + 24);
      goto LABEL_27;
    }
LABEL_26:
    v46 = 0;
LABEL_27:
    v48 = CA::OGL::curve_horner_coeffecients(v46, v28);
    v62 = v50;
    v63 = v51;
    v61 = v48;
    v52 = 0;
    while (1)
    {
      v53 = *(_QWORD *)&a2[2 * v52 + 6];
      if (*(_DWORD *)(v53 + 16) == 278)
        break;
      if (v7 == ++v52)
        goto LABEL_34;
    }
    if ((v52 & 0x80000000) == 0)
    {
      v22 = v49;
      v54 = *(CA::OGL **)(v53 + 24);
      goto LABEL_35;
    }
LABEL_34:
    v22 = v49;
    v54 = 0;
LABEL_35:
    v55 = CA::OGL::curve_horner_coeffecients(v54, v47);
    v70 = v56;
    v71 = v57;
    v68 = v55;
    v69 = v58;
    v59 = 0;
    while (1)
    {
      v60 = *(_QWORD *)&a2[2 * v59 + 6];
      if (*(_DWORD *)(v60 + 16) == 269)
        break;
      if (v7 == ++v59)
        goto LABEL_19;
    }
    if ((v59 & 0x80000000) == 0)
    {
      v18 = *(CA::OGL **)(v60 + 24);
      goto LABEL_20;
    }
  }
  else
  {
    v64 = CA::OGL::curve_horner_coeffecients(0, (CA::Render::Object *)a2);
    v65 = v23;
    v66 = v25;
    v67 = v26;
    v61 = CA::OGL::curve_horner_coeffecients(0, v24);
    v62 = v35;
    v63 = v38;
    v22 = v37;
    v68 = CA::OGL::curve_horner_coeffecients(0, v36);
    v69 = v39;
    v70 = v40;
    v71 = v41;
  }
LABEL_19:
  v18 = 0;
LABEL_20:
  v15 = v66;
  v17 = v67;
  v11 = v64;
  v13 = v65;
  v20 = v62;
  v21 = v63;
  v19 = v61;
LABEL_21:
  *(float *)v73 = v11;
  *(float *)&v73[1] = v19;
  *(float *)&v73[2] = v68;
  v73[3] = CA::OGL::curve_horner_coeffecients(v18, v10);
  v73[4] = v13;
  v73[5] = v20;
  v73[6] = v69;
  v73[7] = v42;
  v73[8] = v15;
  v73[9] = v21;
  v73[10] = v70;
  v73[11] = v43;
  v73[12] = v17;
  v73[13] = v22;
  v73[14] = v71;
  v73[15] = v44;
  CA::OGL::bind_filter_surface((uint64_t)a1, (uint64_t)a3, a4);
  *(_BYTE *)(a1[2] + 16) = 52;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, _DWORD *))(*a1 + 1000))(a1, 0, 4, 4, v73);
  result = CA::OGL::emit_filter_quads((uint64_t)a1, a3, a4);
  if ((int *)a1[31] != a3)
    result = CA::OGL::Context::unbind_surface(a1, (uint64_t)a3, 0);
  *(_BYTE *)(a1[2] + 16) = 0;
  *(_BYTE *)(a1[2] + 19) = 0;
  return result;
}

uint64_t CA::OGL::render_compress_luminance_filter(uint64_t a1, CA::Render::KeyValueArray *this, int *a3, float a4, float a5)
{
  float float_key;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t result;
  uint64_t v19;
  _OWORD v20[4];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  float_key = CA::Render::KeyValueArray::get_float_key(this, (const CA::Render::KeyValueArray *)0x10E, 0.5);
  if (float_key > 1.0)
    float_key = 1.0;
  if (float_key >= 0.0)
    v10 = float_key;
  else
    v10 = 0.0;
  CA::OGL::bind_filter_surface(a1, (uint64_t)a3, a5);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v21 = 0;
  memset(&v20[2], 0, 32);
  memset(v20, 0, 32);
  v12 = *(_QWORD *)(a1 + 232);
  *(_OWORD *)((char *)v20 + 8) = *(_OWORD *)(v12 + 8);
  v13 = *(_QWORD *)(v12 + 32);
  *((_QWORD *)&v20[1] + 1) = *(_QWORD *)(v12 + 24);
  *(_QWORD *)&v20[2] = v13;
  *(_OWORD *)((char *)&v20[2] + 8) = *(_OWORD *)(v12 + 40);
  *((_QWORD *)&v20[3] + 1) = *(_QWORD *)(v12 + 56);
  v14 = *(_WORD *)(v12 + 68);
  LODWORD(v21) = *(_DWORD *)(v12 + 64);
  HIDWORD(v21) = v14 & 0x5FF;
  *(_QWORD *)&v20[0] = CA::OGL::Context::set_gstate(a1, (uint64_t)v20);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 54;
  v15 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v15 + 480) = 58;
  v16 = (float)(1.0 / a4) - v10;
  if (v16 <= 0.0019531)
    v17 = v10 * 511.0;
  else
    v17 = (float)((float)(1.0 / a4) * v10) / v16;
  *(float *)(v15 + 24) = v17;
  *(_QWORD *)(v15 + 32) = 0;
  *(_DWORD *)(v15 + 28) = 0;
  v19 = v11;
  CA::OGL::emit_filter_quads_color(a1, a3, &v19, a5);
  result = CA::OGL::Context::set_gstate(a1, **(_QWORD **)(a1 + 232));
  if (*(int **)(a1 + 248) != a3)
    result = CA::OGL::Context::unbind_surface((_QWORD *)a1, (uint64_t)a3, 0);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 19) = 0;
  return result;
}

void CA::OGL::render_opacity_pair_filter(_QWORD *a1, CA::Render::KeyValueArray *this, int *a3, float a4)
{
  float float_key;
  int32x2_t v8;
  int32x2_t v9;

  float_key = CA::Render::KeyValueArray::get_float_key(this, (const CA::Render::KeyValueArray *)0x10E, 0.0);
  if (float_key > 1.0)
    float_key = 1.0;
  v8.i32[0] = 0;
  if (float_key >= 0.0)
    *(float *)v8.i32 = float_key;
  if (*(float *)v8.i32 <= 0.99804)
  {
    v9 = v8;
    CA::OGL::bind_filter_surface((uint64_t)a1, (uint64_t)a3, a4);
    *(_BYTE *)(a1[2] + 16) = 62;
    *(int32x4_t *)(a1[2] + 24) = vdupq_lane_s32(v9, 0);
    CA::OGL::emit_filter_quads((uint64_t)a1, a3, a4);
    if ((int *)a1[31] != a3)
      CA::OGL::Context::unbind_surface(a1, (uint64_t)a3, 0);
    *(_BYTE *)(a1[2] + 16) = 0;
    *(_BYTE *)(a1[2] + 19) = 0;
  }
}

uint64_t CA::OGL::render_alpha_threshold_filter(_QWORD *a1, CA::Render::KeyValueArray *this, int *a3, float a4)
{
  float float_key;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t result;
  float32x4_t v13;
  float v14;
  float32x4_t v15;
  _OWORD v16[4];
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  float_key = CA::Render::KeyValueArray::get_float_key(this, (const CA::Render::KeyValueArray *)0x10E, 0.5);
  v13.i64[0] = 0;
  v13.i64[1] = 0x3F80000000000000;
  CA::Render::KeyValueArray::get_float_color_key(this, (const CA::Render::KeyValueArray *)0x118, &v13);
  v15 = v13;
  v14 = float_key;
  CA::OGL::bind_filter_surface((uint64_t)a1, (uint64_t)a3, a4);
  v18[0] = vmul_f32(*(float32x2_t *)(a1[2] + 96), (float32x2_t)0x3F0000003F000000);
  v17 = 0;
  memset(&v16[2], 0, 32);
  memset(v16, 0, 32);
  v9 = a1[29];
  *(_OWORD *)((char *)v16 + 8) = *(_OWORD *)(v9 + 8);
  v10 = *(_QWORD *)(v9 + 32);
  *((_QWORD *)&v16[1] + 1) = *(_QWORD *)(v9 + 24);
  *(_QWORD *)&v16[2] = v10;
  *(_OWORD *)((char *)&v16[2] + 8) = *(_OWORD *)(v9 + 40);
  *((_QWORD *)&v16[3] + 1) = *(_QWORD *)(v9 + 56);
  v11 = *(_WORD *)(v9 + 68);
  LODWORD(v17) = *(_DWORD *)(v9 + 64);
  HIDWORD(v17) = v11 & 0x5FF;
  *(_QWORD *)&v16[0] = CA::OGL::Context::set_gstate((uint64_t)a1, (uint64_t)v16);
  *(_BYTE *)(a1[2] + 16) = 68;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, _QWORD *))(*a1 + 1000))(a1, 0, 2, 1, v18);
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, float32x4_t *))(*a1 + 1000))(a1, 1, 4, 1, &v15);
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, float *))(*a1 + 1000))(a1, 2, 1, 1, &v14);
  CA::OGL::emit_filter_quads((uint64_t)a1, a3, a4);
  *(_BYTE *)(a1[2] + 16) = 0;
  result = CA::OGL::Context::set_gstate((uint64_t)a1, *(_QWORD *)a1[29]);
  if ((int *)a1[31] != a3)
    result = CA::OGL::Context::unbind_surface(a1, (uint64_t)a3, 0);
  *(_BYTE *)(a1[2] + 16) = 0;
  *(_BYTE *)(a1[2] + 19) = 0;
  return result;
}

uint64_t CA::OGL::render_meteor_filter(uint64_t a1, CA::Render::KeyValueArray *this, int *a3, float a4, float a5)
{
  float v9;
  float v10;
  _BOOL4 v11;
  double v12;
  float float_key;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  double v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  _OWORD v28[4];
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v9 = 1.0 / a4;
  v10 = 4.0;
  v11 = v9 > 4.0 || v9 < 1.0;
  if (v9 < 1.0 && v9 <= 4.0)
    v10 = 1.0;
  if (v11)
    v9 = v10;
  v12 = v9;
  float_key = CA::Render::KeyValueArray::get_float_key(this, (const CA::Render::KeyValueArray *)0x10E, v9);
  v14 = CA::Render::KeyValueArray::get_float_key(this, (const CA::Render::KeyValueArray *)0x132, 1.0);
  if (v14 > 1.0)
    v14 = 1.0;
  if (v14 >= 0.0)
    v15 = v14;
  else
    v15 = 0.0;
  v16 = log2f(float_key);
  v17 = exp2f(v15 * v16);
  CA::OGL::bind_filter_surface(a1, (uint64_t)a3, a5);
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v29 = 0;
  memset(&v28[2], 0, 32);
  memset(v28, 0, 32);
  v19 = *(_QWORD *)(a1 + 232);
  *(_OWORD *)((char *)v28 + 8) = *(_OWORD *)(v19 + 8);
  v20 = *(_QWORD *)(v19 + 32);
  *((_QWORD *)&v28[1] + 1) = *(_QWORD *)(v19 + 24);
  *(_QWORD *)&v28[2] = v20;
  *(_OWORD *)((char *)&v28[2] + 8) = *(_OWORD *)(v19 + 40);
  *((_QWORD *)&v28[3] + 1) = *(_QWORD *)(v19 + 56);
  v21 = *(_WORD *)(v19 + 68);
  LODWORD(v29) = *(_DWORD *)(v19 + 64);
  HIDWORD(v29) = v21 & 0x5FF;
  *(_QWORD *)&v28[0] = CA::OGL::Context::set_gstate(a1, (uint64_t)v28);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 63;
  v22 = v17 * 0.333333333 + -0.333333333;
  if (v22 >= v12 * 0.487804878 + -0.487804878)
    v22 = v12 * 0.487804878 + -0.487804878;
  v23 = v22;
  v24 = powf(3.2185, 1.0 / *(float *)(a1 + 152));
  v25 = *(_QWORD *)(a1 + 16);
  *(float *)(v25 + 24) = v23;
  *(float *)(v25 + 28) = v24;
  *(_QWORD *)(v25 + 32) = 0x3F80000000000000;
  v27 = v18;
  CA::OGL::emit_filter_quads_color(a1, a3, &v27, a5);
  result = CA::OGL::Context::set_gstate(a1, **(_QWORD **)(a1 + 232));
  if (*(int **)(a1 + 248) != a3)
    result = CA::OGL::Context::unbind_surface((_QWORD *)a1, (uint64_t)a3, 0);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 19) = 0;
  return result;
}

uint64_t CA::OGL::render_srl_filter(uint64_t a1, CA::Render::KeyValueArray *this, int *a3, float a4)
{
  float float_key;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _OWORD v15[4];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  float_key = CA::Render::KeyValueArray::get_float_key(this, (const CA::Render::KeyValueArray *)0x10E, 0.5);
  CA::OGL::bind_filter_surface(a1, (uint64_t)a3, a4);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v16 = 0;
  memset(&v15[2], 0, 32);
  memset(v15, 0, 32);
  v9 = *(_QWORD *)(a1 + 232);
  *(_OWORD *)((char *)v15 + 8) = *(_OWORD *)(v9 + 8);
  v10 = *(_QWORD *)(v9 + 32);
  *((_QWORD *)&v15[1] + 1) = *(_QWORD *)(v9 + 24);
  *(_QWORD *)&v15[2] = v10;
  *(_OWORD *)((char *)&v15[2] + 8) = *(_OWORD *)(v9 + 40);
  *((_QWORD *)&v15[3] + 1) = *(_QWORD *)(v9 + 56);
  v11 = *(_WORD *)(v9 + 68);
  LODWORD(v16) = *(_DWORD *)(v9 + 64);
  HIDWORD(v16) = v11 & 0x5FF;
  v14 = v8;
  *(_QWORD *)&v15[0] = CA::OGL::Context::set_gstate(a1, (uint64_t)v15);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 64;
  v12 = *(_QWORD *)(a1 + 16);
  *(float *)(v12 + 24) = float_key;
  *(_QWORD *)(v12 + 32) = 0;
  *(_DWORD *)(v12 + 28) = 0;
  CA::OGL::emit_filter_quads_color(a1, a3, &v14, a4);
  result = CA::OGL::Context::set_gstate(a1, **(_QWORD **)(a1 + 232));
  if (*(int **)(a1 + 248) != a3)
    result = CA::OGL::Context::unbind_surface((_QWORD *)a1, (uint64_t)a3, 0);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 19) = 0;
  return result;
}

uint64_t CA::OGL::render_edr_gain_filter(uint64_t a1, CA::OGL *this, int *a3, float a4, float a5)
{
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  float v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v8 = CA::OGL::edr_gain_filter_gain(this, this, a4, *(float *)(a1 + 152));
  CA::OGL::bind_filter_surface(a1, (uint64_t)a3, a5);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v18 = 0;
  memset(&v17[2], 0, 32);
  memset(v17, 0, 32);
  v10 = *(_QWORD *)(a1 + 232);
  *(_OWORD *)((char *)v17 + 8) = *(_OWORD *)(v10 + 8);
  v11 = *(_QWORD *)(v10 + 32);
  *((_QWORD *)&v17[1] + 1) = *(_QWORD *)(v10 + 24);
  *(_QWORD *)&v17[2] = v11;
  *(_OWORD *)((char *)&v17[2] + 8) = *(_OWORD *)(v10 + 40);
  *((_QWORD *)&v17[3] + 1) = *(_QWORD *)(v10 + 56);
  v12 = *(_WORD *)(v10 + 68);
  LODWORD(v18) = *(_DWORD *)(v10 + 64);
  HIDWORD(v18) = v12 & 0x5FF;
  v16 = v9;
  *(_QWORD *)&v17[0] = CA::OGL::Context::set_gstate(a1, (uint64_t)v17);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 65;
  v13 = *(float *)(a1 + 152);
  v14 = *(_QWORD *)(a1 + 16);
  *(float *)(v14 + 24) = v8;
  *(float *)(v14 + 28) = v13;
  *(float *)(v14 + 32) = 1.0 / v13;
  *(_DWORD *)(v14 + 36) = 0;
  CA::OGL::emit_filter_quads_color(a1, a3, &v16, a5);
  result = CA::OGL::Context::set_gstate(a1, **(_QWORD **)(a1 + 232));
  if (*(int **)(a1 + 248) != a3)
    result = CA::OGL::Context::unbind_surface((_QWORD *)a1, (uint64_t)a3, 0);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 19) = 0;
  return result;
}

uint64_t CA::OGL::render_edr_gain_multiply_filter(uint64_t a1, CA::OGL *this, int *a3, float a4, float a5)
{
  float v8;
  uint64_t v9;
  int32x2_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t result;
  int32x2_t v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v8 = CA::OGL::edr_gain_filter_gain(this, this, a4, *(float *)(a1 + 152));
  CA::OGL::bind_filter_surface(a1, (uint64_t)a3, a5);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v18 = 0;
  memset(&v17[2], 0, 32);
  memset(v17, 0, 32);
  *(float *)v10.i32 = powf(v8 + 1.0, 1.0 / *(float *)(a1 + 152));
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 232);
  *(_OWORD *)((char *)v17 + 8) = *(_OWORD *)(v11 + 8);
  v12 = *(_QWORD *)(v11 + 32);
  *((_QWORD *)&v17[1] + 1) = *(_QWORD *)(v11 + 24);
  *(_QWORD *)&v17[2] = v12;
  *(_OWORD *)((char *)&v17[2] + 8) = *(_OWORD *)(v11 + 40);
  *((_QWORD *)&v17[3] + 1) = *(_QWORD *)(v11 + 56);
  v13 = *(_WORD *)(v11 + 68);
  LODWORD(v18) = *(_DWORD *)(v11 + 64);
  HIDWORD(v18) = v13 & 0x5FF;
  v16 = v9;
  *(_QWORD *)&v17[0] = CA::OGL::Context::set_gstate(a1, (uint64_t)v17);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 66;
  *(int32x4_t *)(*(_QWORD *)(a1 + 16) + 24) = vdupq_lane_s32(v15, 0);
  CA::OGL::emit_filter_quads_color(a1, a3, &v16, a5);
  result = CA::OGL::Context::set_gstate(a1, **(_QWORD **)(a1 + 232));
  if (*(int **)(a1 + 248) != a3)
    result = CA::OGL::Context::unbind_surface((_QWORD *)a1, (uint64_t)a3, 0);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 19) = 0;
  return result;
}

void CA::OGL::render_3d_lut_filter(_QWORD *a1, uint64_t a2, int *a3, float a4)
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float float_key;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int32x2_t v21;
  float v22;
  float32x2_t *v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  NSObject *v31;
  uint32_t v32;
  _DWORD *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint8_t buf[4];
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned int **)(a2 + 40);
  if (!v7)
    goto LABEL_12;
  v8 = v7[4];
  if (!(_DWORD)v8)
    goto LABEL_12;
  v10 = 0;
  while (1)
  {
    v11 = *(_QWORD *)&v7[2 * v10 + 6];
    if (*(_DWORD *)(v11 + 16) == 312)
      break;
    if (v8 == ++v10)
      goto LABEL_12;
  }
  if ((v10 & 0x80000000) == 0 && (v12 = *(_QWORD *)(v11 + 24)) != 0 && *(_BYTE *)(v12 + 12) == 56)
  {
    v13 = (*(uint64_t (**)(_QWORD *))(*a1 + 544))(a1);
    v7 = *(unsigned int **)(a2 + 40);
    float_key = CA::Render::KeyValueArray::get_float_key((CA::Render::KeyValueArray *)v7, (const CA::Render::KeyValueArray *)0x132, 1.0);
    if (v13)
    {
      v15 = 0.0;
LABEL_23:
      CA::OGL::bind_filter_surface((uint64_t)a1, (uint64_t)a3, a4);
      *(_BYTE *)(a1[2] + 16) = 100;
      v20 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 560))(a1, 1, v13);
      v22 = 1.0;
      if (v15 <= 1.0)
        v22 = v15;
      v23 = (float32x2_t *)a1[2];
      *(float *)v21.i32 = (float)*(unsigned int *)(v13 + 16);
      v23[3] = vdiv_f32((float32x2_t)(COERCE_UNSIGNED_INT((float)(*(float *)v21.i32 + -1.0) * float_key) | 0x3F00000000000000), (float32x2_t)vdup_lane_s32(v21, 0));
      if (v22 >= 0.0)
        v24 = v22;
      else
        v24 = 0.0;
      v23[4].f32[0] = v24;
      v23[4].i32[1] = 0;
      CA::OGL::emit_filter_quads((uint64_t)a1, a3, a4);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 520))(a1, v20, 1);
      if ((int *)a1[31] != a3)
        CA::OGL::Context::unbind_surface(a1, (uint64_t)a3, 0);
      *(_BYTE *)(a1[2] + 16) = 0;
      *(_BYTE *)(a1[2] + 19) = 0;
      return;
    }
  }
  else
  {
LABEL_12:
    float_key = CA::Render::KeyValueArray::get_float_key((CA::Render::KeyValueArray *)v7, (const CA::Render::KeyValueArray *)0x132, 1.0);
  }
  if (v7)
  {
    v16 = v7[4];
    if ((_DWORD)v16)
    {
      v17 = 0;
      while (1)
      {
        v18 = *(_QWORD *)&v7[2 * v17 + 6];
        if (*(_DWORD *)(v18 + 16) == 283)
          break;
        if (v16 == ++v17)
          return;
      }
      if ((v17 & 0x80000000) == 0)
      {
        v19 = *(_QWORD *)(v18 + 24);
        if (v19)
        {
          if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v19 + 80))(*(_QWORD *)(v18 + 24)))
          {
            v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 80))(v19);
            v15 = 0.0;
            if (*(_DWORD *)(v13 + 20) == *(_DWORD *)(v13 + 16) * *(_DWORD *)(v13 + 16))
              goto LABEL_23;
            if (!x_log_hook_p())
            {
              v27 = x_log_category_ogl;
              if (!os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_ERROR))
                return;
              v28 = *(_DWORD *)(v13 + 16);
              v29 = *(_DWORD *)(v13 + 20);
              *(_DWORD *)buf = 67109376;
              v42 = v28;
              v43 = 1024;
              v44 = v29;
              v30 = "Invalid 3D lut image %ux%u";
              v31 = v27;
              v32 = 14;
LABEL_55:
              _os_log_impl(&dword_184457000, v31, OS_LOG_TYPE_ERROR, v30, buf, v32);
              return;
            }
          }
          else
          {
            if (*(_BYTE *)(v19 + 12) != 26)
              return;
            v25 = *(_QWORD *)(v19 + 24);
            if (v25)
              v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 80))(v25);
            else
              v26 = 0;
            v33 = *(_DWORD **)(v19 + 32);
            if (v33)
              v33 = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v33 + 80))(v33);
            if (v26)
            {
              v35 = *(_DWORD *)(v26 + 16);
              v34 = *(_DWORD *)(v26 + 20);
            }
            else
            {
              v34 = 0;
              v35 = 0;
            }
            if (v33)
            {
              v36 = v33[4];
              v37 = v33[5];
              if (v26 && v34 == v35 * v35 && v35 == v36 && v37 == v36 * v36)
              {
                v38 = *(double *)(v19 + 48);
                v39 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 552))(a1, v19, 3);
                if (!v39)
                  return;
                v13 = v39;
                v15 = v38;
                goto LABEL_23;
              }
            }
            else
            {
              v36 = 0;
              v37 = 0;
            }
            if (!x_log_hook_p())
            {
              v40 = x_log_category_ogl;
              if (!os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_ERROR))
                return;
              *(_DWORD *)buf = 67109888;
              v42 = v35;
              v43 = 1024;
              v44 = v34;
              v45 = 1024;
              v46 = v36;
              v47 = 1024;
              v48 = v37;
              v30 = "Invalid 3D lut images %ux%u %ux%u";
              v31 = v40;
              v32 = 26;
              goto LABEL_55;
            }
          }
          x_log_();
        }
      }
    }
  }
}

uint64_t CA::OGL::render_vibrant_filter(_QWORD *a1, uint64_t a2, int *a3, float a4)
{
  int float_color_key;
  int v9;
  int int_key;
  char v11;
  float v12;
  unsigned int v13;
  unsigned int v19;
  uint64_t result;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  float v24;
  int8x16_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v25 = 0uLL;
  float_color_key = CA::Render::KeyValueArray::get_float_color_key(*(CA::Render::KeyValueArray **)(a2 + 40), (const CA::Render::KeyValueArray *)0x118, (float32x4_t *)&v25);
  v22 = (int8x16_t)vcvtq_f32_f16(vcvt_f16_f32((float32x4_t)v25));
  v25 = 0uLL;
  v9 = CA::Render::KeyValueArray::get_float_color_key(*(CA::Render::KeyValueArray **)(a2 + 40), (const CA::Render::KeyValueArray *)0x118, (float32x4_t *)&v25);
  v23 = (int8x16_t)vcvtq_f32_f16(vcvt_f16_f32((float32x4_t)v25));
  int_key = CA::Render::KeyValueArray::get_int_key(*(CA::Render::KeyValueArray **)(a2 + 40), (const CA::Render::KeyValueArray *)0x131, 0);
  if (*(_DWORD *)(a2 + 24) == 583)
    v11 = 48;
  else
    v11 = 49;
  *(_BYTE *)(a1[2] + 16) = v11;
  CA::OGL::Context::bind_surface((uint64_t)a1, (uint64_t)a3, 0, a4 != 1.0, a4 != 1.0, 0.0);
  if (int_key)
    v12 = 1.0;
  else
    v12 = 0.0;
  if (float_color_key)
    v13 = -1;
  else
    v13 = 0;
  v24 = v12;
  __asm { FMOV            V2.4S, #1.0 }
  v21 = _Q2;
  v25 = vbslq_s8((int8x16_t)vdupq_n_s32(v13), v22, _Q2);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, int8x16_t *))(*a1 + 1000))(a1, 0, 4, 1, &v25);
  if (v9)
    v19 = -1;
  else
    v19 = 0;
  v25 = vbslq_s8((int8x16_t)vdupq_n_s32(v19), v23, v21);
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, int8x16_t *))(*a1 + 1000))(a1, 1, 4, 1, &v25);
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, float *))(*a1 + 1000))(a1, 2, 1, 1, &v24);
  CA::OGL::emit_filter_quads((uint64_t)a1, a3, a4);
  result = CA::OGL::Context::unbind_surface(a1, (uint64_t)a3, 0);
  *(_BYTE *)(a1[2] + 16) = 0;
  return result;
}

uint64_t CA::OGL::render_vibrant_color_matrix(_QWORD *a1, CA::OGL *this, CA::ColorMatrix *a3, float a4)
{
  float32x4_t *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v11;
  __int16 v12;
  int8x16_t v13;
  int8x16_t v14;
  float32x4_t *v16;
  float32x4_t *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  __int8 *v20;
  float16x4_t v21;
  float v26;
  int32x4_t v27;
  int32x4_t v28;
  float32x4_t v29;
  int32x4_t v30;
  float32x4_t v31;
  int v32;
  __int32 v33;
  __int32 v34;
  int v35;
  __int32 v36;
  __int32 v37;
  __int32 v38;
  int v39;
  __int32 v40;
  int v41;
  int v42;
  __int32 v43;
  uint64_t result;
  __int32 *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  __int32 *v49;
  __int32 *v50;
  __int8 *v51;
  __int8 *v52;
  uint64_t *v53;
  __int8 *v54;
  uint64_t *v55;
  __int32 *v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67;
  _DWORD v68[20];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v65 = 0u;
  v66 = 0u;
  v7 = &v62;
  v63 = 0u;
  v64 = 0u;
  v62 = 0u;
  CA::OGL::get_filter_color_matrix(this, (const CA::Render::Filter *)&v62, a3);
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v57 = 0u;
  v8 = (unsigned __int16 *)a1[2];
  v9 = v8[4];
  _Q2.i16[0] = v8[5];
  _Q2.i16[2] = v8[6];
  v11 = v8[7];
  v12 = v11;
  v13.i64[0] = _Q2.u32[0];
  v13.i64[1] = _Q2.u32[1];
  v14.i64[0] = 0xFFFFLL;
  v14.i64[1] = 0xFFFFLL;
  _Q0 = vshlq_u64((uint64x2_t)vandq_s8(v13, v14), (uint64x2_t)xmmword_18474E330);
  v48 = _Q2.i64[0];
  if ((_Q0.i64[0] | v9 | _Q0.i64[1] | (v11 << 48)) == 0x3C003C003C003C00)
  {
    v55 = &v65.i64[1];
    v56 = &v66.i32[3];
    v16 = &v63;
    v53 = &v66.i64[1];
    v54 = &v64.i8[4];
    v17 = &v64;
    v51 = &v66.i8[4];
    v52 = &v65.i8[4];
    v18 = &v65;
    v19 = &v66;
    v49 = &v64.i32[3];
    v50 = &v63.i32[3];
    v45 = &v65.i32[3];
    v46 = &v64.i64[1];
    v47 = &v63.i64[1];
    v20 = &v63.i8[4];
  }
  else
  {
    v16 = &v60;
    v20 = &v60.i8[4];
    v17 = &v59;
    v18 = &v58;
    v45 = (__int32 *)((unint64_t)&v58 | 0xC);
    v46 = &v59.i64[1];
    v47 = &v60.i64[1];
    v49 = (__int32 *)((unint64_t)&v59 | 0xC);
    v50 = (__int32 *)((unint64_t)&v60 | 0xC);
    v19 = &v57;
    v51 = &v57.i8[4];
    v52 = &v58.i8[4];
    v53 = &v57.i64[1];
    v54 = &v59.i8[4];
    v55 = &v58.i64[1];
    v56 = (__int32 *)((unint64_t)&v57 | 0xC);
    _Q0.i32[0] = (unsigned __int16)v11;
    v21 = (float16x4_t)vuzp1_s16(*(int16x4_t *)_Q2.i8, *(int16x4_t *)_Q0.i8);
    _Q2.i16[0] = v9;
    __asm { FCVT            S0, H0 }
    v26 = 1.0 / *(float *)_Q0.i32;
    if (*(float *)_Q0.i32 <= 0.0)
      v26 = 0.0;
    __asm { FCVT            S2, H2 }
    *(float *)_Q2.i32 = v26 * *(float *)_Q2.i32;
    v27 = (int32x4_t)vcvtq_f32_f16(v21);
    *(float32x2_t *)v27.i8 = vmul_n_f32(*(float32x2_t *)v27.i8, v26);
    v61 = vmulq_n_f32(v62, *(float *)_Q2.i32);
    v28 = vzip1q_s32(_Q2, v27);
    v60 = vmulq_f32(v63, (float32x4_t)vzip1q_s32(v28, vdupq_lane_s32(*(int32x2_t *)v28.i8, 1)));
    v29 = vmulq_f32(v64, (float32x4_t)vzip1q_s32(v27, v27));
    *(int32x2_t *)v27.i8 = vdup_lane_s32(*(int32x2_t *)v27.i8, 1);
    v30 = v27;
    v30.i32[1] = _Q0.i32[0];
    v31 = (float32x4_t)vzip1q_s32(v30, v30);
    v31.i32[2] = v27.i32[0];
    v58 = vmulq_f32(v65, v31);
    v59 = v29;
    v57 = vmulq_n_f32(v66, *(float *)_Q0.i32);
    v7 = &v61;
  }
  CA::OGL::bind_filter_surface((uint64_t)a1, (uint64_t)a3, a4);
  *(_BYTE *)(a1[2] + 16) = 47;
  v32 = *(_DWORD *)v20;
  v33 = v7->i32[1];
  v68[0] = v7->i32[0];
  v68[1] = v32;
  v34 = *v45;
  v68[2] = *(_DWORD *)v46;
  v68[3] = v34;
  v35 = *(_DWORD *)v47;
  v68[4] = v33;
  v68[5] = v35;
  v36 = v19->i32[0];
  v68[6] = *v49;
  v68[7] = v36;
  v37 = *v50;
  v38 = v7->i32[3];
  v68[8] = v7->i32[2];
  v68[9] = v37;
  v39 = *(_DWORD *)v51;
  v68[10] = v18->i32[0];
  v68[11] = v39;
  v40 = v17->i32[0];
  v68[12] = v38;
  v68[13] = v40;
  v41 = *(_DWORD *)v53;
  v68[14] = *(_DWORD *)v52;
  v68[15] = v41;
  v42 = *(_DWORD *)v54;
  v68[16] = v16->i32[0];
  v68[17] = v42;
  v43 = *v56;
  v68[18] = *(_DWORD *)v55;
  v68[19] = v43;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, _DWORD *))(*a1 + 1000))(a1, 0, 4, 5, v68);
  LOWORD(v67) = v9;
  WORD1(v67) = v48;
  WORD2(v67) = WORD2(v48);
  HIWORD(v67) = v12;
  result = CA::OGL::emit_filter_quads_color((uint64_t)a1, (int *)a3, &v67, a4);
  if ((CA::ColorMatrix *)a1[31] != a3)
    result = CA::OGL::Context::unbind_surface(a1, (uint64_t)a3, 0);
  *(_BYTE *)(a1[2] + 16) = 0;
  *(_BYTE *)(a1[2] + 19) = 0;
  return result;
}

BOOL CA::OGL::LimitAPL::identity(CA::OGL::LimitAPL *this, CA::Render::KeyValueArray **a2)
{
  float float_key;

  float_key = CA::Render::KeyValueArray::get_float_key(a2[5], (const CA::Render::KeyValueArray *)0x132, 0.0);
  return float_key <= 0.0;
}

uint64_t CA::OGL::LimitAPL::empty_opaque_shape(CA::OGL::LimitAPL *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3)
{
  return 0;
}

uint64_t CA::OGL::LimitAPL::identity_opaque_shape(CA::OGL::LimitAPL *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3)
{
  return 1;
}

BOOL CA::OGL::LimitAPL::can_render(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;

  v5 = *(unsigned __int8 *)(a5 + 68);
  return v5 != 12 && (v5 - 1) < 0x19;
}

uint64_t CA::OGL::LimitAPL::render(float a1, float a2, uint64_t a3, const CA::Render::Filter *a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v12;
  float32x2_t v13[4];

  v13[3] = *(float32x2_t *)MEMORY[0x1E0C80C00];
  CA::OGL::get_filter_apl_params(v13, a4, 0, (*(unsigned __int16 *)(a7 + 75) >> 11) & 1);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, float32x2_t *))(*a6 + 872))(a6, a7, v13);
  if (result)
  {
    v12 = result;
    CA::OGL::emit_limit_apl_dimming(a6, (int *)a7, result, a1 / a2, 0.0, 0.0);
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a6 + 832))(a6, v12);
  }
  return result;
}

uint64_t CA::OGL::LimitAPL::filter_flags()
{
  return 70;
}

uint64_t CA::OGL::AverageColorFilter::is_opacity_commutative(CA::OGL::AverageColorFilter *this, const CA::Render::Filter *a2)
{
  return 1;
}

uint64_t CA::OGL::AverageColorFilter::render(float a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, int *a7)
{
  float v9;
  uint64_t result;

  *(_BYTE *)(a6[2] + 16) = 2;
  v9 = a1 / a2;
  CA::OGL::Context::bind_surface((uint64_t)a6, (uint64_t)a7, 0, 2u, 1, 32.0);
  CA::OGL::emit_filter_quads((uint64_t)a6, a7, v9);
  result = CA::OGL::Context::unbind_surface(a6, (uint64_t)a7, 0);
  *(_BYTE *)(a6[2] + 16) = 0;
  return result;
}

uint64_t CA::OGL::AverageColorFilter::filter_flags()
{
  return 38;
}

void CA::Render::Updater::MeshOp::~MeshOp(CA::Render::Updater::MeshOp *this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *(_QWORD *)this = &off_1E1599388;
  if (*((_BYTE *)this + 16))
  {
    v1 = (unsigned int *)*((_QWORD *)this + 4);
    if (v1)
    {
      v2 = v1 + 2;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
        (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
    }
  }
}

{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *(_QWORD *)this = &off_1E1599388;
  if (*((_BYTE *)this + 16))
  {
    v1 = (unsigned int *)*((_QWORD *)this + 4);
    if (v1)
    {
      v2 = v1 + 2;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
        (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
    }
  }
  JUMPOUT(0x186DBD990);
}

uint64_t CA::Render::Updater::MeshOp::copy(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v14;

  v4 = x_heap_malloc_small_(a2, 0x48uLL);
  v5 = v4;
  if (v4)
  {
    *(_WORD *)(v4 + 16) = 1;
    *(_BYTE *)(v4 + 18) = 0;
    *(_QWORD *)v4 = &off_1E1599388;
  }
  v6 = x_heap_malloc_small_(a2, 0x28uLL);
  if (v6)
  {
    v7 = *(__int128 **)(a1 + 24);
    v8 = *v7;
    v9 = v7[1];
    *(_QWORD *)(v6 + 32) = *((_QWORD *)v7 + 4);
    *(_OWORD *)v6 = v8;
    *(_OWORD *)(v6 + 16) = v9;
  }
  *(_QWORD *)(v5 + 24) = v6;
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    if (!v12)
    {
      v10 = 0;
      do
        v14 = __ldaxr(v11);
      while (__stlxr(v14 - 1, v11));
    }
  }
  *(_QWORD *)(v5 + 32) = v10;
  *(_OWORD *)(v5 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v5 + 56) = *(_OWORD *)(a1 + 56);
  return v5;
}

double CA::Render::Updater::MeshOp::map_crop(CA::Render::Updater::MeshOp *this, CA::Rect *a2, float64x2_t *a3)
{
  const CA::Rect *v6;
  double v7;
  double v8;
  int32x4_t v9;
  float64x2_t v10;
  double result;
  _OWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  CA::Rect::unapply_transform(a3->f64, *((_QWORD *)this + 3));
  CA::Render::MeshTransform::apply_rect((CA::Render::MeshTransform *)v12, *((const CA::Rect **)this + 4), v6, *(float64x2_t *)((char *)this + 40), *(int8x16_t *)((char *)this + 56), *a3, a3[1], v7, v8, v9);
  v10 = (float64x2_t)v12[1];
  *a3 = (float64x2_t)v12[0];
  a3[1] = v10;
  CA::Rect::apply_transform(a3->f64, *((_QWORD *)this + 3));
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  return result;
}

double CA::Render::Updater::MeshOp::map_rect(CA::Render::Updater::MeshOp *this, float64x2_t *a2)
{
  const CA::Rect *v4;
  double v5;
  double v6;
  int32x4_t v7;
  float64x2_t v8;
  _OWORD v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  CA::Rect::unapply_transform(a2->f64, *((_QWORD *)this + 3));
  CA::Render::MeshTransform::apply_rect((CA::Render::MeshTransform *)v10, *((const CA::Rect **)this + 4), v4, *(float64x2_t *)((char *)this + 40), *(int8x16_t *)((char *)this + 56), *a2, a2[1], v5, v6, v7);
  v8 = (float64x2_t)v10[1];
  *a2 = (float64x2_t)v10[0];
  a2[1] = v8;
  return CA::Rect::apply_transform(a2->f64, *((_QWORD *)this + 3));
}

double CA::Render::Updater::MeshOp::unmap_rect(CA::Render::Updater::MeshOp *this, float64x2_t *a2)
{
  const CA::Rect *v4;
  float64x2_t v5;
  _OWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  CA::Rect::unapply_transform(a2->f64, *((_QWORD *)this + 3));
  CA::Render::MeshTransform::unapply_rect((CA::Render::MeshTransform *)v7, *((const CA::Rect **)this + 4), v4, *(float64x2_t *)((char *)this + 40), *(float64x2_t *)((char *)this + 56), *a2, a2[1]);
  v5 = (float64x2_t)v7[1];
  *a2 = (float64x2_t)v7[0];
  a2[1] = v5;
  return CA::Rect::apply_transform(a2->f64, *((_QWORD *)this + 3));
}

uint64_t CA::Render::Updater::LayerShapesOp::is_flatten_op(CA::Render::Updater::LayerShapesOp *this)
{
  return 0;
}

double CA::Render::Updater::FilterOp::map_crop(CA::Render::Updater::FilterOp *this, CA::Rect *a2, __n128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  double result;

  if (!*((_QWORD *)this + 5)
    || (CA::Render::Updater::FilterOp::apply_filter(this, a3, 0), (v5 = *((_QWORD *)this + 5)) == 0)
    || (v6 = *(_QWORD *)(v5 + 48)) == 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6) & 1) == 0)
  {
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

void CA::Render::Updater::FilterOp::map_rect(CA::Render::Updater::FilterOp *this, __n128 *a2)
{
  if (*((_QWORD *)this + 5))
    CA::Render::Updater::FilterOp::apply_filter(this, a2, 0);
}

void CA::Render::Updater::FilterOp::map_bounds(CA::Render::Updater::LayerShapes &,BOOL)::$_0::__invoke(__n128 *a1, CA::Render::Updater::FilterOp *this)
{
  CA::Render::Updater::FilterOp::apply_filter(this, a1, 0);
}

void CA::Render::TreeWalkingUpdateDelegate::~TreeWalkingUpdateDelegate(CA::Render::TreeWalkingUpdateDelegate *this)
{
  CA::Render::LayerNode *v2;
  CA::Render::LayerNode *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void **v11[2];

  v11[1] = *(void ***)MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E1598648;
  v11[0] = (void **)((char *)this + 40);
  std::vector<X::Ref<CA::Render::Handle>>::__destroy_vector::operator()[abi:nn180100](v11);
  v3 = (CA::Render::LayerNode *)*((_QWORD *)this + 4);
  if (v3)
  {
    v4 = (unsigned int *)((char *)v3 + 16);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      CA::Render::LayerNode::delete_node(v3, v2);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 3);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
}

{
  CA::Render::LayerNode *v2;
  CA::Render::LayerNode *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void **v11[2];

  v11[1] = *(void ***)MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E1598648;
  v11[0] = (void **)((char *)this + 40);
  std::vector<X::Ref<CA::Render::Handle>>::__destroy_vector::operator()[abi:nn180100](v11);
  v3 = (CA::Render::LayerNode *)*((_QWORD *)this + 4);
  if (v3)
  {
    v4 = (unsigned int *)((char *)v3 + 16);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      CA::Render::LayerNode::delete_node(v3, v2);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 3);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  JUMPOUT(0x186DBD990);
}

BOOL CA::Render::TreeWalkingUpdateDelegate::update_layer(CA::Render::TreeWalkingUpdateDelegate *this, CA::Render::Context *a2, CA::Render::LayerNode *a3, const CA::Render::Layer *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  BOOL v11;
  CA::Render::LayerNode *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;

  v5 = *((_QWORD *)a4 + 18);
  if (*((CA::Render::Context **)this + 3) == a2 && **((_QWORD **)this + 5) == v5)
  {
    v13 = (CA::Render::LayerNode *)*((_QWORD *)this + 4);
    if (v13 != a3)
    {
      if (v13)
      {
        v14 = (unsigned int *)((char *)v13 + 16);
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
          CA::Render::LayerNode::delete_node(v13, a2);
      }
      if (a3)
      {
        v17 = (unsigned int *)((char *)a3 + 16);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
      }
      *((_QWORD *)this + 4) = a3;
    }
    return 1;
  }
  if (!v5)
    return 1;
  v7 = *((_QWORD *)this + 5);
  v6 = *((_QWORD *)this + 6);
  if (v7 == v6)
    return 0;
  v8 = v7 + 8;
  do
  {
    v9 = *(_QWORD *)(v8 - 8);
    result = v9 == v5;
    v11 = v9 == v5 || v8 == v6;
    v8 += 8;
  }
  while (!v11);
  return result;
}

BOOL CA::Render::TreeWalkingUpdateDelegate::should_decontainer_layer(CA::Render::Context **this, CA::Render::Context *a2, CA::Render::LayerNode *a3, const CA::Render::Layer *a4)
{
  CA::Render::Context *v5;

  if (this[3] != a2)
    return 0;
  v5 = this[5];
  return v5 != this[6] && *(_QWORD *)v5 == *((_QWORD *)a4 + 18);
}

uint64_t CA::Render::UpdateDelegate::can_include_context(CA::Render::UpdateDelegate *this, CA::Render::Context *a2)
{
  return 1;
}

void std::vector<X::Ref<CA::Render::Handle>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = (unsigned int *)*((_QWORD *)v4 - 1);
        v4 -= 8;
        v6 = v7;
        if (v7)
        {
          v8 = v6 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
        }
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void CA::Render::Updater::TransformOp::~TransformOp(CA::Render::Updater::TransformOp *this)
{
  JUMPOUT(0x186DBD990);
}

double CA::Render::Updater::TransformOp::map_crop(CA::Render::Updater::TransformOp *this, CA::Rect *a2, int8x16_t *a3)
{
  const CA::Transform *v4;
  double result;

  v4 = (CA::Render::Updater::TransformOp *)((char *)this + 24);
  CA::Rect::apply_transform(a3, (CA::Render::Updater::TransformOp *)((char *)this + 24), (double *)a3->i64);
  result = *((double *)a2 + 2);
  if (result != 0.0)
    return CA::Rect::apply_transform_interior((int8x16_t *)a2, v4);
  return result;
}

double CA::Render::Updater::TransformOp::map_detached_rect(CA::Render::Updater::TransformOp *this, int8x16_t *a2)
{
  return CA::Rect::apply_transform_interior(a2, (CA::Render::Updater::TransformOp *)((char *)this + 24));
}

double CA::Render::Updater::TransformOp::map_rect(CA::Render::Updater::TransformOp *this, int8x16_t *a2, double *a3)
{
  return CA::Rect::apply_transform(a2, (CA::Render::Updater::TransformOp *)((char *)this + 24), a3);
}

double CA::Render::Updater::TransformOp::unmap_rect(CA::Render::Updater::TransformOp *this, CA::Rect *a2, const double *a3)
{
  return CA::Rect::unapply_transform(a2, (CA::Render::Updater::TransformOp *)((char *)this + 24), a3);
}

double CA::Render::Updater::TransformOp::map_bounds(CA::Render::Updater::LayerShapes &,BOOL)::$_0::__invoke(int8x16_t *a1, uint64_t a2, double *a3)
{
  return CA::Rect::apply_transform(a1, (const CA::Transform *)(a2 + 24), a3);
}

void CA::Render::Updater::FlattenZOp::~FlattenZOp(CA::Render::Updater::FlattenZOp *this)
{
  JUMPOUT(0x186DBD990);
}

uint64_t CA::Render::Updater::FlattenZOp::copy(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = x_heap_malloc_small_(a2, 0x18uLL);
  if (result)
  {
    *(_WORD *)(result + 16) = 257;
    *(_QWORD *)result = &off_1E15991D0;
    *(_BYTE *)(result + 18) = 1;
  }
  return result;
}

void CA::Render::Updater::RasterizationOp::~RasterizationOp(CA::Render::Updater::RasterizationOp *this)
{
  JUMPOUT(0x186DBD990);
}

uint64_t CA::Render::Updater::RasterizationOp::copy(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  int v4;

  result = x_heap_malloc_small_(a2, 0x18uLL);
  if (result)
  {
    v4 = *(_DWORD *)(a1 + 20);
    *(_WORD *)(result + 16) = 1;
    *(_BYTE *)(result + 18) = 0;
    *(_QWORD *)result = &off_1E1599318;
    *(_DWORD *)(result + 20) = v4;
  }
  return result;
}

double *CA::Render::Updater::RasterizationOp::map_crop(CA::Render::Updater::RasterizationOp *this, CA::Rect *a2, CA::Rect *a3)
{
  CA::BoundsImpl::inset((double *)a3, (double)-*((_DWORD *)this + 5), (double)-*((_DWORD *)this + 5));
  return CA::BoundsImpl::inset((double *)a2, (double)*((int *)this + 5), (double)*((int *)this + 5));
}

double *CA::Render::Updater::RasterizationOp::map_rect(CA::Render::Updater::RasterizationOp *this, CA::Rect *a2)
{
  return CA::BoundsImpl::inset((double *)a2, (double)-*((_DWORD *)this + 5), (double)-*((_DWORD *)this + 5));
}

double *CA::Render::Updater::RasterizationOp::unmap_rect(CA::Render::Updater::RasterizationOp *this, CA::Rect *a2)
{
  return CA::BoundsImpl::inset((double *)a2, (double)*((int *)this + 5), (double)*((int *)this + 5));
}

double *CA::Render::Updater::RasterizationOp::map_bounds(CA::Render::Updater::LayerShapes &,BOOL)::$_0::__invoke(double *a1, _DWORD *a2)
{
  return CA::BoundsImpl::inset(a1, (double)-*a2, (double)-*a2);
}

void CA::Render::Updater::ShadowOp::~ShadowOp(CA::Render::Updater::ShadowOp *this)
{
  JUMPOUT(0x186DBD990);
}

float64_t CA::Render::Updater::ShadowOp::map_crop(CA::Render::Updater::ShadowOp *this, CA::Rect *a2, float64x2_t *a3)
{
  return CA::Render::Updater::ShadowOp::apply_shadow(this, a3);
}

float64_t CA::Render::Updater::ShadowOp::map_bounds(CA::Render::Updater::LayerShapes &,BOOL)::$_0::__invoke(float64x2_t *a1, CA::Render::Updater::ShadowOp *this)
{
  return CA::Render::Updater::ShadowOp::apply_shadow(this, a1);
}

void CA::Render::invoke_presentation_handlers(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, char a5, double a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  signed int v13;
  pid_t v14;
  unsigned int v15;
  int v16;
  uint64_t *v17;
  uint64_t **v18;
  signed int v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  BOOL v23;
  BOOL v24;
  uint64_t *v25;
  signed int v26;
  BOOL v27;
  char v28;
  unsigned int v29;
  BOOL v30;
  char v31;
  mach_port_t v32;
  uint64_t *v33;
  uint64_t **v34;
  uint64_t **i;
  signed int v36;
  unsigned int v37;
  BOOL v38;
  char v39;
  char v40;
  uint64_t *v41;
  uint64_t *v42;
  pthread_mutex_t *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t **v51;
  uint64_t *v52;
  uint64_t v53;
  mach_msg_header_t msg;
  uint64_t v55;
  int v56;
  int v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  __int16 v62;
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v52 = 0;
  v53 = 0;
  v51 = &v52;
  v6 = a1 + 1;
  v7 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 == a1 + 1)
  {
    v47 = 0;
  }
  else
  {
    do
    {
      if (*((_BYTE *)v7 + 40))
      {
        v10 = *((unsigned int *)v7 + 11);
        v11 = v7[4];
        v12 = (unsigned int *)(v11 + 228);
        v13 = atomic_load((unsigned int *)(v11 + 228));
        if (!v13)
        {
          if (*(_DWORD *)(v11 + 252))
            v14 = 0;
          else
            v14 = getpid();
          while (1)
          {
            v15 = __ldaxr(v12);
            if (v15)
              break;
            if (!__stlxr(v14, v12))
            {
              v16 = 1;
              goto LABEL_11;
            }
          }
          v16 = 0;
          __clrex();
LABEL_11:
          if (v16)
            v13 = v14;
          else
            v13 = v15;
        }
        v17 = v52;
        if (!v52)
          goto LABEL_45;
        v18 = &v52;
        do
        {
          v19 = *((_DWORD *)v17 + 7);
          v20 = v19 == v13;
          if (v19 >= v13)
            v21 = 1;
          else
            v21 = -1;
          if (v20)
          {
            v22 = *((_DWORD *)v17 + 8);
            v23 = v22 == (_DWORD)v10;
            v21 = v22 >= v10 ? 1 : -1;
            if (v23)
              v21 = 0;
          }
          v24 = (v21 & 0x80) == 0;
          if (v21 < 0)
            v25 = v17 + 1;
          else
            v25 = v17;
          if (v24)
            v18 = (uint64_t **)v17;
          v17 = (uint64_t *)*v25;
        }
        while (*v25);
        if (&v52 == v18)
          goto LABEL_45;
        v26 = *((_DWORD *)v18 + 7);
        v27 = v13 == v26;
        if (v13 >= v26)
          v28 = 1;
        else
          v28 = -1;
        if (v27)
        {
          v29 = *((_DWORD *)v18 + 8);
          v30 = (_DWORD)v10 == v29;
          if (v10 >= v29)
            v31 = 1;
          else
            v31 = -1;
          if (v30)
            v28 = 0;
          else
            v28 = v31;
        }
        if (v28 < 0)
        {
LABEL_45:
          v32 = *(_DWORD *)(v7[4] + 256);
          v55 = *MEMORY[0x1E0C804E8];
          v56 = v10;
          v57 = a2;
          v58 = a6;
          v59 = a3;
          v60 = a4;
          v61 = a5;
          v62 = 0;
          v63 = 0;
          *(_QWORD *)&msg.msgh_bits = 19;
          msg.msgh_voucher_port = 0;
          msg.msgh_id = 40407;
          msg.msgh_remote_port = v32;
          msg.msgh_local_port = 0;
          if (MEMORY[0x1E0C85B60])
            voucher_mach_msg_set(&msg);
          if ((mach_msg(&msg, 17, 0x44u, 0, 0, 0, 0) - 268435459) <= 1)
          {
            if ((msg.msgh_bits & 0x1F00) == 0x1100)
              mach_port_deallocate(*MEMORY[0x1E0C83DA0], msg.msgh_local_port);
            mach_msg_destroy(&msg);
          }
          v33 = v52;
          v34 = &v52;
          for (i = &v52; v33; v33 = v34[1])
          {
            while (1)
            {
              v34 = (uint64_t **)v33;
              v36 = *((_DWORD *)v33 + 7);
              if (v13 == v36)
                break;
              if (v13 >= v36)
              {
                if (v36 >= v13)
                  v40 = 1;
                else
                  v40 = -1;
                if ((v40 & 0x80) == 0)
                  goto LABEL_73;
                goto LABEL_68;
              }
LABEL_62:
              v33 = *v34;
              i = v34;
              if (!*v34)
                goto LABEL_69;
            }
            v37 = *((_DWORD *)v34 + 8);
            if (v10 < v37)
              goto LABEL_62;
            v38 = v37 == (_DWORD)v10;
            if (v37 >= v10)
              v39 = 1;
            else
              v39 = -1;
            if (v38)
              v39 = 0;
            if ((v39 & 0x80) == 0)
              goto LABEL_73;
LABEL_68:
            i = v34 + 1;
          }
LABEL_69:
          v41 = (uint64_t *)operator new(0x28uLL);
          *(uint64_t *)((char *)v41 + 28) = (v10 << 32) | v13;
          *v41 = 0;
          v41[1] = 0;
          v41[2] = (uint64_t)v34;
          *i = v41;
          if (*v51)
          {
            v51 = (uint64_t **)*v51;
            v42 = *i;
          }
          else
          {
            v42 = v41;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v52, v42);
          ++v53;
        }
LABEL_73:
        v43 = (pthread_mutex_t *)(v7[4] + 72);
        pthread_mutex_lock(v43);
        v44 = v7[4];
        if (*(_DWORD *)(v44 + 292) && *(_DWORD *)(v44 + 296) <= *((_DWORD *)v7 + 11))
          *(_QWORD *)(v44 + 292) = 0;
        pthread_mutex_unlock(v43);
      }
      v45 = (_QWORD *)v7[1];
      if (v45)
      {
        do
        {
          v46 = v45;
          v45 = (_QWORD *)*v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          v46 = (_QWORD *)v7[2];
          v20 = *v46 == (_QWORD)v7;
          v7 = v46;
        }
        while (!v20);
      }
      v7 = v46;
    }
    while (v46 != v6);
    v47 = v52;
  }
  std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(v47);
}

void std::vector<std::unordered_map<void *,CA::Render::LayerNode *>>::push_back[abi:nn180100](uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;

  v4 = a1[1];
  v5 = a1[2];
  if (v4 < v5)
  {
    v6 = std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table(v4, a2)+ 40;
    goto LABEL_20;
  }
  v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - *a1) >> 3);
  if (v7 + 1 > 0x666666666666666)
    abort();
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
  v9 = 2 * v8;
  if (2 * v8 <= v7 + 1)
    v9 = v7 + 1;
  if (v8 >= 0x333333333333333)
    v10 = 0x666666666666666;
  else
    v10 = v9;
  if (v10)
  {
    if (v10 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v11 = (char *)operator new(40 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[40 * v10];
  v13 = std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table((uint64_t)&v11[40 * v7], a2);
  v6 = v13 + 40;
  v15 = (uint64_t *)*a1;
  v14 = (uint64_t *)a1[1];
  if (v14 == (uint64_t *)*a1)
  {
    *a1 = v13;
    a1[1] = v6;
    a1[2] = (uint64_t)v12;
    if (!v14)
      goto LABEL_20;
    goto LABEL_19;
  }
  do
  {
    v14 -= 5;
    v13 = std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table(v13 - 40, v14);
  }
  while (v14 != v15);
  v16 = (uint64_t *)*a1;
  v14 = (uint64_t *)a1[1];
  *a1 = v13;
  a1[1] = v6;
  a1[2] = (uint64_t)v12;
  if (v14 != v16)
  {
    do
    {
      v14 -= 5;
      std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v14);
    }
    while (v14 != v16);
    v14 = v16;
  }
  if (v14)
LABEL_19:
    operator delete(v14);
LABEL_20:
  a1[1] = v6;
}

BOOL CA::Render::Update::allowed_in_update(CA::Render::Update *this, CA::Render::Context *a2, const CA::Render::Layer *a3)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CA::Render::String **v13;
  uint64_t v14;
  CA::Render::String *v15;
  const __CFSet *v16;
  const void *v17;
  int v18;
  BOOL v19;

  v4 = *((unsigned int *)this + 266);
  v5 = v4 | ((unint64_t)*((unsigned __int16 *)this + 534) << 32);
  v6 = (*((_DWORD *)a3 + 9) >> 20) & 0x100;
  if ((v4 & 0x100) == 0)
    v6 = (*((_DWORD *)a3 + 9) >> 20) & 0x7FF;
  if (v6)
  {
    if ((v4 & 0x50000000) == 0x10000000 && (v6 & 2) != 0)
      return 0;
    v8 = *((_DWORD *)this + 68) & 0x10000;
    if ((v6 & 4) != 0)
    {
      if (v8)
        return 0;
    }
    if ((v6 & 8) != 0 && !v8
      || (v4 & 0x40000000) != 0 && (v6 & 0x20) != 0 && (*((_WORD *)a2 + 276) & 8) != 0
      || (v4 & 0x80) != 0 && (v6 & 0x40) != 0)
    {
      return 0;
    }
    if ((v5 & 0x200000000) != 0
      && ((v6 & 0x100) != 0 || (v6 & 0x10) != 0 && ((v6 > 0x3FF) & (v4 >> 9)) == 0))
    {
      result = 0;
      *((_DWORD *)this + 266) = v5;
      *((_WORD *)this + 534) = (v5 | 0x400000000) >> 32;
      return result;
    }
    if ((v4 & 0x20000000) != 0 && (v6 & 0x200) != 0)
      return 0;
  }
  if ((v4 & 4) == 0)
    return 1;
  v10 = *((_QWORD *)a3 + 16);
  if (!v10)
    return 1;
  v11 = *(_QWORD *)(v10 + 144);
  if (!v11)
    return 1;
  if (!*((_QWORD *)this + 114))
    return 1;
  v12 = *(unsigned int *)(v11 + 16);
  if (!(_DWORD)v12)
    return 1;
  v13 = (CA::Render::String **)(v11 + 24);
  v14 = 8 * v12 - 8;
  do
  {
    v15 = *v13++;
    v16 = (const __CFSet *)*((_QWORD *)this + 114);
    v17 = (const void *)CA::Render::String::unsafe_cf_string(v15);
    v18 = CFSetContainsValue(v16, v17);
    result = v18 == 0;
    if (v18)
      v19 = 1;
    else
      v19 = v14 == 0;
    v14 -= 8;
  }
  while (!v19);
  return result;
}

CA::Render::LayerNode *CA::Render::Update::mark_root_dependence(CA::Render::LayerNode *this, CA::Render::LayerNode *a2, CA::Render::LayerNode *a3)
{
  CA::Render::LayerNode *v3;
  CA::Render::LayerNode *v4;
  uint64_t v5;
  CA::Render::LayerNode *v6;
  CA::Render::LayerNode *v7;
  uint64_t v8;

  if ((this & 4) == 0)
  {
    v3 = a3;
    v4 = a2;
    if (a2)
    {
      this = CA::Render::LayerNode::shared_ancestor(a2, a3);
      if (this)
      {
        v5 = *((_QWORD *)this + 5);
        if (!v5)
          return this;
LABEL_13:
        *(_QWORD *)(v5 + 96) |= 0x1000000000000000uLL;
        return this;
      }
      do
      {
        v7 = v3;
        v3 = (CA::Render::LayerNode *)*((_QWORD *)v3 + 11);
      }
      while (v3);
      v8 = *((_QWORD *)v7 + 5);
      if (v8)
        *(_QWORD *)(v8 + 96) |= 0x1000000000000000uLL;
      do
      {
        v6 = v4;
        v4 = (CA::Render::LayerNode *)*((_QWORD *)v4 + 11);
      }
      while (v4);
    }
    else
    {
      do
      {
        v6 = v3;
        v3 = (CA::Render::LayerNode *)*((_QWORD *)v3 + 11);
      }
      while (v3);
    }
    v5 = *((_QWORD *)v6 + 5);
    if (!v5)
      return this;
    goto LABEL_13;
  }
  return this;
}

uint64_t CA::Render::CA_IS_FULFILLING_SERVER_GLITCH_REQUEST(CA::Render *this, double a2)
{
  return usleep(1000 * (a2 * 1000.0));
}

void CA::Render::Updater::prepare_layer_contents(CA::Render::Updater::GlobalState &,CA::Render::Updater::LocalState &,CA::Render::Object *,CA::Render::Updater::LayerShapes &)::$_0::operator()(uint64_t a1, uint64_t a2, double *a3, int32x4_t a4, int32x4_t a5)
{
  int v6;
  int v7;
  int v8;
  int64x2_t v9;
  float64x2_t v10;
  double v11;
  double v12;
  double v13;
  double v19;
  const CA::Bounds *v20;
  float64x2_t v21;
  int64x2_t v22;
  float64x2_t *v23;
  float64x2_t v24;
  int64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  int64x2_t v28;
  _QWORD *v29;
  int64x2_t v30;
  uint64_t v31;
  float64x2_t v32;
  int64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  int64x2_t v37;
  CA::Render::Update **v38;
  CA::Render::Update *v39;
  CA::Render::Context *v40;
  int64x2_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int32x4_t v44;
  float64x2_t v45;
  float64x2_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_DWORD *)(a2 + 12);
  if (v6 <= v7)
    v8 = *(_DWORD *)(a2 + 12);
  else
    v8 = *(_DWORD *)(a2 + 8);
  a4.i32[0] = 1073741822;
  a5.i32[0] = v8;
  v9.i64[0] = (int)*(_QWORD *)a2;
  v9.i64[1] = (int)HIDWORD(*(_QWORD *)a2);
  v10 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(a5, a4), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v9));
  if (v8 <= 1073741822)
    v11 = (double)v6;
  else
    v11 = 1.79769313e308;
  if (v8 <= 1073741822)
    v12 = (double)v7;
  else
    v12 = 1.79769313e308;
  v45 = v10;
  v46.f64[0] = v11;
  v46.f64[1] = v12;
  if (fmax(v11, v12) < 1.79769313e308)
  {
    v13 = v11 >= v12 ? v12 : v11;
    if (v13 > 0.0)
    {
      __asm { FMOV            V3.2D, #-1.0 }
      v45 = vaddq_f64(v10, _Q3);
      v19 = v12 + 2.0;
      v46.f64[0] = v11 + 2.0;
      v46.f64[1] = v19;
      if (v11 + 2.0 <= 0.0 || v19 <= 0.0)
        v46 = 0uLL;
    }
  }
  CA::Rect::apply_transform((int8x16_t *)&v45, *(const CA::Transform **)a1, a3);
  v21 = v46;
  v22 = vclezq_f64(v46);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v22, 1), (int8x16_t)v22).u64[0] & 0x8000000000000000) == 0)
  {
    v23 = *(float64x2_t **)(a1 + 8);
    v24 = v23[1];
    v25 = vclezq_f64(v24);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v25, 1), (int8x16_t)v25).u64[0] & 0x8000000000000000) != 0
      || (v26 = vaddq_f64(*v23, v24),
          v27 = vmaxnmq_f64(v45, *v23),
          v21 = vsubq_f64(vminnmq_f64(vaddq_f64(v45, v46), v26), v27),
          v28 = vclezq_f64(v21),
          (vorrq_s8((int8x16_t)vdupq_laneq_s64(v28, 1), (int8x16_t)v28).u64[0] & 0x8000000000000000) != 0))
    {
      v46 = 0uLL;
      v21 = 0uLL;
    }
    else
    {
      v45 = v27;
      v46 = v21;
    }
  }
  v29 = **(_QWORD ***)(a1 + 16);
  if (v29)
  {
    do
    {
      (*(void (**)(_QWORD *, float64x2_t *))(*v29 + 64))(v29, &v45);
      v29 = (_QWORD *)v29[1];
    }
    while (v29);
    v21 = v46;
  }
  v30 = vclezq_f64(v21);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v30, 1), (int8x16_t)v30).u64[0] & 0x8000000000000000) == 0)
  {
    v31 = *(_QWORD *)(a1 + 24);
    v32 = *(float64x2_t *)(v31 + 104);
    v33 = vclezq_f64(v32);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v33, 1), (int8x16_t)v33).u64[0] & 0x8000000000000000) != 0
      || (v34 = *(float64x2_t *)(v31 + 88),
          v35 = vaddq_f64(v34, v32),
          v36 = vmaxnmq_f64(v45, v34),
          v21 = vsubq_f64(vminnmq_f64(vaddq_f64(v45, v21), v35), v36),
          v37 = vclezq_f64(v21),
          (vorrq_s8((int8x16_t)vdupq_laneq_s64(v37, 1), (int8x16_t)v37).u64[0] & 0x8000000000000000) != 0))
    {
      v46 = 0uLL;
      v21 = 0uLL;
    }
    else
    {
      v45 = v36;
      v46 = v21;
    }
  }
  v38 = *(CA::Render::Update ***)(a1 + 32);
  v39 = *v38;
  v40 = v38[2];
  v41 = vceqzq_f64(v21);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v41, 1), (int8x16_t)v41).u64[0] & 0x8000000000000000) != 0
    || (v42 = vorrq_s8((int8x16_t)vcltzq_f64(v21), (int8x16_t)vcgezq_f64(v21)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v42), 1), v42).u64[0] & 0x8000000000000000) != 0))
  {
    v44 = 0uLL;
  }
  else
  {
    v43 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v45, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    v44 = vuzp1q_s32(v43, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v45, v21), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v43));
  }
  CA::Render::Context::invalidate(v40, (int32x2_t *)&v44, v20);
  CA::Render::Update::invalidate_backdrops(v39, (const CA::Bounds *)&v44, 0, 0xFFFFFFFF);
}

void CA::Render::Updater::prepare_layer_mask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  float64x2_t v10;
  uint64_t v11;
  float v12;
  float v13;
  __n128 v14;
  _QWORD *v15;
  float64x2_t v16;
  int32x4_t *v17;
  int64x2_t v18;
  int8x16_t v19;
  int32x4_t v20;
  uint64_t v21;
  float64x2_t *v22;
  __int128 v23;
  CA::Bounds *v24;
  int64x2_t v25;
  int64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  int64x2_t v30;
  uint64_t v31;
  int32x2_t v32;
  int32x2_t v33;
  unsigned int v34;
  int32x2_t v35;
  uint32x2_t v36;
  uint32x2_t v37;
  int32x2_t v38;
  __int128 v39;
  int32x2_t v40;
  uint32x2_t v41;
  CA::Shape *v42;
  double v43;
  float64x2_t v44;
  float64x2_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _OWORD v53[2];
  float64x2_t v54;
  float64x2_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(v8 + 40);
  if ((v9 & 0x40) == 0)
  {
    *(_OWORD *)(a4 + 88) = *(_OWORD *)(a3 + 88);
    *(_OWORD *)(a4 + 104) = *(_OWORD *)(a3 + 104);
    *(_OWORD *)(a4 + 120) = *(_OWORD *)(a3 + 120);
    goto LABEL_21;
  }
  v44 = 0u;
  v45 = 0u;
  v10 = *(float64x2_t *)(v8 + 80);
  v54 = *(float64x2_t *)(v8 + 64);
  v55 = v10;
  CA::Rect::apply_transform(v54.f64, a2 + 8);
  v11 = *(_QWORD *)(v8 + 128);
  v12 = 0.0;
  if (v11)
    v12 = *(float *)(v11 + 228);
  if ((*(_BYTE *)(v8 + 38) & 0xF) != 0)
  {
    if (v11)
      goto LABEL_7;
  }
  else
  {
    v12 = 0.0;
    if (v11)
    {
LABEL_7:
      if (*(_QWORD *)(v11 + 72))
      {
        CA::Render::Layer::max_corner_radii(v11);
        v12 = v43;
      }
    }
  }
  if ((v9 & 3) != 0)
  {
    v13 = v12 * 1.52866;
    v12 = v13;
  }
  if (v12 <= 0.0)
  {
    v14 = (__n128)v54;
    v44 = v54;
    v45 = v55;
  }
  else
  {
    CA::Render::Updater::corner_clipped_layer_bounds((double *)v53, (const CA::Render::Layer *)v8);
    v44 = (float64x2_t)v53[0];
    v45 = (float64x2_t)v53[1];
    v14.n128_f64[0] = CA::Rect::apply_transform(v44.f64, a2 + 8);
    *(_QWORD *)(a2 + 72) |= 0x20C00000uLL;
  }
  v15 = *(_QWORD **)a2;
  if (*(_QWORD *)a2)
  {
    do
    {
      (*(void (**)(_QWORD *, float64x2_t *, float64x2_t *, __n128))(*v15 + 32))(v15, &v44, &v54, v14);
      v15 = (_QWORD *)v15[1];
    }
    while (v15);
  }
  v16 = v55;
  *(float64x2_t *)(a4 + 88) = v54;
  *(float64x2_t *)(a4 + 104) = v16;
  v17 = (int32x4_t *)(a4 + 120);
  v18 = vceqzq_f64(v45);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v18, 1), (int8x16_t)v18).u64[0] & 0x8000000000000000) != 0
    || (v19 = vorrq_s8((int8x16_t)vcltzq_f64(v45), (int8x16_t)vcgezq_f64(v45)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v19), 1), v19).u64[0] & 0x8000000000000000) != 0))
  {
    v17->i64[0] = 0;
    *(_QWORD *)(a4 + 128) = 0;
  }
  else
  {
    v20 = (int32x4_t)vcvtpq_s64_f64(vmaxnmq_f64(v44, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    *v17 = vuzp1q_s32(v20, (int32x4_t)vsubq_s64(vcvtmq_s64_f64(vminnmq_f64(vaddq_f64(v44, v45), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v20));
  }
  CA::BoundsImpl::intersect(a4 + 88, *(float64x2_t *)(a3 + 88), *(float64x2_t *)(a3 + 104));
  CA::BoundsImpl::intersect((int32x2_t *)(a4 + 120), *(int32x2_t *)(a3 + 120), *(int32x2_t *)(a3 + 128));
LABEL_21:
  v21 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 128);
  if (!v21)
    return;
  v49 = 0;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v44 = 0u;
  v22 = (float64x2_t *)(a4 + 104);
  v23 = *(_OWORD *)(a4 + 104);
  v50 = *(_OWORD *)(a4 + 88);
  v51 = v23;
  v24 = (CA::Bounds *)(a4 + 120);
  v52 = *(_OWORD *)(a4 + 120);
  if (CA::Render::Updater::prepare_layer(a1, a2, v21, &v44, a2 + 72))
    *(_QWORD *)(a2 + 64) |= 8uLL;
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 56) + 40) & 0x80) != 0)
    goto LABEL_34;
  v25 = vclezq_f64(*v22);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v25, 1), (int8x16_t)v25).u64[0] & 0x8000000000000000) == 0)
  {
    v26 = vclezq_f64(v45);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v26, 1), (int8x16_t)v26).u64[0] & 0x8000000000000000) != 0
      || (v27 = *(float64x2_t *)(a4 + 88),
          v28 = vmaxnmq_f64(v27, v44),
          v29 = vsubq_f64(vminnmq_f64(vaddq_f64(v27, *v22), vaddq_f64(v44, v45)), v28),
          v30 = vclezq_f64(v29),
          (vorrq_s8((int8x16_t)vdupq_laneq_s64(v30, 1), (int8x16_t)v30).u64[0] & 0x8000000000000000) != 0))
    {
      v22->f64[0] = 0.0;
      *(_QWORD *)(a4 + 112) = 0;
    }
    else
    {
      *(float64x2_t *)(a4 + 88) = v28;
      *(float64x2_t *)(a4 + 104) = v29;
    }
  }
  v31 = *(_QWORD *)(v21 + 208);
  if (!v31)
  {
LABEL_34:
    *(_QWORD *)v24 = 0;
    *(_QWORD *)(a4 + 128) = 0;
    return;
  }
  if ((v31 & 1) == 0)
  {
    if (*(_DWORD *)(v31 + 4) == 12)
    {
      v32.i32[0] = *(_DWORD *)(v31 + 28);
      v32.i32[1] = *(_DWORD *)(v31 + 20);
      v33.i32[0] = *(_DWORD *)(v31 + 32) - v32.i32[0];
      v34 = *(_DWORD *)(v31 + 36) - v32.i32[1];
      goto LABEL_38;
    }
LABEL_42:
    v42 = (CA::Shape *)CA::Shape::intersect((CA::Shape *)v31, (const CA::Bounds *)(a4 + 120));
    CA::Shape::get_interior_bounds((unint64_t)v42, v24);
    CA::Shape::unref(v42);
    return;
  }
  if (v31 == 1)
    goto LABEL_42;
  v32.i32[0] = v31 >> 48;
  v32.i32[1] = (int)((unint64_t)v31 >> 16) >> 16;
  v33.i32[0] = v31 >> 17;
  v34 = (v31 >> 2) & 0x7FFF;
LABEL_38:
  v35 = *(int32x2_t *)(a4 + 128);
  v36 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v35);
  if ((vpmax_u32(v36, v36).u32[0] & 0x80000000) == 0)
  {
    v33.i32[1] = v34;
    v37 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v33);
    if ((vpmax_u32(v37, v37).u32[0] & 0x80000000) != 0
      || (v38 = vadd_s32(v32, v33),
          *(int32x2_t *)&v39 = vmax_s32(*(int32x2_t *)v24, v32),
          v40 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v24, v35), v38), *(int32x2_t *)&v39),
          v41 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v40),
          (vpmax_u32(v41, v41).u32[0] & 0x80000000) != 0))
    {
      *(_QWORD *)(a4 + 128) = 0;
    }
    else
    {
      *((int32x2_t *)&v39 + 1) = v40;
      *(_OWORD *)v24 = v39;
    }
  }
}

uint64_t CA::Render::Updater::prepare_layer(int32x2_t **a1, const CA::Render::Layer *a2, uint64_t a3, __n128 *a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v8;
  float64_t v9;
  unint64_t v10;
  int32x2_t *v11;
  uint64_t v12;
  int32x2_t v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int v17;
  const int *v18;
  int32x4_t v19;
  char v20;
  int32x2_t **v21;
  uint64_t v22;
  int32x2_t **v23;
  int32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t ProtectionOptions;
  int32x2_t *v31;
  uint64_t **v32;
  uint64_t v33;
  CA::Render::Context *v34;
  CA::Render::Handle *v35;
  int v36;
  _QWORD *v37;
  CA::Shape *v38;
  CA::Shape *v39;
  float64_t v40;
  CA::Shape *v41;
  CA::Shape *is_2d_affine;
  void (***v43)(CA::Render::Updater::TransformOp *__hidden);
  CA::Mat4Impl *v44;
  const CA::Shape *v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int8x16_t v50;
  int32x2_t v51;
  int64x2_t v52;
  int8x16_t v53;
  double v54;
  double v55;
  CA::Shape **v56;
  const CA::Shape *v57;
  CA::Shape **v58;
  CA::Shape **v59;
  CA::Shape ***v60;
  uint64_t v61;
  const CA::Shape *v62;
  CA::Shape **v63;
  const CA::Shape *v64;
  uint64_t v65;
  CA::Shape *v66;
  double v67;
  __int128 v68;
  const double *v72;
  int32x4_t v73;
  unsigned __int8 v74;
  char v75;
  const double *v76;
  double v78;
  int8x16_t v79;
  int32x2_t v80;
  int64x2_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int32x2_t v84;
  int32x2_t v85;
  uint64_t v86;
  const double *v87;
  const CA::Render::Layer *v89;
  uint64_t v90;
  os_unfair_lock_s *v91;
  unsigned int v92;
  uint64_t v93;
  int32x4_t v94;
  uint64_t **v95;
  uint64_t *v96;
  uint64_t **v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  CA::Shape **v101;
  int v102;
  int64x2_t v103;
  int8x16_t v104;
  int32x2_t v105;
  int8x16_t v106;
  CA::Render::Context *v107;
  uint64_t v108;
  CA::Rect *v109;
  const int *v110;
  uint64_t v111;
  const CA::Render::Layer *v112;
  uint64_t v113;
  uint64_t v114;
  float v115;
  _BOOL4 v116;
  BOOL v117;
  unsigned int v118;
  int v119;
  int v120;
  uint64_t v121;
  _BOOL4 v122;
  float v123;
  int v124;
  float64x2_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned __int8 *v128;
  int v129;
  unsigned int v130;
  unsigned __int8 v131;
  unsigned __int8 v132;
  uint64_t *v133;
  int v134;
  float64x2_t v135;
  uint64_t v136;
  float v137;
  int64x2_t v138;
  int8x16_t v139;
  int32x4_t v140;
  uint64_t v141;
  uint64_t *v142;
  _QWORD *v143;
  BOOL v144;
  char v145;
  char v146;
  int v147;
  uint64_t v148;
  __n128 v149;
  int v150;
  char v151;
  uint64_t v152;
  void (***i)(CA::Render::Updater::TransformOp *__hidden);
  const Rect *v154;
  const CA::Bounds *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t *v158;
  _QWORD *v159;
  int v160;
  char v161;
  int64x2_t v162;
  float64x2_t v163;
  double v164;
  double v165;
  const CA::Bounds *v166;
  const CA::Bounds *v167;
  const CA::Shape *v168;
  int v169;
  const CA::Render::Layer *v170;
  uint64_t v171;
  float32x4_t v172;
  uint64_t v173;
  float64x2_t *v174;
  float64x2_t *v175;
  float64x2_t v176;
  float v177;
  float32x2_t *v178;
  float32x2_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  const CA::Render::Layer *v183;
  uint64_t v184;
  float64x2_t v185;
  uint64_t v186;
  uint64_t v187;
  void (***v188)(CA::Render::Updater::TransformOp *__hidden);
  float64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  double v199;
  unint64_t v200;
  unsigned int v201;
  void (***v202)(CA::Render::Updater::TransformOp *__hidden);
  uint64_t v203;
  float v204;
  void (***j)(CA::Render::Updater::TransformOp *__hidden);
  int64x2_t v206;
  unint64_t v207;
  int32x4_t v208;
  int8x16_t v209;
  int32x4_t v210;
  void (****v211)(CA::Render::Updater::TransformOp *__hidden);
  void (***v212)(CA::Render::Updater::TransformOp *__hidden);
  char v213;
  void (****v214)(CA::Render::Updater::TransformOp *__hidden);
  float64x2_t v215;
  float64x2_t v216;
  int64x2_t v217;
  int32x4_t v218;
  unint64_t v219;
  __n128 v220;
  int8x16_t v221;
  int32x4_t v222;
  uint64_t v223;
  uint64_t v224;
  int32x2_t *v225;
  CA::Shape **v226;
  __int32 v227;
  uint64_t v228;
  char v229;
  __int32 v230;
  char v231;
  float64_t v232;
  uint64_t v233;
  uint64_t v234;
  void (***v235)(CA::Render::Updater::TransformOp *__hidden);
  void (***v236)(CA::Render::Updater::TransformOp *__hidden);
  uint64_t v237;
  float64x2_t v238;
  float64x2_t v239;
  double v240;
  float v241;
  float v242;
  uint64_t v243;
  _BOOL4 v244;
  _BOOL4 v245;
  double v246;
  float v247;
  int v248;
  char v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  int64x2_t v254;
  int64x2_t v255;
  int8x16_t v256;
  int8x16_t v257;
  int64x2_t v258;
  int64x2_t v259;
  int64x2_t v260;
  int8x16_t v261;
  int64x2_t v262;
  int8x16_t v263;
  int32x4_t v264;
  CA::Render::LayerNode *v265;
  CA::Shape **v266;
  const CA::Shape *v267;
  const int *v268;
  const CA::Shape *v269;
  CA::Shape *v270;
  const CA::Bounds *v271;
  uint64_t v272;
  const CA::Shape *v273;
  CA::Shape **v274;
  const CA::Bounds *v275;
  const CA::Shape *v276;
  uint64_t v277;
  CA::Render::Transition *v278;
  float64x2_t v279;
  float64x2_t v280;
  uint64_t v281;
  uint64_t v282;
  unsigned int v283;
  const CA::Render::TransitionSubclass *v284;
  _UNKNOWN **v285;
  double *v286;
  _UNKNOWN **v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t *v290;
  const CA::Bounds *v291;
  void (***v292)(CA::Render::Updater::TransformOp *__hidden);
  void (***v293)(CA::Render::Updater::TransformOp *__hidden);
  void (***v294)(CA::Render::Updater::TransformOp *__hidden);
  void (***v295)(CA::Render::Updater::TransformOp *__hidden);
  void (***v296)(CA::Render::Updater::TransformOp *__hidden);
  double v297;
  void (***v298)(CA::Render::Updater::TransformOp *__hidden);
  int64x2_t v299;
  int8x16_t v300;
  int32x4_t v301;
  uint64_t v302;
  __n128 *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  int64x2_t v307;
  int64x2_t v308;
  int64x2_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  int64x2_t v318;
  unint64_t v319;
  int8x16_t v320;
  int32x4_t v321;
  uint64_t v322;
  uint64_t v323;
  int8x16_t v324;
  float64x2_t v325;
  int8x16_t v326;
  float64x2_t v327;
  int64x2_t v328;
  int8x16_t v329;
  int32x4_t v330;
  int32x4_t v331;
  uint64_t v332;
  int64x2_t v333;
  float64x2_t v334;
  int v335;
  int v336;
  int32x2_t v337;
  const CA::Bounds *v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  const CA::Bounds *v342;
  const CA::Bounds *v343;
  uint64_t v344;
  char v345;
  int64x2_t v346;
  unint64_t v347;
  int8x16_t v348;
  int8x16_t v349;
  int32x4_t v350;
  uint32x2_t v351;
  int32x2_t v352;
  uint32x2_t v353;
  int32x2_t v354;
  int32x2_t v355;
  uint32x2_t v356;
  int8x16_t v357;
  int32x2_t v358;
  uint32x2_t v359;
  int32x2_t v360;
  uint32x2_t v361;
  int32x2_t v362;
  int32x2_t v363;
  int8x16_t v364;
  int32x2_t v365;
  uint32x2_t v366;
  int v367;
  _QWORD *v368;
  uint64_t v369;
  int v370;
  CA::Render::Object *v371;
  float64_t v372;
  unsigned int *v373;
  unsigned int *v374;
  unsigned int *v375;
  unsigned int v376;
  unsigned int v377;
  unsigned int *v378;
  unsigned int v379;
  unsigned int *v380;
  unsigned int *v381;
  unsigned int v382;
  unsigned int v383;
  CA::Shape *v384;
  uint64_t v385;
  uint64_t v386;
  unsigned int **v387;
  unsigned int *v388;
  int32x4_t v389;
  unsigned int v390;
  unsigned int v391;
  CA::Render::Array *v392;
  CA::Render::Array *v393;
  uint64_t v394;
  uint64_t v395;
  int v396;
  CA::Render::KeyValueArray *v397;
  CA::Render::KeyValueArray *v398;
  CA::Render::Array *v399;
  double v400;
  CA::Render::Array *v401;
  double v402;
  double v403;
  double float_key;
  double v405;
  double v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  double v410;
  CA::Render::KeyValueArray *v411;
  uint64_t v412;
  double vec2_key;
  double v414;
  double v415;
  double v416;
  double v417;
  double v418;
  double v419;
  double v420;
  BOOL v421;
  double v422;
  double v423;
  double v424;
  double v425;
  uint64_t v426;
  CA::Render::KeyValueArray *v427;
  uint64_t v428;
  uint64_t v429;
  double v430;
  CA::Render::KeyValueArray *v431;
  int int_key;
  int v433;
  uint64_t v434;
  CA::Render::KeyValueArray *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  double v441;
  CA::Render::Object *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  _BOOL4 v453;
  BOOL v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  double v460;
  double v461;
  int color_key;
  int v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  unint64_t v467;
  CA::Render::Object *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  unint64_t v480;
  unint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  unint64_t v485;
  CA::Render::Object *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  unint64_t v494;
  CA::Render::Object *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  unint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  unint64_t v503;
  unsigned int *v504;
  unsigned int v505;
  unsigned int v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  _DWORD *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  _DWORD *v519;
  uint64_t v520;
  uint64_t v521;
  float64_t v522;
  int32x4_t v523;
  int32x4_t v524;
  int v525;
  int64x2_t v526;
  int8x16_t v527;
  int8x16_t v528;
  int32x2_t v529;
  _OWORD *v530;
  double v531;
  uint64_t v532;
  unsigned int *v533;
  unsigned int *v534;
  unsigned int v535;
  unsigned int v536;
  uint64_t v537;
  __int32 v538;
  float64_t v539;
  __int32 v540;
  float64_t v541;
  __int32 v542;
  int64x2_t v543;
  int8x16_t v544;
  int32x4_t v545;
  uint32x2_t v546;
  uint32x2_t v547;
  int32x2_t v548;
  uint32x2_t v549;
  unsigned int v550;
  uint64_t v551;
  uint64_t v552;
  int v553;
  __int32 v554;
  char v555;
  uint64_t **v556;
  _QWORD *v557;
  uint64_t v558;
  char v559;
  __int32 v560;
  uint64_t v561;
  uint64_t v562;
  int v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  float v569;
  float v571;
  float v572;
  float v573;
  float v574;
  float v575;
  float v576;
  float v577;
  float v578;
  float v580;
  float v582;
  float v584;
  float v585;
  float v586;
  float v587;
  float v588;
  unsigned __int8 v589;
  uint64_t **v590;
  uint64_t v591;
  void (***v592)(CA::Render::Updater::TransformOp *__hidden);
  uint64_t *v593;
  _QWORD *v594;
  uint64_t *v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  const CA::Bounds *v599;
  uint64_t v600;
  unsigned int *v601;
  unsigned int v602;
  int v603;
  unsigned int v604;
  unsigned int v605;
  uint64_t *v606;
  float64x2_t *v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  CA::Shape *v611;
  _QWORD *v612;
  CA::Render::LayerNode *v613;
  char v614;
  uint64_t *v615;
  unsigned int *v616;
  unsigned int v617;
  malloc_zone_t *malloc_zone;
  uint64_t *v619;
  CA::Shape *v620;
  float64x2_t v622;
  void (***v623)(CA::Render::Updater::TransformOp *__hidden);
  unsigned int v624;
  uint64_t v625;
  uint64_t **v626;
  const void *v627;
  float v628;
  uint64_t v629;
  CFTypeRef v630;
  float v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v634;
  uint64_t v635;
  double *v637;
  float64x2_t v638;
  void (***k)(CA::Render::Updater::TransformOp *__hidden);
  uint64_t v640;
  unsigned int v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float32x2_t v645;
  int32x2_t v646;
  uint64_t v647;
  float v648;
  float v649;
  unsigned __int16 v650;
  uint64_t **v651;
  uint64_t v652;
  uint64_t *v653;
  __n128 *v654;
  int8x16_t v655;
  void (***m)(CA::Render::Updater::TransformOp *__hidden);
  uint64_t *v658;
  uint64_t v659;
  uint64_t **v660;
  _QWORD *v661;
  _QWORD *v662;
  unsigned int *v663;
  unsigned int v664;
  float64_t v665;
  uint64_t *v666;
  uint64_t v667;
  uint64_t **v668;
  uint64_t v669;
  uint64_t v670;
  CA::Render::Context *v671;
  int32x2_t *v672;
  int64x2_t v673;
  int64x2_t v674;
  int64x2_t v675;
  _QWORD *v676;
  float64_t v677;
  CA::Render::Context *v678;
  uint64_t v679;
  uint64_t v680;
  unsigned int *v681;
  unsigned int v682;
  unsigned int v683;
  unsigned int v684;
  int v685;
  CA::Render::Context *v686;
  CA::Shape **v687;
  const CA::Shape *v688;
  const CA::Shape *v689;
  const CA::Shape *v690;
  const int *v691;
  const CA::Shape *v692;
  CA::Shape **v693;
  CA::Shape *v694;
  const CA::Bounds *v695;
  CA::Shape **v696;
  int32x2_t *v697;
  int v698;
  int v699;
  int v700;
  int8x16_t v701;
  uint64_t v702;
  int64x2_t v703;
  float64x2_t v704;
  double v705;
  double v706;
  float64x2_t *v707;
  float64x2_t v708;
  int64x2_t v709;
  unint64_t v710;
  int8x16_t v711;
  int8x16_t v712;
  int32x4_t v713;
  uint64_t **v714;
  uint64_t v715;
  uint64_t v716;
  int32x2_t v717;
  int v719;
  CA::Render::Texture *v720;
  BOOL *v721;
  float v723;
  CA::Transform *v724;
  float64x2_t v725;
  void (***n)(CA::Render::Updater::TransformOp *__hidden);
  int rotation_flags;
  int v728;
  int v729;
  uint64_t v730;
  BOOL v733;
  uint64_t v734;
  int is_protected;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  unsigned int *v739;
  unsigned int v740;
  unsigned int v741;
  unsigned int *v742;
  unsigned int *v743;
  unsigned int v744;
  unsigned int v745;
  uint64_t v746;
  uint64_t v747;
  unsigned int *v748;
  unsigned int v749;
  uint64_t v750;
  uint64_t **v751;
  __int8 v752;
  int v753;
  int v754;
  int v755;
  const void *v756;
  const void *v757;
  uint64_t v758;
  unsigned int *v759;
  unsigned int v760;
  uint64_t v761;
  uint64_t v762;
  int32x2_t v763;
  uint32x2_t v764;
  int32x2_t *v765;
  int32x2_t v766;
  uint32x2_t v767;
  uint32x2_t v768;
  uint64_t v769;
  unint64_t v770;
  unint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t **v776;
  int32x2_t v777;
  unsigned int *v778;
  unsigned int v779;
  malloc_zone_t *v780;
  uint64_t *v781;
  uint64_t **v782;
  float v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t *v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  float64_t v791;
  unsigned int v792;
  _QWORD *v793;
  const CA::Bounds *v794;
  uint64_t v795;
  malloc_zone_t *v796;
  _QWORD *v797;
  int *v798;
  uint64_t v799;
  uint64_t v800;
  CA::Shape *v801;
  __n128 v802;
  unsigned int *v803;
  unsigned int *v804;
  unsigned int v805;
  unsigned int v806;
  unsigned int *v807;
  unsigned int v808;
  uint64_t v809;
  uint64_t v810;
  int v811;
  int v812;
  int v813;
  int8x16_t v814;
  uint64_t v815;
  int64x2_t v816;
  int8x16_t v817;
  double v818;
  double v819;
  __n128 *v820;
  const CA::Bounds *v821;
  int32x4_t v822;
  int32x4_t v823;
  uint64_t *v824;
  uint64_t v825;
  int v826;
  uint64_t v827;
  CA::Render::Context *v828;
  uint64_t v829;
  uint64_t v830;
  __int32 *v831;
  uint64_t **v832;
  __int32 *v833;
  int32x2_t v834;
  __int32 *v835;
  __int32 *v836;
  unsigned int *v837;
  unsigned int v838;
  unsigned int v839;
  CA::Shape **v840;
  const CA::Bounds *v841;
  const CA::Shape *v842;
  int64x2_t v843;
  int8x16_t v844;
  int32x4_t v845;
  const int *v846;
  CA::Shape **v847;
  const CA::Shape *v848;
  uint64_t v849;
  uint64_t v850;
  CA::Shape *v851;
  CA::Shape **v852;
  const CA::Shape *v853;
  const CA::Shape *v854;
  const CA::Shape *v855;
  const int *v856;
  CA::Shape *v857;
  const CA::Bounds *v858;
  const CA::Shape *v859;
  CA::Shape **v860;
  CA::Shape *v861;
  const CA::Bounds *v862;
  uint64_t v863;
  uint64_t v864;
  int v865;
  uint64_t v866;
  uint64_t v867;
  float v868;
  float64x2_t v869;
  float64x2_t v870;
  double v871;
  int v872;
  int v873;
  int8x16_t v874;
  uint64_t v875;
  int64x2_t v876;
  int8x16_t v877;
  double v878;
  double v879;
  double v880;
  float64x2_t v881;
  float64x2_t v882;
  _BOOL4 v883;
  float v884;
  double v885;
  double v886;
  double v887;
  double v888;
  double v889;
  int32x2_t *v890;
  int v891;
  int v892;
  int v893;
  int8x16_t v894;
  uint64_t v895;
  int64x2_t v896;
  float64x2_t v897;
  double v898;
  double v899;
  float64x2_t *v900;
  float64x2_t v901;
  int64x2_t v902;
  unint64_t v903;
  int8x16_t v904;
  int8x16_t v905;
  int32x4_t v906;
  unint64_t v907;
  uint64_t v908;
  unint64_t v909;
  unint64_t v910;
  _QWORD *v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  unsigned int v919;
  unsigned int *v920;
  unsigned int v921;
  unsigned int v922;
  unsigned int *v923;
  unsigned int *v924;
  unsigned int *v925;
  unsigned int v926;
  unsigned int v927;
  uint64_t v928;
  uint64_t **v929;
  const Rect *v930;
  float v931;
  const char *v932;
  float64_t v933;
  float64_t v934;
  uint64_t v935;
  uint64_t v936;
  unsigned int v937;
  NSObject *v938;
  uint64_t v939;
  uint64_t v940;
  const char *v941;
  CA::Shape *v942;
  CA::Shape *v943;
  double v944;
  float64_t v945;
  float64_t v946;
  __int32 v947;
  double v948;
  int v949;
  unint64_t *v950;
  unint64_t v951;
  unint64_t v952;
  unint64_t *v953;
  unint64_t v954;
  unint64_t v955;
  unsigned int v956;
  NSObject *v957;
  unsigned int v958;
  unsigned int v959;
  unsigned int v960;
  uint64_t v961;
  uint64_t v962;
  NSObject *v964;
  _BOOL4 v965;
  NSObject *v966;
  NSObject *v967;
  int v968;
  __int128 v969;
  uint64_t v970;
  char *v971;
  int v972;
  unsigned int v973;
  uint64_t v975;
  const char *v976;
  NSObject *v977;
  const char *v978;
  float64_t v979;
  float64_t v980;
  uint64_t v981;
  double v982;
  uint64_t v983;
  NSObject *v984;
  int v985;
  __int32 v986;
  double v987;
  uint64_t v988;
  uint64_t v989;
  void (**v990)(CA::Render::Updater::TransformOp *__hidden);
  void (***v991)(CA::Render::Updater::TransformOp *__hidden);
  uint64_t v992;
  float64x2_t v993;
  float64x2_t v994;
  float64x2_t v995;
  float64x2_t v996;
  float64x2_t v997;
  _BYTE v998[88];
  void **v999;
  __int128 v1000;
  unsigned int **v1001;
  CA::Render::KeyValueArray *v1002;
  uint64_t v1003;
  int32x4_t v1004;
  int32x4_t v1005;
  uint64_t v1006;
  __int128 v1007;
  uint64_t v1008;
  __n128 v1009;
  float64x2_t v1010;
  float64x2_t v1011;
  float64x2_t v1012;
  float64x2_t v1013;
  uint64_t v1014;
  __n128 v1015;
  unint64_t v1016;
  float64x2_t v1017;
  _QWORD *v1018;
  __int128 v1019;
  __n128 *v1020;
  CA::Shape **v1021;
  __n128 v1022;
  uint64_t v1023;
  float64x2_t v1024;
  float64x2_t v1025;
  int8x16_t v1026;
  float64x2_t v1027;
  float64x2_t v1028;
  float64x2_t v1029;
  float64x2_t v1030;
  __int128 v1031;
  uint64_t *v1032;
  uint64_t v1033;
  int64_t v1034;
  uint64_t v1035;
  _OWORD *v1036;
  float64x2_t v1037;
  __n128 v1038;
  int32x4_t v1039;
  float64x2_t v1040;
  float64x2_t v1041;
  float64x2_t v1042[2];
  int8x16_t v1043;
  float64x2_t v1044;
  float64x2_t v1045;
  float64x2_t v1046;
  float64x2_t v1047;
  float64x2_t v1048;
  float64x2_t v1049;
  __int128 v1050;
  __int128 v1051;
  __int128 v1052;
  _QWORD v1053[8];
  void (***v1054)(CA::Render::Updater::TransformOp *__hidden);
  float64x2_t v1055;
  int32x4_t v1056;
  unsigned __int8 v1057;
  uint64_t v1058;
  const CA::Render::Layer *v1059;
  int8x16_t v1060;
  int v1061;
  char v1062;
  unsigned __int8 v1063;
  float64x2_t v1064[6];
  _OWORD v1065[3];
  uint64_t v1066;
  uint64_t v1067;

  v1067 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 0;
  v6 = a3;
  v8 = (uint64_t)a2;
  v1018 = a5;
  v9 = *(double *)(a3 + 32);
  v10 = (*a1)[133].u32[0] | ((unint64_t)(*a1)[133].u16[2] << 32);
  v1024.f64[0] = v9;
  if ((v10 & 4) != 0)
  {
    v14 = 0;
    v11 = 0;
LABEL_19:
    v16 = 268435516;
    goto LABEL_20;
  }
  v11 = *(int32x2_t **)(*(_QWORD *)&v9 + 144);
  if (!v11)
  {
    v14 = 0;
    goto LABEL_19;
  }
  v12 = 12;
  if (v11[10].i32[0] == *((_DWORD *)a1 + 2))
    v12 = 13;
  v13 = v11[v12];
  v14 = (*(_QWORD *)&v11[12] >> 53) & 7;
  _ZF = (*(_QWORD *)&v13 & 0x1800000000) == 0 || (v10 & 0x40000000000) == 0;
  if (_ZF)
    v16 = *((_QWORD *)a2 + 8) & 8 | *(_QWORD *)&v13 | *((_QWORD *)a2 + 8) & ((unsigned __int32)v13.i32[0] >> 1) & 0x20;
  else
    v16 = *((_QWORD *)a2 + 8) & 8 | *(_QWORD *)&v13 | *((_QWORD *)a2 + 8) & ((unsigned __int32)v13.i32[0] >> 1) & 0x20 | 4;
  if ((v10 & 0x400000) != 0 && !*(_QWORD *)(a3 + 224) && (*(_BYTE *)(a3 + 24) & 0x40) != 0)
    v16 |= 0xCuLL;
LABEL_20:
  v17 = CA::Render::FlattenManager::layer_is_flattened(*(CA::Render::FlattenManager **)&v1024.f64[0], a2);
  v20 = *(_BYTE *)(*(_QWORD *)&v1024.f64[0] + 42);
  *(_QWORD *)&v1025.f64[0] = a1;
  v1020 = a4;
  v1023 = v6;
  LODWORD(v1021) = v17;
  if ((v20 & 8) == 0 || v17)
  {
    v24.i32[1] = 0;
    v24.i64[1] = 0;
    v1019 = 0u;
    if (v17 && (v25 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)&v1024.f64[0] + 144) + 72), (_DWORD)v25))
    {
      os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::flattened_lock);
      v1019 = 0u;
      if (CA::Render::flattened_cache && *(_QWORD *)(CA::Render::flattened_cache + 24))
      {
        v26 = v14;
        v27 = (uint64_t *)x_hash_table_lookup(CA::Render::flattened_cache, v25, 0);
        if (v27)
        {
          v28 = v27;
          v1016 = v27[5];
          v29 = v27[7];
          ProtectionOptions = *v27;
          if (ProtectionOptions)
            ProtectionOptions = IOSurfaceGetProtectionOptions();
          v1019 = *(_OWORD *)(v28 + 1);
          if ((_BYTE)xmmword_1ECDC6AF0)
          {
            v939 = v29;
            v22 = ProtectionOptions;
            v1008 = v8;
            v940 = *((unsigned int *)v28 + 12);
            v1048 = 0uLL;
            if (v1016)
              CA::Shape::get_bounds(v1016, (int *)&v1048);
            if (v939)
              v941 = (const char *)(v939 + 28);
            else
              v941 = "";
            if (x_log_hook_p())
            {
              *(_QWORD *)&v998[72] = DWORD2(v1019);
              *(_QWORD *)&v998[80] = HIDWORD(v1019);
              *(_QWORD *)&v998[56] = v1019;
              *(_QWORD *)&v998[64] = DWORD1(v1019);
              *(_QWORD *)&v998[40] = v22;
              *(_QWORD *)&v998[48] = v940;
              *(_QWORD *)&v998[24] = LODWORD(v1048.f64[1]);
              *(_QWORD *)&v998[32] = HIDWORD(v1048.f64[1]);
              *(_QWORD *)&v998[8] = LODWORD(v1048.f64[0]);
              *(_QWORD *)&v998[16] = HIDWORD(v1048.f64[0]);
              *(_QWORD *)&v997.f64[1] = v25;
              *(_QWORD *)v998 = v941;
              x_log_();
            }
            else
            {
              v957 = x_log_category_flatten;
              if (os_log_type_enabled((os_log_t)x_log_category_flatten, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(v1064[0].f64[0]) = 67111938;
                HIDWORD(v1064[0].f64[0]) = v25;
                LOWORD(v1064[0].f64[1]) = 2080;
                *(_QWORD *)((char *)&v1064[0].f64[1] + 2) = v941;
                WORD1(v1064[1].f64[0]) = 1024;
                HIDWORD(v1064[1].f64[0]) = LODWORD(v1048.f64[0]);
                LOWORD(v1064[1].f64[1]) = 1024;
                *(_DWORD *)((char *)&v1064[1].f64[1] + 2) = HIDWORD(v1048.f64[0]);
                HIWORD(v1064[1].f64[1]) = 1024;
                LODWORD(v1064[2].f64[0]) = LODWORD(v1048.f64[1]);
                WORD2(v1064[2].f64[0]) = 1024;
                *(_DWORD *)((char *)v1064[2].f64 + 6) = HIDWORD(v1048.f64[1]);
                WORD1(v1064[2].f64[1]) = 2048;
                *(_QWORD *)((char *)&v1064[2].f64[1] + 4) = v22;
                WORD2(v1064[3].f64[0]) = 1024;
                *(_DWORD *)((char *)v1064[3].f64 + 6) = v940;
                WORD1(v1064[3].f64[1]) = 1024;
                HIDWORD(v1064[3].f64[1]) = v1019;
                LOWORD(v1064[4].f64[0]) = 1024;
                *(_DWORD *)((char *)v1064[4].f64 + 2) = DWORD1(v1019);
                HIWORD(v1064[4].f64[0]) = 1024;
                LODWORD(v1064[4].f64[1]) = DWORD2(v1019);
                WORD2(v1064[4].f64[1]) = 1024;
                *(_DWORD *)((char *)&v1064[4].f64[1] + 6) = HIDWORD(v1019);
                _os_log_impl(&dword_184457000, v957, OS_LOG_TYPE_DEFAULT, "[%d] fetched flatten info [%s] [%d %d %d %d] [%llu] [%x] [%d %d %d %d]", (uint8_t *)v1064, 0x52u);
              }
            }
            v8 = v1008;
            v23 = *(int32x2_t ***)&v1025.f64[0];
            a4 = v1020;
          }
          else
          {
            v22 = ProtectionOptions;
            v23 = *(int32x2_t ***)&v1025.f64[0];
          }
        }
        else
        {
          v23 = a1;
          v1016 = 0;
          v22 = 0;
        }
        v14 = v26;
        v6 = v1023;
      }
      else
      {
        v23 = a1;
        v1016 = 0;
        v22 = 0;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::flattened_lock);
    }
    else
    {
      v23 = a1;
      v22 = 0;
      v1016 = 0;
    }
    v1022.n128_u32[0] = 0;
  }
  else
  {
    v21 = a1;
    v22 = 0;
    v1016 = 0;
    v23 = v21;
    v1022.n128_u32[0] = ((*v21)[133].i32[0] & 4) == 0;
    v24.i32[1] = 0;
    v24.i64[1] = 0;
    v1019 = 0u;
  }
  if ((*(_QWORD *)(v6 + 24) & 0x4000000) != 0)
  {
    v16 |= 0x3CuLL;
    v31 = 0;
  }
  else
  {
    v31 = v11;
  }
  if (byte_1ECDC6AE7)
    goto LABEL_1584;
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  if (*(float *)&dword_1ECDC6A14)
LABEL_1584:
    v16 |= 0x1000003CuLL;
  *(_QWORD *)(v8 + 80) = v16;
  v32 = (uint64_t **)*v23;
  ++(*v23)[94].i32[0];
  if (v1022.n128_u32[0])
    *((_DWORD *)v32 + 67) |= 0x10000000u;
  if ((v16 & 0x3C) == 0)
  {
    v45 = *(const CA::Shape **)&v1024.f64[0];
    if (*(_QWORD *)(*(_QWORD *)&v1024.f64[0] + 128))
      CA::Render::Updater::add_background_filters_((uint64_t ***)v23, v8, *(uint64_t *)&v1024.f64[0], v6, 0, 0);
    v46 = *(_QWORD *)(v6 + 24);
    if ((v46 & 0x20) != 0)
    {
      CA::Render::LayerNode::depth_sort_sublayers((CA::Render::LayerNode *)v6);
      v46 = *(_QWORD *)(v6 + 24);
    }
    if ((v46 & 0x10) != 0)
    {
      if (((*v23)[133].i32[0] & 4) == 0)
        v16 |= (unint64_t)(*(_DWORD *)(*(_QWORD *)&v1024.f64[0] + 36) & 0x100000) << 20;
      goto LABEL_1228;
    }
    if (v31)
    {
      v47 = v31[15].i32[0];
      v48 = v31[15].i32[1];
      if (v47 <= v48)
        v49 = v31[15].i32[1];
      else
        v49 = v31[15].i32[0];
      v24.i32[0] = 1073741822;
      v19.i32[0] = v49;
      v50 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v19, v24), 0);
      v51 = v31[14];
      v52.i64[0] = v51.i32[0];
      v52.i64[1] = v51.i32[1];
      v53 = vbslq_s8(v50, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v52));
      v54 = (double)v47;
      if (v49 > 1073741822)
        v54 = 1.79769313e308;
      v1064[0] = (float64x2_t)v53;
      if (v49 <= 1073741822)
        v55 = (double)v48;
      else
        v55 = 1.79769313e308;
      v1064[1].f64[0] = v54;
      v1064[1].f64[1] = v55;
      CA::Render::Updater::LayerShapes::union_bounds(a4, v1064, 0);
    }
    v56 = *(CA::Shape ***)(v6 + 208);
    if (v56)
    {
      if (a4[3].n128_u64[1])
      {
        CA::shape_union((CA::Shape **)&a4[3].n128_u64[1], v56, v45);
        v56 = *(CA::Shape ***)(v6 + 208);
      }
      CA::Render::Update::fullfill_backdrops((uint64_t)*v23, (const CA::Shape *)v56);
      CA::Render::Update::add_opaque_shape((CA::Shape **)*v23, *(CA::Shape ***)(v6 + 208), v57);
    }
    v58 = (CA::Shape **)&a4[4];
    if (!a4[4].n128_u64[0] || (v60 = (CA::Shape ***)(v1023 + 224), (v59 = *(CA::Shape ***)(v1023 + 224)) == 0))
    {
LABEL_1212:
      v6 = v1023;
      if (a4[4].n128_u64[1])
      {
        v696 = *(CA::Shape ***)(v1023 + 232);
        if (v696)
          CA::shape_union((CA::Shape **)&a4[4].n128_u64[1], v696, v45);
      }
      v697 = (int32x2_t *)a4[5].n128_u64[0];
      if (v697)
      {
        v698 = *(_DWORD *)(v1023 + 168);
        v699 = *(_DWORD *)(v1023 + 172);
        if (v698 <= v699)
          v700 = *(_DWORD *)(v1023 + 172);
        else
          v700 = *(_DWORD *)(v1023 + 168);
        v24.i32[0] = 1073741822;
        v19.i32[0] = v700;
        v701 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v19, v24), 0);
        v702 = *(_QWORD *)(v1023 + 160);
        v703.i64[0] = (int)v702;
        v703.i64[1] = SHIDWORD(v702);
        v704 = (float64x2_t)vbslq_s8(v701, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v703));
        v705 = (double)v698;
        v706 = (double)v699;
        if (v700 > 1073741822)
        {
          v705 = 1.79769313e308;
          v706 = 1.79769313e308;
        }
        v1064[0] = v704;
        v1064[1].f64[0] = v705;
        v1064[1].f64[1] = v706;
        v707 = *(float64x2_t **)(v1023 + 56);
        if (v707)
        {
          CA::Mat4Impl::mat4_apply_to_rect(v707, (int8x16_t *)v1064, (double *)v45);
          v708 = v1064[0];
        }
        else
        {
          v708 = vaddq_f64(v704, *(float64x2_t *)(v1023 + 64));
        }
        v709 = vceqzq_f64(v1064[1]);
        v710 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v709, 1), (int8x16_t)v709).u64[0];
        v711 = 0uLL;
        if ((v710 & 0x8000000000000000) == 0)
        {
          v712 = vorrq_s8((int8x16_t)vcltzq_f64(v1064[1]), (int8x16_t)vcgezq_f64(v1064[1]));
          if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v712), 1), v712).u64[0] & 0x8000000000000000) == 0)
          {
            v713 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v708, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
            v711 = (int8x16_t)vuzp1q_s32(v713, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v708, v1064[1]), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v713));
          }
        }
        CA::BoundsImpl::Union(v697, *(int32x2_t *)v711.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v711, v711, 8uLL));
      }
LABEL_1228:
      if ((v16 & 2) != 0)
      {
        if (v31)
        {
          if (*(_QWORD *)&v31[2] == *(_QWORD *)&v1024.f64[0])
          {
            *(_QWORD *)&v31[12] &= ~2uLL;
            if ((*(_BYTE *)(v8 + 64) & 2) == 0)
            {
              v714 = (uint64_t **)*v23;
              CA::Render::Context::invalidate((CA::Render::Context *)v23[2], v31 + 14, v45);
              CA::Render::Update::invalidate_backdrops((CA::Render::Update *)v714, (const CA::Bounds *)&v31[14], 0, 0xFFFFFFFF);
            }
          }
        }
      }
      v715 = v16 | 0x20;
      if ((v16 & 0x3F) == 0)
        v715 = v16;
      *v1018 |= (2 * v715) & 0x15480000000 | v715 & 0x407C15581C06020;
      v716 = *(_QWORD *)(v8 + 48);
      if (v716)
        *(_QWORD *)(v716 + 24) |= *(_QWORD *)(v6 + 24) & 0x10481400;
      if (v31)
      {
        v717 = v31[12];
        if (v717.i16[0] < 0)
          (*v23)[39].i32[0] = (float)((*v23)[25].i32[1] * (*v23)[25].i32[0]);
        if ((*(_QWORD *)&v717 & 0x100000000) != 0)
          CA::shape_union((CA::Shape **)&(*v23)[6], (CA::Shape **)&v31[14], v45);
      }
      return 0;
    }
    v61 = (uint64_t)a4;
    v64 = (const CA::Shape *)a4[4].n128_u64[1];
    v63 = (CA::Shape **)&a4[4].n128_u64[1];
    v62 = v64;
    if (!v64)
    {
      CA::Render::Updater::LayerShapes::union_visible_shape(v61, *(CA::Shape ***)(v1023 + 224), v45);
      a4 = (__n128 *)v61;
LABEL_1211:
      CA::Render::Update::add_visible_shape((CA::Shape **)*v23, *v60, v168);
      goto LABEL_1212;
    }
    if (!v31 || !*(_QWORD *)(v1023 + 232) || (v31[12].i32[0] & 0x78000) == 0)
    {
LABEL_1206:
      v693 = (CA::Shape **)CA::Shape::subtract((CA::Shape *)v59, v62, (uint64_t)v45, v18);
      if (*v58)
      {
        CA::shape_union(v58, v693, v692);
        v694 = *v58;
        if ((*v58 & 1) == 0 && *((int *)v694 + 1) >= 257)
        {
          v1064[0] = 0uLL;
          CA::Shape::get_bounds((uint64_t)v694, (int *)v1064);
          CA::Shape::unref(*v58);
          *v58 = (CA::Shape *)CA::Shape::new_shape((CA::Shape *)v1064, v695);
        }
      }
      CA::Shape::unref((CA::Shape *)v693);
      a4 = v1020;
      goto LABEL_1211;
    }
    v65 = CA::Shape::intersect((uint64_t)v62, *(_QWORD *)(v1023 + 232));
    v66 = (CA::Shape *)v65;
    if ((v65 & 1) != 0)
    {
      if (v65 == 1)
      {
LABEL_1205:
        CA::Shape::unref(v66);
        v59 = *v60;
        v62 = *v63;
        goto LABEL_1206;
      }
    }
    else if (*(_DWORD *)(v65 + 4) == 6)
    {
      goto LABEL_1205;
    }
    v687 = (CA::Shape **)CA::Shape::dilate(v65, (const CA::Bounds *)1, 1u);
    CA::Render::Updater::LayerShapes::union_visible_shape((uint64_t)v1020, v687, v688);
    CA::shape_union((CA::Shape **)v60, v687, v689);
    CA::shape_subtract(v63, v687, v690, v691);
    CA::Shape::unref((CA::Shape *)v687);
    *(_QWORD *)&v31[12] |= 0x40uLL;
    goto LABEL_1205;
  }
  v1058 = v6;
  v1059 = *(const CA::Render::Layer **)&v1024.f64[0];
  v1060 = (int8x16_t)(unint64_t)v16;
  v1063 = *(_BYTE *)(v8 + 89) & 4;
  v33 = *(_QWORD *)(v6 + 24);
  v1015.n128_u64[0] = v22;
  if ((v33 & 0x40) == 0)
  {
    v16 &= 0xFFFFFFFFFFF87FFFLL;
    v1060.i64[0] = v16;
  }
  *(_QWORD *)(v6 + 24) = v33 & 0xFFFFFFFFEFA20BEFLL;
  v34 = (CA::Render::Context *)*((unsigned int *)v23 + 2);
  v35 = (CA::Render::Handle *)v23[2];
  *((_DWORD *)v35 + 154) = (_DWORD)v34;
  v36 = *(_DWORD *)(v6 + 112);
  v37 = (_QWORD *)v6;
  if (v31)
  {
    if ((v16 & 0x10000000) != 0)
    {
      CA::Render::Update::invalidate_backdrops((CA::Render::Update *)v32, (const CA::Bounds *)&v31[14], *(CA::Render::BackdropState **)(v6 + 256), *(_DWORD *)(v6 + 112));
      v32 = (uint64_t **)*v23;
      v35 = (CA::Render::Handle *)v23[2];
      v34 = (CA::Render::Context *)*((unsigned int *)v23 + 2);
    }
    CA::Render::Updater::update_handle((CA::Render::Updater *)v32, v31, v35, v34);
    v37 = (_QWORD *)v1058;
  }
  v38 = (CA::Shape *)v37[27];
  if (v38)
  {
    CA::Shape::unref(v38);
    v37 = (_QWORD *)v1058;
    *(_QWORD *)(v1058 + 216) = 0;
  }
  v39 = (CA::Shape *)v37[28];
  v40 = v1024.f64[0];
  if (v39)
  {
    CA::Shape::unref(v39);
    v37 = (_QWORD *)v1058;
    *(_QWORD *)(v1058 + 224) = 0;
  }
  v41 = (CA::Shape *)v37[29];
  if (v41)
  {
    CA::Shape::unref(v41);
    v37 = (_QWORD *)v1058;
    *(_QWORD *)(v1058 + 232) = 0;
  }
  if ((*((_WORD *)v1059 + 19) & 0x110) != 0)
    v1060.i64[1] |= 0x8000000000uLL;
  LODWORD(v1013.f64[0]) = v36;
  is_2d_affine = (CA::Shape *)v37[26];
  if (is_2d_affine)
  {
    CA::Shape::unref(is_2d_affine);
    *(_QWORD *)(v1058 + 208) = 0;
  }
  v43 = *(void (****)(CA::Render::Updater::TransformOp *__hidden))v8;
  v1054 = *(void (****)(CA::Render::Updater::TransformOp *__hidden))v8;
  v44 = *(CA::Mat4Impl **)(v6 + 56);
  v1014 = v14;
  if (v44)
  {
    CA::Transform::set((uint64_t)v1064, v44, 1);
    if ((v1066 & 0x10) == 0)
    {
LABEL_101:
      CA::Transform::concat((uint64_t)v1064, v8 + 8);
      if ((v1066 & 0x10) != 0)
      {
        MEMORY[0x1E0C80A78](is_2d_affine);
        v992 = 0;
        *(_OWORD *)&v998[56] = 0u;
        v990 = &off_1E1599238;
        v993 = v1064[0];
        v994 = v1064[1];
        v995 = v1064[2];
        v996 = v1064[3];
        v997 = v1064[4];
        *(float64x2_t *)v998 = v1064[5];
        *(_OWORD *)&v998[16] = v1065[0];
        *(_OWORD *)&v998[32] = v1065[1];
        *(_OWORD *)&v998[48] = v1065[2];
        v998[64] = v75 & 0x1F;
        is_2d_affine = (CA::Shape *)CA::Mat4Impl::mat4_is_2d_affine((CA::Mat4Impl *)v1064, v76);
        v73 = 0uLL;
        *(_QWORD *)&v998[72] = is_2d_affine;
        v991 = v43;
        v1054 = &v990;
        v1055 = 0uLL;
        __asm { FMOV            V0.2D, #1.0 }
        v1056 = _Q0;
        v74 = v1057 & 0xF0;
        v1057 &= 0xF0u;
        v43 = &v990;
        v23 = *(int32x2_t ***)&v1025.f64[0];
      }
      else
      {
        v73 = (int32x4_t)v1065[0];
        v1055 = (float64x2_t)v1065[0];
        v1056 = (int32x4_t)v1065[2];
        v74 = v1057 & 0xF0 | v1066 & 0xF;
        v1057 = v74;
      }
      goto LABEL_109;
    }
LABEL_97:
    if (!CA::Mat4Impl::mat4_is_affine((CA::Mat4Impl *)v1064, (const double *)v44)
      && (*((_BYTE *)v1059 + 41) & 4) == 0
      && !CA::Mat4Impl::mat4_is_front_facing((CA::Mat4Impl *)v1064, v72))
    {
      *(_QWORD *)(v6 + 24) |= 0x10uLL;
    }
    goto LABEL_101;
  }
  v67 = *(double *)(v6 + 80);
  if (v67 != 0.0)
  {
    v1064[0] = (float64x2_t)xmmword_18474DF40;
    v1064[1] = 0uLL;
    v1064[2] = (float64x2_t)xmmword_18474DF50;
    memset(&v1064[3], 0, 32);
    v1064[5] = (float64x2_t)xmmword_18474DF40;
    v68 = *(_OWORD *)(v6 + 64);
    *((_QWORD *)&v1065[1] + 1) = 0x3FF0000000000000;
    v1065[0] = v68;
    *(double *)&v1065[1] = v67;
    __asm { FMOV            V0.2D, #1.0 }
    v1065[2] = _Q0;
    LOBYTE(v1066) = 16;
    goto LABEL_97;
  }
  v1056 = *(int32x4_t *)(v8 + 24);
  v1055 = *(float64x2_t *)(v8 + 8);
  v1057 = *(_BYTE *)(v8 + 40);
  v74 = v1057;
  v78 = *(double *)v1056.i64;
  if ((v1057 & 8) == 0)
    v78 = 1.0;
  v79 = (int8x16_t)vmulq_n_f64(*(float64x2_t *)(v6 + 64), v78);
  v80 = vdup_n_s32((v1057 & 4) == 0);
  v81.i64[0] = v80.u32[0];
  v81.i64[1] = v80.u32[1];
  v82 = (int8x16_t)vdupq_lane_s64(v79.i64[0], 0);
  *(double *)v82.i64 = -*(double *)&v79.i64[1];
  v83 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v81, 0x3FuLL)), v79, v82);
  v84 = vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v1057), (int8x8_t)0x100000002));
  v81.i64[0] = v84.i32[0];
  v81.i64[1] = v84.i32[1];
  v73 = (int32x4_t)vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)v81, v83, (int8x16_t)vnegq_f64((float64x2_t)v83)), v1055);
  v1055 = (float64x2_t)v73;
LABEL_109:
  if (v1022.n128_u32[0])
  {
    if ((v74 & 0xF) != 0
      || (v85 = vmovn_s64(vceqzq_f64((float64x2_t)v73)), (v85.i8[0] & 1) == 0)
      || (v85.i8[4] & 1) == 0)
    {
      v1066 = 0;
      memset(v1065, 0, sizeof(v1065));
      memset(v1064, 0, sizeof(v1064));
      CA::Transform::set((CA::Transform *)v1064, (uint64_t)&v1055);
      MEMORY[0x1E0C80A78](v86);
      v992 = 0;
      memset(&v998[56], 0, 24);
      v990 = &off_1E1599238;
      v993 = v1064[0];
      v994 = v1064[1];
      v995 = v1064[2];
      v996 = v1064[3];
      v73 = (int32x4_t)v1064[5];
      v997 = v1064[4];
      *(float64x2_t *)v998 = v1064[5];
      *(_OWORD *)&v998[16] = v1065[0];
      *(_OWORD *)&v998[32] = v1065[1];
      *(_OWORD *)&v998[48] = v1065[2];
      v998[64] = v1066 & 0x1F;
      is_2d_affine = (CA::Shape *)((v1066 & 0x10) == 0 || CA::Mat4Impl::mat4_is_2d_affine((CA::Mat4Impl *)v1064, v87));
      v998[72] = (_BYTE)is_2d_affine;
      v991 = v43;
      v1054 = &v990;
      v1055 = 0uLL;
      __asm { FMOV            V0.2D, #1.0 }
      v1056 = _Q0;
      v1057 = v74 & 0xF0;
      v23 = *(int32x2_t ***)&v1025.f64[0];
    }
  }
  v89 = v1059;
  v90 = *((_QWORD *)v1059 + 16);
  if (v90)
  {
    v91 = *(os_unfair_lock_s **)(v90 + 112);
    if (v91)
    {
      MEMORY[0x1E0C80A78](is_2d_affine);
      memset(&v998[8], 0, 72);
      os_unfair_lock_lock(v91 + 4);
      CA::Render::MeshTransform::update_locked((CA::Render::MeshTransform *)v91, 1);
      os_unfair_lock_unlock(v91 + 4);
      v89 = v1059;
      v73 = *((int32x4_t *)v1059 + 5);
      *(_OWORD *)&v998[48] = *((_OWORD *)v1059 + 4);
      *(_WORD *)&v998[24] = 0;
      v998[26] = 0;
      *(_QWORD *)&v998[32] = &v1055;
      *(_QWORD *)&v998[40] = v91;
      *(int32x4_t *)&v998[64] = v73;
      *(_QWORD *)&v998[8] = &off_1E1599388;
      *(_QWORD *)&v998[16] = v1054;
      v1054 = (void (***)(CA::Render::Updater::TransformOp *__hidden))&v998[8];
      v23 = *(int32x2_t ***)&v1025.f64[0];
    }
  }
  v92 = *(unsigned __int8 *)(v8 + 88);
  v93 = v1023;
  if (*(unsigned __int8 *)(v1023 + 116) < v92)
    v92 = *(unsigned __int8 *)(v1023 + 116);
  v1062 = v92;
  v94.i32[1] = 0;
  v94.i64[1] = 0;
  v1030 = 0u;
  v1031 = 0u;
  v1029 = 0u;
  v1032 = 0;
  v1036 = (_OWORD *)(v1023 + 160);
  if (v92 - 1 <= 0xFD)
  {
    if ((*((_BYTE *)v89 + 43) & 0x20) == 0)
      goto LABEL_134;
    if ((*(_BYTE *)(v1023 + 24) & 0x80) != 0)
      goto LABEL_134;
    v95 = (uint64_t **)*v23;
    if (((*v23)[34].i8[0] & 4) != 0)
      goto LABEL_134;
    v96 = v95[41];
    if (!v96)
    {
      v96 = (uint64_t *)x_heap_malloc_small_(*v95, 0x10uLL);
      v97 = (uint64_t **)*v23;
      if (v96)
      {
        v98 = *v97;
        *v96 = 0;
        v96[1] = (uint64_t)v98;
      }
      v97[41] = v96;
    }
    v99 = ((uint64_t (*)(uint64_t *))MEMORY[0x1E0C80A78])(v96);
    *(_QWORD *)&v998[64] = 0;
    *(_QWORD *)&v998[72] = 0;
    *(_QWORD *)&v998[56] = v99;
    v1032 = (uint64_t *)&v998[56];
  }
  if ((v1060.i8[2] & 0x10) != 0 || v92 != 255 || *(_QWORD *)(v93 + 152))
  {
LABEL_134:
    v100 = 0;
    goto LABEL_135;
  }
  v100 = 1;
LABEL_135:
  v101 = (CA::Shape **)(((unint64_t)(*v23)[133].u32[0] >> 22) & 1);
  v1033 = v100;
  v1034 = (int64_t)v101;
  v1035 = (uint64_t)v101;
  if ((_DWORD)v1021)
  {
    v102 = DWORD2(v1019);
    if (SDWORD2(v1019) <= SHIDWORD(v1019))
      v102 = HIDWORD(v1019);
    v94.i32[0] = 1073741822;
    v73.i32[0] = v102;
    v103.i64[0] = (int)v1019;
    v103.i64[1] = SDWORD1(v1019);
    v104 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v73, v94), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v103));
    v103.i64[0] = SDWORD2(v1019);
    v103.i64[1] = SHIDWORD(v1019);
    v105 = vdup_n_s32(v102 > 1073741822);
    v106 = (int8x16_t)vcvtq_f64_s64(v103);
    v103.i64[0] = v105.u32[0];
    v103.i64[1] = v105.u32[1];
    v1064[0] = (float64x2_t)v104;
    v1064[1] = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v103, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v106);
    CA::Rect::apply_transform(v1064[0].f64, (uint64_t)&v1055);
    CA::Render::Updater::LayerShapes::union_bounds((__n128 *)&v1029, v1064, (const CA::Bounds *)1);
  }
  if (v31 && (v107 = (CA::Render::Context *)v31[3]) != 0 && (*((_WORD *)v107 + 276) & 0x10) != 0)
  {
    v126 = CA::Render::Context::root_layer_handle(v107);
    if (v126)
      v127 = *(_QWORD *)(v126 + 16);
    else
      v127 = 0;
    CA::Render::Updater::prepare_layer_mask((uint64_t)v23, (uint64_t)&v1054, (uint64_t)a4, (uint64_t)&v1029);
    if (v127 == *(_QWORD *)&v40)
    {
      v1009 = v1038;
      v1010 = v1037;
      v1037 = (float64x2_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
      v1038 = (__n128)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      LODWORD(v1017.f64[0]) = 1;
      goto LABEL_144;
    }
  }
  else
  {
    CA::Render::Updater::prepare_layer_mask((uint64_t)v23, (uint64_t)&v1054, (uint64_t)a4, (uint64_t)&v1029);
  }
  LODWORD(v1017.f64[0]) = 0;
  v1009 = 0u;
  v1010 = 0u;
LABEL_144:
  v1027 = 0u;
  v1028 = 0u;
  if ((*(_BYTE *)(v93 + 27) & 2) == 0
    && (v111 = *((_QWORD *)v1059 + 12)) != 0
    && (CA::Render::Updater::prepare_layer_contents(v23, (uint64_t)&v1054, *((_QWORD *)v1059 + 12), (uint64_t)&v1029),
        *(_BYTE *)(v111 + 12) == 25))
  {
    v1027 = v1029;
    v1028 = v1030;
    v108 = (uint64_t)CA::Render::Updater::apply_shapes_ops(v1054, (CA::Render::Updater::LayerShapesOp *)&v1027, v109);
    LODWORD(v1012.f64[0]) = 0;
  }
  else
  {
    LODWORD(v1012.f64[0]) = 1;
  }
  *(_QWORD *)&v1011.f64[0] = &v1035;
  v112 = v1059;
  v113 = *((_QWORD *)v1059 + 16);
  if (v113)
    v114 = *(_QWORD *)(v113 + 80);
  else
    v114 = 0;
  v115 = *((float *)v1059 + 7);
  v116 = *((float *)v1059 + 4) == 0.0;
  if (*((float *)v1059 + 5) != 0.0)
    v116 = 0;
  if (*((float *)v1059 + 6) != 0.0)
    v116 = 0;
  if (v116)
  {
    v117 = v114 == 0;
    if (v115 == 0.0 && !v114)
    {
      if (!v113)
      {
LABEL_266:
        v134 = (int)v1021;
        goto LABEL_267;
      }
      v118 = 0;
      v119 = 0;
      v120 = 1;
      goto LABEL_174;
    }
  }
  else
  {
    v117 = v114 == 0;
  }
  v119 = v115 == 1.0;
  if (v115 == 1.0 && !v117)
  {
    v121 = *(_QWORD *)(v114 + 128);
    v119 = v121
        && (*(_BYTE *)(v121 + 13) & 0x10) != 0
        && *(double *)(v114 + 96) <= *(double *)(v114 + 80)
        && *(double *)(v114 + 104) <= *(double *)(v114 + 88);
  }
  v120 = v115 == 1.0 && v116;
  if (!v113)
  {
    v125 = *((float64x2_t *)v1059 + 5);
    v1064[0] = *((float64x2_t *)v1059 + 4);
    v1064[1] = v125;
    v118 = 1;
    goto LABEL_219;
  }
  v118 = 1;
LABEL_174:
  if (*(float *)(v113 + 236) <= 0.0)
  {
LABEL_180:
    v124 = 0;
    goto LABEL_187;
  }
  v122 = 0;
  if (*(float *)(v113 + 240) == 0.0 && *(float *)(v113 + 244) == 0.0 && *(float *)(v113 + 248) == 0.0)
  {
    v123 = *(float *)(v113 + 252);
    if (v123 == 0.0 && !*(_QWORD *)(v113 + 128))
      goto LABEL_180;
    v122 = v123 == 1.0;
  }
  ++v118;
  v120 &= v122;
  v124 = 1;
LABEL_187:
  v128 = *(unsigned __int8 **)v113;
  if (!*(_QWORD *)v113)
    goto LABEL_213;
  LOBYTE(v1064[0].f64[0]) = 0;
  v108 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v128 + 160))(v128);
  v120 &= ~(_DWORD)v108;
  if (LOBYTE(v1064[0].f64[0]))
    v129 = v108;
  else
    v129 = 0;
  v119 |= v129;
  v118 += v108;
  v130 = v128[12];
  if (v130 <= 7)
  {
    if (v130 == 3)
    {
      v133 = (uint64_t *)*((_QWORD *)v1059 + 16);
      if (v133)
      {
        v133 = (uint64_t *)*v133;
        if (v133)
        {
          if (*((_BYTE *)v133 + 12) != 3)
            v133 = 0;
        }
      }
      if ((*((_BYTE *)v133 + 13) & 5) == 0)
        goto LABEL_212;
      v1063 |= 8u;
      v131 = *((_BYTE *)v133 + 13) & 0x10 | v1063 & 0xEF;
      goto LABEL_211;
    }
    if (v130 == 6)
    {
      v131 = v1063 | 0x20;
LABEL_211:
      v1063 = v131;
    }
  }
  else if (v130 == 8)
  {
    (*v23)[133].i16[2] |= 0x200u;
    v1063 |= 2u;
    v1060.i64[1] |= 4uLL;
    *(_QWORD *)(v1058 + 24) |= 0x1000uLL;
  }
  else
  {
    if (v130 != 19)
    {
      if (v130 == 45)
      {
        v1063 |= 0x42u;
        *(_QWORD *)(v1058 + 24) |= 0x1000uLL;
      }
      goto LABEL_212;
    }
    v132 = v1063 & 0x7F | ((*(_BYTE *)(**((_QWORD **)v1059 + 16) + 16) != 0) << 7);
    v1063 = v132;
    if ((*v23)[50].i8[7])
    {
      v131 = v132 | 2;
      goto LABEL_211;
    }
  }
LABEL_212:
  v112 = v1059;
LABEL_213:
  v134 = (int)v1021;
  if (v118)
  {
    v135 = *((float64x2_t *)v112 + 5);
    v1064[0] = *((float64x2_t *)v112 + 4);
    v1064[1] = v135;
    if (v124)
    {
      v136 = *((_QWORD *)v112 + 16);
      if (v136)
      {
        v137 = *(float *)(v136 + 232);
        if (v137 > 0.0)
        {
          CA::BoundsImpl::inset(v1064[0].f64, -v137, -v137);
          v119 = 0;
        }
      }
      CA::Rect::apply_transform(v1064[0].f64, (uint64_t)&v1055);
      goto LABEL_229;
    }
LABEL_219:
    CA::Rect::apply_transform(v1064[0].f64, (uint64_t)&v1055);
    if (v1033)
    {
      if ((v1033 & 1) != 0)
      {
        if (v1033 == 1)
          goto LABEL_229;
      }
      else if (*(_DWORD *)(v1033 + 4) == 6)
      {
        goto LABEL_229;
      }
      v138 = vceqzq_f64(v1064[1]);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v138, 1), (int8x16_t)v138).u64[0] & 0x8000000000000000) != 0
        || (v139 = vorrq_s8((int8x16_t)vcltzq_f64(v1064[1]), (int8x16_t)vcgezq_f64(v1064[1])),
            (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v139), 1), v139).u64[0] & 0x8000000000000000) != 0))
      {
        v1048 = 0uLL;
      }
      else
      {
        v140 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v1064[0], (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        v1048 = (float64x2_t)vuzp1q_s32(v140, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v1064[0], v1064[1]), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v140));
      }
      v108 = CA::Shape::contains(v1033, (const CA::Bounds *)&v1048);
      if ((v108 & 1) != 0)
      {
LABEL_265:
        v112 = v1059;
        goto LABEL_266;
      }
    }
LABEL_229:
    v141 = 549453824;
    if (v120)
      v141 = 0x800000;
    v1060.i64[1] |= v141;
    if (v118 >= 2)
    {
      v142 = v1032;
      if (v1032)
      {
        *((_BYTE *)v1032 + 16) = 1;
        v143 = (_QWORD *)v142[1];
        if (v143)
        {
          CA::GenericRectTree<CA::Rect>::Pool::delete_node(*v142, v143);
          v142[1] = 0;
        }
      }
    }
    if (v1034)
    {
      if ((v1034 & 1) != 0)
        v144 = v1034 == 1;
      else
        v144 = *(_DWORD *)(v1034 + 4) == 6;
      v146 = v144;
      v145 = v146 ^ 1;
    }
    else
    {
      v145 = 0;
    }
    v108 = CA::Render::Updater::LayerShapes::union_bounds((__n128 *)&v1029, v1064, (const CA::Bounds *)(v1062 != 0));
    if (v1033)
      v147 = v119;
    else
      v147 = 0;
    if (v147 == 1)
    {
      v148 = *((_QWORD *)v1059 + 16);
      if (v148 && (*(float *)(v148 + 228) > 0.0 || *(_QWORD *)(v148 + 72)))
      {
        CA::Render::Updater::corner_clipped_layer_bounds(v1048.f64, v1059);
        v1064[0] = v1048;
        v1064[1] = v1049;
        CA::Rect::apply_transform(v1064[0].f64, (uint64_t)&v1055);
      }
      CA::Render::Updater::union_opaque_rect((uint64_t)v23, (uint64_t)&v1029, v109, v1064[0], v1064[1]);
      if (v1035)
        v150 = v120;
      else
        v150 = 0;
      if (v150 == 1)
      {
        v149.n128_f64[0] = v1064[1].f64[1] * v1064[1].f64[0];
        v151 = v1064[1].f64[1] * v1064[1].f64[0] <= 4096.0 ? 1 : v145;
        if ((v151 & 1) == 0)
        {
          v152 = *((_QWORD *)v1059 + 16);
          if (!v152 || !*(_QWORD *)(v152 + 96))
          {
            for (i = v1054; i; i = (void (***)(CA::Render::Updater::TransformOp *__hidden))i[1])
              ((void (*)(void (***)(CA::Render::Updater::TransformOp *__hidden), float64x2_t *, __n128))(*i)[5])(i, v1064, v149);
            CA::BoundsImpl::intersect((uint64_t)v1064, v1037, (float64x2_t)v1038);
            v1048 = 0uLL;
            CA::Bounds::set_interior((int32x4_t *)&v1048, v154, v1064[0], v1064[1]);
            CA::shape_union(*(CA::Shape ***)&v1011.f64[0], (CA::Shape **)&v1048, v155);
          }
        }
      }
    }
    goto LABEL_265;
  }
LABEL_267:
  v156 = (uint64_t *)*((_QWORD *)v112 + 16);
  if (!v156 || (v157 = *v156) == 0)
  {
    v161 = 0;
    goto LABEL_303;
  }
  if (v1032)
  {
    if (!*((_BYTE *)v1032 + 16))
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v157 + 208))(v157))
      {
        v158 = v1032;
        *((_BYTE *)v1032 + 16) = 1;
        v159 = (_QWORD *)v158[1];
        if (v159)
        {
          CA::GenericRectTree<CA::Rect>::Pool::delete_node(*v158, v159);
          v158[1] = 0;
        }
      }
    }
  }
  memset(v1064, 0, 48);
  v160 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v157 + 176))(v157);
  v161 = v160;
  if (!v160)
  {
    v1048 = 0u;
    v1049 = 0u;
    v1046 = 0u;
    v1047 = 0u;
    if (!(*(unsigned int (**)(uint64_t, const CA::Render::Layer *, float64x2_t *, float64x2_t *))(*(_QWORD *)v157 + 184))(v157, v1059, &v1048, &v1046))goto LABEL_300;
    v166 = (const CA::Bounds *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v157 + 200))(v157);
    CA::Rect::apply_transform(v1048.f64, (uint64_t)&v1055);
    CA::Render::Updater::LayerShapes::union_bounds((__n128 *)&v1029, &v1048, v166);
    if (v1047.f64[0] != 0.0 && v1033)
    {
      CA::Rect::apply_transform(v1046.f64, (uint64_t)&v1055);
      CA::Render::Updater::union_opaque_rect((uint64_t)v23, (uint64_t)&v1029, v167, v1046, v1047);
    }
    if (!(_DWORD)v166)
      goto LABEL_300;
    goto LABEL_299;
  }
  if ((*(unsigned int (**)(uint64_t, const CA::Render::Layer *, float64x2_t *))(*(_QWORD *)v157 + 192))(v157, v1059, v1064))
  {
    v1048 = v1064[0];
    v1049 = vsubq_f64(*(float64x2_t *)((char *)&v1064[1] + 8), v1064[0]);
    CA::Rect::apply_transform(v1048.f64, (uint64_t)&v1055);
    v163 = v1048;
    v162 = (int64x2_t)v1049;
    v1064[0] = v1048;
    *(float64x2_t *)((char *)&v1064[1] + 8) = vaddq_f64(v1049, v1048);
    v1048 = 0u;
    v1049 = 0u;
    v164 = *(double *)&v162.i64[1];
    if (*(double *)v162.i64 >= *(double *)&v162.i64[1])
      v165 = *(double *)&v162.i64[1];
    else
      v165 = *(double *)v162.i64;
    if (v165 > 0.0)
    {
      if (*(double *)v162.i64 > *(double *)&v162.i64[1])
        v164 = *(double *)v162.i64;
      if (v164 >= 1.79769313e308)
      {
        v1048 = (float64x2_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
        v162 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      }
      else
      {
        v1048 = v163;
      }
      v1049 = (float64x2_t)v162;
    }
    CA::Render::Updater::LayerShapes::union_bounds((__n128 *)&v1029, &v1048, (const CA::Bounds *)1);
    if (*(double *)&v1031 > v1064[1].f64[0])
      *(float64_t *)&v1031 = v1064[1].f64[0];
    if (*((double *)&v1031 + 1) < v1064[2].f64[1])
      *((_QWORD *)&v1031 + 1) = *(_QWORD *)&v1064[2].f64[1];
LABEL_299:
    v1060.i64[1] |= 0x20C00000uLL;
  }
LABEL_300:
  v108 = (*(uint64_t (**)(uint64_t, const CA::Render::Layer *))(*(_QWORD *)v157 + 168))(v157, v1059);
  if ((_DWORD)v108)
    v1060.i64[1] |= 0x800000000uLL;
  v134 = (int)v1021;
LABEL_303:
  if (v1015.n128_u64[0])
    v169 = v134;
  else
    v169 = 0;
  if (v169 == 1)
    *(_QWORD *)(v8 + 72) |= (unint64_t)(v1015.n128_u8[0] & 7) << 47;
  v170 = v1059;
  if (*((_BYTE *)v1059 + 33))
  {
    v171 = *((_QWORD *)v1059 + 16);
    if (v171)
      v172 = *(float32x4_t *)(v171 + 200);
    else
      v172 = (float32x4_t)xmmword_18474DFE0;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v172)))) & 1) != 0)
    {
      v173 = *((_QWORD *)v1059 + 5);
      if ((v173 & 0x200000000) != 0)
      {
        v175 = (float64x2_t *)&CA::RectTraits<double>::infinity;
        goto LABEL_330;
      }
      if ((v173 & 0x400000000) != 0)
      {
        v174 = (float64x2_t *)((char *)v1059 + 64);
        goto LABEL_320;
      }
      if (v171)
      {
        v108 = *(_QWORD *)(v171 + 120);
        if (v108)
        {
          v174 = (float64x2_t *)CA::Render::Path::bounding_rect((CA::Render::Path *)v108);
          v170 = v1059;
          v171 = *((_QWORD *)v1059 + 16);
LABEL_320:
          v176 = v174[1];
          v1064[0] = *v174;
          v1064[1] = v176;
          if (v171)
            v177 = *(float *)(v171 + 224);
          else
            v177 = 3.0;
          CA::BoundsImpl::inset(v1064[0].f64, (float)(v177 * -2.8), (float)(v177 * -2.8));
          v178 = (float32x2_t *)*((_QWORD *)v170 + 16);
          if (v178)
            v179 = v178[27];
          else
            v179 = (float32x2_t)0xC040000000000000;
          v1064[0] = vaddq_f64(v1064[0], vcvtq_f64_f32(v179));
          CA::Rect::apply_transform(v1064[0].f64, (uint64_t)&v1055);
          v181 = *((_QWORD *)v170 + 16);
          if (v181)
          {
            v182 = *(_QWORD *)(v181 + 96);
            if (v182)
            {
              if (*(_DWORD *)(v182 + 16))
              {
                MEMORY[0x1E0C80A78](v180);
                *(float64x2_t *)&v998[48] = v1064[0];
                *(float64x2_t *)&v998[64] = v1064[1];
                *(_QWORD *)&v998[24] = &off_1E15992A8;
                *(_QWORD *)&v998[32] = v1054;
                *(_QWORD *)&v998[40] = 0;
                v1054 = (void (***)(CA::Render::Updater::TransformOp *__hidden))&v998[24];
                goto LABEL_331;
              }
            }
          }
          v175 = v1064;
LABEL_330:
          v108 = CA::Render::Updater::LayerShapes::union_bounds((__n128 *)&v1029, v175, (const CA::Bounds *)1);
LABEL_331:
          v1060.i64[1] |= 0x20C00000uLL;
        }
      }
    }
  }
  v183 = v1059;
  v184 = *((_QWORD *)v1059 + 16);
  if (v184
    && *(float *)(v184 + 316) != 0.0
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(*(float32x4_t *)(v184 + 300))))) & 1) != 0
    && (*((_BYTE *)v1059 + 44) & 0x10) != 0)
  {
    v185 = *((float64x2_t *)v1059 + 5);
    v1064[0] = *((float64x2_t *)v1059 + 4);
    v1064[1] = v185;
    CA::BoundsImpl::inset(v1064[0].f64, (float)-*(float *)(v184 + 296), (float)-*(float *)(v184 + 296));
    CA::Rect::apply_transform(v1064[0].f64, (uint64_t)&v1055);
    v187 = *(_QWORD *)(v184 + 96);
    if (v187 && *(_DWORD *)(v187 + 16))
    {
      MEMORY[0x1E0C80A78](v186);
      *(float64x2_t *)&v998[48] = v1064[0];
      *(float64x2_t *)&v998[64] = v1064[1];
      *(_QWORD *)&v998[24] = &off_1E15992A8;
      *(_QWORD *)&v998[32] = v1054;
      *(_QWORD *)&v998[40] = 0;
      v1054 = (void (***)(CA::Render::Updater::TransformOp *__hidden))&v998[24];
    }
    else
    {
      v108 = CA::Render::Updater::LayerShapes::union_bounds((__n128 *)&v1029, v1064, (const CA::Bounds *)1);
      v183 = v1059;
    }
    v1060.i64[1] |= 0x20C00000uLL;
  }
  v188 = v1054;
  *(_QWORD *)&v1019 = v31;
  if ((v161 & 1) != 0)
  {
    v189 = v1024.f64[0];
    goto LABEL_342;
  }
  v200 = *((_QWORD *)v183 + 5);
  if ((v200 & 0xC0000) != 0)
  {
    v201 = v1056.i32[0];
    *(_QWORD *)&v1064[0].f64[0] = v1056.i64[0];
    *(_QWORD *)&v1064[0].f64[1] = v1056.i64[0];
    if (v1054)
    {
      v202 = v1054;
      do
      {
        v108 = ((uint64_t (*)(void (***)(CA::Render::Updater::TransformOp *__hidden), float64x2_t *))(*v202)[6])(v202, v1064);
        v202 = (void (***)(CA::Render::Updater::TransformOp *__hidden))v202[1];
      }
      while (v202);
      v183 = v1059;
    }
    v203 = *((_QWORD *)v183 + 16);
    if (v203)
    {
      v204 = *(float *)(v203 + 284);
    }
    else
    {
      LOBYTE(v201) = *((_BYTE *)v183 + 35);
      v204 = (float)v201;
    }
    v240 = v1064[0].f64[0];
    if (v1064[0].f64[0] <= v1064[0].f64[1])
      v240 = v1064[0].f64[1];
    v241 = v240 / v204;
    if (fabsf(v241 + -1.0) > 0.001)
    {
      v108 = ((uint64_t (*)(uint64_t))MEMORY[0x1E0C80A78])(v108);
      *(_DWORD *)&v998[72] = 0;
      *(_DWORD *)&v998[76] = (int)(float)(v242 + 1.0);
      *(_QWORD *)&v998[56] = &off_1E1599318;
      *(_QWORD *)&v998[64] = v1054;
      v1054 = (void (***)(CA::Render::Updater::TransformOp *__hidden))&v998[56];
    }
    v1063 |= 4u;
    v200 = *((_QWORD *)v183 + 5);
  }
  if ((v200 & 0x800000) != 0)
  {
    v189 = v1024.f64[0];
    if (!((v200 >> 18) & 1 | v1022.n128_u8[0] & 1))
      goto LABEL_438;
    goto LABEL_437;
  }
  v189 = v1024.f64[0];
  if (v1022.n128_u32[0])
LABEL_437:
    *(_QWORD *)(v1058 + 24) |= 0x1000uLL;
LABEL_438:
  v243 = *((_QWORD *)v183 + 16);
  if (!*((_BYTE *)v183 + 33))
  {
    if (!v243)
      goto LABEL_342;
LABEL_444:
    v244 = 0;
    goto LABEL_445;
  }
  if (!v243)
  {
    if ((*((_BYTE *)v183 + 44) & 4) != 0)
      goto LABEL_342;
LABEL_452:
    v246 = MEMORY[0x1E0C80A78](v108);
    *(_QWORD *)&v998[56] = 0;
    *(_QWORD *)&v998[64] = &v1055;
    *(_QWORD *)&v998[40] = &off_1E1599460;
    *(_QWORD *)&v998[48] = v1054;
    *(float *)&v998[72] = v247 * 2.8;
    *(double *)&v998[76] = v246;
    *(_DWORD *)&v998[84] = v248;
    v1054 = (void (***)(CA::Render::Updater::TransformOp *__hidden))&v998[40];
    v1060.i64[1] |= 0x20C00000uLL;
    if ((v249 & 1) != 0)
      goto LABEL_342;
    goto LABEL_453;
  }
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(*(float32x4_t *)(v243 + 200))))) & 1) == 0
    || *(_QWORD *)(v243 + 120))
  {
    goto LABEL_444;
  }
  v244 = (*((_BYTE *)v183 + 44) & 4) == 0;
LABEL_445:
  v245 = *(float *)(v243 + 316) != 0.0
      && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(*(float32x4_t *)(v243 + 300))))) & 1) != 0
      && (*((_BYTE *)v183 + 44) & 0x10) == 0;
  if (v244 || v245)
    goto LABEL_452;
LABEL_453:
  v250 = *(_QWORD *)(v243 + 96);
  if (v250)
  {
    v251 = *(unsigned int *)(v250 + 16);
    if ((_DWORD)v251)
    {
      while (1)
      {
        v252 = *(_QWORD *)(v250 + 8 * (v251 - 1) + 24);
        v253 = *(_DWORD *)(v252 + 12);
        if ((v253 & 0x40100) == 0x100
          && ((v253 & 0x20000) == 0 || *(_QWORD *)(v1058 + 88) || ((*v23)[133].i32[0] & 0x4000) == 0))
        {
          break;
        }
LABEL_465:
        if (!--v251)
        {
          v183 = v1059;
          v189 = v1024.f64[0];
          goto LABEL_342;
        }
      }
      MEMORY[0x1E0C80A78](v108);
      *(_OWORD *)&v998[64] = 0u;
      *(_OWORD *)&v998[32] = 0u;
      *(_QWORD *)&v998[24] = &off_1E15993F0;
      v109 = v1059;
      *(_QWORD *)&v998[48] = &v1055;
      *(_QWORD *)&v998[56] = v1059;
      *(_QWORD *)&v998[64] = v252;
      v108 = *(_QWORD *)(v252 + 48);
      if (v108
        && (v108 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v108 + 8))(v108, v252), !(_DWORD)v108))
      {
        if (*(_QWORD *)&v998[64])
        {
LABEL_463:
          *(_QWORD *)&v998[32] = v1054;
          v1054 = (void (***)(CA::Render::Updater::TransformOp *__hidden))&v998[24];
          v23 = *(int32x2_t ***)&v1025.f64[0];
          if ((*(_BYTE *)(v8 + 64) & 8) != 0)
            *(_DWORD *)(v252 + 20) = *(_DWORD *)(*(_QWORD *)&v1025.f64[0] + 8);
          goto LABEL_465;
        }
      }
      else
      {
        *(_QWORD *)&v998[64] = 0;
      }
      v998[42] = 1;
      goto LABEL_463;
    }
  }
LABEL_342:
  v190 = v1058;
  v191 = *(_QWORD *)(v1058 + 24);
  if ((*((_BYTE *)v183 + 44) & 0x80) != 0)
  {
    v191 |= 0x400000uLL;
    *(_QWORD *)(v1058 + 24) = v191;
  }
  if ((v191 & 0x10) == 0 && !*(_QWORD *)(v1023 + 120) && !v1062)
  {
    v192 = *((_QWORD *)v183 + 16);
    if (!v192)
      goto LABEL_359;
    v193 = *(_QWORD *)(v192 + 104);
    if (v193)
    {
      v194 = *(unsigned int *)(v193 + 16);
      if ((_DWORD)v194)
      {
        if ((*(_BYTE *)(*(_QWORD *)(v193 + 24) + 13) & 1) != 0)
          goto LABEL_360;
        v195 = 0;
        v196 = v193 + 32;
        while (v194 - 1 != v195)
        {
          v197 = *(_QWORD *)(v196 + 8 * v195++);
          if ((*(_BYTE *)(v197 + 13) & 1) != 0)
          {
            if (v195 < v194)
              goto LABEL_360;
            break;
          }
        }
      }
    }
    v198 = *(_QWORD *)(v192 + 88);
    if (!v198
      || (*(_BYTE *)(v198 + 13) & 1) == 0
      || (*((_BYTE *)v183 + 41) & 1) != 0
      || (v108 = CA::Render::Filter::compositing_dod((CA::Render::Filter *)*(unsigned int *)(v198 + 24)),
          (v108 - 5) >= 0xFFFFFFFE))
    {
LABEL_359:
      v191 |= 0x10uLL;
      *(_QWORD *)(v190 + 24) = v191;
    }
  }
LABEL_360:
  if ((v191 & 0x10) != 0)
  {
    v1039 = 0u;
    v1038 = 0u;
    v1037 = 0u;
  }
  else if (((*v23)[133].i32[0] & 4) != 0)
  {
    v199 = v1038.n128_f64[0];
    if (v1038.n128_f64[0] >= v1038.n128_f64[1])
      v199 = v1038.n128_f64[1];
    if (v199 <= 0.0 && (v1063 & 4) == 0)
      *(_QWORD *)(v190 + 24) = v191 | 0x10;
  }
  for (j = v1054; j != v188; j = (void (***)(CA::Render::Updater::TransformOp *__hidden))j[1])
    v108 = ((uint64_t (*)(void (***)(CA::Render::Updater::TransformOp *__hidden), float64x2_t *, _QWORD))(*j)[3])(j, &v1029, (v1063 >> 2) & 1);
  if (v1030.f64[0] == 0.0)
  {
    v228 = v1058;
    *(_QWORD *)(v1058 + 160) = 0;
    *(_QWORD *)(v228 + 168) = 0;
    if (!v188)
      goto LABEL_384;
    goto LABEL_383;
  }
  v1064[0] = v1029;
  v1064[1] = v1030;
  CA::Rect::unapply_transform(v1064[0].f64, (uint64_t)&v1055);
  v206 = vceqzq_f64(v1064[1]);
  v207 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v206, 1), (int8x16_t)v206).u64[0];
  v208 = 0uLL;
  if ((v207 & 0x8000000000000000) == 0)
  {
    v209 = vorrq_s8((int8x16_t)vcltzq_f64(v1064[1]), (int8x16_t)vcgezq_f64(v1064[1]));
    if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v209), 1), v209).u64[0] & 0x8000000000000000) == 0)
    {
      v210 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v1064[0], (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
      v208 = vuzp1q_s32(v210, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v1064[0], v1064[1]), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v210));
    }
  }
  for (*(int32x4_t *)(v1058 + 160) = v208;
        v188;
        v188 = (void (***)(CA::Render::Updater::TransformOp *__hidden))v188[1])
  {
LABEL_383:
    v108 = ((uint64_t (*)(void (***)(CA::Render::Updater::TransformOp *__hidden), float64x2_t *, _QWORD))(*v188)[3])(v188, &v1029, (v1063 >> 2) & 1);
  }
LABEL_384:
  v211 = &v1054;
  v212 = v1054;
  if (!v1054 || !*((_BYTE *)v1054 + 17))
  {
    MEMORY[0x1E0C80A78](v108);
    *(_QWORD *)&v998[64] = v212;
    *(_QWORD *)&v998[72] = 65792;
    *(_QWORD *)&v998[56] = &off_1E15991D0;
    v1054 = (void (***)(CA::Render::Updater::TransformOp *__hidden))&v998[56];
    v212 = (void (***)(CA::Render::Updater::TransformOp *__hidden))&v998[56];
  }
  v213 = (char)v1021;
  v214 = v211 + 9;
  v1021 = (CA::Shape **)&v1034;
  v215 = v1029;
  v216 = v1030;
  v217 = vceqzq_f64(v1030);
  v218 = (int32x4_t)vdupq_laneq_s64(v217, 1);
  v219 = vorrq_s8((int8x16_t)v218, (int8x16_t)v217).u64[0];
  v220 = 0uLL;
  if ((v219 & 0x8000000000000000) == 0)
  {
    v221 = vorrq_s8((int8x16_t)vcltzq_f64(v1030), (int8x16_t)vcgezq_f64(v1030));
    v218 = (int32x4_t)vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v221), 1), v221);
    if ((v218.i64[0] & 0x8000000000000000) == 0)
    {
      v222 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v1029, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
      v218 = (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v1029, v1030), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v222);
      v220 = (__n128)vuzp1q_s32(v222, v218);
    }
  }
  *(__n128 *)(v1023 + 192) = v220;
  v223 = v1058 + 96;
  v224 = *(_QWORD *)(v1058 + 104);
  if (v224 == v1058 + 96)
    v213 = 1;
  if ((v213 & 1) != 0)
  {
    v225 = (int32x2_t *)v1019;
    if (v1034)
    {
      v112 = (const CA::Render::Layer *)v1035;
      if (v1035)
        CA::shape_subtract(v1021, (CA::Shape **)v1035, v109, v110);
    }
    goto LABEL_492;
  }
  v226 = (CA::Shape **)v1035;
  *(_QWORD *)&v1046.f64[0] = v1034;
  v227 = (*v23)[133].i32[0];
  if ((v227 & 0x400000) != 0)
  {
    v1034 = 1;
    v1035 = 1;
  }
  if ((v227 & 4) != 0 && (*(_BYTE *)(v1058 + 24) & 0x18) != 0)
  {
    v225 = (int32x2_t *)v1019;
    if ((*(_QWORD *)&v227 & 0x400000) == 0)
      goto LABEL_492;
    goto LABEL_487;
  }
  v1048.f64[0] = 0.0;
  v1008 = v8;
  *(_QWORD *)&v1007 = v226;
  v1004 = (int32x4_t)v216;
  v1005 = (int32x4_t)v215;
  if (!v1033 || (v1060.i8[2] & 0x10) != 0)
  {
    v1006 = 0;
  }
  else
  {
    v1006 = v1033;
    *(_QWORD *)&v1048.f64[0] = v1033;
    v1033 = 1;
  }
  v229 = 0;
  v230 = v1060.i32[2];
  v1060.i64[1] &= 0xFFFFFFFFFE3FFFFFLL;
  v1015 = (__n128)vdupq_n_s64(0x100000uLL);
  v231 = 1;
  v232 = v1025.f64[0];
  do
  {
    v233 = v224;
    v224 = *(_QWORD *)(v224 + 8);
    CA::Render::Updater::prepare_layer(*(_QWORD *)&v232, &v1054, v233, &v1029, v214);
    if (*(_BYTE *)(*(_QWORD *)&v232 + 12) && (v1060.i32[0] & 0x20000) != 0)
      v1060.i64[0] |= 8uLL;
    v229 |= (*(_QWORD *)&v1061 & 0x28000) != 0;
    if ((v229 & 1) == 0)
      v231 &= (v1061 & 0x800000) == 0;
    if (v1033 && !(v1060.i64[0] & 0x100000 | v1033 & 1) && *(int *)(v1033 + 4) >= 65)
    {
      CA::Shape::unref((CA::Shape *)v1033);
      v1033 = 1;
      v218 = (int32x4_t)v1015;
      v220 = (__n128)vorrq_s8(v1060, (int8x16_t)v1015);
      v1060 = (int8x16_t)v220;
    }
  }
  while (v224 != v223);
  v234 = v230 & 0x1C00000;
  v235 = v1054;
  if (v1054 != v212)
  {
    do
    {
      v236 = (void (***)(CA::Render::Updater::TransformOp *__hidden))v235[1];
      (**v235)((CA::Render::Updater::TransformOp *)v235);
      v235 = v236;
    }
    while (v236 != v212);
  }
  v1054 = v212;
  v237 = v1060.i64[1];
  v8 = v1008;
  v23 = *(int32x2_t ***)&v1025.f64[0];
  if ((v234 & ~v1060.i64[1]) == 0)
  {
    v226 = (CA::Shape **)v1007;
    goto LABEL_480;
  }
  v226 = (CA::Shape **)v1007;
  v238 = (float64x2_t)v1004;
  v239 = (float64x2_t)v1005;
  if (!v1033)
    goto LABEL_479;
  if ((v1033 & 1) != 0)
  {
    if (v1033 == 1)
    {
LABEL_479:
      v237 |= v234;
      v1060.i64[1] = v237;
      goto LABEL_480;
    }
  }
  else if (*(_DWORD *)(v1033 + 4) == 6)
  {
    goto LABEL_479;
  }
  v254 = vclezq_f64((float64x2_t)v1004);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v254, 1), (int8x16_t)v254).u64[0] & 0x8000000000000000) == 0)
  {
    v255 = vclezq_f64((float64x2_t)v1038);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v255, 1), (int8x16_t)v255).u64[0] & 0x8000000000000000) != 0)
    {
      v238 = 0uLL;
    }
    else
    {
      v256 = (int8x16_t)vmaxnmq_f64((float64x2_t)v1005, v1037);
      v257 = (int8x16_t)vsubq_f64(vminnmq_f64(vaddq_f64((float64x2_t)v1005, (float64x2_t)v1004), vaddq_f64(v1037, (float64x2_t)v1038)), (float64x2_t)v256);
      v258 = vclezq_f64((float64x2_t)v257);
      v259 = vdupq_laneq_s64(v258, 1);
      v260 = (int64x2_t)vorrq_s8((int8x16_t)v259, (int8x16_t)v258);
      v259.i64[0] = -1;
      v261 = (int8x16_t)vdupq_lane_s64(vcgtq_s64(v260, v259).i64[0], 0);
      v239 = (float64x2_t)vbslq_s8(v261, v256, (int8x16_t)v1005);
      v238 = (float64x2_t)vandq_s8(v257, v261);
    }
  }
  v262 = vceqzq_f64(v238);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v262, 1), (int8x16_t)v262).u64[0] & 0x8000000000000000) != 0
    || (v263 = vorrq_s8((int8x16_t)vcltzq_f64(v238), (int8x16_t)vcgezq_f64(v238)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v263), 1), v263).u64[0] & 0x8000000000000000) != 0))
  {
    v1064[0] = 0uLL;
  }
  else
  {
    v264 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v239, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    v1064[0] = (float64x2_t)vuzp1q_s32(v264, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v239, v238), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v264));
  }
  if (!CA::Shape::contains(v1033, (const CA::Bounds *)v1064))
    goto LABEL_479;
LABEL_480:
  v225 = (int32x2_t *)v1019;
  if (!(v231 & 1 | ((v229 & 1) == 0)))
    v1060.i64[1] = v237 | 0x20C00000;
  v265 = (CA::Render::LayerNode *)v1058;
  v189 = v1024.f64[0];
  if (v1006)
  {
    v266 = (CA::Shape **)v1033;
    *(_QWORD *)(v1058 + 216) = v1033;
    CA::shape_union((CA::Shape **)&v1048, v266, v109);
    v1033 = *(_QWORD *)&v1048.f64[0];
    v265 = (CA::Render::LayerNode *)v1058;
  }
  if ((*((_BYTE *)v265 + 24) & 0x20) != 0)
    CA::Render::LayerNode::depth_sort_sublayers(v265);
  if (((*v23)[133].i32[0] & 0x400000) != 0)
  {
LABEL_487:
    CA::shape_union(*(CA::Shape ***)&v1011.f64[0], v226, v109);
    CA::shape_subtract((CA::Shape **)&v1046, (CA::Shape **)v1035, v267, v268);
    v270 = *(CA::Shape **)&v1046.f64[0];
    if (v1034)
    {
      CA::shape_union(v1021, *(CA::Shape ***)&v1046.f64[0], v269);
      if ((v1034 & 1) == 0 && *(int *)(v1034 + 4) >= 257)
      {
        v1064[0] = 0uLL;
        CA::Shape::get_bounds(v1034, (int *)v1064);
        CA::Shape::unref((CA::Shape *)v1034);
        v1034 = CA::Shape::new_shape((CA::Shape *)v1064, v271);
      }
    }
    CA::Shape::unref(v270);
    CA::Shape::unref((CA::Shape *)v226);
  }
LABEL_492:
  v272 = v1023;
  if (LODWORD(v1017.f64[0]))
  {
    v1037 = v1010;
    v220 = v1009;
    v1038 = v1009;
  }
  if (v1034 && v1035)
  {
    v274 = (CA::Shape **)CA::Shape::subtract((CA::Shape *)v1035, (const CA::Bounds *)&v1039);
    if (v1034)
    {
      CA::shape_union(v1021, v274, v273);
      if ((v1034 & 1) == 0 && *(int *)(v1034 + 4) >= 257)
      {
        v1064[0] = 0uLL;
        CA::Shape::get_bounds(v1034, (int *)v1064);
        CA::Shape::unref((CA::Shape *)v1034);
        v1034 = CA::Shape::new_shape((CA::Shape *)v1064, v275);
      }
    }
    CA::Shape::unref((CA::Shape *)v274);
    v277 = *(_QWORD *)(*(_QWORD *)&v189 + 128);
    v272 = v1023;
    if (v277
      && *(float *)(v277 + 236) > 0.0
      && (*(float *)(v277 + 240) != 0.0
       || *(float *)(v277 + 244) != 0.0
       || *(float *)(v277 + 248) != 0.0
       || *(float *)(v277 + 252) != 0.0
       || *(_QWORD *)(v277 + 128)))
    {
      CA::Render::Updater::LayerShapes::union_visible_shape((uint64_t)&v1029, (CA::Shape **)v1035, v276);
    }
  }
  if ((*(_BYTE *)(v272 + 27) & 2) == 0 && !BYTE10(xmmword_1ECDC6AF0))
  {
    v928 = *((_QWORD *)v1059 + 12);
    if (v928)
    {
      if (*(_BYTE *)(v928 + 12) == 25 && *(_BYTE *)(v928 + 241))
      {
        v929 = (uint64_t **)*v23;
        v1015 = *(__n128 *)(*v23)[24].i8;
        v1048 = 0uLL;
        v1009 = (__n128)v1030;
        v1010 = v1029;
        CA::Bounds::set_exterior((int32x4_t *)&v1048, (const Rect *)v112, v1029, v1030);
        if (CA::BoundsImpl::intersect((int32x2_t *)&v1048, (int32x2_t)v1015.n128_u64[0], (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v1015, (int8x16_t)v1015, 8uLL)))LODWORD(v1011.f64[0]) = (double)vmulq_laneq_s32(*(int32x4_t *)&v1015, *(int32x4_t *)&v1015, 3).i32[2] * 0.95 < (double)(HIDWORD(v1048.f64[1]) * LODWORD(v1048.f64[1]));
        else
          LODWORD(v1011.f64[0]) = 0;
        v942 = (CA::Shape *)v929[66];
        v1046 = 0uLL;
        CA::Bounds::set_exterior((int32x4_t *)&v1046, v930, v1010, (float64x2_t)v1009);
        v943 = (CA::Shape *)CA::Shape::intersect(v942, (const CA::Bounds *)&v1046);
        v944 = (double)CA::Shape::area(v943);
        *(_QWORD *)&v945 = LODWORD(v1046.f64[1]);
        *(_QWORD *)&v946 = HIDWORD(v1046.f64[1]);
        v947 = HIDWORD(v1046.f64[1]) * LODWORD(v1046.f64[1]);
        v948 = (double)(HIDWORD(v1046.f64[1]) * LODWORD(v1046.f64[1])) * 0.2;
        if (BYTE11(xmmword_1ECDC6AF0))
        {
          if (x_log_hook_p())
          {
            v1004.i64[0] = v948 > v944;
            v980 = *(double *)(v928 + 248);
            *(_QWORD *)&v1010.f64[0] = v1015.n128_u32[0];
            v1009.n128_u64[0] = v1015.n128_u32[1];
            v1006 = v1015.n128_u32[2];
            v1005.i64[0] = v1015.n128_u32[3];
            v1003 = v1015.n128_u32[3] * v1015.n128_u32[2];
            v981 = (HIDWORD(v1048.f64[1]) * LODWORD(v1048.f64[1]));
            v982 = (float)((float)(int)v981 / (float)(int)v1003);
            v1015.n128_u64[0] = LODWORD(v1046.f64[0]);
            *(_QWORD *)&v1007 = HIDWORD(v1046.f64[0]);
            v983 = CA::Shape::area(v942);
            *(_QWORD *)&v998[72] = CA::Shape::area(v943);
            *(_QWORD *)&v998[80] = v1004.i64[0];
            *(_QWORD *)&v998[56] = v983;
            *(_QWORD *)&v998[40] = v981;
            *(_QWORD *)&v998[48] = LODWORD(v1011.f64[0]);
            *(double *)&v998[32] = v982;
            *(_QWORD *)&v998[24] = v1003;
            *(_QWORD *)&v998[16] = v1005.i64[0];
            *(_QWORD *)&v998[8] = v1006;
            *(_QWORD *)v998 = v1009.n128_u64[0];
            *(_QWORD *)&v997.f64[0] = (LODWORD(v946) * LODWORD(v945));
            v997.f64[1] = v1010.f64[0];
            v996.f64[0] = v945;
            v996.f64[1] = v946;
            *(_QWORD *)&v995.f64[1] = v1007;
            *(_QWORD *)&v995.f64[0] = v1015.n128_u64[0];
            v994.f64[1] = v980;
            *(double *)&v998[64] = (float)((float)*(uint64_t *)&v998[72] / (float)v947);
            x_log_();
          }
          else
          {
            *(_QWORD *)&v1010.f64[0] = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              v1009.n128_u32[0] = v948 > v944;
              v1004.i64[0] = *(_QWORD *)(v928 + 248);
              LODWORD(v1006) = HIDWORD(v1046.f64[0]);
              v1005.i32[0] = LODWORD(v1046.f64[0]);
              v986 = v1015.n128_u32[3] * v1015.n128_u32[2];
              LODWORD(v1007) = HIDWORD(v1048.f64[1]) * LODWORD(v1048.f64[1]);
              v987 = (float)((float)(HIDWORD(v1048.f64[1]) * LODWORD(v1048.f64[1]))
                           / (float)(v1015.n128_u32[3] * v1015.n128_u32[2]));
              v988 = CA::Shape::area(v942);
              v989 = CA::Shape::area(v943);
              LODWORD(v1064[0].f64[0]) = 134222336;
              *(_QWORD *)((char *)v1064[0].f64 + 4) = v1004.i64[0];
              WORD2(v1064[0].f64[1]) = 1024;
              *(_DWORD *)((char *)&v1064[0].f64[1] + 6) = v1005.i32[0];
              WORD1(v1064[1].f64[0]) = 1024;
              HIDWORD(v1064[1].f64[0]) = v1006;
              LOWORD(v1064[1].f64[1]) = 1024;
              *(_DWORD *)((char *)&v1064[1].f64[1] + 2) = LODWORD(v945);
              HIWORD(v1064[1].f64[1]) = 1024;
              LODWORD(v1064[2].f64[0]) = LODWORD(v946);
              WORD2(v1064[2].f64[0]) = 1024;
              *(_DWORD *)((char *)v1064[2].f64 + 6) = v947;
              WORD1(v1064[2].f64[1]) = 1024;
              HIDWORD(v1064[2].f64[1]) = v1015.n128_u32[0];
              LOWORD(v1064[3].f64[0]) = 1024;
              *(_DWORD *)((char *)v1064[3].f64 + 2) = v1015.n128_u32[1];
              HIWORD(v1064[3].f64[0]) = 1024;
              *(_DWORD *)((char *)&v1064[3].f64[1] + 6) = v1015.n128_u32[3];
              LODWORD(v1064[3].f64[1]) = v1015.n128_u32[2];
              WORD2(v1064[3].f64[1]) = 1024;
              WORD1(v1064[4].f64[0]) = 1024;
              HIDWORD(v1064[4].f64[0]) = v986;
              LOWORD(v1064[4].f64[1]) = 2048;
              *(double *)((char *)&v1064[4].f64[1] + 2) = v987;
              WORD1(v1064[5].f64[0]) = 1024;
              HIDWORD(v1064[5].f64[0]) = v1007;
              LOWORD(v1064[5].f64[1]) = 1024;
              *(_DWORD *)((char *)&v1064[5].f64[1] + 2) = LODWORD(v1011.f64[0]);
              HIWORD(v1064[5].f64[1]) = 2048;
              *(_QWORD *)&v1065[0] = v988;
              WORD4(v1065[0]) = 2048;
              *(double *)((char *)v1065 + 10) = (float)((float)v989 / (float)v947);
              WORD1(v1065[1]) = 2048;
              *(_QWORD *)((char *)&v1065[1] + 4) = v989;
              WORD6(v1065[1]) = 1024;
              *(_DWORD *)((char *)&v1065[1] + 14) = v1009.n128_u32[0];
              _os_log_impl(&dword_184457000, *(os_log_t *)&v1010.f64[0], OS_LOG_TYPE_DEFAULT, "IQ Preferred Latency %f: \n  self_bounds %i %i %i %i (area=%i)\n  update_bounds %i %i %i %i (area=%i)\n  intersection %.2f%% (area=%i)\n  is_full_screen %i\n\n  visible_shape_above area %ld\n  intersection %.2f%% (area=%ld)\n  unoccluded %i", (uint8_t *)v1064, 0x82u);
            }
          }
        }
        CA::Shape::unref(v943);
        v949 = LODWORD(v1011.f64[0]);
        if (v948 <= v944)
          v949 = 0;
        if (v949 == 1 && (v220.n128_u64[0] = *(_QWORD *)(**(_QWORD **)&v1025.f64[0] + 144), v220.n128_f64[0] == 0.0))
        {
          v220 = *(__n128 *)(v928 + 248);
          *(__n128 *)(**(_QWORD **)&v1025.f64[0] + 144) = v220;
          v950 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v928 + 16) + 24) + 8);
          v951 = atomic_load(v950);
          if ((v951 & 0x10000000000000) == 0)
          {
            do
              v952 = __ldaxr(v950);
            while (__stlxr(v952 | 0x10000000000000, v950));
          }
        }
        else
        {
          v953 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v928 + 16) + 24) + 8);
          v954 = atomic_load(v953);
          if ((v954 & 0x10000000000000) != 0)
          {
            do
              v955 = __ldaxr(v953);
            while (__stlxr(v955 & 0xFFEFFFFFFFFFFFFFLL, v953));
          }
        }
        v1060.i64[1] |= 4uLL;
        v23 = *(int32x2_t ***)&v1025.f64[0];
        v225 = (int32x2_t *)v1019;
        v272 = v1023;
        v189 = v1024.f64[0];
      }
    }
  }
  v278 = *(CA::Render::Transition **)(v272 + 120);
  if (v278)
  {
    v279 = v1037;
    v280 = (float64x2_t)v1038;
    v1037 = *(float64x2_t *)((char *)&v1020[5] + 8);
    v1038 = *(__n128 *)((char *)v1020 + 104);
    v1015 = (__n128)v1039;
    v1039 = *(int32x4_t *)((char *)&v1020[7] + 8);
    v1060.i64[1] |= 0x20C00000uLL;
    v1053[0] = 0;
    v1051 = 0u;
    v1052 = 0u;
    v1049 = 0u;
    v1050 = 0u;
    v1048 = 0u;
    *(float64x2_t *)&v1053[1] = v1037;
    *(__n128 *)&v1053[3] = v1038;
    *(int32x4_t *)&v1053[5] = v1039;
    v281 = *(_QWORD *)(v8 + 80);
    CA::Render::Updater::prepare_layer(v23, v8, *(_QWORD *)(v1058 + 136), &v1048, v214);
    v282 = *(_QWORD *)(v8 + 80);
    *(_QWORD *)(v8 + 80) = v281;
    v285 = CA::Render::Transition::subclass(v278, v283, v284);
    if (v285)
    {
      v287 = v285;
      v288 = *((float64x2_t *)v1059 + 4);
      v289 = *((float64x2_t *)v1059 + 5);
      v1046 = v288;
      v1047 = v289;
      v290 = *(float64x2_t **)(v1058 + 56);
      if (v290)
        CA::Mat4Impl::mat4_apply_to_rect(v290, (int8x16_t *)&v1046, v286);
      else
        v1046 = vaddq_f64(*(float64x2_t *)(v1058 + 64), v288);
      v1044 = v1048;
      v1045 = v1049;
      v1042[0] = v1029;
      v1042[1] = v1030;
      v292 = *(void (****)(CA::Render::Updater::TransformOp *__hidden))v8;
      if (*(_QWORD *)v8)
      {
        v293 = 0;
        do
        {
          v294 = v293;
          v293 = v292;
          v292 = (void (***)(CA::Render::Updater::TransformOp *__hidden))v292[1];
          v293[1] = (void (**)(CA::Render::Updater::TransformOp *__hidden))v294;
        }
        while (v292);
        v295 = 0;
        do
        {
          ((void (*)(void (***)(CA::Render::Updater::TransformOp *__hidden), float64x2_t *))(*v293)[9])(v293, &v1044);
          ((void (*)(void (***)(CA::Render::Updater::TransformOp *__hidden), float64x2_t *))(*v293)[9])(v293, v1042);
          v296 = (void (***)(CA::Render::Updater::TransformOp *__hidden))v293[1];
          v293[1] = (void (**)(CA::Render::Updater::TransformOp *__hidden))v295;
          v295 = v293;
          v293 = v296;
        }
        while (v296);
      }
      CA::Rect::unapply_transform(v1044.f64, v8 + 8);
      CA::Rect::unapply_transform(v1042[0].f64, v8 + 8);
      v1066 = 0;
      memset(v1065, 0, sizeof(v1065));
      memset(v1064, 0, sizeof(v1064));
      v297 = CA::Transform::set((CA::Transform *)v1064, v8 + 8);
      (*((void (**)(float64x2_t *__return_ptr, _UNKNOWN **, CA::Render::Transition *, float64x2_t *, float64x2_t *, float64x2_t *, float64x2_t *, double))*v287
       + 2))(&v1040, v287, v278, &v1046, v1064, &v1044, v1042, v297);
      v218 = (int32x4_t)v1041;
      v1029 = v1040;
      v1030 = v1041;
      if (v1033)
      {
        CA::Shape::unref((CA::Shape *)v1033);
        v1033 = 1;
      }
      v298 = *(void (****)(CA::Render::Updater::TransformOp *__hidden))v8;
      v272 = v1023;
      if (*(_QWORD *)v8)
      {
        do
        {
          ((void (*)(void (***)(CA::Render::Updater::TransformOp *__hidden), float64x2_t *, _QWORD))(*v298)[3])(v298, &v1029, (v1063 >> 2) & 1);
          v298 = (void (***)(CA::Render::Updater::TransformOp *__hidden))v298[1];
        }
        while (v298);
      }
    }
    else
    {
      CA::Render::Updater::LayerShapes::union_bounds((__n128 *)&v1029, &v1048, (const CA::Bounds *)1);
    }
    if (v1034)
    {
      v299 = vceqzq_f64(v1030);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v299, 1), (int8x16_t)v299).u64[0] & 0x8000000000000000) != 0
        || (v300 = vorrq_s8((int8x16_t)vcltzq_f64(v1030), (int8x16_t)vcgezq_f64(v1030)),
            (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v300), 1), v300).u64[0] & 0x8000000000000000) != 0))
      {
        v1064[0] = 0uLL;
      }
      else
      {
        v301 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v1029, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        v1064[0] = (float64x2_t)vuzp1q_s32(v301, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v1029, v1030), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v301));
      }
      CA::shape_union(v1021, (CA::Shape **)v1064, v291);
    }
    if (v1036)
      *v1036 = xmmword_18474E240;
    if (!v1033)
      goto LABEL_533;
    if ((v1033 & 1) != 0)
    {
      if (v1033 == 1)
      {
LABEL_533:
        if ((v1060.i8[0] & 0x18) != 0)
          *((_DWORD *)v278 + 19) = *((_DWORD *)v23 + 2);
        if ((v282 & 0x18) != 0)
          *((_DWORD *)v278 + 17) = *((_DWORD *)v23 + 2);
        v1037 = v279;
        v1038 = (__n128)v280;
        v220 = v1015;
        v1039 = (int32x4_t)v1015;
        goto LABEL_538;
      }
    }
    else if (*(_DWORD *)(v1033 + 4) == 6)
    {
      goto LABEL_533;
    }
    CA::Shape::unref((CA::Shape *)v1033);
    v1033 = 1;
    goto LABEL_533;
  }
LABEL_538:
  v302 = *((_QWORD *)v1059 + 16);
  v303 = v1020;
  if (v302)
  {
    v304 = *(_QWORD *)(v302 + 96);
    if (v304)
    {
      if ((v1063 & 0x10) == 0)
      {
        v915 = *(unsigned int *)(v304 + 16);
        if ((_DWORD)v915)
        {
          if ((v1060.i32[2] & 0x800000) == 0)
          {
            v916 = v304 + 24;
            v917 = 8 * v915;
            while ((*(_DWORD *)(*(_QWORD *)v916 + 12) & 0x40100) != 0x100
                 || *(_DWORD *)(*(_QWORD *)v916 + 24) == 99)
            {
              v916 += 8;
              v917 -= 8;
              if (!v917)
                goto LABEL_540;
            }
          }
          v1060.i64[1] |= 0x20C00000uLL;
        }
      }
    }
  }
LABEL_540:
  if ((((unint64_t)(*v23)[133].u16[2] << 32) & 0x30000000000) == 0x10000000000)
    v1063 |= 2u;
  v305 = v1058;
  if (v302)
  {
    CA::Render::Updater::add_background_filters_((uint64_t ***)v23, v8, (uint64_t)v1059, v1058, (uint64_t)&v1054, (CA::Render::Updater::LayerShapes *)&v1029);
    v305 = v1058;
  }
  v306 = *(_QWORD *)(v305 + 24);
  if ((v306 & 0x10) == 0 && (v1063 & 4) == 0)
  {
    v220.n128_u64[0] = *(_QWORD *)&v1030.f64[0];
    v218.i32[1] = HIDWORD(v1030.f64[1]);
    if (v1030.f64[0] >= v1030.f64[1])
      v220.n128_u64[0] = *(_QWORD *)&v1030.f64[1];
    if (v220.n128_f64[0] <= 0.0)
      goto LABEL_552;
    v220 = v1038;
    v307 = vclezq_f64((float64x2_t)v1038);
    v218 = (int32x4_t)vorrq_s8((int8x16_t)vdupq_laneq_s64(v307, 1), (int8x16_t)v307);
    if (v218.i64[0] < 0
      || (v218 = (int32x4_t)v1030,
          v308 = vclezq_f64(v1030),
          (vorrq_s8((int8x16_t)vdupq_laneq_s64(v308, 1), (int8x16_t)v308).u64[0] & 0x8000000000000000) != 0)
      || (v309 = vclezq_f64(vsubq_f64(vminnmq_f64(vaddq_f64(v1037, (float64x2_t)v1038), vaddq_f64(v1029, v1030)), vmaxnmq_f64(v1037, v1029))), v218 = (int32x4_t)vdupq_laneq_s64(v309, 1), v220 = (__n128)vorrq_s8((int8x16_t)v218, (int8x16_t)v309), (v220.n128_u64[0] & 0x8000000000000000) != 0))
    {
LABEL_552:
      v306 |= 0x10uLL;
      *(_QWORD *)(v305 + 24) = v306;
    }
  }
  v310 = *(_QWORD *)(*(_QWORD *)&v189 + 128);
  if (v310)
  {
    v311 = *(_QWORD *)(v310 + 96);
    if (v311)
    {
      v312 = *(unsigned int *)(v311 + 16);
      if ((_DWORD)v312)
      {
        v313 = v311 + 24;
        v314 = 8 * v312;
        while (1)
        {
          v315 = *(_DWORD *)(*(_QWORD *)v313 + 24);
          if (((v315 - 191) < 2 || v315 == 378)
            && (*(_DWORD *)(*(_QWORD *)v313 + 12) & 0x40100) == 0x100)
          {
            break;
          }
          v313 += 8;
          v314 -= 8;
          if (!v314)
            goto LABEL_565;
        }
        v316 = v1060.i64[1];
        v1060.i64[1] |= 0x800000000uLL;
        if ((((*v23)[133].u32[0] | ((unint64_t)(*v23)[133].u16[2] << 32)) & 0x40000000000) != 0)
        {
          v1060.i64[1] = v316 | 0x810000000;
          if (v225)
            v225[9].i32[1] = *((_DWORD *)v23 + 2);
        }
      }
    }
  }
LABEL_565:
  v317 = *(_QWORD *)(*(_QWORD *)&v189 + 96);
  if (v317 && *(_BYTE *)(v317 + 12) == 25)
  {
    if (((*v23)[133].i32[0] & 4) == 0)
      CA::Render::ImageQueue::set_visible(*(CA::Render::ImageQueue **)(*(_QWORD *)&v189 + 96), (v306 & 0x10) == 0);
    if ((v306 & 0x10) != 0)
      CA::Render::ImageQueue::did_composite((CA::Render::ImageQueue *)v317);
    if (((*v23)[133].i32[0] & 4) == 0)
    {
      v318 = vceqzq_f64(v1030);
      v319 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v318, 1), (int8x16_t)v318).u64[0];
      v218 = 0uLL;
      if ((v319 & 0x8000000000000000) == 0)
      {
        v320 = vorrq_s8((int8x16_t)vcltzq_f64(v1030), (int8x16_t)vcgezq_f64(v1030));
        if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v320), 1), v320).u64[0] & 0x8000000000000000) == 0)
        {
          v321 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v1029, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
          v218 = vuzp1q_s32(v321, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v1029, v1030), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v321));
        }
      }
      v220 = (__n128)vmulq_laneq_s32(v218, v218, 3);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v317 + 16) + 24) + 64) = v220.n128_u32[2];
    }
  }
  v322 = v1058;
  v323 = *(_QWORD *)(v1058 + 24);
  if ((v323 & 0x10) != 0)
  {
    *(_QWORD *)(v272 + 176) = 0;
    *(_QWORD *)(v272 + 184) = 0;
    if ((v323 & 0x40) != 0 && *(_QWORD *)(v322 + 256))
    {
      v332 = *(_QWORD *)(v272 + 256);
      *(_QWORD *)(v332 + 48) = 0;
      *(_QWORD *)(v332 + 56) = 0;
      *(_BYTE *)(v332 + 97) = 1;
    }
    goto LABEL_1073;
  }
  v324 = (int8x16_t)vdupq_n_s64(0xC1BFFFFFFF000000);
  v325 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v324, v1029), v324, (int8x16_t)v1029);
  v326 = (int8x16_t)vsubq_f64((float64x2_t)vdupq_n_s64(0x41C0000000000000uLL), v325);
  v327 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v1030, (float64x2_t)v326), v326, (int8x16_t)v1030);
  v1029 = v325;
  v1030 = v327;
  v328 = vceqzq_f64(v327);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v328, 1), (int8x16_t)v328).u64[0] & 0x8000000000000000) != 0
    || (v329 = vorrq_s8((int8x16_t)vcltzq_f64(v327), (int8x16_t)vcgezq_f64(v327)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v329), 1), v329).u64[0] & 0x8000000000000000) != 0))
  {
    v1026 = 0uLL;
    v331 = 0uLL;
  }
  else
  {
    v330 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v325, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    v331 = vuzp1q_s32(v330, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v325, v327), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v330));
    v1026 = (int8x16_t)v331;
  }
  if ((*((_BYTE *)v1059 + 43) & 4) != 0 && (*((_BYTE *)v1059 + 37) & 0xF) != 0)
  {
    v333.i64[0] = v331.i32[0];
    v333.i64[1] = v331.i32[1];
    v334 = vcvtq_f64_s64(v333);
    v333.i64[0] = v331.i32[2];
    v333.i64[1] = v331.i32[3];
    if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v325, v334), (int32x4_t)vceqq_f64(v327, vcvtq_f64_s64(v333))))), 0xFuLL))) & 1) != 0&& (v323 & 0x100) == 0&& ((*v23)[34].i8[0] & 8) == 0)
    {
      v335 = v331.i32[2];
      if (v331.i32[2] <= v331.i32[3])
        v336 = v331.i32[3];
      else
        v336 = v331.i32[2];
      if (v331.i32[2] >= v331.i32[3])
        v335 = v331.i32[3];
      if (v336 <= 1073741822 && v335 >= 1)
      {
        v1026 = (int8x16_t)vaddq_s32(v331, (int32x4_t)xmmword_18474E100);
        v337 = vcgt_s32((int32x2_t)0x100000001, vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v1026, v1026, 8uLL)));
        if (((v337.i32[1] | v337.i32[0]) & 1) != 0)
          v1026.i64[1] = 0;
      }
    }
  }
  v339 = CA::BoundsImpl::contains(v1037.f64, v1029.f64);
  if ((v1063 & 8) == 0)
    goto LABEL_958;
  v340 = *(_QWORD *)(v322 + 256);
  if (!v340)
  {
    v1063 &= 0xE7u;
    goto LABEL_958;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v340 + 36));
  v341 = *(_QWORD *)(v340 + 40);
  v1009.n128_u64[0] = v341 + 40;
  os_unfair_lock_lock((os_unfair_lock_t)(v341 + 40));
  v344 = **((_QWORD **)v1059 + 16);
  if (*(_BYTE *)(v344 + 12) != 3)
    v344 = 0;
  if ((*(_BYTE *)(v344 + 13) & 4) != 0)
    v345 = v339;
  else
    v345 = 1;
  if ((v345 & 1) == 0)
  {
    v346 = vceqzq_f64((float64x2_t)v1038);
    v347 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v346, 1), (int8x16_t)v346).u64[0];
    v348 = 0uLL;
    if ((v347 & 0x8000000000000000) == 0)
    {
      v349 = vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v1038), (int8x16_t)vcgezq_f64((float64x2_t)v1038));
      if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v349), 1), v349).u64[0] & 0x8000000000000000) == 0)
      {
        v350 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v1037, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        v348 = (int8x16_t)vuzp1q_s32(v350, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v1037, (float64x2_t)v1038), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v350));
      }
    }
    v351 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v1026.u64[1]);
    if ((vpmax_u32(v351, v351).u32[0] & 0x80000000) == 0)
    {
      v352 = (int32x2_t)vextq_s8(v348, v348, 8uLL).u64[0];
      v353 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v352);
      if ((vpmax_u32(v353, v353).u32[0] & 0x80000000) != 0
        || (v354 = vadd_s32(*(int32x2_t *)v348.i8, v352),
            *(int32x2_t *)v348.i8 = vmax_s32(*(int32x2_t *)v1026.i8, *(int32x2_t *)v348.i8),
            v355 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v1026.i8, (int32x2_t)v1026.u64[1]), v354), *(int32x2_t *)v348.i8), v356 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v355), (vpmax_u32(v356, v356).u32[0] & 0x80000000) != 0))
      {
        v1026.i64[1] = 0;
      }
      else
      {
        v348.u64[1] = (unint64_t)v355;
        v1026 = v348;
      }
    }
  }
  v357 = v1026;
  v358 = (int32x2_t)vextq_s8(v357, v357, 8uLL).u64[0];
  v359 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v358);
  if ((vpmax_u32(v359, v359).u32[0] & 0x80000000) == 0)
  {
    v360 = (*v23)[25];
    v361 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v360);
    if ((vpmax_u32(v361, v361).u32[0] & 0x80000000) != 0
      || (v362 = (*v23)[24],
          v363 = vadd_s32(*(int32x2_t *)v1026.i8, v358),
          *(int32x2_t *)v364.i8 = vmax_s32(*(int32x2_t *)v1026.i8, v362),
          v365 = vsub_s32(vmin_s32(v363, vadd_s32(v362, v360)), *(int32x2_t *)v364.i8),
          v366 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v365),
          (vpmax_u32(v366, v366).u32[0] & 0x80000000) != 0))
    {
      v357.i64[1] = 0;
    }
    else
    {
      v364.u64[1] = (unint64_t)v365;
      v357 = v364;
    }
  }
  v367 = *((_DWORD *)v23 + 2);
  *(_QWORD *)&v1011.f64[0] = v1058;
  v368 = *(_QWORD **)(*(_QWORD *)(v1058 + 32) + 128);
  if (v368 && *v368)
  {
    if (*(_BYTE *)(*v368 + 12) == 3)
      v369 = *v368;
    else
      v369 = 0;
  }
  else
  {
    v369 = 0;
  }
  v1043 = v357;
  if ((*(_DWORD *)(v369 + 12) & 0x1400) == 0x1000)
    v1043 = 0uLL;
  v370 = *(_DWORD *)(v341 + 56);
  v1015 = (__n128)v357;
  *(_QWORD *)&v1010.f64[0] = v340 + 36;
  if (v370)
  {
    if (v370 != v367)
      goto LABEL_943;
    LODWORD(v1006) = v367;
    *(_QWORD *)&v1007 = v369;
    CA::shape_union((CA::Shape **)(v341 + 480), (CA::Shape **)&v1043, v343);
    v372 = v1011.f64[0];
  }
  else
  {
    LODWORD(v1006) = v367;
    *(_QWORD *)&v1007 = v369;
    if (v368 && !(_BYTE)xmmword_1ECDC6A70 && (v373 = (unsigned int *)v368[12]) != 0)
    {
      v374 = *(unsigned int **)(v341 + 560);
      v372 = v1011.f64[0];
      if (v374 != v373)
      {
        if (v374)
        {
          v375 = v374 + 2;
          do
          {
            v376 = __ldaxr(v375);
            v377 = v376 - 1;
          }
          while (__stlxr(v377, v375));
          if (!v377)
            (*(void (**)(unsigned int *))(*(_QWORD *)v374 + 16))(v374);
        }
        v378 = v373 + 2;
        do
          v379 = __ldaxr(v378);
        while (__stlxr(v379 + 1, v378));
        if (!v379)
        {
          v373 = 0;
          do
            v959 = __ldaxr(v378);
          while (__stlxr(v959 - 1, v378));
        }
        *(_QWORD *)(v341 + 560) = v373;
      }
    }
    else
    {
      v380 = *(unsigned int **)(v341 + 560);
      v372 = v1011.f64[0];
      if (v380)
      {
        v381 = v380 + 2;
        do
        {
          v382 = __ldaxr(v381);
          v383 = v382 - 1;
        }
        while (__stlxr(v383, v381));
        if (!v383)
          (*(void (**)(unsigned int *))(*(_QWORD *)v380 + 16))(v380);
        *(_QWORD *)(v341 + 560) = 0;
      }
    }
    v384 = *(CA::Shape **)(v341 + 480);
    if (v384)
      CA::Shape::unref(v384);
    *(_DWORD *)(v341 + 56) = v1006;
    *(_DWORD *)(v341 + 60) = *(_DWORD *)(v1007 + 32);
    *(_QWORD *)(v341 + 480) = CA::Shape::new_shape((CA::Shape *)&v1043, v342);
  }
  v385 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v372 + 32) + 128);
  LODWORD(v1003) = v339;
  if (!v385)
  {
    v388 = *(unsigned int **)(v341 + 560);
    v389 = (int32x4_t)v1015;
    if (!v388)
      goto LABEL_901;
    v387 = (unsigned int **)(v341 + 560);
LABEL_896:
    v504 = v388 + 2;
    do
    {
      v505 = __ldaxr(v504);
      v506 = v505 - 1;
    }
    while (__stlxr(v506, v504));
    if (!v506)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v388 + 16))(v388);
      v389 = (int32x4_t)v1015;
    }
    *v387 = 0;
    goto LABEL_901;
  }
  v386 = *(_QWORD *)(v385 + 96);
  v387 = (unsigned int **)(v341 + 560);
  v388 = *(unsigned int **)(v341 + 560);
  v389 = (int32x4_t)v1015;
  if (!v386)
  {
    if (!v388)
      goto LABEL_901;
    goto LABEL_896;
  }
  if (!v388)
  {
LABEL_901:
    v1004 = 0u;
    v1005 = 0u;
    goto LABEL_902;
  }
  v390 = *(_DWORD *)(v386 + 16);
  v391 = v388[4];
  if (v390 >= v391)
    v392 = (CA::Render::Array *)v391;
  else
    v392 = (CA::Render::Array *)v390;
  if (!(_DWORD)v392)
  {
    v1004 = 0u;
    v1005 = 0u;
LABEL_1607:
    v920 = v388 + 2;
    do
    {
      v921 = __ldaxr(v920);
      v922 = v921 - 1;
    }
    while (__stlxr(v922, v920));
    if (!v922)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v388 + 16))(v388);
      v389 = (int32x4_t)v1015;
    }
    *v387 = 0;
    goto LABEL_902;
  }
  v393 = 0;
  v1004 = 0u;
  v1005 = 0u;
  v1001 = (unsigned int **)(v341 + 560);
  while (1)
  {
    v394 = *(_QWORD *)(v386 + 8 * (_QWORD)v393 + 24);
    v395 = *(_QWORD *)&(*v387)[2 * (_QWORD)v393 + 6];
    v396 = *(_DWORD *)(v394 + 24);
    if (v396 != *(_DWORD *)(v395 + 24)
      || ((*(unsigned __int8 *)(v394 + 13) ^ *(unsigned __int8 *)(v395 + 13)) & 1) != 0)
    {
      goto LABEL_1597;
    }
    v397 = *(CA::Render::KeyValueArray **)(v394 + 40);
    v398 = *(CA::Render::KeyValueArray **)(v395 + 40);
    if (!((unint64_t)v397 | (unint64_t)v398))
      goto LABEL_839;
    if ((v397 != 0) != (v398 != 0))
      goto LABEL_1597;
    if (v396 <= 190)
      break;
    if (v396 > 360)
    {
      if (v396 > 480)
      {
        if (v396 != 481)
        {
          if (v396 != 522)
          {
            if (v396 != 577 || v394 != v395)
              goto LABEL_1597;
            goto LABEL_839;
          }
          v399 = v392;
          float_key = CA::Render::KeyValueArray::get_float_key(*(CA::Render::KeyValueArray **)(v394 + 40), (const CA::Render::KeyValueArray *)0x10E, 0.5);
          v405 = 0.5;
LABEL_744:
          v411 = v398;
          v412 = 270;
LABEL_745:
          if (float_key != CA::Render::KeyValueArray::get_float_key(v411, (const CA::Render::KeyValueArray *)v412, v405))goto LABEL_1585;
LABEL_746:
          v389 = (int32x4_t)v1015;
          v392 = v399;
          v387 = v1001;
        }
      }
      else if (v396 != 361)
      {
        if (v396 != 378)
        {
          if (v396 != 401)
            goto LABEL_1597;
          v399 = v392;
          float_key = CA::Render::KeyValueArray::get_float_key(*(CA::Render::KeyValueArray **)(v394 + 40), (const CA::Render::KeyValueArray *)0x10E, 0.0);
          v405 = 0.0;
          goto LABEL_744;
        }
        goto LABEL_695;
      }
    }
    else
    {
      if (v396 <= 255)
      {
        if ((v396 - 191) >= 2)
        {
          if (v396 != 242)
            goto LABEL_1597;
          v399 = v392;
          v400 = CA::Render::KeyValueArray::get_float_key(v397, (const CA::Render::KeyValueArray *)0x12E, 0.0);
          if (v400 != CA::Render::KeyValueArray::get_float_key(v398, (const CA::Render::KeyValueArray *)0x12E, 0.0))
            goto LABEL_1585;
          CA::Render::KeyValueArray::get_rect_key(v1064, v397, (const CA::Rect *)0x117, (float64x2_t)0, (float64x2_t)0);
          v1004 = (int32x4_t)v1064[1];
          v1005 = (int32x4_t)v1064[0];
          goto LABEL_746;
        }
LABEL_695:
        v399 = v392;
        v410 = CA::Render::KeyValueArray::get_float_key(v397, (const CA::Render::KeyValueArray *)0x10E, 0.0);
        if (v410 != CA::Render::KeyValueArray::get_float_key(v398, (const CA::Render::KeyValueArray *)0x10E, 0.0))
          goto LABEL_1585;
        float_key = CA::Render::KeyValueArray::get_float_key(v397, (const CA::Render::KeyValueArray *)0x132, 1.0);
        v405 = 1.0;
        v411 = v398;
        v412 = 306;
        goto LABEL_745;
      }
      if (v396 == 256)
      {
        if (!v397)
          goto LABEL_775;
        v438 = *((unsigned int *)v397 + 4);
        if (!(_DWORD)v438)
          goto LABEL_775;
        v439 = 0;
        while (1)
        {
          v440 = *((_QWORD *)v397 + v439 + 3);
          if (*(_DWORD *)(v440 + 16) == 283)
            break;
          if (v438 == ++v439)
            goto LABEL_775;
        }
        if ((v439 & 0x80000000) == 0)
          v455 = *(_QWORD *)(v440 + 24);
        else
LABEL_775:
          v455 = 0;
        if (!v398)
          goto LABEL_784;
        v456 = *((unsigned int *)v398 + 4);
        if (!(_DWORD)v456)
          goto LABEL_784;
        v457 = 0;
        while (1)
        {
          v458 = *((_QWORD *)v398 + v457 + 3);
          if (*(_DWORD *)(v458 + 16) == 283)
            break;
          if (v456 == ++v457)
            goto LABEL_784;
        }
        if ((v457 & 0x80000000) == 0)
          v459 = *(_QWORD *)(v458 + 24);
        else
LABEL_784:
          v459 = 0;
        *(_QWORD *)&v1000 = v392;
        if (v455 != v459)
          goto LABEL_1586;
        v460 = CA::Render::KeyValueArray::get_float_key(v397, (const CA::Render::KeyValueArray *)0x10E, 0.0);
        if (v460 != CA::Render::KeyValueArray::get_float_key(v398, (const CA::Render::KeyValueArray *)0x10E, 0.0))
          goto LABEL_1586;
        v461 = CA::Render::KeyValueArray::get_float_key(v397, (const CA::Render::KeyValueArray *)0x12B, 0.0);
        if (v461 != CA::Render::KeyValueArray::get_float_key(v398, (const CA::Render::KeyValueArray *)0x12B, 0.0))
          goto LABEL_1586;
        LODWORD(v1002) = CA::Render::KeyValueArray::get_color_key(v397, (const CA::Render::KeyValueArray *)0x10A, 0);
        color_key = CA::Render::KeyValueArray::get_color_key(v398, (const CA::Render::KeyValueArray *)0x10A, 0);
        if ((_DWORD)v1002 != color_key)
          goto LABEL_1586;
        v463 = CA::Render::KeyValueArray::get_color_key(v397, (const CA::Render::KeyValueArray *)0x10B, 0);
        if (v463 != CA::Render::KeyValueArray::get_color_key(v398, (const CA::Render::KeyValueArray *)0x10B, 0))goto LABEL_1586;
        goto LABEL_837;
      }
      if (v396 == 359)
      {
        *(_QWORD *)&v1000 = v392;
        v441 = CA::Render::KeyValueArray::get_float_key(v397, (const CA::Render::KeyValueArray *)0x10E, 0.0);
        if (v441 != CA::Render::KeyValueArray::get_float_key(v398, (const CA::Render::KeyValueArray *)0x10E, 0.0))
          goto LABEL_1586;
        if (!v397)
          goto LABEL_821;
        v443 = *((unsigned int *)v397 + 4);
        if (!(_DWORD)v443)
          goto LABEL_821;
        v444 = 0;
        while (1)
        {
          v445 = *((_QWORD *)v397 + v444 + 3);
          if (*(_DWORD *)(v445 + 16) == 312)
            break;
          if (v443 == ++v444)
            goto LABEL_821;
        }
        if ((v444 & 0x80000000) == 0)
          v475 = *(_QWORD *)(v445 + 24);
        else
LABEL_821:
          v475 = 0;
        if (!v398)
          goto LABEL_835;
        v476 = *((unsigned int *)v398 + 4);
        if (!(_DWORD)v476)
          goto LABEL_835;
        v477 = 0;
        while (1)
        {
          v478 = *((_QWORD *)v398 + v477 + 3);
          if (*(_DWORD *)(v478 + 16) == 312)
            break;
          if (v476 == ++v477)
            goto LABEL_835;
        }
        if ((v477 & 0x80000000) == 0)
          v480 = *(_QWORD *)(v478 + 24);
        else
LABEL_835:
          v480 = 0;
        if (!CA::Render::curves_equal(v475, v480, v442))
          goto LABEL_1586;
        goto LABEL_837;
      }
      if (v396 != 360)
        goto LABEL_1597;
      v399 = v392;
      v406 = CA::Render::KeyValueArray::get_float_key(*(CA::Render::KeyValueArray **)(v394 + 40), (const CA::Render::KeyValueArray *)0x10E, 0.0);
      if (v406 != CA::Render::KeyValueArray::get_float_key(v398, (const CA::Render::KeyValueArray *)0x10E, 0.0))
      {
LABEL_1585:
        v389 = (int32x4_t)v1015;
        LODWORD(v392) = (_DWORD)v399;
        v387 = v1001;
        goto LABEL_1597;
      }
      v389 = (int32x4_t)v1015;
      v392 = v399;
      if (v397)
      {
        v407 = *((unsigned int *)v397 + 4);
        v387 = v1001;
        if (!(_DWORD)v407)
          goto LABEL_812;
        v408 = 0;
        while (1)
        {
          v409 = *((_QWORD *)v397 + v408 + 3);
          if (*(_DWORD *)(v409 + 16) == 283)
            break;
          if (v407 == ++v408)
            goto LABEL_812;
        }
        if ((v408 & 0x80000000) != 0)
LABEL_812:
          v448 = 0;
        else
          v448 = *(_QWORD *)(v409 + 24);
      }
      else
      {
        v448 = 0;
        v387 = v1001;
      }
      if (!v398)
        goto LABEL_830;
      v472 = *((unsigned int *)v398 + 4);
      if (!(_DWORD)v472)
        goto LABEL_830;
      v473 = 0;
      while (1)
      {
        v474 = *((_QWORD *)v398 + v473 + 3);
        if (*(_DWORD *)(v474 + 16) == 283)
          break;
        if (v472 == ++v473)
          goto LABEL_830;
      }
      if ((v473 & 0x80000000) == 0)
        v479 = *(_QWORD *)(v474 + 24);
      else
LABEL_830:
        v479 = 0;
      if (v448 != v479)
        goto LABEL_1597;
    }
LABEL_839:
    v393 = (CA::Render::Array *)((char *)v393 + 1);
    if (v393 == v392)
    {
      v393 = v392;
      goto LABEL_1597;
    }
  }
  if (v396 <= 92)
  {
    if (v396 != 48)
    {
      if (v396 != 86)
        goto LABEL_1597;
      *(_QWORD *)&v1000 = v392;
      v1064[0] = 0uLL;
      vec2_key = CA::Render::KeyValueArray::get_vec2_key(v397, (const CA::Render::KeyValueArray *)0x12F, (uint64_t)v1064);
      v415 = v414;
      v1048 = 0uLL;
      if (vec2_key != CA::Render::KeyValueArray::get_vec2_key(v398, (const CA::Render::KeyValueArray *)0x12F, (uint64_t)&v1048)|| v415 != v416)
      {
        goto LABEL_1586;
      }
      v1046 = 0uLL;
      v417 = CA::Render::KeyValueArray::get_vec2_key(v397, (const CA::Render::KeyValueArray *)0x122, (uint64_t)&v1046);
      v419 = v418;
      v1044 = 0uLL;
      v421 = v417 == CA::Render::KeyValueArray::get_vec2_key(v398, (const CA::Render::KeyValueArray *)0x122, (uint64_t)&v1044)&& v419 == v420;
      if (!v421
        || (v1042[0] = 0uLL,
            v422 = CA::Render::KeyValueArray::get_vec2_key(v397, (const CA::Render::KeyValueArray *)0x115, (uint64_t)v1042), v424 = v423, v1040 = 0uLL, v422 != CA::Render::KeyValueArray::get_vec2_key(v398, (const CA::Render::KeyValueArray *)0x115, (uint64_t)&v1040))|| v424 != v425)
      {
LABEL_1586:
        v389 = (int32x4_t)v1015;
        goto LABEL_1596;
      }
LABEL_837:
      v389 = (int32x4_t)v1015;
LABEL_838:
      v392 = (CA::Render::Array *)v1000;
      goto LABEL_839;
    }
    goto LABEL_839;
  }
  v1002 = *(CA::Render::KeyValueArray **)(v395 + 40);
  switch(v396)
  {
    case ']':
    case '_':
    case 'i':
      v401 = v392;
      v402 = CA::Render::KeyValueArray::get_float_key(v397, (const CA::Render::KeyValueArray *)0x10E, 1.0);
      v403 = 1.0;
      goto LABEL_728;
    case '^':
    case 'd':
    case 'f':
    case 'g':
    case 'h':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
      goto LABEL_1597;
    case 'a':
      v399 = v392;
      v430 = CA::Render::KeyValueArray::get_float_key(v397, (const CA::Render::KeyValueArray *)0x10F, 0.0);
      v431 = v1002;
      if (v430 != CA::Render::KeyValueArray::get_float_key(v1002, (const CA::Render::KeyValueArray *)0x10F, 0.0))
        goto LABEL_1585;
      int_key = CA::Render::KeyValueArray::get_int_key(v397, (const CA::Render::KeyValueArray *)0x125, 0);
      if (int_key != CA::Render::KeyValueArray::get_int_key(v431, (const CA::Render::KeyValueArray *)0x125, 0))goto LABEL_1585;
      goto LABEL_746;
    case 'b':
      goto LABEL_839;
    case 'c':
      v401 = v392;
      v433 = CA::Render::KeyValueArray::get_int_key(v397, (const CA::Render::KeyValueArray *)0x131, 0);
      if (v433 != CA::Render::KeyValueArray::get_int_key(v1002, (const CA::Render::KeyValueArray *)0x131, 0))goto LABEL_892;
      goto LABEL_729;
    case 'e':
      *(_QWORD *)&v1000 = v392;
      if (!v397)
      {
        v446 = 0;
        v435 = v1002;
        goto LABEL_753;
      }
      v434 = *((unsigned int *)v397 + 4);
      v435 = v1002;
      if (!(_DWORD)v434)
        goto LABEL_752;
      v436 = 0;
      while (1)
      {
        v437 = *((_QWORD *)v397 + v436 + 3);
        if (*(_DWORD *)(v437 + 16) == 284)
          break;
        if (v434 == ++v436)
          goto LABEL_752;
      }
      if ((v436 & 0x80000000) == 0)
      {
        v446 = *(_QWORD *)(v437 + 24);
        goto LABEL_753;
      }
LABEL_752:
      v446 = 0;
      if (!v435)
        goto LABEL_761;
      v449 = *((unsigned int *)v435 + 4);
      if (!(_DWORD)v449)
        goto LABEL_761;
LABEL_753:
      v450 = 0;
      while (1)
      {
        v451 = *((_QWORD *)v435 + v450 + 3);
        if (*(_DWORD *)(v451 + 16) == 284)
          break;
        if (v449 == ++v450)
          goto LABEL_761;
      }
      if ((v450 & 0x80000000) == 0)
        v452 = *(_QWORD *)(v451 + 24);
      else
LABEL_761:
        v452 = 0;
      v453 = CA::Render::KeyValueArray::get_int_key(v397, (const CA::Render::KeyValueArray *)0x12C, 0) == 0;
      v454 = v453 == (CA::Render::KeyValueArray::get_int_key(v1002, (const CA::Render::KeyValueArray *)0x12C, 0) != 0)|| v446 == 0;
      if (!v454
        && *(_BYTE *)(v446 + 12) == 56
        && v452
        && *(_BYTE *)(v452 + 12) == 56
        && *(_DWORD *)(v446 + 16) == 20
        && *(_DWORD *)(v452 + 16) == 20
        && !memcmp((const void *)(v446 + 24), (const void *)(v452 + 24), 0xA0uLL))
      {
        v389 = (int32x4_t)v1015;
        v372 = v1011.f64[0];
        goto LABEL_838;
      }
      v389 = (int32x4_t)v1015;
      v372 = v1011.f64[0];
LABEL_1596:
      LODWORD(v392) = v1000;
LABEL_1597:
      if (BYTE9(xmmword_1ECDC6AB0))
        _CF = v393 >= v392;
      else
        _CF = 1;
      if (_CF)
        goto LABEL_1602;
      v1008 = v8;
      v961 = *(_QWORD *)(v386 + 8 * v393 + 24);
      v962 = *(_QWORD *)&(*v387)[2 * v393 + 6];
      x_log_begin();
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v966 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v1064[0].f64[0]) = 0;
          _os_log_impl(&dword_184457000, v966, OS_LOG_TYPE_DEFAULT, "Filter merging failed.\nFilter A:", (uint8_t *)v1064, 2u);
        }
      }
      CA::Render::show_newline((CA::Render *)1);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v961 + 40))(v961, 1, 0);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v967 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v1064[0].f64[0]) = 0;
          _os_log_impl(&dword_184457000, v967, OS_LOG_TYPE_DEFAULT, "\nFilter B:", (uint8_t *)v1064, 2u);
        }
      }
      CA::Render::show_newline((CA::Render *)1);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v962 + 40))(v962, 1, 0);
      v999 = (void **)x_stream_pop_(0);
      v1002 = (CA::Render::KeyValueArray *)x_stream_get(v999);
      v968 = 0;
      *(_QWORD *)&v969 = 136315650;
      v1000 = v969;
      while (2)
      {
        v970 = 0;
        v971 = (char *)v1002 + v968;
        v972 = -1;
        while (2)
        {
          if (v971[v970] == 10)
          {
            v972 = v970;
LABEL_1708:
            ++v970;
            v973 = 32512;
            if (v970 == 32512)
              goto LABEL_1709;
            continue;
          }
          break;
        }
        if (v971[v970])
          goto LABEL_1708;
        v973 = v970;
LABEL_1709:
        if (v972 <= -1 || v971[v973] == 0)
          v975 = v973;
        else
          v975 = (v972 + 1);
        if ((int)v975 > 0)
        {
          if (x_log_hook_p())
          {
            v976 = "continued...\n";
            if (!v968)
              v976 = "";
            *(_QWORD *)&v998[64] = v975;
            *(_QWORD *)&v998[72] = v971;
            *(_QWORD *)&v998[56] = v976;
            x_log_();
          }
          else
          {
            v977 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(v1064[0].f64[0]) = v1000;
              v978 = "continued...\n";
              if (!v968)
                v978 = "";
              *(_QWORD *)((char *)v1064[0].f64 + 4) = v978;
              WORD2(v1064[0].f64[1]) = 1040;
              *(_DWORD *)((char *)&v1064[0].f64[1] + 6) = v975;
              WORD1(v1064[1].f64[0]) = 2080;
              *(_QWORD *)((char *)v1064[1].f64 + 4) = v971;
              _os_log_impl(&dword_184457000, v977, OS_LOG_TYPE_DEFAULT, "%s%.*s", (uint8_t *)v1064, 0x1Cu);
            }
          }
          v968 += v975;
          continue;
        }
        break;
      }
      x_log_end_free_(v999);
      v8 = v1008;
      v389 = (int32x4_t)v1015;
      v372 = v1011.f64[0];
      v387 = v1001;
LABEL_1602:
      v388 = *v387;
      if (!(_DWORD)v393)
      {
        if (!v388)
          goto LABEL_902;
        goto LABEL_1607;
      }
      v919 = v388[4];
      if ((_DWORD)v393 != v919)
      {
        if (v919 < v393)
        {
          *v387 = 0;
          goto LABEL_1613;
        }
        v923 = CA::Render::Array::new_array(v393, v388 + 6, (CA::Render::Object *const *)1, v388[3] >> 8);
        v389 = (int32x4_t)v1015;
        v924 = v923;
        v388 = *v387;
        *v387 = v924;
        if (v388)
        {
LABEL_1613:
          v925 = v388 + 2;
          do
          {
            v926 = __ldaxr(v925);
            v927 = v926 - 1;
          }
          while (__stlxr(v927, v925));
          if (!v927)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v388 + 16))(v388);
            v389 = (int32x4_t)v1015;
          }
        }
      }
LABEL_902:
      v507 = *(_QWORD *)(v341 + 64);
      v508 = *(_QWORD *)(v341 + 72) - v507;
      v509 = v508 / 168;
      if (v508)
      {
        if (v509 <= 1)
          v510 = 1;
        else
          v510 = v508 / 168;
        while (*(_QWORD *)v507 != *(_QWORD *)(v340 + 24))
        {
          v507 += 168;
          if (!--v510)
            goto LABEL_908;
        }
        v512 = v8;
      }
      else
      {
LABEL_908:
        X::small_vector_base<CA::Render::BackdropGroup::Item>::resize((char **)(v341 + 64), v509 + 1);
        v511 = *(_QWORD *)(v341 + 64);
        if (0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(v341 + 72) - v511) >> 3) <= v509)
          __assert_rtn("operator[]", "x-small-vector.h", 91, "pos < size () && \"Out of bounds access\"");
        v512 = v8;
        v507 = v511 + 168 * v509;
        *(_QWORD *)v507 = *(_QWORD *)(v340 + 24);
        *(_DWORD *)(v341 + 12) |= 0x400u;
        v389 = (int32x4_t)v1015;
      }
      v513 = (_DWORD *)v1007;
      v514 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v372 + 32) + 128);
      if (v514)
      {
        if ((*(_BYTE *)(v1007 + 13) & 2) != 0)
        {
          v515 = *(_QWORD *)(v514 + 96);
          if (v515 && (v516 = *(unsigned int *)(v515 + 16), (_DWORD)v516))
          {
            v517 = v515 + 24;
            v518 = 8 * v516 - 8;
            do
            {
              if ((*(_DWORD *)(*(_QWORD *)v517 + 12) & 0x40100) == 0x100)
              {
                v519 = v513;
                v520 = CAAtomIndexInArray(25, (uint64_t)CA::Render::Filter::is_one_to_one(void)const::atoms, *(_DWORD *)(*(_QWORD *)v517 + 24));
                v389 = (int32x4_t)v1015;
                _ZF = v520 == -1;
                v513 = v519;
                v339 = !_ZF;
              }
              else
              {
                v339 = 1;
              }
              if (!v339)
                break;
              v517 += 8;
              v521 = v518;
              v518 -= 8;
            }
            while (v521);
          }
          else
          {
            LOBYTE(v339) = 1;
          }
        }
        else
        {
          LOBYTE(v339) = 0;
        }
      }
      else
      {
        v339 = (*(unsigned __int8 *)(v1007 + 13) >> 1) & 1;
      }
      v522 = v1011.f64[0];
      *(float64_t *)(v507 + 8) = v1011.f64[0];
      *(_DWORD *)(v507 + 164) = v1006;
      v523 = v1005;
      v524 = v1004;
      *(int32x4_t *)(v507 + 48) = v1005;
      *(int32x4_t *)(v507 + 64) = v524;
      v525 = v389.i32[2];
      if (v389.i32[2] <= v389.i32[3])
        v525 = v389.i32[3];
      v524.i32[0] = 1073741822;
      v523.i32[0] = v525;
      v526.i64[0] = v389.i32[0];
      v526.i64[1] = v389.i32[1];
      v527 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v523, v524), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v526));
      v526.i64[0] = v389.i32[2];
      v526.i64[1] = v389.i32[3];
      v528 = (int8x16_t)vcvtq_f64_s64(v526);
      v529 = vdup_n_s32(v525 > 1073741822);
      v526.i64[0] = v529.u32[0];
      v526.i64[1] = v529.u32[1];
      *(int8x16_t *)(v507 + 80) = v527;
      *(int8x16_t *)(v507 + 96) = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v526, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v528);
      v530 = (_OWORD *)(v507 + 16);
      if ((v513[3] & 0x1400) == 0x1000)
      {
        *v530 = 0u;
        *(_OWORD *)(v507 + 32) = 0u;
        v8 = v512;
        v23 = *(int32x2_t ***)&v1025.f64[0];
        v189 = v1024.f64[0];
        v531 = *(double *)v1005.i64;
      }
      else
      {
        (*(void (**)(_DWORD *, _QWORD, _OWORD *, _QWORD))(*(_QWORD *)v513 + 184))(v513, *(_QWORD *)(*(_QWORD *)&v522 + 32), v530, 0);
        v531 = *(double *)(v507 + 48);
        v8 = v512;
        v23 = *(int32x2_t ***)&v1025.f64[0];
        v189 = v1024.f64[0];
      }
      v532 = *(_QWORD *)(*(_QWORD *)&v522 + 32);
      *(_OWORD *)(v507 + 144) = *(_OWORD *)(v532 + 16);
      *(_BYTE *)(v507 + 160) = v339;
      v303 = v1020;
      LOBYTE(v339) = v1003;
      if (*(double *)(v532 + 64) == v531
        && *(double *)(v532 + 72) == *(double *)(v507 + 56)
        && *(double *)(v532 + 80) == *(double *)(v507 + 64)
        && *(double *)(v532 + 88) == *(double *)(v507 + 72))
      {
        if (byte_1ECDC6A6A)
        {
          if (x_log_hook_p())
          {
            x_log_();
            v23 = *(int32x2_t ***)&v1025.f64[0];
            v303 = v1020;
            v189 = v1024.f64[0];
            LOBYTE(v339) = v1003;
          }
          else
          {
            v964 = x_log_category_render;
            v965 = os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT);
            v23 = *(int32x2_t ***)&v1025.f64[0];
            v303 = v1020;
            v189 = v1024.f64[0];
            LOBYTE(v339) = v1003;
            if (v965)
            {
              LOWORD(v1064[0].f64[0]) = 0;
              _os_log_impl(&dword_184457000, v964, OS_LOG_TYPE_DEFAULT, "Filter merging aborted: layer.bounds == blur.inputBounds\n", (uint8_t *)v1064, 2u);
            }
          }
        }
        v533 = *(unsigned int **)(v341 + 560);
        if (v533)
        {
          v534 = v533 + 2;
          do
          {
            v535 = __ldaxr(v534);
            v536 = v535 - 1;
          }
          while (__stlxr(v536, v534));
          if (!v536)
            (*(void (**)(unsigned int *))(*(_QWORD *)v533 + 16))(v533);
          *(_QWORD *)(v341 + 560) = 0;
        }
      }
LABEL_943:
      if (((*v23)[133].i32[0] & 0x2000) != 0)
      {
        v537 = *(_QWORD *)(v341 + 48);
        if (v537)
          v1060.i64[1] |= *(_QWORD *)(v537 + 16) << 47;
      }
      v538 = v1026.i32[1];
      v539 = v1010.f64[0];
      if (*(_DWORD *)(v340 + 48) != v1026.i32[0])
      {
        v540 = v1026.i32[2];
LABEL_953:
        *(_DWORD *)(v340 + 48) = v1026.i32[0];
        *(_DWORD *)(v340 + 52) = v538;
        v542 = v1026.i32[3];
        *(_DWORD *)(v340 + 56) = v540;
        *(_DWORD *)(v340 + 60) = v542;
        *(_DWORD *)(v341 + 12) |= 0x400u;
        *((_BYTE *)v23 + 12) = 1;
        goto LABEL_954;
      }
      v540 = v1026.i32[2];
      if (*(_QWORD *)(v340 + 52) != *(uint64_t *)((char *)v1026.i64 + 4) || *(_DWORD *)(v340 + 60) != v1026.i32[3])
        goto LABEL_953;
      if ((v339 & 1) != 0)
      {
LABEL_954:
        v541 = v1009.n128_f64[0];
        goto LABEL_955;
      }
      v541 = v1009.n128_f64[0];
      if ((v1060.i8[3] & 0x10) != 0)
        *(_DWORD *)(v341 + 12) |= 0x400u;
LABEL_955:
      if (v540 >= v1026.i32[3])
        v540 = v1026.i32[3];
      *(_BYTE *)(v340 + 97) = v540 < 1;
      os_unfair_lock_unlock(*(os_unfair_lock_t *)&v541);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)&v539);
LABEL_958:
      if ((v339 & 1) == 0)
      {
        v543 = vceqzq_f64((float64x2_t)v1038);
        v220 = 0uLL;
        if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v543, 1), (int8x16_t)v543).u64[0] & 0x8000000000000000) == 0)
        {
          v544 = vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v1038), (int8x16_t)vcgezq_f64((float64x2_t)v1038));
          if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v544), 1), v544).u64[0] & 0x8000000000000000) == 0)
          {
            v545 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v1037, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
            v220 = (__n128)vuzp1q_s32(v545, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v1037, (float64x2_t)v1038), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v545));
          }
        }
        v218 = (int32x4_t)vextq_s8((int8x16_t)v220, (int8x16_t)v220, 8uLL);
        if ((*(_BYTE *)(*(_QWORD *)&v189 + 13) & 4) != 0)
        {
          *(_QWORD *)&v933 = v1026.u32[0];
          *(_QWORD *)&v934 = v1026.u32[1];
          v935 = v1026.u32[2];
          v936 = v1026.u32[3];
          v1015 = v220;
          CA::BoundsImpl::intersect((int32x2_t *)&v1026, (int32x2_t)v220.n128_u64[0], *(int32x2_t *)v218.i8);
          *(double *)v218.i64 = (double)((int)v936 * (int)v935) * 0.9;
          if (*(double *)v218.i64 >= (double)(v1026.i32[3] * v1026.i32[2]))
          {
            if (byte_1ECDC6AAF)
            {
              if (x_log_hook_p())
              {
                v979 = *(double *)&v1019;
                if ((_QWORD)v1019)
                  *(_QWORD *)&v979 = *(unsigned int *)(v1019 + 84);
                *(_QWORD *)&v998[64] = v1015.n128_u32[2];
                *(_QWORD *)&v998[72] = v1015.n128_u32[3];
                *(_QWORD *)&v998[48] = v1015.n128_u32[0];
                *(_QWORD *)&v998[56] = v1015.n128_u32[1];
                *(_QWORD *)&v998[32] = v1026.u32[2];
                *(_QWORD *)&v998[40] = v1026.u32[3];
                *(_QWORD *)&v998[16] = v1026.u32[0];
                *(_QWORD *)&v998[24] = v1026.u32[1];
                *(_QWORD *)v998 = v935;
                *(_QWORD *)&v998[8] = v936;
                v997.f64[0] = v933;
                v997.f64[1] = v934;
                v996.f64[1] = v979;
                x_log_();
              }
              else
              {
                v984 = x_log_category_render;
                if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_INFO))
                {
                  v985 = v1019;
                  if ((_QWORD)v1019)
                    v985 = *(_DWORD *)(v1019 + 84);
                  LODWORD(v1064[0].f64[0]) = 67112192;
                  HIDWORD(v1064[0].f64[0]) = v985;
                  LOWORD(v1064[0].f64[1]) = 1024;
                  *(_DWORD *)((char *)&v1064[0].f64[1] + 2) = LODWORD(v933);
                  HIWORD(v1064[0].f64[1]) = 1024;
                  LODWORD(v1064[1].f64[0]) = LODWORD(v934);
                  WORD2(v1064[1].f64[0]) = 1024;
                  *(_DWORD *)((char *)v1064[1].f64 + 6) = v935;
                  WORD1(v1064[1].f64[1]) = 1024;
                  HIDWORD(v1064[1].f64[1]) = v936;
                  LOWORD(v1064[2].f64[0]) = 1024;
                  *(_DWORD *)((char *)v1064[2].f64 + 2) = v1026.i32[0];
                  HIWORD(v1064[2].f64[0]) = 1024;
                  LODWORD(v1064[2].f64[1]) = v1026.i32[1];
                  WORD2(v1064[2].f64[1]) = 1024;
                  *(_DWORD *)((char *)&v1064[2].f64[1] + 6) = v1026.i32[2];
                  WORD1(v1064[3].f64[0]) = 1024;
                  HIDWORD(v1064[3].f64[0]) = v1026.i32[3];
                  LOWORD(v1064[3].f64[1]) = 1024;
                  *(_DWORD *)((char *)&v1064[3].f64[1] + 2) = v1015.n128_u32[0];
                  HIWORD(v1064[3].f64[1]) = 1024;
                  LODWORD(v1064[4].f64[0]) = v1015.n128_u32[1];
                  WORD2(v1064[4].f64[0]) = 1024;
                  *(_DWORD *)((char *)v1064[4].f64 + 6) = v1015.n128_u32[2];
                  WORD1(v1064[4].f64[1]) = 1024;
                  HIDWORD(v1064[4].f64[1]) = v1015.n128_u32[3];
                  _os_log_impl(&dword_184457000, v984, OS_LOG_TYPE_INFO, "Slot <%d> [%d %d %d %d] clipped to[%d %d %d %d] by [%d %d %d %d]", (uint8_t *)v1064, 0x50u);
                }
              }
            }
            v189 = v1024.f64[0];
            *(_QWORD *)(v1023 + 24) |= 0x40000uLL;
            v23 = *(int32x2_t ***)&v1025.f64[0];
            v303 = v1020;
          }
        }
        else
        {
          v546 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v1026.u64[1]);
          if ((vpmax_u32(v546, v546).u32[0] & 0x80000000) == 0)
          {
            v547 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v218.i8);
            if ((vpmax_u32(v547, v547).u32[0] & 0x80000000) != 0
              || (v548 = vadd_s32((int32x2_t)v220.n128_u64[0], *(int32x2_t *)v218.i8),
                  v220.n128_u64[0] = (unint64_t)vmax_s32(*(int32x2_t *)v1026.i8, (int32x2_t)v220.n128_u64[0]),
                  *(int32x2_t *)v218.i8 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v1026.i8, (int32x2_t)v1026.u64[1]), v548), (int32x2_t)v220.n128_u64[0]), v549 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v218.i8), (vpmax_u32(v549, v549).u32[0] & 0x80000000) != 0))
            {
              v1026.i64[1] = 0;
            }
            else
            {
              v220.n128_u64[1] = v218.i64[0];
              v1026 = (int8x16_t)v220;
            }
          }
        }
      }
      v225 = (int32x2_t *)v1019;
      v272 = v1023;
      v550 = LODWORD(v1013.f64[0]);
      if (LODWORD(v1017.f64[0]))
      {
        v1064[0] = (float64x2_t)v1026;
        CA::BoundsImpl::intersect((int32x2_t *)v1064, (*v23)[24], (*v23)[25]);
        *(double *)v218.i64 = v1030.f64[1] * v1030.f64[0];
        *(float *)v218.i32 = (float)(HIDWORD(v1064[0].f64[1]) * LODWORD(v1064[0].f64[1]))
                           / (v1030.f64[1]
                            * v1030.f64[0]);
        v220.n128_u32[0] = 1.0;
        if (*(float *)v218.i32 < 1.0)
        {
          *(_QWORD *)(v272 + 24) |= 0x40000uLL;
          v931 = 1.0 - *(float *)v218.i32;
          if (v931 <= 1.0)
            v220.n128_f32[0] = v931;
          if (v220.n128_f32[0] < 0.0)
            v220.n128_f32[0] = 0.0;
          *(_DWORD *)(v272 + 272) = v220.n128_u32[0];
        }
      }
      v551 = *(_QWORD *)(v8 + 48);
      if ((!v551 || (*(_BYTE *)(v551 + 24) & 0x20) == 0)
        && (v1063 & 8) == 0
        && (v1060.i8[13] & 0x40) == 0
        && (*(_BYTE *)(v8 + 77) & 0x40) == 0
        && (v1063 & 0x80) == 0
        && (*(_DWORD *)(*(_QWORD *)&v189 + 12) & 0x400) == 0
        && (((*v23)[133].u32[0] | ((unint64_t)(*v23)[133].u16[2] << 32)) & 0x10000000000) == 0)
      {
        v552 = v303[3].n128_i64[1];
        if (v552)
        {
          if (CA::Shape::intersects(v552, (int32x2_t *)&v1026))
          {
            CA::Bounds::subtract_exterior(&v1026, (const CA::Shape *)v303[3].n128_u64[1]);
            v1060.i64[1] |= 0x40uLL;
          }
        }
      }
      v220.n128_u64[0] = v1026.i64[0];
      if (v225)
      {
        CA::BoundsImpl::Union(v225 + 14, *(int32x2_t *)v1026.i8, (int32x2_t)v1026.u64[1]);
        v220.n128_u64[0] = v1026.i64[0];
      }
      *(_QWORD *)(v272 + 176) = v220.n128_u64[0];
      v553 = v1026.i32[2];
      v554 = v1026.i32[3];
      *(_DWORD *)(v272 + 184) = v1026.i32[2];
      *(_DWORD *)(v272 + 188) = v554;
      if ((v1060.i8[3] & 0x10) != 0)
      {
        CA::Render::Update::invalidate_backdrops((CA::Render::Update *)*v23, (const CA::Bounds *)&v1026, *(CA::Render::BackdropState **)(v1058 + 256), v550);
        v553 = v1026.i32[2];
        v554 = v1026.i32[3];
      }
      v555 = LOBYTE(v1012.f64[0]);
      if (v553 >= v554)
        v553 = v554;
      if (v553 < 1)
      {
        v556 = (uint64_t **)*v23;
        if ((v1063 & 4) != 0)
          goto LABEL_990;
        v557 = (_QWORD *)(v1058 + 24);
        v558 = 16;
LABEL_993:
        *v557 |= v558;
      }
      else
      {
        v556 = (uint64_t **)*v23;
LABEL_990:
        if (((_DWORD)v556[133] & 4) == 0 && (*(_BYTE *)(*(_QWORD *)&v189 + 38) & 0x10) != 0)
        {
          *(_QWORD *)(v1058 + 24) |= 8uLL;
          v558 = 0x10000000000;
          v557 = v1018;
          goto LABEL_993;
        }
      }
      if (v225)
        v559 = v555;
      else
        v559 = 1;
      if ((v559 & 1) == 0)
      {
        v220.n128_u32[0] = *((_DWORD *)v556 + 78);
        v220.n128_f64[0] = (double)v220.n128_u64[0];
        *(double *)v218.i64 = v1028.f64[1] * v1028.f64[0];
        if (v1028.f64[1] * v1028.f64[0] >= v220.n128_f64[0])
          v220.n128_f64[0] = v1028.f64[1] * v1028.f64[0];
        *((_DWORD *)v556 + 78) = (float)v220.n128_f64[0];
      }
      v560 = *((_DWORD *)v556 + 266);
      if ((v560 & 0x1000000) == 0)
        goto LABEL_1070;
      v561 = *(_QWORD *)(*(_QWORD *)&v189 + 128);
      if (!v561)
        goto LABEL_1014;
      v562 = *(_QWORD *)(v561 + 88);
      if (v562)
      {
        v563 = *(_DWORD *)(v562 + 24);
        if ((v563 - 424) < 3 || v563 == 352 || v563 == 589)
          goto LABEL_1069;
      }
      v564 = *(_QWORD *)(v561 + 96);
      if (!v564 || (v565 = *(unsigned int *)(v564 + 16), !(_DWORD)v565))
      {
LABEL_1014:
        if ((*(_BYTE *)(*(_QWORD *)&v189 + 45) & 4) != 0)
        {
          v578 = *(float *)(*(_QWORD *)&v189 + 16);
          if (v578 < 0.0 || v578 > 1.0)
            goto LABEL_1069;
          v580 = *(float *)(*(_QWORD *)&v189 + 20);
          if (v580 < 0.0 || v580 > 1.0)
            goto LABEL_1069;
          v582 = *(float *)(*(_QWORD *)&v189 + 24);
          if (v582 < 0.0 || v582 > 1.0)
            goto LABEL_1069;
          v584 = *(float *)(*(_QWORD *)&v189 + 28);
          if (v584 < 0.0 || v584 > 1.0)
            goto LABEL_1069;
        }
        if (v561)
        {
          if (*(float *)(v561 + 236) > 0.0)
          {
            v569 = *(float *)(v561 + 240);
            if (v569 < 0.0 || v569 > 1.0)
              goto LABEL_1069;
            v571 = *(float *)(v561 + 244);
            if (v571 < 0.0)
              goto LABEL_1069;
            if (v571 > 1.0)
              goto LABEL_1069;
            v572 = *(float *)(v561 + 248);
            if (v572 < 0.0)
              goto LABEL_1069;
            if (v572 > 1.0)
              goto LABEL_1069;
            v573 = *(float *)(v561 + 252);
            if (v573 < 0.0 || v573 > 1.0)
              goto LABEL_1069;
          }
          if (!*(_BYTE *)(*(_QWORD *)&v189 + 33))
            goto LABEL_1059;
          v575 = *(float *)(v561 + 200);
          v574 = *(float *)(v561 + 204);
          v577 = *(float *)(v561 + 208);
          v576 = *(float *)(v561 + 212);
        }
        else
        {
          if (!*(_BYTE *)(*(_QWORD *)&v189 + 33))
            goto LABEL_1070;
          v577 = 0.0;
          v576 = 1.0;
          v574 = 0.0;
          v575 = 0.0;
        }
        if (v575 < 0.0
          || v575 > 1.0
          || v574 < 0.0
          || v574 > 1.0
          || v577 < 0.0
          || v577 > 1.0
          || v576 < 0.0
          || v576 > 1.0)
        {
          goto LABEL_1069;
        }
        if (!v561)
          goto LABEL_1070;
LABEL_1059:
        if (*(float *)(v561 + 296) != 0.0 && *(float *)(v561 + 316) > 0.0)
        {
          v585 = *(float *)(v561 + 300);
          if (v585 < 0.0)
            goto LABEL_1069;
          if (v585 > 1.0)
            goto LABEL_1069;
          v586 = *(float *)(v561 + 304);
          if (v586 < 0.0)
            goto LABEL_1069;
          if (v586 > 1.0)
            goto LABEL_1069;
          v587 = *(float *)(v561 + 308);
          if (v587 < 0.0)
            goto LABEL_1069;
          if (v587 > 1.0)
            goto LABEL_1069;
          v588 = *(float *)(v561 + 312);
          if (v588 < 0.0 || v588 > 1.0)
            goto LABEL_1069;
        }
        goto LABEL_1070;
      }
      v566 = v564 + 24;
      v567 = v566 + 8 * v565;
LABEL_1010:
      v568 = 0;
      while (*(_DWORD *)(*(_QWORD *)v566 + 24) != (unsigned __int16)CA::Render::Updater::layer_may_leave_P3(CA::Render::Layer const*)::atoms[v568])
      {
        if (++v568 == 9)
        {
          v566 += 8;
          if (v566 != v567)
            goto LABEL_1010;
          goto LABEL_1014;
        }
      }
LABEL_1069:
      v1060.i64[1] |= 0x100000000uLL;
      CA::shape_union((CA::Shape **)v556 + 6, (CA::Shape **)&v1026, v338);
      v556 = (uint64_t **)*v23;
      v560 = (*v23)[133].i32[0];
LABEL_1070:
      if ((v560 & 0x2000000) != 0 && (*(_BYTE *)(*(_QWORD *)&v189 + 45) & 0x20) != 0)
      {
        v1060.i64[1] |= 4uLL;
        CA::shape_union((CA::Shape **)v556 + 7, (CA::Shape **)&v1026, v338);
      }
LABEL_1073:
      v589 = v1063;
      if ((v1063 & 4) != 0)
        *(_QWORD *)(v272 + 24) |= 0x80000uLL;
      v590 = (uint64_t **)*v23;
      v591 = v1058;
      *(_DWORD *)(v1058 + 112) = (*v23)[64].i32[0];
      if (*(_QWORD *)(v591 + 256) && (*(_BYTE *)(v591 + 24) & 0x10) == 0)
      {
        v592 = v1054;
        v593 = (uint64_t *)(v590 + 63);
        v594 = v590 + 63;
        while (1)
        {
          v594 = (_QWORD *)*v594;
          if (!v594)
            break;
          if (v594[1] == v591)
            goto LABEL_1117;
        }
        v595 = *(uint64_t **)(*(_QWORD *)(v591 + 32) + 128);
        if (v595 && (v596 = *v595) != 0)
        {
          if (*(_BYTE *)(v596 + 12) == 3)
            v597 = v596;
          else
            v597 = 0;
        }
        else
        {
          v597 = 0;
        }
        v598 = x_heap_malloc_small_(*v590, 0x68uLL);
        v600 = v598;
        if (v598)
        {
          *(_QWORD *)v598 = 0;
          v601 = (unsigned int *)(v591 + 16);
          do
            v602 = __ldaxr(v601);
          while (__stlxr(v602 + 1, v601));
          *(_QWORD *)(v598 + 8) = v591;
          *(_QWORD *)(v598 + 88) = 0;
          *(_QWORD *)(v598 + 32) = 0;
          *(_QWORD *)(v598 + 40) = 0;
          *(_QWORD *)(v598 + 24) = 0;
          *(_DWORD *)(v598 + 96) |= 0x20000000u;
        }
        v603 = *((_DWORD *)v590 + 128) + 1;
        *((_DWORD *)v590 + 128) = v603;
        v604 = *(_DWORD *)(v598 + 96) & 0xF0000000 | v603 & 0xFFFFFFF;
        *(_DWORD *)(v598 + 96) = v604;
        *(_DWORD *)(v598 + 100) = *(_DWORD *)(v597 + 40);
        v605 = v604 & 0xEFFFFFFF | (((*(_DWORD *)(v597 + 12) >> 12) & 1) << 28);
        *(_DWORD *)(v598 + 96) = v605;
        *(_DWORD *)(v598 + 96) = v605 & 0x9FFFFFFF | (((*(_DWORD *)(v597 + 12) >> 8) & 1) << 29);
        *(_QWORD *)(v598 + 40) = CA::Shape::ref((unint64_t)v590[65], v599);
        v220 = (__n128)v1055;
        v218 = v1056;
        *(float64x2_t *)(v600 + 48) = v1055;
        *(int32x4_t *)(v600 + 64) = v218;
        *(_BYTE *)(v600 + 80) = v1057;
        if (v592)
        {
          v606 = *v590;
          v1064[0].f64[0] = 0.0;
          v607 = v1064;
          do
          {
            if (!*((_BYTE *)v592 + 18))
            {
              v608 = ((uint64_t (*)(void (***)(CA::Render::Updater::TransformOp *__hidden), uint64_t *))(*v592)[2])(v592, v606);
              if (v608)
              {
                *(_QWORD *)&v607->f64[0] = v608;
                *(_QWORD *)(v608 + 8) = 0;
                v607 = (float64x2_t *)(v608 + 8);
              }
            }
            v592 = (void (***)(CA::Render::Updater::TransformOp *__hidden))v592[1];
          }
          while (v592);
          *(float64_t *)(v600 + 88) = v1064[0].f64[0];
        }
        ++*(_DWORD *)(v591 + 112);
        v609 = *(_QWORD *)(*(_QWORD *)(v591 + 256) + 40);
        v610 = (uint64_t)(v590 + 68);
        v23 = *(int32x2_t ***)&v1025.f64[0];
        do
        {
          v610 = *(_QWORD *)v610;
          if (!v610)
          {
            v610 = x_heap_malloc_small_(*v590, 0x30uLL);
            *(_QWORD *)(v610 + 8) = v609;
            *(_QWORD *)(v610 + 16) = 0;
            *(_QWORD *)(v610 + 32) = 0;
            *(_DWORD *)(v610 + 40) = 0;
            *(_QWORD *)v610 = v590[68];
            v590[68] = (uint64_t *)v610;
            goto LABEL_1109;
          }
        }
        while (*(_QWORD *)(v610 + 8) != v609);
        v611 = *(CA::Shape **)(v610 + 16);
        if (v611)
        {
          CA::Shape::unref(v611);
          *(_QWORD *)(v610 + 16) = 0;
        }
        v612 = (_QWORD *)*v593;
        if (*v593)
        {
          do
          {
            if (v612[2] == v610)
            {
              v612[3] = 0;
              v612[4] = 0;
            }
            v612 = (_QWORD *)*v612;
          }
          while (v612);
        }
LABEL_1109:
        *(_QWORD *)(v600 + 16) = v610;
        *(_QWORD *)v600 = *v593;
        *v593 = v600;
        ++*(_DWORD *)(v610 + 40);
        v613 = (CA::Render::LayerNode *)v591;
        if (*(_QWORD *)(v610 + 32))
          v613 = CA::Render::LayerNode::shared_ancestor(*(CA::Render::LayerNode **)(v610 + 32), (CA::Render::LayerNode *)v591);
        *(_QWORD *)(v610 + 32) = v613;
        v614 = *(_BYTE *)(v600 + 99);
        v272 = v1023;
        if ((v614 & 0x20) != 0)
        {
          if (*(_QWORD *)(v609 + 520))
          {
            v615 = v590[74];
            v616 = (unsigned int *)(v591 + 16);
            do
              v617 = __ldaxr(v616);
            while (__stlxr(v617 + 1, v616));
            malloc_zone = (malloc_zone_t *)get_malloc_zone();
            v619 = (uint64_t *)malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
            *v619 = v591;
            v619[1] = (uint64_t)v615;
            v590[74] = v619;
            v620 = *(CA::Shape **)(v609 + 520);
            v23 = *(int32x2_t ***)&v1025.f64[0];
            if (v620)
            {
              CA::Shape::unref(v620);
              *(_QWORD *)(v609 + 520) = 0;
            }
          }
        }
LABEL_1117:
        v591 = v1058;
        v1060.i64[1] |= 0x400000000004uLL;
        v589 = v1063;
        v225 = (int32x2_t *)v1019;
        v189 = v1024.f64[0];
      }
      if ((*(_BYTE *)(v591 + 24) & 0x10) == 0)
      {
        if ((v589 & 0x20) != 0 && ((*v23)[133].i32[0] & 0x800) != 0)
        {
          v1066 = 0;
          v1064[0] = (float64x2_t)xmmword_18474DF40;
          v1064[1] = 0u;
          v1064[2] = (float64x2_t)xmmword_18474DF50;
          memset(&v1064[3], 0, 32);
          v1064[5] = (float64x2_t)xmmword_18474DF40;
          v1065[0] = 0u;
          v1065[1] = xmmword_18474DF50;
          __asm { FMOV            V0.2D, #1.0 }
          v1065[2] = _Q0;
          v622 = CA::Transform::concat((uint64_t)v1064, (uint64_t)&v1055);
          v623 = v1054;
          if (!v1054)
            goto LABEL_1124;
          do
          {
            ((void (*)(void (***)(CA::Render::Updater::TransformOp *__hidden), float64x2_t *, float64x2_t))(*v623)[7])(v623, v1064, v622);
            v623 = (void (***)(CA::Render::Updater::TransformOp *__hidden))v623[1];
          }
          while (v623);
          v591 = v1058;
          if (!v1058)
          {
            v624 = 255;
          }
          else
          {
LABEL_1124:
            v624 = 255;
            do
            {
              v624 = (v624 + v624 * *(unsigned __int8 *)(v591 + 116)) >> 8;
              v591 = *(_QWORD *)(v591 + 88);
            }
            while (v591);
          }
          v625 = **(_QWORD **)(*(_QWORD *)&v189 + 128);
          if (*(_BYTE *)(v625 + 12) != 6)
            v625 = 0;
          v626 = (uint64_t **)*v23;
          v627 = *(const void **)(v625 + 16);
          v1017 = v1064[0];
          v1015 = (__n128)v1064[1];
          v1012 = v1064[3];
          v1013 = v1064[2];
          v1010 = v1064[5];
          v1011 = v1064[4];
          v1009 = (__n128)v1065[0];
          v1007 = v1065[1];
          v628 = (float)v624;
          v629 = x_heap_malloc_small_(*v626, 0xC8uLL);
          *(_QWORD *)v629 = v626[127];
          if (v627)
            v630 = CFRetain(v627);
          else
            v630 = 0;
          v631 = v628 * 0.0039216;
          *(_QWORD *)(v629 + 8) = v630;
          *(_OWORD *)(v629 + 16) = *(_OWORD *)(*(_QWORD *)&v189 + 64);
          v632 = v1017;
          *(_OWORD *)(v629 + 32) = *(_OWORD *)(*(_QWORD *)&v189 + 80);
          *(float64x2_t *)(v629 + 48) = v632;
          v633 = v1013;
          *(__n128 *)(v629 + 64) = v1015;
          *(float64x2_t *)(v629 + 80) = v633;
          v634 = v1011;
          *(float64x2_t *)(v629 + 96) = v1012;
          *(float64x2_t *)(v629 + 112) = v634;
          v218 = (int32x4_t)v1009;
          *(float64x2_t *)(v629 + 128) = v1010;
          *(int32x4_t *)(v629 + 144) = v218;
          v218.i64[1] = *((_QWORD *)&v1007 + 1);
          *(_OWORD *)(v629 + 160) = v1007;
          v635 = *(_QWORD *)(*(_QWORD *)&v189 + 128);
          v218.i32[0] = 0;
          v272 = v1023;
          if (v635)
            v218.i32[0] = *(_DWORD *)(v635 + 228);
          *(double *)v218.i64 = *(float *)v218.i32;
          *(_QWORD *)(v629 + 176) = v218.i64[0];
          *(float *)(v629 + 184) = v631;
          LOBYTE(v631) = *(_BYTE *)(*(_QWORD *)&v189 + 32);
          *(float *)(v629 + 188) = (float)LODWORD(v631) * 0.0039216;
          *(_BYTE *)(v629 + 192) = (*(_QWORD *)(*(_QWORD *)&v189 + 40) & 3) != 0;
          v626[127] = (uint64_t *)v629;
          v1060.i64[1] |= 4uLL;
          v589 = v1063;
        }
        if ((v589 & 0x40) != 0 && ((*v23)[133].i32[0] & 0x1000) != 0)
        {
          v1066 = 0;
          v1064[0] = (float64x2_t)xmmword_18474DF40;
          v1064[1] = 0u;
          v1064[2] = (float64x2_t)xmmword_18474DF50;
          memset(&v1064[3], 0, 32);
          v1064[5] = (float64x2_t)xmmword_18474DF40;
          v1065[0] = 0u;
          v1065[1] = xmmword_18474DF50;
          __asm { FMOV            V0.2D, #1.0 }
          v1065[2] = _Q0;
          v638 = CA::Transform::concat((uint64_t)v1064, (uint64_t)&v1055);
          for (k = v1054; k; k = (void (***)(CA::Render::Updater::TransformOp *__hidden))k[1])
            ((void (*)(void (***)(CA::Render::Updater::TransformOp *__hidden), float64x2_t *, float64x2_t))(*k)[7])(k, v1064, v638);
          v640 = v1058;
          if (v1058)
          {
            v641 = 255;
            do
            {
              v641 = (v641 + v641 * *(unsigned __int8 *)(v640 + 116)) >> 8;
              v640 = *(_QWORD *)(v640 + 88);
            }
            while (v640);
          }
          else
          {
            v641 = 255;
          }
          v642 = *(float64x2_t *)(*(_QWORD *)&v189 + 80);
          v1046 = *(float64x2_t *)(*(_QWORD *)&v189 + 64);
          v1047 = v642;
          CA::Rect::apply_transform((int8x16_t *)&v1046, (const CA::Transform *)v1064, v637);
          v644.f64[0] = v1046.f64[1];
          v643.f64[0] = v1046.f64[0];
          v644.f64[1] = v1047.f64[1];
          v643.f64[1] = v1047.f64[0];
          v645 = vcvt_f32_f64(v643);
          v646 = (int32x2_t)vcvt_f32_f64(v644);
          memset(v1053, 0, sizeof(v1053));
          v1051 = 0u;
          v1052 = 0u;
          v1049 = 0u;
          v1050 = 0u;
          v1048 = 0u;
          CA::Mat4Impl::mat4_get_unmatrix(v1064[0].f64, (uint64_t)&v1048, 0);
          v647 = **(_QWORD **)(*(_QWORD *)&v189 + 128);
          if (*(_BYTE *)(v647 + 12) != 45)
            v647 = 0;
          v648 = *(double *)&v1053[5];
          v649 = (float)v641 * 0.0039216;
          v650 = *(_WORD *)(v647 + 20);
          v651 = (uint64_t **)*v23;
          v652 = *(unsigned int *)(v647 + 16);
          v653 = v651[128];
          if (!v653)
          {
            v653 = (uint64_t *)x_heap_malloc_small_(*v651, 0x70uLL);
            if (v653)
            {
              *((_OWORD *)v653 + 5) = 0u;
              *((_OWORD *)v653 + 6) = 0u;
              *((_OWORD *)v653 + 3) = 0u;
              *((_OWORD *)v653 + 4) = 0u;
              *((_OWORD *)v653 + 1) = 0u;
              *((_OWORD *)v653 + 2) = 0u;
              *(_OWORD *)v653 = 0u;
            }
            v651[128] = v653;
          }
          v654 = (__n128 *)((char *)v653 + 28 * v652);
          v655.i64[0] = v645.u32[0];
          v655.i64[1] = v645.u32[1];
          v218 = (int32x4_t)vshll_n_s32(v646, 0x20uLL);
          v220 = (__n128)vorrq_s8((int8x16_t)v218, v655);
          *v654 = v220;
          v654[1].n128_f32[0] = v648;
          v654[1].n128_f32[1] = v649;
          v654[1].n128_u16[4] = v650;
          v654[1].n128_u8[10] = 0;
          *((_BYTE *)v651[128] + 28 * v652 + 26) = 1;
          v1060.i64[1] |= 4uLL;
          v589 = v1063;
          v23 = *(int32x2_t ***)&v1025.f64[0];
        }
      }
      if ((v589 & 0x80) != 0)
      {
        v1066 = 0;
        v1064[0] = (float64x2_t)xmmword_18474DF40;
        v1064[1] = 0u;
        v1064[2] = (float64x2_t)xmmword_18474DF50;
        memset(&v1064[3], 0, 32);
        v1064[5] = (float64x2_t)xmmword_18474DF40;
        v1065[0] = 0u;
        v1065[1] = xmmword_18474DF50;
        __asm { FMOV            V0.2D, #1.0 }
        v1065[2] = _Q0;
        v220 = (__n128)CA::Transform::concat((uint64_t)v1064, (uint64_t)&v1055);
        for (m = v1054; m; m = (void (***)(CA::Render::Updater::TransformOp *__hidden))m[1])
          ((void (*)(void (***)(CA::Render::Updater::TransformOp *__hidden), float64x2_t *, __n128))(*m)[7])(m, v1064, v220);
        if (!BYTE9(xmmword_1ECDC6AD0))
        {
          v658 = *(uint64_t **)(*(_QWORD *)&v189 + 128);
          if (v658)
          {
            v659 = *v658;
            if (v659)
            {
              if (*(_BYTE *)(v659 + 12) == 19 && *(_BYTE *)(v659 + 16))
              {
                v660 = (uint64_t **)*v23;
                v661 = (_QWORD *)x_heap_malloc_small_(*(uint64_t **)*v23, 0xB0uLL);
                v662 = v661;
                *v661 = v660[129];
                v663 = (unsigned int *)(*(_QWORD *)&v189 + 8);
                do
                  v664 = __ldaxr(v663);
                while (__stlxr(v664 + 1, v663));
                v665 = v189;
                if (!v664)
                {
                  v665 = 0.0;
                  do
                    v956 = __ldaxr(v663);
                  while (__stlxr(v956 - 1, v663));
                }
                *((float64_t *)v661 + 1) = v665;
                v220 = CA::Transform::operator=((uint64_t)(v661 + 2), (uint64_t)v1064);
                *((_BYTE *)v662 + 168) = 0;
                v666 = *(uint64_t **)(*(_QWORD *)&v189 + 128);
                if (v666)
                {
                  v667 = *v666;
                  if (v667)
                  {
                    if (*(_BYTE *)(v667 + 12) == 19)
                      *((_BYTE *)v662 + 168) = *(_BYTE *)(v667 + 16) == 2;
                  }
                }
                v660[129] = v662;
              }
            }
          }
        }
        v1060.i64[1] |= 4uLL;
      }
      if ((v1060.i8[0] & 2) == 0)
        goto LABEL_1183;
      v668 = (uint64_t **)*v23;
      if (((*v23)[133].i32[0] & 4) != 0)
        goto LABEL_1183;
      v669 = v1058;
      if (v225)
      {
        *(_QWORD *)&v225[12] &= ~2uLL;
        v670 = *(_QWORD *)(v669 + 24);
        if ((v670 & 0x40) != 0)
        {
          if ((v670 & 0x10) == 0 && (*(_BYTE *)(v8 + 64) & 2) == 0)
          {
            v671 = (CA::Render::Context *)v23[2];
            v672 = v225 + 14;
            goto LABEL_1182;
          }
          goto LABEL_1183;
        }
      }
      else
      {
        v670 = *(_QWORD *)(v1058 + 24);
      }
      if ((v670 & 0x10) == 0)
      {
        v220 = (__n128)v1030;
        v673 = vclezq_f64(v1030);
        v218 = (int32x4_t)vorrq_s8((int8x16_t)vdupq_laneq_s64(v673, 1), (int8x16_t)v673);
        if ((v218.i64[0] & 0x8000000000000000) == 0)
        {
          v218 = (int32x4_t)v1038;
          v674 = vclezq_f64((float64x2_t)v1038);
          if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v674, 1), (int8x16_t)v674).u64[0] & 0x8000000000000000) == 0)
          {
            v220 = (__n128)vmaxnmq_f64(v1029, v1037);
            v218 = (int32x4_t)vsubq_f64(vminnmq_f64(vaddq_f64(v1029, v1030), vaddq_f64(v1037, (float64x2_t)v1038)), (float64x2_t)v220);
            v675 = vclezq_f64((float64x2_t)v218);
            if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v675, 1), (int8x16_t)v675).u64[0] & 0x8000000000000000) == 0)
            {
              v1064[0] = 0uLL;
              CA::Bounds::set_exterior((int32x4_t *)v1064, (const Rect *)v112, (float64x2_t)v220, (float64x2_t)v218);
              v671 = (CA::Render::Context *)v23[2];
              v672 = (int32x2_t *)v1064;
LABEL_1182:
              CA::Render::Update::invalidate_context((CA::Render::Update *)v668, v671, v672);
            }
          }
        }
      }
LABEL_1183:
      if (CADeviceSupportsHDRProcessing::once[0] != -1)
        dispatch_once(CADeviceSupportsHDRProcessing::once, &__block_literal_global_122);
      if (!CADeviceSupportsHDRProcessing::supports_hdr)
        goto LABEL_1323;
      if ((*(_BYTE *)(v272 + 27) & 2) != 0)
        goto LABEL_1323;
      if ((*(_BYTE *)(v1058 + 24) & 0x10) != 0)
        goto LABEL_1323;
      v676 = (_QWORD *)*((_QWORD *)v1059 + 12);
      if (!v676 || *((_BYTE *)v676 + 12) != 25)
        goto LABEL_1323;
      v677 = v189;
      v678 = (CA::Render::Context *)v23[3];
      if ((*(_BYTE *)(*(_QWORD *)&v677 + 13) & 4) != 0)
      {
        v686 = (CA::Render::Context *)*((unsigned int *)v676 + 48);
        if ((_DWORD)v686)
        {
          v680 = CA::Render::Context::context_by_id(v686);
          if (v680)
            goto LABEL_1201;
          v678 = 0;
          goto LABEL_1245;
        }
        goto LABEL_1202;
      }
      v679 = *(_QWORD *)(*(_QWORD *)&v677 + 144);
      if (!v679)
      {
LABEL_1202:
        v680 = 0;
        goto LABEL_1245;
      }
      v680 = *(_QWORD *)(v679 + 24);
      if (!v680)
      {
LABEL_1245:
        v685 = 1;
        goto LABEL_1246;
      }
      v681 = (unsigned int *)(v680 + 8);
      do
        v682 = __ldaxr(v681);
      while (__stlxr(v682 + 1, v681));
      if (!v682)
      {
        v678 = 0;
        v680 = 0;
        do
        {
          v683 = __ldaxr(v681);
          v684 = __stlxr(v683 - 1, v681);
          v685 = 1;
        }
        while (v684);
        goto LABEL_1246;
      }
LABEL_1201:
      pthread_mutex_lock((pthread_mutex_t *)(v680 + 72));
      v685 = 0;
      v678 = (CA::Render::Context *)v680;
LABEL_1246:
      LODWORD(v1017.f64[0]) = v685;
      if (v225)
        v719 = v225[12].u8[1] >> 7;
      else
        v719 = 0;
      v720 = (CA::Render::Texture *)(*(uint64_t (**)(_QWORD *))(*v676 + 80))(v676);
      if (v720)
      {
        v1066 = 0;
        v1064[0] = (float64x2_t)xmmword_18474DF40;
        v1064[1] = 0u;
        v1064[2] = (float64x2_t)xmmword_18474DF50;
        memset(&v1064[3], 0, 32);
        v1064[5] = (float64x2_t)xmmword_18474DF40;
        v1065[0] = 0u;
        v1065[1] = xmmword_18474DF50;
        __asm { FMOV            V0.2D, #1.0 }
        v1065[2] = _Q0;
        v723 = 1.0;
        if (!BYTE10(xmmword_1ECDC6AB0)
          && ((*v23)[133].i32[0] & 0x100000) != 0
          && CA::Render::Layer::append_texture_transform(*(CA::Render::Layer **)&v1024.f64[0], (CA::Transform *)v1064, v720, (CA::Render::Object *)v676))
        {
          v725 = CA::Transform::concat((uint64_t)v1064, (uint64_t)&v1055);
          for (n = v1054; n; n = (void (***)(CA::Render::Updater::TransformOp *__hidden))n[1])
            ((void (*)(void (***)(CA::Render::Updater::TransformOp *__hidden), float64x2_t *, float64x2_t))(*n)[7])(n, v1064, v725);
          rotation_flags = CA::Render::Updater::get_rotation_flags((CA::Render::Updater *)v1064, v724);
          if ((v1066 & 0x10) == 0
            && ((unsigned __int16)*(_DWORD *)(*(_QWORD *)&v1024.f64[0] + 36) >> 12) - 9 <= 2)
          {
            v723 = *(double *)&v1065[2];
          }
        }
        else
        {
          rotation_flags = -1;
        }
      }
      else
      {
        rotation_flags = -1;
        v723 = 1.0;
      }
      if (byte_1ECDC6AC1)
        v728 = 1;
      else
        v728 = (*(unsigned __int8 *)(*(_QWORD *)&v1024.f64[0] + 43) >> 4) & 1;
      LOBYTE(v1064[0].f64[0]) = 0;
      v729 = CA::Render::ImageQueue::forward_dm((os_unfair_lock_s *)v676, v678, (CA::Render::Update *)*v23, v723, rotation_flags, v728, v1064, v721);
      if (LOBYTE(v1064[0].f64[0]))
        *(_QWORD *)(v8 + 64) |= 2uLL;
      v730 = *(_QWORD *)(*(_QWORD *)(v676[2] + 24) + 128);
      v733 = ((v730 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
          && (v730 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000001
          && v730 != 0xFFF0000000000000
          && (v730 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
      v189 = v1024.f64[0];
      if (v733)
        goto LABEL_1278;
      if (*(double *)(*(_QWORD *)(v676[2] + 24) + 128) >= *(double *)&(*v23)[9])
      {
        v1060.i64[1] |= 4uLL;
LABEL_1278:
        if ((v729 & 1) == 0)
          goto LABEL_1286;
        if ((v728 & 1) == 0)
        {
          if (v719)
            v734 = v1060.i64[1] | 0x2000000000;
          else
            v734 = v1060.i64[1] | 0x800000000;
          goto LABEL_1285;
        }
        if ((v719 & 1) != 0)
          goto LABEL_1286;
LABEL_1281:
        v734 = v1060.i64[1] | 0x4000000000000;
LABEL_1285:
        v1060.i64[1] = v734;
        goto LABEL_1286;
      }
      if (((v729 ^ 1 | v719) & 1) == 0)
        goto LABEL_1281;
LABEL_1286:
      CA::Render::ImageQueue::pse_mitigate((CA::Render::ImageQueue *)v676, (CA::Render::Update *)*v23);
      is_protected = CA::Render::ImageQueue::is_protected((CA::Render::ImageQueue *)v676);
      v736 = v1023;
      if (is_protected)
      {
        v737 = v676[8];
        if (v737)
          goto LABEL_1289;
        v737 = v676[10];
        if (v737)
          goto LABEL_1289;
        if (v676[3])
        {
          v737 = v676[10];
          if (!v737)
            v737 = v676[3];
LABEL_1289:
          v738 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v737 + 240))(v737);
          v1060.i64[1] |= (v738 << 47) & 0x3000000000000 | 0x800000000000;
        }
      }
      if ((LOBYTE(v1017.f64[0]) & 1) == 0)
      {
        pthread_mutex_unlock((pthread_mutex_t *)(v680 + 72));
        v739 = (unsigned int *)(v680 + 8);
        do
        {
          v740 = __ldaxr(v739);
          v741 = v740 - 1;
        }
        while (__stlxr(v741, v739));
        if (!v741)
          (*(void (**)(uint64_t))(*(_QWORD *)v680 + 16))(v680);
      }
      v742 = *(unsigned int **)(v736 + 48);
      if (v742)
      {
        v743 = v742 + 2;
        do
        {
          v744 = __ldaxr(v743);
          v745 = v744 - 1;
        }
        while (__stlxr(v745, v743));
        if (!v745)
          (*(void (**)(unsigned int *))(*(_QWORD *)v742 + 16))(v742);
        *(_QWORD *)(v736 + 48) = 0;
      }
      v746 = (*(uint64_t (**)(_QWORD *))(*v676 + 80))(v676);
      if (v746)
      {
        v747 = v746;
        v748 = (unsigned int *)(v746 + 8);
        do
          v749 = __ldaxr(v748);
        while (__stlxr(v749 + 1, v748));
        v750 = v746;
        if (!v749)
        {
          v750 = 0;
          do
            v958 = __ldaxr(v748);
          while (__stlxr(v958 - 1, v748));
        }
        *(_QWORD *)(v1023 + 48) = v750;
        v751 = (uint64_t **)*v23;
        v752 = (*v23)[50].i8[5];
        v753 = BYTE9(xmmword_1ECDC6A90);
        v754 = (*v23)[50].u8[7];
        v755 = (v754 | v752);
        if (v755 | BYTE9(xmmword_1ECDC6A90) && *(_BYTE *)(v746 + 12) == 51 && v676[2])
        {
          if (v755)
          {
            v756 = *(const void **)(v746 + 144);
            if (v756)
            {
              X::CFRef<__CFData const*>::operator=((const void **)v751 + 112, v756);
              v1060.i64[1] |= 4uLL;
              v751 = **(uint64_t ****)&v1025.f64[0];
            }
            if ((*((_DWORD *)v751 + 103) - 3) <= 1)
            {
              *((_DWORD *)v751 + 266) |= *(_BYTE *)(v747 + 336) & 3;
              v1060.i64[1] |= 4uLL;
              if (v754)
              {
                v757 = *(const void **)(v747 + 152);
                if (v757)
                  X::CFRef<__CFData const*>::operator=((const void **)(**(_QWORD **)&v1025.f64[0] + 904), v757);
              }
            }
          }
          if (v753)
            kdebug_trace();
        }
      }
      else
      {
        v758 = v676[4];
        if (v758)
        {
          v759 = (unsigned int *)(v758 + 8);
          do
            v760 = __ldaxr(v759);
          while (__stlxr(v760 + 1, v759));
          v761 = v1023;
          if (!v760)
          {
            v758 = 0;
            do
              v960 = __ldaxr(v759);
            while (__stlxr(v960 - 1, v759));
          }
          *(_QWORD *)(v761 + 48) = v758;
        }
      }
      v23 = *(int32x2_t ***)&v1025.f64[0];
      v272 = v1023;
LABEL_1323:
      v762 = v1060.i64[1];
      if (v225)
      {
        if ((v1060.i64[1] & 0x2000000000) != 0)
        {
          v763 = (*v23)[63];
          if (v763)
          {
            v220.n128_u32[1] = 1;
            while (1)
            {
              if ((*(_BYTE *)(*(_QWORD *)&v763 + 99) & 0x10) == 0)
              {
                *(int32x2_t *)v218.i8 = v225[15];
                v764 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v218.i8);
                if ((vpmax_u32(v764, v764).u32[0] & 0x80000000) == 0)
                {
                  v765 = *(int32x2_t **)(*(_QWORD *)(*(_QWORD *)&v763 + 8) + 256);
                  v766 = v765[7];
                  v767 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v766);
                  if ((vpmax_u32(v767, v767).u32[0] & 0x80000000) == 0)
                  {
                    v768 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, vsub_s32(vmin_s32(vadd_s32(v225[14], *(int32x2_t *)v218.i8), vadd_s32(v765[6], v766)), vmax_s32(v225[14], v765[6])));
                    *(uint32x2_t *)v218.i8 = vpmax_u32(v768, v768);
                    if ((v218.i32[0] & 0x80000000) == 0)
                      break;
                  }
                }
              }
              v763 = **(int32x2_t **)&v763;
              if (!*(_QWORD *)&v763)
                goto LABEL_1332;
            }
            v762 = v1060.i64[1] | 0x800000000;
            v1060.i64[1] |= 0x800000000uLL;
          }
        }
      }
LABEL_1332:
      if ((*(_BYTE *)(*(_QWORD *)&v189 + 43) & 8) != 0)
      {
        v762 |= 0x800000000uLL;
        v1060.i64[1] = v762;
      }
      v769 = *(_QWORD *)(*(_QWORD *)&v189 + 128);
      if (v769 && *(float *)(v769 + 292) > 1.0)
      {
        v762 |= 0x800000000uLL;
        v1060.i64[1] = v762;
      }
      if ((v1060.i16[0] & 0x300) != 0)
        v762 |= 4uLL;
      v770 = ((unint64_t)v1060.i64[0] >> 5) & 8;
      v771 = v770 | v762;
      if ((v1060.i16[0] & 0x300) != 0)
        v1060.i64[1] = v770 | v762;
      v772 = v1058;
      v773 = *(_QWORD *)(v1058 + 24);
      if ((v773 & 0x10) != 0)
        v1060.i64[1] = v771 & 0xFFFFFFFFFFFFFDFFLL;
      if ((v1063 & 1) != 0)
      {
        v773 |= 0x10000uLL;
        *(_QWORD *)(v1058 + 24) = v773;
        if ((*(_BYTE *)(v8 + 66) & 2) != 0)
          (*v23)[33].i32[1] |= 4u;
      }
      v774 = *(_QWORD *)(v772 + 264);
      if (v774)
      {
        v775 = *(_QWORD *)(v774 + 24);
        if (v775)
        {
          if ((v773 & 0x40) == 0)
            goto LABEL_1353;
          if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v775 + 16))(*(_QWORD *)(v774 + 24)))
          {
            v776 = (uint64_t **)*v23;
            v777 = (*v23)[75];
            v778 = (unsigned int *)(v775 + 8);
            do
              v779 = __ldaxr(v778);
            while (__stlxr(v779 + 1, v778));
            v780 = (malloc_zone_t *)get_malloc_zone();
            v781 = (uint64_t *)malloc_type_zone_malloc(v780, 0x10uLL, 0x8BB15036uLL);
            *v781 = v775;
            v781[1] = (uint64_t)v777;
            v776[75] = v781;
            v23 = *(int32x2_t ***)&v1025.f64[0];
LABEL_1353:
            v782 = (uint64_t **)*v23;
            v783 = *(float *)&(*v23)[132].i32[1];
            if (v783 <= *(float *)(v775 + 176))
              v783 = *(float *)(v775 + 176);
            *((float *)v782 + 265) = v783;
            if (*(_BYTE *)(v775 + 152))
              v1060.i64[1] |= 0x800000000uLL;
            if (*(_BYTE *)(v775 + 153))
              v1060.i64[1] |= 0x8000000000uLL;
            v784 = *(_QWORD *)(v775 + 160);
            if (v784)
            {
              if ((*((_BYTE *)v782 + 274) & 1) != 0)
                *(_QWORD *)(v1058 + 24) |= 0x10uLL;
              v1060.i64[1] |= (unint64_t)(v784 & 7) << 47;
            }
          }
        }
        v1060.i64[1] |= 4uLL;
      }
      if (v1022.n128_u32[0])
      {
        v785 = v23[3][2].u32[0];
        v786 = *(uint64_t **)(*(_QWORD *)&v189 + 128);
        if (v786)
        {
          v787 = *v786;
          if (v787)
          {
            if (*(_BYTE *)(v787 + 12) == 30)
            {
              v788 = *(_QWORD *)(v787 + 72);
              if (v788)
                v785 = *(unsigned int *)(v788 + 16);
              else
                v785 = 0;
            }
          }
        }
        v789 = *(_QWORD *)(*(_QWORD *)&v189 + 144);
        if (v789)
        {
          v790 = *(_QWORD *)(*(_QWORD *)&v189 + 120);
          v220 = *(__n128 *)(v1058 + 160);
          *(_QWORD *)&v791 = *(unsigned int *)(v789 + 72);
          if (LODWORD(v791))
            goto LABEL_1376;
          do
            v792 = __ldaxr(CA::Render::next_cache_id(void)::cache_id);
          while (__stlxr(v792 + 1, CA::Render::next_cache_id(void)::cache_id));
          *(_QWORD *)&v791 = v792 + 1;
          *(_QWORD *)(v789 + 72) = LODWORD(v791);
          if (v792 != -1)
          {
LABEL_1376:
            v1022 = v220;
            os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::flattened_lock);
            v793 = (_QWORD *)CA::Render::flattened_cache;
            if (!CA::Render::flattened_cache)
            {
              v793 = x_hash_table_new_(0, 0, 0, 0, 0, 0);
              CA::Render::flattened_cache = (uint64_t)v793;
            }
            v795 = x_hash_table_lookup((uint64_t)v793, LODWORD(v791), 0);
            if (!v795)
            {
              v796 = (malloc_zone_t *)get_malloc_zone();
              v797 = malloc_type_zone_malloc(v796, 0x40uLL, 0x8BB15036uLL);
              v795 = (uint64_t)v797;
              if (v797)
              {
                v797[7] = 0;
                *(_OWORD *)v797 = 0u;
                *((_OWORD *)v797 + 1) = 0u;
                *((_OWORD *)v797 + 2) = 0u;
                *((_DWORD *)v797 + 12) = 0;
                v798 = (int *)CA::Render::flattened_cache;
                v799 = LODWORD(v791);
                v800 = v795;
              }
              else
              {
                v798 = (int *)CA::Render::flattened_cache;
                v799 = LODWORD(v791);
                v800 = 0;
              }
              hash_table_modify(v798, v799, v800, 0);
            }
            v23 = *(int32x2_t ***)&v1025.f64[0];
            v272 = v1023;
            if (v1016)
            {
              v801 = *(CA::Shape **)(v795 + 40);
              if (v801)
                CA::Shape::unref(v801);
              *(_QWORD *)(v795 + 40) = CA::Shape::ref(v1016, v794);
            }
            v802 = v1022;
            if (v790)
            {
              v803 = *(unsigned int **)(v795 + 56);
              if (v803)
              {
                v804 = v803 + 2;
                do
                {
                  v805 = __ldaxr(v804);
                  v806 = v805 - 1;
                }
                while (__stlxr(v806, v804));
                if (!v806)
                {
                  (*(void (**)(unsigned int *, __n128))(*(_QWORD *)v803 + 16))(v803, v802);
                  v802 = v1022;
                }
              }
              v807 = (unsigned int *)(v790 + 8);
              do
                v808 = __ldaxr(v807);
              while (__stlxr(v808 + 1, v807));
              v809 = v790;
              if (!v808)
              {
                v809 = 0;
                do
                  v937 = __ldaxr(v807);
                while (__stlxr(v937 - 1, v807));
              }
              *(_QWORD *)(v795 + 56) = v809;
            }
            *(_DWORD *)(v795 + 48) = v785;
            *(__n128 *)(v795 + 8) = v802;
            if ((_BYTE)xmmword_1ECDC6AF0)
            {
              v1048 = 0uLL;
              if (v1016)
                CA::Shape::get_bounds(v1016, (int *)&v1048);
              if (v790)
                v932 = (const char *)(v790 + 28);
              else
                v932 = "";
              if (x_log_hook_p())
              {
                *(_QWORD *)&v998[64] = v1022.n128_u32[2];
                *(_QWORD *)&v998[72] = v1022.n128_u32[3];
                *(_QWORD *)&v998[48] = v1022.n128_u32[0];
                *(_QWORD *)&v998[56] = v1022.n128_u32[1];
                *(_QWORD *)&v998[32] = HIDWORD(v1048.f64[1]);
                *(_QWORD *)&v998[40] = v785;
                *(_QWORD *)&v998[16] = HIDWORD(v1048.f64[0]);
                *(_QWORD *)&v998[24] = LODWORD(v1048.f64[1]);
                *(_QWORD *)v998 = v932;
                *(_QWORD *)&v998[8] = LODWORD(v1048.f64[0]);
                v997.f64[1] = v791;
                x_log_();
              }
              else
              {
                v938 = x_log_category_flatten;
                if (os_log_type_enabled((os_log_t)x_log_category_flatten, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(v1064[0].f64[0]) = 67111682;
                  HIDWORD(v1064[0].f64[0]) = LODWORD(v791);
                  LOWORD(v1064[0].f64[1]) = 2080;
                  *(_QWORD *)((char *)&v1064[0].f64[1] + 2) = v932;
                  WORD1(v1064[1].f64[0]) = 1024;
                  HIDWORD(v1064[1].f64[0]) = LODWORD(v1048.f64[0]);
                  LOWORD(v1064[1].f64[1]) = 1024;
                  *(_DWORD *)((char *)&v1064[1].f64[1] + 2) = HIDWORD(v1048.f64[0]);
                  HIWORD(v1064[1].f64[1]) = 1024;
                  LODWORD(v1064[2].f64[0]) = LODWORD(v1048.f64[1]);
                  WORD2(v1064[2].f64[0]) = 1024;
                  *(_DWORD *)((char *)v1064[2].f64 + 6) = HIDWORD(v1048.f64[1]);
                  WORD1(v1064[2].f64[1]) = 1024;
                  HIDWORD(v1064[2].f64[1]) = v785;
                  LOWORD(v1064[3].f64[0]) = 1024;
                  *(_DWORD *)((char *)v1064[3].f64 + 2) = v1022.n128_u32[0];
                  HIWORD(v1064[3].f64[0]) = 1024;
                  LODWORD(v1064[3].f64[1]) = v1022.n128_u32[1];
                  WORD2(v1064[3].f64[1]) = 1024;
                  *(_DWORD *)((char *)&v1064[3].f64[1] + 6) = v1022.n128_u32[2];
                  WORD1(v1064[4].f64[0]) = 1024;
                  HIDWORD(v1064[4].f64[0]) = v1022.n128_u32[3];
                  _os_log_impl(&dword_184457000, v938, OS_LOG_TYPE_DEFAULT, "[%d] cached flatten info [%s] [%d %d %d %d] [%x] [%d %d %d %d]", (uint8_t *)v1064, 0x48u);
                }
              }
              v23 = *(int32x2_t ***)&v1025.f64[0];
              v225 = (int32x2_t *)v1019;
              v272 = v1023;
              v189 = v1024.f64[0];
            }
            os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::flattened_lock);
          }
        }
      }
      v810 = v1058;
      if ((*(_BYTE *)(v1058 + 24) & 0x10) != 0)
      {
        v829 = v1060.i64[0];
        if ((v1060.i64[0] & 0x78000) != 0)
        {
          (*v23)[33].i32[1] |= 4u;
          v1060.i64[0] = v829 & 0xFFFFFFFFFFF87FFFLL;
        }
        v1060.i64[1] &= 0xFFF87E011E3FFFFFLL;
        if (v1034)
          *(_QWORD *)(v810 + 224) = 1;
        goto LABEL_1560;
      }
      v811 = *(_DWORD *)(v272 + 184);
      v812 = *(_DWORD *)(v272 + 188);
      if (v811 <= v812)
        v813 = *(_DWORD *)(v272 + 188);
      else
        v813 = *(_DWORD *)(v272 + 184);
      v220.n128_u32[0] = 1073741822;
      v218.i32[0] = v813;
      v814 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v218, (int32x4_t)v220), 0);
      v815 = *(_QWORD *)(v272 + 176);
      v816.i64[0] = (int)v815;
      v816.i64[1] = SHIDWORD(v815);
      v817 = vbslq_s8(v814, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v816));
      v818 = (double)v811;
      if (v813 > 1073741822)
        v818 = 1.79769313e308;
      v1064[0] = (float64x2_t)v817;
      if (v813 <= 1073741822)
        v819 = (double)v812;
      else
        v819 = 1.79769313e308;
      v1064[1].f64[0] = v818;
      v1064[1].f64[1] = v819;
      v820 = v1020;
      CA::Render::Updater::LayerShapes::union_bounds(v1020, v1064, 0);
      v824 = *(uint64_t **)(*(_QWORD *)&v189 + 128);
      if (v824)
      {
        v825 = *v824;
        if (v825)
        {
          if (*(_BYTE *)(v825 + 12) == 30)
          {
            v826 = *(_DWORD *)(v272 + 184);
            if (v826 >= *(_DWORD *)(v272 + 188))
              v826 = *(_DWORD *)(v272 + 188);
            if (v826 >= 1)
            {
              v827 = *(_QWORD *)(v825 + 72);
              v828 = v827 ? (CA::Render::Context *)*(unsigned int *)(v827 + 16) : 0;
              v830 = CA::Render::Context::context_by_id(v828);
              if (v830)
              {
                v831 = (__int32 *)v830;
                v832 = (uint64_t **)*v23;
                v833 = (__int32 *)(*v23)[115];
                v834 = (*v23)[116];
                v835 = wmemchr(v833, v831[66], (uint64_t)(*(_QWORD *)&v834 - (_QWORD)v833) >> 2);
                if (v835)
                  v836 = v835;
                else
                  v836 = (__int32 *)v834;
                if (v836 == (__int32 *)v832[116])
                {
                  LODWORD(v1064[0].f64[0]) = v831[66];
                  X::small_vector_base<unsigned int>::push_back((uint64_t)(v832 + 115), v1064);
                }
                v837 = (unsigned int *)(v831 + 2);
                do
                {
                  v838 = __ldaxr(v837);
                  v839 = v838 - 1;
                }
                while (__stlxr(v839, v837));
                v23 = *(int32x2_t ***)&v1025.f64[0];
                if (!v839)
                  (*(void (**)(__int32 *))(*(_QWORD *)v831 + 16))(v831);
              }
            }
          }
        }
      }
      if (v1032 && !*((_BYTE *)v1032 + 16))
        *(_QWORD *)(v1058 + 24) |= 0x100000uLL;
      v840 = (CA::Shape **)v1033;
      if (v1033 && (v1063 & 2) == 0)
      {
        if ((v1033 & 1) != 0)
        {
          if (v1033 != 1)
            goto LABEL_1440;
        }
        else
        {
          if (*(_DWORD *)(v1033 + 4) == 6)
            goto LABEL_1445;
LABEL_1440:
          if (!CA::Bounds::contains((CA::Bounds *)&v1039, v1033))
          {
            CA::shape_intersect((CA::Shape **)&v1033, (CA::Shape **)&v1039, v841);
            v840 = (CA::Shape **)v1033;
          }
          if (v820[3].n128_u64[1])
          {
            CA::shape_union((CA::Shape **)&v820[3].n128_u64[1], v840, v841);
            v840 = (CA::Shape **)v1033;
          }
          CA::Render::Update::fullfill_backdrops((uint64_t)*v23, (const CA::Shape *)v840);
          CA::Render::Update::add_opaque_shape((CA::Shape **)*v23, (CA::Shape **)v1033, v842);
        }
LABEL_1445:
        if ((v1060.i8[2] & 0x10) == 0)
        {
          *(_QWORD *)(v1058 + 208) = v1033;
          v1033 = 0;
        }
      }
      if (!v1034)
        goto LABEL_1478;
      v843 = vceqzq_f64((float64x2_t)v1038);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v843, 1), (int8x16_t)v843).u64[0] & 0x8000000000000000) != 0
        || (v844 = vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v1038), (int8x16_t)vcgezq_f64((float64x2_t)v1038)),
            (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v844), 1), v844).u64[0] & 0x8000000000000000) != 0))
      {
        v1064[0] = 0uLL;
      }
      else
      {
        v845 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v1037, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        v1064[0] = (float64x2_t)vuzp1q_s32(v845, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v1037, (float64x2_t)v1038), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v845));
      }
      CA::shape_intersect(v1021, (CA::Shape **)v1064, v821);
      v847 = (CA::Shape **)&v820[4];
      if (!v820[4].n128_u64[0])
        goto LABEL_1477;
      v848 = (const CA::Shape *)v820[4].n128_u64[1];
      if (!v848)
        goto LABEL_1467;
      if (!v225 || !v1035)
      {
        if (v225)
          goto LABEL_1465;
        goto LABEL_1471;
      }
      if ((v225[12].i32[0] & 0x78000) == 0)
        goto LABEL_1465;
      v849 = v8;
      v850 = CA::Shape::intersect(v820[4].n128_i64[1], v1035);
      v851 = (CA::Shape *)v850;
      if ((v850 & 1) != 0)
      {
        if (v850 == 1)
          goto LABEL_1464;
        goto LABEL_1463;
      }
      if (*(_DWORD *)(v850 + 4) != 6)
      {
LABEL_1463:
        v852 = (CA::Shape **)CA::Shape::dilate(v850, (const CA::Bounds *)1, 1u);
        CA::Render::Updater::LayerShapes::union_visible_shape((uint64_t)v820, v852, v853);
        CA::Render::Updater::LayerShapes::union_visible_shape((uint64_t)&v1029, v852, v854);
        CA::shape_subtract((CA::Shape **)&v820[4].n128_u64[1], v852, v855, v856);
        v1060.i64[1] |= 0x40uLL;
        CA::Shape::unref((CA::Shape *)v852);
      }
LABEL_1464:
      CA::Shape::unref(v851);
      v8 = v849;
      v23 = *(int32x2_t ***)&v1025.f64[0];
LABEL_1465:
      if ((v225[12].i32[0] & 0x78000) == 0)
      {
        v848 = (const CA::Shape *)v820[4].n128_u64[1];
LABEL_1471:
        v860 = (CA::Shape **)CA::Shape::subtract((CA::Shape *)v1034, v848, (uint64_t)v821, v846);
        if (*v847)
        {
          CA::shape_union((CA::Shape **)&v820[4], v860, v859);
          v861 = *v847;
          if ((*v847 & 1) == 0 && *((int *)v861 + 1) >= 257)
          {
            v1064[0] = 0uLL;
            CA::Shape::get_bounds((uint64_t)v861, (int *)v1064);
            CA::Shape::unref(*v847);
            *v847 = (CA::Shape *)CA::Shape::new_shape((CA::Shape *)v1064, v862);
          }
        }
        CA::Shape::unref((CA::Shape *)v860);
        goto LABEL_1476;
      }
      if (*v847)
      {
LABEL_1467:
        CA::shape_union((CA::Shape **)&v820[4], (CA::Shape **)v1034, v821);
        v857 = *v847;
        if ((*v847 & 1) == 0 && *((int *)v857 + 1) >= 257)
        {
          v1064[0] = 0uLL;
          CA::Shape::get_bounds((uint64_t)v857, (int *)v1064);
          CA::Shape::unref(*v847);
          *v847 = (CA::Shape *)CA::Shape::new_shape((CA::Shape *)v1064, v858);
        }
      }
LABEL_1476:
      CA::Render::Update::add_visible_shape((CA::Shape **)*v23, (CA::Shape **)v1034, v821);
LABEL_1477:
      *(_QWORD *)(v1058 + 224) = v1034;
      v1034 = 0;
LABEL_1478:
      v863 = v1035;
      if (v1035)
      {
        if (v820[4].n128_u64[1])
        {
          CA::shape_union((CA::Shape **)&v820[4].n128_u64[1], (CA::Shape **)v1035, v821);
          v863 = v1035;
        }
        v864 = v1058;
        *(_QWORD *)(v1058 + 232) = v863;
        v1035 = 0;
      }
      else
      {
        v864 = v1058;
      }
      v865 = *(_DWORD *)(v864 + 168);
      if (v865)
      {
        v866 = *((_QWORD *)v1059 + 5);
        if ((v866 & 0x40) != 0 && !*(_QWORD *)(v864 + 128))
        {
          v867 = *((_QWORD *)v1059 + 16);
          v868 = 0.0;
          if (!v867)
            goto LABEL_1489;
          if (!*(_QWORD *)(v867 + 112))
          {
            v868 = *(float *)(v867 + 228);
LABEL_1489:
            v870 = *((float64x2_t *)v1059 + 4);
            v869 = *((float64x2_t *)v1059 + 5);
            v1064[0] = v870;
            v1064[1] = v869;
            if ((*((_BYTE *)v1059 + 38) & 0xF) == 0)
              v868 = 0.0;
            v871 = v869.f64[1];
            if (v867 && *(_QWORD *)(v867 + 72))
            {
              v1024 = v870;
              v1025 = v869;
              CA::Render::Layer::max_corner_radii(v867);
              v870 = v1024;
              v869.f64[0] = v1025.f64[0];
              v868 = *(double *)v822.i64;
            }
            if (v869.f64[0] <= v871)
              *(double *)v822.i64 = v871;
            else
              *(double *)v822.i64 = v869.f64[0];
            v823.i32[1] = 2146435071;
            if (*(double *)v822.i64 < 1.79769313e308)
            {
              *(double *)v822.i64 = v869.f64[0] >= v871 ? v871 : v869.f64[0];
              if (*(double *)v822.i64 > 0.0)
              {
                v822 = (int32x4_t)vaddq_f64(v870, (float64x2_t)vdupq_n_s64(0xBEE4F8B588E368F1));
                v1064[0] = (float64x2_t)v822;
                *(double *)v823.i64 = v869.f64[0] + 0.00002;
                *(double *)v822.i64 = v871 + 0.00002;
                v1064[1].f64[0] = v869.f64[0] + 0.00002;
                v1064[1].f64[1] = v871 + 0.00002;
                if (v869.f64[0] + 0.00002 <= 0.0 || *(double *)v822.i64 <= 0.0)
                  v1064[1] = 0uLL;
              }
            }
            v872 = *(_DWORD *)(v864 + 172);
            if (v865 <= v872)
              v873 = *(_DWORD *)(v864 + 172);
            else
              v873 = v865;
            v822.i32[0] = 1073741822;
            v823.i32[0] = v873;
            v874 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v823, v822), 0);
            v875 = *(_QWORD *)(v864 + 160);
            v876.i64[0] = (int)v875;
            v876.i64[1] = SHIDWORD(v875);
            v877 = vbslq_s8(v874, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v876));
            v878 = (double)v865;
            v879 = (double)v872;
            if (v873 > 1073741822)
            {
              v878 = 1.79769313e308;
              v879 = 1.79769313e308;
            }
            v1048 = (float64x2_t)v877;
            v1049.f64[0] = v878;
            v1049.f64[1] = v879;
            if (v868 == 0.0)
            {
LABEL_1511:
              if (!CA::BoundsImpl::contains(v1064[0].f64, v1048.f64))
                goto LABEL_1542;
              goto LABEL_1541;
            }
            if (v867 && *(_QWORD *)(v867 + 56))
            {
              v880 = v868;
              if ((v866 & 0x20000000000) != 0)
              {
                CA::BoundsImpl::inset(v1064[0].f64, v868, v868);
                goto LABEL_1511;
              }
              v882 = v1064[0];
              v881 = v1064[1];
            }
            else
            {
              v880 = v868;
              v1024 = v1064[0];
              v1025 = v1064[1];
              v1046 = v1064[0];
              v1047 = v1064[1];
              CA::BoundsImpl::inset(v1046.f64, v868 * 0.322182541, v868 * 0.322182541);
              v883 = CA::BoundsImpl::contains(v1046.f64, v1048.f64);
              v882 = v1024;
              v881 = v1025;
              if (v883)
                goto LABEL_1541;
            }
            v884 = v880 * 1.52866;
            if ((v866 & 3) == 0)
              v884 = v868;
            v1046 = v882;
            v1047 = v881;
            v885 = v884;
            v886 = v881.f64[1];
            if (v881.f64[0] <= v881.f64[1])
              v887 = v881.f64[1];
            else
              v887 = v881.f64[0];
            if (v887 < 1.79769313e308)
            {
              v888 = v881.f64[0] >= v881.f64[1] ? v881.f64[1] : v881.f64[0];
              if (v888 > 0.0)
              {
                v1046.f64[0] = v882.f64[0] + v885;
                v1047.f64[0] = v881.f64[0] - (v885 + v885);
                v1047.f64[1] = v881.f64[1];
                if (v1047.f64[0] <= 0.0 || v881.f64[1] <= 0.0)
                  v1047 = 0uLL;
              }
            }
            v1024 = v882;
            v1025 = v881;
            if (CA::BoundsImpl::contains(v1046.f64, v1048.f64))
              goto LABEL_1541;
            v1044 = v1024;
            v1045 = v1025;
            if (v887 < 1.79769313e308)
            {
              v889 = v1025.f64[0] >= v886 ? v886 : v1025.f64[0];
              if (v889 > 0.0)
              {
                v1044.f64[1] = v1024.f64[1] + v885;
                v1045.f64[0] = v1025.f64[0];
                v1045.f64[1] = v886 - (v885 + v885);
                if (v1025.f64[0] <= 0.0 || v886 - (v885 + v885) <= 0.0)
                  v1045 = 0uLL;
              }
            }
            if (CA::BoundsImpl::contains(v1044.f64, v1048.f64))
LABEL_1541:
              *(_QWORD *)(v864 + 24) |= 0x2000uLL;
          }
        }
LABEL_1542:
        v890 = (int32x2_t *)v820[5].n128_u64[0];
        if (v890)
        {
          v891 = *(_DWORD *)(v864 + 168);
          v892 = *(_DWORD *)(v864 + 172);
          if (v891 <= v892)
            v893 = *(_DWORD *)(v864 + 172);
          else
            v893 = *(_DWORD *)(v864 + 168);
          v822.i32[0] = 1073741822;
          v823.i32[0] = v893;
          v894 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v823, v822), 0);
          v895 = *(_QWORD *)(v864 + 160);
          v896.i64[0] = (int)v895;
          v896.i64[1] = SHIDWORD(v895);
          v897 = (float64x2_t)vbslq_s8(v894, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v896));
          v898 = (double)v891;
          v899 = (double)v892;
          if (v893 > 1073741822)
          {
            v898 = 1.79769313e308;
            v899 = 1.79769313e308;
          }
          v1064[0] = v897;
          v1064[1].f64[0] = v898;
          v1064[1].f64[1] = v899;
          v900 = *(float64x2_t **)(v864 + 56);
          if (v900)
          {
            CA::Mat4Impl::mat4_apply_to_rect(v900, (int8x16_t *)v1064, (double *)v821);
            v901 = v1064[0];
          }
          else
          {
            v901 = vaddq_f64(v897, *(float64x2_t *)(v864 + 64));
          }
          v902 = vceqzq_f64(v1064[1]);
          v903 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v902, 1), (int8x16_t)v902).u64[0];
          v904 = 0uLL;
          if ((v903 & 0x8000000000000000) == 0)
          {
            v905 = vorrq_s8((int8x16_t)vcltzq_f64(v1064[1]), (int8x16_t)vcgezq_f64(v1064[1]));
            if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v905), 1), v905).u64[0] & 0x8000000000000000) == 0)
            {
              v906 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v901, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
              v904 = (int8x16_t)vuzp1q_s32(v906, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v901, v1064[1]), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v906));
            }
          }
          CA::BoundsImpl::Union(v890, *(int32x2_t *)v904.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v904, v904, 8uLL));
        }
      }
      v225 = (int32x2_t *)v1019;
      if (v1060.i8[10] < 0)
      {
        v907 = (*v23)[133].u32[0] | ((unint64_t)(*v23)[133].u16[2] << 32);
        if ((v907 & 0x1000000000) != 0 && (_DWORD)v1014 != 5 && v1014 > ((v907 >> 37) & 7))
        {
          v908 = (uint64_t)&(*v23)[133];
          v909 = v907 & 0xFFFFFF1FFFFFFFFFLL;
          v910 = v909 | (v1014 << 37);
          *(_DWORD *)v908 = v909;
          *(_WORD *)(v908 + 4) = WORD2(v910);
        }
      }
LABEL_1560:
      if (v1033)
        CA::Shape::unref((CA::Shape *)v1033);
      if (v1034)
        CA::Shape::unref((CA::Shape *)v1034);
      if (v1035)
        CA::Shape::unref((CA::Shape *)v1035);
      if (v1032)
      {
        v911 = (_QWORD *)v1032[1];
        if (v911)
          CA::GenericRectTree<CA::Rect>::Pool::delete_node(*v1032, v911);
      }
      v912 = v1060.i64[1];
      if ((v1060.i64[1] & 0x1800000000) != 0)
      {
        *(_QWORD *)(v1058 + 24) |= 0x400uLL;
        goto LABEL_1572;
      }
      if (v1060.i64[1])
      {
LABEL_1572:
        if (v225)
          *(_QWORD *)&v225[12] |= v912;
        if ((v912 & 0x3F) != 0)
          v913 = v912 | 0x20;
        else
          v913 = v1060.i64[1];
        v1060.i64[1] = (2 * v913) & 0x15480000000 | v913;
        *v1018 |= (2 * v913) & 0x15480000000 | v913 & 0x407C15581C06020;
      }
      v914 = *(_QWORD *)(v8 + 48);
      if (v914)
        *(_QWORD *)(v914 + 24) |= *(_QWORD *)(v1058 + 24) & 0x10481400;
      return 1;
    case 'p':
      v401 = v392;
      v402 = CA::Render::KeyValueArray::get_float_key(v397, (const CA::Render::KeyValueArray *)0x10E, 0.5);
      v403 = 0.5;
LABEL_728:
      if (v402 == CA::Render::KeyValueArray::get_float_key(v1002, (const CA::Render::KeyValueArray *)0x10E, v403))
        goto LABEL_729;
      goto LABEL_892;
    default:
      if (v396 != 158)
        goto LABEL_1597;
      if (!v397)
      {
        v447 = 0;
        v427 = v1002;
        goto LABEL_794;
      }
      v426 = *((unsigned int *)v397 + 4);
      v427 = v1002;
      if (!(_DWORD)v426)
        goto LABEL_793;
      v428 = 0;
      while (1)
      {
        v429 = *((_QWORD *)v397 + v428 + 3);
        if (*(_DWORD *)(v429 + 16) == 304)
          break;
        if (v426 == ++v428)
          goto LABEL_793;
      }
      if ((v428 & 0x80000000) == 0)
      {
        v447 = *(_QWORD *)(v429 + 24);
        goto LABEL_794;
      }
LABEL_793:
      v447 = 0;
      if (!v427)
        goto LABEL_802;
      v464 = *((unsigned int *)v427 + 4);
      if (!(_DWORD)v464)
        goto LABEL_802;
LABEL_794:
      v465 = 0;
      while (1)
      {
        v466 = *((_QWORD *)v427 + v465 + 3);
        if (*(_DWORD *)(v466 + 16) == 304)
          break;
        if (v464 == ++v465)
          goto LABEL_802;
      }
      if ((v465 & 0x80000000) == 0)
      {
        v401 = v392;
        v467 = *(_QWORD *)(v466 + 24);
      }
      else
      {
LABEL_802:
        v401 = v392;
        v467 = 0;
      }
      if (!CA::Render::curves_equal(v447, v467, v371))
        goto LABEL_892;
      if (!v397)
        goto LABEL_843;
      v469 = *((unsigned int *)v397 + 4);
      if (!(_DWORD)v469)
        goto LABEL_843;
      v470 = 0;
      while (1)
      {
        v471 = *((_QWORD *)v397 + v470 + 3);
        if (*(_DWORD *)(v471 + 16) == 291)
          break;
        if (v469 == ++v470)
          goto LABEL_843;
      }
      if ((v470 & 0x80000000) == 0)
        v481 = *(_QWORD *)(v471 + 24);
      else
LABEL_843:
        v481 = 0;
      if (!v1002)
        goto LABEL_852;
      v482 = *((unsigned int *)v1002 + 4);
      if (!(_DWORD)v482)
        goto LABEL_852;
      v483 = 0;
      while (1)
      {
        v484 = *((_QWORD *)v1002 + v483 + 3);
        if (*(_DWORD *)(v484 + 16) == 291)
          break;
        if (v482 == ++v483)
          goto LABEL_852;
      }
      if ((v483 & 0x80000000) == 0)
        v485 = *(_QWORD *)(v484 + 24);
      else
LABEL_852:
        v485 = 0;
      if (!CA::Render::curves_equal(v481, v485, v468))
        goto LABEL_892;
      if (!v397)
        goto LABEL_862;
      v487 = *((unsigned int *)v397 + 4);
      if (!(_DWORD)v487)
        goto LABEL_862;
      v488 = 0;
      while (1)
      {
        v489 = *((_QWORD *)v397 + v488 + 3);
        if (*(_DWORD *)(v489 + 16) == 278)
          break;
        if (v487 == ++v488)
          goto LABEL_862;
      }
      if ((v488 & 0x80000000) == 0)
        v490 = *(_QWORD *)(v489 + 24);
      else
LABEL_862:
        v490 = 0;
      if (!v1002)
        goto LABEL_871;
      v491 = *((unsigned int *)v1002 + 4);
      if (!(_DWORD)v491)
        goto LABEL_871;
      v492 = 0;
      while (1)
      {
        v493 = *((_QWORD *)v1002 + v492 + 3);
        if (*(_DWORD *)(v493 + 16) == 278)
          break;
        if (v491 == ++v492)
          goto LABEL_871;
      }
      if ((v492 & 0x80000000) == 0)
        v494 = *(_QWORD *)(v493 + 24);
      else
LABEL_871:
        v494 = 0;
      if (!CA::Render::curves_equal(v490, v494, v486))
        goto LABEL_892;
      if (!v397)
        goto LABEL_881;
      v496 = *((unsigned int *)v397 + 4);
      if (!(_DWORD)v496)
        goto LABEL_881;
      v497 = 0;
      while (1)
      {
        v498 = *((_QWORD *)v397 + v497 + 3);
        if (*(_DWORD *)(v498 + 16) == 269)
          break;
        if (v496 == ++v497)
          goto LABEL_881;
      }
      if ((v497 & 0x80000000) == 0)
        v499 = *(_QWORD *)(v498 + 24);
      else
LABEL_881:
        v499 = 0;
      if (!v1002)
        goto LABEL_890;
      v500 = *((unsigned int *)v1002 + 4);
      if (!(_DWORD)v500)
        goto LABEL_890;
      v501 = 0;
      while (1)
      {
        v502 = *((_QWORD *)v1002 + v501 + 3);
        if (*(_DWORD *)(v502 + 16) == 269)
          break;
        if (v500 == ++v501)
          goto LABEL_890;
      }
      if ((v501 & 0x80000000) == 0)
        v503 = *(_QWORD *)(v502 + 24);
      else
LABEL_890:
        v503 = 0;
      if (!CA::Render::curves_equal(v499, v503, v495))
      {
LABEL_892:
        v389 = (int32x4_t)v1015;
        LODWORD(v392) = (_DWORD)v401;
        goto LABEL_1597;
      }
LABEL_729:
      v389 = (int32x4_t)v1015;
      v392 = v401;
      goto LABEL_839;
  }
}

